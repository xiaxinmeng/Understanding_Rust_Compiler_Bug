{"sha": "28ea03e11477032a29b30284487d6d73e181ecaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZWEwM2UxMTQ3NzAzMmEyOWIzMDI4NDQ4N2Q2ZDczZTE4MWVjYWY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-01-13T03:25:03Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-01-13T03:25:03Z"}, "message": "Suggest correct location for lifetime parameters in use", "tree": {"sha": "8c5ae05fac65d0d2ebea41edd1c79cf28eb0a29a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c5ae05fac65d0d2ebea41edd1c79cf28eb0a29a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28ea03e11477032a29b30284487d6d73e181ecaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28ea03e11477032a29b30284487d6d73e181ecaf", "html_url": "https://github.com/rust-lang/rust/commit/28ea03e11477032a29b30284487d6d73e181ecaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28ea03e11477032a29b30284487d6d73e181ecaf/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db740313e023c76a2b354981e352ebcf6d7d57e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/db740313e023c76a2b354981e352ebcf6d7d57e2", "html_url": "https://github.com/rust-lang/rust/commit/db740313e023c76a2b354981e352ebcf6d7d57e2"}], "stats": {"total": 129, "additions": 82, "deletions": 47}, "files": [{"sha": "4d0401097c46d3d280552edad9ed07404fcdb19e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/28ea03e11477032a29b30284487d6d73e181ecaf/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ea03e11477032a29b30284487d6d73e181ecaf/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=28ea03e11477032a29b30284487d6d73e181ecaf", "patch": "@@ -5330,37 +5330,46 @@ impl<'a> Parser<'a> {\n \n     /// Parses (possibly empty) list of lifetime and type arguments and associated type bindings,\n     /// possibly including trailing comma.\n-    fn parse_generic_args(&mut self)\n-                          -> PResult<'a, (Vec<GenericArg>, Vec<TypeBinding>)> {\n+    fn parse_generic_args(&mut self) -> PResult<'a, (Vec<GenericArg>, Vec<TypeBinding>)> {\n         let mut args = Vec::new();\n         let mut bindings = Vec::new();\n         let mut seen_type = false;\n         let mut seen_binding = false;\n+        let mut first_type_or_binding_span: Option<Span> = None;\n+        let mut bad_lifetime_pos = vec![];\n+        let mut last_comma_span = None;\n+        let mut suggestions = vec![];\n         loop {\n             if self.check_lifetime() && self.look_ahead(1, |t| !t.is_like_plus()) {\n                 // Parse lifetime argument.\n                 args.push(GenericArg::Lifetime(self.expect_lifetime()));\n                 if seen_type || seen_binding {\n-                    self.struct_span_err(\n-                        self.prev_span,\n-                        \"lifetime parameters must be declared prior to type parameters\"\n-                    )\n-                        .span_label(self.prev_span, \"must be declared prior to type parameters\")\n-                        .emit();\n+                    let remove_sp = last_comma_span.unwrap_or(self.prev_span).to(self.prev_span);\n+                    bad_lifetime_pos.push(self.prev_span);\n+                    if let Ok(snippet) = self.sess.source_map().span_to_snippet(self.prev_span) {\n+                        suggestions.push((remove_sp, String::new()));\n+                        suggestions.push((\n+                            first_type_or_binding_span.unwrap().shrink_to_lo(),\n+                            format!(\"{}, \", snippet)));\n+                    }\n                 }\n             } else if self.check_ident() && self.look_ahead(1, |t| t == &token::Eq) {\n                 // Parse associated type binding.\n                 let lo = self.span;\n                 let ident = self.parse_ident()?;\n                 self.bump();\n                 let ty = self.parse_ty()?;\n+                let span = lo.to(self.prev_span);\n                 bindings.push(TypeBinding {\n                     id: ast::DUMMY_NODE_ID,\n                     ident,\n                     ty,\n-                    span: lo.to(self.prev_span),\n+                    span,\n                 });\n                 seen_binding = true;\n+                if first_type_or_binding_span.is_none() {\n+                    first_type_or_binding_span = Some(span);\n+                }\n             } else if self.check_type() {\n                 // Parse type argument.\n                 let ty_param = self.parse_ty()?;\n@@ -5375,6 +5384,9 @@ impl<'a> Parser<'a> {\n                         )\n                         .emit();\n                 }\n+                if first_type_or_binding_span.is_none() {\n+                    first_type_or_binding_span = Some(ty_param.span);\n+                }\n                 args.push(GenericArg::Type(ty_param));\n                 seen_type = true;\n             } else {\n@@ -5383,8 +5395,30 @@ impl<'a> Parser<'a> {\n \n             if !self.eat(&token::Comma) {\n                 break\n+            } else {\n+                last_comma_span = Some(self.prev_span);\n             }\n         }\n+        if !bad_lifetime_pos.is_empty() {\n+            let mut err = self.struct_span_err(\n+                bad_lifetime_pos.clone(),\n+                \"lifetime parameters must be declared prior to type parameters\"\n+            );\n+            for sp in &bad_lifetime_pos {\n+                err.span_label(*sp, \"must be declared prior to type parameters\");\n+            }\n+            if !suggestions.is_empty() {\n+                err.multipart_suggestion_with_applicability(\n+                    &format!(\n+                        \"move the lifetime parameter{} prior to the first type parameter\",\n+                        if bad_lifetime_pos.len() > 1 { \"s\" } else { \"\" },\n+                    ),\n+                    suggestions,\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+            err.emit();\n+        }\n         Ok((args, bindings))\n     }\n "}, {"sha": "17b9b766b21816f75d23d2d2c0698e35f1253ea1", "filename": "src/test/ui/parser/issue-14303-fncall.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/28ea03e11477032a29b30284487d6d73e181ecaf/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ea03e11477032a29b30284487d6d73e181ecaf/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs?ref=28ea03e11477032a29b30284487d6d73e181ecaf", "patch": "@@ -1,8 +1,17 @@\n-fn main() {\n-    (0..4)\n-    .map(|x| x * 2)\n-    .collect::<Vec<'a, usize, 'b>>()\n-    //~^ ERROR lifetime parameters must be declared prior to type parameters\n-    //~| ERROR use of undeclared lifetime name\n-    //~| ERROR use of undeclared lifetime name\n+// can't run rustfix because it doesn't handle multipart suggestions correctly\n+// compile-flags: -Zborrowck=mir\n+// we need the above to avoid ast borrowck failure in recovered code\n+\n+struct S<'a, T> {\n+    a: &'a T,\n+    b: &'a T,\n }\n+\n+fn foo<'a, 'b>(start: &'a usize, end: &'a usize) {\n+    let _x = (*start..*end)\n+        .map(|x| S { a: start, b: end })\n+        .collect::<Vec<S<_, 'a>>>();\n+        //~^ ERROR lifetime parameters must be declared prior to type parameters\n+}\n+\n+fn main() {}"}, {"sha": "2a7364915949efd3dbbeb3569b9f404543b929dd", "filename": "src/test/ui/parser/issue-14303-fncall.stderr", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/28ea03e11477032a29b30284487d6d73e181ecaf/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28ea03e11477032a29b30284487d6d73e181ecaf/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.stderr?ref=28ea03e11477032a29b30284487d6d73e181ecaf", "patch": "@@ -1,21 +1,12 @@\n error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/issue-14303-fncall.rs:4:31\n+  --> $DIR/issue-14303-fncall.rs:13:29\n    |\n-LL |     .collect::<Vec<'a, usize, 'b>>()\n-   |                               ^^ must be declared prior to type parameters\n-\n-error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/issue-14303-fncall.rs:4:20\n-   |\n-LL |     .collect::<Vec<'a, usize, 'b>>()\n-   |                    ^^ undeclared lifetime\n-\n-error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/issue-14303-fncall.rs:4:31\n+LL |         .collect::<Vec<S<_, 'a>>>();\n+   |                             ^^ must be declared prior to type parameters\n+help: move the lifetime parameter prior to the first type parameter\n    |\n-LL |     .collect::<Vec<'a, usize, 'b>>()\n-   |                               ^^ undeclared lifetime\n+LL |         .collect::<Vec<S<'a, _>>>();\n+   |                          ^^^ --\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0261`."}, {"sha": "a08c89f3437b4be1c97fd7dc65d26077f1fdf808", "filename": "src/test/ui/parser/issue-14303-path.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ea03e11477032a29b30284487d6d73e181ecaf/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ea03e11477032a29b30284487d6d73e181ecaf/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.rs?ref=28ea03e11477032a29b30284487d6d73e181ecaf", "patch": "@@ -9,6 +9,5 @@ mod foo {\n \n fn bar<'a, 'b, 'c, T>(x: foo::X<'a, T, 'b, 'c>) {}\n //~^ ERROR lifetime parameters must be declared prior to type parameters\n-//~| ERROR lifetime parameters must be declared prior to type parameters\n \n fn main() {}"}, {"sha": "fb4fb32e11e50021d11fdf0841ec59a09d1ac0a1", "filename": "src/test/ui/parser/issue-14303-path.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/28ea03e11477032a29b30284487d6d73e181ecaf/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28ea03e11477032a29b30284487d6d73e181ecaf/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.stderr?ref=28ea03e11477032a29b30284487d6d73e181ecaf", "patch": "@@ -2,13 +2,13 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/issue-14303-path.rs:10:40\n    |\n LL | fn bar<'a, 'b, 'c, T>(x: foo::X<'a, T, 'b, 'c>) {}\n-   |                                        ^^ must be declared prior to type parameters\n-\n-error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/issue-14303-path.rs:10:44\n+   |                                        ^^  ^^ must be declared prior to type parameters\n+   |                                        |\n+   |                                        must be declared prior to type parameters\n+help: move the lifetime parameters prior to the first type parameter\n    |\n-LL | fn bar<'a, 'b, 'c, T>(x: foo::X<'a, T, 'b, 'c>) {}\n-   |                                            ^^ must be declared prior to type parameters\n+LL | fn bar<'a, 'b, 'c, T>(x: foo::X<'a, 'b, 'c, T>) {}\n+   |                                     ^^^ ^^^ --\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "a12429c868ed028d414575a5d567a27bd5967208", "filename": "src/test/ui/traits/trait-object-vs-lifetime.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ea03e11477032a29b30284487d6d73e181ecaf/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ea03e11477032a29b30284487d6d73e181ecaf/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.rs?ref=28ea03e11477032a29b30284487d6d73e181ecaf", "patch": "@@ -1,8 +1,6 @@\n // A few contrived examples where lifetime should (or should not) be parsed as an object type.\n // Lifetimes parsed as types are still rejected later by semantic checks.\n \n-// compile-flags: -Z continue-parse-after-error\n-\n struct S<'a, T>(&'a u8, T);\n \n fn main() {"}, {"sha": "4cc96bae5cd171b4f0b51dc3f2fb3551e2a591fc", "filename": "src/test/ui/traits/trait-object-vs-lifetime.stderr", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/28ea03e11477032a29b30284487d6d73e181ecaf/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28ea03e11477032a29b30284487d6d73e181ecaf/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr?ref=28ea03e11477032a29b30284487d6d73e181ecaf", "patch": "@@ -1,29 +1,33 @@\n error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/trait-object-vs-lifetime.rs:16:25\n+  --> $DIR/trait-object-vs-lifetime.rs:14:25\n    |\n LL |     let _: S<'static +, 'static>;\n    |                         ^^^^^^^ must be declared prior to type parameters\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL |     let _: S<'static, 'static +>;\n+   |              ^^^^^^^^         --\n \n error[E0224]: at least one non-builtin trait is required for an object type\n-  --> $DIR/trait-object-vs-lifetime.rs:11:23\n+  --> $DIR/trait-object-vs-lifetime.rs:9:23\n    |\n LL |     let _: S<'static, 'static +>;\n    |                       ^^^^^^^^^\n \n error[E0107]: wrong number of lifetime arguments: expected 1, found 2\n-  --> $DIR/trait-object-vs-lifetime.rs:13:23\n+  --> $DIR/trait-object-vs-lifetime.rs:11:23\n    |\n LL |     let _: S<'static, 'static>;\n    |                       ^^^^^^^ unexpected lifetime argument\n \n error[E0107]: wrong number of type arguments: expected 1, found 0\n-  --> $DIR/trait-object-vs-lifetime.rs:13:12\n+  --> $DIR/trait-object-vs-lifetime.rs:11:12\n    |\n LL |     let _: S<'static, 'static>;\n    |            ^^^^^^^^^^^^^^^^^^^ expected 1 type argument\n \n error[E0224]: at least one non-builtin trait is required for an object type\n-  --> $DIR/trait-object-vs-lifetime.rs:16:14\n+  --> $DIR/trait-object-vs-lifetime.rs:14:14\n    |\n LL |     let _: S<'static +, 'static>;\n    |              ^^^^^^^^^"}]}