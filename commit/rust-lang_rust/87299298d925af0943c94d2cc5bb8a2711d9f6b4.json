{"sha": "87299298d925af0943c94d2cc5bb8a2711d9f6b4", "node_id": "C_kwDOAAsO6NoAKDg3Mjk5Mjk4ZDkyNWFmMDk0M2M5NGQyY2M1YmI4YTI3MTFkOWY2YjQ", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-24T08:51:48Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-24T08:51:48Z"}, "message": "Use FUTEX_WAIT_BITSET rather than FUTEX_WAIT on Linux.", "tree": {"sha": "71dcc832b7243a62c4367410a0889119de7098bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71dcc832b7243a62c4367410a0889119de7098bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87299298d925af0943c94d2cc5bb8a2711d9f6b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87299298d925af0943c94d2cc5bb8a2711d9f6b4", "html_url": "https://github.com/rust-lang/rust/commit/87299298d925af0943c94d2cc5bb8a2711d9f6b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87299298d925af0943c94d2cc5bb8a2711d9f6b4/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da4ef044c1d0e8e58f2ab18459208469110c04be", "url": "https://api.github.com/repos/rust-lang/rust/commits/da4ef044c1d0e8e58f2ab18459208469110c04be", "html_url": "https://github.com/rust-lang/rust/commit/da4ef044c1d0e8e58f2ab18459208469110c04be"}], "stats": {"total": 60, "additions": 38, "deletions": 22}, "files": [{"sha": "adb661d877bb33e1e2f8131e503f4de384c21755", "filename": "library/std/src/sys/unix/futex.rs", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/87299298d925af0943c94d2cc5bb8a2711d9f6b4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87299298d925af0943c94d2cc5bb8a2711d9f6b4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs?ref=87299298d925af0943c94d2cc5bb8a2711d9f6b4", "patch": "@@ -4,33 +4,45 @@\n     all(target_os = \"emscripten\", target_feature = \"atomics\")\n ))]\n \n-#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-use crate::convert::TryInto;\n-#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-use crate::ptr::null;\n use crate::sync::atomic::AtomicI32;\n use crate::time::Duration;\n \n #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub fn futex_wait(futex: &AtomicI32, expected: i32, timeout: Option<Duration>) -> bool {\n-    let timespec = timeout.and_then(|d| {\n-        Some(libc::timespec {\n-            // Sleep forever if the timeout is longer than fits in a timespec.\n-            tv_sec: d.as_secs().try_into().ok()?,\n-            // This conversion never truncates, as subsec_nanos is always <1e9.\n-            tv_nsec: d.subsec_nanos() as _,\n-        })\n-    });\n-    let r = unsafe {\n-        libc::syscall(\n-            libc::SYS_futex,\n-            futex as *const AtomicI32,\n-            libc::FUTEX_WAIT | libc::FUTEX_PRIVATE_FLAG,\n-            expected,\n-            timespec.as_ref().map_or(null(), |d| d as *const libc::timespec),\n-        )\n-    };\n-    !(r < 0 && super::os::errno() == libc::ETIMEDOUT)\n+    use super::time::Instant;\n+    use crate::ptr::null;\n+    use crate::sync::atomic::Ordering::Relaxed;\n+\n+    // Calculate the timeout as an absolute timespec.\n+    let timespec =\n+        timeout.and_then(|d| Some(Instant::now().checked_add_duration(&d)?.as_timespec()));\n+\n+    loop {\n+        // No need to wait if the value already changed.\n+        if futex.load(Relaxed) != expected {\n+            return true;\n+        }\n+\n+        // Use FUTEX_WAIT_BITSET rather than FUTEX_WAIT to be able to give an\n+        // absolute time rather than a relative time.\n+        let r = unsafe {\n+            libc::syscall(\n+                libc::SYS_futex,\n+                futex as *const AtomicI32,\n+                libc::FUTEX_WAIT_BITSET | libc::FUTEX_PRIVATE_FLAG,\n+                expected,\n+                timespec.as_ref().map_or(null(), |d| d as *const libc::timespec),\n+                null::<u32>(), // This argument is unused for FUTEX_WAIT_BITSET.\n+                !0u32,         // A full bitmask, to make it behave like a regular FUTEX_WAIT.\n+            )\n+        };\n+\n+        match (r < 0).then(super::os::errno) {\n+            Some(libc::ETIMEDOUT) => return false,\n+            Some(libc::EINTR) => continue,\n+            _ => return true,\n+        }\n+    }\n }\n \n #[cfg(target_os = \"emscripten\")]"}, {"sha": "64c249f33ebc58e1f5ed08c4ad5574d228d6d358", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87299298d925af0943c94d2cc5bb8a2711d9f6b4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87299298d925af0943c94d2cc5bb8a2711d9f6b4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=87299298d925af0943c94d2cc5bb8a2711d9f6b4", "patch": "@@ -299,6 +299,10 @@ mod inner {\n         pub fn checked_sub_duration(&self, other: &Duration) -> Option<Instant> {\n             Some(Instant { t: self.t.checked_sub_duration(other)? })\n         }\n+\n+        pub(in crate::sys::unix) fn as_timespec(&self) -> libc::timespec {\n+            self.t.t\n+        }\n     }\n \n     impl fmt::Debug for Instant {"}]}