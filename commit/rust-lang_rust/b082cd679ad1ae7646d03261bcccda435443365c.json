{"sha": "b082cd679ad1ae7646d03261bcccda435443365c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwODJjZDY3OWFkMWFlNzY0NmQwMzI2MWJjY2NkYTQzNTQ0MzM2NWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-17T14:51:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-17T14:51:01Z"}, "message": "normalize ordering ops", "tree": {"sha": "a3f2f1386853c5a02907705ee2be418a130fe3e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3f2f1386853c5a02907705ee2be418a130fe3e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b082cd679ad1ae7646d03261bcccda435443365c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b082cd679ad1ae7646d03261bcccda435443365c", "html_url": "https://github.com/rust-lang/rust/commit/b082cd679ad1ae7646d03261bcccda435443365c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b082cd679ad1ae7646d03261bcccda435443365c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e5a186c1fe585aac95019addc963bf74cb112ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e5a186c1fe585aac95019addc963bf74cb112ae", "html_url": "https://github.com/rust-lang/rust/commit/7e5a186c1fe585aac95019addc963bf74cb112ae"}], "stats": {"total": 62, "additions": 36, "deletions": 26}, "files": [{"sha": "5430a0c9f76db95ecff8238931d2efc48c37233b", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b082cd679ad1ae7646d03261bcccda435443365c/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b082cd679ad1ae7646d03261bcccda435443365c/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=b082cd679ad1ae7646d03261bcccda435443365c", "patch": "@@ -273,12 +273,14 @@ pub enum LogicOp {\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum CmpOp {\n-    Equal,\n-    NotEqual,\n+    Eq { negated: bool },\n+    Ord { ordering: Ordering, strict: bool },\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum Ordering {\n     Less,\n-    LessOrEqual,\n     Greater,\n-    GreaterOrEqual,\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n@@ -1080,12 +1082,20 @@ impl From<ast::BinOp> for BinaryOp {\n         match ast_op {\n             ast::BinOp::BooleanOr => BinaryOp::LogicOp(LogicOp::Or),\n             ast::BinOp::BooleanAnd => BinaryOp::LogicOp(LogicOp::And),\n-            ast::BinOp::EqualityTest => BinaryOp::CmpOp(CmpOp::Equal),\n-            ast::BinOp::NegatedEqualityTest => BinaryOp::CmpOp(CmpOp::NotEqual),\n-            ast::BinOp::LesserEqualTest => BinaryOp::CmpOp(CmpOp::LessOrEqual),\n-            ast::BinOp::GreaterEqualTest => BinaryOp::CmpOp(CmpOp::GreaterOrEqual),\n-            ast::BinOp::LesserTest => BinaryOp::CmpOp(CmpOp::Less),\n-            ast::BinOp::GreaterTest => BinaryOp::CmpOp(CmpOp::Greater),\n+            ast::BinOp::EqualityTest => BinaryOp::CmpOp(CmpOp::Eq { negated: false }),\n+            ast::BinOp::NegatedEqualityTest => BinaryOp::CmpOp(CmpOp::Eq { negated: true }),\n+            ast::BinOp::LesserEqualTest => {\n+                BinaryOp::CmpOp(CmpOp::Ord { ordering: Ordering::Less, strict: false })\n+            }\n+            ast::BinOp::GreaterEqualTest => {\n+                BinaryOp::CmpOp(CmpOp::Ord { ordering: Ordering::Greater, strict: false })\n+            }\n+            ast::BinOp::LesserTest => {\n+                BinaryOp::CmpOp(CmpOp::Ord { ordering: Ordering::Less, strict: true })\n+            }\n+            ast::BinOp::GreaterTest => {\n+                BinaryOp::CmpOp(CmpOp::Ord { ordering: Ordering::Greater, strict: true })\n+            }\n             ast::BinOp::Addition => BinaryOp::ArithOp(ArithOp::Add),\n             ast::BinOp::Multiplication => BinaryOp::ArithOp(ArithOp::Mul),\n             ast::BinOp::Subtraction => BinaryOp::ArithOp(ArithOp::Sub),"}, {"sha": "1b30a5b9b759f29082bb8b621284041c96101977", "filename": "crates/ra_hir/src/ty/op.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b082cd679ad1ae7646d03261bcccda435443365c/crates%2Fra_hir%2Fsrc%2Fty%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b082cd679ad1ae7646d03261bcccda435443365c/crates%2Fra_hir%2Fsrc%2Fty%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fop.rs?ref=b082cd679ad1ae7646d03261bcccda435443365c", "patch": "@@ -22,29 +22,29 @@ pub(super) fn binary_op_return_ty(op: BinaryOp, rhs_ty: Ty) -> Ty {\n pub(super) fn binary_op_rhs_expectation(op: BinaryOp, lhs_ty: Ty) -> Ty {\n     match op {\n         BinaryOp::LogicOp(..) => Ty::simple(TypeCtor::Bool),\n-        BinaryOp::Assignment { op: None }\n-        | BinaryOp::CmpOp(CmpOp::Equal)\n-        | BinaryOp::CmpOp(CmpOp::NotEqual) => match lhs_ty {\n-            Ty::Apply(ApplicationTy { ctor, .. }) => match ctor {\n-                TypeCtor::Int(..)\n-                | TypeCtor::Float(..)\n-                | TypeCtor::Str\n-                | TypeCtor::Char\n-                | TypeCtor::Bool => lhs_ty,\n-                _ => Ty::Unknown,\n-            },\n-            Ty::Infer(InferTy::IntVar(..)) | Ty::Infer(InferTy::FloatVar(..)) => lhs_ty,\n-            _ => Ty::Unknown,\n-        },\n-        BinaryOp::CmpOp(_) | BinaryOp::Assignment { op: Some(_) } | BinaryOp::ArithOp(_) => {\n+        BinaryOp::Assignment { op: None } | BinaryOp::CmpOp(CmpOp::Eq { negated: _ }) => {\n             match lhs_ty {\n                 Ty::Apply(ApplicationTy { ctor, .. }) => match ctor {\n-                    TypeCtor::Int(..) | TypeCtor::Float(..) => lhs_ty,\n+                    TypeCtor::Int(..)\n+                    | TypeCtor::Float(..)\n+                    | TypeCtor::Str\n+                    | TypeCtor::Char\n+                    | TypeCtor::Bool => lhs_ty,\n                     _ => Ty::Unknown,\n                 },\n                 Ty::Infer(InferTy::IntVar(..)) | Ty::Infer(InferTy::FloatVar(..)) => lhs_ty,\n                 _ => Ty::Unknown,\n             }\n         }\n+        BinaryOp::CmpOp(CmpOp::Ord { .. })\n+        | BinaryOp::Assignment { op: Some(_) }\n+        | BinaryOp::ArithOp(_) => match lhs_ty {\n+            Ty::Apply(ApplicationTy { ctor, .. }) => match ctor {\n+                TypeCtor::Int(..) | TypeCtor::Float(..) => lhs_ty,\n+                _ => Ty::Unknown,\n+            },\n+            Ty::Infer(InferTy::IntVar(..)) | Ty::Infer(InferTy::FloatVar(..)) => lhs_ty,\n+            _ => Ty::Unknown,\n+        },\n     }\n }"}]}