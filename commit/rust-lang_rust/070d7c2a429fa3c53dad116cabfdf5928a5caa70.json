{"sha": "070d7c2a429fa3c53dad116cabfdf5928a5caa70", "node_id": "C_kwDOAAsO6NoAKDA3MGQ3YzJhNDI5ZmEzYzUzZGFkMTE2Y2FiZmRmNTkyOGE1Y2FhNzA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-25T19:12:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-25T19:12:48Z"}, "message": "Rollup merge of #94353 - flip1995:fix_debug_assert_unused, r=Dylan-DPC\n\nFix debug_assert in unused lint pass\n\nThis fixes a debug assertion in the unused lint pass. As a side effect, this also improves the span generated for tuples in the `unused_must_use` lint.\n\nfound in #94329\n\nA reproducer for this would be\n\n```rust\nfn main() { (1, (3,)); }\n```\n\nNot sure, if I should add a regression test for a `debug_assert`.", "tree": {"sha": "94c12cf1e7220df9c5ac3366fefb9c453cbbb89f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94c12cf1e7220df9c5ac3366fefb9c453cbbb89f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/070d7c2a429fa3c53dad116cabfdf5928a5caa70", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiGSowCRBK7hj4Ov3rIwAATAMIAEg3ZWXGZ5a0Z4MLjtmakqM1\nGHHZ2t/o/dbYxW3pxTF/1ggDYp+fPBnFzXfuB3oQ2cPZv4SHM2sIBmwHiuwE5cWX\nL/4YAw07T5lYsb02HH13HuHialIeLeRlu+gE2kphJmRNjE/aWqi7KYI7kFdE6u7d\n9CMQDabVykwy1jxZ81Bc6HAigpSKBlEFQFGh36DOYvI6BRNWS1nOg2N/VCaM6Fk1\ns9EEVS7vQUx0FQa8C1EcGqbtUulxX8ec5K8fQKcwL+dwslJr3caaVWbQ43U+mZLB\n/vIFmfklYwGyNF2/uCkLtTFZqj9zqLVJRPnDxm2IsFooBdxuSdJM8sX9XjyTy6M=\n=ZwnT\n-----END PGP SIGNATURE-----\n", "payload": "tree 94c12cf1e7220df9c5ac3366fefb9c453cbbb89f\nparent ed202b820831c15cea388d67985feae3784bac13\nparent bbe3447313b52db1c0162061a77948e4da275809\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645816368 +0100\ncommitter GitHub <noreply@github.com> 1645816368 +0100\n\nRollup merge of #94353 - flip1995:fix_debug_assert_unused, r=Dylan-DPC\n\nFix debug_assert in unused lint pass\n\nThis fixes a debug assertion in the unused lint pass. As a side effect, this also improves the span generated for tuples in the `unused_must_use` lint.\n\nfound in #94329\n\nA reproducer for this would be\n\n```rust\nfn main() { (1, (3,)); }\n```\n\nNot sure, if I should add a regression test for a `debug_assert`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/070d7c2a429fa3c53dad116cabfdf5928a5caa70", "html_url": "https://github.com/rust-lang/rust/commit/070d7c2a429fa3c53dad116cabfdf5928a5caa70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/070d7c2a429fa3c53dad116cabfdf5928a5caa70/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed202b820831c15cea388d67985feae3784bac13", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed202b820831c15cea388d67985feae3784bac13", "html_url": "https://github.com/rust-lang/rust/commit/ed202b820831c15cea388d67985feae3784bac13"}, {"sha": "bbe3447313b52db1c0162061a77948e4da275809", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbe3447313b52db1c0162061a77948e4da275809", "html_url": "https://github.com/rust-lang/rust/commit/bbe3447313b52db1c0162061a77948e4da275809"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "16d222f68a3211e3a56a1435bbb5aab94fdbd68f", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/070d7c2a429fa3c53dad116cabfdf5928a5caa70/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070d7c2a429fa3c53dad116cabfdf5928a5caa70/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=070d7c2a429fa3c53dad116cabfdf5928a5caa70", "patch": "@@ -240,17 +240,17 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                 }\n                 ty::Tuple(ref tys) => {\n                     let mut has_emitted = false;\n-                    let spans = if let hir::ExprKind::Tup(comps) = &expr.kind {\n+                    let comps = if let hir::ExprKind::Tup(comps) = expr.kind {\n                         debug_assert_eq!(comps.len(), tys.len());\n-                        comps.iter().map(|e| e.span).collect()\n+                        comps\n                     } else {\n-                        vec![]\n+                        &[]\n                     };\n                     for (i, ty) in tys.iter().enumerate() {\n                         let descr_post = &format!(\" in tuple element {}\", i);\n-                        let span = *spans.get(i).unwrap_or(&span);\n-                        if check_must_use_ty(cx, ty, expr, span, descr_pre, descr_post, plural_len)\n-                        {\n+                        let e = comps.get(i).unwrap_or(expr);\n+                        let span = e.span;\n+                        if check_must_use_ty(cx, ty, e, span, descr_pre, descr_post, plural_len) {\n                             has_emitted = true;\n                         }\n                     }"}, {"sha": "45a5317fccc6e7c508a901736ebc049da5e531fb", "filename": "src/test/ui/lint/unused/must_use-array.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/070d7c2a429fa3c53dad116cabfdf5928a5caa70/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/070d7c2a429fa3c53dad116cabfdf5928a5caa70/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-array.stderr?ref=070d7c2a429fa3c53dad116cabfdf5928a5caa70", "patch": "@@ -32,7 +32,7 @@ error: unused array of boxed `T` trait objects in tuple element 1 that must be u\n   --> $DIR/must_use-array.rs:43:5\n    |\n LL |     impl_array();\n-   |     ^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^\n \n error: unused array of arrays of arrays of `S` that must be used\n   --> $DIR/must_use-array.rs:45:5"}, {"sha": "a42eb8841789dfb0f0071a4e1d2d65b833b877a1", "filename": "src/test/ui/lint/unused/must_use-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/070d7c2a429fa3c53dad116cabfdf5928a5caa70/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/070d7c2a429fa3c53dad116cabfdf5928a5caa70/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-trait.stderr?ref=070d7c2a429fa3c53dad116cabfdf5928a5caa70", "patch": "@@ -26,13 +26,13 @@ error: unused boxed `Critical` trait object in tuple element 1 that must be used\n   --> $DIR/must_use-trait.rs:37:5\n    |\n LL |     get_critical_tuple();\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^\n \n error: unused implementer of `Critical` in tuple element 2 that must be used\n   --> $DIR/must_use-trait.rs:37:5\n    |\n LL |     get_critical_tuple();\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "e5709a5f0af5a1e04e0acf3bdf37f88fcb3ac36c", "filename": "src/test/ui/lint/unused/must_use-tuple.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/070d7c2a429fa3c53dad116cabfdf5928a5caa70/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/070d7c2a429fa3c53dad116cabfdf5928a5caa70/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-tuple.stderr?ref=070d7c2a429fa3c53dad116cabfdf5928a5caa70", "patch": "@@ -31,15 +31,15 @@ error: unused `Result` in tuple element 0 that must be used\n   --> $DIR/must_use-tuple.rs:14:5\n    |\n LL |     foo();\n-   |     ^^^^^^\n+   |     ^^^^^\n    |\n    = note: this `Result` may be an `Err` variant, which should be handled\n \n error: unused `Result` in tuple element 0 that must be used\n-  --> $DIR/must_use-tuple.rs:16:6\n+  --> $DIR/must_use-tuple.rs:16:7\n    |\n LL |     ((Err::<(), ()>(()), ()), ());\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^\n+   |       ^^^^^^^^^^^^^^^^^\n    |\n    = note: this `Result` may be an `Err` variant, which should be handled\n "}]}