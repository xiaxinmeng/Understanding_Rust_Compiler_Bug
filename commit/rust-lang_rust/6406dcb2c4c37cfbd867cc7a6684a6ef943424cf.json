{"sha": "6406dcb2c4c37cfbd867cc7a6684a6ef943424cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MDZkY2IyYzRjMzdjZmJkODY3Y2M3YTY2ODRhNmVmOTQzNDI0Y2Y=", "commit": {"author": {"name": "Dan W", "email": "1danwade@gmail.com", "date": "2015-10-12T22:29:20Z"}, "committer": {"name": "Dan W", "email": "1danwade@gmail.com", "date": "2015-10-12T22:29:20Z"}, "message": "typo", "tree": {"sha": "8c9920e40886514310e622399ef1cfeed9a20de6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c9920e40886514310e622399ef1cfeed9a20de6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6406dcb2c4c37cfbd867cc7a6684a6ef943424cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6406dcb2c4c37cfbd867cc7a6684a6ef943424cf", "html_url": "https://github.com/rust-lang/rust/commit/6406dcb2c4c37cfbd867cc7a6684a6ef943424cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6406dcb2c4c37cfbd867cc7a6684a6ef943424cf/comments", "author": {"login": "dnwade", "id": 921606, "node_id": "MDQ6VXNlcjkyMTYwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/921606?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnwade", "html_url": "https://github.com/dnwade", "followers_url": "https://api.github.com/users/dnwade/followers", "following_url": "https://api.github.com/users/dnwade/following{/other_user}", "gists_url": "https://api.github.com/users/dnwade/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnwade/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnwade/subscriptions", "organizations_url": "https://api.github.com/users/dnwade/orgs", "repos_url": "https://api.github.com/users/dnwade/repos", "events_url": "https://api.github.com/users/dnwade/events{/privacy}", "received_events_url": "https://api.github.com/users/dnwade/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dnwade", "id": 921606, "node_id": "MDQ6VXNlcjkyMTYwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/921606?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnwade", "html_url": "https://github.com/dnwade", "followers_url": "https://api.github.com/users/dnwade/followers", "following_url": "https://api.github.com/users/dnwade/following{/other_user}", "gists_url": "https://api.github.com/users/dnwade/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnwade/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnwade/subscriptions", "organizations_url": "https://api.github.com/users/dnwade/orgs", "repos_url": "https://api.github.com/users/dnwade/repos", "events_url": "https://api.github.com/users/dnwade/events{/privacy}", "received_events_url": "https://api.github.com/users/dnwade/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aa621a99676797e2217d8bbff41831e5ccf5834", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa621a99676797e2217d8bbff41831e5ccf5834", "html_url": "https://github.com/rust-lang/rust/commit/8aa621a99676797e2217d8bbff41831e5ccf5834"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "b8bac76af0c57cdbbb817856aba68cfc938c0343", "filename": "src/doc/trpl/iterators.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6406dcb2c4c37cfbd867cc7a6684a6ef943424cf/src%2Fdoc%2Ftrpl%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/6406dcb2c4c37cfbd867cc7a6684a6ef943424cf/src%2Fdoc%2Ftrpl%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fiterators.md?ref=6406dcb2c4c37cfbd867cc7a6684a6ef943424cf", "patch": "@@ -44,7 +44,7 @@ own iterator involves implementing the `Iterator` trait. While doing that is\n outside of the scope of this guide, Rust provides a number of useful iterators\n to accomplish various tasks. But first, a few notes about limitations of ranges.\n \n-Ranges are very primitive, and we often can use better alternatives. Consider\n+Ranges are very primitive, and we often can use better alternatives. Consider the\n following Rust anti-pattern: using ranges to emulate a C-style `for` loop. Let\u2019s\n suppose you needed to iterate over the contents of a vector. You may be tempted\n to write this:"}]}