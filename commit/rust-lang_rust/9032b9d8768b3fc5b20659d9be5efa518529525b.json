{"sha": "9032b9d8768b3fc5b20659d9be5efa518529525b", "node_id": "C_kwDOAAsO6NoAKDkwMzJiOWQ4NzY4YjNmYzViMjA2NTlkOWJlNWVmYTUxODUyOTUyNWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-05T20:12:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-05T20:12:30Z"}, "message": "Rollup merge of #90623 - cuviper:llvm-12, r=nikic\n\nRemove more checks for LLVM < 12\n\nWe already updated the minimum to 12 in #90175, but we missed a few `get_version()` checks.", "tree": {"sha": "18785c67010e0cdc470e33f9ba157ee35b4dce6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18785c67010e0cdc470e33f9ba157ee35b4dce6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9032b9d8768b3fc5b20659d9be5efa518529525b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhhZAuCRBK7hj4Ov3rIwAAzh8IAHlz0m3n9PTMwQp8wfYsZQ4p\nmVR6Zc9S6ehstks2TYrTvp1maO1rEfyPz9qxtl3VkujxCecQks4X/9lZukv6GVDy\nrrJlrFIMNwixVUjiMTiOlCmq3vJij5SEqqjzam8M5B/kQxJsUF/53OnR7RiGVz1l\nTgBFCJ9gCS9ki/1XJwo5U0h/yoN43KWzXz37wD4wQHlKw4PfGNHKkefyUGQu6/Uw\nZ1dueCVQBdBQiaYyVcK+ts5fW/R4tMiuq2PcodFX1d3bpBAHrRgn7VpZmvX2g9rx\n2/Gc62RGFMVlszAX9UyX620ygTv60nTPaRHkqql5RDl7Llsbv0V+pECyg/TCN94=\n=pJn8\n-----END PGP SIGNATURE-----\n", "payload": "tree 18785c67010e0cdc470e33f9ba157ee35b4dce6e\nparent 4b1cb73f1d45f69e0f00a66754616c61b3166c47\nparent 767471edebd292d7b6386ed236e82abef9abc330\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1636143150 +0100\ncommitter GitHub <noreply@github.com> 1636143150 +0100\n\nRollup merge of #90623 - cuviper:llvm-12, r=nikic\n\nRemove more checks for LLVM < 12\n\nWe already updated the minimum to 12 in #90175, but we missed a few `get_version()` checks.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9032b9d8768b3fc5b20659d9be5efa518529525b", "html_url": "https://github.com/rust-lang/rust/commit/9032b9d8768b3fc5b20659d9be5efa518529525b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9032b9d8768b3fc5b20659d9be5efa518529525b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b1cb73f1d45f69e0f00a66754616c61b3166c47", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b1cb73f1d45f69e0f00a66754616c61b3166c47", "html_url": "https://github.com/rust-lang/rust/commit/4b1cb73f1d45f69e0f00a66754616c61b3166c47"}, {"sha": "767471edebd292d7b6386ed236e82abef9abc330", "url": "https://api.github.com/repos/rust-lang/rust/commits/767471edebd292d7b6386ed236e82abef9abc330", "html_url": "https://github.com/rust-lang/rust/commit/767471edebd292d7b6386ed236e82abef9abc330"}], "stats": {"total": 51, "additions": 24, "deletions": 27}, "files": [{"sha": "bedd3523d899e89f0f8205c28b72ad7e03307c17", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=9032b9d8768b3fc5b20659d9be5efa518529525b", "patch": "@@ -1,7 +1,6 @@\n use crate::builder::Builder;\n use crate::context::CodegenCx;\n use crate::llvm::{self, AttributePlace};\n-use crate::llvm_util;\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n@@ -53,15 +52,10 @@ pub trait ArgAttributesExt {\n }\n \n fn should_use_mutable_noalias(cx: &CodegenCx<'_, '_>) -> bool {\n-    // LLVM prior to version 12 has known miscompiles in the presence of\n-    // noalias attributes (see #54878). Only enable mutable noalias by\n-    // default for versions we believe to be safe.\n-    cx.tcx\n-        .sess\n-        .opts\n-        .debugging_opts\n-        .mutable_noalias\n-        .unwrap_or_else(|| llvm_util::get_version() >= (12, 0, 0))\n+    // LLVM prior to version 12 had known miscompiles in the presence of\n+    // noalias attributes (see #54878), but we don't support earlier\n+    // versions at all anymore. We now enable mutable noalias by default.\n+    cx.tcx.sess.opts.debugging_opts.mutable_noalias.unwrap_or(true)\n }\n \n impl ArgAttributesExt for ArgAttributes {"}, {"sha": "6c74163fb496c18bf33923b9c2fc0c5f949a2e30", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=9032b9d8768b3fc5b20659d9be5efa518529525b", "patch": "@@ -731,7 +731,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n     fn fptoui_sat(&mut self, val: &'ll Value, dest_ty: &'ll Type) -> Option<&'ll Value> {\n-        if llvm_util::get_version() >= (12, 0, 0) && !self.fptoint_sat_broken_in_llvm() {\n+        if !self.fptoint_sat_broken_in_llvm() {\n             let src_ty = self.cx.val_ty(val);\n             let float_width = self.cx.float_width(src_ty);\n             let int_width = self.cx.int_width(dest_ty);\n@@ -743,7 +743,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n     fn fptosi_sat(&mut self, val: &'ll Value, dest_ty: &'ll Type) -> Option<&'ll Value> {\n-        if llvm_util::get_version() >= (12, 0, 0) && !self.fptoint_sat_broken_in_llvm() {\n+        if !self.fptoint_sat_broken_in_llvm() {\n             let src_ty = self.cx.val_ty(val);\n             let float_width = self.cx.float_width(src_ty);\n             let int_width = self.cx.int_width(dest_ty);"}, {"sha": "1dba264a9614a32a5ae9fa62dce679a1d3fc5318", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=9032b9d8768b3fc5b20659d9be5efa518529525b", "patch": "@@ -134,9 +134,6 @@ pub unsafe fn create_module(\n     let llmod = llvm::LLVMModuleCreateWithNameInContext(mod_name.as_ptr(), llcx);\n \n     let mut target_data_layout = sess.target.data_layout.clone();\n-    if llvm_util::get_version() < (12, 0, 0) && sess.target.arch == \"powerpc64\" {\n-        target_data_layout = target_data_layout.replace(\"-v256:256:256-v512:512:512\", \"\");\n-    }\n     if llvm_util::get_version() < (13, 0, 0) {\n         if sess.target.arch == \"powerpc64\" {\n             target_data_layout = target_data_layout.replace(\"-S128\", \"\");"}, {"sha": "3e0ea92ab81ed08ad61c8e814823a2c3f9b708d8", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=9032b9d8768b3fc5b20659d9be5efa518529525b", "patch": "@@ -406,11 +406,6 @@ pub fn llvm_global_features(sess: &Session) -> Vec<String> {\n     // -Ctarget-features\n     features.extend(sess.opts.cg.target_feature.split(',').flat_map(&filter));\n \n-    // FIXME: Move outline-atomics to target definition when earliest supported LLVM is 12.\n-    if get_version() >= (12, 0, 0) && sess.target.llvm_target.contains(\"aarch64-unknown-linux\") {\n-        features.push(\"+outline-atomics\".to_string());\n-    }\n-\n     features\n }\n "}, {"sha": "b87e23af72b702076ea2ea84f8d5b48bf87b6f43", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=9032b9d8768b3fc5b20659d9be5efa518529525b", "patch": "@@ -3060,9 +3060,10 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     // LLVM's definition of `noalias` is based solely on memory\n                     // dependencies rather than pointer equality\n                     //\n-                    // Due to miscompiles in LLVM < 12, we apply a separate NoAliasMutRef attribute\n-                    // for UniqueBorrowed arguments, so that the codegen backend can decide\n-                    // whether or not to actually emit the attribute.\n+                    // Due to past miscompiles in LLVM, we apply a separate NoAliasMutRef attribute\n+                    // for UniqueBorrowed arguments, so that the codegen backend can decide whether\n+                    // or not to actually emit the attribute. It can also be controlled with the\n+                    // `-Zmutable-noalias` debugging option.\n                     let no_alias = match kind {\n                         PointerKind::Shared | PointerKind::UniqueBorrowed => false,\n                         PointerKind::UniqueOwned => true,"}, {"sha": "3add3e861484e82b862ec6f156497847143fa6ad", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=9032b9d8768b3fc5b20659d9be5efa518529525b", "patch": "@@ -1193,7 +1193,7 @@ options! {\n     move_size_limit: Option<usize> = (None, parse_opt_number, [TRACKED],\n         \"the size at which the `large_assignments` lint starts to be emitted\"),\n     mutable_noalias: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-        \"emit noalias metadata for mutable references (default: yes for LLVM >= 12, otherwise no)\"),\n+        \"emit noalias metadata for mutable references (default: yes)\"),\n     new_llvm_pass_manager: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"use new LLVM pass manager (default: no)\"),\n     nll_facts: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "4768c9e2db5e109ddca539d463d9b8fb381968ed", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=9032b9d8768b3fc5b20659d9be5efa518529525b", "patch": "@@ -68,8 +68,10 @@ mod attr_impl {\n             const NonNull   = 1 << 3;\n             const ReadOnly  = 1 << 4;\n             const InReg     = 1 << 5;\n-            // NoAlias on &mut arguments can only be used with LLVM >= 12 due to miscompiles\n-            // in earlier versions. FIXME: Remove this distinction once possible.\n+            // Due to past miscompiles in LLVM, we use a separate attribute for\n+            // &mut arguments, so that the codegen backend can decide whether\n+            // or not to actually emit the attribute. It can also be controlled\n+            // with the `-Zmutable-noalias` debugging option.\n             const NoAliasMutRef = 1 << 6;\n         }\n     }"}, {"sha": "a393858879bfe725ab4c239e6da04dbec1622cb5", "filename": "compiler/rustc_target/src/spec/aarch64_be_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu.rs?ref=9032b9d8768b3fc5b20659d9be5efa518529525b", "patch": "@@ -8,6 +8,7 @@ pub fn target() -> Target {\n         data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         options: TargetOptions {\n+            features: \"+outline-atomics\".to_string(),\n             max_atomic_width: Some(128),\n             mcount: \"\\u{1}_mcount\".to_string(),\n             endian: Endian::Big,"}, {"sha": "e75100f1435115300f61dd274db7b86988d5ed17", "filename": "compiler/rustc_target/src/spec/aarch64_be_unknown_linux_gnu_ilp32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs?ref=9032b9d8768b3fc5b20659d9be5efa518529525b", "patch": "@@ -12,6 +12,7 @@ pub fn target() -> Target {\n         arch: \"aarch64\".to_string(),\n         options: TargetOptions {\n             abi: \"ilp32\".to_string(),\n+            features: \"+outline-atomics\".to_string(),\n             mcount: \"\\u{1}_mcount\".to_string(),\n             endian: Endian::Big,\n             ..base"}, {"sha": "850381f7fb073e6fb12c3dd1dc736cc7cdcb2dc5", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs?ref=9032b9d8768b3fc5b20659d9be5efa518529525b", "patch": "@@ -7,6 +7,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         options: TargetOptions {\n+            features: \"+outline-atomics\".to_string(),\n             mcount: \"\\u{1}_mcount\".to_string(),\n             max_atomic_width: Some(128),\n             supported_sanitizers: SanitizerSet::ADDRESS"}, {"sha": "1c931d5a705f0df3b95f75363f15ffb93bedf7c4", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_gnu_ilp32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu_ilp32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu_ilp32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu_ilp32.rs?ref=9032b9d8768b3fc5b20659d9be5efa518529525b", "patch": "@@ -8,6 +8,7 @@ pub fn target() -> Target {\n         arch: \"aarch64\".to_string(),\n         options: TargetOptions {\n             abi: \"ilp32\".to_string(),\n+            features: \"+outline-atomics\".to_string(),\n             max_atomic_width: Some(128),\n             mcount: \"\\u{1}_mcount\".to_string(),\n             ..super::linux_gnu_base::opts()"}, {"sha": "0770f3496c2792bc87fbed8dc393fa6c4e9e385d", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_musl.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9032b9d8768b3fc5b20659d9be5efa518529525b/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs?ref=9032b9d8768b3fc5b20659d9be5efa518529525b", "patch": "@@ -9,6 +9,10 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        options: TargetOptions { mcount: \"\\u{1}_mcount\".to_string(), ..base },\n+        options: TargetOptions {\n+            features: \"+outline-atomics\".to_string(),\n+            mcount: \"\\u{1}_mcount\".to_string(),\n+            ..base\n+        },\n     }\n }"}]}