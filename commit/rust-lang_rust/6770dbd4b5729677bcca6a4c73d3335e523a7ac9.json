{"sha": "6770dbd4b5729677bcca6a4c73d3335e523a7ac9", "node_id": "C_kwDOAAsO6NoAKDY3NzBkYmQ0YjU3Mjk2NzdiY2NhNmE0YzczZDMzMzVlNTIzYTdhYzk", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-10-14T06:18:53Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-10-14T06:18:53Z"}, "message": "Avoid tupling at the callee", "tree": {"sha": "9509838ea08477a874b5e8901d799d361038cfbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9509838ea08477a874b5e8901d799d361038cfbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6770dbd4b5729677bcca6a4c73d3335e523a7ac9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmFny80ACgkQAn35M4hi\nrd0NfBAAlgnmFzAbyQgE6RrGpzyKHRkh88Iq2SjRwCTQhVsRrcQ7sno0LjRo5YED\nkawTD5eOhgtb2aoWeDGHhr37q02C68Pqzqt8ZTHOva169/Vpt4tGMCLGtJDqDiHq\n5/0x2HLCuBpp6qg3WJc2tCU+FEALyfoVznX54ZLHot4FiadT6KhmW/LPEg5mwj47\nSHfxYay2lz6NjSTxbSZG/h3arqIVPHeby5MffTDhWm6GVcNoHW2Zb7rDXzDj9rw6\nmFMG0FeJGPsPRbhwT+GtCUuVOW0b6q/b4ycQBiWoiGf1WuKMu/aFgS+1ahpbeSOz\nhsQvFT9QAQraFg0MIhmY0lRTGXeQ8eu/L2IGKN03NXzB7X1xggPBH+kzPC8jGP6L\nWUe6gJHSRiwcPLQ/0D7GmNcENDirjlRQ5WwlV7J+dQwYbes0R5k1fI7tmK+OS3wZ\nomXJWWidUPxFLrmLZYjyhUvgNla09X1Ypll00NAik0hNphMC6fs65YN4cfZXs83D\nRWxtRnVdBjVzyWdHHMgA+bchhj9VuUxd+hUaXReuXJBXx8vpSx8+/3Ov4j/obFog\nuwrFrswJm1XCqEzI2D3tDuJ3Tj/7yNYEviYHu/7b+zkyKfR8PYz+ISXgFlrxxC6K\n3QrD8q8Wjpy6fZiJVOKqH2wZ3rAluDmjG4Am+hI7/Eu4T1Z2qZg=\n=hN2j\n-----END PGP SIGNATURE-----", "payload": "tree 9509838ea08477a874b5e8901d799d361038cfbe\nparent 5387b6542f1d72d332c84e8325309f0c9de7b6a0\nauthor Deadbeef <ent3rm4n@gmail.com> 1634192333 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1634192333 +0000\n\nAvoid tupling at the callee\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6770dbd4b5729677bcca6a4c73d3335e523a7ac9", "html_url": "https://github.com/rust-lang/rust/commit/6770dbd4b5729677bcca6a4c73d3335e523a7ac9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6770dbd4b5729677bcca6a4c73d3335e523a7ac9/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5387b6542f1d72d332c84e8325309f0c9de7b6a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5387b6542f1d72d332c84e8325309f0c9de7b6a0", "html_url": "https://github.com/rust-lang/rust/commit/5387b6542f1d72d332c84e8325309f0c9de7b6a0"}], "stats": {"total": 74, "additions": 38, "deletions": 36}, "files": [{"sha": "54d0805550ac560e065cb4e43d6cbf5a42a43848", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6770dbd4b5729677bcca6a4c73d3335e523a7ac9/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6770dbd4b5729677bcca6a4c73d3335e523a7ac9/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=6770dbd4b5729677bcca6a4c73d3335e523a7ac9", "patch": "@@ -2266,10 +2266,10 @@ pub const unsafe fn const_eval_select<ARG, F, G, RET>(\n     called_at_rt: G,\n ) -> RET\n where\n-    F: ~const FnOnce(ARG) -> RET,\n-    G: FnOnce(ARG) -> RET + ~const Drop,\n+    F: ~const FnOnce<ARG, Output = RET>,\n+    G: FnOnce<ARG, Output = RET> + ~const Drop,\n {\n-    called_at_rt(arg)\n+    called_at_rt.call_once(arg)\n }\n \n #[cfg(not(bootstrap))]\n@@ -2285,8 +2285,8 @@ pub const unsafe fn const_eval_select_ct<ARG, F, G, RET>(\n     _called_at_rt: G,\n ) -> RET\n where\n-    F: ~const FnOnce(ARG) -> RET,\n-    G: FnOnce(ARG) -> RET + ~const Drop,\n+    F: ~const FnOnce<ARG, Output = RET>,\n+    G: FnOnce<ARG, Output = RET> + ~const Drop,\n {\n-    called_in_const(arg)\n+    called_in_const.call_once(arg)\n }"}, {"sha": "8fbdc0c39c6aa38edce10d2f98470a2b06533879", "filename": "src/test/ui/intrinsics/const-eval-select-bad.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6770dbd4b5729677bcca6a4c73d3335e523a7ac9/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6770dbd4b5729677bcca6a4c73d3335e523a7ac9/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs?ref=6770dbd4b5729677bcca6a4c73d3335e523a7ac9", "patch": "@@ -3,22 +3,22 @@\n use std::intrinsics::const_eval_select;\n \n const fn not_fn_items() {\n-    const_eval_select((), |()| {}, |()| {});\n-    //~^ ERROR expected a `FnOnce<((),)>` closure\n+    const_eval_select((), || {}, || {});\n+    //~^ ERROR expected a `FnOnce<()>` closure\n     const_eval_select((), 42, 0xDEADBEEF);\n-    //~^ ERROR expected a `FnOnce<((),)>` closure\n+    //~^ ERROR expected a `FnOnce<()>` closure\n }\n \n-const fn foo((n,): (i32,)) -> i32 {\n+const fn foo(n: i32) -> i32 {\n     n\n }\n \n-fn bar((n,): (i32,)) -> bool {\n+fn bar(n: i32) -> bool {\n     assert_eq!(n, 0, \"{} must be equal to {}\", n, 0);\n     n == 0\n }\n \n-fn baz((n,): (bool,)) -> i32 {\n+fn baz(n: bool) -> i32 {\n     assert!(n, \"{} must be true\", n);\n     n as i32\n }"}, {"sha": "78647e92138c2ccaa8dd3cd29001265654afea8b", "filename": "src/test/ui/intrinsics/const-eval-select-bad.stderr", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6770dbd4b5729677bcca6a4c73d3335e523a7ac9/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6770dbd4b5729677bcca6a4c73d3335e523a7ac9/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr?ref=6770dbd4b5729677bcca6a4c73d3335e523a7ac9", "patch": "@@ -1,34 +1,36 @@\n-error[E0277]: expected a `FnOnce<((),)>` closure, found `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:34]`\n-  --> $DIR/const-eval-select-bad.rs:6:36\n+error[E0277]: expected a `FnOnce<()>` closure, found `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:32]`\n+  --> $DIR/const-eval-select-bad.rs:6:34\n    |\n-LL |     const_eval_select((), |()| {}, |()| {});\n-   |     -----------------              ^^^^^^^ expected an `FnOnce<((),)>` closure, found `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:34]`\n+LL |     const_eval_select((), || {}, || {});\n+   |     -----------------            ^^^^^ expected an `FnOnce<()>` closure, found `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:32]`\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `FnOnce<((),)>` is not implemented for `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:34]`\n+   = help: the trait `FnOnce<()>` is not implemented for `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:32]`\n+   = note: wrap the `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:32]` in a closure with no arguments: `|| { /* code */ }`\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n    |\n-LL |     F: ~const FnOnce(ARG) -> RET,\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n+LL |     F: ~const FnOnce<ARG, Output = RET>,\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n-error[E0277]: expected a `FnOnce<((),)>` closure, found `{integer}`\n+error[E0277]: expected a `FnOnce<()>` closure, found `{integer}`\n   --> $DIR/const-eval-select-bad.rs:8:31\n    |\n LL |     const_eval_select((), 42, 0xDEADBEEF);\n-   |     -----------------         ^^^^^^^^^^ expected an `FnOnce<((),)>` closure, found `{integer}`\n+   |     -----------------         ^^^^^^^^^^ expected an `FnOnce<()>` closure, found `{integer}`\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `FnOnce<((),)>` is not implemented for `{integer}`\n+   = help: the trait `FnOnce<()>` is not implemented for `{integer}`\n+   = note: wrap the `{integer}` in a closure with no arguments: `|| { /* code */ }`\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n    |\n-LL |     F: ~const FnOnce(ARG) -> RET,\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n+LL |     F: ~const FnOnce<ARG, Output = RET>,\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n-error[E0271]: type mismatch resolving `<fn((i32,)) -> bool {bar} as FnOnce<((i32,),)>>::Output == i32`\n+error[E0271]: type mismatch resolving `<fn(i32) -> bool {bar} as FnOnce<(i32,)>>::Output == i32`\n   --> $DIR/const-eval-select-bad.rs:27:5\n    |\n LL |     const_eval_select((1,), foo, bar);\n@@ -37,25 +39,25 @@ LL |     const_eval_select((1,), foo, bar);\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n    |\n-LL |     G: FnOnce(ARG) -> RET + ~const Drop,\n-   |                       ^^^ required by this bound in `const_eval_select`\n+LL |     G: FnOnce<ARG, Output = RET> + ~const Drop,\n+   |                    ^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n error[E0631]: type mismatch in function arguments\n   --> $DIR/const-eval-select-bad.rs:32:37\n    |\n-LL | const fn foo((n,): (i32,)) -> i32 {\n-   | --------------------------------- found signature of `fn((i32,)) -> _`\n+LL | const fn foo(n: i32) -> i32 {\n+   | --------------------------- found signature of `fn(i32) -> _`\n ...\n LL |     const_eval_select((true,), foo, baz);\n-   |     -----------------               ^^^ expected signature of `fn((bool,)) -> _`\n+   |     -----------------               ^^^ expected signature of `fn(bool) -> _`\n    |     |\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n    |\n-LL |     F: ~const FnOnce(ARG) -> RET,\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n+LL |     F: ~const FnOnce<ARG, Output = RET>,\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "afec8e054bb76b4adc69a613a0e3216cae9b3ce8", "filename": "src/test/ui/intrinsics/const-eval-select-x86_64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6770dbd4b5729677bcca6a4c73d3335e523a7ac9/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6770dbd4b5729677bcca6a4c73d3335e523a7ac9/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-x86_64.rs?ref=6770dbd4b5729677bcca6a4c73d3335e523a7ac9", "patch": "@@ -6,11 +6,11 @@ use std::intrinsics::const_eval_select;\n use std::arch::x86_64::*;\n use std::mem::transmute;\n \n-const fn eq_ct((x, y): ([i32; 4], [i32; 4])) -> bool {\n+const fn eq_ct(x: [i32; 4], y: [i32; 4]) -> bool {\n     x[0] == y[0] && x[1] == y[1] && x[2] == y[2] && x[3] == y[3]\n }\n \n-fn eq_rt((x, y): ([i32; 4], [i32; 4])) -> bool {\n+fn eq_rt(x: [i32; 4], y: [i32; 4]) -> bool {\n     unsafe {\n         let x = _mm_loadu_si128(&x as *const _ as *const _);\n         let y = _mm_loadu_si128(&y as *const _ as *const _);"}, {"sha": "744db2f15b0560952d558528c18a380b105a98d9", "filename": "src/test/ui/intrinsics/const-eval-select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6770dbd4b5729677bcca6a4c73d3335e523a7ac9/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6770dbd4b5729677bcca6a4c73d3335e523a7ac9/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select.rs?ref=6770dbd4b5729677bcca6a4c73d3335e523a7ac9", "patch": "@@ -4,11 +4,11 @@\n \n use std::intrinsics::const_eval_select;\n \n-const fn yes(_: ()) -> bool {\n+const fn yes() -> bool {\n     true\n }\n \n-fn no(_: ()) -> bool {\n+fn no() -> bool {\n     false\n }\n "}]}