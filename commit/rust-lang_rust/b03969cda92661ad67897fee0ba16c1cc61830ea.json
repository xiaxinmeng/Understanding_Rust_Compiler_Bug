{"sha": "b03969cda92661ad67897fee0ba16c1cc61830ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMzk2OWNkYTkyNjYxYWQ2Nzg5N2ZlZTBiYTE2YzFjYzYxODMwZWE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-06T21:46:32Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-06T21:46:32Z"}, "message": "Remove `SolutionVariables`, add ConstrainedSubst analogous to Chalk\n\n... just missing the constraints.", "tree": {"sha": "9131d26bacbda364c81ad0ace9d4428b0d8e3c33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9131d26bacbda364c81ad0ace9d4428b0d8e3c33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b03969cda92661ad67897fee0ba16c1cc61830ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b03969cda92661ad67897fee0ba16c1cc61830ea", "html_url": "https://github.com/rust-lang/rust/commit/b03969cda92661ad67897fee0ba16c1cc61830ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b03969cda92661ad67897fee0ba16c1cc61830ea/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31d2b3b9cb75a09c93655b38377ed5f4144ebaf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/31d2b3b9cb75a09c93655b38377ed5f4144ebaf0", "html_url": "https://github.com/rust-lang/rust/commit/31d2b3b9cb75a09c93655b38377ed5f4144ebaf0"}], "stats": {"total": 86, "additions": 53, "deletions": 33}, "files": [{"sha": "caa22dace37e9f3a946085cc266ad8e276cb0e03", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b03969cda92661ad67897fee0ba16c1cc61830ea/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03969cda92661ad67897fee0ba16c1cc61830ea/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=b03969cda92661ad67897fee0ba16c1cc61830ea", "patch": "@@ -58,9 +58,8 @@ use hir_ty::{\n     subst_prefix,\n     traits::FnTrait,\n     AliasEq, AliasTy, BoundVar, CallableDefId, CallableSig, Canonical, CanonicalVarKinds, Cast,\n-    DebruijnIndex, InEnvironment, Interner, QuantifiedWhereClause, Scalar, Solution,\n-    SolutionVariables, Substitution, TraitEnvironment, Ty, TyBuilder, TyDefId, TyExt, TyKind,\n-    TyVariableKind, WhereClause,\n+    DebruijnIndex, InEnvironment, Interner, QuantifiedWhereClause, Scalar, Solution, Substitution,\n+    TraitEnvironment, Ty, TyBuilder, TyDefId, TyExt, TyKind, TyVariableKind, WhereClause,\n };\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n@@ -1822,8 +1821,9 @@ impl Type {\n         );\n \n         match db.trait_solve(self.krate, goal)? {\n-            Solution::Unique(SolutionVariables(subst)) => subst\n+            Solution::Unique(s) => s\n                 .value\n+                .subst\n                 .interned()\n                 .first()\n                 .map(|ty| self.derived(ty.assert_ty_ref(&Interner).clone())),"}, {"sha": "80e192a5750fda208e51959a66abb583351b3542", "filename": "crates/hir_ty/src/autoderef.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b03969cda92661ad67897fee0ba16c1cc61830ea/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03969cda92661ad67897fee0ba16c1cc61830ea/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs?ref=b03969cda92661ad67897fee0ba16c1cc61830ea", "patch": "@@ -120,8 +120,8 @@ fn deref_by_trait(\n             // assumptions will be broken. We would need to properly introduce\n             // new variables in that case\n \n-            for i in 1..vars.0.binders.len(&Interner) {\n-                if vars.0.value.at(&Interner, i - 1).assert_ty_ref(&Interner).kind(&Interner)\n+            for i in 1..vars.binders.len(&Interner) {\n+                if vars.value.subst.at(&Interner, i - 1).assert_ty_ref(&Interner).kind(&Interner)\n                     != &TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, i - 1))\n                 {\n                     warn!(\"complex solution for derefing {:?}: {:?}, ignoring\", ty.goal, solution);\n@@ -130,12 +130,12 @@ fn deref_by_trait(\n             }\n             Some(Canonical {\n                 value: vars\n-                    .0\n                     .value\n-                    .at(&Interner, vars.0.value.len(&Interner) - 1)\n+                    .subst\n+                    .at(&Interner, vars.value.subst.len(&Interner) - 1)\n                     .assert_ty_ref(&Interner)\n                     .clone(),\n-                binders: vars.0.binders.clone(),\n+                binders: vars.binders.clone(),\n             })\n         }\n         Solution::Ambig(_) => {"}, {"sha": "7c6c3600b8467991d30482aac2c676562ec77bed", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b03969cda92661ad67897fee0ba16c1cc61830ea/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03969cda92661ad67897fee0ba16c1cc61830ea/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=b03969cda92661ad67897fee0ba16c1cc61830ea", "patch": "@@ -42,7 +42,7 @@ use super::{\n };\n use crate::{\n     db::HirDatabase, infer::diagnostics::InferenceDiagnostic, lower::ImplTraitLoweringMode,\n-    to_assoc_type_id, AliasEq, AliasTy, Interner, TyBuilder, TyExt, TyKind,\n+    to_assoc_type_id, AliasEq, AliasTy, Canonical, Interner, TyBuilder, TyExt, TyKind,\n };\n \n // This lint has a false positive here. See the link below for details.\n@@ -342,11 +342,18 @@ impl<'a> InferenceContext<'a> {\n                 self.db.trait_solve(self.resolver.krate().unwrap(), canonicalized.value.clone());\n \n             match solution {\n-                Some(Solution::Unique(substs)) => {\n-                    canonicalized.apply_solution(self, substs.0);\n+                Some(Solution::Unique(canonical_subst)) => {\n+                    canonicalized.apply_solution(\n+                        self,\n+                        Canonical {\n+                            binders: canonical_subst.binders,\n+                            // FIXME: handle constraints\n+                            value: canonical_subst.value.subst,\n+                        },\n+                    );\n                 }\n                 Some(Solution::Ambig(Guidance::Definite(substs))) => {\n-                    canonicalized.apply_solution(self, substs.0);\n+                    canonicalized.apply_solution(self, substs);\n                     self.obligations.push(obligation);\n                 }\n                 Some(_) => {"}, {"sha": "f1af2a0bdcb308573c483b8b2132332235e1155e", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b03969cda92661ad67897fee0ba16c1cc61830ea/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03969cda92661ad67897fee0ba16c1cc61830ea/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=b03969cda92661ad67897fee0ba16c1cc61830ea", "patch": "@@ -7,7 +7,7 @@\n use chalk_ir::{cast::Cast, Mutability, TyVariableKind};\n use hir_def::lang_item::LangItemTarget;\n \n-use crate::{autoderef, Interner, Solution, Ty, TyBuilder, TyExt, TyKind};\n+use crate::{autoderef, Canonical, Interner, Solution, Ty, TyBuilder, TyExt, TyKind};\n \n use super::{InEnvironment, InferenceContext};\n \n@@ -148,7 +148,14 @@ impl<'a> InferenceContext<'a> {\n \n         match solution {\n             Solution::Unique(v) => {\n-                canonicalized.apply_solution(self, v.0);\n+                canonicalized.apply_solution(\n+                    self,\n+                    Canonical {\n+                        binders: v.binders,\n+                        // FIXME handle constraints\n+                        value: v.value.subst,\n+                    },\n+                );\n             }\n             _ => return None,\n         };"}, {"sha": "3374532c349f087b52becccd7a3726b10b895b25", "filename": "crates/hir_ty/src/traits.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b03969cda92661ad67897fee0ba16c1cc61830ea/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03969cda92661ad67897fee0ba16c1cc61830ea/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits.rs?ref=b03969cda92661ad67897fee0ba16c1cc61830ea", "patch": "@@ -9,7 +9,7 @@ use stdx::panic_context;\n \n use crate::{\n     db::HirDatabase, AliasEq, AliasTy, Canonical, DomainGoal, Guidance, HirDisplay, InEnvironment,\n-    Solution, SolutionVariables, Ty, TyKind, WhereClause,\n+    Solution, Ty, TyKind, WhereClause,\n };\n \n use self::chalk::{from_chalk, Interner, ToChalk};\n@@ -173,23 +173,15 @@ fn solution_from_chalk(\n     db: &dyn HirDatabase,\n     solution: chalk_solve::Solution<Interner>,\n ) -> Solution {\n-    let convert_subst = |subst: chalk_ir::Canonical<chalk_ir::Substitution<Interner>>| {\n-        let result = from_chalk(db, subst);\n-        SolutionVariables(result)\n-    };\n     match solution {\n         chalk_solve::Solution::Unique(constr_subst) => {\n-            let subst = chalk_ir::Canonical {\n-                value: constr_subst.value.subst,\n-                binders: constr_subst.binders,\n-            };\n-            Solution::Unique(convert_subst(subst))\n+            Solution::Unique(from_chalk(db, constr_subst))\n         }\n         chalk_solve::Solution::Ambig(chalk_solve::Guidance::Definite(subst)) => {\n-            Solution::Ambig(Guidance::Definite(convert_subst(subst)))\n+            Solution::Ambig(Guidance::Definite(from_chalk(db, subst)))\n         }\n         chalk_solve::Solution::Ambig(chalk_solve::Guidance::Suggested(subst)) => {\n-            Solution::Ambig(Guidance::Suggested(convert_subst(subst)))\n+            Solution::Ambig(Guidance::Suggested(from_chalk(db, subst)))\n         }\n         chalk_solve::Solution::Ambig(chalk_solve::Guidance::Unknown) => {\n             Solution::Ambig(Guidance::Unknown)"}, {"sha": "84abd99b29d4844c7174d3033eba1427f05f1035", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b03969cda92661ad67897fee0ba16c1cc61830ea/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03969cda92661ad67897fee0ba16c1cc61830ea/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=b03969cda92661ad67897fee0ba16c1cc61830ea", "patch": "@@ -11,8 +11,8 @@ use hir_def::{GenericDefId, TypeAliasId};\n \n use crate::{\n     chalk_ext::ProjectionTyExt, db::HirDatabase, static_lifetime, AliasTy, CallableDefId,\n-    Canonical, DomainGoal, FnPointer, GenericArg, InEnvironment, OpaqueTy, ProjectionTy,\n-    QuantifiedWhereClause, Substitution, TraitRef, Ty, TypeWalk, WhereClause,\n+    Canonical, ConstrainedSubst, DomainGoal, FnPointer, GenericArg, InEnvironment, OpaqueTy,\n+    ProjectionTy, QuantifiedWhereClause, Substitution, TraitRef, Ty, TypeWalk, WhereClause,\n };\n \n use super::interner::*;\n@@ -459,6 +459,18 @@ where\n     }\n }\n \n+impl ToChalk for crate::ConstrainedSubst {\n+    type Chalk = chalk_ir::ConstrainedSubst<Interner>;\n+\n+    fn to_chalk(self, _db: &dyn HirDatabase) -> Self::Chalk {\n+        unimplemented!()\n+    }\n+\n+    fn from_chalk(db: &dyn HirDatabase, chalk: Self::Chalk) -> Self {\n+        ConstrainedSubst { subst: from_chalk(db, chalk.subst) }\n+    }\n+}\n+\n pub(super) fn make_binders<T>(value: T, num_vars: usize) -> chalk_ir::Binders<T>\n where\n     T: HasInterner<Interner = Interner>,"}, {"sha": "c25bc2d6abcab95ca280ce889f38da3a9c63daf4", "filename": "crates/hir_ty/src/types.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b03969cda92661ad67897fee0ba16c1cc61830ea/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03969cda92661ad67897fee0ba16c1cc61830ea/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftypes.rs?ref=b03969cda92661ad67897fee0ba16c1cc61830ea", "patch": "@@ -490,14 +490,16 @@ pub struct AliasEq {\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n-pub struct SolutionVariables(pub Canonical<Substitution>);\n+pub struct ConstrainedSubst {\n+    pub subst: Substitution,\n+}\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n /// A (possible) solution for a proposed goal.\n pub enum Solution {\n     /// The goal indeed holds, and there is a unique value for all existential\n     /// variables.\n-    Unique(SolutionVariables),\n+    Unique(Canonical<ConstrainedSubst>),\n \n     /// The goal may be provable in multiple ways, but regardless we may have some guidance\n     /// for type inference. In this case, we don't return any lifetime\n@@ -513,12 +515,12 @@ pub enum Guidance {\n     /// The existential variables *must* have the given values if the goal is\n     /// ever to hold, but that alone isn't enough to guarantee the goal will\n     /// actually hold.\n-    Definite(SolutionVariables),\n+    Definite(Canonical<Substitution>),\n \n     /// There are multiple plausible values for the existentials, but the ones\n     /// here are suggested as the preferred choice heuristically. These should\n     /// be used for inference fallback only.\n-    Suggested(SolutionVariables),\n+    Suggested(Canonical<Substitution>),\n \n     /// There's no useful information to feed back to type inference\n     Unknown,"}]}