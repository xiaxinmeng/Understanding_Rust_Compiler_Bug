{"sha": "ae644a2d4df673f5063d5b127488b7f03fef15a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNjQ0YTJkNGRmNjczZjUwNjNkNWIxMjc0ODhiN2YwM2ZlZjE1YTY=", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2020-11-18T13:38:17Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2020-11-18T22:10:10Z"}, "message": "add [src] links to methods on a trait's page", "tree": {"sha": "afa61bc0a03244ab35f47ff9ac9eac7e7aae9e2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afa61bc0a03244ab35f47ff9ac9eac7e7aae9e2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae644a2d4df673f5063d5b127488b7f03fef15a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae644a2d4df673f5063d5b127488b7f03fef15a6", "html_url": "https://github.com/rust-lang/rust/commit/ae644a2d4df673f5063d5b127488b7f03fef15a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae644a2d4df673f5063d5b127488b7f03fef15a6/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b491587c91c5cce0ed49751f552b0729e9b69d2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b491587c91c5cce0ed49751f552b0729e9b69d2f", "html_url": "https://github.com/rust-lang/rust/commit/b491587c91c5cce0ed49751f552b0729e9b69d2f"}], "stats": {"total": 67, "additions": 43, "deletions": 24}, "files": [{"sha": "147a8d33765af4574f391668595a95944e80091f", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ae644a2d4df673f5063d5b127488b7f03fef15a6/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae644a2d4df673f5063d5b127488b7f03fef15a6/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=ae644a2d4df673f5063d5b127488b7f03fef15a6", "patch": "@@ -86,11 +86,7 @@ crate type NameDoc = (String, Option<String>);\n \n crate fn ensure_trailing_slash(v: &str) -> impl fmt::Display + '_ {\n     crate::html::format::display_fn(move |f| {\n-        if !v.ends_with('/') && !v.is_empty() {\n-            write!(f, \"{}/\", v)\n-        } else {\n-            write!(f, \"{}\", v)\n-        }\n+        if !v.ends_with('/') && !v.is_empty() { write!(f, \"{}/\", v) } else { write!(f, \"{}\", v) }\n     })\n }\n \n@@ -1950,11 +1946,7 @@ fn document_stability(\n }\n \n fn document_non_exhaustive_header(item: &clean::Item) -> &str {\n-    if item.is_non_exhaustive() {\n-        \" (Non-exhaustive)\"\n-    } else {\n-        \"\"\n-    }\n+    if item.is_non_exhaustive() { \" (Non-exhaustive)\" } else { \"\" }\n }\n \n fn document_non_exhaustive(w: &mut Buffer, item: &clean::Item) {\n@@ -2636,7 +2628,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n         write!(w, \"{}<span class=\\\"loading-content\\\">Loading content...</span>\", extra_content)\n     }\n \n-    fn trait_item(w: &mut Buffer, cx: &Context, m: &clean::Item, t: &clean::Item) {\n+    fn trait_item(w: &mut Buffer, cx: &Context, m: &clean::Item, t: &clean::Item, cache: &Cache) {\n         let name = m.name.as_ref().unwrap();\n         info!(\"Documenting {} on {}\", name, t.name.as_deref().unwrap_or_default());\n         let item_type = m.type_();\n@@ -2645,6 +2637,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n         render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)), ItemType::Impl);\n         write!(w, \"</code>\");\n         render_stability_since(w, m, t);\n+        write_srclink(cx, m, w, cache);\n         write!(w, \"</h3>\");\n         document(w, cx, m, Some(t));\n     }\n@@ -2656,8 +2649,8 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n             \"Associated Types\",\n             \"<div class=\\\"methods\\\">\",\n         );\n-        for t in &types {\n-            trait_item(w, cx, *t, it);\n+        for t in types {\n+            trait_item(w, cx, t, it, cache);\n         }\n         write_loading_content(w, \"</div>\");\n     }\n@@ -2669,8 +2662,8 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n             \"Associated Constants\",\n             \"<div class=\\\"methods\\\">\",\n         );\n-        for t in &consts {\n-            trait_item(w, cx, *t, it);\n+        for t in consts {\n+            trait_item(w, cx, t, it, cache);\n         }\n         write_loading_content(w, \"</div>\");\n     }\n@@ -2683,8 +2676,8 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n             \"Required methods\",\n             \"<div class=\\\"methods\\\">\",\n         );\n-        for m in &required {\n-            trait_item(w, cx, *m, it);\n+        for m in required {\n+            trait_item(w, cx, m, it, cache);\n         }\n         write_loading_content(w, \"</div>\");\n     }\n@@ -2695,8 +2688,8 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n             \"Provided methods\",\n             \"<div class=\\\"methods\\\">\",\n         );\n-        for m in &provided {\n-            trait_item(w, cx, *m, it);\n+        for m in provided {\n+            trait_item(w, cx, m, it, cache);\n         }\n         write_loading_content(w, \"</div>\");\n     }"}, {"sha": "7d22913b99de909028c83571a3324e0efff4ac11", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae644a2d4df673f5063d5b127488b7f03fef15a6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/ae644a2d4df673f5063d5b127488b7f03fef15a6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=ae644a2d4df673f5063d5b127488b7f03fef15a6", "patch": "@@ -659,7 +659,7 @@ a {\n \ttext-decoration: underline;\n }\n \n-.invisible > .srclink, h4 > code + .srclink {\n+.invisible > .srclink, h4 > code + .srclink, h3 > code + .srclink {\n \tposition: absolute;\n \ttop: 0;\n \tright: 0;\n@@ -857,25 +857,25 @@ body.blur > :not(#help) {\n \ttop: 0;\n }\n \n-.impl-items .since, .impl .since {\n+.impl-items .since, .impl .since, .methods .since {\n \tflex-grow: 0;\n \tpadding-left: 12px;\n \tpadding-right: 2px;\n \tposition: initial;\n }\n \n-.impl-items .srclink, .impl .srclink {\n+.impl-items .srclink, .impl .srclink, .methods .srclink {\n \tflex-grow: 0;\n \t/* Override header settings otherwise it's too bold */\n \tfont-size: 17px;\n \tfont-weight: normal;\n }\n \n-.impl-items code, .impl code {\n+.impl-items code, .impl code, .methods code {\n \tflex-grow: 1;\n }\n \n-.impl-items h4, h4.impl, h3.impl {\n+.impl-items h4, h4.impl, h3.impl, .methods h3 {\n \tdisplay: flex;\n \tflex-basis: 100%;\n \tfont-size: 16px;"}, {"sha": "77116695690fc75366d3ef4ddbf62b28a70bf10a", "filename": "src/test/rustdoc/trait-src-link.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ae644a2d4df673f5063d5b127488b7f03fef15a6/src%2Ftest%2Frustdoc%2Ftrait-src-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae644a2d4df673f5063d5b127488b7f03fef15a6/src%2Ftest%2Frustdoc%2Ftrait-src-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-src-link.rs?ref=ae644a2d4df673f5063d5b127488b7f03fef15a6", "patch": "@@ -0,0 +1,26 @@\n+#![crate_name = \"quix\"]\n+pub trait Foo {\n+    // @has quix/trait.Foo.html '//a[@href=\"../src/quix/trait-src-link.rs.html#4\"]' '[src]'\n+    fn required();\n+\n+    // @has quix/trait.Foo.html '//a[@href=\"../src/quix/trait-src-link.rs.html#7\"]' '[src]'\n+    fn provided() {}\n+}\n+\n+pub struct Bar;\n+\n+impl Foo for Bar {\n+    // @has quix/struct.Bar.html '//a[@href=\"../src/quix/trait-src-link.rs.html#14\"]' '[src]'\n+    fn required() {}\n+    // @has quix/struct.Bar.html '//a[@href=\"../src/quix/trait-src-link.rs.html#7\"]' '[src]'\n+}\n+\n+pub struct Baz;\n+\n+impl Foo for Baz {\n+    // @has quix/struct.Baz.html '//a[@href=\"../src/quix/trait-src-link.rs.html#22\"]' '[src]'\n+    fn required() {}\n+\n+    // @has quix/struct.Baz.html '//a[@href=\"../src/quix/trait-src-link.rs.html#25\"]' '[src]'\n+    fn provided() {}\n+}"}]}