{"sha": "1eb42f1c784e999259b15f68c63040e1fafbe273", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYjQyZjFjNzg0ZTk5OTI1OWIxNWY2OGM2MzA0MGUxZmFmYmUyNzM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-09-18T10:36:45Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-09-18T12:28:01Z"}, "message": "Add feature gate", "tree": {"sha": "0d7722dbc2f279acb1455a052589e88adfd42df6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d7722dbc2f279acb1455a052589e88adfd42df6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1eb42f1c784e999259b15f68c63040e1fafbe273", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1eb42f1c784e999259b15f68c63040e1fafbe273", "html_url": "https://github.com/rust-lang/rust/commit/1eb42f1c784e999259b15f68c63040e1fafbe273", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1eb42f1c784e999259b15f68c63040e1fafbe273/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "605a4729481db73473dc37f09f840da6ec6173ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/605a4729481db73473dc37f09f840da6ec6173ab", "html_url": "https://github.com/rust-lang/rust/commit/605a4729481db73473dc37f09f840da6ec6173ab"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "83849574260e1ff93034292314a991f962be5935", "filename": "src/doc/reference.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1eb42f1c784e999259b15f68c63040e1fafbe273/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/1eb42f1c784e999259b15f68c63040e1fafbe273/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=1eb42f1c784e999259b15f68c63040e1fafbe273", "patch": "@@ -1178,17 +1178,19 @@ let px: i32 = match p { Point(x, _) => x };\n ```\n \n A _unit-like struct_ is a structure without any fields, defined by leaving off\n-the list of fields entirely. Such structure implicitly defines a constant of\n+the list of fields entirely. Such a structure implicitly defines a constant of\n its type with the same name. For example:\n \n ```\n+# #![feature(braced_empty_structs)]\n struct Cookie;\n let c = [Cookie, Cookie {}, Cookie, Cookie {}];\n ```\n \n is equivalent to\n \n ```\n+# #![feature(braced_empty_structs)]\n struct Cookie {}\n const Cookie: Cookie = Cookie {};\n let c = [Cookie, Cookie {}, Cookie, Cookie {}];\n@@ -2420,6 +2422,7 @@ The currently implemented features of the reference compiler are:\n                               terms of encapsulation).\n * - `default_type_parameter_fallback` - Allows type parameter defaults to\n                                         influence type inference.\n+* - `braced_empty_structs` - Allows use of empty structs with braces.\n \n If a feature is promoted to a language feature, then all existing programs will\n start to receive compilation warnings about `#![feature]` directives which enabled"}, {"sha": "989977a691755b7cc8b7711b4af871b5ba9396dd", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1eb42f1c784e999259b15f68c63040e1fafbe273/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb42f1c784e999259b15f68c63040e1fafbe273/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=1eb42f1c784e999259b15f68c63040e1fafbe273", "patch": "@@ -191,6 +191,9 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Option<u32>, Status\n \n     // allow `#[unwind]`\n     (\"unwind_attributes\", \"1.4.0\", None, Active),\n+\n+    // allow empty structs/enum variants with braces\n+    (\"braced_empty_structs\", \"1.5.0\", None, Active),\n ];\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n \n@@ -775,7 +778,7 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                 }\n             }\n \n-            ast::ItemStruct(..) => {\n+            ast::ItemStruct(ref def, _) => {\n                 if attr::contains_name(&i.attrs[..], \"simd\") {\n                     self.gate_feature(\"simd\", i.span,\n                                       \"SIMD types are experimental and possibly buggy\");\n@@ -794,6 +797,10 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                         }\n                     }\n                 }\n+                if def.fields.is_empty() && def.ctor_id.is_none() {\n+                    self.gate_feature(\"braced_empty_structs\", i.span,\n+                                      \"empty structs with braces are unstable\");\n+                }\n             }\n \n             ast::ItemDefaultImpl(..) => {\n@@ -843,6 +850,12 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                                   \"box expression syntax is experimental; \\\n                                    you can call `Box::new` instead.\");\n             }\n+            ast::ExprStruct(_, ref fields, ref expr) => {\n+                if fields.is_empty() && expr.is_none() {\n+                    self.gate_feature(\"braced_empty_structs\", e.span,\n+                                      \"empty structs with braces are unstable\");\n+                }\n+            }\n             _ => {}\n         }\n         visit::walk_expr(self, e);\n@@ -867,6 +880,12 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                                   pattern.span,\n                                   \"box pattern syntax is experimental\");\n             }\n+            ast::PatStruct(_, ref fields, dotdot) => {\n+                if fields.is_empty() && !dotdot {\n+                    self.gate_feature(\"braced_empty_structs\", pattern.span,\n+                                      \"empty structs with braces are unstable\");\n+                }\n+            }\n             _ => {}\n         }\n         visit::walk_pat(self, pattern)"}, {"sha": "ad412259faa29722b65985795698e908dd2dc4ae", "filename": "src/test/compile-fail/empty-struct-with-braces-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eb42f1c784e999259b15f68c63040e1fafbe273/src%2Ftest%2Fcompile-fail%2Fempty-struct-with-braces-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb42f1c784e999259b15f68c63040e1fafbe273/src%2Ftest%2Fcompile-fail%2Fempty-struct-with-braces-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-with-braces-1.rs?ref=1eb42f1c784e999259b15f68c63040e1fafbe273", "patch": "@@ -10,6 +10,8 @@\n \n // Empty struct defined with braces shouldn't add names into value namespace\n \n+#![feature(braced_empty_structs)]\n+\n struct Empty {}\n \n fn main() {"}, {"sha": "0e72e7dc44185349cbac763f7133e7184d15e8bb", "filename": "src/test/compile-fail/empty-struct-with-braces-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1eb42f1c784e999259b15f68c63040e1fafbe273/src%2Ftest%2Fcompile-fail%2Fempty-struct-with-braces-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb42f1c784e999259b15f68c63040e1fafbe273/src%2Ftest%2Fcompile-fail%2Fempty-struct-with-braces-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-with-braces-2.rs?ref=1eb42f1c784e999259b15f68c63040e1fafbe273", "patch": "@@ -10,6 +10,7 @@\n \n // Empty struct defined with braces shouldn't add names into value namespace\n \n+#![feature(braced_empty_structs)]\n #![deny(warnings)]\n \n struct Empty {}"}, {"sha": "e6f20ba345ad35fec6697bd6a06ea2f5504a2d4c", "filename": "src/test/compile-fail/empty-struct-with-braces-3.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1eb42f1c784e999259b15f68c63040e1fafbe273/src%2Ftest%2Fcompile-fail%2Fempty-struct-with-braces-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb42f1c784e999259b15f68c63040e1fafbe273/src%2Ftest%2Fcompile-fail%2Fempty-struct-with-braces-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-with-braces-3.rs?ref=1eb42f1c784e999259b15f68c63040e1fafbe273", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Feature gate test for empty struct with braces\n+\n+struct Empty {} //~ ERROR empty structs with braces are unstable\n+\n+fn main() {\n+    let e = Empty {}; //~ ERROR empty structs with braces are unstable\n+\n+    match e {\n+        Empty {} => {} //~ ERROR empty structs with braces are unstable\n+    }\n+}"}, {"sha": "dc806acb980ddc7186aea13e80ab750cfbd5bb40", "filename": "src/test/run-pass/empty-struct-with-braces.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eb42f1c784e999259b15f68c63040e1fafbe273/src%2Ftest%2Frun-pass%2Fempty-struct-with-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb42f1c784e999259b15f68c63040e1fafbe273/src%2Ftest%2Frun-pass%2Fempty-struct-with-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-struct-with-braces.rs?ref=1eb42f1c784e999259b15f68c63040e1fafbe273", "patch": "@@ -11,6 +11,8 @@\n // Empty struct defined with braces add names into type namespace\n // Empty struct defined without braces add names into both type and value namespaces\n \n+#![feature(braced_empty_structs)]\n+\n struct Empty1 {}\n struct Empty2;\n struct Empty3 {}"}, {"sha": "a9abb99696f59a210f7c47f4e77db4820e0217e2", "filename": "src/test/run-pass/issue-16819.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eb42f1c784e999259b15f68c63040e1fafbe273/src%2Ftest%2Frun-pass%2Fissue-16819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb42f1c784e999259b15f68c63040e1fafbe273/src%2Ftest%2Frun-pass%2Fissue-16819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16819.rs?ref=1eb42f1c784e999259b15f68c63040e1fafbe273", "patch": "@@ -10,6 +10,8 @@\n \n //`#[cfg]` on struct field permits empty unusable struct\n \n+#![feature(braced_empty_structs)]\n+\n struct S {\n     #[cfg(untrue)]\n     a: int,"}]}