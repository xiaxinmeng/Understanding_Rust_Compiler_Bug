{"sha": "6290f92d07fd7ecdbd2f752fde9b12f926b592fa", "node_id": "C_kwDOAAsO6NoAKDYyOTBmOTJkMDdmZDdlY2RiZDJmNzUyZmRlOWIxMmY5MjZiNTkyZmE", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-07-26T23:58:59Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-08-03T13:17:26Z"}, "message": "Rustdoc-Json: Add and use `FromWithTcx` for `Vec`", "tree": {"sha": "5900e2f97bbe6f58e2310fae7e86534dbe230215", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5900e2f97bbe6f58e2310fae7e86534dbe230215"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6290f92d07fd7ecdbd2f752fde9b12f926b592fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6290f92d07fd7ecdbd2f752fde9b12f926b592fa", "html_url": "https://github.com/rust-lang/rust/commit/6290f92d07fd7ecdbd2f752fde9b12f926b592fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6290f92d07fd7ecdbd2f752fde9b12f926b592fa/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "625c4d70ffa53e36d2b724d191f759937a131bff", "url": "https://api.github.com/repos/rust-lang/rust/commits/625c4d70ffa53e36d2b724d191f759937a131bff", "html_url": "https://github.com/rust-lang/rust/commit/625c4d70ffa53e36d2b724d191f759937a131bff"}], "stats": {"total": 64, "additions": 31, "deletions": 33}, "files": [{"sha": "8caba8cb9029cf1548c2c9892122bdf1c19767f9", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 31, "deletions": 33, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/6290f92d07fd7ecdbd2f752fde9b12f926b592fa/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6290f92d07fd7ecdbd2f752fde9b12f926b592fa/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=6290f92d07fd7ecdbd2f752fde9b12f926b592fa", "patch": "@@ -119,6 +119,16 @@ where\n     }\n }\n \n+impl<I, T, U> FromWithTcx<I> for Vec<U>\n+where\n+    I: IntoIterator<Item = T>,\n+    U: FromWithTcx<T>,\n+{\n+    fn from_tcx(f: I, tcx: TyCtxt<'_>) -> Vec<U> {\n+        f.into_iter().map(|x| x.into_tcx(tcx)).collect()\n+    }\n+}\n+\n pub(crate) fn from_deprecation(deprecation: rustc_attr::Deprecation) -> Deprecation {\n     #[rustfmt::skip]\n     let rustc_attr::Deprecation { since, note, is_since_rustc_version: _, suggestion: _ } = deprecation;\n@@ -130,11 +140,11 @@ impl FromWithTcx<clean::GenericArgs> for GenericArgs {\n         use clean::GenericArgs::*;\n         match args {\n             AngleBracketed { args, bindings } => GenericArgs::AngleBracketed {\n-                args: args.into_vec().into_iter().map(|a| a.into_tcx(tcx)).collect(),\n-                bindings: bindings.into_iter().map(|a| a.into_tcx(tcx)).collect(),\n+                args: args.into_vec().into_tcx(tcx),\n+                bindings: bindings.into_tcx(tcx),\n             },\n             Parenthesized { inputs, output } => GenericArgs::Parenthesized {\n-                inputs: inputs.into_vec().into_iter().map(|a| a.into_tcx(tcx)).collect(),\n+                inputs: inputs.into_vec().into_tcx(tcx),\n                 output: output.map(|a| (*a).into_tcx(tcx)),\n             },\n         }\n@@ -177,9 +187,7 @@ impl FromWithTcx<clean::TypeBindingKind> for TypeBindingKind {\n         use clean::TypeBindingKind::*;\n         match kind {\n             Equality { term } => TypeBindingKind::Equality(term.into_tcx(tcx)),\n-            Constraint { bounds } => {\n-                TypeBindingKind::Constraint(bounds.into_iter().map(|a| a.into_tcx(tcx)).collect())\n-            }\n+            Constraint { bounds } => TypeBindingKind::Constraint(bounds.into_tcx(tcx)),\n         }\n     }\n }\n@@ -260,12 +268,12 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n         }\n         TyAssocTypeItem(g, b) => ItemEnum::AssocType {\n             generics: (*g).into_tcx(tcx),\n-            bounds: b.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+            bounds: b.into_tcx(tcx),\n             default: None,\n         },\n         AssocTypeItem(t, b) => ItemEnum::AssocType {\n             generics: t.generics.into_tcx(tcx),\n-            bounds: b.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+            bounds: b.into_tcx(tcx),\n             default: Some(t.item_type.unwrap_or(t.type_).into_tcx(tcx)),\n         },\n         // `convert_item` early returns `None` for stripped items and keywords.\n@@ -354,12 +362,8 @@ fn convert_lifetime(l: clean::Lifetime) -> String {\n impl FromWithTcx<clean::Generics> for Generics {\n     fn from_tcx(generics: clean::Generics, tcx: TyCtxt<'_>) -> Self {\n         Generics {\n-            params: generics.params.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n-            where_predicates: generics\n-                .where_predicates\n-                .into_iter()\n-                .map(|x| x.into_tcx(tcx))\n-                .collect(),\n+            params: generics.params.into_tcx(tcx),\n+            where_predicates: generics.where_predicates.into_tcx(tcx),\n         }\n     }\n }\n@@ -381,7 +385,7 @@ impl FromWithTcx<clean::GenericParamDefKind> for GenericParamDefKind {\n                 outlives: outlives.into_iter().map(convert_lifetime).collect(),\n             },\n             Type { did: _, bounds, default, synthetic } => GenericParamDefKind::Type {\n-                bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+                bounds: bounds.into_tcx(tcx),\n                 default: default.map(|x| (*x).into_tcx(tcx)),\n                 synthetic,\n             },\n@@ -399,7 +403,7 @@ impl FromWithTcx<clean::WherePredicate> for WherePredicate {\n         match predicate {\n             BoundPredicate { ty, bounds, bound_params } => WherePredicate::BoundPredicate {\n                 type_: ty.into_tcx(tcx),\n-                bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+                bounds: bounds.into_tcx(tcx),\n                 generic_params: bound_params\n                     .into_iter()\n                     .map(|x| GenericParamDef {\n@@ -409,8 +413,8 @@ impl FromWithTcx<clean::WherePredicate> for WherePredicate {\n                     .collect(),\n             },\n             RegionPredicate { lifetime, bounds } => WherePredicate::RegionPredicate {\n-                lifetime: convert_lifetime(lifetime)\n-                bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+                lifetime: convert_lifetime(lifetime),\n+                bounds: bounds.into_tcx(tcx),\n             },\n             EqPredicate { lhs, rhs } => {\n                 WherePredicate::EqPredicate { lhs: lhs.into_tcx(tcx), rhs: rhs.into_tcx(tcx) }\n@@ -428,7 +432,7 @@ impl FromWithTcx<clean::GenericBound> for GenericBound {\n                 let trait_ = clean::Type::Path { path: trait_ }.into_tcx(tcx);\n                 GenericBound::TraitBound {\n                     trait_,\n-                    generic_params: generic_params.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+                    generic_params: generic_params.into_tcx(tcx),\n                     modifier: from_trait_bound_modifier(modifier),\n                 }\n             }\n@@ -464,15 +468,15 @@ impl FromWithTcx<clean::Type> for Type {\n             },\n             clean::Type::DynTrait(bounds, lt) => Type::DynTrait(DynTrait {\n                 lifetime: lt.map(convert_lifetime),\n-                traits: bounds.into_iter().map(|t| t.into_tcx(tcx)).collect(),\n+                traits: bounds.into_tcx(tcx),\n             }),\n             Generic(s) => Type::Generic(s.to_string()),\n             Primitive(p) => Type::Primitive(p.as_sym().to_string()),\n             BareFunction(f) => Type::FunctionPointer(Box::new((*f).into_tcx(tcx))),\n-            Tuple(t) => Type::Tuple(t.into_iter().map(|x| x.into_tcx(tcx)).collect()),\n+            Tuple(t) => Type::Tuple(t.into_tcx(tcx)),\n             Slice(t) => Type::Slice(Box::new((*t).into_tcx(tcx))),\n             Array(t, s) => Type::Array { type_: Box::new((*t).into_tcx(tcx)), len: s },\n-            ImplTrait(g) => Type::ImplTrait(g.into_iter().map(|x| x.into_tcx(tcx)).collect()),\n+            ImplTrait(g) => Type::ImplTrait(g.into_tcx(tcx)),\n             Infer => Type::Infer,\n             RawPointer(mutability, type_) => Type::RawPointer {\n                 mutable: mutability == ast::Mutability::Mut,\n@@ -516,7 +520,7 @@ impl FromWithTcx<clean::BareFunctionDecl> for FunctionPointer {\n                 async_: false,\n                 abi: convert_abi(abi),\n             },\n-            generic_params: generic_params.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+            generic_params: generic_params.into_tcx(tcx),\n             decl: decl.into_tcx(tcx),\n         }\n     }\n@@ -550,7 +554,7 @@ impl FromWithTcx<clean::Trait> for Trait {\n             is_unsafe,\n             items: ids(items, tcx),\n             generics: generics.into_tcx(tcx),\n-            bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+            bounds: bounds.into_tcx(tcx),\n             implementations: Vec::new(), // Added in JsonRenderer::item\n         }\n     }\n@@ -563,7 +567,7 @@ impl FromWithTcx<clean::PolyTrait> for PolyTrait {\n     ) -> Self {\n         PolyTrait {\n             trait_: clean::Type::Path { path: trait_ }.into_tcx(tcx),\n-            generic_params: generic_params.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+            generic_params: generic_params.into_tcx(tcx),\n         }\n     }\n }\n@@ -730,10 +734,7 @@ impl FromWithTcx<Box<clean::Typedef>> for Typedef {\n \n impl FromWithTcx<clean::OpaqueTy> for OpaqueTy {\n     fn from_tcx(opaque: clean::OpaqueTy, tcx: TyCtxt<'_>) -> Self {\n-        OpaqueTy {\n-            bounds: opaque.bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n-            generics: opaque.generics.into_tcx(tcx),\n-        }\n+        OpaqueTy { bounds: opaque.bounds.into_tcx(tcx), generics: opaque.generics.into_tcx(tcx) }\n     }\n }\n \n@@ -749,10 +750,7 @@ impl FromWithTcx<clean::Static> for Static {\n \n impl FromWithTcx<clean::TraitAlias> for TraitAlias {\n     fn from_tcx(alias: clean::TraitAlias, tcx: TyCtxt<'_>) -> Self {\n-        TraitAlias {\n-            generics: alias.generics.into_tcx(tcx),\n-            params: alias.bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n-        }\n+        TraitAlias { generics: alias.generics.into_tcx(tcx), params: alias.bounds.into_tcx(tcx) }\n     }\n }\n "}]}