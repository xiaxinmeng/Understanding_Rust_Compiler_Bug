{"sha": "c18dc13f6e9ac3adced57c2410aa7b0f6bbeeb63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxOGRjMTNmNmU5YWMzYWRjZWQ1N2MyNDEwYWE3YjBmNmJiZWViNjM=", "commit": {"author": {"name": "Kit Freddura", "email": "kitfreddura@gmail.com", "date": "2016-10-02T20:48:52Z"}, "committer": {"name": "Kit Freddura", "email": "kitfreddura@gmail.com", "date": "2016-10-02T20:48:52Z"}, "message": "added file again", "tree": {"sha": "6f52fda7283b2ce2c426dc04b69826eeb8e98b73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f52fda7283b2ce2c426dc04b69826eeb8e98b73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c18dc13f6e9ac3adced57c2410aa7b0f6bbeeb63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c18dc13f6e9ac3adced57c2410aa7b0f6bbeeb63", "html_url": "https://github.com/rust-lang/rust/commit/c18dc13f6e9ac3adced57c2410aa7b0f6bbeeb63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c18dc13f6e9ac3adced57c2410aa7b0f6bbeeb63/comments", "author": {"login": "kitfre", "id": 10645601, "node_id": "MDQ6VXNlcjEwNjQ1NjAx", "avatar_url": "https://avatars.githubusercontent.com/u/10645601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kitfre", "html_url": "https://github.com/kitfre", "followers_url": "https://api.github.com/users/kitfre/followers", "following_url": "https://api.github.com/users/kitfre/following{/other_user}", "gists_url": "https://api.github.com/users/kitfre/gists{/gist_id}", "starred_url": "https://api.github.com/users/kitfre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kitfre/subscriptions", "organizations_url": "https://api.github.com/users/kitfre/orgs", "repos_url": "https://api.github.com/users/kitfre/repos", "events_url": "https://api.github.com/users/kitfre/events{/privacy}", "received_events_url": "https://api.github.com/users/kitfre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kitfre", "id": 10645601, "node_id": "MDQ6VXNlcjEwNjQ1NjAx", "avatar_url": "https://avatars.githubusercontent.com/u/10645601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kitfre", "html_url": "https://github.com/kitfre", "followers_url": "https://api.github.com/users/kitfre/followers", "following_url": "https://api.github.com/users/kitfre/following{/other_user}", "gists_url": "https://api.github.com/users/kitfre/gists{/gist_id}", "starred_url": "https://api.github.com/users/kitfre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kitfre/subscriptions", "organizations_url": "https://api.github.com/users/kitfre/orgs", "repos_url": "https://api.github.com/users/kitfre/repos", "events_url": "https://api.github.com/users/kitfre/events{/privacy}", "received_events_url": "https://api.github.com/users/kitfre/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d152ca04bdacf1f278ba81991b4845eda33de9fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d152ca04bdacf1f278ba81991b4845eda33de9fd", "html_url": "https://github.com/rust-lang/rust/commit/d152ca04bdacf1f278ba81991b4845eda33de9fd"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "2bb162685efc68ff98ca364992979665b9324fc7", "filename": "clippy_lints/src/ok_if_let.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c18dc13f6e9ac3adced57c2410aa7b0f6bbeeb63/clippy_lints%2Fsrc%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18dc13f6e9ac3adced57c2410aa7b0f6bbeeb63/clippy_lints%2Fsrc%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fok_if_let.rs?ref=c18dc13f6e9ac3adced57c2410aa7b0f6bbeeb63", "patch": "@@ -0,0 +1,53 @@\n+use rustc::lint::*;\n+use rustc::hir::*;\n+use utils::{paths, method_chain_args, span_help_and_lint, match_type};\n+\n+/// **What it does:*** Checks for unnecessary `ok()` in if let.\n+///\n+/// **Why is this bad?** Calling `ok()` in if let is unnecessary, instead match on `Ok(x`\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rustc\n+/// for result in iter {\n+///     if let Some(bench) = try!(result).parse().ok() {\n+///         vec.push(bench)\n+///     }\n+/// }\n+/// ```\n+declare_lint! {\n+    pub IF_LET_SOME_RESULT,\n+    Warn,\n+    \"usage of `ok()` in `if let Some(x)` statements is unnecessary, match on `Ok(expr)` instead\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct OkIfLetPass;\n+\n+impl LintPass for OkIfLetPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(IF_LET_SOME_RESULT)\n+    }\n+}\n+\n+impl LateLintPass for OkIfLetPass {\n+    fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        if_let_chain! {[ //begin checking variables\n+            let ExprMatch(ref op, ref body, ref source) = expr.node, //test if expr is a match\n+            let MatchSource::IfLetDesugar { contains_else_clause: _ } = *source, //test if it is an If Let\n+            let ExprMethodCall(_, _, ref result_types) = op.node, //check is expr.ok() has type Result<T,E>.ok()\n+            let PatKind::TupleStruct(ref x, ref y, _)  = body[0].pats[0].node, //get operation\n+            let Some(_) = method_chain_args(op, &[\"ok\"]) //test to see if using ok() methoduse std::marker::Sized;\n+\n+        ], {\n+            let is_result_type = match_type(cx, cx.tcx.expr_ty(&result_types[0]), &paths::RESULT);\n+            let some_expr_string = print::pat_to_string(&y[0]);\n+            if print::path_to_string(x) == \"Some\" && is_result_type {\n+                span_help_and_lint(cx, IF_LET_SOME_RESULT, expr.span,\n+                \"Matching on `Some` with `ok()` is redundant\",\n+                &format!(\"Consider matching on `Ok({})` and removing the call to `ok` instead\", some_expr_string)); \n+            }\n+        }}\n+    }\n+}"}]}