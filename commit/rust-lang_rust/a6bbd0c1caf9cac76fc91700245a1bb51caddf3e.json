{"sha": "a6bbd0c1caf9cac76fc91700245a1bb51caddf3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YmJkMGMxY2FmOWNhYzc2ZmM5MTcwMDI0NWExYmI1MWNhZGRmM2U=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-07T21:02:10Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-08T21:03:17Z"}, "message": "Improve primitive integers documentation", "tree": {"sha": "e2ce80f23ffb3e33fd2d5593d39d546c33cc7b54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2ce80f23ffb3e33fd2d5593d39d546c33cc7b54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6bbd0c1caf9cac76fc91700245a1bb51caddf3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6bbd0c1caf9cac76fc91700245a1bb51caddf3e", "html_url": "https://github.com/rust-lang/rust/commit/a6bbd0c1caf9cac76fc91700245a1bb51caddf3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6bbd0c1caf9cac76fc91700245a1bb51caddf3e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c1783a3a0bff2bdc4992769d2bb2f12bc728477", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c1783a3a0bff2bdc4992769d2bb2f12bc728477", "html_url": "https://github.com/rust-lang/rust/commit/9c1783a3a0bff2bdc4992769d2bb2f12bc728477"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "7dd9ecedb56c8a71e49daff0eb6da3f4d12d7f5e", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a6bbd0c1caf9cac76fc91700245a1bb51caddf3e/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6bbd0c1caf9cac76fc91700245a1bb51caddf3e/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=a6bbd0c1caf9cac76fc91700245a1bb51caddf3e", "patch": "@@ -187,13 +187,25 @@ macro_rules! int_impl {\n      $sub_with_overflow:path,\n      $mul_with_overflow:path) => {\n         /// Returns the smallest value that can be represented by this integer type.\n+        ///\n+        /// # Examples\n+        ///\n+        /// ```\n+        /// assert_eq!(i8::min_value(), -128);\n+        /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n         pub const fn min_value() -> Self {\n             (-1 as Self) << ($BITS - 1)\n         }\n \n         /// Returns the largest value that can be represented by this integer type.\n+        ///\n+        /// # Examples\n+        ///\n+        /// ```\n+        /// assert_eq!(i8::max_value(), 127);\n+        /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n         pub const fn max_value() -> Self {\n@@ -287,6 +299,8 @@ macro_rules! int_impl {\n         /// Shifts the bits to the left by a specified amount, `n`,\n         /// wrapping the truncated bits to the end of the resulting integer.\n         ///\n+        /// Please note this isn't the same operation as `<<`!\n+        ///\n         /// # Examples\n         ///\n         /// Basic usage:\n@@ -307,6 +321,8 @@ macro_rules! int_impl {\n         /// wrapping the truncated bits to the beginning of the resulting\n         /// integer.\n         ///\n+        /// Please note this isn't the same operation as `>>`!\n+        ///\n         /// # Examples\n         ///\n         /// Basic usage:\n@@ -1249,11 +1265,23 @@ macro_rules! uint_impl {\n      $sub_with_overflow:path,\n      $mul_with_overflow:path) => {\n         /// Returns the smallest value that can be represented by this integer type.\n+        ///\n+        /// # Examples\n+        ///\n+        /// ```\n+        /// assert_eq!(u8::min_value(), 0);\n+        /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n         pub const fn min_value() -> Self { 0 }\n \n         /// Returns the largest value that can be represented by this integer type.\n+        ///\n+        /// # Examples\n+        ///\n+        /// ```\n+        /// assert_eq!(u8::max_value(), 255);\n+        /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n         pub const fn max_value() -> Self { !0 }\n@@ -1360,6 +1388,8 @@ macro_rules! uint_impl {\n         /// Shifts the bits to the left by a specified amount, `n`,\n         /// wrapping the truncated bits to the end of the resulting integer.\n         ///\n+        /// Please note this isn't the same operation as `<<`!\n+        ///\n         /// # Examples\n         ///\n         /// Basic usage:\n@@ -1382,6 +1412,8 @@ macro_rules! uint_impl {\n         /// wrapping the truncated bits to the beginning of the resulting\n         /// integer.\n         ///\n+        /// Please note this isn't the same operation as `>>`!\n+        ///\n         /// # Examples\n         ///\n         /// Basic usage:"}, {"sha": "de891ea89189a26e40fbe9745f8d6e62c60e71ff", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a6bbd0c1caf9cac76fc91700245a1bb51caddf3e/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6bbd0c1caf9cac76fc91700245a1bb51caddf3e/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=a6bbd0c1caf9cac76fc91700245a1bb51caddf3e", "patch": "@@ -506,6 +506,9 @@ mod prim_f64 { }\n ///\n /// *[See also the `std::i8` module](i8/index.html).*\n ///\n+/// However, please note that examples are shared between primitive integer\n+/// types. So it's normal if you see usage of types like `i64` in there.\n+///\n mod prim_i8 { }\n \n #[doc(primitive = \"i16\")]\n@@ -514,6 +517,9 @@ mod prim_i8 { }\n ///\n /// *[See also the `std::i16` module](i16/index.html).*\n ///\n+/// However, please note that examples are shared between primitive integer\n+/// types. So it's normal if you see usage of types like `i32` in there.\n+///\n mod prim_i16 { }\n \n #[doc(primitive = \"i32\")]\n@@ -522,6 +528,9 @@ mod prim_i16 { }\n ///\n /// *[See also the `std::i32` module](i32/index.html).*\n ///\n+/// However, please note that examples are shared between primitive integer\n+/// types. So it's normal if you see usage of types like `i16` in there.\n+///\n mod prim_i32 { }\n \n #[doc(primitive = \"i64\")]\n@@ -530,6 +539,9 @@ mod prim_i32 { }\n ///\n /// *[See also the `std::i64` module](i64/index.html).*\n ///\n+/// However, please note that examples are shared between primitive integer\n+/// types. So it's normal if you see usage of types like `i8` in there.\n+///\n mod prim_i64 { }\n \n #[doc(primitive = \"u8\")]\n@@ -538,6 +550,9 @@ mod prim_i64 { }\n ///\n /// *[See also the `std::u8` module](u8/index.html).*\n ///\n+/// However, please note that examples are shared between primitive integer\n+/// types. So it's normal if you see usage of types like `u64` in there.\n+///\n mod prim_u8 { }\n \n #[doc(primitive = \"u16\")]\n@@ -546,6 +561,9 @@ mod prim_u8 { }\n ///\n /// *[See also the `std::u16` module](u16/index.html).*\n ///\n+/// However, please note that examples are shared between primitive integer\n+/// types. So it's normal if you see usage of types like `u32` in there.\n+///\n mod prim_u16 { }\n \n #[doc(primitive = \"u32\")]\n@@ -554,6 +572,9 @@ mod prim_u16 { }\n ///\n /// *[See also the `std::u32` module](u32/index.html).*\n ///\n+/// However, please note that examples are shared between primitive integer\n+/// types. So it's normal if you see usage of types like `u16` in there.\n+///\n mod prim_u32 { }\n \n #[doc(primitive = \"u64\")]\n@@ -562,6 +583,9 @@ mod prim_u32 { }\n ///\n /// *[See also the `std::u64` module](u64/index.html).*\n ///\n+/// However, please note that examples are shared between primitive integer\n+/// types. So it's normal if you see usage of types like `u8` in there.\n+///\n mod prim_u64 { }\n \n #[doc(primitive = \"isize\")]\n@@ -570,6 +594,9 @@ mod prim_u64 { }\n ///\n /// *[See also the `std::isize` module](isize/index.html).*\n ///\n+/// However, please note that examples are shared between primitive integer\n+/// types. So it's normal if you see usage of types like `usize` in there.\n+///\n mod prim_isize { }\n \n #[doc(primitive = \"usize\")]\n@@ -578,4 +605,7 @@ mod prim_isize { }\n ///\n /// *[See also the `std::usize` module](usize/index.html).*\n ///\n+/// However, please note that examples are shared between primitive integer\n+/// types. So it's normal if you see usage of types like `isize` in there.\n+///\n mod prim_usize { }"}]}