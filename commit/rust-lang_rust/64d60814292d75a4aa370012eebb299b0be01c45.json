{"sha": "64d60814292d75a4aa370012eebb299b0be01c45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZDYwODE0MjkyZDc1YTRhYTM3MDAxMmVlYmIyOTliMGJlMDFjNDU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-30T21:12:11Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-30T21:13:49Z"}, "message": "Use attributes for conditional compilation in std.rc", "tree": {"sha": "838482d298d24e75e583383d1e520183ca41697f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/838482d298d24e75e583383d1e520183ca41697f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64d60814292d75a4aa370012eebb299b0be01c45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64d60814292d75a4aa370012eebb299b0be01c45", "html_url": "https://github.com/rust-lang/rust/commit/64d60814292d75a4aa370012eebb299b0be01c45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64d60814292d75a4aa370012eebb299b0be01c45/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df8161d44cf8eb9d17a626879e4f5cbc954b4b88", "url": "https://api.github.com/repos/rust-lang/rust/commits/df8161d44cf8eb9d17a626879e4f5cbc954b4b88", "html_url": "https://github.com/rust-lang/rust/commit/df8161d44cf8eb9d17a626879e4f5cbc954b4b88"}], "stats": {"total": 52, "additions": 38, "deletions": 14}, "files": [{"sha": "4fe0b814165bb35a5a09c2c88280f52d7fcd4e41", "filename": "src/comp/front/attr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64d60814292d75a4aa370012eebb299b0be01c45/src%2Fcomp%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64d60814292d75a4aa370012eebb299b0be01c45/src%2Fcomp%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fattr.rs?ref=64d60814292d75a4aa370012eebb299b0be01c45", "patch": "@@ -99,11 +99,15 @@ fn eq(@ast::meta_item a, @ast::meta_item b) -> bool {\n }\n \n fn contains(&vec[@ast::meta_item] haystack, @ast::meta_item needle) -> bool {\n+    log #fmt(\"looking for %s\", pretty::pprust::meta_item_to_str(*needle));\n     for (@ast::meta_item item in haystack) {\n+        log #fmt(\"looking in %s\", pretty::pprust::meta_item_to_str(*item));\n         if (eq(item, needle)) {\n+            log \"found it!\";\n             ret true;\n         }\n     }\n+    log \"found it not :(\";\n     ret false;\n }\n "}, {"sha": "bbfc90015723f5ae35e63fefaafccff84136f539", "filename": "src/comp/front/config.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/64d60814292d75a4aa370012eebb299b0be01c45/src%2Fcomp%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64d60814292d75a4aa370012eebb299b0be01c45/src%2Fcomp%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fconfig.rs?ref=64d60814292d75a4aa370012eebb299b0be01c45", "patch": "@@ -71,12 +71,30 @@ fn fold_block(&ast::crate_cfg cfg, &ast::block_ b,\n // configuration based on the item's attributes\n fn in_cfg(&ast::crate_cfg cfg, &@ast::item item) -> bool {\n \n+    // The \"cfg\" attributes on the item\n     auto item_cfg_attrs = attr::find_attrs_by_name(item.attrs, \"cfg\");\n-\n     auto item_has_cfg_attrs = vec::len(item_cfg_attrs) > 0u;\n     if (!item_has_cfg_attrs) { ret true; }\n \n-    auto item_cfg_metas = attr::attr_metas(item_cfg_attrs);\n+    // Pull the inner meta_items from the #[cfg(meta_item, ...)]  attributes,\n+    // so we can match against them. This is the list of configurations for\n+    // which the item is valid\n+    auto item_cfg_metas = {\n+        fn extract_metas(&vec[@ast::meta_item] inner_items,\n+                         &@ast::meta_item cfg_item)\n+        -> vec[@ast::meta_item] {\n+\n+            alt (cfg_item.node) {\n+                case (ast::meta_list(?name, ?items)) {\n+                    assert name == \"cfg\";\n+                    inner_items + items\n+                }\n+                case (_) { inner_items }\n+            }\n+        }\n+        auto cfg_metas = attr::attr_metas(item_cfg_attrs);\n+        vec::foldl(extract_metas, [], cfg_metas)\n+    };\n \n     for (@ast::meta_item cfg_mi in item_cfg_metas) {\n         if (attr::contains(cfg, cfg_mi)) {"}, {"sha": "24cae023c69a7feee86fcdea4a544baa0c15a02d", "filename": "src/lib/std.rc", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/64d60814292d75a4aa370012eebb299b0be01c45/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/64d60814292d75a4aa370012eebb299b0be01c45/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=64d60814292d75a4aa370012eebb299b0be01c45", "patch": "@@ -49,18 +49,20 @@ auth rand::mk_rng = unsafe;\n // TODO: Have each os module re-export everything from genericos.\n mod generic_os;\n \n-alt (target_os) {\n-    case (\"win32\") {\n-        mod os = \"win32_os.rs\";\n-        mod os_fs = \"win32_fs.rs\";\n-    } case (\"macos\") {\n-        mod os = \"macos_os.rs\";\n-        mod os_fs = \"posix_fs.rs\";\n-    } case (_) {\n-        mod os = \"linux_os.rs\";\n-        mod os_fs = \"posix_fs.rs\";\n-    }\n-}\n+#[cfg(target_os = \"win32\")]\n+mod os = \"win32_os.rs\";\n+#[cfg(target_os = \"win32\")]\n+mod os_fs = \"win32_fs.rs\";\n+\n+#[cfg(target_os = \"macos\")]\n+mod os = \"macos_os.rs\";\n+#[cfg(target_os = \"macos\")]\n+mod os_fs = \"posix_fs.rs\";\n+\n+#[cfg(target_os = \"linux\")]\n+mod os = \"linux_os.rs\";\n+#[cfg(target_os = \"linux\")]\n+mod os_fs = \"posix_fs.rs\";\n \n mod run = \"run_program.rs\";\n mod fs;"}]}