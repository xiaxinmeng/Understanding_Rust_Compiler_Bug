{"sha": "d3fbc149b311a462bcfe9f65f9720adb0f901de4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZmJjMTQ5YjMxMWE0NjJiY2ZlOWY2NWY5NzIwYWRiMGY5MDFkZTQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-23T22:08:01Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-23T22:08:01Z"}, "message": "rollup merge of #23401: tshepang/crates-and-modules-doc-nits\n\nConflicts:\n\tsrc/doc/trpl/crates-and-modules.md", "tree": {"sha": "1c85c61eb9b42073f8cc1363eb658dd10ac2bcfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c85c61eb9b42073f8cc1363eb658dd10ac2bcfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3fbc149b311a462bcfe9f65f9720adb0f901de4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3fbc149b311a462bcfe9f65f9720adb0f901de4", "html_url": "https://github.com/rust-lang/rust/commit/d3fbc149b311a462bcfe9f65f9720adb0f901de4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3fbc149b311a462bcfe9f65f9720adb0f901de4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e98d4d9589974c9cf0f12266fa53fb690a28cd99", "url": "https://api.github.com/repos/rust-lang/rust/commits/e98d4d9589974c9cf0f12266fa53fb690a28cd99", "html_url": "https://github.com/rust-lang/rust/commit/e98d4d9589974c9cf0f12266fa53fb690a28cd99"}, {"sha": "8a500dea0e38cda0a52bd7797168e9e8cbfcf390", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a500dea0e38cda0a52bd7797168e9e8cbfcf390", "html_url": "https://github.com/rust-lang/rust/commit/8a500dea0e38cda0a52bd7797168e9e8cbfcf390"}], "stats": {"total": 94, "additions": 21, "deletions": 73}, "files": [{"sha": "0cc54c9b16598b10eb2e8b945cc6224b6fbea20b", "filename": "src/doc/trpl/crates-and-modules.md", "status": "modified", "additions": 21, "deletions": 73, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/d3fbc149b311a462bcfe9f65f9720adb0f901de4/src%2Fdoc%2Ftrpl%2Fcrates-and-modules.md", "raw_url": "https://github.com/rust-lang/rust/raw/d3fbc149b311a462bcfe9f65f9720adb0f901de4/src%2Fdoc%2Ftrpl%2Fcrates-and-modules.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fcrates-and-modules.md?ref=d3fbc149b311a462bcfe9f65f9720adb0f901de4", "patch": "@@ -1,6 +1,6 @@\n % Crates and Modules\n \n-When a project starts getting large, it's considered a good software\n+When a project starts getting large, it's considered good software\n engineering practice to split it up into a bunch of smaller pieces, and then\n fit them together. It's also important to have a well-defined interface, so\n that some of your functionality is private, and some is public. To facilitate\n@@ -24,23 +24,23 @@ in different languages. To keep things simple, we'll stick to \"greetings\" and\n two languages for those phrases to be in. We'll use this module layout:\n \n ```text\n-                                +-----------+\n-                            +---| greetings |\n-                            |   +-----------+\n-              +---------+   |\n-              | english |---+\n-              +---------+   |   +-----------+\n-              |             +---| farewells |\n-+---------+   |                 +-----------+\n+                                    +-----------+\n+                                +---| greetings |\n+                                |   +-----------+\n+                  +---------+   |\n+              +---| english |---+\n+              |   +---------+   |   +-----------+\n+              |                 +---| farewells |\n++---------+   |                     +-----------+\n | phrases |---+\n-+---------+   |                  +-----------+\n-              |              +---| greetings |\n-              +----------+   |   +-----------+\n-              | japanese |---+\n-              +----------+   |\n-                             |   +-----------+\n-                             +---| farewells |\n-                                 +-----------+\n++---------+   |                     +-----------+\n+              |                 +---| greetings |\n+              |   +----------+  |   +-----------+\n+              +---| japanese |--+\n+                  +----------+  |\n+                                |   +-----------+\n+                                +---| farewells |\n+                                    +-----------+\n ```\n \n In this example, `phrases` is the name of our crate. All of the rest are\n@@ -76,25 +76,19 @@ To define each of our modules, we use the `mod` keyword. Let's make our\n `src/lib.rs` look like this:\n \n ```\n-// in src/lib.rs\n-\n mod english {\n     mod greetings {\n-\n     }\n \n     mod farewells {\n-\n     }\n }\n \n mod japanese {\n     mod greetings {\n-\n     }\n \n     mod farewells {\n-\n     }\n }\n ```\n@@ -145,11 +139,7 @@ mod english;\n ```\n \n If we do that, Rust will expect to find either a `english.rs` file, or a\n-`english/mod.rs` file with the contents of our module:\n-\n-```{rust,ignore}\n-// contents of our module go here\n-```\n+`english/mod.rs` file with the contents of our module.\n \n Note that in these files, you don't need to re-declare the module: that's\n already been done with the initial `mod` declaration.\n@@ -181,10 +171,7 @@ $ tree .\n `src/lib.rs` is our crate root, and looks like this:\n \n ```{rust,ignore}\n-// in src/lib.rs\n-\n mod english;\n-\n mod japanese;\n ```\n \n@@ -195,10 +182,7 @@ chosen the second. Both `src/english/mod.rs` and `src/japanese/mod.rs` look\n like this:\n \n ```{rust,ignore}\n-// both src/english/mod.rs and src/japanese/mod.rs\n-\n mod greetings;\n-\n mod farewells;\n ```\n \n@@ -214,8 +198,6 @@ both empty at the moment. Let's add some functions.\n Put this in `src/english/greetings.rs`:\n \n ```rust\n-// in src/english/greetings.rs\n-\n fn hello() -> String {\n     \"Hello!\".to_string()\n }\n@@ -224,8 +206,6 @@ fn hello() -> String {\n Put this in `src/english/farewells.rs`:\n \n ```rust\n-// in src/english/farewells.rs\n-\n fn goodbye() -> String {\n     \"Goodbye.\".to_string()\n }\n@@ -248,8 +228,6 @@ about the module system.\n Put this in `src/japanese/farewells.rs`:\n \n ```rust\n-// in src/japanese/farewells.rs\n-\n fn goodbye() -> String {\n     \"\u3055\u3088\u3046\u306a\u3089\".to_string()\n }\n@@ -265,11 +243,9 @@ another crate.\n We have a library crate. Let's make an executable crate that imports and uses\n our library.\n \n-Make a `src/main.rs` and put this in it: (it won't quite compile yet)\n+Make a `src/main.rs` and put this in it (it won't quite compile yet):\n \n ```rust,ignore\n-// in src/main.rs\n-\n extern crate phrases;\n \n fn main() {\n@@ -320,8 +296,6 @@ keyword. Let's focus on the `english` module first, so let's reduce our `src/mai\n to just this:\n \n ```{rust,ignore}\n-// in src/main.rs\n-\n extern crate phrases;\n \n fn main() {\n@@ -333,28 +307,20 @@ fn main() {\n In our `src/lib.rs`, let's add `pub` to the `english` module declaration:\n \n ```{rust,ignore}\n-// in src/lib.rs\n-\n pub mod english;\n-\n mod japanese;\n ```\n \n And in our `src/english/mod.rs`, let's make both `pub`:\n \n ```{rust,ignore}\n-// in src/english/mod.rs\n-\n pub mod greetings;\n-\n pub mod farewells;\n ```\n \n In our `src/english/greetings.rs`, let's add `pub` to our `fn` declaration:\n \n ```{rust,ignore}\n-// in src/english/greetings.rs\n-\n pub fn hello() -> String {\n     \"Hello!\".to_string()\n }\n@@ -363,8 +329,6 @@ pub fn hello() -> String {\n And also in `src/english/farewells.rs`:\n \n ```{rust,ignore}\n-// in src/english/farewells.rs\n-\n pub fn goodbye() -> String {\n     \"Goodbye.\".to_string()\n }\n@@ -400,8 +364,6 @@ Rust has a `use` keyword, which allows us to import names into our local scope.\n Let's change our `src/main.rs` to look like this:\n \n ```{rust,ignore}\n-// in src/main.rs\n-\n extern crate phrases;\n \n use phrases::english::greetings;\n@@ -460,21 +422,19 @@ Could not compile `phrases`.\n ```\n \n If we're importing multiple names from the same module, we don't have to type it out\n-twice. Rust has a shortcut syntax for writing this:\n+twice. Instead of this:\n \n ```{rust,ignore}\n use phrases::english::greetings;\n use phrases::english::farewells;\n ```\n \n-You use curly braces:\n+We can use this shortcut:\n \n ```{rust,ignore}\n use phrases::english::{greetings, farewells};\n ```\n \n-These two declarations are equivalent, but the second is a lot less typing.\n-\n ## Re-exporting with `pub use`\n \n You don't just use `use` to shorten identifiers. You can also use it inside of your crate\n@@ -484,8 +444,6 @@ interface that may not directly map to your internal code organization.\n Let's look at an example. Modify your `src/main.rs` to read like this:\n \n ```{rust,ignore}\n-// in src/main.rs\n-\n extern crate phrases;\n \n use phrases::english::{greetings,farewells};\n@@ -503,18 +461,13 @@ fn main() {\n Then, modify your `src/lib.rs` to make the `japanese` mod public:\n \n ```{rust,ignore}\n-// in src/lib.rs\n-\n pub mod english;\n-\n pub mod japanese;\n ```\n \n Next, make the two functions public, first in `src/japanese/greetings.rs`:\n \n ```{rust,ignore}\n-// in src/japanese/greetings.rs\n-\n pub fn hello() -> String {\n     \"\u3053\u3093\u306b\u3061\u306f\".to_string()\n }\n@@ -523,8 +476,6 @@ pub fn hello() -> String {\n And then in `src/japanese/farewells.rs`:\n \n ```{rust,ignore}\n-// in src/japanese/farewells.rs\n-\n pub fn goodbye() -> String {\n     \"\u3055\u3088\u3046\u306a\u3089\".to_string()\n }\n@@ -533,13 +484,10 @@ pub fn goodbye() -> String {\n Finally, modify your `src/japanese/mod.rs` to read like this:\n \n ```{rust,ignore}\n-// in src/japanese/mod.rs\n-\n pub use self::greetings::hello;\n pub use self::farewells::goodbye;\n \n mod greetings;\n-\n mod farewells;\n ```\n "}]}