{"sha": "601c13c6fda6a7db423c974797e36c79a9a0c0ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMWMxM2M2ZmRhNmE3ZGI0MjNjOTc0Nzk3ZTM2Yzc5YTlhMGMwYWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-04T11:37:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-04T11:37:36Z"}, "message": "Auto merge of #78677 - Aaron1011:fix/capture-inner-attrs, r=petrochenkov\n\nUse reparsed `TokenStream` if we captured any inner attributes\n\nFixes #78675\n\nWe now bail out of `prepend_attrs` if we ended up capturing any inner\nattributes (which can happen in several places, due to token capturing\nfor `macro_rules!` arguments.", "tree": {"sha": "11e565d4ea34887e3e0af8383c7c6aa8d7859724", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11e565d4ea34887e3e0af8383c7c6aa8d7859724"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/601c13c6fda6a7db423c974797e36c79a9a0c0ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/601c13c6fda6a7db423c974797e36c79a9a0c0ac", "html_url": "https://github.com/rust-lang/rust/commit/601c13c6fda6a7db423c974797e36c79a9a0c0ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/601c13c6fda6a7db423c974797e36c79a9a0c0ac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56293097f7f877f1350a6cd00f79d03132f16515", "url": "https://api.github.com/repos/rust-lang/rust/commits/56293097f7f877f1350a6cd00f79d03132f16515", "html_url": "https://github.com/rust-lang/rust/commit/56293097f7f877f1350a6cd00f79d03132f16515"}, {"sha": "22383b32b8a79409e5801e0d9c469da71f10ad47", "url": "https://api.github.com/repos/rust-lang/rust/commits/22383b32b8a79409e5801e0d9c469da71f10ad47", "html_url": "https://github.com/rust-lang/rust/commit/22383b32b8a79409e5801e0d9c469da71f10ad47"}], "stats": {"total": 161, "additions": 132, "deletions": 29}, "files": [{"sha": "bad43cd5350f2e6a818bebd4d43b3c7e4bcee606", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/601c13c6fda6a7db423c974797e36c79a9a0c0ac/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601c13c6fda6a7db423c974797e36c79a9a0c0ac/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=601c13c6fda6a7db423c974797e36c79a9a0c0ac", "patch": "@@ -611,11 +611,11 @@ fn prepend_attrs(\n     }\n     let mut builder = tokenstream::TokenStreamBuilder::new();\n     for attr in attrs {\n-        assert_eq!(\n-            attr.style,\n-            ast::AttrStyle::Outer,\n-            \"inner attributes should prevent cached tokens from existing\"\n-        );\n+        // FIXME: Correctly handle tokens for inner attributes.\n+        // For now, we fall back to reparsing the original AST node\n+        if attr.style == ast::AttrStyle::Inner {\n+            return None;\n+        }\n         builder.push(\n             attr.tokens\n                 .as_ref()"}, {"sha": "5954b370e6d986b57e01d436f6aae256904b6da5", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 9, "deletions": 24, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/601c13c6fda6a7db423c974797e36c79a9a0c0ac/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601c13c6fda6a7db423c974797e36c79a9a0c0ac/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=601c13c6fda6a7db423c974797e36c79a9a0c0ac", "patch": "@@ -7,7 +7,7 @@ use crate::maybe_whole;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, TokenKind};\n use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree};\n-use rustc_ast::{self as ast, AttrStyle, AttrVec, Attribute, DUMMY_NODE_ID};\n+use rustc_ast::{self as ast, AttrVec, Attribute, DUMMY_NODE_ID};\n use rustc_ast::{AssocItem, AssocItemKind, ForeignItemKind, Item, ItemKind, Mod};\n use rustc_ast::{Async, Const, Defaultness, IsAuto, Mutability, Unsafe, UseTree, UseTreeKind};\n use rustc_ast::{BindingMode, Block, FnDecl, FnSig, Param, SelfKind};\n@@ -127,34 +127,19 @@ impl<'a> Parser<'a> {\n \n         let (mut item, tokens) = if needs_tokens {\n             let (item, tokens) = self.collect_tokens(parse_item)?;\n-            (item, Some(tokens))\n+            (item, tokens)\n         } else {\n             (parse_item(self)?, None)\n         };\n-\n-        self.unclosed_delims.append(&mut unclosed_delims);\n-\n-        // Once we've parsed an item and recorded the tokens we got while\n-        // parsing we may want to store `tokens` into the item we're about to\n-        // return. Note, though, that we specifically didn't capture tokens\n-        // related to outer attributes. The `tokens` field here may later be\n-        // used with procedural macros to convert this item back into a token\n-        // stream, but during expansion we may be removing attributes as we go\n-        // along.\n-        //\n-        // If we've got inner attributes then the `tokens` we've got above holds\n-        // these inner attributes. If an inner attribute is expanded we won't\n-        // actually remove it from the token stream, so we'll just keep yielding\n-        // it (bad!). To work around this case for now we just avoid recording\n-        // `tokens` if we detect any inner attributes. This should help keep\n-        // expansion correct, but we should fix this bug one day!\n-        if let Some(tokens) = tokens {\n-            if let Some(item) = &mut item {\n-                if !item.attrs.iter().any(|attr| attr.style == AttrStyle::Inner) {\n-                    item.tokens = tokens;\n-                }\n+        if let Some(item) = &mut item {\n+            // If we captured tokens during parsing (due to encountering an `NtItem`),\n+            // use those instead\n+            if item.tokens.is_none() {\n+                item.tokens = tokens;\n             }\n         }\n+\n+        self.unclosed_delims.append(&mut unclosed_delims);\n         Ok(item)\n     }\n "}, {"sha": "478809324ee6d6cfe94354c676cd8c57261900a4", "filename": "src/test/ui/proc-macro/issue-78675-captured-inner-attrs.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/601c13c6fda6a7db423c974797e36c79a9a0c0ac/src%2Ftest%2Fui%2Fproc-macro%2Fissue-78675-captured-inner-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601c13c6fda6a7db423c974797e36c79a9a0c0ac/src%2Ftest%2Fui%2Fproc-macro%2Fissue-78675-captured-inner-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-78675-captured-inner-attrs.rs?ref=601c13c6fda6a7db423c974797e36c79a9a0c0ac", "patch": "@@ -0,0 +1,32 @@\n+// check-pass\n+// edition:2018\n+// compile-flags: -Z span-debug\n+// aux-build:test-macros.rs\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+#[macro_use] extern crate test_macros;\n+\n+macro_rules! foo {(\n+    #[fake_attr]\n+    $item:item\n+) => (\n+    $item\n+)}\n+\n+macro_rules! outer {($item:item) => (\n+    print_bang! { // Identity proc-macro\n+        foo! {\n+            #[fake_attr]\n+            $item\n+        }\n+    }\n+)}\n+outer! {\n+    mod bar {\n+        //! Foo\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "c4ee44f65414962f3369293c06848b4c58c3bd32", "filename": "src/test/ui/proc-macro/issue-78675-captured-inner-attrs.stdout", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/601c13c6fda6a7db423c974797e36c79a9a0c0ac/src%2Ftest%2Fui%2Fproc-macro%2Fissue-78675-captured-inner-attrs.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/601c13c6fda6a7db423c974797e36c79a9a0c0ac/src%2Ftest%2Fui%2Fproc-macro%2Fissue-78675-captured-inner-attrs.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-78675-captured-inner-attrs.stdout?ref=601c13c6fda6a7db423c974797e36c79a9a0c0ac", "patch": "@@ -0,0 +1,86 @@\n+PRINT-BANG INPUT (DISPLAY): foo ! { #[fake_attr] mod bar {\n+    #![doc = r\" Foo\"]\n+} }\n+PRINT-BANG INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"foo\",\n+        span: $DIR/issue-78675-captured-inner-attrs.rs:20:9: 20:12 (#4),\n+    },\n+    Punct {\n+        ch: '!',\n+        spacing: Alone,\n+        span: $DIR/issue-78675-captured-inner-attrs.rs:20:12: 20:13 (#4),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Alone,\n+                span: $DIR/issue-78675-captured-inner-attrs.rs:21:13: 21:14 (#4),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"fake_attr\",\n+                        span: $DIR/issue-78675-captured-inner-attrs.rs:21:15: 21:24 (#4),\n+                    },\n+                ],\n+                span: $DIR/issue-78675-captured-inner-attrs.rs:21:14: 21:25 (#4),\n+            },\n+            Group {\n+                delimiter: None,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"mod\",\n+                        span: $DIR/issue-78675-captured-inner-attrs.rs:22:13: 22:18 (#4),\n+                    },\n+                    Ident {\n+                        ident: \"bar\",\n+                        span: $DIR/issue-78675-captured-inner-attrs.rs:22:13: 22:18 (#4),\n+                    },\n+                    Group {\n+                        delimiter: Brace,\n+                        stream: TokenStream [\n+                            Punct {\n+                                ch: '#',\n+                                spacing: Joint,\n+                                span: $DIR/issue-78675-captured-inner-attrs.rs:22:13: 22:18 (#4),\n+                            },\n+                            Punct {\n+                                ch: '!',\n+                                spacing: Alone,\n+                                span: $DIR/issue-78675-captured-inner-attrs.rs:22:13: 22:18 (#4),\n+                            },\n+                            Group {\n+                                delimiter: Bracket,\n+                                stream: TokenStream [\n+                                    Ident {\n+                                        ident: \"doc\",\n+                                        span: $DIR/issue-78675-captured-inner-attrs.rs:22:13: 22:18 (#4),\n+                                    },\n+                                    Punct {\n+                                        ch: '=',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-78675-captured-inner-attrs.rs:22:13: 22:18 (#4),\n+                                    },\n+                                    Literal {\n+                                        kind: StrRaw(0),\n+                                        symbol: \" Foo\",\n+                                        suffix: None,\n+                                        span: $DIR/issue-78675-captured-inner-attrs.rs:22:13: 22:18 (#4),\n+                                    },\n+                                ],\n+                                span: $DIR/issue-78675-captured-inner-attrs.rs:22:13: 22:18 (#4),\n+                            },\n+                        ],\n+                        span: $DIR/issue-78675-captured-inner-attrs.rs:22:13: 22:18 (#4),\n+                    },\n+                ],\n+                span: $DIR/issue-78675-captured-inner-attrs.rs:22:13: 22:18 (#4),\n+            },\n+        ],\n+        span: $DIR/issue-78675-captured-inner-attrs.rs:20:14: 23:10 (#4),\n+    },\n+]"}]}