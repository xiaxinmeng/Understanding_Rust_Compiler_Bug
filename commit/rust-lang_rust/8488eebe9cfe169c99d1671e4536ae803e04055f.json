{"sha": "8488eebe9cfe169c99d1671e4536ae803e04055f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ODhlZWJlOWNmZTE2OWM5OWQxNjcxZTQ1MzZhZTgwM2UwNDA1NWY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2015-11-12T10:30:04Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2015-11-12T10:30:04Z"}, "message": "remove bool -> int conversion in const evaluator\n\nthe const evaluator has a bool constant value, no need to use integers", "tree": {"sha": "9aa3881094e0a572da453db5949b270fd8fb8be6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aa3881094e0a572da453db5949b270fd8fb8be6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8488eebe9cfe169c99d1671e4536ae803e04055f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8488eebe9cfe169c99d1671e4536ae803e04055f", "html_url": "https://github.com/rust-lang/rust/commit/8488eebe9cfe169c99d1671e4536ae803e04055f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8488eebe9cfe169c99d1671e4536ae803e04055f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bd622f94cfd0c6904dfac5390fc48c488e3aca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bd622f94cfd0c6904dfac5390fc48c488e3aca2", "html_url": "https://github.com/rust-lang/rust/commit/3bd622f94cfd0c6904dfac5390fc48c488e3aca2"}], "stats": {"total": 54, "additions": 29, "deletions": 25}, "files": [{"sha": "c45d7d40ada6d99e42a45b9e287b08fae941e7dd", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8488eebe9cfe169c99d1671e4536ae803e04055f/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8488eebe9cfe169c99d1671e4536ae803e04055f/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=8488eebe9cfe169c99d1671e4536ae803e04055f", "patch": "@@ -390,6 +390,8 @@ pub struct ConstEvalErr {\n pub enum ErrKind {\n     CannotCast,\n     CannotCastTo(&'static str),\n+    InvalidOpForInts(hir::BinOp_),\n+    InvalidOpForUInts(hir::BinOp_),\n     InvalidOpForBools(hir::BinOp_),\n     InvalidOpForFloats(hir::BinOp_),\n     InvalidOpForIntUint(hir::BinOp_),\n@@ -428,6 +430,8 @@ impl ConstEvalErr {\n         match self.kind {\n             CannotCast => \"can't cast this type\".into_cow(),\n             CannotCastTo(s) => format!(\"can't cast this type to {}\", s).into_cow(),\n+            InvalidOpForInts(_) =>  \"can't do this op on signed integrals\".into_cow(),\n+            InvalidOpForUInts(_) =>  \"can't do this op on unsigned integrals\".into_cow(),\n             InvalidOpForBools(_) =>  \"can't do this op on bools\".into_cow(),\n             InvalidOpForFloats(_) => \"can't do this op on floats\".into_cow(),\n             InvalidOpForIntUint(..) => \"can't do this op on an isize and usize\".into_cow(),\n@@ -764,8 +768,6 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                      e: &Expr,\n                                      ty_hint: EvalHint<'tcx>,\n                                      fn_args: FnArgMap) -> EvalResult {\n-    fn fromb(b: bool) -> ConstVal { Int(b as i64) }\n-\n     // Try to compute the type of the expression based on the EvalHint.\n     // (See also the definition of EvalHint, and the FIXME above EvalHint.)\n     let ety = match ty_hint {\n@@ -837,13 +839,13 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n               hir::BiMul => Float(a * b),\n               hir::BiDiv => Float(a / b),\n               hir::BiRem => Float(a % b),\n-              hir::BiEq => fromb(a == b),\n-              hir::BiLt => fromb(a < b),\n-              hir::BiLe => fromb(a <= b),\n-              hir::BiNe => fromb(a != b),\n-              hir::BiGe => fromb(a >= b),\n-              hir::BiGt => fromb(a > b),\n-              _ => signal!(e, InvalidOpForFloats(op.node))\n+              hir::BiEq => Bool(a == b),\n+              hir::BiLt => Bool(a < b),\n+              hir::BiLe => Bool(a <= b),\n+              hir::BiNe => Bool(a != b),\n+              hir::BiGe => Bool(a >= b),\n+              hir::BiGt => Bool(a > b),\n+              _ => signal!(e, InvalidOpForFloats(op.node)),\n             }\n           }\n           (Int(a), Int(b)) => {\n@@ -853,17 +855,18 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n               hir::BiMul => try!(const_int_checked_mul(a,b,e,expr_int_type)),\n               hir::BiDiv => try!(const_int_checked_div(a,b,e,expr_int_type)),\n               hir::BiRem => try!(const_int_checked_rem(a,b,e,expr_int_type)),\n-              hir::BiAnd | hir::BiBitAnd => Int(a & b),\n-              hir::BiOr | hir::BiBitOr => Int(a | b),\n+              hir::BiBitAnd => Int(a & b),\n+              hir::BiBitOr => Int(a | b),\n               hir::BiBitXor => Int(a ^ b),\n               hir::BiShl => try!(const_int_checked_shl(a,b,e,expr_int_type)),\n               hir::BiShr => try!(const_int_checked_shr(a,b,e,expr_int_type)),\n-              hir::BiEq => fromb(a == b),\n-              hir::BiLt => fromb(a < b),\n-              hir::BiLe => fromb(a <= b),\n-              hir::BiNe => fromb(a != b),\n-              hir::BiGe => fromb(a >= b),\n-              hir::BiGt => fromb(a > b)\n+              hir::BiEq => Bool(a == b),\n+              hir::BiLt => Bool(a < b),\n+              hir::BiLe => Bool(a <= b),\n+              hir::BiNe => Bool(a != b),\n+              hir::BiGe => Bool(a >= b),\n+              hir::BiGt => Bool(a > b),\n+              _ => signal!(e, InvalidOpForInts(op.node)),\n             }\n           }\n           (Uint(a), Uint(b)) => {\n@@ -873,17 +876,18 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n               hir::BiMul => try!(const_uint_checked_mul(a,b,e,expr_uint_type)),\n               hir::BiDiv => try!(const_uint_checked_div(a,b,e,expr_uint_type)),\n               hir::BiRem => try!(const_uint_checked_rem(a,b,e,expr_uint_type)),\n-              hir::BiAnd | hir::BiBitAnd => Uint(a & b),\n-              hir::BiOr | hir::BiBitOr => Uint(a | b),\n+              hir::BiBitAnd => Uint(a & b),\n+              hir::BiBitOr => Uint(a | b),\n               hir::BiBitXor => Uint(a ^ b),\n               hir::BiShl => try!(const_uint_checked_shl(a,b,e,expr_uint_type)),\n               hir::BiShr => try!(const_uint_checked_shr(a,b,e,expr_uint_type)),\n-              hir::BiEq => fromb(a == b),\n-              hir::BiLt => fromb(a < b),\n-              hir::BiLe => fromb(a <= b),\n-              hir::BiNe => fromb(a != b),\n-              hir::BiGe => fromb(a >= b),\n-              hir::BiGt => fromb(a > b),\n+              hir::BiEq => Bool(a == b),\n+              hir::BiLt => Bool(a < b),\n+              hir::BiLe => Bool(a <= b),\n+              hir::BiNe => Bool(a != b),\n+              hir::BiGe => Bool(a >= b),\n+              hir::BiGt => Bool(a > b),\n+              _ => signal!(e, InvalidOpForUInts(op.node)),\n             }\n           }\n           // shifts can have any integral type as their rhs"}]}