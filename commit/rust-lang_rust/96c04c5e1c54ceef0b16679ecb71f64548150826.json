{"sha": "96c04c5e1c54ceef0b16679ecb71f64548150826", "node_id": "C_kwDOAAsO6NoAKDk2YzA0YzVlMWM1NGNlZWYwYjE2Njc5ZWNiNzFmNjQ1NDgxNTA4MjY", "commit": {"author": {"name": "Dorian Scheidt", "email": "dorian.scheidt@gmail.com", "date": "2022-08-18T23:28:14Z"}, "committer": {"name": "Dorian Scheidt", "email": "dorian.scheidt@gmail.com", "date": "2022-08-18T23:28:14Z"}, "message": "inline assoc_fn_target", "tree": {"sha": "52782b3628b352bdf0f81d9d63f525b6a0082eb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52782b3628b352bdf0f81d9d63f525b6a0082eb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96c04c5e1c54ceef0b16679ecb71f64548150826", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96c04c5e1c54ceef0b16679ecb71f64548150826", "html_url": "https://github.com/rust-lang/rust/commit/96c04c5e1c54ceef0b16679ecb71f64548150826", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96c04c5e1c54ceef0b16679ecb71f64548150826/comments", "author": {"login": "DorianListens", "id": 5692947, "node_id": "MDQ6VXNlcjU2OTI5NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5692947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DorianListens", "html_url": "https://github.com/DorianListens", "followers_url": "https://api.github.com/users/DorianListens/followers", "following_url": "https://api.github.com/users/DorianListens/following{/other_user}", "gists_url": "https://api.github.com/users/DorianListens/gists{/gist_id}", "starred_url": "https://api.github.com/users/DorianListens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DorianListens/subscriptions", "organizations_url": "https://api.github.com/users/DorianListens/orgs", "repos_url": "https://api.github.com/users/DorianListens/repos", "events_url": "https://api.github.com/users/DorianListens/events{/privacy}", "received_events_url": "https://api.github.com/users/DorianListens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DorianListens", "id": 5692947, "node_id": "MDQ6VXNlcjU2OTI5NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5692947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DorianListens", "html_url": "https://github.com/DorianListens", "followers_url": "https://api.github.com/users/DorianListens/followers", "following_url": "https://api.github.com/users/DorianListens/following{/other_user}", "gists_url": "https://api.github.com/users/DorianListens/gists{/gist_id}", "starred_url": "https://api.github.com/users/DorianListens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DorianListens/subscriptions", "organizations_url": "https://api.github.com/users/DorianListens/orgs", "repos_url": "https://api.github.com/users/DorianListens/repos", "events_url": "https://api.github.com/users/DorianListens/events{/privacy}", "received_events_url": "https://api.github.com/users/DorianListens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2086c48cff23aff651c18636e8227993a85cd6ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/2086c48cff23aff651c18636e8227993a85cd6ac", "html_url": "https://github.com/rust-lang/rust/commit/2086c48cff23aff651c18636e8227993a85cd6ac"}], "stats": {"total": 35, "additions": 14, "deletions": 21}, "files": [{"sha": "6c045a3333df1174974b836ea81a9b43568d8983", "filename": "crates/ide-assists/src/handlers/generate_function.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/96c04c5e1c54ceef0b16679ecb71f64548150826/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c04c5e1c54ceef0b16679ecb71f64548150826/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=96c04c5e1c54ceef0b16679ecb71f64548150826", "patch": "@@ -420,29 +420,22 @@ fn assoc_fn_target_info(\n ) -> Option<TargetInfo> {\n     let mut target_module = None;\n     let mut adt_name = None;\n-    let (target, file, insert_offset) =\n-        assoc_fn_target(ctx, call, adt, &mut target_module, fn_name, &mut adt_name)?;\n+    let (target, file, insert_offset) = {\n+        let target_module: &mut Option<Module> = &mut target_module;\n+        let adt_name: &mut Option<hir::Name> = &mut adt_name;\n+        let current_module = ctx.sema.scope(call.syntax())?.module();\n+        let module = adt.module(ctx.sema.db);\n+        *target_module = if current_module == module { None } else { Some(module) };\n+        if current_module.krate() != module.krate() {\n+            return None;\n+        }\n+        let (impl_, file) = get_adt_source(ctx, &adt, fn_name)?;\n+        let (target, insert_offset) = get_method_target(ctx, &module, &impl_)?;\n+        *adt_name = if impl_.is_none() { Some(adt.name(ctx.sema.db)) } else { None };\n+        Some((target, file, insert_offset))\n+    }?;\n     Some(TargetInfo { target_module, adt_name, target, file, insert_offset })\n }\n-fn assoc_fn_target(\n-    ctx: &AssistContext<'_>,\n-    call: &CallExpr,\n-    adt: hir::Adt,\n-    target_module: &mut Option<Module>,\n-    fn_name: &str,\n-    adt_name: &mut Option<hir::Name>,\n-) -> Option<(GeneratedFunctionTarget, FileId, TextSize)> {\n-    let current_module = ctx.sema.scope(call.syntax())?.module();\n-    let module = adt.module(ctx.sema.db);\n-    *target_module = if current_module == module { None } else { Some(module) };\n-    if current_module.krate() != module.krate() {\n-        return None;\n-    }\n-    let (impl_, file) = get_adt_source(ctx, &adt, fn_name)?;\n-    let (target, insert_offset) = get_method_target(ctx, &module, &impl_)?;\n-    *adt_name = if impl_.is_none() { Some(adt.name(ctx.sema.db)) } else { None };\n-    Some((target, file, insert_offset))\n-}\n \n fn get_insert_offset(target: &GeneratedFunctionTarget) -> TextSize {\n     match &target {"}]}