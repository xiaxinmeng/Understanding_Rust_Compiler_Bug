{"sha": "0e9b465d729d07101b29b4d096d83edf9be82df0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlOWI0NjVkNzI5ZDA3MTAxYjI5YjRkMDk2ZDgzZWRmOWJlODJkZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-27T09:32:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-27T09:32:44Z"}, "message": "Auto merge of #62748 - luca-barbieri:optimize-refcell-borrow, r=RalfJung\n\nOptimize RefCell read borrowing\n\nInstead of doing two comparisons we can do only one with a bit of cleverness.\n\nLLVM currently can't do this optimization itself on x86-64.", "tree": {"sha": "210c15e12ca6b9f32a5f75ab901cccc4d8c191b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/210c15e12ca6b9f32a5f75ab901cccc4d8c191b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e9b465d729d07101b29b4d096d83edf9be82df0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e9b465d729d07101b29b4d096d83edf9be82df0", "html_url": "https://github.com/rust-lang/rust/commit/0e9b465d729d07101b29b4d096d83edf9be82df0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e9b465d729d07101b29b4d096d83edf9be82df0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09e39897587dca70f0b15093d425a682c392349c", "url": "https://api.github.com/repos/rust-lang/rust/commits/09e39897587dca70f0b15093d425a682c392349c", "html_url": "https://github.com/rust-lang/rust/commit/09e39897587dca70f0b15093d425a682c392349c"}, {"sha": "44c165074b1b034799c6e1b95a871cde46755632", "url": "https://api.github.com/repos/rust-lang/rust/commits/44c165074b1b034799c6e1b95a871cde46755632", "html_url": "https://github.com/rust-lang/rust/commit/44c165074b1b034799c6e1b95a871cde46755632"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "8579dbf353e800e8c287bcfd3eecacc9eb7f9451", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0e9b465d729d07101b29b4d096d83edf9be82df0/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e9b465d729d07101b29b4d096d83edf9be82df0/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=0e9b465d729d07101b29b4d096d83edf9be82df0", "patch": "@@ -1101,13 +1101,23 @@ struct BorrowRef<'b> {\n impl<'b> BorrowRef<'b> {\n     #[inline]\n     fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRef<'b>> {\n-        let b = borrow.get();\n-        if is_writing(b) || b == isize::max_value() {\n-            // If there's currently a writing borrow, or if incrementing the\n-            // refcount would overflow into a writing borrow.\n+        let b = borrow.get().wrapping_add(1);\n+        if !is_reading(b) {\n+            // Incrementing borrow can result in a non-reading value (<= 0) in these cases:\n+            // 1. It was < 0, i.e. there are writing borrows, so we can't allow a read borrow\n+            //    due to Rust's reference aliasing rules\n+            // 2. It was isize::max_value() (the max amount of reading borrows) and it overflowed\n+            //    into isize::min_value() (the max amount of writing borrows) so we can't allow\n+            //    an additional read borrow because isize can't represent so many read borrows\n+            //    (this can only happen if you mem::forget more than a small constant amount of\n+            //    `Ref`s, which is not good practice)\n             None\n         } else {\n-            borrow.set(b + 1);\n+            // Incrementing borrow can result in a reading value (> 0) in these cases:\n+            // 1. It was = 0, i.e. it wasn't borrowed, and we are taking the first read borrow\n+            // 2. It was > 0 and < isize::max_value(), i.e. there were read borrows, and isize\n+            //    is large enough to represent having one more read borrow\n+            borrow.set(b);\n             Some(BorrowRef { borrow })\n         }\n     }"}]}