{"sha": "4f2532fb531919478b2655925cacb614d8c9f569", "node_id": "C_kwDOAAsO6NoAKDRmMjUzMmZiNTMxOTE5NDc4YjI2NTU5MjVjYWNiNjE0ZDhjOWY1Njk", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-26T10:55:11Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-26T10:55:11Z"}, "message": "Switch `ty::TraitRef::from_lang_item` from using `TyCtxtAt` to `TyCtxt` and a `Span`", "tree": {"sha": "0301835a02d9d86f42ed4d10f8c065cf4a858e51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0301835a02d9d86f42ed4d10f8c065cf4a858e51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f2532fb531919478b2655925cacb614d8c9f569", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f2532fb531919478b2655925cacb614d8c9f569", "html_url": "https://github.com/rust-lang/rust/commit/4f2532fb531919478b2655925cacb614d8c9f569", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f2532fb531919478b2655925cacb614d8c9f569/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "071f737a571c2931f9d1a338cd6eb52c5e4bc488", "url": "https://api.github.com/repos/rust-lang/rust/commits/071f737a571c2931f9d1a338cd6eb52c5e4bc488", "html_url": "https://github.com/rust-lang/rust/commit/071f737a571c2931f9d1a338cd6eb52c5e4bc488"}], "stats": {"total": 57, "additions": 33, "deletions": 24}, "files": [{"sha": "7d96daa78338e0f2943a999c721cc1f3064b0268", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4f2532fb531919478b2655925cacb614d8c9f569/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2532fb531919478b2655925cacb614d8c9f569/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=4f2532fb531919478b2655925cacb614d8c9f569", "patch": "@@ -539,7 +539,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n         if let PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) = context {\n             let tcx = self.tcx();\n             let trait_ref =\n-                ty::TraitRef::from_lang_item(tcx.at(self.last_span), LangItem::Copy, [place_ty.ty]);\n+                ty::TraitRef::from_lang_item(tcx, LangItem::Copy, self.last_span, [place_ty.ty]);\n \n             // To have a `Copy` operand, the type `T` of the\n             // value must be `Copy`. Note that we prove that `T: Copy`,\n@@ -1239,8 +1239,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 self.check_rvalue(body, rv, location);\n                 if !self.unsized_feature_enabled() {\n                     let trait_ref = ty::TraitRef::from_lang_item(\n-                        tcx.at(self.last_span),\n+                        tcx,\n                         LangItem::Sized,\n+                        self.last_span,\n                         [place_ty],\n                     );\n                     self.prove_trait_ref(\n@@ -1815,7 +1816,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             // Make sure that repeated elements implement `Copy`.\n                             let ty = place.ty(body, tcx).ty;\n                             let trait_ref =\n-                                ty::TraitRef::from_lang_item(tcx.at(span), LangItem::Copy, [ty]);\n+                                ty::TraitRef::from_lang_item(tcx, LangItem::Copy, span, [ty]);\n \n                             self.prove_trait_ref(\n                                 trait_ref,\n@@ -1828,7 +1829,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n \n             &Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, ty) => {\n-                let trait_ref = ty::TraitRef::from_lang_item(tcx.at(span), LangItem::Sized, [ty]);\n+                let trait_ref = ty::TraitRef::from_lang_item(tcx, LangItem::Sized, span, [ty]);\n \n                 self.prove_trait_ref(\n                     trait_ref,\n@@ -1840,7 +1841,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             Rvalue::ShallowInitBox(operand, ty) => {\n                 self.check_operand(operand, location);\n \n-                let trait_ref = ty::TraitRef::from_lang_item(tcx.at(span), LangItem::Sized, [*ty]);\n+                let trait_ref = ty::TraitRef::from_lang_item(tcx, LangItem::Sized, span, [*ty]);\n \n                 self.prove_trait_ref(\n                     trait_ref,\n@@ -1938,8 +1939,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     CastKind::Pointer(PointerCast::Unsize) => {\n                         let &ty = ty;\n                         let trait_ref = ty::TraitRef::from_lang_item(\n-                            tcx.at(span),\n+                            tcx,\n                             LangItem::CoerceUnsized,\n+                            span,\n                             [op.ty(body, tcx), ty],\n                         );\n "}, {"sha": "60d4e6ece486ed219d51a8699e6916ada59e389b", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f2532fb531919478b2655925cacb614d8c9f569/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2532fb531919478b2655925cacb614d8c9f569/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=4f2532fb531919478b2655925cacb614d8c9f569", "patch": "@@ -158,8 +158,9 @@ impl Qualif for NeedsNonConstDrop {\n             ObligationCause::dummy_with_span(cx.body.span),\n             cx.param_env,\n             ty::Binder::dummy(ty::TraitRef::from_lang_item(\n-                cx.tcx.at(cx.body.span),\n+                cx.tcx,\n                 LangItem::Destruct,\n+                cx.body.span,\n                 [ty],\n             ))\n             .with_constness(ty::BoundConstness::ConstIfConst),"}, {"sha": "bfa83a2ee2609c4a4638c9541fdf81711f5452c3", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f2532fb531919478b2655925cacb614d8c9f569/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2532fb531919478b2655925cacb614d8c9f569/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=4f2532fb531919478b2655925cacb614d8c9f569", "patch": "@@ -765,8 +765,9 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             self.cause.clone(),\n             self.param_env,\n             ty::TraitRef::from_lang_item(\n-                self.tcx.at(self.cause.span),\n+                self.tcx,\n                 hir::LangItem::PointerLike,\n+                self.cause.span,\n                 [a],\n             ),\n         ));"}, {"sha": "32809783c29e55903f6b0b6f92138e7904a1a72c", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f2532fb531919478b2655925cacb614d8c9f569/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2532fb531919478b2655925cacb614d8c9f569/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=4f2532fb531919478b2655925cacb614d8c9f569", "patch": "@@ -3,7 +3,6 @@\n #![allow(rustc::usage_of_ty_tykind)]\n \n use crate::infer::canonical::Canonical;\n-use crate::ty::query::TyCtxtAt;\n use crate::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n use crate::ty::visit::ValidateBoundVars;\n use crate::ty::InferTy::*;\n@@ -836,12 +835,13 @@ impl<'tcx> TraitRef<'tcx> {\n     }\n \n     pub fn from_lang_item(\n-        tcx: TyCtxtAt<'tcx>,\n+        tcx: TyCtxt<'tcx>,\n         trait_lang_item: LangItem,\n+        span: Span,\n         substs: impl IntoIterator<Item: Into<ty::GenericArg<'tcx>>>,\n     ) -> Self {\n-        let trait_def_id = tcx.require_lang_item(trait_lang_item, Some(tcx.span));\n-        Self::new(tcx.tcx, trait_def_id, substs)\n+        let trait_def_id = tcx.require_lang_item(trait_lang_item, Some(span));\n+        Self::new(tcx, trait_def_id, substs)\n     }\n \n     pub fn from_method("}, {"sha": "7253acf61e64dc9fd4ba68599d8079d146bbcbe1", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f2532fb531919478b2655925cacb614d8c9f569/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2532fb531919478b2655925cacb614d8c9f569/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=4f2532fb531919478b2655925cacb614d8c9f569", "patch": "@@ -31,8 +31,9 @@ fn custom_coerce_unsize_info<'tcx>(\n     target_ty: Ty<'tcx>,\n ) -> CustomCoerceUnsized {\n     let trait_ref = ty::Binder::dummy(ty::TraitRef::from_lang_item(\n-        tcx,\n+        tcx.tcx,\n         LangItem::CoerceUnsized,\n+        tcx.span,\n         [source_ty, target_ty],\n     ));\n "}, {"sha": "e5d51064c8d8f1256bab275bbb28f6e4542d40f6", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f2532fb531919478b2655925cacb614d8c9f569/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2532fb531919478b2655925cacb614d8c9f569/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=4f2532fb531919478b2655925cacb614d8c9f569", "patch": "@@ -275,7 +275,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                 }\n             };\n         let output_is_sized_pred = tupled_inputs_and_output.map_bound(|(_, output)| {\n-            ty::TraitRef::from_lang_item(tcx.at(DUMMY_SP), LangItem::Sized, [output])\n+            ty::TraitRef::from_lang_item(tcx, LangItem::Sized, DUMMY_SP, [output])\n         });\n \n         let pred = tupled_inputs_and_output\n@@ -335,8 +335,9 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                 ty::Alias(_, _) | ty::Param(_) | ty::Placeholder(..) => {\n                     // FIXME(ptr_metadata): It would also be possible to return a `Ok(Ambig)` with no constraints.\n                     let sized_predicate = ty::TraitRef::from_lang_item(\n-                        tcx.at(DUMMY_SP),\n+                        tcx,\n                         LangItem::Sized,\n+                        DUMMY_SP,\n                         [ty::GenericArg::from(goal.predicate.self_ty())],\n                     );\n                     ecx.add_goal(goal.with(tcx, sized_predicate));"}, {"sha": "af5892e1b4060ff92b8fde1ca2f2261f5de7d0c5", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f2532fb531919478b2655925cacb614d8c9f569/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2532fb531919478b2655925cacb614d8c9f569/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=4f2532fb531919478b2655925cacb614d8c9f569", "patch": "@@ -243,7 +243,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                 }\n             };\n         let output_is_sized_pred = tupled_inputs_and_output.map_bound(|(_, output)| {\n-            ty::TraitRef::from_lang_item(tcx.at(DUMMY_SP), LangItem::Sized, [output])\n+            ty::TraitRef::from_lang_item(tcx, LangItem::Sized, DUMMY_SP, [output])\n         });\n \n         let pred = tupled_inputs_and_output"}, {"sha": "68e3600a5e45770e2445a51fecc10d5ab554a8f6", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f2532fb531919478b2655925cacb614d8c9f569/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2532fb531919478b2655925cacb614d8c9f569/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=4f2532fb531919478b2655925cacb614d8c9f569", "patch": "@@ -1683,7 +1683,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                                 &obligation.with(\n                                     selcx.tcx(),\n                                     ty::Binder::dummy(\n-                                        ty::TraitRef::from_lang_item(selcx.tcx().at(obligation.cause.span()), LangItem::Sized, [self_ty]),\n+                                        ty::TraitRef::from_lang_item(selcx.tcx(), LangItem::Sized, obligation.cause.span(),[self_ty]),\n                                     )\n                                     .without_const(),\n                                 ),\n@@ -1949,8 +1949,9 @@ fn confirm_builtin_candidate<'cx, 'tcx>(\n         });\n         if check_is_sized {\n             let sized_predicate = ty::Binder::dummy(ty::TraitRef::from_lang_item(\n-                tcx.at(obligation.cause.span()),\n+                tcx,\n                 LangItem::Sized,\n+                obligation.cause.span(),\n                 [self_ty],\n             ))\n             .without_const();"}, {"sha": "089f680654ed3fcdbec78415b9b6188018aa6925", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4f2532fb531919478b2655925cacb614d8c9f569/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2532fb531919478b2655925cacb614d8c9f569/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=4f2532fb531919478b2655925cacb614d8c9f569", "patch": "@@ -646,8 +646,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             output_ty,\n             &mut nested,\n         );\n-        let tr =\n-            ty::TraitRef::from_lang_item(self.tcx().at(cause.span), LangItem::Sized, [output_ty]);\n+        let tr = ty::TraitRef::from_lang_item(self.tcx(), LangItem::Sized, cause.span, [output_ty]);\n         nested.push(Obligation::new(self.infcx.tcx, cause, obligation.param_env, tr));\n \n         Ok(ImplSourceFnPointerData { fn_ty: self_ty, nested })\n@@ -1051,8 +1050,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                 // We can only make objects from sized types.\n                 let tr = ty::Binder::dummy(ty::TraitRef::from_lang_item(\n-                    tcx.at(cause.span),\n+                    tcx,\n                     LangItem::Sized,\n+                    cause.span,\n                     [source],\n                 ));\n                 nested.push(predicate_to_obligation(tr.without_const().to_predicate(tcx)));\n@@ -1281,8 +1281,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         obligation.recursion_depth + 1,\n                         self_ty.rebind(ty::TraitPredicate {\n                             trait_ref: ty::TraitRef::from_lang_item(\n-                                self.tcx().at(cause.span),\n+                                self.tcx(),\n                                 LangItem::Destruct,\n+                                cause.span,\n                                 [nested_ty],\n                             ),\n                             constness: ty::BoundConstness::ConstIfConst,\n@@ -1306,8 +1307,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 _ => {\n                     let predicate = self_ty.rebind(ty::TraitPredicate {\n                         trait_ref: ty::TraitRef::from_lang_item(\n-                            self.tcx().at(cause.span),\n+                            self.tcx(),\n                             LangItem::Destruct,\n+                            cause.span,\n                             [nested_ty],\n                         ),\n                         constness: ty::BoundConstness::ConstIfConst,"}, {"sha": "517f4522d6173126143d6d98c176d611b28140b5", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f2532fb531919478b2655925cacb614d8c9f569/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2532fb531919478b2655925cacb614d8c9f569/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=4f2532fb531919478b2655925cacb614d8c9f569", "patch": "@@ -449,7 +449,7 @@ impl<'tcx> WfPredicates<'tcx> {\n         if !subty.has_escaping_bound_vars() {\n             let cause = self.cause(cause);\n             let trait_ref =\n-                ty::TraitRef::from_lang_item(self.tcx.at(cause.span), LangItem::Sized, [subty]);\n+                ty::TraitRef::from_lang_item(self.tcx, LangItem::Sized, cause.span, [subty]);\n             self.out.push(traits::Obligation::with_depth(\n                 self.tcx,\n                 cause,"}]}