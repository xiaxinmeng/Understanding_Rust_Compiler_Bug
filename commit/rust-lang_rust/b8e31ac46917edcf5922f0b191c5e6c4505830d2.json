{"sha": "b8e31ac46917edcf5922f0b191c5e6c4505830d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZTMxYWM0NjkxN2VkY2Y1OTIyZjBiMTkxYzVlNmM0NTA1ODMwZDI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-13T23:21:54Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-13T23:52:12Z"}, "message": "Try a little harder to avoid creating new landing pads\n\nIt's only when we add or revoke cleanups involving immediates that we need a\nnew landing pad for the scope.\n\nTrims 5K off the optimized rustc bin", "tree": {"sha": "3ee05fa0de64e64d1eae49c5cd2154f3be65c90c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ee05fa0de64e64d1eae49c5cd2154f3be65c90c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8e31ac46917edcf5922f0b191c5e6c4505830d2", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8e31ac46917edcf5922f0b191c5e6c4505830d2", "html_url": "https://github.com/rust-lang/rust/commit/b8e31ac46917edcf5922f0b191c5e6c4505830d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8e31ac46917edcf5922f0b191c5e6c4505830d2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74c39469beaef51177369c12a08c7ef5273065ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/74c39469beaef51177369c12a08c7ef5273065ca", "html_url": "https://github.com/rust-lang/rust/commit/74c39469beaef51177369c12a08c7ef5273065ca"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "09967f9034a965261d23d8e4fcc2e24caee5f88c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8e31ac46917edcf5922f0b191c5e6c4505830d2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e31ac46917edcf5922f0b191c5e6c4505830d2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=b8e31ac46917edcf5922f0b191c5e6c4505830d2", "patch": "@@ -3739,11 +3739,11 @@ fn invoke_(bcx: @block_ctxt, llfn: ValueRef,\n \n fn get_landing_pad(bcx: @block_ctxt) -> BasicBlockRef {\n     let scope_bcx = find_scope_cx(bcx);\n-    if scope_bcx.cleanups_dirty {\n+    if scope_bcx.need_new_lpad {\n         let unwind_bcx = new_sub_block_ctxt(bcx, \"unwind\");\n         let lpadbb = trans_landing_pad(unwind_bcx);\n         scope_bcx.lpad = some(lpadbb);\n-        scope_bcx.cleanups_dirty = false;\n+        scope_bcx.need_new_lpad = false;\n     }\n     assert option::is_some(scope_bcx.lpad);\n     ret option::get(scope_bcx.lpad);\n@@ -4533,7 +4533,7 @@ fn new_block_ctxt(cx: @fn_ctxt, parent: block_parent, kind: block_kind,\n           parent: parent,\n           kind: kind,\n           mutable cleanups: [],\n-          mutable cleanups_dirty: true,\n+          mutable need_new_lpad: true,\n           mutable lpad: option::none,\n           sp: cx.sp,\n           fcx: cx};\n@@ -4569,7 +4569,7 @@ fn new_raw_block_ctxt(fcx: @fn_ctxt, llbb: BasicBlockRef) -> @block_ctxt {\n           parent: parent_none,\n           kind: NON_SCOPE_BLOCK,\n           mutable cleanups: [],\n-          mutable cleanups_dirty: true,\n+          mutable need_new_lpad: true,\n           mutable lpad: option::none,\n           sp: fcx.sp,\n           fcx: fcx};\n@@ -4637,7 +4637,7 @@ fn llstaticallocas_block_ctxt(fcx: @fn_ctxt) -> @block_ctxt {\n           parent: parent_none,\n           kind: SCOPE_BLOCK,\n           mutable cleanups: [],\n-          mutable cleanups_dirty: true,\n+          mutable need_new_lpad: true,\n           mutable lpad: option::none,\n           sp: fcx.sp,\n           fcx: fcx};\n@@ -4649,7 +4649,7 @@ fn llderivedtydescs_block_ctxt(fcx: @fn_ctxt) -> @block_ctxt {\n           parent: parent_none,\n           kind: SCOPE_BLOCK,\n           mutable cleanups: [],\n-          mutable cleanups_dirty: true,\n+          mutable need_new_lpad: true,\n           mutable lpad: option::none,\n           sp: fcx.sp,\n           fcx: fcx};"}, {"sha": "d4a6ddc9b728f4dc97ce8dcd4bc0d4c50ccfa18c", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b8e31ac46917edcf5922f0b191c5e6c4505830d2/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e31ac46917edcf5922f0b191c5e6c4505830d2/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=b8e31ac46917edcf5922f0b191c5e6c4505830d2", "patch": "@@ -272,7 +272,6 @@ tag cleanup {\n fn add_clean(cx: @block_ctxt, val: ValueRef, ty: ty::t) {\n     let scope_cx = find_scope_cx(cx);\n     scope_cx.cleanups += [clean(bind drop_ty(_, val, ty))];\n-    scope_cx.cleanups_dirty = true;\n }\n fn add_clean_temp(cx: @block_ctxt, val: ValueRef, ty: ty::t) {\n     fn spill_and_drop(cx: @block_ctxt, val: ValueRef, ty: ty::t) ->\n@@ -286,7 +285,9 @@ fn add_clean_temp(cx: @block_ctxt, val: ValueRef, ty: ty::t) {\n     let scope_cx = find_scope_cx(cx);\n     scope_cx.cleanups +=\n         [clean_temp(val, bind spill_and_drop(_, val, ty))];\n-    scope_cx.cleanups_dirty = true;\n+    if trans::type_is_immediate(bcx_ccx(cx), ty) {\n+        scope_cx.need_new_lpad = true;\n+    }\n }\n \n // Note that this only works for temporaries. We should, at some point, move\n@@ -320,7 +321,7 @@ fn revoke_clean(cx: @block_ctxt, val: ValueRef, t: ty::t) -> @block_ctxt {\n         std::vec::slice(sc_cx.cleanups, 0u, found as uint) +\n             std::vec::slice(sc_cx.cleanups, (found as uint) + 1u,\n                             std::vec::len(sc_cx.cleanups));\n-    sc_cx.cleanups_dirty = true;\n+    sc_cx.need_new_lpad = true;\n     ret cx;\n }\n \n@@ -393,7 +394,7 @@ type block_ctxt =\n      parent: block_parent,\n      kind: block_kind,\n      mutable cleanups: [cleanup],\n-     mutable cleanups_dirty: bool,\n+     mutable need_new_lpad: bool,\n      mutable lpad: option::t<BasicBlockRef>,\n      sp: span,\n      fcx: @fn_ctxt};"}]}