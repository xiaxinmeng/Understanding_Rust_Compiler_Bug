{"sha": "1b182371e1502a1a3a32c8335be40835f50db93a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMTgyMzcxZTE1MDJhMWEzYTMyYzgzMzViZTQwODM1ZjUwZGI5M2E=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-15T00:52:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-15T00:52:42Z"}, "message": "Rollup merge of #65410 - Centril:intersection-pat-recover, r=davidtwco,varkor\n\nsyntax: add parser recovery for intersection- / and-patterns `p1 @ p2`\n\nFixes https://github.com/rust-lang/rust/issues/65400.\n\nThe recovery comes in two flavors:\n\n1. We know that `p2` is a binding so we can invert as `p2 @ p1`:\n\n```rust\nerror: pattern on wrong side of `@`\n  --> $DIR/intersection-patterns.rs:13:9\n   |\nLL |         Some(x) @ y => {}\n   |         -------^^^-\n   |         |         |\n   |         |         binding on the right, should be to the left\n   |         pattern on the left, should be to the right\n   |         help: switch the order: `y @ Some(x)`\n```\n\n2. Otherwise we emit a generic diagnostic for the lack of support for intersection patterns:\n\n```rust\nerror: left-hand side of `@` must be a binding\n  --> $DIR/intersection-patterns.rs:23:9\n   |\nLL |         Some(x) @ Some(y) => {}\n   |         -------^^^-------\n   |         |         |\n   |         |         also a pattern\n   |         interpreted as a pattern, not a binding\n   |\n   = note: bindings are `x`, `mut x`, `ref x`, and `ref mut x`\n```\n\nFor more on and-patterns, see e.g. https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/pattern-matching#and-pattern.\n\nr? @davidtwco\ncc @varkor @lzutao", "tree": {"sha": "42d44aa7c0df30c59861eca54526a60737862c24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42d44aa7c0df30c59861eca54526a60737862c24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b182371e1502a1a3a32c8335be40835f50db93a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdpRhaCRBK7hj4Ov3rIwAAdHIIAAlwX1RdiAwXkz0ZYaiUfuPz\n6whvHypV9jNHVWkCtLZCGOOAnjViiJKymoEGKipaGcug4/vvKlRVhdEVrYGUAwYq\nwInXcZVp9hf1AqIbUBj7BZvXDpfj1i/zIaxLfvlFkGhq0gkPbAObn9imdUv98IwZ\nPOos2lduoBamc104t2sQyWLo8LXcWDM8ouhreY5yFswZxQszd9cplUyRIfrhk5VD\nbWeg26o0LW1H+Lgpmh8rxplLrKWSNZ30h5zU/TV2JVz16t31JRU8e+86i27Wq6ay\nPaaXs9/zV5I0RrPgV2fW9UAih7ML/yG/UgqfrH2K6ApdxxCrzPc/KG4XIqqKm2k=\n=2lIc\n-----END PGP SIGNATURE-----\n", "payload": "tree 42d44aa7c0df30c59861eca54526a60737862c24\nparent a14e35f382825549a506eb5c187fa5d58622bb1c\nparent 16266a54058a71c943d064054bfe3a1b5704a444\nauthor Tyler Mandry <tmandry@gmail.com> 1571100762 -0700\ncommitter GitHub <noreply@github.com> 1571100762 -0700\n\nRollup merge of #65410 - Centril:intersection-pat-recover, r=davidtwco,varkor\n\nsyntax: add parser recovery for intersection- / and-patterns `p1 @ p2`\n\nFixes https://github.com/rust-lang/rust/issues/65400.\n\nThe recovery comes in two flavors:\n\n1. We know that `p2` is a binding so we can invert as `p2 @ p1`:\n\n```rust\nerror: pattern on wrong side of `@`\n  --> $DIR/intersection-patterns.rs:13:9\n   |\nLL |         Some(x) @ y => {}\n   |         -------^^^-\n   |         |         |\n   |         |         binding on the right, should be to the left\n   |         pattern on the left, should be to the right\n   |         help: switch the order: `y @ Some(x)`\n```\n\n2. Otherwise we emit a generic diagnostic for the lack of support for intersection patterns:\n\n```rust\nerror: left-hand side of `@` must be a binding\n  --> $DIR/intersection-patterns.rs:23:9\n   |\nLL |         Some(x) @ Some(y) => {}\n   |         -------^^^-------\n   |         |         |\n   |         |         also a pattern\n   |         interpreted as a pattern, not a binding\n   |\n   = note: bindings are `x`, `mut x`, `ref x`, and `ref mut x`\n```\n\nFor more on and-patterns, see e.g. https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/pattern-matching#and-pattern.\n\nr? @davidtwco\ncc @varkor @lzutao\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b182371e1502a1a3a32c8335be40835f50db93a", "html_url": "https://github.com/rust-lang/rust/commit/1b182371e1502a1a3a32c8335be40835f50db93a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b182371e1502a1a3a32c8335be40835f50db93a/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a14e35f382825549a506eb5c187fa5d58622bb1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a14e35f382825549a506eb5c187fa5d58622bb1c", "html_url": "https://github.com/rust-lang/rust/commit/a14e35f382825549a506eb5c187fa5d58622bb1c"}, {"sha": "16266a54058a71c943d064054bfe3a1b5704a444", "url": "https://api.github.com/repos/rust-lang/rust/commits/16266a54058a71c943d064054bfe3a1b5704a444", "html_url": "https://github.com/rust-lang/rust/commit/16266a54058a71c943d064054bfe3a1b5704a444"}], "stats": {"total": 136, "additions": 135, "deletions": 1}, "files": [{"sha": "e288346a329271cc80416b7a0976b1c170e730d7", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1b182371e1502a1a3a32c8335be40835f50db93a/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b182371e1502a1a3a32c8335be40835f50db93a/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=1b182371e1502a1a3a32c8335be40835f50db93a", "patch": "@@ -367,6 +367,7 @@ impl<'a> Parser<'a> {\n \n         let pat = self.mk_pat(lo.to(self.prev_span), pat);\n         let pat = self.maybe_recover_from_bad_qpath(pat, true)?;\n+        let pat = self.recover_intersection_pat(pat)?;\n \n         if !allow_range_pat {\n             self.ban_pat_range_if_ambiguous(&pat)?\n@@ -375,6 +376,65 @@ impl<'a> Parser<'a> {\n         Ok(pat)\n     }\n \n+    /// Try to recover the more general form `intersect ::= $pat_lhs @ $pat_rhs`.\n+    ///\n+    /// Allowed binding patterns generated by `binding ::= ref? mut? $ident @ $pat_rhs`\n+    /// should already have been parsed by now  at this point,\n+    /// if the next token is `@` then we can try to parse the more general form.\n+    ///\n+    /// Consult `parse_pat_ident` for the `binding` grammar.\n+    ///\n+    /// The notion of intersection patterns are found in\n+    /// e.g. [F#][and] where they are called AND-patterns.\n+    ///\n+    /// [and]: https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/pattern-matching\n+    fn recover_intersection_pat(&mut self, lhs: P<Pat>) -> PResult<'a, P<Pat>> {\n+        if self.token.kind != token::At {\n+            // Next token is not `@` so it's not going to be an intersection pattern.\n+            return Ok(lhs);\n+        }\n+\n+        // At this point we attempt to parse `@ $pat_rhs` and emit an error.\n+        self.bump(); // `@`\n+        let mut rhs = self.parse_pat(None)?;\n+        let sp = lhs.span.to(rhs.span);\n+\n+        if let PatKind::Ident(_, _, ref mut sub @ None) = rhs.kind {\n+            // The user inverted the order, so help them fix that.\n+            let mut applicability = Applicability::MachineApplicable;\n+            lhs.walk(&mut |p| match p.kind {\n+                // `check_match` is unhappy if the subpattern has a binding anywhere.\n+                PatKind::Ident(..) => {\n+                    applicability = Applicability::MaybeIncorrect;\n+                    false // Short-circuit.\n+                },\n+                _ => true,\n+            });\n+\n+            let lhs_span = lhs.span;\n+            // Move the LHS into the RHS as a subpattern.\n+            // The RHS is now the full pattern.\n+            *sub = Some(lhs);\n+\n+            self.struct_span_err(sp, \"pattern on wrong side of `@`\")\n+                .span_label(lhs_span, \"pattern on the left, should be on the right\")\n+                .span_label(rhs.span, \"binding on the right, should be on the left\")\n+                .span_suggestion(sp, \"switch the order\", pprust::pat_to_string(&rhs), applicability)\n+                .emit();\n+        } else {\n+            // The special case above doesn't apply so we may have e.g. `A(x) @ B(y)`.\n+            rhs.kind = PatKind::Wild;\n+            self.struct_span_err(sp, \"left-hand side of `@` must be a binding\")\n+                .span_label(lhs.span, \"interpreted as a pattern, not a binding\")\n+                .span_label(rhs.span, \"also a pattern\")\n+                .note(\"bindings are `x`, `mut x`, `ref x`, and `ref mut x`\")\n+                .emit();\n+        }\n+\n+        rhs.span = sp;\n+        Ok(rhs)\n+    }\n+\n     /// Ban a range pattern if it has an ambiguous interpretation.\n     fn ban_pat_range_if_ambiguous(&self, pat: &Pat) -> PResult<'a, ()> {\n         match pat.kind {"}, {"sha": "68dd90b54ab683f232b0766825163b536cdbdeae", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b182371e1502a1a3a32c8335be40835f50db93a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b182371e1502a1a3a32c8335be40835f50db93a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=1b182371e1502a1a3a32c8335be40835f50db93a", "patch": "@@ -2381,7 +2381,8 @@ impl<'a> State<'a> {\n                 }\n                 self.print_ident(ident);\n                 if let Some(ref p) = *sub {\n-                    self.s.word(\"@\");\n+                    self.s.space();\n+                    self.s.word_space(\"@\");\n                     self.print_pat(p);\n                 }\n             }"}, {"sha": "adb607cf6b97b08ca03156b535d36b1537720176", "filename": "src/test/ui/parser/intersection-patterns.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1b182371e1502a1a3a32c8335be40835f50db93a/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b182371e1502a1a3a32c8335be40835f50db93a/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns.rs?ref=1b182371e1502a1a3a32c8335be40835f50db93a", "patch": "@@ -0,0 +1,40 @@\n+// This tests the parser recovery in `recover_intersection_pat`\n+// and serves as a regression test for the diagnostics issue #65400.\n+//\n+// The general idea is that for `$pat_lhs @ $pat_rhs` where\n+// `$pat_lhs` is not generated by `ref? mut? $ident` we want\n+// to suggest either switching the order or note that intersection\n+// patterns are not allowed.\n+\n+fn main() {\n+    let s: Option<u8> = None;\n+\n+    match s {\n+        Some(x) @ y => {}\n+        //~^ ERROR pattern on wrong side of `@`\n+        //~| pattern on the left, should be on the right\n+        //~| binding on the right, should be on the left\n+        //~| HELP switch the order\n+        //~| SUGGESTION y @ Some(x)\n+        _ => {}\n+    }\n+\n+    match s {\n+        Some(x) @ Some(y) => {}\n+        //~^ ERROR left-hand side of `@` must be a binding\n+        //~| interpreted as a pattern, not a binding\n+        //~| also a pattern\n+        //~| NOTE bindings are `x`, `mut x`, `ref x`, and `ref mut x`\n+        _ => {}\n+    }\n+\n+    match 2 {\n+        1 ..= 5 @ e => {}\n+        //~^ ERROR pattern on wrong side of `@`\n+        //~| pattern on the left, should be on the right\n+        //~| binding on the right, should be on the left\n+        //~| HELP switch the order\n+        //~| SUGGESTION e @ 1 ..=5\n+        _ => {}\n+    }\n+}"}, {"sha": "f5bfee5bbd611dd2da6df2d6bb1d7751ccb8fd75", "filename": "src/test/ui/parser/intersection-patterns.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1b182371e1502a1a3a32c8335be40835f50db93a/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b182371e1502a1a3a32c8335be40835f50db93a/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns.stderr?ref=1b182371e1502a1a3a32c8335be40835f50db93a", "patch": "@@ -0,0 +1,33 @@\n+error: pattern on wrong side of `@`\n+  --> $DIR/intersection-patterns.rs:13:9\n+   |\n+LL |         Some(x) @ y => {}\n+   |         -------^^^-\n+   |         |         |\n+   |         |         binding on the right, should be on the left\n+   |         pattern on the left, should be on the right\n+   |         help: switch the order: `y @ Some(x)`\n+\n+error: left-hand side of `@` must be a binding\n+  --> $DIR/intersection-patterns.rs:23:9\n+   |\n+LL |         Some(x) @ Some(y) => {}\n+   |         -------^^^-------\n+   |         |         |\n+   |         |         also a pattern\n+   |         interpreted as a pattern, not a binding\n+   |\n+   = note: bindings are `x`, `mut x`, `ref x`, and `ref mut x`\n+\n+error: pattern on wrong side of `@`\n+  --> $DIR/intersection-patterns.rs:32:9\n+   |\n+LL |         1 ..= 5 @ e => {}\n+   |         -------^^^-\n+   |         |         |\n+   |         |         binding on the right, should be on the left\n+   |         pattern on the left, should be on the right\n+   |         help: switch the order: `e @ 1 ..=5`\n+\n+error: aborting due to 3 previous errors\n+"}]}