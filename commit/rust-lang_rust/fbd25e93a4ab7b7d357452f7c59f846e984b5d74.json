{"sha": "fbd25e93a4ab7b7d357452f7c59f846e984b5d74", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZDI1ZTkzYTRhYjdiN2QzNTc0NTJmN2M1OWY4NDZlOTg0YjVkNzQ=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-02-12T05:11:04Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-08T15:49:04Z"}, "message": "Add flags to detect lints are triggered", "tree": {"sha": "91d2f8d107381e5236e241d51dfddf80ef1ce430", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91d2f8d107381e5236e241d51dfddf80ef1ce430"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbd25e93a4ab7b7d357452f7c59f846e984b5d74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbd25e93a4ab7b7d357452f7c59f846e984b5d74", "html_url": "https://github.com/rust-lang/rust/commit/fbd25e93a4ab7b7d357452f7c59f846e984b5d74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbd25e93a4ab7b7d357452f7c59f846e984b5d74/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c2fb3996f8b0db6537a2a9d193af89304cd62ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c2fb3996f8b0db6537a2a9d193af89304cd62ed", "html_url": "https://github.com/rust-lang/rust/commit/2c2fb3996f8b0db6537a2a9d193af89304cd62ed"}], "stats": {"total": 54, "additions": 38, "deletions": 16}, "files": [{"sha": "4eb032cae6b1a678b7d1c08319ec071dd00c6f6b", "filename": "clippy_lints/src/types/box_vec.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbd25e93a4ab7b7d357452f7c59f846e984b5d74/clippy_lints%2Fsrc%2Ftypes%2Fbox_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd25e93a4ab7b7d357452f7c59f846e984b5d74/clippy_lints%2Fsrc%2Ftypes%2Fbox_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fbox_vec.rs?ref=fbd25e93a4ab7b7d357452f7c59f846e984b5d74", "patch": "@@ -6,7 +6,7 @@ use crate::utils::{is_ty_param_diagnostic_item, span_lint_and_help};\n \n use super::BOX_VEC;\n \n-pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) {\n+pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) -> bool {\n     if Some(def_id) == cx.tcx.lang_items().owned_box() {\n         if is_ty_param_diagnostic_item(cx, qpath, sym::vec_type).is_some() {\n             span_lint_and_help(\n@@ -17,6 +17,8 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 None,\n                 \"`Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation\",\n             );\n+            return true;\n         }\n     }\n+    false\n }"}, {"sha": "8506f362517aaa83a610b85b47785d59cef96708", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fbd25e93a4ab7b7d357452f7c59f846e984b5d74/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd25e93a4ab7b7d357452f7c59f846e984b5d74/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=fbd25e93a4ab7b7d357452f7c59f846e984b5d74", "patch": "@@ -322,10 +322,11 @@ impl Types {\n                 let hir_id = hir_ty.hir_id;\n                 let res = cx.qpath_res(qpath, hir_id);\n                 if let Some(def_id) = res.opt_def_id() {\n-                    box_vec::check(cx, hir_ty, qpath, def_id);\n-                    redundant_allocation::check(cx, hir_ty, qpath, def_id);\n-                    rc_buffer::check(cx, hir_ty, qpath, def_id);\n-                    vec_box::check(cx, hir_ty, qpath, def_id, self.vec_box_size_threshold);\n+                    let mut triggered = false;\n+                    triggered |= box_vec::check(cx, hir_ty, qpath, def_id);\n+                    triggered |= redundant_allocation::check(cx, hir_ty, qpath, def_id);\n+                    triggered |= rc_buffer::check(cx, hir_ty, qpath, def_id);\n+                    triggered |= vec_box::check(cx, hir_ty, qpath, def_id, self.vec_box_size_threshold);\n \n                     if cx.tcx.is_diagnostic_item(sym::option_type, def_id) {\n                         if is_ty_param_diagnostic_item(cx, qpath, sym::option_type).is_some() {\n@@ -349,6 +350,10 @@ impl Types {\n                         );\n                         return; // don't recurse into the type\n                     }\n+\n+                    if triggered {\n+                        return;\n+                    }\n                 }\n                 match *qpath {\n                     QPath::Resolved(Some(ref ty), ref p) => {"}, {"sha": "e34b95147e10a6d4cf2fb2c06734b9d1459a71d2", "filename": "clippy_lints/src/types/rc_buffer.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fbd25e93a4ab7b7d357452f7c59f846e984b5d74/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd25e93a4ab7b7d357452f7c59f846e984b5d74/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs?ref=fbd25e93a4ab7b7d357452f7c59f846e984b5d74", "patch": "@@ -9,7 +9,7 @@ use crate::utils::{\n \n use super::RC_BUFFER;\n \n-pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) {\n+pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) -> bool {\n     if cx.tcx.is_diagnostic_item(sym::Rc, def_id) {\n         if let Some(alternate) = match_buffer_type(cx, qpath) {\n             span_lint_and_sugg(\n@@ -24,11 +24,11 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n         } else if let Some(ty) = is_ty_param_diagnostic_item(cx, qpath, sym::vec_type) {\n             let qpath = match &ty.kind {\n                 TyKind::Path(qpath) => qpath,\n-                _ => return,\n+                _ => return false,\n             };\n             let inner_span = match get_qpath_generic_tys(qpath).next() {\n                 Some(ty) => ty.span,\n-                None => return,\n+                None => return false,\n             };\n             let mut applicability = Applicability::MachineApplicable;\n             span_lint_and_sugg(\n@@ -43,6 +43,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 ),\n                 Applicability::MachineApplicable,\n             );\n+            return true;\n         }\n     } else if cx.tcx.is_diagnostic_item(sym::Arc, def_id) {\n         if let Some(alternate) = match_buffer_type(cx, qpath) {\n@@ -58,11 +59,11 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n         } else if let Some(ty) = is_ty_param_diagnostic_item(cx, qpath, sym::vec_type) {\n             let qpath = match &ty.kind {\n                 TyKind::Path(qpath) => qpath,\n-                _ => return,\n+                _ => return false,\n             };\n             let inner_span = match get_qpath_generic_tys(qpath).next() {\n                 Some(ty) => ty.span,\n-                None => return,\n+                None => return false,\n             };\n             let mut applicability = Applicability::MachineApplicable;\n             span_lint_and_sugg(\n@@ -77,8 +78,11 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 ),\n                 Applicability::MachineApplicable,\n             );\n+            return true;\n         }\n     }\n+\n+    false\n }\n \n fn match_buffer_type(cx: &LateContext<'_>, qpath: &QPath<'_>) -> Option<&'static str> {"}, {"sha": "ea5a675827ab08e3f75d4ebda4733ccf4e8a2d7c", "filename": "clippy_lints/src/types/redundant_allocation.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fbd25e93a4ab7b7d357452f7c59f846e984b5d74/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd25e93a4ab7b7d357452f7c59f846e984b5d74/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs?ref=fbd25e93a4ab7b7d357452f7c59f846e984b5d74", "patch": "@@ -10,7 +10,7 @@ use crate::utils::{\n \n use super::{utils, REDUNDANT_ALLOCATION};\n \n-pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) {\n+pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) -> bool {\n     if Some(def_id) == cx.tcx.lang_items().owned_box() {\n         if let Some(span) = utils::match_borrows_parameter(cx, qpath) {\n             let mut applicability = Applicability::MachineApplicable;\n@@ -23,7 +23,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 snippet_with_applicability(cx, span, \"..\", &mut applicability).to_string(),\n                 applicability,\n             );\n-            return;\n+            return true;\n         }\n     }\n \n@@ -39,14 +39,15 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 snippet_with_applicability(cx, ty.span, \"..\", &mut applicability).to_string(),\n                 applicability,\n             );\n+            true\n         } else if let Some(ty) = is_ty_param_lang_item(cx, qpath, LangItem::OwnedBox) {\n             let qpath = match &ty.kind {\n                 TyKind::Path(qpath) => qpath,\n-                _ => return,\n+                _ => return false,\n             };\n             let inner_span = match get_qpath_generic_tys(qpath).next() {\n                 Some(ty) => ty.span,\n-                None => return,\n+                None => return false,\n             };\n             let mut applicability = Applicability::MachineApplicable;\n             span_lint_and_sugg(\n@@ -61,6 +62,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 ),\n                 applicability,\n             );\n+            true\n         } else if let Some(span) = utils::match_borrows_parameter(cx, qpath) {\n             let mut applicability = Applicability::MachineApplicable;\n             span_lint_and_sugg(\n@@ -72,7 +74,11 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 snippet_with_applicability(cx, span, \"..\", &mut applicability).to_string(),\n                 applicability,\n             );\n-            return; // don't recurse into the type\n+            true\n+        } else {\n+            false\n         }\n+    } else {\n+        false\n     }\n }"}, {"sha": "2530cc133c6784ec04da443d68894b6b5b2bc0fd", "filename": "clippy_lints/src/types/vec_box.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fbd25e93a4ab7b7d357452f7c59f846e984b5d74/clippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd25e93a4ab7b7d357452f7c59f846e984b5d74/clippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs?ref=fbd25e93a4ab7b7d357452f7c59f846e984b5d74", "patch": "@@ -18,7 +18,7 @@ pub(super) fn check(\n     qpath: &QPath<'_>,\n     def_id: DefId,\n     box_size_threshold: u64,\n-) {\n+) -> bool {\n     if cx.tcx.is_diagnostic_item(sym::vec_type, def_id) {\n         if_chain! {\n             // Get the _ part of Vec<_>\n@@ -53,7 +53,12 @@ pub(super) fn check(\n                     format!(\"Vec<{}>\", snippet(cx, boxed_ty.span, \"..\")),\n                     Applicability::MachineApplicable,\n                 );\n+                true\n+            } else {\n+                false\n             }\n         }\n+    } else {\n+        false\n     }\n }"}]}