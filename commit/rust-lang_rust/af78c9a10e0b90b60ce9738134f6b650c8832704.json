{"sha": "af78c9a10e0b90b60ce9738134f6b650c8832704", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNzhjOWExMGUwYjkwYjYwY2U5NzM4MTM0ZjZiNjUwYzg4MzI3MDQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-26T10:15:42Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-26T10:15:42Z"}, "message": "Reduce duplication in abi.rs a bit", "tree": {"sha": "fdeba9f2f07c57852c3588530723567e6b12d810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdeba9f2f07c57852c3588530723567e6b12d810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af78c9a10e0b90b60ce9738134f6b650c8832704", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af78c9a10e0b90b60ce9738134f6b650c8832704", "html_url": "https://github.com/rust-lang/rust/commit/af78c9a10e0b90b60ce9738134f6b650c8832704", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af78c9a10e0b90b60ce9738134f6b650c8832704/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b85b9ffbc3c8dd03dbf761fa4b96a9e444d48c22", "url": "https://api.github.com/repos/rust-lang/rust/commits/b85b9ffbc3c8dd03dbf761fa4b96a9e444d48c22", "html_url": "https://github.com/rust-lang/rust/commit/b85b9ffbc3c8dd03dbf761fa4b96a9e444d48c22"}], "stats": {"total": 29, "additions": 8, "deletions": 21}, "files": [{"sha": "d3b2df8c73ffb390f59eb4be37eaba6e2f344f5f", "filename": "src/abi.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/af78c9a10e0b90b60ce9738134f6b650c8832704/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af78c9a10e0b90b60ce9738134f6b650c8832704/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=af78c9a10e0b90b60ce9738134f6b650c8832704", "patch": "@@ -306,7 +306,7 @@ fn add_local_header_comment(fx: &mut FunctionCx<impl Backend>) {\n     fx.add_global_comment(format!(\"msg   loc.idx    param    pass mode            ssa flags  ty\"));\n }\n \n-fn arg_place<'a, 'tcx: 'a>(\n+fn local_place<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     local: Local,\n     layout: TyLayout<'tcx>,\n@@ -342,6 +342,7 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(\n     start_ebb: Ebb,\n ) {\n     let ssa_analyzed = crate::analyze::analyze(fx);\n+    fx.add_global_comment(format!(\"ssa {:?}\", ssa_analyzed));\n \n     let ret_layout = fx.layout_of(fx.return_type());\n     let output_pass_mode = get_pass_mode(fx.tcx, fx.self_sig().abi, fx.return_type(), true);\n@@ -401,8 +402,6 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(\n \n     fx.bcx.switch_to_block(start_ebb);\n \n-    fx.add_global_comment(format!(\"ssa {:?}\", ssa_analyzed));\n-\n     match output_pass_mode {\n         PassMode::NoPass => {\n             let null = fx.bcx.ins().iconst(fx.pointer_type, 0);\n@@ -435,14 +434,14 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(\n             .unwrap()\n             .contains(crate::analyze::Flags::NOT_SSA);\n \n+        let place = local_place(fx, local, layout, is_ssa);\n+\n         match arg_kind {\n             ArgKind::Normal(ebb_param) => {\n                 let cvalue = param_to_cvalue(fx, ebb_param, layout);\n-                arg_place(fx, local, layout, is_ssa).write_cvalue(fx, cvalue);\n+                place.write_cvalue(fx, cvalue);\n             }\n             ArgKind::Spread(ebb_params) => {\n-                let place = arg_place(fx, local, layout, is_ssa);\n-\n                 for (i, ebb_param) in ebb_params.into_iter().enumerate() {\n                     let sub_place = place.place_field(fx, mir::Field::new(i));\n                     let cvalue = param_to_cvalue(fx, ebb_param, sub_place.layout());\n@@ -458,24 +457,12 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(\n \n         add_local_comment(fx, \"local\", local, None, None, None, ssa_analyzed[&local], ty);\n \n-        let place = if ssa_analyzed\n+        let is_ssa = !ssa_analyzed\n             .get(&local)\n             .unwrap()\n-            .contains(crate::analyze::Flags::NOT_SSA)\n-        {\n-            let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n-                kind: StackSlotKind::ExplicitSlot,\n-                size: layout.size.bytes() as u32,\n-                offset: None,\n-            });\n-            CPlace::from_stack_slot(fx, stack_slot, ty)\n-        } else {\n-            fx.bcx\n-                .declare_var(mir_var(local), fx.clif_type(ty).unwrap());\n-            CPlace::Var(local, layout)\n-        };\n+            .contains(crate::analyze::Flags::NOT_SSA);\n \n-        fx.local_map.insert(local, place);\n+        local_place(fx, local, layout, is_ssa);\n     }\n \n     fx.bcx"}]}