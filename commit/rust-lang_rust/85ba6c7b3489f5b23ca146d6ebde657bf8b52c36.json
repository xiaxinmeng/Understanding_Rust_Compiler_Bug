{"sha": "85ba6c7b3489f5b23ca146d6ebde657bf8b52c36", "node_id": "C_kwDOAAsO6NoAKDg1YmE2YzdiMzQ4OWY1YjIzY2ExNDZkNmViZGU2NTdiZjhiNTJjMzY", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-11-29T19:18:57Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-11-29T19:23:07Z"}, "message": "Only show notable traits if both types are the same\n\nChecking only their DefId doesn't work because all slices have the same\nfake DefId.\n\nFixes #91347", "tree": {"sha": "b1d337e852eb729d6cd8f3c8f14afd2113f51477", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1d337e852eb729d6cd8f3c8f14afd2113f51477"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85ba6c7b3489f5b23ca146d6ebde657bf8b52c36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85ba6c7b3489f5b23ca146d6ebde657bf8b52c36", "html_url": "https://github.com/rust-lang/rust/commit/85ba6c7b3489f5b23ca146d6ebde657bf8b52c36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85ba6c7b3489f5b23ca146d6ebde657bf8b52c36/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6db0a0e9a4a2f55b1a85954e114ada0b45c32e45", "url": "https://api.github.com/repos/rust-lang/rust/commits/6db0a0e9a4a2f55b1a85954e114ada0b45c32e45", "html_url": "https://github.com/rust-lang/rust/commit/6db0a0e9a4a2f55b1a85954e114ada0b45c32e45"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "f7762fd2521ff04360224b2d27f5c06e618c12dc", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/85ba6c7b3489f5b23ca146d6ebde657bf8b52c36/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ba6c7b3489f5b23ca146d6ebde657bf8b52c36/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=85ba6c7b3489f5b23ca146d6ebde657bf8b52c36", "patch": "@@ -1468,6 +1468,45 @@ crate enum Type {\n rustc_data_structures::static_assert_size!(Type, 72);\n \n impl Type {\n+    /// When comparing types for equality, it can help to ignore `&` wrapping.\n+    crate fn without_borrowed_ref(&self) -> &Type {\n+        let mut result = self;\n+        while let Type::BorrowedRef { type_, .. } = result {\n+            result = &*type_;\n+        }\n+        result\n+    }\n+\n+    /// Check if two types are \"potentially the same.\"\n+    /// This is different from Eq, because it knows that things like\n+    /// `Placeholder` are possible matches for everything.\n+    crate fn is_same(&self, other: &Self, cache: &Cache) -> bool {\n+        match (self, other) {\n+            // Recursive cases.\n+            (Type::Tuple(a), Type::Tuple(b)) => {\n+                a.len() == b.len() && a.iter().zip(b).all(|(a, b)| a.is_same(&b, cache))\n+            }\n+            (Type::Slice(a), Type::Slice(b)) => a.is_same(&b, cache),\n+            (Type::Array(a, al), Type::Array(b, bl)) => al == bl && a.is_same(&b, cache),\n+            (Type::RawPointer(mutability, type_), Type::RawPointer(b_mutability, b_type_)) => {\n+                mutability == b_mutability && type_.is_same(&b_type_, cache)\n+            }\n+            (\n+                Type::BorrowedRef { mutability, type_, .. },\n+                Type::BorrowedRef { mutability: b_mutability, type_: b_type_, .. },\n+            ) => mutability == b_mutability && type_.is_same(&b_type_, cache),\n+            // Placeholders and generics are equal to all other types.\n+            (Type::Infer, _) | (_, Type::Infer) => true,\n+            (Type::Generic(_), _) | (_, Type::Generic(_)) => true,\n+            // Other cases, such as primitives, just use recursion.\n+            (a, b) => a\n+                .def_id(cache)\n+                .and_then(|a| Some((a, b.def_id(cache)?)))\n+                .map(|(a, b)| a == b)\n+                .unwrap_or(false),\n+        }\n+    }\n+\n     crate fn primitive_type(&self) -> Option<PrimitiveType> {\n         match *self {\n             Primitive(p) | BorrowedRef { type_: box Primitive(p), .. } => Some(p),"}, {"sha": "8bf7d0416dd0a2594ab2452cb04e1d82b5b381fb", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/85ba6c7b3489f5b23ca146d6ebde657bf8b52c36/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ba6c7b3489f5b23ca146d6ebde657bf8b52c36/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=85ba6c7b3489f5b23ca146d6ebde657bf8b52c36", "patch": "@@ -1235,10 +1235,17 @@ fn should_render_item(item: &clean::Item, deref_mut_: bool, tcx: TyCtxt<'_>) ->\n fn notable_traits_decl(decl: &clean::FnDecl, cx: &Context<'_>) -> String {\n     let mut out = Buffer::html();\n \n-    if let Some(did) = decl.output.as_return().and_then(|t| t.def_id(cx.cache())) {\n+    if let Some((did, ty)) = decl.output.as_return().and_then(|t| Some((t.def_id(cx.cache())?, t)))\n+    {\n         if let Some(impls) = cx.cache().impls.get(&did) {\n             for i in impls {\n                 let impl_ = i.inner_impl();\n+                if !impl_.for_.without_borrowed_ref().is_same(ty.without_borrowed_ref(), cx.cache())\n+                {\n+                    // Two different types might have the same did,\n+                    // without actually being the same.\n+                    continue;\n+                }\n                 if let Some(trait_) = &impl_.trait_ {\n                     let trait_did = trait_.def_id();\n "}, {"sha": "b0d414027216ac7ca1ad7558479c463272151ea2", "filename": "src/test/rustdoc/doc-notable_trait-slice.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/85ba6c7b3489f5b23ca146d6ebde657bf8b52c36/src%2Ftest%2Frustdoc%2Fdoc-notable_trait-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ba6c7b3489f5b23ca146d6ebde657bf8b52c36/src%2Ftest%2Frustdoc%2Fdoc-notable_trait-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-notable_trait-slice.rs?ref=85ba6c7b3489f5b23ca146d6ebde657bf8b52c36", "patch": "@@ -0,0 +1,20 @@\n+#![feature(doc_notable_trait)]\n+\n+#[doc(notable_trait)]\n+pub trait SomeTrait {}\n+\n+pub struct SomeStruct;\n+pub struct OtherStruct;\n+impl SomeTrait for &[SomeStruct] {}\n+\n+// @has doc_notable_trait_slice/fn.bare_fn_matches.html\n+// @has - '//code[@class=\"content\"]' 'impl SomeTrait for &[SomeStruct]'\n+pub fn bare_fn_matches() -> &'static [SomeStruct] {\n+    &[]\n+}\n+\n+// @has doc_notable_trait_slice/fn.bare_fn_no_matches.html\n+// @!has - '//code[@class=\"content\"]' 'impl SomeTrait for &[SomeStruct]'\n+pub fn bare_fn_no_matches() -> &'static [OtherStruct] {\n+    &[]\n+}"}]}