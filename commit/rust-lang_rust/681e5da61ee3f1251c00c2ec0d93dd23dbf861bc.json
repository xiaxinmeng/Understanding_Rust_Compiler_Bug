{"sha": "681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MWU1ZGE2MWVlM2YxMjUxYzAwYzJlYzBkOTNkZDIzZGJmODYxYmM=", "commit": {"author": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2017-09-08T18:26:54Z"}, "committer": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2017-09-16T15:53:02Z"}, "message": "change #![feature(const_fn)] to specific gates", "tree": {"sha": "a6e75c81f714d9869123ffe5b3c34fbfc05fae61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6e75c81f714d9869123ffe5b3c34fbfc05fae61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "html_url": "https://github.com/rust-lang/rust/commit/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a12d0d4f6672a9621771433d2f05757f1f79130d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a12d0d4f6672a9621771433d2f05757f1f79130d", "html_url": "https://github.com/rust-lang/rust/commit/a12d0d4f6672a9621771433d2f05757f1f79130d"}], "stats": {"total": 202, "additions": 127, "deletions": 75}, "files": [{"sha": "b9c5ff10f87b976670101468f2ed7fac070b6482", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -329,6 +329,7 @@ impl<T> Cell<T> {\n     /// let c = Cell::new(5);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(stage0), rustc_const_unstable(feature = \"const_cell_new\"))]\n     #[inline]\n     pub const fn new(value: T) -> Cell<T> {\n         Cell {\n@@ -543,6 +544,7 @@ impl<T> RefCell<T> {\n     /// let c = RefCell::new(5);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(stage0), rustc_const_unstable(feature = \"const_refcell_new\"))]\n     #[inline]\n     pub const fn new(value: T) -> RefCell<T> {\n         RefCell {\n@@ -1188,6 +1190,7 @@ impl<T> UnsafeCell<T> {\n     /// let uc = UnsafeCell::new(5);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(stage0), rustc_const_unstable(feature = \"const_unsafe_cell_new\"))]\n     #[inline]\n     pub const fn new(value: T) -> UnsafeCell<T> {\n         UnsafeCell { value: value }"}, {"sha": "69612bd2a32a4e838d103ff829bc65c05c6b7ff2", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -85,12 +85,30 @@\n #![feature(prelude_import)]\n #![feature(repr_simd, platform_intrinsics)]\n #![feature(rustc_attrs)]\n+#![cfg_attr(not(stage0), feature(rustc_const_unstable))]\n #![feature(specialization)]\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n \n+#![cfg_attr(not(stage0), feature(const_min_value))]\n+#![cfg_attr(not(stage0), feature(const_max_value))]\n+#![cfg_attr(not(stage0), feature(const_atomic_bool_new))]\n+#![cfg_attr(not(stage0), feature(const_atomic_isize_new))]\n+#![cfg_attr(not(stage0), feature(const_atomic_usize_new))]\n+#![cfg_attr(not(stage0), feature(const_atomic_i8_new))]\n+#![cfg_attr(not(stage0), feature(const_atomic_u8_new))]\n+#![cfg_attr(not(stage0), feature(const_atomic_i16_new))]\n+#![cfg_attr(not(stage0), feature(const_atomic_u16_new))]\n+#![cfg_attr(not(stage0), feature(const_atomic_i32_new))]\n+#![cfg_attr(not(stage0), feature(const_atomic_u32_new))]\n+#![cfg_attr(not(stage0), feature(const_atomic_i64_new))]\n+#![cfg_attr(not(stage0), feature(const_atomic_u64_new))]\n+#![cfg_attr(not(stage0), feature(const_unsafe_cell_new))]\n+#![cfg_attr(not(stage0), feature(const_cell_new))]\n+#![cfg_attr(not(stage0), feature(const_nonzero_new))]\n+\n #[prelude_import]\n #[allow(unused)]\n use prelude::v1::*;"}, {"sha": "7c82b00f2cf3835c20dd264657ca0826825ee6f7", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -189,6 +189,7 @@ pub fn forget<T>(t: T) {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(stage0), rustc_const_unstable(feature = \"const_size_of\"))]\n pub const fn size_of<T>() -> usize {\n     unsafe { intrinsics::size_of::<T>() }\n }\n@@ -280,6 +281,7 @@ pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(stage0), rustc_const_unstable(feature = \"const_align_of\"))]\n pub const fn align_of<T>() -> usize {\n     unsafe { intrinsics::min_align_of::<T>() }\n }"}, {"sha": "f075d825f5d53f81f5f03bf8bf277c5596004fac", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -68,6 +68,10 @@ pub struct NonZero<T: Zeroable>(T);\n impl<T: Zeroable> NonZero<T> {\n     /// Creates an instance of NonZero with the provided value.\n     /// You must indeed ensure that the value is actually \"non-zero\".\n+    #[unstable(feature = \"nonzero\",\n+               reason = \"needs an RFC to flesh out the design\",\n+               issue = \"27730\")]\n+    #[cfg_attr(not(stage0), rustc_const_unstable(feature = \"const_nonzero_new\"))]\n     #[inline]\n     pub const unsafe fn new_unchecked(inner: T) -> Self {\n         NonZero(inner)"}, {"sha": "bf31deae7a62576330f198c04ee8f62cb973a4a7", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -109,6 +109,7 @@ macro_rules! int_impl {\n         /// assert_eq!(i8::min_value(), -128);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[cfg_attr(not(stage0), rustc_const_unstable(feature = \"const_min_value\"))]\n         #[inline]\n         pub const fn min_value() -> Self {\n             !0 ^ ((!0 as $UnsignedT) >> 1) as Self\n@@ -122,6 +123,7 @@ macro_rules! int_impl {\n         /// assert_eq!(i8::max_value(), 127);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[cfg_attr(not(stage0), rustc_const_unstable(feature = \"const_max_value\"))]\n         #[inline]\n         pub const fn max_value() -> Self {\n             !Self::min_value()\n@@ -1280,6 +1282,7 @@ macro_rules! uint_impl {\n         /// assert_eq!(u8::min_value(), 0);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[cfg_attr(not(stage0), rustc_const_unstable(feature = \"const_min_value\"))]\n         #[inline]\n         pub const fn min_value() -> Self { 0 }\n \n@@ -1291,6 +1294,7 @@ macro_rules! uint_impl {\n         /// assert_eq!(u8::max_value(), 255);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[cfg_attr(not(stage0), rustc_const_unstable(feature = \"const_max_value\"))]\n         #[inline]\n         pub const fn max_value() -> Self { !0 }\n "}, {"sha": "20aa881f4bc0d5537147c4ad3180e96dc2463b5e", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -76,6 +76,7 @@ pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(stage0), rustc_const_unstable(feature = \"const_ptr_null\"))]\n pub const fn null<T>() -> *const T { 0 as *const T }\n \n /// Creates a null mutable raw pointer.\n@@ -90,6 +91,7 @@ pub const fn null<T>() -> *const T { 0 as *const T }\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(stage0), rustc_const_unstable(feature = \"const_ptr_null_mut\"))]\n pub const fn null_mut<T>() -> *mut T { 0 as *mut T }\n \n /// Swaps the values at two mutable locations of the same type, without\n@@ -1097,6 +1099,8 @@ impl<T: ?Sized> Unique<T> {\n     /// # Safety\n     ///\n     /// `ptr` must be non-null.\n+    #[unstable(feature = \"unique\", issue = \"27730\")]\n+    #[cfg_attr(not(stage0), rustc_const_unstable(feature = \"const_unique_new\"))]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n         Unique { pointer: NonZero::new_unchecked(ptr), _marker: PhantomData }\n     }\n@@ -1230,6 +1234,8 @@ impl<T: ?Sized> Shared<T> {\n     /// # Safety\n     ///\n     /// `ptr` must be non-null.\n+    #[unstable(feature = \"shared\", issue = \"27730\")]\n+    #[cfg_attr(not(stage0), rustc_const_unstable(feature = \"const_shared_new\"))]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n         Shared { pointer: NonZero::new_unchecked(ptr), _marker: PhantomData }\n     }"}, {"sha": "09f3586a8c99fa96d37881a8540c5304f92eec65", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -241,6 +241,7 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(stage0), rustc_const_unstable(feature = \"const_atomic_bool_new\"))]\n     pub const fn new(v: bool) -> AtomicBool {\n         AtomicBool { v: UnsafeCell::new(v as u8) }\n     }\n@@ -649,6 +650,7 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(stage0), rustc_const_unstable(feature = \"const_atomic_ptr_new\"))]\n     pub const fn new(p: *mut T) -> AtomicPtr<T> {\n         AtomicPtr { p: UnsafeCell::new(p) }\n     }\n@@ -920,7 +922,7 @@ impl<T> AtomicPtr<T> {\n \n #[cfg(target_has_atomic = \"ptr\")]\n macro_rules! atomic_int {\n-    ($stable:meta,\n+    ($stable:meta, $const_unstable:meta,\n      $stable_cxchg:meta,\n      $stable_debug:meta,\n      $stable_access:meta,\n@@ -969,6 +971,7 @@ macro_rules! atomic_int {\n             /// ```\n             #[inline]\n             #[$stable]\n+            #[cfg_attr(not(stage0), $const_unstable)]\n             pub const fn new(v: $int_type) -> Self {\n                 $atomic_type {v: UnsafeCell::new(v)}\n             }\n@@ -1332,6 +1335,7 @@ macro_rules! atomic_int {\n #[cfg(target_has_atomic = \"8\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    rustc_const_unstable(feature = \"const_atomic_i8_new\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n@@ -1340,6 +1344,7 @@ atomic_int! {\n #[cfg(target_has_atomic = \"8\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    rustc_const_unstable(feature = \"const_atomic_u8_new\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n@@ -1348,6 +1353,7 @@ atomic_int! {\n #[cfg(target_has_atomic = \"16\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    rustc_const_unstable(feature = \"const_atomic_i16_new\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n@@ -1356,6 +1362,7 @@ atomic_int! {\n #[cfg(target_has_atomic = \"16\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    rustc_const_unstable(feature = \"const_atomic_u16_new\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n@@ -1364,6 +1371,7 @@ atomic_int! {\n #[cfg(target_has_atomic = \"32\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    rustc_const_unstable(feature = \"const_atomic_i32_new\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n@@ -1372,6 +1380,7 @@ atomic_int! {\n #[cfg(target_has_atomic = \"32\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    rustc_const_unstable(feature = \"const_atomic_u32_new\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n@@ -1380,6 +1389,7 @@ atomic_int! {\n #[cfg(target_has_atomic = \"64\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    rustc_const_unstable(feature = \"const_atomic_i64_new\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n@@ -1388,6 +1398,7 @@ atomic_int! {\n #[cfg(target_has_atomic = \"64\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    rustc_const_unstable(feature = \"const_atomic_u64_new\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n@@ -1396,6 +1407,7 @@ atomic_int! {\n #[cfg(target_has_atomic = \"ptr\")]\n atomic_int!{\n     stable(feature = \"rust1\", since = \"1.0.0\"),\n+    rustc_const_unstable(feature = \"const_atomic_isize_new\"),\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),\n     stable(feature = \"atomic_access\", since = \"1.15.0\"),\n@@ -1404,6 +1416,7 @@ atomic_int!{\n #[cfg(target_has_atomic = \"ptr\")]\n atomic_int!{\n     stable(feature = \"rust1\", since = \"1.0.0\"),\n+    rustc_const_unstable(feature = \"const_atomic_usize_new\"),\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),\n     stable(feature = \"atomic_access\", since = \"1.15.0\"),"}, {"sha": "ce4d14b222cb2ff0a8d9f6534abf393484d3472d", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -11,7 +11,6 @@\n #![deny(warnings)]\n \n #![feature(box_syntax)]\n-#![feature(const_fn)]\n #![feature(core_float)]\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]\n@@ -42,6 +41,10 @@\n #![feature(try_from)]\n #![feature(unique)]\n \n+#![feature(const_atomic_bool_new)]\n+#![feature(const_atomic_usize_new)]\n+#![feature(const_atomic_isize_new)]\n+\n extern crate core;\n extern crate test;\n extern crate rand;"}, {"sha": "df97f2fb8bcd62cfc2eef5923faf83584fce2cd4", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -22,7 +22,6 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(conservative_impl_trait)]\n-#![feature(const_fn)]\n #![feature(core_intrinsics)]\n #![feature(i128_type)]\n #![cfg_attr(windows, feature(libc))]\n@@ -36,6 +35,9 @@\n #![feature(trace_macros)]\n #![feature(test)]\n \n+#![cfg_attr(stage0, feature(const_fn))]\n+#![cfg_attr(not(stage0), feature(const_atomic_bool_new))]\n+\n #![recursion_limit=\"256\"]\n \n extern crate arena;"}, {"sha": "c13141008a42623fae4d1e577dd5e65f41cceb2e", "filename": "src/librustc_apfloat/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibrustc_apfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibrustc_apfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Flib.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -45,11 +45,14 @@\n #![deny(warnings)]\n #![forbid(unsafe_code)]\n \n-#![feature(const_fn)]\n #![feature(i128_type)]\n #![feature(slice_patterns)]\n #![feature(try_from)]\n \n+#![cfg_attr(stage0, feature(const_fn))]\n+#![cfg_attr(not(stage0), feature(const_min_value))]\n+#![cfg_attr(not(stage0), feature(const_max_value))]\n+\n #[macro_use]\n extern crate rustc_bitflags;\n "}, {"sha": "0c3606cab10e1f8a65cbbd6b448e794658c320f4", "filename": "src/librustc_const_eval/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -23,9 +23,11 @@\n #![feature(slice_patterns)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(const_fn)]\n #![feature(i128_type)]\n \n+#![cfg_attr(stage0, feature(const_fn))]\n+#![cfg_attr(not(stage0), feature(const_min_value))]\n+\n extern crate arena;\n #[macro_use] extern crate syntax;\n #[macro_use] extern crate log;"}, {"sha": "0533f10104a5a8b588204dd3b9b48641cf9e480a", "filename": "src/librustc_const_math/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibrustc_const_math%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibrustc_const_math%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Flib.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -19,10 +19,13 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![deny(warnings)]\n \n-#![feature(const_fn)]\n #![feature(i128)]\n #![feature(i128_type)]\n \n+#![cfg_attr(stage0, feature(const_fn))]\n+#![cfg_attr(not(stage0), feature(const_min_value))]\n+#![cfg_attr(not(stage0), feature(const_max_value))]\n+\n extern crate rustc_apfloat;\n \n extern crate syntax;"}, {"sha": "26436d54ac88647b2697c50df164f337760ffb7b", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -384,7 +384,7 @@ static B: &'static AtomicUsize = &A; // ok!\n You can also have this error while using a cell type:\n \n ```compile_fail,E0492\n-#![feature(const_fn)]\n+#![feature(const_cell_new)]\n \n use std::cell::Cell;\n \n@@ -412,7 +412,7 @@ However, if you still wish to use these types, you can achieve this by an unsafe\n wrapper:\n \n ```\n-#![feature(const_fn)]\n+#![feature(const_cell_new)]\n \n use std::cell::Cell;\n use std::marker::Sync;"}, {"sha": "256200a6e9572f1d10144f1dadbedafe07f6b4c5", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -21,7 +21,6 @@\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(const_fn)]\n #![feature(custom_attribute)]\n #![allow(unused_attributes)]\n #![feature(i128_type)]\n@@ -31,6 +30,10 @@\n #![feature(slice_patterns)]\n #![feature(conservative_impl_trait)]\n \n+#![cfg_attr(stage0, feature(const_fn))]\n+#![cfg_attr(not(stage0), feature(const_atomic_bool_new))]\n+#![cfg_attr(not(stage0), feature(const_once_new))]\n+\n use rustc::dep_graph::WorkProduct;\n use syntax_pos::symbol::Symbol;\n "}, {"sha": "5e8abe59ad9a474c801d49b600704974a7311a98", "filename": "src/librustc_trans_utils/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibrustc_trans_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibrustc_trans_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flib.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -19,7 +19,6 @@\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(const_fn)]\n #![feature(custom_attribute)]\n #![allow(unused_attributes)]\n #![feature(i128_type)]\n@@ -28,6 +27,8 @@\n #![feature(slice_patterns)]\n #![feature(conservative_impl_trait)]\n \n+#![cfg_attr(stage0, feature(const_fn))]\n+\n extern crate rustc;\n extern crate syntax;\n extern crate syntax_pos;"}, {"sha": "aa1337a9da050f9a6117bbe6b0ea2c51bf7b2055", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -292,6 +292,7 @@\n #![feature(raw)]\n #![feature(repr_simd)]\n #![feature(rustc_attrs)]\n+#![cfg_attr(not(stage0), feature(rustc_const_unstable))]\n #![feature(shared)]\n #![feature(sip_hash_13)]\n #![feature(slice_bytes)]\n@@ -315,6 +316,17 @@\n #![feature(doc_cfg)]\n #![cfg_attr(test, feature(update_panic_count))]\n \n+#![cfg_attr(not(stage0), feature(const_max_value))]\n+#![cfg_attr(not(stage0), feature(const_atomic_bool_new))]\n+#![cfg_attr(not(stage0), feature(const_atomic_isize_new))]\n+#![cfg_attr(not(stage0), feature(const_atomic_usize_new))]\n+#![cfg_attr(all(not(stage0), windows), feature(const_atomic_ptr_new))]\n+#![cfg_attr(not(stage0), feature(const_unsafe_cell_new))]\n+#![cfg_attr(not(stage0), feature(const_cell_new))]\n+#![cfg_attr(not(stage0), feature(const_once_new))]\n+#![cfg_attr(not(stage0), feature(const_ptr_null))]\n+#![cfg_attr(not(stage0), feature(const_ptr_null_mut))]\n+\n #![default_lib_allocator]\n \n // Always use alloc_system during stage0 since we don't know if the alloc_*"}, {"sha": "015106fc2e598f637a72a341f1e39aaa70c094fc", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -156,6 +156,7 @@ struct Finish {\n impl Once {\n     /// Creates a new `Once` value.\n     #[stable(feature = \"once_new\", since = \"1.2.0\")]\n+    #[cfg_attr(not(stage0), rustc_const_unstable(feature = \"const_once_new\"))]\n     pub const fn new() -> Once {\n         Once {\n             state: AtomicUsize::new(INCOMPLETE),"}, {"sha": "fa85432fb8e3f571a27f98f4169cf043429c0fc5", "filename": "src/test/compile-fail-fulldeps/dropck_tarena_cycle_checked.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_cycle_checked.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -16,7 +16,8 @@\n //  which is a reduction of this code to more directly show the reason\n //  for the error message we see here.)\n \n-#![feature(const_fn, rustc_private)]\n+#![feature(rustc_private)]\n+#![feature(const_atomic_usize_new)]\n \n extern crate arena;\n "}, {"sha": "18476494300b21febeca61fd40a4b3bf37af454e", "filename": "src/test/compile-fail/const-call.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Fcompile-fail%2Fconst-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Fcompile-fail%2Fconst-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-call.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_fn)]\n-\n fn f(x: usize) -> usize {\n     x\n }"}, {"sha": "c0f0e3650d9fbaf136d4816ed818a40de2c8e886", "filename": "src/test/compile-fail/dropck_trait_cycle_checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Fcompile-fail%2Fdropck_trait_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Fcompile-fail%2Fdropck_trait_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdropck_trait_cycle_checked.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -13,7 +13,7 @@\n //\n // (Compare against compile-fail/dropck_vec_cycle_checked.rs)\n \n-#![feature(const_fn)]\n+#![feature(const_atomic_usize_new)]\n \n use std::cell::Cell;\n use id::Id;"}, {"sha": "3f41401eb69c12275b58d7968e2526f8bc0204d7", "filename": "src/test/compile-fail/functional-struct-update-respects-privacy.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-respects-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-respects-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-respects-privacy.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -10,8 +10,6 @@\n \n // RFC 736 (and Issue 21407): functional struct update should respect privacy.\n \n-#![feature(const_fn)]\n-\n // The `foo` module attempts to maintains an invariant that each `S`\n // has a unique `u64` id.\n use self::foo::S;"}, {"sha": "1464fcd9a1cd92b0235db76ef57651e1b7c603ac", "filename": "src/test/compile-fail/issue-17718-const-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-borrow.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_fn)]\n+#![feature(const_unsafe_cell_new)]\n \n use std::cell::UnsafeCell;\n "}, {"sha": "1bf165c89d329dfd73aeb4ede06b69ec5c957204", "filename": "src/test/compile-fail/issue-43733-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_fn)]\n+#![feature(const_fn, const_cell_new, const_unsafe_cell_new)]\n #![feature(cfg_target_thread_local, thread_local_internals)]\n \n // On platforms *without* `#[thread_local]`, use"}, {"sha": "ef53be757800565b2fb1a07bfed7a3687b7ad75c", "filename": "src/test/compile-fail/issue-7364.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -8,15 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n-#![feature(const_fn)]\n-#![allow(warnings)]\n+#![feature(box_syntax, const_refcell_new)]\n \n use std::cell::RefCell;\n \n // Regression test for issue 7364\n static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n //~^ ERROR allocations are not allowed in statics\n //~| ERROR `std::cell::RefCell<isize>: std::marker::Sync` is not satisfied\n+//~| WARN unsupported constant expr\n \n fn main() { }"}, {"sha": "7a24510b7d409cff2fcee302de0ce3049fd0c895", "filename": "src/test/debuginfo/constant-debug-locs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -15,7 +15,7 @@\n #![allow(dead_code, unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n-#![feature(const_fn)]\n+#![feature(const_unsafe_cell_new)]\n #![feature(static_mutex)]\n \n // This test makes sure that the compiler doesn't crash when trying to assign"}, {"sha": "439c1080f47311ca1d06e65cb484a487ea022bc4", "filename": "src/test/run-pass-valgrind/cast-enum-with-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -11,7 +11,7 @@\n // no-prefer-dynamic\n \n #![allow(dead_code)]\n-#![feature(const_fn)]\n+#![feature(const_atomic_usize_new)]\n \n // check dtor calling order when casting enums.\n "}, {"sha": "7cde780cc54ba928a42154c0fe0507f1be25f525", "filename": "src/test/run-pass/associated-types-project-from-type-param-via-bound-in-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -12,7 +12,7 @@\n // `Item` originates in a where-clause, not the declaration of\n // `T`. Issue #20300.\n \n-#![feature(const_fn)]\n+#![feature(const_atomic_usize_new)]\n \n use std::marker::{PhantomData};\n use std::sync::atomic::{AtomicUsize};"}, {"sha": "be06e8dd5700b19e383e01ec50c36204e4b449b7", "filename": "src/test/run-pass/auxiliary/const_fn_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fauxiliary%2Fconst_fn_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fauxiliary%2Fconst_fn_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fconst_fn_lib.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -13,4 +13,4 @@\n #![crate_type=\"rlib\"]\n #![feature(const_fn)]\n \n-pub const fn foo() -> usize { 22 } //~ ERROR const fn is unstable\n+pub const fn foo() -> usize { 22 }"}, {"sha": "36891a1ecadb87362408b17b3a3cbe2634e6ea0c", "filename": "src/test/run-pass/auxiliary/issue-17718-aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-17718-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-17718-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-17718-aux.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_fn)]\n+#![feature(const_atomic_usize_new)]\n \n use std::sync::atomic;\n "}, {"sha": "bce87ef5a2668ddf89da2984b65c81d464feec3a", "filename": "src/test/run-pass/auxiliary/thread-local-extern-static.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fauxiliary%2Fthread-local-extern-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fauxiliary%2Fthread-local-extern-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fthread-local-extern-static.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(cfg_target_thread_local, const_fn, thread_local)]\n+#![feature(const_cell_new)]\n #![crate_type = \"lib\"]\n \n #[cfg(target_thread_local)]"}, {"sha": "47b44863a74758227aea9eb1417e0327367b16dc", "filename": "src/test/run-pass/box-of-array-of-drop-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-1.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -13,7 +13,7 @@\n \n // ignore-emscripten no threads support\n \n-#![feature(const_fn)]\n+#![feature(const_atomic_usize_new)]\n \n use std::thread;\n use std::sync::atomic::{AtomicUsize, Ordering};"}, {"sha": "54be4955baf5bddb11400ac471bcccaf3c80267d", "filename": "src/test/run-pass/box-of-array-of-drop-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-2.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -13,7 +13,7 @@\n \n // ignore-emscripten no threads support\n \n-#![feature(const_fn)]\n+#![feature(const_atomic_usize_new)]\n \n use std::thread;\n use std::sync::atomic::{AtomicUsize, Ordering};"}, {"sha": "7b4b751fd7f255d62f3fbcade5319592bb2a062d", "filename": "src/test/run-pass/const-fn-cross-crate.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a12d0d4f6672a9621771433d2f05757f1f79130d/src%2Ftest%2Frun-pass%2Fconst-fn-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d0d4f6672a9621771433d2f05757f1f79130d/src%2Ftest%2Frun-pass%2Fconst-fn-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-cross-crate.rs?ref=a12d0d4f6672a9621771433d2f05757f1f79130d", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:const_fn_lib.rs\n-\n-// A very basic test of const fn functionality.\n-\n-#![feature(const_fn)]\n-\n-extern crate const_fn_lib;\n-\n-use const_fn_lib::foo;\n-\n-const FOO: usize = foo();\n-\n-fn main() {\n-    assert_eq!(FOO, 22);\n-    let _: [i32; foo()] = [42; 22];\n-}"}, {"sha": "c5f97d55c06605f629189738a9ec7b1a5455e538", "filename": "src/test/run-pass/const-fn-stability-calls.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fconst-fn-stability-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fconst-fn-stability-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-stability-calls.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -16,8 +16,8 @@ extern crate const_fn_lib;\n \n use const_fn_lib::foo;\n \n-static FOO: usize = foo(); //~ ERROR const fns are an unstable feature\n-const BAR: usize = foo(); //~ ERROR const fns are an unstable feature\n+static FOO: usize = foo();\n+const BAR: usize = foo();\n \n macro_rules! constant {\n     ($n:ident: $t:ty = $v:expr) => {\n@@ -26,9 +26,9 @@ macro_rules! constant {\n }\n \n constant! {\n-    BAZ: usize = foo() //~ ERROR const fns are an unstable feature\n+    BAZ: usize = foo()\n }\n \n fn main() {\n-//    let x: [usize; foo()] = [];\n+    let x: [usize; foo()] = [42; foo()];\n }", "previous_filename": "src/test/compile-fail/const-fn-stability-calls.rs"}, {"sha": "d5547ea5add0016aa9930b1e5491384c7d8267f8", "filename": "src/test/run-pass/const-size_of-align_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fconst-size_of-align_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fconst-size_of-align_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-size_of-align_of.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_fn)]\n+#![feature(const_fn, const_size_of, const_align_of)]\n \n use std::mem;\n "}, {"sha": "66f70cdaeb08b65138e1d41872f1dbec2d40005b", "filename": "src/test/run-pass/issue-17718-static-unsafe-interior.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -11,8 +11,7 @@\n // pretty-expanded FIXME #23616\n \n #![feature(core)]\n-#![feature(const_fn)]\n-\n+#![feature(const_unsafe_cell_new)]\n \n use std::marker;\n use std::cell::UnsafeCell;"}, {"sha": "1b8fbc1ad2f5c5f6b0df46c75a708e8417a43061", "filename": "src/test/run-pass/issue-17718.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fissue-17718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fissue-17718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17718.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -12,7 +12,7 @@\n \n \n #![feature(core)]\n-#![feature(const_fn)]\n+#![feature(const_atomic_usize_new)]\n \n extern crate issue_17718_aux as other;\n "}, {"sha": "23d06c4324da6ac065cb239c71e5cef932670aa8", "filename": "src/test/run-pass/issue-21486.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fissue-21486.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fissue-21486.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21486.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -12,7 +12,7 @@\n // created via FRU and control-flow breaks in the middle of\n // construction.\n \n-#![feature(const_fn)]\n+#![feature(const_atomic_usize_new)]\n \n use std::sync::atomic::{Ordering, AtomicUsize};\n "}, {"sha": "3e252b8629e12af728be3563f1498be2797a6cdd", "filename": "src/test/run-pass/issue-26655.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fissue-26655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fissue-26655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-26655.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -10,10 +10,10 @@\n \n // ignore-emscripten no threads support\n \n-#![feature(const_fn)]\n-\n // Check that the destructors of simple enums are run on unwinding\n \n+#![feature(const_atomic_usize_new)]\n+\n use std::sync::atomic::{Ordering, AtomicUsize};\n use std::thread;\n "}, {"sha": "dab42e48e164522ce6a4ff686869ee123614e0a3", "filename": "src/test/run-pass/issue-27997.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fissue-27997.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fissue-27997.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-27997.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_fn)]\n+#![feature(const_atomic_usize_new)]\n \n use std::sync::atomic::{Ordering, AtomicUsize};\n "}, {"sha": "9141b5f29ceb9000608083d60330b78c6bdf20a6", "filename": "src/test/run-pass/nested-vec-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fnested-vec-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fnested-vec-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-vec-3.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -14,7 +14,7 @@\n // the contents implement Drop and we hit a panic in the middle of\n // construction.\n \n-#![feature(const_fn)]\n+#![feature(const_atomic_usize_new)]\n \n use std::thread;\n use std::sync::atomic::{AtomicUsize, Ordering};"}, {"sha": "c5dc8ccd2eeaf9a3c6207e52f2cc4a3a6fc97a03", "filename": "src/test/run-pass/panic-handler-chain.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fpanic-handler-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fpanic-handler-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-handler-chain.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -10,7 +10,8 @@\n \n // ignore-emscripten no threads support\n \n-#![feature(panic_handler, const_fn, std_panic)]\n+#![feature(panic_handler, std_panic)]\n+#![feature(const_atomic_usize_new)]\n \n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::panic;"}, {"sha": "8bf2683cd9feb0a3fc119db2012d8c8e57849f9a", "filename": "src/test/run-pass/panic-handler-set-twice.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fpanic-handler-set-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fpanic-handler-set-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-handler-set-twice.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -7,7 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(panic_handler, const_fn, std_panic)]\n+#![feature(panic_handler, std_panic)]\n+#![feature(const_atomic_usize_new)]\n \n // ignore-emscripten no threads support\n "}, {"sha": "cf93133d205939c5b28aa835bc56fc50488616fc", "filename": "src/test/run-pass/struct-order-of-eval-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-3.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -11,7 +11,7 @@\n // Checks that functional-record-update order-of-eval is as expected\n // even when no Drop-implementations are involved.\n \n-#![feature(const_fn)]\n+#![feature(const_atomic_usize_new)]\n \n use std::sync::atomic::{Ordering, AtomicUsize};\n "}, {"sha": "d442923478f1faed7243a3bb56de8ce3970bbdd2", "filename": "src/test/run-pass/struct-order-of-eval-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-4.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -11,7 +11,7 @@\n // Checks that struct-literal expression order-of-eval is as expected\n // even when no Drop-implementations are involved.\n \n-#![feature(const_fn)]\n+#![feature(const_atomic_usize_new)]\n \n use std::sync::atomic::{Ordering, AtomicUsize};\n "}, {"sha": "c6a1859de30b8c9df6e1f4f12c3007ef437c6e00", "filename": "src/test/run-pass/vector-sort-panic-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -10,9 +10,9 @@\n \n // ignore-emscripten no threads support\n \n-#![feature(const_fn)]\n #![feature(rand)]\n #![feature(sort_unstable)]\n+#![feature(const_atomic_usize_new)]\n \n use std::__rand::{thread_rng, Rng};\n use std::cell::Cell;"}, {"sha": "995a198271c11f10b6e983b6501d010edc4f7467", "filename": "src/test/ui/span/dropck_arr_cycle_checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -13,7 +13,7 @@\n //\n // (Compare against compile-fail/dropck_vec_cycle_checked.rs)\n \n-#![feature(const_fn)]\n+#![feature(const_atomic_usize_new)]\n \n use std::cell::Cell;\n use id::Id;"}, {"sha": "5bcaa71f73c294f56ccff246999026988d1d0fa2", "filename": "src/test/ui/span/dropck_vec_cycle_checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -12,7 +12,7 @@\n //\n // (Compare against compile-fail/dropck_arr_cycle_checked.rs)\n \n-#![feature(const_fn)]\n+#![feature(const_atomic_usize_new)]\n \n use std::cell::Cell;\n use id::Id;"}, {"sha": "d99f3bb19dbad6bba56befb803c0654221f675bc", "filename": "src/test/ui/span/vec-must-not-hide-type-from-dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5da61ee3f1251c00c2ec0d93dd23dbf861bc/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.rs?ref=681e5da61ee3f1251c00c2ec0d93dd23dbf861bc", "patch": "@@ -23,7 +23,7 @@\n // conditions above to be satisfied, meaning that if the dropck is\n // sound, it should reject this code.\n \n-#![feature(const_fn)]\n+#![feature(const_atomic_usize_new)]\n \n use std::cell::Cell;\n use id::Id;"}]}