{"sha": "220d285b4afb250e59a08e9b1ad38c2fc2275782", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMGQyODViNGFmYjI1MGU1OWEwOGU5YjFhZDM4YzJmYzIyNzU3ODI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-25T08:44:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-25T08:44:58Z"}, "message": "rename ParsedFile -> File", "tree": {"sha": "ab32fc8d58ee04fc5afae20bc80f02c6b2557a39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab32fc8d58ee04fc5afae20bc80f02c6b2557a39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/220d285b4afb250e59a08e9b1ad38c2fc2275782", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/220d285b4afb250e59a08e9b1ad38c2fc2275782", "html_url": "https://github.com/rust-lang/rust/commit/220d285b4afb250e59a08e9b1ad38c2fc2275782", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/220d285b4afb250e59a08e9b1ad38c2fc2275782/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf278ed3bf71d336422f7d7d7d51be92b717b720", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf278ed3bf71d336422f7d7d7d51be92b717b720", "html_url": "https://github.com/rust-lang/rust/commit/cf278ed3bf71d336422f7d7d7d51be92b717b720"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "fc28691fc9789bd1b207af09771fefee219f7911", "filename": "crates/cli/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/220d285b4afb250e59a08e9b1ad38c2fc2275782/crates%2Fcli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/220d285b4afb250e59a08e9b1ad38c2fc2275782/crates%2Fcli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcli%2Fsrc%2Fmain.rs?ref=220d285b4afb250e59a08e9b1ad38c2fc2275782", "patch": "@@ -10,7 +10,7 @@ use std::{\n };\n use clap::{App, Arg, SubCommand};\n use tools::collect_tests;\n-use libeditor::{ParsedFile, syntax_tree, file_structure};\n+use libeditor::{File, syntax_tree, file_structure};\n \n type Result<T> = ::std::result::Result<T, failure::Error>;\n \n@@ -68,7 +68,7 @@ fn main() -> Result<()> {\n     Ok(())\n }\n \n-fn file() -> Result<ParsedFile> {\n+fn file() -> Result<File> {\n     let text = read_stdin()?;\n     Ok(libeditor::parse(&text))\n }"}, {"sha": "c84ab6077d1b6936ca644faceb8c0f040d18f936", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/220d285b4afb250e59a08e9b1ad38c2fc2275782/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/220d285b4afb250e59a08e9b1ad38c2fc2275782/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=220d285b4afb250e59a08e9b1ad38c2fc2275782", "patch": "@@ -27,7 +27,7 @@ use std::{\n };\n \n use libsyntax2::{\n-    ParsedFile,\n+    File,\n     TextUnit, TextRange, SmolStr,\n     ast::{self, AstNode, NameOwner},\n     SyntaxKind::*,\n@@ -132,7 +132,7 @@ impl WorldState {\n \n \n impl World {\n-    pub fn file_syntax(&self, file_id: FileId) -> Result<ParsedFile> {\n+    pub fn file_syntax(&self, file_id: FileId) -> Result<File> {\n         let data = self.file_data(file_id)?;\n         Ok(data.syntax().clone())\n     }\n@@ -265,7 +265,7 @@ struct WorldData {\n struct FileData {\n     text: String,\n     symbols: OnceCell<FileSymbols>,\n-    syntax: OnceCell<ParsedFile>,\n+    syntax: OnceCell<File>,\n     lines: OnceCell<LineIndex>,\n }\n \n@@ -279,14 +279,14 @@ impl FileData {\n         }\n     }\n \n-    fn syntax(&self) -> &ParsedFile {\n+    fn syntax(&self) -> &File {\n         self.syntax\n-            .get_or_init(|| ParsedFile::parse(&self.text))\n+            .get_or_init(|| File::parse(&self.text))\n     }\n \n-    fn syntax_transient(&self) -> ParsedFile {\n+    fn syntax_transient(&self) -> File {\n         self.syntax.get().map(|s| s.clone())\n-            .unwrap_or_else(|| ParsedFile::parse(&self.text))\n+            .unwrap_or_else(|| File::parse(&self.text))\n     }\n \n     fn symbols(&self) -> &FileSymbols {"}, {"sha": "6a9104d84e712a3afd5c1bdc9b89455a04e2e3dd", "filename": "crates/libanalysis/src/module_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/220d285b4afb250e59a08e9b1ad38c2fc2275782/crates%2Flibanalysis%2Fsrc%2Fmodule_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/220d285b4afb250e59a08e9b1ad38c2fc2275782/crates%2Flibanalysis%2Fsrc%2Fmodule_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fmodule_map.rs?ref=220d285b4afb250e59a08e9b1ad38c2fc2275782", "patch": "@@ -4,13 +4,13 @@ use std::{\n \n use parking_lot::{RwLock, RwLockReadGuard, RwLockWriteGuard};\n use libsyntax2::{\n-    ParsedFile,\n+    File,\n     ast::{self, AstNode, NameOwner},\n     SyntaxNode, SmolStr,\n };\n use {FileId, FileResolver};\n \n-type SyntaxProvider<'a> = dyn Fn(FileId) -> ParsedFile + 'a;\n+type SyntaxProvider<'a> = dyn Fn(FileId) -> File + 'a;\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n pub struct ModuleId(FileId);"}, {"sha": "73cbf5702f8b9a974ed15b0f86555bfec0e663f2", "filename": "crates/libanalysis/src/symbol_index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/220d285b4afb250e59a08e9b1ad38c2fc2275782/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/220d285b4afb250e59a08e9b1ad38c2fc2275782/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs?ref=220d285b4afb250e59a08e9b1ad38c2fc2275782", "patch": "@@ -1,6 +1,6 @@\n use libeditor::{FileSymbol, file_symbols};\n use libsyntax2::{\n-    ParsedFile,\n+    File,\n     SyntaxKind::{self, *},\n };\n use fst::{self, IntoStreamer, Streamer};\n@@ -12,7 +12,7 @@ pub(crate) struct FileSymbols {\n }\n \n impl FileSymbols {\n-    pub(crate) fn new(file: &ParsedFile) -> FileSymbols {\n+    pub(crate) fn new(file: &File) -> FileSymbols {\n         let mut symbols = file_symbols(file)\n             .into_iter()\n             .map(|s| (s.name.as_str().to_lowercase(), s))"}, {"sha": "b3305be2ae5f4e1493447683e27ea68cb075f635", "filename": "crates/libeditor/src/code_actions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/220d285b4afb250e59a08e9b1ad38c2fc2275782/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/220d285b4afb250e59a08e9b1ad38c2fc2275782/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs?ref=220d285b4afb250e59a08e9b1ad38c2fc2275782", "patch": "@@ -3,7 +3,7 @@ use std::{\n };\n \n use libsyntax2::{\n-    ParsedFile,\n+    File,\n     ast::{self, AstNode, AttrsOwner, TypeParamsOwner, NameOwner},\n     SyntaxKind::COMMA,\n     SyntaxNodeRef,\n@@ -21,7 +21,7 @@ pub struct ActionResult {\n     pub cursor_position: Option<TextUnit>,\n }\n \n-pub fn flip_comma<'a>(file: &'a ParsedFile, offset: TextUnit) -> Option<impl FnOnce() -> ActionResult + 'a> {\n+pub fn flip_comma<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce() -> ActionResult + 'a> {\n     let syntax = file.syntax();\n \n     let comma = find_leaf_at_offset(syntax, offset).find(|leaf| leaf.kind() == COMMA)?;\n@@ -38,7 +38,7 @@ pub fn flip_comma<'a>(file: &'a ParsedFile, offset: TextUnit) -> Option<impl FnO\n     })\n }\n \n-pub fn add_derive<'a>(file: &'a ParsedFile, offset: TextUnit) -> Option<impl FnOnce() -> ActionResult + 'a> {\n+pub fn add_derive<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce() -> ActionResult + 'a> {\n     let nominal = find_node::<ast::NominalDef>(file.syntax(), offset)?;\n     Some(move || {\n         let derive_attr = nominal\n@@ -65,7 +65,7 @@ pub fn add_derive<'a>(file: &'a ParsedFile, offset: TextUnit) -> Option<impl FnO\n     })\n }\n \n-pub fn add_impl<'a>(file: &'a ParsedFile, offset: TextUnit) -> Option<impl FnOnce() -> ActionResult + 'a> {\n+pub fn add_impl<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce() -> ActionResult + 'a> {\n     let nominal = find_node::<ast::NominalDef>(file.syntax(), offset)?;\n     let name = nominal.name()?;\n "}, {"sha": "d1724b52841ca74a46bb0d030b2c4218dadb0a03", "filename": "crates/libeditor/src/extend_selection.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/220d285b4afb250e59a08e9b1ad38c2fc2275782/crates%2Flibeditor%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/220d285b4afb250e59a08e9b1ad38c2fc2275782/crates%2Flibeditor%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fextend_selection.rs?ref=220d285b4afb250e59a08e9b1ad38c2fc2275782", "patch": "@@ -1,10 +1,10 @@\n use libsyntax2::{\n-    ParsedFile, TextRange, SyntaxNodeRef,\n+    File, TextRange, SyntaxNodeRef,\n     SyntaxKind::WHITESPACE,\n     algo::{find_leaf_at_offset, find_covering_node, ancestors},\n };\n \n-pub fn extend_selection(file: &ParsedFile, range: TextRange) -> Option<TextRange> {\n+pub fn extend_selection(file: &File, range: TextRange) -> Option<TextRange> {\n     let syntax = file.syntax();\n     extend(syntax.borrowed(), range)\n }"}, {"sha": "a6e6deba7dd1fa6ff8b22b5728f59cbcc2771bc0", "filename": "crates/libeditor/src/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/220d285b4afb250e59a08e9b1ad38c2fc2275782/crates%2Flibeditor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/220d285b4afb250e59a08e9b1ad38c2fc2275782/crates%2Flibeditor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Flib.rs?ref=220d285b4afb250e59a08e9b1ad38c2fc2275782", "patch": "@@ -14,7 +14,7 @@ use libsyntax2::{\n     algo::{walk, find_leaf_at_offset},\n     SyntaxKind::{self, *},\n };\n-pub use libsyntax2::{ParsedFile, TextRange, TextUnit};\n+pub use libsyntax2::{File, TextRange, TextUnit};\n pub use self::{\n     line_index::{LineIndex, LineCol},\n     extend_selection::extend_selection,\n@@ -51,11 +51,11 @@ pub enum RunnableKind {\n     Bin,\n }\n \n-pub fn parse(text: &str) -> ParsedFile {\n-    ParsedFile::parse(text)\n+pub fn parse(text: &str) -> File {\n+    File::parse(text)\n }\n \n-pub fn matching_brace(file: &ParsedFile, offset: TextUnit) -> Option<TextUnit> {\n+pub fn matching_brace(file: &File, offset: TextUnit) -> Option<TextUnit> {\n     const BRACES: &[SyntaxKind] = &[\n         L_CURLY, R_CURLY,\n         L_BRACK, R_BRACK,\n@@ -75,7 +75,7 @@ pub fn matching_brace(file: &ParsedFile, offset: TextUnit) -> Option<TextUnit> {\n     Some(matching_node.range().start())\n }\n \n-pub fn highlight(file: &ParsedFile) -> Vec<HighlightedRange> {\n+pub fn highlight(file: &File) -> Vec<HighlightedRange> {\n     let mut res = Vec::new();\n     for node in walk::preorder(file.syntax()) {\n         let tag = match node.kind() {\n@@ -98,7 +98,7 @@ pub fn highlight(file: &ParsedFile) -> Vec<HighlightedRange> {\n     res\n }\n \n-pub fn diagnostics(file: &ParsedFile) -> Vec<Diagnostic> {\n+pub fn diagnostics(file: &File) -> Vec<Diagnostic> {\n     let mut res = Vec::new();\n \n     for node in walk::preorder(file.syntax()) {\n@@ -116,11 +116,11 @@ pub fn diagnostics(file: &ParsedFile) -> Vec<Diagnostic> {\n     res\n }\n \n-pub fn syntax_tree(file: &ParsedFile) -> String {\n+pub fn syntax_tree(file: &File) -> String {\n     ::libsyntax2::utils::dump_tree(file.syntax())\n }\n \n-pub fn runnables(file: &ParsedFile) -> Vec<Runnable> {\n+pub fn runnables(file: &File) -> Vec<Runnable> {\n     file.ast()\n         .functions()\n         .filter_map(|f| {"}, {"sha": "98a35dcdf8d2abaee2312575323ef69578665f68", "filename": "crates/libeditor/src/symbols.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/220d285b4afb250e59a08e9b1ad38c2fc2275782/crates%2Flibeditor%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/220d285b4afb250e59a08e9b1ad38c2fc2275782/crates%2Flibeditor%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fsymbols.rs?ref=220d285b4afb250e59a08e9b1ad38c2fc2275782", "patch": "@@ -1,5 +1,5 @@\n use libsyntax2::{\n-    SyntaxKind, SyntaxNodeRef, AstNode, ParsedFile, SmolStr,\n+    SyntaxKind, SyntaxNodeRef, AstNode, File, SmolStr,\n     ast::{self, NameOwner},\n     algo::{\n         visit::{visitor, Visitor},\n@@ -24,7 +24,7 @@ pub struct FileSymbol {\n     pub kind: SyntaxKind,\n }\n \n-pub fn file_symbols(file: &ParsedFile) -> Vec<FileSymbol> {\n+pub fn file_symbols(file: &File) -> Vec<FileSymbol> {\n     preorder(file.syntax())\n         .filter_map(to_symbol)\n         .collect()\n@@ -52,7 +52,7 @@ fn to_symbol(node: SyntaxNodeRef) -> Option<FileSymbol> {\n }\n \n \n-pub fn file_structure(file: &ParsedFile) -> Vec<StructureNode> {\n+pub fn file_structure(file: &File) -> Vec<StructureNode> {\n     let mut res = Vec::new();\n     let mut stack = Vec::new();\n "}, {"sha": "e7eba671f00bdd1c6724ff8f6171fc53691b4eb7", "filename": "crates/libeditor/src/typing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/220d285b4afb250e59a08e9b1ad38c2fc2275782/crates%2Flibeditor%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/220d285b4afb250e59a08e9b1ad38c2fc2275782/crates%2Flibeditor%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Ftyping.rs?ref=220d285b4afb250e59a08e9b1ad38c2fc2275782", "patch": "@@ -1,5 +1,5 @@\n use libsyntax2::{\n-    TextUnit, TextRange, SyntaxNodeRef, ParsedFile,\n+    TextUnit, TextRange, SyntaxNodeRef, File,\n     algo::{\n         walk::preorder,\n         find_covering_node,\n@@ -10,7 +10,7 @@ use libsyntax2::{\n \n use {ActionResult, EditBuilder};\n \n-pub fn join_lines(file: &ParsedFile, range: TextRange) -> ActionResult {\n+pub fn join_lines(file: &File, range: TextRange) -> ActionResult {\n     let range = if range.is_empty() {\n         let text = file.syntax().text();\n         let text = &text[TextRange::from_to(range.start(), TextUnit::of_str(&text))];"}, {"sha": "3114a128e8181864c23ca7432c3a25b0de0fde9b", "filename": "crates/libeditor/tests/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/220d285b4afb250e59a08e9b1ad38c2fc2275782/crates%2Flibeditor%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/220d285b4afb250e59a08e9b1ad38c2fc2275782/crates%2Flibeditor%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Ftests%2Ftest.rs?ref=220d285b4afb250e59a08e9b1ad38c2fc2275782", "patch": "@@ -5,7 +5,7 @@ extern crate assert_eq_text;\n \n use assert_eq_text::{assert_eq_dbg};\n use libeditor::{\n-    ParsedFile, TextUnit, TextRange, ActionResult,\n+    File, TextUnit, TextRange, ActionResult,\n     highlight, runnables, extend_selection, file_structure,\n     flip_comma, add_derive, add_impl, matching_brace,\n     join_lines,\n@@ -234,11 +234,11 @@ struct Foo { f: u32 }\n \");\n }\n \n-fn file(text: &str) -> ParsedFile {\n-    ParsedFile::parse(text)\n+fn file(text: &str) -> File {\n+    File::parse(text)\n }\n \n-fn check_action<F: Fn(&ParsedFile, TextUnit) -> Option<ActionResult>>(\n+fn check_action<F: Fn(&File, TextUnit) -> Option<ActionResult>>(\n     before: &str,\n     after: &str,\n     f: F,"}, {"sha": "ab4a4043540b6d9447d134d540b5dc956a353510", "filename": "crates/libsyntax2/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/220d285b4afb250e59a08e9b1ad38c2fc2275782/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/220d285b4afb250e59a08e9b1ad38c2fc2275782/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Flib.rs?ref=220d285b4afb250e59a08e9b1ad38c2fc2275782", "patch": "@@ -51,14 +51,14 @@ pub use {\n };\n \n #[derive(Clone, Debug)]\n-pub struct ParsedFile {\n+pub struct File {\n     root: SyntaxNode\n }\n \n-impl ParsedFile {\n+impl File {\n     pub fn parse(text: &str) -> Self {\n         let root = ::parse(text);\n-        ParsedFile { root }\n+        File { root }\n     }\n     pub fn ast(&self) -> ast::Root {\n         ast::Root::cast(self.syntax()).unwrap()"}]}