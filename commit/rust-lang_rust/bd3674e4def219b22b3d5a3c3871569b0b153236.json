{"sha": "bd3674e4def219b22b3d5a3c3871569b0b153236", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMzY3NGU0ZGVmMjE5YjIyYjNkNWEzYzM4NzE1NjliMGIxNTMyMzY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-14T08:14:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-14T08:14:33Z"}, "message": "Rollup merge of #48087 - scottmcm:range_is_empty, r=kennytm,alexcrichton\n\nAdd Range[Inclusive]::is_empty\n\nDuring https://github.com/rust-lang/rfcs/pull/1980, it was discussed that figuring out whether a range is empty was subtle, and thus there should be a clear and obvious way to do it.  It can't just be ExactSizeIterator::is_empty (also unstable) because not all ranges are ExactSize -- such as `Range<i64>` and `RangeInclusive<usize>`.\n\nThings to ponder:\n- Unless this is stabilized first, this makes stabilizing ExactSizeIterator::is_empty more icky, since this hides that.\n- This is only on `Range` and `RangeInclusive`, as those are the only ones where it's interesting.  But one could argue that it should be on more for consistency, or on RangeArgument instead.\n- The bound on this is PartialOrd, since that works ok (see tests for float examples) and is consistent with `contains`.  But ranges like `NAN..=NAN`_are_ kinda weird.\n- [x] ~~There's not a real issue number on this yet~~", "tree": {"sha": "025f5070b62192cd7039870141a720dfd67796fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/025f5070b62192cd7039870141a720dfd67796fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd3674e4def219b22b3d5a3c3871569b0b153236", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJag+/qCRBK7hj4Ov3rIwAAdHIIAAXMGLbU4/KlFAOSGn3XTGWX\nm/XTJNze2WngLHMkKZF3IqKAATSUGDISKOMKNSn4ezKpkq+lxcpIFFs/ShnFQ5Av\nTrVtnGMXzVtQZp6rzqnk9jixSnHexcn8OU+tOVQT85UI0Y/QbzJttMuhIw6zBS9c\n16ruaUJ9vIU1gARCAwLWmdoPvF7605hGtP3qXSbmLwR9lfmdGXWdMqDCO+jptT3E\nRgpgZPtKQKz+e+2vYae7WRDnWnhcWjF/Ugo37hFO9r+bHCWAJExwYW7QisaWdd5N\nNqvLD2hTwXklfb/xcSW4ikADMJPdy0qm1bNZ2FbNhE+azcKtPj/Cfrz17eXREuY=\n=5G8H\n-----END PGP SIGNATURE-----\n", "payload": "tree 025f5070b62192cd7039870141a720dfd67796fc\nparent 3715f1e490e187c3635ef241104bd5abe119958b\nparent 22b0489f80dae5242f19c4ce892b50d3685dbf82\nauthor kennytm <kennytm@gmail.com> 1518596073 +0800\ncommitter GitHub <noreply@github.com> 1518596073 +0800\n\nRollup merge of #48087 - scottmcm:range_is_empty, r=kennytm,alexcrichton\n\nAdd Range[Inclusive]::is_empty\n\nDuring https://github.com/rust-lang/rfcs/pull/1980, it was discussed that figuring out whether a range is empty was subtle, and thus there should be a clear and obvious way to do it.  It can't just be ExactSizeIterator::is_empty (also unstable) because not all ranges are ExactSize -- such as `Range<i64>` and `RangeInclusive<usize>`.\n\nThings to ponder:\n- Unless this is stabilized first, this makes stabilizing ExactSizeIterator::is_empty more icky, since this hides that.\n- This is only on `Range` and `RangeInclusive`, as those are the only ones where it's interesting.  But one could argue that it should be on more for consistency, or on RangeArgument instead.\n- The bound on this is PartialOrd, since that works ok (see tests for float examples) and is consistent with `contains`.  But ranges like `NAN..=NAN`_are_ kinda weird.\n- [x] ~~There's not a real issue number on this yet~~\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd3674e4def219b22b3d5a3c3871569b0b153236", "html_url": "https://github.com/rust-lang/rust/commit/bd3674e4def219b22b3d5a3c3871569b0b153236", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd3674e4def219b22b3d5a3c3871569b0b153236/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3715f1e490e187c3635ef241104bd5abe119958b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3715f1e490e187c3635ef241104bd5abe119958b", "html_url": "https://github.com/rust-lang/rust/commit/3715f1e490e187c3635ef241104bd5abe119958b"}, {"sha": "22b0489f80dae5242f19c4ce892b50d3685dbf82", "url": "https://api.github.com/repos/rust-lang/rust/commits/22b0489f80dae5242f19c4ce892b50d3685dbf82", "html_url": "https://github.com/rust-lang/rust/commit/22b0489f80dae5242f19c4ce892b50d3685dbf82"}], "stats": {"total": 168, "additions": 154, "deletions": 14}, "files": [{"sha": "860742d9eab6047b3fc6ff0510401d33cfdda949", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd3674e4def219b22b3d5a3c3871569b0b153236/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3674e4def219b22b3d5a3c3871569b0b153236/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=bd3674e4def219b22b3d5a3c3871569b0b153236", "patch": "@@ -706,7 +706,7 @@ pub trait ExactSizeIterator: Iterator {\n     /// ```\n     /// #![feature(exact_size_is_empty)]\n     ///\n-    /// let mut one_element = 0..1;\n+    /// let mut one_element = std::iter::once(0);\n     /// assert!(!one_element.is_empty());\n     ///\n     /// assert_eq!(one_element.next(), Some(0));"}, {"sha": "8a45444f1ab0c617322cc57010e36b211e0acb5f", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 76, "deletions": 4, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/bd3674e4def219b22b3d5a3c3871569b0b153236/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3674e4def219b22b3d5a3c3871569b0b153236/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=bd3674e4def219b22b3d5a3c3871569b0b153236", "patch": "@@ -60,7 +60,7 @@ impl fmt::Debug for RangeFull {\n /// (`start..end`).\n ///\n /// The `Range` `start..end` contains all values with `x >= start` and\n-/// `x < end`.\n+/// `x < end`.  It is empty unless `start < end`.\n ///\n /// # Examples\n ///\n@@ -92,7 +92,6 @@ impl<Idx: fmt::Debug> fmt::Debug for Range<Idx> {\n     }\n }\n \n-#[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n impl<Idx: PartialOrd<Idx>> Range<Idx> {\n     /// Returns `true` if `item` is contained in the range.\n     ///\n@@ -109,9 +108,37 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n     /// assert!(!(3..3).contains(3));\n     /// assert!(!(3..2).contains(3));\n     /// ```\n+    #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n     pub fn contains(&self, item: Idx) -> bool {\n         (self.start <= item) && (item < self.end)\n     }\n+\n+    /// Returns `true` if the range contains no items.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(range_is_empty)]\n+    ///\n+    /// assert!(!(3..5).is_empty());\n+    /// assert!( (3..3).is_empty());\n+    /// assert!( (3..2).is_empty());\n+    /// ```\n+    ///\n+    /// The range is empty if either side is incomparable:\n+    ///\n+    /// ```\n+    /// #![feature(range_is_empty,inclusive_range_syntax)]\n+    ///\n+    /// use std::f32::NAN;\n+    /// assert!(!(3.0..5.0).is_empty());\n+    /// assert!( (3.0..NAN).is_empty());\n+    /// assert!( (NAN..5.0).is_empty());\n+    /// ```\n+    #[unstable(feature = \"range_is_empty\", reason = \"recently added\", issue = \"48111\")]\n+    pub fn is_empty(&self) -> bool {\n+        !(self.start < self.end)\n+    }\n }\n \n /// A range only bounded inclusively below (`start..`).\n@@ -244,7 +271,14 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// An range bounded inclusively below and above (`start..=end`).\n ///\n /// The `RangeInclusive` `start..=end` contains all values with `x >= start`\n-/// and `x <= end`.\n+/// and `x <= end`.  It is empty unless `start <= end`.\n+///\n+/// This iterator is [fused], but the specific values of `start` and `end` after\n+/// iteration has finished are **unspecified** other than that [`.is_empty()`]\n+/// will return `true` once no more values will be produced.\n+///\n+/// [fused]: ../iter/trait.FusedIterator.html\n+/// [`.is_empty()`]: #method.is_empty\n ///\n /// # Examples\n ///\n@@ -280,7 +314,6 @@ impl<Idx: fmt::Debug> fmt::Debug for RangeInclusive<Idx> {\n     }\n }\n \n-#[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// Returns `true` if `item` is contained in the range.\n     ///\n@@ -298,9 +331,48 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// assert!( (3..=3).contains(3));\n     /// assert!(!(3..=2).contains(3));\n     /// ```\n+    #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n     pub fn contains(&self, item: Idx) -> bool {\n         self.start <= item && item <= self.end\n     }\n+\n+    /// Returns `true` if the range contains no items.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(range_is_empty,inclusive_range_syntax)]\n+    ///\n+    /// assert!(!(3..=5).is_empty());\n+    /// assert!(!(3..=3).is_empty());\n+    /// assert!( (3..=2).is_empty());\n+    /// ```\n+    ///\n+    /// The range is empty if either side is incomparable:\n+    ///\n+    /// ```\n+    /// #![feature(range_is_empty,inclusive_range_syntax)]\n+    ///\n+    /// use std::f32::NAN;\n+    /// assert!(!(3.0..=5.0).is_empty());\n+    /// assert!( (3.0..=NAN).is_empty());\n+    /// assert!( (NAN..=5.0).is_empty());\n+    /// ```\n+    ///\n+    /// This method returns `true` after iteration has finished:\n+    ///\n+    /// ```\n+    /// #![feature(range_is_empty,inclusive_range_syntax)]\n+    ///\n+    /// let mut r = 3..=5;\n+    /// for _ in r.by_ref() {}\n+    /// // Precise field values are unspecified here\n+    /// assert!(r.is_empty());\n+    /// ```\n+    #[unstable(feature = \"range_is_empty\", reason = \"recently added\", issue = \"48111\")]\n+    pub fn is_empty(&self) -> bool {\n+        !(self.start <= self.end)\n+    }\n }\n \n /// A range only bounded inclusively above (`..=end`)."}, {"sha": "d8c9dcd8664868e9039ca0e76be97a428964528a", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 52, "deletions": 9, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/bd3674e4def219b22b3d5a3c3871569b0b153236/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3674e4def219b22b3d5a3c3871569b0b153236/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=bd3674e4def219b22b3d5a3c3871569b0b153236", "patch": "@@ -1322,42 +1322,84 @@ fn test_range() {\n                (isize::MAX as usize + 2, Some(isize::MAX as usize + 2)));\n }\n \n+#[test]\n+fn test_range_exhaustion() {\n+    let mut r = 10..10;\n+    assert!(r.is_empty());\n+    assert_eq!(r.next(), None);\n+    assert_eq!(r.next_back(), None);\n+    assert_eq!(r, 10..10);\n+\n+    let mut r = 10..12;\n+    assert_eq!(r.next(), Some(10));\n+    assert_eq!(r.next(), Some(11));\n+    assert!(r.is_empty());\n+    assert_eq!(r, 12..12);\n+    assert_eq!(r.next(), None);\n+\n+    let mut r = 10..12;\n+    assert_eq!(r.next_back(), Some(11));\n+    assert_eq!(r.next_back(), Some(10));\n+    assert!(r.is_empty());\n+    assert_eq!(r, 10..10);\n+    assert_eq!(r.next_back(), None);\n+\n+    let mut r = 100..10;\n+    assert!(r.is_empty());\n+    assert_eq!(r.next(), None);\n+    assert_eq!(r.next_back(), None);\n+    assert_eq!(r, 100..10);\n+}\n+\n #[test]\n fn test_range_inclusive_exhaustion() {\n     let mut r = 10..=10;\n     assert_eq!(r.next(), Some(10));\n-    assert_eq!(r, 1..=0);\n+    assert!(r.is_empty());\n+    assert_eq!(r.next(), None);\n+    assert_eq!(r.next(), None);\n \n     let mut r = 10..=10;\n     assert_eq!(r.next_back(), Some(10));\n-    assert_eq!(r, 1..=0);\n+    assert!(r.is_empty());\n+    assert_eq!(r.next_back(), None);\n \n     let mut r = 10..=12;\n     assert_eq!(r.next(), Some(10));\n     assert_eq!(r.next(), Some(11));\n     assert_eq!(r.next(), Some(12));\n-    assert_eq!(r, 1..=0);\n+    assert!(r.is_empty());\n+    assert_eq!(r.next(), None);\n \n     let mut r = 10..=12;\n     assert_eq!(r.next_back(), Some(12));\n     assert_eq!(r.next_back(), Some(11));\n     assert_eq!(r.next_back(), Some(10));\n-    assert_eq!(r, 1..=0);\n+    assert!(r.is_empty());\n+    assert_eq!(r.next_back(), None);\n \n     let mut r = 10..=12;\n     assert_eq!(r.nth(2), Some(12));\n-    assert_eq!(r, 1..=0);\n+    assert!(r.is_empty());\n+    assert_eq!(r.next(), None);\n \n     let mut r = 10..=12;\n     assert_eq!(r.nth(5), None);\n-    assert_eq!(r, 1..=0);\n+    assert!(r.is_empty());\n+    assert_eq!(r.next(), None);\n \n     let mut r = 100..=10;\n     assert_eq!(r.next(), None);\n+    assert!(r.is_empty());\n+    assert_eq!(r.next(), None);\n+    assert_eq!(r.next(), None);\n     assert_eq!(r, 100..=10);\n \n     let mut r = 100..=10;\n     assert_eq!(r.next_back(), None);\n+    assert!(r.is_empty());\n+    assert_eq!(r.next_back(), None);\n+    assert_eq!(r.next_back(), None);\n     assert_eq!(r, 100..=10);\n }\n \n@@ -1428,9 +1470,10 @@ fn test_range_inclusive_nth() {\n     assert_eq!(r.nth(2), Some(15));\n     assert_eq!(r, 16..=20);\n     assert_eq!(r.is_empty(), false);\n+    assert_eq!(ExactSizeIterator::is_empty(&r), false);\n     assert_eq!(r.nth(10), None);\n     assert_eq!(r.is_empty(), true);\n-    assert_eq!(r, 1..=0);  // We may not want to document/promise this detail\n+    assert_eq!(ExactSizeIterator::is_empty(&r), true);\n }\n \n #[test]\n@@ -1514,11 +1557,11 @@ fn test_range_inclusive_folds() {\n \n     let mut it = 10..=20;\n     assert_eq!(it.try_fold(0, |a,b| Some(a+b)), Some(165));\n-    assert_eq!(it, 1..=0);\n+    assert!(it.is_empty());\n \n     let mut it = 10..=20;\n     assert_eq!(it.try_rfold(0, |a,b| Some(a+b)), Some(165));\n-    assert_eq!(it, 1..=0);\n+    assert!(it.is_empty());\n }\n \n #[test]"}, {"sha": "0d55e6eeeb1ceb1722eabc6907fcb4218fd85552", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd3674e4def219b22b3d5a3c3871569b0b153236/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3674e4def219b22b3d5a3c3871569b0b153236/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=bd3674e4def219b22b3d5a3c3871569b0b153236", "patch": "@@ -29,6 +29,7 @@\n #![feature(iter_rfold)]\n #![feature(nonzero)]\n #![feature(pattern)]\n+#![feature(range_is_empty)]\n #![feature(raw)]\n #![feature(refcell_replace_swap)]\n #![feature(sip_hash_13)]"}, {"sha": "bed08f86d72c124e4851f46364ddaf4eaee80b74", "filename": "src/libcore/tests/ops.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bd3674e4def219b22b3d5a3c3871569b0b153236/src%2Flibcore%2Ftests%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3674e4def219b22b3d5a3c3871569b0b153236/src%2Flibcore%2Ftests%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fops.rs?ref=bd3674e4def219b22b3d5a3c3871569b0b153236", "patch": "@@ -68,3 +68,27 @@ fn test_range_inclusive() {\n     assert_eq!(r.size_hint(), (0, Some(0)));\n     assert_eq!(r.next(), None);\n }\n+\n+\n+#[test]\n+fn test_range_is_empty() {\n+    use core::f32::*;\n+\n+    assert!(!(0.0 .. 10.0).is_empty());\n+    assert!( (-0.0 .. 0.0).is_empty());\n+    assert!( (10.0 .. 0.0).is_empty());\n+\n+    assert!(!(NEG_INFINITY .. INFINITY).is_empty());\n+    assert!( (EPSILON .. NAN).is_empty());\n+    assert!( (NAN .. EPSILON).is_empty());\n+    assert!( (NAN .. NAN).is_empty());\n+\n+    assert!(!(0.0 ..= 10.0).is_empty());\n+    assert!(!(-0.0 ..= 0.0).is_empty());\n+    assert!( (10.0 ..= 0.0).is_empty());\n+\n+    assert!(!(NEG_INFINITY ..= INFINITY).is_empty());\n+    assert!( (EPSILON ..= NAN).is_empty());\n+    assert!( (NAN ..= EPSILON).is_empty());\n+    assert!( (NAN ..= NAN).is_empty());\n+}"}]}