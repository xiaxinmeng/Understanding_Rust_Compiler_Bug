{"sha": "14e6947fa4b9a144802869286a937c987d6a3c54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZTY5NDdmYTRiOWExNDQ4MDI4NjkyODZhOTM3Yzk4N2Q2YTNjNTQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-10T17:46:27Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-10T21:30:46Z"}, "message": "Correct the polymorphic extern fn error for const parameters", "tree": {"sha": "06f05989e684d853cbddbaa9130c15a11a510332", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06f05989e684d853cbddbaa9130c15a11a510332"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14e6947fa4b9a144802869286a937c987d6a3c54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14e6947fa4b9a144802869286a937c987d6a3c54", "html_url": "https://github.com/rust-lang/rust/commit/14e6947fa4b9a144802869286a937c987d6a3c54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14e6947fa4b9a144802869286a937c987d6a3c54/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4894123d21ed4b153a2e5c32c0870cb2d97f9b46", "url": "https://api.github.com/repos/rust-lang/rust/commits/4894123d21ed4b153a2e5c32c0870cb2d97f9b46", "html_url": "https://github.com/rust-lang/rust/commit/4894123d21ed4b153a2e5c32c0870cb2d97f9b46"}], "stats": {"total": 70, "additions": 63, "deletions": 7}, "files": [{"sha": "e76ef14f06c87e1e843f56aea38fee959d41c47f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/14e6947fa4b9a144802869286a937c987d6a3c54/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e6947fa4b9a144802869286a937c987d6a3c54/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=14e6947fa4b9a144802869286a937c987d6a3c54", "patch": "@@ -1511,20 +1511,39 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item) {\n             } else {\n                 for item in &m.items {\n                     let generics = tcx.generics_of(tcx.hir().local_def_id(item.hir_id));\n-                    if generics.params.len() - generics.own_counts().lifetimes != 0 {\n+                    let own_counts = generics.own_counts();\n+                    if generics.params.len() - own_counts.lifetimes != 0 {\n+                        let (kinds, kinds_pl, egs) = match (own_counts.types, own_counts.consts) {\n+                            (_, 0) => (\"type\", \"types\", Some(\"u32\")),\n+                            // We don't specify an example value, because we can't generate\n+                            // a valid value for any type.\n+                            (0, _) => (\"const\", \"consts\", None),\n+                            _ => (\"type or const\", \"types or consts\", None),\n+                        };\n                         let mut err = struct_span_err!(\n                             tcx.sess,\n                             item.span,\n                             E0044,\n-                            \"foreign items may not have type parameters\"\n+                            \"foreign items may not have {} parameters\",\n+                            kinds,\n+                        );\n+                        err.span_label(\n+                            item.span,\n+                            &format!(\"can't have {} parameters\", kinds),\n                         );\n-                        err.span_label(item.span, \"can't have type parameters\");\n                         // FIXME: once we start storing spans for type arguments, turn this into a\n                         // suggestion.\n-                        err.help(\n-                            \"use specialization instead of type parameters by replacing them \\\n-                             with concrete types like `u32`\",\n-                        );\n+                        err.help(&format!(\n+                            \"use specialization instead of {} parameters by replacing \\\n+                            them with concrete {}{}\",\n+                            kinds,\n+                            kinds_pl,\n+                            if let Some(egs) = egs {\n+                                format!(\" like `{}`\", egs)\n+                            } else {\n+                                \"\".to_string()\n+                            },\n+                        ));\n                         err.emit();\n                     }\n "}, {"sha": "4673c8606c3931ce883a37b8ab933fbfa1029aec", "filename": "src/test/ui/const-generics/foreign-item-const-parameter.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14e6947fa4b9a144802869286a937c987d6a3c54/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e6947fa4b9a144802869286a937c987d6a3c54/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.rs?ref=14e6947fa4b9a144802869286a937c987d6a3c54", "patch": "@@ -0,0 +1,10 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+extern \"C\" {\n+    fn foo<const X: usize>(); //~ ERROR foreign items may not have const parameters\n+\n+    fn bar<T, const X: usize>(_: T); //~ ERROR foreign items may not have type or const parameters\n+}\n+\n+fn main() {}"}, {"sha": "0a74537dfef355dac8ba065fc519290bcb1048db", "filename": "src/test/ui/const-generics/foreign-item-const-parameter.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/14e6947fa4b9a144802869286a937c987d6a3c54/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14e6947fa4b9a144802869286a937c987d6a3c54/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.stderr?ref=14e6947fa4b9a144802869286a937c987d6a3c54", "patch": "@@ -0,0 +1,27 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/foreign-item-const-parameter.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0044]: foreign items may not have const parameters\n+  --> $DIR/foreign-item-const-parameter.rs:5:5\n+   |\n+LL |     fn foo<const X: usize>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ can't have const parameters\n+   |\n+   = help: use specialization instead of const parameters by replacing them with concrete consts\n+\n+error[E0044]: foreign items may not have type or const parameters\n+  --> $DIR/foreign-item-const-parameter.rs:7:5\n+   |\n+LL |     fn bar<T, const X: usize>(_: T);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't have type or const parameters\n+   |\n+   = help: use specialization instead of type or const parameters by replacing them with concrete types or consts\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0044`."}]}