{"sha": "4f415fc3489d5a8e910a035455d7d33f15928ed7", "node_id": "C_kwDOAAsO6NoAKDRmNDE1ZmMzNDg5ZDVhOGU5MTBhMDM1NDU1ZDdkMzNmMTU5MjhlZDc", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-11-10T10:22:20Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-11-10T10:22:20Z"}, "message": "Ignore outermost non-delimited `Subtree` when reversing fixups", "tree": {"sha": "c85b69c1007bc5f692b98731cc6da34c5df9c975", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c85b69c1007bc5f692b98731cc6da34c5df9c975"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f415fc3489d5a8e910a035455d7d33f15928ed7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmNs0SYACgkQ4laYqTBY\nYXFXVg//e1unBsYuCs7DzYnFvCPktJT+x+7uBtAhq7OfHWPxC51sbWtvuJAI+XBE\nvxCHM/yqe86srXZXvq39wPN8zHYqmTbm9Tvu4oqjL5owsAvfkzz3cM9y98yVH/ue\n++DAxcA1CROSRWZXjWmzV0986iwBYwljI0y5d9g6BJ/n0UTOZB5WvSq3s3VXBKZG\n7yeTWUH29Jp6UxplciM1VkHZzXSgbKwo68gJSe8qZQ5PwOy/BYy5ESXuV/4+9bb7\np8HKSbODtxoHiTOQ+cQWtw0/MorLbTdBYHV6XZOpEbK1T2YipR1ldWTbSx/2GCdn\njkBh+rn9PB9U/pGiLtnS/5PuD6OwMxzQ3sypyxENBXZ5XdFbQ270cfMHUkFNOiiL\nD6Pwmz71saSRce5MTTh9dDv70m+V5uD41VS5FVySv322fJpUvO6W0H0+rk0cS3Mt\nkRXZBSx6gqHqeFNNmAvDwkQFcl36ZWcnV8da+IlYqL8fGmLdjxLJDaJ5etPy6rIg\nN8Jknnz1RB7gaNZ6kSJaWiKxxI6AbRwpGS1jKZKkY5b6tHwyzBEE/sEEyWhZHxfP\n9rieeERRY8COQplgElmDqReEsMlwU81Ok7+sPr6K/ZeH5GdgOKjhm0FcRRvatr+g\nGjdgdVoUecD5CAHETFB49Q99UQ0TFLCQMN97o/VVF8McNZ9sMIk=\n=DXyN\n-----END PGP SIGNATURE-----", "payload": "tree c85b69c1007bc5f692b98731cc6da34c5df9c975\nparent 41b0c54c071621b0c4fe664bfc0d3e973602d3ad\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1668075740 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1668075740 +0900\n\nIgnore outermost non-delimited `Subtree` when reversing fixups\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f415fc3489d5a8e910a035455d7d33f15928ed7", "html_url": "https://github.com/rust-lang/rust/commit/4f415fc3489d5a8e910a035455d7d33f15928ed7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f415fc3489d5a8e910a035455d7d33f15928ed7/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41b0c54c071621b0c4fe664bfc0d3e973602d3ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/41b0c54c071621b0c4fe664bfc0d3e973602d3ad", "html_url": "https://github.com/rust-lang/rust/commit/41b0c54c071621b0c4fe664bfc0d3e973602d3ad"}], "stats": {"total": 42, "additions": 28, "deletions": 14}, "files": [{"sha": "aab36f640efa63aaf13bef6806430ad3fecc73de", "filename": "crates/hir-expand/src/fixup.rs", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4f415fc3489d5a8e910a035455d7d33f15928ed7/crates%2Fhir-expand%2Fsrc%2Ffixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f415fc3489d5a8e910a035455d7d33f15928ed7/crates%2Fhir-expand%2Fsrc%2Ffixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Ffixup.rs?ref=4f415fc3489d5a8e910a035455d7d33f15928ed7", "patch": "@@ -4,6 +4,7 @@ use std::mem;\n \n use mbe::{SyntheticToken, SyntheticTokenId, TokenMap};\n use rustc_hash::FxHashMap;\n+use smallvec::SmallVec;\n use syntax::{\n     ast::{self, AstNode, HasLoopBody},\n     match_ast, SyntaxElement, SyntaxKind, SyntaxNode, TextRange,\n@@ -292,21 +293,34 @@ pub(crate) fn reverse_fixups(\n     token_map: &TokenMap,\n     undo_info: &SyntaxFixupUndoInfo,\n ) {\n-    tt.token_trees.retain(|tt| match tt {\n-        tt::TokenTree::Leaf(leaf) => token_map.synthetic_token_id(leaf.id()) != Some(EMPTY_ID),\n-        tt::TokenTree::Subtree(st) => {\n-            st.delimiter.map_or(true, |d| token_map.synthetic_token_id(d.id) != Some(EMPTY_ID))\n-        }\n-    });\n-    tt.token_trees.iter_mut().for_each(|tt| match tt {\n-        tt::TokenTree::Subtree(tt) => reverse_fixups(tt, token_map, undo_info),\n-        tt::TokenTree::Leaf(leaf) => {\n-            if let Some(id) = token_map.synthetic_token_id(leaf.id()) {\n-                let original = &undo_info.original[id.0 as usize];\n-                *tt = tt::TokenTree::Subtree(original.clone());\n+    let tts = std::mem::take(&mut tt.token_trees);\n+    tt.token_trees = tts\n+        .into_iter()\n+        .filter(|tt| match tt {\n+            tt::TokenTree::Leaf(leaf) => token_map.synthetic_token_id(leaf.id()) != Some(EMPTY_ID),\n+            tt::TokenTree::Subtree(st) => {\n+                st.delimiter.map_or(true, |d| token_map.synthetic_token_id(d.id) != Some(EMPTY_ID))\n             }\n-        }\n-    });\n+        })\n+        .flat_map(|tt| match tt {\n+            tt::TokenTree::Subtree(mut tt) => {\n+                reverse_fixups(&mut tt, token_map, undo_info);\n+                SmallVec::from_const([tt.into()])\n+            }\n+            tt::TokenTree::Leaf(leaf) => {\n+                if let Some(id) = token_map.synthetic_token_id(leaf.id()) {\n+                    let original = undo_info.original[id.0 as usize].clone();\n+                    if original.delimiter.is_none() {\n+                        original.token_trees.into()\n+                    } else {\n+                        SmallVec::from_const([original.into()])\n+                    }\n+                } else {\n+                    SmallVec::from_const([leaf.into()])\n+                }\n+            }\n+        })\n+        .collect();\n }\n \n #[cfg(test)]"}]}