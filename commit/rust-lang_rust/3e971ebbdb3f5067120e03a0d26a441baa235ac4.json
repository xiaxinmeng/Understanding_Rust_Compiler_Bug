{"sha": "3e971ebbdb3f5067120e03a0d26a441baa235ac4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlOTcxZWJiZGIzZjUwNjcxMjBlMDNhMGQyNmE0NDFiYWEyMzVhYzQ=", "commit": {"author": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-03-06T16:02:29Z"}, "committer": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-03-23T19:18:50Z"}, "message": "Revert \"change skolemizations to use universe index\"\n\nThis reverts commit 755bdaa19084c3ae116ad8320b99a6932fa7f0b1.", "tree": {"sha": "ee261e7997d5414c9bacb5f0cd2ea6d72e27c81e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee261e7997d5414c9bacb5f0cd2ea6d72e27c81e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e971ebbdb3f5067120e03a0d26a441baa235ac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e971ebbdb3f5067120e03a0d26a441baa235ac4", "html_url": "https://github.com/rust-lang/rust/commit/3e971ebbdb3f5067120e03a0d26a441baa235ac4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e971ebbdb3f5067120e03a0d26a441baa235ac4/comments", "author": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55e1104dd918a809d2751d325c11d59c85485a2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/55e1104dd918a809d2751d325c11d59c85485a2e", "html_url": "https://github.com/rust-lang/rust/commit/55e1104dd918a809d2751d325c11d59c85485a2e"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "4113a2dd4178bfd8e92a162d6e8d2c6ab673c642", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3e971ebbdb3f5067120e03a0d26a441baa235ac4/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e971ebbdb3f5067120e03a0d26a441baa235ac4/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=3e971ebbdb3f5067120e03a0d26a441baa235ac4", "patch": "@@ -48,7 +48,7 @@ pub struct RegionConstraintCollector<'tcx> {\n     glbs: CombineMap<'tcx>,\n \n     /// Number of skolemized variables currently active.\n-    skolemization_count: ty::UniverseIndex,\n+    skolemization_count: u32,\n \n     /// Global counter used during the GLB algorithm to create unique\n     /// names for fresh bound regions\n@@ -233,7 +233,7 @@ type CombineMap<'tcx> = FxHashMap<TwoRegions<'tcx>, RegionVid>;\n pub struct RegionSnapshot {\n     length: usize,\n     region_snapshot: ut::Snapshot<ut::InPlace<ty::RegionVid>>,\n-    skolemization_count: ty::UniverseIndex,\n+    skolemization_count: u32,\n }\n \n /// When working with skolemized regions, we often wish to find all of\n@@ -277,7 +277,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n             data: RegionConstraintData::default(),\n             lubs: FxHashMap(),\n             glbs: FxHashMap(),\n-            skolemization_count: ty::UniverseIndex::ROOT,\n+            skolemization_count: 0,\n             bound_count: 0,\n             undo_log: Vec::new(),\n             unification_table: ut::UnificationTable::new(),\n@@ -329,7 +329,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n             unification_table,\n         } = self;\n \n-        assert_eq!(skolemization_count.as_usize(), 0);\n+        assert_eq!(*skolemization_count, 0);\n \n         // Clear the tables of (lubs, glbs), so that we will create\n         // fresh regions if we do a LUB operation. As it happens,\n@@ -375,7 +375,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         assert!(self.undo_log[snapshot.length] == OpenSnapshot);\n         assert!(\n             self.skolemization_count == snapshot.skolemization_count,\n-            \"failed to pop skolemized regions: {:?} now vs {:?} at start\",\n+            \"failed to pop skolemized regions: {} now vs {} at start\",\n             self.skolemization_count,\n             snapshot.skolemization_count\n         );\n@@ -485,9 +485,9 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         assert!(self.in_snapshot());\n         assert!(self.undo_log[snapshot.length] == OpenSnapshot);\n \n-        let universe = self.skolemization_count.subuniverse();\n-        self.skolemization_count = universe;\n-        tcx.mk_region(ReSkolemized(universe, br))\n+        let sc = self.skolemization_count;\n+        self.skolemization_count = sc + 1;\n+        tcx.mk_region(ReSkolemized(ty::SkolemizedRegionVid { index: sc }, br))\n     }\n \n     /// Removes all the edges to/from the skolemized regions that are\n@@ -505,34 +505,34 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         assert!(self.in_snapshot());\n         assert!(self.undo_log[snapshot.length] == OpenSnapshot);\n         assert!(\n-            self.skolemization_count.as_usize() >= skols.len(),\n+            self.skolemization_count as usize >= skols.len(),\n             \"popping more skolemized variables than actually exist, \\\n              sc now = {}, skols.len = {}\",\n-            self.skolemization_count.as_usize(),\n+            self.skolemization_count,\n             skols.len()\n         );\n \n-        let last_to_pop = self.skolemization_count.subuniverse();\n-        let first_to_pop = ty::UniverseIndex::from(last_to_pop.as_u32() - (skols.len() as u32));\n+        let last_to_pop = self.skolemization_count;\n+        let first_to_pop = last_to_pop - (skols.len() as u32);\n \n         assert!(\n             first_to_pop >= snapshot.skolemization_count,\n             \"popping more regions than snapshot contains, \\\n-             sc now = {:?}, sc then = {:?}, skols.len = {}\",\n+             sc now = {}, sc then = {}, skols.len = {}\",\n             self.skolemization_count,\n             snapshot.skolemization_count,\n             skols.len()\n         );\n         debug_assert! {\n             skols.iter()\n                  .all(|&k| match *k {\n-                     ty::ReSkolemized(universe, _) =>\n-                         universe >= first_to_pop &&\n-                         universe < last_to_pop,\n+                     ty::ReSkolemized(index, _) =>\n+                         index.index >= first_to_pop &&\n+                         index.index < last_to_pop,\n                      _ =>\n                          false\n                  }),\n-            \"invalid skolemization keys or keys out of range ({:?}..{:?}): {:?}\",\n+            \"invalid skolemization keys or keys out of range ({}..{}): {:?}\",\n             snapshot.skolemization_count,\n             self.skolemization_count,\n             skols\n@@ -867,7 +867,7 @@ impl fmt::Debug for RegionSnapshot {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(\n             f,\n-            \"RegionSnapshot(length={},skolemization={:?})\",\n+            \"RegionSnapshot(length={},skolemization={})\",\n             self.length,\n             self.skolemization_count\n         )"}]}