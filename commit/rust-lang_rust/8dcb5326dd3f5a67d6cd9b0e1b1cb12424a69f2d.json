{"sha": "8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkY2I1MzI2ZGQzZjVhNjdkNmNkOWIwZTFiMWNiMTI0MjRhNjlmMmQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T18:41:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-03T18:41:57Z"}, "message": "Rollup merge of #66973 - cuviper:min-llvm7, r=alexcrichton\n\nUpdate the minimum external LLVM to 7\n\nLLVM 7 is over a year old, which should be plenty for compatibility. The\nlast LLVM 6 holdout was llvm-emscripten, which went away in #65501.\n\nI've also included a fix for LLVM 8 lacking `MemorySanitizerOptions`,\nwhich was broken by #66522.", "tree": {"sha": "3aee9f9527060f3c317417af80db7c0473cea5c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aee9f9527060f3c317417af80db7c0473cea5c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd5qx1CRBK7hj4Ov3rIwAAdHIIAK2YScMNR/1/rtCLg0HY5LGr\nf3Lrw9Okv/A5Lxf4gIBAP0bTBa1Y7tdQvbjYYjCR1yG4OT6C6PIDRboKtlshcsPy\nFBSjE6gOIoRYyzegBuT9fRCn+oRE15ifx+ggiUURtkQ3FUh2OSLZjRRj7hWMBdJq\nNe7HDL44IaAwJJ7O8r1Gm0iy9sjIoO28IjbN9S80HDfVzONSCSKDyI9qSgNtaXMp\n6uo9IncPP1qrPEzHZw1g00Nerslq5O12unOZeKtWWk31z17nybwclhzjNRSWG4KA\nY2jhrmJfpnq+EfV93lUnu70+CJ3kpfoEoEUFRBhZ8kZC/z/2Kwi5VPwY4uFIDUw=\n=u84w\n-----END PGP SIGNATURE-----\n", "payload": "tree 3aee9f9527060f3c317417af80db7c0473cea5c5\nparent ded98853ec377556112970cb35be4814efa0843e\nparent 2304c25f31fb69c279110ecaf51627cc36bffd55\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1575398517 +0100\ncommitter GitHub <noreply@github.com> 1575398517 +0100\n\nRollup merge of #66973 - cuviper:min-llvm7, r=alexcrichton\n\nUpdate the minimum external LLVM to 7\n\nLLVM 7 is over a year old, which should be plenty for compatibility. The\nlast LLVM 6 holdout was llvm-emscripten, which went away in #65501.\n\nI've also included a fix for LLVM 8 lacking `MemorySanitizerOptions`,\nwhich was broken by #66522.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "html_url": "https://github.com/rust-lang/rust/commit/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ded98853ec377556112970cb35be4814efa0843e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ded98853ec377556112970cb35be4814efa0843e", "html_url": "https://github.com/rust-lang/rust/commit/ded98853ec377556112970cb35be4814efa0843e"}, {"sha": "2304c25f31fb69c279110ecaf51627cc36bffd55", "url": "https://api.github.com/repos/rust-lang/rust/commits/2304c25f31fb69c279110ecaf51627cc36bffd55", "html_url": "https://github.com/rust-lang/rust/commit/2304c25f31fb69c279110ecaf51627cc36bffd55"}], "stats": {"total": 111, "additions": 16, "deletions": 95}, "files": [{"sha": "be13b9aa2eb49cde97ca8cc50c24bf5be67f9415", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "patch": "@@ -294,11 +294,11 @@ fn check_llvm_version(builder: &Builder<'_>, llvm_config: &Path) {\n     let mut parts = version.split('.').take(2)\n         .filter_map(|s| s.parse::<u32>().ok());\n     if let (Some(major), Some(_minor)) = (parts.next(), parts.next()) {\n-        if major >= 6 {\n+        if major >= 7 {\n             return\n         }\n     }\n-    panic!(\"\\n\\nbad LLVM version: {}, need >=6.0\\n\\n\", version)\n+    panic!(\"\\n\\nbad LLVM version: {}, need >=7.0\\n\\n\", version)\n }\n \n fn configure_cmake(builder: &Builder<'_>,"}, {"sha": "70d6bad297dce4c890ee98a1c7b611a4dd831d32", "filename": "src/ci/azure-pipelines/auto.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Fci%2Fazure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Fci%2Fazure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fauto.yml?ref=8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "patch": "@@ -18,7 +18,7 @@ jobs:\n   - template: steps/run.yml\n   strategy:\n     matrix:\n-      x86_64-gnu-llvm-6.0:\n+      x86_64-gnu-llvm-7:\n         RUST_BACKTRACE: 1\n       dist-x86_64-linux: {}\n       dist-x86_64-linux-alt:"}, {"sha": "1f0be53677de22b37b3230de04daed686be09fec", "filename": "src/ci/azure-pipelines/pr.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Fci%2Fazure-pipelines%2Fpr.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Fci%2Fazure-pipelines%2Fpr.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fpr.yml?ref=8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "patch": "@@ -18,7 +18,7 @@ jobs:\n     - template: steps/run.yml\n   strategy:\n     matrix:\n-      x86_64-gnu-llvm-6.0: {}\n+      x86_64-gnu-llvm-7: {}\n       mingw-check: {}\n       x86_64-gnu-tools:\n         CI_ONLY_WHEN_SUBMODULES_CHANGED: 1"}, {"sha": "a1c9c13fc471a463879385bcc03ab5686ab9c740", "filename": "src/ci/docker/x86_64-gnu-llvm-7/Dockerfile", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-7%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-7%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-7%2FDockerfile?ref=8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "patch": "@@ -1,4 +1,4 @@\n-FROM ubuntu:16.04\n+FROM ubuntu:18.04\n \n RUN apt-get update && apt-get install -y --no-install-recommends \\\n   g++ \\\n@@ -11,7 +11,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   sudo \\\n   gdb \\\n-  llvm-6.0-tools \\\n+  llvm-7-tools \\\n   libedit-dev \\\n   libssl-dev \\\n   pkg-config \\\n@@ -24,7 +24,7 @@ RUN sh /scripts/sccache.sh\n # using llvm-link-shared due to libffi issues -- see #34486\n ENV RUST_CONFIGURE_ARGS \\\n       --build=x86_64-unknown-linux-gnu \\\n-      --llvm-root=/usr/lib/llvm-6.0 \\\n+      --llvm-root=/usr/lib/llvm-7 \\\n       --enable-llvm-link-shared\n ENV SCRIPT python2.7 ../x.py test src/tools/tidy && python2.7 ../x.py test\n ", "previous_filename": "src/ci/docker/x86_64-gnu-llvm-6.0/Dockerfile"}, {"sha": "c34bee802f7aa76fa18ba47bfbcaf352fdf834b5", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "patch": "@@ -442,32 +442,11 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                                 let is_left = name == \"rotate_left\";\n                                 let val = args[0].immediate();\n                                 let raw_shift = args[1].immediate();\n-                                if llvm_util::get_major_version() >= 7 {\n-                                    // rotate = funnel shift with first two args the same\n-                                    let llvm_name = &format!(\"llvm.fsh{}.i{}\",\n-                                                            if is_left { 'l' } else { 'r' }, width);\n-                                    let llfn = self.get_intrinsic(llvm_name);\n-                                    self.call(llfn, &[val, val, raw_shift], None)\n-                                } else {\n-                                    // rotate_left: (X << (S % BW)) | (X >> ((BW - S) % BW))\n-                                    // rotate_right: (X << ((BW - S) % BW)) | (X >> (S % BW))\n-                                    let width = self.const_uint(\n-                                        self.type_ix(width),\n-                                        width,\n-                                    );\n-                                    let shift = self.urem(raw_shift, width);\n-                                    let width_minus_raw_shift = self.sub(width, raw_shift);\n-                                    let inv_shift = self.urem(width_minus_raw_shift, width);\n-                                    let shift1 = self.shl(\n-                                        val,\n-                                        if is_left { shift } else { inv_shift },\n-                                    );\n-                                    let shift2 = self.lshr(\n-                                        val,\n-                                        if !is_left { shift } else { inv_shift },\n-                                    );\n-                                    self.or(shift1, shift2)\n-                                }\n+                                // rotate = funnel shift with first two args the same\n+                                let llvm_name = &format!(\"llvm.fsh{}.i{}\",\n+                                                        if is_left { 'l' } else { 'r' }, width);\n+                                let llfn = self.get_intrinsic(llvm_name);\n+                                self.call(llfn, &[val, val, raw_shift], None)\n                             },\n                             \"saturating_add\" | \"saturating_sub\" => {\n                                 let is_add = name == \"saturating_add\";"}, {"sha": "1cb123e674c452c945f6f33a3685634334ddb6e0", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "patch": "@@ -101,11 +101,13 @@ extern \"C\" LLVMPassRef LLVMRustCreateModuleAddressSanitizerPass(bool Recover) {\n }\n \n extern \"C\" LLVMPassRef LLVMRustCreateMemorySanitizerPass(int TrackOrigins, bool Recover) {\n-#if LLVM_VERSION_GE(8, 0)\n+#if LLVM_VERSION_GE(9, 0)\n   const bool CompileKernel = false;\n \n   return wrap(createMemorySanitizerLegacyPassPass(\n       MemorySanitizerOptions{TrackOrigins, Recover, CompileKernel}));\n+#elif LLVM_VERSION_GE(8, 0)\n+  return wrap(createMemorySanitizerLegacyPassPass(TrackOrigins, Recover));\n #else\n   return wrap(createMemorySanitizerPass(TrackOrigins, Recover));\n #endif\n@@ -451,9 +453,7 @@ extern \"C\" void LLVMRustConfigurePassManagerBuilder(\n     LLVMPassManagerBuilderRef PMBR, LLVMRustCodeGenOptLevel OptLevel,\n     bool MergeFunctions, bool SLPVectorize, bool LoopVectorize, bool PrepareForThinLTO,\n     const char* PGOGenPath, const char* PGOUsePath) {\n-#if LLVM_VERSION_GE(7, 0)\n   unwrap(PMBR)->MergeFunctions = MergeFunctions;\n-#endif\n   unwrap(PMBR)->SLPVectorize = SLPVectorize;\n   unwrap(PMBR)->OptLevel = fromRust(OptLevel);\n   unwrap(PMBR)->LoopVectorize = LoopVectorize;\n@@ -560,12 +560,8 @@ LLVMRustWriteOutputFile(LLVMTargetMachineRef Target, LLVMPassManagerRef PMR,\n     return LLVMRustResult::Failure;\n   }\n \n-#if LLVM_VERSION_GE(7, 0)\n   buffer_ostream BOS(OS);\n   unwrap(Target)->addPassesToEmitFile(*PM, BOS, nullptr, FileType, false);\n-#else\n-  unwrap(Target)->addPassesToEmitFile(*PM, OS, FileType, false);\n-#endif\n   PM->run(*unwrap(M));\n \n   // Apparently `addPassesToEmitFile` adds a pointer to our on-the-stack output\n@@ -849,9 +845,7 @@ struct LLVMRustThinLTOData {\n   StringMap<FunctionImporter::ExportSetTy> ExportLists;\n   StringMap<GVSummaryMapTy> ModuleToDefinedGVSummaries;\n \n-#if LLVM_VERSION_GE(7, 0)\n   LLVMRustThinLTOData() : Index(/* HaveGVs = */ false) {}\n-#endif\n };\n \n // Just an argument to the `LLVMRustCreateThinLTOData` function below.\n@@ -922,7 +916,6 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n   // combined index\n   //\n   // This is copied from `lib/LTO/ThinLTOCodeGenerator.cpp`\n-#if LLVM_VERSION_GE(7, 0)\n   auto deadIsPrevailing = [&](GlobalValue::GUID G) {\n     return PrevailingType::Unknown;\n   };\n@@ -934,9 +927,6 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n                                   deadIsPrevailing, /* ImportEnabled = */ false);\n #else\n   computeDeadSymbols(Ret->Index, Ret->GUIDPreservedSymbols, deadIsPrevailing);\n-#endif\n-#else\n-  computeDeadSymbols(Ret->Index, Ret->GUIDPreservedSymbols);\n #endif\n   ComputeCrossModuleImport(\n     Ret->Index,"}, {"sha": "a83ba9a8f1308fddcfd8ae7ce4cc180e50a82fe2", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "patch": "@@ -88,11 +88,7 @@ extern \"C\" char *LLVMRustGetLastError(void) {\n }\n \n extern \"C\" unsigned int LLVMRustGetInstructionCount(LLVMModuleRef M) {\n-#if LLVM_VERSION_GE(7, 0)\n   return unwrap(M)->getInstructionCount();\n-#else\n-  report_fatal_error(\"Module::getInstructionCount not available before LLVM 7\");\n-#endif\n }\n \n extern \"C\" void LLVMRustSetLastError(const char *Err) {\n@@ -761,14 +757,10 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateVariantPart(\n     LLVMMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n     uint32_t AlignInBits, LLVMRustDIFlags Flags, LLVMMetadataRef Discriminator,\n     LLVMMetadataRef Elements, const char *UniqueId) {\n-#if LLVM_VERSION_GE(7, 0)\n   return wrap(Builder->createVariantPart(\n       unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNumber,\n       SizeInBits, AlignInBits, fromRust(Flags), unwrapDI<DIDerivedType>(Discriminator),\n       DINodeArray(unwrapDI<MDTuple>(Elements)), UniqueId));\n-#else\n-  abort();\n-#endif\n }\n \n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateMemberType(\n@@ -787,7 +779,6 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateVariantMemberType(\n     const char *Name, LLVMMetadataRef File, unsigned LineNo, uint64_t SizeInBits,\n     uint32_t AlignInBits, uint64_t OffsetInBits, LLVMValueRef Discriminant,\n     LLVMRustDIFlags Flags, LLVMMetadataRef Ty) {\n-#if LLVM_VERSION_GE(7, 0)\n   llvm::ConstantInt* D = nullptr;\n   if (Discriminant) {\n     D = unwrap<llvm::ConstantInt>(Discriminant);\n@@ -796,12 +787,6 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateVariantMemberType(\n                                                unwrapDI<DIFile>(File), LineNo,\n                                                SizeInBits, AlignInBits, OffsetInBits, D,\n                                                fromRust(Flags), unwrapDI<DIType>(Ty)));\n-#else\n-  return wrap(Builder->createMemberType(unwrapDI<DIDescriptor>(Scope), Name,\n-                                        unwrapDI<DIFile>(File), LineNo,\n-                                        SizeInBits, AlignInBits, OffsetInBits,\n-                                        fromRust(Flags), unwrapDI<DIType>(Ty)));\n-#endif\n }\n \n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateLexicalBlock(\n@@ -911,18 +896,10 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateEnumerationType(\n     LLVMMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n     uint32_t AlignInBits, LLVMMetadataRef Elements,\n     LLVMMetadataRef ClassTy, bool IsScoped) {\n-#if LLVM_VERSION_GE(7, 0)\n   return wrap(Builder->createEnumerationType(\n       unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNumber,\n       SizeInBits, AlignInBits, DINodeArray(unwrapDI<MDTuple>(Elements)),\n       unwrapDI<DIType>(ClassTy), \"\", IsScoped));\n-#else\n-  // Ignore IsScoped on older LLVM.\n-  return wrap(Builder->createEnumerationType(\n-      unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNumber,\n-      SizeInBits, AlignInBits, DINodeArray(unwrapDI<MDTuple>(Elements)),\n-      unwrapDI<DIType>(ClassTy), \"\"));\n-#endif\n }\n \n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateUnionType(\n@@ -1275,34 +1252,20 @@ extern \"C\" LLVMValueRef LLVMRustBuildMemCpy(LLVMBuilderRef B,\n                                             LLVMValueRef Dst, unsigned DstAlign,\n                                             LLVMValueRef Src, unsigned SrcAlign,\n                                             LLVMValueRef Size, bool IsVolatile) {\n-#if LLVM_VERSION_GE(7, 0)\n   return wrap(unwrap(B)->CreateMemCpy(\n       unwrap(Dst), DstAlign,\n       unwrap(Src), SrcAlign,\n       unwrap(Size), IsVolatile));\n-#else\n-  unsigned Align = std::min(DstAlign, SrcAlign);\n-  return wrap(unwrap(B)->CreateMemCpy(\n-      unwrap(Dst), unwrap(Src),\n-      unwrap(Size), Align, IsVolatile));\n-#endif\n }\n \n extern \"C\" LLVMValueRef LLVMRustBuildMemMove(LLVMBuilderRef B,\n                                              LLVMValueRef Dst, unsigned DstAlign,\n                                              LLVMValueRef Src, unsigned SrcAlign,\n                                              LLVMValueRef Size, bool IsVolatile) {\n-#if LLVM_VERSION_GE(7, 0)\n   return wrap(unwrap(B)->CreateMemMove(\n       unwrap(Dst), DstAlign,\n       unwrap(Src), SrcAlign,\n       unwrap(Size), IsVolatile));\n-#else\n-  unsigned Align = std::min(DstAlign, SrcAlign);\n-  return wrap(unwrap(B)->CreateMemMove(\n-      unwrap(Dst), unwrap(Src),\n-      unwrap(Size), Align, IsVolatile));\n-#endif\n }\n \n extern \"C\" LLVMValueRef"}, {"sha": "72447fbc079dd7a81db0a77d6ad2f1246e7d976b", "filename": "src/test/codegen/align-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Ftest%2Fcodegen%2Falign-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Ftest%2Fcodegen%2Falign-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Falign-enum.rs?ref=8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "patch": "@@ -1,6 +1,5 @@\n // compile-flags: -C no-prepopulate-passes\n // ignore-tidy-linelength\n-// min-llvm-version 7.0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "5e290323907d052708e55612d59aeda844c66848", "filename": "src/test/codegen/align-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Ftest%2Fcodegen%2Falign-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Ftest%2Fcodegen%2Falign-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Falign-struct.rs?ref=8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "patch": "@@ -1,6 +1,5 @@\n // compile-flags: -C no-prepopulate-passes\n // ignore-tidy-linelength\n-// min-llvm-version 7.0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "7d65ad1435e121d8502e03a99897e8e67df98b3f", "filename": "src/test/codegen/consts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Ftest%2Fcodegen%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Ftest%2Fcodegen%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fconsts.rs?ref=8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "patch": "@@ -1,6 +1,5 @@\n // compile-flags: -C no-prepopulate-passes\n // ignore-tidy-linelength\n-// min-llvm-version 7.0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "f3f5202206cedce800fde14a03ef8b279f053fa1", "filename": "src/test/codegen/packed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Ftest%2Fcodegen%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Ftest%2Fcodegen%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpacked.rs?ref=8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "patch": "@@ -1,6 +1,5 @@\n // ignore-tidy-linelength\n // compile-flags: -C no-prepopulate-passes\n-// min-llvm-version 7.0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "99f3464c0768d9b9ad096488fcb706b8523dd712", "filename": "src/test/codegen/repeat-trusted-len.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs?ref=8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "patch": "@@ -1,6 +1,5 @@\n // compile-flags: -O\n // ignore-tidy-linelength\n-// min-llvm-version 7.0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "4e0abed78cd642032cfad4158424b756293eeefb", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-minmax.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-minmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-minmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-minmax.rs?ref=8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "patch": "@@ -1,5 +1,3 @@\n-// min-llvm-version 7.0\n-\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "4ea003e99ad28b915564f928be5b2f00bf88345e", "filename": "src/test/codegen/stores.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Ftest%2Fcodegen%2Fstores.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Ftest%2Fcodegen%2Fstores.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstores.rs?ref=8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "patch": "@@ -1,6 +1,5 @@\n // compile-flags: -C no-prepopulate-passes\n // ignore-tidy-linelength\n-// min-llvm-version 7.0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "d2702894842840ab18e08865719f1ebbf33270df", "filename": "src/test/run-make-fulldeps/emit-stack-sizes/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Ftest%2Frun-make-fulldeps%2Femit-stack-sizes%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Ftest%2Frun-make-fulldeps%2Femit-stack-sizes%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Femit-stack-sizes%2FMakefile?ref=8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "patch": "@@ -2,7 +2,6 @@\n \n # ignore-windows\n # ignore-macos\n-# min-llvm-version 6.0\n #\n # This feature only works when the output object format is ELF so we ignore\n # macOS and Windows"}, {"sha": "5f0aa11af5fb8db540b5869bbd3796f9369c73c0", "filename": "src/test/ui/simd/simd-intrinsic-float-minmax.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-float-minmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-float-minmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-float-minmax.rs?ref=8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // ignore-emscripten\n-// min-llvm-version 7.0\n \n // Test that the simd_f{min,max} intrinsics produce the correct results.\n "}, {"sha": "2d51cab675e00bb134a6f474b7e0f19adadaecbe", "filename": "src/test/ui/target-feature/gate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs?ref=8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "patch": "@@ -25,7 +25,6 @@\n // gate-test-movbe_target_feature\n // gate-test-rtm_target_feature\n // gate-test-f16c_target_feature\n-// min-llvm-version 6.0\n \n #[target_feature(enable = \"avx512bw\")]\n //~^ ERROR: currently unstable"}, {"sha": "423a893e88f5e179e78a8e2404f49a537ddffaf7", "filename": "src/test/ui/target-feature/gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr?ref=8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the target feature `avx512bw` is currently unstable\n-  --> $DIR/gate.rs:30:18\n+  --> $DIR/gate.rs:29:18\n    |\n LL | #[target_feature(enable = \"avx512bw\")]\n    |                  ^^^^^^^^^^^^^^^^^^^"}]}