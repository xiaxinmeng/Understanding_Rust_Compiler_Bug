{"sha": "55f3ca2b7442761593e172e094a69660f4993b74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ZjNjYTJiNzQ0Mjc2MTU5M2UxNzJlMDk0YTY5NjYwZjQ5OTNiNzQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-27T22:46:05Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-27T22:46:05Z"}, "message": "Test that `ItemTree` works as intended", "tree": {"sha": "dd4458cc043cc68caf38e40def5ee73d0f9345a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd4458cc043cc68caf38e40def5ee73d0f9345a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55f3ca2b7442761593e172e094a69660f4993b74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55f3ca2b7442761593e172e094a69660f4993b74", "html_url": "https://github.com/rust-lang/rust/commit/55f3ca2b7442761593e172e094a69660f4993b74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55f3ca2b7442761593e172e094a69660f4993b74/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26b4777e1fce193e0842b7a1c9b85f08eb3ae2d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/26b4777e1fce193e0842b7a1c9b85f08eb3ae2d7", "html_url": "https://github.com/rust-lang/rust/commit/26b4777e1fce193e0842b7a1c9b85f08eb3ae2d7"}], "stats": {"total": 74, "additions": 73, "deletions": 1}, "files": [{"sha": "7bf152e26ccb9c0149e2f165f662faa92a31b5eb", "filename": "crates/hir_def/src/nameres/tests/incremental.rs", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/55f3ca2b7442761593e172e094a69660f4993b74/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f3ca2b7442761593e172e094a69660f4993b74/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs?ref=55f3ca2b7442761593e172e094a69660f4993b74", "patch": "@@ -1,6 +1,8 @@\n use std::sync::Arc;\n \n-use base_db::SourceDatabaseExt;\n+use base_db::{salsa::SweepStrategy, SourceDatabaseExt};\n+\n+use crate::{AdtId, ModuleDefId};\n \n use super::*;\n \n@@ -163,3 +165,73 @@ m!(Z);\n         assert_eq!(n_reparsed_macros, 0);\n     }\n }\n+\n+#[test]\n+fn item_tree_prevents_reparsing() {\n+    // The `ItemTree` is used by both name resolution and the various queries in `adt.rs` and\n+    // `data.rs`. After computing the `ItemTree` and deleting the parse tree, we should be able to\n+    // run those other queries without triggering a reparse.\n+\n+    let (db, pos) = TestDB::with_position(\n+        r#\"\n+pub struct S;\n+pub union U {}\n+pub enum E {\n+    Variant,\n+}\n+pub fn f(_: S) { $0 }\n+pub trait Tr {}\n+impl Tr for () {}\n+pub const C: u8 = 0;\n+pub static ST: u8 = 0;\n+pub type Ty = ();\n+\"#,\n+    );\n+    let krate = db.test_crate();\n+    {\n+        let events = db.log_executed(|| {\n+            db.file_item_tree(pos.file_id.into());\n+        });\n+        let n_calculated_item_trees = events.iter().filter(|it| it.contains(\"item_tree\")).count();\n+        assert_eq!(n_calculated_item_trees, 1);\n+        let n_parsed_files = events.iter().filter(|it| it.contains(\"parse(\")).count();\n+        assert_eq!(n_parsed_files, 1);\n+    }\n+\n+    // Delete the parse tree.\n+    let sweep = SweepStrategy::default().discard_values().sweep_all_revisions();\n+    base_db::ParseQuery.in_db(&db).sweep(sweep);\n+\n+    {\n+        let events = db.log_executed(|| {\n+            let crate_def_map = db.crate_def_map(krate);\n+            let (_, module_data) = crate_def_map.modules.iter().last().unwrap();\n+            assert_eq!(module_data.scope.resolutions().count(), 8);\n+            assert_eq!(module_data.scope.impls().count(), 1);\n+\n+            for imp in module_data.scope.impls() {\n+                db.impl_data(imp);\n+            }\n+\n+            for (_, res) in module_data.scope.resolutions() {\n+                match res.values.or(res.types).unwrap().0 {\n+                    ModuleDefId::FunctionId(f) => drop(db.function_data(f)),\n+                    ModuleDefId::AdtId(adt) => match adt {\n+                        AdtId::StructId(it) => drop(db.struct_data(it)),\n+                        AdtId::UnionId(it) => drop(db.union_data(it)),\n+                        AdtId::EnumId(it) => drop(db.enum_data(it)),\n+                    },\n+                    ModuleDefId::ConstId(it) => drop(db.const_data(it)),\n+                    ModuleDefId::StaticId(it) => drop(db.static_data(it)),\n+                    ModuleDefId::TraitId(it) => drop(db.trait_data(it)),\n+                    ModuleDefId::TypeAliasId(it) => drop(db.type_alias_data(it)),\n+                    ModuleDefId::EnumVariantId(_)\n+                    | ModuleDefId::ModuleId(_)\n+                    | ModuleDefId::BuiltinType(_) => unreachable!(),\n+                }\n+            }\n+        });\n+        let n_reparsed_files = events.iter().filter(|it| it.contains(\"parse(\")).count();\n+        assert_eq!(n_reparsed_files, 0);\n+    }\n+}"}]}