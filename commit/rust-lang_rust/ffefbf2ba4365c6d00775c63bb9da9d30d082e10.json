{"sha": "ffefbf2ba4365c6d00775c63bb9da9d30d082e10", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZWZiZjJiYTQzNjVjNmQwMDc3NWM2M2JiOWRhOWQzMGQwODJlMTA=", "commit": {"author": {"name": "Brandon", "email": "brandondong604@hotmail.com", "date": "2021-04-14T04:07:52Z"}, "committer": {"name": "Brandon", "email": "brandondong604@hotmail.com", "date": "2021-04-15T04:34:01Z"}, "message": "Fix extract function with partial block selection", "tree": {"sha": "29e27e06365eba57db41b618105328434b1e6d7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29e27e06365eba57db41b618105328434b1e6d7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffefbf2ba4365c6d00775c63bb9da9d30d082e10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffefbf2ba4365c6d00775c63bb9da9d30d082e10", "html_url": "https://github.com/rust-lang/rust/commit/ffefbf2ba4365c6d00775c63bb9da9d30d082e10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffefbf2ba4365c6d00775c63bb9da9d30d082e10/comments", "author": {"login": "brandondong", "id": 13722457, "node_id": "MDQ6VXNlcjEzNzIyNDU3", "avatar_url": "https://avatars.githubusercontent.com/u/13722457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandondong", "html_url": "https://github.com/brandondong", "followers_url": "https://api.github.com/users/brandondong/followers", "following_url": "https://api.github.com/users/brandondong/following{/other_user}", "gists_url": "https://api.github.com/users/brandondong/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandondong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandondong/subscriptions", "organizations_url": "https://api.github.com/users/brandondong/orgs", "repos_url": "https://api.github.com/users/brandondong/repos", "events_url": "https://api.github.com/users/brandondong/events{/privacy}", "received_events_url": "https://api.github.com/users/brandondong/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brandondong", "id": 13722457, "node_id": "MDQ6VXNlcjEzNzIyNDU3", "avatar_url": "https://avatars.githubusercontent.com/u/13722457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandondong", "html_url": "https://github.com/brandondong", "followers_url": "https://api.github.com/users/brandondong/followers", "following_url": "https://api.github.com/users/brandondong/following{/other_user}", "gists_url": "https://api.github.com/users/brandondong/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandondong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandondong/subscriptions", "organizations_url": "https://api.github.com/users/brandondong/orgs", "repos_url": "https://api.github.com/users/brandondong/repos", "events_url": "https://api.github.com/users/brandondong/events{/privacy}", "received_events_url": "https://api.github.com/users/brandondong/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10a243ea55565a0dd1de52f8f802c3e3a7bfef54", "url": "https://api.github.com/repos/rust-lang/rust/commits/10a243ea55565a0dd1de52f8f802c3e3a7bfef54", "html_url": "https://github.com/rust-lang/rust/commit/10a243ea55565a0dd1de52f8f802c3e3a7bfef54"}], "stats": {"total": 64, "additions": 62, "deletions": 2}, "files": [{"sha": "78a57fbdce18bece21dad9ef97bce9d17ebeeef8", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 62, "deletions": 2, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ffefbf2ba4365c6d00775c63bb9da9d30d082e10/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffefbf2ba4365c6d00775c63bb9da9d30d082e10/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=ffefbf2ba4365c6d00775c63bb9da9d30d082e10", "patch": "@@ -599,7 +599,12 @@ fn extraction_target(node: &SyntaxNode, selection_range: TextRange) -> Option<Fu\n     // we have selected a few statements in a block\n     // so covering_element returns the whole block\n     if node.kind() == BLOCK_EXPR {\n-        let body = FunctionBody::from_range(node.clone(), selection_range);\n+        // Extract the full statements.\n+        let statements_range = node\n+            .children()\n+            .filter(|c| selection_range.intersect(c.text_range()).is_some())\n+            .fold(selection_range, |acc, c| acc.cover(c.text_range()));\n+        let body = FunctionBody::from_range(node.clone(), statements_range);\n         if body.is_some() {\n             return body;\n         }\n@@ -610,7 +615,8 @@ fn extraction_target(node: &SyntaxNode, selection_range: TextRange) -> Option<Fu\n     // so we try to expand covering_element to parent and repeat the previous\n     if let Some(parent) = node.parent() {\n         if parent.kind() == BLOCK_EXPR {\n-            let body = FunctionBody::from_range(parent, selection_range);\n+            // Extract the full statement.\n+            let body = FunctionBody::from_range(parent, node.text_range());\n             if body.is_some() {\n                 return body;\n             }\n@@ -1784,6 +1790,60 @@ fn $0fun_name() -> i32 {\n         );\n     }\n \n+    #[test]\n+    fn extract_partial_block_single_line() {\n+        check_assist(\n+            extract_function,\n+            r#\"\n+fn foo() {\n+    let n = 1;\n+    let mut v = $0n * n;$0\n+    v += 1;\n+}\"#,\n+            r#\"\n+fn foo() {\n+    let n = 1;\n+    let mut v = fun_name(n);\n+    v += 1;\n+}\n+\n+fn $0fun_name(n: i32) -> i32 {\n+    let mut v = n * n;\n+    v\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn extract_partial_block() {\n+        check_assist(\n+            extract_function,\n+            r#\"\n+fn foo() {\n+    let m = 2;\n+    let n = 1;\n+    let mut v = m $0* n;\n+    let mut w = 3;$0\n+    v += 1;\n+    w += 1;\n+}\"#,\n+            r#\"\n+fn foo() {\n+    let m = 2;\n+    let n = 1;\n+    let (mut v, mut w) = fun_name(m, n);\n+    v += 1;\n+    w += 1;\n+}\n+\n+fn $0fun_name(m: i32, n: i32) -> (i32, i32) {\n+    let mut v = m * n;\n+    let mut w = 3;\n+    (v, w)\n+}\"#,\n+        );\n+    }\n+\n     #[test]\n     fn argument_form_expr() {\n         check_assist("}]}