{"sha": "ef1b50753555a451b47586042c18c03ede302316", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMWI1MDc1MzU1NWE0NTFiNDc1ODYwNDJjMThjMDNlZGUzMDIzMTY=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-13T06:13:39Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-13T13:37:09Z"}, "message": "Fix build after rebase", "tree": {"sha": "c96a428423803ea210b15a6216964bcf45bdb219", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c96a428423803ea210b15a6216964bcf45bdb219"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef1b50753555a451b47586042c18c03ede302316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef1b50753555a451b47586042c18c03ede302316", "html_url": "https://github.com/rust-lang/rust/commit/ef1b50753555a451b47586042c18c03ede302316", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef1b50753555a451b47586042c18c03ede302316/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b8dacee9e3a284bc9040c080666b04b21c7b7a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b8dacee9e3a284bc9040c080666b04b21c7b7a8", "html_url": "https://github.com/rust-lang/rust/commit/6b8dacee9e3a284bc9040c080666b04b21c7b7a8"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "8e0f3082bae7a5853a7256ca13021f6fea429f71", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef1b50753555a451b47586042c18c03ede302316/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef1b50753555a451b47586042c18c03ede302316/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ef1b50753555a451b47586042c18c03ede302316", "patch": "@@ -1704,7 +1704,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let mut type_scheme = self.tcx.lookup_item_type(did);\n         if type_scheme.ty.is_fn() {\n             // Tuple variants have fn type even in type namespace, extract true variant type from it\n-            let fn_ret = self.tcx.no_late_bound_regions(&type_scheme.ty.fn_ret()).unwrap().unwrap();\n+            let fn_ret = self.tcx.no_late_bound_regions(&type_scheme.ty.fn_ret()).unwrap();\n             type_scheme = ty::TypeScheme { ty: fn_ret, generics: type_scheme.generics }\n         }\n         let type_predicates = self.tcx.lookup_predicates(did);"}]}