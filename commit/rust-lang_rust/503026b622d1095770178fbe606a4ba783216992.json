{"sha": "503026b622d1095770178fbe606a4ba783216992", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMzAyNmI2MjJkMTA5NTc3MDE3OGZiZTYwNmE0YmE3ODMyMTY5OTI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-03T16:21:37Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-29T08:27:25Z"}, "message": "mem::zeroed/uninit: panic on types that do not permit zero-initialization", "tree": {"sha": "f45902b1df4387d4e45207d34cfb5234b4ff22fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f45902b1df4387d4e45207d34cfb5234b4ff22fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/503026b622d1095770178fbe606a4ba783216992", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/503026b622d1095770178fbe606a4ba783216992", "html_url": "https://github.com/rust-lang/rust/commit/503026b622d1095770178fbe606a4ba783216992", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/503026b622d1095770178fbe606a4ba783216992/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55aee8d49628ae8218e91745c388d5dc36771248", "url": "https://api.github.com/repos/rust-lang/rust/commits/55aee8d49628ae8218e91745c388d5dc36771248", "html_url": "https://github.com/rust-lang/rust/commit/55aee8d49628ae8218e91745c388d5dc36771248"}], "stats": {"total": 417, "additions": 280, "deletions": 137}, "files": [{"sha": "c02dabcacde85db70769388e507a81ed3168855c", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/503026b622d1095770178fbe606a4ba783216992/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503026b622d1095770178fbe606a4ba783216992/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=503026b622d1095770178fbe606a4ba783216992", "patch": "@@ -721,6 +721,16 @@ extern \"rust-intrinsic\" {\n     /// This will statically either panic, or do nothing.\n     pub fn panic_if_uninhabited<T>();\n \n+    /// A guard for unsafe functions that cannot ever be executed if `T` does not permit\n+    /// zero-initialization: This will statically either panic, or do nothing.\n+    #[cfg(not(bootstrap))]\n+    pub fn panic_if_zero_invalid<T>();\n+\n+    /// A guard for unsafe functions that cannot ever be executed if `T` has invalid\n+    /// bit patterns: This will statically either panic, or do nothing.\n+    #[cfg(not(bootstrap))]\n+    pub fn panic_if_any_invalid<T>();\n+\n     /// Gets a reference to a static `Location` indicating where it was called.\n     #[rustc_const_unstable(feature = \"const_caller_location\", issue = \"47809\")]\n     pub fn caller_location() -> &'static crate::panic::Location<'static>;"}, {"sha": "124eb37fff17edf76be84c960e27dbab313b3cf4", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/503026b622d1095770178fbe606a4ba783216992/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503026b622d1095770178fbe606a4ba783216992/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=503026b622d1095770178fbe606a4ba783216992", "patch": "@@ -495,6 +495,9 @@ pub const fn needs_drop<T>() -> bool {\n #[allow(deprecated)]\n #[rustc_diagnostic_item = \"mem_zeroed\"]\n pub unsafe fn zeroed<T>() -> T {\n+    #[cfg(not(bootstrap))]\n+    intrinsics::panic_if_zero_invalid::<T>();\n+    #[cfg(bootstrap)]\n     intrinsics::panic_if_uninhabited::<T>();\n     intrinsics::init()\n }\n@@ -528,6 +531,9 @@ pub unsafe fn zeroed<T>() -> T {\n #[allow(deprecated)]\n #[rustc_diagnostic_item = \"mem_uninitialized\"]\n pub unsafe fn uninitialized<T>() -> T {\n+    #[cfg(not(bootstrap))]\n+    intrinsics::panic_if_any_invalid::<T>();\n+    #[cfg(bootstrap)]\n     intrinsics::panic_if_uninhabited::<T>();\n     intrinsics::uninit()\n }"}, {"sha": "6b5f540e5b83033df77340afdb2513b8705e721b", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/503026b622d1095770178fbe606a4ba783216992/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503026b622d1095770178fbe606a4ba783216992/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=503026b622d1095770178fbe606a4ba783216992", "patch": "@@ -1907,36 +1907,6 @@ impl<'tcx, T: HasTyCtxt<'tcx>> HasTyCtxt<'tcx> for LayoutCx<'tcx, T> {\n     }\n }\n \n-pub trait MaybeResult<T> {\n-    type Error;\n-\n-    fn from(x: Result<T, Self::Error>) -> Self;\n-    fn to_result(self) -> Result<T, Self::Error>;\n-}\n-\n-impl<T> MaybeResult<T> for T {\n-    type Error = !;\n-\n-    fn from(x: Result<T, Self::Error>) -> Self {\n-        let Ok(x) = x;\n-        x\n-    }\n-    fn to_result(self) -> Result<T, Self::Error> {\n-        Ok(self)\n-    }\n-}\n-\n-impl<T, E> MaybeResult<T> for Result<T, E> {\n-    type Error = E;\n-\n-    fn from(x: Result<T, Self::Error>) -> Self {\n-        x\n-    }\n-    fn to_result(self) -> Result<T, Self::Error> {\n-        self\n-    }\n-}\n-\n pub type TyLayout<'tcx> = ::rustc_target::abi::TyLayout<'tcx, Ty<'tcx>>;\n \n impl<'tcx> LayoutOf for LayoutCx<'tcx, TyCtxt<'tcx>> {"}, {"sha": "923e2486ace688ab37438789cb23b0318bfdcefe", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/503026b622d1095770178fbe606a4ba783216992/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503026b622d1095770178fbe606a4ba783216992/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=503026b622d1095770178fbe606a4ba783216992", "patch": "@@ -521,11 +521,36 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         }\n \n         // Emit a panic or a no-op for `panic_if_uninhabited`.\n-        if intrinsic == Some(\"panic_if_uninhabited\") {\n+        // These are intrinsics that compile to panics so that we can get a message\n+        // which mentions the offending type, even from a const context.\n+        #[derive(Debug, PartialEq)]\n+        enum PanicIntrinsic { IfUninhabited, IfZeroInvalid, IfAnyInvalid };\n+        let panic_intrinsic = intrinsic.and_then(|i| match i {\n+            \"panic_if_uninhabited\" => Some(PanicIntrinsic::IfUninhabited),\n+            \"panic_if_zero_invalid\" => Some(PanicIntrinsic::IfZeroInvalid),\n+            \"panic_if_any_invalid\" => Some(PanicIntrinsic::IfAnyInvalid),\n+            _ => None\n+        });\n+        if let Some(intrinsic) = panic_intrinsic {\n+            use PanicIntrinsic::*;\n             let ty = instance.unwrap().substs.type_at(0);\n             let layout = bx.layout_of(ty);\n-            if layout.abi.is_uninhabited() {\n-                let msg_str = format!(\"Attempted to instantiate uninhabited type {}\", ty);\n+            let do_panic = match intrinsic {\n+                IfUninhabited => layout.abi.is_uninhabited(),\n+                IfZeroInvalid => // We unwrap as the error type is `!`.\n+                    !layout.might_permit_raw_init(&bx, /*zero:*/ true).unwrap(),\n+                IfAnyInvalid => // We unwrap as the error type is `!`.\n+                    !layout.might_permit_raw_init(&bx, /*zero:*/ false).unwrap(),\n+            };\n+            if do_panic {\n+                let msg_str = if layout.abi.is_uninhabited() {\n+                    // Use this error even for the other intrinsics as it is more precise.\n+                    format!(\"attempted to instantiate uninhabited type `{}`\", ty)\n+                } else if intrinsic == IfZeroInvalid {\n+                    format!(\"attempted to zero-initialize type `{}`, which is invalid\", ty)\n+                } else {\n+                    format!(\"attempted to leave type `{}` uninitialized, which is invalid\", ty)\n+                };\n                 let msg = bx.const_str(Symbol::intern(&msg_str));\n                 let location = self.get_caller_location(&mut bx, span).immediate();\n "}, {"sha": "7020939fa20b234e8318fb9ecf9ac4241be88f3f", "filename": "src/librustc_index/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/503026b622d1095770178fbe606a4ba783216992/src%2Flibrustc_index%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503026b622d1095770178fbe606a4ba783216992/src%2Flibrustc_index%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fvec.rs?ref=503026b622d1095770178fbe606a4ba783216992", "patch": "@@ -196,7 +196,7 @@ macro_rules! newtype_index {\n \n             #[inline]\n             fn index(self) -> usize {\n-                usize::from(self)\n+                self.as_usize()\n             }\n         }\n "}, {"sha": "13a0eb66f32a5d53d7abd5e8978305f7d54d1ab0", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/503026b622d1095770178fbe606a4ba783216992/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503026b622d1095770178fbe606a4ba783216992/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=503026b622d1095770178fbe606a4ba783216992", "patch": "@@ -919,6 +919,7 @@ impl<'a, Ty> Deref for TyLayout<'a, Ty> {\n     }\n }\n \n+/// Trait for context types that can compute layouts of things.\n pub trait LayoutOf {\n     type Ty;\n     type TyLayout;\n@@ -929,6 +930,39 @@ pub trait LayoutOf {\n     }\n }\n \n+/// The `TyLayout` above will always be a `MaybeResult<TyLayout<'_, Self>>`.\n+/// We can't add the bound due to the lifetime, but this trait is still useful when\n+/// writing code that's generic over the `LayoutOf` impl.\n+pub trait MaybeResult<T> {\n+    type Error;\n+\n+    fn from(x: Result<T, Self::Error>) -> Self;\n+    fn to_result(self) -> Result<T, Self::Error>;\n+}\n+\n+impl<T> MaybeResult<T> for T {\n+    type Error = !;\n+\n+    fn from(x: Result<T, Self::Error>) -> Self {\n+        let Ok(x) = x;\n+        x\n+    }\n+    fn to_result(self) -> Result<T, Self::Error> {\n+        Ok(self)\n+    }\n+}\n+\n+impl<T, E> MaybeResult<T> for Result<T, E> {\n+    type Error = E;\n+\n+    fn from(x: Result<T, Self::Error>) -> Self {\n+        x\n+    }\n+    fn to_result(self) -> Result<T, Self::Error> {\n+        self\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq)]\n pub enum PointerKind {\n     /// Most general case, we know no restrictions to tell LLVM.\n@@ -969,13 +1003,17 @@ impl<'a, Ty> TyLayout<'a, Ty> {\n     {\n         Ty::for_variant(self, cx, variant_index)\n     }\n+\n+    /// Callers might want to use `C: LayoutOf<Ty=Ty, TyLayout: MaybeResult<Self>>`\n+    /// to allow recursion (see `might_permit_zero_init` below for an example).\n     pub fn field<C>(self, cx: &C, i: usize) -> C::TyLayout\n     where\n         Ty: TyLayoutMethods<'a, C>,\n         C: LayoutOf<Ty = Ty>,\n     {\n         Ty::field(self, cx, i)\n     }\n+\n     pub fn pointee_info_at<C>(self, cx: &C, offset: Size) -> Option<PointeeInfo>\n     where\n         Ty: TyLayoutMethods<'a, C>,\n@@ -999,4 +1037,81 @@ impl<'a, Ty> TyLayout<'a, Ty> {\n             Abi::Aggregate { sized } => sized && self.size.bytes() == 0,\n         }\n     }\n+\n+    /// Determines if this type permits \"raw\" initialization by just transmuting some\n+    /// memory into an instance of `T`.\n+    /// `zero` indicates if the memory is zero-initialized, or alternatively\n+    /// left entirely uninitialized.\n+    /// This is conservative: in doubt, it will answer `true`.\n+    pub fn might_permit_raw_init<C, E>(\n+        self,\n+        cx: &C,\n+        zero: bool,\n+    ) -> Result<bool, E>\n+    where\n+        Self: Copy,\n+        Ty: TyLayoutMethods<'a, C>,\n+        C: LayoutOf<Ty = Ty, TyLayout: MaybeResult<Self, Error = E>>\n+    {\n+        let scalar_allows_raw_init = move |s: &Scalar| -> bool {\n+            let range = &s.valid_range;\n+            if zero {\n+                // The range must contain 0.\n+                range.contains(&0) ||\n+                (*range.start() > *range.end()) // wrap-around allows 0\n+            } else {\n+                // The range must include all values.\n+                *range.start() == range.end().wrapping_add(1)\n+            }\n+        };\n+\n+        // Abi is the most informative here.\n+        let res = match &self.abi {\n+            Abi::Uninhabited => false, // definitely UB\n+            Abi::Scalar(s) => scalar_allows_raw_init(s),\n+            Abi::ScalarPair(s1, s2) =>\n+                scalar_allows_raw_init(s1) && scalar_allows_raw_init(s2),\n+            Abi::Vector { element: s, count } =>\n+                *count == 0 || scalar_allows_raw_init(s),\n+            Abi::Aggregate { .. } => {\n+                match self.variants {\n+                    Variants::Multiple { .. } =>\n+                        if zero {\n+                            // FIXME: could we identify the variant with discriminant 0, check that?\n+                            true\n+                        } else {\n+                            // FIXME: This needs to have some sort of discriminant,\n+                            // which cannot be undef. But for now we are conservative.\n+                            true\n+                        },\n+                    Variants::Single { .. } => {\n+                        // For aggregates, recurse.\n+                        match self.fields {\n+                            FieldPlacement::Union(..) => true, // An all-0 unit is fine.\n+                            FieldPlacement::Array { .. } =>\n+                                // FIXME: The widely use smallvec 0.6 creates uninit arrays\n+                                // with any element type, so let us not (yet) complain about that.\n+                                // count == 0 ||\n+                                // self.field(cx, 0).to_result()?.might_permit_raw_init(cx, zero)?\n+                                true,\n+                            FieldPlacement::Arbitrary { ref offsets, .. } => {\n+                                let mut res = true;\n+                                // Check that all fields accept zero-init.\n+                                for idx in 0..offsets.len() {\n+                                    let field = self.field(cx, idx).to_result()?;\n+                                    if !field.might_permit_raw_init(cx, zero)? {\n+                                        res = false;\n+                                        break;\n+                                    }\n+                                }\n+                                res\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        };\n+        trace!(\"might_permit_raw_init({:?}, zero={}) = {}\", self.details, zero, res);\n+        Ok(res)\n+    }\n }"}, {"sha": "3c397eb444d1d206ba680970326e3cfbf2556997", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/503026b622d1095770178fbe606a4ba783216992/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503026b622d1095770178fbe606a4ba783216992/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=503026b622d1095770178fbe606a4ba783216992", "patch": "@@ -10,6 +10,9 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(bool_to_option)]\n #![feature(nll)]\n+#![feature(never_type)]\n+#![feature(associated_type_bounds)]\n+#![feature(exhaustive_patterns)]\n \n #[macro_use]\n extern crate log;"}, {"sha": "321932fb193a01df990a178969b2f8cf240faa5e", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/503026b622d1095770178fbe606a4ba783216992/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503026b622d1095770178fbe606a4ba783216992/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=503026b622d1095770178fbe606a4ba783216992", "patch": "@@ -147,7 +147,10 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             ),\n             \"rustc_peek\" => (1, vec![param(0)], param(0)),\n             \"caller_location\" => (0, vec![], tcx.caller_location_ty()),\n-            \"panic_if_uninhabited\" => (1, Vec::new(), tcx.mk_unit()),\n+            \"panic_if_uninhabited\" |\n+            \"panic_if_zero_invalid\" |\n+            \"panic_if_any_invalid\" =>\n+                (1, Vec::new(), tcx.mk_unit()),\n             \"init\" => (1, Vec::new(), param(0)),\n             \"uninit\" => (1, Vec::new(), param(0)),\n             \"forget\" => (1, vec![param(0)], tcx.mk_unit()),"}, {"sha": "937f949a7b00ba38c36ba8cbff50bc6126d3434b", "filename": "src/test/ui/intrinsics/panic-uninitialized-zeroed.rs", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/503026b622d1095770178fbe606a4ba783216992/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503026b622d1095770178fbe606a4ba783216992/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs?ref=503026b622d1095770178fbe606a4ba783216992", "patch": "@@ -0,0 +1,113 @@\n+// run-pass\n+// ignore-wasm32-bare compiled with panic=abort by default\n+\n+// This test checks panic emitted from `mem::{uninitialized,zeroed}`.\n+\n+#![feature(never_type)]\n+#![allow(deprecated, invalid_value)]\n+\n+use std::{mem, panic};\n+use std::ptr::NonNull;\n+\n+#[allow(dead_code)]\n+struct Foo {\n+    x: u8,\n+    y: !,\n+}\n+\n+enum Bar {}\n+\n+#[allow(dead_code)]\n+enum OneVariant { Variant(i32) }\n+\n+fn test_panic_msg<T>(op: impl (FnOnce() -> T) + panic::UnwindSafe, msg: &str) {\n+    let err = panic::catch_unwind(op).err();\n+    assert_eq!(\n+        err.as_ref().and_then(|a| a.downcast_ref::<String>()).map(|s| &**s),\n+        Some(msg)\n+    );\n+}\n+\n+fn main() {\n+    unsafe {\n+        // Uninitialized types\n+        test_panic_msg(\n+            || mem::uninitialized::<!>(),\n+            \"attempted to instantiate uninhabited type `!`\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<!>(),\n+            \"attempted to instantiate uninhabited type `!`\"\n+        );\n+        test_panic_msg(\n+            || mem::MaybeUninit::<!>::uninit().assume_init(),\n+            \"attempted to instantiate uninhabited type `!`\"\n+        );\n+\n+        test_panic_msg(\n+            || mem::uninitialized::<Foo>(),\n+            \"attempted to instantiate uninhabited type `Foo`\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<Foo>(),\n+            \"attempted to instantiate uninhabited type `Foo`\"\n+        );\n+        test_panic_msg(\n+            || mem::MaybeUninit::<Foo>::uninit().assume_init(),\n+            \"attempted to instantiate uninhabited type `Foo`\"\n+        );\n+\n+        test_panic_msg(\n+            || mem::uninitialized::<Bar>(),\n+            \"attempted to instantiate uninhabited type `Bar`\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<Bar>(),\n+            \"attempted to instantiate uninhabited type `Bar`\"\n+        );\n+        test_panic_msg(\n+            || mem::MaybeUninit::<Bar>::uninit().assume_init(),\n+            \"attempted to instantiate uninhabited type `Bar`\"\n+        );\n+\n+        // Types that do not like zero-initialziation\n+        test_panic_msg(\n+            || mem::uninitialized::<fn()>(),\n+            \"attempted to leave type `fn()` uninitialized, which is invalid\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<fn()>(),\n+            \"attempted to zero-initialize type `fn()`, which is invalid\"\n+        );\n+\n+        test_panic_msg(\n+            || mem::uninitialized::<*const dyn Send>(),\n+            \"attempted to leave type `*const dyn std::marker::Send` uninitialized, which is invalid\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<*const dyn Send>(),\n+            \"attempted to zero-initialize type `*const dyn std::marker::Send`, which is invalid\"\n+        );\n+\n+        test_panic_msg(\n+            || mem::uninitialized::<(NonNull<u32>, u32, u32)>(),\n+            \"attempted to leave type `(std::ptr::NonNull<u32>, u32, u32)` uninitialized, \\\n+                which is invalid\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<(NonNull<u32>, u32, u32)>(),\n+            \"attempted to zero-initialize type `(std::ptr::NonNull<u32>, u32, u32)`, \\\n+                which is invalid\"\n+        );\n+\n+        test_panic_msg(\n+            || mem::uninitialized::<bool>(),\n+            \"attempted to leave type `bool` uninitialized, which is invalid\"\n+        );\n+\n+        // Some things that should work.\n+        let _val = mem::zeroed::<bool>();\n+        let _val = mem::zeroed::<OneVariant>();\n+        let _val = mem::zeroed::<Option<&'static i32>>();\n+    }\n+}"}, {"sha": "e0c30160b9e94be9ff2ceb286ad6d04151e26029", "filename": "src/test/ui/never_type/panic-uninitialized-zeroed.rs", "status": "removed", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fnever_type%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55aee8d49628ae8218e91745c388d5dc36771248/src%2Ftest%2Fui%2Fnever_type%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fpanic-uninitialized-zeroed.rs?ref=55aee8d49628ae8218e91745c388d5dc36771248", "patch": "@@ -1,102 +0,0 @@\n-// run-pass\n-// ignore-wasm32-bare compiled with panic=abort by default\n-// This test checks that instantiating an uninhabited type via `mem::{uninitialized,zeroed}` results\n-// in a runtime panic.\n-\n-#![feature(never_type)]\n-#![allow(deprecated, invalid_value)]\n-\n-use std::{mem, panic};\n-\n-#[allow(dead_code)]\n-struct Foo {\n-    x: u8,\n-    y: !,\n-}\n-\n-enum Bar {}\n-\n-fn main() {\n-    unsafe {\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::uninitialized::<!>()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type !\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::zeroed::<!>()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type !\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::MaybeUninit::<!>::uninit().assume_init()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type !\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::uninitialized::<Foo>()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type Foo\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::zeroed::<Foo>()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type Foo\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::MaybeUninit::<Foo>::uninit().assume_init()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type Foo\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::uninitialized::<Bar>()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type Bar\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::zeroed::<Bar>()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type Bar\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::MaybeUninit::<Bar>::uninit().assume_init()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type Bar\"\n-            })),\n-            Some(true)\n-        );\n-    }\n-}"}]}