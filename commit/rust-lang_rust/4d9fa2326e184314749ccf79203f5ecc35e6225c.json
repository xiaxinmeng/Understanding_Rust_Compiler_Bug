{"sha": "4d9fa2326e184314749ccf79203f5ecc35e6225c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkOWZhMjMyNmUxODQzMTQ3NDljY2Y3OTIwM2Y1ZWNjMzVlNjIyNWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-06T06:48:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-06T06:48:12Z"}, "message": "Auto merge of #52088 - kennytm:rollup, r=kennytm\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #51619 (rust: add initial changes to support powerpc64le musl)\n - #51793 (Fix variant background color on hover in search results)\n - #52005 (Update LLVM to bring in a wasm codegen fix)\n - #52016 (Deduplicate error reports for statics)\n - #52019 ([cross-lang-lto] Allow the linker to choose the LTO-plugin (which is useful when using LLD))\n - #52030 (Any docs preposition change)\n - #52031 (Strenghten synchronization in `Arc::is_unique`)\n - #52033 ([Gardening] Update outdated comments: ByVal -> Scalar)\n - #52055 (Include VS 2017 in error message.)\n - #52063 (Add a link to the rustc docs)\n - #52073 (Add a punch card to weird expressions test)\n - #52080 (Improve dependency deduplication diagnostics)\n - #52093 (rustc: Update tracking issue for wasm_import_module)\n - #52096 (Fix typo in cell.rs)\n\nFailed merges:", "tree": {"sha": "cb6e15283a2ed07d3b8f63bd5ef6147a0a4d1f2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb6e15283a2ed07d3b8f63bd5ef6147a0a4d1f2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d9fa2326e184314749ccf79203f5ecc35e6225c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d9fa2326e184314749ccf79203f5ecc35e6225c", "html_url": "https://github.com/rust-lang/rust/commit/4d9fa2326e184314749ccf79203f5ecc35e6225c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d9fa2326e184314749ccf79203f5ecc35e6225c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8403e1cda2e0cba4f2c7282ab5adb5392bef473", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8403e1cda2e0cba4f2c7282ab5adb5392bef473", "html_url": "https://github.com/rust-lang/rust/commit/a8403e1cda2e0cba4f2c7282ab5adb5392bef473"}, {"sha": "e6ddbabb5998d1a83918831f3859a95a2adb110c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6ddbabb5998d1a83918831f3859a95a2adb110c", "html_url": "https://github.com/rust-lang/rust/commit/e6ddbabb5998d1a83918831f3859a95a2adb110c"}], "stats": {"total": 211, "additions": 138, "deletions": 73}, "files": [{"sha": "a2acfe8b478e28579028b5097644cbb8e759ca8a", "filename": "README.md", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4d9fa2326e184314749ccf79203f5ecc35e6225c/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/4d9fa2326e184314749ccf79203f5ecc35e6225c/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -225,13 +225,16 @@ variety of channels on Mozilla's IRC network, irc.mozilla.org. The\n most popular channel is [#rust], a venue for general discussion about\n Rust. And a good place to ask for help would be [#rust-beginners].\n \n-Also, the [rustc guide] might be a good place to start if you want to\n-find out how various parts of the compiler work.\n+The [rustc guide] might be a good place to start if you want to find out how\n+various parts of the compiler work.\n+\n+Also, you may find the [rustdocs for the compiler itself][rustdocs] useful.\n \n [IRC]: https://en.wikipedia.org/wiki/Internet_Relay_Chat\n [#rust]: irc://irc.mozilla.org/rust\n [#rust-beginners]: irc://irc.mozilla.org/rust-beginners\n [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/about-this-guide.html\n+[rustdocs]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/\n \n ## License\n [license]: #license"}, {"sha": "168cbde7e0d1357c44cdb736dc84565867805707", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -115,6 +115,7 @@\n \n #![deny(warnings)]\n #![feature(core_intrinsics)]\n+#![feature(drain_filter)]\n \n #[macro_use]\n extern crate build_helper;"}, {"sha": "93b8880a900ef5539378d457d8f51fe73666f8dc", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -631,6 +631,7 @@ impl Step for Openssl {\n             \"powerpc-unknown-netbsd\" => \"BSD-generic32\",\n             \"powerpc64-unknown-linux-gnu\" => \"linux-ppc64\",\n             \"powerpc64le-unknown-linux-gnu\" => \"linux-ppc64le\",\n+            \"powerpc64le-unknown-linux-musl\" => \"linux-ppc64le\",\n             \"s390x-unknown-linux-gnu\" => \"linux64-s390x\",\n             \"sparc-unknown-linux-gnu\" => \"linux-sparcv9\",\n             \"sparc64-unknown-linux-gnu\" => \"linux64-sparcv9\","}, {"sha": "b3d7b9a91ecfe34e4ffecfbbc222cb11df095369", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -13,6 +13,7 @@ use std::env;\n use std::iter;\n use std::path::PathBuf;\n use std::process::{Command, exit};\n+use std::collections::HashSet;\n \n use Mode;\n use Compiler;\n@@ -122,8 +123,13 @@ impl Step for ToolBuild {\n         let mut duplicates = Vec::new();\n         let is_expected = compile::stream_cargo(builder, &mut cargo, &mut |msg| {\n             // Only care about big things like the RLS/Cargo for now\n-            if tool != \"rls\" && tool != \"cargo\" && tool != \"clippy-driver\" {\n-                return\n+            match tool {\n+                | \"rls\"\n+                | \"cargo\"\n+                | \"clippy-driver\"\n+                => {}\n+\n+                _ => return,\n             }\n             let (id, features, filenames) = match msg {\n                 compile::CargoMessage::CompilerArtifact {\n@@ -182,12 +188,22 @@ impl Step for ToolBuild {\n                       typically means that something was recompiled because \\\n                       a transitive dependency has different features activated \\\n                       than in a previous build:\\n\");\n+            println!(\"the following dependencies are duplicated although they \\\n+                      have the same features enabled:\");\n+            for (id, cur, prev) in duplicates.drain_filter(|(_, cur, prev)| cur.2 == prev.2) {\n+                println!(\"  {}\", id);\n+                // same features\n+                println!(\"    `{}` ({:?})\\n    `{}` ({:?})\", cur.0, cur.1, prev.0, prev.1);\n+            }\n+            println!(\"the following dependencies have different features:\");\n             for (id, cur, prev) in duplicates {\n                 println!(\"  {}\", id);\n-                println!(\"    `{}` enabled features {:?} at {:?}\",\n-                         cur.0, cur.2, cur.1);\n-                println!(\"    `{}` enabled features {:?} at {:?}\",\n-                         prev.0, prev.2, prev.1);\n+                let cur_features: HashSet<_> = cur.2.into_iter().collect();\n+                let prev_features: HashSet<_> = prev.2.into_iter().collect();\n+                println!(\"    `{}` additionally enabled features {:?} at {:?}\",\n+                         cur.0, &cur_features - &prev_features, cur.1);\n+                println!(\"    `{}` additionally enabled features {:?} at {:?}\",\n+                         prev.0, &prev_features - &cur_features, prev.1);\n             }\n             println!(\"\");\n             panic!(\"tools should not compile multiple copies of the same crate\");"}, {"sha": "4244b09b18f9cb5d5a821205ebf3138f8459399e", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -886,13 +886,14 @@ impl<T: ?Sized> Arc<T> {\n         // holder.\n         //\n         // The acquire label here ensures a happens-before relationship with any\n-        // writes to `strong` prior to decrements of the `weak` count (via drop,\n-        // which uses Release).\n+        // writes to `strong` (in particular in `Weak::upgrade`) prior to decrements\n+        // of the `weak` count (via `Weak::drop`, which uses release).  If the upgraded\n+        // weak ref was never dropped, the CAS here will fail so we do not care to synchronize.\n         if self.inner().weak.compare_exchange(1, usize::MAX, Acquire, Relaxed).is_ok() {\n-            // Due to the previous acquire read, this will observe any writes to\n-            // `strong` that were due to upgrading weak pointers; only strong\n-            // clones remain, which require that the strong count is > 1 anyway.\n-            let unique = self.inner().strong.load(Relaxed) == 1;\n+            // This needs to be an `Acquire` to synchronize with the decrement of the `strong`\n+            // counter in `drop` -- the only access that happens when any but the last reference\n+            // is being dropped.\n+            let unique = self.inner().strong.load(Acquire) == 1;\n \n             // The release write here synchronizes with a read in `downgrade`,\n             // effectively preventing the above read of `strong` from happening"}, {"sha": "94f23db1ccc36b4e6123d1aaa9145b7812a82fcd", "filename": "src/libcore/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -431,7 +431,7 @@ impl Any+Send+Sync {\n ///\n /// While `TypeId` implements `Hash`, `PartialOrd`, and `Ord`, it is worth\n /// noting that the hashes and ordering will vary between Rust releases. Beware\n-/// of relying on them outside of your code!\n+/// of relying on them inside of your code!\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct TypeId {"}, {"sha": "ffd138c9c4815542c897c6880c8fffcdea194923", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -7,7 +7,7 @@ use hir::def_id::DefId;\n \n use super::{EvalResult, Pointer, PointerArithmetic, Allocation};\n \n-/// Represents a constant value in Rust. ByVal and ScalarPair are optimizations which\n+/// Represents a constant value in Rust. Scalar and ScalarPair are optimizations which\n /// matches Value's optimizations for easy conversions between these two types\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash)]\n pub enum ConstValue<'tcx> {\n@@ -72,7 +72,7 @@ impl<'tcx> ConstValue<'tcx> {\n /// A `Value` represents a single self-contained Rust value.\n ///\n /// A `Value` can either refer to a block of memory inside an allocation (`ByRef`) or to a primitve\n-/// value held directly, outside of any allocation (`ByVal`).  For `ByRef`-values, we remember\n+/// value held directly, outside of any allocation (`Scalar`).  For `ByRef`-values, we remember\n /// whether the pointer is supposed to be aligned or not (also see Place).\n ///\n /// For optimization of a few very common cases, there is also a representation for a pair of"}, {"sha": "b188f850575a6105da6b31a13d67f09b68d8135e", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -98,6 +98,7 @@ pub enum Lto {\n #[derive(Clone, PartialEq, Hash)]\n pub enum CrossLangLto {\n     LinkerPlugin(PathBuf),\n+    LinkerPluginAuto,\n     NoLink,\n     Disabled\n }\n@@ -106,6 +107,7 @@ impl CrossLangLto {\n     pub fn embed_bitcode(&self) -> bool {\n         match *self {\n             CrossLangLto::LinkerPlugin(_) |\n+            CrossLangLto::LinkerPluginAuto |\n             CrossLangLto::NoLink => true,\n             CrossLangLto::Disabled => false,\n         }\n@@ -1020,7 +1022,7 @@ macro_rules! options {\n                 let mut bool_arg = None;\n                 if parse_opt_bool(&mut bool_arg, v) {\n                     *slot = if bool_arg.unwrap() {\n-                        CrossLangLto::NoLink\n+                        CrossLangLto::LinkerPluginAuto\n                     } else {\n                         CrossLangLto::Disabled\n                     };"}, {"sha": "70053cb7e9d8090457fce09172d4860a81d70794", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -816,8 +816,8 @@ fn link_natively(sess: &Session,\n             if sess.target.target.options.is_like_msvc && linker_not_found {\n                 sess.note_without_error(\"the msvc targets depend on the msvc linker \\\n                     but `link.exe` was not found\");\n-                sess.note_without_error(\"please ensure that VS 2013 or VS 2015 was installed \\\n-                    with the Visual C++ option\");\n+                sess.note_without_error(\"please ensure that VS 2013, VS 2015 or VS 2017 \\\n+                    was installed with the Visual C++ option\");\n             }\n             sess.abort_if_errors();\n         }"}, {"sha": "fffde30d5f60c4f5a1e671dcea3b6f0e3bb8d991", "filename": "src/librustc_codegen_llvm/back/linker.rs", "status": "modified", "additions": 36, "deletions": 25, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -182,6 +182,38 @@ impl<'a> GccLinker<'a> {\n             self.hinted_static = false;\n         }\n     }\n+\n+    fn push_cross_lang_lto_args(&mut self, plugin_path: Option<&OsStr>) {\n+        if let Some(plugin_path) = plugin_path {\n+            let mut arg = OsString::from(\"-plugin=\");\n+            arg.push(plugin_path);\n+            self.linker_arg(&arg);\n+        }\n+\n+        let opt_level = match self.sess.opts.optimize {\n+            config::OptLevel::No => \"O0\",\n+            config::OptLevel::Less => \"O1\",\n+            config::OptLevel::Default => \"O2\",\n+            config::OptLevel::Aggressive => \"O3\",\n+            config::OptLevel::Size => \"Os\",\n+            config::OptLevel::SizeMin => \"Oz\",\n+        };\n+\n+        self.linker_arg(&format!(\"-plugin-opt={}\", opt_level));\n+        self.linker_arg(&format!(\"-plugin-opt=mcpu={}\", self.sess.target_cpu()));\n+\n+        match self.sess.opts.cg.lto {\n+            config::Lto::Thin |\n+            config::Lto::ThinLocal => {\n+                self.linker_arg(&format!(\"-plugin-opt=thin\"));\n+            }\n+            config::Lto::Fat |\n+            config::Lto::Yes |\n+            config::Lto::No => {\n+                // default to regular LTO\n+            }\n+        }\n+    }\n }\n \n impl<'a> Linker for GccLinker<'a> {\n@@ -443,32 +475,11 @@ impl<'a> Linker for GccLinker<'a> {\n             CrossLangLto::NoLink => {\n                 // Nothing to do\n             }\n+            CrossLangLto::LinkerPluginAuto => {\n+                self.push_cross_lang_lto_args(None);\n+            }\n             CrossLangLto::LinkerPlugin(ref path) => {\n-                self.linker_arg(&format!(\"-plugin={}\", path.display()));\n-\n-                let opt_level = match self.sess.opts.optimize {\n-                    config::OptLevel::No => \"O0\",\n-                    config::OptLevel::Less => \"O1\",\n-                    config::OptLevel::Default => \"O2\",\n-                    config::OptLevel::Aggressive => \"O3\",\n-                    config::OptLevel::Size => \"Os\",\n-                    config::OptLevel::SizeMin => \"Oz\",\n-                };\n-\n-                self.linker_arg(&format!(\"-plugin-opt={}\", opt_level));\n-                self.linker_arg(&format!(\"-plugin-opt=mcpu={}\", self.sess.target_cpu()));\n-\n-                match self.sess.opts.cg.lto {\n-                    config::Lto::Thin |\n-                    config::Lto::ThinLocal => {\n-                        self.linker_arg(&format!(\"-plugin-opt=thin\"));\n-                    }\n-                    config::Lto::Fat |\n-                    config::Lto::Yes |\n-                    config::Lto::No => {\n-                        // default to regular LTO\n-                    }\n-                }\n+                self.push_cross_lang_lto_args(Some(path.as_os_str()));\n             }\n         }\n     }"}, {"sha": "09c5df000526031de3d68087af39aaa5a887bce4", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -395,15 +395,8 @@ fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             };\n             let param_env = ty::ParamEnv::reveal_all();\n \n-            match tcx.const_eval(param_env.and(cid)) {\n-                Ok(val) => collect_const(tcx, val, instance.substs, &mut neighbors),\n-                Err(err) => {\n-                    let span = tcx.def_span(def_id);\n-                    err.report_as_error(\n-                        tcx.at(span),\n-                        \"could not evaluate static initializer\",\n-                    );\n-                }\n+            if let Ok(val) = tcx.const_eval(param_env.and(cid)) {\n+                collect_const(tcx, val, instance.substs, &mut neighbors);\n             }\n         }\n         MonoItem::Fn(instance) => {"}, {"sha": "49639915ee11585a45dd4952a8f25ee3274b66b1", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -274,6 +274,7 @@ supported_targets! {\n     (\"powerpc-unknown-linux-gnuspe\", powerpc_unknown_linux_gnuspe),\n     (\"powerpc64-unknown-linux-gnu\", powerpc64_unknown_linux_gnu),\n     (\"powerpc64le-unknown-linux-gnu\", powerpc64le_unknown_linux_gnu),\n+    (\"powerpc64le-unknown-linux-musl\", powerpc64le_unknown_linux_musl),\n     (\"s390x-unknown-linux-gnu\", s390x_unknown_linux_gnu),\n     (\"sparc-unknown-linux-gnu\", sparc_unknown_linux_gnu),\n     (\"sparc64-unknown-linux-gnu\", sparc64_unknown_linux_gnu),"}, {"sha": "34ec82412289df36845f34a920fd13bcf33bff5c", "filename": "src/librustc_target/spec/powerpc64le_unknown_linux_musl.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Flibrustc_target%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Flibrustc_target%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use spec::{LinkerFlavor, Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::linux_musl_base::opts();\n+    base.cpu = \"ppc64le\".to_string();\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.max_atomic_width = Some(64);\n+\n+    // see #36994\n+    base.exe_allocation_crate = None;\n+\n+    Ok(Target {\n+        llvm_target: \"powerpc64le-unknown-linux-musl\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-i64:64-n32:64\".to_string(),\n+        arch: \"powerpc64\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"musl\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: base,\n+    })\n+}"}, {"sha": "649ee0b781e484888ea0eb395a329112f0f53c25", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -108,7 +108,7 @@ pre {\n \n .content .highlighted {\n \tcolor: #eee !important;\n-\tbackground-color: #333;\n+\tbackground-color: #616161;\n }\n .content .highlighted a, .content .highlighted span { color: #eee !important; }\n .content .highlighted.trait { background-color: #013191; }"}, {"sha": "4c88325378793fcd92b0c2938abfe2984d3ada0c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -421,7 +421,7 @@ declare_features! (\n     (active, wasm_custom_section, \"1.26.0\", Some(51088), None),\n \n     // The #![wasm_import_module] attribute\n-    (active, wasm_import_module, \"1.26.0\", Some(51088), None),\n+    (active, wasm_import_module, \"1.26.0\", Some(52090), None),\n \n     // Allows keywords to be escaped for use as identifiers\n     (active, raw_identifiers, \"1.26.0\", Some(48589), None),"}, {"sha": "509f29ac17874394acf4d49d6bae3cd93c652aa1", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -1 +1 @@\n-Subproject commit 1c817c7a0c828b8fc8e8e462afbe5db41c7052d1\n+Subproject commit 509f29ac17874394acf4d49d6bae3cd93c652aa1"}, {"sha": "250e78ce2464005d9837f07fe7d7e4178cb4d369", "filename": "src/test/compile-fail/issue-14227.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Ftest%2Fcompile-fail%2Fissue-14227.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Ftest%2Fcompile-fail%2Fissue-14227.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14227.rs?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -16,7 +16,5 @@ extern {\n static CRASH: () = symbol;\n //~^ ERROR could not evaluate static initializer\n //~| tried to read from foreign (extern) static\n-//~^^^ ERROR could not evaluate static initializer\n-//~| tried to read from foreign (extern) static\n \n fn main() {}"}, {"sha": "af73db2b4d211aa154863b35f4fbada37b19b175", "filename": "src/test/compile-fail/issue-28324.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Ftest%2Fcompile-fail%2Fissue-28324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Ftest%2Fcompile-fail%2Fissue-28324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28324.rs?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -17,7 +17,5 @@ extern {\n pub static BAZ: u32 = *&error_message_count;\n //~^ ERROR could not evaluate static initializer\n //~| tried to read from foreign (extern) static\n-//~^^^ ERROR could not evaluate static initializer\n-//~| tried to read from foreign (extern) static\n \n fn main() {}"}, {"sha": "35120e428a7bd3d508103707da582cebd2ee66a8", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -10,6 +10,8 @@\n \n // compile-flags: -Z borrowck=compare\n \n+#![recursion_limit = \"128\"]\n+\n use std::cell::Cell;\n use std::mem::swap;\n \n@@ -121,6 +123,16 @@ fn special_characters() {\n     assert!(!val);\n }\n \n+fn punch_card() -> impl std::fmt::Debug {\n+    ..=..=.. ..    .. .. .. ..    .. .. .. ..    .. ..=.. ..\n+    ..=.. ..=..    .. .. .. ..    .. .. .. ..    ..=..=..=..\n+    ..=.. ..=..    ..=.. ..=..    .. ..=..=..    .. ..=.. ..\n+    ..=..=.. ..    ..=.. ..=..    ..=.. .. ..    .. ..=.. ..\n+    ..=.. ..=..    ..=.. ..=..    .. ..=.. ..    .. ..=.. ..\n+    ..=.. ..=..    ..=.. ..=..    .. .. ..=..    .. ..=.. ..\n+    ..=.. ..=..    .. ..=..=..    ..=..=.. ..    .. ..=.. ..\n+}\n+\n pub fn main() {\n     strange();\n     funny();\n@@ -135,4 +147,5 @@ pub fn main() {\n     fishy();\n     union();\n     special_characters();\n+    punch_card();\n }"}, {"sha": "f3578bcef6e411b5018155264b7bbc6be5d28b18", "filename": "src/test/ui/const-eval/index_out_of_bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bounds.rs?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -10,7 +10,6 @@\n \n static FOO: i32 = [][0];\n //~^ ERROR E0080\n-//~| ERROR E0080\n \n fn main() {\n     let array = [std::env::args().len()];"}, {"sha": "464ba8ff92723b622b8987c7a750f7a68c822a20", "filename": "src/test/ui/const-eval/index_out_of_bounds.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bounds.stderr?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -4,22 +4,14 @@ error[E0080]: could not evaluate static initializer\n LL | static FOO: i32 = [][0];\n    |                   ^^^^^ index out of bounds: the len is 0 but the index is 0\n \n-error[E0080]: could not evaluate static initializer\n-  --> $DIR/index_out_of_bounds.rs:11:1\n-   |\n-LL | static FOO: i32 = [][0];\n-   | ^^^^^^^^^^^^^^^^^^-----^\n-   |                   |\n-   |                   index out of bounds: the len is 0 but the index is 0\n-\n error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/index_out_of_bounds.rs:17:5\n+  --> $DIR/index_out_of_bounds.rs:16:5\n    |\n LL |     array[1]; //~ ERROR index out of bounds\n    |     ^^^^^^^^\n    |\n    = note: #[deny(const_err)] on by default\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "5430f6b5825eb7b98eef187d2466fb293e4a18c6", "filename": "src/test/ui/feature-gate-wasm_import_module.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Ftest%2Fui%2Ffeature-gate-wasm_import_module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Ftest%2Fui%2Ffeature-gate-wasm_import_module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-wasm_import_module.stderr?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: experimental attribute (see issue #51088)\n+error[E0658]: experimental attribute (see issue #52090)\n   --> $DIR/feature-gate-wasm_import_module.rs:11:1\n    |\n LL | #[wasm_import_module = \"test\"] //~ ERROR: experimental"}, {"sha": "b2aa5cfb444d9127496bb59b67a2457e5281845e", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -88,6 +88,7 @@ static TARGETS: &'static [&'static str] = &[\n     \"powerpc-unknown-linux-gnuspe\",\n     \"powerpc64-unknown-linux-gnu\",\n     \"powerpc64le-unknown-linux-gnu\",\n+    \"powerpc64le-unknown-linux-musl\",\n     \"s390x-unknown-linux-gnu\",\n     \"sparc-unknown-linux-gnu\",\n     \"sparc64-unknown-linux-gnu\","}]}