{"sha": "0bd1cba98bcee7579ee54e99dbab216d0d58dc6a", "node_id": "C_kwDOAAsO6NoAKDBiZDFjYmE5OGJjZWU3NTc5ZWU1NGU5OWRiYWIyMTZkMGQ1OGRjNmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-10T18:47:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-10T18:47:34Z"}, "message": "Rollup merge of #102876 - SparrowLii:import-candidate, r=fee1-dead\n\nsuggest candidates for unresolved import\n\nCurrently we prompt suggestion of candidates(help notes of `use xxx::yyy`) for names which cannot be resolved, but we don't do that for import statements themselves that couldn't be resolved. It seems reasonable to add candidate help information for these statements as well.\nFixes #102711", "tree": {"sha": "c3d38e1d63f23fd163e28fb4581e07bb4bb87257", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3d38e1d63f23fd163e28fb4581e07bb4bb87257"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjRGjGCRBK7hj4Ov3rIwAA1tkIAI01EArCwRC+1t0BpO3IvB1z\nEZGDdivs8qtyFogcfJ1d8z/TeoXK2ip/a2+Kd7gC1utKyNnEC1TqD4x+h+vju2um\n5bYoMsH0Gr4uSdReDrTYK10DMcfKx8tDEGdk8XNNdQfQFJS0R0+p8ZQ9HTBeRg1Q\nH9mxSjoMl2MVaZDGYM2iPTbnBL2hq+KcCoruYUwFbc3ZUVjn2uzYpnLzrpaxAzxs\nKtozbjn5QRUjZeR2XL6/F3Jb1jlzGI3RNFfLfW95aEEUOo3DZB9b8d4V0GjzVXx3\nN6kqFH9BM/mg267MH4+GYFxTIB6+vdfz0+jHpg5TLik9oFZ7oIo21aI/9VtLeDU=\n=ybcf\n-----END PGP SIGNATURE-----\n", "payload": "tree c3d38e1d63f23fd163e28fb4581e07bb4bb87257\nparent 40c1410ce48d06ce8ee4efe1ce8c7b933259d849\nparent 0571b0af65dcc0dd97cce4b976887ab436e5780d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1665427654 +0200\ncommitter GitHub <noreply@github.com> 1665427654 +0200\n\nRollup merge of #102876 - SparrowLii:import-candidate, r=fee1-dead\n\nsuggest candidates for unresolved import\n\nCurrently we prompt suggestion of candidates(help notes of `use xxx::yyy`) for names which cannot be resolved, but we don't do that for import statements themselves that couldn't be resolved. It seems reasonable to add candidate help information for these statements as well.\nFixes #102711\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a", "html_url": "https://github.com/rust-lang/rust/commit/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40c1410ce48d06ce8ee4efe1ce8c7b933259d849", "url": "https://api.github.com/repos/rust-lang/rust/commits/40c1410ce48d06ce8ee4efe1ce8c7b933259d849", "html_url": "https://github.com/rust-lang/rust/commit/40c1410ce48d06ce8ee4efe1ce8c7b933259d849"}, {"sha": "0571b0af65dcc0dd97cce4b976887ab436e5780d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0571b0af65dcc0dd97cce4b976887ab436e5780d", "html_url": "https://github.com/rust-lang/rust/commit/0571b0af65dcc0dd97cce4b976887ab436e5780d"}], "stats": {"total": 153, "additions": 145, "deletions": 8}, "files": [{"sha": "9a3eac2f8662263402f2f40c69842095466ed14e", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=0bd1cba98bcee7579ee54e99dbab216d0d58dc6a", "patch": "@@ -70,6 +70,7 @@ impl TypoSuggestion {\n }\n \n /// A free importable items suggested in case of resolution failure.\n+#[derive(Debug, Clone)]\n pub(crate) struct ImportSuggestion {\n     pub did: Option<DefId>,\n     pub descr: &'static str,\n@@ -139,6 +140,7 @@ impl<'a> Resolver<'a> {\n                     if instead { Instead::Yes } else { Instead::No },\n                     found_use,\n                     IsPattern::No,\n+                    IsImport::No,\n                     path,\n                 );\n                 err.emit();\n@@ -698,6 +700,7 @@ impl<'a> Resolver<'a> {\n                         Instead::No,\n                         FoundUse::Yes,\n                         IsPattern::Yes,\n+                        IsImport::No,\n                         vec![],\n                     );\n                 }\n@@ -1481,6 +1484,7 @@ impl<'a> Resolver<'a> {\n             Instead::No,\n             FoundUse::Yes,\n             IsPattern::No,\n+            IsImport::No,\n             vec![],\n         );\n \n@@ -2449,6 +2453,34 @@ enum IsPattern {\n     No,\n }\n \n+/// Whether a binding is part of a use statement. Used for diagnostics.\n+enum IsImport {\n+    Yes,\n+    No,\n+}\n+\n+pub(crate) fn import_candidates(\n+    session: &Session,\n+    source_span: &IndexVec<LocalDefId, Span>,\n+    err: &mut Diagnostic,\n+    // This is `None` if all placement locations are inside expansions\n+    use_placement_span: Option<Span>,\n+    candidates: &[ImportSuggestion],\n+) {\n+    show_candidates(\n+        session,\n+        source_span,\n+        err,\n+        use_placement_span,\n+        candidates,\n+        Instead::Yes,\n+        FoundUse::Yes,\n+        IsPattern::No,\n+        IsImport::Yes,\n+        vec![],\n+    );\n+}\n+\n /// When an entity with a given name is not available in scope, we search for\n /// entities with that name in all crates. This method allows outputting the\n /// results of this search in a programmer-friendly way\n@@ -2462,6 +2494,7 @@ fn show_candidates(\n     instead: Instead,\n     found_use: FoundUse,\n     is_pattern: IsPattern,\n+    is_import: IsImport,\n     path: Vec<Segment>,\n ) {\n     if candidates.is_empty() {\n@@ -2521,7 +2554,8 @@ fn show_candidates(\n                 // produce an additional newline to separate the new use statement\n                 // from the directly following item.\n                 let additional_newline = if let FoundUse::Yes = found_use { \"\" } else { \"\\n\" };\n-                candidate.0 = format!(\"use {};\\n{}\", &candidate.0, additional_newline);\n+                let add_use = if let IsImport::Yes = is_import { \"\" } else { \"use \" };\n+                candidate.0 = format!(\"{}{};\\n{}\", add_use, &candidate.0, additional_newline);\n             }\n \n             err.span_suggestions(\n@@ -2551,7 +2585,7 @@ fn show_candidates(\n \n             err.note(&msg);\n         }\n-    } else {\n+    } else if matches!(is_import, IsImport::No) {\n         assert!(!inaccessible_path_strings.is_empty());\n \n         let prefix ="}, {"sha": "9e2234ae4a54fdae22fb1f419baff04603ecca6e", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=0bd1cba98bcee7579ee54e99dbab216d0d58dc6a", "patch": "@@ -1,9 +1,9 @@\n //! A bunch of methods and structures more or less related to resolving imports.\n \n-use crate::diagnostics::Suggestion;\n+use crate::diagnostics::{import_candidates, Suggestion};\n use crate::Determinacy::{self, *};\n use crate::Namespace::{self, *};\n-use crate::{module_to_string, names_to_string};\n+use crate::{module_to_string, names_to_string, ImportSuggestion};\n use crate::{AmbiguityKind, BindingKey, ModuleKind, ResolutionError, Resolver, Segment};\n use crate::{Finalize, Module, ModuleOrUniformRoot, ParentScope, PerNS, ScopeSet};\n use crate::{NameBinding, NameBindingKind, PathResult};\n@@ -406,6 +406,7 @@ struct UnresolvedImportError {\n     label: Option<String>,\n     note: Option<String>,\n     suggestion: Option<Suggestion>,\n+    candidate: Option<Vec<ImportSuggestion>>,\n }\n \n pub struct ImportResolver<'a, 'b> {\n@@ -497,6 +498,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     label: None,\n                     note: None,\n                     suggestion: None,\n+                    candidate: None,\n                 };\n                 if path.contains(\"::\") {\n                     errors.push((path, err))\n@@ -547,6 +549,16 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 }\n                 diag.multipart_suggestion(&msg, suggestions, applicability);\n             }\n+\n+            if let Some(candidate) = &err.candidate {\n+                import_candidates(\n+                    self.r.session,\n+                    &self.r.source_span,\n+                    &mut diag,\n+                    Some(err.span),\n+                    &candidate,\n+                )\n+            }\n         }\n \n         diag.emit();\n@@ -664,6 +676,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             Some(finalize),\n             ignore_binding,\n         );\n+\n         let no_ambiguity = self.r.ambiguity_errors.len() == prev_ambiguity_errors_len;\n         import.vis.set(orig_vis);\n         let module = match path_res {\n@@ -706,12 +719,14 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                                 String::from(\"a similar path exists\"),\n                                 Applicability::MaybeIncorrect,\n                             )),\n+                            candidate: None,\n                         },\n                         None => UnresolvedImportError {\n                             span,\n                             label: Some(label),\n                             note: None,\n                             suggestion,\n+                            candidate: None,\n                         },\n                     };\n                     return Some(err);\n@@ -754,6 +769,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                             label: Some(String::from(\"cannot glob-import a module into itself\")),\n                             note: None,\n                             suggestion: None,\n+                            candidate: None,\n                         });\n                     }\n                 }\n@@ -919,11 +935,19 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     }\n                 };\n \n+                let parent_suggestion =\n+                    self.r.lookup_import_candidates(ident, TypeNS, &import.parent_scope, |_| true);\n+\n                 Some(UnresolvedImportError {\n                     span: import.span,\n                     label: Some(label),\n                     note,\n                     suggestion,\n+                    candidate: if !parent_suggestion.is_empty() {\n+                        Some(parent_suggestion)\n+                    } else {\n+                        None\n+                    },\n                 })\n             } else {\n                 // `resolve_ident_in_module` reported a privacy error."}, {"sha": "63797d4a71bce7f04b1fb44f4609db974f36fadd", "filename": "src/test/ui/extenv/issue-55897.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.stderr?ref=0bd1cba98bcee7579ee54e99dbab216d0d58dc6a", "patch": "@@ -26,6 +26,11 @@ error[E0432]: unresolved import `env`\n    |\n LL |     use env;\n    |         ^^^ no `env` in the root\n+   |\n+help: consider importing this module instead\n+   |\n+LL |     use std::env;\n+   |         ~~~~~~~~~\n \n error: cannot determine resolution for the macro `env`\n   --> $DIR/issue-55897.rs:6:22"}, {"sha": "059ca96808d9ae507c6076d3d339b41dbb17cf72", "filename": "src/test/ui/imports/issue-56125.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr?ref=0bd1cba98bcee7579ee54e99dbab216d0d58dc6a", "patch": "@@ -3,6 +3,18 @@ error[E0432]: unresolved import `empty::issue_56125`\n    |\n LL |     use empty::issue_56125;\n    |         ^^^^^^^^^^^^^^^^^^ no `issue_56125` in `m3::empty`\n+   |\n+help: consider importing one of these items instead\n+   |\n+LL |     use crate::m3::last_segment::issue_56125;\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     use crate::m3::non_last_segment::non_last_segment::issue_56125;\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     use issue_56125::issue_56125;\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     use issue_56125::last_segment::issue_56125;\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+     and 1 other candidate\n \n error[E0659]: `issue_56125` is ambiguous\n   --> $DIR/issue-56125.rs:6:9"}, {"sha": "3b72d57fee41ef03499bce2a8e0207fce291bb5e", "filename": "src/test/ui/imports/issue-57015.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a/src%2Ftest%2Fui%2Fimports%2Fissue-57015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a/src%2Ftest%2Fui%2Fimports%2Fissue-57015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-57015.stderr?ref=0bd1cba98bcee7579ee54e99dbab216d0d58dc6a", "patch": "@@ -3,6 +3,11 @@ error[E0432]: unresolved import `single_err::something`\n    |\n LL | use single_err::something;\n    |     ^^^^^^^^^^^^^^^^^^^^^ no `something` in `single_err`\n+   |\n+help: consider importing this module instead\n+   |\n+LL | use glob_ok::something;\n+   |     ~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "761089cd3871a7ead4a8ea5f45d85b531d89c029", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/not-allowed.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-allowed.stderr?ref=0bd1cba98bcee7579ee54e99dbab216d0d58dc6a", "patch": "@@ -3,6 +3,13 @@ error[E0432]: unresolved import `alloc`\n    |\n LL | use alloc;\n    |     ^^^^^ no external crate `alloc`\n+   |\n+help: consider importing one of these items instead\n+   |\n+LL | use core::alloc;\n+   |     ~~~~~~~~~~~~\n+LL | use std::alloc;\n+   |     ~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "8881ede0dbca7e362d5f3cf92fb1444fa2a2520c", "filename": "src/test/ui/simd/portable-intrinsics-arent-exposed.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a/src%2Ftest%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a/src%2Ftest%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.stderr?ref=0bd1cba98bcee7579ee54e99dbab216d0d58dc6a", "patch": "@@ -11,6 +11,11 @@ error[E0432]: unresolved import `std::simd::intrinsics`\n    |\n LL | use std::simd::intrinsics;\n    |     ^^^^^^^^^^^^^^^^^^^^^ no `intrinsics` in `simd`\n+   |\n+help: consider importing this module instead\n+   |\n+LL | use std::intrinsics;\n+   |     ~~~~~~~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0c16ecd4c862e3355f7c27fa2ce233c80a75c776", "filename": "src/test/ui/test-attrs/inaccessible-test-modules.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a/src%2Ftest%2Fui%2Ftest-attrs%2Finaccessible-test-modules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a/src%2Ftest%2Fui%2Ftest-attrs%2Finaccessible-test-modules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Finaccessible-test-modules.stderr?ref=0bd1cba98bcee7579ee54e99dbab216d0d58dc6a", "patch": "@@ -11,10 +11,16 @@ error[E0432]: unresolved import `test`\n   --> $DIR/inaccessible-test-modules.rs:6:5\n    |\n LL | use test as y;\n-   |     ----^^^^^\n-   |     |\n-   |     no `test` in the root\n-   |     help: a similar name exists in the module: `test`\n+   |     ^^^^^^^^^ no `test` in the root\n+   |\n+help: a similar name exists in the module\n+   |\n+LL | use test as y;\n+   |     ~~~~\n+help: consider importing this module instead\n+   |\n+LL | use test::test;\n+   |     ~~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "38b227f609b26dead539f9203f2d54df9ec771fc", "filename": "src/test/ui/unresolved/unresolved-candidates.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a/src%2Ftest%2Fui%2Funresolved%2Funresolved-candidates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a/src%2Ftest%2Fui%2Funresolved%2Funresolved-candidates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funresolved%2Funresolved-candidates.rs?ref=0bd1cba98bcee7579ee54e99dbab216d0d58dc6a", "patch": "@@ -0,0 +1,13 @@\n+mod a {\n+    pub trait Trait {}\n+}\n+\n+mod b {\n+    use Trait; //~ ERROR unresolved import `Trait`\n+}\n+\n+mod c {\n+    impl Trait for () {} //~ ERROR cannot find trait `Trait` in this scope\n+}\n+\n+fn main() {}"}, {"sha": "bbd3eec2a54317a0e1df3451628d5c4762e5240a", "filename": "src/test/ui/unresolved/unresolved-candidates.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a/src%2Ftest%2Fui%2Funresolved%2Funresolved-candidates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0bd1cba98bcee7579ee54e99dbab216d0d58dc6a/src%2Ftest%2Fui%2Funresolved%2Funresolved-candidates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funresolved%2Funresolved-candidates.stderr?ref=0bd1cba98bcee7579ee54e99dbab216d0d58dc6a", "patch": "@@ -0,0 +1,26 @@\n+error[E0432]: unresolved import `Trait`\n+  --> $DIR/unresolved-candidates.rs:6:9\n+   |\n+LL |     use Trait;\n+   |         ^^^^^ no `Trait` in the root\n+   |\n+help: consider importing this trait instead\n+   |\n+LL |     use a::Trait;\n+   |         ~~~~~~~~~\n+\n+error[E0405]: cannot find trait `Trait` in this scope\n+  --> $DIR/unresolved-candidates.rs:10:10\n+   |\n+LL |     impl Trait for () {}\n+   |          ^^^^^ not found in this scope\n+   |\n+help: consider importing this trait\n+   |\n+LL |     use a::Trait;\n+   |\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0405, E0432.\n+For more information about an error, try `rustc --explain E0405`."}]}