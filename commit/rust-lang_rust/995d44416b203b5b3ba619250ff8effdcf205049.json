{"sha": "995d44416b203b5b3ba619250ff8effdcf205049", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NWQ0NDQxNmIyMDNiNWIzYmE2MTkyNTBmZjhlZmZkY2YyMDUwNDk=", "commit": {"author": {"name": "gareth", "email": "gareth@gareth-N56VM.(none)", "date": "2013-04-11T20:51:39Z"}, "committer": {"name": "gareth", "email": "gareth@gareth-N56VM.(none)", "date": "2013-04-11T20:51:39Z"}, "message": "Make destroy() send SIGTERM and add a new method called\nforce_destroy() that sends SIGKILL - as suggested by \n@thestinger.", "tree": {"sha": "d0313bebcaf8bb7ed331865c52abb923c899b8b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0313bebcaf8bb7ed331865c52abb923c899b8b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/995d44416b203b5b3ba619250ff8effdcf205049", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/995d44416b203b5b3ba619250ff8effdcf205049", "html_url": "https://github.com/rust-lang/rust/commit/995d44416b203b5b3ba619250ff8effdcf205049", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/995d44416b203b5b3ba619250ff8effdcf205049/comments", "author": null, "committer": null, "parents": [{"sha": "483e95a35c9f3ab01666de4808134af26fded68c", "url": "https://api.github.com/repos/rust-lang/rust/commits/483e95a35c9f3ab01666de4808134af26fded68c", "html_url": "https://github.com/rust-lang/rust/commit/483e95a35c9f3ab01666de4808134af26fded68c"}], "stats": {"total": 56, "additions": 44, "deletions": 12}, "files": [{"sha": "02c72bcd2f0d09218aef8bc6ac73a9567f598f0b", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/995d44416b203b5b3ba619250ff8effdcf205049/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995d44416b203b5b3ba619250ff8effdcf205049/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=995d44416b203b5b3ba619250ff8effdcf205049", "patch": "@@ -864,6 +864,7 @@ pub mod consts {\n             pub static F_TLOCK : int = 2;\n             pub static F_ULOCK : int = 0;\n             pub static SIGKILL : int = 9;\n+            pub static SIGTERM : int = 15;\n         }\n         pub mod posix01 {\n         }\n@@ -932,6 +933,7 @@ pub mod consts {\n             pub static F_TLOCK : int = 2;\n             pub static F_ULOCK : int = 0;\n             pub static SIGKILL : int = 9;\n+            pub static SIGTERM : int = 15;\n         }\n         pub mod posix01 {\n         }\n@@ -1001,6 +1003,7 @@ pub mod consts {\n             pub static F_TLOCK : int = 2;\n             pub static F_ULOCK : int = 0;\n             pub static SIGKILL : int = 9;\n+            pub static SIGTERM : int = 15;\n         }\n         pub mod posix01 {\n         }"}, {"sha": "f6f4b9a397d81d09e8c97c5f70fcd9ad2d447686", "filename": "src/libcore/run.rs", "status": "modified", "additions": 41, "deletions": 12, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/995d44416b203b5b3ba619250ff8effdcf205049/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995d44416b203b5b3ba619250ff8effdcf205049/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=995d44416b203b5b3ba619250ff8effdcf205049", "patch": "@@ -63,10 +63,22 @@ pub trait Program {\n     fn finish(&mut self) -> int;\n \n     /**\n-     * Forcibly terminate the program. On Posix OSs SIGKILL will be sent\n-     * to the process. On Win32 TerminateProcess(..) will be called.\n+     * Terminate the program, giving it a chance to clean itself up if\n+     * this is supported by the operating system.\n+     *\n+     * On Posix OSs SIGTERM will be sent to the process. On Win32\n+     * TerminateProcess(..) will be called.\n      */\n     fn destroy(&mut self);\n+\n+    /**\n+     * Terminate the program as soon as possible without giving it a\n+     * chance to clean itself up.\n+     *\n+     * On Posix OSs SIGKILL will be sent to the process. On Win32\n+     * TerminateProcess(..) will be called.\n+     */\n+    fn force_destroy(&mut self);\n }\n \n \n@@ -266,24 +278,30 @@ pub fn start_program(prog: &str, args: &[~str]) -> @Program {\n         return waitpid(r.pid);\n     }\n \n-    fn destroy_repr(r: &mut ProgRepr) {\n-        killpid(r.pid);\n+    fn destroy_repr(r: &mut ProgRepr, force: bool) {\n+        killpid(r.pid, force);\n         finish_repr(&mut *r);\n         close_repr_outputs(&mut *r);\n \n         #[cfg(windows)]\n-        fn killpid(pid: pid_t) {\n+        fn killpid(pid: pid_t, _force: bool) {\n             unsafe {\n                 libc::funcs::extra::kernel32::TerminateProcess(\n                     cast::transmute(pid), 1);\n             }\n         }\n \n         #[cfg(unix)]\n-        fn killpid(pid: pid_t) {\n+        fn killpid(pid: pid_t, force: bool) {\n+\n+            let signal = if force {\n+                libc::consts::os::posix88::SIGKILL\n+            } else {\n+                libc::consts::os::posix88::SIGTERM\n+            };\n+\n             unsafe {\n-                libc::funcs::posix88::signal::kill(\n-                    pid, libc::consts::os::posix88::SIGKILL as c_int);\n+                libc::funcs::posix88::signal::kill(pid, signal as c_int);\n             }\n         }\n     }\n@@ -321,7 +339,8 @@ pub fn start_program(prog: &str, args: &[~str]) -> @Program {\n         }\n         fn close_input(&mut self) { close_repr_input(&mut self.r); }\n         fn finish(&mut self) -> int { finish_repr(&mut self.r) }\n-        fn destroy(&mut self) { destroy_repr(&mut self.r); }\n+        fn destroy(&mut self) { destroy_repr(&mut self.r, false); }\n+        fn force_destroy(&mut self) { destroy_repr(&mut self.r, true); }\n     }\n \n     let mut repr = ProgRepr {\n@@ -559,10 +578,9 @@ mod tests {\n         p.destroy(); // ...and nor should this (and nor should the destructor)\n     }\n \n-    #[test]\n     #[cfg(unix)] // there is no way to sleep on windows from inside libcore...\n-    pub fn test_destroy_actually_kills() {\n-        let path = Path(\"test/core-run-test-destroy-actually-kills.tmp\");\n+    pub fn test_destroy_actually_kills(force: bool) {\n+        let path = Path(fmt!(\"test/core-run-test-destroy-actually-kills-%?.tmp\", force));\n \n         os::remove_file(&path);\n \n@@ -580,6 +598,17 @@ mod tests {\n         assert!(!path.exists());\n     }\n \n+    #[test]\n+    #[cfg(unix)]\n+    pub fn test_unforced_destroy_actually_kills() {\n+        test_destroy_actually_kills(false);\n+    }\n+\n+    #[test]\n+    #[cfg(unix)]\n+    pub fn test_forced_destroy_actually_kills() {\n+        test_destroy_actually_kills(true);\n+    }\n }\n \n // Local Variables:"}]}