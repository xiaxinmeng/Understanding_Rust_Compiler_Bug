{"sha": "2b60d80eaf1f5bf6f0d5860565f46b4dd4ae448e", "node_id": "C_kwDOAAsO6NoAKDJiNjBkODBlYWYxZjViZjZmMGQ1ODYwNTY1ZjQ2YjRkZDRhZTQ0OGU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-21T14:04:19Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-21T14:04:19Z"}, "message": "Simplify const rendering, remove constructor structs", "tree": {"sha": "153923c3c2e09e9c2a504fd837f0e593052126fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/153923c3c2e09e9c2a504fd837f0e593052126fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b60d80eaf1f5bf6f0d5860565f46b4dd4ae448e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b60d80eaf1f5bf6f0d5860565f46b4dd4ae448e", "html_url": "https://github.com/rust-lang/rust/commit/2b60d80eaf1f5bf6f0d5860565f46b4dd4ae448e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b60d80eaf1f5bf6f0d5860565f46b4dd4ae448e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e99ed3e407ad6c043e53ebadf2b62fbc2f8e678c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e99ed3e407ad6c043e53ebadf2b62fbc2f8e678c", "html_url": "https://github.com/rust-lang/rust/commit/e99ed3e407ad6c043e53ebadf2b62fbc2f8e678c"}], "stats": {"total": 57, "additions": 18, "deletions": 39}, "files": [{"sha": "65c9d1d63edeb35fcb060326443e3da10a79a710", "filename": "crates/ide_completion/src/render/const_.rs", "status": "modified", "additions": 18, "deletions": 39, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2b60d80eaf1f5bf6f0d5860565f46b4dd4ae448e/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b60d80eaf1f5bf6f0d5860565f46b4dd4ae448e/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs?ref=2b60d80eaf1f5bf6f0d5860565f46b4dd4ae448e", "patch": "@@ -2,53 +2,32 @@\n \n use hir::{AsAssocItem, HasSource};\n use ide_db::SymbolKind;\n-use syntax::{ast::Const, display::const_label};\n+use syntax::display::const_label;\n \n use crate::{item::CompletionItem, render::RenderContext};\n \n pub(crate) fn render_const(ctx: RenderContext<'_>, const_: hir::Const) -> Option<CompletionItem> {\n     let _p = profile::span(\"render_const\");\n-    ConstRender::new(ctx, const_)?.render()\n+    render(ctx, const_)\n }\n \n-#[derive(Debug)]\n-struct ConstRender<'a> {\n-    ctx: RenderContext<'a>,\n-    const_: hir::Const,\n-    ast_node: Const,\n-}\n-\n-impl<'a> ConstRender<'a> {\n-    fn new(ctx: RenderContext<'a>, const_: hir::Const) -> Option<ConstRender<'a>> {\n-        let ast_node = const_.source(ctx.db())?.value;\n-        Some(ConstRender { ctx, const_, ast_node })\n-    }\n-\n-    fn render(self) -> Option<CompletionItem> {\n-        let name = self.const_.name(self.ctx.db())?.to_smol_str();\n-        let detail = self.detail();\n-\n-        let mut item =\n-            CompletionItem::new(SymbolKind::Const, self.ctx.source_range(), name.clone());\n-        item.set_documentation(self.ctx.docs(self.const_))\n-            .set_deprecated(\n-                self.ctx.is_deprecated(self.const_)\n-                    || self.ctx.is_deprecated_assoc_item(self.const_),\n-            )\n-            .detail(detail);\n-\n-        let db = self.ctx.db();\n-        if let Some(actm) = self.const_.as_assoc_item(db) {\n-            if let Some(trt) = actm.containing_trait_or_trait_impl(db) {\n-                item.trait_name(trt.name(db).to_smol_str());\n-                item.insert_text(name);\n-            }\n+fn render(ctx: RenderContext<'_>, const_: hir::Const) -> Option<CompletionItem> {\n+    let db = ctx.db();\n+    let name = const_.name(db)?.to_smol_str();\n+    // FIXME: This is parsing files!\n+    let detail = const_label(&const_.source(db)?.value);\n+\n+    let mut item = CompletionItem::new(SymbolKind::Const, ctx.source_range(), name.clone());\n+    item.set_documentation(ctx.docs(const_))\n+        .set_deprecated(ctx.is_deprecated(const_) || ctx.is_deprecated_assoc_item(const_))\n+        .detail(detail);\n+\n+    if let Some(actm) = const_.as_assoc_item(db) {\n+        if let Some(trt) = actm.containing_trait_or_trait_impl(db) {\n+            item.trait_name(trt.name(db).to_smol_str());\n+            item.insert_text(name);\n         }\n-\n-        Some(item.build())\n     }\n \n-    fn detail(&self) -> String {\n-        const_label(&self.ast_node)\n-    }\n+    Some(item.build())\n }"}]}