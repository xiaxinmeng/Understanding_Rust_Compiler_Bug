{"sha": "5b969a2a58da5a1c7f6ea0587b9ff97b56e2f21d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViOTY5YTJhNThkYTVhMWM3ZjZlYTA1ODdiOWZmOTdiNTZlMmYyMWQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-18T00:11:56Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-18T08:09:22Z"}, "message": "Improve import failure detection.", "tree": {"sha": "fe9f39b870d1e39dcb967a6d0f1122352fa460d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe9f39b870d1e39dcb967a6d0f1122352fa460d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b969a2a58da5a1c7f6ea0587b9ff97b56e2f21d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b969a2a58da5a1c7f6ea0587b9ff97b56e2f21d", "html_url": "https://github.com/rust-lang/rust/commit/5b969a2a58da5a1c7f6ea0587b9ff97b56e2f21d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b969a2a58da5a1c7f6ea0587b9ff97b56e2f21d/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbc322975f198a98d917b5dad0eee557f9889508", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc322975f198a98d917b5dad0eee557f9889508", "html_url": "https://github.com/rust-lang/rust/commit/fbc322975f198a98d917b5dad0eee557f9889508"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "195333f4acda28cb2d198fa586949488ba0cdb10", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5b969a2a58da5a1c7f6ea0587b9ff97b56e2f21d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b969a2a58da5a1c7f6ea0587b9ff97b56e2f21d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=5b969a2a58da5a1c7f6ea0587b9ff97b56e2f21d", "patch": "@@ -68,7 +68,7 @@ pub struct ImportDirective<'a> {\n     target_module: Cell<Option<Module<'a>>>, // the resolution of `module_path`\n     subclass: ImportDirectiveSubclass<'a>,\n     span: Span,\n-    vis: ty::Visibility, // see note in ImportResolutionPerNamespace about how to use this\n+    vis: Cell<ty::Visibility>,\n }\n \n impl<'a> ImportDirective<'a> {\n@@ -191,7 +191,7 @@ impl<'a> Resolver<'a> {\n \n         // Check if the globs are determined\n         for directive in module.globs.borrow().iter() {\n-            if self.is_accessible(directive.vis) {\n+            if self.is_accessible(directive.vis.get()) {\n                 if let Some(target_module) = directive.target_module.get() {\n                     let result = self.resolve_name_in_module(target_module, name, ns, true, None);\n                     if let Indeterminate = result {\n@@ -219,7 +219,7 @@ impl<'a> Resolver<'a> {\n         // Check if a single import can still define the name.\n         match resolution.single_imports {\n             SingleImports::AtLeastOne => return Some(Indeterminate),\n-            SingleImports::MaybeOne(directive) if self.is_accessible(directive.vis) => {\n+            SingleImports::MaybeOne(directive) if self.is_accessible(directive.vis.get()) => {\n                 let target_module = match directive.target_module.get() {\n                     Some(target_module) => target_module,\n                     None => return Some(Indeterminate),\n@@ -254,7 +254,7 @@ impl<'a> Resolver<'a> {\n             subclass: subclass,\n             span: span,\n             id: id,\n-            vis: vis,\n+            vis: Cell::new(vis),\n         });\n \n         self.indeterminate_imports.push(directive);\n@@ -282,7 +282,7 @@ impl<'a> Resolver<'a> {\n                 directive: directive,\n             },\n             span: directive.span,\n-            vis: directive.vis,\n+            vis: directive.vis.get(),\n         }\n     }\n \n@@ -488,13 +488,22 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         let module = directive.parent;\n         self.set_current_module(module);\n \n-        let target_module = match directive.target_module.get() {\n-            Some(module) => module,\n-            _ => match self.resolve_module_path(&directive.module_path, DontUseLexicalScope, None) {\n+        let target_module = if let Some(module) = directive.target_module.get() {\n+            module\n+        } else {\n+            let vis = directive.vis.get();\n+            // For better failure detection, pretend that the import will not define any names\n+            // while resolving its module path.\n+            directive.vis.set(ty::Visibility::PrivateExternal);\n+            let result =\n+                self.resolve_module_path(&directive.module_path, DontUseLexicalScope, None);\n+            directive.vis.set(vis);\n+\n+            match result {\n                 Success(module) => module,\n                 Indeterminate => return Indeterminate,\n                 Failed(err) => return Failed(err),\n-            },\n+            }\n         };\n \n         directive.target_module.set(Some(target_module));\n@@ -614,7 +623,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         }\n \n         match (value_result, type_result) {\n-            (Ok(binding), _) if !binding.pseudo_vis().is_at_least(directive.vis, self) => {\n+            (Ok(binding), _) if !binding.pseudo_vis().is_at_least(directive.vis.get(), self) => {\n                 let msg = format!(\"`{}` is private, and cannot be reexported\", source);\n                 let note_msg = format!(\"consider marking `{}` as `pub` in the imported module\",\n                                         source);\n@@ -623,7 +632,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                     .emit();\n             }\n \n-            (_, Ok(binding)) if !binding.pseudo_vis().is_at_least(directive.vis, self) => {\n+            (_, Ok(binding)) if !binding.pseudo_vis().is_at_least(directive.vis.get(), self) => {\n                 if binding.is_extern_crate() {\n                     let msg = format!(\"extern crate `{}` is private, and cannot be reexported \\\n                                        (error E0364), consider declaring with `pub`\","}]}