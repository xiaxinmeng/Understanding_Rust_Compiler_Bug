{"sha": "928819a9f7dc0f0a9830f4217021d7d3be6d5936", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyODgxOWE5ZjdkYzBmMGE5ODMwZjQyMTcwMjFkN2QzYmU2ZDU5MzY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-18T15:57:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-18T15:57:35Z"}, "message": "Rollup merge of #82112 - BoxyUwU:tumbleweed, r=varkor\n\nconst_generics: Dont evaluate array length const when handling yet another error\n\nSame ICE as #82009 except triggered by a different error.\ncc ``@lcnr``\nr? ``@varkor``", "tree": {"sha": "a7ccf2ce834b8b48807ea87180df7cc413f8f47d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7ccf2ce834b8b48807ea87180df7cc413f8f47d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/928819a9f7dc0f0a9830f4217021d7d3be6d5936", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgLo5vCRBK7hj4Ov3rIwAAdHIIAIDsLEAY4rcLs7DOJ+y8IkRm\njfyAMXZ8QV87elZBB5duj1IqlJsy2ThwmcQHyopHfO7UwtTfmgVcir31ovpOmNe2\nTshfTZ/80+QWnzlsFRiY/9OYucc6xWxk0mvNR+HMPcAdEzX8MblBba//rkOKC/B6\n53IQsICgpWO9m6fcNrYR3W8sJISIQYVNsdThVSe0EGbzSFa+fS3oUNC5W2BQnFby\nSwRWRme8OL9Dmc7wlCdXfNjORBJxxbIoIy873F+SRedwOMtqYwALdmvS0rfMrU5w\ncfS9n1eR4gp4VzGvxkzNArvRH/mYmTs3aZEOAV7NCB4YmAMzd/MUN0JcTH8JeYc=\n=7LLS\n-----END PGP SIGNATURE-----\n", "payload": "tree a7ccf2ce834b8b48807ea87180df7cc413f8f47d\nparent 66211f6657971bdaf18996400435b6a416aa3343\nparent 7e368e57f278b8073193c73001f4efc4af08fdfd\nauthor Dylan DPC <dylan.dpc@gmail.com> 1613663855 +0100\ncommitter GitHub <noreply@github.com> 1613663855 +0100\n\nRollup merge of #82112 - BoxyUwU:tumbleweed, r=varkor\n\nconst_generics: Dont evaluate array length const when handling yet another error\n\nSame ICE as #82009 except triggered by a different error.\ncc ``@lcnr``\nr? ``@varkor``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/928819a9f7dc0f0a9830f4217021d7d3be6d5936", "html_url": "https://github.com/rust-lang/rust/commit/928819a9f7dc0f0a9830f4217021d7d3be6d5936", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/928819a9f7dc0f0a9830f4217021d7d3be6d5936/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66211f6657971bdaf18996400435b6a416aa3343", "url": "https://api.github.com/repos/rust-lang/rust/commits/66211f6657971bdaf18996400435b6a416aa3343", "html_url": "https://github.com/rust-lang/rust/commit/66211f6657971bdaf18996400435b6a416aa3343"}, {"sha": "7e368e57f278b8073193c73001f4efc4af08fdfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e368e57f278b8073193c73001f4efc4af08fdfd", "html_url": "https://github.com/rust-lang/rust/commit/7e368e57f278b8073193c73001f4efc4af08fdfd"}], "stats": {"total": 72, "additions": 49, "deletions": 23}, "files": [{"sha": "8a1be7ea1726d1c957bbedf25891b6d7ce282123", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/928819a9f7dc0f0a9830f4217021d7d3be6d5936/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928819a9f7dc0f0a9830f4217021d7d3be6d5936/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=928819a9f7dc0f0a9830f4217021d7d3be6d5936", "patch": "@@ -72,17 +72,16 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                 // We were unable to unify the abstract constant with\n                 // a constant found in the caller bounds, there are\n                 // now three possible cases here.\n-                //\n-                // - The substs are concrete enough that we can simply\n-                //   try and evaluate the given constant.\n-                // - The abstract const still references an inference\n-                //   variable, in this case we return `TooGeneric`.\n-                // - The abstract const references a generic parameter,\n-                //   this means that we emit an error here.\n                 #[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n                 enum FailureKind {\n+                    /// The abstract const still references an inference\n+                    /// variable, in this case we return `TooGeneric`.\n                     MentionsInfer,\n+                    /// The abstract const references a generic parameter,\n+                    /// this means that we emit an error here.\n                     MentionsParam,\n+                    /// The substs are concrete enough that we can simply\n+                    /// try and evaluate the given constant.\n                     Concrete,\n                 }\n                 let mut failure_kind = FailureKind::Concrete;"}, {"sha": "e6a1cf58fe3734c6c8bc98b3ae9dee588a9e0b4b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/928819a9f7dc0f0a9830f4217021d7d3be6d5936/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928819a9f7dc0f0a9830f4217021d7d3be6d5936/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=928819a9f7dc0f0a9830f4217021d7d3be6d5936", "patch": "@@ -200,22 +200,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             if let Some(def) = aty.ty_adt_def() {\n                 // We also want to be able to select the array's type's original\n                 // signature with no type arguments resolved\n-                flags.push((\n-                    sym::_Self,\n-                    Some(format!(\"[{}]\", self.tcx.type_of(def.did).to_string())),\n-                ));\n-                let tcx = self.tcx;\n-                if let Some(len) = len.try_eval_usize(tcx, ty::ParamEnv::empty()) {\n-                    flags.push((\n-                        sym::_Self,\n-                        Some(format!(\"[{}; {}]\", self.tcx.type_of(def.did).to_string(), len)),\n-                    ));\n-                } else {\n-                    flags.push((\n-                        sym::_Self,\n-                        Some(format!(\"[{}; _]\", self.tcx.type_of(def.did).to_string())),\n-                    ));\n-                }\n+                let type_string = self.tcx.type_of(def.did).to_string();\n+                flags.push((sym::_Self, Some(format!(\"[{}]\", type_string))));\n+\n+                let len = len.val.try_to_value().and_then(|v| v.try_to_machine_usize(self.tcx));\n+                let string = match len {\n+                    Some(n) => format!(\"[{}; {}]\", type_string, n),\n+                    None => format!(\"[{}; _]\", type_string),\n+                };\n+                flags.push((sym::_Self, Some(string)));\n             }\n         }\n         if let ty::Dynamic(traits, _) = self_ty.kind() {"}, {"sha": "afef748ff46906a2f30a5d335446aa4f04f97885", "filename": "src/test/ui/const-generics/dont-evaluate-array-len-on-err-1.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/928819a9f7dc0f0a9830f4217021d7d3be6d5936/src%2Ftest%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928819a9f7dc0f0a9830f4217021d7d3be6d5936/src%2Ftest%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.rs?ref=928819a9f7dc0f0a9830f4217021d7d3be6d5936", "patch": "@@ -0,0 +1,22 @@\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+// This tests that during error handling for the \"trait not implemented\" error\n+// we dont try to evaluate std::mem::size_of::<Self::Assoc> causing an ICE\n+\n+struct Adt;\n+\n+trait Foo {\n+    type Assoc;\n+    fn foo()\n+    where\n+        [Adt; std::mem::size_of::<Self::Assoc>()]: ,\n+    {\n+        <[Adt; std::mem::size_of::<Self::Assoc>()] as Foo>::bar()\n+        //~^ Error: the trait bound\n+    }\n+\n+    fn bar() {}\n+}\n+\n+fn main() {}"}, {"sha": "d894fa90ba9e1c72a67bf84ea293541be55f9895", "filename": "src/test/ui/const-generics/dont-evaluate-array-len-on-err-1.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/928819a9f7dc0f0a9830f4217021d7d3be6d5936/src%2Ftest%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/928819a9f7dc0f0a9830f4217021d7d3be6d5936/src%2Ftest%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.stderr?ref=928819a9f7dc0f0a9830f4217021d7d3be6d5936", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the trait bound `[Adt; _]: Foo` is not satisfied\n+  --> $DIR/dont-evaluate-array-len-on-err-1.rs:15:9\n+   |\n+LL |         <[Adt; std::mem::size_of::<Self::Assoc>()] as Foo>::bar()\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `[Adt; _]`\n+...\n+LL |     fn bar() {}\n+   |     -------- required by `Foo::bar`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}