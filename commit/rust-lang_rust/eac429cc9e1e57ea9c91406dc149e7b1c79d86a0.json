{"sha": "eac429cc9e1e57ea9c91406dc149e7b1c79d86a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYzQyOWNjOWUxZTU3ZWE5YzkxNDA2ZGMxNDllN2IxYzc5ZDg2YTA=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-09-25T08:55:04Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-09-25T08:55:04Z"}, "message": "Move the linearly-updated flag state into the Visitor.", "tree": {"sha": "69df06cfe09e831f16574e7fd25c69380656d54e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69df06cfe09e831f16574e7fd25c69380656d54e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eac429cc9e1e57ea9c91406dc149e7b1c79d86a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eac429cc9e1e57ea9c91406dc149e7b1c79d86a0", "html_url": "https://github.com/rust-lang/rust/commit/eac429cc9e1e57ea9c91406dc149e7b1c79d86a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eac429cc9e1e57ea9c91406dc149e7b1c79d86a0/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ed338caa7fd4017d57254cdc13a77e38505dd02", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ed338caa7fd4017d57254cdc13a77e38505dd02", "html_url": "https://github.com/rust-lang/rust/commit/6ed338caa7fd4017d57254cdc13a77e38505dd02"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "eeef2b798e20a002499ac326684ebc343597301d", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/eac429cc9e1e57ea9c91406dc149e7b1c79d86a0/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac429cc9e1e57ea9c91406dc149e7b1c79d86a0/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=eac429cc9e1e57ea9c91406dc149e7b1c79d86a0", "patch": "@@ -61,52 +61,54 @@ pub fn field_exprs(fields: ~[ast::Field]) -> ~[@ast::Expr] {\n }\n \n struct LoopQueryVisitor<'self> {\n-    p: &'self fn(&ast::Expr_) -> bool\n+    p: &'self fn(&ast::Expr_) -> bool,\n+    flag: bool,\n }\n \n-impl<'self> Visitor<@mut bool> for LoopQueryVisitor<'self> {\n-    fn visit_expr(&mut self, e: @ast::Expr, flag: @mut bool) {\n-        *flag |= (self.p)(&e.node);\n+impl<'self> Visitor<()> for LoopQueryVisitor<'self> {\n+    fn visit_expr(&mut self, e: @ast::Expr, _: ()) {\n+        self.flag |= (self.p)(&e.node);\n         match e.node {\n           // Skip inner loops, since a break in the inner loop isn't a\n           // break inside the outer loop\n           ast::ExprLoop(*) | ast::ExprWhile(*) => {}\n-          _ => visit::walk_expr(self, e, flag)\n+          _ => visit::walk_expr(self, e, ())\n         }\n     }\n }\n \n // Takes a predicate p, returns true iff p is true for any subexpressions\n // of b -- skipping any inner loops (loop, while, loop_body)\n pub fn loop_query(b: &ast::Block, p: &fn(&ast::Expr_) -> bool) -> bool {\n-    let rs = @mut false;\n     let mut v = LoopQueryVisitor {\n         p: p,\n+        flag: false,\n     };\n-    visit::walk_block(&mut v, b, rs);\n-    return *rs;\n+    visit::walk_block(&mut v, b, ());\n+    return v.flag;\n }\n \n struct BlockQueryVisitor<'self> {\n-    p: &'self fn(@ast::Expr) -> bool\n+    p: &'self fn(@ast::Expr) -> bool,\n+    flag: bool,\n }\n \n-impl<'self> Visitor<@mut bool> for BlockQueryVisitor<'self> {\n-    fn visit_expr(&mut self, e: @ast::Expr, flag: @mut bool) {\n-        *flag |= (self.p)(e);\n-        visit::walk_expr(self, e, flag)\n+impl<'self> Visitor<()> for BlockQueryVisitor<'self> {\n+    fn visit_expr(&mut self, e: @ast::Expr, _:()) {\n+        self.flag |= (self.p)(e);\n+        visit::walk_expr(self, e, ())\n     }\n }\n \n // Takes a predicate p, returns true iff p is true for any subexpressions\n // of b -- skipping any inner loops (loop, while, loop_body)\n pub fn block_query(b: &ast::Block, p: &fn(@ast::Expr) -> bool) -> bool {\n-    let rs = @mut false;\n     let mut v = BlockQueryVisitor {\n         p: p,\n+        flag: false,\n     };\n-    visit::walk_block(&mut v, b, rs);\n-    return *rs;\n+    visit::walk_block(&mut v, b, ());\n+    return v.flag;\n }\n \n pub fn local_rhs_span(l: @ast::Local, def: Span) -> Span {"}]}