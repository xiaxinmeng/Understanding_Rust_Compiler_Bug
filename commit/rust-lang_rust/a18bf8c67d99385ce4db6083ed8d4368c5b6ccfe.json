{"sha": "a18bf8c67d99385ce4db6083ed8d4368c5b6ccfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExOGJmOGM2N2Q5OTM4NWNlNGRiNjA4M2VkOGQ0MzY4YzViNmNjZmU=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-03T19:44:11Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-06T03:37:50Z"}, "message": "rustc: minor code cleanup", "tree": {"sha": "ca1e375e2d53caec3553e1a04b6effeaf2a49352", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca1e375e2d53caec3553e1a04b6effeaf2a49352"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a18bf8c67d99385ce4db6083ed8d4368c5b6ccfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a18bf8c67d99385ce4db6083ed8d4368c5b6ccfe", "html_url": "https://github.com/rust-lang/rust/commit/a18bf8c67d99385ce4db6083ed8d4368c5b6ccfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a18bf8c67d99385ce4db6083ed8d4368c5b6ccfe/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f263dd0238ff85943a794bd3214ffa64b764a64", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f263dd0238ff85943a794bd3214ffa64b764a64", "html_url": "https://github.com/rust-lang/rust/commit/8f263dd0238ff85943a794bd3214ffa64b764a64"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "76080ece3d8698b729b6170467855acd3c7a190d", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a18bf8c67d99385ce4db6083ed8d4368c5b6ccfe/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18bf8c67d99385ce4db6083ed8d4368c5b6ccfe/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=a18bf8c67d99385ce4db6083ed8d4368c5b6ccfe", "patch": "@@ -97,7 +97,7 @@ fn find_library_crate_aux(\n     filesearch::search(filesearch, |path| {\n         debug!(\"inspecting file %s\", path.to_str());\n         let f: ~str = path.filename().get();\n-        if !(str::starts_with(f, prefix) && str::ends_with(f, suffix)) {\n+        if !(f.starts_with(prefix) && f.ends_with(suffix)) {\n             debug!(\"skipping %s, doesn't look like %s*%s\", path.to_str(),\n                    prefix, suffix);\n             option::None::<()>"}, {"sha": "f9f655d50218fba390ac9274dcc76306c84d67ee", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a18bf8c67d99385ce4db6083ed8d4368c5b6ccfe/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18bf8c67d99385ce4db6083ed8d4368c5b6ccfe/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=a18bf8c67d99385ce4db6083ed8d4368c5b6ccfe", "patch": "@@ -133,7 +133,7 @@ pub fn raw_pat(p: @pat) -> @pat {\n \n pub fn check_exhaustive(cx: @MatchCheckCtxt, sp: span, pats: ~[@pat]) {\n     assert(!pats.is_empty());\n-    let ext = match is_useful(cx, vec::map(pats, |p| ~[*p]), ~[wild()]) {\n+    let ext = match is_useful(cx, &pats.map(|p| ~[*p]), ~[wild()]) {\n         not_useful => {\n             // This is good, wildcard pattern isn't reachable\n             return;\n@@ -165,7 +165,7 @@ pub fn check_exhaustive(cx: @MatchCheckCtxt, sp: span, pats: ~[@pat]) {\n                 ty::ty_unboxed_vec(*) | ty::ty_evec(*) => {\n                     match *ctor {\n                         vec(n) => Some(@fmt!(\"vectors of length %u\", n)),\n-                    _ => None\n+                        _ => None\n                     }\n                 }\n                 _ => None\n@@ -205,10 +205,10 @@ pub enum ctor {\n \n // Note: is_useful doesn't work on empty types, as the paper notes.\n // So it assumes that v is non-empty.\n-pub fn is_useful(cx: @MatchCheckCtxt, +m: matrix, +v: &[@pat]) -> useful {\n+pub fn is_useful(cx: @MatchCheckCtxt, m: &matrix, v: &[@pat]) -> useful {\n     if m.len() == 0u { return useful_; }\n     if m[0].len() == 0u { return not_useful; }\n-    let real_pat = match vec::find(m, |r| r[0].id != 0) {\n+    let real_pat = match m.find(|r| r[0].id != 0) {\n       Some(r) => r[0], None => v[0]\n     };\n     let left_ty = if real_pat.id == 0 { ty::mk_nil(cx.tcx) }\n@@ -264,7 +264,7 @@ pub fn is_useful(cx: @MatchCheckCtxt, +m: matrix, +v: &[@pat]) -> useful {\n           }\n           Some(ref ctor) => {\n             match is_useful(cx,\n-                            vec::filter_map(m, |r| default(cx, r)),\n+                            &m.filter_mapped(|r| default(cx, *r)),\n                             v.tail()) {\n               useful_ => useful(left_ty, (/*bad*/copy *ctor)),\n               ref u => (/*bad*/copy *u)\n@@ -280,15 +280,15 @@ pub fn is_useful(cx: @MatchCheckCtxt, +m: matrix, +v: &[@pat]) -> useful {\n }\n \n pub fn is_useful_specialized(cx: @MatchCheckCtxt,\n-                             m: matrix,\n+                             m: &matrix,\n                              v: &[@pat],\n                              +ctor: ctor,\n                              arity: uint,\n                              lty: ty::t)\n                           -> useful {\n     let ms = m.filter_mapped(|r| specialize(cx, *r, ctor, arity, lty));\n     let could_be_useful = is_useful(\n-        cx, ms, specialize(cx, v, ctor, arity, lty).get());\n+        cx, &ms, specialize(cx, v, ctor, arity, lty).get());\n     match could_be_useful {\n       useful_ => useful(lty, ctor),\n       ref u => (/*bad*/copy *u)\n@@ -347,7 +347,7 @@ pub fn is_wild(cx: @MatchCheckCtxt, p: @pat) -> bool {\n }\n \n pub fn missing_ctor(cx: @MatchCheckCtxt,\n-                    m: matrix,\n+                    m: &matrix,\n                     left_ty: ty::t)\n                  -> Option<ctor> {\n     match ty::get(left_ty).sty {"}, {"sha": "77ad7df53197877461e7ac9e965c220c2c5e30ff", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a18bf8c67d99385ce4db6083ed8d4368c5b6ccfe/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18bf8c67d99385ce4db6083ed8d4368c5b6ccfe/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=a18bf8c67d99385ce4db6083ed8d4368c5b6ccfe", "patch": "@@ -26,7 +26,7 @@ pub fn pat_id_map(dm: resolve::DefMap, pat: @pat) -> PatIdMap {\n     do pat_bindings(dm, pat) |_bm, p_id, _s, n| {\n       map.insert(path_to_ident(n), p_id);\n     };\n-    return map;\n+    map\n }\n \n pub fn pat_is_variant_or_struct(dm: resolve::DefMap, pat: @pat) -> bool {"}, {"sha": "83ef5a6f3a85594132a2b78a7be4566efa8f22dc", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a18bf8c67d99385ce4db6083ed8d4368c5b6ccfe/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18bf8c67d99385ce4db6083ed8d4368c5b6ccfe/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=a18bf8c67d99385ce4db6083ed8d4368c5b6ccfe", "patch": "@@ -130,18 +130,18 @@ pub fn parse_config_(\n     let args = args.tail();\n     let opts = vec::unzip(opts()).first();\n     match getopts::getopts(args, opts) {\n-        result::Ok(matches) => {\n+        Ok(matches) => {\n             if matches.free.len() == 1 {\n-                let input_crate = Path(copy *matches.free.head());\n+                let input_crate = Path(*matches.free.head());\n                 config_from_opts(&input_crate, &matches, program_output)\n             } else if matches.free.is_empty() {\n-                result::Err(~\"no crates specified\")\n+                Err(~\"no crates specified\")\n             } else {\n-                result::Err(~\"multiple crates specified\")\n+                Err(~\"multiple crates specified\")\n             }\n         }\n-        result::Err(f) => {\n-            result::Err(getopts::fail_str(f))\n+        Err(f) => {\n+            Err(getopts::fail_str(f))\n         }\n     }\n }"}]}