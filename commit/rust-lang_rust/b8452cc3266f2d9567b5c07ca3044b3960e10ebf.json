{"sha": "b8452cc3266f2d9567b5c07ca3044b3960e10ebf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NDUyY2MzMjY2ZjJkOTU2N2I1YzA3Y2EzMDQ0YjM5NjBlMTBlYmY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-03-01T12:22:11Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-03-16T13:57:07Z"}, "message": "Clarify behaviour of sort_unstable_by_key with respect to sort_by_key", "tree": {"sha": "bf7c8fd7191751f139934e15ca603bbe20bb6488", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf7c8fd7191751f139934e15ca603bbe20bb6488"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8452cc3266f2d9567b5c07ca3044b3960e10ebf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8452cc3266f2d9567b5c07ca3044b3960e10ebf", "html_url": "https://github.com/rust-lang/rust/commit/b8452cc3266f2d9567b5c07ca3044b3960e10ebf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8452cc3266f2d9567b5c07ca3044b3960e10ebf/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "670e69e20753e2ef33ee61b0515092cace3fd716", "url": "https://api.github.com/repos/rust-lang/rust/commits/670e69e20753e2ef33ee61b0515092cace3fd716", "html_url": "https://github.com/rust-lang/rust/commit/670e69e20753e2ef33ee61b0515092cace3fd716"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "63b22bd0f6d87603733f6f39742cf6831da39d32", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b8452cc3266f2d9567b5c07ca3044b3960e10ebf/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8452cc3266f2d9567b5c07ca3044b3960e10ebf/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=b8452cc3266f2d9567b5c07ca3044b3960e10ebf", "patch": "@@ -1303,6 +1303,7 @@ impl<T> [T] {\n     /// Sorts the slice with a key extraction function.\n     ///\n     /// During sorting, the key function is called only once per element.\n+    ///\n     /// This sort is stable (i.e. does not reorder equal elements) and `O(m n + n log n)`\n     /// worst-case, where the key function is `O(m)`.\n     ///\n@@ -1329,7 +1330,10 @@ impl<T> [T] {\n         where F: FnMut(&T) -> B, B: Ord\n     {\n         let mut indices: Vec<_> = self.iter().map(f).enumerate().map(|(i, k)| (k, i)).collect();\n-        indices.sort();\n+        // The elements of `indices` are unique, as they are indexed, so any sort will be stable\n+        // with respect to the original slice. We use `sort_unstable` here because it requires less\n+        // memory allocation.\n+        indices.sort_unstable();\n         for i in 0..self.len() {\n             let mut index = indices[i].1;\n             while index < i {\n@@ -1414,8 +1418,11 @@ impl<T> [T] {\n     /// Sorts the slice with a key extraction function, but may not preserve the order of equal\n     /// elements.\n     ///\n+    /// Note that, currently, the key function for `sort_unstable_by_key` is called multiple times\n+    /// per element, unlike `sort_stable_by_key`.\n+    ///\n     /// This sort is unstable (i.e. may reorder equal elements), in-place (i.e. does not allocate),\n-    /// and `O(n log n)` worst-case.\n+    /// and `O(m n log m n)` worst-case, where the key function is `O(m)`.\n     ///\n     /// # Current implementation\n     ///\n@@ -1425,8 +1432,8 @@ impl<T> [T] {\n     /// randomization to avoid degenerate cases, but with a fixed seed to always provide\n     /// deterministic behavior.\n     ///\n-    /// It is typically faster than stable sorting, except in a few special cases, e.g. when the\n-    /// slice consists of several concatenated sorted sequences.\n+    /// Due to its key calling strategy, `sort_unstable_by_key` is likely to be slower than\n+    /// `sort_by_key` in cases where the key function is expensive.\n     ///\n     /// # Examples\n     ///"}]}