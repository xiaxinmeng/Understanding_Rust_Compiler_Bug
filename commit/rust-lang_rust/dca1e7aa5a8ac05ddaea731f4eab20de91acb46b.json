{"sha": "dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "node_id": "C_kwDOAAsO6NoAKGRjYTFlN2FhNWE4YWMwNWRkYWVhNzMxZjRlYWIyMGRlOTFhY2I0NmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-02T12:37:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-02T12:37:28Z"}, "message": "Auto merge of #93154 - michaelwoerister:fix-generic-closure-and-generator-debuginfo, r=wesleywiser\n\ndebuginfo: Make sure that type names for closure and generator environments are unique in debuginfo.\n\nBefore this change, closure/generator environments coming from different instantiations of the same generic function were all assigned the same name even though they were distinct types with potentially different data layout. Now we append the generic arguments of the originating function to the type name.\n\nThis commit also emits `{closure_env#0}` as the name of these types in order to disambiguate them from the accompanying closure function (which keeps being called `{closure#0}`). Previously both were assigned the same name.\n\nNOTE: Changing debuginfo names like this can break pretty printers and other debugger plugins. I think it's OK in this particular case because the names we are changing were ambiguous anyway. In general though it would be great to have a process for doing changes like these.", "tree": {"sha": "998630298a1ad039ae3be5f6fa34a80ddee06c15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/998630298a1ad039ae3be5f6fa34a80ddee06c15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "html_url": "https://github.com/rust-lang/rust/commit/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "250384edc5d78533e993f38c60d64e42b21684b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/250384edc5d78533e993f38c60d64e42b21684b2", "html_url": "https://github.com/rust-lang/rust/commit/250384edc5d78533e993f38c60d64e42b21684b2"}, {"sha": "fd7557b7ee454058fff84b556892adbef89f7d52", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd7557b7ee454058fff84b556892adbef89f7d52", "html_url": "https://github.com/rust-lang/rust/commit/fd7557b7ee454058fff84b556892adbef89f7d52"}], "stats": {"total": 408, "additions": 287, "deletions": 121}, "files": [{"sha": "6bc7d8518dc96d0204f4e5e66c2b1a2a2c90b95b", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "patch": "@@ -25,7 +25,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_hir::def_id::{DefId, DefIdMap};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir;\n-use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n+use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, Instance, ParamEnv, Ty, TypeFoldable};\n use rustc_session::config::{self, DebugInfo};\n@@ -318,9 +318,11 @@ impl<'ll, 'tcx> DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n         maybe_definition_llfn: Option<&'ll Value>,\n     ) -> &'ll DIScope {\n+        let tcx = self.tcx;\n+\n         let def_id = instance.def_id();\n         let containing_scope = get_containing_scope(self, instance);\n-        let span = self.tcx.def_span(def_id);\n+        let span = tcx.def_span(def_id);\n         let loc = self.lookup_debug_loc(span.lo());\n         let file_metadata = file_metadata(self, &loc.file);\n \n@@ -330,16 +332,24 @@ impl<'ll, 'tcx> DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         };\n \n         let mut name = String::new();\n-        type_names::push_item_name(self.tcx(), def_id, false, &mut name);\n+        type_names::push_item_name(tcx, def_id, false, &mut name);\n \n         // Find the enclosing function, in case this is a closure.\n-        let enclosing_fn_def_id = self.tcx().typeck_root_def_id(def_id);\n+        let enclosing_fn_def_id = tcx.typeck_root_def_id(def_id);\n+\n+        // We look up the generics of the enclosing function and truncate the substs\n+        // to their length in order to cut off extra stuff that might be in there for\n+        // closures or generators.\n+        let generics = tcx.generics_of(enclosing_fn_def_id);\n+        let substs = instance.substs.truncate_to(tcx, generics);\n+\n+        type_names::push_generic_params(\n+            tcx,\n+            tcx.normalize_erasing_regions(ty::ParamEnv::reveal_all(), substs),\n+            &mut name,\n+        );\n \n-        // Get_template_parameters() will append a `<...>` clause to the function\n-        // name if necessary.\n-        let generics = self.tcx().generics_of(enclosing_fn_def_id);\n-        let substs = instance.substs.truncate_to(self.tcx(), generics);\n-        let template_parameters = get_template_parameters(self, generics, substs, &mut name);\n+        let template_parameters = get_template_parameters(self, generics, substs);\n \n         let linkage_name = &mangled_name_of_instance(self, instance).name;\n         // Omit the linkage_name if it is the same as subprogram name.\n@@ -361,7 +371,7 @@ impl<'ll, 'tcx> DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         if self.sess().opts.optimize != config::OptLevel::No {\n             spflags |= DISPFlags::SPFlagOptimized;\n         }\n-        if let Some((id, _)) = self.tcx.entry_fn(()) {\n+        if let Some((id, _)) = tcx.entry_fn(()) {\n             if id == def_id {\n                 spflags |= DISPFlags::SPFlagMainSubprogram;\n             }\n@@ -440,14 +450,7 @@ impl<'ll, 'tcx> DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             cx: &CodegenCx<'ll, 'tcx>,\n             generics: &ty::Generics,\n             substs: SubstsRef<'tcx>,\n-            name_to_append_suffix_to: &mut String,\n         ) -> &'ll DIArray {\n-            type_names::push_generic_params(\n-                cx.tcx,\n-                cx.tcx.normalize_erasing_regions(ty::ParamEnv::reveal_all(), substs),\n-                name_to_append_suffix_to,\n-            );\n-\n             if substs.types().next().is_none() {\n                 return create_DIArray(DIB(cx), &[]);\n             }"}, {"sha": "831c34d8f1f604fdd232d18c4605294088697146", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 74, "deletions": 36, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "patch": "@@ -13,9 +13,9 @@\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathData};\n+use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Mutability};\n use rustc_middle::ty::layout::IntegerExt;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, AdtDef, ExistentialProjection, Ty, TyCtxt};\n@@ -102,14 +102,14 @@ fn push_debuginfo_type_name<'tcx>(\n         ty::RawPtr(ty::TypeAndMut { ty: inner_type, mutbl }) => {\n             if cpp_like_debuginfo {\n                 match mutbl {\n-                    hir::Mutability::Not => output.push_str(\"ptr_const$<\"),\n-                    hir::Mutability::Mut => output.push_str(\"ptr_mut$<\"),\n+                    Mutability::Not => output.push_str(\"ptr_const$<\"),\n+                    Mutability::Mut => output.push_str(\"ptr_mut$<\"),\n                 }\n             } else {\n                 output.push('*');\n                 match mutbl {\n-                    hir::Mutability::Not => output.push_str(\"const \"),\n-                    hir::Mutability::Mut => output.push_str(\"mut \"),\n+                    Mutability::Not => output.push_str(\"const \"),\n+                    Mutability::Mut => output.push_str(\"mut \"),\n                 }\n             }\n \n@@ -131,8 +131,8 @@ fn push_debuginfo_type_name<'tcx>(\n                 output.push_str(mutbl.prefix_str());\n             } else if !is_slice_or_str {\n                 match mutbl {\n-                    hir::Mutability::Not => output.push_str(\"ref$<\"),\n-                    hir::Mutability::Mut => output.push_str(\"ref_mut$<\"),\n+                    Mutability::Not => output.push_str(\"ref$<\"),\n+                    Mutability::Mut => output.push_str(\"ref_mut$<\"),\n                 }\n             }\n \n@@ -345,14 +345,39 @@ fn push_debuginfo_type_name<'tcx>(\n             // processing\n             visited.remove(t);\n         }\n-        ty::Closure(def_id, ..) | ty::Generator(def_id, ..) => {\n-            let key = tcx.def_key(def_id);\n+        ty::Closure(def_id, substs) | ty::Generator(def_id, substs, ..) => {\n+            // Name will be \"{closure_env#0}<T1, T2, ...>\", \"{generator_env#0}<T1, T2, ...>\", or\n+            // \"{async_fn_env#0}<T1, T2, ...>\", etc.\n+            let def_key = tcx.def_key(def_id);\n+\n             if qualified {\n-                let parent_def_id = DefId { index: key.parent.unwrap(), ..def_id };\n+                let parent_def_id = DefId { index: def_key.parent.unwrap(), ..def_id };\n                 push_item_name(tcx, parent_def_id, true, output);\n                 output.push_str(\"::\");\n             }\n-            push_unqualified_item_name(tcx, def_id, key.disambiguated_data, output);\n+\n+            let mut label = String::with_capacity(20);\n+            write!(&mut label, \"{}_env\", generator_kind_label(tcx.generator_kind(def_id))).unwrap();\n+\n+            push_disambiguated_special_name(\n+                &label,\n+                def_key.disambiguated_data.disambiguator,\n+                cpp_like_debuginfo,\n+                output,\n+            );\n+\n+            // We also need to add the generic arguments of the async fn/generator or\n+            // the enclosing function (for closures or async blocks), so that we end\n+            // up with a unique name for every instantiation.\n+\n+            // Find the generics of the enclosing function, as defined in the source code.\n+            let enclosing_fn_def_id = tcx.typeck_root_def_id(def_id);\n+            let generics = tcx.generics_of(enclosing_fn_def_id);\n+\n+            // Truncate the substs to the length of the above generics. This will cut off\n+            // anything closure- or generator-specific.\n+            let substs = substs.truncate_to(tcx, generics);\n+            push_generic_params_internal(tcx, substs, output, visited);\n         }\n         // Type parameters from polymorphized functions.\n         ty::Param(_) => {\n@@ -509,6 +534,29 @@ pub fn push_item_name(tcx: TyCtxt<'_>, def_id: DefId, qualified: bool, output: &\n     push_unqualified_item_name(tcx, def_id, def_key.disambiguated_data, output);\n }\n \n+fn generator_kind_label(generator_kind: Option<GeneratorKind>) -> &'static str {\n+    match generator_kind {\n+        Some(GeneratorKind::Async(AsyncGeneratorKind::Block)) => \"async_block\",\n+        Some(GeneratorKind::Async(AsyncGeneratorKind::Closure)) => \"async_closure\",\n+        Some(GeneratorKind::Async(AsyncGeneratorKind::Fn)) => \"async_fn\",\n+        Some(GeneratorKind::Gen) => \"generator\",\n+        None => \"closure\",\n+    }\n+}\n+\n+fn push_disambiguated_special_name(\n+    label: &str,\n+    disambiguator: u32,\n+    cpp_like_debuginfo: bool,\n+    output: &mut String,\n+) {\n+    if cpp_like_debuginfo {\n+        write!(output, \"{}${}\", label, disambiguator).unwrap();\n+    } else {\n+        write!(output, \"{{{}#{}}}\", label, disambiguator).unwrap();\n+    }\n+}\n+\n fn push_unqualified_item_name(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n@@ -519,42 +567,32 @@ fn push_unqualified_item_name(\n         DefPathData::CrateRoot => {\n             output.push_str(tcx.crate_name(def_id.krate).as_str());\n         }\n-        DefPathData::ClosureExpr if tcx.generator_kind(def_id).is_some() => {\n-            let key = match tcx.generator_kind(def_id).unwrap() {\n-                hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Block) => \"async_block\",\n-                hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Closure) => \"async_closure\",\n-                hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Fn) => \"async_fn\",\n-                hir::GeneratorKind::Gen => \"generator\",\n-            };\n-            // Generators look like closures, but we want to treat them differently\n-            // in the debug info.\n-            if cpp_like_debuginfo(tcx) {\n-                write!(output, \"{}${}\", key, disambiguated_data.disambiguator).unwrap();\n-            } else {\n-                write!(output, \"{{{}#{}}}\", key, disambiguated_data.disambiguator).unwrap();\n-            }\n+        DefPathData::ClosureExpr => {\n+            let label = generator_kind_label(tcx.generator_kind(def_id));\n+\n+            push_disambiguated_special_name(\n+                label,\n+                disambiguated_data.disambiguator,\n+                cpp_like_debuginfo(tcx),\n+                output,\n+            );\n         }\n         _ => match disambiguated_data.data.name() {\n             DefPathDataName::Named(name) => {\n                 output.push_str(name.as_str());\n             }\n             DefPathDataName::Anon { namespace } => {\n-                if cpp_like_debuginfo(tcx) {\n-                    write!(output, \"{}${}\", namespace, disambiguated_data.disambiguator).unwrap();\n-                } else {\n-                    write!(output, \"{{{}#{}}}\", namespace, disambiguated_data.disambiguator)\n-                        .unwrap();\n-                }\n+                push_disambiguated_special_name(\n+                    namespace.as_str(),\n+                    disambiguated_data.disambiguator,\n+                    cpp_like_debuginfo(tcx),\n+                    output,\n+                );\n             }\n         },\n     };\n }\n \n-// Pushes the generic parameters in the given `InternalSubsts` to the output string.\n-// This ignores region parameters, since they can't reliably be\n-// reconstructed for items from non-local crates. For local crates, this\n-// would be possible but with inlining and LTO we have to use the least\n-// common denominator - otherwise we would run into conflicts.\n fn push_generic_params_internal<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     substs: SubstsRef<'tcx>,"}, {"sha": "a90c85a54491dd71219f1904cfb2d58149a57685", "filename": "src/test/codegen/async-fn-debug-msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs?ref=dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "patch": "@@ -17,7 +17,7 @@ async fn async_fn_test() {\n // FIXME: No way to reliably check the filename.\n \n // CHECK-DAG:  [[ASYNC_FN:!.*]] = !DINamespace(name: \"async_fn_test\"\n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"async_fn$0\"\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"async_fn_env$0\"\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"variant0\", scope: [[GEN]],\n // For brevity, we only check the struct name and members of the last variant.\n // CHECK-SAME: file: [[FILE:![0-9]*]], line: 11,"}, {"sha": "8fbd2765fd771b412afa71cd82da6d788e26c388", "filename": "src/test/codegen/async-fn-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs?ref=dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "patch": "@@ -17,7 +17,7 @@ async fn async_fn_test() {\n // FIXME: No way to reliably check the filename.\n \n // CHECK-DAG:  [[ASYNC_FN:!.*]] = !DINamespace(name: \"async_fn_test\"\n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_fn#0}\", scope: [[ASYNC_FN]]\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_fn_env#0}\", scope: [[ASYNC_FN]]\n // CHECK:      [[VARIANT:!.*]] = !DICompositeType(tag: DW_TAG_variant_part, scope: [[ASYNC_FN]],\n // CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: discriminator: [[DISC:![0-9]*]]"}, {"sha": "35fd275fd28975bd2ab9beb034a2c936da1ccbf9", "filename": "src/test/codegen/debug-vtable.rs", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fcodegen%2Fdebug-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fcodegen%2Fdebug-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdebug-vtable.rs?ref=dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "patch": "@@ -1,25 +1,36 @@\n-// compile-flags: -Cdebuginfo=2 -Copt-level=0 -Ccodegen-units=1\n-// ignore-tidy-linelength\n-\n // This test checks the debuginfo for the expected 3 vtables is generated for correct names and number\n // of entries.\n \n-// NONMSVC-LABEL: !DIGlobalVariable(name: \"<debug_vtable::Foo as debug_vtable::SomeTrait>::{vtable}\"\n-// MSVC-LABEL: !DIGlobalVariable(name: \"impl$<debug_vtable::Foo, debug_vtable::SomeTrait>::vtable$\"\n+// Use the v0 symbol mangling scheme to codegen order independent of rustc version.\n+// Unnamed items like shims are generated in lexicographical order of their symbol name and in the\n+// legacy mangling scheme rustc version and generic parameters are both hashed into a single part\n+// of the name, thus randomizing item order with respect to rustc version.\n+\n+// compile-flags: -Cdebuginfo=2 -Copt-level=0 -Csymbol-mangling-version=v0\n+// ignore-tidy-linelength\n+\n+// NONMSVC: !DIGlobalVariable(name: \"<debug_vtable::Foo as debug_vtable::SomeTrait>::{vtable}\"\n+// MSVC: !DIGlobalVariable(name: \"impl$<debug_vtable::Foo, debug_vtable::SomeTrait>::vtable$\"\n // NONMSVC: !DIDerivedType(tag: DW_TAG_pointer_type, name: \"*const ()\",\n // MSVC: !DIDerivedType(tag: DW_TAG_pointer_type, name: \"ptr_const$<tuple$<> >\",\n // CHECK: !DISubrange(count: 5\n \n-// NONMSVC-LABEL: !DIGlobalVariable(name: \"<debug_vtable::Foo as debug_vtable::SomeTraitWithGenerics<u64, i8>>::{vtable}\"\n-// MSVC-LABEL: !DIGlobalVariable(name: \"impl$<debug_vtable::Foo, debug_vtable::SomeTraitWithGenerics<u64,i8> >::vtable$\"\n+// NONMSVC: !DIGlobalVariable(name: \"<debug_vtable::Foo as debug_vtable::SomeTraitWithGenerics<u64, i8>>::{vtable}\"\n+// MSVC: !DIGlobalVariable(name: \"impl$<debug_vtable::Foo, debug_vtable::SomeTraitWithGenerics<u64,i8> >::vtable$\"\n // CHECK: !DISubrange(count: 4\n \n-// NONMSVC-LABEL: !DIGlobalVariable(name: \"<debug_vtable::Foo as _>::{vtable}\"\n-// MSVC-LABEL: !DIGlobalVariable(name: \"impl$<debug_vtable::Foo, _>::vtable$\"\n+// NONMSVC: !DIGlobalVariable(name: \"<debug_vtable::Foo as _>::{vtable}\"\n+// MSVC: !DIGlobalVariable(name: \"impl$<debug_vtable::Foo, _>::vtable$\"\n // CHECK: !DISubrange(count: 3\n \n-// NONMSVC-LABEL: !DIGlobalVariable(name: \"<debug_vtable::bar::{closure#0} as core::ops::function::FnOnce<(core::option::Option<&dyn core::ops::function::Fn<(), Output=()>>)>>::{vtable}\"\n-// MSVC-LABEL: !DIGlobalVariable(name: \"impl$<debug_vtable::bar::closure$0, core::ops::function::FnOnce<tuple$<enum$<core::option::Option<ref$<dyn$<core::ops::function::Fn<tuple$<>,assoc$<Output,tuple$<> > > > > >, {{.*}}, {{.*}}, Some> > > >::vtable$\"\n+// NONMSVC: !DIGlobalVariable(name: \"<debug_vtable::bar::{closure_env#0} as core::ops::function::FnOnce<(core::option::Option<&dyn core::ops::function::Fn<(), Output=()>>)>>::{vtable}\"\n+// MSVC: !DIGlobalVariable(name: \"impl$<debug_vtable::bar::closure_env$0, core::ops::function::FnOnce<tuple$<enum$<core::option::Option<ref$<dyn$<core::ops::function::Fn<tuple$<>,assoc$<Output,tuple$<> > > > > >, {{.*}}, {{.*}}, Some> > > >::vtable$\"\n+\n+// NONMSVC: !DIGlobalVariable(name: \"<debug_vtable::generic_closure::{closure_env#0}<bool> as core::ops::function::FnOnce<()>>::{vtable}\"\n+// MSVC: !DIGlobalVariable(name: \"impl$<debug_vtable::generic_closure::closure_env$0<bool>, core::ops::function::FnOnce<tuple$<> > >::vtable$\n+\n+// NONMSVC: !DIGlobalVariable(name: \"<debug_vtable::generic_closure::{closure_env#0}<u32> as core::ops::function::FnOnce<()>>::{vtable}\"\n+// MSVC: !DIGlobalVariable(name: \"impl$<debug_vtable::generic_closure::closure_env$0<u32>, core::ops::function::FnOnce<tuple$<> > >::vtable$\n \n #![crate_type = \"lib\"]\n \n@@ -31,16 +42,22 @@ pub trait SomeTrait {\n }\n \n impl SomeTrait for Foo {\n-    fn method1(&self) -> u32 { 1 }\n-    fn method2(&self) -> u32 { 2 }\n+    fn method1(&self) -> u32 {\n+        1\n+    }\n+    fn method2(&self) -> u32 {\n+        2\n+    }\n }\n \n pub trait SomeTraitWithGenerics<T, U> {\n     fn method1(&self) -> (T, U);\n }\n \n impl SomeTraitWithGenerics<u64, i8> for Foo {\n-    fn method1(&self) -> (u64, i8) { (1, 2) }\n+    fn method1(&self) -> (u64, i8) {\n+        (1, 2)\n+    }\n }\n \n pub fn foo(x: &Foo) -> (u32, (u64, i8), &dyn Send) {\n@@ -55,3 +72,11 @@ pub fn foo(x: &Foo) -> (u32, (u64, i8), &dyn Send) {\n pub fn bar() -> Box<dyn FnOnce(Option<&dyn Fn()>)> {\n     Box::new(|_x: Option<&dyn Fn()>| {})\n }\n+\n+fn generic_closure<T: 'static>(x: T) -> Box<dyn FnOnce() -> T> {\n+    Box::new(move || x)\n+}\n+\n+pub fn instantiate_generic_closures() -> (Box<dyn FnOnce() -> u32>, Box<dyn FnOnce() -> bool>) {\n+    (generic_closure(1u32), generic_closure(false))\n+}"}, {"sha": "6e5ac951261305447d75a5877dd0e384cb16b3bc", "filename": "src/test/codegen/debuginfo-generic-closure-env-names.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fcodegen%2Fdebuginfo-generic-closure-env-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fcodegen%2Fdebuginfo-generic-closure-env-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdebuginfo-generic-closure-env-names.rs?ref=dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "patch": "@@ -0,0 +1,91 @@\n+// This test checks that we get proper type names for closure environments and\n+// async-fn environments in debuginfo, especially making sure that generic arguments\n+// of the enclosing functions don't get lost.\n+//\n+// Unfortunately, the order that debuginfo gets emitted into LLVM IR becomes a bit hard\n+// to predict once async fns are involved.\n+//\n+// Note that the test does not check async-fns when targeting MSVC because debuginfo for\n+// those does not follow the enum-fallback encoding yet and thus is incomplete.\n+\n+// ignore-tidy-linelength\n+\n+// Use the v0 symbol mangling scheme to codegen order independent of rustc version.\n+// Unnamed items like shims are generated in lexicographical order of their symbol name and in the\n+// legacy mangling scheme rustc version and generic parameters are both hashed into a single part\n+// of the name, thus randomizing item order with respect to rustc version.\n+\n+// compile-flags: -Cdebuginfo=2 --edition 2021 -Copt-level=0 -Csymbol-mangling-version=v0\n+\n+\n+// CHECK: [[non_generic_closure_NAMESPACE:!.*]] = !DINamespace(name: \"non_generic_closure\"\n+// CHECK: [[function_containing_closure_NAMESPACE:!.*]] = !DINamespace(name: \"function_containing_closure\"\n+// CHECK: [[generic_async_function_NAMESPACE:!.*]] = !DINamespace(name: \"generic_async_function\"\n+// CHECK: [[generic_async_block_NAMESPACE:!.*]] = !DINamespace(name: \"generic_async_block\"\n+\n+// non_generic_closure()\n+// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{closure_env#0}\", scope: [[non_generic_closure_NAMESPACE]]\n+// MSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"closure_env$0\", scope: [[non_generic_closure_NAMESPACE]]\n+\n+// function_containing_closure<u32>()\n+// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{closure_env#0}<u32>\", scope: [[function_containing_closure_NAMESPACE]]\n+// MSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"closure_env$0<u32>\", scope: [[function_containing_closure_NAMESPACE]]\n+\n+// generic_async_function<Foo>()\n+// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_fn_env#0}<debuginfo_generic_closure_env_names::Foo>\", scope: [[generic_async_function_NAMESPACE]]\n+\n+// generic_async_function<u32>()\n+// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_fn_env#0}<u32>\", scope: [[generic_async_function_NAMESPACE]]\n+\n+// generic_async_block<Foo>()\n+// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_block_env#0}<debuginfo_generic_closure_env_names::Foo>\", scope: [[generic_async_block_NAMESPACE]]\n+\n+// generic_async_block<u32>()\n+// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_block_env#0}<u32>\", scope: [[generic_async_block_NAMESPACE]]\n+\n+// function_containing_closure<Foo>()\n+// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{closure_env#0}<debuginfo_generic_closure_env_names::Foo>\", scope: [[function_containing_closure_NAMESPACE]]\n+// MSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"closure_env$0<debuginfo_generic_closure_env_names::Foo>\", scope: [[function_containing_closure_NAMESPACE]]\n+\n+\n+#![crate_type = \"lib\"]\n+use std::future::Future;\n+\n+pub struct Foo;\n+\n+pub fn non_generic_closure(x: Foo) -> Box<dyn FnOnce() -> Foo> {\n+    // This static only exists to trigger generating the namespace debuginfo for\n+    // `function_containing_closure` at a predictable, early point, which makes\n+    // writing the FileCheck tests above simpler.\n+    static _X: u8 = 0;\n+    return Box::new(move || x);\n+}\n+\n+fn function_containing_closure<T: 'static>(x: T) -> impl FnOnce() -> T {\n+    static _X: u8 = 0; // Same as above\n+\n+    return move || x;\n+}\n+\n+async fn generic_async_function<T: 'static>(x: T) -> T {\n+    static _X: u8 = 0; // Same as above\n+    x\n+}\n+\n+fn generic_async_block<T: 'static>(x: T) -> impl Future<Output=T> {\n+    static _X: u8 = 0; // Same as above\n+    async move {\n+        x\n+    }\n+}\n+\n+pub fn instantiate_generics() {\n+    let _closure_u32 = function_containing_closure(7u32);\n+    let _closure_foo = function_containing_closure(Foo);\n+\n+    let _async_fn_u32 = generic_async_function(42u32);\n+    let _async_fn_foo = generic_async_function(Foo);\n+\n+    let _async_block_u32 = generic_async_block(64u32);\n+    let _async_block_foo = generic_async_block(Foo);\n+}"}, {"sha": "fb8b9e09fd24def8a4d16b507e9473bef76cb04f", "filename": "src/test/codegen/generator-debug-msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs?ref=dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "patch": "@@ -21,7 +21,7 @@ fn generator_test() -> impl Generator<Yield = i32, Return = ()> {\n // FIXME: No way to reliably check the filename.\n \n // CHECK-DAG:  [[GEN_FN:!.*]] = !DINamespace(name: \"generator_test\"\n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator$0\"\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator_env$0\"\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"variant0\", scope: [[GEN]],\n // For brevity, we only check the struct name and members of the last variant.\n // CHECK-SAME: file: [[FILE:![0-9]*]], line: 14,"}, {"sha": "e777fe3af63e0aa3a8b71a52fddb6e18f51f0875", "filename": "src/test/codegen/generator-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs?ref=dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "patch": "@@ -21,7 +21,7 @@ fn generator_test() -> impl Generator<Yield = i32, Return = ()> {\n // FIXME: No way to reliably check the filename.\n \n // CHECK-DAG:  [[GEN_FN:!.*]] = !DINamespace(name: \"generator_test\"\n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"{generator#0}\", scope: [[GEN_FN]]\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"{generator_env#0}\", scope: [[GEN_FN]]\n // CHECK:      [[VARIANT:!.*]] = !DICompositeType(tag: DW_TAG_variant_part, scope: [[GEN_FN]],\n // CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: discriminator: [[DISC:![0-9]*]]"}, {"sha": "afbf942d404712343d7a49b8dcbfecf15ae01d90", "filename": "src/test/debuginfo/captured-fields-1.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fdebuginfo%2Fcaptured-fields-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fdebuginfo%2Fcaptured-fields-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fcaptured-fields-1.rs?ref=dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "patch": "@@ -4,44 +4,44 @@\n \n // gdb-command:run\n // gdb-command:print test\n-// gdbr-check:$1 = captured_fields_1::main::{closure#0} {_ref__my_ref__my_field1: 0x[...]}\n+// gdbr-check:$1 = captured_fields_1::main::{closure_env#0} {_ref__my_ref__my_field1: 0x[...]}\n // gdb-command:continue\n // gdb-command:print test\n-// gdbr-check:$2 = captured_fields_1::main::{closure#1} {_ref__my_ref__my_field2: 0x[...]}\n+// gdbr-check:$2 = captured_fields_1::main::{closure_env#1} {_ref__my_ref__my_field2: 0x[...]}\n // gdb-command:continue\n // gdb-command:print test\n-// gdbr-check:$3 = captured_fields_1::main::{closure#2} {_ref__my_ref: 0x[...]}\n+// gdbr-check:$3 = captured_fields_1::main::{closure_env#2} {_ref__my_ref: 0x[...]}\n // gdb-command:continue\n // gdb-command:print test\n-// gdbr-check:$4 = captured_fields_1::main::{closure#3} {my_ref: 0x[...]}\n+// gdbr-check:$4 = captured_fields_1::main::{closure_env#3} {my_ref: 0x[...]}\n // gdb-command:continue\n // gdb-command:print test\n-// gdbr-check:$5 = captured_fields_1::main::{closure#4} {my_var__my_field2: 22}\n+// gdbr-check:$5 = captured_fields_1::main::{closure_env#4} {my_var__my_field2: 22}\n // gdb-command:continue\n // gdb-command:print test\n-// gdbr-check:$6 = captured_fields_1::main::{closure#5} {my_var: captured_fields_1::MyStruct {my_field1: 11, my_field2: 22}}\n+// gdbr-check:$6 = captured_fields_1::main::{closure_env#5} {my_var: captured_fields_1::MyStruct {my_field1: 11, my_field2: 22}}\n // gdb-command:continue\n \n // === LLDB TESTS ==================================================================================\n \n // lldb-command:run\n // lldb-command:print test\n-// lldbg-check:(captured_fields_1::main::{closure#0}) $0 = { _ref__my_ref__my_field1 = 0x[...] }\n+// lldbg-check:(captured_fields_1::main::{closure_env#0}) $0 = { _ref__my_ref__my_field1 = 0x[...] }\n // lldb-command:continue\n // lldb-command:print test\n-// lldbg-check:(captured_fields_1::main::{closure#1}) $1 = { _ref__my_ref__my_field2 = 0x[...] }\n+// lldbg-check:(captured_fields_1::main::{closure_env#1}) $1 = { _ref__my_ref__my_field2 = 0x[...] }\n // lldb-command:continue\n // lldb-command:print test\n-// lldbg-check:(captured_fields_1::main::{closure#2}) $2 = { _ref__my_ref = 0x[...] }\n+// lldbg-check:(captured_fields_1::main::{closure_env#2}) $2 = { _ref__my_ref = 0x[...] }\n // lldb-command:continue\n // lldb-command:print test\n-// lldbg-check:(captured_fields_1::main::{closure#3}) $3 = { my_ref = 0x[...] }\n+// lldbg-check:(captured_fields_1::main::{closure_env#3}) $3 = { my_ref = 0x[...] }\n // lldb-command:continue\n // lldb-command:print test\n-// lldbg-check:(captured_fields_1::main::{closure#4}) $4 = { my_var__my_field2 = 22 }\n+// lldbg-check:(captured_fields_1::main::{closure_env#4}) $4 = { my_var__my_field2 = 22 }\n // lldb-command:continue\n // lldb-command:print test\n-// lldbg-check:(captured_fields_1::main::{closure#5}) $5 = { my_var = { my_field1 = 11 my_field2 = 22 } }\n+// lldbg-check:(captured_fields_1::main::{closure_env#5}) $5 = { my_var = { my_field1 = 11 my_field2 = 22 } }\n // lldb-command:continue\n \n #![feature(capture_disjoint_fields)]\n@@ -53,10 +53,7 @@ struct MyStruct {\n }\n \n fn main() {\n-    let mut my_var = MyStruct {\n-        my_field1: 11,\n-        my_field2: 22,\n-    };\n+    let mut my_var = MyStruct { my_field1: 11, my_field2: 22 };\n     let my_ref = &mut my_var;\n \n     let test = || {"}, {"sha": "bb56d37cfe9cb19022039d561a6efa0dacc650a5", "filename": "src/test/debuginfo/function-names.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs?ref=dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "patch": "@@ -27,9 +27,9 @@\n \n // Closure\n // gdb-command:info functions -q function_names::.*::{closure.*\n-// gdb-check:[...]static fn function_names::generic_func::{closure#0}<i32>(*mut function_names::generic_func::{closure#0});\n-// gdb-check:[...]static fn function_names::main::{closure#0}(*mut function_names::main::{closure#0});\n-// gdb-check:[...]static fn function_names::{impl#2}::impl_function::{closure#0}<i32, i32>(*mut function_names::{impl#2}::impl_function::{closure#0});\n+// gdb-check:[...]static fn function_names::generic_func::{closure#0}<i32>(*mut function_names::generic_func::{closure_env#0}<i32>);\n+// gdb-check:[...]static fn function_names::main::{closure#0}(*mut function_names::main::{closure_env#0});\n+// gdb-check:[...]static fn function_names::{impl#2}::impl_function::{closure#0}<i32, i32>(*mut function_names::{impl#2}::impl_function::{closure_env#0}<i32, i32>);\n \n // Generator\n // Generators don't seem to appear in GDB's symbol table.\n@@ -86,9 +86,9 @@\n #![feature(adt_const_params, generators, generator_trait)]\n #![allow(incomplete_features)]\n \n-use Mod1::TestTrait2;\n use std::ops::Generator;\n use std::pin::Pin;\n+use Mod1::TestTrait2;\n \n fn main() {\n     // Implementations\n@@ -107,16 +107,19 @@ fn main() {\n     let _ = generic_func(42i32);\n \n     // Closure\n-    let closure = || { TestStruct1 };\n+    let closure = || TestStruct1;\n     closure();\n \n     // Generator\n-    let mut generator = || { yield; return; };\n+    let mut generator = || {\n+        yield;\n+        return;\n+    };\n     Pin::new(&mut generator).resume(());\n \n     // Const generic functions\n     const_generic_fn_bool::<false>();\n-    const_generic_fn_non_int::<{()}>();\n+    const_generic_fn_non_int::<{ () }>();\n     const_generic_fn_signed_int::<-7>();\n     const_generic_fn_unsigned_int::<14>();\n }\n@@ -158,7 +161,7 @@ struct GenericStruct<T1, T2>(std::marker::PhantomData<(T1, T2)>);\n impl<T1, T2> GenericStruct<T1, T2> {\n     pub fn impl_function() {\n         // Closure in a generic implementation\n-        let closure = || { TestStruct1 };\n+        let closure = || TestStruct1;\n         closure();\n     }\n }\n@@ -190,7 +193,7 @@ impl<T, const N: usize> TestTrait1 for GenericStruct<[T; N], f32> {\n // Generic function\n fn generic_func<T>(value: T) -> T {\n     // Closure in a generic function\n-    let closure = || { TestStruct1 };\n+    let closure = || TestStruct1;\n     closure();\n \n     value"}, {"sha": "aee19736e7e1d4d4879ff3b55243df0b1f70a54b", "filename": "src/test/debuginfo/generator-objects.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs?ref=dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "patch": "@@ -11,31 +11,31 @@\n \n // gdb-command:run\n // gdb-command:print b\n-// gdb-check:$1 = generator_objects::main::{generator#0}::Unresumed{_ref__a: 0x[...]}\n+// gdb-check:$1 = generator_objects::main::{generator_env#0}::Unresumed{_ref__a: 0x[...]}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$2 = generator_objects::main::{generator#0}::Suspend0{c: 6, d: 7, _ref__a: 0x[...]}\n+// gdb-check:$2 = generator_objects::main::{generator_env#0}::Suspend0{c: 6, d: 7, _ref__a: 0x[...]}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$3 = generator_objects::main::{generator#0}::Suspend1{c: 7, d: 8, _ref__a: 0x[...]}\n+// gdb-check:$3 = generator_objects::main::{generator_env#0}::Suspend1{c: 7, d: 8, _ref__a: 0x[...]}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$4 = generator_objects::main::{generator#0}::Returned{_ref__a: 0x[...]}\n+// gdb-check:$4 = generator_objects::main::{generator_env#0}::Returned{_ref__a: 0x[...]}\n \n // === LLDB TESTS ==================================================================================\n \n // lldb-command:run\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::{generator#0}) $0 =\n+// lldbg-check:(generator_objects::main::{generator_env#0}) $0 =\n // lldb-command:continue\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::{generator#0}) $1 =\n+// lldbg-check:(generator_objects::main::{generator_env#0}) $1 =\n // lldb-command:continue\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::{generator#0}) $2 =\n+// lldbg-check:(generator_objects::main::{generator_env#0}) $2 =\n // lldb-command:continue\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::{generator#0}) $3 =\n+// lldbg-check:(generator_objects::main::{generator_env#0}) $3 =\n \n #![feature(omit_gdb_pretty_printer_section, generators, generator_trait)]\n #![omit_gdb_pretty_printer_section]\n@@ -66,4 +66,6 @@ fn main() {\n     _zzz(); // #break\n }\n \n-fn _zzz() {()}\n+fn _zzz() {\n+    ()\n+}"}, {"sha": "62e7eb13c2dc9ff0d5d63c81b0c7be72d55774cd", "filename": "src/test/debuginfo/issue-57822.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs?ref=dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "patch": "@@ -11,20 +11,20 @@\n // gdb-command:run\n \n // gdb-command:print g\n-// gdb-check:$1 = issue_57822::main::{closure#1} {f: issue_57822::main::{closure#0} {x: 1}}\n+// gdb-check:$1 = issue_57822::main::{closure_env#1} {f: issue_57822::main::{closure_env#0} {x: 1}}\n \n // gdb-command:print b\n-// gdb-check:$2 = issue_57822::main::{generator#3}::Unresumed{a: issue_57822::main::{generator#2}::Unresumed{y: 2}}\n+// gdb-check:$2 = issue_57822::main::{generator_env#3}::Unresumed{a: issue_57822::main::{generator_env#2}::Unresumed{y: 2}}\n \n // === LLDB TESTS ==================================================================================\n \n // lldb-command:run\n \n // lldb-command:print g\n-// lldbg-check:(issue_57822::main::{closure#1}) $0 = { f = { x = 1 } }\n+// lldbg-check:(issue_57822::main::{closure_env#1}) $0 = { f = { x = 1 } }\n \n // lldb-command:print b\n-// lldbg-check:(issue_57822::main::{generator#3}) $1 =\n+// lldbg-check:(issue_57822::main::{generator_env#3}) $1 =\n \n #![feature(omit_gdb_pretty_printer_section, generators, generator_trait)]\n #![omit_gdb_pretty_printer_section]\n@@ -50,4 +50,6 @@ fn main() {\n     zzz(); // #break\n }\n \n-fn zzz() { () }\n+fn zzz() {\n+    ()\n+}"}, {"sha": "c96921285626adb2058e332dea3ba43fc287e1f2", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "patch": "@@ -122,7 +122,6 @@\n // gdb-command:whatis has_associated_type_trait\n // gdb-check:type = &(dyn type_names::Trait3<u32, AssocType=isize> + core::marker::Send)\n \n-\n // BARE FUNCTIONS\n // gdb-command:whatis rust_fn\n // gdb-check:type = (fn(core::option::Option<isize>, core::option::Option<&type_names::mod1::Struct2>), usize)\n@@ -153,10 +152,10 @@\n \n // CLOSURES\n // gdb-command:whatis closure1\n-// gdb-check:type = (type_names::main::{closure#0}, usize)\n+// gdb-check:type = (type_names::main::{closure_env#0}, usize)\n \n // gdb-command:whatis closure2\n-// gdb-check:type = (type_names::main::{closure#1}, usize)\n+// gdb-check:type = (type_names::main::{closure_env#1}, usize)\n \n // FOREIGN TYPES\n // gdb-command:whatis foreign1\n@@ -254,8 +253,8 @@\n \n // CLOSURES\n // cdb-command:dv /t closure*\n-// cdb-check:struct tuple$<type_names::main::closure$1,usize> closure2 = [...]\n-// cdb-check:struct tuple$<type_names::main::closure$0,usize> closure1 = [...]\n+// cdb-check:struct tuple$<type_names::main::closure_env$1,usize> closure2 = [...]\n+// cdb-check:struct tuple$<type_names::main::closure_env$0,usize> closure1 = [...]\n \n // FOREIGN TYPES\n // cdb-command:dv /t foreign*\n@@ -279,7 +278,9 @@ enum Enum1 {\n     Variant2(isize),\n }\n \n-extern { type ForeignType1; }\n+extern \"C\" {\n+    type ForeignType1;\n+}\n \n mod mod1 {\n     pub use self::Enum2::{Variant1, Variant2};\n@@ -300,7 +301,9 @@ mod mod1 {\n         }\n     }\n \n-    extern { pub type ForeignType2; }\n+    extern \"C\" {\n+        pub type ForeignType2;\n+    }\n }\n \n trait Trait1 {\n@@ -311,7 +314,9 @@ trait Trait2<T1, T2> {\n }\n trait Trait3<T> {\n     type AssocType;\n-    fn dummy(&self) -> T { panic!() }\n+    fn dummy(&self) -> T {\n+        panic!()\n+    }\n }\n \n impl Trait1 for isize {}\n@@ -441,8 +446,8 @@ fn main() {\n     let closure2 = (|x: i8, y: f32| (x as f32) + y, 0_usize);\n \n     // Foreign Types\n-    let foreign1 = unsafe{ 0 as *const ForeignType1 };\n-    let foreign2 = unsafe{ 0 as *const mod1::ForeignType2 };\n+    let foreign1 = unsafe { 0 as *const ForeignType1 };\n+    let foreign2 = unsafe { 0 as *const mod1::ForeignType2 };\n \n     zzz(); // #break\n }"}, {"sha": "537c0b50b8b6499fccdea7420cb02efdcf8f4eb7", "filename": "src/test/debuginfo/var-captured-in-nested-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs?ref=dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "patch": "@@ -108,7 +108,7 @@\n // cdb-command: dx closure_local\n // cdb-check:closure_local    : 8 [Type: [...]]\n // cdb-command: dx nested_closure\n-// cdb-check:nested_closure   [Type: var_captured_in_nested_closure::main::closure$0::closure$0]\n+// cdb-check:nested_closure   [Type: var_captured_in_nested_closure::main::closure$0::closure_env$0]\n \n // cdb-command: g\n "}]}