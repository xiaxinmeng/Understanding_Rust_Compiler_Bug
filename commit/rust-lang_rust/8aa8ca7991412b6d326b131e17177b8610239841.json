{"sha": "8aa8ca7991412b6d326b131e17177b8610239841", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYThjYTc5OTE0MTJiNmQzMjZiMTMxZTE3MTc3Yjg2MTAyMzk4NDE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-10T01:16:16Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-10T14:50:58Z"}, "message": "std: Add some implementation of common traits\n\n- semver::Version is now Eq, Ord, and Hash\n- Path is now PartialOrd and Ord", "tree": {"sha": "53d4f0905d8625a3dae9ab7c0c07983a93d1253a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53d4f0905d8625a3dae9ab7c0c07983a93d1253a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8aa8ca7991412b6d326b131e17177b8610239841", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa8ca7991412b6d326b131e17177b8610239841", "html_url": "https://github.com/rust-lang/rust/commit/8aa8ca7991412b6d326b131e17177b8610239841", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8aa8ca7991412b6d326b131e17177b8610239841/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9fe251777e9f1cc557a6d5b82b45403935d0a10", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9fe251777e9f1cc557a6d5b82b45403935d0a10", "html_url": "https://github.com/rust-lang/rust/commit/f9fe251777e9f1cc557a6d5b82b45403935d0a10"}], "stats": {"total": 86, "additions": 56, "deletions": 30}, "files": [{"sha": "1832e7c0dff52e7b1f89a23e04bf890a83cca441", "filename": "src/libsemver/lib.rs", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/8aa8ca7991412b6d326b131e17177b8610239841/src%2Flibsemver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa8ca7991412b6d326b131e17177b8610239841/src%2Flibsemver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsemver%2Flib.rs?ref=8aa8ca7991412b6d326b131e17177b8610239841", "patch": "@@ -36,35 +36,23 @@\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/0.11.0/\")]\n+#![feature(default_type_params)]\n \n use std::char;\n use std::cmp;\n-use std::fmt;\n use std::fmt::Show;\n-use std::option::{Option, Some, None};\n-use std::string::String;\n+use std::fmt;\n+use std::hash;\n \n /// An identifier in the pre-release or build metadata. If the identifier can\n /// be parsed as a decimal value, it will be represented with `Numeric`.\n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[allow(missing_doc)]\n pub enum Identifier {\n     Numeric(uint),\n     AlphaNumeric(String)\n }\n \n-impl cmp::PartialOrd for Identifier {\n-    #[inline]\n-    fn partial_cmp(&self, other: &Identifier) -> Option<Ordering> {\n-        match (self, other) {\n-            (&Numeric(a), &Numeric(ref b)) => a.partial_cmp(b),\n-            (&Numeric(_), _) => Some(Less),\n-            (&AlphaNumeric(ref a), &AlphaNumeric(ref b)) => a.partial_cmp(b),\n-            (&AlphaNumeric(_), _) => Some(Greater)\n-        }\n-    }\n-}\n-\n impl fmt::Show for Identifier {\n     #[inline]\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -77,7 +65,7 @@ impl fmt::Show for Identifier {\n \n \n /// Represents a version number conforming to the semantic versioning scheme.\n-#[deriving(Clone)]\n+#[deriving(Clone, Eq)]\n pub struct Version {\n     /// The major version, to be incremented on incompatible changes.\n     pub major: uint,\n@@ -129,35 +117,49 @@ impl cmp::PartialEq for Version {\n }\n \n impl cmp::PartialOrd for Version {\n-    #[inline]\n     fn partial_cmp(&self, other: &Version) -> Option<Ordering> {\n-        match self.major.partial_cmp(&other.major) {\n-            Some(Equal) => {}\n+        Some(self.cmp(other))\n+    }\n+}\n+\n+impl cmp::Ord for Version {\n+    fn cmp(&self, other: &Version) -> Ordering {\n+        match self.major.cmp(&other.major) {\n+            Equal => {}\n             r => return r,\n         }\n \n-        match self.minor.partial_cmp(&other.minor) {\n-            Some(Equal) => {}\n+        match self.minor.cmp(&other.minor) {\n+            Equal => {}\n             r => return r,\n         }\n \n-        match self.patch.partial_cmp(&other.patch) {\n-            Some(Equal) => {}\n+        match self.patch.cmp(&other.patch) {\n+            Equal => {}\n             r => return r,\n         }\n \n         // NB: semver spec says 0.0.0-pre < 0.0.0\n         // but the version of ord defined for vec\n         // says that [] < [pre] so we alter it here\n         match (self.pre.len(), other.pre.len()) {\n-            (0, 0) => Some(Equal),\n-            (0, _) => Some(Greater),\n-            (_, 0) => Some(Less),\n-            (_, _) => self.pre.partial_cmp(&other.pre)\n+            (0, 0) => Equal,\n+            (0, _) => Greater,\n+            (_, 0) => Less,\n+            (_, _) => self.pre.cmp(&other.pre)\n         }\n     }\n }\n \n+impl<S: hash::Writer> hash::Hash<S> for Version {\n+    fn hash(&self, into: &mut S) {\n+        self.major.hash(into);\n+        self.minor.hash(into);\n+        self.patch.hash(into);\n+        self.pre.hash(into);\n+    }\n+}\n+\n fn take_nonempty_prefix<T:Iterator<char>>(rdr: &mut T, pred: |char| -> bool)\n                         -> (String, Option<char>) {\n     let mut buf = String::new();"}, {"sha": "007686aa05cd5865cf03a4f4d52344653ff462df", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8aa8ca7991412b6d326b131e17177b8610239841/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa8ca7991412b6d326b131e17177b8610239841/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=8aa8ca7991412b6d326b131e17177b8610239841", "patch": "@@ -12,7 +12,7 @@\n \n use c_str::{CString, ToCStr};\n use clone::Clone;\n-use cmp::{PartialEq, Eq};\n+use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use collections::Collection;\n use from_str::FromStr;\n use hash;\n@@ -68,6 +68,18 @@ impl PartialEq for Path {\n \n impl Eq for Path {}\n \n+impl PartialOrd for Path {\n+    fn partial_cmp(&self, other: &Path) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+\n+impl Ord for Path {\n+    fn cmp(&self, other: &Path) -> Ordering {\n+        self.repr.cmp(&other.repr)\n+    }\n+}\n+\n impl FromStr for Path {\n     fn from_str(s: &str) -> Option<Path> {\n         Path::new_opt(s)"}, {"sha": "88ae0d4837e569febda914a30ad4ab82d9a31800", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8aa8ca7991412b6d326b131e17177b8610239841/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa8ca7991412b6d326b131e17177b8610239841/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=8aa8ca7991412b6d326b131e17177b8610239841", "patch": "@@ -13,7 +13,7 @@\n use ascii::AsciiCast;\n use c_str::{CString, ToCStr};\n use clone::Clone;\n-use cmp::{PartialEq, Eq};\n+use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use collections::Collection;\n use from_str::FromStr;\n use hash;\n@@ -90,6 +90,18 @@ impl PartialEq for Path {\n \n impl Eq for Path {}\n \n+impl PartialOrd for Path {\n+    fn partial_cmp(&self, other: &Path) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+\n+impl Ord for Path {\n+    fn cmp(&self, other: &Path) -> Ordering {\n+        self.repr.cmp(&other.repr)\n+    }\n+}\n+\n impl FromStr for Path {\n     fn from_str(s: &str) -> Option<Path> {\n         Path::new_opt(s)"}]}