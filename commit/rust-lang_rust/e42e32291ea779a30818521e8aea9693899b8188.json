{"sha": "e42e32291ea779a30818521e8aea9693899b8188", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MmUzMjI5MWVhNzc5YTMwODE4NTIxZThhZWE5NjkzODk5YjgxODg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-08T18:06:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-08T18:06:41Z"}, "message": "auto merge of #9757 : erickt/rust/master, r=alexcrichton\n\nI accidentally left an infinite loop in a default method in `num::ToPrimitive::to_u64()`. This fixes it.", "tree": {"sha": "e03062fc4e8d6d8c674e171bdbde8bde2bc3ef49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e03062fc4e8d6d8c674e171bdbde8bde2bc3ef49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e42e32291ea779a30818521e8aea9693899b8188", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e42e32291ea779a30818521e8aea9693899b8188", "html_url": "https://github.com/rust-lang/rust/commit/e42e32291ea779a30818521e8aea9693899b8188", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e42e32291ea779a30818521e8aea9693899b8188/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8db52a5c0eff35a87007533d57127e7afd91fb24", "url": "https://api.github.com/repos/rust-lang/rust/commits/8db52a5c0eff35a87007533d57127e7afd91fb24", "html_url": "https://github.com/rust-lang/rust/commit/8db52a5c0eff35a87007533d57127e7afd91fb24"}, {"sha": "6dfc5d5de1c933a030618e6dcf20a1c3027fe846", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dfc5d5de1c933a030618e6dcf20a1c3027fe846", "html_url": "https://github.com/rust-lang/rust/commit/6dfc5d5de1c933a030618e6dcf20a1c3027fe846"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "379e874f8627c15fe3ef840887ac8389dfbeac93", "filename": "src/libstd/num/num.rs", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e42e32291ea779a30818521e8aea9693899b8188/src%2Flibstd%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e42e32291ea779a30818521e8aea9693899b8188/src%2Flibstd%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fnum.rs?ref=e42e32291ea779a30818521e8aea9693899b8188", "patch": "@@ -404,9 +404,7 @@ pub trait ToPrimitive {\n \n     /// Converts the value of `self` to an `u64`.\n     #[inline]\n-    fn to_u64(&self) -> Option<u64> {\n-        self.to_u64().and_then(|x| x.to_u64())\n-    }\n+    fn to_u64(&self) -> Option<u64>;\n \n     /// Converts the value of `self` to an `f32`.\n     #[inline]\n@@ -1481,4 +1479,51 @@ mod tests {\n         assert_eq!(third.checked_mul(&3), Some(third * 3));\n         assert_eq!(third.checked_mul(&4), None);\n     }\n+\n+\n+    #[deriving(Eq)]\n+    struct Value { x: int }\n+\n+    impl ToPrimitive for Value {\n+        fn to_i64(&self) -> Option<i64> { self.x.to_i64() }\n+        fn to_u64(&self) -> Option<u64> { self.x.to_u64() }\n+    }\n+\n+    impl FromPrimitive for Value {\n+        fn from_i64(n: i64) -> Option<Value> { Some(Value { x: n as int }) }\n+        fn from_u64(n: u64) -> Option<Value> { Some(Value { x: n as int }) }\n+    }\n+\n+    #[test]\n+    fn test_to_primitive() {\n+        let value = Value { x: 5 };\n+        assert_eq!(value.to_int(),  Some(5));\n+        assert_eq!(value.to_i8(),   Some(5));\n+        assert_eq!(value.to_i16(),  Some(5));\n+        assert_eq!(value.to_i32(),  Some(5));\n+        assert_eq!(value.to_i64(),  Some(5));\n+        assert_eq!(value.to_uint(), Some(5));\n+        assert_eq!(value.to_u8(),   Some(5));\n+        assert_eq!(value.to_u16(),  Some(5));\n+        assert_eq!(value.to_u32(),  Some(5));\n+        assert_eq!(value.to_u64(),  Some(5));\n+        assert_eq!(value.to_f32(),  Some(5f32));\n+        assert_eq!(value.to_f64(),  Some(5f64));\n+    }\n+\n+    #[test]\n+    fn test_from_primitive() {\n+        assert_eq!(from_int(5),    Some(Value { x: 5 }));\n+        assert_eq!(from_i8(5),     Some(Value { x: 5 }));\n+        assert_eq!(from_i16(5),    Some(Value { x: 5 }));\n+        assert_eq!(from_i32(5),    Some(Value { x: 5 }));\n+        assert_eq!(from_i64(5),    Some(Value { x: 5 }));\n+        assert_eq!(from_uint(5),   Some(Value { x: 5 }));\n+        assert_eq!(from_u8(5),     Some(Value { x: 5 }));\n+        assert_eq!(from_u16(5),    Some(Value { x: 5 }));\n+        assert_eq!(from_u32(5),    Some(Value { x: 5 }));\n+        assert_eq!(from_u64(5),    Some(Value { x: 5 }));\n+        assert_eq!(from_f32(5f32), Some(Value { x: 5 }));\n+        assert_eq!(from_f64(5f64), Some(Value { x: 5 }));\n+    }\n }"}]}