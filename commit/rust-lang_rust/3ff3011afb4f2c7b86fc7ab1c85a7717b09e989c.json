{"sha": "3ff3011afb4f2c7b86fc7ab1c85a7717b09e989c", "node_id": "C_kwDOAAsO6NoAKDNmZjMwMTFhZmI0ZjJjN2I4NmZjN2FiMWM4NWE3NzE3YjA5ZTk4OWM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-01T00:21:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-01T00:21:58Z"}, "message": "Rollup merge of #108560 - Nilstrieb:infer-cleanup, r=compiler-errors\n\nSome `infer/mod.rs` cleanups", "tree": {"sha": "f5583b79f7cd2b8fda0d4a128a499a605db4f3e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5583b79f7cd2b8fda0d4a128a499a605db4f3e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ff3011afb4f2c7b86fc7ab1c85a7717b09e989c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj/pqmCRBK7hj4Ov3rIwAAtoUIADRQ/hN6cz1kBqYDICIWpiWi\nu6mqTwV/I/DrE+Fvfe/MtovOuRhlwE3ROX6XusxdBLAsIHa0kY+6MN1yCVYrU7Pw\nv46cojDWVLNjJgr3lzw7OGRzdMNfvKFLdma/9IQN4rk5Er1zBtiIlu42rxDdlEOq\n2uWIZlTV7HptHjPoBbZ+ttGS2K/nUqAbKe2EHw1/NRJamOQY15q3eG3365RQx279\nypyx9we9cpGzNjCv91v3DdK/s7sA6+7/eScSfInlNS1HDjoKQK/yBLZ6xwMybWEE\ntxziftJz/GM7QPY+KypR7yugs407V6Y5mH8XrRcXxw633JYGL1KmyLQ8f0NZu1I=\n=lXXF\n-----END PGP SIGNATURE-----\n", "payload": "tree f5583b79f7cd2b8fda0d4a128a499a605db4f3e3\nparent 35ef8ea5e1c683c2b33d8afa8640415536161adf\nparent e326777ccaa8c710df327d4e9fa2e6aef5aa7631\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677630118 +0100\ncommitter GitHub <noreply@github.com> 1677630118 +0100\n\nRollup merge of #108560 - Nilstrieb:infer-cleanup, r=compiler-errors\n\nSome `infer/mod.rs` cleanups\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ff3011afb4f2c7b86fc7ab1c85a7717b09e989c", "html_url": "https://github.com/rust-lang/rust/commit/3ff3011afb4f2c7b86fc7ab1c85a7717b09e989c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ff3011afb4f2c7b86fc7ab1c85a7717b09e989c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35ef8ea5e1c683c2b33d8afa8640415536161adf", "url": "https://api.github.com/repos/rust-lang/rust/commits/35ef8ea5e1c683c2b33d8afa8640415536161adf", "html_url": "https://github.com/rust-lang/rust/commit/35ef8ea5e1c683c2b33d8afa8640415536161adf"}, {"sha": "e326777ccaa8c710df327d4e9fa2e6aef5aa7631", "url": "https://api.github.com/repos/rust-lang/rust/commits/e326777ccaa8c710df327d4e9fa2e6aef5aa7631", "html_url": "https://github.com/rust-lang/rust/commit/e326777ccaa8c710df327d4e9fa2e6aef5aa7631"}], "stats": {"total": 50, "additions": 11, "deletions": 39}, "files": [{"sha": "bd1f96635a681a494a5e90e56afd45034c852381", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 11, "deletions": 39, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3ff3011afb4f2c7b86fc7ab1c85a7717b09e989c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ff3011afb4f2c7b86fc7ab1c85a7717b09e989c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=3ff3011afb4f2c7b86fc7ab1c85a7717b09e989c", "patch": "@@ -156,7 +156,7 @@ pub struct InferCtxtInner<'tcx> {\n     undo_log: InferCtxtUndoLogs<'tcx>,\n \n     /// Caches for opaque type inference.\n-    pub opaque_type_storage: OpaqueTypeStorage<'tcx>,\n+    opaque_type_storage: OpaqueTypeStorage<'tcx>,\n }\n \n impl<'tcx> InferCtxtInner<'tcx> {\n@@ -195,41 +195,17 @@ impl<'tcx> InferCtxtInner<'tcx> {\n     }\n \n     #[inline]\n-    fn int_unification_table(\n-        &mut self,\n-    ) -> ut::UnificationTable<\n-        ut::InPlace<\n-            ty::IntVid,\n-            &mut ut::UnificationStorage<ty::IntVid>,\n-            &mut InferCtxtUndoLogs<'tcx>,\n-        >,\n-    > {\n+    fn int_unification_table(&mut self) -> UnificationTable<'_, 'tcx, ty::IntVid> {\n         self.int_unification_storage.with_log(&mut self.undo_log)\n     }\n \n     #[inline]\n-    fn float_unification_table(\n-        &mut self,\n-    ) -> ut::UnificationTable<\n-        ut::InPlace<\n-            ty::FloatVid,\n-            &mut ut::UnificationStorage<ty::FloatVid>,\n-            &mut InferCtxtUndoLogs<'tcx>,\n-        >,\n-    > {\n+    fn float_unification_table(&mut self) -> UnificationTable<'_, 'tcx, ty::FloatVid> {\n         self.float_unification_storage.with_log(&mut self.undo_log)\n     }\n \n     #[inline]\n-    fn const_unification_table(\n-        &mut self,\n-    ) -> ut::UnificationTable<\n-        ut::InPlace<\n-            ty::ConstVid<'tcx>,\n-            &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,\n-            &mut InferCtxtUndoLogs<'tcx>,\n-        >,\n-    > {\n+    fn const_unification_table(&mut self) -> UnificationTable<'_, 'tcx, ty::ConstVid<'tcx>> {\n         self.const_unification_storage.with_log(&mut self.undo_log)\n     }\n \n@@ -1429,17 +1405,14 @@ impl<'tcx> InferCtxt<'tcx> {\n         }\n     }\n \n+    /// Attempts to resolve all type/region/const variables in\n+    /// `value`. Region inference must have been run already (e.g.,\n+    /// by calling `resolve_regions_and_report_errors`). If some\n+    /// variable was never unified, an `Err` results.\n+    ///\n+    /// This method is idempotent, but it not typically not invoked\n+    /// except during the writeback phase.\n     pub fn fully_resolve<T: TypeFoldable<TyCtxt<'tcx>>>(&self, value: T) -> FixupResult<'tcx, T> {\n-        /*!\n-         * Attempts to resolve all type/region/const variables in\n-         * `value`. Region inference must have been run already (e.g.,\n-         * by calling `resolve_regions_and_report_errors`). If some\n-         * variable was never unified, an `Err` results.\n-         *\n-         * This method is idempotent, but it not typically not invoked\n-         * except during the writeback phase.\n-         */\n-\n         let value = resolve::fully_resolve(self, value);\n         assert!(\n             value.as_ref().map_or(true, |value| !value.needs_infer()),\n@@ -1754,7 +1727,6 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n     // in this case. The typechecker should only ever report type errors involving mismatched\n     // types using one of these methods, and should not call span_err directly for such\n     // errors.\n-\n     pub fn type_error_struct_with_diag<M>(\n         &self,\n         sp: Span,"}]}