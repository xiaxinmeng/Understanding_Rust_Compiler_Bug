{"sha": "731113b8eeef206ff27b77cb9f0dc49e2762a1b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMTExM2I4ZWVlZjIwNmZmMjdiNzdjYjlmMGRjNDllMjc2MmExYjQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-22T07:04:30Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-22T07:05:12Z"}, "message": "Miri: more informative deallocation error messages", "tree": {"sha": "ecf74efe874bcf006f8614810eef4070ff05a260", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecf74efe874bcf006f8614810eef4070ff05a260"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/731113b8eeef206ff27b77cb9f0dc49e2762a1b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/731113b8eeef206ff27b77cb9f0dc49e2762a1b4", "html_url": "https://github.com/rust-lang/rust/commit/731113b8eeef206ff27b77cb9f0dc49e2762a1b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/731113b8eeef206ff27b77cb9f0dc49e2762a1b4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2bc344eb23d8c1d18e803b3f1e631cf99926fbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2bc344eb23d8c1d18e803b3f1e631cf99926fbb", "html_url": "https://github.com/rust-lang/rust/commit/c2bc344eb23d8c1d18e803b3f1e631cf99926fbb"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "f3e373813ca537c3e40bcccb63b2410f254bcea1", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/731113b8eeef206ff27b77cb9f0dc49e2762a1b4/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/731113b8eeef206ff27b77cb9f0dc49e2762a1b4/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=731113b8eeef206ff27b77cb9f0dc49e2762a1b4", "patch": "@@ -285,9 +285,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             None => {\n                 // Deallocating global memory -- always an error\n                 return Err(match self.tcx.get_global_alloc(ptr.alloc_id) {\n-                    Some(GlobalAlloc::Function(..)) => err_ub_format!(\"deallocating a function\"),\n+                    Some(GlobalAlloc::Function(..)) => {\n+                        err_ub_format!(\"deallocating {}, which is a function\", ptr.alloc_id)\n+                    }\n                     Some(GlobalAlloc::Static(..) | GlobalAlloc::Memory(..)) => {\n-                        err_ub_format!(\"deallocating static memory\")\n+                        err_ub_format!(\"deallocating {}, which is static memory\", ptr.alloc_id)\n                     }\n                     None => err_ub!(PointerUseAfterFree(ptr.alloc_id)),\n                 }\n@@ -297,15 +299,17 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n \n         if alloc_kind != kind {\n             throw_ub_format!(\n-                \"deallocating {} memory using {} deallocation operation\",\n+                \"deallocating {}, which is {} memory, using {} deallocation operation\",\n+                ptr.alloc_id,\n                 alloc_kind,\n                 kind\n             );\n         }\n         if let Some((size, align)) = old_size_and_align {\n             if size != alloc.size || align != alloc.align {\n                 throw_ub_format!(\n-                    \"incorrect layout on deallocation: allocation has size {} and alignment {}, but gave size {} and alignment {}\",\n+                    \"incorrect layout on deallocation: {} has size {} and alignment {}, but gave size {} and alignment {}\",\n+                    ptr.alloc_id,\n                     alloc.size.bytes(),\n                     alloc.align.bytes(),\n                     size.bytes(),"}]}