{"sha": "c58a6fa422dd7c5bcf4f9d32d096c3d42f313240", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1OGE2ZmE0MjJkZDdjNWJjZjRmOWQzMmQwOTZjM2Q0MmYzMTMyNDA=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-28T21:07:00Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-23T12:44:02Z"}, "message": "Iterate DefId to encode spans.", "tree": {"sha": "1eba24390417c00b20073724ebd9243f3675cada", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eba24390417c00b20073724ebd9243f3675cada"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c58a6fa422dd7c5bcf4f9d32d096c3d42f313240", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c58a6fa422dd7c5bcf4f9d32d096c3d42f313240", "html_url": "https://github.com/rust-lang/rust/commit/c58a6fa422dd7c5bcf4f9d32d096c3d42f313240", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c58a6fa422dd7c5bcf4f9d32d096c3d42f313240/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b6c9e9f8853c30640e08088c2fae681afaa4b4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b6c9e9f8853c30640e08088c2fae681afaa4b4f", "html_url": "https://github.com/rust-lang/rust/commit/0b6c9e9f8853c30640e08088c2fae681afaa4b4f"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "6a1b9bdbb94914f4cae548192790a71f47835411", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c58a6fa422dd7c5bcf4f9d32d096c3d42f313240/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c58a6fa422dd7c5bcf4f9d32d096c3d42f313240/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=c58a6fa422dd7c5bcf4f9d32d096c3d42f313240", "patch": "@@ -419,6 +419,10 @@ impl Definitions {\n     pub fn add_parent_module_of_macro_def(&mut self, expn_id: ExpnId, module: DefId) {\n         self.parent_modules_of_macro_defs.insert(expn_id, module);\n     }\n+\n+    pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {\n+        self.def_id_to_hir_id.iter_enumerated().map(|(k, _)| k)\n+    }\n }\n \n #[derive(Copy, Clone, PartialEq, Debug)]"}, {"sha": "bc9fc00e0ec2c3fc8e4070a84ff588e42c319a66", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c58a6fa422dd7c5bcf4f9d32d096c3d42f313240/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c58a6fa422dd7c5bcf4f9d32d096c3d42f313240/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=c58a6fa422dd7c5bcf4f9d32d096c3d42f313240", "patch": "@@ -580,6 +580,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         // Encode the items.\n         i = self.position();\n+        self.encode_def_ids();\n         self.encode_info_for_items();\n         let item_bytes = self.position() - i;\n \n@@ -716,6 +717,18 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n }\n \n impl EncodeContext<'a, 'tcx> {\n+    fn encode_def_ids(&mut self) {\n+        if self.is_proc_macro {\n+            return;\n+        }\n+        let tcx = self.tcx;\n+        let hir = tcx.hir();\n+        for local_id in hir.iter_local_def_id() {\n+            let def_id = local_id.to_def_id();\n+            record!(self.tables.span[def_id] <- tcx.def_span(def_id));\n+        }\n+    }\n+\n     fn encode_variances_of(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_variances_of({:?})\", def_id);\n         record!(self.tables.variances[def_id] <- &self.tcx.variances_of(def_id)[..]);\n@@ -742,7 +755,6 @@ impl EncodeContext<'a, 'tcx> {\n         record!(self.tables.def_kind[def_id] <- DefKind::Variant);\n         record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));\n         record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n-        record!(self.tables.span[def_id] <- self.tcx.def_span(def_id));\n         record!(self.tables.attributes[def_id] <- &self.tcx.get_attrs(def_id)[..]);\n         record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n         record!(self.tables.children[def_id] <- variant.fields.iter().map(|f| {\n@@ -783,7 +795,6 @@ impl EncodeContext<'a, 'tcx> {\n         record!(self.tables.def_kind[def_id] <- DefKind::Variant);\n         record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));\n         record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n-        record!(self.tables.span[def_id] <- self.tcx.def_span(def_id));\n         self.encode_stability(def_id);\n         self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n@@ -836,7 +847,6 @@ impl EncodeContext<'a, 'tcx> {\n         record!(self.tables.def_kind[def_id] <- DefKind::Mod);\n         record!(self.tables.kind[def_id] <- EntryKind::Mod(self.lazy(data)));\n         record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n-        record!(self.tables.span[def_id] <- self.tcx.def_span(def_id));\n         record!(self.tables.attributes[def_id] <- attrs);\n         if self.is_proc_macro {\n             record!(self.tables.children[def_id] <- &[]);\n@@ -868,7 +878,6 @@ impl EncodeContext<'a, 'tcx> {\n         record!(self.tables.def_kind[def_id] <- DefKind::Field);\n         record!(self.tables.kind[def_id] <- EntryKind::Field);\n         record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n-        record!(self.tables.span[def_id] <- self.tcx.def_span(def_id));\n         record!(self.tables.attributes[def_id] <- variant_data.fields()[field_index].attrs);\n         record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n         self.encode_ident_span(def_id, field.ident);\n@@ -895,7 +904,6 @@ impl EncodeContext<'a, 'tcx> {\n         record!(self.tables.def_kind[def_id] <- DefKind::Struct);\n         record!(self.tables.kind[def_id] <- EntryKind::Struct(self.lazy(data), adt_def.repr));\n         record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n-        record!(self.tables.span[def_id] <- self.tcx.def_span(def_id));\n         record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n         self.encode_stability(def_id);\n         self.encode_deprecation(def_id);\n@@ -1003,7 +1011,6 @@ impl EncodeContext<'a, 'tcx> {\n             }\n         }\n         record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n-        record!(self.tables.span[def_id] <- ast_item.span);\n         record!(self.tables.attributes[def_id] <- ast_item.attrs);\n         self.encode_ident_span(def_id, ast_item.ident);\n         self.encode_stability(def_id);\n@@ -1110,7 +1117,6 @@ impl EncodeContext<'a, 'tcx> {\n             }\n         }\n         record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n-        record!(self.tables.span[def_id] <- ast_item.span);\n         record!(self.tables.attributes[def_id] <- ast_item.attrs);\n         self.encode_ident_span(def_id, impl_item.ident);\n         self.encode_stability(def_id);\n@@ -1368,7 +1374,6 @@ impl EncodeContext<'a, 'tcx> {\n         record!(self.tables.def_kind[def_id] <- def_kind);\n         record!(self.tables.kind[def_id] <- entry_kind);\n         record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n-        record!(self.tables.span[def_id] <- self.tcx.def_span(def_id));\n         record!(self.tables.attributes[def_id] <- item.attrs);\n         record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n         // FIXME(eddyb) there should be a nicer way to do this.\n@@ -1489,7 +1494,6 @@ impl EncodeContext<'a, 'tcx> {\n         record!(self.tables.def_kind[def_id] <- DefKind::Macro(MacroKind::Bang));\n         record!(self.tables.kind[def_id] <- EntryKind::MacroDef(self.lazy(macro_def.ast.clone())));\n         record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n-        record!(self.tables.span[def_id] <- macro_def.span);\n         record!(self.tables.attributes[def_id] <- macro_def.attrs);\n         self.encode_ident_span(def_id, macro_def.ident);\n         self.encode_stability(def_id);\n@@ -1505,7 +1509,6 @@ impl EncodeContext<'a, 'tcx> {\n     ) {\n         record!(self.tables.def_kind[def_id] <- def_kind);\n         record!(self.tables.kind[def_id] <- kind);\n-        record!(self.tables.span[def_id] <- self.tcx.def_span(def_id));\n         if encode_type {\n             self.encode_item_type(def_id);\n         }\n@@ -1533,7 +1536,6 @@ impl EncodeContext<'a, 'tcx> {\n \n             _ => bug!(\"closure that is neither generator nor closure\"),\n         }\n-        record!(self.tables.span[def_id.to_def_id()] <- self.tcx.def_span(def_id));\n         record!(self.tables.attributes[def_id.to_def_id()] <- &self.tcx.get_attrs(def_id.to_def_id())[..]);\n         self.encode_item_type(def_id.to_def_id());\n         if let ty::Closure(def_id, substs) = *ty.kind() {\n@@ -1559,7 +1561,6 @@ impl EncodeContext<'a, 'tcx> {\n \n         record!(self.tables.def_kind[def_id.to_def_id()] <- DefKind::AnonConst);\n         record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::AnonConst(qualifs, const_data));\n-        record!(self.tables.span[def_id.to_def_id()] <- self.tcx.def_span(def_id));\n         self.encode_item_type(def_id.to_def_id());\n         self.encode_generics(def_id.to_def_id());\n         self.encode_explicit_predicates(def_id.to_def_id());\n@@ -1605,6 +1606,8 @@ impl EncodeContext<'a, 'tcx> {\n             let tcx = self.tcx;\n             let hir = tcx.hir();\n \n+            record!(self.tables.span[LOCAL_CRATE.as_def_id()] <- hir.span(hir::CRATE_HIR_ID));\n+\n             let proc_macro_decls_static = tcx.proc_macro_decls_static(LOCAL_CRATE).unwrap().index;\n             let stability = tcx.lookup_stability(DefId::local(CRATE_DEF_INDEX)).copied();\n             let macros = self.lazy(hir.krate().proc_macros.iter().map(|p| p.owner.local_def_index));\n@@ -1836,7 +1839,6 @@ impl EncodeContext<'a, 'tcx> {\n             }\n         }\n         record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n-        record!(self.tables.span[def_id] <- nitem.span);\n         record!(self.tables.attributes[def_id] <- nitem.attrs);\n         self.encode_ident_span(def_id, nitem.ident);\n         self.encode_stability(def_id);"}, {"sha": "3cc8683abb187204e4c7fe007819e28406b656fa", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c58a6fa422dd7c5bcf4f9d32d096c3d42f313240/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c58a6fa422dd7c5bcf4f9d32d096c3d42f313240/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=c58a6fa422dd7c5bcf4f9d32d096c3d42f313240", "patch": "@@ -183,6 +183,10 @@ impl<'hir> Map<'hir> {\n         self.tcx.definitions.opt_local_def_id_to_hir_id(def_id)\n     }\n \n+    pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {\n+        self.tcx.definitions.iter_local_def_id()\n+    }\n+\n     pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {\n         // FIXME(eddyb) support `find` on the crate root.\n         if local_def_id.to_def_id().index == CRATE_DEF_INDEX {"}, {"sha": "540e076c7e4c62b1f1eaadbadf0154c193f22f16", "filename": "src/test/ui/lint/lint-const-item-mutation.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c58a6fa422dd7c5bcf4f9d32d096c3d42f313240/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c58a6fa422dd7c5bcf4f9d32d096c3d42f313240/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr?ref=c58a6fa422dd7c5bcf4f9d32d096c3d42f313240", "patch": "@@ -109,14 +109,8 @@ LL |     VEC.push(0);\n note: mutable reference created due to call to this method\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n    |\n-LL | /     pub fn push(&mut self, value: T) {\n-LL | |         // This will panic or abort if we would allocate > isize::MAX bytes\n-LL | |         // or if the length increment would overflow for zero-sized types.\n-LL | |         if self.len == self.buf.capacity() {\n-...  |\n-LL | |         }\n-LL | |     }\n-   | |_____^\n+LL |     pub fn push(&mut self, value: T) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: `const` item defined here\n   --> $DIR/lint-const-item-mutation.rs:31:1\n    |"}]}