{"sha": "4ba09ab8d226d4d362e466c7dc744f51869cecc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYTA5YWI4ZDIyNmQ0ZDM2MmU0NjZjN2RjNzQ0ZjUxODY5Y2VjYzM=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-09-27T13:31:20Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:38:19Z"}, "message": "Added compile codegen to backend trait", "tree": {"sha": "82a296d3629b96a2185bca2b6e9d3e04113d164b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82a296d3629b96a2185bca2b6e9d3e04113d164b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ba09ab8d226d4d362e466c7dc744f51869cecc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ba09ab8d226d4d362e466c7dc744f51869cecc3", "html_url": "https://github.com/rust-lang/rust/commit/4ba09ab8d226d4d362e466c7dc744f51869cecc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ba09ab8d226d4d362e466c7dc744f51869cecc3/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa", "html_url": "https://github.com/rust-lang/rust/commit/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa"}], "stats": {"total": 48, "additions": 18, "deletions": 30}, "files": [{"sha": "7f45e1e675b75fdf37bd514b328d95bb96671c9b", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ba09ab8d226d4d362e466c7dc744f51869cecc3/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba09ab8d226d4d362e466c7dc744f51869cecc3/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=4ba09ab8d226d4d362e466c7dc744f51869cecc3", "patch": "@@ -56,6 +56,7 @@ use rustc_mir::monomorphize::item::DefPathBasedNames;\n use common::{self, IntPredicate, RealPredicate, TypeKind};\n use meth;\n use mir;\n+use context::CodegenCx;\n use monomorphize::Instance;\n use monomorphize::partitioning::{CodegenUnit, CodegenUnitExt};\n use rustc_codegen_utils::symbol_names_test;\n@@ -712,7 +713,7 @@ fn determine_cgu_reuse<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n-pub fn codegen_crate<'a, 'tcx, B: BackendMethods>(\n+pub fn codegen_crate<B: BackendMethods>(\n     backend: B,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     rx: mpsc::Receiver<Box<dyn Any + Send>>\n@@ -858,7 +859,7 @@ pub fn codegen_crate<'a, 'tcx, B: BackendMethods>(\n                                      &format!(\"codegen {}\", cgu.name()))\n                 });\n                 let start_time = Instant::now();\n-                let stats = compile_codegen_unit(tcx, *cgu.name());\n+                let stats = backend.compile_codegen_unit(tcx, *cgu.name());\n                 all_stats.extend(stats);\n                 total_codegen_time += start_time.elapsed();\n                 false\n@@ -1066,7 +1067,7 @@ impl CrateInfo {\n     }\n }\n \n-fn compile_codegen_unit<'ll, 'tcx>(tcx: TyCtxt<'ll, 'tcx, 'tcx>,\n+pub fn compile_codegen_unit<'ll, 'tcx>(tcx: TyCtxt<'ll, 'tcx, 'tcx>,\n                                   cgu_name: InternedString)\n                                   -> Stats {\n     let start_time = Instant::now();\n@@ -1098,7 +1099,7 @@ fn compile_codegen_unit<'ll, 'tcx>(tcx: TyCtxt<'ll, 'tcx, 'tcx>,\n         // Instantiate monomorphizations without filling out definitions yet...\n         let llvm_module = backend.new_metadata(tcx.sess, &cgu_name.as_str());\n         let stats = {\n-            let cx = backend.new_codegen_context(tcx, cgu, &llvm_module);\n+            let cx = CodegenCx::new(tcx, cgu, &llvm_module);\n             let mono_items = cx.codegen_unit\n                                .items_in_deterministic_order(cx.tcx);\n             for &(mono_item, (linkage, visibility)) in &mono_items {"}, {"sha": "c6b78150b5f894fcb502e46089a84fa51455075b", "filename": "src/librustc_codegen_llvm/interfaces/backend.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4ba09ab8d226d4d362e466c7dc744f51869cecc3/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba09ab8d226d4d362e466c7dc744f51869cecc3/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbackend.rs?ref=4ba09ab8d226d4d362e466c7dc744f51869cecc3", "patch": "@@ -11,15 +11,15 @@\n use rustc::ty::layout::{HasTyCtxt, LayoutOf, TyLayout};\n use rustc::ty::Ty;\n \n-use super::{CodegenMethods, CodegenObject};\n-use monomorphize::partitioning::CodegenUnit;\n+use super::CodegenObject;\n use rustc::middle::allocator::AllocatorKind;\n use rustc::middle::cstore::EncodedMetadata;\n+use rustc::mir::mono::Stats;\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use std::any::Any;\n use std::sync::mpsc::Receiver;\n-use std::sync::Arc;\n+use syntax_pos::symbol::InternedString;\n use time_graph::TimeGraph;\n use ModuleCodegen;\n \n@@ -71,15 +71,9 @@ pub trait BackendMethods {\n     fn codegen_finished(&self, codegen: &Self::OngoingCodegen, tcx: TyCtxt);\n     fn check_for_errors(&self, codegen: &Self::OngoingCodegen, sess: &Session);\n     fn wait_for_signal_to_codegen_item(&self, codegen: &Self::OngoingCodegen);\n-}\n-\n-pub trait BackendCodegenCxMethods<'a, 'tcx: 'a>: BackendMethods {\n-    type CodegenCx: CodegenMethods<'tcx>;\n-\n-    fn new_codegen_context(\n+    fn compile_codegen_unit<'a, 'tcx: 'a>(\n         &self,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        codegen_unit: Arc<CodegenUnit<'tcx>>,\n-        llvm_module: &'a Self::Module,\n-    ) -> Self::CodegenCx;\n+        cgu_name: InternedString,\n+    ) -> Stats;\n }"}, {"sha": "e0ce05d0a8479f43dbb91eeb998be59c14f06c44", "filename": "src/librustc_codegen_llvm/interfaces/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba09ab8d226d4d362e466c7dc744f51869cecc3/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba09ab8d226d4d362e466c7dc744f51869cecc3/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs?ref=4ba09ab8d226d4d362e466c7dc744f51869cecc3", "patch": "@@ -22,7 +22,7 @@ mod type_;\n \n pub use self::abi::{AbiBuilderMethods, AbiMethods};\n pub use self::asm::{AsmBuilderMethods, AsmMethods};\n-pub use self::backend::{Backend, BackendCodegenCxMethods, BackendMethods, BackendTypes};\n+pub use self::backend::{Backend, BackendMethods, BackendTypes};\n pub use self::builder::BuilderMethods;\n pub use self::consts::ConstMethods;\n pub use self::debuginfo::{DebugInfoBuilderMethods, DebugInfoMethods};"}, {"sha": "395fbae6aad8f16e5a4e8b664215aa77544e1f5d", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4ba09ab8d226d4d362e466c7dc744f51869cecc3/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba09ab8d226d4d362e466c7dc744f51869cecc3/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=4ba09ab8d226d4d362e466c7dc744f51869cecc3", "patch": "@@ -72,12 +72,11 @@ use interfaces::*;\n use time_graph::TimeGraph;\n use std::sync::mpsc::Receiver;\n use back::write::{self, OngoingCodegen};\n-use context::CodegenCx;\n-use monomorphize::partitioning::CodegenUnit;\n+use syntax_pos::symbol::InternedString;\n+use rustc::mir::mono::Stats;\n \n pub use llvm_util::target_features;\n use std::any::Any;\n-use std::sync::Arc;\n use std::sync::mpsc;\n use rustc_data_structures::sync::Lrc;\n \n@@ -188,18 +187,12 @@ impl BackendMethods for LlvmCodegenBackend {\n     fn wait_for_signal_to_codegen_item(&self, codegen: &OngoingCodegen) {\n         codegen.wait_for_signal_to_codegen_item()\n     }\n-}\n-\n-impl<'a, 'tcx: 'a> BackendCodegenCxMethods<'a, 'tcx> for LlvmCodegenBackend {\n-    type CodegenCx = CodegenCx<'a, 'tcx>;\n-\n-    fn new_codegen_context(\n+    fn compile_codegen_unit<'a, 'tcx: 'a>(\n         &self,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        codegen_unit: Arc<CodegenUnit<'tcx>>,\n-        llvm_module: &'a ModuleLlvm\n-    ) -> CodegenCx<'a, 'tcx> {\n-        CodegenCx::new(tcx, codegen_unit, llvm_module)\n+        cgu_name: InternedString,\n+    ) -> Stats {\n+        base::compile_codegen_unit(tcx, cgu_name)\n     }\n }\n "}]}