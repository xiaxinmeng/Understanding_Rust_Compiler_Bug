{"sha": "fb7ab9e43da3727e1c58faf9451857968270dc77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiN2FiOWU0M2RhMzcyN2UxYzU4ZmFmOTQ1MTg1Nzk2ODI3MGRjNzc=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-07-02T13:09:09Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-07-02T13:16:44Z"}, "message": "report the total number of errors on compilation failure\n\nPrior to this PR, when we aborted because a \"critical pass\" failed, we\ndisplayed the number of errors from that critical pass. While that's the\nnumber of errors that caused compilation to abort in *that place*,\nthat's not what people really want to know. Instead, always report the\ntotal number of errors, and don't bother to track the number of errors\nfrom the last pass that failed.\n\nThis changes the compiler driver API to handle errors more smoothly,\nand therefore is a compiler-api-[breaking-change].\n\nFixes #42793.", "tree": {"sha": "43004d23a2422101e39889d65d0b9cb34d2a4a68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43004d23a2422101e39889d65d0b9cb34d2a4a68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb7ab9e43da3727e1c58faf9451857968270dc77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb7ab9e43da3727e1c58faf9451857968270dc77", "html_url": "https://github.com/rust-lang/rust/commit/fb7ab9e43da3727e1c58faf9451857968270dc77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb7ab9e43da3727e1c58faf9451857968270dc77/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77f40223033bf0c744eb8b4edb07672c13a21557", "url": "https://api.github.com/repos/rust-lang/rust/commits/77f40223033bf0c744eb8b4edb07672c13a21557", "html_url": "https://github.com/rust-lang/rust/commit/77f40223033bf0c744eb8b4edb07672c13a21557"}], "stats": {"total": 321, "additions": 175, "deletions": 146}, "files": [{"sha": "b347a93185124b21852a2c51c377885b52b1d82b", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -28,6 +28,7 @@ use syntax::attr;\n use syntax::ptr::P;\n use syntax_pos::Span;\n use errors::DiagnosticBuilder;\n+use util::common::ErrorReported;\n use util::nodemap::{NodeMap, NodeSet, FxHashSet, FxHashMap, DefIdMap};\n use rustc_back::slice;\n \n@@ -255,7 +256,7 @@ const ROOT_SCOPE: ScopeRef<'static> = &Scope::Root;\n \n pub fn krate(sess: &Session,\n              hir_map: &Map)\n-             -> Result<NamedRegionMap, usize> {\n+             -> Result<NamedRegionMap, ErrorReported> {\n     let krate = hir_map.krate();\n     let mut map = NamedRegionMap {\n         defs: NodeMap(),"}, {"sha": "8bafdda234a09b1589a30b7314f8d156a9e8b961", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -21,7 +21,7 @@ use session::search_paths::PathKind;\n use session::config::DebugInfoLevel;\n use ty::tls;\n use util::nodemap::{FxHashMap, FxHashSet};\n-use util::common::duration_to_secs_str;\n+use util::common::{duration_to_secs_str, ErrorReported};\n \n use syntax::ast::NodeId;\n use errors::{self, DiagnosticBuilder};\n@@ -255,7 +255,10 @@ impl Session {\n     pub fn abort_if_errors(&self) {\n         self.diagnostic().abort_if_errors();\n     }\n-    pub fn track_errors<F, T>(&self, f: F) -> Result<T, usize>\n+    pub fn compile_status(&self) -> Result<(), CompileIncomplete> {\n+        compile_result_from_err_count(self.err_count())\n+    }\n+    pub fn track_errors<F, T>(&self, f: F) -> Result<T, ErrorReported>\n         where F: FnOnce() -> T\n     {\n         let old_count = self.err_count();\n@@ -264,7 +267,7 @@ impl Session {\n         if errors == 0 {\n             Ok(result)\n         } else {\n-            Err(errors)\n+            Err(ErrorReported)\n         }\n     }\n     pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n@@ -802,15 +805,23 @@ pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n     handler.emit(&MultiSpan::new(), msg, errors::Level::Warning);\n }\n \n-// Err(0) means compilation was stopped, but no errors were found.\n-// This would be better as a dedicated enum, but using try! is so convenient.\n-pub type CompileResult = Result<(), usize>;\n+#[derive(Copy, Clone, Debug)]\n+pub enum CompileIncomplete {\n+    Stopped,\n+    Errored(ErrorReported)\n+}\n+impl From<ErrorReported> for CompileIncomplete {\n+    fn from(err: ErrorReported) -> CompileIncomplete {\n+        CompileIncomplete::Errored(err)\n+    }\n+}\n+pub type CompileResult = Result<(), CompileIncomplete>;\n \n pub fn compile_result_from_err_count(err_count: usize) -> CompileResult {\n     if err_count == 0 {\n         Ok(())\n     } else {\n-        Err(err_count)\n+        Err(CompileIncomplete::Errored(ErrorReported))\n     }\n }\n "}, {"sha": "a3e1cf7c1a8f81427179929d7bc6fb618d9008f0", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -13,7 +13,8 @@ use rustc::hir::lowering::lower_crate;\n use rustc::ich::Fingerprint;\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_mir as mir;\n-use rustc::session::{Session, CompileResult, compile_result_from_err_count};\n+use rustc::session::{Session, CompileResult};\n+use rustc::session::CompileIncomplete;\n use rustc::session::config::{self, Input, OutputFilenames, OutputType,\n                              OutputTypes};\n use rustc::session::search_paths::PathKind;\n@@ -23,7 +24,7 @@ use rustc::middle::privacy::AccessLevels;\n use rustc::mir::transform::{MIR_CONST, MIR_VALIDATED, MIR_OPTIMIZED, Passes};\n use rustc::ty::{self, TyCtxt, Resolutions, GlobalArenas};\n use rustc::traits;\n-use rustc::util::common::time;\n+use rustc::util::common::{ErrorReported, time};\n use rustc::util::nodemap::NodeSet;\n use rustc::util::fs::rename_or_copy_remove;\n use rustc_borrowck as borrowck;\n@@ -78,7 +79,9 @@ pub fn compile_input(sess: &Session,\n             }\n \n             if control.$point.stop == Compilation::Stop {\n-                return compile_result_from_err_count($tsess.err_count());\n+                // FIXME: shouldn't this return Err(CompileIncomplete::Stopped)\n+                // if there are no errors?\n+                return $tsess.compile_status();\n             }\n         }}\n     }\n@@ -91,7 +94,7 @@ pub fn compile_input(sess: &Session,\n             Ok(krate) => krate,\n             Err(mut parse_error) => {\n                 parse_error.emit();\n-                return Err(1);\n+                return Err(CompileIncomplete::Errored(ErrorReported));\n             }\n         };\n \n@@ -194,7 +197,7 @@ pub fn compile_input(sess: &Session,\n                 (control.after_analysis.callback)(&mut state);\n \n                 if control.after_analysis.stop == Compilation::Stop {\n-                    return result.and_then(|_| Err(0usize));\n+                    return result.and_then(|_| Err(CompileIncomplete::Stopped));\n                 }\n             }\n \n@@ -564,7 +567,7 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n                                        addl_plugins: Option<Vec<String>>,\n                                        make_glob_map: MakeGlobMap,\n                                        after_expand: F)\n-                                       -> Result<ExpansionResult, usize>\n+                                       -> Result<ExpansionResult, CompileIncomplete>\n     where F: FnOnce(&ast::Crate) -> CompileResult,\n {\n     let time_passes = sess.time_passes();\n@@ -636,7 +639,7 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n     // Lint plugins are registered; now we can process command line flags.\n     if sess.opts.describe_lints {\n         super::describe_lints(&sess.lint_store.borrow(), true);\n-        return Err(0);\n+        return Err(CompileIncomplete::Stopped);\n     }\n     sess.track_errors(|| sess.lint_store.borrow_mut().process_command_line(sess))?;\n \n@@ -839,7 +842,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n                                                arenas: &'tcx GlobalArenas<'tcx>,\n                                                name: &str,\n                                                f: F)\n-                                               -> Result<R, usize>\n+                                               -> Result<R, CompileIncomplete>\n     where F: for<'a> FnOnce(TyCtxt<'a, 'tcx, 'tcx>,\n                             ty::CrateAnalysis,\n                             IncrementalHashesMap,\n@@ -1019,7 +1022,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n         // lint warnings and so on -- kindck used to do this abort, but\n         // kindck is gone now). -nmatsakis\n         if sess.err_count() > 0 {\n-            return Ok(f(tcx, analysis, incremental_hashes_map, Err(sess.err_count())));\n+            return Ok(f(tcx, analysis, incremental_hashes_map, sess.compile_status()));\n         }\n \n         analysis.reachable =\n@@ -1035,12 +1038,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n         time(time_passes, \"lint checking\", || lint::check_crate(tcx));\n \n-        // The above three passes generate errors w/o aborting\n-        if sess.err_count() > 0 {\n-            return Ok(f(tcx, analysis, incremental_hashes_map, Err(sess.err_count())));\n-        }\n-\n-        Ok(f(tcx, analysis, incremental_hashes_map, Ok(())))\n+        return Ok(f(tcx, analysis, incremental_hashes_map, tcx.sess.compile_status()));\n     })\n }\n \n@@ -1116,11 +1114,7 @@ pub fn phase_5_run_llvm_passes(sess: &Session,\n          \"serialize work products\",\n          move || rustc_incremental::save_work_products(sess));\n \n-    if sess.err_count() > 0 {\n-        Err(sess.err_count())\n-    } else {\n-        Ok(())\n-    }\n+    sess.compile_status()\n }\n \n /// Run the linker on any artifacts that resulted from the LLVM run."}, {"sha": "f2aacbc629fad9351705af9cffebadab1e9fe514", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -67,14 +67,15 @@ use rustc_trans::back::link;\n use rustc_trans::back::write::{RELOC_MODEL_ARGS, CODE_GEN_MODEL_ARGS};\n use rustc::dep_graph::DepGraph;\n use rustc::session::{self, config, Session, build_session, CompileResult};\n+use rustc::session::CompileIncomplete;\n use rustc::session::config::{Input, PrintRequest, OutputType, ErrorOutputType};\n use rustc::session::config::nightly_options;\n use rustc::session::{early_error, early_warn};\n use rustc::lint::Lint;\n use rustc::lint;\n use rustc_metadata::locator;\n use rustc_metadata::cstore::CStore;\n-use rustc::util::common::time;\n+use rustc::util::common::{time, ErrorReported};\n \n use serialize::json::ToJson;\n \n@@ -109,19 +110,14 @@ mod derive_registrar;\n const BUG_REPORT_URL: &'static str = \"https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.\\\n                                       md#bug-reports\";\n \n-#[inline]\n-fn abort_msg(err_count: usize) -> String {\n-    match err_count {\n-        0 => \"aborting with no errors (maybe a bug?)\".to_owned(),\n-        1 => \"aborting due to previous error\".to_owned(),\n-        e => format!(\"aborting due to {} previous errors\", e),\n-    }\n-}\n-\n-pub fn abort_on_err<T>(result: Result<T, usize>, sess: &Session) -> T {\n+pub fn abort_on_err<T>(result: Result<T, CompileIncomplete>, sess: &Session) -> T {\n     match result {\n-        Err(err_count) => {\n-            sess.fatal(&abort_msg(err_count));\n+        Err(CompileIncomplete::Errored(ErrorReported)) => {\n+            sess.abort_if_errors();\n+            panic!(\"error reported but abort_if_errors didn't abort???\");\n+        }\n+        Err(CompileIncomplete::Stopped) => {\n+            sess.fatal(\"compilation terminated\");\n         }\n         Ok(x) => x,\n     }\n@@ -132,19 +128,20 @@ pub fn run<F>(run_compiler: F) -> isize\n {\n     monitor(move || {\n         let (result, session) = run_compiler();\n-        if let Err(err_count) = result {\n-            if err_count > 0 {\n-                match session {\n-                    Some(sess) => sess.fatal(&abort_msg(err_count)),\n-                    None => {\n-                        let emitter =\n-                            errors::emitter::EmitterWriter::stderr(errors::ColorConfig::Auto, None);\n-                        let handler = errors::Handler::with_emitter(true, false, Box::new(emitter));\n-                        handler.emit(&MultiSpan::new(),\n-                                     &abort_msg(err_count),\n-                                     errors::Level::Fatal);\n-                        exit_on_err();\n-                    }\n+        if let Err(CompileIncomplete::Errored(_)) = result {\n+            match session {\n+                Some(sess) => {\n+                    sess.abort_if_errors();\n+                    panic!(\"error reported but abort_if_errors didn't abort???\");\n+                }\n+                None => {\n+                    let emitter =\n+                        errors::emitter::EmitterWriter::stderr(errors::ColorConfig::Auto, None);\n+                    let handler = errors::Handler::with_emitter(true, false, Box::new(emitter));\n+                    handler.emit(&MultiSpan::new(),\n+                                 \"aborting due to previous error(s)\",\n+                                 errors::Level::Fatal);\n+                    exit_on_err();\n                 }\n             }\n         }"}, {"sha": "0dbb2d1d4d0bf8e6183c295fb1b5cc79f226475e", "filename": "src/librustc_passes/static_recursion.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Flibrustc_passes%2Fstatic_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Flibrustc_passes%2Fstatic_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstatic_recursion.rs?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -12,8 +12,9 @@\n // recursively.\n \n use rustc::hir::map as hir_map;\n-use rustc::session::{CompileResult, Session};\n+use rustc::session::Session;\n use rustc::hir::def::{Def, CtorKind};\n+use rustc::util::common::ErrorReported;\n use rustc::util::nodemap::{NodeMap, NodeSet};\n \n use syntax::ast;\n@@ -86,7 +87,9 @@ impl<'a, 'hir: 'a> Visitor<'hir> for CheckCrateVisitor<'a, 'hir> {\n     }\n }\n \n-pub fn check_crate<'hir>(sess: &Session, hir_map: &hir_map::Map<'hir>) -> CompileResult {\n+pub fn check_crate<'hir>(sess: &Session, hir_map: &hir_map::Map<'hir>)\n+                         -> Result<(), ErrorReported>\n+{\n     let mut visitor = CheckCrateVisitor {\n         sess: sess,\n         hir_map: hir_map,"}, {"sha": "3241267bbc2e48d55c78bbe00a4997819912cf3b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -102,7 +102,7 @@ use rustc::ty::maps::Providers;\n use rustc::ty::util::{Representability, IntTypeExt};\n use errors::DiagnosticBuilder;\n use require_c_abi_if_variadic;\n-use session::{Session, CompileResult};\n+use session::{CompileIncomplete, Session};\n use TypeAndSubsts;\n use lint;\n use util::common::{ErrorReported, indenter};\n@@ -691,30 +691,32 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'a, 'tcx> {\n     fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) { }\n }\n \n-pub fn check_wf_new<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> CompileResult {\n+pub fn check_wf_new<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Result<(), ErrorReported> {\n     tcx.sess.track_errors(|| {\n         let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n         tcx.hir.krate().visit_all_item_likes(&mut visit.as_deep_visitor());\n     })\n }\n \n-pub fn check_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> CompileResult {\n+pub fn check_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Result<(), ErrorReported> {\n     tcx.sess.track_errors(|| {\n         tcx.hir.krate().visit_all_item_likes(&mut CheckItemTypesVisitor { tcx });\n     })\n }\n \n-pub fn check_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> CompileResult {\n+pub fn check_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Result<(), CompileIncomplete> {\n     tcx.typeck_item_bodies(LOCAL_CRATE)\n }\n \n-fn typeck_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) -> CompileResult {\n+fn typeck_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum)\n+                                -> Result<(), CompileIncomplete>\n+{\n     debug_assert!(crate_num == LOCAL_CRATE);\n-    tcx.sess.track_errors(|| {\n+    Ok(tcx.sess.track_errors(|| {\n         for body_owner_def_id in tcx.body_owners() {\n             tcx.typeck_tables_of(body_owner_def_id);\n         }\n-    })\n+    })?)\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "9b829e6e3ff2ed8cbf1ec6502dac208ffc72e6b0", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -108,7 +108,7 @@ use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::maps::Providers;\n use rustc::traits::{FulfillmentContext, ObligationCause, ObligationCauseCode, Reveal};\n-use session::config;\n+use session::{CompileIncomplete, config};\n use util::common::time;\n \n use syntax::ast;\n@@ -293,7 +293,8 @@ pub fn provide(providers: &mut Providers) {\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n-                             -> Result<(), usize> {\n+                             -> Result<(), CompileIncomplete>\n+{\n     let time_passes = tcx.sess.time_passes();\n \n     // this ensures that later parts of type checking can assume that items\n@@ -328,12 +329,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n     check_unused::check_crate(tcx);\n     check_for_entry_fn(tcx);\n \n-    let err_count = tcx.sess.err_count();\n-    if err_count == 0 {\n-        Ok(())\n-    } else {\n-        Err(err_count)\n-    }\n+    tcx.sess.compile_status()\n }\n \n /// A quasi-deprecated helper used in rustdoc and save-analysis to get"}, {"sha": "f012fd974b574267d28841be6f870741872dca58", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -25,7 +25,7 @@ use rustc_lint;\n use rustc::dep_graph::DepGraph;\n use rustc::hir;\n use rustc::hir::intravisit;\n-use rustc::session::{self, config};\n+use rustc::session::{self, CompileIncomplete, config};\n use rustc::session::config::{OutputType, OutputTypes, Externs};\n use rustc::session::search_paths::{SearchPaths, PathKind};\n use rustc_back::dynamic_lib::DynamicLibrary;\n@@ -253,35 +253,25 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n         driver::compile_input(&sess, &cstore, &input, &out, &None, None, &control)\n     }));\n \n-    match res {\n-        Ok(r) => {\n-            match r {\n-                Err(count) => {\n-                    if count > 0 && !compile_fail {\n-                        sess.fatal(\"aborting due to previous error(s)\")\n-                    } else if count == 0 && compile_fail {\n-                        panic!(\"test compiled while it wasn't supposed to\")\n-                    }\n-                    if count > 0 && error_codes.len() > 0 {\n-                        let out = String::from_utf8(data.lock().unwrap().to_vec()).unwrap();\n-                        error_codes.retain(|err| !out.contains(err));\n-                    }\n-                }\n-                Ok(()) if compile_fail => {\n-                    panic!(\"test compiled while it wasn't supposed to\")\n-                }\n-                _ => {}\n-            }\n+    let compile_result = match res {\n+        Ok(Ok(())) | Ok(Err(CompileIncomplete::Stopped)) => Ok(()),\n+        Err(_) | Ok(Err(CompileIncomplete::Errored(_))) => Err(())\n+    };\n+\n+    match (compile_result, compile_fail) {\n+        (Ok(()), true) => {\n+            panic!(\"test compiled while it wasn't supposed to\")\n         }\n-        Err(_) => {\n-            if !compile_fail {\n-                panic!(\"couldn't compile the test\");\n-            }\n+        (Ok(()), false) => {}\n+        (Err(()), true) => {\n             if error_codes.len() > 0 {\n                 let out = String::from_utf8(data.lock().unwrap().to_vec()).unwrap();\n                 error_codes.retain(|err| !out.contains(err));\n             }\n         }\n+        (Err(()), false) => {\n+            panic!(\"couldn't compile the test\")\n+        }\n     }\n \n     if error_codes.len() > 0 {"}, {"sha": "a75dc7e57a9a265526af8b83134ee1b4dc0581e0", "filename": "src/test/run-make/llvm-phase/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Frun-make%2Fllvm-phase%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Frun-make%2Fllvm-phase%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fllvm-phase%2Ftest.rs?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -85,6 +85,6 @@ fn main() {\n     let (result, _) = rustc_driver::run_compiler(\n         &args, &mut JitCalls, Some(box JitLoader), None);\n     if let Err(n) = result {\n-        panic!(\"Error {}\", n);\n+        panic!(\"Error {:?}\", n);\n     }\n }"}, {"sha": "d4024f41c26fa4e4f30b604822baa8ed7c175c70", "filename": "src/test/ui/block-result/block-must-not-have-result-do.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -7,5 +7,5 @@ error[E0308]: mismatched types\n    = note: expected type `()`\n               found type `bool`\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "f60a0c2e5f6e00f017d93882debb11da567f4f9b", "filename": "src/test/ui/block-result/block-must-not-have-result-res.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -7,5 +7,5 @@ error[E0308]: mismatched types\n    = note: expected type `()`\n               found type `bool`\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "888a64c1bb1aa61a0a8d383c37b834bf276d7f85", "filename": "src/test/ui/block-result/block-must-not-have-result-while.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -7,5 +7,5 @@ error[E0308]: mismatched types\n    = note: expected type `()`\n               found type `bool`\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "5905cfa9322a28ab753701cb9c8e07deec9d52a9", "filename": "src/test/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -26,5 +26,5 @@ error[E0308]: mismatched types\n    = note: expected type `std::string::String`\n               found type `()`\n \n-error: aborting due to previous error(s)\n+error: aborting due to 2 previous errors\n "}, {"sha": "376834beab0dacfc4a6b9661dbd862c1d02a3caf", "filename": "src/test/ui/block-result/issue-11714.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -13,5 +13,5 @@ error[E0308]: mismatched types\n    = note: expected type `i32`\n               found type `()`\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "7bd4529c46399a1a600d99b23816f43d68a1d873", "filename": "src/test/ui/block-result/issue-13428.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -29,5 +29,5 @@ error[E0308]: mismatched types\n    = note: expected type `std::string::String`\n               found type `()`\n \n-error: aborting due to previous error(s)\n+error: aborting due to 2 previous errors\n "}, {"sha": "41113eb7a573e6b741508415238ce192cf9ef16c", "filename": "src/test/ui/block-result/issue-13624.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -16,5 +16,5 @@ error[E0308]: mismatched types\n    = note: expected type `()`\n               found type `a::Enum`\n \n-error: aborting due to previous error(s)\n+error: aborting due to 2 previous errors\n "}, {"sha": "7c88d789fd36eeb55fb971886484b42bc5f1a066", "filename": "src/test/ui/block-result/issue-20862.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -15,5 +15,5 @@ error[E0618]: expected function, found `()`\n 17 |     let x = foo(5)(2);\n    |             ^^^^^^^^^\n \n-error: aborting due to previous error(s)\n+error: aborting due to 2 previous errors\n "}, {"sha": "a9bcc8bea94cc177d0ebb793ae6025d0c640fa55", "filename": "src/test/ui/block-result/issue-22645.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -17,5 +17,5 @@ error[E0308]: mismatched types\n    = note: expected type `()`\n               found type `Bob`\n \n-error: aborting due to previous error(s)\n+error: aborting due to 2 previous errors\n "}, {"sha": "4b1f8b032b74d1d257548b606c48c440b0e08390", "filename": "src/test/ui/block-result/issue-3563.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -15,5 +15,5 @@ error[E0308]: mismatched types\n    = note: expected type `()`\n               found type `[closure@$DIR/issue-3563.rs:13:9: 13:20 self:_]`\n \n-error: aborting due to previous error(s)\n+error: aborting due to 2 previous errors\n "}, {"sha": "bd670a14f247e7f6b0e58410b3d091c3da8559cf", "filename": "src/test/ui/block-result/issue-5500.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -7,5 +7,5 @@ error[E0308]: mismatched types\n    = note: expected type `()`\n               found type `&_`\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "68afd2084f10568dbcf09cacddc4afb3c25b1c8b", "filename": "src/test/ui/block-result/unexpected-return-on-unit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -11,5 +11,5 @@ help: did you mean to add a semicolon here?\n help: possibly return type missing here?\n    | fn bar() -> usize {\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "42fc2909dfb5a2846a1cb942ae9679e05fa52ab5", "filename": "src/test/ui/closure_context/issue-26046-fn-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -16,5 +16,5 @@ note: closure is `FnMut` because it mutates the variable `num` here\n 15 |         num += 1;\n    |         ^^^\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "7bfe72d3d6c9c8fbcac796e7638ba881507e2997", "filename": "src/test/ui/closure_context/issue-26046-fn-once.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -16,5 +16,5 @@ note: closure is `FnOnce` because it moves the variable `vec` out of its environ\n 15 |         vec\n    |         ^^^\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "0de0a25e68e24c0d0e63672fc5ed271e6533b7c8", "filename": "src/test/ui/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -24,5 +24,5 @@ error[E0308]: mismatched types\n    = note: expected type `std::result::Result<u8, u64>`\n               found type `()`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "3b7f32cf8904a33a90898124898c3477e49b3010", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -64,5 +64,5 @@ error[E0038]: the trait `X` cannot be made into an object\n    |\n    = note: method `xxx` has no receiver\n \n-error: aborting due to previous error\n+error: aborting due to 9 previous errors\n "}, {"sha": "498255cb9ea374cc905dab9cc6369144b4725e70", "filename": "src/test/ui/did_you_mean/trait-object-reference-without-parens-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -18,5 +18,5 @@ error[E0038]: the trait `std::marker::Copy` cannot be made into an object\n    |\n    = note: the trait cannot require that `Self : Sized`\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n "}, {"sha": "3bc281726ef3a9563669869116afd1f88a6506c2", "filename": "src/test/ui/impl-trait/issue-21659-show-relevant-trait-impls-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-21659-show-relevant-trait-impls-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-21659-show-relevant-trait-impls-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-21659-show-relevant-trait-impls-3.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -8,5 +8,5 @@ error[E0599]: no method named `foo` found for type `Bar` in the current scope\n    = note: the following trait defines an item `foo`, perhaps you need to implement it:\n            candidate #1: `Foo`\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "d3dbb77490b8730cff9a5fc09ac2d7eccf09079d", "filename": "src/test/ui/impl-trait/method-suggestion-no-duplication.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -10,5 +10,5 @@ error[E0599]: no method named `is_empty` found for type `Foo` in the current sco\n            candidate #2: `core::slice::SliceExt`\n            candidate #3: `core::str::StrExt`\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "fc441f94842731d7b65ca8044615e91d6c1168e4", "filename": "src/test/ui/impl-trait/no-method-suggested-traits.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -226,5 +226,5 @@ error[E0599]: no method named `method3` found for type `std::rc::Rc<&mut std::bo\n 131 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method3();\n     |                                                                          ^^^^^^^\n \n-error: aborting due to previous error(s)\n+error: aborting due to 24 previous errors\n "}, {"sha": "9216c6e290775163b731ee3c03d9fa68ffd820a6", "filename": "src/test/ui/impl-trait/trait_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -31,5 +31,5 @@ error[E0046]: not all trait items implemented, missing: `fmt`\n    |\n    = note: `fmt` from trait: `fn(&Self, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n \n-error: aborting due to previous error(s)\n+error: aborting due to 4 previous errors\n "}, {"sha": "76362f1f494a6bb8b96a0e230869f72d6d5e501d", "filename": "src/test/ui/interior-mutability/interior-mutability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -10,5 +10,5 @@ error[E0277]: the trait bound `std::cell::UnsafeCell<i32>: std::panic::RefUnwind\n    = note: required because it appears within the type `[closure@$DIR/interior-mutability.rs:15:18: 15:35 x:&std::cell::Cell<i32>]`\n    = note: required by `std::panic::catch_unwind`\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "22c16ada05de468757a87ec79f787039a724def9", "filename": "src/test/ui/issue-22644.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22644.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -20,5 +20,5 @@ error: `<` is interpreted as a start of generic arguments for `usize`, not a com\n help: if you want to compare the casted value then write:\n    |     println!(\"{}\", (a as usize) < 4);\n \n-error: aborting due to previous error(s)\n+error: aborting due to 2 previous errors\n "}, {"sha": "8bfe4ac733b6d91c97d783b55e6a20fa95af4f4f", "filename": "src/test/ui/issue-26548.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fissue-26548.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fissue-26548.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-26548.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -5,5 +5,5 @@ note: ...which then requires computing layout of `std::option::Option<<S as Mirr\n note: ...which then requires computing layout of `<S as Mirror>::It`...\n   = note: ...which then again requires computing layout of `S`, completing the cycle.\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "0e777fe8a94542f2f3e44c006d6f8c395ab2bf47", "filename": "src/test/ui/issue-33525.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fissue-33525.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fissue-33525.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-33525.rs?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    a;\n+    \"\".lorem;\n+    \"\".ipsum;\n+}"}, {"sha": "5de2d98f86a9dbce8c72b8b1c3f15a104afdda7b", "filename": "src/test/ui/issue-33525.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fissue-33525.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fissue-33525.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-33525.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -0,0 +1,20 @@\n+error[E0425]: cannot find value `a` in this scope\n+  --> $DIR/issue-33525.rs:12:5\n+   |\n+12 |     a;\n+   |     ^ not found in this scope\n+\n+error[E0609]: no field `lorem` on type `&'static str`\n+  --> $DIR/issue-33525.rs:13:8\n+   |\n+13 |     \"\".lorem;\n+   |        ^^^^^\n+\n+error[E0609]: no field `ipsum` on type `&'static str`\n+  --> $DIR/issue-33525.rs:14:8\n+   |\n+14 |     \"\".ipsum;\n+   |        ^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "10bb61ee22a610819bded82ee3e6954f6eef1c9d", "filename": "src/test/ui/issue-38875/issue_38875.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fissue-38875%2Fissue_38875.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fissue-38875%2Fissue_38875.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-38875%2Fissue_38875.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -10,5 +10,5 @@ note: for repeat count here\n 16 |     let test_x = [0; issue_38875_b::FOO];\n    |                      ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "83716b7791d83cac3a6f0046efbbb35909641234", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -6,5 +6,5 @@ error[E0621]: explicit lifetime required in the type of `x`\n 12 |     if x > y { x } else { y }\n    |                ^ lifetime `'a` required\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "6d5e94a5e78adc8ead80a8c8aaaf3b4200f2df74", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -6,5 +6,5 @@ error[E0621]: explicit lifetime required in parameter type\n 12 |     if x > y { x } else { y }\n    |                           ^ lifetime `'a` required\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "4288fdf89a41732a973360a903f0d7f8e7a498a0", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -6,5 +6,5 @@ error[E0621]: explicit lifetime required in the type of `x`\n 14 |    if x > y { x } else { y }\n    |               ^ lifetime `'a` required\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "95076bfbdc7dae548671a589ad9336a8d2bc5b7f", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -7,5 +7,5 @@ error[E0621]: explicit lifetime required in the type of `x`\n 18 |     if true { &self.field } else { x }\n    |                                    ^ lifetime `'a` required\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "9e4f6c421790f5533ec266de0fd8647442b62a7c", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -23,5 +23,5 @@ note: ...but the borrowed content is only valid for the anonymous lifetime #1 de\n 23 | |     }\n    | |_____^\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "e3fd0192053b93547ce06af04fc2aabdcefb2328", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -23,5 +23,5 @@ note: ...but the borrowed content is only valid for the lifetime 'a as defined o\n 20 | |   }\n    | |___^\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "8551f015db52772b2fe9349fa5aac4b6701ca0b8", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-self-is-anon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -23,5 +23,5 @@ note: ...but the borrowed content is only valid for the anonymous lifetime #1 de\n 20 | |     }\n    | |_____^\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "8dba0c33f201a381e7a741f2fcb7d51467085956", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -6,5 +6,5 @@ error[E0621]: explicit lifetime required in the type of `x`\n 16 |     y.push(x);\n    |            ^ lifetime `'a` required\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "df62f5acc00748712e059522e358bbad9fd04bb2", "filename": "src/test/ui/lint/outer-forbid.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -25,5 +25,5 @@ error[E0453]: allow(bad_style) overruled by outer forbid(non_snake_case)\n 19 | #[allow(unused, unused_variables, bad_style)]\n    |                                   ^^^^^^^^^ overruled by previous forbid\n \n-error: aborting due to previous error(s)\n+error: aborting due to 3 previous errors\n "}, {"sha": "887412d1be7af5eba8acc1b40d44032c84e2cd27", "filename": "src/test/ui/mismatched_types/E0281.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fmismatched_types%2FE0281.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fmismatched_types%2FE0281.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0281.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -9,5 +9,5 @@ error[E0281]: type mismatch: `[closure@$DIR/E0281.rs:14:9: 14:24]` implements th\n    |\n    = note: required by `foo`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "cc7c01790706a02ea69c6bcf8617fb1252d638c6", "filename": "src/test/ui/mismatched_types/E0409.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -15,5 +15,5 @@ error[E0308]: mismatched types\n    = note: expected type `&{integer}`\n               found type `{integer}`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "6d1a39e0d93c04554f7ccec483b0fa05226deeb4", "filename": "src/test/ui/mismatched_types/binops.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -46,5 +46,5 @@ error[E0277]: the trait bound `{integer}: std::cmp::PartialEq<std::result::Resul\n    |\n    = help: the trait `std::cmp::PartialEq<std::result::Result<{integer}, _>>` is not implemented for `{integer}`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "ca71154e872ee9ae7af4753f3c3f1b2705b5f3b7", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -31,5 +31,5 @@ error[E0593]: closure takes 1 argument but 2 arguments are required\n    |               |\n    |               expected closure that takes 2 arguments\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "4a619804a6c5d6722d5a661e22a38da1af73d071", "filename": "src/test/ui/mismatched_types/for-loop-has-unit-body.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fmismatched_types%2Ffor-loop-has-unit-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fmismatched_types%2Ffor-loop-has-unit-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffor-loop-has-unit-body.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -7,5 +7,5 @@ error[E0308]: mismatched types\n    = note: expected type `()`\n               found type `{integer}`\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "51acdb719b69afc04c5e7bab30235d01c2a4b57e", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -17,5 +17,5 @@ error[E0281]: type mismatch: `[closure@$DIR/issue-36053-2.rs:17:39: 17:53]` impl\n    |                                requires `for<'r> std::ops::FnMut<(&'r &str,)>`\n    |                                expected &str, found str\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "995a12584547734a84abf2a68dec2b2aba38c496", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -12,5 +12,5 @@ error[E0281]: type mismatch: `[closure@$DIR/unboxed-closures-vtable-mismatch.rs:\n    |\n    = note: required by `call_it`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "51afb95b89611d3583d4c4c7c740baa29b0eea3a", "filename": "src/test/ui/missing-items/m2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fmissing-items%2Fm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fmissing-items%2Fm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-items%2Fm2.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -11,5 +11,5 @@ error[E0046]: not all trait items implemented, missing: `CONSTANT`, `Type`, `met\n    = note: `Type` from trait: `type Type;`\n    = note: `method` from trait: `fn(&Self, std::string::String) -> <Self as m1::X>::Type`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "bd3bdf35da60900c2874febe3b10297e56118457", "filename": "src/test/ui/resolve/token-error-correct-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -42,5 +42,5 @@ error[E0308]: mismatched types\n    = note: expected type `()`\n               found type `std::result::Result<bool, std::io::Error>`\n \n-error: aborting due to previous error\n+error: aborting due to 5 previous errors\n "}, {"sha": "a16a9c0244fb6dd18d1bb1a37cb0b258566387b1", "filename": "src/test/ui/shadowed-type-parameter.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fshadowed-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fshadowed-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshadowed-type-parameter.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -24,5 +24,5 @@ error[E0194]: type parameter `T` shadows another type parameter of the same name\n 18 |     fn shadow_in_method<T>(&self) {}\n    |                         ^ shadows another type parameter\n \n-error: aborting due to previous error(s)\n+error: aborting due to 3 previous errors\n "}, {"sha": "2c4c6a148d7b37ec107ecd6b73665a675048f371", "filename": "src/test/ui/span/impl-wrong-item-for-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -85,5 +85,5 @@ error[E0046]: not all trait items implemented, missing: `fmt`\n    |\n    = note: `fmt` from trait: `fn(&Self, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "e25caacac8febed524fc3dbcf11b6a26fd65e0ea", "filename": "src/test/ui/span/issue-34264.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -45,5 +45,5 @@ error[E0061]: this function takes 2 parameters but 3 parameters were supplied\n 19 |     bar(1, 2, 3);\n    |         ^^^^^^^ expected 2 parameters\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "a7fc0808e184557153feae0b4d62e36b0ac95fcb", "filename": "src/test/ui/transmute/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -34,5 +34,5 @@ error[E0512]: transmute called with types of different sizes\n    = note: source type: i32 (32 bits)\n    = note: target type: Foo (0 bits)\n \n-error: aborting due to previous error(s)\n+error: aborting due to 4 previous errors\n "}, {"sha": "7f1929050bb8fc33275a1032453ed3642b77e79f", "filename": "src/test/ui/transmute/transmute-from-fn-item-types-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -104,5 +104,5 @@ error[E0512]: transmute called with types of different sizes\n    = note: source type: std::option::Option<fn()> (64 bits)\n    = note: target type: u32 (32 bits)\n \n-error: aborting due to previous error(s)\n+error: aborting due to 11 previous errors\n "}, {"sha": "816c62812f31f7541cff0a60ad2c80a22397358e", "filename": "src/test/ui/transmute/transmute-type-parameters.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-type-parameters.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -52,5 +52,5 @@ error[E0512]: transmute called with types of different sizes\n    = note: source type: std::option::Option<T> (size can vary because of T)\n    = note: target type: i32 (32 bits)\n \n-error: aborting due to previous error(s)\n+error: aborting due to 6 previous errors\n "}, {"sha": "a077f37eae6eeff367197194391b25a1c93122de", "filename": "src/test/ui/type-check/assignment-in-if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Ftype-check%2Fassignment-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ab9e43da3727e1c58faf9451857968270dc77/src%2Ftest%2Fui%2Ftype-check%2Fassignment-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fassignment-in-if.stderr?ref=fb7ab9e43da3727e1c58faf9451857968270dc77", "patch": "@@ -55,5 +55,5 @@ error[E0308]: mismatched types\n    = note: expected type `bool`\n               found type `()`\n \n-error: aborting due to previous error(s)\n+error: aborting due to 5 previous errors\n "}]}