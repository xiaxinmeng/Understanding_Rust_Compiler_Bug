{"sha": "9555ee790f36033a1f2356cef7c115d5a588a8de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NTVlZTc5MGYzNjAzM2ExZjIzNTZjZWY3YzExNWQ1YTU4OGE4ZGU=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2012-10-20T23:54:08Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-21T00:17:10Z"}, "message": "std: rename getpeername to get_peer_addr", "tree": {"sha": "c8f45cb2c956315037f857f21573d18cf0e182f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8f45cb2c956315037f857f21573d18cf0e182f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9555ee790f36033a1f2356cef7c115d5a588a8de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9555ee790f36033a1f2356cef7c115d5a588a8de", "html_url": "https://github.com/rust-lang/rust/commit/9555ee790f36033a1f2356cef7c115d5a588a8de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9555ee790f36033a1f2356cef7c115d5a588a8de/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "781f8cbe4e5f729907d38cb4de8fc407c1bcb23e", "url": "https://api.github.com/repos/rust-lang/rust/commits/781f8cbe4e5f729907d38cb4de8fc407c1bcb23e", "html_url": "https://github.com/rust-lang/rust/commit/781f8cbe4e5f729907d38cb4de8fc407c1bcb23e"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "765c9ecdb03bc0ccb8c53acb894168d47c0013c0", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9555ee790f36033a1f2356cef7c115d5a588a8de/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9555ee790f36033a1f2356cef7c115d5a588a8de/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=9555ee790f36033a1f2356cef7c115d5a588a8de", "patch": "@@ -755,7 +755,7 @@ impl TcpSocket {\n         -> future::Future<result::Result<(), TcpErrData>> {\n         write_future(&self, raw_write_data)\n     }\n-    pub fn getpeername() -> ip::IpAddr {\n+    pub fn get_peer_addr() -> ip::IpAddr {\n         unsafe {\n             if self.socket_data.ipv6 {\n                 let addr = uv::ll::ip6_addr(\"\", 0);\n@@ -1249,8 +1249,8 @@ mod test {\n                 impl_gl_tcp_ipv4_server_and_client();\n             }\n             #[test]\n-            fn test_gl_tcp_get_peer_name() unsafe {\n-                impl_gl_tcp_ipv4_get_peer_name();\n+            fn test_gl_tcp_get_peer_addr() unsafe {\n+                impl_gl_tcp_ipv4_get_peer_addr();\n             }\n             #[test]\n             fn test_gl_tcp_ipv4_client_error_connection_refused() unsafe {\n@@ -1279,8 +1279,8 @@ mod test {\n             }\n             #[test]\n             #[ignore(cfg(target_os = \"linux\"))]\n-            fn test_gl_tcp_get_peer_name() unsafe {\n-                impl_gl_tcp_ipv4_get_peer_name();\n+            fn test_gl_tcp_get_peer_addr() unsafe {\n+                impl_gl_tcp_ipv4_get_peer_addr();\n             }\n             #[test]\n             #[ignore(cfg(target_os = \"linux\"))]\n@@ -1351,7 +1351,7 @@ mod test {\n         assert str::contains(actual_req, expected_req);\n         assert str::contains(actual_resp, expected_resp);\n     }\n-    fn impl_gl_tcp_ipv4_get_peer_name() {\n+    fn impl_gl_tcp_ipv4_get_peer_addr() {\n         let hl_loop = uv::global_loop::get();\n         let server_ip = ~\"127.0.0.1\";\n         let server_port = 8889u;\n@@ -1387,8 +1387,8 @@ mod test {\n             let sock = result::unwrap(move connect_result);\n \n             // This is what we are actually testing!\n-            assert net::ip::format_addr(&sock.getpeername()) == ~\"127.0.0.1\";\n-            assert net::ip::get_port(&sock.getpeername()) == 8889;\n+            assert net::ip::format_addr(&sock.get_peer_addr()) == ~\"127.0.0.1\";\n+            assert net::ip::get_port(&sock.get_peer_addr()) == 8889;\n \n             // Fulfill the protocol the test server expects\n             let resp_bytes = str::to_bytes(~\"ping\");\n@@ -1592,8 +1592,11 @@ mod test {\n                             ~\"SERVER/WORKER: send on cont ch\");\n                         cont_ch.send(());\n                         let sock = result::unwrap(move accept_result);\n+                        let peer_addr = sock.get_peer_addr();\n                         log(debug, ~\"SERVER: successfully accepted\"+\n-                            ~\"connection!\");\n+                            fmt!(\" connection from %s:%u\",\n+                                 ip::format_addr(&peer_addr),\n+                                 ip::get_port(&peer_addr)));\n                         let received_req_bytes = read(&sock, 0u);\n                         match move received_req_bytes {\n                           result::Ok(move data) => {"}]}