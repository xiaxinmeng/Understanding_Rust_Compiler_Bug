{"sha": "ccbf8fef9be09ba6aa3cfc90132623a18a65f493", "node_id": "C_kwDOAAsO6NoAKGNjYmY4ZmVmOWJlMDliYTZhYTNjZmM5MDEzMjYyM2ExOGE2NWY0OTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-20T12:01:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-20T12:01:30Z"}, "message": "Auto merge of #13800 - lowr:fix/mbe-expr-backwards-compat, r=Veykril\n\nfix: don't let mbe expr fragments match let exprs and inline consts\n\nFixes #11729\n\n`expr` fragment in mbe should not match let expressions and inline consts for backwards compatibility. See rust-lang/rust#86730 for details.\n\nThis patch is porting [this logic in rustc](https://github.com/rust-lang/rust/blob/f0c4da49983aa699f715caf681e3154b445fb60b/compiler/rustc_parse/src/parser/nonterminal.rs#L28-L34) (which is called [here in rustc's mbe engine](https://github.com/rust-lang/rust/blob/f0c4da49983aa699f715caf681e3154b445fb60b/compiler/rustc_expand/src/mbe/macro_parser.rs#L576)) to our mbe engine.", "tree": {"sha": "12913fe3c5ce29c86ea21807d4fbab58b4735afe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12913fe3c5ce29c86ea21807d4fbab58b4735afe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccbf8fef9be09ba6aa3cfc90132623a18a65f493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccbf8fef9be09ba6aa3cfc90132623a18a65f493", "html_url": "https://github.com/rust-lang/rust/commit/ccbf8fef9be09ba6aa3cfc90132623a18a65f493", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccbf8fef9be09ba6aa3cfc90132623a18a65f493/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffedfc63a1936c65eb8ada3cb8df8edbc1f5f3ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffedfc63a1936c65eb8ada3cb8df8edbc1f5f3ca", "html_url": "https://github.com/rust-lang/rust/commit/ffedfc63a1936c65eb8ada3cb8df8edbc1f5f3ca"}, {"sha": "e027ac0fbf8e9c523caa8158a22c2a5fd45859bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e027ac0fbf8e9c523caa8158a22c2a5fd45859bf", "html_url": "https://github.com/rust-lang/rust/commit/e027ac0fbf8e9c523caa8158a22c2a5fd45859bf"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "26f16542cbb26a484c5035e493301920a16ef828", "filename": "crates/hir-def/src/macro_expansion_tests/mbe/matching.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ccbf8fef9be09ba6aa3cfc90132623a18a65f493/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccbf8fef9be09ba6aa3cfc90132623a18a65f493/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs?ref=ccbf8fef9be09ba6aa3cfc90132623a18a65f493", "patch": "@@ -136,3 +136,52 @@ macro_rules! m { ($($i:ident)? $vis:vis) => () }\n \"#]],\n     )\n }\n+\n+// For this test and the one below, see rust-lang/rust#86730.\n+#[test]\n+fn expr_dont_match_let_expr() {\n+    check(\n+        r#\"\n+macro_rules! foo {\n+    ($e:expr) => { $e }\n+}\n+\n+fn test() {\n+    foo!(let a = 3);\n+}\n+\"#,\n+        expect![[r#\"\n+macro_rules! foo {\n+    ($e:expr) => { $e }\n+}\n+\n+fn test() {\n+    /* error: no rule matches input tokens */missing;\n+}\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn expr_dont_match_inline_const() {\n+    check(\n+        r#\"\n+macro_rules! foo {\n+    ($e:expr) => { $e }\n+}\n+\n+fn test() {\n+    foo!(const { 3 });\n+}\n+\"#,\n+        expect![[r#\"\n+macro_rules! foo {\n+    ($e:expr) => { $e }\n+}\n+\n+fn test() {\n+    /* error: no rule matches input tokens */missing;\n+}\n+\"#]],\n+    );\n+}"}, {"sha": "b6c5c1026ee0d975867b113fc9a9086f88c53bd6", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ccbf8fef9be09ba6aa3cfc90132623a18a65f493/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccbf8fef9be09ba6aa3cfc90132623a18a65f493/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=ccbf8fef9be09ba6aa3cfc90132623a18a65f493", "patch": "@@ -698,12 +698,16 @@ fn match_meta_var(kind: MetaVarKind, input: &mut TtIter<'_>) -> ExpandResult<Opt\n         MetaVarKind::Item => parser::PrefixEntryPoint::Item,\n         MetaVarKind::Vis => parser::PrefixEntryPoint::Vis,\n         MetaVarKind::Expr => {\n-            // `expr` should not match underscores.\n+            // `expr` should not match underscores, let expressions, or inline const. The latter\n+            // two are for [backwards compatibility][0].\n             // HACK: Macro expansion should not be done using \"rollback and try another alternative\".\n-            // rustc [explicitly checks the next token][0].\n-            // [0]: https://github.com/rust-lang/rust/blob/f0c4da499/compiler/rustc_expand/src/mbe/macro_parser.rs#L576\n+            // rustc [explicitly checks the next token][1].\n+            // [0]: https://github.com/rust-lang/rust/issues/86730\n+            // [1]: https://github.com/rust-lang/rust/blob/f0c4da499/compiler/rustc_expand/src/mbe/macro_parser.rs#L576\n             match input.peek_n(0) {\n-                Some(tt::TokenTree::Leaf(tt::Leaf::Ident(it))) if it.text == \"_\" => {\n+                Some(tt::TokenTree::Leaf(tt::Leaf::Ident(it)))\n+                    if it.text == \"_\" || it.text == \"let\" || it.text == \"const\" =>\n+                {\n                     return ExpandResult::only_err(ExpandError::NoMatchingRule)\n                 }\n                 _ => {}"}]}