{"sha": "9ea57f19beb17c0c1e6ba78cbcf61709f3d59693", "node_id": "C_kwDOAAsO6NoAKDllYTU3ZjE5YmViMTdjMGMxZTZiYTc4Y2JjZjYxNzA5ZjNkNTk2OTM", "commit": {"author": {"name": "Cameron", "email": "cameron.studdstreet@gmail.com", "date": "2022-10-22T04:41:28Z"}, "committer": {"name": "Cameron", "email": "cameron.studdstreet@gmail.com", "date": "2022-10-22T04:41:28Z"}, "message": "add wrapping/checked/saturating assist", "tree": {"sha": "cc16679e32d64a6bba152a2e6ececcf1acdcf6a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc16679e32d64a6bba152a2e6ececcf1acdcf6a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ea57f19beb17c0c1e6ba78cbcf61709f3d59693", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea57f19beb17c0c1e6ba78cbcf61709f3d59693", "html_url": "https://github.com/rust-lang/rust/commit/9ea57f19beb17c0c1e6ba78cbcf61709f3d59693", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ea57f19beb17c0c1e6ba78cbcf61709f3d59693/comments", "author": {"login": "cameron1024", "id": 29902409, "node_id": "MDQ6VXNlcjI5OTAyNDA5", "avatar_url": "https://avatars.githubusercontent.com/u/29902409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cameron1024", "html_url": "https://github.com/cameron1024", "followers_url": "https://api.github.com/users/cameron1024/followers", "following_url": "https://api.github.com/users/cameron1024/following{/other_user}", "gists_url": "https://api.github.com/users/cameron1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/cameron1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cameron1024/subscriptions", "organizations_url": "https://api.github.com/users/cameron1024/orgs", "repos_url": "https://api.github.com/users/cameron1024/repos", "events_url": "https://api.github.com/users/cameron1024/events{/privacy}", "received_events_url": "https://api.github.com/users/cameron1024/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cameron1024", "id": 29902409, "node_id": "MDQ6VXNlcjI5OTAyNDA5", "avatar_url": "https://avatars.githubusercontent.com/u/29902409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cameron1024", "html_url": "https://github.com/cameron1024", "followers_url": "https://api.github.com/users/cameron1024/followers", "following_url": "https://api.github.com/users/cameron1024/following{/other_user}", "gists_url": "https://api.github.com/users/cameron1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/cameron1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cameron1024/subscriptions", "organizations_url": "https://api.github.com/users/cameron1024/orgs", "repos_url": "https://api.github.com/users/cameron1024/repos", "events_url": "https://api.github.com/users/cameron1024/events{/privacy}", "received_events_url": "https://api.github.com/users/cameron1024/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69f01fdff5be888144162d821815c722b41d2de9", "url": "https://api.github.com/repos/rust-lang/rust/commits/69f01fdff5be888144162d821815c722b41d2de9", "html_url": "https://github.com/rust-lang/rust/commit/69f01fdff5be888144162d821815c722b41d2de9"}], "stats": {"total": 219, "additions": 215, "deletions": 4}, "files": [{"sha": "419b6febf1c1213555f91244ca2f16507dec5542", "filename": "crates/ide-assists/src/handlers/replace_arith_with_checked.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9ea57f19beb17c0c1e6ba78cbcf61709f3d59693/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea57f19beb17c0c1e6ba78cbcf61709f3d59693/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_checked.rs?ref=9ea57f19beb17c0c1e6ba78cbcf61709f3d59693", "patch": "@@ -0,0 +1,33 @@\n+use crate::assist_context::{AssistContext, Assists};\n+use crate::utils::{replace_arith, ArithKind};\n+\n+pub(crate) fn replace_arith_with_checked(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+) -> Option<()> {\n+    replace_arith(acc, ctx, ArithKind::Checked)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::check_assist;\n+\n+    use super::*;\n+\n+    #[test]\n+    fn replace_arith_with_saturating_add() {\n+        check_assist(\n+            replace_arith_with_checked,\n+            r#\"\n+fn main() {\n+    let x = 1 $0+ 2;\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let x = 1.checked_add(2);\n+}\n+\"#,\n+        )\n+    }\n+}"}, {"sha": "8c620ad93f027e3ca1b699c91bf30fd72aa5e039", "filename": "crates/ide-assists/src/handlers/replace_arith_with_saturating.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9ea57f19beb17c0c1e6ba78cbcf61709f3d59693/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_saturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea57f19beb17c0c1e6ba78cbcf61709f3d59693/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_saturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_saturating.rs?ref=9ea57f19beb17c0c1e6ba78cbcf61709f3d59693", "patch": "@@ -0,0 +1,33 @@\n+use crate::assist_context::{AssistContext, Assists};\n+use crate::utils::{replace_arith, ArithKind};\n+\n+pub(crate) fn replace_arith_with_saturating(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+) -> Option<()> {\n+    replace_arith(acc, ctx, ArithKind::Saturating)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::check_assist;\n+\n+    use super::*;\n+\n+    #[test]\n+    fn replace_arith_with_saturating_add() {\n+        check_assist(\n+            replace_arith_with_saturating,\n+            r#\"\n+fn main() {\n+    let x = 1 $0+ 2;\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let x = 1.saturating_add(2);\n+}\n+\"#,\n+        )\n+    }\n+}"}, {"sha": "0054f58026375e2e5b5f6885629fbbd861db22d4", "filename": "crates/ide-assists/src/handlers/replace_arith_with_wrapping.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9ea57f19beb17c0c1e6ba78cbcf61709f3d59693/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_wrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea57f19beb17c0c1e6ba78cbcf61709f3d59693/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_wrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_wrapping.rs?ref=9ea57f19beb17c0c1e6ba78cbcf61709f3d59693", "patch": "@@ -0,0 +1,33 @@\n+use crate::assist_context::{AssistContext, Assists};\n+use crate::utils::{replace_arith, ArithKind};\n+\n+pub(crate) fn replace_arith_with_wrapping(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+) -> Option<()> {\n+    replace_arith(acc, ctx, ArithKind::Wrapping)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::check_assist;\n+\n+    use super::*;\n+\n+    #[test]\n+    fn replace_arith_with_saturating_add() {\n+        check_assist(\n+            replace_arith_with_wrapping,\n+            r#\"\n+fn main() {\n+    let x = 1 $0+ 2;\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let x = 1.wrapping_add(2);\n+}\n+\"#,\n+        )\n+    }\n+}"}, {"sha": "5728730c9130eb10f457e4bb483b3e43a31d728c", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ea57f19beb17c0c1e6ba78cbcf61709f3d59693/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea57f19beb17c0c1e6ba78cbcf61709f3d59693/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=9ea57f19beb17c0c1e6ba78cbcf61709f3d59693", "patch": "@@ -183,6 +183,10 @@ mod handlers {\n     mod replace_derive_with_manual_impl;\n     mod replace_if_let_with_match;\n     mod replace_or_with_or_else;\n+    mod replace_arith_with_saturating;\n+    mod replace_arith_with_checked;\n+    mod replace_arith_with_wrapping;\n+    mod replace_arith_with_saturating;\n     mod introduce_named_generic;\n     mod replace_let_with_if_let;\n     mod replace_qualified_name_with_use;\n@@ -286,6 +290,9 @@ mod handlers {\n             replace_or_with_or_else::replace_or_with_or_else,\n             replace_turbofish_with_explicit_type::replace_turbofish_with_explicit_type,\n             replace_qualified_name_with_use::replace_qualified_name_with_use,\n+            replace_arith_with_wrapping::replace_arith_with_wrapping,\n+            replace_arith_with_checked::replace_arith_with_checked,\n+            replace_arith_with_saturating::replace_arith_with_saturating,\n             sort_items::sort_items,\n             split_import::split_import,\n             toggle_ignore::toggle_ignore,"}, {"sha": "dd2b6785c4b1da31751c424b0e094b200876d580", "filename": "crates/ide-assists/src/utils.rs", "status": "modified", "additions": 109, "deletions": 4, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/9ea57f19beb17c0c1e6ba78cbcf61709f3d59693/crates%2Fide-assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea57f19beb17c0c1e6ba78cbcf61709f3d59693/crates%2Fide-assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils.rs?ref=9ea57f19beb17c0c1e6ba78cbcf61709f3d59693", "patch": "@@ -4,21 +4,27 @@ use std::ops;\n \n pub(crate) use gen_trait_fn_body::gen_trait_fn_body;\n use hir::{db::HirDatabase, HirDisplay, Semantics};\n-use ide_db::{famous_defs::FamousDefs, path_transform::PathTransform, RootDatabase, SnippetCap};\n+use ide_db::{\n+    assists::{AssistId, AssistKind},\n+    famous_defs::FamousDefs,\n+    path_transform::PathTransform,\n+    RootDatabase, SnippetCap,\n+};\n use stdx::format_to;\n use syntax::{\n     ast::{\n         self,\n         edit::{self, AstNodeEdit},\n         edit_in_place::{AttrsOwnerEdit, Removable},\n-        make, HasArgList, HasAttrs, HasGenericParams, HasName, HasTypeBounds, Whitespace,\n+        make, ArithOp, BinExpr, BinaryOp, Expr, HasArgList, HasAttrs, HasGenericParams, HasName,\n+        HasTypeBounds, Whitespace,\n     },\n-    ted, AstNode, AstToken, Direction, SourceFile,\n+    ted, AstNode, AstToken, Direction, SmolStr, SourceFile,\n     SyntaxKind::*,\n     SyntaxNode, TextRange, TextSize, T,\n };\n \n-use crate::assist_context::{AssistContext, SourceChangeBuilder};\n+use crate::assist_context::{AssistContext, Assists, SourceChangeBuilder};\n \n pub(crate) mod suggest_name;\n mod gen_trait_fn_body;\n@@ -705,3 +711,102 @@ pub(crate) fn convert_param_list_to_arg_list(list: ast::ParamList) -> ast::ArgLi\n     }\n     make::arg_list(args)\n }\n+\n+pub(crate) enum ArithKind {\n+    Saturating,\n+    Wrapping,\n+    Checked,\n+}\n+\n+impl ArithKind {\n+    fn assist_id(&self) -> AssistId {\n+        let s = match self {\n+            ArithKind::Saturating => \"replace_arith_with_saturating\",\n+            ArithKind::Checked => \"replace_arith_with_saturating\",\n+            ArithKind::Wrapping => \"replace_arith_with_saturating\",\n+        };\n+\n+        AssistId(s, AssistKind::RefactorRewrite)\n+    }\n+\n+    fn label(&self) -> &'static str {\n+        match self {\n+            ArithKind::Saturating => \"Replace arithmetic with call to saturating_*\",\n+            ArithKind::Checked => \"Replace arithmetic with call to checked_*\",\n+            ArithKind::Wrapping => \"Replace arithmetic with call to wrapping_*\",\n+        }\n+    }\n+\n+    fn method_name(&self, op: ArithOp) -> SmolStr {\n+        // is this too much effort to avoid an allocation? is there a better way?\n+        let mut bytes = [0u8; 14];\n+        let prefix = match self {\n+            ArithKind::Checked => \"checked_\",\n+            ArithKind::Wrapping => \"wrapping_\",\n+            ArithKind::Saturating => \"saturating_\",\n+        };\n+\n+        bytes[0..(prefix.len())].copy_from_slice(prefix.as_bytes());\n+\n+        let suffix = match op {\n+            ArithOp::Add => \"add\",\n+            ArithOp::Sub => \"sub\",\n+            ArithOp::Mul => \"mul\",\n+            ArithOp::Div => \"div\",\n+            _ => unreachable!(\"this function should only be called with +, -, / or *\"),\n+        };\n+\n+        bytes[(prefix.len())..(prefix.len() + suffix.len())].copy_from_slice(suffix.as_bytes());\n+\n+        let len = prefix.len() + suffix.len();\n+        let s = core::str::from_utf8(&bytes[0..len]).unwrap();\n+        SmolStr::from(s)\n+    }\n+}\n+\n+pub(crate) fn replace_arith(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+    kind: ArithKind,\n+) -> Option<()> {\n+    let (lhs, op, rhs) = parse_binary_op(ctx)?;\n+\n+    let start = lhs.syntax().text_range().start();\n+    let end = rhs.syntax().text_range().end();\n+    let range = TextRange::new(start, end);\n+\n+    acc.add(kind.assist_id(), kind.label(), range, |builder| {\n+        let method_name = kind.method_name(op);\n+\n+        builder.replace(range, format!(\"{lhs}.{method_name}({rhs})\"))\n+    })\n+}\n+\n+/// Extract the operands of an arithmetic expression (e.g. `1 + 2` or `1.checked_add(2)`)\n+fn parse_binary_op(ctx: &AssistContext<'_>) -> Option<(Expr, ArithOp, Expr)> {\n+    let expr = ctx.find_node_at_offset::<BinExpr>()?;\n+\n+    let op = match expr.op_kind() {\n+        Some(BinaryOp::ArithOp(ArithOp::Add)) => ArithOp::Add,\n+        Some(BinaryOp::ArithOp(ArithOp::Sub)) => ArithOp::Sub,\n+        Some(BinaryOp::ArithOp(ArithOp::Mul)) => ArithOp::Mul,\n+        Some(BinaryOp::ArithOp(ArithOp::Div)) => ArithOp::Div,\n+        _ => return None,\n+    };\n+\n+    let lhs = expr.lhs()?;\n+    let rhs = expr.rhs()?;\n+\n+    Some((lhs, op, rhs))\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn arith_kind_method_name() {\n+        assert_eq!(ArithKind::Saturating.method_name(ArithOp::Add), \"saturating_add\");\n+        assert_eq!(ArithKind::Checked.method_name(ArithOp::Sub), \"checked_sub\");\n+    }\n+}"}]}