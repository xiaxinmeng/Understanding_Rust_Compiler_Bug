{"sha": "ec51594521dac6862d0ee3249c181827b4dcdff9", "node_id": "C_kwDOAAsO6NoAKGVjNTE1OTQ1MjFkYWM2ODYyZDBlZTMyNDljMTgxODI3YjRkY2RmZjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-04T19:54:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-04T19:54:01Z"}, "message": "Auto merge of #2046 - RalfJung:very-strict, r=RalfJung\n\nmake strict-provenance imply check-number-validity\n\nI feel like Miri not catching [this example](https://github.com/rust-lang/unsafe-code-guidelines/issues/286#issuecomment-1085144431) with strict provenance checking enabled is surprising.\n\nOTOH, Miri suddenly complaining about uninit data in integers with `-Zmiri-strict-provenance` also might be surprising. Which one is more surprising? I don't know. We *could* go out of our way and have a mode where uninit integers are okay but provenance is not, but I am not sure if that is truly worth it. It'd be quite annoying to implement.", "tree": {"sha": "2f6dd227d22692ea71890698212ed9b5873d8281", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f6dd227d22692ea71890698212ed9b5873d8281"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec51594521dac6862d0ee3249c181827b4dcdff9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec51594521dac6862d0ee3249c181827b4dcdff9", "html_url": "https://github.com/rust-lang/rust/commit/ec51594521dac6862d0ee3249c181827b4dcdff9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec51594521dac6862d0ee3249c181827b4dcdff9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc2165dd78fede662b0d6c3645895f2c576625c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2165dd78fede662b0d6c3645895f2c576625c9", "html_url": "https://github.com/rust-lang/rust/commit/fc2165dd78fede662b0d6c3645895f2c576625c9"}, {"sha": "3dcba56349ebc41b20948e982dc61a9ed9305f59", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dcba56349ebc41b20948e982dc61a9ed9305f59", "html_url": "https://github.com/rust-lang/rust/commit/3dcba56349ebc41b20948e982dc61a9ed9305f59"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "d394eb3cfbe955e858465a38dd358560c8b2aace", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec51594521dac6862d0ee3249c181827b4dcdff9/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/ec51594521dac6862d0ee3249c181827b4dcdff9/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=ec51594521dac6862d0ee3249c181827b4dcdff9", "patch": "@@ -297,7 +297,8 @@ environment variable:\n * `-Zmiri-strict-provenance` enables [strict\n   provenance](https://github.com/rust-lang/rust/issues/95228) checking in Miri. This means that\n   casting an integer to a pointer yields a result with 'invalid' provenance, i.e., with provenance\n-  that cannot be used for any memory access. Also implies `-Zmiri-tag-raw-pointers`.\n+  that cannot be used for any memory access. Also implies `-Zmiri-tag-raw-pointers` and\n+  `-Zmiri-check-number-validity`.\n * `-Zmiri-symbolic-alignment-check` makes the alignment check more strict.  By\n   default, alignment is checked by casting the pointer to an integer, and making\n   sure that is a multiple of the alignment.  This can lead to cases where a"}, {"sha": "be4776f459cd4295ab72b21e1053c86e2b43028b", "filename": "src/bin/miri.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec51594521dac6862d0ee3249c181827b4dcdff9/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec51594521dac6862d0ee3249c181827b4dcdff9/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=ec51594521dac6862d0ee3249c181827b4dcdff9", "patch": "@@ -366,6 +366,7 @@ fn main() {\n                 \"-Zmiri-strict-provenance\" => {\n                     miri_config.strict_provenance = true;\n                     miri_config.tag_raw = true;\n+                    miri_config.check_number_validity = true;\n                 }\n                 \"-Zmiri-track-raw-pointers\" => {\n                     eprintln!("}, {"sha": "0fc64295f94ce869832062aaa2c65d45b406b81c", "filename": "tests/compile-fail/strict_provenance_transmute.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ec51594521dac6862d0ee3249c181827b4dcdff9/tests%2Fcompile-fail%2Fstrict_provenance_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec51594521dac6862d0ee3249c181827b4dcdff9/tests%2Fcompile-fail%2Fstrict_provenance_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstrict_provenance_transmute.rs?ref=ec51594521dac6862d0ee3249c181827b4dcdff9", "patch": "@@ -0,0 +1,27 @@\n+// compile-flags: -Zmiri-strict-provenance\n+#![feature(strict_provenance)]\n+\n+use std::mem;\n+\n+// This is the example from\n+// <https://github.com/rust-lang/unsafe-code-guidelines/issues/286#issuecomment-1085144431>.\n+\n+unsafe fn deref(left: *const u8, right: *const u8) {\n+    let left_int: usize = mem::transmute(left); //~ERROR expected initialized plain (non-pointer) bytes\n+    let right_int: usize = mem::transmute(right);\n+    if left_int == right_int {\n+        // The compiler is allowed to replace `left_int` by `right_int` here...\n+        let left_ptr: *const u8 = mem::transmute(left_int);\n+        // ...which however means here it could be dereferencing the wrong pointer.\n+        let _val = *left_ptr;\n+    }\n+}\n+\n+fn main() {\n+    let ptr1 = &0u8 as *const u8;\n+    let ptr2 = &1u8 as *const u8;\n+    unsafe {\n+        // Two pointers with the same address but different provenance.\n+        deref(ptr1, ptr2.with_addr(ptr1.addr()));\n+    }\n+}"}, {"sha": "413d7ef53d1cde93d6b3e33cb299b1b6f3409859", "filename": "tests/run-pass/btreemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec51594521dac6862d0ee3249c181827b4dcdff9/tests%2Frun-pass%2Fbtreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec51594521dac6862d0ee3249c181827b4dcdff9/tests%2Frun-pass%2Fbtreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbtreemap.rs?ref=ec51594521dac6862d0ee3249c181827b4dcdff9", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-strict-provenance -Zmiri-check-number-validity\n+// compile-flags: -Zmiri-strict-provenance\n #![feature(btree_drain_filter)]\n use std::collections::{BTreeMap, BTreeSet};\n use std::mem;"}, {"sha": "5e43fea968641ac7233c51d36033fb75a9477cee", "filename": "tests/run-pass/concurrency/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec51594521dac6862d0ee3249c181827b4dcdff9/tests%2Frun-pass%2Fconcurrency%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec51594521dac6862d0ee3249c181827b4dcdff9/tests%2Frun-pass%2Fconcurrency%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fsync.rs?ref=ec51594521dac6862d0ee3249c181827b4dcdff9", "patch": "@@ -1,5 +1,5 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation -Zmiri-strict-provenance -Zmiri-check-number-validity\n+// compile-flags: -Zmiri-disable-isolation -Zmiri-strict-provenance\n \n use std::sync::{Arc, Barrier, Condvar, Mutex, Once, RwLock};\n use std::thread;"}, {"sha": "7938284bd6343ac41ff24696a8f1c4578c18088c", "filename": "tests/run-pass/concurrency/thread_locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec51594521dac6862d0ee3249c181827b4dcdff9/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec51594521dac6862d0ee3249c181827b4dcdff9/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.rs?ref=ec51594521dac6862d0ee3249c181827b4dcdff9", "patch": "@@ -1,5 +1,5 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-strict-provenance -Zmiri-check-number-validity\n+// compile-flags: -Zmiri-strict-provenance\n \n //! The main purpose of this test is to check that if we take a pointer to\n //! thread's `t1` thread-local `A` and send it to another thread `t2`,"}, {"sha": "6d51825fc0df28b8222ae20cae2fe09bc4659961", "filename": "tests/run-pass/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec51594521dac6862d0ee3249c181827b4dcdff9/tests%2Frun-pass%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec51594521dac6862d0ee3249c181827b4dcdff9/tests%2Frun-pass%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frc.rs?ref=ec51594521dac6862d0ee3249c181827b4dcdff9", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-strict-provenance -Zmiri-check-number-validity\n+// compile-flags: -Zmiri-strict-provenance\n #![feature(new_uninit)]\n #![feature(get_mut_unchecked)]\n "}, {"sha": "b6537b4f1b4de174546a0f14a2f545df13f5c5e2", "filename": "tests/run-pass/slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec51594521dac6862d0ee3249c181827b4dcdff9/tests%2Frun-pass%2Fslices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec51594521dac6862d0ee3249c181827b4dcdff9/tests%2Frun-pass%2Fslices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fslices.rs?ref=ec51594521dac6862d0ee3249c181827b4dcdff9", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-strict-provenance -Zmiri-check-number-validity\n+// compile-flags: -Zmiri-strict-provenance\n #![feature(new_uninit)]\n #![feature(slice_as_chunks)]\n #![feature(slice_partition_dedup)]"}, {"sha": "77ecaed4fe9b88359cd3f22ebe6f30801d75038b", "filename": "tests/run-pass/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec51594521dac6862d0ee3249c181827b4dcdff9/tests%2Frun-pass%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec51594521dac6862d0ee3249c181827b4dcdff9/tests%2Frun-pass%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstrings.rs?ref=ec51594521dac6862d0ee3249c181827b4dcdff9", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-strict-provenance -Zmiri-check-number-validity\n+// compile-flags: -Zmiri-strict-provenance\n \n fn empty() -> &'static str {\n     \"\""}, {"sha": "788f05ce97741ccea85b374ac4cfbc1cc51f3b94", "filename": "tests/run-pass/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec51594521dac6862d0ee3249c181827b4dcdff9/tests%2Frun-pass%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec51594521dac6862d0ee3249c181827b4dcdff9/tests%2Frun-pass%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvec.rs?ref=ec51594521dac6862d0ee3249c181827b4dcdff9", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-strict-provenance -Zmiri-check-number-validity\n+// compile-flags: -Zmiri-strict-provenance\n // Gather all references from a mutable iterator and make sure Miri notices if\n // using them is dangerous.\n fn test_all_refs<'a, T: 'a>(dummy: &mut T, iter: impl Iterator<Item = &'a mut T>) {"}, {"sha": "0cba0165cae16c5d1ad1c0deefff4b292b0dea6d", "filename": "tests/run-pass/vecdeque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec51594521dac6862d0ee3249c181827b4dcdff9/tests%2Frun-pass%2Fvecdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec51594521dac6862d0ee3249c181827b4dcdff9/tests%2Frun-pass%2Fvecdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvecdeque.rs?ref=ec51594521dac6862d0ee3249c181827b4dcdff9", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-strict-provenance -Zmiri-check-number-validity\n+// compile-flags: -Zmiri-strict-provenance\n use std::collections::VecDeque;\n \n fn test_all_refs<'a, T: 'a>(dummy: &mut T, iter: impl Iterator<Item = &'a mut T>) {"}]}