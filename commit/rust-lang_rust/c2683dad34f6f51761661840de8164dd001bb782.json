{"sha": "c2683dad34f6f51761661840de8164dd001bb782", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNjgzZGFkMzRmNmY1MTc2MTY2MTg0MGRlODE2NGRkMDAxYmI3ODI=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-01-29T03:07:09Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-04-05T14:25:21Z"}, "message": "Clean up test case", "tree": {"sha": "0ccd99df9f35941bdcef8b35917002fa79309ab9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ccd99df9f35941bdcef8b35917002fa79309ab9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2683dad34f6f51761661840de8164dd001bb782", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2683dad34f6f51761661840de8164dd001bb782", "html_url": "https://github.com/rust-lang/rust/commit/c2683dad34f6f51761661840de8164dd001bb782", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2683dad34f6f51761661840de8164dd001bb782/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88f319fb4c0597856d62ee67eba6354b496cbe8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/88f319fb4c0597856d62ee67eba6354b496cbe8f", "html_url": "https://github.com/rust-lang/rust/commit/88f319fb4c0597856d62ee67eba6354b496cbe8f"}], "stats": {"total": 65, "additions": 32, "deletions": 33}, "files": [{"sha": "8c92b47fb276c50c9a59a04138e150eaefe39af1", "filename": "tests/run-pass/sync.rs", "status": "modified", "additions": 32, "deletions": 33, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/c2683dad34f6f51761661840de8164dd001bb782/tests%2Frun-pass%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2683dad34f6f51761661840de8164dd001bb782/tests%2Frun-pass%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsync.rs?ref=c2683dad34f6f51761661840de8164dd001bb782", "patch": "@@ -3,45 +3,33 @@\n \n #![feature(rustc_private)]\n \n-use std::sync;\n+use std::sync::{Mutex, RwLock, TryLockError};\n \n extern crate libc;\n \n fn main() {\n-    let m = sync::Mutex::new(0);\n+    let m = Mutex::new(0);\n     {\n         let _guard = m.lock();\n-        let try_lock_error = m.try_lock().unwrap_err();\n-        if let sync::TryLockError::Poisoned(e) = try_lock_error {\n-            panic!(\"{}\", e);\n-        }\n+        assert!(m.try_lock().unwrap_err().would_block());\n     }\n     drop(m.try_lock().unwrap());\n     drop(m);\n \n     #[cfg(not(target_os = \"windows\"))] // TODO: implement RwLock on Windows\n     {\n-        let rw = sync::RwLock::new(0);\n+        let rw = RwLock::new(0);\n         {\n             let _read_guard = rw.read().unwrap();\n             drop(rw.read().unwrap());\n             drop(rw.try_read().unwrap());\n-            let try_lock_error = rw.try_write().unwrap_err();\n-            if let sync::TryLockError::Poisoned(e) = try_lock_error {\n-                panic!(\"{}\", e);\n-            }\n+            assert!(rw.try_write().unwrap_err().would_block());\n         }\n \n         {\n             let _write_guard = rw.write().unwrap();\n-            let try_lock_error = rw.try_read().unwrap_err();\n-            if let sync::TryLockError::Poisoned(e) = try_lock_error {\n-                panic!(\"{}\", e);\n-            }\n-            let try_lock_error = rw.try_write().unwrap_err();\n-            if let sync::TryLockError::Poisoned(e) = try_lock_error {\n-                panic!(\"{}\", e);\n-            }\n+            assert!(rw.try_read().unwrap_err().would_block());\n+            assert!(rw.try_write().unwrap_err().would_block());\n         }\n \n         // need to go a layer deeper and test the behavior of libc functions, because\n@@ -58,24 +46,35 @@ fn main() {\n             assert_eq!(libc::pthread_mutex_destroy(&mut mutex as *mut _), 0);\n         }\n \n+        let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n         unsafe {\n-            let mut rw: libc::pthread_rwlock_t = std::mem::zeroed();\n-            assert_eq!(libc::pthread_rwlock_init(&mut rw as *mut _, std::ptr::null_mut()), 0);\n+            assert_eq!(libc::pthread_rwlock_rdlock(rw.get()), 0);\n+            assert_eq!(libc::pthread_rwlock_rdlock(rw.get()), 0);\n+            assert_eq!(libc::pthread_rwlock_unlock(rw.get()), 0);\n+            assert_eq!(libc::pthread_rwlock_tryrdlock(rw.get()), 0);\n+            assert_eq!(libc::pthread_rwlock_unlock(rw.get()), 0);\n+            assert_eq!(libc::pthread_rwlock_trywrlock(rw.get()), libc::EBUSY);\n+            assert_eq!(libc::pthread_rwlock_unlock(rw.get()), 0);\n+\n+            assert_eq!(libc::pthread_rwlock_wrlock(rw.get()), 0);\n+            assert_eq!(libc::pthread_rwlock_tryrdlock(rw.get()), libc::EBUSY);\n+            assert_eq!(libc::pthread_rwlock_trywrlock(rw.get()), libc::EBUSY);\n+            assert_eq!(libc::pthread_rwlock_unlock(rw.get()), 0);\n \n-            assert_eq!(libc::pthread_rwlock_rdlock(&mut rw as *mut _), 0);\n-            assert_eq!(libc::pthread_rwlock_rdlock(&mut rw as *mut _), 0);\n-            assert_eq!(libc::pthread_rwlock_unlock(&mut rw as *mut _), 0);\n-            assert_eq!(libc::pthread_rwlock_tryrdlock(&mut rw as *mut _), 0);\n-            assert_eq!(libc::pthread_rwlock_unlock(&mut rw as *mut _), 0);\n-            assert_eq!(libc::pthread_rwlock_trywrlock(&mut rw as *mut _), libc::EBUSY);\n-            assert_eq!(libc::pthread_rwlock_unlock(&mut rw as *mut _), 0);\n+            assert_eq!(libc::pthread_rwlock_destroy(rw.get()), 0);\n+        }\n+    }\n+}\n \n-            assert_eq!(libc::pthread_rwlock_wrlock(&mut rw as *mut _), 0);\n-            assert_eq!(libc::pthread_rwlock_tryrdlock(&mut rw as *mut _), libc::EBUSY);\n-            assert_eq!(libc::pthread_rwlock_trywrlock(&mut rw as *mut _), libc::EBUSY);\n-            assert_eq!(libc::pthread_rwlock_unlock(&mut rw as *mut _), 0);\n+trait TryLockErrorExt<T> {\n+    fn would_block(&self) -> bool;\n+}\n \n-            assert_eq!(libc::pthread_rwlock_destroy(&mut rw as *mut _), 0);\n+impl<T> TryLockErrorExt<T> for TryLockError<T> {\n+    fn would_block(&self) -> bool {\n+        match self {\n+            TryLockError::WouldBlock => true,\n+            TryLockError::Poisoned(_) => false,\n         }\n     }\n }"}]}