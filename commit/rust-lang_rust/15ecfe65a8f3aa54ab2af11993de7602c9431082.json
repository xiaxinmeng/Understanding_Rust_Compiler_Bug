{"sha": "15ecfe65a8f3aa54ab2af11993de7602c9431082", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZWNmZTY1YThmM2FhNTRhYjJhZjExOTkzZGU3NjAyYzk0MzEwODI=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-04-21T20:11:00Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-04-21T20:46:27Z"}, "message": "visit_place_base is just visit_local", "tree": {"sha": "71b0ff4bf517e8a8ed8c3125181365c682e97f46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71b0ff4bf517e8a8ed8c3125181365c682e97f46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15ecfe65a8f3aa54ab2af11993de7602c9431082", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl6fW6YACgkQgTGiTgx5\n76/rAQ//Zm+r5kUIwfpRn+F2Wrm46er7wZtRqBmcSrXyuplKzEf0sfYuz6Vsvep9\npkKb3LbRUeHJO6XCXm0W8q7zEWodzkezHk/Ls3OXMbkUtgBiXVA6eukjJeW8EiG8\nanE2HlMNcyJ9PvScY/KVnhNmtLMbntZfkH+uu7+UbsqjO/K3CZuArpIci6aP4PZ6\nGbG3Fe7LLvVdS/HwdDCkDGTzwlHrvv4saUlVYa4cR3NboMnPFfZbWx/rlYX+Kt/8\nuUnibDqnWEc22DHYUfGmDWOJlh0CQqblypq7tmZAGEnxvkWnr0TeOc8JhqfPManf\nZDyU5x9uyUbn5GZxA+yXPEP7GipmNosnI4pjNxB2Qx+rF/5Mm/lYQjGrj2i+sBDx\nhn5Xb4nnnjxN+SRMZLWMUT61cwa/rzzSYp9IUju3KiUdiVjVyc3ZESoWeOGZleEw\njYXUjWyPp71Bd3kuFdJ/50F1NfqufF2J3ZF0Ou+Xj/fSxzS+aTlO84tnoDGSWdMd\nGMjdAvnGGaUtDa48C3w+zJFrOnv38MMy5DR+0r0Edmpz/3oraptFIP15V0uvKOhb\nIqdt1Xke4OB0wgOUeH0EUkNePRE7Me/+SAi+dSBOjqA2ZEIL2oWH5ecWBatd4FSf\n7aKyPdqWux47SCOYOh+6J6488lh+8R/I2NadJp2yQ6LAP1ufvRI=\n=Ji1a\n-----END PGP SIGNATURE-----", "payload": "tree 71b0ff4bf517e8a8ed8c3125181365c682e97f46\nparent 45d050cde277b22a755847338f2acc2c7b834141\nauthor Santiago Pastorino <spastorino@gmail.com> 1587499860 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1587501987 -0300\n\nvisit_place_base is just visit_local\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15ecfe65a8f3aa54ab2af11993de7602c9431082", "html_url": "https://github.com/rust-lang/rust/commit/15ecfe65a8f3aa54ab2af11993de7602c9431082", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15ecfe65a8f3aa54ab2af11993de7602c9431082/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45d050cde277b22a755847338f2acc2c7b834141", "url": "https://api.github.com/repos/rust-lang/rust/commits/45d050cde277b22a755847338f2acc2c7b834141", "html_url": "https://github.com/rust-lang/rust/commit/45d050cde277b22a755847338f2acc2c7b834141"}], "stats": {"total": 35, "additions": 10, "deletions": 25}, "files": [{"sha": "5ce60b8b3d406468583c430ad25363e952deda79", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15ecfe65a8f3aa54ab2af11993de7602c9431082/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ecfe65a8f3aa54ab2af11993de7602c9431082/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=15ecfe65a8f3aa54ab2af11993de7602c9431082", "patch": "@@ -204,7 +204,7 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n                 };\n             }\n \n-            self.visit_place_base(&place_ref.local, context, location);\n+            self.visit_local(&place_ref.local, context, location);\n             self.visit_projection(place_ref.local, place_ref.projection, context, location);\n         }\n     }"}, {"sha": "633524605360825120545557b90b4d16f5303127", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/15ecfe65a8f3aa54ab2af11993de7602c9431082/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ecfe65a8f3aa54ab2af11993de7602c9431082/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=15ecfe65a8f3aa54ab2af11993de7602c9431082", "patch": "@@ -163,13 +163,6 @@ macro_rules! make_mir_visitor {\n                 self.super_place(place, context, location);\n             }\n \n-            fn visit_place_base(&mut self,\n-                                local: & $($mutability)? Local,\n-                                context: PlaceContext,\n-                                location: Location) {\n-                self.super_place_base(local, context, location);\n-            }\n-\n             visit_place_fns!($($mutability)?);\n \n             fn visit_constant(&mut self,\n@@ -710,13 +703,6 @@ macro_rules! make_mir_visitor {\n                 );\n             }\n \n-            fn super_place_base(&mut self,\n-                                local: & $($mutability)? Local,\n-                                context: PlaceContext,\n-                                location: Location) {\n-                self.visit_local(local, context, location);\n-            }\n-\n             fn super_local_decl(&mut self,\n                                 local: Local,\n                                 local_decl: & $($mutability)? LocalDecl<'tcx>) {\n@@ -847,7 +833,7 @@ macro_rules! visit_place_fns {\n             context: PlaceContext,\n             location: Location,\n         ) {\n-            self.visit_place_base(&mut place.local, context, location);\n+            self.visit_local(&mut place.local, context, location);\n \n             if let Some(new_projection) = self.process_projection(&place.projection, location) {\n                 place.projection = self.tcx().intern_place_elems(&new_projection);\n@@ -936,7 +922,7 @@ macro_rules! visit_place_fns {\n                 };\n             }\n \n-            self.visit_place_base(&place.local, context, location);\n+            self.visit_local(&place.local, context, location);\n \n             self.visit_projection(place.local, &place.projection, context, location);\n         }"}, {"sha": "5c94257c31aa47059b258bd7efeaf9c0e23354c5", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15ecfe65a8f3aa54ab2af11993de7602c9431082/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ecfe65a8f3aa54ab2af11993de7602c9431082/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=15ecfe65a8f3aa54ab2af11993de7602c9431082", "patch": "@@ -648,7 +648,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n         self.super_terminator_kind(kind, location);\n     }\n \n-    fn visit_place_base(\n+    fn visit_local(\n         &mut self,\n         _place_local: &Local,\n         _context: mir::visit::PlaceContext,"}, {"sha": "282f37e8fc5cf5a4e1c1032d4822d111e22f6335", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15ecfe65a8f3aa54ab2af11993de7602c9431082/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ecfe65a8f3aa54ab2af11993de7602c9431082/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=15ecfe65a8f3aa54ab2af11993de7602c9431082", "patch": "@@ -276,7 +276,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                             PlaceContext::MutatingUse(MutatingUseContext::Borrow)\n                         }\n                     };\n-                    self.visit_place_base(&place.local, ctx, location);\n+                    self.visit_local(&place.local, ctx, location);\n                     self.visit_projection(place.local, reborrowed_proj, ctx, location);\n                     return;\n                 }\n@@ -289,7 +289,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                         }\n                         Mutability::Mut => PlaceContext::MutatingUse(MutatingUseContext::AddressOf),\n                     };\n-                    self.visit_place_base(&place.local, ctx, location);\n+                    self.visit_local(&place.local, ctx, location);\n                     self.visit_projection(place.local, reborrowed_proj, ctx, location);\n                     return;\n                 }\n@@ -386,14 +386,13 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n         }\n     }\n \n-    fn visit_place_base(&mut self, place_local: &Local, context: PlaceContext, location: Location) {\n+    fn visit_local(&mut self, place_local: &Local, context: PlaceContext, location: Location) {\n         trace!(\n-            \"visit_place_base: place_local={:?} context={:?} location={:?}\",\n+            \"visit_local: place_local={:?} context={:?} location={:?}\",\n             place_local,\n             context,\n             location,\n         );\n-        self.super_place_base(place_local, context, location);\n     }\n \n     fn visit_operand(&mut self, op: &Operand<'tcx>, location: Location) {"}, {"sha": "257b6b4a5cfae650c952df502ccf7374c6501424", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15ecfe65a8f3aa54ab2af11993de7602c9431082/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ecfe65a8f3aa54ab2af11993de7602c9431082/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=15ecfe65a8f3aa54ab2af11993de7602c9431082", "patch": "@@ -115,7 +115,7 @@ impl<'tcx> MutVisitor<'tcx> for DerefArgVisitor<'tcx> {\n                 self.tcx,\n             );\n         } else {\n-            self.visit_place_base(&mut place.local, context, location);\n+            self.visit_local(&mut place.local, context, location);\n \n             for elem in place.projection.iter() {\n                 if let PlaceElem::Index(local) = elem {\n@@ -154,7 +154,7 @@ impl<'tcx> MutVisitor<'tcx> for PinArgVisitor<'tcx> {\n                 self.tcx,\n             );\n         } else {\n-            self.visit_place_base(&mut place.local, context, location);\n+            self.visit_local(&mut place.local, context, location);\n \n             for elem in place.projection.iter() {\n                 if let PlaceElem::Index(local) = elem {"}]}