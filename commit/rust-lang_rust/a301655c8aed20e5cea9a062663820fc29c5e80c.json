{"sha": "a301655c8aed20e5cea9a062663820fc29c5e80c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMDE2NTVjOGFlZDIwZTVjZWE5YTA2MjY2MzgyMGZjMjljNWU4MGM=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-02-13T20:20:23Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-02-13T20:20:23Z"}, "message": "Use posix_spawn_file_actions_addchdir_np when possible\n\nThis is a non-POSIX extension implemented in Solaris and in glibc 2.29.\nWith this we can still use `posix_spawn()` when `Command::current_dir()`\nhas been set, otherwise we fallback to `fork(); chdir(); exec()`.", "tree": {"sha": "9497fbbd2baab5c9ff60c8338d3a8b14bbe65fb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9497fbbd2baab5c9ff60c8338d3a8b14bbe65fb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a301655c8aed20e5cea9a062663820fc29c5e80c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a301655c8aed20e5cea9a062663820fc29c5e80c", "html_url": "https://github.com/rust-lang/rust/commit/a301655c8aed20e5cea9a062663820fc29c5e80c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a301655c8aed20e5cea9a062663820fc29c5e80c/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f949c2fcc696d0260a99196d5e5400c59a26a54", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f949c2fcc696d0260a99196d5e5400c59a26a54", "html_url": "https://github.com/rust-lang/rust/commit/0f949c2fcc696d0260a99196d5e5400c59a26a54"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "6fbbbb349b171a9a86e30ca8118abc18bc425391", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a301655c8aed20e5cea9a062663820fc29c5e80c/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a301655c8aed20e5cea9a062663820fc29c5e80c/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=a301655c8aed20e5cea9a062663820fc29c5e80c", "patch": "@@ -281,8 +281,7 @@ impl Command {\n         use mem;\n         use sys;\n \n-        if self.get_cwd().is_some() ||\n-            self.get_gid().is_some() ||\n+        if self.get_gid().is_some() ||\n             self.get_uid().is_some() ||\n             self.env_saw_path() ||\n             self.get_closures().len() != 0 {\n@@ -301,6 +300,24 @@ impl Command {\n             }\n         }\n \n+        // Solaris and glibc 2.29+ can set a new working directory, and maybe\n+        // others will gain this non-POSIX function too. We'll check for this\n+        // weak symbol as soon as it's needed, so we can return early otherwise\n+        // to do a manual chdir before exec.\n+        weak! {\n+            fn posix_spawn_file_actions_addchdir_np(\n+                *mut libc::posix_spawn_file_actions_t,\n+                *const libc::c_char\n+            ) -> libc::c_int\n+        }\n+        let addchdir = match self.get_cwd() {\n+            Some(cwd) => match posix_spawn_file_actions_addchdir_np.get() {\n+                Some(f) => Some((f, cwd)),\n+                None => return Ok(None),\n+            },\n+            None => None,\n+        };\n+\n         let mut p = Process { pid: 0, status: None };\n \n         struct PosixSpawnFileActions(libc::posix_spawn_file_actions_t);\n@@ -345,6 +362,9 @@ impl Command {\n                                                            fd,\n                                                            libc::STDERR_FILENO))?;\n             }\n+            if let Some((f, cwd)) = addchdir {\n+                cvt(f(&mut file_actions.0, cwd.as_ptr()))?;\n+            }\n \n             let mut set: libc::sigset_t = mem::uninitialized();\n             cvt(libc::sigemptyset(&mut set))?;"}]}