{"sha": "17b53b964567b948c08cf04b9571d62146597ae3", "node_id": "C_kwDOAAsO6NoAKDE3YjUzYjk2NDU2N2I5NDhjMDhjZjA0Yjk1NzFkNjIxNDY1OTdhZTM", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-12-07T12:40:06Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-12-12T04:35:00Z"}, "message": "Remap more env constness for queries", "tree": {"sha": "6ceeb131cbcc71d69b79ade32f0a8bb2252c3602", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ceeb131cbcc71d69b79ade32f0a8bb2252c3602"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17b53b964567b948c08cf04b9571d62146597ae3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmG1e/QACgkQbQF6ltjm\nwvkcXRAAlgQtYJcAIaWDe+V19VRYzRPJfp1pZ6gVw23SVyG2SETXQ4dKZk6rGCNF\nVBlWtFpaBuiLWOfQsHjgRf30tito/XzjcN0q1X1xtCYEBQc1zw+65jS0HGQ5AAC1\nJq5SA9phzcj7m7JazsYADPMt+VAhvTbw9BIi92qQCYS0Xgki6aIsrm35WpRt+zbR\nCrqeC2Y1F5xWHMMapu9hoK/q2B630dHKzvwxFPCG/GpusqVtvXXXKRp0JdDHGzBc\nrqx24J1pyZV7ldUlKVpAiyblj/bhJMTEiuMJ/7rJNbw/KJHzlwlwtVhQ2io/AaEa\n5kQa9Ms0nwhPq7pIJoGuipEC4WDtDPEz4Z+fQTdtdNXZ7/kPb2LgjmCqgzmHNFKI\np7GbTm5iQToS/pNMPDk33XmEzBFp2cfp0aFksu/BPF+JY6gIA1dsuMT3HkNyRKaP\nX7wQMAtO//c92QeUgBcYpgPVYuQyx2qzLlTTX3DEk3I1ZW2jQ3ipsrNGvym5/tpD\nRW9FZEx27tqMcApS5dzY8mbBnuDHbaptAo7NJ5g3HIpoefRQ2Hl5Ba21HFs0zuSf\nUfNs3VMjBuBvixPB9CUpFDkL04+XQx5VxQ+D5FkQ0FV9FnI3AliNZyZUrNDfFjDr\n4xFlcmsWG3SycSlq6yNu4fGOt7JnL91rjbhMj7aTeyD/698GI5M=\n=H/td\n-----END PGP SIGNATURE-----", "payload": "tree 6ceeb131cbcc71d69b79ade32f0a8bb2252c3602\nparent 2bea3b3aa3fd943aee09b5ef3ef85d449d986422\nauthor Deadbeef <ent3rm4n@gmail.com> 1638880806 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1639283700 +0800\n\nRemap more env constness for queries\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17b53b964567b948c08cf04b9571d62146597ae3", "html_url": "https://github.com/rust-lang/rust/commit/17b53b964567b948c08cf04b9571d62146597ae3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17b53b964567b948c08cf04b9571d62146597ae3/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bea3b3aa3fd943aee09b5ef3ef85d449d986422", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bea3b3aa3fd943aee09b5ef3ef85d449d986422", "html_url": "https://github.com/rust-lang/rust/commit/2bea3b3aa3fd943aee09b5ef3ef85d449d986422"}], "stats": {"total": 58, "additions": 40, "deletions": 18}, "files": [{"sha": "14cff60475aa2cef6904a8972201d78f97f4cf2a", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17b53b964567b948c08cf04b9571d62146597ae3/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b53b964567b948c08cf04b9571d62146597ae3/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=17b53b964567b948c08cf04b9571d62146597ae3", "patch": "@@ -246,6 +246,14 @@ impl<'tcx, R> Canonical<'tcx, QueryResponse<'tcx, R>> {\n     }\n }\n \n+impl<'tcx, R> Canonical<'tcx, ty::ParamEnvAnd<'tcx, R>> {\n+    #[inline]\n+    pub fn without_const(mut self) -> Self {\n+        self.value = self.value.without_const();\n+        self\n+    }\n+}\n+\n impl<'tcx, V> Canonical<'tcx, V> {\n     /// Allows you to map the `value` of a canonical while keeping the\n     /// same set of bound variables."}, {"sha": "58f584d65d58c82d47332df300122477fddd850f", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/17b53b964567b948c08cf04b9571d62146597ae3/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b53b964567b948c08cf04b9571d62146597ae3/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=17b53b964567b948c08cf04b9571d62146597ae3", "patch": "@@ -1655,6 +1655,7 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"normalizing `{:?}`\", goal }\n+        remap_env_constness\n     }\n \n     // FIXME: Implement `normalize_generic_arg_after_erasing_regions` and\n@@ -1701,6 +1702,7 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"computing implied outlives bounds for `{:?}`\", goal }\n+        remap_env_constness\n     }\n \n     /// Do not call this query directly: invoke `infcx.at().dropck_outlives()` instead.\n@@ -1711,6 +1713,7 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"computing dropck types for `{:?}`\", goal }\n+        remap_env_constness\n     }\n \n     /// Do not call this query directly: invoke `infcx.predicate_may_hold()` or\n@@ -1738,6 +1741,7 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"evaluating `type_op_ascribe_user_type` `{:?}`\", goal }\n+        remap_env_constness\n     }\n \n     /// Do not call this query directly: part of the `Eq` type-op\n@@ -1748,6 +1752,7 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"evaluating `type_op_eq` `{:?}`\", goal }\n+        remap_env_constness\n     }\n \n     /// Do not call this query directly: part of the `Subtype` type-op\n@@ -1758,6 +1763,7 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"evaluating `type_op_subtype` `{:?}`\", goal }\n+        remap_env_constness\n     }\n \n     /// Do not call this query directly: part of the `ProvePredicate` type-op\n@@ -1778,6 +1784,7 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"normalizing `{:?}`\", goal }\n+        remap_env_constness\n     }\n \n     /// Do not call this query directly: part of the `Normalize` type-op\n@@ -1788,6 +1795,7 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"normalizing `{:?}`\", goal }\n+        remap_env_constness\n     }\n \n     /// Do not call this query directly: part of the `Normalize` type-op\n@@ -1798,6 +1806,7 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"normalizing `{:?}`\", goal }\n+        remap_env_constness\n     }\n \n     /// Do not call this query directly: part of the `Normalize` type-op\n@@ -1808,6 +1817,7 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"normalizing `{:?}`\", goal }\n+        remap_env_constness\n     }\n \n     query subst_and_check_impossible_predicates(key: (DefId, SubstsRef<'tcx>)) -> bool {\n@@ -1821,6 +1831,7 @@ rustc_queries! {\n         goal: CanonicalTyGoal<'tcx>\n     ) -> MethodAutoderefStepsResult<'tcx> {\n         desc { \"computing autoderef types for `{:?}`\", goal }\n+        remap_env_constness\n     }\n \n     query supported_target_features(_: CrateNum) -> FxHashMap<String, Option<Symbol>> {"}, {"sha": "8a768558668a0db6d79699224529457ba3b75e4b", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17b53b964567b948c08cf04b9571d62146597ae3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b53b964567b948c08cf04b9571d62146597ae3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=17b53b964567b948c08cf04b9571d62146597ae3", "patch": "@@ -1354,6 +1354,10 @@ impl<'tcx> ParamEnv<'tcx> {\n         self\n     }\n \n+    pub fn remap_constness_with(&mut self, mut constness: ty::BoundConstness) {\n+        *self = self.with_constness(constness.and(self.constness()))\n+    }\n+\n     /// Returns a new parameter environment with the same clauses, but\n     /// which \"reveals\" the true results of projections in all cases\n     /// (even for associated types that are specializable). This is"}, {"sha": "4874ba6f58cac5138dce636f32f856180b9a5f6b", "filename": "compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/17b53b964567b948c08cf04b9571d62146597ae3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b53b964567b948c08cf04b9571d62146597ae3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=17b53b964567b948c08cf04b9571d62146597ae3", "patch": "@@ -67,27 +67,20 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n     ) -> Result<EvaluationResult, OverflowError> {\n         let mut _orig_values = OriginalQueryValues::default();\n \n-        let (param_env, predicate) = match obligation.predicate.kind().skip_binder() {\n-            ty::PredicateKind::Trait(mut pred) => {\n-                let orig_pred_constness = pred.constness;\n-                let env_constness = pred.constness.and(obligation.param_env.constness());\n-\n-                let predicate = if orig_pred_constness != pred.constness {\n-                    self.tcx.mk_predicate(\n-                        obligation.predicate.kind().rebind(ty::PredicateKind::Trait(pred)),\n-                    )\n-                } else {\n-                    obligation.predicate\n-                };\n-\n-                (obligation.param_env.with_constness(env_constness), predicate)\n+        let param_env = match obligation.predicate.kind().skip_binder() {\n+            ty::PredicateKind::Trait(pred) => {\n+                // we ignore the value set to it.\n+                let mut _constness = pred.constness;\n+                obligation\n+                    .param_env\n+                    .with_constness(_constness.and(obligation.param_env.constness()))\n             }\n             // constness has no effect on the given predicate.\n-            _ => (obligation.param_env.without_const(), obligation.predicate),\n+            _ => obligation.param_env.without_const(),\n         };\n \n-        let c_pred =\n-            self.canonicalize_query_keep_static(param_env.and(predicate), &mut _orig_values);\n+        let c_pred = self\n+            .canonicalize_query_keep_static(param_env.and(obligation.predicate), &mut _orig_values);\n         // Run canonical query. If overflow occurs, rerun from scratch but this time\n         // in standard trait query mode so that overflow is handled appropriately\n         // within `SelectionContext`."}, {"sha": "081308ac73e05b30c2bdf9b5bf12aef9e078b0bc", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17b53b964567b948c08cf04b9571d62146597ae3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b53b964567b948c08cf04b9571d62146597ae3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=17b53b964567b948c08cf04b9571d62146597ae3", "patch": "@@ -30,8 +30,14 @@ impl<'tcx> super::QueryTypeOp<'tcx> for ProvePredicate<'tcx> {\n \n     fn perform_query(\n         tcx: TyCtxt<'tcx>,\n-        canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Self>>,\n+        mut canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Self>>,\n     ) -> Fallible<CanonicalizedQueryResponse<'tcx, ()>> {\n+        match canonicalized.value.value.predicate.kind().skip_binder() {\n+            ty::PredicateKind::Trait(pred) => {\n+                canonicalized.value.param_env.remap_constness_with(pred.constness);\n+            }\n+            _ => canonicalized.value.param_env = canonicalized.value.param_env.without_const(),\n+        }\n         tcx.type_op_prove_predicate(canonicalized)\n     }\n }"}]}