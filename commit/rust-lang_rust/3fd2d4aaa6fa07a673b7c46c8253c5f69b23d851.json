{"sha": "3fd2d4aaa6fa07a673b7c46c8253c5f69b23d851", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZDJkNGFhYTZmYTA3YTY3M2I3YzQ2YzgyNTNjNWY2OWIyM2Q4NTE=", "commit": {"author": {"name": "F\u00e9lix Fischer", "email": "felix91gr@gmail.com", "date": "2020-04-23T01:53:51Z"}, "committer": {"name": "F\u00e9lix Fischer", "email": "felix91gr@gmail.com", "date": "2020-04-28T00:13:22Z"}, "message": "Blocked `MutatingUseContext::Projection` for all locals of kind `LocalKind::Temp`. Added a cache of `LocalKind`s to `CanConstProp`", "tree": {"sha": "ceeb74f4428f2a4acd2e7c6d6c0c85c0553a3b1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ceeb74f4428f2a4acd2e7c6d6c0c85c0553a3b1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fd2d4aaa6fa07a673b7c46c8253c5f69b23d851", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fd2d4aaa6fa07a673b7c46c8253c5f69b23d851", "html_url": "https://github.com/rust-lang/rust/commit/3fd2d4aaa6fa07a673b7c46c8253c5f69b23d851", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fd2d4aaa6fa07a673b7c46c8253c5f69b23d851/comments", "author": {"login": "felix91gr", "id": 11747623, "node_id": "MDQ6VXNlcjExNzQ3NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/11747623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felix91gr", "html_url": "https://github.com/felix91gr", "followers_url": "https://api.github.com/users/felix91gr/followers", "following_url": "https://api.github.com/users/felix91gr/following{/other_user}", "gists_url": "https://api.github.com/users/felix91gr/gists{/gist_id}", "starred_url": "https://api.github.com/users/felix91gr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felix91gr/subscriptions", "organizations_url": "https://api.github.com/users/felix91gr/orgs", "repos_url": "https://api.github.com/users/felix91gr/repos", "events_url": "https://api.github.com/users/felix91gr/events{/privacy}", "received_events_url": "https://api.github.com/users/felix91gr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "felix91gr", "id": 11747623, "node_id": "MDQ6VXNlcjExNzQ3NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/11747623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felix91gr", "html_url": "https://github.com/felix91gr", "followers_url": "https://api.github.com/users/felix91gr/followers", "following_url": "https://api.github.com/users/felix91gr/following{/other_user}", "gists_url": "https://api.github.com/users/felix91gr/gists{/gist_id}", "starred_url": "https://api.github.com/users/felix91gr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felix91gr/subscriptions", "organizations_url": "https://api.github.com/users/felix91gr/orgs", "repos_url": "https://api.github.com/users/felix91gr/repos", "events_url": "https://api.github.com/users/felix91gr/events{/privacy}", "received_events_url": "https://api.github.com/users/felix91gr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6316601ec4012b6dc25cacbe0f8d602cce37d08b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6316601ec4012b6dc25cacbe0f8d602cce37d08b", "html_url": "https://github.com/rust-lang/rust/commit/6316601ec4012b6dc25cacbe0f8d602cce37d08b"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "ed02ef566a6523bf47d20f6162525ecff0c7b683", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3fd2d4aaa6fa07a673b7c46c8253c5f69b23d851/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd2d4aaa6fa07a673b7c46c8253c5f69b23d851/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=3fd2d4aaa6fa07a673b7c46c8253c5f69b23d851", "patch": "@@ -766,6 +766,8 @@ struct CanConstProp {\n     can_const_prop: IndexVec<Local, ConstPropMode>,\n     // false at the beginning, once set, there are not allowed to be any more assignments\n     found_assignment: BitSet<Local>,\n+    // Cache of locals' information\n+    local_kinds: IndexVec<Local, LocalKind>,\n }\n \n impl CanConstProp {\n@@ -774,16 +776,19 @@ impl CanConstProp {\n         let mut cpv = CanConstProp {\n             can_const_prop: IndexVec::from_elem(ConstPropMode::FullConstProp, &body.local_decls),\n             found_assignment: BitSet::new_empty(body.local_decls.len()),\n+            local_kinds: IndexVec::from_fn_n(\n+                |local| body.local_kind(local),\n+                body.local_decls.len(),\n+            ),\n         };\n         for (local, val) in cpv.can_const_prop.iter_enumerated_mut() {\n             // cannot use args at all\n             // cannot use locals because if x < y { y - x } else { x - y } would\n             //        lint for x != y\n             // FIXME(oli-obk): lint variables until they are used in a condition\n             // FIXME(oli-obk): lint if return value is constant\n-            let local_kind = body.local_kind(local);\n-\n-            if local_kind == LocalKind::Arg || local_kind == LocalKind::Var {\n+            if cpv.local_kinds[local] == LocalKind::Arg || cpv.local_kinds[local] == LocalKind::Var\n+            {\n                 *val = ConstPropMode::OnlyPropagateInto;\n                 trace!(\"local {:?} can't be const propagated because it's not a temporary\", local);\n             }\n@@ -811,8 +816,12 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n             | NonMutatingUse(NonMutatingUseContext::Move)\n             | NonMutatingUse(NonMutatingUseContext::Inspect)\n             | NonMutatingUse(NonMutatingUseContext::Projection)\n-            | MutatingUse(MutatingUseContext::Projection)\n             | NonUse(_) => {}\n+            MutatingUse(MutatingUseContext::Projection) => {\n+                if self.local_kinds[local] != LocalKind::Temp {\n+                    self.can_const_prop[local] = ConstPropMode::NoPropagation;\n+                }\n+            }\n             _ => {\n                 trace!(\"local {:?} can't be propagaged because it's used: {:?}\", local, context);\n                 self.can_const_prop[local] = ConstPropMode::NoPropagation;"}]}