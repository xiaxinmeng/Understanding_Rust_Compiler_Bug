{"sha": "b606d160c81e68383cd6988b1d51321093c66f24", "node_id": "C_kwDOAAsO6NoAKGI2MDZkMTYwYzgxZTY4MzgzY2Q2OTg4YjFkNTEzMjEwOTNjNjZmMjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-31T00:04:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-31T00:04:46Z"}, "message": "Auto merge of #90891 - nbdd0121:format, r=Mark-Simulacrum\n\nCreate `core::fmt::ArgumentV1` with generics instead of fn pointer\n\nSplit from (and prerequisite of) #90488, as this seems to have perf implication.\n\n`@rustbot` label: +T-libs", "tree": {"sha": "94327b57bc38d9b7d650b35f393a9301347c2302", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94327b57bc38d9b7d650b35f393a9301347c2302"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b606d160c81e68383cd6988b1d51321093c66f24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b606d160c81e68383cd6988b1d51321093c66f24", "html_url": "https://github.com/rust-lang/rust/commit/b606d160c81e68383cd6988b1d51321093c66f24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b606d160c81e68383cd6988b1d51321093c66f24/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf66aeda0a8410f2730584e24cc96b3a53449ea0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf66aeda0a8410f2730584e24cc96b3a53449ea0", "html_url": "https://github.com/rust-lang/rust/commit/bf66aeda0a8410f2730584e24cc96b3a53449ea0"}, {"sha": "bee482b44ca318babda21f285be6021650cfb3ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/bee482b44ca318babda21f285be6021650cfb3ac", "html_url": "https://github.com/rust-lang/rust/commit/bee482b44ca318babda21f285be6021650cfb3ac"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "2a4bcd773c684a508bcaff5c70c3405cf3ab9e47", "filename": "clippy_lints/src/index_refutable_slice.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b606d160c81e68383cd6988b1d51321093c66f24/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b606d160c81e68383cd6988b1d51321093c66f24/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findex_refutable_slice.rs?ref=b606d160c81e68383cd6988b1d51321093c66f24", "patch": "@@ -4,7 +4,7 @@ use clippy_utils::higher::IfLet;\n use clippy_utils::ty::is_copy;\n use clippy_utils::{is_expn_of, is_lint_allowed, meets_msrv, msrvs, path_to_local};\n use if_chain::if_chain;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, Visitor};\n@@ -92,9 +92,9 @@ impl<'tcx> LateLintPass<'tcx> for IndexRefutableSlice {\n     extract_msrv_attr!(LateContext);\n }\n \n-fn find_slice_values(cx: &LateContext<'_>, pat: &hir::Pat<'_>) -> FxHashMap<hir::HirId, SliceLintInformation> {\n+fn find_slice_values(cx: &LateContext<'_>, pat: &hir::Pat<'_>) -> FxIndexMap<hir::HirId, SliceLintInformation> {\n     let mut removed_pat: FxHashSet<hir::HirId> = FxHashSet::default();\n-    let mut slices: FxHashMap<hir::HirId, SliceLintInformation> = FxHashMap::default();\n+    let mut slices: FxIndexMap<hir::HirId, SliceLintInformation> = FxIndexMap::default();\n     pat.walk_always(|pat| {\n         if let hir::PatKind::Binding(binding, value_hir_id, ident, sub_pat) = pat.kind {\n             // We'll just ignore mut and ref mut for simplicity sake right now\n@@ -208,10 +208,10 @@ impl SliceLintInformation {\n \n fn filter_lintable_slices<'a, 'tcx>(\n     cx: &'a LateContext<'tcx>,\n-    slice_lint_info: FxHashMap<hir::HirId, SliceLintInformation>,\n+    slice_lint_info: FxIndexMap<hir::HirId, SliceLintInformation>,\n     max_suggested_slice: u64,\n     scope: &'tcx hir::Expr<'tcx>,\n-) -> FxHashMap<hir::HirId, SliceLintInformation> {\n+) -> FxIndexMap<hir::HirId, SliceLintInformation> {\n     let mut visitor = SliceIndexLintingVisitor {\n         cx,\n         slice_lint_info,\n@@ -225,7 +225,7 @@ fn filter_lintable_slices<'a, 'tcx>(\n \n struct SliceIndexLintingVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n-    slice_lint_info: FxHashMap<hir::HirId, SliceLintInformation>,\n+    slice_lint_info: FxIndexMap<hir::HirId, SliceLintInformation>,\n     max_suggested_slice: u64,\n }\n "}, {"sha": "a75f6b86a9bae4de295769ec1a72c5bfcd4db38c", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b606d160c81e68383cd6988b1d51321093c66f24/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b606d160c81e68383cd6988b1d51321093c66f24/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=b606d160c81e68383cd6988b1d51321093c66f24", "patch": "@@ -339,15 +339,13 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n         expr_visitor_no_bodies(|e| {\n             // if we're still inside of the macro definition...\n             if e.span.ctxt() == expr.span.ctxt() {\n-                // ArgumnetV1::new(<value>, <format_trait>::fmt)\n+                // ArgumnetV1::new_<format_trait>(<value>)\n                 if_chain! {\n-                    if let ExprKind::Call(callee, [val, fmt_path]) = e.kind;\n+                    if let ExprKind::Call(callee, [val]) = e.kind;\n                     if let ExprKind::Path(QPath::TypeRelative(ty, seg)) = callee.kind;\n-                    if seg.ident.name == sym::new;\n                     if let hir::TyKind::Path(QPath::Resolved(_, path)) = ty.kind;\n                     if path.segments.last().unwrap().ident.name == sym::ArgumentV1;\n-                    if let ExprKind::Path(QPath::Resolved(_, path)) = fmt_path.kind;\n-                    if let [.., fmt_trait, _fmt] = path.segments;\n+                    if seg.ident.name.as_str().starts_with(\"new_\");\n                     then {\n                         let val_idx = if_chain! {\n                             if val.span.ctxt() == expr.span.ctxt();\n@@ -361,7 +359,19 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n                                 formatters.len()\n                             }\n                         };\n-                        formatters.push((val_idx, fmt_trait.ident.name));\n+                        let fmt_trait = match seg.ident.name.as_str() {\n+                            \"new_display\" => \"Display\",\n+                            \"new_debug\" => \"Debug\",\n+                            \"new_lower_exp\" => \"LowerExp\",\n+                            \"new_upper_exp\" => \"UpperExp\",\n+                            \"new_octal\" => \"Octal\",\n+                            \"new_pointer\" => \"Pointer\",\n+                            \"new_binary\" => \"Binary\",\n+                            \"new_lower_hex\" => \"LowerHex\",\n+                            \"new_upper_hex\" => \"UpperHex\",\n+                            _ => unreachable!(),\n+                        };\n+                        formatters.push((val_idx, Symbol::intern(fmt_trait)));\n                     }\n                 }\n                 if let ExprKind::Struct(QPath::Resolved(_, path), ..) = e.kind {"}]}