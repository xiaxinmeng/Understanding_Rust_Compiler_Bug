{"sha": "08dc69599efb4961319c0118b789d3abb264b7fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZGM2OTU5OWVmYjQ5NjEzMTljMDExOGI3ODlkM2FiYjI2NGI3ZmE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-06T08:50:55Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-06T08:50:55Z"}, "message": "Use a constructor function for Static lifetimes", "tree": {"sha": "f4951c835dd6f4840ae02ba5c06d5da44aedae94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4951c835dd6f4840ae02ba5c06d5da44aedae94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08dc69599efb4961319c0118b789d3abb264b7fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08dc69599efb4961319c0118b789d3abb264b7fa", "html_url": "https://github.com/rust-lang/rust/commit/08dc69599efb4961319c0118b789d3abb264b7fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08dc69599efb4961319c0118b789d3abb264b7fa/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b98c681cb7ede9fd6a8683b1edd83a5b18502178", "url": "https://api.github.com/repos/rust-lang/rust/commits/b98c681cb7ede9fd6a8683b1edd83a5b18502178", "html_url": "https://github.com/rust-lang/rust/commit/b98c681cb7ede9fd6a8683b1edd83a5b18502178"}], "stats": {"total": 86, "additions": 37, "deletions": 49}, "files": [{"sha": "796487d02e160340fffa3d36a88ca2cfb96b98dc", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/08dc69599efb4961319c0118b789d3abb264b7fa/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08dc69599efb4961319c0118b789d3abb264b7fa/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=08dc69599efb4961319c0118b789d3abb264b7fa", "patch": "@@ -19,11 +19,11 @@ use crate::{\n     lower::lower_to_chalk_mutability,\n     method_resolution, op,\n     primitive::{self, UintTy},\n-    to_chalk_trait_id,\n+    static_lifetime, to_chalk_trait_id,\n     traits::{chalk::from_chalk, FnTrait},\n     utils::{generics, variant_data, Generics},\n     AdtId, Binders, CallableDefId, FnPointer, FnSig, FnSubst, InEnvironment, Interner,\n-    LifetimeData, ProjectionTyExt, Rawness, Scalar, Substitution, TraitRef, Ty, TyBuilder, TyKind,\n+    ProjectionTyExt, Rawness, Scalar, Substitution, TraitRef, Ty, TyBuilder, TyKind, TypeWalk,\n };\n \n use super::{\n@@ -527,9 +527,7 @@ impl<'a> InferenceContext<'a> {\n                 let inner_ty = self.infer_expr_inner(*expr, &expectation);\n                 match rawness {\n                     Rawness::RawPtr => TyKind::Raw(mutability, inner_ty),\n-                    Rawness::Ref => {\n-                        TyKind::Ref(mutability, LifetimeData::Static.intern(&Interner), inner_ty)\n-                    }\n+                    Rawness::Ref => TyKind::Ref(mutability, static_lifetime(), inner_ty),\n                 }\n                 .intern(&Interner)\n             }\n@@ -732,17 +730,14 @@ impl<'a> InferenceContext<'a> {\n             }\n             Expr::Literal(lit) => match lit {\n                 Literal::Bool(..) => TyKind::Scalar(Scalar::Bool).intern(&Interner),\n-                Literal::String(..) => TyKind::Ref(\n-                    Mutability::Not,\n-                    LifetimeData::Static.intern(&Interner),\n-                    TyKind::Str.intern(&Interner),\n-                )\n-                .intern(&Interner),\n+                Literal::String(..) => {\n+                    TyKind::Ref(Mutability::Not, static_lifetime(), TyKind::Str.intern(&Interner))\n+                        .intern(&Interner)\n+                }\n                 Literal::ByteString(..) => {\n                     let byte_type = TyKind::Scalar(Scalar::Uint(UintTy::U8)).intern(&Interner);\n                     let array_type = TyKind::Array(byte_type).intern(&Interner);\n-                    TyKind::Ref(Mutability::Not, LifetimeData::Static.intern(&Interner), array_type)\n-                        .intern(&Interner)\n+                    TyKind::Ref(Mutability::Not, static_lifetime(), array_type).intern(&Interner)\n                 }\n                 Literal::Char(..) => TyKind::Scalar(Scalar::Char).intern(&Interner),\n                 Literal::Int(_v, ty) => match ty {"}, {"sha": "2848a393ce3580e1ab57037f1e95554f22dc92bd", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/08dc69599efb4961319c0118b789d3abb264b7fa/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08dc69599efb4961319c0118b789d3abb264b7fa/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=08dc69599efb4961319c0118b789d3abb264b7fa", "patch": "@@ -13,7 +13,7 @@ use hir_expand::name::Name;\n \n use super::{BindingMode, Expectation, InferenceContext};\n use crate::{\n-    lower::lower_to_chalk_mutability, utils::variant_data, Interner, LifetimeData, Substitution,\n+    lower::lower_to_chalk_mutability, static_lifetime, utils::variant_data, Interner, Substitution,\n     Ty, TyBuilder, TyKind,\n };\n \n@@ -171,8 +171,7 @@ impl<'a> InferenceContext<'a> {\n                     _ => self.result.standard_types.unknown.clone(),\n                 };\n                 let subty = self.infer_pat(*pat, &expectation, default_bm);\n-                TyKind::Ref(mutability, LifetimeData::Static.intern(&Interner), subty)\n-                    .intern(&Interner)\n+                TyKind::Ref(mutability, static_lifetime(), subty).intern(&Interner)\n             }\n             Pat::TupleStruct { path: p, args: subpats, ellipsis } => self.infer_tuple_struct_pat(\n                 p.as_ref(),\n@@ -204,12 +203,10 @@ impl<'a> InferenceContext<'a> {\n                 let inner_ty = self.insert_type_vars_shallow(inner_ty);\n \n                 let bound_ty = match mode {\n-                    BindingMode::Ref(mutability) => TyKind::Ref(\n-                        mutability,\n-                        LifetimeData::Static.intern(&Interner),\n-                        inner_ty.clone(),\n-                    )\n-                    .intern(&Interner),\n+                    BindingMode::Ref(mutability) => {\n+                        TyKind::Ref(mutability, static_lifetime(), inner_ty.clone())\n+                            .intern(&Interner)\n+                    }\n                     BindingMode::Move => inner_ty.clone(),\n                 };\n                 let bound_ty = self.resolve_ty_as_possible(bound_ty);"}, {"sha": "bccc7344999aca265bab5eb3c40623ecf6de0b8c", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08dc69599efb4961319c0118b789d3abb264b7fa/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08dc69599efb4961319c0118b789d3abb264b7fa/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=08dc69599efb4961319c0118b789d3abb264b7fa", "patch": "@@ -495,3 +495,7 @@ pub fn to_chalk_trait_id(id: TraitId) -> ChalkTraitId {\n pub fn from_chalk_trait_id(id: ChalkTraitId) -> TraitId {\n     salsa::InternKey::from_intern_id(id.0)\n }\n+\n+pub fn static_lifetime() -> Lifetime {\n+    LifetimeData::Static.intern(&Interner)\n+}"}, {"sha": "df6619af3cb8f34781ec5a9fd1af4872cde2f667", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/08dc69599efb4961319c0118b789d3abb264b7fa/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08dc69599efb4961319c0118b789d3abb264b7fa/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=08dc69599efb4961319c0118b789d3abb264b7fa", "patch": "@@ -27,14 +27,14 @@ use stdx::impl_from;\n \n use crate::{\n     db::HirDatabase,\n-    to_assoc_type_id, to_chalk_trait_id, to_placeholder_idx,\n+    static_lifetime, to_assoc_type_id, to_chalk_trait_id, to_placeholder_idx,\n     traits::chalk::{Interner, ToChalk},\n     utils::{\n         all_super_trait_refs, associated_type_by_name_including_super_traits, generics,\n         variant_data, Generics,\n     },\n     AliasEq, AliasTy, Binders, BoundVar, CallableSig, DebruijnIndex, DynTy, FnPointer, FnSig,\n-    FnSubst, ImplTraitId, LifetimeData, OpaqueTy, PolyFnSig, ProjectionTy, QuantifiedWhereClause,\n+    FnSubst, ImplTraitId, OpaqueTy, PolyFnSig, ProjectionTy, QuantifiedWhereClause,\n     QuantifiedWhereClauses, ReturnTypeImplTrait, ReturnTypeImplTraits, Substitution,\n     TraitEnvironment, TraitRef, Ty, TyBuilder, TyKind, TypeWalk, WhereClause,\n };\n@@ -174,7 +174,7 @@ impl<'a> TyLoweringContext<'a> {\n             }\n             TypeRef::Reference(inner, _, mutability) => {\n                 let inner_ty = self.lower_ty(inner);\n-                let lifetime = LifetimeData::Static.intern(&Interner);\n+                let lifetime = static_lifetime();\n                 TyKind::Ref(lower_to_chalk_mutability(*mutability), lifetime, inner_ty)\n                     .intern(&Interner)\n             }\n@@ -200,8 +200,7 @@ impl<'a> TyLoweringContext<'a> {\n                     )\n                 });\n                 let bounds = crate::make_only_type_binders(1, bounds);\n-                TyKind::Dyn(DynTy { bounds, lifetime: LifetimeData::Static.intern(&Interner) })\n-                    .intern(&Interner)\n+                TyKind::Dyn(DynTy { bounds, lifetime: static_lifetime() }).intern(&Interner)\n             }\n             TypeRef::ImplTrait(bounds) => {\n                 match self.impl_trait_mode {\n@@ -393,7 +392,7 @@ impl<'a> TyLoweringContext<'a> {\n                                 ))),\n                             ),\n                         ),\n-                        lifetime: LifetimeData::Static.intern(&Interner),\n+                        lifetime: static_lifetime(),\n                     };\n                     TyKind::Dyn(dyn_ty).intern(&Interner)\n                 };"}, {"sha": "436dea22b7d5e25bc0fcb194f32ba8d1fc236ec5", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/08dc69599efb4961319c0118b789d3abb264b7fa/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08dc69599efb4961319c0118b789d3abb264b7fa/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=08dc69599efb4961319c0118b789d3abb264b7fa", "patch": "@@ -19,10 +19,11 @@ use crate::{\n     db::HirDatabase,\n     from_foreign_def_id,\n     primitive::{self, FloatTy, IntTy, UintTy},\n+    static_lifetime,\n     utils::all_super_traits,\n     AdtId, Canonical, CanonicalVarKinds, DebruijnIndex, FnPointer, FnSig, ForeignDefId,\n-    InEnvironment, Interner, LifetimeData, Scalar, Substitution, TraitEnvironment, Ty, TyBuilder,\n-    TyKind, TypeWalk,\n+    InEnvironment, Interner, Scalar, Substitution, TraitEnvironment, Ty, TyBuilder, TyKind,\n+    TypeWalk,\n };\n \n /// This is used as a key for indexing impls.\n@@ -453,12 +454,8 @@ fn iterate_method_candidates_with_autoref(\n     }\n     let refed = Canonical {\n         binders: deref_chain[0].binders.clone(),\n-        value: TyKind::Ref(\n-            Mutability::Not,\n-            LifetimeData::Static.intern(&Interner),\n-            deref_chain[0].value.clone(),\n-        )\n-        .intern(&Interner),\n+        value: TyKind::Ref(Mutability::Not, static_lifetime(), deref_chain[0].value.clone())\n+            .intern(&Interner),\n     };\n     if iterate_method_candidates_by_receiver(\n         &refed,\n@@ -475,12 +472,8 @@ fn iterate_method_candidates_with_autoref(\n     }\n     let ref_muted = Canonical {\n         binders: deref_chain[0].binders.clone(),\n-        value: TyKind::Ref(\n-            Mutability::Mut,\n-            LifetimeData::Static.intern(&Interner),\n-            deref_chain[0].value.clone(),\n-        )\n-        .intern(&Interner),\n+        value: TyKind::Ref(Mutability::Mut, static_lifetime(), deref_chain[0].value.clone())\n+            .intern(&Interner),\n     };\n     if iterate_method_candidates_by_receiver(\n         &ref_muted,"}, {"sha": "9267e32b5a8ba1c2867537ccbcaaba139dfe1c95", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/08dc69599efb4961319c0118b789d3abb264b7fa/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08dc69599efb4961319c0118b789d3abb264b7fa/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=08dc69599efb4961319c0118b789d3abb264b7fa", "patch": "@@ -3,16 +3,16 @@\n //! Chalk (in both directions); plus some helper functions for more specialized\n //! conversions.\n \n-use chalk_ir::{cast::Cast, interner::HasInterner, LifetimeData};\n+use chalk_ir::{cast::Cast, interner::HasInterner};\n use chalk_solve::rust_ir;\n \n use base_db::salsa::InternKey;\n use hir_def::{GenericDefId, TypeAliasId};\n \n use crate::{\n-    chalk_ext::ProjectionTyExt, db::HirDatabase, primitive::UintTy, AliasTy, CallableDefId,\n-    Canonical, DomainGoal, FnPointer, GenericArg, InEnvironment, Lifetime, OpaqueTy, ProjectionTy,\n-    QuantifiedWhereClause, Scalar, Substitution, TraitRef, Ty, TypeWalk, WhereClause,\n+    chalk_ext::ProjectionTyExt, db::HirDatabase, primitive::UintTy, static_lifetime, AliasTy,\n+    CallableDefId, Canonical, DomainGoal, FnPointer, GenericArg, InEnvironment, Lifetime, OpaqueTy,\n+    ProjectionTy, QuantifiedWhereClause, Scalar, Substitution, TraitRef, Ty, TypeWalk, WhereClause,\n };\n \n use super::interner::*;\n@@ -100,7 +100,7 @@ impl ToChalk for Ty {\n                 );\n                 let bounded_ty = chalk_ir::DynTy {\n                     bounds: chalk_ir::Binders::new(binders, where_clauses),\n-                    lifetime: LifetimeData::Static.intern(&Interner),\n+                    lifetime: static_lifetime(),\n                 };\n                 chalk_ir::TyKind::Dyn(bounded_ty).intern(&Interner)\n             }\n@@ -149,7 +149,7 @@ impl ToChalk for Ty {\n                         where_clauses.bounds.binders.clone(),\n                         crate::QuantifiedWhereClauses::from_iter(&Interner, bounds),\n                     ),\n-                    lifetime: LifetimeData::Static.intern(&Interner),\n+                    lifetime: static_lifetime(),\n                 })\n             }\n \n@@ -197,7 +197,7 @@ fn ref_to_chalk(\n     ty: Ty,\n ) -> chalk_ir::Ty<Interner> {\n     let arg = ty.to_chalk(db);\n-    let lifetime = LifetimeData::Static.intern(&Interner);\n+    let lifetime = static_lifetime();\n     chalk_ir::TyKind::Ref(mutability, lifetime, arg).intern(&Interner)\n }\n "}]}