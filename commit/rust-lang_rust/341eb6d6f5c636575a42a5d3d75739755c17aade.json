{"sha": "341eb6d6f5c636575a42a5d3d75739755c17aade", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MWViNmQ2ZjVjNjM2NTc1YTQyYTVkM2Q3NTczOTc1NWMxN2FhZGU=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-04T22:37:46Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-14T07:48:12Z"}, "message": "Give a better error when rustdoc tests fail\n\n- Run the default rustdoc against the current rustdoc\n- Diff output recursively\n- Colorize diff output", "tree": {"sha": "f67bc55373c83a7e61e43ac25b0ab9a17b998476", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f67bc55373c83a7e61e43ac25b0ab9a17b998476"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/341eb6d6f5c636575a42a5d3d75739755c17aade", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/341eb6d6f5c636575a42a5d3d75739755c17aade", "html_url": "https://github.com/rust-lang/rust/commit/341eb6d6f5c636575a42a5d3d75739755c17aade", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/341eb6d6f5c636575a42a5d3d75739755c17aade/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1f7ca788d28f8df9ccd161137c3429be1ed9d0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1f7ca788d28f8df9ccd161137c3429be1ed9d0e", "html_url": "https://github.com/rust-lang/rust/commit/a1f7ca788d28f8df9ccd161137c3429be1ed9d0e"}], "stats": {"total": 121, "additions": 113, "deletions": 8}, "files": [{"sha": "8d23227fdb8b78dab6a6ac3556ac581e81f127de", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/341eb6d6f5c636575a42a5d3d75739755c17aade/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341eb6d6f5c636575a42a5d3d75739755c17aade/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=341eb6d6f5c636575a42a5d3d75739755c17aade", "patch": "@@ -153,11 +153,14 @@ fn parse_line(file_name: &str, line: &str, output: &str, proc_res: &ProcRes) ->\n                 if serde_json::from_str::<FutureIncompatReport>(line).is_ok() {\n                     vec![]\n                 } else {\n-                    proc_res.fatal(Some(&format!(\n-                        \"failed to decode compiler output as json: \\\n+                    proc_res.fatal(\n+                        Some(&format!(\n+                            \"failed to decode compiler output as json: \\\n                          `{}`\\nline: {}\\noutput: {}\",\n-                        error, line, output\n-                    )));\n+                            error, line, output\n+                        )),\n+                        || (),\n+                    );\n                 }\n             }\n         }"}, {"sha": "819f7257eee6a1dc2e199850f24072eda51d9225", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 68, "deletions": 4, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/341eb6d6f5c636575a42a5d3d75739755c17aade/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341eb6d6f5c636575a42a5d3d75739755c17aade/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=341eb6d6f5c636575a42a5d3d75739755c17aade", "patch": "@@ -287,6 +287,7 @@ pub fn compute_stamp_hash(config: &Config) -> String {\n     format!(\"{:x}\", hash.finish())\n }\n \n+#[derive(Copy, Clone)]\n struct TestCx<'test> {\n     config: &'test Config,\n     props: &'test TestProps,\n@@ -2208,7 +2209,12 @@ impl<'test> TestCx<'test> {\n \n     fn fatal_proc_rec(&self, err: &str, proc_res: &ProcRes) -> ! {\n         self.error(err);\n-        proc_res.fatal(None);\n+        proc_res.fatal(None, || ());\n+    }\n+\n+    fn fatal_proc_rec_with_ctx(&self, err: &str, proc_res: &ProcRes, ctx: impl FnOnce(Self)) -> ! {\n+        self.error(err);\n+        proc_res.fatal(None, || ctx(*self));\n     }\n \n     // codegen tests (using FileCheck)\n@@ -2325,15 +2331,72 @@ impl<'test> TestCx<'test> {\n             let res = self.cmd2procres(\n                 Command::new(&self.config.docck_python)\n                     .arg(root.join(\"src/etc/htmldocck.py\"))\n-                    .arg(out_dir)\n+                    .arg(&out_dir)\n                     .arg(&self.testpaths.file),\n             );\n             if !res.status.success() {\n-                self.fatal_proc_rec(\"htmldocck failed!\", &res);\n+                self.fatal_proc_rec_with_ctx(\"htmldocck failed!\", &res, |mut this| {\n+                    this.compare_to_default_rustdoc(&out_dir)\n+                });\n             }\n         }\n     }\n \n+    fn compare_to_default_rustdoc(&mut self, out_dir: &Path) {\n+        println!(\"info: generating a diff against nightly rustdoc\");\n+\n+        let suffix =\n+            self.safe_revision().map_or(\"nightly\".into(), |path| path.to_owned() + \"-nightly\");\n+        let compare_dir = output_base_dir(self.config, self.testpaths, Some(&suffix));\n+        let _ = fs::remove_dir_all(&compare_dir);\n+        create_dir_all(&compare_dir).unwrap();\n+\n+        // We need to create a new struct for the lifetimes on `config` to work.\n+        let new_rustdoc = TestCx {\n+            config: &Config {\n+                // FIXME: use beta or a user-specified rustdoc instead of hardcoding\n+                // the default toolchain\n+                rustdoc_path: Some(\"rustdoc\".into()),\n+                ..self.config.clone()\n+            },\n+            ..*self\n+        };\n+        let proc_res = new_rustdoc.document(&compare_dir);\n+        if !proc_res.status.success() {\n+            proc_res.fatal(Some(\"failed to run nightly rustdoc\"), || ());\n+        }\n+\n+        // NOTE: this is fine since compiletest never runs out-of-tree\n+        let tidy = concat!(env!(\"CARGO_MANIFEST_DIR\"), \"/tidy-rustdoc.sh\");\n+        // FIXME: this overwrites `out_dir` in place, maybe we should make a copy?\n+        let status = Command::new(tidy)\n+            .arg(out_dir)\n+            .spawn()\n+            .expect(\"tidy-rustdoc not found\")\n+            .wait()\n+            .unwrap();\n+        if !status.success() {\n+            self.fatal(\"failed to run tidy - is installed?\");\n+        }\n+        let status = Command::new(tidy).arg(&compare_dir).spawn().unwrap().wait().unwrap();\n+        if !status.success() {\n+            self.fatal(\"failed to run tidy\");\n+        }\n+\n+        let diff_pid = Command::new(\"diff\")\n+            .args(&[\"-u\", \"-r\"])\n+            .args(&[out_dir, &compare_dir])\n+            .stdout(Stdio::piped())\n+            .spawn()\n+            .expect(\"failed to run `diff`\");\n+        Command::new(\"delta\")\n+            .stdin(diff_pid.stdout.unwrap())\n+            .spawn()\n+            .expect(\"delta not found\")\n+            .wait()\n+            .unwrap();\n+    }\n+\n     fn get_lines<P: AsRef<Path>>(\n         &self,\n         path: &P,\n@@ -3590,7 +3653,7 @@ pub struct ProcRes {\n }\n \n impl ProcRes {\n-    pub fn fatal(&self, err: Option<&str>) -> ! {\n+    pub fn fatal(&self, err: Option<&str>, ctx: impl FnOnce()) -> ! {\n         if let Some(e) = err {\n             println!(\"\\nerror: {}\", e);\n         }\n@@ -3612,6 +3675,7 @@ impl ProcRes {\n             json::extract_rendered(&self.stdout),\n             json::extract_rendered(&self.stderr),\n         );\n+        ctx();\n         // Use resume_unwind instead of panic!() to prevent a panic message + backtrace from\n         // compiletest, which is unnecessary noise.\n         std::panic::resume_unwind(Box::new(()));"}, {"sha": "ce2c99d94d0c5279d5a91fba6b66f74bd0ed789a", "filename": "src/tools/compiletest/tidy-rustdoc.sh", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/341eb6d6f5c636575a42a5d3d75739755c17aade/src%2Ftools%2Fcompiletest%2Ftidy-rustdoc.sh", "raw_url": "https://github.com/rust-lang/rust/raw/341eb6d6f5c636575a42a5d3d75739755c17aade/src%2Ftools%2Fcompiletest%2Ftidy-rustdoc.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Ftidy-rustdoc.sh?ref=341eb6d6f5c636575a42a5d3d75739755c17aade", "patch": "@@ -0,0 +1,38 @@\n+#!/usr/bin/env bash\n+\n+set -euo pipefail\n+\n+indir=\"${1:?Missing argument 1: input directory}\"\n+\n+tidy () {\n+  {\n+    # new-inline-tags is workaround for:\n+    #   https://github.com/rust-lang/stdarch/issues/945\n+    #   https://github.com/rust-lang/mdBook/issues/1372\n+    command tidy \\\n+        --indent yes \\\n+        --indent-spaces 2 \\\n+        --wrap 0 \\\n+        --show-warnings no \\\n+        --markup yes \\\n+        --quiet yes \\\n+        --new-inline-tags 'c t' \\\n+        \"$@\" \\\n+        >/dev/null \\\n+    || {\n+      # tidy exits with code 1 if there were any warnings :facepalm:\n+      status=$?\n+      if [ $status != 0 ] && [ $status != 1 ]\n+      then\n+        echo \"While tidying $1\" >&2\n+        exit 1\n+      fi\n+    }\n+  } | sed -E 's/#[0-9]+(-[0-9]+)?/#line/g'\n+}\n+\n+find \"$indir\" -type f -name '*.html' -print0 \\\n+| while IFS= read -d '' -r file\n+do\n+  tidy -modify \"$file\"\n+done"}]}