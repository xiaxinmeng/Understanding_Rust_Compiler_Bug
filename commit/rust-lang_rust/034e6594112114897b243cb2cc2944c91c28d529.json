{"sha": "034e6594112114897b243cb2cc2944c91c28d529", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNGU2NTk0MTEyMTE0ODk3YjI0M2NiMmNjMjk0NGM5MWMyOGQ1Mjk=", "commit": {"author": {"name": "saml", "email": "skynare@gmail.com", "date": "2016-08-04T15:22:02Z"}, "committer": {"name": "saml", "email": "skynare@gmail.com", "date": "2016-08-04T15:22:02Z"}, "message": "Changing label to \"this is an...\"", "tree": {"sha": "f4cce9533217c8dd3c2a4300ba2ec821e2e3d1d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4cce9533217c8dd3c2a4300ba2ec821e2e3d1d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/034e6594112114897b243cb2cc2944c91c28d529", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/034e6594112114897b243cb2cc2944c91c28d529", "html_url": "https://github.com/rust-lang/rust/commit/034e6594112114897b243cb2cc2944c91c28d529", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/034e6594112114897b243cb2cc2944c91c28d529/comments", "author": {"login": "saml", "id": 8481, "node_id": "MDQ6VXNlcjg0ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/8481?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saml", "html_url": "https://github.com/saml", "followers_url": "https://api.github.com/users/saml/followers", "following_url": "https://api.github.com/users/saml/following{/other_user}", "gists_url": "https://api.github.com/users/saml/gists{/gist_id}", "starred_url": "https://api.github.com/users/saml/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saml/subscriptions", "organizations_url": "https://api.github.com/users/saml/orgs", "repos_url": "https://api.github.com/users/saml/repos", "events_url": "https://api.github.com/users/saml/events{/privacy}", "received_events_url": "https://api.github.com/users/saml/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saml", "id": 8481, "node_id": "MDQ6VXNlcjg0ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/8481?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saml", "html_url": "https://github.com/saml", "followers_url": "https://api.github.com/users/saml/followers", "following_url": "https://api.github.com/users/saml/following{/other_user}", "gists_url": "https://api.github.com/users/saml/gists{/gist_id}", "starred_url": "https://api.github.com/users/saml/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saml/subscriptions", "organizations_url": "https://api.github.com/users/saml/orgs", "repos_url": "https://api.github.com/users/saml/repos", "events_url": "https://api.github.com/users/saml/events{/privacy}", "received_events_url": "https://api.github.com/users/saml/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeda69fcca2c554bd60072476292b37fccb01a61", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeda69fcca2c554bd60072476292b37fccb01a61", "html_url": "https://github.com/rust-lang/rust/commit/eeda69fcca2c554bd60072476292b37fccb01a61"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "d148d2a0885ed3375f59da34e09b648967462fc4", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/034e6594112114897b243cb2cc2944c91c28d529/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034e6594112114897b243cb2cc2944c91c28d529/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=034e6594112114897b243cb2cc2944c91c28d529", "patch": "@@ -335,7 +335,7 @@ fn check_arms(cx: &MatchCheckCtxt,\n                         hir::MatchSource::Normal => {\n                             let mut err = struct_span_err!(cx.tcx.sess, pat.span, E0001,\n                                                            \"unreachable pattern\");\n-                            err.span_label(pat.span, &format!(\"this is unreachable pattern\"));\n+                            err.span_label(pat.span, &format!(\"this is an unreachable pattern\"));\n                             // if we had a catchall pattern, hint at that\n                             for row in &seen.0 {\n                                 if pat_is_catchall(&cx.tcx.def_map.borrow(), row[0].0) {"}, {"sha": "4997a6fee195b4c736816bd9c6d3bc150ac8c425", "filename": "src/test/compile-fail/issue-31221.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/034e6594112114897b243cb2cc2944c91c28d529/src%2Ftest%2Fcompile-fail%2Fissue-31221.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034e6594112114897b243cb2cc2944c91c28d529/src%2Ftest%2Fcompile-fail%2Fissue-31221.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-31221.rs?ref=034e6594112114897b243cb2cc2944c91c28d529", "patch": "@@ -22,15 +22,15 @@ fn main() {\n         //~^ NOTE this pattern matches any value\n         Var2 => (),\n         //~^ ERROR unreachable pattern\n-        //~^^ NOTE this is unreachable pattern\n+        //~^^ NOTE this is an unreachable pattern\n     };\n     match &s {\n         &Var1 => (),\n         &Var3 => (),\n         //~^ NOTE this pattern matches any value\n         &Var2 => (),\n         //~^ ERROR unreachable pattern\n-        //~^^ NOTE this is unreachable pattern\n+        //~^^ NOTE this is an unreachable pattern\n     };\n     let t = (Var1, Var1);\n     match t {\n@@ -39,7 +39,7 @@ fn main() {\n         //~^ NOTE this pattern matches any value\n         anything => ()\n         //~^ ERROR unreachable pattern\n-        //~^^ NOTE this is unreachable pattern\n+        //~^^ NOTE this is an unreachable pattern\n     };\n     // `_` need not emit a note, it is pretty obvious already.\n     let t = (Var1, Var1);\n@@ -48,6 +48,6 @@ fn main() {\n         _ => (),\n         anything => ()\n         //~^ ERROR unreachable pattern\n-        //~^^ NOTE this is unreachable pattern\n+        //~^^ NOTE this is an unreachable pattern\n     };\n }"}]}