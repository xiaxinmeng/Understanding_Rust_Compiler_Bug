{"sha": "fd1585a071718ef9c9fb44f88336608dd7e624a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMTU4NWEwNzE3MThlZjljOWZiNDRmODgzMzY2MDhkZDdlNjI0YTU=", "commit": {"author": {"name": "gfreezy", "email": "gfreezy@gmail.com", "date": "2019-03-24T17:05:11Z"}, "committer": {"name": "gfreezy", "email": "gfreezy@gmail.com", "date": "2019-03-25T02:18:20Z"}, "message": "inline immutable local varialbe", "tree": {"sha": "9f36cae02e334c57fe34b7f4ec3ef1084cd9cb87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f36cae02e334c57fe34b7f4ec3ef1084cd9cb87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd1585a071718ef9c9fb44f88336608dd7e624a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd1585a071718ef9c9fb44f88336608dd7e624a5", "html_url": "https://github.com/rust-lang/rust/commit/fd1585a071718ef9c9fb44f88336608dd7e624a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd1585a071718ef9c9fb44f88336608dd7e624a5/comments", "author": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94cf23bfc4738990e6c74424450bc40f0beb2b62", "url": "https://api.github.com/repos/rust-lang/rust/commits/94cf23bfc4738990e6c74424450bc40f0beb2b62", "html_url": "https://github.com/rust-lang/rust/commit/94cf23bfc4738990e6c74424450bc40f0beb2b62"}], "stats": {"total": 300, "additions": 300, "deletions": 0}, "files": [{"sha": "ce0aafb27f125dafc0e9fff0a3c2ae32fab3786d", "filename": "crates/ra_assists/src/inline_local_variable.rs", "status": "added", "additions": 298, "deletions": 0, "changes": 298, "blob_url": "https://github.com/rust-lang/rust/blob/fd1585a071718ef9c9fb44f88336608dd7e624a5/crates%2Fra_assists%2Fsrc%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1585a071718ef9c9fb44f88336608dd7e624a5/crates%2Fra_assists%2Fsrc%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Finline_local_variable.rs?ref=fd1585a071718ef9c9fb44f88336608dd7e624a5", "patch": "@@ -0,0 +1,298 @@\n+use hir::db::HirDatabase;\n+use hir::source_binder::function_from_child_node;\n+use ra_syntax::{ast::{self, AstNode}, TextRange};\n+use ra_syntax::ast::{PatKind, ExprKind};\n+\n+use crate::{Assist, AssistCtx, AssistId};\n+use crate::assist_ctx::AssistBuilder;\n+\n+pub(crate) fn inline_local_varialbe(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let let_stmt = ctx.node_at_offset::<ast::LetStmt>()?;\n+    let bind_pat = match let_stmt.pat()?.kind() {\n+        PatKind::BindPat(pat) => pat,\n+        _ => return None,\n+    };\n+    if bind_pat.is_mutable() {\n+        return None;\n+    }\n+    let initializer = let_stmt.initializer()?;\n+    let wrap_in_parens = match initializer.kind() {\n+        ExprKind::LambdaExpr(_) => true,\n+        ExprKind::IfExpr(_) => true,\n+        ExprKind::LoopExpr(_) => true,\n+        ExprKind::ForExpr(_) => true,\n+        ExprKind::WhileExpr(_) => true,\n+        ExprKind::ContinueExpr(_) => true,\n+        ExprKind::BreakExpr(_) => true,\n+        ExprKind::Label(_) => true,\n+        ExprKind::ReturnExpr(_) => true,\n+        ExprKind::MatchExpr(_) => true,\n+        ExprKind::StructLit(_) => true,\n+        ExprKind::CastExpr(_) => true,\n+        ExprKind::PrefixExpr(_) => true,\n+        ExprKind::RangeExpr(_) => true,\n+        ExprKind::BinExpr(_) => true,\n+        ExprKind::CallExpr(_) => false,\n+        ExprKind::IndexExpr(_) => false,\n+        ExprKind::MethodCallExpr(_) => false,\n+        ExprKind::FieldExpr(_) => false,\n+        ExprKind::TryExpr(_) => false,\n+        ExprKind::RefExpr(_) => false,\n+        ExprKind::Literal(_) => false,\n+        ExprKind::TupleExpr(_) => false,\n+        ExprKind::ArrayExpr(_) => false,\n+        ExprKind::ParenExpr(_) => false,\n+        ExprKind::PathExpr(_) => false,\n+        ExprKind::BlockExpr(_) => false,\n+    };\n+\n+    let delete_range = if let Some(whitespace) =\n+        let_stmt.syntax().next_sibling().and_then(ast::Whitespace::cast)\n+    {\n+        TextRange::from_to(let_stmt.syntax().range().start(), whitespace.syntax().range().end())\n+    } else {\n+        let_stmt.syntax().range()\n+    };\n+\n+    let init_str = if wrap_in_parens {\n+        format!(\"({})\", initializer.syntax().text().to_string())\n+    } else {\n+        initializer.syntax().text().to_string()\n+    };\n+    let function = function_from_child_node(ctx.db, ctx.frange.file_id, bind_pat.syntax())?;\n+    let scope = function.scopes(ctx.db);\n+    let refs = scope.find_all_refs(bind_pat);\n+\n+    ctx.add_action(\n+        AssistId(\"inline_local_variable\"),\n+        \"inline local variable\",\n+        move |edit: &mut AssistBuilder| {\n+            edit.delete(delete_range);\n+            for desc in refs {\n+                edit.replace(desc.range, init_str.clone())\n+            }\n+            edit.set_cursor(delete_range.start())\n+        },\n+    );\n+\n+    ctx.build()\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::helpers::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn test_inline_let_bind_literal_expr() {\n+        check_assist(\n+            inline_local_varialbe,\n+            \"\n+fn bar(a: usize) {}\n+fn foo() {\n+    let a<|> = 1;\n+    a + 1;\n+    if a > 10 {\n+    }\n+\n+    while a > 10 {\n+\n+    }\n+    let b = a * 10;\n+    bar(a);\n+}\",\n+            \"\n+fn bar(a: usize) {}\n+fn foo() {\n+    <|>1 + 1;\n+    if 1 > 10 {\n+    }\n+\n+    while 1 > 10 {\n+\n+    }\n+    let b = 1 * 10;\n+    bar(1);\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_inline_let_bind_bin_expr() {\n+        check_assist(\n+            inline_local_varialbe,\n+            \"\n+fn bar(a: usize) {}\n+fn foo() {\n+    let a<|> = 1 + 1;\n+    a + 1;\n+    if a > 10 {\n+    }\n+\n+    while a > 10 {\n+\n+    }\n+    let b = a * 10;\n+    bar(a);\n+}\",\n+            \"\n+fn bar(a: usize) {}\n+fn foo() {\n+    <|>(1 + 1) + 1;\n+    if (1 + 1) > 10 {\n+    }\n+\n+    while (1 + 1) > 10 {\n+\n+    }\n+    let b = (1 + 1) * 10;\n+    bar((1 + 1));\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_inline_let_bind_function_call_expr() {\n+        check_assist(\n+            inline_local_varialbe,\n+            \"\n+fn bar(a: usize) {}\n+fn foo() {\n+    let a<|> = bar(1);\n+    a + 1;\n+    if a > 10 {\n+    }\n+\n+    while a > 10 {\n+\n+    }\n+    let b = a * 10;\n+    bar(a);\n+}\",\n+            \"\n+fn bar(a: usize) {}\n+fn foo() {\n+    <|>bar(1) + 1;\n+    if bar(1) > 10 {\n+    }\n+\n+    while bar(1) > 10 {\n+\n+    }\n+    let b = bar(1) * 10;\n+    bar(bar(1));\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_inline_let_bind_cast_expr() {\n+        check_assist(\n+            inline_local_varialbe,\n+            \"\n+fn bar(a: usize): usize { a }\n+fn foo() {\n+    let a<|> = bar(1) as u64;\n+    a + 1;\n+    if a > 10 {\n+    }\n+\n+    while a > 10 {\n+\n+    }\n+    let b = a * 10;\n+    bar(a);\n+}\",\n+            \"\n+fn bar(a: usize): usize { a }\n+fn foo() {\n+    <|>(bar(1) as u64) + 1;\n+    if (bar(1) as u64) > 10 {\n+    }\n+\n+    while (bar(1) as u64) > 10 {\n+\n+    }\n+    let b = (bar(1) as u64) * 10;\n+    bar((bar(1) as u64));\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_inline_let_bind_block_expr() {\n+        check_assist(\n+            inline_local_varialbe,\n+            \"\n+fn foo() {\n+    let a<|> = { 10 + 1 };\n+    a + 1;\n+    if a > 10 {\n+    }\n+\n+    while a > 10 {\n+\n+    }\n+    let b = a * 10;\n+    bar(a);\n+}\",\n+            \"\n+fn foo() {\n+    <|>{ 10 + 1 } + 1;\n+    if { 10 + 1 } > 10 {\n+    }\n+\n+    while { 10 + 1 } > 10 {\n+\n+    }\n+    let b = { 10 + 1 } * 10;\n+    bar({ 10 + 1 });\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_inline_let_bind_paren_expr() {\n+        check_assist(\n+            inline_local_varialbe,\n+            \"\n+fn foo() {\n+    let a<|> = ( 10 + 1 );\n+    a + 1;\n+    if a > 10 {\n+    }\n+\n+    while a > 10 {\n+\n+    }\n+    let b = a * 10;\n+    bar(a);\n+}\",\n+            \"\n+fn foo() {\n+    <|>( 10 + 1 ) + 1;\n+    if ( 10 + 1 ) > 10 {\n+    }\n+\n+    while ( 10 + 1 ) > 10 {\n+\n+    }\n+    let b = ( 10 + 1 ) * 10;\n+    bar(( 10 + 1 ));\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_not_inline_mut_variable() {\n+        check_assist_not_applicable(\n+            inline_local_varialbe,\n+            \"\n+fn foo() {\n+    let mut a<|> = 1 + 1;\n+    a + 1;\n+}\",\n+        );\n+    }\n+}"}, {"sha": "378470ac82ecbae75d67b3ca7c78271f92988e50", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd1585a071718ef9c9fb44f88336608dd7e624a5/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1585a071718ef9c9fb44f88336608dd7e624a5/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=fd1585a071718ef9c9fb44f88336608dd7e624a5", "patch": "@@ -92,6 +92,7 @@ mod change_visibility;\n mod fill_match_arms;\n mod fill_struct_fields;\n mod introduce_variable;\n+mod inline_local_variable;\n mod replace_if_let_with_match;\n mod split_import;\n mod remove_dbg;\n@@ -113,6 +114,7 @@ fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assis\n         auto_import::auto_import,\n         add_missing_impl_members::add_missing_impl_members,\n         add_missing_impl_members::add_missing_default_members,\n+        inline_local_variable::inline_local_varialbe,\n     ]\n }\n "}]}