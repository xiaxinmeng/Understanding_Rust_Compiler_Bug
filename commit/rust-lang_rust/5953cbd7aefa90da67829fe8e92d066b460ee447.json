{"sha": "5953cbd7aefa90da67829fe8e92d066b460ee447", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NTNjYmQ3YWVmYTkwZGE2NzgyOWZlOGU5MmQwNjZiNDYwZWU0NDc=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-07-01T06:34:45Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-07-01T06:34:45Z"}, "message": "Make SemanticsScope non-generic", "tree": {"sha": "baadd060ee470b9bcdb0738c4739f07797939b1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baadd060ee470b9bcdb0738c4739f07797939b1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5953cbd7aefa90da67829fe8e92d066b460ee447", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5953cbd7aefa90da67829fe8e92d066b460ee447", "html_url": "https://github.com/rust-lang/rust/commit/5953cbd7aefa90da67829fe8e92d066b460ee447", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5953cbd7aefa90da67829fe8e92d066b460ee447/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1a2d016450c96581c9cc70cc464f8aab2e5c0f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1a2d016450c96581c9cc70cc464f8aab2e5c0f3", "html_url": "https://github.com/rust-lang/rust/commit/b1a2d016450c96581c9cc70cc464f8aab2e5c0f3"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "01adb834ccc18749006fcb1746959a183472ac24", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5953cbd7aefa90da67829fe8e92d066b460ee447/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5953cbd7aefa90da67829fe8e92d066b460ee447/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=5953cbd7aefa90da67829fe8e92d066b460ee447", "patch": "@@ -2,7 +2,6 @@\n use rustc_hash::FxHashMap;\n \n use hir::{HirDisplay, PathResolution, SemanticsScope};\n-use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo::SyntaxRewriter,\n     ast::{self, AstNode},\n@@ -32,14 +31,14 @@ impl<'a> AstTransform<'a> for NullTransformer {\n }\n \n pub struct SubstituteTypeParams<'a> {\n-    source_scope: &'a SemanticsScope<'a, RootDatabase>,\n+    source_scope: &'a SemanticsScope<'a>,\n     substs: FxHashMap<hir::TypeParam, ast::TypeRef>,\n     previous: Box<dyn AstTransform<'a> + 'a>,\n }\n \n impl<'a> SubstituteTypeParams<'a> {\n     pub fn for_trait_impl(\n-        source_scope: &'a SemanticsScope<'a, RootDatabase>,\n+        source_scope: &'a SemanticsScope<'a>,\n         // FIXME: there's implicit invariant that `trait_` and  `source_scope` match...\n         trait_: hir::Trait,\n         impl_def: ast::ImplDef,\n@@ -126,16 +125,13 @@ impl<'a> AstTransform<'a> for SubstituteTypeParams<'a> {\n }\n \n pub struct QualifyPaths<'a> {\n-    target_scope: &'a SemanticsScope<'a, RootDatabase>,\n-    source_scope: &'a SemanticsScope<'a, RootDatabase>,\n+    target_scope: &'a SemanticsScope<'a>,\n+    source_scope: &'a SemanticsScope<'a>,\n     previous: Box<dyn AstTransform<'a> + 'a>,\n }\n \n impl<'a> QualifyPaths<'a> {\n-    pub fn new(\n-        target_scope: &'a SemanticsScope<'a, RootDatabase>,\n-        source_scope: &'a SemanticsScope<'a, RootDatabase>,\n-    ) -> Self {\n+    pub fn new(target_scope: &'a SemanticsScope<'a>, source_scope: &'a SemanticsScope<'a>) -> Self {\n         Self { target_scope, source_scope, previous: Box::new(NullTransformer) }\n     }\n \n@@ -156,7 +152,7 @@ impl<'a> QualifyPaths<'a> {\n         let resolution = self.source_scope.resolve_hir_path(&hir_path?)?;\n         match resolution {\n             PathResolution::Def(def) => {\n-                let found_path = from.find_use_path(self.source_scope.db, def)?;\n+                let found_path = from.find_use_path(self.source_scope.db.upcast(), def)?;\n                 let mut path = path_to_ast(found_path);\n \n                 let type_args = p"}, {"sha": "810c49d6ffaf5b7c0f159832a4e46d5afa03de90", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5953cbd7aefa90da67829fe8e92d066b460ee447/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5953cbd7aefa90da67829fe8e92d066b460ee447/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=5953cbd7aefa90da67829fe8e92d066b460ee447", "patch": "@@ -297,19 +297,19 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.with_ctx(|ctx| ctx.file_to_def(file)).map(Module::from)\n     }\n \n-    pub fn scope(&self, node: &SyntaxNode) -> SemanticsScope<'db, DB> {\n+    pub fn scope(&self, node: &SyntaxNode) -> SemanticsScope<'db> {\n         let node = self.find_file(node.clone());\n         let resolver = self.analyze2(node.as_ref(), None).resolver;\n         SemanticsScope { db: self.db, resolver }\n     }\n \n-    pub fn scope_at_offset(&self, node: &SyntaxNode, offset: TextSize) -> SemanticsScope<'db, DB> {\n+    pub fn scope_at_offset(&self, node: &SyntaxNode, offset: TextSize) -> SemanticsScope<'db> {\n         let node = self.find_file(node.clone());\n         let resolver = self.analyze2(node.as_ref(), Some(offset)).resolver;\n         SemanticsScope { db: self.db, resolver }\n     }\n \n-    pub fn scope_for_def(&self, def: Trait) -> SemanticsScope<'db, DB> {\n+    pub fn scope_for_def(&self, def: Trait) -> SemanticsScope<'db> {\n         let resolver = def.id.resolver(self.db);\n         SemanticsScope { db: self.db, resolver }\n     }\n@@ -419,12 +419,12 @@ fn find_root(node: &SyntaxNode) -> SyntaxNode {\n     node.ancestors().last().unwrap()\n }\n \n-pub struct SemanticsScope<'a, DB> {\n-    pub db: &'a DB,\n+pub struct SemanticsScope<'a> {\n+    pub db: &'a dyn HirDatabase,\n     resolver: Resolver,\n }\n \n-impl<'a, DB: HirDatabase> SemanticsScope<'a, DB> {\n+impl<'a> SemanticsScope<'a> {\n     pub fn module(&self) -> Option<Module> {\n         Some(Module { id: self.resolver.module()? })\n     }\n@@ -433,13 +433,13 @@ impl<'a, DB: HirDatabase> SemanticsScope<'a, DB> {\n     // FIXME: rename to visible_traits to not repeat scope?\n     pub fn traits_in_scope(&self) -> FxHashSet<TraitId> {\n         let resolver = &self.resolver;\n-        resolver.traits_in_scope(self.db)\n+        resolver.traits_in_scope(self.db.upcast())\n     }\n \n     pub fn process_all_names(&self, f: &mut dyn FnMut(Name, ScopeDef)) {\n         let resolver = &self.resolver;\n \n-        resolver.process_all_names(self.db, &mut |name, def| {\n+        resolver.process_all_names(self.db.upcast(), &mut |name, def| {\n             let def = match def {\n                 resolver::ScopeDef::PerNs(it) => {\n                     let items = ScopeDef::all_items(it);"}, {"sha": "ef22ea54dec691613543b3d75b9c57b080ad06a4", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5953cbd7aefa90da67829fe8e92d066b460ee447/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5953cbd7aefa90da67829fe8e92d066b460ee447/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=5953cbd7aefa90da67829fe8e92d066b460ee447", "patch": "@@ -213,7 +213,7 @@ impl<'a> CompletionContext<'a> {\n         }\n     }\n \n-    pub(crate) fn scope(&self) -> SemanticsScope<'_, RootDatabase> {\n+    pub(crate) fn scope(&self) -> SemanticsScope<'_> {\n         self.sema.scope_at_offset(&self.token.parent(), self.offset)\n     }\n "}]}