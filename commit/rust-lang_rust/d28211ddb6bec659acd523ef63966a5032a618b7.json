{"sha": "d28211ddb6bec659acd523ef63966a5032a618b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyODIxMWRkYjZiZWM2NTlhY2Q1MjNlZjYzOTY2YTUwMzJhNjE4Yjc=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-10-01T14:40:59Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-10-01T14:40:59Z"}, "message": "Fix rustup fallout", "tree": {"sha": "4f0c9e3d650d0095282e11c3b032b41cc2883394", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f0c9e3d650d0095282e11c3b032b41cc2883394"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d28211ddb6bec659acd523ef63966a5032a618b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAl916nsACgkQLO/Nsn7Q\nvnl1rhAAkpESqYxWEUiUv0UlBTnZYtV5yqFxLrcx6PXnRPAuHy1v5QamvZbDXScr\nx9aN7Ow41qrNbksG6DjKvRlKX0BS9Po6rHhdNSciDbTuVPvnCNoLqsK6VKnTdVrJ\n/hhBMzazwSc7jF+XRIh0UKeHD8zvjbnR2mXDEkJtCVqnYjeu5IgHi43TDIYNm5Bk\n1ccFIIjcf9aYmCRV3jqsevX0Ms0i/nPiIvzB1jBbJjHRk1fRCVQuUw6D9Soq51JR\nK6xnI9RFFm6kA1GtqZBdJSfZR+JSJbtLFfNV039Vt8uHnegociU2gdUUt4a+lrzb\nv+cH8yhdoHCNL3vDS568/hyRKdMe34qRtRACLbAxI/uD2FcZ4tu+y4CPk3TZHhm/\nt2UBcwj2csMrsJkKm1Mpb+enUXiD0PJR/zP1f9FXfG3E0/by6RFbXATDBaybXkzj\n6ntlc7yYIxG05wfFQa0LHQ8RrI0wfyT4Z18zh/Uu0dPbxZDE735DvUvwtQi7TstD\nvaSBfg1ssKvfNGNB0hE8nP6iiZPywYPCEGeVAWfyZvu/JlfTI+rm9rLK/XPaYC5M\nlfKTLTnDRySMQ2oALstEllWFdc53ZNX+zh11nvWViN53jrbInNUlnzLZYMEYtUJW\nMHhuX8vPt+DlzLpo+mYh3ADIGzpgDc8kfeG2uXD8Q6j94PzqQhY=\n=/ZsA\n-----END PGP SIGNATURE-----", "payload": "tree 4f0c9e3d650d0095282e11c3b032b41cc2883394\nparent 730ca457f580247667ed0cd5965bc08752ebc0b3\nauthor flip1995 <hello@philkrones.com> 1601563259 +0200\ncommitter flip1995 <hello@philkrones.com> 1601563259 +0200\n\nFix rustup fallout\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d28211ddb6bec659acd523ef63966a5032a618b7", "html_url": "https://github.com/rust-lang/rust/commit/d28211ddb6bec659acd523ef63966a5032a618b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d28211ddb6bec659acd523ef63966a5032a618b7/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "730ca457f580247667ed0cd5965bc08752ebc0b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/730ca457f580247667ed0cd5965bc08752ebc0b3", "html_url": "https://github.com/rust-lang/rust/commit/730ca457f580247667ed0cd5965bc08752ebc0b3"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "294f0449281ab7d1304faee9b0a88c38d7d41fef", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d28211ddb6bec659acd523ef63966a5032a618b7/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28211ddb6bec659acd523ef63966a5032a618b7/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=d28211ddb6bec659acd523ef63966a5032a618b7", "patch": "@@ -826,7 +826,7 @@ struct FixedOffsetVar<'hir> {\n }\n \n fn is_slice_like<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'_>) -> bool {\n-    let is_slice = match ty.kind() {\n+    let is_slice = match ty.kind {\n         ty::Ref(_, subty, _) => is_slice_like(cx, subty),\n         ty::Slice(..) | ty::Array(..) => true,\n         _ => false,\n@@ -1403,7 +1403,7 @@ fn is_end_eq_array_len<'tcx>(\n     if_chain! {\n         if let ExprKind::Lit(ref lit) = end.kind;\n         if let ast::LitKind::Int(end_int, _) = lit.node;\n-        if let ty::Array(_, arr_len_const) = indexed_ty.kind();\n+        if let ty::Array(_, arr_len_const) = indexed_ty.kind;\n         if let Some(arr_len) = arr_len_const.try_eval_usize(cx.tcx, cx.param_env);\n         then {\n             return match limits {\n@@ -1640,7 +1640,7 @@ fn check_for_loop_over_map_kv<'tcx>(\n     if let PatKind::Tuple(ref pat, _) = pat.kind {\n         if pat.len() == 2 {\n             let arg_span = arg.span;\n-            let (new_pat_span, kind, ty, mutbl) = match *cx.typeck_results().expr_ty(arg).kind() {\n+            let (new_pat_span, kind, ty, mutbl) = match cx.typeck_results().expr_ty(arg).kind {\n                 ty::Ref(_, ty, mutbl) => match (&pat[0].kind, &pat[1].kind) {\n                     (key, _) if pat_is_wild(key, body) => (pat[1].span, \"value\", ty, mutbl),\n                     (_, value) if pat_is_wild(value, body) => (pat[0].span, \"key\", ty, Mutability::Not),\n@@ -1968,7 +1968,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                 for expr in args {\n                     let ty = self.cx.typeck_results().expr_ty_adjusted(expr);\n                     self.prefer_mutable = false;\n-                    if let ty::Ref(_, _, mutbl) = *ty.kind() {\n+                    if let ty::Ref(_, _, mutbl) = ty.kind {\n                         if mutbl == Mutability::Mut {\n                             self.prefer_mutable = true;\n                         }\n@@ -1980,7 +1980,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                 let def_id = self.cx.typeck_results().type_dependent_def_id(expr.hir_id).unwrap();\n                 for (ty, expr) in self.cx.tcx.fn_sig(def_id).inputs().skip_binder().iter().zip(args) {\n                     self.prefer_mutable = false;\n-                    if let ty::Ref(_, _, mutbl) = *ty.kind() {\n+                    if let ty::Ref(_, _, mutbl) = ty.kind {\n                         if mutbl == Mutability::Mut {\n                             self.prefer_mutable = true;\n                         }\n@@ -2078,7 +2078,7 @@ fn is_ref_iterable_type(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n \n fn is_iterable_array<'tcx>(ty: Ty<'tcx>, cx: &LateContext<'tcx>) -> bool {\n     // IntoIterator is currently only implemented for array sizes <= 32 in rustc\n-    match ty.kind() {\n+    match ty.kind {\n         ty::Array(_, n) => n\n             .try_eval_usize(cx.tcx, cx.param_env)\n             .map_or(false, |val| (0..=32).contains(&val)),"}]}