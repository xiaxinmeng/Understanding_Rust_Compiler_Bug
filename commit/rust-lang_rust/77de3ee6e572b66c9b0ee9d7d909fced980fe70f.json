{"sha": "77de3ee6e572b66c9b0ee9d7d909fced980fe70f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZGUzZWU2ZTU3MmI2NmM5YjBlZTlkN2Q5MDlmY2VkOTgwZmU3MGY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-26T16:57:58Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-26T17:24:44Z"}, "message": "syntax: Remove parsing of old slice syntax\n\nThis syntax has been deprecated for quite some time, and there were only a few\nremaining uses of it in the codebase anyway.", "tree": {"sha": "e8164f1dbbdf822a575994b8590e05cb5fb78096", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8164f1dbbdf822a575994b8590e05cb5fb78096"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77de3ee6e572b66c9b0ee9d7d909fced980fe70f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77de3ee6e572b66c9b0ee9d7d909fced980fe70f", "html_url": "https://github.com/rust-lang/rust/commit/77de3ee6e572b66c9b0ee9d7d909fced980fe70f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77de3ee6e572b66c9b0ee9d7d909fced980fe70f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a923278c6278c63468d74772c58dbf788e88f58c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a923278c6278c63468d74772c58dbf788e88f58c", "html_url": "https://github.com/rust-lang/rust/commit/a923278c6278c63468d74772c58dbf788e88f58c"}], "stats": {"total": 107, "additions": 24, "deletions": 83}, "files": [{"sha": "a9884b80e42045d6890b8d9885e89b2d8365392a", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77de3ee6e572b66c9b0ee9d7d909fced980fe70f/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77de3ee6e572b66c9b0ee9d7d909fced980fe70f/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=77de3ee6e572b66c9b0ee9d7d909fced980fe70f", "patch": "@@ -553,7 +553,7 @@ impl<T> VecDeque<T> {\n     ///     *num = *num - 2;\n     /// }\n     /// let b: &[_] = &[&mut 3, &mut 1, &mut 2];\n-    /// assert_eq!(&buf.iter_mut().collect::<Vec<&mut i32>>()[], b);\n+    /// assert_eq!(&buf.iter_mut().collect::<Vec<&mut i32>>()[..], b);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter_mut(&mut self) -> IterMut<T> {"}, {"sha": "9c42fbf5c16e11acf8851b0e0d1f62c3e53c2d52", "filename": "src/libstd/old_io/buffered.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/77de3ee6e572b66c9b0ee9d7d909fced980fe70f/src%2Flibstd%2Fold_io%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77de3ee6e572b66c9b0ee9d7d909fced980fe70f/src%2Flibstd%2Fold_io%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fbuffered.rs?ref=77de3ee6e572b66c9b0ee9d7d909fced980fe70f", "patch": "@@ -510,45 +510,45 @@ mod test {\n \n         writer.write_all(&[0, 1]).unwrap();\n         let b: &[_] = &[];\n-        assert_eq!(&writer.get_ref()[], b);\n+        assert_eq!(&writer.get_ref()[..], b);\n \n         writer.write_all(&[2]).unwrap();\n         let b: &[_] = &[0, 1];\n-        assert_eq!(&writer.get_ref()[], b);\n+        assert_eq!(&writer.get_ref()[..], b);\n \n         writer.write_all(&[3]).unwrap();\n-        assert_eq!(&writer.get_ref()[], b);\n+        assert_eq!(&writer.get_ref()[..], b);\n \n         writer.flush().unwrap();\n         let a: &[_] = &[0, 1, 2, 3];\n-        assert_eq!(a, &writer.get_ref()[]);\n+        assert_eq!(a, &writer.get_ref()[..]);\n \n         writer.write_all(&[4]).unwrap();\n         writer.write_all(&[5]).unwrap();\n-        assert_eq!(a, &writer.get_ref()[]);\n+        assert_eq!(a, &writer.get_ref()[..]);\n \n         writer.write_all(&[6]).unwrap();\n         let a: &[_] = &[0, 1, 2, 3, 4, 5];\n-        assert_eq!(a, &writer.get_ref()[]);\n+        assert_eq!(a, &writer.get_ref()[..]);\n \n         writer.write_all(&[7, 8]).unwrap();\n         let a: &[_] = &[0, 1, 2, 3, 4, 5, 6];\n-        assert_eq!(a, &writer.get_ref()[]);\n+        assert_eq!(a, &writer.get_ref()[..]);\n \n         writer.write_all(&[9, 10, 11]).unwrap();\n         let a: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n-        assert_eq!(a, &writer.get_ref()[]);\n+        assert_eq!(a, &writer.get_ref()[..]);\n \n         writer.flush().unwrap();\n-        assert_eq!(a, &writer.get_ref()[]);\n+        assert_eq!(a, &writer.get_ref()[..]);\n     }\n \n     #[test]\n     fn test_buffered_writer_inner_flushes() {\n         let mut w = BufferedWriter::with_capacity(3, Vec::new());\n         w.write_all(&[0, 1]).unwrap();\n         let a: &[_] = &[];\n-        assert_eq!(a, &w.get_ref()[]);\n+        assert_eq!(a, &w.get_ref()[..]);\n         let w = w.into_inner();\n         let a: &[_] = &[0, 1];\n         assert_eq!(a, &w[..]);\n@@ -593,21 +593,21 @@ mod test {\n         let mut writer = LineBufferedWriter::new(Vec::new());\n         writer.write_all(&[0]).unwrap();\n         let b: &[_] = &[];\n-        assert_eq!(&writer.get_ref()[], b);\n+        assert_eq!(&writer.get_ref()[..], b);\n         writer.write_all(&[1]).unwrap();\n-        assert_eq!(&writer.get_ref()[], b);\n+        assert_eq!(&writer.get_ref()[..], b);\n         writer.flush().unwrap();\n         let b: &[_] = &[0, 1];\n-        assert_eq!(&writer.get_ref()[], b);\n+        assert_eq!(&writer.get_ref()[..], b);\n         writer.write_all(&[0, b'\\n', 1, b'\\n', 2]).unwrap();\n         let b: &[_] = &[0, 1, 0, b'\\n', 1, b'\\n'];\n-        assert_eq!(&writer.get_ref()[], b);\n+        assert_eq!(&writer.get_ref()[..], b);\n         writer.flush().unwrap();\n         let b: &[_] = &[0, 1, 0, b'\\n', 1, b'\\n', 2];\n-        assert_eq!(&writer.get_ref()[], b);\n+        assert_eq!(&writer.get_ref()[..], b);\n         writer.write_all(&[3, b'\\n']).unwrap();\n         let b: &[_] = &[0, 1, 0, b'\\n', 1, b'\\n', 2, 3, b'\\n'];\n-        assert_eq!(&writer.get_ref()[], b);\n+        assert_eq!(&writer.get_ref()[..], b);\n     }\n \n     #[test]"}, {"sha": "bb9b586bb3f3d1914320b1d452ba0678905cfc77", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77de3ee6e572b66c9b0ee9d7d909fced980fe70f/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77de3ee6e572b66c9b0ee9d7d909fced980fe70f/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=77de3ee6e572b66c9b0ee9d7d909fced980fe70f", "patch": "@@ -23,7 +23,6 @@ use ptr::P;\n #[derive(Copy, PartialEq, Eq, Hash)]\n pub enum ObsoleteSyntax {\n     ClosureKind,\n-    EmptyIndex,\n     ExternCrateString,\n }\n \n@@ -52,11 +51,6 @@ impl<'a> ParserObsoleteMethods for parser::Parser<'a> {\n                 \"rely on inference instead\",\n                 true,\n             ),\n-            ObsoleteSyntax::EmptyIndex => (\n-                \"[]\",\n-                \"write `[..]` instead\",\n-                false, // warning for now\n-            ),\n             ObsoleteSyntax::ExternCrateString => (\n                 \"\\\"crate-name\\\"\",\n                 \"use an identifier not in quotes instead\","}, {"sha": "d016576238cca85563dddf8b5396eaa4e443b2f5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 38, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/77de3ee6e572b66c9b0ee9d7d909fced980fe70f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77de3ee6e572b66c9b0ee9d7d909fced980fe70f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=77de3ee6e572b66c9b0ee9d7d909fced980fe70f", "patch": "@@ -2312,46 +2312,13 @@ impl<'a> Parser<'a> {\n               // expr[...]\n               // Could be either an index expression or a slicing expression.\n               token::OpenDelim(token::Bracket) => {\n-                let bracket_pos = self.span.lo;\n                 self.bump();\n \n-                if self.eat(&token::CloseDelim(token::Bracket)) {\n-                    // No expression, expand to a RangeFull\n-                    // FIXME(#20516) It would be better to use a lang item or\n-                    // something for RangeFull.\n-                    hi = self.last_span.hi;\n-\n-                    let idents = vec![token::str_to_ident(\"std\"),\n-                                      token::str_to_ident(\"ops\"),\n-                                      token::str_to_ident(\"RangeFull\")];\n-                    let segments = idents.into_iter().map(|ident| {\n-                        ast::PathSegment {\n-                            identifier: ident,\n-                            parameters: ast::PathParameters::none(),\n-                        }\n-                    }).collect();\n-                    let span = mk_sp(lo, hi);\n-                    let path = ast::Path {\n-                        span: span,\n-                        global: true,\n-                        segments: segments,\n-                    };\n-\n-                    let range = ExprStruct(path, vec![], None);\n-                    let ix = self.mk_expr(bracket_pos, hi, range);\n-                    let index = self.mk_index(e, ix);\n-                    e = self.mk_expr(lo, hi, index);\n-\n-                    let obsolete_span = mk_sp(bracket_pos, hi);\n-                    self.obsolete(obsolete_span, ObsoleteSyntax::EmptyIndex);\n-                } else {\n-                    let ix = self.parse_expr();\n-                    hi = self.span.hi;\n-                    self.commit_expr_expecting(&*ix, token::CloseDelim(token::Bracket));\n-                    let index = self.mk_index(e, ix);\n-                    e = self.mk_expr(lo, hi, index)\n-                }\n-\n+                let ix = self.parse_expr();\n+                hi = self.span.hi;\n+                self.commit_expr_expecting(&*ix, token::CloseDelim(token::Bracket));\n+                let index = self.mk_index(e, ix);\n+                e = self.mk_expr(lo, hi, index)\n               }\n               _ => return e\n             }"}, {"sha": "42051e33e2e0d673ab74160f51c3094be65f81dc", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77de3ee6e572b66c9b0ee9d7d909fced980fe70f/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77de3ee6e572b66c9b0ee9d7d909fced980fe70f/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=77de3ee6e572b66c9b0ee9d7d909fced980fe70f", "patch": "@@ -47,7 +47,7 @@ impl Noise2DContext {\n         let mut rng = StdRng::new().unwrap();\n \n         let mut rgradients = [Vec2 { x: 0.0, y: 0.0 }; 256];\n-        for x in &mut rgradients[] {\n+        for x in &mut rgradients[..] {\n             *x = random_gradient(&mut rng);\n         }\n "}, {"sha": "3b992e3bcc321001aae1fd9e694717400c7685ea", "filename": "src/test/compile-fail/slice-1.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a923278c6278c63468d74772c58dbf788e88f58c/src%2Ftest%2Fcompile-fail%2Fslice-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a923278c6278c63468d74772c58dbf788e88f58c/src%2Ftest%2Fcompile-fail%2Fslice-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslice-1.rs?ref=a923278c6278c63468d74772c58dbf788e88f58c", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test slicing &expr[] is deprecated and gives a helpful error message.\n-\n-struct Foo;\n-\n-fn main() {\n-    let x = Foo;\n-    &x[];\n-    //~^ WARN obsolete syntax\n-    //~| ERROR cannot index\n-}"}, {"sha": "ee348d9cb0ccfe7ebb6aa8534e6fee9960fb7abc", "filename": "src/test/run-pass/issue-15149.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77de3ee6e572b66c9b0ee9d7d909fced980fe70f/src%2Ftest%2Frun-pass%2Fissue-15149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77de3ee6e572b66c9b0ee9d7d909fced980fe70f/src%2Ftest%2Frun-pass%2Fissue-15149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15149.rs?ref=77de3ee6e572b66c9b0ee9d7d909fced980fe70f", "patch": "@@ -28,7 +28,7 @@ fn main() {\n         // checking that it ends_with the executable name. This\n         // is needed because of Windows, which has a different behavior.\n         // See #15149 for more info.\n-        return assert!(args[0].ends_with(&format!(\"mytest{}\", env::consts::EXE_SUFFIX)[]));\n+        return assert!(args[0].ends_with(&format!(\"mytest{}\", env::consts::EXE_SUFFIX)));\n     }\n \n     test();"}]}