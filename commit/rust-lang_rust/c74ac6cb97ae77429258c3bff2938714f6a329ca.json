{"sha": "c74ac6cb97ae77429258c3bff2938714f6a329ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NGFjNmNiOTdhZTc3NDI5MjU4YzNiZmYyOTM4NzE0ZjZhMzI5Y2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-25T13:14:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-25T13:14:12Z"}, "message": "Auto merge of #38566 - jseyfried:fix_import_resolution_bug, r=eddyb\n\nFix bug in import resolution\n\nFixes #38535 and fixes #38556.\nr? @nrc", "tree": {"sha": "674ead2de39b8d82ba6db1f5bbcfe4316ab939f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/674ead2de39b8d82ba6db1f5bbcfe4316ab939f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c74ac6cb97ae77429258c3bff2938714f6a329ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c74ac6cb97ae77429258c3bff2938714f6a329ca", "html_url": "https://github.com/rust-lang/rust/commit/c74ac6cb97ae77429258c3bff2938714f6a329ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c74ac6cb97ae77429258c3bff2938714f6a329ca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e60aa62ffe7462d48cb44ab33f2551b466745e83", "url": "https://api.github.com/repos/rust-lang/rust/commits/e60aa62ffe7462d48cb44ab33f2551b466745e83", "html_url": "https://github.com/rust-lang/rust/commit/e60aa62ffe7462d48cb44ab33f2551b466745e83"}, {"sha": "31d9cc3833a30b0cd4c1554102402af68eebeeef", "url": "https://api.github.com/repos/rust-lang/rust/commits/31d9cc3833a30b0cd4c1554102402af68eebeeef", "html_url": "https://github.com/rust-lang/rust/commit/31d9cc3833a30b0cd4c1554102402af68eebeeef"}], "stats": {"total": 54, "additions": 37, "deletions": 17}, "files": [{"sha": "8506e81b353182b53b25d7e194f34ff36f21d05c", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c74ac6cb97ae77429258c3bff2938714f6a329ca/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74ac6cb97ae77429258c3bff2938714f6a329ca/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=c74ac6cb97ae77429258c3bff2938714f6a329ca", "patch": "@@ -129,6 +129,7 @@ impl<'a> NameResolution<'a> {\n impl<'a> Resolver<'a> {\n     fn resolution(&self, module: Module<'a>, ident: Ident, ns: Namespace)\n                   -> &'a RefCell<NameResolution<'a>> {\n+        let ident = ident.unhygienize();\n         *module.resolutions.borrow_mut().entry((ident, ns))\n                .or_insert_with(|| self.arenas.alloc_name_resolution())\n     }\n@@ -142,7 +143,6 @@ impl<'a> Resolver<'a> {\n                                    ignore_unresolved_invocations: bool,\n                                    record_used: Option<Span>)\n                                    -> Result<&'a NameBinding<'a>, Determinacy> {\n-        let ident = ident.unhygienize();\n         self.populate_module_if_necessary(module);\n \n         let resolution = self.resolution(module, ident, ns)\n@@ -308,7 +308,6 @@ impl<'a> Resolver<'a> {\n                       ns: Namespace,\n                       binding: &'a NameBinding<'a>)\n                       -> Result<(), &'a NameBinding<'a>> {\n-        let ident = ident.unhygienize();\n         self.update_resolution(module, ident, ns, |this, resolution| {\n             if let Some(old_binding) = resolution.binding {\n                 if binding.is_glob_import() {"}, {"sha": "9797e0003fc55865321d22a8ea6c453ee8d491f9", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c74ac6cb97ae77429258c3bff2938714f6a329ca/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74ac6cb97ae77429258c3bff2938714f6a329ca/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=c74ac6cb97ae77429258c3bff2938714f6a329ca", "patch": "@@ -302,23 +302,22 @@ pub fn noop_fold_view_path<T: Folder>(view_path: P<ViewPath>, fld: &mut T) -> P<\n     view_path.map(|Spanned {node, span}| Spanned {\n         node: match node {\n             ViewPathSimple(ident, path) => {\n-                ViewPathSimple(ident, fld.fold_path(path))\n+                ViewPathSimple(fld.fold_ident(ident), fld.fold_path(path))\n             }\n             ViewPathGlob(path) => {\n                 ViewPathGlob(fld.fold_path(path))\n             }\n             ViewPathList(path, path_list_idents) => {\n-                ViewPathList(fld.fold_path(path),\n-                             path_list_idents.move_map(|path_list_ident| {\n-                                Spanned {\n-                                    node: PathListItem_ {\n-                                        id: fld.new_id(path_list_ident.node.id),\n-                                        rename: path_list_ident.node.rename,\n-                                        name: path_list_ident.node.name,\n-                                    },\n-                                    span: fld.new_span(path_list_ident.span)\n-                                }\n-                             }))\n+                let path = fld.fold_path(path);\n+                let path_list_idents = path_list_idents.move_map(|path_list_ident| Spanned {\n+                    node: PathListItem_ {\n+                        id: fld.new_id(path_list_ident.node.id),\n+                        rename: path_list_ident.node.rename.map(|ident| fld.fold_ident(ident)),\n+                        name: fld.fold_ident(path_list_ident.node.name),\n+                    },\n+                    span: fld.new_span(path_list_ident.span)\n+                });\n+                ViewPathList(path, path_list_idents)\n             }\n         },\n         span: fld.new_span(span)\n@@ -345,7 +344,7 @@ pub fn noop_fold_arm<T: Folder>(Arm {attrs, pats, guard, body}: Arm, fld: &mut T\n pub fn noop_fold_ty_binding<T: Folder>(b: TypeBinding, fld: &mut T) -> TypeBinding {\n     TypeBinding {\n         id: fld.new_id(b.id),\n-        ident: b.ident,\n+        ident: fld.fold_ident(b.ident),\n         ty: fld.fold_ty(b.ty),\n         span: fld.new_span(b.span),\n     }\n@@ -672,7 +671,7 @@ pub fn noop_fold_ty_param<T: Folder>(tp: TyParam, fld: &mut T) -> TyParam {\n             .collect::<Vec<_>>()\n             .into(),\n         id: fld.new_id(id),\n-        ident: ident,\n+        ident: fld.fold_ident(ident),\n         bounds: fld.fold_bounds(bounds),\n         default: default.map(|x| fld.fold_ty(x)),\n         span: span\n@@ -1087,7 +1086,7 @@ pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {\n                 let fs = fields.move_map(|f| {\n                     Spanned { span: folder.new_span(f.span),\n                               node: ast::FieldPat {\n-                                  ident: f.node.ident,\n+                                  ident: folder.fold_ident(f.node.ident),\n                                   pat: folder.fold_pat(f.node.pat),\n                                   is_shorthand: f.node.is_shorthand,\n                               }}"}, {"sha": "f6f334f650b24daa1d106cbead3e1081fab16c4c", "filename": "src/test/run-pass/issue-38556.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c74ac6cb97ae77429258c3bff2938714f6a329ca/src%2Ftest%2Frun-pass%2Fissue-38556.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74ac6cb97ae77429258c3bff2938714f6a329ca/src%2Ftest%2Frun-pass%2Fissue-38556.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-38556.rs?ref=c74ac6cb97ae77429258c3bff2938714f6a329ca", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Foo;\n+\n+macro_rules! reexport {\n+    () => { use Foo as Bar; }\n+}\n+\n+reexport!();\n+\n+fn main() {\n+    use Bar;\n+    fn f(_: Bar) {}\n+}"}]}