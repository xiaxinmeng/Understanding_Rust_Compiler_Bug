{"sha": "8208f8aa01a53ae681a6ff2b63cbb4547f3704f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMDhmOGFhMDFhNTNhZTY4MWE2ZmYyYjYzY2JiNDU0N2YzNzA0Zjc=", "commit": {"author": {"name": "Peter Huene", "email": "peterhuene@protonmail.com", "date": "2018-04-09T07:43:17Z"}, "committer": {"name": "Peter Huene", "email": "pehuene@microsoft.com", "date": "2018-04-09T19:45:56Z"}, "message": "Suppress unstable config options by default.\n\nThis commit suppresses the output of unstable config options by default.\n\nUsers can specify the `--unstable-features` option to show the config options\nthat are unstable.\n\nFixes #2611.", "tree": {"sha": "f299226705fcdd02a4e7a127407d0ae3e7f1ef05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f299226705fcdd02a4e7a127407d0ae3e7f1ef05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8208f8aa01a53ae681a6ff2b63cbb4547f3704f7", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEkBIVsANPdKijj/OI4dJl2CAhPWoFAlrLwvYACgkQ4dJl2CAh\nPWry5g//Svfkgsm1RtG+10wC2o2XByebjXU9KCM8syZgebaMb3+544/qwD3vfruX\ntKWzFqXQhv+6FoSjFctqC4xeeGiATGThnGmxXW3X1X8X7ju5KCsc9InqnrQNnanh\ntKauaAr2R2ydRduUlOIS3HagDxKZx2p5EhdPIdKL6IYNoCD65/MrREdvx7/HIc7i\nS0O02lZPEGi6zPqWp1M9X4Jl+L5pwjNHroiJKbrz5tL2tx6baHl60RJss34+Nn34\nTYHtef7DGUFdFKoy/Ukko+CIsx/CetveSkgv72B7bxnLMxVPIxSNkWQVpP9yNsl7\nRDwy14HELo+o2oKUW1gn+f86HZqwKrmT9zMq64lTKsPuIfH3+DVihKdZjXXtYoqy\n1k7ltWGr4SbaYwfJ3xozI/ivspgmSOodioa1gRHaxgjcuAzqxeZutYrvGsuIzfzd\nW9IY9NXOLmSppcZO9ma+kOrxF7wfMOznZaDS1mvf9FCEHDO8ZefJrONBU1X700mA\nTMRHHsV1iwMCS6/SaYb2Hd9vdiQUKUqHapkZicswk0AraFDJ3aexPiwxnqecOAU0\naU9GRJfc82wcPxcQWWnwSjsqCwE1S5Yo767fDNLha1aU8F7svq3Zv7vfPlITYtjp\nGYJhV9a5elyuVlxYs6m2HqbA6Kun4Ee94KbYAGc7Xk0Q71NwLbs=\n=tdRV\n-----END PGP SIGNATURE-----", "payload": "tree f299226705fcdd02a4e7a127407d0ae3e7f1ef05\nparent f14671131ed919659b534d5e86c7055995fa3f71\nauthor Peter Huene <peterhuene@protonmail.com> 1523259797 -0700\ncommitter Peter Huene <pehuene@microsoft.com> 1523303156 -0700\n\nSuppress unstable config options by default.\n\nThis commit suppresses the output of unstable config options by default.\n\nUsers can specify the `--unstable-features` option to show the config options\nthat are unstable.\n\nFixes #2611.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8208f8aa01a53ae681a6ff2b63cbb4547f3704f7", "html_url": "https://github.com/rust-lang/rust/commit/8208f8aa01a53ae681a6ff2b63cbb4547f3704f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8208f8aa01a53ae681a6ff2b63cbb4547f3704f7/comments", "author": {"login": "peterhuene", "id": 509666, "node_id": "MDQ6VXNlcjUwOTY2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/509666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterhuene", "html_url": "https://github.com/peterhuene", "followers_url": "https://api.github.com/users/peterhuene/followers", "following_url": "https://api.github.com/users/peterhuene/following{/other_user}", "gists_url": "https://api.github.com/users/peterhuene/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterhuene/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterhuene/subscriptions", "organizations_url": "https://api.github.com/users/peterhuene/orgs", "repos_url": "https://api.github.com/users/peterhuene/repos", "events_url": "https://api.github.com/users/peterhuene/events{/privacy}", "received_events_url": "https://api.github.com/users/peterhuene/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f14671131ed919659b534d5e86c7055995fa3f71", "url": "https://api.github.com/repos/rust-lang/rust/commits/f14671131ed919659b534d5e86c7055995fa3f71", "html_url": "https://github.com/rust-lang/rust/commit/f14671131ed919659b534d5e86c7055995fa3f71"}], "stats": {"total": 97, "additions": 77, "deletions": 20}, "files": [{"sha": "34c1bc597455bcb607f73fd0c88471ddfdc92000", "filename": "src/bin/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8208f8aa01a53ae681a6ff2b63cbb4547f3704f7/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8208f8aa01a53ae681a6ff2b63cbb4547f3704f7/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=8208f8aa01a53ae681a6ff2b63cbb4547f3704f7", "patch": "@@ -15,7 +15,7 @@ extern crate getopts;\n extern crate rustfmt_nightly as rustfmt;\n \n use std::fs::File;\n-use std::io::{self, Read, Write};\n+use std::io::{self, stdout, Read, Write};\n use std::path::{Path, PathBuf};\n use std::str::FromStr;\n use std::{env, error};\n@@ -226,7 +226,7 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n             Ok(Summary::default())\n         }\n         Operation::ConfigHelp => {\n-            Config::print_docs();\n+            Config::print_docs(&mut stdout(), matches.opt_present(\"unstable-features\"));\n             Ok(Summary::default())\n         }\n         Operation::ConfigOutputDefault { path } => {"}, {"sha": "0c38b6d28ad1f9b59724f5730116bd9e5b68898c", "filename": "src/config/config_type.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8208f8aa01a53ae681a6ff2b63cbb4547f3704f7/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8208f8aa01a53ae681a6ff2b63cbb4547f3704f7/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=8208f8aa01a53ae681a6ff2b63cbb4547f3704f7", "patch": "@@ -81,6 +81,7 @@ macro_rules! is_nightly_channel {\n macro_rules! create_config {\n     ($($i:ident: $ty:ty, $def:expr, $stb:expr, $( $dstring:expr ),+ );+ $(;)*) => (\n         use std::collections::HashSet;\n+        use std::io::Write;\n \n         #[derive(Clone)]\n         pub struct Config {\n@@ -359,33 +360,37 @@ macro_rules! create_config {\n                 HIDE_OPTIONS.contains(&name)\n             }\n \n-            pub fn print_docs() {\n+            pub fn print_docs(out: &mut Write, include_unstable: bool) {\n                 use std::cmp;\n                 let max = 0;\n                 $( let max = cmp::max(max, stringify!($i).len()+1); )+\n                 let mut space_str = String::with_capacity(max);\n                 for _ in 0..max {\n                     space_str.push(' ');\n                 }\n-                println!(\"Configuration Options:\");\n+                writeln!(out, \"Configuration Options:\").unwrap();\n                 $(\n-                    let name_raw = stringify!($i);\n-\n-                    if !Config::is_hidden_option(name_raw) {\n-                        let mut name_out = String::with_capacity(max);\n-                        for _ in name_raw.len()..max-1 {\n-                            name_out.push(' ')\n+                    if $stb || include_unstable {\n+                        let name_raw = stringify!($i);\n+\n+                        if !Config::is_hidden_option(name_raw) {\n+                            let mut name_out = String::with_capacity(max);\n+                            for _ in name_raw.len()..max-1 {\n+                                name_out.push(' ')\n+                            }\n+                            name_out.push_str(name_raw);\n+                            name_out.push(' ');\n+                            writeln!(out,\n+                                    \"{}{} Default: {:?}{}\",\n+                                    name_out,\n+                                    <$ty>::doc_hint(),\n+                                    $def,\n+                                    if !$stb { \" (unstable)\" } else { \"\" }).unwrap();\n+                            $(\n+                                writeln!(out, \"{}{}\", space_str, $dstring).unwrap();\n+                            )+\n+                            writeln!(out).unwrap();\n                         }\n-                        name_out.push_str(name_raw);\n-                        name_out.push(' ');\n-                        println!(\"{}{} Default: {:?}\",\n-                                name_out,\n-                                <$ty>::doc_hint(),\n-                                $def);\n-                        $(\n-                            println!(\"{}{}\", space_str, $dstring);\n-                        )+\n-                        println!();\n                     }\n                 )+\n             }"}, {"sha": "3676aed4ba97902b976b5dbe8309f8cb2396499b", "filename": "src/config/mod.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8208f8aa01a53ae681a6ff2b63cbb4547f3704f7/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8208f8aa01a53ae681a6ff2b63cbb4547f3704f7/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=8208f8aa01a53ae681a6ff2b63cbb4547f3704f7", "patch": "@@ -181,6 +181,31 @@ pub fn get_toml_path(dir: &Path) -> Result<Option<PathBuf>, Error> {\n #[cfg(test)]\n mod test {\n     use super::Config;\n+    use std::str;\n+\n+    #[allow(dead_code)]\n+    mod mock {\n+        use super::super::*;\n+\n+        create_config! {\n+            // Options that are used by the generated functions\n+            max_width: usize, 100, true, \"Maximum width of each line\";\n+            use_small_heuristics: bool, true, false, \"Whether to use different formatting for items and \\\n+                expressions if they satisfy a heuristic notion of 'small'.\";\n+            license_template_path: String, String::default(), false, \"Beginning of file must match license template\";\n+            required_version: String, env!(\"CARGO_PKG_VERSION\").to_owned(), false, \"Require a specific version of rustfmt.\";\n+            ignore: IgnoreList, IgnoreList::default(), false, \"Skip formatting the specified files and directories.\";\n+            verbose: bool, false, false, \"Use verbose output\";\n+            file_lines: FileLines, FileLines::all(), false,\n+                \"Lines to format; this is not supported in rustfmt.toml, and can only be specified \\\n+                    via the --file-lines option\";\n+            width_heuristics: WidthHeuristics, WidthHeuristics::scaled(100), false, \"'small' heuristic values\";\n+\n+            // Options that are used by the tests\n+            stable_option: bool, false, true, \"A stable option\";\n+            unstable_option: bool, false, false, \"An unstable option\";\n+        }\n+    }\n \n     #[test]\n     fn test_config_set() {\n@@ -218,6 +243,33 @@ mod test {\n         assert_eq!(config.was_set().verbose(), false);\n     }\n \n+    #[test]\n+    fn test_print_docs_exclude_unstable() {\n+        use self::mock::Config;\n+\n+        let mut output = Vec::new();\n+        Config::print_docs(&mut output, false);\n+\n+        let s = str::from_utf8(&output).unwrap();\n+\n+        assert_eq!(s.contains(\"stable_option\"), true);\n+        assert_eq!(s.contains(\"unstable_option\"), false);\n+        assert_eq!(s.contains(\"(unstable)\"), false);\n+    }\n+\n+    #[test]\n+    fn test_print_docs_include_unstable() {\n+        use self::mock::Config;\n+\n+        let mut output = Vec::new();\n+        Config::print_docs(&mut output, true);\n+\n+        let s = str::from_utf8(&output).unwrap();\n+        assert_eq!(s.contains(\"stable_option\"), true);\n+        assert_eq!(s.contains(\"unstable_option\"), true);\n+        assert_eq!(s.contains(\"(unstable)\"), true);\n+    }\n+\n     // FIXME(#2183) these tests cannot be run in parallel because they use env vars\n     // #[test]\n     // fn test_as_not_nightly_channel() {"}]}