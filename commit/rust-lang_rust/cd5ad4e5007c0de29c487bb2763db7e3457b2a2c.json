{"sha": "cd5ad4e5007c0de29c487bb2763db7e3457b2a2c", "node_id": "C_kwDOAAsO6NoAKGNkNWFkNGU1MDA3YzBkZTI5YzQ4N2JiMjc2M2RiN2UzNDU3YjJhMmM", "commit": {"author": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-05T01:18:55Z"}, "committer": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-05T01:18:55Z"}, "message": "Don't include a ref if none was declared", "tree": {"sha": "3a90b9e0d0334423885e411765682a8d488e5efa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a90b9e0d0334423885e411765682a8d488e5efa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd5ad4e5007c0de29c487bb2763db7e3457b2a2c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEEzoFOOQgvfPzrDpfeO9fUvOMSb0FAmHU8f8ACgkQeO9fUvOM\nSb1ADwv/cxyVyomAS0f0j4+hxH4jaJ733qT2YuVZ7T+iJwTI6e4wax9PPU7exqiZ\n7he7T8KHLQq6mGCH0IDDRn2RrnY/+SSvC98gAa2tfMbi8fvhd+oOf4K8pFERIESp\nNI9EkElVaRX476RZWf/tsW7Ni84IJ2rBYYtVrCwepWhq8veRSAHNqKG+gfx9C6qY\n/vC6Pad37ZAPa/tOzevGkvB2ciGFKVMU+p6RSgMdWFovg92KawCHuNGE8ifSxJaa\nrLAGRgvhNQrQ8G4AZkm6GsBCaestgYFQpxxfJvDy0yDE7JErmcSh+6jkCjYpy6Be\nf0QBUyLpowLTp3eT1xpEgtoGhe8xDisi6p5/fiSu1eIDFUv1jgmT6zFv6oUzDYCZ\npuTO+/KdnLZ/J34pZpYbv4XY48fIXUapfVgdj/iPnbDaIdvdBEy5y724t3/6bShq\nigPXJpP1ldeS36hLe0ZuCc1f8Y9xgTpo/hRBPimRLz5uVCZCSwCR3Sinwb+yVpM6\n5rg+9lJv\n=J6rR\n-----END PGP SIGNATURE-----", "payload": "tree 3a90b9e0d0334423885e411765682a8d488e5efa\nparent 817f47828c86683e6950576eb213e9d9d2524bf8\nauthor Jeroen Vannevel <jer_vannevel@outlook.com> 1641345535 +0000\ncommitter Jeroen Vannevel <jer_vannevel@outlook.com> 1641345535 +0000\n\nDon't include a ref if none was declared\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd5ad4e5007c0de29c487bb2763db7e3457b2a2c", "html_url": "https://github.com/rust-lang/rust/commit/cd5ad4e5007c0de29c487bb2763db7e3457b2a2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd5ad4e5007c0de29c487bb2763db7e3457b2a2c/comments", "author": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "817f47828c86683e6950576eb213e9d9d2524bf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/817f47828c86683e6950576eb213e9d9d2524bf8", "html_url": "https://github.com/rust-lang/rust/commit/817f47828c86683e6950576eb213e9d9d2524bf8"}], "stats": {"total": 52, "additions": 49, "deletions": 3}, "files": [{"sha": "39a4700915f6bef6fb0d186b612719b5ec1e7a49", "filename": "crates/ide_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/cd5ad4e5007c0de29c487bb2763db7e3457b2a2c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5ad4e5007c0de29c487bb2763db7e3457b2a2c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=cd5ad4e5007c0de29c487bb2763db7e3457b2a2c", "patch": "@@ -53,7 +53,13 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n     }\n \n     let ref_kind: RefKind = if let Some(receiver_type) = get_receiver_type(&ctx, &to_extract) {\n-        if receiver_type.is_mutable_reference() { RefKind::MutRef } else { RefKind::Ref }\n+        if receiver_type.is_mutable_reference() {\n+            RefKind::MutRef\n+        } else if receiver_type.is_reference() {\n+            RefKind::Ref\n+        } else {\n+            RefKind::None\n+        }\n     } else {\n         RefKind::None\n     };\n@@ -86,7 +92,7 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n             let reference_modifier = match ref_kind {\n                 RefKind::MutRef => \"&mut \",\n                 RefKind::Ref => \"&\",\n-                RefKind::None => \"\"\n+                RefKind::None => \"\",\n             };\n \n             match anchor {\n@@ -180,7 +186,7 @@ fn get_receiver(expression: ast::Expr) -> Option<ast::Expr> {\n enum RefKind {\n     Ref,\n     MutRef,\n-    None\n+    None,\n }\n \n #[derive(Debug)]\n@@ -1088,6 +1094,46 @@ struct S {\n fn foo(s: &S) {\n     let $0z = &s.sub.field.field;\n     z.do_thing();\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_var_regular_parameter() {\n+        check_assist(\n+            extract_variable,\n+            r#\"\n+struct X;\n+\n+impl X {\n+    fn do_thing(&self) {\n+\n+    }\n+}\n+\n+struct S {\n+    sub: X\n+}\n+\n+fn foo(s: S) {\n+    $0s.sub$0.do_thing();\n+}\"#,\n+            r#\"\n+struct X;\n+\n+impl X {\n+    fn do_thing(&self) {\n+\n+    }\n+}\n+\n+struct S {\n+    sub: X\n+}\n+\n+fn foo(s: S) {\n+    let $0x = s.sub;\n+    x.do_thing();\n }\"#,\n         );\n     }"}]}