{"sha": "c0d3d32922d308088dd176d216d6c7409374c70b", "node_id": "C_kwDOAAsO6NoAKGMwZDNkMzI5MjJkMzA4MDg4ZGQxNzZkMjE2ZDZjNzQwOTM3NGM3MGI", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-04-12T20:07:07Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-04-12T20:07:07Z"}, "message": "fix comment", "tree": {"sha": "0f6d384a32149e1fdd13b0b6e7aaaffa8221fd2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f6d384a32149e1fdd13b0b6e7aaaffa8221fd2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0d3d32922d308088dd176d216d6c7409374c70b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0d3d32922d308088dd176d216d6c7409374c70b", "html_url": "https://github.com/rust-lang/rust/commit/c0d3d32922d308088dd176d216d6c7409374c70b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0d3d32922d308088dd176d216d6c7409374c70b/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc82ccb145f2056854b499d5033be1a06ddfa29c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc82ccb145f2056854b499d5033be1a06ddfa29c", "html_url": "https://github.com/rust-lang/rust/commit/cc82ccb145f2056854b499d5033be1a06ddfa29c"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "81ab5b9f0576941732f6bb5e4319996e0b3600cb", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0d3d32922d308088dd176d216d6c7409374c70b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d3d32922d308088dd176d216d6c7409374c70b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c0d3d32922d308088dd176d216d6c7409374c70b", "patch": "@@ -1764,7 +1764,8 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 // constrain inference variables a bit more to nested obligations from normalize so\n                 // we can have more helpful errors.\n                 //\n-                // we intentionally errors from normalization here.\n+                // we intentionally drop errors from normalization here,\n+                // since the normalization is just done to improve the error message.\n                 let _ = ocx.select_where_possible();\n \n                 if let Err(new_err) = ocx.eq_exp("}]}