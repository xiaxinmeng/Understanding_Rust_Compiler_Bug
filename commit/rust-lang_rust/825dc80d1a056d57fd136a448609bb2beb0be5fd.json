{"sha": "825dc80d1a056d57fd136a448609bb2beb0be5fd", "node_id": "C_kwDOAAsO6NoAKDgyNWRjODBkMWEwNTZkNTdmZDEzNmE0NDg2MDliYjJiZWIwYmU1ZmQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-05-07T03:49:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-07T03:49:32Z"}, "message": "Rollup merge of #96746 - JohnTitor:issue-96738, r=petrochenkov\n\nFix an ICE on #96738\n\nIn the block we don't know if the method actually exists thus `expect_local` panics.\nFixes #96738\nFixes #96583", "tree": {"sha": "7b21c92a8e721fe7398769f8940e13802e301637", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b21c92a8e721fe7398769f8940e13802e301637"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/825dc80d1a056d57fd136a448609bb2beb0be5fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJidexMCRBK7hj4Ov3rIwAAGtwIAHcaheZY31xOPYmQuYciv7/j\nKceEh0tDwjvfUaZx9gePrnzZuSfTRqPC6egO5pKUVIzQ/8ISq+yIoRFOYxvf4ocr\n90uddbWVdc1IS9gRuW7yK3xTb8cH9MejONtqEfRQIdQvF9CiwYb47OVcmbwr9CHD\noK/yA3QKlmAcldeLU3saa6tmzmsPM/AOvVEIYN9Ar+9Qa07m1wrZ7gB4/EcL9Xak\nrB7vR+8ajUJhJISV5dPljFquBhy+//ylyS8GwrGwuAhOpPwdxiCbqZbBOXY790ie\nk270YtTW9p5BzdinqC0gWUBSaROY33nAQl+eUjxDSQw8s+4Dgkgt3qsjqQw+Sqg=\n=2OQ/\n-----END PGP SIGNATURE-----\n", "payload": "tree 7b21c92a8e721fe7398769f8940e13802e301637\nparent 102bbc9ad3021acb3479aab79f0d36c5e025dd1c\nparent 35d77c17101852d17ebd27434c09b3652689e5c6\nauthor Michael Goulet <michael@errs.io> 1651895372 -0700\ncommitter GitHub <noreply@github.com> 1651895372 -0700\n\nRollup merge of #96746 - JohnTitor:issue-96738, r=petrochenkov\n\nFix an ICE on #96738\n\nIn the block we don't know if the method actually exists thus `expect_local` panics.\nFixes #96738\nFixes #96583\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/825dc80d1a056d57fd136a448609bb2beb0be5fd", "html_url": "https://github.com/rust-lang/rust/commit/825dc80d1a056d57fd136a448609bb2beb0be5fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/825dc80d1a056d57fd136a448609bb2beb0be5fd/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "102bbc9ad3021acb3479aab79f0d36c5e025dd1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/102bbc9ad3021acb3479aab79f0d36c5e025dd1c", "html_url": "https://github.com/rust-lang/rust/commit/102bbc9ad3021acb3479aab79f0d36c5e025dd1c"}, {"sha": "35d77c17101852d17ebd27434c09b3652689e5c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/35d77c17101852d17ebd27434c09b3652689e5c6", "html_url": "https://github.com/rust-lang/rust/commit/35d77c17101852d17ebd27434c09b3652689e5c6"}], "stats": {"total": 48, "additions": 38, "deletions": 10}, "files": [{"sha": "294a42a114804c73cc83a1bbba13c15f56db5487", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/825dc80d1a056d57fd136a448609bb2beb0be5fd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825dc80d1a056d57fd136a448609bb2beb0be5fd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=825dc80d1a056d57fd136a448609bb2beb0be5fd", "patch": "@@ -368,24 +368,33 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if self.is_fn_ty(rcvr_ty, span) {\n                     if let SelfSource::MethodCall(expr) = source {\n                         let suggest = if let ty::FnDef(def_id, _) = rcvr_ty.kind() {\n-                            let local_id = def_id.expect_local();\n-                            let hir_id = tcx.hir().local_def_id_to_hir_id(local_id);\n-                            let node = tcx.hir().get(hir_id);\n-                            let fields = node.tuple_fields();\n-\n-                            if let Some(fields) = fields\n-                                && let Some(DefKind::Ctor(of, _)) = self.tcx.opt_def_kind(local_id) {\n-                                    Some((fields, of))\n+                            if let Some(local_id) = def_id.as_local() {\n+                                let hir_id = tcx.hir().local_def_id_to_hir_id(local_id);\n+                                let node = tcx.hir().get(hir_id);\n+                                let fields = node.tuple_fields();\n+                                if let Some(fields) = fields\n+                                    && let Some(DefKind::Ctor(of, _)) = self.tcx.opt_def_kind(local_id) {\n+                                        Some((fields.len(), of))\n+                                } else {\n+                                    None\n+                                }\n                             } else {\n-                                None\n+                                // The logic here isn't smart but `associated_item_def_ids`\n+                                // doesn't work nicely on local.\n+                                if let DefKind::Ctor(of, _) = tcx.def_kind(def_id) {\n+                                    let parent_def_id = tcx.parent(*def_id);\n+                                    Some((tcx.associated_item_def_ids(parent_def_id).len(), of))\n+                                } else {\n+                                    None\n+                                }\n                             }\n                         } else {\n                             None\n                         };\n \n                         // If the function is a tuple constructor, we recommend that they call it\n                         if let Some((fields, kind)) = suggest {\n-                            suggest_call_constructor(expr.span, kind, fields.len(), &mut err);\n+                            suggest_call_constructor(expr.span, kind, fields, &mut err);\n                         } else {\n                             // General case\n                             err.span_label("}, {"sha": "7f1d1428eb9b4c054e2f4f02ade89c8653884891", "filename": "src/test/ui/typeck/issue-96738.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/825dc80d1a056d57fd136a448609bb2beb0be5fd/src%2Ftest%2Fui%2Ftypeck%2Fissue-96738.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825dc80d1a056d57fd136a448609bb2beb0be5fd/src%2Ftest%2Fui%2Ftypeck%2Fissue-96738.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-96738.rs?ref=825dc80d1a056d57fd136a448609bb2beb0be5fd", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    Some.nonexistent_method(); //~ ERROR: no method named `nonexistent_method` found\n+}"}, {"sha": "58c83a36a3bdc1c4998583ad5812a1bb8fc52d9c", "filename": "src/test/ui/typeck/issue-96738.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/825dc80d1a056d57fd136a448609bb2beb0be5fd/src%2Ftest%2Fui%2Ftypeck%2Fissue-96738.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/825dc80d1a056d57fd136a448609bb2beb0be5fd/src%2Ftest%2Fui%2Ftypeck%2Fissue-96738.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-96738.stderr?ref=825dc80d1a056d57fd136a448609bb2beb0be5fd", "patch": "@@ -0,0 +1,16 @@\n+error[E0599]: no method named `nonexistent_method` found for fn item `fn(_) -> Option<_> {Option::<_>::Some}` in the current scope\n+  --> $DIR/issue-96738.rs:2:10\n+   |\n+LL |     Some.nonexistent_method();\n+   |     ---- ^^^^^^^^^^^^^^^^^^ method not found in `fn(_) -> Option<_> {Option::<_>::Some}`\n+   |     |\n+   |     this is the constructor of an enum variant\n+   |\n+help: call the constructor\n+   |\n+LL |     (Some)(_).nonexistent_method();\n+   |     +    ++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}