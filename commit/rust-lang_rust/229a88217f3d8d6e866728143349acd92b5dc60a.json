{"sha": "229a88217f3d8d6e866728143349acd92b5dc60a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyOWE4ODIxN2YzZDhkNmU4NjY3MjgxNDMzNDlhY2Q5MmI1ZGM2MGE=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2013-06-20T05:52:02Z"}, "committer": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-06-20T14:43:03Z"}, "message": "librust: cleanup warnings (except 1)", "tree": {"sha": "74bab906b161840738eaa8db87e62ca89a1b44c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74bab906b161840738eaa8db87e62ca89a1b44c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/229a88217f3d8d6e866728143349acd92b5dc60a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/229a88217f3d8d6e866728143349acd92b5dc60a", "html_url": "https://github.com/rust-lang/rust/commit/229a88217f3d8d6e866728143349acd92b5dc60a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/229a88217f3d8d6e866728143349acd92b5dc60a/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e3b196670364df6370ea9010b58c19e578fee1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e3b196670364df6370ea9010b58c19e578fee1a", "html_url": "https://github.com/rust-lang/rust/commit/4e3b196670364df6370ea9010b58c19e578fee1a"}], "stats": {"total": 72, "additions": 30, "deletions": 42}, "files": [{"sha": "5d5a5e736bce186fd4e2d23bf578c4a09cce0757", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/229a88217f3d8d6e866728143349acd92b5dc60a/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229a88217f3d8d6e866728143349acd92b5dc60a/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=229a88217f3d8d6e866728143349acd92b5dc60a", "patch": "@@ -2192,9 +2192,7 @@ pub fn type_to_str_inner(names: @TypeNames, outer0: &[TypeRef], ty: TypeRef)\n             let out_ty: TypeRef = llvm::LLVMGetReturnType(ty);\n             let n_args = llvm::LLVMCountParamTypes(ty) as uint;\n             let args = vec::from_elem(n_args, 0 as TypeRef);\n-            unsafe {\n-                llvm::LLVMGetParamTypes(ty, vec::raw::to_ptr(args));\n-            }\n+            llvm::LLVMGetParamTypes(ty, vec::raw::to_ptr(args));\n             // See [Note at-str]\n             return fmt!(\"fn(%s) -> %s\",\n                         tys_str(names, outer, args),"}, {"sha": "585704381b69e14eec6de383e5e5b8e47a2bd236", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/229a88217f3d8d6e866728143349acd92b5dc60a/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229a88217f3d8d6e866728143349acd92b5dc60a/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=229a88217f3d8d6e866728143349acd92b5dc60a", "patch": "@@ -204,35 +204,33 @@ fn get_metadata_section(os: os,\n         let si = mk_section_iter(of.llof);\n         while llvm::LLVMIsSectionIteratorAtEnd(of.llof, si.llsi) == False {\n             let name_buf = llvm::LLVMGetSectionName(si.llsi);\n-            let name = unsafe { str::raw::from_c_str(name_buf) };\n+            let name = str::raw::from_c_str(name_buf);\n             debug!(\"get_metadata_section: name %s\", name);\n             if name == read_meta_section_name(os) {\n                 let cbuf = llvm::LLVMGetSectionContents(si.llsi);\n                 let csz = llvm::LLVMGetSectionSize(si.llsi) as uint;\n                 let mut found = None;\n-                unsafe {\n-                    let cvbuf: *u8 = cast::transmute(cbuf);\n-                    let vlen = encoder::metadata_encoding_version.len();\n-                    debug!(\"checking %u bytes of metadata-version stamp\",\n-                           vlen);\n-                    let minsz = uint::min(vlen, csz);\n-                    let mut version_ok = false;\n-                    do vec::raw::buf_as_slice(cvbuf, minsz) |buf0| {\n-                        version_ok = (buf0 ==\n-                                      encoder::metadata_encoding_version);\n-                    }\n-                    if !version_ok { return None; }\n+                let cvbuf: *u8 = cast::transmute(cbuf);\n+                let vlen = encoder::metadata_encoding_version.len();\n+                debug!(\"checking %u bytes of metadata-version stamp\",\n+                       vlen);\n+                let minsz = uint::min(vlen, csz);\n+                let mut version_ok = false;\n+                do vec::raw::buf_as_slice(cvbuf, minsz) |buf0| {\n+                    version_ok = (buf0 ==\n+                                  encoder::metadata_encoding_version);\n+                }\n+                if !version_ok { return None; }\n \n-                    let cvbuf1 = ptr::offset(cvbuf, vlen);\n-                    debug!(\"inflating %u bytes of compressed metadata\",\n-                           csz - vlen);\n-                    do vec::raw::buf_as_slice(cvbuf1, csz-vlen) |bytes| {\n-                        let inflated = flate::inflate_bytes(bytes);\n-                        found = Some(@(inflated));\n-                    }\n-                    if found != None {\n-                        return found;\n-                    }\n+                let cvbuf1 = ptr::offset(cvbuf, vlen);\n+                debug!(\"inflating %u bytes of compressed metadata\",\n+                       csz - vlen);\n+                do vec::raw::buf_as_slice(cvbuf1, csz-vlen) |bytes| {\n+                    let inflated = flate::inflate_bytes(bytes);\n+                    found = Some(@(inflated));\n+                }\n+                if found != None {\n+                    return found;\n                 }\n             }\n             llvm::LLVMMoveToNextSection(si.llsi);"}, {"sha": "d7d21707f40fed871c2340b4a8b1e2a78c45d15d", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/229a88217f3d8d6e866728143349acd92b5dc60a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229a88217f3d8d6e866728143349acd92b5dc60a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=229a88217f3d8d6e866728143349acd92b5dc60a", "patch": "@@ -3050,7 +3050,7 @@ pub fn write_metadata(cx: &mut CrateContext, crate: &ast::crate) {\n \n // Writes the current ABI version into the crate.\n pub fn write_abi_version(ccx: &mut CrateContext) {\n-    mk_global(ccx, ~\"rust_abi_version\", C_uint(ccx, abi::abi_version),\n+    mk_global(ccx, \"rust_abi_version\", C_uint(ccx, abi::abi_version),\n                      false);\n }\n "}, {"sha": "a55e89747f5b2eff905a761e01bae67f44a8b912", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/229a88217f3d8d6e866728143349acd92b5dc60a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229a88217f3d8d6e866728143349acd92b5dc60a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=229a88217f3d8d6e866728143349acd92b5dc60a", "patch": "@@ -618,13 +618,11 @@ pub fn InBoundsGEP(cx: block, Pointer: ValueRef, Indices: &[ValueRef]) ->\n    ValueRef {\n     unsafe {\n         if cx.unreachable { return llvm::LLVMGetUndef(T_ptr(T_nil())); }\n-        unsafe {\n-            count_insn(cx, \"inboundsgep\");\n+        count_insn(cx, \"inboundsgep\");\n         return llvm::LLVMBuildInBoundsGEP(B(cx), Pointer,\n                                            vec::raw::to_ptr(Indices),\n                                            Indices.len() as c_uint,\n                                            noname());\n-        }\n     }\n }\n \n@@ -1072,11 +1070,9 @@ pub fn Trap(cx: block) {\n         });\n         assert!((T as int != 0));\n         let Args: ~[ValueRef] = ~[];\n-        unsafe {\n-            count_insn(cx, \"trap\");\n-            llvm::LLVMBuildCall(b, T, vec::raw::to_ptr(Args),\n-                                Args.len() as c_uint, noname());\n-        }\n+        count_insn(cx, \"trap\");\n+        llvm::LLVMBuildCall(b, T, vec::raw::to_ptr(Args),\n+                            Args.len() as c_uint, noname());\n     }\n }\n "}, {"sha": "d6c7472424f7afdcabf41f72e4eec91296e1d6da", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/229a88217f3d8d6e866728143349acd92b5dc60a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229a88217f3d8d6e866728143349acd92b5dc60a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=229a88217f3d8d6e866728143349acd92b5dc60a", "patch": "@@ -211,9 +211,7 @@ impl CrateContext {\n                   int_type: int_type,\n                   float_type: float_type,\n                   opaque_vec_type: T_opaque_vec(targ_cfg),\n-                  builder: BuilderRef_res(unsafe {\n-                      llvm::LLVMCreateBuilderInContext(llcx)\n-                  }),\n+                  builder: BuilderRef_res(llvm::LLVMCreateBuilderInContext(llcx)),\n                   shape_cx: mk_ctxt(llmod),\n                   crate_map: crate_map,\n                   uses_gc: false,"}, {"sha": "269451b13070dc6cc5c9f0ec4ddde360153c8c5f", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/229a88217f3d8d6e866728143349acd92b5dc60a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229a88217f3d8d6e866728143349acd92b5dc60a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=229a88217f3d8d6e866728143349acd92b5dc60a", "patch": "@@ -242,7 +242,7 @@ fn create_basic_type(cx: @mut CrateContext, t: ty::t, _span: span) -> DIType {\n             ast::ty_f32 => (~\"f32\", DW_ATE_float),\n             ast::ty_f64 => (~\"f64\", DW_ATE_float)\n         },\n-        _ => cx.sess.bug(~\"debuginfo::create_basic_type - t is invalid type\")\n+        _ => cx.sess.bug(\"debuginfo::create_basic_type - t is invalid type\")\n     };\n \n     let (size, align) = size_and_align_of(cx, t);\n@@ -572,7 +572,7 @@ fn create_ty(cx: @mut CrateContext, t: ty::t, span: span) -> DIType {\n         ty::ty_tup(ref elements) => {\n             create_tuple(cx, t, *elements, span)\n         },\n-        _ => cx.sess.bug(~\"debuginfo: unexpected type in create_ty\")\n+        _ => cx.sess.bug(\"debuginfo: unexpected type in create_ty\")\n     };\n \n     dbg_cx(cx).created_types.insert(ty_id, ty_md);"}, {"sha": "197bf5d82ccea1c57c3e3b549ab70c8bf874a871", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/229a88217f3d8d6e866728143349acd92b5dc60a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229a88217f3d8d6e866728143349acd92b5dc60a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=229a88217f3d8d6e866728143349acd92b5dc60a", "patch": "@@ -10,7 +10,6 @@\n \n use core::prelude::*;\n \n-use middle::resolve::Impl;\n use middle::ty::param_ty;\n use middle::ty;\n use middle::typeck::check::{FnCtxt, impl_self_ty};\n@@ -27,7 +26,6 @@ use util::ppaux;\n \n use core::hashmap::HashSet;\n use core::result;\n-use core::uint;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::span;"}]}