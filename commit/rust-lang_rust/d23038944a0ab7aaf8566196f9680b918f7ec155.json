{"sha": "d23038944a0ab7aaf8566196f9680b918f7ec155", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMzAzODk0NGEwYWI3YWFmODU2NjE5NmY5NjgwYjkxOGY3ZWMxNTU=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-02-20T13:52:56Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-02-20T20:05:11Z"}, "message": "New lint: inconsistent_struct_constructor", "tree": {"sha": "21bd04f451b72cf97e39d970dcbcf7689c924cb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21bd04f451b72cf97e39d970dcbcf7689c924cb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d23038944a0ab7aaf8566196f9680b918f7ec155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d23038944a0ab7aaf8566196f9680b918f7ec155", "html_url": "https://github.com/rust-lang/rust/commit/d23038944a0ab7aaf8566196f9680b918f7ec155", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d23038944a0ab7aaf8566196f9680b918f7ec155/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67087a1b4ee06ce42fd8abe5825f9af96a41e83d", "url": "https://api.github.com/repos/rust-lang/rust/commits/67087a1b4ee06ce42fd8abe5825f9af96a41e83d", "html_url": "https://github.com/rust-lang/rust/commit/67087a1b4ee06ce42fd8abe5825f9af96a41e83d"}], "stats": {"total": 270, "additions": 270, "deletions": 0}, "files": [{"sha": "c51557943e57a21872436c0007d76ea77e897538", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d23038944a0ab7aaf8566196f9680b918f7ec155/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d23038944a0ab7aaf8566196f9680b918f7ec155/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=d23038944a0ab7aaf8566196f9680b918f7ec155", "patch": "@@ -2109,6 +2109,7 @@ Released 2018-09-13\n [`implicit_saturating_sub`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_saturating_sub\n [`imprecise_flops`]: https://rust-lang.github.io/rust-clippy/master/index.html#imprecise_flops\n [`inconsistent_digit_grouping`]: https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping\n+[`inconsistent_struct_constructor`]: https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_struct_constructor\n [`indexing_slicing`]: https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing\n [`ineffective_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#ineffective_bit_mask\n [`inefficient_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#inefficient_to_string"}, {"sha": "24dbfbbae2fb93ba1c3c7a57c7749320777b63a1", "filename": "clippy_lints/src/inconsistent_struct_constructor.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/d23038944a0ab7aaf8566196f9680b918f7ec155/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23038944a0ab7aaf8566196f9680b918f7ec155/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs?ref=d23038944a0ab7aaf8566196f9680b918f7ec155", "patch": "@@ -0,0 +1,118 @@\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::Applicability;\n+use rustc_hir::{self as hir, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::Symbol;\n+\n+use if_chain::if_chain;\n+\n+use crate::utils::{snippet, span_lint_and_sugg};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for struct constructors where the order of the field init\n+    /// shorthand in the constructor is inconsistent with the order in the struct definition.\n+    ///\n+    /// **Why is this bad?** It decreases readability and consistency.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// struct Foo {\n+    ///     x: i32,\n+    ///     y: i32,\n+    /// }\n+    /// let x = 1;\n+    /// let y = 2;\n+    /// Foo { y, x };\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// # struct Foo {\n+    /// #     x: i32,\n+    /// #     y: i32,\n+    /// # }\n+    /// # let x = 1;\n+    /// # let y = 2;\n+    /// Foo { x, y };\n+    /// ```\n+    pub INCONSISTENT_STRUCT_CONSTRUCTOR,\n+    style,\n+    \"the order of the field init shorthand is inconsistent with the order in the struct definition\"\n+}\n+\n+declare_lint_pass!(InconsistentStructConstructor => [INCONSISTENT_STRUCT_CONSTRUCTOR]);\n+\n+impl LateLintPass<'_> for InconsistentStructConstructor {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n+        if_chain! {\n+            if let ExprKind::Struct(qpath, fields, base) = expr.kind;\n+            if let Some(def_id)  = cx.qpath_res(qpath, expr.hir_id).opt_def_id();\n+            let ty = cx.tcx.type_of(def_id);\n+            if let Some(adt_def) = ty.ty_adt_def();\n+            if adt_def.is_struct();\n+            if let Some(variant) = adt_def.variants.iter().next();\n+            if fields.iter().all(|f| f.is_shorthand);\n+            then {\n+                let mut def_order_map = FxHashMap::default();\n+                for (idx, field) in variant.fields.iter().enumerate() {\n+                    def_order_map.insert(field.ident.name, idx);\n+                }\n+\n+                if is_consistent_order(fields, &def_order_map) {\n+                    return;\n+                }\n+\n+                let mut ordered_fields: Vec<_> = fields.iter().map(|f| f.ident.name).collect();\n+                ordered_fields.sort_unstable_by_key(|id| def_order_map[id]);\n+\n+                let mut fields_snippet = String::new();\n+                let (last_ident, idents) = ordered_fields.split_last().unwrap();\n+                for ident in idents {\n+                    fields_snippet.push_str(&format!(\"{}, \", ident));\n+                }\n+                fields_snippet.push_str(&format!(\"{}\", last_ident));\n+\n+                let base_snippet = if let Some(base) = base {\n+                        format!(\", ..{}\", snippet(cx, base.span, \"..\"))\n+                    } else {\n+                        \"\".to_string()\n+                    };\n+\n+                let sugg = format!(\"{} {{ {}{} }}\",\n+                    snippet(cx, qpath.span(), \"..\"),\n+                    fields_snippet,\n+                    base_snippet,\n+                    );\n+\n+                span_lint_and_sugg(\n+                    cx,\n+                    INCONSISTENT_STRUCT_CONSTRUCTOR,\n+                    expr.span,\n+                    \"inconsistent struct constructor\",\n+                    \"try\",\n+                    sugg,\n+                    Applicability::MachineApplicable,\n+                )\n+            }\n+        }\n+    }\n+}\n+\n+// Check whether the order of the fields in the constructor is consistent with the order in the\n+// definition.\n+fn is_consistent_order<'tcx>(fields: &'tcx [hir::Field<'tcx>], def_order_map: &FxHashMap<Symbol, usize>) -> bool {\n+    let mut cur_idx = usize::MIN;\n+    for f in fields {\n+        let next_idx = def_order_map[&f.ident.name];\n+        if cur_idx > next_idx {\n+            return false;\n+        }\n+        cur_idx = next_idx;\n+    }\n+\n+    true\n+}"}, {"sha": "c846dc187a405d2cba3c33dcd8de819ca6f453c2", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d23038944a0ab7aaf8566196f9680b918f7ec155/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23038944a0ab7aaf8566196f9680b918f7ec155/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d23038944a0ab7aaf8566196f9680b918f7ec155", "patch": "@@ -221,6 +221,7 @@ mod if_let_some_result;\n mod if_not_else;\n mod implicit_return;\n mod implicit_saturating_sub;\n+mod inconsistent_struct_constructor;\n mod indexing_slicing;\n mod infinite_iter;\n mod inherent_impl;\n@@ -656,6 +657,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &if_not_else::IF_NOT_ELSE,\n         &implicit_return::IMPLICIT_RETURN,\n         &implicit_saturating_sub::IMPLICIT_SATURATING_SUB,\n+        &inconsistent_struct_constructor::INCONSISTENT_STRUCT_CONSTRUCTOR,\n         &indexing_slicing::INDEXING_SLICING,\n         &indexing_slicing::OUT_OF_BOUNDS_INDEXING,\n         &infinite_iter::INFINITE_ITER,\n@@ -1036,6 +1038,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box implicit_return::ImplicitReturn);\n     store.register_late_pass(|| box implicit_saturating_sub::ImplicitSaturatingSub);\n     store.register_late_pass(|| box default_numeric_fallback::DefaultNumericFallback);\n+    store.register_late_pass(|| box inconsistent_struct_constructor::InconsistentStructConstructor);\n \n     let msrv = conf.msrv.as_ref().and_then(|s| {\n         parse_msrv(s, None, None).or_else(|| {\n@@ -1485,6 +1488,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&identity_op::IDENTITY_OP),\n         LintId::of(&if_let_mutex::IF_LET_MUTEX),\n         LintId::of(&if_let_some_result::IF_LET_SOME_RESULT),\n+        LintId::of(&inconsistent_struct_constructor::INCONSISTENT_STRUCT_CONSTRUCTOR),\n         LintId::of(&indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n         LintId::of(&infinite_iter::INFINITE_ITER),\n         LintId::of(&inherent_to_string::INHERENT_TO_STRING),\n@@ -1737,6 +1741,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&functions::MUST_USE_UNIT),\n         LintId::of(&functions::RESULT_UNIT_ERR),\n         LintId::of(&if_let_some_result::IF_LET_SOME_RESULT),\n+        LintId::of(&inconsistent_struct_constructor::INCONSISTENT_STRUCT_CONSTRUCTOR),\n         LintId::of(&inherent_to_string::INHERENT_TO_STRING),\n         LintId::of(&len_zero::COMPARISON_TO_EMPTY),\n         LintId::of(&len_zero::LEN_WITHOUT_IS_EMPTY),"}, {"sha": "8d9c311003508173c227ebaef88e3d090a9e6ed7", "filename": "tests/ui/inconsistent_struct_constructor.fixed", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/d23038944a0ab7aaf8566196f9680b918f7ec155/tests%2Fui%2Finconsistent_struct_constructor.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d23038944a0ab7aaf8566196f9680b918f7ec155/tests%2Fui%2Finconsistent_struct_constructor.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_struct_constructor.fixed?ref=d23038944a0ab7aaf8566196f9680b918f7ec155", "patch": "@@ -0,0 +1,61 @@\n+// run-rustfix\n+// edition:2018\n+#![warn(clippy::inconsistent_struct_constructor)]\n+#![allow(clippy::redundant_field_names)]\n+#![allow(clippy::unnecessary_operation)]\n+#![allow(clippy::no_effect)]\n+#![allow(dead_code)]\n+\n+#[derive(Default)]\n+struct Foo {\n+    x: i32,\n+    y: i32,\n+    z: i32,\n+}\n+\n+mod without_base {\n+    use super::Foo;\n+\n+    fn test() {\n+        let x = 1;\n+        let y = 1;\n+        let z = 1;\n+\n+        // Should lint.\n+        Foo { x, y, z };\n+\n+        // Shoule NOT lint because the order is the same as in the definition.\n+        Foo { x, y, z };\n+\n+        // Should NOT lint because z is not a shorthand init.\n+        Foo { y, x, z: z };\n+    }\n+}\n+\n+mod with_base {\n+    use super::Foo;\n+\n+    fn test() {\n+        let x = 1;\n+        let z = 1;\n+\n+        // Should lint.\n+        Foo { x, z, ..Default::default() };\n+\n+        // Should NOT lint because the order is consistent with the definition.\n+        Foo {\n+            x,\n+            z,\n+            ..Default::default()\n+        };\n+\n+        // Should NOT lint because z is not a shorthand init.\n+        Foo {\n+            z: z,\n+            x,\n+            ..Default::default()\n+        };\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "63fac9105015d3756b5be6edc83c52777c5d5179", "filename": "tests/ui/inconsistent_struct_constructor.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/d23038944a0ab7aaf8566196f9680b918f7ec155/tests%2Fui%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23038944a0ab7aaf8566196f9680b918f7ec155/tests%2Fui%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_struct_constructor.rs?ref=d23038944a0ab7aaf8566196f9680b918f7ec155", "patch": "@@ -0,0 +1,65 @@\n+// run-rustfix\n+// edition:2018\n+#![warn(clippy::inconsistent_struct_constructor)]\n+#![allow(clippy::redundant_field_names)]\n+#![allow(clippy::unnecessary_operation)]\n+#![allow(clippy::no_effect)]\n+#![allow(dead_code)]\n+\n+#[derive(Default)]\n+struct Foo {\n+    x: i32,\n+    y: i32,\n+    z: i32,\n+}\n+\n+mod without_base {\n+    use super::Foo;\n+\n+    fn test() {\n+        let x = 1;\n+        let y = 1;\n+        let z = 1;\n+\n+        // Should lint.\n+        Foo { y, x, z };\n+\n+        // Shoule NOT lint because the order is the same as in the definition.\n+        Foo { x, y, z };\n+\n+        // Should NOT lint because z is not a shorthand init.\n+        Foo { y, x, z: z };\n+    }\n+}\n+\n+mod with_base {\n+    use super::Foo;\n+\n+    fn test() {\n+        let x = 1;\n+        let z = 1;\n+\n+        // Should lint.\n+        Foo {\n+            z,\n+            x,\n+            ..Default::default()\n+        };\n+\n+        // Should NOT lint because the order is consistent with the definition.\n+        Foo {\n+            x,\n+            z,\n+            ..Default::default()\n+        };\n+\n+        // Should NOT lint because z is not a shorthand init.\n+        Foo {\n+            z: z,\n+            x,\n+            ..Default::default()\n+        };\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d7abe44f2540834bb8dc842af33f3eefb341dc26", "filename": "tests/ui/inconsistent_struct_constructor.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d23038944a0ab7aaf8566196f9680b918f7ec155/tests%2Fui%2Finconsistent_struct_constructor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d23038944a0ab7aaf8566196f9680b918f7ec155/tests%2Fui%2Finconsistent_struct_constructor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_struct_constructor.stderr?ref=d23038944a0ab7aaf8566196f9680b918f7ec155", "patch": "@@ -0,0 +1,20 @@\n+error: inconsistent struct constructor\n+  --> $DIR/inconsistent_struct_constructor.rs:25:9\n+   |\n+LL |         Foo { y, x, z };\n+   |         ^^^^^^^^^^^^^^^ help: try: `Foo { x, y, z }`\n+   |\n+   = note: `-D clippy::inconsistent-struct-constructor` implied by `-D warnings`\n+\n+error: inconsistent struct constructor\n+  --> $DIR/inconsistent_struct_constructor.rs:43:9\n+   |\n+LL | /         Foo {\n+LL | |             z,\n+LL | |             x,\n+LL | |             ..Default::default()\n+LL | |         };\n+   | |_________^ help: try: `Foo { x, z, ..Default::default() }`\n+\n+error: aborting due to 2 previous errors\n+"}]}