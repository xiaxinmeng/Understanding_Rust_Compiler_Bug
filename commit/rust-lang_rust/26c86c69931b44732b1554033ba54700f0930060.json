{"sha": "26c86c69931b44732b1554033ba54700f0930060", "node_id": "C_kwDOAAsO6NoAKDI2Yzg2YzY5OTMxYjQ0NzMyYjE1NTQwMzNiYTU0NzAwZjA5MzAwNjA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-29T04:34:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-29T04:34:44Z"}, "message": "Rollup merge of #100437 - compiler-errors:better-const-mismatch-err, r=oli-obk\n\nImprove const mismatch `FulfillmentError`\n\nFixes #100414", "tree": {"sha": "30aa665c94f8e6bf8637c6c1a767ec8fffe79ffa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30aa665c94f8e6bf8637c6c1a767ec8fffe79ffa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26c86c69931b44732b1554033ba54700f0930060", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjDEHkCRBK7hj4Ov3rIwAA4LYIAGorQfifU+EH8YwCdcAFFu0H\nemmByBKsjWxaT8V9LhGHosV3J/+7HQBJ5Uvi2Z1++K0CKNPDjDrVsis6n9KFKd4D\nmzNOs49KO/7aedIG7FJwTiBAo3+y14fxQrrvuuEhpLmsKSjUT52pPh2pAU+kqA6A\n1b6XqOATP9CZpi857SK/Q8zsAMbC7Hy5+RdDJ4kZmrbk0Jmu+dFF6B7wVvzk9oNr\ny47NVmUqgOR5aIrckQzjbDFgDS1dy3apUNODLIm6kCrGuhEPxUv2+bscC+omro8c\nw0R+tI/mtwVE0ZiPi67wZp0YIoHMN4qPyVpEay42XQ3bq7VfAwSLqtEOjbjDviQ=\n=BG0F\n-----END PGP SIGNATURE-----\n", "payload": "tree 30aa665c94f8e6bf8637c6c1a767ec8fffe79ffa\nparent d182081de1ae2fe580c038abd526d85cedafa712\nparent 8189a4536be3730ecc161c77fc655b08be179b50\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661747684 +0200\ncommitter GitHub <noreply@github.com> 1661747684 +0200\n\nRollup merge of #100437 - compiler-errors:better-const-mismatch-err, r=oli-obk\n\nImprove const mismatch `FulfillmentError`\n\nFixes #100414\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26c86c69931b44732b1554033ba54700f0930060", "html_url": "https://github.com/rust-lang/rust/commit/26c86c69931b44732b1554033ba54700f0930060", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26c86c69931b44732b1554033ba54700f0930060/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d182081de1ae2fe580c038abd526d85cedafa712", "url": "https://api.github.com/repos/rust-lang/rust/commits/d182081de1ae2fe580c038abd526d85cedafa712", "html_url": "https://github.com/rust-lang/rust/commit/d182081de1ae2fe580c038abd526d85cedafa712"}, {"sha": "8189a4536be3730ecc161c77fc655b08be179b50", "url": "https://api.github.com/repos/rust-lang/rust/commits/8189a4536be3730ecc161c77fc655b08be179b50", "html_url": "https://github.com/rust-lang/rust/commit/8189a4536be3730ecc161c77fc655b08be179b50"}], "stats": {"total": 239, "additions": 194, "deletions": 45}, "files": [{"sha": "16cffb45f0f064431b394764f52b5add8bb04940", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/26c86c69931b44732b1554033ba54700f0930060/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c86c69931b44732b1554033ba54700f0930060/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=26c86c69931b44732b1554033ba54700f0930060", "patch": "@@ -1588,9 +1588,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             Mismatch::Variable(infer::ExpectedFound { expected, found }),\n                         )\n                     }\n+                    ValuePairs::Terms(infer::ExpectedFound {\n+                        expected: ty::Term::Const(_),\n+                        found: ty::Term::Const(_),\n+                    }) => (false, Mismatch::Fixed(\"constant\")),\n                     ValuePairs::TraitRefs(_) | ValuePairs::PolyTraitRefs(_) => {\n                         (false, Mismatch::Fixed(\"trait\"))\n                     }\n+                    ValuePairs::Regions(_) => (false, Mismatch::Fixed(\"lifetime\")),\n                     _ => (false, Mismatch::Fixed(\"type\")),\n                 };\n                 let vals = match self.values_str(values) {"}, {"sha": "ab7e5ba3a1067f56cae54bf1e87489231a80114b", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/26c86c69931b44732b1554033ba54700f0930060/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c86c69931b44732b1554033ba54700f0930060/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=26c86c69931b44732b1554033ba54700f0930060", "patch": "@@ -469,6 +469,13 @@ impl<'tcx> ObligationCauseCode<'tcx> {\n             _ => None,\n         }\n     }\n+\n+    pub fn peel_match_impls(&self) -> &Self {\n+        match self {\n+            MatchImpl(cause, _) => cause.code(),\n+            _ => self,\n+        }\n+    }\n }\n \n // `ObligationCauseCode` is used a lot. Make sure it doesn't unintentionally get bigger."}, {"sha": "e4af7022239b83fa2492b0754ea1688096a76854", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/26c86c69931b44732b1554033ba54700f0930060/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c86c69931b44732b1554033ba54700f0930060/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=26c86c69931b44732b1554033ba54700f0930060", "patch": "@@ -1506,13 +1506,28 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 .emit();\n             }\n             FulfillmentErrorCode::CodeConstEquateError(ref expected_found, ref err) => {\n-                self.report_mismatched_consts(\n+                let mut diag = self.report_mismatched_consts(\n                     &error.obligation.cause,\n                     expected_found.expected,\n                     expected_found.found,\n                     err.clone(),\n-                )\n-                .emit();\n+                );\n+                let code = error.obligation.cause.code().peel_derives().peel_match_impls();\n+                if let ObligationCauseCode::BindingObligation(..)\n+                | ObligationCauseCode::ItemObligation(..)\n+                | ObligationCauseCode::ExprBindingObligation(..)\n+                | ObligationCauseCode::ExprItemObligation(..) = code\n+                {\n+                    self.note_obligation_cause_code(\n+                        &mut diag,\n+                        &error.obligation.predicate,\n+                        error.obligation.param_env,\n+                        code,\n+                        &mut vec![],\n+                        &mut Default::default(),\n+                    );\n+                }\n+                diag.emit();\n             }\n         }\n     }"}, {"sha": "61b3551182c905e141716decd33b4d1dec7065aa", "filename": "src/test/ui/const-generics/defaults/generic-expr-default-concrete.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-concrete.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-concrete.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-concrete.stderr?ref=26c86c69931b44732b1554033ba54700f0930060", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     Foo::<10, 12>\n    |     ^^^^^^^^^^^^^ expected `11`, found `12`\n    |\n-   = note: expected type `11`\n-              found type `12`\n+   = note: expected constant `11`\n+              found constant `12`\n \n error: aborting due to previous error\n "}, {"sha": "e83f89a60333fd131b4cf46577a6882c7beab2f4", "filename": "src/test/ui/const-generics/defaults/generic-expr-default-mismatched-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-mismatched-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-mismatched-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-mismatched-types.stderr?ref=26c86c69931b44732b1554033ba54700f0930060", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     Foo::<N, { N + 2 }>\n    |     ^^^^^^^^^^^^^^^^^^^ expected `{ N + 1 }`, found `{ N + 2 }`\n    |\n-   = note: expected type `{ N + 1 }`\n-              found type `{ N + 2 }`\n+   = note: expected constant `{ N + 1 }`\n+              found constant `{ N + 2 }`\n \n error: aborting due to previous error\n "}, {"sha": "ada1050d35f35a3f6a26a78fab0127f7b456f2f6", "filename": "src/test/ui/const-generics/generic_const_exprs/abstract-const-as-cast-3.stderr", "status": "modified", "additions": 56, "deletions": 16, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr?ref=26c86c69931b44732b1554033ba54700f0930060", "patch": "@@ -22,8 +22,13 @@ error[E0308]: mismatched types\n LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{ N as u128 }`, found `{ O as u128 }`\n    |\n-   = note: expected type `{ N as u128 }`\n-              found type `{ O as u128 }`\n+   = note: expected constant `{ N as u128 }`\n+              found constant `{ O as u128 }`\n+note: required by a bound in `use_trait_impl::assert_impl`\n+  --> $DIR/abstract-const-as-cast-3.rs:14:23\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ^^^^^ required by this bound in `use_trait_impl::assert_impl`\n \n error: unconstrained generic constant\n   --> $DIR/abstract-const-as-cast-3.rs:20:19\n@@ -49,26 +54,41 @@ error[E0308]: mismatched types\n LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{ N as _ }`, found `{ O as u128 }`\n    |\n-   = note: expected type `{ N as _ }`\n-              found type `{ O as u128 }`\n+   = note: expected constant `{ N as _ }`\n+              found constant `{ O as u128 }`\n+note: required by a bound in `use_trait_impl::assert_impl`\n+  --> $DIR/abstract-const-as-cast-3.rs:14:23\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ^^^^^ required by this bound in `use_trait_impl::assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:23:5\n    |\n LL |     assert_impl::<HasCastInTraitImpl<13, { 12 as u128 }>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `12`, found `13`\n    |\n-   = note: expected type `12`\n-              found type `13`\n+   = note: expected constant `12`\n+              found constant `13`\n+note: required by a bound in `use_trait_impl::assert_impl`\n+  --> $DIR/abstract-const-as-cast-3.rs:14:23\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ^^^^^ required by this bound in `use_trait_impl::assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:25:5\n    |\n LL |     assert_impl::<HasCastInTraitImpl<14, 13>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `13`, found `14`\n    |\n-   = note: expected type `13`\n-              found type `14`\n+   = note: expected constant `13`\n+              found constant `14`\n+note: required by a bound in `use_trait_impl::assert_impl`\n+  --> $DIR/abstract-const-as-cast-3.rs:14:23\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ^^^^^ required by this bound in `use_trait_impl::assert_impl`\n \n error: unconstrained generic constant\n   --> $DIR/abstract-const-as-cast-3.rs:35:19\n@@ -94,8 +114,13 @@ error[E0308]: mismatched types\n LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{ N as u128 }`, found `{ O as u128 }`\n    |\n-   = note: expected type `{ N as u128 }`\n-              found type `{ O as u128 }`\n+   = note: expected constant `{ N as u128 }`\n+              found constant `{ O as u128 }`\n+note: required by a bound in `use_trait_impl_2::assert_impl`\n+  --> $DIR/abstract-const-as-cast-3.rs:32:23\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ^^^^^ required by this bound in `use_trait_impl_2::assert_impl`\n \n error: unconstrained generic constant\n   --> $DIR/abstract-const-as-cast-3.rs:38:19\n@@ -121,26 +146,41 @@ error[E0308]: mismatched types\n LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{ N as _ }`, found `{ O as u128 }`\n    |\n-   = note: expected type `{ N as _ }`\n-              found type `{ O as u128 }`\n+   = note: expected constant `{ N as _ }`\n+              found constant `{ O as u128 }`\n+note: required by a bound in `use_trait_impl_2::assert_impl`\n+  --> $DIR/abstract-const-as-cast-3.rs:32:23\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ^^^^^ required by this bound in `use_trait_impl_2::assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:41:5\n    |\n LL |     assert_impl::<HasCastInTraitImpl<13, { 12 as u128 }>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `12`, found `13`\n    |\n-   = note: expected type `12`\n-              found type `13`\n+   = note: expected constant `12`\n+              found constant `13`\n+note: required by a bound in `use_trait_impl_2::assert_impl`\n+  --> $DIR/abstract-const-as-cast-3.rs:32:23\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ^^^^^ required by this bound in `use_trait_impl_2::assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:43:5\n    |\n LL |     assert_impl::<HasCastInTraitImpl<14, 13>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `13`, found `14`\n    |\n-   = note: expected type `13`\n-              found type `14`\n+   = note: expected constant `13`\n+              found constant `14`\n+note: required by a bound in `use_trait_impl_2::assert_impl`\n+  --> $DIR/abstract-const-as-cast-3.rs:32:23\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ^^^^^ required by this bound in `use_trait_impl_2::assert_impl`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "83a2f3740b14600ba06552c46f23977654c61d53", "filename": "src/test/ui/const-generics/generic_const_exprs/different-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdifferent-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdifferent-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdifferent-fn.stderr?ref=26c86c69931b44732b1554033ba54700f0930060", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     [0; size_of::<Foo<T>>()]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected `size_of::<T>()`, found `size_of::<Foo<T>>()`\n    |\n-   = note: expected type `size_of::<T>()`\n-              found type `size_of::<Foo<T>>()`\n+   = note: expected constant `size_of::<T>()`\n+              found constant `size_of::<Foo<T>>()`\n \n error: unconstrained generic constant\n   --> $DIR/different-fn.rs:10:9"}, {"sha": "0742db398c9c4fd17b6cb8694edf9eb89f87cd06", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-62504.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-62504.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-62504.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-62504.full.stderr?ref=26c86c69931b44732b1554033ba54700f0930060", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |         ArrayHolder([0; Self::SIZE])\n    |                     ^^^^^^^^^^^^^^^ expected `X`, found `Self::SIZE`\n    |\n-   = note: expected type `X`\n-              found type `Self::SIZE`\n+   = note: expected constant `X`\n+              found constant `Self::SIZE`\n \n error: unconstrained generic constant\n   --> $DIR/issue-62504.rs:18:25"}, {"sha": "f2fddfbfbb52adbdd1bef8be46edf9dc43616601", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-72819-generic-in-const-eval.full.stderr", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72819-generic-in-const-eval.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72819-generic-in-const-eval.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72819-generic-in-const-eval.full.stderr?ref=26c86c69931b44732b1554033ba54700f0930060", "patch": "@@ -4,17 +4,31 @@ error[E0308]: mismatched types\n LL |     let x: Arr<{usize::MAX}> = Arr {};\n    |            ^^^^^^^^^^^^^^^^^ expected `false`, found `true`\n    |\n-   = note: expected type `false`\n-              found type `true`\n+   = note: expected constant `false`\n+              found constant `true`\n+note: required by a bound in `Arr`\n+  --> $DIR/issue-72819-generic-in-const-eval.rs:8:39\n+   |\n+LL | struct Arr<const N: usize>\n+   |        --- required by a bound in this\n+LL | where Assert::<{N < usize::MAX / 2}>: IsTrue,\n+   |                                       ^^^^^^ required by this bound in `Arr`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-72819-generic-in-const-eval.rs:20:32\n    |\n LL |     let x: Arr<{usize::MAX}> = Arr {};\n    |                                ^^^ expected `false`, found `true`\n    |\n-   = note: expected type `false`\n-              found type `true`\n+   = note: expected constant `false`\n+              found constant `true`\n+note: required by a bound in `Arr`\n+  --> $DIR/issue-72819-generic-in-const-eval.rs:8:39\n+   |\n+LL | struct Arr<const N: usize>\n+   |        --- required by a bound in this\n+LL | where Assert::<{N < usize::MAX / 2}>: IsTrue,\n+   |                                       ^^^^^^ required by this bound in `Arr`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b693023f125a4565d8006e3c8677fb83d5b14eba", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-83765.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-83765.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-83765.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-83765.stderr?ref=26c86c69931b44732b1554033ba54700f0930060", "patch": "@@ -4,8 +4,8 @@ error[E0308]: method not compatible with trait\n LL |     fn size(&self) -> [usize; DIM] {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Self::DIM`, found `DIM`\n    |\n-   = note: expected type `Self::DIM`\n-              found type `DIM`\n+   = note: expected constant `Self::DIM`\n+              found constant `DIM`\n \n error: unconstrained generic constant\n   --> $DIR/issue-83765.rs:32:24\n@@ -26,8 +26,8 @@ error[E0308]: mismatched types\n LL |         self.reference.size()\n    |         ^^^^^^^^^^^^^^^^^^^^^ expected `DIM`, found `Self::DIM`\n    |\n-   = note: expected type `DIM`\n-              found type `Self::DIM`\n+   = note: expected constant `DIM`\n+              found constant `Self::DIM`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "09bcb0860b71bee07e498a54e9d79682ef86519a", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-85848.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.stderr?ref=26c86c69931b44732b1554033ba54700f0930060", "patch": "@@ -54,8 +54,8 @@ error[E0308]: mismatched types\n LL |     writes_to_specific_path(&cap);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ expected `true`, found `{ contains::<T, U>() }`\n    |\n-   = note: expected type `true`\n-              found type `{ contains::<T, U>() }`\n+   = note: expected constant `true`\n+              found constant `{ contains::<T, U>() }`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e7c8e4f667d05f72e84d9c5a06d4a679772a8b3e", "filename": "src/test/ui/const-generics/generic_const_exprs/obligation-cause.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobligation-cause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobligation-cause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobligation-cause.rs?ref=26c86c69931b44732b1554033ba54700f0930060", "patch": "@@ -0,0 +1,24 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+\n+trait True {}\n+\n+struct Is<const V: bool>;\n+\n+impl True for Is<true> {}\n+\n+fn g<T>()\n+//~^ NOTE required by a bound in this\n+where\n+    Is<{ std::mem::size_of::<T>() == 0 }>: True,\n+    //~^ NOTE required by a bound in `g`\n+    //~| NOTE required by this bound in `g`\n+{\n+}\n+\n+fn main() {\n+    g::<usize>();\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected `false`, found `true`\n+    //~| NOTE expected constant `false`\n+}"}, {"sha": "a253ec676f7163e06faba5bca88a7f8682d5d5ff", "filename": "src/test/ui/const-generics/generic_const_exprs/obligation-cause.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobligation-cause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobligation-cause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobligation-cause.stderr?ref=26c86c69931b44732b1554033ba54700f0930060", "patch": "@@ -0,0 +1,20 @@\n+error[E0308]: mismatched types\n+  --> $DIR/obligation-cause.rs:20:5\n+   |\n+LL |     g::<usize>();\n+   |     ^^^^^^^^^^ expected `false`, found `true`\n+   |\n+   = note: expected constant `false`\n+              found constant `true`\n+note: required by a bound in `g`\n+  --> $DIR/obligation-cause.rs:13:44\n+   |\n+LL | fn g<T>()\n+   |    - required by a bound in this\n+...\n+LL |     Is<{ std::mem::size_of::<T>() == 0 }>: True,\n+   |                                            ^^^^ required by this bound in `g`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "7670032e5b758dc86f23505b457ab6b1f8f20136", "filename": "src/test/ui/const-generics/issues/issue-73260.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.stderr?ref=26c86c69931b44732b1554033ba54700f0930060", "patch": "@@ -4,17 +4,33 @@ error[E0308]: mismatched types\n LL |     let x: Arr<{usize::MAX}> = Arr {};\n    |            ^^^^^^^^^^^^^^^^^ expected `false`, found `true`\n    |\n-   = note: expected type `false`\n-              found type `true`\n+   = note: expected constant `false`\n+              found constant `true`\n+note: required by a bound in `Arr`\n+  --> $DIR/issue-73260.rs:6:37\n+   |\n+LL | struct Arr<const N: usize>\n+   |        --- required by a bound in this\n+LL | where\n+LL |     Assert::<{N < usize::MAX / 2}>: IsTrue,\n+   |                                     ^^^^^^ required by this bound in `Arr`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-73260.rs:16:32\n    |\n LL |     let x: Arr<{usize::MAX}> = Arr {};\n    |                                ^^^ expected `false`, found `true`\n    |\n-   = note: expected type `false`\n-              found type `true`\n+   = note: expected constant `false`\n+              found constant `true`\n+note: required by a bound in `Arr`\n+  --> $DIR/issue-73260.rs:6:37\n+   |\n+LL | struct Arr<const N: usize>\n+   |        --- required by a bound in this\n+LL | where\n+LL |     Assert::<{N < usize::MAX / 2}>: IsTrue,\n+   |                                     ^^^^^^ required by this bound in `Arr`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "02b48b55f8b38e364b499d01af21e64ab0ea4e18", "filename": "src/test/ui/const-generics/issues/issue-79674.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-79674.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-79674.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-79674.stderr?ref=26c86c69931b44732b1554033ba54700f0930060", "patch": "@@ -4,8 +4,16 @@ error[E0308]: mismatched types\n LL |     requires_distinct(\"str\", 12);\n    |     ^^^^^^^^^^^^^^^^^ expected `true`, found `false`\n    |\n-   = note: expected type `true`\n-              found type `false`\n+   = note: expected constant `true`\n+              found constant `false`\n+note: required by a bound in `requires_distinct`\n+  --> $DIR/issue-79674.rs:23:37\n+   |\n+LL | fn requires_distinct<A, B>(_a: A, _b: B) where\n+   |    ----------------- required by a bound in this\n+LL |     A: MiniTypeId, B: MiniTypeId,\n+LL |     Lift<{is_same_type::<A, B>()}>: IsFalse {}\n+   |                                     ^^^^^^^ required by this bound in `requires_distinct`\n \n error: aborting due to previous error\n "}, {"sha": "b6a22df74369a3ebc849e884d4f0ebd6869fae0b", "filename": "src/test/ui/const-generics/types-mismatch-const-args.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86c69931b44732b1554033ba54700f0930060/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.full.stderr?ref=26c86c69931b44732b1554033ba54700f0930060", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let _: A<'a, u32, {2u32}, {3u32}> = A::<'a, u32, {2u32 + 2u32}, {3u32}> { data: PhantomData };\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2`, found `4`\n    |\n-   = note: expected type `2`\n-              found type `4`\n+   = note: expected constant `2`\n+              found constant `4`\n \n error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:16:41"}]}