{"sha": "8a872943ff0fac763eefa52de1ffb1344e698d98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhODcyOTQzZmYwZmFjNzYzZWVmYTUyZGUxZmZiMTM0NGU2OThkOTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-26T09:49:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-26T09:49:36Z"}, "message": "Auto merge of #25778 - econoplas:master, r=pnkfelix\n\nA regression was introduced by commit https://github.com/rust-lang/rust/commit/7b1916d25347913fce3e336517ef22025ccd875f #25612.  Negative signed integer literals less than -9223372036854775808i64 were no longer properly reported as #[warn(overflowing_literals)].\r\n\r\nAlso adding missing test cases to test/compile-fail/lint-type-overflow.rs which could have detected the regression.\r\n\r\nFurther explanation:\r\n\r\nThe expression `(negative && v > max as u64 + 1)` relies on the fact that algebraically speaking `-min == max + 1` to avoid negation and removing the need for `min` completely.\r\n\r\nIf i128 or i256 are ever added, it should also work for these types without requiring a change to `min != i64::MIN &&` also simplifying maintenance.\r\n\r\nr? @pnkfelix", "tree": {"sha": "5f32fff3a69b8d16d93f01375175527c2199f742", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f32fff3a69b8d16d93f01375175527c2199f742"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a872943ff0fac763eefa52de1ffb1344e698d98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a872943ff0fac763eefa52de1ffb1344e698d98", "html_url": "https://github.com/rust-lang/rust/commit/8a872943ff0fac763eefa52de1ffb1344e698d98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a872943ff0fac763eefa52de1ffb1344e698d98/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cb9914fceaeaa6a39add43d3da15bb6e1d191f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cb9914fceaeaa6a39add43d3da15bb6e1d191f6", "html_url": "https://github.com/rust-lang/rust/commit/7cb9914fceaeaa6a39add43d3da15bb6e1d191f6"}, {"sha": "43502adf071392df3dd74f019f6973d4b757e7d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/43502adf071392df3dd74f019f6973d4b757e7d7", "html_url": "https://github.com/rust-lang/rust/commit/43502adf071392df3dd74f019f6973d4b757e7d7"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "50fdeb391056f7004d3cd3af2afccd794011f33f", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a872943ff0fac763eefa52de1ffb1344e698d98/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a872943ff0fac763eefa52de1ffb1344e698d98/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=8a872943ff0fac763eefa52de1ffb1344e698d98", "patch": "@@ -203,10 +203,12 @@ impl LintPass for TypeLimits {\n                                 } else {\n                                     t\n                                 };\n-                                let (min, max) = int_ty_range(int_type);\n+                                let (_, max) = int_ty_range(int_type);\n                                 let negative = self.negated_expr_id == e.id;\n \n-                                if (negative && min != i64::MIN && v > -min as u64) ||\n+                                // Detect literal value out of range [min, max] inclusive\n+                                // avoiding use of -min to prevent overflow/panic\n+                                if (negative && v > max as u64 + 1) ||\n                                    (!negative && v > max as u64) {\n                                     cx.span_lint(OVERFLOWING_LITERALS, e.span,\n                                                  &*format!(\"literal out of range for {:?}\", t));"}, {"sha": "eb5b77f7a45a352a3d7fa6a0287e26e7ff188cf0", "filename": "src/test/compile-fail/lint-type-overflow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a872943ff0fac763eefa52de1ffb1344e698d98/src%2Ftest%2Fcompile-fail%2Flint-type-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a872943ff0fac763eefa52de1ffb1344e698d98/src%2Ftest%2Fcompile-fail%2Flint-type-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-overflow.rs?ref=8a872943ff0fac763eefa52de1ffb1344e698d98", "patch": "@@ -52,6 +52,8 @@ fn main() {\n     let x = 9223372036854775808_i64; //~ error: literal out of range for i64\n     let x = -9223372036854775808_i64; // should be OK\n     let x = 18446744073709551615_i64; //~ error: literal out of range for i64\n+    let x: i64 = -9223372036854775809; //~ error: literal out of range for i64\n+    let x = -9223372036854775809_i64; //~ error: literal out of range for i64\n \n     let x = -3.40282348e+38_f32; //~ error: literal out of range for f32\n     let x =  3.40282348e+38_f32; //~ error: literal out of range for f32"}]}