{"sha": "f1ce0e6a00593493a12e0e3662119786c761f375", "node_id": "C_kwDOAAsO6NoAKGYxY2UwZTZhMDA1OTM0OTNhMTJlMGUzNjYyMTE5Nzg2Yzc2MWYzNzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-05T15:28:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-05T15:28:36Z"}, "message": "Auto merge of #92587 - matthiaskrgr:rollup-qnwa8qx, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #92092 (Drop guards in slice sorting derive src pointers from &mut T, which is invalidated by interior mutation in comparison)\n - #92388 (Fix a minor mistake in `String::try_reserve_exact` examples)\n - #92442 (Add negative `impl` for `Ord`, `PartialOrd` on `LocalDefId`)\n - #92483 (Stabilize `result_cloned` and `result_copied`)\n - #92574 (Add RISC-V detection macro and more architecture instructions)\n - #92575 (ast: Always keep a `NodeId` in `ast::Crate`)\n - #92583 (:arrow_up: rust-analyzer)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "6aee1796cbafc3679884be8a99b43791d3f2ca20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6aee1796cbafc3679884be8a99b43791d3f2ca20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1ce0e6a00593493a12e0e3662119786c761f375", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ce0e6a00593493a12e0e3662119786c761f375", "html_url": "https://github.com/rust-lang/rust/commit/f1ce0e6a00593493a12e0e3662119786c761f375", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1ce0e6a00593493a12e0e3662119786c761f375/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "181e91567c9f347e055b33b1d7e9894f769aafe3", "url": "https://api.github.com/repos/rust-lang/rust/commits/181e91567c9f347e055b33b1d7e9894f769aafe3", "html_url": "https://github.com/rust-lang/rust/commit/181e91567c9f347e055b33b1d7e9894f769aafe3"}, {"sha": "439a1254b9de9b82384f41c904a13c415f9e5600", "url": "https://api.github.com/repos/rust-lang/rust/commits/439a1254b9de9b82384f41c904a13c415f9e5600", "html_url": "https://github.com/rust-lang/rust/commit/439a1254b9de9b82384f41c904a13c415f9e5600"}], "stats": {"total": 131, "additions": 77, "deletions": 54}, "files": [{"sha": "a2d32cdc00fb001b2c03077f9d99ccdf78bd4935", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1ce0e6a00593493a12e0e3662119786c761f375/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ce0e6a00593493a12e0e3662119786c761f375/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=f1ce0e6a00593493a12e0e3662119786c761f375", "patch": "@@ -510,8 +510,10 @@ pub struct Crate {\n     pub attrs: Vec<Attribute>,\n     pub items: Vec<P<Item>>,\n     pub span: Span,\n-    // Placeholder ID if the crate node is a macro placeholder.\n-    pub is_placeholder: Option<NodeId>,\n+    /// Must be equal to `CRATE_NODE_ID` after the crate root is expanded, but may hold\n+    /// expansion placeholders or an unassigned value (`DUMMY_NODE_ID`) before that.\n+    pub id: NodeId,\n+    pub is_placeholder: bool,\n }\n \n /// Possible values inside of compile-time attribute lists."}, {"sha": "9ef78aaf6673aaec316d006fa25ac37cf552fbc6", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1ce0e6a00593493a12e0e3662119786c761f375/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ce0e6a00593493a12e0e3662119786c761f375/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=f1ce0e6a00593493a12e0e3662119786c761f375", "patch": "@@ -1109,7 +1109,8 @@ pub fn noop_visit_fn_header<T: MutVisitor>(header: &mut FnHeader, vis: &mut T) {\n }\n \n pub fn noop_visit_crate<T: MutVisitor>(krate: &mut Crate, vis: &mut T) {\n-    let Crate { attrs, items, span, is_placeholder: _ } = krate;\n+    let Crate { attrs, items, span, id, is_placeholder: _ } = krate;\n+    vis.visit_id(id);\n     visit_attrs(attrs, vis);\n     items.flat_map_in_place(|item| vis.flat_map_item(item));\n     vis.visit_span(span);\n@@ -1554,6 +1555,7 @@ impl DummyAstNode for Crate {\n             attrs: Default::default(),\n             items: Default::default(),\n             span: Default::default(),\n+            id: DUMMY_NODE_ID,\n             is_placeholder: Default::default(),\n         }\n     }"}, {"sha": "7f49f80a8439bd5dc8ea38a1bc84736689c19e29", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1ce0e6a00593493a12e0e3662119786c761f375/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ce0e6a00593493a12e0e3662119786c761f375/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=f1ce0e6a00593493a12e0e3662119786c761f375", "patch": "@@ -377,6 +377,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             dir_path,\n         });\n         let krate = self.fully_expand_fragment(AstFragment::Crate(krate)).make_crate();\n+        assert_eq!(krate.id, ast::CRATE_NODE_ID);\n         self.cx.trace_macros_diag();\n         krate\n     }\n@@ -1169,7 +1170,8 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                         attrs: Vec::new(),\n                         items: Vec::new(),\n                         span,\n-                        is_placeholder: None,\n+                        id: self.cx.resolver.next_node_id(),\n+                        is_placeholder: false,\n                     };\n                 }\n             };\n@@ -1180,7 +1182,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                     .make_crate();\n             }\n \n-            noop_visit_crate(&mut krate, self);\n+            assign_id!(self, &mut krate.id, || noop_visit_crate(&mut krate, self));\n             krate\n         })\n     }"}, {"sha": "825af9a7b2bd921b6d53a23b66717a845369d1f6", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f1ce0e6a00593493a12e0e3662119786c761f375/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ce0e6a00593493a12e0e3662119786c761f375/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=f1ce0e6a00593493a12e0e3662119786c761f375", "patch": "@@ -50,7 +50,8 @@ pub fn placeholder(\n             attrs: Default::default(),\n             items: Default::default(),\n             span,\n-            is_placeholder: Some(id),\n+            id,\n+            is_placeholder: true,\n         }),\n         AstFragmentKind::Expr => AstFragment::Expr(expr_placeholder()),\n         AstFragmentKind::OptExpr => AstFragment::OptExpr(Some(expr_placeholder())),\n@@ -362,8 +363,8 @@ impl MutVisitor for PlaceholderExpander {\n     }\n \n     fn visit_crate(&mut self, krate: &mut ast::Crate) {\n-        if let Some(id) = krate.is_placeholder {\n-            *krate = self.remove(id).make_crate();\n+        if krate.is_placeholder {\n+            *krate = self.remove(krate.id).make_crate();\n         } else {\n             noop_visit_crate(krate, self)\n         }"}, {"sha": "33bf670f570f897631d6320468bf1a4eebb61d79", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1ce0e6a00593493a12e0e3662119786c761f375/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ce0e6a00593493a12e0e3662119786c761f375/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=f1ce0e6a00593493a12e0e3662119786c761f375", "patch": "@@ -3,7 +3,7 @@ use crate::proc_macro_decls;\n use crate::util;\n \n use rustc_ast::mut_visit::MutVisitor;\n-use rustc_ast::{self as ast, visit};\n+use rustc_ast::{self as ast, visit, DUMMY_NODE_ID};\n use rustc_borrowck as mir_borrowck;\n use rustc_codegen_ssa::back::link::emit_metadata;\n use rustc_codegen_ssa::traits::CodegenBackend;\n@@ -323,7 +323,7 @@ pub fn configure_and_expand(\n \n         let crate_attrs = krate.attrs.clone();\n         let extern_mod_loaded = |ident: Ident, attrs, items, span| {\n-            let krate = ast::Crate { attrs, items, span, is_placeholder: None };\n+            let krate = ast::Crate { attrs, items, span, id: DUMMY_NODE_ID, is_placeholder: false };\n             pre_expansion_lint(sess, lint_store, &krate, &crate_attrs, ident.name.as_str());\n             (krate.attrs, krate.items)\n         };"}, {"sha": "ade441b0e7d5c856fd8095e0f83261cb1030b30e", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1ce0e6a00593493a12e0e3662119786c761f375/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ce0e6a00593493a12e0e3662119786c761f375/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=f1ce0e6a00593493a12e0e3662119786c761f375", "patch": "@@ -27,7 +27,7 @@ impl<'a> Parser<'a> {\n     /// Parses a source module as a crate. This is the main entry point for the parser.\n     pub fn parse_crate_mod(&mut self) -> PResult<'a, ast::Crate> {\n         let (attrs, items, span) = self.parse_mod(&token::Eof)?;\n-        Ok(ast::Crate { attrs, items, span, is_placeholder: None })\n+        Ok(ast::Crate { attrs, items, span, id: DUMMY_NODE_ID, is_placeholder: false })\n     }\n \n     /// Parses a `mod <foo> { ... }` or `mod <foo>;` item."}, {"sha": "39074f811a50beaf7186aed2ecf91887a2e8402f", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1ce0e6a00593493a12e0e3662119786c761f375/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ce0e6a00593493a12e0e3662119786c761f375/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=f1ce0e6a00593493a12e0e3662119786c761f375", "patch": "@@ -1512,8 +1512,8 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n     }\n \n     fn visit_crate(&mut self, krate: &'b ast::Crate) {\n-        if let Some(id) = krate.is_placeholder {\n-            self.visit_invoc_in_module(id);\n+        if krate.is_placeholder {\n+            self.visit_invoc_in_module(krate.id);\n         } else {\n             visit::walk_crate(self, krate);\n             self.contains_macro_use(&krate.attrs);"}, {"sha": "8ea5dca6f108a64ae7a5cabe661fc66059c1a2f6", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1ce0e6a00593493a12e0e3662119786c761f375/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ce0e6a00593493a12e0e3662119786c761f375/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=f1ce0e6a00593493a12e0e3662119786c761f375", "patch": "@@ -344,8 +344,8 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n     }\n \n     fn visit_crate(&mut self, krate: &'a Crate) {\n-        if let Some(id) = krate.is_placeholder {\n-            self.visit_macro_invoc(id)\n+        if krate.is_placeholder {\n+            self.visit_macro_invoc(krate.id)\n         } else {\n             visit::walk_crate(self, krate)\n         }"}, {"sha": "2008570d6f0efecf198b10b6f840266dee3dfba8", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f1ce0e6a00593493a12e0e3662119786c761f375/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ce0e6a00593493a12e0e3662119786c761f375/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=f1ce0e6a00593493a12e0e3662119786c761f375", "patch": "@@ -68,7 +68,7 @@ use smallvec::{smallvec, SmallVec};\n use std::cell::{Cell, RefCell};\n use std::collections::{BTreeMap, BTreeSet};\n use std::ops::ControlFlow;\n-use std::{cmp, fmt, iter, ptr};\n+use std::{cmp, fmt, iter, mem, ptr};\n use tracing::debug;\n \n use diagnostics::{extend_span_to_previous_binding, find_span_of_binding_until_next_binding};\n@@ -1394,7 +1394,7 @@ impl<'a> Resolver<'a> {\n                 .chain(features.declared_lang_features.iter().map(|(feat, ..)| *feat))\n                 .collect(),\n             lint_buffer: LintBuffer::default(),\n-            next_node_id: NodeId::from_u32(1),\n+            next_node_id: CRATE_NODE_ID,\n             node_id_to_def_id,\n             def_id_to_node_id,\n             placeholder_field_indices: Default::default(),\n@@ -1430,8 +1430,7 @@ impl<'a> Resolver<'a> {\n     pub fn next_node_id(&mut self) -> NodeId {\n         let next =\n             self.next_node_id.as_u32().checked_add(1).expect(\"input too large; ran out of NodeIds\");\n-        self.next_node_id = ast::NodeId::from_u32(next);\n-        self.next_node_id\n+        mem::replace(&mut self.next_node_id, ast::NodeId::from_u32(next))\n     }\n \n     pub fn lint_buffer(&mut self) -> &mut LintBuffer {"}, {"sha": "f6b0785a07c0e4c3004938d698f077fbb0d3f574", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1ce0e6a00593493a12e0e3662119786c761f375/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ce0e6a00593493a12e0e3662119786c761f375/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=f1ce0e6a00593493a12e0e3662119786c761f375", "patch": "@@ -316,17 +316,23 @@ impl fmt::Debug for DefId {\n \n rustc_data_structures::define_id_collections!(DefIdMap, DefIdSet, DefId);\n \n-/// A LocalDefId is equivalent to a DefId with `krate == LOCAL_CRATE`. Since\n+/// A `LocalDefId` is equivalent to a `DefId` with `krate == LOCAL_CRATE`. Since\n /// we encode this information in the type, we can ensure at compile time that\n-/// no DefIds from upstream crates get thrown into the mix. There are quite a\n-/// few cases where we know that only DefIds from the local crate are expected\n-/// and a DefId from a different crate would signify a bug somewhere. This\n-/// is when LocalDefId comes in handy.\n+/// no `DefId`s from upstream crates get thrown into the mix. There are quite a\n+/// few cases where we know that only `DefId`s from the local crate are expected;\n+/// a `DefId` from a different crate would signify a bug somewhere. This\n+/// is when `LocalDefId` comes in handy.\n #[derive(Clone, Copy, PartialEq, Eq, Hash)]\n pub struct LocalDefId {\n     pub local_def_index: DefIndex,\n }\n \n+// To ensure correctness of incremental compilation,\n+// `LocalDefId` must not implement `Ord` or `PartialOrd`.\n+// See https://github.com/rust-lang/rust/issues/90317.\n+impl !Ord for LocalDefId {}\n+impl !PartialOrd for LocalDefId {}\n+\n pub const CRATE_DEF_ID: LocalDefId = LocalDefId { local_def_index: CRATE_DEF_INDEX };\n \n impl Idx for LocalDefId {"}, {"sha": "8853577371ad6d7dd62e1d65bba4c851eea5bbc6", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1ce0e6a00593493a12e0e3662119786c761f375/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ce0e6a00593493a12e0e3662119786c761f375/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=f1ce0e6a00593493a12e0e3662119786c761f375", "patch": "@@ -892,7 +892,7 @@ where\n             //    performance than with the 2nd method.\n             //\n             // All methods were benchmarked, and the 3rd showed best results. So we chose that one.\n-            let mut tmp = mem::ManuallyDrop::new(ptr::read(&v[0]));\n+            let tmp = mem::ManuallyDrop::new(ptr::read(&v[0]));\n \n             // Intermediate state of the insertion process is always tracked by `hole`, which\n             // serves two purposes:\n@@ -904,7 +904,7 @@ where\n             // If `is_less` panics at any point during the process, `hole` will get dropped and\n             // fill the hole in `v` with `tmp`, thus ensuring that `v` still holds every object it\n             // initially held exactly once.\n-            let mut hole = InsertionHole { src: &mut *tmp, dest: &mut v[1] };\n+            let mut hole = InsertionHole { src: &*tmp, dest: &mut v[1] };\n             ptr::copy_nonoverlapping(&v[1], &mut v[0], 1);\n \n             for i in 2..v.len() {\n@@ -920,7 +920,7 @@ where\n \n     // When dropped, copies from `src` into `dest`.\n     struct InsertionHole<T> {\n-        src: *mut T,\n+        src: *const T,\n         dest: *mut T,\n     }\n "}, {"sha": "7c0faf0659a2cd0c042364dccf8cd246b2abf0ce", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1ce0e6a00593493a12e0e3662119786c761f375/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ce0e6a00593493a12e0e3662119786c761f375/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=f1ce0e6a00593493a12e0e3662119786c761f375", "patch": "@@ -1062,7 +1062,7 @@ impl String {\n     ///     let mut output = String::new();\n     ///\n     ///     // Pre-reserve the memory, exiting if we can't\n-    ///     output.try_reserve(data.len())?;\n+    ///     output.try_reserve_exact(data.len())?;\n     ///\n     ///     // Now we know this can't OOM in the middle of our complex work\n     ///     output.push_str(data);"}, {"sha": "330c43d2948357f3951c7a4e3cdd69407499f3f9", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f1ce0e6a00593493a12e0e3662119786c761f375/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ce0e6a00593493a12e0e3662119786c761f375/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=f1ce0e6a00593493a12e0e3662119786c761f375", "patch": "@@ -123,6 +123,21 @@ pub fn spin_loop() {\n         }\n     }\n \n+    // RISC-V platform spin loop hint implementation\n+    {\n+        // RISC-V RV32 and RV64 share the same PAUSE instruction, but they are located in different\n+        // modules in `core::arch`.\n+        // In this case, here we call `pause` function in each core arch module.\n+        #[cfg(target_arch = \"riscv32\")]\n+        {\n+            crate::arch::riscv32::pause();\n+        }\n+        #[cfg(target_arch = \"riscv64\")]\n+        {\n+            crate::arch::riscv64::pause();\n+        }\n+    }\n+\n     #[cfg(any(target_arch = \"aarch64\", all(target_arch = \"arm\", target_feature = \"v6\")))]\n     {\n         #[cfg(target_arch = \"aarch64\")]\n@@ -137,11 +152,6 @@ pub fn spin_loop() {\n             unsafe { crate::arch::arm::__yield() };\n         }\n     }\n-\n-    #[cfg(any(target_arch = \"riscv32\", target_arch = \"riscv64\"))]\n-    {\n-        crate::arch::riscv::pause();\n-    }\n }\n \n /// An identity function that *__hints__* to the compiler to be maximally pessimistic about what"}, {"sha": "575fd2b42d2132d72c9c91f7323542056a9145ea", "filename": "library/core/src/result.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1ce0e6a00593493a12e0e3662119786c761f375/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ce0e6a00593493a12e0e3662119786c761f375/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=f1ce0e6a00593493a12e0e3662119786c761f375", "patch": "@@ -1504,14 +1504,14 @@ impl<T, E> Result<&T, E> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(result_copied)]\n     /// let val = 12;\n     /// let x: Result<&i32, i32> = Ok(&val);\n     /// assert_eq!(x, Ok(&12));\n     /// let copied = x.copied();\n     /// assert_eq!(copied, Ok(12));\n     /// ```\n-    #[unstable(feature = \"result_copied\", reason = \"newly added\", issue = \"63168\")]\n+    #[inline]\n+    #[stable(feature = \"result_copied\", since = \"1.59.0\")]\n     pub fn copied(self) -> Result<T, E>\n     where\n         T: Copy,\n@@ -1525,14 +1525,14 @@ impl<T, E> Result<&T, E> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(result_cloned)]\n     /// let val = 12;\n     /// let x: Result<&i32, i32> = Ok(&val);\n     /// assert_eq!(x, Ok(&12));\n     /// let cloned = x.cloned();\n     /// assert_eq!(cloned, Ok(12));\n     /// ```\n-    #[unstable(feature = \"result_cloned\", reason = \"newly added\", issue = \"63168\")]\n+    #[inline]\n+    #[stable(feature = \"result_cloned\", since = \"1.59.0\")]\n     pub fn cloned(self) -> Result<T, E>\n     where\n         T: Clone,\n@@ -1548,14 +1548,14 @@ impl<T, E> Result<&mut T, E> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(result_copied)]\n     /// let mut val = 12;\n     /// let x: Result<&mut i32, i32> = Ok(&mut val);\n     /// assert_eq!(x, Ok(&mut 12));\n     /// let copied = x.copied();\n     /// assert_eq!(copied, Ok(12));\n     /// ```\n-    #[unstable(feature = \"result_copied\", reason = \"newly added\", issue = \"63168\")]\n+    #[inline]\n+    #[stable(feature = \"result_copied\", since = \"1.59.0\")]\n     pub fn copied(self) -> Result<T, E>\n     where\n         T: Copy,\n@@ -1569,14 +1569,14 @@ impl<T, E> Result<&mut T, E> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(result_cloned)]\n     /// let mut val = 12;\n     /// let x: Result<&mut i32, i32> = Ok(&mut val);\n     /// assert_eq!(x, Ok(&mut 12));\n     /// let cloned = x.cloned();\n     /// assert_eq!(cloned, Ok(12));\n     /// ```\n-    #[unstable(feature = \"result_cloned\", reason = \"newly added\", issue = \"63168\")]\n+    #[inline]\n+    #[stable(feature = \"result_cloned\", since = \"1.59.0\")]\n     pub fn cloned(self) -> Result<T, E>\n     where\n         T: Clone,"}, {"sha": "8f58e8897b34bc493ce01a38fbda4d0ad838d0e5", "filename": "library/core/src/slice/sort.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f1ce0e6a00593493a12e0e3662119786c761f375/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ce0e6a00593493a12e0e3662119786c761f375/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs?ref=f1ce0e6a00593493a12e0e3662119786c761f375", "patch": "@@ -12,7 +12,7 @@ use crate::ptr;\n \n /// When dropped, copies from `src` into `dest`.\n struct CopyOnDrop<T> {\n-    src: *mut T,\n+    src: *const T,\n     dest: *mut T,\n }\n \n@@ -54,9 +54,9 @@ where\n             // Read the first element into a stack-allocated variable. If a following comparison\n             // operation panics, `hole` will get dropped and automatically write the element back\n             // into the slice.\n-            let mut tmp = mem::ManuallyDrop::new(ptr::read(v.get_unchecked(0)));\n+            let tmp = mem::ManuallyDrop::new(ptr::read(v.get_unchecked(0)));\n             let v = v.as_mut_ptr();\n-            let mut hole = CopyOnDrop { src: &mut *tmp, dest: v.add(1) };\n+            let mut hole = CopyOnDrop { src: &*tmp, dest: v.add(1) };\n             ptr::copy_nonoverlapping(v.add(1), v.add(0), 1);\n \n             for i in 2..len {\n@@ -100,9 +100,9 @@ where\n             // Read the last element into a stack-allocated variable. If a following comparison\n             // operation panics, `hole` will get dropped and automatically write the element back\n             // into the slice.\n-            let mut tmp = mem::ManuallyDrop::new(ptr::read(v.get_unchecked(len - 1)));\n+            let tmp = mem::ManuallyDrop::new(ptr::read(v.get_unchecked(len - 1)));\n             let v = v.as_mut_ptr();\n-            let mut hole = CopyOnDrop { src: &mut *tmp, dest: v.add(len - 2) };\n+            let mut hole = CopyOnDrop { src: &*tmp, dest: v.add(len - 2) };\n             ptr::copy_nonoverlapping(v.add(len - 2), v.add(len - 1), 1);\n \n             for i in (0..len - 2).rev() {\n@@ -498,8 +498,8 @@ where\n         // operation panics, the pivot will be automatically written back into the slice.\n \n         // SAFETY: `pivot` is a reference to the first element of `v`, so `ptr::read` is safe.\n-        let mut tmp = mem::ManuallyDrop::new(unsafe { ptr::read(pivot) });\n-        let _pivot_guard = CopyOnDrop { src: &mut *tmp, dest: pivot };\n+        let tmp = mem::ManuallyDrop::new(unsafe { ptr::read(pivot) });\n+        let _pivot_guard = CopyOnDrop { src: &*tmp, dest: pivot };\n         let pivot = &*tmp;\n \n         // Find the first pair of out-of-order elements.\n@@ -551,8 +551,8 @@ where\n     // Read the pivot into a stack-allocated variable for efficiency. If a following comparison\n     // operation panics, the pivot will be automatically written back into the slice.\n     // SAFETY: The pointer here is valid because it is obtained from a reference to a slice.\n-    let mut tmp = mem::ManuallyDrop::new(unsafe { ptr::read(pivot) });\n-    let _pivot_guard = CopyOnDrop { src: &mut *tmp, dest: pivot };\n+    let tmp = mem::ManuallyDrop::new(unsafe { ptr::read(pivot) });\n+    let _pivot_guard = CopyOnDrop { src: &*tmp, dest: pivot };\n     let pivot = &*tmp;\n \n     // Now partition the slice."}, {"sha": "d5f9d20c426e28b22ba47f535d1d9ba12c9ba6d2", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ce0e6a00593493a12e0e3662119786c761f375/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ce0e6a00593493a12e0e3662119786c761f375/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=f1ce0e6a00593493a12e0e3662119786c761f375", "patch": "@@ -556,6 +556,7 @@ pub use std_detect::*;\n pub use std_detect::{\n     is_aarch64_feature_detected, is_arm_feature_detected, is_mips64_feature_detected,\n     is_mips_feature_detected, is_powerpc64_feature_detected, is_powerpc_feature_detected,\n+    is_riscv_feature_detected,\n };\n \n // Re-export macros defined in libcore."}, {"sha": "2adc17a5442614dbe34626fdd9b32de7c07b8086", "filename": "library/stdarch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstdarch?ref=f1ce0e6a00593493a12e0e3662119786c761f375", "patch": "@@ -1 +1 @@\n-Subproject commit 0716b22e902207efabe46879cbf28d0189ab7924\n+Subproject commit 2adc17a5442614dbe34626fdd9b32de7c07b8086"}, {"sha": "ab70c5b91c65c73ea98911ac6569e712d82498a0", "filename": "src/test/ui/ast-json/ast-json-noexpand-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1ce0e6a00593493a12e0e3662119786c761f375/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f1ce0e6a00593493a12e0e3662119786c761f375/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout?ref=f1ce0e6a00593493a12e0e3662119786c761f375", "patch": "@@ -1 +1 @@\n-{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"span\":{\"lo\":0,\"hi\":0},\"is_placeholder\":null}\n+{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"span\":{\"lo\":0,\"hi\":0},\"id\":0,\"is_placeholder\":false}"}, {"sha": "f3663d9953b8aeea7995f579a303ef22a1dedca8", "filename": "src/test/ui/ast-json/ast-json-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1ce0e6a00593493a12e0e3662119786c761f375/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f1ce0e6a00593493a12e0e3662119786c761f375/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout?ref=f1ce0e6a00593493a12e0e3662119786c761f375", "patch": "@@ -1 +1 @@\n-{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"rust_2015\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"span\":{\"lo\":0,\"hi\":0},\"is_placeholder\":null}\n+{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"rust_2015\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"span\":{\"lo\":0,\"hi\":0},\"id\":0,\"is_placeholder\":false}"}, {"sha": "8e9ccbf97a70259b6c6576e8fd7d77d28238737e", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=f1ce0e6a00593493a12e0e3662119786c761f375", "patch": "@@ -1 +1 @@\n-Subproject commit 68319187d63707fa36d7c215ed0e444e87d9652a\n+Subproject commit 8e9ccbf97a70259b6c6576e8fd7d77d28238737e"}]}