{"sha": "cd21e4a72c0175d226acc837d1886cfdfa40fe68", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMjFlNGE3MmMwMTc1ZDIyNmFjYzgzN2QxODg2Y2ZkZmE0MGZlNjg=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-04T23:22:42Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-07T02:49:53Z"}, "message": "Rename slice::Slice", "tree": {"sha": "b9860886daf57e5ce87e8863208e4ab0a3e947bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9860886daf57e5ce87e8863208e4ab0a3e947bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd21e4a72c0175d226acc837d1886cfdfa40fe68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd21e4a72c0175d226acc837d1886cfdfa40fe68", "html_url": "https://github.com/rust-lang/rust/commit/cd21e4a72c0175d226acc837d1886cfdfa40fe68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd21e4a72c0175d226acc837d1886cfdfa40fe68/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d3823441fe5324f747f7bf51ffc07b9434f827f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d3823441fe5324f747f7bf51ffc07b9434f827f", "html_url": "https://github.com/rust-lang/rust/commit/2d3823441fe5324f747f7bf51ffc07b9434f827f"}], "stats": {"total": 98, "additions": 30, "deletions": 68}, "files": [{"sha": "ab182bd5602e84960b6e35f1426a592dc9bc5bcb", "filename": "src/libcollections/hash/sip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibcollections%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibcollections%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhash%2Fsip.rs?ref=cd21e4a72c0175d226acc837d1886cfdfa40fe68", "patch": "@@ -273,7 +273,7 @@ mod tests {\n \n     use str::Str;\n     use string::String;\n-    use slice::{Slice, ImmutableSlice};\n+    use slice::{AsSlice, ImmutableSlice};\n     use vec::Vec;\n \n     use super::super::{Hash, Writer};"}, {"sha": "e07f6dbd35d0240931c94de6255b5f11c07ec3ab", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=cd21e4a72c0175d226acc837d1886cfdfa40fe68", "patch": "@@ -98,7 +98,7 @@ use core::iter::{range_step, MultiplicativeIterator};\n use MutableSeq;\n use vec::Vec;\n \n-pub use core::slice::{Chunks, Slice, ImmutableSlice, ImmutablePartialEqSlice};\n+pub use core::slice::{Chunks, AsSlice, ImmutableSlice, ImmutablePartialEqSlice};\n pub use core::slice::{ImmutableOrdSlice, MutableSlice, Items, MutItems};\n pub use core::slice::{MutSplits, MutChunks, Splits};\n pub use core::slice::{bytes, mut_ref_slice, ref_slice, MutableCloneableSlice};\n@@ -117,7 +117,7 @@ pub trait VectorVector<T> {\n     fn connect_vec(&self, sep: &T) -> Vec<T>;\n }\n \n-impl<'a, T: Clone, V: Slice<T>> VectorVector<T> for &'a [V] {\n+impl<'a, T: Clone, V: AsSlice<T>> VectorVector<T> for &'a [V] {\n     fn concat_vec(&self) -> Vec<T> {\n         let size = self.iter().fold(0u, |acc, v| acc + v.as_slice().len());\n         let mut result = Vec::with_capacity(size);"}, {"sha": "aabf5544954ce29a98b9a2ffec02ceac2562bab9", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=cd21e4a72c0175d226acc837d1886cfdfa40fe68", "patch": "@@ -61,7 +61,7 @@ use core::iter::AdditiveIterator;\n use core::mem;\n use core::prelude::{Char, Clone, Collection, Eq, Equiv, ImmutableSlice};\n use core::prelude::{Iterator, MutableSlice, None, Option, Ord, Ordering};\n-use core::prelude::{PartialEq, PartialOrd, Result, Slice, Some, Tuple2};\n+use core::prelude::{PartialEq, PartialOrd, Result, AsSlice, Some, Tuple2};\n use core::prelude::{range};\n \n use {Deque, MutableSeq};\n@@ -880,7 +880,7 @@ mod tests {\n     use {Collection, MutableSeq};\n \n     use super::*;\n-    use std::slice::{Slice, ImmutableSlice};\n+    use std::slice::{AsSlice, ImmutableSlice};\n     use string::String;\n     use vec::Vec;\n "}, {"sha": "b995af952f119ffc15e92f1ac9c0595091cb09d6", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=cd21e4a72c0175d226acc837d1886cfdfa40fe68", "patch": "@@ -547,7 +547,7 @@ impl<T: PartialOrd> PartialOrd for Vec<T> {\n impl<T: Eq> Eq for Vec<T> {}\n \n #[experimental]\n-impl<T: PartialEq, V: Slice<T>> Equiv<V> for Vec<T> {\n+impl<T: PartialEq, V: AsSlice<T>> Equiv<V> for Vec<T> {\n     #[inline]\n     fn equiv(&self, other: &V) -> bool { self.as_slice() == other.as_slice() }\n }\n@@ -1605,7 +1605,7 @@ impl<T: PartialEq> Vec<T> {\n     }\n }\n \n-impl<T> Slice<T> for Vec<T> {\n+impl<T> AsSlice<T> for Vec<T> {\n     /// Returns a slice into `self`.\n     ///\n     /// # Example\n@@ -1623,7 +1623,7 @@ impl<T> Slice<T> for Vec<T> {\n     }\n }\n \n-impl<T: Clone, V: Slice<T>> Add<V, Vec<T>> for Vec<T> {\n+impl<T: Clone, V: AsSlice<T>> Add<V, Vec<T>> for Vec<T> {\n     #[inline]\n     fn add(&self, rhs: &V) -> Vec<T> {\n         let mut res = Vec::with_capacity(self.len() + rhs.as_slice().len());"}, {"sha": "093f5896aad2d98a80db15001aeeb149f5c9d0be", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=cd21e4a72c0175d226acc837d1886cfdfa40fe68", "patch": "@@ -22,7 +22,7 @@ use option::{Option, Some, None};\n use ops::Deref;\n use result::{Ok, Err};\n use result;\n-use slice::{Slice, ImmutableSlice};\n+use slice::{AsSlice, ImmutableSlice};\n use slice;\n use str::StrSlice;\n use str;"}, {"sha": "ec7d655b0872c414179e4ad9f2423199603ef3be", "filename": "src/libcore/option.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=cd21e4a72c0175d226acc837d1886cfdfa40fe68", "patch": "@@ -149,7 +149,6 @@ use iter::{Iterator, DoubleEndedIterator, FromIterator, ExactSize};\n use mem;\n use result::{Result, Ok, Err};\n use slice;\n-use slice::Slice;\n \n // Note that this is not a lang item per se, but it has a hidden dependency on\n // `Iterator`, which is one. The compiler assumes that the `next` method of\n@@ -846,21 +845,6 @@ impl<T: Default> Option<T> {\n // Trait implementations\n /////////////////////////////////////////////////////////////////////////////\n \n-impl<T> Slice<T> for Option<T> {\n-    /// Convert from `Option<T>` to `&[T]` (without copying)\n-    #[inline]\n-    #[stable]\n-    fn as_slice<'a>(&'a self) -> &'a [T] {\n-        match *self {\n-            Some(ref x) => slice::ref_slice(x),\n-            None => {\n-                let result: &[_] = &[];\n-                result\n-            }\n-        }\n-    }\n-}\n-\n impl<T> Default for Option<T> {\n     #[inline]\n     fn default() -> Option<T> { None }"}, {"sha": "da17b113bf48c80ff81407863b61c78a81277eeb", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=cd21e4a72c0175d226acc837d1886cfdfa40fe68", "patch": "@@ -62,5 +62,4 @@ pub use tuple::{Tuple1, Tuple2, Tuple3, Tuple4};\n pub use tuple::{Tuple5, Tuple6, Tuple7, Tuple8};\n pub use tuple::{Tuple9, Tuple10, Tuple11, Tuple12};\n pub use slice::{ImmutablePartialEqSlice, ImmutableOrdSlice};\n-pub use slice::{MutableSlice};\n-pub use slice::{Slice, ImmutableSlice};\n+pub use slice::{AsSlice, ImmutableSlice, MutableSlice};"}, {"sha": "f734ee8d0cb32152811deae6f39a0882b92cfa99", "filename": "src/libcore/result.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=cd21e4a72c0175d226acc837d1886cfdfa40fe68", "patch": "@@ -280,7 +280,6 @@ use clone::Clone;\n use cmp::PartialEq;\n use std::fmt::Show;\n use slice;\n-use slice::Slice;\n use iter::{Iterator, DoubleEndedIterator, FromIterator, ExactSize};\n use option::{None, Option, Some};\n \n@@ -840,26 +839,6 @@ impl<T: Show, E> Result<T, E> {\n     }\n }\n \n-/////////////////////////////////////////////////////////////////////////////\n-// Trait implementations\n-/////////////////////////////////////////////////////////////////////////////\n-\n-impl<T, E> Slice<T> for Result<T, E> {\n-    /// Convert from `Result<T, E>` to `&[T]` (without copying)\n-    #[inline]\n-    #[stable]\n-    fn as_slice<'a>(&'a self) -> &'a [T] {\n-        match *self {\n-            Ok(ref x) => slice::ref_slice(x),\n-            Err(_) => {\n-                // work around lack of implicit coercion from fixed-size array to slice\n-                let emp: &[_] = &[];\n-                emp\n-            }\n-        }\n-    }\n-}\n-\n /////////////////////////////////////////////////////////////////////////////\n // The Result Iterator\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "675037517428cc559369f7830124a3f8618ffbcd", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=cd21e4a72c0175d226acc837d1886cfdfa40fe68", "patch": "@@ -1143,13 +1143,13 @@ impl<'a, T:Clone> MutableCloneableSlice<T> for &'a mut [T] {\n \n /// Data that is viewable as a slice.\n #[unstable = \"may merge with other traits\"]\n-pub trait Slice<T> {\n+pub trait AsSlice<T> {\n     /// Work with `self` as a slice.\n     fn as_slice<'a>(&'a self) -> &'a [T];\n }\n \n #[unstable = \"trait is unstable\"]\n-impl<'a,T> Slice<T> for &'a [T] {\n+impl<'a,T> AsSlice<T> for &'a [T] {\n     #[inline(always)]\n     fn as_slice<'a>(&'a self) -> &'a [T] { *self }\n }\n@@ -1828,7 +1828,7 @@ impl<'a,T:PartialEq> PartialEq for &'a [T] {\n impl<'a,T:Eq> Eq for &'a [T] {}\n \n #[unstable = \"waiting for DST\"]\n-impl<'a,T:PartialEq, V: Slice<T>> Equiv<V> for &'a [T] {\n+impl<'a,T:PartialEq, V: AsSlice<T>> Equiv<V> for &'a [T] {\n     #[inline]\n     fn equiv(&self, other: &V) -> bool { self.as_slice() == other.as_slice() }\n }\n@@ -1849,7 +1849,7 @@ impl<'a,T:PartialEq> PartialEq for &'a mut [T] {\n impl<'a,T:Eq> Eq for &'a mut [T] {}\n \n #[unstable = \"waiting for DST\"]\n-impl<'a,T:PartialEq, V: Slice<T>> Equiv<V> for &'a mut [T] {\n+impl<'a,T:PartialEq, V: AsSlice<T>> Equiv<V> for &'a mut [T] {\n     #[inline]\n     fn equiv(&self, other: &V) -> bool { self.as_slice() == other.as_slice() }\n }"}, {"sha": "50d957e1381829999a01f9ef597f7d5c17b7e2af", "filename": "src/libgraphviz/maybe_owned_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Fmaybe_owned_vec.rs?ref=cd21e4a72c0175d226acc837d1886cfdfa40fe68", "patch": "@@ -84,7 +84,7 @@ impl<'a, T: Ord> Ord for MaybeOwnedVector<'a, T> {\n     }\n }\n \n-impl<'a, T: PartialEq, V: Slice<T>> Equiv<V> for MaybeOwnedVector<'a, T> {\n+impl<'a, T: PartialEq, V: AsSlice<T>> Equiv<V> for MaybeOwnedVector<'a, T> {\n     fn equiv(&self, other: &V) -> bool {\n         self.as_slice() == other.as_slice()\n     }\n@@ -99,7 +99,7 @@ impl<'a, T: PartialEq, V: Slice<T>> Equiv<V> for MaybeOwnedVector<'a, T> {\n // In any case, with `Vector` in place, the client can just use\n // `as_slice` if they prefer that over `match`.\n \n-impl<'b,T> Slice<T> for MaybeOwnedVector<'b,T> {\n+impl<'b,T> AsSlice<T> for MaybeOwnedVector<'b,T> {\n     fn as_slice<'a>(&'a self) -> &'a [T] {\n         match self {\n             &Growable(ref v) => v.as_slice(),"}, {"sha": "7a36680b3a62ed09f617609ebe3663cee6ee573c", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=cd21e4a72c0175d226acc837d1886cfdfa40fe68", "patch": "@@ -19,7 +19,7 @@ use fmt;\n use iter::Iterator;\n use mem;\n use option::{Option, Some, None};\n-use slice::{ImmutableSlice, MutableSlice, Slice};\n+use slice::{ImmutableSlice, MutableSlice, AsSlice};\n use str::{Str, StrSlice};\n use string::{mod, String};\n use to_string::IntoStr;"}, {"sha": "95f8ab720169391af38079d9148274323b86ea2e", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=cd21e4a72c0175d226acc837d1886cfdfa40fe68", "patch": "@@ -43,7 +43,7 @@ use option::{Option, Some, None};\n use ptr::RawPtr;\n use ptr;\n use raw;\n-use slice::Slice;\n+use slice::AsSlice;\n \n /// The type representing a foreign chunk of memory\n pub struct CVec<T> {\n@@ -145,7 +145,7 @@ impl<T> CVec<T> {\n     }\n }\n \n-impl<T> Slice<T> for CVec<T> {\n+impl<T> AsSlice<T> for CVec<T> {\n     /// View the stored data as a slice.\n     fn as_slice<'a>(&'a self) -> &'a [T] {\n         unsafe {"}, {"sha": "5cd0b3010c5a18e721f69df5dcfa6c74532a1853", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=cd21e4a72c0175d226acc837d1886cfdfa40fe68", "patch": "@@ -29,7 +29,7 @@ use option::*;\n use os;\n use path::{Path,GenericPath};\n use result::*;\n-use slice::{Slice,ImmutableSlice};\n+use slice::{AsSlice,ImmutableSlice};\n use str;\n use string::String;\n use vec::Vec;"}, {"sha": "57741db5ae2182bd4b27574cc798910bf9e694b7", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=cd21e4a72c0175d226acc837d1886cfdfa40fe68", "patch": "@@ -23,7 +23,7 @@ use num::Int;\n use option::{Option, Some, None};\n use ptr::RawPtr;\n use result::{Ok, Err};\n-use slice::{ImmutableSlice, Slice};\n+use slice::{ImmutableSlice, AsSlice};\n \n /// An iterator that reads a single byte on each iteration,\n /// until `.read_byte()` returns `EndOfFile`."}, {"sha": "0f8e0ed52f8b0bb4440b204db0074bcc37b98d0a", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=cd21e4a72c0175d226acc837d1886cfdfa40fe68", "patch": "@@ -19,7 +19,7 @@ use result::{Err, Ok};\n use io;\n use io::{Reader, Writer, Seek, Buffer, IoError, SeekStyle, IoResult};\n use slice;\n-use slice::Slice;\n+use slice::AsSlice;\n use vec::Vec;\n \n static BUF_CAPACITY: uint = 128;"}, {"sha": "280aff71e2327feca1966f97cb1fc90ad445ee7a", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=cd21e4a72c0175d226acc837d1886cfdfa40fe68", "patch": "@@ -235,7 +235,7 @@ use os;\n use boxed::Box;\n use result::{Ok, Err, Result};\n use rt::rtio;\n-use slice::{Slice, ImmutableSlice};\n+use slice::{AsSlice, ImmutableSlice};\n use str::{Str, StrSlice};\n use str;\n use string::String;"}, {"sha": "bb642f1e48f7106ffbd6ff4501ae452c7367b3a9", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=cd21e4a72c0175d226acc837d1886cfdfa40fe68", "patch": "@@ -45,7 +45,7 @@ use path::{Path, GenericPath, BytesContainer};\n use ptr::RawPtr;\n use ptr;\n use result::{Err, Ok, Result};\n-use slice::{Slice, ImmutableSlice, MutableSlice, ImmutablePartialEqSlice};\n+use slice::{AsSlice, ImmutableSlice, MutableSlice, ImmutablePartialEqSlice};\n use slice::CloneableVector;\n use str::{Str, StrSlice, StrAllocating};\n use string::String;"}, {"sha": "6a1229902464eb8f8dd5dbcb0423fc3ee320b8b4", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=cd21e4a72c0175d226acc837d1886cfdfa40fe68", "patch": "@@ -76,7 +76,7 @@ use option::{Option, None, Some};\n use str;\n use str::{MaybeOwned, Str, StrSlice};\n use string::String;\n-use slice::{Slice, CloneableVector};\n+use slice::{AsSlice, CloneableVector};\n use slice::{ImmutablePartialEqSlice, ImmutableSlice};\n use vec::Vec;\n "}, {"sha": "196ac7507ea86bcdcad652102050a5a8a6a8dba5", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=cd21e4a72c0175d226acc837d1886cfdfa40fe68", "patch": "@@ -21,7 +21,7 @@ use iter::{DoubleEndedIterator, AdditiveIterator, Extendable, Iterator, Map};\n use option::{Option, None, Some};\n use str::Str;\n use str;\n-use slice::{CloneableVector, Splits, Slice, VectorVector,\n+use slice::{CloneableVector, Splits, AsSlice, VectorVector,\n             ImmutablePartialEqSlice, ImmutableSlice};\n use vec::Vec;\n \n@@ -367,7 +367,7 @@ impl Path {\n \n     /// Returns a normalized byte vector representation of a path, by removing all empty\n     /// components, and unnecessary . and .. components.\n-    fn normalize<V: Slice<u8>+CloneableVector<u8>>(v: V) -> Vec<u8> {\n+    fn normalize<V: AsSlice<u8>+CloneableVector<u8>>(v: V) -> Vec<u8> {\n         // borrowck is being very picky\n         let val = {\n             let is_abs = !v.as_slice().is_empty() && v.as_slice()[0] == SEP_BYTE;"}, {"sha": "ec3f87bc45a53ef53c3829884c4594fb012bb8bc", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=cd21e4a72c0175d226acc837d1886cfdfa40fe68", "patch": "@@ -23,7 +23,7 @@ use io::Writer;\n use iter::{AdditiveIterator, DoubleEndedIterator, Extendable, Iterator, Map};\n use mem;\n use option::{Option, Some, None};\n-use slice::{Slice, ImmutableSlice};\n+use slice::{AsSlice, ImmutableSlice};\n use str::{CharSplits, Str, StrAllocating, StrVector, StrSlice};\n use string::String;\n use unicode::char::UnicodeChar;"}, {"sha": "a1e74c7254e5a5a64b7db5ab5ea741b942b917ce", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=cd21e4a72c0175d226acc837d1886cfdfa40fe68", "patch": "@@ -87,7 +87,7 @@\n #[doc(no_inline)] pub use slice::{MutableCloneableSlice, MutableOrdSlice};\n #[doc(no_inline)] pub use slice::{ImmutableSlice, MutableSlice};\n #[doc(no_inline)] pub use slice::{ImmutablePartialEqSlice, ImmutableOrdSlice};\n-#[doc(no_inline)] pub use slice::{Slice, VectorVector};\n+#[doc(no_inline)] pub use slice::{AsSlice, VectorVector};\n #[doc(no_inline)] pub use slice::MutableSliceAllocating;\n #[doc(no_inline)] pub use string::String;\n #[doc(no_inline)] pub use vec::Vec;"}, {"sha": "3f5b524a9b5b212b35ea6384ce189190d77bae05", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21e4a72c0175d226acc837d1886cfdfa40fe68/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=cd21e4a72c0175d226acc837d1886cfdfa40fe68", "patch": "@@ -414,7 +414,7 @@ fn mk_test_module(cx: &mut TestCtxt) -> (P<ast::Item>, Option<ast::ViewItem>) {\n     let mainfn = (quote_item!(&mut cx.ext_cx,\n         pub fn main() {\n             #![main]\n-            use std::slice::Slice;\n+            use std::slice::AsSlice;\n             test::test_main_static(::std::os::args().as_slice(), TESTS);\n         }\n     )).unwrap();"}]}