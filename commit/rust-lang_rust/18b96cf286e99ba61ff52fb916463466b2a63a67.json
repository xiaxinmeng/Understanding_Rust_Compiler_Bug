{"sha": "18b96cf286e99ba61ff52fb916463466b2a63a67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4Yjk2Y2YyODZlOTliYTYxZmY1MmZiOTE2NDYzNDY2YjJhNjNhNjc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-08T21:21:35Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-28T23:57:14Z"}, "message": "Privatize constructors of tuple structs with private fields", "tree": {"sha": "1fd7f6c5c7e9e2920a35213b5e19f5b376b3cea5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fd7f6c5c7e9e2920a35213b5e19f5b376b3cea5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18b96cf286e99ba61ff52fb916463466b2a63a67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18b96cf286e99ba61ff52fb916463466b2a63a67", "html_url": "https://github.com/rust-lang/rust/commit/18b96cf286e99ba61ff52fb916463466b2a63a67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18b96cf286e99ba61ff52fb916463466b2a63a67/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1491e0425911806f2612f05ee8caf21666447128", "url": "https://api.github.com/repos/rust-lang/rust/commits/1491e0425911806f2612f05ee8caf21666447128", "html_url": "https://github.com/rust-lang/rust/commit/1491e0425911806f2612f05ee8caf21666447128"}], "stats": {"total": 93, "additions": 83, "deletions": 10}, "files": [{"sha": "b9c2f0622b6988e70ff1fc5bd0c121948bd3352d", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/18b96cf286e99ba61ff52fb916463466b2a63a67/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b96cf286e99ba61ff52fb916463466b2a63a67/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=18b96cf286e99ba61ff52fb916463466b2a63a67", "patch": "@@ -396,10 +396,16 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         let struct_id = tcx.hir.as_local_node_id(adt_def_id).unwrap();\n         let struct_vis = &tcx.hir.expect_item(struct_id).vis;\n+        let mut ctor_vis = ty::Visibility::from_hir(struct_vis, struct_id, tcx);\n+        for field in &variant.fields {\n+            if ctor_vis.is_at_least(field.vis, tcx) {\n+                ctor_vis = field.vis;\n+            }\n+        }\n \n         Entry {\n             kind: EntryKind::Struct(self.lazy(&data)),\n-            visibility: self.lazy(&ty::Visibility::from_hir(struct_vis, struct_id, tcx)),\n+            visibility: self.lazy(&ctor_vis),\n             span: self.lazy(&tcx.def_span(def_id)),\n             attributes: LazySeq::empty(),\n             children: LazySeq::empty(),"}, {"sha": "f144be7996aec220631ffecc44b1fd99970207a0", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/18b96cf286e99ba61ff52fb916463466b2a63a67/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b96cf286e99ba61ff52fb916463466b2a63a67/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=18b96cf286e99ba61ff52fb916463466b2a63a67", "patch": "@@ -327,21 +327,25 @@ impl<'a> Resolver<'a> {\n                 let def = Def::Struct(self.definitions.local_def_id(item.id));\n                 self.define(parent, ident, TypeNS, (def, vis, sp, expansion));\n \n-                // If this is a tuple or unit struct, define a name\n-                // in the value namespace as well.\n-                if !struct_def.is_struct() {\n-                    let ctor_def = Def::StructCtor(self.definitions.local_def_id(struct_def.id()),\n-                                                   CtorKind::from_ast(struct_def));\n-                    self.define(parent, ident, ValueNS, (ctor_def, vis, sp, expansion));\n-                }\n-\n                 // Record field names for error reporting.\n+                let mut ctor_vis = vis;\n                 let field_names = struct_def.fields().iter().filter_map(|field| {\n-                    self.resolve_visibility(&field.vis);\n+                    let field_vis = self.resolve_visibility(&field.vis);\n+                    if ctor_vis.is_at_least(field_vis, &*self) {\n+                        ctor_vis = field_vis;\n+                    }\n                     field.ident.map(|ident| ident.name)\n                 }).collect();\n                 let item_def_id = self.definitions.local_def_id(item.id);\n                 self.insert_field_names(item_def_id, field_names);\n+\n+                // If this is a tuple or unit struct, define a name\n+                // in the value namespace as well.\n+                if !struct_def.is_struct() {\n+                    let ctor_def = Def::StructCtor(self.definitions.local_def_id(struct_def.id()),\n+                                                   CtorKind::from_ast(struct_def));\n+                    self.define(parent, ident, ValueNS, (ctor_def, ctor_vis, sp, expansion));\n+                }\n             }\n \n             ItemKind::Union(ref vdata, _) => {"}, {"sha": "f190f5dd0534d09999ccf95cd30d36e04df1bb75", "filename": "src/test/compile-fail/auxiliary/privacy-struct-ctor.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/18b96cf286e99ba61ff52fb916463466b2a63a67/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fprivacy-struct-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b96cf286e99ba61ff52fb916463466b2a63a67/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fprivacy-struct-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fprivacy-struct-ctor.rs?ref=18b96cf286e99ba61ff52fb916463466b2a63a67", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(pub_restricted)]\n+\n+pub mod m {\n+    pub struct S(u8);\n+\n+    pub mod n {\n+        pub(m) struct Z(pub(m::n) u8);\n+    }\n+}\n+\n+pub use m::S;"}, {"sha": "13a04f490141fc77532fa58788febf3f284c62ac", "filename": "src/test/compile-fail/privacy-struct-ctor.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/18b96cf286e99ba61ff52fb916463466b2a63a67/src%2Ftest%2Fcompile-fail%2Fprivacy-struct-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b96cf286e99ba61ff52fb916463466b2a63a67/src%2Ftest%2Fcompile-fail%2Fprivacy-struct-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy-struct-ctor.rs?ref=18b96cf286e99ba61ff52fb916463466b2a63a67", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:privacy-struct-ctor.rs\n+\n+#![feature(pub_restricted)]\n+\n+extern crate privacy_struct_ctor as xcrate;\n+\n+mod m {\n+    pub struct S(u8);\n+\n+    pub mod n {\n+        pub(m) struct Z(pub(m::n) u8);\n+    }\n+\n+    use m::n::Z; // OK, only the type is imported\n+\n+    fn f() {\n+        n::Z; //~ ERROR tuple struct `Z` is private\n+        Z; //~ ERROR expected value, found struct `Z`\n+    }\n+}\n+\n+use m::S; // OK, only the type is imported\n+\n+fn main() {\n+    m::S; //~ ERROR tuple struct `S` is private\n+    S; //~ ERROR expected value, found struct `S`\n+    m::n::Z; //~ ERROR tuple struct `Z` is private\n+\n+    xcrate::m::S; //~ ERROR tuple struct `S` is private\n+    xcrate::S; //~ ERROR expected value, found struct `xcrate::S`\n+    xcrate::m::n::Z; //~ ERROR tuple struct `Z` is private\n+}"}]}