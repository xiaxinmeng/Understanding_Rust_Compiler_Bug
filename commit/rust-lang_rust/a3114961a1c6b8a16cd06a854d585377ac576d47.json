{"sha": "a3114961a1c6b8a16cd06a854d585377ac576d47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMTE0OTYxYTFjNmI4YTE2Y2QwNmE4NTRkNTg1Mzc3YWM1NzZkNDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-16T00:40:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-16T00:40:05Z"}, "message": "Auto merge of #42568 - GuillaumeGomez:E0608, r=QuietMisdreavus\n\nE0608\n\nPart of #42229.\n\ncc @Susurrus", "tree": {"sha": "d5ce78294157cb85027586310739d828b8d4b70b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5ce78294157cb85027586310739d828b8d4b70b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3114961a1c6b8a16cd06a854d585377ac576d47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3114961a1c6b8a16cd06a854d585377ac576d47", "html_url": "https://github.com/rust-lang/rust/commit/a3114961a1c6b8a16cd06a854d585377ac576d47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3114961a1c6b8a16cd06a854d585377ac576d47/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "258ae6dd9b1a8ac97986852fc9f00f7687004ccb", "url": "https://api.github.com/repos/rust-lang/rust/commits/258ae6dd9b1a8ac97986852fc9f00f7687004ccb", "html_url": "https://github.com/rust-lang/rust/commit/258ae6dd9b1a8ac97986852fc9f00f7687004ccb"}, {"sha": "b6e9ed1e407b36270df9df08cdee67828efb5e6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6e9ed1e407b36270df9df08cdee67828efb5e6d", "html_url": "https://github.com/rust-lang/rust/commit/b6e9ed1e407b36270df9df08cdee67828efb5e6d"}], "stats": {"total": 64, "additions": 47, "deletions": 17}, "files": [{"sha": "b1d3292e04ca8122858ee06bdcdf34b9ddf1e70c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3114961a1c6b8a16cd06a854d585377ac576d47/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3114961a1c6b8a16cd06a854d585377ac576d47/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a3114961a1c6b8a16cd06a854d585377ac576d47", "patch": "@@ -3879,13 +3879,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                           element_ty\n                       }\n                       None => {\n-                          let mut err = self.type_error_struct(\n-                              expr.span,\n-                              |actual| {\n-                                  format!(\"cannot index a value of type `{}`\",\n-                                          actual)\n-                              },\n-                              base_t);\n+                          let mut err = type_error_struct!(tcx.sess, expr.span, base_t, E0608,\n+                                                           \"cannot index into a value of type `{}`\",\n+                                                           base_t);\n                           // Try to give some advice about indexing tuples.\n                           if let ty::TyTuple(..) = base_t.sty {\n                               let mut needs_note = true;"}, {"sha": "df9356ea811488916c6f0c010914cee31154e651", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a3114961a1c6b8a16cd06a854d585377ac576d47/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3114961a1c6b8a16cd06a854d585377ac576d47/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=a3114961a1c6b8a16cd06a854d585377ac576d47", "patch": "@@ -4096,6 +4096,27 @@ assert_eq!(!Question::No, true);\n ```\n \"##,\n \n+E0608: r##\"\n+An attempt to index into a type which doesn't implement the `std::ops::Index`\n+trait was performed.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0608\n+0u8[2]; // error: cannot index into a value of type `u8`\n+```\n+\n+To be able to index into a type it needs to implement the `std::ops::Index`\n+trait. Example:\n+\n+```\n+let v: Vec<u8> = vec![0, 1, 2, 3];\n+\n+// The `Vec` type implements the `Index` trait so you can do:\n+println!(\"{}\", v[2]);\n+```\n+\"##,\n+\n E0609: r##\"\n Attempted to access a non-existent field in a struct.\n "}, {"sha": "d47356a97eedacb9be8c4b7ec47ecab2ab948b99", "filename": "src/test/compile-fail/E0608.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a3114961a1c6b8a16cd06a854d585377ac576d47/src%2Ftest%2Fcompile-fail%2FE0608.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3114961a1c6b8a16cd06a854d585377ac576d47/src%2Ftest%2Fcompile-fail%2FE0608.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0608.rs?ref=a3114961a1c6b8a16cd06a854d585377ac576d47", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    0u8[2]; //~ ERROR E0608\n+}"}, {"sha": "fc88ff6f47b878a67c89b029449216d711aa4719", "filename": "src/test/compile-fail/index-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3114961a1c6b8a16cd06a854d585377ac576d47/src%2Ftest%2Fcompile-fail%2Findex-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3114961a1c6b8a16cd06a854d585377ac576d47/src%2Ftest%2Fcompile-fail%2Findex-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findex-bot.rs?ref=a3114961a1c6b8a16cd06a854d585377ac576d47", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    (return)[0]; //~ ERROR cannot index a value of type `!`\n+    (return)[0]; //~ ERROR cannot index into a value of type `!`\n }"}, {"sha": "b9daad936c338ff16591f9def734772e5b7ac0b9", "filename": "src/test/compile-fail/index_message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3114961a1c6b8a16cd06a854d585377ac576d47/src%2Ftest%2Fcompile-fail%2Findex_message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3114961a1c6b8a16cd06a854d585377ac576d47/src%2Ftest%2Fcompile-fail%2Findex_message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findex_message.rs?ref=a3114961a1c6b8a16cd06a854d585377ac576d47", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     let z = ();\n-    let _ = z[0]; //~ ERROR cannot index a value of type `()`\n+    let _ = z[0]; //~ ERROR cannot index into a value of type `()`\n }"}, {"sha": "8c71761df2fb8f21819f4a7c3fd3629dd068c289", "filename": "src/test/compile-fail/issue-27842.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3114961a1c6b8a16cd06a854d585377ac576d47/src%2Ftest%2Fcompile-fail%2Fissue-27842.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3114961a1c6b8a16cd06a854d585377ac576d47/src%2Ftest%2Fcompile-fail%2Fissue-27842.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27842.rs?ref=a3114961a1c6b8a16cd06a854d585377ac576d47", "patch": "@@ -12,13 +12,13 @@ fn main() {\n     let tup = (0, 1, 2);\n     // the case where we show a suggestion\n     let _ = tup[0];\n-    //~^ ERROR cannot index a value of type\n+    //~^ ERROR cannot index into a value of type\n     //~| HELP to access tuple elements, use\n     //~| SUGGESTION let _ = tup.0\n \n     // the case where we show just a general hint\n     let i = 0_usize;\n     let _ = tup[i];\n-    //~^ ERROR cannot index a value of type\n+    //~^ ERROR cannot index into a value of type\n     //~| HELP to access tuple elements, use tuple indexing syntax (e.g. `tuple.0`)\n }"}, {"sha": "75d58c58538da17058bf01f84323ed506e04ea3e", "filename": "src/test/compile-fail/issue-40861.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3114961a1c6b8a16cd06a854d585377ac576d47/src%2Ftest%2Fcompile-fail%2Fissue-40861.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3114961a1c6b8a16cd06a854d585377ac576d47/src%2Ftest%2Fcompile-fail%2Fissue-40861.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-40861.rs?ref=a3114961a1c6b8a16cd06a854d585377ac576d47", "patch": "@@ -12,5 +12,5 @@ fn f(_: &[f32]) {}\n \n fn main() {\n     ()[f(&[1.0])];\n-    //~^ ERROR cannot index a value of type `()`\n+    //~^ ERROR cannot index into a value of type `()`\n }"}, {"sha": "44b9d94c5665c6bc32e9b89cb3febc058190d2e1", "filename": "src/test/compile-fail/slice-2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3114961a1c6b8a16cd06a854d585377ac576d47/src%2Ftest%2Fcompile-fail%2Fslice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3114961a1c6b8a16cd06a854d585377ac576d47/src%2Ftest%2Fcompile-fail%2Fslice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslice-2.rs?ref=a3114961a1c6b8a16cd06a854d585377ac576d47", "patch": "@@ -14,8 +14,8 @@ struct Foo;\n \n fn main() {\n     let x = Foo;\n-    &x[..]; //~ ERROR cannot index a value of type `Foo`\n-    &x[Foo..]; //~ ERROR cannot index a value of type `Foo`\n-    &x[..Foo]; //~ ERROR cannot index a value of type `Foo`\n-    &x[Foo..Foo]; //~ ERROR cannot index a value of type `Foo`\n+    &x[..]; //~ ERROR cannot index into a value of type `Foo`\n+    &x[Foo..]; //~ ERROR cannot index into a value of type `Foo`\n+    &x[..Foo]; //~ ERROR cannot index into a value of type `Foo`\n+    &x[Foo..Foo]; //~ ERROR cannot index into a value of type `Foo`\n }"}, {"sha": "68d43d3f5cd857939ce16aaedbbcf5ee43b14ff3", "filename": "src/test/ui/span/suggestion-non-ascii.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3114961a1c6b8a16cd06a854d585377ac576d47/src%2Ftest%2Fui%2Fspan%2Fsuggestion-non-ascii.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3114961a1c6b8a16cd06a854d585377ac576d47/src%2Ftest%2Fui%2Fspan%2Fsuggestion-non-ascii.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsuggestion-non-ascii.stderr?ref=a3114961a1c6b8a16cd06a854d585377ac576d47", "patch": "@@ -1,4 +1,4 @@\n-error: cannot index a value of type `({integer},)`\n+error[E0608]: cannot index into a value of type `({integer},)`\n   --> $DIR/suggestion-non-ascii.rs:14:21\n    |\n 14 |     println!(\"\u2603{}\", tup[0]);"}]}