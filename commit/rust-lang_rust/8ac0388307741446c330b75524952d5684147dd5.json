{"sha": "8ac0388307741446c330b75524952d5684147dd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYzAzODgzMDc3NDE0NDZjMzMwYjc1NTI0OTUyZDU2ODQxNDdkZDU=", "commit": {"author": {"name": "messense", "email": "messense@icloud.com", "date": "2017-06-29T13:38:25Z"}, "committer": {"name": "messense", "email": "messense@icloud.com", "date": "2017-06-29T13:38:25Z"}, "message": "Fix compilation on rustc 1.20.0-nightly (69c65d296 2017-06-28)", "tree": {"sha": "ba6c472c8ddc351e4d7f65a3f4589cd97966e087", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba6c472c8ddc351e4d7f65a3f4589cd97966e087"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ac0388307741446c330b75524952d5684147dd5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEGWGgMoNGfisvor0Vu0GooscWzKkFAllVAtEACgkQu0GooscW\nzKmYkg/7BvINum7GXjLvq+uXvKZQZgudFt4gwkNBFOwHx2rUgc0rewHN0mvi07ty\nZtYweUF0f5tnYIEfGYfW2XmBGfKxCbhOpQuXwWq95HpvreOHIbMHQ+aUSCE31mJX\navYRk2cpdDpQa7Irs6QnHdEWHbAOlBf0lUBQwrFeDDcFdhpOSepzNelRgjsAw8Yk\nZUUpKCQtO0xv3LdaORjaUJ/YRdGWn8fwKzdMHThNb8AbOlNqZhEEeen7m0qjigkX\nJe9+Dc1k1yWSJja1LxWMcF11Qdap+jH57zDgVT+XuR7qtmGLZQsL5lOuHUEgI0fq\nosVCzNpGfbXp59tECAhbjzwhpq5a7YvRdshprT+v11iY6aI2abTaS7yWMNtYutbs\nnEC24mjwpcFcmYe45hag4Jp9ouCOcLXw+HWICytJQBWdbACemZUJQ8NT6mQPMrec\n/WS43adDTBxbjkAN3v+SiUQwnNbTHbpFbUvDA0GecVVrvkrbwnguXJJvUPA2dC64\nqSIWqwu5ExVSk+lCTj4xt2tUc4ZzBUBpMTFy23qLbUX6fhY52U1NlhNU2cU7/CXT\nlkGkOjCnbQavQnDLujVjx+NFMZuj2bSUyS+vjXzCTJd9r3PdngDBhH31critpSFJ\npgyrotZ3MUO8y9+nmq1n5kGrr+l9vRdrcVsAPg0j58OUf+isn0w=\n=0kQX\n-----END PGP SIGNATURE-----", "payload": "tree ba6c472c8ddc351e4d7f65a3f4589cd97966e087\nparent 6a2525ccb84179d00991fdebf19084a976d676f3\nauthor messense <messense@icloud.com> 1498743505 +0800\ncommitter messense <messense@icloud.com> 1498743505 +0800\n\nFix compilation on rustc 1.20.0-nightly (69c65d296 2017-06-28)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac0388307741446c330b75524952d5684147dd5", "html_url": "https://github.com/rust-lang/rust/commit/8ac0388307741446c330b75524952d5684147dd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ac0388307741446c330b75524952d5684147dd5/comments", "author": {"login": "messense", "id": 1556054, "node_id": "MDQ6VXNlcjE1NTYwNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1556054?v=4", "gravatar_id": "", "url": "https://api.github.com/users/messense", "html_url": "https://github.com/messense", "followers_url": "https://api.github.com/users/messense/followers", "following_url": "https://api.github.com/users/messense/following{/other_user}", "gists_url": "https://api.github.com/users/messense/gists{/gist_id}", "starred_url": "https://api.github.com/users/messense/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/messense/subscriptions", "organizations_url": "https://api.github.com/users/messense/orgs", "repos_url": "https://api.github.com/users/messense/repos", "events_url": "https://api.github.com/users/messense/events{/privacy}", "received_events_url": "https://api.github.com/users/messense/received_events", "type": "User", "site_admin": false}, "committer": {"login": "messense", "id": 1556054, "node_id": "MDQ6VXNlcjE1NTYwNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1556054?v=4", "gravatar_id": "", "url": "https://api.github.com/users/messense", "html_url": "https://github.com/messense", "followers_url": "https://api.github.com/users/messense/followers", "following_url": "https://api.github.com/users/messense/following{/other_user}", "gists_url": "https://api.github.com/users/messense/gists{/gist_id}", "starred_url": "https://api.github.com/users/messense/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/messense/subscriptions", "organizations_url": "https://api.github.com/users/messense/orgs", "repos_url": "https://api.github.com/users/messense/repos", "events_url": "https://api.github.com/users/messense/events{/privacy}", "received_events_url": "https://api.github.com/users/messense/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a2525ccb84179d00991fdebf19084a976d676f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2525ccb84179d00991fdebf19084a976d676f3", "html_url": "https://github.com/rust-lang/rust/commit/6a2525ccb84179d00991fdebf19084a976d676f3"}], "stats": {"total": 62, "additions": 33, "deletions": 29}, "files": [{"sha": "a62b38dea32d96de47e312ccef49f873f14f5367", "filename": "clippy_lints/src/cyclomatic_complexity.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8ac0388307741446c330b75524952d5684147dd5/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac0388307741446c330b75524952d5684147dd5/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs?ref=8ac0388307741446c330b75524952d5684147dd5", "patch": "@@ -136,9 +136,12 @@ impl<'a, 'tcx> Visitor<'tcx> for CCHelper<'a, 'tcx> {\n                 walk_expr(self, e);\n                 let ty = self.cx.tables.node_id_to_type(callee.id);\n                 match ty.sty {\n-                    ty::TyFnDef(_, _, ty) |\n-                    ty::TyFnPtr(ty) if ty.skip_binder().output().sty == ty::TyNever => {\n-                        self.divergence += 1;\n+                    ty::TyFnDef(..) |\n+                    ty::TyFnPtr(_) => {\n+                        let sig = ty.fn_sig(self.cx.tcx);\n+                        if sig.skip_binder().output().sty == ty::TyNever {\n+                            self.divergence += 1;\n+                        }\n                     },\n                     _ => (),\n                 }"}, {"sha": "04511667e23ff21586c509e676b16517c4a14d26", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8ac0388307741446c330b75524952d5684147dd5/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac0388307741446c330b75524952d5684147dd5/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=8ac0388307741446c330b75524952d5684147dd5", "patch": "@@ -64,10 +64,11 @@ fn check_closure(cx: &LateContext, expr: &Expr) {\n             let fn_ty = cx.tables.expr_ty(caller);\n             match fn_ty.sty {\n                 // Is it an unsafe function? They don't implement the closure traits\n-                ty::TyFnDef(_, _, fn_ty) |\n-                ty::TyFnPtr(fn_ty) => {\n-                    if fn_ty.skip_binder().unsafety == Unsafety::Unsafe ||\n-                       fn_ty.skip_binder().output().sty == ty::TyNever {\n+                ty::TyFnDef(..) |\n+                ty::TyFnPtr(_) => {\n+                    let sig = fn_ty.fn_sig(cx.tcx);\n+                    if sig.skip_binder().unsafety == Unsafety::Unsafe ||\n+                       sig.skip_binder().output().sty == ty::TyNever {\n                         return;\n                     }\n                 },"}, {"sha": "134a02997bf53b32d43b8ca5cfddd9cb623f4be0", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ac0388307741446c330b75524952d5684147dd5/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac0388307741446c330b75524952d5684147dd5/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=8ac0388307741446c330b75524952d5684147dd5", "patch": "@@ -126,10 +126,12 @@ impl<'a, 'tcx> Visitor<'tcx> for DivergenceVisitor<'a, 'tcx> {\n         match e.node {\n             ExprAgain(_) | ExprBreak(_, _) | ExprRet(_) => self.report_diverging_sub_expr(e),\n             ExprCall(ref func, _) => {\n-                match self.cx.tables.expr_ty(func).sty {\n-                    ty::TyFnDef(_, _, fn_ty) |\n-                    ty::TyFnPtr(fn_ty) => {\n-                        if let ty::TyNever = self.cx.tcx.erase_late_bound_regions(&fn_ty).output().sty {\n+                let typ = self.cx.tables.expr_ty(func);\n+                match typ.sty {\n+                    ty::TyFnDef(..) |\n+                    ty::TyFnPtr(_) => {\n+                        let sig = typ.fn_sig(self.cx.tcx);\n+                        if let ty::TyNever = self.cx.tcx.erase_late_bound_regions(&sig).output().sty {\n                             self.report_diverging_sub_expr(e);\n                         }\n                     },"}, {"sha": "79d47b1e7dab7fecb6018c5a7d1468b4e6c12a80", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ac0388307741446c330b75524952d5684147dd5/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac0388307741446c330b75524952d5684147dd5/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=8ac0388307741446c330b75524952d5684147dd5", "patch": "@@ -176,7 +176,7 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n             hir::ExprCall(ref f, ref args) => {\n                 let ty = self.cx.tables.expr_ty(f);\n \n-                if type_is_unsafe_function(ty) {\n+                if type_is_unsafe_function(self.cx, ty) {\n                     for arg in args {\n                         self.check_arg(arg);\n                     }\n@@ -186,7 +186,7 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n                 let def_id = self.cx.tables.type_dependent_defs[&expr.id].def_id();\n                 let base_type = self.cx.tcx.type_of(def_id);\n \n-                if type_is_unsafe_function(base_type) {\n+                if type_is_unsafe_function(self.cx, base_type) {\n                     for arg in args {\n                         self.check_arg(arg);\n                     }"}, {"sha": "91db5bbdba68b45f6e8a18bf57dab01d8236ef1e", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ac0388307741446c330b75524952d5684147dd5/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac0388307741446c330b75524952d5684147dd5/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=8ac0388307741446c330b75524952d5684147dd5", "patch": "@@ -94,8 +94,7 @@ fn check_trait_items(cx: &LateContext, item: &Item, trait_items: &[TraitItemRef]\n             has_self &&\n             {\n                 let did = cx.tcx.hir.local_def_id(item.id.node_id);\n-                let impl_ty = cx.tcx.type_of(did);\n-                impl_ty.fn_sig().inputs().skip_binder().len() == 1\n+                cx.tcx.fn_sig(did).inputs().skip_binder().len() == 1\n             }\n         } else {\n             false\n@@ -121,8 +120,7 @@ fn check_impl_items(cx: &LateContext, item: &Item, impl_items: &[ImplItemRef]) {\n             has_self &&\n             {\n                 let did = cx.tcx.hir.local_def_id(item.id.node_id);\n-                let impl_ty = cx.tcx.type_of(did);\n-                impl_ty.fn_sig().inputs().skip_binder().len() == 1\n+                cx.tcx.fn_sig(did).inputs().skip_binder().len() == 1\n             }\n         } else {\n             false\n@@ -184,7 +182,7 @@ fn has_is_empty(cx: &LateContext, expr: &Expr) -> bool {\n     fn is_is_empty(cx: &LateContext, item: &ty::AssociatedItem) -> bool {\n         if let ty::AssociatedKind::Method = item.kind {\n             if item.name == \"is_empty\" {\n-                let sig = cx.tcx.type_of(item.def_id).fn_sig();\n+                let sig = cx.tcx.fn_sig(item.def_id);\n                 let ty = sig.skip_binder();\n                 ty.inputs().len() == 1\n             } else {"}, {"sha": "ce81d810161ddce702a9949cdcba24db8598631f", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ac0388307741446c330b75524952d5684147dd5/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac0388307741446c330b75524952d5684147dd5/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=8ac0388307741446c330b75524952d5684147dd5", "patch": "@@ -741,7 +741,7 @@ fn check_for_loop_arg(cx: &LateContext, pat: &Pat, arg: &Expr, expr: &Expr) {\n                 let substs = cx.tables.node_substs(arg.id);\n                 let method_type = cx.tcx.type_of(def_id).subst(cx.tcx, substs);\n \n-                let fn_arg_tys = method_type.fn_sig().inputs();\n+                let fn_arg_tys = method_type.fn_sig(cx.tcx).inputs();\n                 assert_eq!(fn_arg_tys.skip_binder().len(), 1);\n                 if fn_arg_tys.skip_binder()[0].is_region_ptr() {\n                     lint_iter_method(cx, args, arg, &method_name);"}, {"sha": "672acbee8ec29122d74c953ad0857c60104d26e4", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ac0388307741446c330b75524952d5684147dd5/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac0388307741446c330b75524952d5684147dd5/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=8ac0388307741446c330b75524952d5684147dd5", "patch": "@@ -55,11 +55,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnecessaryMutPassed {\n     }\n }\n \n-fn check_arguments(cx: &LateContext, arguments: &[Expr], type_definition: Ty, name: &str) {\n+fn check_arguments<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arguments: &[Expr], type_definition: Ty<'tcx>, name: &str) {\n     match type_definition.sty {\n-        ty::TyFnDef(_, _, fn_type) |\n-        ty::TyFnPtr(fn_type) => {\n-            let parameters = fn_type.skip_binder().inputs();\n+        ty::TyFnDef(..) |\n+        ty::TyFnPtr(_) => {\n+            let parameters = type_definition.fn_sig(cx.tcx).skip_binder().inputs();\n             for (argument, parameter) in arguments.iter().zip(parameters.iter()) {\n                 match parameter.sty {\n                     ty::TyRef(_, ty::TypeAndMut { mutbl: MutImmutable, .. }) |"}, {"sha": "286083d684928afb88fd5aaea3b69fedc1bdacc9", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ac0388307741446c330b75524952d5684147dd5/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac0388307741446c330b75524952d5684147dd5/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=8ac0388307741446c330b75524952d5684147dd5", "patch": "@@ -95,7 +95,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n             ctx\n         };\n \n-        let fn_sig = cx.tcx.type_of(fn_def_id).fn_sig();\n+        let fn_sig = cx.tcx.fn_sig(fn_def_id);\n         let fn_sig = cx.tcx.erase_late_bound_regions(&fn_sig);\n \n         for ((input, &ty), arg) in decl.inputs.iter().zip(fn_sig.inputs()).zip(&body.arguments) {"}, {"sha": "f7017dfc5c3373c1c1b896ffb420ae3a1defed3d", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ac0388307741446c330b75524952d5684147dd5/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac0388307741446c330b75524952d5684147dd5/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=8ac0388307741446c330b75524952d5684147dd5", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PointerPass {\n \n fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId) {\n     let fn_def_id = cx.tcx.hir.local_def_id(fn_id);\n-    let sig = cx.tcx.type_of(fn_def_id).fn_sig();\n+    let sig = cx.tcx.fn_sig(fn_def_id);\n     let fn_ty = sig.skip_binder();\n \n     for (arg, ty) in decl.inputs.iter().zip(fn_ty.inputs()) {"}, {"sha": "c1b3f1419af001af5ab7c12ea49da14457319f00", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ac0388307741446c330b75524952d5684147dd5/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac0388307741446c330b75524952d5684147dd5/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=8ac0388307741446c330b75524952d5684147dd5", "patch": "@@ -764,7 +764,7 @@ pub fn camel_case_from(s: &str) -> usize {\n /// Convenience function to get the return type of a function\n pub fn return_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, fn_item: NodeId) -> Ty<'tcx> {\n     let fn_def_id = cx.tcx.hir.local_def_id(fn_item);\n-    let ret_ty = cx.tcx.type_of(fn_def_id).fn_sig().output();\n+    let ret_ty = cx.tcx.fn_sig(fn_def_id).output();\n     cx.tcx.erase_late_bound_regions(&ret_ty)\n }\n \n@@ -776,10 +776,10 @@ pub fn same_tys<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, a: Ty<'tcx>, b: Ty<'tcx>)\n }\n \n /// Return whether the given type is an `unsafe` function.\n-pub fn type_is_unsafe_function(ty: Ty) -> bool {\n+pub fn type_is_unsafe_function<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n     match ty.sty {\n-        ty::TyFnDef(_, _, f) |\n-        ty::TyFnPtr(f) => f.unsafety() == Unsafety::Unsafe,\n+        ty::TyFnDef(..) |\n+        ty::TyFnPtr(_) => ty.fn_sig(cx.tcx).unsafety() == Unsafety::Unsafe,\n         _ => false,\n     }\n }"}]}