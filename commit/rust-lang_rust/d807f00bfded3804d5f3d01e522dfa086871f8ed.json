{"sha": "d807f00bfded3804d5f3d01e522dfa086871f8ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MDdmMDBiZmRlZDM4MDRkNWYzZDAxZTUyMmRmYTA4Njg3MWY4ZWQ=", "commit": {"author": {"name": "Samuel Chase", "email": "samebchase@gmail.com", "date": "2013-05-10T20:44:36Z"}, "committer": {"name": "Samuel Chase", "email": "samebchase@gmail.com", "date": "2013-05-10T20:44:36Z"}, "message": "Add to_str() for HashMaps, and some basic tests as well.", "tree": {"sha": "2324e48977b9a69350f689e88f6f03e6e65f6835", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2324e48977b9a69350f689e88f6f03e6e65f6835"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d807f00bfded3804d5f3d01e522dfa086871f8ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d807f00bfded3804d5f3d01e522dfa086871f8ed", "html_url": "https://github.com/rust-lang/rust/commit/d807f00bfded3804d5f3d01e522dfa086871f8ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d807f00bfded3804d5f3d01e522dfa086871f8ed/comments", "author": {"login": "samebchase", "id": 166555, "node_id": "MDQ6VXNlcjE2NjU1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samebchase", "html_url": "https://github.com/samebchase", "followers_url": "https://api.github.com/users/samebchase/followers", "following_url": "https://api.github.com/users/samebchase/following{/other_user}", "gists_url": "https://api.github.com/users/samebchase/gists{/gist_id}", "starred_url": "https://api.github.com/users/samebchase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samebchase/subscriptions", "organizations_url": "https://api.github.com/users/samebchase/orgs", "repos_url": "https://api.github.com/users/samebchase/repos", "events_url": "https://api.github.com/users/samebchase/events{/privacy}", "received_events_url": "https://api.github.com/users/samebchase/received_events", "type": "User", "site_admin": false}, "committer": {"login": "samebchase", "id": 166555, "node_id": "MDQ6VXNlcjE2NjU1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samebchase", "html_url": "https://github.com/samebchase", "followers_url": "https://api.github.com/users/samebchase/followers", "following_url": "https://api.github.com/users/samebchase/following{/other_user}", "gists_url": "https://api.github.com/users/samebchase/gists{/gist_id}", "starred_url": "https://api.github.com/users/samebchase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samebchase/subscriptions", "organizations_url": "https://api.github.com/users/samebchase/orgs", "repos_url": "https://api.github.com/users/samebchase/repos", "events_url": "https://api.github.com/users/samebchase/events{/privacy}", "received_events_url": "https://api.github.com/users/samebchase/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdf601eaf3f6fcc727819f8c0ae2b44b30770a8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdf601eaf3f6fcc727819f8c0ae2b44b30770a8a", "html_url": "https://github.com/rust-lang/rust/commit/fdf601eaf3f6fcc727819f8c0ae2b44b30770a8a"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "a2c4ac991a49ed41ad9a7e06d04242f23a7abdb8", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d807f00bfded3804d5f3d01e522dfa086871f8ed/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d807f00bfded3804d5f3d01e522dfa086871f8ed/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=d807f00bfded3804d5f3d01e522dfa086871f8ed", "patch": "@@ -15,6 +15,10 @@ The `ToStr` trait for converting to strings\n */\n \n use str;\n+use hashmap::HashMap;\n+use container::Map;\n+use hash::Hash;\n+use cmp::Eq;\n \n pub trait ToStr {\n     fn to_str(&self) -> ~str;\n@@ -46,6 +50,26 @@ impl<A:ToStr> ToStr for (A,) {\n     }\n }\n \n+impl<A:ToStr+Hash+Eq, B:ToStr+Hash+Eq> ToStr for HashMap<A, B> {\n+    #[inline(always)]\n+    fn to_str(&self) -> ~str {\n+        let mut acc = ~\"{\", first = true;\n+        for self.each |key, value| {\n+            if first {\n+                first = false;\n+            }\n+            else {\n+                str::push_str(&mut acc, ~\", \");\n+            }\n+            str::push_str(&mut acc, key.to_str());\n+            str::push_str(&mut acc, ~\" : \");\n+            str::push_str(&mut acc, value.to_str());\n+        }\n+        str::push_char(&mut acc, '}');\n+        acc\n+    }\n+}\n+\n impl<A:ToStr,B:ToStr> ToStr for (A, B) {\n     #[inline(always)]\n     fn to_str(&self) -> ~str {\n@@ -149,4 +173,16 @@ mod tests {\n         assert!((~[~[], ~[1], ~[1, 1]]).to_str() ==\n                ~\"[[], [1], [1, 1]]\");\n     }\n+\n+    #[test]\n+    fn test_hashmap() {\n+        let mut table: HashMap<int, int> = HashMap::new();\n+        let mut empty: HashMap<int, int> = HashMap::new();\n+\n+        table.insert(3, 4);\n+        table.insert(1, 2);\n+\n+        assert!(table.to_str() == ~\"{1 : 2, 3 : 4}\");\n+        assert!(empty.to_str() == ~\"{}\");\n+    }\n }"}]}