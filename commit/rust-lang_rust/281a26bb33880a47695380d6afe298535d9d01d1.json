{"sha": "281a26bb33880a47695380d6afe298535d9d01d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MWEyNmJiMzM4ODBhNDc2OTUzODBkNmFmZTI5ODUzNWQ5ZDAxZDE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-07T05:57:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-07T05:57:39Z"}, "message": "Rollup merge of #58124 - taiki-e:libsyntax_pos-2018, r=Centril\n\nlibsyntax_pos => 2018\n\nTransitions `libsyntax_pos` to Rust 2018; cc #58099\n\nr? @Centril", "tree": {"sha": "0c2b7643c85e3dd170a1dacd5a2c19924473dd12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c2b7643c85e3dd170a1dacd5a2c19924473dd12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/281a26bb33880a47695380d6afe298535d9d01d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcW8jTCRBK7hj4Ov3rIwAAdHIIAFsvSsnZYTRGsr1m2z4ZZWZK\n/6MPaiZ30wHUzHy8KZQg0Q1ARvE1f558Iyv4K448qN6kEjQs0tue5G3+xEbU1nxW\n0cU5IqCzkxZsNny1sqt4QW8kqOeYf+Z/LtzsiU3EdqY1dxkoqosxMkX3PVgXknmH\n4XRJl4iqyZ1oRrqUv6Wg/3CZq2F0VCgv1NPSiSE+vG2DUcWfLha9at48F5ra21AC\npCVRK2/ttzRx87wAy2ta44mSSueoRXk2V3/7bKKcKL/OPIsz++GzdHmkZFqieAPO\ntENOinRgj7AK26EN4/u+8KZdD9+lVsbQ02RwrltssZQKgaR+9Nzd40vjuZjBVJk=\n=WdoS\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c2b7643c85e3dd170a1dacd5a2c19924473dd12\nparent 8bc05bacbff8a4d66c7790d501718d9b7f2c090c\nparent 6413480adf6bc788e515a9746cf382e1ceb153fe\nauthor kennytm <kennytm@gmail.com> 1549519059 +0800\ncommitter GitHub <noreply@github.com> 1549519059 +0800\n\nRollup merge of #58124 - taiki-e:libsyntax_pos-2018, r=Centril\n\nlibsyntax_pos => 2018\n\nTransitions `libsyntax_pos` to Rust 2018; cc #58099\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/281a26bb33880a47695380d6afe298535d9d01d1", "html_url": "https://github.com/rust-lang/rust/commit/281a26bb33880a47695380d6afe298535d9d01d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/281a26bb33880a47695380d6afe298535d9d01d1/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bc05bacbff8a4d66c7790d501718d9b7f2c090c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bc05bacbff8a4d66c7790d501718d9b7f2c090c", "html_url": "https://github.com/rust-lang/rust/commit/8bc05bacbff8a4d66c7790d501718d9b7f2c090c"}, {"sha": "6413480adf6bc788e515a9746cf382e1ceb153fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/6413480adf6bc788e515a9746cf382e1ceb153fe", "html_url": "https://github.com/rust-lang/rust/commit/6413480adf6bc788e515a9746cf382e1ceb153fe"}], "stats": {"total": 111, "additions": 51, "deletions": 60}, "files": [{"sha": "5658451c54f719466e4e9aed4c15560e7d0f9205", "filename": "src/libsyntax_pos/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/281a26bb33880a47695380d6afe298535d9d01d1/src%2Flibsyntax_pos%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/281a26bb33880a47695380d6afe298535d9d01d1/src%2Flibsyntax_pos%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2FCargo.toml?ref=281a26bb33880a47695380d6afe298535d9d01d1", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"syntax_pos\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"syntax_pos\""}, {"sha": "18387bd5a091afea7df719989d87e8c599691714", "filename": "src/libsyntax_pos/analyze_source_file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/281a26bb33880a47695380d6afe298535d9d01d1/src%2Flibsyntax_pos%2Fanalyze_source_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/281a26bb33880a47695380d6afe298535d9d01d1/src%2Flibsyntax_pos%2Fanalyze_source_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fanalyze_source_file.rs?ref=281a26bb33880a47695380d6afe298535d9d01d1", "patch": "@@ -36,7 +36,7 @@ pub fn analyze_source_file(\n     (lines, multi_byte_chars, non_narrow_chars)\n }\n \n-cfg_if! {\n+cfg_if::cfg_if! {\n     if #[cfg(all(any(target_arch = \"x86\", target_arch = \"x86_64\")))] {\n         fn analyze_source_file_dispatch(src: &str,\n                                     source_file_start_pos: BytePos,"}, {"sha": "a0b0052f26dab06e4251a72904f194db84d6effe", "filename": "src/libsyntax_pos/edition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/281a26bb33880a47695380d6afe298535d9d01d1/src%2Flibsyntax_pos%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/281a26bb33880a47695380d6afe298535d9d01d1/src%2Flibsyntax_pos%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fedition.rs?ref=281a26bb33880a47695380d6afe298535d9d01d1", "patch": "@@ -27,7 +27,7 @@ pub const EDITION_NAME_LIST: &str = \"2015|2018\";\n pub const DEFAULT_EDITION: Edition = Edition::Edition2015;\n \n impl fmt::Display for Edition {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let s = match *self {\n             Edition::Edition2015 => \"2015\",\n             Edition::Edition2018 => \"2018\","}, {"sha": "0c645fc678caf7c95021174a967f133dc903c0d7", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/281a26bb33880a47695380d6afe298535d9d01d1/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/281a26bb33880a47695380d6afe298535d9d01d1/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=281a26bb33880a47695380d6afe298535d9d01d1", "patch": "@@ -5,10 +5,10 @@\n //! and definition contexts*. J. Funct. Program. 22, 2 (March 2012), 181-216.\n //! DOI=10.1017/S0956796812000093 <https://doi.org/10.1017/S0956796812000093>\n \n-use GLOBALS;\n-use Span;\n-use edition::{Edition, DEFAULT_EDITION};\n-use symbol::{keywords, Symbol};\n+use crate::GLOBALS;\n+use crate::Span;\n+use crate::edition::{Edition, DEFAULT_EDITION};\n+use crate::symbol::{keywords, Symbol};\n \n use serialize::{Encodable, Decodable, Encoder, Decoder};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -525,7 +525,7 @@ impl SyntaxContext {\n }\n \n impl fmt::Debug for SyntaxContext {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"#{}\", self.0)\n     }\n }"}, {"sha": "13e7307570a4f9b09709957692fd77f94861079d", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 15, "deletions": 26, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/281a26bb33880a47695380d6afe298535d9d01d1/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/281a26bb33880a47695380d6afe298535d9d01d1/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=281a26bb33880a47695380d6afe298535d9d01d1", "patch": "@@ -8,34 +8,23 @@\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n+#![deny(rust_2018_idioms)]\n+\n #![feature(const_fn)]\n #![feature(crate_visibility_modifier)]\n #![feature(custom_attribute)]\n-#![feature(nll)]\n #![feature(non_exhaustive)]\n #![feature(optin_builtin_traits)]\n #![feature(rustc_attrs)]\n #![feature(specialization)]\n #![feature(step_trait)]\n #![cfg_attr(not(stage0), feature(stdsimd))]\n \n-extern crate arena;\n-#[macro_use]\n-extern crate rustc_data_structures;\n-\n-#[macro_use]\n-extern crate scoped_tls;\n-\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n-extern crate serialize;\n+#[allow(unused_extern_crates)]\n extern crate serialize as rustc_serialize; // used by deriving\n \n-#[macro_use]\n-extern crate cfg_if;\n-\n-extern crate unicode_width;\n-\n pub mod edition;\n pub mod hygiene;\n pub use hygiene::{Mark, SyntaxContext, ExpnInfo, ExpnFormat, CompilerDesugaringKind};\n@@ -74,7 +63,7 @@ impl Globals {\n     }\n }\n \n-scoped_thread_local!(pub static GLOBALS: Globals);\n+scoped_tls::scoped_thread_local!(pub static GLOBALS: Globals);\n \n /// Differentiates between real files and common virtual files.\n #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash, RustcDecodable, RustcEncodable)]\n@@ -100,8 +89,8 @@ pub enum FileName {\n }\n \n impl std::fmt::Display for FileName {\n-    fn fmt(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        use self::FileName::*;\n+    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        use FileName::*;\n         match *self {\n             Real(ref path) => write!(fmt, \"{}\", path.display()),\n             Macros(ref name) => write!(fmt, \"<{} macros>\", name),\n@@ -127,7 +116,7 @@ impl From<PathBuf> for FileName {\n \n impl FileName {\n     pub fn is_real(&self) -> bool {\n-        use self::FileName::*;\n+        use FileName::*;\n         match *self {\n             Real(_) => true,\n             Macros(_) |\n@@ -143,7 +132,7 @@ impl FileName {\n     }\n \n     pub fn is_macros(&self) -> bool {\n-        use self::FileName::*;\n+        use FileName::*;\n         match *self {\n             Real(_) |\n             Anon(_) |\n@@ -611,7 +600,7 @@ impl serialize::UseSpecializedDecodable for Span {\n     }\n }\n \n-pub fn default_span_debug(span: Span, f: &mut fmt::Formatter) -> fmt::Result {\n+pub fn default_span_debug(span: Span, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n     f.debug_struct(\"Span\")\n         .field(\"lo\", &span.lo())\n         .field(\"hi\", &span.hi())\n@@ -620,13 +609,13 @@ pub fn default_span_debug(span: Span, f: &mut fmt::Formatter) -> fmt::Result {\n }\n \n impl fmt::Debug for Span {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         SPAN_DEBUG.with(|span_debug| span_debug.get()(*self, f))\n     }\n }\n \n impl fmt::Debug for SpanData {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         SPAN_DEBUG.with(|span_debug| span_debug.get()(Span::new(self.lo, self.hi, self.ctxt), f))\n     }\n }\n@@ -1009,7 +998,7 @@ impl Decodable for SourceFile {\n                 // `crate_of_origin` has to be set by the importer.\n                 // This value matches up with rustc::hir::def_id::INVALID_CRATE.\n                 // That constant is not available here unfortunately :(\n-                crate_of_origin: ::std::u32::MAX - 1,\n+                crate_of_origin: std::u32::MAX - 1,\n                 start_pos,\n                 end_pos,\n                 src: None,\n@@ -1025,7 +1014,7 @@ impl Decodable for SourceFile {\n }\n \n impl fmt::Debug for SourceFile {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"SourceFile({})\", self.name)\n     }\n }\n@@ -1111,7 +1100,7 @@ impl SourceFile {\n \n     /// Get a line from the list of pre-computed line-beginnings.\n     /// The line number here is 0-based.\n-    pub fn get_line(&self, line_number: usize) -> Option<Cow<str>> {\n+    pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {\n         fn get_until_newline(src: &str, begin: usize) -> &str {\n             // We can't use `lines.get(line_number+1)` because we might\n             // be parsing when we call this function and thus the current\n@@ -1353,7 +1342,7 @@ pub struct FileLines {\n     pub lines: Vec<LineInfo>\n }\n \n-thread_local!(pub static SPAN_DEBUG: Cell<fn(Span, &mut fmt::Formatter) -> fmt::Result> =\n+thread_local!(pub static SPAN_DEBUG: Cell<fn(Span, &mut fmt::Formatter<'_>) -> fmt::Result> =\n                 Cell::new(default_span_debug));\n \n #[derive(Debug)]"}, {"sha": "03d7a9eb7423800bf51aa5e0772bdd85a91c108d", "filename": "src/libsyntax_pos/span_encoding.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/281a26bb33880a47695380d6afe298535d9d01d1/src%2Flibsyntax_pos%2Fspan_encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/281a26bb33880a47695380d6afe298535d9d01d1/src%2Flibsyntax_pos%2Fspan_encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fspan_encoding.rs?ref=281a26bb33880a47695380d6afe298535d9d01d1", "patch": "@@ -4,9 +4,9 @@\n // The encoding format for inline spans were obtained by optimizing over crates in rustc/libstd.\n // See https://internals.rust-lang.org/t/rfc-compiler-refactoring-spans/1357/28\n \n-use GLOBALS;\n-use {BytePos, SpanData};\n-use hygiene::SyntaxContext;\n+use crate::GLOBALS;\n+use crate::{BytePos, SpanData};\n+use crate::hygiene::SyntaxContext;\n \n use rustc_data_structures::fx::FxHashMap;\n use std::hash::{Hash, Hasher};"}, {"sha": "0eecdbfa9763442d176552f62686c1065b07235a", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/281a26bb33880a47695380d6afe298535d9d01d1/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/281a26bb33880a47695380d6afe298535d9d01d1/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=281a26bb33880a47695380d6afe298535d9d01d1", "patch": "@@ -5,15 +5,16 @@\n use arena::DroplessArena;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n+use rustc_data_structures::newtype_index;\n use serialize::{Decodable, Decoder, Encodable, Encoder};\n \n use std::fmt;\n use std::str;\n use std::cmp::{PartialEq, Ordering, PartialOrd, Ord};\n use std::hash::{Hash, Hasher};\n \n-use hygiene::SyntaxContext;\n-use {Span, DUMMY_SP, GLOBALS};\n+use crate::hygiene::SyntaxContext;\n+use crate::{Span, DUMMY_SP, GLOBALS};\n \n #[derive(Copy, Clone, Eq)]\n pub struct Ident {\n@@ -100,13 +101,13 @@ impl Hash for Ident {\n }\n \n impl fmt::Debug for Ident {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}{:?}\", self.name, self.span.ctxt())\n     }\n }\n \n impl fmt::Display for Ident {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&self.name, f)\n     }\n }\n@@ -181,7 +182,7 @@ impl Symbol {\n     pub fn as_str(self) -> LocalInternedString {\n         with_interner(|interner| unsafe {\n             LocalInternedString {\n-                string: ::std::mem::transmute::<&str, &str>(interner.get(self))\n+                string: std::mem::transmute::<&str, &str>(interner.get(self))\n             }\n         })\n     }\n@@ -198,7 +199,7 @@ impl Symbol {\n }\n \n impl fmt::Debug for Symbol {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let is_gensymed = with_interner(|interner| interner.is_gensymed(*self));\n         if is_gensymed {\n             write!(f, \"{}({:?})\", self, self.0)\n@@ -209,7 +210,7 @@ impl fmt::Debug for Symbol {\n }\n \n impl fmt::Display for Symbol {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&self.as_str(), f)\n     }\n }\n@@ -226,7 +227,7 @@ impl Decodable for Symbol {\n     }\n }\n \n-impl<T: ::std::ops::Deref<Target=str>> PartialEq<T> for Symbol {\n+impl<T: std::ops::Deref<Target=str>> PartialEq<T> for Symbol {\n     fn eq(&self, other: &T) -> bool {\n         self.as_str() == other.deref()\n     }\n@@ -335,7 +336,7 @@ macro_rules! declare_keywords {(\n             };\n         )*\n \n-        impl ::std::str::FromStr for Keyword {\n+        impl std::str::FromStr for Keyword {\n             type Err = ();\n \n             fn from_str(s: &str) -> Result<Self, ()> {\n@@ -519,40 +520,40 @@ impl LocalInternedString {\n     }\n }\n \n-impl<U: ?Sized> ::std::convert::AsRef<U> for LocalInternedString\n+impl<U: ?Sized> std::convert::AsRef<U> for LocalInternedString\n where\n-    str: ::std::convert::AsRef<U>\n+    str: std::convert::AsRef<U>\n {\n     fn as_ref(&self) -> &U {\n         self.string.as_ref()\n     }\n }\n \n-impl<T: ::std::ops::Deref<Target = str>> ::std::cmp::PartialEq<T> for LocalInternedString {\n+impl<T: std::ops::Deref<Target = str>> std::cmp::PartialEq<T> for LocalInternedString {\n     fn eq(&self, other: &T) -> bool {\n         self.string == other.deref()\n     }\n }\n \n-impl ::std::cmp::PartialEq<LocalInternedString> for str {\n+impl std::cmp::PartialEq<LocalInternedString> for str {\n     fn eq(&self, other: &LocalInternedString) -> bool {\n         self == other.string\n     }\n }\n \n-impl<'a> ::std::cmp::PartialEq<LocalInternedString> for &'a str {\n+impl<'a> std::cmp::PartialEq<LocalInternedString> for &'a str {\n     fn eq(&self, other: &LocalInternedString) -> bool {\n         *self == other.string\n     }\n }\n \n-impl ::std::cmp::PartialEq<LocalInternedString> for String {\n+impl std::cmp::PartialEq<LocalInternedString> for String {\n     fn eq(&self, other: &LocalInternedString) -> bool {\n         self == other.string\n     }\n }\n \n-impl<'a> ::std::cmp::PartialEq<LocalInternedString> for &'a String {\n+impl<'a> std::cmp::PartialEq<LocalInternedString> for &'a String {\n     fn eq(&self, other: &LocalInternedString) -> bool {\n         *self == other.string\n     }\n@@ -561,19 +562,19 @@ impl<'a> ::std::cmp::PartialEq<LocalInternedString> for &'a String {\n impl !Send for LocalInternedString {}\n impl !Sync for LocalInternedString {}\n \n-impl ::std::ops::Deref for LocalInternedString {\n+impl std::ops::Deref for LocalInternedString {\n     type Target = str;\n     fn deref(&self) -> &str { self.string }\n }\n \n impl fmt::Debug for LocalInternedString {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(self.string, f)\n     }\n }\n \n impl fmt::Display for LocalInternedString {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(self.string, f)\n     }\n }\n@@ -640,7 +641,7 @@ impl Ord for InternedString {\n     }\n }\n \n-impl<T: ::std::ops::Deref<Target = str>> PartialEq<T> for InternedString {\n+impl<T: std::ops::Deref<Target = str>> PartialEq<T> for InternedString {\n     fn eq(&self, other: &T) -> bool {\n         self.with(|string| string == other.deref())\n     }\n@@ -676,20 +677,20 @@ impl<'a> PartialEq<InternedString> for &'a String {\n     }\n }\n \n-impl ::std::convert::From<InternedString> for String {\n+impl std::convert::From<InternedString> for String {\n     fn from(val: InternedString) -> String {\n         val.as_symbol().to_string()\n     }\n }\n \n impl fmt::Debug for InternedString {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.with(|str| fmt::Debug::fmt(&str, f))\n     }\n }\n \n impl fmt::Display for InternedString {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.with(|str| fmt::Display::fmt(&str, f))\n     }\n }\n@@ -709,7 +710,7 @@ impl Encodable for InternedString {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use Globals;\n+    use crate::Globals;\n \n     #[test]\n     fn interner_tests() {"}]}