{"sha": "7e251390c782d5b8d94c6e55c83572a3a7a26cb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMjUxMzkwYzc4MmQ1YjhkOTRjNmU1NWM4MzU3MmEzYTdhMjZjYjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-03T05:14:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-03T05:14:24Z"}, "message": "Auto merge of #46428 - eddyb:scalar-pair-unpacking, r=arielb1\n\nrustc: don't unpack newtypes of scalar-pairs with mismatched alignment.\n\nThis PR fixes a potential problem where a packed newtype of a pair was also considered a pair, even though it didn't have the required alignment of the pair.\ncc @oli-obk It's possible miri hit something like this, with an unstable feature, but it's more general.", "tree": {"sha": "363a9b1d7e3ec91e0f9b2844749d88b61a9cf7f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/363a9b1d7e3ec91e0f9b2844749d88b61a9cf7f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e251390c782d5b8d94c6e55c83572a3a7a26cb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e251390c782d5b8d94c6e55c83572a3a7a26cb4", "html_url": "https://github.com/rust-lang/rust/commit/7e251390c782d5b8d94c6e55c83572a3a7a26cb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e251390c782d5b8d94c6e55c83572a3a7a26cb4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16ba4591d7294e16d5fd5ea1fe8dd604f77ddd4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/16ba4591d7294e16d5fd5ea1fe8dd604f77ddd4e", "html_url": "https://github.com/rust-lang/rust/commit/16ba4591d7294e16d5fd5ea1fe8dd604f77ddd4e"}, {"sha": "d4559554454e8dc6eff2b7002baff2a5372e3dda", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4559554454e8dc6eff2b7002baff2a5372e3dda", "html_url": "https://github.com/rust-lang/rust/commit/d4559554454e8dc6eff2b7002baff2a5372e3dda"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "b2ed34cb91305ea9078af13cc087c0058ae35d60", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e251390c782d5b8d94c6e55c83572a3a7a26cb4/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e251390c782d5b8d94c6e55c83572a3a7a26cb4/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=7e251390c782d5b8d94c6e55c83572a3a7a26cb4", "patch": "@@ -1079,7 +1079,9 @@ impl<'a, 'tcx> LayoutDetails {\n                         // We have exactly one non-ZST field.\n                         (Some((i, field)), None, None) => {\n                             // Field fills the struct and it has a scalar or scalar pair ABI.\n-                            if offsets[i].bytes() == 0 && size == field.size {\n+                            if offsets[i].bytes() == 0 &&\n+                               align.abi() == field.align.abi() &&\n+                               size == field.size {\n                                 match field.abi {\n                                     // For plain scalars we can't unpack newtypes\n                                     // for `#[repr(C)]`, as that affects C ABIs."}, {"sha": "022f581278c2f9424f6dc51892e17abe1252cfe0", "filename": "src/test/codegen/packed.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7e251390c782d5b8d94c6e55c83572a3a7a26cb4/src%2Ftest%2Fcodegen%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e251390c782d5b8d94c6e55c83572a3a7a26cb4/src%2Ftest%2Fcodegen%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpacked.rs?ref=7e251390c782d5b8d94c6e55c83572a3a7a26cb4", "patch": "@@ -57,3 +57,14 @@ pub fn pkd_pair(pair1: &mut PackedPair, pair2: &mut PackedPair) {\n // CHECK: call void @llvm.memcpy.{{.*}}(i8* %{{.*}}, i8* %{{.*}}, i{{[0-9]+}} 5, i32 1, i1 false)\n     *pair2 = *pair1;\n }\n+\n+#[repr(packed)]\n+#[derive(Copy, Clone)]\n+pub struct PackedNestedPair((u32, u32));\n+\n+// CHECK-LABEL: @pkd_nested_pair\n+#[no_mangle]\n+pub fn pkd_nested_pair(pair1: &mut PackedNestedPair, pair2: &mut PackedNestedPair) {\n+// CHECK: call void @llvm.memcpy.{{.*}}(i8* %{{.*}}, i8* %{{.*}}, i{{[0-9]+}} 8, i32 1, i1 false)\n+    *pair2 = *pair1;\n+}"}]}