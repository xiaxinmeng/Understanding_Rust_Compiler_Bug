{"sha": "326e63187ff4490c30ed603158e00c0be58dd162", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNmU2MzE4N2ZmNDQ5MGMzMGVkNjAzMTU4ZTAwYzBiZTU4ZGQxNjI=", "commit": {"author": {"name": "Carl-Anton Ingmarsson", "email": "ca.ingmarsson@gmail.com", "date": "2014-01-08T23:20:14Z"}, "committer": {"name": "Carl-Anton Ingmarsson", "email": "ca.ingmarsson@gmail.com", "date": "2014-01-10T12:37:50Z"}, "message": "std::io: Add tests and benchmarks for u64_from_be_bytes()", "tree": {"sha": "1c3b754310a19c071684c90cdeb2274e42737662", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c3b754310a19c071684c90cdeb2274e42737662"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/326e63187ff4490c30ed603158e00c0be58dd162", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/326e63187ff4490c30ed603158e00c0be58dd162", "html_url": "https://github.com/rust-lang/rust/commit/326e63187ff4490c30ed603158e00c0be58dd162", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/326e63187ff4490c30ed603158e00c0be58dd162/comments", "author": {"login": "c-a", "id": 804040, "node_id": "MDQ6VXNlcjgwNDA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/804040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c-a", "html_url": "https://github.com/c-a", "followers_url": "https://api.github.com/users/c-a/followers", "following_url": "https://api.github.com/users/c-a/following{/other_user}", "gists_url": "https://api.github.com/users/c-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/c-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c-a/subscriptions", "organizations_url": "https://api.github.com/users/c-a/orgs", "repos_url": "https://api.github.com/users/c-a/repos", "events_url": "https://api.github.com/users/c-a/events{/privacy}", "received_events_url": "https://api.github.com/users/c-a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c-a", "id": 804040, "node_id": "MDQ6VXNlcjgwNDA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/804040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c-a", "html_url": "https://github.com/c-a", "followers_url": "https://api.github.com/users/c-a/followers", "following_url": "https://api.github.com/users/c-a/following{/other_user}", "gists_url": "https://api.github.com/users/c-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/c-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c-a/subscriptions", "organizations_url": "https://api.github.com/users/c-a/orgs", "repos_url": "https://api.github.com/users/c-a/repos", "events_url": "https://api.github.com/users/c-a/events{/privacy}", "received_events_url": "https://api.github.com/users/c-a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "423dd84300a7232f41b799ffdab7a1fc97ce59da", "url": "https://api.github.com/repos/rust-lang/rust/commits/423dd84300a7232f41b799ffdab7a1fc97ce59da", "html_url": "https://github.com/rust-lang/rust/commit/423dd84300a7232f41b799ffdab7a1fc97ce59da"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "7c7d7350055b648732e08c692c0a8196159d69ad", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/326e63187ff4490c30ed603158e00c0be58dd162/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326e63187ff4490c30ed603158e00c0be58dd162/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=326e63187ff4490c30ed603158e00c0be58dd162", "patch": "@@ -465,4 +465,86 @@ mod test {\n         assert!(reader.read_le_f32() == 8.1250);\n     }\n \n+    #[test]\n+    fn test_u64_from_be_bytes() {\n+        use super::u64_from_be_bytes;\n+\n+        let buf = [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09];\n+\n+        // Aligned access\n+        assert_eq!(u64_from_be_bytes(buf, 0, 0), 0);\n+        assert_eq!(u64_from_be_bytes(buf, 0, 1), 0x01);\n+        assert_eq!(u64_from_be_bytes(buf, 0, 2), 0x0102);\n+        assert_eq!(u64_from_be_bytes(buf, 0, 3), 0x010203);\n+        assert_eq!(u64_from_be_bytes(buf, 0, 4), 0x01020304);\n+        assert_eq!(u64_from_be_bytes(buf, 0, 5), 0x0102030405);\n+        assert_eq!(u64_from_be_bytes(buf, 0, 6), 0x010203040506);\n+        assert_eq!(u64_from_be_bytes(buf, 0, 7), 0x01020304050607);\n+        assert_eq!(u64_from_be_bytes(buf, 0, 8), 0x0102030405060708);\n+\n+        // Unaligned access\n+        assert_eq!(u64_from_be_bytes(buf, 1, 0), 0);\n+        assert_eq!(u64_from_be_bytes(buf, 1, 1), 0x02);\n+        assert_eq!(u64_from_be_bytes(buf, 1, 2), 0x0203);\n+        assert_eq!(u64_from_be_bytes(buf, 1, 3), 0x020304);\n+        assert_eq!(u64_from_be_bytes(buf, 1, 4), 0x02030405);\n+        assert_eq!(u64_from_be_bytes(buf, 1, 5), 0x0203040506);\n+        assert_eq!(u64_from_be_bytes(buf, 1, 6), 0x020304050607);\n+        assert_eq!(u64_from_be_bytes(buf, 1, 7), 0x02030405060708);\n+        assert_eq!(u64_from_be_bytes(buf, 1, 8), 0x0203040506070809);\n+    }\n+}\n+\n+#[cfg(test)]\n+mod bench {\n+    use extra::test::BenchHarness;\n+    use container::Container;\n+\n+    macro_rules! u64_from_be_bytes_bench_impl(\n+        ($size:expr, $stride:expr, $start_index:expr) =>\n+        ({\n+            use vec;\n+            use super::u64_from_be_bytes;\n+\n+            let data = vec::from_fn($stride*100+$start_index, |i| i as u8);\n+            let mut sum = 0u64;\n+            bh.iter(|| {\n+                let mut i = $start_index;\n+                while (i < data.len()) {\n+                    sum += u64_from_be_bytes(data, i, $size);\n+                    i += $stride;\n+                }\n+            });\n+        })\n+    )\n+\n+    #[bench]\n+    fn u64_from_be_bytes_4_aligned(bh: &mut BenchHarness) {\n+        u64_from_be_bytes_bench_impl!(4, 4, 0);\n+    }\n+\n+    #[bench]\n+    fn u64_from_be_bytes_4_unaligned(bh: &mut BenchHarness) {\n+        u64_from_be_bytes_bench_impl!(4, 4, 1);\n+    }\n+\n+    #[bench]\n+    fn u64_from_be_bytes_7_aligned(bh: &mut BenchHarness) {\n+        u64_from_be_bytes_bench_impl!(7, 8, 0);\n+    }\n+\n+    #[bench]\n+    fn u64_from_be_bytes_7_unaligned(bh: &mut BenchHarness) {\n+        u64_from_be_bytes_bench_impl!(7, 8, 1);\n+    }\n+\n+    #[bench]\n+    fn u64_from_be_bytes_8_aligned(bh: &mut BenchHarness) {\n+        u64_from_be_bytes_bench_impl!(8, 8, 0);\n+    }\n+\n+    #[bench]\n+    fn u64_from_be_bytes_8_unaligned(bh: &mut BenchHarness) {\n+        u64_from_be_bytes_bench_impl!(8, 8, 1);\n+    }\n }"}]}