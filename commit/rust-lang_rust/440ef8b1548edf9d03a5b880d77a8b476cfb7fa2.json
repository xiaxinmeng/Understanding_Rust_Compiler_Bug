{"sha": "440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MGVmOGIxNTQ4ZWRmOWQwM2E1Yjg4MGQ3N2E4YjQ3NmNmYjdmYTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-19T02:45:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-19T02:45:15Z"}, "message": "Auto merge of #30184 - petrochenkov:ascr, r=nikomatsakis\n\nThis PR is a rebase of the original PR by @eddyb https://github.com/rust-lang/rust/pull/21836 with some unrebasable parts manually reapplied, feature gate added + type equality restriction added as described below.\n\nThis implementation is partial because the type equality restriction is applied to all type ascription expressions and not only those in lvalue contexts. Thus, all difficulties with detection of these contexts and translation of coercions having effect in runtime are avoided.\nSo, you can't write things with coercions like `let slice = &[1, 2, 3]: &[u8];`. It obviously makes type ascription less useful than it should be, but it's still much more useful than not having type ascription at all.\nIn particular, things like `let v = something.iter().collect(): Vec<_>;` and `let u = t.into(): U;` work as expected and I'm pretty happy with these improvements alone.\n\nPart of https://github.com/rust-lang/rust/issues/23416", "tree": {"sha": "035b909d2c9572fe5d3e491a57e8b36b7649e914", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/035b909d2c9572fe5d3e491a57e8b36b7649e914"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "html_url": "https://github.com/rust-lang/rust/commit/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ad12c3e251df6b8ed42b4d32709f4f55470a0be", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad12c3e251df6b8ed42b4d32709f4f55470a0be", "html_url": "https://github.com/rust-lang/rust/commit/8ad12c3e251df6b8ed42b4d32709f4f55470a0be"}, {"sha": "95fdaf237575e44ecf16f9fb13ab60058909f281", "url": "https://api.github.com/repos/rust-lang/rust/commits/95fdaf237575e44ecf16f9fb13ab60058909f281", "html_url": "https://github.com/rust-lang/rust/commit/95fdaf237575e44ecf16f9fb13ab60058909f281"}], "stats": {"total": 345, "additions": 321, "deletions": 24}, "files": [{"sha": "e7cc1436824e42dcd500d7bfff4685ca065e06ee", "filename": "src/doc/reference.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -2388,6 +2388,8 @@ The currently implemented features of the reference compiler are:\n \n * - `deprecated` - Allows using the `#[deprecated]` attribute.\n \n+* - `type_ascription` - Allows type ascription expressions `expr: Type`.\n+\n If a feature is promoted to a language feature, then all existing programs will\n start to receive compilation warnings about `#![feature]` directives which enabled\n the new feature (because the directive is no longer necessary). However, if a"}, {"sha": "abe85125215708f38abd8038f0295e6efb8df76b", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -352,6 +352,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             hir::ExprBox(ref e) |\n             hir::ExprAddrOf(_, ref e) |\n             hir::ExprCast(ref e, _) |\n+            hir::ExprType(ref e, _) |\n             hir::ExprUnary(_, ref e) |\n             hir::ExprField(ref e, _) |\n             hir::ExprTupField(ref e, _) => {"}, {"sha": "d6f05ffd8a513013a6e36ebeb886fcb97492154f", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -784,6 +784,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n         hir::ExprField(..) |\n         hir::ExprTupField(..) |\n         hir::ExprVec(_) |\n+        hir::ExprType(..) |\n         hir::ExprTup(..) => {}\n \n         // Conditional control flow (possible to implement)."}, {"sha": "d5cfff4aff8a466f3a0090eb4e7063303630b7e7", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -1126,6 +1126,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n             None => unreachable!(),\n         }\n       }\n+      hir::ExprType(ref e, _) => try!(eval_const_expr_partial(tcx, &**e, ty_hint, fn_args)),\n       hir::ExprTup(_) => Tuple(e.id),\n       hir::ExprStruct(..) => Struct(e.id),\n       hir::ExprIndex(ref arr, ref idx) => {"}, {"sha": "ff3e99d487c9e41b4e75e050ddd425eb23fb32c6", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -373,6 +373,10 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n         match expr.node {\n             hir::ExprPath(..) => { }\n \n+            hir::ExprType(ref subexpr, _) => {\n+                self.walk_expr(&**subexpr)\n+            }\n+\n             hir::ExprUnary(hir::UnDeref, ref base) => {      // *base\n                 if !self.walk_overloaded_operator(expr, &**base, Vec::new(), PassArgs::ByRef) {\n                     self.select_from_expr(&**base);"}, {"sha": "540af4ae001656a807208f63d90a5ac54a0c5657", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -496,7 +496,7 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n       hir::ExprBlock(..) | hir::ExprAssign(..) | hir::ExprAssignOp(..) |\n       hir::ExprStruct(..) | hir::ExprRepeat(..) |\n       hir::ExprInlineAsm(..) | hir::ExprBox(..) |\n-      hir::ExprRange(..) => {\n+      hir::ExprRange(..) | hir::ExprType(..) => {\n           intravisit::walk_expr(ir, expr);\n       }\n     }\n@@ -1160,6 +1160,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n           hir::ExprBox(ref e) |\n           hir::ExprAddrOf(_, ref e) |\n           hir::ExprCast(ref e, _) |\n+          hir::ExprType(ref e, _) |\n           hir::ExprUnary(_, ref e) => {\n             self.propagate_through_expr(&**e, succ)\n           }\n@@ -1443,7 +1444,7 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n       hir::ExprBlock(..) | hir::ExprAddrOf(..) |\n       hir::ExprStruct(..) | hir::ExprRepeat(..) |\n       hir::ExprClosure(..) | hir::ExprPath(..) | hir::ExprBox(..) |\n-      hir::ExprRange(..) => {\n+      hir::ExprRange(..) | hir::ExprType(..) => {\n         intravisit::walk_expr(this, expr);\n       }\n     }"}, {"sha": "1eb5efa0bda446eb88fe613d786608c88fb4359f", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -518,6 +518,10 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n             self.cat_def(expr.id, expr.span, expr_ty, def)\n           }\n \n+          hir::ExprType(ref e, _) => {\n+            self.cat_expr(&**e)\n+          }\n+\n           hir::ExprAddrOf(..) | hir::ExprCall(..) |\n           hir::ExprAssign(..) | hir::ExprAssignOp(..) |\n           hir::ExprClosure(..) | hir::ExprRet(..) |"}, {"sha": "308883cf063df723e002e90db60c731477d156f9", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -2114,6 +2114,10 @@ impl<'tcx> ctxt<'tcx> {\n                 }\n             }\n \n+            hir::ExprType(ref e, _) => {\n+                self.expr_is_lval(e)\n+            }\n+\n             hir::ExprUnary(hir::UnDeref, _) |\n             hir::ExprField(..) |\n             hir::ExprTupField(..) |"}, {"sha": "2532882d0127d22721541632b919ea8e759ad056", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -234,6 +234,7 @@ mod svh_visitor {\n         SawExprUnary(hir::UnOp),\n         SawExprLit(ast::Lit_),\n         SawExprCast,\n+        SawExprType,\n         SawExprIf,\n         SawExprWhile,\n         SawExprMatch,\n@@ -262,6 +263,7 @@ mod svh_visitor {\n             ExprUnary(op, _)         => SawExprUnary(op),\n             ExprLit(ref lit)         => SawExprLit(lit.node.clone()),\n             ExprCast(..)             => SawExprCast,\n+            ExprType(..)             => SawExprType,\n             ExprIf(..)               => SawExprIf,\n             ExprWhile(..)            => SawExprWhile,\n             ExprLoop(_, id)          => SawExprLoop(id.map(|id| id.name.as_str())),"}, {"sha": "5da679c3495c5539406d291f636f2fe3d2f85b79", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -1043,6 +1043,9 @@ pub fn noop_fold_expr<T: Folder>(Expr { id, node, span, attrs }: Expr, folder: &\n             ExprCast(expr, ty) => {\n                 ExprCast(folder.fold_expr(expr), folder.fold_ty(ty))\n             }\n+            ExprType(expr, ty) => {\n+                ExprType(folder.fold_expr(expr), folder.fold_ty(ty))\n+            }\n             ExprAddrOf(m, ohs) => ExprAddrOf(m, folder.fold_expr(ohs)),\n             ExprIf(cond, tr, fl) => {\n                 ExprIf(folder.fold_expr(cond),"}, {"sha": "d079024bc96c4221b451490dccd587c12668604a", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -737,6 +737,7 @@ pub enum Expr_ {\n     ExprLit(P<Lit>),\n     /// A cast (`foo as f64`)\n     ExprCast(P<Expr>, P<Ty>),\n+    ExprType(P<Expr>, P<Ty>),\n     /// An `if` block, with an optional else block\n     ///\n     /// `if expr { block } else { expr }`"}, {"sha": "03b021cfa6395aed86e8ee1bd5daecccd20e0594", "filename": "src/librustc_front/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_front%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_front%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fintravisit.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -732,7 +732,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             visitor.visit_expr(subexpression)\n         }\n         ExprLit(_) => {}\n-        ExprCast(ref subexpression, ref typ) => {\n+        ExprCast(ref subexpression, ref typ) | ExprType(ref subexpression, ref typ) => {\n             visitor.visit_expr(subexpression);\n             visitor.visit_ty(typ)\n         }"}, {"sha": "52e771bd5c37c02826f5533295d3bcd147f1308b", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -1128,6 +1128,10 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n                 let expr = lower_expr(lctx, expr);\n                 hir::ExprCast(expr, lower_ty(lctx, ty))\n             }\n+            ExprType(ref expr, ref ty) => {\n+                let expr = lower_expr(lctx, expr);\n+                hir::ExprType(expr, lower_ty(lctx, ty))\n+            }\n             ExprAddrOf(m, ref ohs) => {\n                 let m = lower_mutability(lctx, m);\n                 let ohs = lower_expr(lctx, ohs);"}, {"sha": "f1b963bf11ddbeedb66f1fa96c88ca3576d9c317", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -335,7 +335,8 @@ fn needs_parentheses(expr: &hir::Expr) -> bool {\n         hir::ExprBinary(..) |\n         hir::ExprClosure(..) |\n         hir::ExprAssignOp(..) |\n-        hir::ExprCast(..) => true,\n+        hir::ExprCast(..) |\n+        hir::ExprType(..) => true,\n         _ => false,\n     }\n }\n@@ -1353,6 +1354,11 @@ impl<'a> State<'a> {\n                 try!(self.word_space(\"as\"));\n                 try!(self.print_type(&**ty));\n             }\n+            hir::ExprType(ref expr, ref ty) => {\n+                try!(self.print_expr(&**expr));\n+                try!(self.word_space(\":\"));\n+                try!(self.print_type(&**ty));\n+            }\n             hir::ExprIf(ref test, ref blk, ref elseopt) => {\n                 try!(self.print_if(&**test, &**blk, elseopt.as_ref().map(|e| &**e)));\n             }"}, {"sha": "18a3a96069e19d8fcf7bd08bf45399ab239dabbb", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -319,6 +319,7 @@ impl UnusedParens {\n                 }\n                 ast::ExprUnary(_, ref x) |\n                 ast::ExprCast(ref x, _) |\n+                ast::ExprType(ref x, _) |\n                 ast::ExprField(ref x, _) |\n                 ast::ExprTupField(ref x, _) |\n                 ast::ExprIndex(ref x, _) => {"}, {"sha": "5cb12627d6ba882eac4e03f2925a4d2f45bbe0e5", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -320,6 +320,8 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                                   name: Field::new(index.node as usize) },\n             hir::ExprCast(ref source, _) =>\n                 ExprKind::Cast { source: source.to_ref() },\n+            hir::ExprType(ref source, _) =>\n+                return source.make_mirror(cx),\n             hir::ExprBox(ref value) =>\n                 ExprKind::Box { value: value.to_ref() },\n             hir::ExprVec(ref fields) =>"}, {"sha": "0fafe08178a273a725b3752e5982baacc519adba", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -1003,6 +1003,7 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             try!(const_fn_call(cx, MethodCallKey(method_call),\n                                method_did, &arg_vals, param_substs, trueconst))\n         },\n+        hir::ExprType(ref e, _) => try!(const_expr(cx, &**e, param_substs, fn_args, trueconst)).0,\n         hir::ExprBlock(ref block) => {\n             match block.expr {\n                 Some(ref expr) => try!(const_expr("}, {"sha": "237d31c47783d91059fbf2635af13f99eec1c69d", "filename": "src/librustc_trans/trans/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -320,6 +320,7 @@ fn walk_expr(cx: &CrateContext,\n         hir::ExprPath(..) => {}\n \n         hir::ExprCast(ref sub_exp, _)     |\n+        hir::ExprType(ref sub_exp, _) |\n         hir::ExprAddrOf(_, ref sub_exp)  |\n         hir::ExprField(ref sub_exp, _) |\n         hir::ExprTupField(ref sub_exp, _) =>"}, {"sha": "ecf54cde9f63a7ba5ce37df816f4399b3a756d96", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -656,6 +656,9 @@ fn trans_datum_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let _icx = push_ctxt(\"trans_datum_unadjusted\");\n \n     match expr.node {\n+        hir::ExprType(ref e, _) => {\n+            trans(bcx, &**e)\n+        }\n         hir::ExprPath(..) => {\n             trans_def(bcx, expr, bcx.def(expr.id))\n         }\n@@ -941,6 +944,9 @@ fn trans_rvalue_stmt_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         hir::ExprBreak(label_opt) => {\n             controlflow::trans_break(bcx, expr, label_opt.map(|l| l.node.name))\n         }\n+        hir::ExprType(ref e, _) => {\n+            trans_into(bcx, &**e, Ignore)\n+        }\n         hir::ExprAgain(label_opt) => {\n             controlflow::trans_cont(bcx, expr, label_opt.map(|l| l.node.name))\n         }\n@@ -1064,6 +1070,9 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     debuginfo::set_source_location(bcx.fcx, expr.id, expr.span);\n \n     match expr.node {\n+        hir::ExprType(ref e, _) => {\n+            trans_into(bcx, &**e, dest)\n+        }\n         hir::ExprPath(..) => {\n             trans_def_dps_unadjusted(bcx, expr, bcx.def(expr.id), dest)\n         }\n@@ -2601,6 +2610,10 @@ fn expr_kind(tcx: &ty::ctxt, expr: &hir::Expr) -> ExprKind {\n             }\n         }\n \n+        hir::ExprType(ref expr, _) => {\n+            expr_kind(tcx, expr)\n+        }\n+\n         hir::ExprUnary(hir::UnDeref, _) |\n         hir::ExprField(..) |\n         hir::ExprTupField(..) |"}, {"sha": "c91f65814186415aff56d75cf376d4cf973d0c9d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -2648,6 +2648,14 @@ fn check_lit<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     }\n }\n \n+fn check_expr_eq_type<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n+                                expr: &'tcx hir::Expr,\n+                                expected: Ty<'tcx>) {\n+    check_expr_with_unifier(\n+        fcx, expr, ExpectHasType(expected), NoPreference,\n+        || demand::eqtype(fcx, expr.span, expected, fcx.expr_ty(expr)));\n+}\n+\n pub fn check_expr_has_type<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                      expr: &'tcx hir::Expr,\n                                      expected: Ty<'tcx>) {\n@@ -3510,6 +3518,11 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n             deferred_cast_checks.push(cast_check);\n         }\n       }\n+      hir::ExprType(ref e, ref t) => {\n+        let typ = fcx.to_ty(&**t);\n+        check_expr_eq_type(fcx, &**e, typ);\n+        fcx.write_ty(id, typ);\n+      }\n       hir::ExprVec(ref args) => {\n         let uty = expected.to_option(fcx).and_then(|uty| {\n             match uty.sty {"}, {"sha": "abc44407eff73af5166b0d3a045296f4ebadb323", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -942,6 +942,7 @@ pub enum Expr_ {\n     ExprLit(P<Lit>),\n     /// A cast (`foo as f64`)\n     ExprCast(P<Expr>, P<Ty>),\n+    ExprType(P<Expr>, P<Ty>),\n     /// An `if` block, with an optional else block\n     ///\n     /// `if expr { block } else { expr }`"}, {"sha": "b2989c42a9e9291827ec1ce85810f81770074485", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -233,6 +233,9 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Option<u32>, Status\n \n     // Allows `#[deprecated]` attribute\n     (\"deprecated\", \"1.6.0\", Some(29935), Active),\n+\n+    // allow using type ascription in expressions\n+    (\"type_ascription\", \"1.6.0\", Some(23416), Active),\n ];\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n \n@@ -958,6 +961,10 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                                   \"box expression syntax is experimental; \\\n                                    you can call `Box::new` instead.\");\n             }\n+            ast::ExprType(..) => {\n+                self.gate_feature(\"type_ascription\", e.span,\n+                                  \"type ascription is experimental\");\n+            }\n             _ => {}\n         }\n         visit::walk_expr(self, e);"}, {"sha": "cb467f9016b6f5f6496635b6fd5bcf2a505bb586", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -1203,6 +1203,9 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mu\n             ExprCast(expr, ty) => {\n                 ExprCast(folder.fold_expr(expr), folder.fold_ty(ty))\n             }\n+            ExprType(expr, ty) => {\n+                ExprType(folder.fold_expr(expr), folder.fold_ty(ty))\n+            }\n             ExprAddrOf(m, ohs) => ExprAddrOf(m, folder.fold_expr(ohs)),\n             ExprIf(cond, tr, fl) => {\n                 ExprIf(folder.fold_expr(cond),"}, {"sha": "b625277f2a77215f09c542154c625871d85ed199", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -26,7 +26,7 @@ use ast::{ExprBreak, ExprCall, ExprCast, ExprInPlace};\n use ast::{ExprField, ExprTupField, ExprClosure, ExprIf, ExprIfLet, ExprIndex};\n use ast::{ExprLit, ExprLoop, ExprMac, ExprRange};\n use ast::{ExprMethodCall, ExprParen, ExprPath};\n-use ast::{ExprRepeat, ExprRet, ExprStruct, ExprTup, ExprUnary};\n+use ast::{ExprRepeat, ExprRet, ExprStruct, ExprTup, ExprType, ExprUnary};\n use ast::{ExprVec, ExprWhile, ExprWhileLet, ExprForLoop, Field, FnDecl};\n use ast::{ForeignItem, ForeignItemStatic, ForeignItemFn, FunctionRetTy};\n use ast::{Ident, Inherited, ImplItem, Item, Item_, ItemStatic};\n@@ -2787,6 +2787,11 @@ impl<'a> Parser<'a> {\n                 lhs = self.mk_expr(lhs.span.lo, rhs.span.hi,\n                                    ExprCast(lhs, rhs), None);\n                 continue\n+            } else if op == AssocOp::Colon {\n+                let rhs = try!(self.parse_ty());\n+                lhs = self.mk_expr(lhs.span.lo, rhs.span.hi,\n+                                   ExprType(lhs, rhs), None);\n+                continue\n             } else if op == AssocOp::DotDot {\n                     // If we didn\u2019t have to handle `x..`, it would be pretty easy to generalise\n                     // it to the Fixity::None code.\n@@ -2809,7 +2814,6 @@ impl<'a> Parser<'a> {\n                     break\n             }\n \n-\n             let rhs = try!(match op.fixity() {\n                 Fixity::Right => self.with_res(restrictions, |this|{\n                     this.parse_assoc_expr_with(op.precedence(), LhsExpr::NotYetParsed)\n@@ -2856,7 +2860,9 @@ impl<'a> Parser<'a> {\n                     let aopexpr = self.mk_assign_op(codemap::respan(cur_op_span, aop), lhs, rhs);\n                     self.mk_expr(lhs_span.lo, rhs_span.hi, aopexpr, None)\n                 }\n-                AssocOp::As | AssocOp::DotDot => self.bug(\"As or DotDot branch reached\")\n+                AssocOp::As | AssocOp::Colon | AssocOp::DotDot => {\n+                    self.bug(\"As, Colon or DotDot branch reached\")\n+                }\n             };\n \n             if op.fixity() == Fixity::None { break }"}, {"sha": "ff01f0ac67e4118ec20b781b5442aeb3eabef683", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -444,7 +444,7 @@ fn needs_parentheses(expr: &ast::Expr) -> bool {\n         ast::ExprAssign(..) | ast::ExprBinary(..) |\n         ast::ExprClosure(..) |\n         ast::ExprAssignOp(..) | ast::ExprCast(..) |\n-        ast::ExprInPlace(..) => true,\n+        ast::ExprInPlace(..) | ast::ExprType(..) => true,\n         _ => false,\n     }\n }\n@@ -2035,6 +2035,11 @@ impl<'a> State<'a> {\n                 try!(self.word_space(\"as\"));\n                 try!(self.print_type(&**ty));\n             }\n+            ast::ExprType(ref expr, ref ty) => {\n+                try!(self.print_expr(&**expr));\n+                try!(self.word_space(\":\"));\n+                try!(self.print_type(&**ty));\n+            }\n             ast::ExprIf(ref test, ref blk, ref elseopt) => {\n                 try!(self.print_if(&**test, &**blk, elseopt.as_ref().map(|e| &**e)));\n             }"}, {"sha": "87ef96d87ff5c627d72cb3578e22af16ce47679e", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -60,7 +60,9 @@ pub enum AssocOp {\n     /// `as`\n     As,\n     /// `..` range\n-    DotDot\n+    DotDot,\n+    /// `:`\n+    Colon,\n }\n \n #[derive(Debug, PartialEq, Eq)]\n@@ -100,6 +102,7 @@ impl AssocOp {\n             Token::AndAnd => Some(LAnd),\n             Token::OrOr => Some(LOr),\n             Token::DotDot => Some(DotDot),\n+            Token::Colon => Some(Colon),\n             _ if t.is_keyword(keywords::As) => Some(As),\n             _ => None\n         }\n@@ -134,7 +137,7 @@ impl AssocOp {\n     pub fn precedence(&self) -> usize {\n         use self::AssocOp::*;\n         match *self {\n-            As => 14,\n+            As | Colon => 14,\n             Multiply | Divide | Modulus => 13,\n             Add | Subtract => 12,\n             ShiftLeft | ShiftRight => 11,\n@@ -158,7 +161,7 @@ impl AssocOp {\n             Inplace | Assign | AssignOp(_) => Fixity::Right,\n             As | Multiply | Divide | Modulus | Add | Subtract | ShiftLeft | ShiftRight | BitAnd |\n             BitXor | BitOr | Less | Greater | LessEqual | GreaterEqual | Equal | NotEqual |\n-            LAnd | LOr => Fixity::Left,\n+            LAnd | LOr | Colon => Fixity::Left,\n             DotDot => Fixity::None\n         }\n     }\n@@ -168,7 +171,7 @@ impl AssocOp {\n         match *self {\n             Less | Greater | LessEqual | GreaterEqual | Equal | NotEqual => true,\n             Inplace | Assign | AssignOp(_) | As | Multiply | Divide | Modulus | Add | Subtract |\n-            ShiftLeft | ShiftRight | BitAnd | BitXor | BitOr | LAnd | LOr | DotDot => false\n+            ShiftLeft | ShiftRight | BitAnd | BitXor | BitOr | LAnd | LOr | DotDot | Colon => false\n         }\n     }\n \n@@ -178,7 +181,7 @@ impl AssocOp {\n             Assign | AssignOp(_) | Inplace => true,\n             Less | Greater | LessEqual | GreaterEqual | Equal | NotEqual | As | Multiply | Divide |\n             Modulus | Add | Subtract | ShiftLeft | ShiftRight | BitAnd | BitXor | BitOr | LAnd |\n-            LOr | DotDot => false\n+            LOr | DotDot | Colon => false\n         }\n     }\n \n@@ -203,8 +206,7 @@ impl AssocOp {\n             BitOr => Some(ast::BiBitOr),\n             LAnd => Some(ast::BiAnd),\n             LOr => Some(ast::BiOr),\n-            Inplace | Assign | AssignOp(_) | As | DotDot => None\n+            Inplace | Assign | AssignOp(_) | As | DotDot | Colon => None\n         }\n     }\n-\n }"}, {"sha": "b8dd54790ce51ecb21cad8c15fbcf74e8308b4bb", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -693,7 +693,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             visitor.visit_expr(subexpression)\n         }\n         ExprLit(_) => {}\n-        ExprCast(ref subexpression, ref typ) => {\n+        ExprCast(ref subexpression, ref typ) | ExprType(ref subexpression, ref typ) => {\n             visitor.visit_expr(subexpression);\n             visitor.visit_ty(typ)\n         }"}, {"sha": "e5c6a17c78ba25191f25e50a4375dfd8487fb9b6", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -19,8 +19,8 @@ use syntax::codemap::Span;\n use syntax::ext::base;\n use syntax::ext::base::*;\n use syntax::feature_gate;\n-use syntax::parse::token::{intern, InternedString};\n-use syntax::parse::token;\n+use syntax::parse::token::intern;\n+use syntax::parse::{self, token};\n use syntax::ptr::P;\n use syntax::ast::AsmDialect;\n \n@@ -58,8 +58,17 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n         return DummyResult::expr(sp);\n     }\n \n-    let mut p = cx.new_parser_from_tts(tts);\n-    let mut asm = InternedString::new(\"\");\n+    // Split the tts before the first colon, to avoid `asm!(\"x\": y)`  being\n+    // parsed as `asm!(z)` with `z = \"x\": y` which is type ascription.\n+    let first_colon = tts.iter().position(|tt| {\n+        match *tt {\n+            ast::TokenTree::Token(_, token::Colon) |\n+            ast::TokenTree::Token(_, token::ModSep) => true,\n+            _ => false\n+        }\n+    }).unwrap_or(tts.len());\n+    let mut p = cx.new_parser_from_tts(&tts[first_colon..]);\n+    let mut asm = token::InternedString::new(\"\");\n     let mut asm_str_style = None;\n     let mut outputs = Vec::new();\n     let mut inputs = Vec::new();\n@@ -79,12 +88,22 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                     cx.span_err(sp, \"malformed inline assembly\");\n                     return DummyResult::expr(sp);\n                 }\n-                let (s, style) = match expr_to_string(cx, panictry!(p.parse_expr()),\n+                // Nested parser, stop before the first colon (see above).\n+                let mut p2 = cx.new_parser_from_tts(&tts[..first_colon]);\n+                let (s, style) = match expr_to_string(cx, panictry!(p2.parse_expr()),\n                                                    \"inline assembly must be a string literal\") {\n                     Some((s, st)) => (s, st),\n                     // let compilation continue\n                     None => return DummyResult::expr(sp),\n                 };\n+\n+                // This is most likely malformed.\n+                if p2.token != token::Eof {\n+                    let mut extra_tts = panictry!(p2.parse_all_token_trees());\n+                    extra_tts.extend(tts[first_colon..].iter().cloned());\n+                    p = parse::tts_to_parser(cx.parse_sess, extra_tts, cx.cfg());\n+                }\n+\n                 asm = s;\n                 asm_str_style = Some(style);\n             }"}, {"sha": "ef65927fc5d419eb1b922bb81e9c271323340347", "filename": "src/test/compile-fail/coerce-expect-unsized-ascribed.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Ftest%2Fcompile-fail%2Fcoerce-expect-unsized-ascribed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Ftest%2Fcompile-fail%2Fcoerce-expect-unsized-ascribed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-expect-unsized-ascribed.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// A version of coerce-expect-unsized that uses type ascription.\n+// Doesn't work so far, but supposed to work eventually\n+\n+#![feature(box_syntax, type_ascription)]\n+\n+use std::fmt::Debug;\n+\n+pub fn main() {\n+    let _ = box { [1, 2, 3] }: Box<[i32]>; //~ ERROR mismatched types\n+    let _ = box if true { [1, 2, 3] } else { [1, 3, 4] }: Box<[i32]>; //~ ERROR mismatched types\n+    let _ = box match true { true => [1, 2, 3], false => [1, 3, 4] }: Box<[i32]>;\n+    //~^ ERROR mismatched types\n+    let _ = box { |x| (x as u8) }: Box<Fn(i32) -> _>; //~ ERROR mismatched types\n+    let _ = box if true { false } else { true }: Box<Debug>; //~ ERROR mismatched types\n+    let _ = box match true { true => 'a', false => 'b' }: Box<Debug>; //~ ERROR mismatched types\n+\n+    let _ = &{ [1, 2, 3] }: &[i32]; //~ ERROR mismatched types\n+    let _ = &if true { [1, 2, 3] } else { [1, 3, 4] }: &[i32]; //~ ERROR mismatched types\n+    let _ = &match true { true => [1, 2, 3], false => [1, 3, 4] }: &[i32];\n+    //~^ ERROR mismatched types\n+    let _ = &{ |x| (x as u8) }: &Fn(i32) -> _; //~ ERROR mismatched types\n+    let _ = &if true { false } else { true }: &Debug; //~ ERROR mismatched types\n+    let _ = &match true { true => 'a', false => 'b' }: &Debug; //~ ERROR mismatched types\n+\n+    let _ = Box::new([1, 2, 3]): Box<[i32]>; //~ ERROR mismatched types\n+    let _ = Box::new(|x| (x as u8)): Box<Fn(i32) -> _>; //~ ERROR mismatched types\n+\n+    let _ = vec![\n+        Box::new(|x| (x as u8)),\n+        box |x| (x as i16 as u8),\n+    ]: Vec<Box<Fn(i32) -> _>>;\n+}"}, {"sha": "d3c07d653f40ce548d57cf994321f87f294896ad", "filename": "src/test/compile-fail/type-ascription-feature-gate.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Ftest%2Fcompile-fail%2Ftype-ascription-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Ftest%2Fcompile-fail%2Ftype-ascription-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-ascription-feature-gate.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Type ascription is feature gated\n+\n+fn main() {\n+    let a = 10: u8; //~ ERROR type ascription is experimental\n+}"}, {"sha": "bb7a8bc3ddf9899bbbadd83e410f7e9d2a70f115", "filename": "src/test/compile-fail/type-ascription-precedence.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Ftest%2Fcompile-fail%2Ftype-ascription-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Ftest%2Fcompile-fail%2Ftype-ascription-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-ascription-precedence.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -0,0 +1,64 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Operator precedence of type ascription\n+// Type ascription has very high precedence, the same as operator `as`\n+\n+#![feature(type_ascription)]\n+\n+use std::ops::*;\n+\n+struct S;\n+struct Z;\n+\n+impl Add<Z> for S {\n+    type Output = S;\n+    fn add(self, _rhs: Z) -> S { panic!() }\n+}\n+impl Mul<Z> for S {\n+    type Output = S;\n+    fn mul(self, _rhs: Z) -> S { panic!() }\n+}\n+impl Neg for S {\n+    type Output = Z;\n+    fn neg(self) -> Z { panic!() }\n+}\n+impl Deref for S {\n+    type Target = Z;\n+    fn deref(&self) -> &Z { panic!() }\n+}\n+\n+fn main() {\n+    &S: &S; // OK\n+    (&S): &S; // OK\n+    &(S: &S); //~ ERROR mismatched types\n+\n+    *S: Z; // OK\n+    (*S): Z; // OK\n+    *(S: Z); //~ ERROR mismatched types\n+    //~^ ERROR type `Z` cannot be dereferenced\n+\n+    -S: Z; // OK\n+    (-S): Z; // OK\n+    -(S: Z); //~ ERROR mismatched types\n+    //~^ ERROR cannot apply unary operator `-` to type `Z`\n+\n+    S + Z: Z; // OK\n+    S + (Z: Z); // OK\n+    (S + Z): Z; //~ ERROR mismatched types\n+\n+    S * Z: Z; // OK\n+    S * (Z: Z); // OK\n+    (S * Z): Z; //~ ERROR mismatched types\n+\n+    S .. S: S; // OK\n+    S .. (S: S); // OK\n+    (S .. S): S; //~ ERROR mismatched types\n+}"}, {"sha": "2d882e87ab8eab60cbc24114ec5c2e2a2085ac6b", "filename": "src/test/compile-fail/type-ascription-soundness.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Ftest%2Fcompile-fail%2Ftype-ascription-soundness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Ftest%2Fcompile-fail%2Ftype-ascription-soundness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-ascription-soundness.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Type ascription doesn't lead to unsoundness\n+\n+#![feature(type_ascription)]\n+\n+fn main() {\n+    let arr = &[1u8, 2, 3];\n+    let ref x = arr: &[u8]; //~ ERROR mismatched types\n+    let ref mut x = arr: &[u8]; //~ ERROR mismatched types\n+    match arr: &[u8] { //~ ERROR mismatched types\n+        ref x => {}\n+    }\n+    let _len = (arr: &[u8]).len(); //~ ERROR mismatched types\n+}"}, {"sha": "107b836d160a5669bbb47bed4b4090795e923205", "filename": "src/test/parse-fail/struct-literal-in-for.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Ftest%2Fparse-fail%2Fstruct-literal-in-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Ftest%2Fparse-fail%2Fstruct-literal-in-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fstruct-literal-in-for.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -22,7 +22,7 @@ impl Foo {\n \n fn main() {\n     for x in Foo {\n-        x: 3    //~ ERROR expected one of `!`, `.`, `::`, `;`, `{`, `}`, or an operator, found `:`\n+        x: 3    //~ ERROR expected type, found `3`\n     }.hi() {\n         println!(\"yo\");\n     }"}, {"sha": "b1cccc51d7bb9acc70bb389e09a4a83047d0c277", "filename": "src/test/parse-fail/struct-literal-in-if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Ftest%2Fparse-fail%2Fstruct-literal-in-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Ftest%2Fparse-fail%2Fstruct-literal-in-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fstruct-literal-in-if.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -22,7 +22,7 @@ impl Foo {\n \n fn main() {\n     if Foo {\n-        x: 3    //~ ERROR expected one of `!`, `.`, `::`, `;`, `{`, `}`, or an operator, found `:`\n+        x: 3    //~ ERROR expected type, found `3`\n     }.hi() {\n         println!(\"yo\");\n     }"}, {"sha": "1c52dc48ccd1ac125f4271f00b7810006f806e47", "filename": "src/test/parse-fail/struct-literal-in-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Ftest%2Fparse-fail%2Fstruct-literal-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Ftest%2Fparse-fail%2Fstruct-literal-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fstruct-literal-in-while.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -22,7 +22,7 @@ impl Foo {\n \n fn main() {\n     while Foo {\n-        x: 3    //~ ERROR expected one of `!`, `.`, `::`, `;`, `{`, `}`, or an operator, found `:`\n+        x: 3    //~ ERROR expected type, found `3`\n     }.hi() {\n         println!(\"yo\");\n     }"}, {"sha": "bca384c64712f299dbed42df9e04ee766748fec0", "filename": "src/test/run-pass/type-ascription.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Ftest%2Frun-pass%2Ftype-ascription.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2/src%2Ftest%2Frun-pass%2Ftype-ascription.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-ascription.rs?ref=440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Type ascription doesn't lead to unsoundness\n+\n+#![feature(type_ascription)]\n+\n+use std::mem;\n+\n+const C1: u8 = 10: u8;\n+const C2: [u8; 1: usize] = [1];\n+\n+struct S {\n+    a: u8\n+}\n+\n+fn main() {\n+    assert_eq!(C1.into(): i32, 10);\n+    assert_eq!(C2[0], 1);\n+\n+    let s = S { a: 10: u8 };\n+    let arr = &[1u8, 2, 3];\n+\n+    let mut v = arr.iter().cloned().collect(): Vec<_>;\n+    v.push(4);\n+    assert_eq!(v, [1, 2, 3, 4]);\n+\n+    let a = 1: u8;\n+    let b = a.into(): u16;\n+    assert_eq!(v[a.into(): usize], 2);\n+    assert_eq!(mem::size_of_val(&a), 1);\n+    assert_eq!(mem::size_of_val(&b), 2);\n+    assert_eq!(b, 1: u16);\n+\n+    let mut v = Vec::new();\n+    v: Vec<u8> = vec![1, 2, 3]; // Lvalue type ascription\n+    assert_eq!(v, [1u8, 2, 3]);\n+}"}]}