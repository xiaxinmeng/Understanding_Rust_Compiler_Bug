{"sha": "ed14593d98ce89eb52cc0354e90bec6802c9d041", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMTQ1OTNkOThjZTg5ZWI1MmNjMDM1NGU5MGJlYzY4MDJjOWQwNDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-07T07:34:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-07T07:34:56Z"}, "message": "Auto merge of #26699 - eddyb:unstable-prelude_import, r=huonw\n\nCloses #26690.", "tree": {"sha": "70965fef564707be71a583e9ae4581158d34931a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70965fef564707be71a583e9ae4581158d34931a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed14593d98ce89eb52cc0354e90bec6802c9d041", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed14593d98ce89eb52cc0354e90bec6802c9d041", "html_url": "https://github.com/rust-lang/rust/commit/ed14593d98ce89eb52cc0354e90bec6802c9d041", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed14593d98ce89eb52cc0354e90bec6802c9d041/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876", "url": "https://api.github.com/repos/rust-lang/rust/commits/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876", "html_url": "https://github.com/rust-lang/rust/commit/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876"}, {"sha": "6a3b385cbd6b9044b4447da96aad066e8b257ddf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a3b385cbd6b9044b4447da96aad066e8b257ddf", "html_url": "https://github.com/rust-lang/rust/commit/6a3b385cbd6b9044b4447da96aad066e8b257ddf"}], "stats": {"total": 76, "additions": 57, "deletions": 19}, "files": [{"sha": "ae6136a049adeb36c81e4d99b91776537e472d79", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed14593d98ce89eb52cc0354e90bec6802c9d041/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed14593d98ce89eb52cc0354e90bec6802c9d041/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=ed14593d98ce89eb52cc0354e90bec6802c9d041", "patch": "@@ -547,7 +547,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n                                                   sess.diagnostic()));\n \n     krate = time(time_passes, \"prelude injection\", krate, |krate|\n-                 syntax::std_inject::maybe_inject_prelude(krate));\n+                 syntax::std_inject::maybe_inject_prelude(&sess.parse_sess, krate));\n \n     time(time_passes, \"checking that all macro invocations are gone\", &krate, |krate|\n          syntax::ext::expand::check_for_macros(&sess.parse_sess, krate));"}, {"sha": "ab8cf9ae6b64f98ad861a423f3f820ca129fe433", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed14593d98ce89eb52cc0354e90bec6802c9d041/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed14593d98ce89eb52cc0354e90bec6802c9d041/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=ed14593d98ce89eb52cc0354e90bec6802c9d041", "patch": "@@ -155,6 +155,9 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n \n     // Allows the definition of `const fn` functions.\n     (\"const_fn\", \"1.2.0\", Active),\n+\n+    // Allows using #[prelude_import] on glob `use` items.\n+    (\"prelude_import\", \"1.2.0\", Active),\n ];\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n \n@@ -265,7 +268,8 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n                                    and may be removed in the future\")),\n \n     // used in resolve\n-    (\"prelude_import\", Whitelisted),\n+    (\"prelude_import\", Gated(\"prelude_import\",\n+                             \"`#[prelude_import]` is for use by rustc only\")),\n \n     // FIXME: #14407 these are only looked at on-demand so we can't\n     // guarantee they'll have already been checked"}, {"sha": "6693eed6aced5b63f7c67b72df03c224509b5ab3", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed14593d98ce89eb52cc0354e90bec6802c9d041/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed14593d98ce89eb52cc0354e90bec6802c9d041/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=ed14593d98ce89eb52cc0354e90bec6802c9d041", "patch": "@@ -120,11 +120,13 @@ pub fn print_crate<'a>(cm: &'a CodeMap,\n         // of the feature gate, so we fake them up here.\n \n         let no_std_meta = attr::mk_word_item(InternedString::new(\"no_std\"));\n+        let prelude_import_meta = attr::mk_word_item(InternedString::new(\"prelude_import\"));\n \n         // #![feature(no_std)]\n         let fake_attr = attr::mk_attr_inner(attr::mk_attr_id(),\n                                             attr::mk_list_item(InternedString::new(\"feature\"),\n-                                                               vec![no_std_meta.clone()]));\n+                                                               vec![no_std_meta.clone(),\n+                                                                    prelude_import_meta]));\n         try!(s.print_attribute(&fake_attr));\n \n         // #![no_std]"}, {"sha": "3655058653188f00eb2d031f922c9b78882176dc", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ed14593d98ce89eb52cc0354e90bec6802c9d041/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed14593d98ce89eb52cc0354e90bec6802c9d041/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=ed14593d98ce89eb52cc0354e90bec6802c9d041", "patch": "@@ -10,16 +10,35 @@\n \n use ast;\n use attr;\n-use codemap::DUMMY_SP;\n+use codemap::{DUMMY_SP, Span, ExpnInfo, NameAndSpan, MacroAttribute};\n use codemap;\n use fold::Folder;\n use fold;\n use parse::token::InternedString;\n use parse::token::special_idents;\n-use parse::token;\n+use parse::{token, ParseSess};\n use ptr::P;\n use util::small_vector::SmallVector;\n \n+/// Craft a span that will be ignored by the stability lint's\n+/// call to codemap's is_internal check.\n+/// The expanded code uses the unstable `#[prelude_import]` attribute.\n+fn ignored_span(sess: &ParseSess, sp: Span) -> Span {\n+    let info = ExpnInfo {\n+        call_site: DUMMY_SP,\n+        callee: NameAndSpan {\n+            name: \"std_inject\".to_string(),\n+            format: MacroAttribute,\n+            span: None,\n+            allow_internal_unstable: true,\n+        }\n+    };\n+    let expn_id = sess.codemap().record_expansion(info);\n+    let mut sp = sp;\n+    sp.expn_id = expn_id;\n+    return sp;\n+}\n+\n pub fn maybe_inject_crates_ref(krate: ast::Crate, alt_std_name: Option<String>)\n                                -> ast::Crate {\n     if use_std(&krate) {\n@@ -29,9 +48,12 @@ pub fn maybe_inject_crates_ref(krate: ast::Crate, alt_std_name: Option<String>)\n     }\n }\n \n-pub fn maybe_inject_prelude(krate: ast::Crate) -> ast::Crate {\n+pub fn maybe_inject_prelude(sess: &ParseSess, krate: ast::Crate) -> ast::Crate {\n     if use_std(&krate) {\n-        inject_prelude(krate)\n+        let mut fold = PreludeInjector {\n+            span: ignored_span(sess, DUMMY_SP)\n+        };\n+        fold.fold_crate(krate)\n     } else {\n         krate\n     }\n@@ -80,8 +102,9 @@ fn inject_crates_ref(krate: ast::Crate, alt_std_name: Option<String>) -> ast::Cr\n     fold.fold_crate(krate)\n }\n \n-struct PreludeInjector;\n-\n+struct PreludeInjector {\n+    span: Span\n+}\n \n impl fold::Folder for PreludeInjector {\n     fn fold_crate(&mut self, mut krate: ast::Crate) -> ast::Crate {\n@@ -107,7 +130,7 @@ impl fold::Folder for PreludeInjector {\n \n     fn fold_mod(&mut self, mut mod_: ast::Mod) -> ast::Mod {\n         let prelude_path = ast::Path {\n-            span: DUMMY_SP,\n+            span: self.span,\n             global: false,\n             segments: vec![\n                 ast::PathSegment {\n@@ -131,27 +154,22 @@ impl fold::Folder for PreludeInjector {\n             ident: special_idents::invalid,\n             node: ast::ItemUse(vp),\n             attrs: vec![ast::Attribute {\n-                span: DUMMY_SP,\n+                span: self.span,\n                 node: ast::Attribute_ {\n                     id: attr::mk_attr_id(),\n                     style: ast::AttrOuter,\n                     value: P(ast::MetaItem {\n-                        span: DUMMY_SP,\n+                        span: self.span,\n                         node: ast::MetaWord(token::get_name(\n                                 special_idents::prelude_import.name)),\n                     }),\n                     is_sugared_doc: false,\n                 },\n             }],\n             vis: ast::Inherited,\n-            span: DUMMY_SP,\n+            span: self.span,\n         }));\n \n         fold::noop_fold_mod(mod_, self)\n     }\n }\n-\n-fn inject_prelude(krate: ast::Crate) -> ast::Crate {\n-    let mut fold = PreludeInjector;\n-    fold.fold_crate(krate)\n-}"}, {"sha": "8bc3df247ec12d8eb0fa98a107252acaaa8e6d7b", "filename": "src/test/compile-fail/feature-gate-prelude_import.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ed14593d98ce89eb52cc0354e90bec6802c9d041/src%2Ftest%2Fcompile-fail%2Ffeature-gate-prelude_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed14593d98ce89eb52cc0354e90bec6802c9d041/src%2Ftest%2Fcompile-fail%2Ffeature-gate-prelude_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-prelude_import.rs?ref=ed14593d98ce89eb52cc0354e90bec6802c9d041", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[prelude_import] //~ ERROR `#[prelude_import]` is for use by rustc only\n+use std::prelude::v1::*;\n+\n+fn main() {}"}, {"sha": "5f7ce68348a3db03d72eb9d5a6c5f2f336fab348", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed14593d98ce89eb52cc0354e90bec6802c9d041/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/ed14593d98ce89eb52cc0354e90bec6802c9d041/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=ed14593d98ce89eb52cc0354e90bec6802c9d041", "patch": "@@ -1,4 +1,4 @@\n-#![feature(no_std)]\n+#![feature(no_std, prelude_import)]\n #![no_std]\n #[prelude_import]\n use std::prelude::v1::*;"}]}