{"sha": "5a3d26f271a39212de90544e7394c29373dc5bab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhM2QyNmYyNzFhMzkyMTJkZTkwNTQ0ZTczOTRjMjkzNzNkYzViYWI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-01-08T16:44:31Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-04-18T21:39:40Z"}, "message": "core: replace unicode match exprs with bsearch in const arrays, minor perf win.", "tree": {"sha": "3de0d497d9283356561e38137f635aee87656407", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3de0d497d9283356561e38137f635aee87656407"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a3d26f271a39212de90544e7394c29373dc5bab", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a3d26f271a39212de90544e7394c29373dc5bab", "html_url": "https://github.com/rust-lang/rust/commit/5a3d26f271a39212de90544e7394c29373dc5bab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a3d26f271a39212de90544e7394c29373dc5bab/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14b7277c4fe6fe7ef26a28931962d8557e2670a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/14b7277c4fe6fe7ef26a28931962d8557e2670a7", "html_url": "https://github.com/rust-lang/rust/commit/14b7277c4fe6fe7ef26a28931962d8557e2670a7"}], "stats": {"total": 7248, "additions": 2622, "deletions": 4626}, "files": [{"sha": "864cf3daee07ef114082d6fd29008acc79916b45", "filename": "src/etc/unicode.py", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5a3d26f271a39212de90544e7394c29373dc5bab/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/5a3d26f271a39212de90544e7394c29373dc5bab/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=5a3d26f271a39212de90544e7394c29373dc5bab", "patch": "@@ -112,7 +112,49 @@ def escape_char(c):\n         return \"'\\\\u%4.4x'\" % c\n     return \"'\\\\U%8.8x'\" % c\n \n+def ch_prefix(ix):\n+    if ix == 0:\n+        return \"        \"\n+    if ix % 2 == 0:\n+        return \",\\n        \"\n+    else:\n+        return \", \"\n+\n+def emit_bsearch_range_table(f):\n+    f.write(\"\"\"\n+    pure fn bsearch_range_table(c: char, r: &[(char,char)]) -> bool {\n+        use cmp::{EQ, LT, GT};\n+        use vec::bsearch;\n+        use option::None;\n+        (do bsearch(r) |&(lo,hi)| {\n+            if lo <= c && c <= hi { EQ }\n+            else if hi < c { LT }\n+            else { GT }\n+        }) != None\n+    }\\n\\n\n+\"\"\");\n+\n def emit_property_module(f, mod, tbl):\n+    f.write(\"pub mod %s {\\n\" % mod)\n+    keys = tbl.keys()\n+    keys.sort()\n+    emit_bsearch_range_table(f);\n+    for cat in keys:\n+        f.write(\"    const %s_table : &[(char,char)] = &[\\n\" % cat)\n+        ix = 0\n+        for pair in tbl[cat]:\n+            f.write(ch_prefix(ix))\n+            f.write(\"(%s, %s)\" % (escape_char(pair[0]), escape_char(pair[1])))\n+            ix += 1\n+        f.write(\"\\n    ];\\n\\n\")\n+\n+        f.write(\"    pub pure fn %s(c: char) -> bool {\\n\" % cat)\n+        f.write(\"        bsearch_range_table(c, %s_table)\\n\" % cat)\n+        f.write(\"    }\\n\\n\")\n+    f.write(\"}\\n\")\n+\n+\n+def emit_property_module_old(f, mod, tbl):\n     f.write(\"mod %s {\\n\" % mod)\n     keys = tbl.keys()\n     keys.sort()\n@@ -193,8 +235,9 @@ def emit_decomp_module(f, canon, compat):\n rf = open(r, \"w\")\n \n (canon_decomp, compat_decomp, gencats) = load_unicode_data(\"UnicodeData.txt\")\n-emit_decomp_module(rf, canon_decomp, compat_decomp)\n emit_property_module(rf, \"general_category\", gencats)\n \n+#emit_decomp_module(rf, canon_decomp, compat_decomp)\n+\n derived = load_derived_core_properties(\"DerivedCoreProperties.txt\")\n emit_property_module(rf, \"derived_property\", derived)"}, {"sha": "a13d66c48ee0cf8e04cc5b519c1281c4bc6b6e20", "filename": "src/libcore/unicode.rs", "status": "modified", "additions": 2533, "deletions": 4580, "changes": 7113, "blob_url": "https://github.com/rust-lang/rust/blob/5a3d26f271a39212de90544e7394c29373dc5bab/src%2Flibcore%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3d26f271a39212de90544e7394c29373dc5bab/src%2Flibcore%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode.rs?ref=5a3d26f271a39212de90544e7394c29373dc5bab"}, {"sha": "2a199dddbf45acb45162d21dc22deca6454de994", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/5a3d26f271a39212de90544e7394c29373dc5bab/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3d26f271a39212de90544e7394c29373dc5bab/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=5a3d26f271a39212de90544e7394c29373dc5bab", "patch": "@@ -1235,7 +1235,7 @@ pub fn rposition_between<T>(v: &[T], start: uint, end: uint,\n  * Returns the index where the comparator returned `Equal`, or `None` if\n  * not found.\n  */\n-pub pure fn bsearch<T>(v: &[T], f: &fn(&T) -> Ordering) -> Option<uint> {\n+pub fn bsearch<T>(v: &[T], f: &fn(&T) -> Ordering) -> Option<uint> {\n     let mut base : uint = 0;\n     let mut lim : uint = v.len();\n \n@@ -1259,7 +1259,7 @@ pub pure fn bsearch<T>(v: &[T], f: &fn(&T) -> Ordering) -> Option<uint> {\n  *\n  * Returns the index of the element or None if not found.\n  */\n-pub pure fn bsearch_elem<T:TotalOrd>(v: &[T], x: &T) -> Option<uint> {\n+pub fn bsearch_elem<T:TotalOrd>(v: &[T], x: &T) -> Option<uint> {\n     bsearch(v, |p| p.cmp(x))\n }\n \n@@ -3752,47 +3752,47 @@ mod tests {\n \n     #[test]\n     fn test_bsearch_elem() {\n-        fail_unless!(bsearch_elem([1,2,3,4,5], &5) == Some(4));\n-        fail_unless!(bsearch_elem([1,2,3,4,5], &4) == Some(3));\n-        fail_unless!(bsearch_elem([1,2,3,4,5], &3) == Some(2));\n-        fail_unless!(bsearch_elem([1,2,3,4,5], &2) == Some(1));\n-        fail_unless!(bsearch_elem([1,2,3,4,5], &1) == Some(0));\n-\n-        fail_unless!(bsearch_elem([2,4,6,8,10], &1) == None);\n-        fail_unless!(bsearch_elem([2,4,6,8,10], &5) == None);\n-        fail_unless!(bsearch_elem([2,4,6,8,10], &4) == Some(1));\n-        fail_unless!(bsearch_elem([2,4,6,8,10], &10) == Some(4));\n-\n-        fail_unless!(bsearch_elem([2,4,6,8], &1) == None);\n-        fail_unless!(bsearch_elem([2,4,6,8], &5) == None);\n-        fail_unless!(bsearch_elem([2,4,6,8], &4) == Some(1));\n-        fail_unless!(bsearch_elem([2,4,6,8], &8) == Some(3));\n-\n-        fail_unless!(bsearch_elem([2,4,6], &1) == None);\n-        fail_unless!(bsearch_elem([2,4,6], &5) == None);\n-        fail_unless!(bsearch_elem([2,4,6], &4) == Some(1));\n-        fail_unless!(bsearch_elem([2,4,6], &6) == Some(2));\n-\n-        fail_unless!(bsearch_elem([2,4], &1) == None);\n-        fail_unless!(bsearch_elem([2,4], &5) == None);\n-        fail_unless!(bsearch_elem([2,4], &2) == Some(0));\n-        fail_unless!(bsearch_elem([2,4], &4) == Some(1));\n-\n-        fail_unless!(bsearch_elem([2], &1) == None);\n-        fail_unless!(bsearch_elem([2], &5) == None);\n-        fail_unless!(bsearch_elem([2], &2) == Some(0));\n-\n-        fail_unless!(bsearch_elem([], &1) == None);\n-        fail_unless!(bsearch_elem([], &5) == None);\n-\n-        fail_unless!(bsearch_elem([1,1,1,1,1], &1) != None);\n-        fail_unless!(bsearch_elem([1,1,1,1,2], &1) != None);\n-        fail_unless!(bsearch_elem([1,1,1,2,2], &1) != None);\n-        fail_unless!(bsearch_elem([1,1,2,2,2], &1) != None);\n-        fail_unless!(bsearch_elem([1,2,2,2,2], &1) == Some(0));\n-\n-        fail_unless!(bsearch_elem([1,2,3,4,5], &6) == None);\n-        fail_unless!(bsearch_elem([1,2,3,4,5], &0) == None);\n+        assert!(bsearch_elem([1,2,3,4,5], &5) == Some(4));\n+        assert!(bsearch_elem([1,2,3,4,5], &4) == Some(3));\n+        assert!(bsearch_elem([1,2,3,4,5], &3) == Some(2));\n+        assert!(bsearch_elem([1,2,3,4,5], &2) == Some(1));\n+        assert!(bsearch_elem([1,2,3,4,5], &1) == Some(0));\n+\n+        assert!(bsearch_elem([2,4,6,8,10], &1) == None);\n+        assert!(bsearch_elem([2,4,6,8,10], &5) == None);\n+        assert!(bsearch_elem([2,4,6,8,10], &4) == Some(1));\n+        assert!(bsearch_elem([2,4,6,8,10], &10) == Some(4));\n+\n+        assert!(bsearch_elem([2,4,6,8], &1) == None);\n+        assert!(bsearch_elem([2,4,6,8], &5) == None);\n+        assert!(bsearch_elem([2,4,6,8], &4) == Some(1));\n+        assert!(bsearch_elem([2,4,6,8], &8) == Some(3));\n+\n+        assert!(bsearch_elem([2,4,6], &1) == None);\n+        assert!(bsearch_elem([2,4,6], &5) == None);\n+        assert!(bsearch_elem([2,4,6], &4) == Some(1));\n+        assert!(bsearch_elem([2,4,6], &6) == Some(2));\n+\n+        assert!(bsearch_elem([2,4], &1) == None);\n+        assert!(bsearch_elem([2,4], &5) == None);\n+        assert!(bsearch_elem([2,4], &2) == Some(0));\n+        assert!(bsearch_elem([2,4], &4) == Some(1));\n+\n+        assert!(bsearch_elem([2], &1) == None);\n+        assert!(bsearch_elem([2], &5) == None);\n+        assert!(bsearch_elem([2], &2) == Some(0));\n+\n+        assert!(bsearch_elem([], &1) == None);\n+        assert!(bsearch_elem([], &5) == None);\n+\n+        assert!(bsearch_elem([1,1,1,1,1], &1) != None);\n+        assert!(bsearch_elem([1,1,1,1,2], &1) != None);\n+        assert!(bsearch_elem([1,1,1,2,2], &1) != None);\n+        assert!(bsearch_elem([1,1,2,2,2], &1) != None);\n+        assert!(bsearch_elem([1,2,2,2,2], &1) == Some(0));\n+\n+        assert!(bsearch_elem([1,2,3,4,5], &6) == None);\n+        assert!(bsearch_elem([1,2,3,4,5], &0) == None);\n     }\n \n     #[test]"}, {"sha": "a9edf12f7fa820512fa998b894e3ef75b2e6df5b", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a3d26f271a39212de90544e7394c29373dc5bab/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3d26f271a39212de90544e7394c29373dc5bab/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=5a3d26f271a39212de90544e7394c29373dc5bab", "patch": "@@ -535,15 +535,15 @@ fn ident_start(c: char) -> bool {\n     (c >= 'a' && c <= 'z')\n         || (c >= 'A' && c <= 'Z')\n         || c == '_'\n-        || (c > 'z' && char::is_XID_start(c))\n+        || (c > '\\x7f' && char::is_XID_start(c))\n }\n \n fn ident_continue(c: char) -> bool {\n     (c >= 'a' && c <= 'z')\n         || (c >= 'A' && c <= 'Z')\n         || (c >= '0' && c <= '9')\n         || c == '_'\n-        || (c > 'z' && char::is_XID_continue(c))\n+        || (c > '\\x7f' && char::is_XID_continue(c))\n }\n \n // return the next token from the string"}]}