{"sha": "27f97aa468b5079bfd159e6fee9a04d5501a8818", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3Zjk3YWE0NjhiNTA3OWJmZDE1OWU2ZmVlOWEwNGQ1NTAxYTg4MTg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-11T12:39:52Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-07T12:59:13Z"}, "message": "move syntax::parse::lexer::comments -> syntax::util::comments", "tree": {"sha": "014c6f7ebc01fdde85bbd4d12d10e74a377d6f36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/014c6f7ebc01fdde85bbd4d12d10e74a377d6f36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27f97aa468b5079bfd159e6fee9a04d5501a8818", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27f97aa468b5079bfd159e6fee9a04d5501a8818", "html_url": "https://github.com/rust-lang/rust/commit/27f97aa468b5079bfd159e6fee9a04d5501a8818", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27f97aa468b5079bfd159e6fee9a04d5501a8818/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1571b68552b0d56d85080c5f92fdab233775de4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1571b68552b0d56d85080c5f92fdab233775de4", "html_url": "https://github.com/rust-lang/rust/commit/a1571b68552b0d56d85080c5f92fdab233775de4"}], "stats": {"total": 60, "additions": 31, "deletions": 29}, "files": [{"sha": "a2f8837c581347ec05a859f6e472978932cd50ec", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27f97aa468b5079bfd159e6fee9a04d5501a8818/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f97aa468b5079bfd159e6fee9a04d5501a8818/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=27f97aa468b5079bfd159e6fee9a04d5501a8818", "patch": "@@ -29,7 +29,7 @@ use std::path::{Path, PathBuf};\n \n use syntax::ast::{self, Attribute, DUMMY_NODE_ID, NodeId, PatKind};\n use syntax::source_map::Spanned;\n-use syntax::parse::lexer::comments::strip_doc_comment_decoration;\n+use syntax::util::comments::strip_doc_comment_decoration;\n use syntax::print::pprust;\n use syntax::visit::{self, Visitor};\n use syntax::print::pprust::{param_to_string, ty_to_string};"}, {"sha": "f6cac8ca48d5c0d5fcc31e4d0381917332811a48", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27f97aa468b5079bfd159e6fee9a04d5501a8818/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f97aa468b5079bfd159e6fee9a04d5501a8818/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=27f97aa468b5079bfd159e6fee9a04d5501a8818", "patch": "@@ -28,7 +28,7 @@ use rustc::ty::layout::VariantIdx;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use syntax::ast::{self, Attribute, AttrStyle, AttrKind, Ident};\n use syntax::attr;\n-use syntax::parse::lexer::comments;\n+use syntax::util::comments;\n use syntax::source_map::DUMMY_SP;\n use syntax_pos::symbol::{Symbol, kw, sym};\n use syntax_pos::hygiene::MacroKind;"}, {"sha": "bdad52bfb459b5c22ef2f067079fc4a208128734", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27f97aa468b5079bfd159e6fee9a04d5501a8818/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f97aa468b5079bfd159e6fee9a04d5501a8818/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=27f97aa468b5079bfd159e6fee9a04d5501a8818", "patch": "@@ -86,6 +86,7 @@ pub mod error_codes;\n \n pub mod util {\n     crate mod classify;\n+    pub mod comments;\n     pub mod lev_distance;\n     pub mod node_count;\n     pub mod parser;"}, {"sha": "b1b7b08c78a3b63dddd77ce41e88c809198bde52", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/27f97aa468b5079bfd159e6fee9a04d5501a8818/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f97aa468b5079bfd159e6fee9a04d5501a8818/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=27f97aa468b5079bfd159e6fee9a04d5501a8818", "patch": "@@ -1,6 +1,7 @@\n use crate::token::{self, Token, TokenKind};\n use crate::sess::ParseSess;\n use crate::symbol::{sym, Symbol};\n+use crate::util::comments;\n \n use errors::{FatalError, DiagnosticBuilder};\n use syntax_pos::{BytePos, Pos, Span};\n@@ -15,7 +16,6 @@ use log::debug;\n #[cfg(test)]\n mod tests;\n \n-pub mod comments;\n mod tokentrees;\n mod unicode_chars;\n mod unescape_error_reporting;\n@@ -179,7 +179,7 @@ impl<'a> StringReader<'a> {\n             rustc_lexer::TokenKind::LineComment => {\n                 let string = self.str_from(start);\n                 // comments with only more \"/\"s are not doc comments\n-                let tok = if is_doc_comment(string) {\n+                let tok = if comments::is_line_doc_comment(string) {\n                     self.forbid_bare_cr(start, string, \"bare CR not allowed in doc-comment\");\n                     token::DocComment(Symbol::intern(string))\n                 } else {\n@@ -192,7 +192,7 @@ impl<'a> StringReader<'a> {\n                 let string = self.str_from(start);\n                 // block comments starting with \"/**\" or \"/*!\" are doc-comments\n                 // but comments with only \"*\"s between two \"/\"s are not\n-                let is_doc_comment = is_block_doc_comment(string);\n+                let is_doc_comment = comments::is_block_doc_comment(string);\n \n                 if !terminated {\n                     let msg = if is_doc_comment {\n@@ -643,18 +643,3 @@ impl<'a> StringReader<'a> {\n         }\n     }\n }\n-\n-fn is_doc_comment(s: &str) -> bool {\n-    let res = (s.starts_with(\"///\") && *s.as_bytes().get(3).unwrap_or(&b' ') != b'/') ||\n-              s.starts_with(\"//!\");\n-    debug!(\"is {:?} a doc comment? {}\", s, res);\n-    res\n-}\n-\n-fn is_block_doc_comment(s: &str) -> bool {\n-    // Prevent `/**/` from being parsed as a doc comment\n-    let res = ((s.starts_with(\"/**\") && *s.as_bytes().get(3).unwrap_or(&b' ') != b'*') ||\n-               s.starts_with(\"/*!\")) && s.len() >= 5;\n-    debug!(\"is {:?} a doc comment? {}\", s, res);\n-    res\n-}"}, {"sha": "baa6fb59537e3af35a08255f1b074a901a664813", "filename": "src/libsyntax/parse/lexer/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27f97aa468b5079bfd159e6fee9a04d5501a8818/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f97aa468b5079bfd159e6fee9a04d5501a8818/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs?ref=27f97aa468b5079bfd159e6fee9a04d5501a8818", "patch": "@@ -3,6 +3,7 @@ use super::*;\n use crate::symbol::Symbol;\n use crate::source_map::{SourceMap, FilePathMapping};\n use crate::token;\n+use crate::util::comments::is_doc_comment;\n use crate::with_default_globals;\n \n use errors::{Handler, emitter::EmitterWriter};"}, {"sha": "31f0a02a483bdaed3e65ee8804a6091e5da7af3a", "filename": "src/libsyntax/parse/parser/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27f97aa468b5079bfd159e6fee9a04d5501a8818/src%2Flibsyntax%2Fparse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f97aa468b5079bfd159e6fee9a04d5501a8818/src%2Flibsyntax%2Fparse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fattr.rs?ref=27f97aa468b5079bfd159e6fee9a04d5501a8818", "patch": "@@ -1,7 +1,7 @@\n use super::{SeqSep, Parser, TokenType, PathStyle};\n use crate::attr;\n use crate::ast;\n-use crate::parse::lexer::comments;\n+use crate::util::comments;\n use crate::token::{self, Nonterminal, DelimToken};\n use crate::tokenstream::{TokenStream, TokenTree};\n use crate::source_map::Span;"}, {"sha": "455f4172f5fba7129643de3c803854e57b4a96f4", "filename": "src/libsyntax/parse/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27f97aa468b5079bfd159e6fee9a04d5501a8818/src%2Flibsyntax%2Fparse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f97aa468b5079bfd159e6fee9a04d5501a8818/src%2Flibsyntax%2Fparse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fmod.rs?ref=27f97aa468b5079bfd159e6fee9a04d5501a8818", "patch": "@@ -17,7 +17,7 @@ use crate::ast::{\n };\n use crate::parse::{Directory, DirectoryOwnership};\n use crate::parse::lexer::UnmatchedBrace;\n-use crate::parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};\n+use crate::util::comments::{doc_comment_style, strip_doc_comment_decoration};\n use crate::token::{self, Token, TokenKind, DelimToken};\n use crate::print::pprust;\n use crate::ptr::P;"}, {"sha": "4ca4bdeb046546353afddcbfd9bff098325b733d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27f97aa468b5079bfd159e6fee9a04d5501a8818/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f97aa468b5079bfd159e6fee9a04d5501a8818/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=27f97aa468b5079bfd159e6fee9a04d5501a8818", "patch": "@@ -2,10 +2,10 @@ use crate::ast::{self, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n use crate::ast::{SelfKind, GenericBound, TraitBoundModifier};\n use crate::ast::{Attribute, MacDelimiter, GenericArg};\n use crate::util::parser::{self, AssocOp, Fixity};\n+use crate::util::comments;\n use crate::attr;\n use crate::source_map::{self, SourceMap, Spanned};\n use crate::token::{self, BinOpToken, DelimToken, Nonterminal, Token, TokenKind};\n-use crate::parse::lexer::comments;\n use crate::print::pp::{self, Breaks};\n use crate::print::pp::Breaks::{Consistent, Inconsistent};\n use crate::ptr::P;"}, {"sha": "448b4f3b8256c0a00c773c8a710cf97e27a9f471", "filename": "src/libsyntax/util/comments.rs", "status": "renamed", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/27f97aa468b5079bfd159e6fee9a04d5501a8818/src%2Flibsyntax%2Futil%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f97aa468b5079bfd159e6fee9a04d5501a8818/src%2Flibsyntax%2Futil%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fcomments.rs?ref=27f97aa468b5079bfd159e6fee9a04d5501a8818", "patch": "@@ -1,7 +1,5 @@\n pub use CommentStyle::*;\n \n-use super::is_block_doc_comment;\n-\n use crate::ast;\n use crate::source_map::SourceMap;\n use crate::sess::ParseSess;\n@@ -10,6 +8,8 @@ use syntax_pos::{BytePos, CharPos, Pos, FileName};\n \n use std::usize;\n \n+use log::debug;\n+\n #[cfg(test)]\n mod tests;\n \n@@ -32,8 +32,23 @@ pub struct Comment {\n     pub pos: BytePos,\n }\n \n-fn is_doc_comment(s: &str) -> bool {\n-    (s.starts_with(\"///\") && super::is_doc_comment(s)) || s.starts_with(\"//!\") ||\n+crate fn is_line_doc_comment(s: &str) -> bool {\n+    let res = (s.starts_with(\"///\") && *s.as_bytes().get(3).unwrap_or(&b' ') != b'/') ||\n+              s.starts_with(\"//!\");\n+    debug!(\"is {:?} a doc comment? {}\", s, res);\n+    res\n+}\n+\n+crate fn is_block_doc_comment(s: &str) -> bool {\n+    // Prevent `/**/` from being parsed as a doc comment\n+    let res = ((s.starts_with(\"/**\") && *s.as_bytes().get(3).unwrap_or(&b' ') != b'*') ||\n+               s.starts_with(\"/*!\")) && s.len() >= 5;\n+    debug!(\"is {:?} a doc comment? {}\", s, res);\n+    res\n+}\n+\n+crate fn is_doc_comment(s: &str) -> bool {\n+    (s.starts_with(\"///\") && is_line_doc_comment(s)) || s.starts_with(\"//!\") ||\n     (s.starts_with(\"/**\") && is_block_doc_comment(s)) || s.starts_with(\"/*!\")\n }\n ", "previous_filename": "src/libsyntax/parse/lexer/comments.rs"}, {"sha": "f9cd69fb50d7472c9b3044c9c5f2fc3be279cdb2", "filename": "src/libsyntax/util/comments/tests.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/27f97aa468b5079bfd159e6fee9a04d5501a8818/src%2Flibsyntax%2Futil%2Fcomments%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f97aa468b5079bfd159e6fee9a04d5501a8818/src%2Flibsyntax%2Futil%2Fcomments%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fcomments%2Ftests.rs?ref=27f97aa468b5079bfd159e6fee9a04d5501a8818", "previous_filename": "src/libsyntax/parse/lexer/comments/tests.rs"}, {"sha": "e96b60927873bf27dfad0f5db71ba4916ca76696", "filename": "src/libsyntax_expand/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27f97aa468b5079bfd159e6fee9a04d5501a8818/src%2Flibsyntax_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f97aa468b5079bfd159e6fee9a04d5501a8818/src%2Flibsyntax_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fproc_macro_server.rs?ref=27f97aa468b5079bfd159e6fee9a04d5501a8818", "patch": "@@ -1,8 +1,8 @@\n use crate::base::ExtCtxt;\n \n use syntax::ast;\n-use syntax::parse::{self};\n-use syntax::parse::lexer::comments;\n+use syntax::parse;\n+use syntax::util::comments;\n use syntax::print::pprust;\n use syntax::sess::ParseSess;\n use syntax::token;"}]}