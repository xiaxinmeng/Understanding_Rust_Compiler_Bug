{"sha": "e18ed77b720b46cc8ae0e6754698c47f51bed9a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxOGVkNzdiNzIwYjQ2Y2M4YWUwZTY3NTQ2OThjNDdmNTFiZWQ5YTA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-09T19:58:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-09T19:58:41Z"}, "message": "Remove remnants of mutable fields from mem_categorization, borrowck.", "tree": {"sha": "02ffb81b350ead48da464b41740d68cf43473f69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02ffb81b350ead48da464b41740d68cf43473f69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e18ed77b720b46cc8ae0e6754698c47f51bed9a0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e18ed77b720b46cc8ae0e6754698c47f51bed9a0", "html_url": "https://github.com/rust-lang/rust/commit/e18ed77b720b46cc8ae0e6754698c47f51bed9a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e18ed77b720b46cc8ae0e6754698c47f51bed9a0/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15164cc6a6b6a382b5cbe527e435dfa9eb162fd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/15164cc6a6b6a382b5cbe527e435dfa9eb162fd4", "html_url": "https://github.com/rust-lang/rust/commit/15164cc6a6b6a382b5cbe527e435dfa9eb162fd4"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "75acc2d95113831d95f707ea9a3a1e80ac74f232", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e18ed77b720b46cc8ae0e6754698c47f51bed9a0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e18ed77b720b46cc8ae0e6754698c47f51bed9a0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=e18ed77b720b46cc8ae0e6754698c47f51bed9a0", "patch": "@@ -615,7 +615,7 @@ pub impl BorrowckCtxt {\n                 }\n             }\n \n-            LpExtend(lp_base, _, LpInterior(mc::interior_field(fld, _))) => {\n+            LpExtend(lp_base, _, LpInterior(mc::interior_field(fld))) => {\n                 self.append_loan_path_to_str_from_interior(lp_base, out);\n                 str::push_char(out, '.');\n                 str::push_str(out, *self.tcx.sess.intr().get(fld));"}, {"sha": "0e819c66f094d1a4594fcde57afa6a9ff213c631", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e18ed77b720b46cc8ae0e6754698c47f51bed9a0/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e18ed77b720b46cc8ae0e6754698c47f51bed9a0/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=e18ed77b720b46cc8ae0e6754698c47f51bed9a0", "patch": "@@ -66,7 +66,7 @@ pub enum categorization {\n     cat_local(ast::node_id),           // local variable\n     cat_arg(ast::node_id),             // formal argument\n     cat_deref(cmt, uint, ptr_kind),    // deref of a ptr\n-    cat_interior(cmt, interior_kind),          // something interior\n+    cat_interior(cmt, interior_kind),  // something interior\n     cat_discr(cmt, ast::node_id),      // match discriminant (see preserve())\n     cat_self(ast::node_id),            // explicit `self`\n }\n@@ -94,8 +94,7 @@ pub enum interior_kind {\n     interior_anon_field,             // anonymous field (in e.g.\n                                      // struct Foo(int, int);\n     interior_variant(ast::def_id),   // internals to a variant of given enum\n-    interior_field(ast::ident,       // name of field\n-                   ast::mutability), // declared mutability of field\n+    interior_field(ast::ident),      // name of field\n     interior_index(ty::t,            // type of vec/str/etc being deref'd\n                    ast::mutability)  // mutability of vec content\n }\n@@ -395,8 +394,7 @@ pub impl mem_categorization_ctxt {\n             assert!(!self.method_map.contains_key(&expr.id));\n \n             let base_cmt = self.cat_expr(base);\n-            self.cat_field(expr, base_cmt, f_name,\n-                           self.expr_ty(expr), expr.id)\n+            self.cat_field(expr, base_cmt, f_name, self.expr_ty(expr))\n           }\n \n           ast::expr_index(base, _) => {\n@@ -579,16 +577,12 @@ pub impl mem_categorization_ctxt {\n                              node: N,\n                              base_cmt: cmt,\n                              f_name: ast::ident,\n-                             f_ty: ty::t,\n-                             field_id: ast::node_id) -> cmt {\n-        let f_mutbl = m_imm;\n-        let m = self.inherited_mutability(base_cmt.mutbl, f_mutbl);\n-        let f_interior = interior_field(f_name, f_mutbl);\n+                             f_ty: ty::t) -> cmt {\n         @cmt_ {\n             id: node.id(),\n             span: node.span(),\n-            cat: cat_interior(base_cmt, f_interior),\n-            mutbl: m,\n+            cat: cat_interior(base_cmt, interior_field(f_name)),\n+            mutbl: base_cmt.mutbl.inherit(),\n             ty: f_ty\n         }\n     }\n@@ -886,8 +880,7 @@ pub impl mem_categorization_ctxt {\n             // {f1: p1, ..., fN: pN}\n             for field_pats.each |fp| {\n                 let field_ty = self.pat_ty(fp.pat); // see (*)\n-                let cmt_field = self.cat_field(pat, cmt, fp.ident,\n-                                               field_ty, pat.id);\n+                let cmt_field = self.cat_field(pat, cmt, fp.ident, field_ty);\n                 self.cat_pattern(cmt_field, fp.pat, op);\n             }\n           }\n@@ -1141,7 +1134,7 @@ pub fn ptr_sigil(ptr: ptr_kind) -> ~str {\n impl Repr for interior_kind {\n     fn repr(&self, tcx: ty::ctxt) -> ~str {\n         match *self {\n-            interior_field(fld, _) => copy *tcx.sess.str_of(fld),\n+            interior_field(fld) => copy *tcx.sess.str_of(fld),\n             interior_index(*) => ~\"[]\",\n             interior_tuple => ~\"()\",\n             interior_anon_field => ~\"<anonymous field>\","}]}