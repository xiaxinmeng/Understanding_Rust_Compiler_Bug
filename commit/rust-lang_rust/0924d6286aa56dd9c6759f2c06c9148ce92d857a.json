{"sha": "0924d6286aa56dd9c6759f2c06c9148ce92d857a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MjRkNjI4NmFhNTZkZDljNjc1OWYyYzA2YzkxNDhjZTkyZDg1N2E=", "commit": {"author": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-11-27T01:25:07Z"}, "committer": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-11-27T01:25:07Z"}, "message": "Merge remote-tracking branch 'upstream/master' into sync-from-rust", "tree": {"sha": "9ccabcf9dd71fa234d1d9929a82e65b6b524d4d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ccabcf9dd71fa234d1d9929a82e65b6b524d4d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0924d6286aa56dd9c6759f2c06c9148ce92d857a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0924d6286aa56dd9c6759f2c06c9148ce92d857a", "html_url": "https://github.com/rust-lang/rust/commit/0924d6286aa56dd9c6759f2c06c9148ce92d857a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0924d6286aa56dd9c6759f2c06c9148ce92d857a/comments", "author": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f303168a0d374c7e6d0b0aa9fd7852042602f791", "url": "https://api.github.com/repos/rust-lang/rust/commits/f303168a0d374c7e6d0b0aa9fd7852042602f791", "html_url": "https://github.com/rust-lang/rust/commit/f303168a0d374c7e6d0b0aa9fd7852042602f791"}, {"sha": "403816fbc95526ba6111734f4931c69caff61b13", "url": "https://api.github.com/repos/rust-lang/rust/commits/403816fbc95526ba6111734f4931c69caff61b13", "html_url": "https://github.com/rust-lang/rust/commit/403816fbc95526ba6111734f4931c69caff61b13"}], "stats": {"total": 1345, "additions": 1129, "deletions": 216}, "files": [{"sha": "35683e8713397f5bbd7f56795e9f554d29043cf0", "filename": "README.md", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -194,6 +194,32 @@ cargo clippy -- -A clippy::all -W clippy::useless_format -W clippy::...\n ```\n Note that if you've run clippy before, this may only take effect after you've modified a file or ran `cargo clean`.\n \n+### Specifying the minimum supported Rust version\n+\n+Projects that intend to support old versions of Rust can disable lints pertaining to newer features by\n+specifying the minimum supported Rust version (MSRV) in the clippy configuration file.\n+\n+```toml\n+msrv = \"1.30.0\"\n+```\n+\n+The MSRV can also be specified as an inner attribute, like below.\n+\n+```rust\n+#![feature(custom_inner_attributes)]\n+#![clippy::msrv = \"1.30.0\"]\n+\n+fn main() {\n+  ...\n+}\n+```\n+\n+Tilde/Caret version requirements (like `^1.0` or `~1.2`) can be specified as well.\n+\n+Note: `custom_inner_attributes` is an unstable feature so it has to be enabled explicitly.\n+\n+Lints that recognize this configuration option can be found [here](https://rust-lang.github.io/rust-clippy/master/index.html#msrv)\n+\n ## Contributing\n \n If you want to contribute to Clippy, you can find more information in [CONTRIBUTING.md](https://github.com/rust-lang/rust-clippy/blob/master/CONTRIBUTING.md)."}, {"sha": "bec0c9f93a0d294d27f7dc025363daf37ae3abb3", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -51,26 +51,6 @@ declare_deprecated_lint! {\n     \"`Vec::as_mut_slice` has been stabilized in 1.7\"\n }\n \n-declare_deprecated_lint! {\n-    /// **What it does:** Nothing. This lint has been deprecated.\n-    ///\n-    /// **Deprecation reason:** This used to check for `.to_string()` method calls on values\n-    /// of type `&str`. This is not unidiomatic and with specialization coming, `to_string` could be\n-    /// specialized to be as efficient as `to_owned`.\n-    pub STR_TO_STRING,\n-    \"using `str::to_string` is common even today and specialization will likely happen soon\"\n-}\n-\n-declare_deprecated_lint! {\n-    /// **What it does:** Nothing. This lint has been deprecated.\n-    ///\n-    /// **Deprecation reason:** This used to check for `.to_string()` method calls on values\n-    /// of type `String`. This is not unidiomatic and with specialization coming, `to_string` could be\n-    /// specialized to be as efficient as `clone`.\n-    pub STRING_TO_STRING,\n-    \"using `string::to_string` is common even today and specialization will likely happen soon\"\n-}\n-\n declare_deprecated_lint! {\n     /// **What it does:** Nothing. This lint has been deprecated.\n     ///"}, {"sha": "eb5857348fd390804113d7ad1f27f22cce7309c9", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -92,13 +92,8 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                         |db| {\n                             cx.tcx.infer_ctxt().enter(|infcx| {\n                                 for FulfillmentError { obligation, .. } in send_errors {\n-                                    infcx.maybe_note_obligation_cause_for_async_await(\n-                                        db,\n-                                        &obligation,\n-                                    );\n-                                    if let Trait(trait_pred, _) =\n-                                        obligation.predicate.skip_binders()\n-                                    {\n+                                    infcx.maybe_note_obligation_cause_for_async_await(db, &obligation);\n+                                    if let Trait(trait_pred, _) = obligation.predicate.skip_binders() {\n                                         db.note(&format!(\n                                             \"`{}` doesn't implement `{}`\",\n                                             trait_pred.self_ty(),"}, {"sha": "67a3a3fcf48a047636ab2666a358bde8f4334b3f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -44,6 +44,7 @@ extern crate rustc_target;\n extern crate rustc_trait_selection;\n extern crate rustc_typeck;\n \n+use crate::utils::parse_msrv;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_lint::LintId;\n use rustc_session::Session;\n@@ -440,14 +441,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         \"clippy::unstable_as_mut_slice\",\n         \"`Vec::as_mut_slice` has been stabilized in 1.7\",\n     );\n-    store.register_removed(\n-        \"clippy::str_to_string\",\n-        \"using `str::to_string` is common even today and specialization will likely happen soon\",\n-    );\n-    store.register_removed(\n-        \"clippy::string_to_string\",\n-        \"using `string::to_string` is common even today and specialization will likely happen soon\",\n-    );\n     store.register_removed(\n         \"clippy::misaligned_transmute\",\n         \"this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr\",\n@@ -839,6 +832,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &strings::STRING_ADD_ASSIGN,\n         &strings::STRING_FROM_UTF8_AS_BYTES,\n         &strings::STRING_LIT_AS_BYTES,\n+        &strings::STRING_TO_STRING,\n+        &strings::STR_TO_STRING,\n         &suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL,\n         &suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL,\n         &swap::ALMOST_SWAPPED,\n@@ -933,7 +928,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n     ]);\n     // end register lints, do not remove this comment, it\u2019s used in `update_lints`\n-\n     store.register_late_pass(|| box await_holding_invalid::AwaitHolding);\n     store.register_late_pass(|| box serde_api::SerdeAPI);\n     store.register_late_pass(|| box utils::internal_lints::CompilerLintFunctions::new());\n@@ -969,7 +963,23 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box strings::StringAdd);\n     store.register_late_pass(|| box implicit_return::ImplicitReturn);\n     store.register_late_pass(|| box implicit_saturating_sub::ImplicitSaturatingSub);\n-    store.register_late_pass(|| box methods::Methods);\n+\n+    let parsed_msrv = conf.msrv.as_ref().and_then(|s| {\n+        parse_msrv(s, None, None).or_else(|| {\n+            sess.err(&format!(\"error reading Clippy's configuration file. `{}` is not a valid Rust version\", s));\n+            None\n+        })\n+    });\n+\n+    let msrv = parsed_msrv.clone();\n+    store.register_late_pass(move || box methods::Methods::new(msrv.clone()));\n+    let msrv = parsed_msrv.clone();\n+    store.register_late_pass(move || box matches::Matches::new(msrv.clone()));\n+    let msrv = parsed_msrv.clone();\n+    store.register_early_pass(move || box manual_non_exhaustive::ManualNonExhaustive::new(msrv.clone()));\n+    let msrv = parsed_msrv;\n+    store.register_late_pass(move || box manual_strip::ManualStrip::new(msrv.clone()));\n+\n     store.register_late_pass(|| box map_clone::MapClone);\n     store.register_late_pass(|| box map_err_ignore::MapErrIgnore);\n     store.register_late_pass(|| box shadow::Shadow);\n@@ -983,7 +993,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box types::Casts);\n     let type_complexity_threshold = conf.type_complexity_threshold;\n     store.register_late_pass(move || box types::TypeComplexity::new(type_complexity_threshold));\n-    store.register_late_pass(|| box matches::Matches::default());\n     store.register_late_pass(|| box minmax::MinMaxPass);\n     store.register_late_pass(|| box open_options::OpenOptions);\n     store.register_late_pass(|| box zero_div_zero::ZeroDiv);\n@@ -1144,7 +1153,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box if_let_mutex::IfLetMutex);\n     store.register_late_pass(|| box mut_mutex_lock::MutMutexLock);\n     store.register_late_pass(|| box match_on_vec_items::MatchOnVecItems);\n-    store.register_early_pass(|| box manual_non_exhaustive::ManualNonExhaustive);\n     store.register_late_pass(|| box manual_async_fn::ManualAsyncFn);\n     store.register_early_pass(|| box redundant_field_names::RedundantFieldNames);\n     store.register_late_pass(|| box vec_resize_to_zero::VecResizeToZero);\n@@ -1166,13 +1174,14 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box manual_ok_or::ManualOkOr);\n     store.register_late_pass(|| box float_equality_without_abs::FloatEqualityWithoutAbs);\n     store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n-    store.register_late_pass(|| box manual_strip::ManualStrip);\n     store.register_late_pass(|| box utils::internal_lints::MatchTypeOnDiagItem);\n     let disallowed_methods = conf.disallowed_methods.iter().cloned().collect::<FxHashSet<_>>();\n     store.register_late_pass(move || box disallowed_method::DisallowedMethod::new(&disallowed_methods));\n     store.register_early_pass(|| box asm_syntax::InlineAsmX86AttSyntax);\n     store.register_early_pass(|| box asm_syntax::InlineAsmX86IntelSyntax);\n     store.register_late_pass(|| box undropped_manually_drops::UndroppedManuallyDrops);\n+    store.register_late_pass(|| box strings::StrToString);\n+    store.register_late_pass(|| box strings::StringToString);\n \n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n@@ -1215,6 +1224,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&shadow::SHADOW_REUSE),\n         LintId::of(&shadow::SHADOW_SAME),\n         LintId::of(&strings::STRING_ADD),\n+        LintId::of(&strings::STRING_TO_STRING),\n+        LintId::of(&strings::STR_TO_STRING),\n         LintId::of(&types::RC_BUFFER),\n         LintId::of(&unwrap_in_result::UNWRAP_IN_RESULT),\n         LintId::of(&verbose_file_reads::VERBOSE_FILE_READS),\n@@ -1930,14 +1941,6 @@ fn register_removed_non_tool_lints(store: &mut rustc_lint::LintStore) {\n         \"unstable_as_mut_slice\",\n         \"`Vec::as_mut_slice` has been stabilized in 1.7\",\n     );\n-    store.register_removed(\n-        \"str_to_string\",\n-        \"using `str::to_string` is common even today and specialization will likely happen soon\",\n-    );\n-    store.register_removed(\n-        \"string_to_string\",\n-        \"using `string::to_string` is common even today and specialization will likely happen soon\",\n-    );\n     store.register_removed(\n         \"misaligned_transmute\",\n         \"this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr\","}, {"sha": "143cbea55370baf3f3771b8774478877e8d14518", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -2950,7 +2950,7 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n         for ref stmt in block.stmts {\n             if_chain! {\n                 if let StmtKind::Local(\n-                    Local { pat: Pat { kind: PatKind::Binding(_, _, ident, .. ), .. },\n+                    Local { pat: Pat { hir_id: pat_id, kind: PatKind::Binding(_, _, ident, .. ), .. },\n                     init: Some(ref init_expr), .. }\n                 ) = stmt.kind;\n                 if let ExprKind::MethodCall(ref method_name, _, &[ref iter_source], ..) = init_expr.kind;\n@@ -2964,6 +2964,16 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n                 if let Some(iter_calls) = detect_iter_and_into_iters(block, *ident);\n                 if iter_calls.len() == 1;\n                 then {\n+                    let mut used_count_visitor = UsedCountVisitor {\n+                        cx,\n+                        id: *pat_id,\n+                        count: 0,\n+                    };\n+                    walk_block(&mut used_count_visitor, block);\n+                    if used_count_visitor.count > 1 {\n+                        return;\n+                    }\n+\n                     // Suggest replacing iter_call with iter_replacement, and removing stmt\n                     let iter_call = &iter_calls[0];\n                     span_lint_and_then(\n@@ -3087,6 +3097,28 @@ impl<'tcx> Visitor<'tcx> for IterFunctionVisitor {\n     }\n }\n \n+struct UsedCountVisitor<'a, 'tcx> {\n+    cx: &'a LateContext<'tcx>,\n+    id: HirId,\n+    count: usize,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for UsedCountVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n+        if same_var(self.cx, expr, self.id) {\n+            self.count += 1;\n+        } else {\n+            walk_expr(self, expr);\n+        }\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    }\n+}\n+\n /// Detect the occurrences of calls to `iter` or `into_iter` for the\n /// given identifier\n fn detect_iter_and_into_iters<'tcx>(block: &'tcx Block<'tcx>, identifier: Ident) -> Option<Vec<IterFunction>> {"}, {"sha": "703e6feeca500a48b9aff173a49d2d047a89d2c0", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -1,11 +1,20 @@\n-use crate::utils::{snippet_opt, span_lint_and_then};\n+use crate::utils::{meets_msrv, snippet_opt, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_ast::ast::{Attribute, Item, ItemKind, StructField, Variant, VariantData, VisibilityKind};\n use rustc_attr as attr;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Span};\n+use semver::{Version, VersionReq};\n+\n+const MANUAL_NON_EXHAUSTIVE_MSRV: Version = Version {\n+    major: 1,\n+    minor: 40,\n+    patch: 0,\n+    pre: Vec::new(),\n+    build: Vec::new(),\n+};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for manual implementations of the non-exhaustive pattern.\n@@ -55,10 +64,26 @@ declare_clippy_lint! {\n     \"manual implementations of the non-exhaustive pattern can be simplified using #[non_exhaustive]\"\n }\n \n-declare_lint_pass!(ManualNonExhaustive => [MANUAL_NON_EXHAUSTIVE]);\n+#[derive(Clone)]\n+pub struct ManualNonExhaustive {\n+    msrv: Option<VersionReq>,\n+}\n+\n+impl ManualNonExhaustive {\n+    #[must_use]\n+    pub fn new(msrv: Option<VersionReq>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(ManualNonExhaustive => [MANUAL_NON_EXHAUSTIVE]);\n \n impl EarlyLintPass for ManualNonExhaustive {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n+        if !meets_msrv(self.msrv.as_ref(), &MANUAL_NON_EXHAUSTIVE_MSRV) {\n+            return;\n+        }\n+\n         match &item.kind {\n             ItemKind::Enum(def, _) => {\n                 check_manual_non_exhaustive_enum(cx, item, &def.variants);\n@@ -73,6 +98,8 @@ impl EarlyLintPass for ManualNonExhaustive {\n             _ => {},\n         }\n     }\n+\n+    extract_msrv_attr!(EarlyContext);\n }\n \n fn check_manual_non_exhaustive_enum(cx: &EarlyContext<'_>, item: &Item, variants: &[Variant]) {"}, {"sha": "e17e3adb94f02f7fe43b9b8f78815344f4226566", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -1,7 +1,7 @@\n use crate::consts::{constant, Constant};\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n-    eq_expr_value, higher, match_def_path, multispan_sugg, paths, qpath_res, snippet, span_lint_and_then,\n+    eq_expr_value, higher, match_def_path, meets_msrv, multispan_sugg, paths, qpath_res, snippet, span_lint_and_then,\n };\n \n use if_chain::if_chain;\n@@ -10,12 +10,21 @@ use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::BinOpKind;\n use rustc_hir::{BorrowKind, Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Spanned;\n use rustc_span::Span;\n+use semver::{Version, VersionReq};\n+\n+const MANUAL_STRIP_MSRV: Version = Version {\n+    major: 1,\n+    minor: 45,\n+    patch: 0,\n+    pre: Vec::new(),\n+    build: Vec::new(),\n+};\n \n declare_clippy_lint! {\n     /// **What it does:**\n@@ -51,7 +60,18 @@ declare_clippy_lint! {\n     \"suggests using `strip_{prefix,suffix}` over `str::{starts,ends}_with` and slicing\"\n }\n \n-declare_lint_pass!(ManualStrip => [MANUAL_STRIP]);\n+pub struct ManualStrip {\n+    msrv: Option<VersionReq>,\n+}\n+\n+impl ManualStrip {\n+    #[must_use]\n+    pub fn new(msrv: Option<VersionReq>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(ManualStrip => [MANUAL_STRIP]);\n \n #[derive(Clone, Copy, Debug, Eq, PartialEq)]\n enum StripKind {\n@@ -61,6 +81,10 @@ enum StripKind {\n \n impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if !meets_msrv(self.msrv.as_ref(), &MANUAL_STRIP_MSRV) {\n+            return;\n+        }\n+\n         if_chain! {\n             if let Some((cond, then, _)) = higher::if_block(&expr);\n             if let ExprKind::MethodCall(_, _, [target_arg, pattern], _) = cond.kind;\n@@ -114,6 +138,8 @@ impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n             }\n         }\n     }\n+\n+    extract_msrv_attr!(LateContext);\n }\n \n // Returns `Some(arg)` if `expr` matches `arg.len()` and `None` otherwise."}, {"sha": "d695af4de21ba02069634ec668477ba01c66decf", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 60, "deletions": 6, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -3,8 +3,8 @@ use crate::utils::sugg::Sugg;\n use crate::utils::usage::is_unused;\n use crate::utils::{\n     expr_block, get_arg_name, get_parent_expr, in_macro, indent_of, is_allowed, is_expn_of, is_refutable,\n-    is_type_diagnostic_item, is_wild, match_qpath, match_type, match_var, multispan_sugg, remove_blocks, snippet,\n-    snippet_block, snippet_with_applicability, span_lint_and_help, span_lint_and_note, span_lint_and_sugg,\n+    is_type_diagnostic_item, is_wild, match_qpath, match_type, match_var, meets_msrv, multispan_sugg, remove_blocks,\n+    snippet, snippet_block, snippet_with_applicability, span_lint_and_help, span_lint_and_note, span_lint_and_sugg,\n     span_lint_and_then,\n };\n use crate::utils::{paths, search_same, SpanlessEq, SpanlessHash};\n@@ -23,6 +23,7 @@ use rustc_middle::ty::{self, Ty, TyS};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::{sym, Symbol};\n+use semver::{Version, VersionReq};\n use std::cmp::Ordering;\n use std::collections::hash_map::Entry;\n use std::collections::Bound;\n@@ -411,8 +412,8 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Lint for redundant pattern matching over `Result` or\n-    /// `Option`\n+    /// **What it does:** Lint for redundant pattern matching over `Result`, `Option` or\n+    /// `std::task::Poll`\n     ///\n     /// **Why is this bad?** It's more concise and clear to just use the proper\n     /// utility function\n@@ -422,10 +423,13 @@ declare_clippy_lint! {\n     /// **Example:**\n     ///\n     /// ```rust\n+    /// # use std::task::Poll;\n     /// if let Ok(_) = Ok::<i32, i32>(42) {}\n     /// if let Err(_) = Err::<i32, i32>(42) {}\n     /// if let None = None::<()> {}\n     /// if let Some(_) = Some(42) {}\n+    /// if let Poll::Pending = Poll::Pending::<()> {}\n+    /// if let Poll::Ready(_) = Poll::Ready(42) {}\n     /// match Ok::<i32, i32>(42) {\n     ///     Ok(_) => true,\n     ///     Err(_) => false,\n@@ -435,10 +439,13 @@ declare_clippy_lint! {\n     /// The more idiomatic use would be:\n     ///\n     /// ```rust\n+    /// # use std::task::Poll;\n     /// if Ok::<i32, i32>(42).is_ok() {}\n     /// if Err::<i32, i32>(42).is_err() {}\n     /// if None::<()>.is_none() {}\n     /// if Some(42).is_some() {}\n+    /// if Poll::Pending::<()>.is_pending() {}\n+    /// if Poll::Ready(42).is_ready() {}\n     /// Ok::<i32, i32>(42).is_ok();\n     /// ```\n     pub REDUNDANT_PATTERN_MATCHING,\n@@ -521,9 +528,20 @@ declare_clippy_lint! {\n \n #[derive(Default)]\n pub struct Matches {\n+    msrv: Option<VersionReq>,\n     infallible_destructuring_match_linted: bool,\n }\n \n+impl Matches {\n+    #[must_use]\n+    pub fn new(msrv: Option<VersionReq>) -> Self {\n+        Self {\n+            msrv,\n+            ..Matches::default()\n+        }\n+    }\n+}\n+\n impl_lint_pass!(Matches => [\n     SINGLE_MATCH,\n     MATCH_REF_PATS,\n@@ -543,14 +561,27 @@ impl_lint_pass!(Matches => [\n     MATCH_SAME_ARMS,\n ]);\n \n+const MATCH_LIKE_MATCHES_MACRO_MSRV: Version = Version {\n+    major: 1,\n+    minor: 42,\n+    patch: 0,\n+    pre: Vec::new(),\n+    build: Vec::new(),\n+};\n+\n impl<'tcx> LateLintPass<'tcx> for Matches {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if in_external_macro(cx.sess(), expr.span) || in_macro(expr.span) {\n             return;\n         }\n \n         redundant_pattern_match::check(cx, expr);\n-        if !check_match_like_matches(cx, expr) {\n+\n+        if meets_msrv(self.msrv.as_ref(), &MATCH_LIKE_MATCHES_MACRO_MSRV) {\n+            if !check_match_like_matches(cx, expr) {\n+                lint_match_arms(cx, expr);\n+            }\n+        } else {\n             lint_match_arms(cx, expr);\n         }\n \n@@ -634,6 +665,8 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n             }\n         }\n     }\n+\n+    extract_msrv_attr!(LateContext);\n }\n \n #[rustfmt::skip]\n@@ -1538,14 +1571,24 @@ mod redundant_pattern_match {\n                         \"is_err()\"\n                     } else if match_qpath(path, &paths::OPTION_SOME) {\n                         \"is_some()\"\n+                    } else if match_qpath(path, &paths::POLL_READY) {\n+                        \"is_ready()\"\n                     } else {\n                         return;\n                     }\n                 } else {\n                     return;\n                 }\n             },\n-            PatKind::Path(ref path) if match_qpath(path, &paths::OPTION_NONE) => \"is_none()\",\n+            PatKind::Path(ref path) => {\n+                if match_qpath(path, &paths::OPTION_NONE) {\n+                    \"is_none()\"\n+                } else if match_qpath(path, &paths::POLL_PENDING) {\n+                    \"is_pending()\"\n+                } else {\n+                    return;\n+                }\n+            },\n             _ => return,\n         };\n \n@@ -1628,6 +1671,17 @@ mod redundant_pattern_match {\n                             \"is_some()\",\n                             \"is_none()\",\n                         )\n+                        .or_else(|| {\n+                            find_good_method_for_match(\n+                                arms,\n+                                path_left,\n+                                path_right,\n+                                &paths::POLL_READY,\n+                                &paths::POLL_PENDING,\n+                                \"is_ready()\",\n+                                \"is_pending()\",\n+                            )\n+                        })\n                     } else {\n                         None\n                     }"}, {"sha": "50dd760432dbf4c29c64b9befcf24671b21dcee7", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -20,7 +20,7 @@ use rustc_lint::{LateContext, LateLintPass, Lint, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, TraitRef, Ty, TyS};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, SymbolStr};\n \n@@ -30,10 +30,11 @@ use crate::utils::usage::mutated_variables;\n use crate::utils::{\n     contains_ty, get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait, in_macro,\n     is_copy, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment, match_def_path, match_qpath,\n-    match_trait_method, match_type, match_var, method_calls, method_chain_args, paths, remove_blocks, return_ty,\n-    single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint,\n+    match_trait_method, match_type, match_var, meets_msrv, method_calls, method_chain_args, paths, remove_blocks,\n+    return_ty, single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint,\n     span_lint_and_help, span_lint_and_sugg, span_lint_and_then, sugg, walk_ptrs_ty_depth, SpanlessEq,\n };\n+use semver::{Version, VersionReq};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `.unwrap()` calls on `Option`s and on `Result`s.\n@@ -1404,7 +1405,18 @@ declare_clippy_lint! {\n     \"use `.collect()` instead of `::from_iter()`\"\n }\n \n-declare_lint_pass!(Methods => [\n+pub struct Methods {\n+    msrv: Option<VersionReq>,\n+}\n+\n+impl Methods {\n+    #[must_use]\n+    pub fn new(msrv: Option<VersionReq>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(Methods => [\n     UNWRAP_USED,\n     EXPECT_USED,\n     SHOULD_IMPLEMENT_TRAIT,\n@@ -1531,8 +1543,12 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 check_pointer_offset(cx, expr, arg_lists[0])\n             },\n             [\"is_file\", ..] => lint_filetype_is_file(cx, expr, arg_lists[0]),\n-            [\"map\", \"as_ref\"] => lint_option_as_ref_deref(cx, expr, arg_lists[1], arg_lists[0], false),\n-            [\"map\", \"as_mut\"] => lint_option_as_ref_deref(cx, expr, arg_lists[1], arg_lists[0], true),\n+            [\"map\", \"as_ref\"] => {\n+                lint_option_as_ref_deref(cx, expr, arg_lists[1], arg_lists[0], false, self.msrv.as_ref())\n+            },\n+            [\"map\", \"as_mut\"] => {\n+                lint_option_as_ref_deref(cx, expr, arg_lists[1], arg_lists[0], true, self.msrv.as_ref())\n+            },\n             [\"unwrap_or_else\", ..] => unnecessary_lazy_eval::lint(cx, expr, arg_lists[0], \"unwrap_or\"),\n             [\"get_or_insert_with\", ..] => unnecessary_lazy_eval::lint(cx, expr, arg_lists[0], \"get_or_insert\"),\n             [\"ok_or_else\", ..] => unnecessary_lazy_eval::lint(cx, expr, arg_lists[0], \"ok_or\"),\n@@ -1738,6 +1754,8 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             }\n         }\n     }\n+\n+    extract_msrv_attr!(LateContext);\n }\n \n /// Checks for the `OR_FUN_CALL` lint.\n@@ -3453,14 +3471,27 @@ fn lint_suspicious_map(cx: &LateContext<'_>, expr: &hir::Expr<'_>) {\n     );\n }\n \n+const OPTION_AS_REF_DEREF_MSRV: Version = Version {\n+    major: 1,\n+    minor: 40,\n+    patch: 0,\n+    pre: Vec::new(),\n+    build: Vec::new(),\n+};\n+\n /// lint use of `_.as_ref().map(Deref::deref)` for `Option`s\n fn lint_option_as_ref_deref<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &hir::Expr<'_>,\n     as_ref_args: &[hir::Expr<'_>],\n     map_args: &[hir::Expr<'_>],\n     is_mut: bool,\n+    msrv: Option<&VersionReq>,\n ) {\n+    if !meets_msrv(msrv, &OPTION_AS_REF_DEREF_MSRV) {\n+        return;\n+    }\n+\n     let same_mutability = |m| (is_mut && m == &hir::Mutability::Mut) || (!is_mut && m == &hir::Mutability::Not);\n \n     let option_ty = cx.typeck_results().expr_ty(&as_ref_args[0]);"}, {"sha": "42c45be3b45d8b640968b7123ecb7b544f35af2e", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 99, "deletions": 1, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -2,6 +2,7 @@ use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, LangItem, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n use rustc_span::sym;\n@@ -11,7 +12,7 @@ use if_chain::if_chain;\n use crate::utils::SpanlessEq;\n use crate::utils::{\n     get_parent_expr, is_allowed, is_type_diagnostic_item, match_function_call, method_calls, paths, span_lint,\n-    span_lint_and_sugg,\n+    span_lint_and_help, span_lint_and_sugg,\n };\n \n declare_clippy_lint! {\n@@ -289,3 +290,100 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n         }\n     }\n }\n+\n+declare_clippy_lint! {\n+    /// **What it does:** This lint checks for `.to_string()` method calls on values of type `&str`.\n+    ///\n+    /// **Why is this bad?** The `to_string` method is also used on other types to convert them to a string.\n+    /// When called on a `&str` it turns the `&str` into the owned variant `String`, which can be better\n+    /// expressed with `.to_owned()`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// // example code where clippy issues a warning\n+    /// let _ = \"str\".to_string();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// // example code which does not raise clippy warning\n+    /// let _ = \"str\".to_owned();\n+    /// ```\n+    pub STR_TO_STRING,\n+    restriction,\n+    \"using `to_string()` on a `&str`, which should be `to_owned()`\"\n+}\n+\n+declare_lint_pass!(StrToString => [STR_TO_STRING]);\n+\n+impl LateLintPass<'_> for StrToString {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &Expr<'_>) {\n+        if_chain! {\n+            if let ExprKind::MethodCall(path, _, args, _) = &expr.kind;\n+            if path.ident.name == sym!(to_string);\n+            let ty = cx.typeck_results().expr_ty(&args[0]);\n+            if let ty::Ref(_, ty, ..) = ty.kind();\n+            if *ty.kind() == ty::Str;\n+            then {\n+                span_lint_and_help(\n+                    cx,\n+                    STR_TO_STRING,\n+                    expr.span,\n+                    \"`to_string()` called on a `&str`\",\n+                    None,\n+                    \"consider using `.to_owned()`\",\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+declare_clippy_lint! {\n+    /// **What it does:** This lint checks for `.to_string()` method calls on values of type `String`.\n+    ///\n+    /// **Why is this bad?** The `to_string` method is also used on other types to convert them to a string.\n+    /// When called on a `String` it only clones the `String`, which can be better expressed with `.clone()`.\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// // example code where clippy issues a warning\n+    /// let msg = String::from(\"Hello World\");\n+    /// let _ = msg.to_string();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// // example code which does not raise clippy warning\n+    /// let msg = String::from(\"Hello World\");\n+    /// let _ = msg.clone();\n+    /// ```\n+    pub STRING_TO_STRING,\n+    restriction,\n+    \"using `to_string()` on a `String`, which should be `clone()`\"\n+}\n+\n+declare_lint_pass!(StringToString => [STRING_TO_STRING]);\n+\n+impl LateLintPass<'_> for StringToString {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &Expr<'_>) {\n+        if_chain! {\n+            if let ExprKind::MethodCall(path, _, args, _) = &expr.kind;\n+            if path.ident.name == sym!(to_string);\n+            let ty = cx.typeck_results().expr_ty(&args[0]);\n+            if is_type_diagnostic_item(cx, ty, sym!(string_type));\n+            then {\n+                span_lint_and_help(\n+                    cx,\n+                    STRING_TO_STRING,\n+                    expr.span,\n+                    \"`to_string()` called on a `String`\",\n+                    None,\n+                    \"consider using `.clone()`\",\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "c8bdc5a71e6f9f937d66196f1dc595cfeb8731af", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -8,6 +8,7 @@ use if_chain::if_chain;\n use rustc_ast::{FloatTy, IntTy, LitFloatType, LitIntType, LitKind, UintTy};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n+use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{\n     BinOpKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, FnSig, GenericArg, GenericBounds, GenericParamKind, HirId,\n@@ -1632,7 +1633,14 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n         if expr.span.from_expansion() {\n             return;\n         }\n-        if let ExprKind::Cast(ref ex, _) = expr.kind {\n+        if let ExprKind::Cast(ref ex, cast_to) = expr.kind {\n+            if let TyKind::Path(QPath::Resolved(_, path)) = cast_to.kind {\n+                if let Res::Def(_, def_id) = path.res {\n+                    if cx.tcx.has_attr(def_id, sym::cfg) || cx.tcx.has_attr(def_id, sym::cfg_attr) {\n+                        return;\n+                    }\n+                }\n+            }\n             let (cast_from, cast_to) = (cx.typeck_results().expr_ty(ex), cx.typeck_results().expr_ty(expr));\n             lint_fn_to_numeric_cast(cx, expr, ex, cast_from, cast_to);\n             if let Some(lit) = get_numeric_literal(ex) {\n@@ -1711,7 +1719,7 @@ fn show_unnecessary_cast(cx: &LateContext<'_>, expr: &Expr<'_>, literal_str: &st\n         expr.span,\n         &format!(\"casting {} literal to `{}` is unnecessary\", literal_kind_name, cast_to),\n         \"try\",\n-        format!(\"{}_{}\", literal_str, cast_to),\n+        format!(\"{}_{}\", literal_str.trim_end_matches('.'), cast_to),\n         Applicability::MachineApplicable,\n     );\n }"}, {"sha": "24052a243af8245bf8c86e0408e7db4366c71751", "filename": "clippy_lints/src/utils/attrs.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fattrs.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -21,6 +21,7 @@ pub const BUILTIN_ATTRIBUTES: &[(&str, DeprecationStatus)] = &[\n         DeprecationStatus::Replaced(\"cognitive_complexity\"),\n     ),\n     (\"dump\", DeprecationStatus::None),\n+    (\"msrv\", DeprecationStatus::None),\n ];\n \n pub struct LimitStack {\n@@ -123,6 +124,24 @@ fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'\n     }\n }\n \n+pub fn get_unique_inner_attr(sess: &Session, attrs: &[ast::Attribute], name: &'static str) -> Option<ast::Attribute> {\n+    let mut unique_attr = None;\n+    for attr in get_attr(sess, attrs, name) {\n+        match attr.style {\n+            ast::AttrStyle::Inner if unique_attr.is_none() => unique_attr = Some(attr.clone()),\n+            ast::AttrStyle::Inner => {\n+                sess.struct_span_err(attr.span, &format!(\"`{}` is defined multiple times\", name))\n+                    .span_note(unique_attr.as_ref().unwrap().span, \"first definition found here\")\n+                    .emit();\n+            },\n+            ast::AttrStyle::Outer => {\n+                sess.span_err(attr.span, &format!(\"`{}` cannot be an outer attribute\", name));\n+            },\n+        }\n+    }\n+    unique_attr\n+}\n+\n /// Return true if the attributes contain any of `proc_macro`,\n /// `proc_macro_derive` or `proc_macro_attribute`, false otherwise\n pub fn is_proc_macro(sess: &Session, attrs: &[ast::Attribute]) -> bool {"}, {"sha": "fc6304118d98823865438349cddb86b255b3aacf", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -106,6 +106,8 @@ macro_rules! define_Conf {\n \n pub use self::helpers::Conf;\n define_Conf! {\n+    /// Lint: MANUAL_NON_EXHAUSTIVE, MANUAL_STRIP, OPTION_AS_REF_DEREF, MATCH_LIKE_MATCHES_MACRO. The minimum rust version that the project supports\n+    (msrv, \"msrv\": Option<String>, None),\n     /// Lint: BLACKLISTED_NAME. The list of blacklisted names to lint about. NB: `bar` is not here since it has legitimate uses\n     (blacklisted_names, \"blacklisted_names\": Vec<String>, [\"foo\", \"baz\", \"quux\"].iter().map(ToString::to_string).collect()),\n     /// Lint: COGNITIVE_COMPLEXITY. The maximum cognitive complexity a function can have"}, {"sha": "6f89e51279adf69b4d4f8565e76f311194ccb88c", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -51,17 +51,62 @@ use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, layout::IntegerExt, Ty, TyCtxt, TypeFoldable};\n+use rustc_session::Session;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n use rustc_span::sym as rustc_sym;\n use rustc_span::symbol::{self, kw, Symbol};\n use rustc_span::{BytePos, Pos, Span, DUMMY_SP};\n use rustc_target::abi::Integer;\n use rustc_trait_selection::traits::query::normalize::AtExt;\n+use semver::{Version, VersionReq};\n use smallvec::SmallVec;\n \n use crate::consts::{constant, Constant};\n \n+pub fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Option<VersionReq> {\n+    if let Ok(version) = VersionReq::parse(msrv) {\n+        return Some(version);\n+    } else if let Some(sess) = sess {\n+        if let Some(span) = span {\n+            sess.span_err(span, &format!(\"`{}` is not a valid Rust version\", msrv));\n+        }\n+    }\n+    None\n+}\n+\n+pub fn meets_msrv(msrv: Option<&VersionReq>, lint_msrv: &Version) -> bool {\n+    msrv.map_or(true, |msrv| !msrv.matches(lint_msrv))\n+}\n+\n+macro_rules! extract_msrv_attr {\n+    (LateContext) => {\n+        extract_msrv_attr!(@LateContext, ());\n+    };\n+    (EarlyContext) => {\n+        extract_msrv_attr!(@EarlyContext);\n+    };\n+    (@$context:ident$(, $call:tt)?) => {\n+        fn enter_lint_attrs(&mut self, cx: &rustc_lint::$context<'tcx>, attrs: &'tcx [rustc_ast::ast::Attribute]) {\n+            use $crate::utils::get_unique_inner_attr;\n+            match get_unique_inner_attr(cx.sess$($call)?, attrs, \"msrv\") {\n+                Some(msrv_attr) => {\n+                    if let Some(msrv) = msrv_attr.value_str() {\n+                        self.msrv = $crate::utils::parse_msrv(\n+                            &msrv.to_string(),\n+                            Some(cx.sess$($call)?),\n+                            Some(msrv_attr.span),\n+                        );\n+                    } else {\n+                        cx.sess$($call)?.span_err(msrv_attr.span, \"bad clippy attribute\");\n+                    }\n+                },\n+                _ => (),\n+            }\n+        }\n+    };\n+}\n+\n /// Returns `true` if the two spans come from differing expansions (i.e., one is\n /// from a macro and one isn't).\n #[must_use]"}, {"sha": "829e9a2989c825f3b86c3be0966c52cd5c5f5e68", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -90,6 +90,8 @@ pub const PATH_BUF: [&str; 3] = [\"std\", \"path\", \"PathBuf\"];\n pub const PATH_BUF_AS_PATH: [&str; 4] = [\"std\", \"path\", \"PathBuf\", \"as_path\"];\n pub const PATH_TO_PATH_BUF: [&str; 4] = [\"std\", \"path\", \"Path\", \"to_path_buf\"];\n pub const POLL: [&str; 4] = [\"core\", \"task\", \"poll\", \"Poll\"];\n+pub const POLL_PENDING: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Pending\"];\n+pub const POLL_READY: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Ready\"];\n pub const PTR_EQ: [&str; 3] = [\"core\", \"ptr\", \"eq\"];\n pub const PTR_NULL: [&str; 3] = [\"core\", \"ptr\", \"null\"];\n pub const PTR_NULL_MUT: [&str; 3] = [\"core\", \"ptr\", \"null_mut\"];"}, {"sha": "088b12b2daca61c66f1974f221d65a1d42e4cc95", "filename": "tests/ui-toml/invalid_min_rust_version/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui-toml%2Finvalid_min_rust_version%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui-toml%2Finvalid_min_rust_version%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Finvalid_min_rust_version%2Fclippy.toml?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -0,0 +1 @@\n+msrv = \"invalid.version\""}, {"sha": "2ebf28645e51e53a969fbac0b02340bab8e7eeb0", "filename": "tests/ui-toml/invalid_min_rust_version/invalid_min_rust_version.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui-toml%2Finvalid_min_rust_version%2Finvalid_min_rust_version.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui-toml%2Finvalid_min_rust_version%2Finvalid_min_rust_version.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Finvalid_min_rust_version%2Finvalid_min_rust_version.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -0,0 +1,3 @@\n+#![allow(clippy::redundant_clone)]\n+\n+fn main() {}"}, {"sha": "e9d8fd2e0f525649eb8c2fc7471b320e21efe12e", "filename": "tests/ui-toml/invalid_min_rust_version/invalid_min_rust_version.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui-toml%2Finvalid_min_rust_version%2Finvalid_min_rust_version.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui-toml%2Finvalid_min_rust_version%2Finvalid_min_rust_version.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Finvalid_min_rust_version%2Finvalid_min_rust_version.stderr?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -0,0 +1,4 @@\n+error: error reading Clippy's configuration file. `invalid.version` is not a valid Rust version\n+\n+error: aborting due to previous error\n+"}, {"sha": "8e17d8074c41f7f7dbb57d3b2b2fd9a3ff0dfa9a", "filename": "tests/ui-toml/min_rust_version/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui-toml%2Fmin_rust_version%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui-toml%2Fmin_rust_version%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fmin_rust_version%2Fclippy.toml?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -0,0 +1 @@\n+msrv = \"1.0.0\""}, {"sha": "bc41efa42a17ce1f8f14e53f48f6d048bdc9e5b5", "filename": "tests/ui-toml/min_rust_version/min_rust_version.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui-toml%2Fmin_rust_version%2Fmin_rust_version.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui-toml%2Fmin_rust_version%2Fmin_rust_version.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fmin_rust_version%2Fmin_rust_version.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -0,0 +1,68 @@\n+#![allow(clippy::redundant_clone)]\n+#![warn(clippy::manual_non_exhaustive)]\n+\n+use std::ops::Deref;\n+\n+mod enums {\n+    enum E {\n+        A,\n+        B,\n+        #[doc(hidden)]\n+        _C,\n+    }\n+\n+    // user forgot to remove the marker\n+    #[non_exhaustive]\n+    enum Ep {\n+        A,\n+        B,\n+        #[doc(hidden)]\n+        _C,\n+    }\n+}\n+\n+fn option_as_ref_deref() {\n+    let mut opt = Some(String::from(\"123\"));\n+\n+    let _ = opt.as_ref().map(String::as_str);\n+    let _ = opt.as_ref().map(|x| x.as_str());\n+    let _ = opt.as_mut().map(String::as_mut_str);\n+    let _ = opt.as_mut().map(|x| x.as_mut_str());\n+}\n+\n+fn match_like_matches() {\n+    let _y = match Some(5) {\n+        Some(0) => true,\n+        _ => false,\n+    };\n+}\n+\n+fn match_same_arms() {\n+    match (1, 2, 3) {\n+        (1, .., 3) => 42,\n+        (.., 3) => 42, //~ ERROR match arms have same body\n+        _ => 0,\n+    };\n+}\n+\n+fn match_same_arms2() {\n+    let _ = match Some(42) {\n+        Some(_) => 24,\n+        None => 24, //~ ERROR match arms have same body\n+    };\n+}\n+\n+fn manual_strip_msrv() {\n+    let s = \"hello, world!\";\n+    if s.starts_with(\"hello, \") {\n+        assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+    }\n+}\n+\n+fn main() {\n+    option_as_ref_deref();\n+    match_like_matches();\n+    match_same_arms();\n+    match_same_arms2();\n+    manual_strip_msrv();\n+}"}, {"sha": "af3d9ecf6e846b28d20ad832e8243009a9fe009a", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}, {"sha": "cd745feec6d8acc81063dae1d74b6f0a0a4e85e2", "filename": "tests/ui/as_conversions.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fas_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fas_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fas_conversions.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -1,7 +1,19 @@\n-#[warn(clippy::as_conversions)]\n+// aux-build:macro_rules.rs\n+\n+#![warn(clippy::as_conversions)]\n+\n+#[macro_use]\n+extern crate macro_rules;\n+\n+fn with_external_macro() {\n+    as_conv_with_arg!(0u32 as u64);\n+    as_conv!();\n+}\n \n fn main() {\n     let i = 0u32 as u64;\n \n     let j = &i as *const u64 as *mut u64;\n+\n+    with_external_macro();\n }"}, {"sha": "f5f75d3aee04a40f2032684353aa310418343389", "filename": "tests/ui/as_conversions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fas_conversions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fas_conversions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fas_conversions.stderr?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -1,5 +1,5 @@\n error: using a potentially dangerous silent `as` conversion\n-  --> $DIR/as_conversions.rs:4:13\n+  --> $DIR/as_conversions.rs:14:13\n    |\n LL |     let i = 0u32 as u64;\n    |             ^^^^^^^^^^^\n@@ -8,15 +8,15 @@ LL |     let i = 0u32 as u64;\n    = help: consider using a safe wrapper for this conversion\n \n error: using a potentially dangerous silent `as` conversion\n-  --> $DIR/as_conversions.rs:6:13\n+  --> $DIR/as_conversions.rs:16:13\n    |\n LL |     let j = &i as *const u64 as *mut u64;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a safe wrapper for this conversion\n \n error: using a potentially dangerous silent `as` conversion\n-  --> $DIR/as_conversions.rs:6:13\n+  --> $DIR/as_conversions.rs:16:13\n    |\n LL |     let j = &i as *const u64 as *mut u64;\n    |             ^^^^^^^^^^^^^^^^"}, {"sha": "f985a15eda2bb5cbc48fecbbdd1e8c1b0205346e", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -70,3 +70,17 @@ macro_rules! ref_arg_function {\n         fn fun_example(ref _x: usize) {}\n     };\n }\n+\n+#[macro_export]\n+macro_rules! as_conv_with_arg {\n+    (0u32 as u64) => {\n+        ()\n+    };\n+}\n+\n+#[macro_export]\n+macro_rules! as_conv {\n+    () => {\n+        0u32 as u64\n+    };\n+}"}, {"sha": "e1ee8dbca2c04286a9924606d4865aae056c1e10", "filename": "tests/ui/deprecated.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -1,5 +1,3 @@\n-#[warn(clippy::str_to_string)]\n-#[warn(clippy::string_to_string)]\n #[warn(clippy::unstable_as_slice)]\n #[warn(clippy::unstable_as_mut_slice)]\n #[warn(clippy::misaligned_transmute)]"}, {"sha": "edbb891afe07bdb9cfd6e9d2c84d158c400c5b86", "filename": "tests/ui/deprecated.stderr", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.stderr?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -1,88 +1,76 @@\n-error: lint `clippy::str_to_string` has been removed: `using `str::to_string` is common even today and specialization will likely happen soon`\n-  --> $DIR/deprecated.rs:1:8\n-   |\n-LL | #[warn(clippy::str_to_string)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n-\n-error: lint `clippy::string_to_string` has been removed: `using `string::to_string` is common even today and specialization will likely happen soon`\n-  --> $DIR/deprecated.rs:2:8\n-   |\n-LL | #[warn(clippy::string_to_string)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: lint `clippy::unstable_as_slice` has been removed: ``Vec::as_slice` has been stabilized in 1.7`\n-  --> $DIR/deprecated.rs:3:8\n+  --> $DIR/deprecated.rs:1:8\n    |\n LL | #[warn(clippy::unstable_as_slice)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `clippy::unstable_as_mut_slice` has been removed: ``Vec::as_mut_slice` has been stabilized in 1.7`\n-  --> $DIR/deprecated.rs:4:8\n+  --> $DIR/deprecated.rs:2:8\n    |\n LL | #[warn(clippy::unstable_as_mut_slice)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: lint `clippy::misaligned_transmute` has been removed: `this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr`\n-  --> $DIR/deprecated.rs:5:8\n+  --> $DIR/deprecated.rs:3:8\n    |\n LL | #[warn(clippy::misaligned_transmute)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: lint `clippy::unused_collect` has been removed: ``collect` has been marked as #[must_use] in rustc and that covers all cases of this lint`\n-  --> $DIR/deprecated.rs:6:8\n+  --> $DIR/deprecated.rs:4:8\n    |\n LL | #[warn(clippy::unused_collect)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^\n \n error: lint `clippy::invalid_ref` has been removed: `superseded by rustc lint `invalid_value``\n-  --> $DIR/deprecated.rs:7:8\n+  --> $DIR/deprecated.rs:5:8\n    |\n LL | #[warn(clippy::invalid_ref)]\n    |        ^^^^^^^^^^^^^^^^^^^\n \n error: lint `clippy::into_iter_on_array` has been removed: `this lint has been uplifted to rustc and is now called `array_into_iter``\n-  --> $DIR/deprecated.rs:8:8\n+  --> $DIR/deprecated.rs:6:8\n    |\n LL | #[warn(clippy::into_iter_on_array)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: lint `clippy::unused_label` has been removed: `this lint has been uplifted to rustc and is now called `unused_labels``\n-  --> $DIR/deprecated.rs:9:8\n+  --> $DIR/deprecated.rs:7:8\n    |\n LL | #[warn(clippy::unused_label)]\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n error: lint `clippy::regex_macro` has been removed: `the regex! macro has been removed from the regex crate in 2018`\n-  --> $DIR/deprecated.rs:10:8\n+  --> $DIR/deprecated.rs:8:8\n    |\n LL | #[warn(clippy::regex_macro)]\n    |        ^^^^^^^^^^^^^^^^^^^\n \n error: lint `clippy::drop_bounds` has been removed: `this lint has been uplifted to rustc and is now called `drop_bounds``\n-  --> $DIR/deprecated.rs:11:8\n+  --> $DIR/deprecated.rs:9:8\n    |\n LL | #[warn(clippy::drop_bounds)]\n    |        ^^^^^^^^^^^^^^^^^^^\n \n error: lint `clippy::temporary_cstring_as_ptr` has been removed: `this lint has been uplifted to rustc and is now called `temporary_cstring_as_ptr``\n-  --> $DIR/deprecated.rs:12:8\n+  --> $DIR/deprecated.rs:10:8\n    |\n LL | #[warn(clippy::temporary_cstring_as_ptr)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: lint `clippy::panic_params` has been removed: `this lint has been uplifted to rustc and is now called `panic_fmt``\n-  --> $DIR/deprecated.rs:13:8\n+  --> $DIR/deprecated.rs:11:8\n    |\n LL | #[warn(clippy::panic_params)]\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `clippy::str_to_string` has been removed: `using `str::to_string` is common even today and specialization will likely happen soon`\n+error: lint `clippy::unstable_as_slice` has been removed: ``Vec::as_slice` has been stabilized in 1.7`\n   --> $DIR/deprecated.rs:1:8\n    |\n-LL | #[warn(clippy::str_to_string)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^\n+LL | #[warn(clippy::unstable_as_slice)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "e89dca4fcfd4cf3ea6625b8d2e159f1e98956924", "filename": "tests/ui/deprecated_old.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fdeprecated_old.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fdeprecated_old.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated_old.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -1,5 +1,3 @@\n-#[warn(str_to_string)]\n-#[warn(string_to_string)]\n #[warn(unstable_as_slice)]\n #[warn(unstable_as_mut_slice)]\n #[warn(misaligned_transmute)]"}, {"sha": "2fe1facf0c72de582fef93a36a28527e32dc12c2", "filename": "tests/ui/deprecated_old.stderr", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fdeprecated_old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fdeprecated_old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated_old.stderr?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -1,40 +1,28 @@\n-error: lint `str_to_string` has been removed: `using `str::to_string` is common even today and specialization will likely happen soon`\n-  --> $DIR/deprecated_old.rs:1:8\n-   |\n-LL | #[warn(str_to_string)]\n-   |        ^^^^^^^^^^^^^\n-   |\n-   = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n-\n-error: lint `string_to_string` has been removed: `using `string::to_string` is common even today and specialization will likely happen soon`\n-  --> $DIR/deprecated_old.rs:2:8\n-   |\n-LL | #[warn(string_to_string)]\n-   |        ^^^^^^^^^^^^^^^^\n-\n error: lint `unstable_as_slice` has been removed: ``Vec::as_slice` has been stabilized in 1.7`\n-  --> $DIR/deprecated_old.rs:3:8\n+  --> $DIR/deprecated_old.rs:1:8\n    |\n LL | #[warn(unstable_as_slice)]\n    |        ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `unstable_as_mut_slice` has been removed: ``Vec::as_mut_slice` has been stabilized in 1.7`\n-  --> $DIR/deprecated_old.rs:4:8\n+  --> $DIR/deprecated_old.rs:2:8\n    |\n LL | #[warn(unstable_as_mut_slice)]\n    |        ^^^^^^^^^^^^^^^^^^^^^\n \n error: lint `misaligned_transmute` has been removed: `this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr`\n-  --> $DIR/deprecated_old.rs:5:8\n+  --> $DIR/deprecated_old.rs:3:8\n    |\n LL | #[warn(misaligned_transmute)]\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `str_to_string` has been removed: `using `str::to_string` is common even today and specialization will likely happen soon`\n+error: lint `unstable_as_slice` has been removed: ``Vec::as_slice` has been stabilized in 1.7`\n   --> $DIR/deprecated_old.rs:1:8\n    |\n-LL | #[warn(str_to_string)]\n-   |        ^^^^^^^^^^^^^\n+LL | #[warn(unstable_as_slice)]\n+   |        ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "8ed483a3ac6130dc55cbed0c87ab408075ca1f7b", "filename": "tests/ui/min_rust_version_attr.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fmin_rust_version_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fmin_rust_version_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -0,0 +1,51 @@\n+#![allow(clippy::redundant_clone)]\n+#![feature(custom_inner_attributes)]\n+#![clippy::msrv = \"1.0.0\"]\n+\n+use std::ops::Deref;\n+\n+fn option_as_ref_deref() {\n+    let mut opt = Some(String::from(\"123\"));\n+\n+    let _ = opt.as_ref().map(String::as_str);\n+    let _ = opt.as_ref().map(|x| x.as_str());\n+    let _ = opt.as_mut().map(String::as_mut_str);\n+    let _ = opt.as_mut().map(|x| x.as_mut_str());\n+}\n+\n+fn match_like_matches() {\n+    let _y = match Some(5) {\n+        Some(0) => true,\n+        _ => false,\n+    };\n+}\n+\n+fn match_same_arms() {\n+    match (1, 2, 3) {\n+        (1, .., 3) => 42,\n+        (.., 3) => 42, //~ ERROR match arms have same body\n+        _ => 0,\n+    };\n+}\n+\n+fn match_same_arms2() {\n+    let _ = match Some(42) {\n+        Some(_) => 24,\n+        None => 24, //~ ERROR match arms have same body\n+    };\n+}\n+\n+fn manual_strip_msrv() {\n+    let s = \"hello, world!\";\n+    if s.starts_with(\"hello, \") {\n+        assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+    }\n+}\n+\n+fn main() {\n+    option_as_ref_deref();\n+    match_like_matches();\n+    match_same_arms();\n+    match_same_arms2();\n+    manual_strip_msrv();\n+}"}, {"sha": "f20841891a7429f213294e520dc32159697d4869", "filename": "tests/ui/min_rust_version_invalid_attr.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fmin_rust_version_invalid_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fmin_rust_version_invalid_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_invalid_attr.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -0,0 +1,4 @@\n+#![feature(custom_inner_attributes)]\n+#![clippy::msrv = \"invalid.version\"]\n+\n+fn main() {}"}, {"sha": "6ff88ca56f8b92fac4ba9446420e0f19d20602d2", "filename": "tests/ui/min_rust_version_invalid_attr.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fmin_rust_version_invalid_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fmin_rust_version_invalid_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_invalid_attr.stderr?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -0,0 +1,8 @@\n+error: `invalid.version` is not a valid Rust version\n+  --> $DIR/min_rust_version_invalid_attr.rs:2:1\n+   |\n+LL | #![clippy::msrv = \"invalid.version\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "e882d5ccf91a8f6b7657c63fa218b33a5593174b", "filename": "tests/ui/min_rust_version_multiple_inner_attr.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fmin_rust_version_multiple_inner_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fmin_rust_version_multiple_inner_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_multiple_inner_attr.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -0,0 +1,11 @@\n+#![feature(custom_inner_attributes)]\n+#![clippy::msrv = \"1.40\"]\n+#![clippy::msrv = \"=1.35.0\"]\n+#![clippy::msrv = \"1.10.1\"]\n+\n+mod foo {\n+    #![clippy::msrv = \"1\"]\n+    #![clippy::msrv = \"1.0.0\"]\n+}\n+\n+fn main() {}"}, {"sha": "e3ff6605cde87b891cd80d18b77bd64f1d77dcfd", "filename": "tests/ui/min_rust_version_multiple_inner_attr.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fmin_rust_version_multiple_inner_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fmin_rust_version_multiple_inner_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_multiple_inner_attr.stderr?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -0,0 +1,38 @@\n+error: `msrv` is defined multiple times\n+  --> $DIR/min_rust_version_multiple_inner_attr.rs:3:1\n+   |\n+LL | #![clippy::msrv = \"=1.35.0\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first definition found here\n+  --> $DIR/min_rust_version_multiple_inner_attr.rs:2:1\n+   |\n+LL | #![clippy::msrv = \"1.40\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `msrv` is defined multiple times\n+  --> $DIR/min_rust_version_multiple_inner_attr.rs:4:1\n+   |\n+LL | #![clippy::msrv = \"1.10.1\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first definition found here\n+  --> $DIR/min_rust_version_multiple_inner_attr.rs:2:1\n+   |\n+LL | #![clippy::msrv = \"1.40\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `msrv` is defined multiple times\n+  --> $DIR/min_rust_version_multiple_inner_attr.rs:8:5\n+   |\n+LL |     #![clippy::msrv = \"1.0.0\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first definition found here\n+  --> $DIR/min_rust_version_multiple_inner_attr.rs:7:5\n+   |\n+LL |     #![clippy::msrv = \"1\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "515fe8f95e95233953e2f2b9cf0d921f7f9da9bd", "filename": "tests/ui/min_rust_version_no_patch.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fmin_rust_version_no_patch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fmin_rust_version_no_patch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_no_patch.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -0,0 +1,14 @@\n+#![allow(clippy::redundant_clone)]\n+#![feature(custom_inner_attributes)]\n+#![clippy::msrv = \"^1.0\"]\n+\n+fn manual_strip_msrv() {\n+    let s = \"hello, world!\";\n+    if s.starts_with(\"hello, \") {\n+        assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+    }\n+}\n+\n+fn main() {\n+    manual_strip_msrv()\n+}"}, {"sha": "551948bd72ef1be61145dacfed4dc98f7e33d2ba", "filename": "tests/ui/min_rust_version_outer_attr.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fmin_rust_version_outer_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fmin_rust_version_outer_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_outer_attr.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -0,0 +1,4 @@\n+#![feature(custom_inner_attributes)]\n+\n+#[clippy::msrv = \"invalid.version\"]\n+fn main() {}"}, {"sha": "579ee7a87d23ceef6bf2c06ebfc097d8d6e17686", "filename": "tests/ui/min_rust_version_outer_attr.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fmin_rust_version_outer_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fmin_rust_version_outer_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_outer_attr.stderr?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -0,0 +1,8 @@\n+error: `msrv` cannot be an outer attribute\n+  --> $DIR/min_rust_version_outer_attr.rs:3:1\n+   |\n+LL | #[clippy::msrv = \"invalid.version\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "0918a6868ab4b08c4958f4975209012c24faa09f", "filename": "tests/ui/needless_collect_indirect.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fneedless_collect_indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fneedless_collect_indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect_indirect.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -22,4 +22,24 @@ fn main() {\n     let sample = vec![a.clone(), \"b\".to_string(), \"c\".to_string()];\n     let non_copy_contains = sample.into_iter().collect::<Vec<_>>();\n     non_copy_contains.contains(&a);\n+\n+    // Fix #5991\n+    let vec_a = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+    let vec_b = vec_a.iter().collect::<Vec<_>>();\n+    if vec_b.len() > 3 {}\n+    let other_vec = vec![1, 3, 12, 4, 16, 2];\n+    let we_got_the_same_numbers = other_vec.iter().filter(|item| vec_b.contains(item)).collect::<Vec<_>>();\n+\n+    // Fix #6297\n+    let sample = [1; 5];\n+    let multiple_indirect = sample.iter().collect::<Vec<_>>();\n+    let sample2 = vec![2, 3];\n+    if multiple_indirect.is_empty() {\n+        // do something\n+    } else {\n+        let found = sample2\n+            .iter()\n+            .filter(|i| multiple_indirect.iter().any(|s| **s % **i == 0))\n+            .collect::<Vec<_>>();\n+    }\n }"}, {"sha": "bc369dd2491e5ee87902d7854faa25298d588e64", "filename": "tests/ui/redundant_pattern_matching_option.fixed", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fredundant_pattern_matching_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fredundant_pattern_matching_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.fixed?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -2,13 +2,7 @@\n \n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n-#![allow(\n-    clippy::unit_arg,\n-    unused_must_use,\n-    clippy::needless_bool,\n-    clippy::match_like_matches_macro,\n-    deprecated\n-)]\n+#![allow(unused_must_use, clippy::needless_bool, clippy::match_like_matches_macro)]\n \n fn main() {\n     if None::<()>.is_none() {}"}, {"sha": "d7616a729135609381b09cc5403b63e43873183b", "filename": "tests/ui/redundant_pattern_matching_option.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fredundant_pattern_matching_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fredundant_pattern_matching_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -2,13 +2,7 @@\n \n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n-#![allow(\n-    clippy::unit_arg,\n-    unused_must_use,\n-    clippy::needless_bool,\n-    clippy::match_like_matches_macro,\n-    deprecated\n-)]\n+#![allow(unused_must_use, clippy::needless_bool, clippy::match_like_matches_macro)]\n \n fn main() {\n     if let None = None::<()> {}"}, {"sha": "7ddfbe503a2672dc7e0f13384f660a72f3973ef8", "filename": "tests/ui/redundant_pattern_matching_option.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fredundant_pattern_matching_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fredundant_pattern_matching_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.stderr?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -1,49 +1,49 @@\n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:14:12\n+  --> $DIR/redundant_pattern_matching_option.rs:8:12\n    |\n LL |     if let None = None::<()> {}\n    |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:16:12\n+  --> $DIR/redundant_pattern_matching_option.rs:10:12\n    |\n LL |     if let Some(_) = Some(42) {}\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:18:12\n+  --> $DIR/redundant_pattern_matching_option.rs:12:12\n    |\n LL |     if let Some(_) = Some(42) {\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:24:15\n+  --> $DIR/redundant_pattern_matching_option.rs:18:15\n    |\n LL |     while let Some(_) = Some(42) {}\n    |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:26:15\n+  --> $DIR/redundant_pattern_matching_option.rs:20:15\n    |\n LL |     while let None = Some(42) {}\n    |     ----------^^^^----------- help: try this: `while Some(42).is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:28:15\n+  --> $DIR/redundant_pattern_matching_option.rs:22:15\n    |\n LL |     while let None = None::<()> {}\n    |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:31:15\n+  --> $DIR/redundant_pattern_matching_option.rs:25:15\n    |\n LL |     while let Some(_) = v.pop() {\n    |     ----------^^^^^^^---------- help: try this: `while v.pop().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:39:5\n+  --> $DIR/redundant_pattern_matching_option.rs:33:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -52,7 +52,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:44:5\n+  --> $DIR/redundant_pattern_matching_option.rs:38:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,\n@@ -61,7 +61,7 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:49:13\n+  --> $DIR/redundant_pattern_matching_option.rs:43:13\n    |\n LL |       let _ = match None::<()> {\n    |  _____________^\n@@ -71,49 +71,49 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:55:20\n+  --> $DIR/redundant_pattern_matching_option.rs:49:20\n    |\n LL |     let x = if let Some(_) = opt { true } else { false };\n    |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:60:20\n+  --> $DIR/redundant_pattern_matching_option.rs:54:20\n    |\n LL |     let _ = if let Some(_) = gen_opt() {\n    |             -------^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:62:19\n+  --> $DIR/redundant_pattern_matching_option.rs:56:19\n    |\n LL |     } else if let None = gen_opt() {\n    |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:83:12\n+  --> $DIR/redundant_pattern_matching_option.rs:77:12\n    |\n LL |     if let Some(_) = Some(42) {}\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:85:12\n+  --> $DIR/redundant_pattern_matching_option.rs:79:12\n    |\n LL |     if let None = None::<()> {}\n    |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:87:15\n+  --> $DIR/redundant_pattern_matching_option.rs:81:15\n    |\n LL |     while let Some(_) = Some(42) {}\n    |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:89:15\n+  --> $DIR/redundant_pattern_matching_option.rs:83:15\n    |\n LL |     while let None = None::<()> {}\n    |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:91:5\n+  --> $DIR/redundant_pattern_matching_option.rs:85:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -122,7 +122,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:96:5\n+  --> $DIR/redundant_pattern_matching_option.rs:90:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,"}, {"sha": "564c427f063103386077867aac70f82da9015941", "filename": "tests/ui/redundant_pattern_matching_poll.fixed", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fredundant_pattern_matching_poll.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fredundant_pattern_matching_poll.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_poll.fixed?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -0,0 +1,73 @@\n+// run-rustfix\n+\n+#![warn(clippy::all)]\n+#![warn(clippy::redundant_pattern_matching)]\n+#![allow(unused_must_use, clippy::needless_bool, clippy::match_like_matches_macro)]\n+\n+use std::task::Poll::{self, Pending, Ready};\n+\n+fn main() {\n+    if Pending::<()>.is_pending() {}\n+\n+    if Ready(42).is_ready() {}\n+\n+    if Ready(42).is_ready() {\n+        foo();\n+    } else {\n+        bar();\n+    }\n+\n+    while Ready(42).is_ready() {}\n+\n+    while Ready(42).is_pending() {}\n+\n+    while Pending::<()>.is_pending() {}\n+\n+    if Pending::<i32>.is_pending() {}\n+\n+    if Ready(42).is_ready() {}\n+\n+    Ready(42).is_ready();\n+\n+    Pending::<()>.is_pending();\n+\n+    let _ = Pending::<()>.is_pending();\n+\n+    let poll = Ready(false);\n+    let x = if poll.is_ready() { true } else { false };\n+    takes_poll(x);\n+\n+    poll_const();\n+\n+    let _ = if gen_poll().is_ready() {\n+        1\n+    } else if gen_poll().is_pending() {\n+        2\n+    } else {\n+        3\n+    };\n+}\n+\n+fn gen_poll() -> Poll<()> {\n+    Pending\n+}\n+\n+fn takes_poll(_: bool) {}\n+\n+fn foo() {}\n+\n+fn bar() {}\n+\n+const fn poll_const() {\n+    if Ready(42).is_ready() {}\n+\n+    if Pending::<()>.is_pending() {}\n+\n+    while Ready(42).is_ready() {}\n+\n+    while Pending::<()>.is_pending() {}\n+\n+    Ready(42).is_ready();\n+\n+    Pending::<()>.is_pending();\n+}"}, {"sha": "d453d4184af4eb0d25c2c9293ef5971b119dce28", "filename": "tests/ui/redundant_pattern_matching_poll.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fredundant_pattern_matching_poll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fredundant_pattern_matching_poll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_poll.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -0,0 +1,88 @@\n+// run-rustfix\n+\n+#![warn(clippy::all)]\n+#![warn(clippy::redundant_pattern_matching)]\n+#![allow(unused_must_use, clippy::needless_bool, clippy::match_like_matches_macro)]\n+\n+use std::task::Poll::{self, Pending, Ready};\n+\n+fn main() {\n+    if let Pending = Pending::<()> {}\n+\n+    if let Ready(_) = Ready(42) {}\n+\n+    if let Ready(_) = Ready(42) {\n+        foo();\n+    } else {\n+        bar();\n+    }\n+\n+    while let Ready(_) = Ready(42) {}\n+\n+    while let Pending = Ready(42) {}\n+\n+    while let Pending = Pending::<()> {}\n+\n+    if Pending::<i32>.is_pending() {}\n+\n+    if Ready(42).is_ready() {}\n+\n+    match Ready(42) {\n+        Ready(_) => true,\n+        Pending => false,\n+    };\n+\n+    match Pending::<()> {\n+        Ready(_) => false,\n+        Pending => true,\n+    };\n+\n+    let _ = match Pending::<()> {\n+        Ready(_) => false,\n+        Pending => true,\n+    };\n+\n+    let poll = Ready(false);\n+    let x = if let Ready(_) = poll { true } else { false };\n+    takes_poll(x);\n+\n+    poll_const();\n+\n+    let _ = if let Ready(_) = gen_poll() {\n+        1\n+    } else if let Pending = gen_poll() {\n+        2\n+    } else {\n+        3\n+    };\n+}\n+\n+fn gen_poll() -> Poll<()> {\n+    Pending\n+}\n+\n+fn takes_poll(_: bool) {}\n+\n+fn foo() {}\n+\n+fn bar() {}\n+\n+const fn poll_const() {\n+    if let Ready(_) = Ready(42) {}\n+\n+    if let Pending = Pending::<()> {}\n+\n+    while let Ready(_) = Ready(42) {}\n+\n+    while let Pending = Pending::<()> {}\n+\n+    match Ready(42) {\n+        Ready(_) => true,\n+        Pending => false,\n+    };\n+\n+    match Pending::<()> {\n+        Ready(_) => false,\n+        Pending => true,\n+    };\n+}"}, {"sha": "42e5d6f41fe2ae2c480089a6326b57eb6c0f0969", "filename": "tests/ui/redundant_pattern_matching_poll.stderr", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fredundant_pattern_matching_poll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fredundant_pattern_matching_poll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_poll.stderr?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -0,0 +1,128 @@\n+error: redundant pattern matching, consider using `is_pending()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:10:12\n+   |\n+LL |     if let Pending = Pending::<()> {}\n+   |     -------^^^^^^^---------------- help: try this: `if Pending::<()>.is_pending()`\n+   |\n+   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n+\n+error: redundant pattern matching, consider using `is_ready()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:12:12\n+   |\n+LL |     if let Ready(_) = Ready(42) {}\n+   |     -------^^^^^^^^------------ help: try this: `if Ready(42).is_ready()`\n+\n+error: redundant pattern matching, consider using `is_ready()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:14:12\n+   |\n+LL |     if let Ready(_) = Ready(42) {\n+   |     -------^^^^^^^^------------ help: try this: `if Ready(42).is_ready()`\n+\n+error: redundant pattern matching, consider using `is_ready()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:20:15\n+   |\n+LL |     while let Ready(_) = Ready(42) {}\n+   |     ----------^^^^^^^^------------ help: try this: `while Ready(42).is_ready()`\n+\n+error: redundant pattern matching, consider using `is_pending()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:22:15\n+   |\n+LL |     while let Pending = Ready(42) {}\n+   |     ----------^^^^^^^------------ help: try this: `while Ready(42).is_pending()`\n+\n+error: redundant pattern matching, consider using `is_pending()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:24:15\n+   |\n+LL |     while let Pending = Pending::<()> {}\n+   |     ----------^^^^^^^---------------- help: try this: `while Pending::<()>.is_pending()`\n+\n+error: redundant pattern matching, consider using `is_ready()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:30:5\n+   |\n+LL | /     match Ready(42) {\n+LL | |         Ready(_) => true,\n+LL | |         Pending => false,\n+LL | |     };\n+   | |_____^ help: try this: `Ready(42).is_ready()`\n+\n+error: redundant pattern matching, consider using `is_pending()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:35:5\n+   |\n+LL | /     match Pending::<()> {\n+LL | |         Ready(_) => false,\n+LL | |         Pending => true,\n+LL | |     };\n+   | |_____^ help: try this: `Pending::<()>.is_pending()`\n+\n+error: redundant pattern matching, consider using `is_pending()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:40:13\n+   |\n+LL |       let _ = match Pending::<()> {\n+   |  _____________^\n+LL | |         Ready(_) => false,\n+LL | |         Pending => true,\n+LL | |     };\n+   | |_____^ help: try this: `Pending::<()>.is_pending()`\n+\n+error: redundant pattern matching, consider using `is_ready()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:46:20\n+   |\n+LL |     let x = if let Ready(_) = poll { true } else { false };\n+   |             -------^^^^^^^^------- help: try this: `if poll.is_ready()`\n+\n+error: redundant pattern matching, consider using `is_ready()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:51:20\n+   |\n+LL |     let _ = if let Ready(_) = gen_poll() {\n+   |             -------^^^^^^^^------------- help: try this: `if gen_poll().is_ready()`\n+\n+error: redundant pattern matching, consider using `is_pending()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:53:19\n+   |\n+LL |     } else if let Pending = gen_poll() {\n+   |            -------^^^^^^^------------- help: try this: `if gen_poll().is_pending()`\n+\n+error: redundant pattern matching, consider using `is_ready()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:71:12\n+   |\n+LL |     if let Ready(_) = Ready(42) {}\n+   |     -------^^^^^^^^------------ help: try this: `if Ready(42).is_ready()`\n+\n+error: redundant pattern matching, consider using `is_pending()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:73:12\n+   |\n+LL |     if let Pending = Pending::<()> {}\n+   |     -------^^^^^^^---------------- help: try this: `if Pending::<()>.is_pending()`\n+\n+error: redundant pattern matching, consider using `is_ready()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:75:15\n+   |\n+LL |     while let Ready(_) = Ready(42) {}\n+   |     ----------^^^^^^^^------------ help: try this: `while Ready(42).is_ready()`\n+\n+error: redundant pattern matching, consider using `is_pending()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:77:15\n+   |\n+LL |     while let Pending = Pending::<()> {}\n+   |     ----------^^^^^^^---------------- help: try this: `while Pending::<()>.is_pending()`\n+\n+error: redundant pattern matching, consider using `is_ready()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:79:5\n+   |\n+LL | /     match Ready(42) {\n+LL | |         Ready(_) => true,\n+LL | |         Pending => false,\n+LL | |     };\n+   | |_____^ help: try this: `Ready(42).is_ready()`\n+\n+error: redundant pattern matching, consider using `is_pending()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:84:5\n+   |\n+LL | /     match Pending::<()> {\n+LL | |         Ready(_) => false,\n+LL | |         Pending => true,\n+LL | |     };\n+   | |_____^ help: try this: `Pending::<()>.is_pending()`\n+\n+error: aborting due to 18 previous errors\n+"}, {"sha": "e94c5704b48917fd89667bed89cd3bb52896ab98", "filename": "tests/ui/redundant_pattern_matching_result.fixed", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fredundant_pattern_matching_result.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fredundant_pattern_matching_result.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_result.fixed?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -3,7 +3,6 @@\n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n #![allow(\n-    clippy::unit_arg,\n     unused_must_use,\n     clippy::needless_bool,\n     clippy::match_like_matches_macro,", "previous_filename": "tests/ui/redundant_pattern_matching.fixed"}, {"sha": "5d1752942322b0b19aa22d5bb46227bea1bb4eca", "filename": "tests/ui/redundant_pattern_matching_result.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fredundant_pattern_matching_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fredundant_pattern_matching_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_result.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -3,7 +3,6 @@\n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n #![allow(\n-    clippy::unit_arg,\n     unused_must_use,\n     clippy::needless_bool,\n     clippy::match_like_matches_macro,", "previous_filename": "tests/ui/redundant_pattern_matching.rs"}, {"sha": "d6a46babb77952de2a4d3f602841b77172bef6d6", "filename": "tests/ui/redundant_pattern_matching_result.stderr", "status": "renamed", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fredundant_pattern_matching_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fredundant_pattern_matching_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_result.stderr?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -1,37 +1,37 @@\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:16:12\n+  --> $DIR/redundant_pattern_matching_result.rs:15:12\n    |\n LL |     if let Ok(_) = &result {}\n    |     -------^^^^^---------- help: try this: `if result.is_ok()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:18:12\n+  --> $DIR/redundant_pattern_matching_result.rs:17:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:20:12\n+  --> $DIR/redundant_pattern_matching_result.rs:19:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:22:15\n+  --> $DIR/redundant_pattern_matching_result.rs:21:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:24:15\n+  --> $DIR/redundant_pattern_matching_result.rs:23:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:34:5\n+  --> $DIR/redundant_pattern_matching_result.rs:33:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -40,7 +40,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:39:5\n+  --> $DIR/redundant_pattern_matching_result.rs:38:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -49,7 +49,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:44:5\n+  --> $DIR/redundant_pattern_matching_result.rs:43:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -58,7 +58,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:49:5\n+  --> $DIR/redundant_pattern_matching_result.rs:48:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -67,73 +67,73 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:54:20\n+  --> $DIR/redundant_pattern_matching_result.rs:53:20\n    |\n LL |     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n    |             -------^^^^^--------------------- help: try this: `if Ok::<usize, ()>(4).is_ok()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:60:20\n+  --> $DIR/redundant_pattern_matching_result.rs:59:20\n    |\n LL |     let _ = if let Ok(_) = gen_res() {\n    |             -------^^^^^------------ help: try this: `if gen_res().is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:62:19\n+  --> $DIR/redundant_pattern_matching_result.rs:61:19\n    |\n LL |     } else if let Err(_) = gen_res() {\n    |            -------^^^^^^------------ help: try this: `if gen_res().is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:85:19\n+  --> $DIR/redundant_pattern_matching_result.rs:84:19\n    |\n LL |         while let Some(_) = r#try!(result_opt()) {}\n    |         ----------^^^^^^^----------------------- help: try this: `while r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:86:16\n+  --> $DIR/redundant_pattern_matching_result.rs:85:16\n    |\n LL |         if let Some(_) = r#try!(result_opt()) {}\n    |         -------^^^^^^^----------------------- help: try this: `if r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:92:12\n+  --> $DIR/redundant_pattern_matching_result.rs:91:12\n    |\n LL |     if let Some(_) = m!() {}\n    |     -------^^^^^^^------- help: try this: `if m!().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:93:15\n+  --> $DIR/redundant_pattern_matching_result.rs:92:15\n    |\n LL |     while let Some(_) = m!() {}\n    |     ----------^^^^^^^------- help: try this: `while m!().is_some()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:111:12\n+  --> $DIR/redundant_pattern_matching_result.rs:110:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:113:12\n+  --> $DIR/redundant_pattern_matching_result.rs:112:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:115:15\n+  --> $DIR/redundant_pattern_matching_result.rs:114:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:117:15\n+  --> $DIR/redundant_pattern_matching_result.rs:116:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:119:5\n+  --> $DIR/redundant_pattern_matching_result.rs:118:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -142,7 +142,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:124:5\n+  --> $DIR/redundant_pattern_matching_result.rs:123:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,", "previous_filename": "tests/ui/redundant_pattern_matching.stderr"}, {"sha": "08f734025181c612ee3c7139d94edb363e574852", "filename": "tests/ui/str_to_string.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fstr_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fstr_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstr_to_string.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -0,0 +1,7 @@\n+#![warn(clippy::str_to_string)]\n+\n+fn main() {\n+    let hello = \"hello world\".to_string();\n+    let msg = &hello[..];\n+    msg.to_string();\n+}"}, {"sha": "b1f73eda5d26c2e75c10e87d81aec835dd309462", "filename": "tests/ui/str_to_string.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fstr_to_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fstr_to_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstr_to_string.stderr?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -0,0 +1,19 @@\n+error: `to_string()` called on a `&str`\n+  --> $DIR/str_to_string.rs:4:17\n+   |\n+LL |     let hello = \"hello world\".to_string();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::str-to-string` implied by `-D warnings`\n+   = help: consider using `.to_owned()`\n+\n+error: `to_string()` called on a `&str`\n+  --> $DIR/str_to_string.rs:6:5\n+   |\n+LL |     msg.to_string();\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `.to_owned()`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "4c66855f709411358f81e4af29ac3f2f07c03bc3", "filename": "tests/ui/string_to_string.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fstring_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fstring_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_to_string.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -0,0 +1,7 @@\n+#![warn(clippy::string_to_string)]\n+#![allow(clippy::redundant_clone)]\n+\n+fn main() {\n+    let mut message = String::from(\"Hello\");\n+    let mut v = message.to_string();\n+}"}, {"sha": "1ebd17999bd8ffae49af1238cb617fb62972ce7b", "filename": "tests/ui/string_to_string.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fstring_to_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fstring_to_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_to_string.stderr?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -0,0 +1,11 @@\n+error: `to_string()` called on a `String`\n+  --> $DIR/string_to_string.rs:6:17\n+   |\n+LL |     let mut v = message.to_string();\n+   |                 ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::string-to-string` implied by `-D warnings`\n+   = help: consider using `.clone()`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ac4c1bc65979fb5f38661d3f8ac37487ef802e89", "filename": "tests/ui/temporary_assignment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -1,5 +1,4 @@\n #![warn(clippy::temporary_assignment)]\n-#![allow(const_item_mutation)]\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "7d79901a28d1be70a17f22f33806278c09b0e340", "filename": "tests/ui/temporary_assignment.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Ftemporary_assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Ftemporary_assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.stderr?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -1,13 +1,13 @@\n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:48:5\n+  --> $DIR/temporary_assignment.rs:47:5\n    |\n LL |     Struct { field: 0 }.field = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::temporary-assignment` implied by `-D warnings`\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:49:5\n+  --> $DIR/temporary_assignment.rs:48:5\n    |\n LL | /     MultiStruct {\n LL | |         structure: Struct { field: 0 },\n@@ -17,13 +17,13 @@ LL | |     .field = 1;\n    | |______________^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:54:5\n+  --> $DIR/temporary_assignment.rs:53:5\n    |\n LL |     ArrayStruct { array: [0] }.array[0] = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:55:5\n+  --> $DIR/temporary_assignment.rs:54:5\n    |\n LL |     (0, 0).0 = 1;\n    |     ^^^^^^^^^^^^"}, {"sha": "e8f2fb46665924848e113fa3a5ee4b2859714c0a", "filename": "tests/ui/unnecessary_cast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -20,4 +20,7 @@ fn main() {\n     foo!(a, i32);\n     foo!(b, f32);\n     foo!(c, f64);\n+\n+    // do not lint cast to cfg-dependant type\n+    1 as std::os::raw::c_char;\n }"}, {"sha": "7fbce58a82f8e340e7d1ddc76eeb65732de23e7d", "filename": "tests/ui/unnecessary_cast_fixable.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Funnecessary_cast_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Funnecessary_cast_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.fixed?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -11,6 +11,8 @@ fn main() {\n     let _ = -100_f32;\n     let _ = -100_f64;\n     let _ = -100_f64;\n+    100_f32;\n+    100_f64;\n     // Should not trigger\n     #[rustfmt::skip]\n     let v = vec!(1);"}, {"sha": "a71363ea4d265ac86a4aaf3081fdc5aabdd62536", "filename": "tests/ui/unnecessary_cast_fixable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Funnecessary_cast_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Funnecessary_cast_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -11,6 +11,8 @@ fn main() {\n     let _ = -100 as f32;\n     let _ = -100 as f64;\n     let _ = -100_i32 as f64;\n+    100. as f32;\n+    100. as f64;\n     // Should not trigger\n     #[rustfmt::skip]\n     let v = vec!(1);"}, {"sha": "3695a8f819c4a9da2ab2c364d29cf4f34a2a3c2b", "filename": "tests/ui/unnecessary_cast_fixable.stderr", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Funnecessary_cast_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Funnecessary_cast_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.stderr?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -36,59 +36,71 @@ error: casting integer literal to `f64` is unnecessary\n LL |     let _ = -100_i32 as f64;\n    |             ^^^^^^^^^^^^^^^ help: try: `-100_f64`\n \n+error: casting float literal to `f32` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:14:5\n+   |\n+LL |     100. as f32;\n+   |     ^^^^^^^^^^^ help: try: `100_f32`\n+\n+error: casting float literal to `f64` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:15:5\n+   |\n+LL |     100. as f64;\n+   |     ^^^^^^^^^^^ help: try: `100_f64`\n+\n error: casting integer literal to `u32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:25:5\n+  --> $DIR/unnecessary_cast_fixable.rs:27:5\n    |\n LL |     1 as u32;\n    |     ^^^^^^^^ help: try: `1_u32`\n \n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:26:5\n+  --> $DIR/unnecessary_cast_fixable.rs:28:5\n    |\n LL |     0x10 as i32;\n    |     ^^^^^^^^^^^ help: try: `0x10_i32`\n \n error: casting integer literal to `usize` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:27:5\n+  --> $DIR/unnecessary_cast_fixable.rs:29:5\n    |\n LL |     0b10 as usize;\n    |     ^^^^^^^^^^^^^ help: try: `0b10_usize`\n \n error: casting integer literal to `u16` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:28:5\n+  --> $DIR/unnecessary_cast_fixable.rs:30:5\n    |\n LL |     0o73 as u16;\n    |     ^^^^^^^^^^^ help: try: `0o73_u16`\n \n error: casting integer literal to `u32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:29:5\n+  --> $DIR/unnecessary_cast_fixable.rs:31:5\n    |\n LL |     1_000_000_000 as u32;\n    |     ^^^^^^^^^^^^^^^^^^^^ help: try: `1_000_000_000_u32`\n \n error: casting float literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:31:5\n+  --> $DIR/unnecessary_cast_fixable.rs:33:5\n    |\n LL |     1.0 as f64;\n    |     ^^^^^^^^^^ help: try: `1.0_f64`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:32:5\n+  --> $DIR/unnecessary_cast_fixable.rs:34:5\n    |\n LL |     0.5 as f32;\n    |     ^^^^^^^^^^ help: try: `0.5_f32`\n \n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:36:13\n+  --> $DIR/unnecessary_cast_fixable.rs:38:13\n    |\n LL |     let _ = -1 as i32;\n    |             ^^^^^^^^^ help: try: `-1_i32`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:37:13\n+  --> $DIR/unnecessary_cast_fixable.rs:39:13\n    |\n LL |     let _ = -1.0 as f32;\n    |             ^^^^^^^^^^^ help: try: `-1.0_f32`\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 17 previous errors\n "}, {"sha": "c266f684a36f94f042c11e9491034efa40296446", "filename": "tests/ui/wildcard_enum_match_arm.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fwildcard_enum_match_arm.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fwildcard_enum_match_arm.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.fixed?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -7,7 +7,8 @@\n     dead_code,\n     clippy::single_match,\n     clippy::wildcard_in_or_patterns,\n-    clippy::unnested_or_patterns, clippy::diverging_sub_expression\n+    clippy::unnested_or_patterns,\n+    clippy::diverging_sub_expression\n )]\n \n use std::io::ErrorKind;"}, {"sha": "2dbf726d5d07236801f9fee0441f3c2e6b15b12f", "filename": "tests/ui/wildcard_enum_match_arm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fwildcard_enum_match_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fwildcard_enum_match_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.rs?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -7,7 +7,8 @@\n     dead_code,\n     clippy::single_match,\n     clippy::wildcard_in_or_patterns,\n-    clippy::unnested_or_patterns, clippy::diverging_sub_expression\n+    clippy::unnested_or_patterns,\n+    clippy::diverging_sub_expression\n )]\n \n use std::io::ErrorKind;"}, {"sha": "0da2b68ba0b2f80fc6c3885bc6d4b6b5f14abd23", "filename": "tests/ui/wildcard_enum_match_arm.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fwildcard_enum_match_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0924d6286aa56dd9c6759f2c06c9148ce92d857a/tests%2Fui%2Fwildcard_enum_match_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.stderr?ref=0924d6286aa56dd9c6759f2c06c9148ce92d857a", "patch": "@@ -1,5 +1,5 @@\n error: wildcard match will miss any future added variants\n-  --> $DIR/wildcard_enum_match_arm.rs:38:9\n+  --> $DIR/wildcard_enum_match_arm.rs:39:9\n    |\n LL |         _ => eprintln!(\"Not red\"),\n    |         ^ help: try this: `Color::Green | Color::Blue | Color::Rgb(..) | Color::Cyan`\n@@ -11,25 +11,25 @@ LL | #![deny(clippy::wildcard_enum_match_arm)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: wildcard match will miss any future added variants\n-  --> $DIR/wildcard_enum_match_arm.rs:42:9\n+  --> $DIR/wildcard_enum_match_arm.rs:43:9\n    |\n LL |         _not_red => eprintln!(\"Not red\"),\n    |         ^^^^^^^^ help: try this: `_not_red @ Color::Green | _not_red @ Color::Blue | _not_red @ Color::Rgb(..) | _not_red @ Color::Cyan`\n \n error: wildcard match will miss any future added variants\n-  --> $DIR/wildcard_enum_match_arm.rs:46:9\n+  --> $DIR/wildcard_enum_match_arm.rs:47:9\n    |\n LL |         not_red => format!(\"{:?}\", not_red),\n    |         ^^^^^^^ help: try this: `not_red @ Color::Green | not_red @ Color::Blue | not_red @ Color::Rgb(..) | not_red @ Color::Cyan`\n \n error: wildcard match will miss any future added variants\n-  --> $DIR/wildcard_enum_match_arm.rs:62:9\n+  --> $DIR/wildcard_enum_match_arm.rs:63:9\n    |\n LL |         _ => \"No red\",\n    |         ^ help: try this: `Color::Red | Color::Green | Color::Blue | Color::Rgb(..) | Color::Cyan`\n \n error: match on non-exhaustive enum doesn't explicitly match all known variants\n-  --> $DIR/wildcard_enum_match_arm.rs:79:9\n+  --> $DIR/wildcard_enum_match_arm.rs:80:9\n    |\n LL |         _ => {},\n    |         ^ help: try this: `std::io::ErrorKind::PermissionDenied | std::io::ErrorKind::ConnectionRefused | std::io::ErrorKind::ConnectionReset | std::io::ErrorKind::ConnectionAborted | std::io::ErrorKind::NotConnected | std::io::ErrorKind::AddrInUse | std::io::ErrorKind::AddrNotAvailable | std::io::ErrorKind::BrokenPipe | std::io::ErrorKind::AlreadyExists | std::io::ErrorKind::WouldBlock | std::io::ErrorKind::InvalidInput | std::io::ErrorKind::InvalidData | std::io::ErrorKind::TimedOut | std::io::ErrorKind::WriteZero | std::io::ErrorKind::Interrupted | std::io::ErrorKind::Other | std::io::ErrorKind::UnexpectedEof | _`"}, {"sha": "319de217e0d90170c1bcf7545aef25e1caff11d5", "filename": "util/dev", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f303168a0d374c7e6d0b0aa9fd7852042602f791/util%2Fdev", "raw_url": "https://github.com/rust-lang/rust/raw/f303168a0d374c7e6d0b0aa9fd7852042602f791/util%2Fdev", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fdev?ref=f303168a0d374c7e6d0b0aa9fd7852042602f791", "patch": "@@ -1,7 +0,0 @@\n-#!/bin/sh\n-CARGO_TARGET_DIR=$(pwd)/target/\n-export CARGO_TARGET_DIR\n-\n-echo 'Deprecated! `util/dev` usage is deprecated, please use `cargo dev` instead.'\n-\n-cd clippy_dev && cargo run -- \"$@\""}]}