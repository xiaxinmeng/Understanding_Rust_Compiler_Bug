{"sha": "d6a9dfa3d414205acd8700802ddd30490db18c05", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YTlkZmEzZDQxNDIwNWFjZDg3MDA4MDJkZGQzMDQ5MGRiMThjMDU=", "commit": {"author": {"name": "Jakob Hellermann", "email": "jakob.hellermann@protonmail.com", "date": "2020-11-04T14:35:42Z"}, "committer": {"name": "Jakob Hellermann", "email": "jakob.hellermann@protonmail.com", "date": "2020-11-04T15:07:42Z"}, "message": "run 'shellcheck -f diff $(fd --extension sh) | git apply'", "tree": {"sha": "2a3634fe35bb38ab2a2332e8349311d5dbfec810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a3634fe35bb38ab2a2332e8349311d5dbfec810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6a9dfa3d414205acd8700802ddd30490db18c05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6a9dfa3d414205acd8700802ddd30490db18c05", "html_url": "https://github.com/rust-lang/rust/commit/d6a9dfa3d414205acd8700802ddd30490db18c05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6a9dfa3d414205acd8700802ddd30490db18c05/comments", "author": {"login": "jakobhellermann", "id": 22177966, "node_id": "MDQ6VXNlcjIyMTc3OTY2", "avatar_url": "https://avatars.githubusercontent.com/u/22177966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakobhellermann", "html_url": "https://github.com/jakobhellermann", "followers_url": "https://api.github.com/users/jakobhellermann/followers", "following_url": "https://api.github.com/users/jakobhellermann/following{/other_user}", "gists_url": "https://api.github.com/users/jakobhellermann/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakobhellermann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakobhellermann/subscriptions", "organizations_url": "https://api.github.com/users/jakobhellermann/orgs", "repos_url": "https://api.github.com/users/jakobhellermann/repos", "events_url": "https://api.github.com/users/jakobhellermann/events{/privacy}", "received_events_url": "https://api.github.com/users/jakobhellermann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakobhellermann", "id": 22177966, "node_id": "MDQ6VXNlcjIyMTc3OTY2", "avatar_url": "https://avatars.githubusercontent.com/u/22177966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakobhellermann", "html_url": "https://github.com/jakobhellermann", "followers_url": "https://api.github.com/users/jakobhellermann/followers", "following_url": "https://api.github.com/users/jakobhellermann/following{/other_user}", "gists_url": "https://api.github.com/users/jakobhellermann/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakobhellermann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakobhellermann/subscriptions", "organizations_url": "https://api.github.com/users/jakobhellermann/orgs", "repos_url": "https://api.github.com/users/jakobhellermann/repos", "events_url": "https://api.github.com/users/jakobhellermann/events{/privacy}", "received_events_url": "https://api.github.com/users/jakobhellermann/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3a508a516f9799ab0299d3737977224ccee654b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3a508a516f9799ab0299d3737977224ccee654b", "html_url": "https://github.com/rust-lang/rust/commit/a3a508a516f9799ab0299d3737977224ccee654b"}], "stats": {"total": 92, "additions": 46, "deletions": 46}, "files": [{"sha": "fcaa99a0f7bf2fc9a682bf1b475787dadb0507fa", "filename": "build.sh", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6a9dfa3d414205acd8700802ddd30490db18c05/build.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d6a9dfa3d414205acd8700802ddd30490db18c05/build.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.sh?ref=d6a9dfa3d414205acd8700802ddd30490db18c05", "patch": "@@ -34,15 +34,15 @@ else\n     cargo build\n fi\n \n-rm -rf $target_dir\n-mkdir $target_dir\n-cp -a target/$CHANNEL/cg_clif{,_build_sysroot} target/$CHANNEL/*rustc_codegen_cranelift* $target_dir/\n-cp -a rust-toolchain scripts/config.sh scripts/cargo.sh $target_dir\n+rm -rf \"$target_dir\"\n+mkdir \"$target_dir\"\n+cp -a target/$CHANNEL/cg_clif{,_build_sysroot} target/$CHANNEL/*rustc_codegen_cranelift* \"$target_dir/\"\n+cp -a rust-toolchain scripts/config.sh scripts/cargo.sh \"$target_dir\"\n \n if [[ \"$build_sysroot\" == \"1\" ]]; then\n     echo \"[BUILD] sysroot\"\n     export CG_CLIF_INCR_CACHE_DISABLED=1\n     dir=$(pwd)\n-    cd $target_dir\n-    time $dir/build_sysroot/build_sysroot.sh\n+    cd \"$target_dir\"\n+    time \"$dir/build_sysroot/build_sysroot.sh\"\n fi"}, {"sha": "19e67380692b5ef14a7ed814ec7b0d94cbb3617d", "filename": "build_sysroot/build_sysroot.sh", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d6a9dfa3d414205acd8700802ddd30490db18c05/build_sysroot%2Fbuild_sysroot.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d6a9dfa3d414205acd8700802ddd30490db18c05/build_sysroot%2Fbuild_sysroot.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Fbuild_sysroot.sh?ref=d6a9dfa3d414205acd8700802ddd30490db18c05", "patch": "@@ -13,7 +13,7 @@ dir=$(pwd)\n export RUSTC=$dir\"/cg_clif_build_sysroot\"\n export RUSTFLAGS=$RUSTFLAGS\" --clif\"\n \n-cd $(dirname \"$0\")\n+cd \"$(dirname \"$0\")\"\n \n # Cleanup for previous run\n #     v Clean target dir except for build scripts and incremental cache\n@@ -28,12 +28,12 @@ if [[ \"$1\" != \"--debug\" ]]; then\n     sysroot_channel='release'\n     # FIXME Enable incremental again once rust-lang/rust#74946 is fixed\n     # FIXME Enable -Zmir-opt-level=2 again once it doesn't ice anymore\n-    CARGO_INCREMENTAL=0 RUSTFLAGS=\"$RUSTFLAGS\" cargo build --target $TARGET_TRIPLE --release\n+    CARGO_INCREMENTAL=0 RUSTFLAGS=\"$RUSTFLAGS\" cargo build --target \"$TARGET_TRIPLE\" --release\n else\n     sysroot_channel='debug'\n-    cargo build --target $TARGET_TRIPLE\n+    cargo build --target \"$TARGET_TRIPLE\"\n fi\n \n # Copy files to sysroot\n-mkdir -p $dir/sysroot/lib/rustlib/$TARGET_TRIPLE/lib/\n-cp -a target/$TARGET_TRIPLE/$sysroot_channel/deps/* $dir/sysroot/lib/rustlib/$TARGET_TRIPLE/lib/\n+mkdir -p \"$dir/sysroot/lib/rustlib/$TARGET_TRIPLE/lib/\"\n+cp -a \"target/$TARGET_TRIPLE/$sysroot_channel/deps/\"* \"$dir/sysroot/lib/rustlib/$TARGET_TRIPLE/lib/\""}, {"sha": "40fbaf646a2f69a435a2c61427ebf143849599f0", "filename": "build_sysroot/prepare_sysroot_src.sh", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6a9dfa3d414205acd8700802ddd30490db18c05/build_sysroot%2Fprepare_sysroot_src.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d6a9dfa3d414205acd8700802ddd30490db18c05/build_sysroot%2Fprepare_sysroot_src.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Fprepare_sysroot_src.sh?ref=d6a9dfa3d414205acd8700802ddd30490db18c05", "patch": "@@ -1,18 +1,18 @@\n #!/bin/bash\n set -e\n-cd $(dirname \"$0\")\n+cd \"$(dirname \"$0\")\"\n \n-SRC_DIR=$(dirname $(rustup which rustc))\"/../lib/rustlib/src/rust/\"\n+SRC_DIR=\"$(dirname \"$(rustup which rustc)\")/../lib/rustlib/src/rust/\"\n DST_DIR=\"sysroot_src\"\n \n-if [ ! -e $SRC_DIR ]; then\n+if [ ! -e \"$SRC_DIR\" ]; then\n     echo \"Please install rust-src component\"\n     exit 1\n fi\n \n rm -rf $DST_DIR\n mkdir -p $DST_DIR/library\n-cp -a $SRC_DIR/library $DST_DIR/\n+cp -a \"$SRC_DIR/library\" $DST_DIR/\n \n pushd $DST_DIR\n echo \"[GIT] init\"\n@@ -22,8 +22,8 @@ git add .\n echo \"[GIT] commit\"\n git commit -m \"Initial commit\" -q\n for file in $(ls ../../patches/ | grep -v patcha); do\n-echo \"[GIT] apply\" $file\n-git apply ../../patches/$file\n+echo \"[GIT] apply\" \"$file\"\n+git apply ../../patches/\"$file\"\n git add -A\n git commit --no-gpg-sign -m \"Patch $file\"\n done"}, {"sha": "29fb7fbaf62541d61e0494a48f7bce7b76d86e60", "filename": "scripts/cargo.sh", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6a9dfa3d414205acd8700802ddd30490db18c05/scripts%2Fcargo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d6a9dfa3d414205acd8700802ddd30490db18c05/scripts%2Fcargo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fcargo.sh?ref=d6a9dfa3d414205acd8700802ddd30490db18c05", "patch": "@@ -1,16 +1,16 @@\n #!/bin/bash\n \n dir=$(dirname \"$0\")\n-source $dir/config.sh\n+source \"$dir/config.sh\"\n \n # read nightly compiler from rust-toolchain file\n-TOOLCHAIN=$(cat $dir/rust-toolchain)\n+TOOLCHAIN=$(cat \"$dir/rust-toolchain\")\n \n cmd=$1\n shift || true\n \n if [[ \"$cmd\" = \"jit\" ]]; then\n-cargo +${TOOLCHAIN} rustc $@ -- --jit\n+cargo \"+${TOOLCHAIN}\" rustc $@ -- --jit\n else\n-cargo +${TOOLCHAIN} $cmd $@\n+cargo \"+${TOOLCHAIN}\" \"$cmd\" $@\n fi"}, {"sha": "c4cbb1d10f4817da740af04d4d37dc2fbec17272", "filename": "scripts/config.sh", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6a9dfa3d414205acd8700802ddd30490db18c05/scripts%2Fconfig.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d6a9dfa3d414205acd8700802ddd30490db18c05/scripts%2Fconfig.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fconfig.sh?ref=d6a9dfa3d414205acd8700802ddd30490db18c05", "patch": "@@ -1,6 +1,6 @@\n set -e\n \n-unamestr=`uname`\n+unamestr=$(uname)\n if [[ \"$unamestr\" == 'Linux' ]]; then\n    dylib_ext='so'\n elif [[ \"$unamestr\" == 'Darwin' ]]; then\n@@ -47,11 +47,11 @@ export RUSTDOCFLAGS=$linker' -Cpanic=abort -Zpanic-abort-tests '\\\n '-Zcodegen-backend='$dir'/librustc_codegen_cranelift.'$dylib_ext' --sysroot '$dir'/sysroot'\n \n # FIXME remove once the atomic shim is gone\n-if [[ `uname` == 'Darwin' ]]; then\n+if [[ $(uname) == 'Darwin' ]]; then\n    export RUSTFLAGS=\"$RUSTFLAGS -Clink-arg=-undefined -Clink-arg=dynamic_lookup\"\n fi\n \n-export LD_LIBRARY_PATH=\"$dir:$(rustc --print sysroot)/lib:$dir/target/out:$dir/sysroot/lib/rustlib/\"$TARGET_TRIPLE\"/lib\"\n+export LD_LIBRARY_PATH=\"$dir:$(rustc --print sysroot)/lib:$dir/target/out:$dir/sysroot/lib/rustlib/$TARGET_TRIPLE/lib\"\n export DYLD_LIBRARY_PATH=$LD_LIBRARY_PATH\n \n export CG_CLIF_DISPLAY_CG_TIME=1"}, {"sha": "faf8325cfcd213c75279fe0508b9de5c1f8cc569", "filename": "scripts/rustup.sh", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6a9dfa3d414205acd8700802ddd30490db18c05/scripts%2Frustup.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d6a9dfa3d414205acd8700802ddd30490db18c05/scripts%2Frustup.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Frustup.sh?ref=d6a9dfa3d414205acd8700802ddd30490db18c05", "patch": "@@ -7,13 +7,13 @@ case $1 in\n         TOOLCHAIN=$(date +%Y-%m-%d)\n \n         echo \"=> Installing new nightly\"\n-        rustup toolchain install --profile minimal nightly-${TOOLCHAIN} # Sanity check to see if the nightly exists\n-        echo nightly-${TOOLCHAIN} > rust-toolchain\n+        rustup toolchain install --profile minimal \"nightly-${TOOLCHAIN}\" # Sanity check to see if the nightly exists\n+        echo \"nightly-${TOOLCHAIN}\" > rust-toolchain\n         rustup component add rustfmt || true\n \n         echo \"=> Uninstalling all old nighlies\"\n-        for nightly in $(rustup toolchain list | grep nightly | grep -v $TOOLCHAIN | grep -v nightly-x86_64); do\n-            rustup toolchain uninstall $nightly\n+        for nightly in $(rustup toolchain list | grep nightly | grep -v \"$TOOLCHAIN\" | grep -v nightly-x86_64); do\n+            rustup toolchain uninstall \"$nightly\"\n         done\n \n         ./clean_all.sh\n@@ -30,9 +30,9 @@ case $1 in\n \tcg_clif=$(pwd)\n \tpushd ../rust\n \tbranch=update_cg_clif-$(date +%Y-%m-%d)\n-\tgit checkout -b $branch\n+\tgit checkout -b \"$branch\"\n \tgit subtree pull --prefix=compiler/rustc_codegen_cranelift/ https://github.com/bjorn3/rustc_codegen_cranelift.git master\n-\tgit push -u my $branch\n+\tgit push -u my \"$branch\"\n \tpopd\n \t;;\n     *)"}, {"sha": "e8d5c628638c4d15416dfd5591492c172084d6e3", "filename": "scripts/test_bootstrap.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6a9dfa3d414205acd8700802ddd30490db18c05/scripts%2Ftest_bootstrap.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d6a9dfa3d414205acd8700802ddd30490db18c05/scripts%2Ftest_bootstrap.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftest_bootstrap.sh?ref=d6a9dfa3d414205acd8700802ddd30490db18c05", "patch": "@@ -1,7 +1,7 @@\n #!/bin/bash\n set -e\n \n-cd $(dirname \"$0\")/../\n+cd \"$(dirname \"$0\")/../\"\n \n ./build.sh\n source build/config.sh\n@@ -11,7 +11,7 @@ git clone https://github.com/rust-lang/rust.git || true\n pushd rust\n git fetch\n git checkout -- .\n-git checkout $(rustc -V | cut -d' ' -f3 | tr -d '(')\n+git checkout \"$(rustc -V | cut -d' ' -f3 | tr -d '(')\"\n \n git apply - <<EOF\n diff --git a/.gitmodules b/.gitmodules"}, {"sha": "cbc586c1cf9d2854ad34952a57041521122e33df", "filename": "scripts/tests.sh", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d6a9dfa3d414205acd8700802ddd30490db18c05/scripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d6a9dfa3d414205acd8700802ddd30490db18c05/scripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftests.sh?ref=d6a9dfa3d414205acd8700802ddd30490db18c05", "patch": "@@ -8,59 +8,59 @@ MY_RUSTC=$RUSTC\" \"$RUSTFLAGS\" -L crate=target/out --out-dir target/out -Cdebugin\n \n function no_sysroot_tests() {\n     echo \"[BUILD] mini_core\"\n-    $MY_RUSTC example/mini_core.rs --crate-name mini_core --crate-type lib,dylib --target $TARGET_TRIPLE\n+    $MY_RUSTC example/mini_core.rs --crate-name mini_core --crate-type lib,dylib --target \"$TARGET_TRIPLE\"\n \n     echo \"[BUILD] example\"\n-    $MY_RUSTC example/example.rs --crate-type lib --target $TARGET_TRIPLE\n+    $MY_RUSTC example/example.rs --crate-type lib --target \"$TARGET_TRIPLE\"\n \n     if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n         echo \"[JIT] mini_core_hello_world\"\n-        CG_CLIF_JIT_ARGS=\"abc bcd\" $MY_RUSTC --jit example/mini_core_hello_world.rs --cfg jit --target $HOST_TRIPLE\n+        CG_CLIF_JIT_ARGS=\"abc bcd\" $MY_RUSTC --jit example/mini_core_hello_world.rs --cfg jit --target \"$HOST_TRIPLE\"\n     else\n         echo \"[JIT] mini_core_hello_world (skipped)\"\n     fi\n \n     echo \"[AOT] mini_core_hello_world\"\n-    $MY_RUSTC example/mini_core_hello_world.rs --crate-name mini_core_hello_world --crate-type bin -g --target $TARGET_TRIPLE\n+    $MY_RUSTC example/mini_core_hello_world.rs --crate-name mini_core_hello_world --crate-type bin -g --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/mini_core_hello_world abc bcd\n     # (echo \"break set -n main\"; echo \"run\"; sleep 1; echo \"si -c 10\"; sleep 1; echo \"frame variable\") | lldb -- ./target/out/mini_core_hello_world abc bcd\n \n     echo \"[AOT] arbitrary_self_types_pointers_and_wrappers\"\n-    $MY_RUSTC example/arbitrary_self_types_pointers_and_wrappers.rs --crate-name arbitrary_self_types_pointers_and_wrappers --crate-type bin --target $TARGET_TRIPLE\n+    $MY_RUSTC example/arbitrary_self_types_pointers_and_wrappers.rs --crate-name arbitrary_self_types_pointers_and_wrappers --crate-type bin --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/arbitrary_self_types_pointers_and_wrappers\n }\n \n function base_sysroot_tests() {\n     echo \"[AOT] alloc_example\"\n-    $MY_RUSTC example/alloc_example.rs --crate-type bin --target $TARGET_TRIPLE\n+    $MY_RUSTC example/alloc_example.rs --crate-type bin --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/alloc_example\n \n     if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n         echo \"[JIT] std_example\"\n-        $MY_RUSTC --jit example/std_example.rs --target $HOST_TRIPLE\n+        $MY_RUSTC --jit example/std_example.rs --target \"$HOST_TRIPLE\"\n     else\n         echo \"[JIT] std_example (skipped)\"\n     fi\n \n     echo \"[AOT] dst_field_align\"\n     # FIXME Re-add -Zmir-opt-level=2 once rust-lang/rust#67529 is fixed.\n-    $MY_RUSTC example/dst-field-align.rs --crate-name dst_field_align --crate-type bin --target $TARGET_TRIPLE\n+    $MY_RUSTC example/dst-field-align.rs --crate-name dst_field_align --crate-type bin --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/dst_field_align || (echo $?; false)\n \n     echo \"[AOT] std_example\"\n-    $MY_RUSTC example/std_example.rs --crate-type bin --target $TARGET_TRIPLE\n+    $MY_RUSTC example/std_example.rs --crate-type bin --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/std_example arg\n \n     echo \"[AOT] subslice-patterns-const-eval\"\n-    $MY_RUSTC example/subslice-patterns-const-eval.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n+    $MY_RUSTC example/subslice-patterns-const-eval.rs --crate-type bin -Cpanic=abort --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/subslice-patterns-const-eval\n \n     echo \"[AOT] track-caller-attribute\"\n-    $MY_RUSTC example/track-caller-attribute.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n+    $MY_RUSTC example/track-caller-attribute.rs --crate-type bin -Cpanic=abort --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/track-caller-attribute\n \n     echo \"[AOT] mod_bench\"\n-    $MY_RUSTC example/mod_bench.rs --crate-type bin --target $TARGET_TRIPLE\n+    $MY_RUSTC example/mod_bench.rs --crate-type bin --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/mod_bench\n \n     pushd rand\n@@ -73,13 +73,13 @@ function extended_sysroot_tests() {\n     pushd simple-raytracer\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         echo \"[BENCH COMPILE] ebobby/simple-raytracer\"\n-        hyperfine --runs ${RUN_RUNS:-10} --warmup 1 --prepare \"cargo clean\" \\\n+        hyperfine --runs \"${RUN_RUNS:-10}\" --warmup 1 --prepare \"cargo clean\" \\\n         \"RUSTC=rustc RUSTFLAGS='' cargo build\" \\\n         \"../build/cargo.sh build\"\n \n         echo \"[BENCH RUN] ebobby/simple-raytracer\"\n         cp ./target/debug/main ./raytracer_cg_clif\n-        hyperfine --runs ${RUN_RUNS:-10} ./raytracer_cg_llvm ./raytracer_cg_clif\n+        hyperfine --runs \"${RUN_RUNS:-10}\" ./raytracer_cg_llvm ./raytracer_cg_clif\n     else\n         echo \"[BENCH COMPILE] ebobby/simple-raytracer (skipped)\"\n         echo \"[COMPILE] ebobby/simple-raytracer\""}]}