{"sha": "ae612100d28e3e806c6aa39e52792b3ae98907e7", "node_id": "C_kwDOAAsO6NoAKGFlNjEyMTAwZDI4ZTNlODA2YzZhYTM5ZTUyNzkyYjNhZTk4OTA3ZTc", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-11-22T03:08:51Z"}, "committer": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-11-24T16:07:41Z"}, "message": "Generically implement horizontal_{and,or,xor}", "tree": {"sha": "ad67544493ef17efd2181db89a2bb883ce3f9d7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad67544493ef17efd2181db89a2bb883ce3f9d7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae612100d28e3e806c6aa39e52792b3ae98907e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae612100d28e3e806c6aa39e52792b3ae98907e7", "html_url": "https://github.com/rust-lang/rust/commit/ae612100d28e3e806c6aa39e52792b3ae98907e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae612100d28e3e806c6aa39e52792b3ae98907e7/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ced3a05526ce70583f827b5d99a69f436126af20", "url": "https://api.github.com/repos/rust-lang/rust/commits/ced3a05526ce70583f827b5d99a69f436126af20", "html_url": "https://github.com/rust-lang/rust/commit/ced3a05526ce70583f827b5d99a69f436126af20"}], "stats": {"total": 66, "additions": 44, "deletions": 22}, "files": [{"sha": "e79a185816bfbfcd3d9745003b66e50f0f6ad57b", "filename": "crates/core_simd/src/reduction.rs", "status": "modified", "additions": 44, "deletions": 22, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ae612100d28e3e806c6aa39e52792b3ae98907e7/crates%2Fcore_simd%2Fsrc%2Freduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae612100d28e3e806c6aa39e52792b3ae98907e7/crates%2Fcore_simd%2Fsrc%2Freduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Freduction.rs?ref=ae612100d28e3e806c6aa39e52792b3ae98907e7", "patch": "@@ -2,7 +2,8 @@ use crate::simd::intrinsics::{\n     simd_reduce_add_ordered, simd_reduce_and, simd_reduce_max, simd_reduce_min,\n     simd_reduce_mul_ordered, simd_reduce_or, simd_reduce_xor,\n };\n-use crate::simd::{LaneCount, Simd, SupportedLaneCount};\n+use crate::simd::{LaneCount, Simd, SimdElement, SupportedLaneCount};\n+use core::ops::{BitAnd, BitOr, BitXor};\n \n macro_rules! impl_integer_reductions {\n     { $scalar:ty } => {\n@@ -22,27 +23,6 @@ macro_rules! impl_integer_reductions {\n                 unsafe { simd_reduce_mul_ordered(self, 1) }\n             }\n \n-            /// Horizontal bitwise \"and\".  Returns the cumulative bitwise \"and\" across the lanes of\n-            /// the vector.\n-            #[inline]\n-            pub fn horizontal_and(self) -> $scalar {\n-                unsafe { simd_reduce_and(self) }\n-            }\n-\n-            /// Horizontal bitwise \"or\".  Returns the cumulative bitwise \"or\" across the lanes of\n-            /// the vector.\n-            #[inline]\n-            pub fn horizontal_or(self) -> $scalar {\n-                unsafe { simd_reduce_or(self) }\n-            }\n-\n-            /// Horizontal bitwise \"xor\".  Returns the cumulative bitwise \"xor\" across the lanes of\n-            /// the vector.\n-            #[inline]\n-            pub fn horizontal_xor(self) -> $scalar {\n-                unsafe { simd_reduce_xor(self) }\n-            }\n-\n             /// Horizontal maximum.  Returns the maximum lane in the vector.\n             #[inline]\n             pub fn horizontal_max(self) -> $scalar {\n@@ -121,3 +101,45 @@ macro_rules! impl_float_reductions {\n \n impl_float_reductions! { f32 }\n impl_float_reductions! { f64 }\n+\n+impl<T, const LANES: usize> Simd<T, LANES>\n+where\n+    Self: BitAnd<Self, Output = Self>,\n+    T: SimdElement + BitAnd<T, Output = T>,\n+    LaneCount<LANES>: SupportedLaneCount,\n+{\n+    /// Horizontal bitwise \"and\".  Returns the cumulative bitwise \"and\" across the lanes of\n+    /// the vector.\n+    #[inline]\n+    pub fn horizontal_and(self) -> T {\n+        unsafe { simd_reduce_and(self) }\n+    }\n+}\n+\n+impl<T, const LANES: usize> Simd<T, LANES>\n+where\n+    Self: BitOr<Self, Output = Self>,\n+    T: SimdElement + BitOr<T, Output = T>,\n+    LaneCount<LANES>: SupportedLaneCount,\n+{\n+    /// Horizontal bitwise \"or\".  Returns the cumulative bitwise \"or\" across the lanes of\n+    /// the vector.\n+    #[inline]\n+    pub fn horizontal_or(self) -> T {\n+        unsafe { simd_reduce_or(self) }\n+    }\n+}\n+\n+impl<T, const LANES: usize> Simd<T, LANES>\n+where\n+    Self: BitXor<Self, Output = Self>,\n+    T: SimdElement + BitXor<T, Output = T>,\n+    LaneCount<LANES>: SupportedLaneCount,\n+{\n+    /// Horizontal bitwise \"xor\".  Returns the cumulative bitwise \"xor\" across the lanes of\n+    /// the vector.\n+    #[inline]\n+    pub fn horizontal_xor(self) -> T {\n+        unsafe { simd_reduce_xor(self) }\n+    }\n+}"}]}