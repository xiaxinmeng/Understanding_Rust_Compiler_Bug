{"sha": "52e9f2035ae396cae4a0e0430763b53a676d7eb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZTlmMjAzNWFlMzk2Y2FlNGEwZTA0MzA3NjNiNTNhNjc2ZDdlYjk=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-07-18T23:52:09Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-07-22T04:35:40Z"}, "message": "Use config::pub_only rather than a spearate api mode", "tree": {"sha": "19484b2eba0e286be3970f81646599ea5a01168a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19484b2eba0e286be3970f81646599ea5a01168a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52e9f2035ae396cae4a0e0430763b53a676d7eb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52e9f2035ae396cae4a0e0430763b53a676d7eb9", "html_url": "https://github.com/rust-lang/rust/commit/52e9f2035ae396cae4a0e0430763b53a676d7eb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52e9f2035ae396cae4a0e0430763b53a676d7eb9/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d81e8bb2269fb123152c228cfc3670adad5ceb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d81e8bb2269fb123152c228cfc3670adad5ceb2", "html_url": "https://github.com/rust-lang/rust/commit/4d81e8bb2269fb123152c228cfc3670adad5ceb2"}], "stats": {"total": 212, "additions": 51, "deletions": 161}, "files": [{"sha": "8b55eb4c099ae1927e36246be02e1fa6349e11ac", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/52e9f2035ae396cae4a0e0430763b53a676d7eb9/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e9f2035ae396cae4a0e0430763b53a676d7eb9/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=52e9f2035ae396cae4a0e0430763b53a676d7eb9", "patch": "@@ -960,9 +960,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     save_analysis: bool = (false, parse_bool, [UNTRACKED],\n         \"write syntax and type analysis (in JSON format) information, in \\\n          addition to normal output\"),\n-    save_analysis_api: bool = (false, parse_bool, [UNTRACKED],\n-        \"write syntax and type analysis information for opaque libraries (in JSON format), \\\n-         in addition to normal output\"),\n     print_move_fragments: bool = (false, parse_bool, [UNTRACKED],\n         \"print out move-fragment data for every fn\"),\n     flowgraph_print_loans: bool = (false, parse_bool, [UNTRACKED],\n@@ -2527,8 +2524,6 @@ mod tests {\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n         opts.debugging_opts.save_analysis = true;\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-        opts.debugging_opts.save_analysis_api = true;\n-        assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n         opts.debugging_opts.print_move_fragments = true;\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n         opts.debugging_opts.flowgraph_print_loans = true;"}, {"sha": "d0229187c2a0f0daeaec6ec73e3e700869d8fda1", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52e9f2035ae396cae4a0e0430763b53a676d7eb9/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e9f2035ae396cae4a0e0430763b53a676d7eb9/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=52e9f2035ae396cae4a0e0430763b53a676d7eb9", "patch": "@@ -579,8 +579,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                                         state.analysis.unwrap(),\n                                         state.crate_name.unwrap(),\n                                         None,\n-                                        DumpHandler::new(save_analysis_format(state.session),\n-                                                         state.out_dir,\n+                                        DumpHandler::new(state.out_dir,\n                                                          state.crate_name.unwrap()))\n                 });\n             };\n@@ -603,18 +602,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n }\n \n fn save_analysis(sess: &Session) -> bool {\n-    sess.opts.debugging_opts.save_analysis ||\n-    sess.opts.debugging_opts.save_analysis_api\n-}\n-\n-fn save_analysis_format(sess: &Session) -> save::Format {\n-    if sess.opts.debugging_opts.save_analysis {\n-        save::Format::Json\n-    } else if sess.opts.debugging_opts.save_analysis_api {\n-        save::Format::JsonApi\n-    } else {\n-        unreachable!();\n-    }\n+    sess.opts.debugging_opts.save_analysis\n }\n \n impl RustcDefaultCalls {"}, {"sha": "f5f2887beb341d62d76e24c12f09e8c827f1207d", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/52e9f2035ae396cae4a0e0430763b53a676d7eb9/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e9f2035ae396cae4a0e0430763b53a676d7eb9/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=52e9f2035ae396cae4a0e0430763b53a676d7eb9", "patch": "@@ -41,7 +41,8 @@ use syntax::ptr::P;\n use syntax::codemap::Spanned;\n use syntax_pos::*;\n \n-use {escape, generated_code, SaveContext, PathCollector, lower_attributes, Dump};\n+use {escape, generated_code, SaveContext, PathCollector, lower_attributes};\n+use json_dumper::{JsonDumper, DumpOutput};\n use span_utils::SpanUtils;\n use sig;\n \n@@ -58,11 +59,11 @@ macro_rules! down_cast_data {\n     };\n }\n \n-pub struct DumpVisitor<'l, 'tcx: 'l, 'll, D: 'll> {\n+pub struct DumpVisitor<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> {\n     save_ctxt: SaveContext<'l, 'tcx>,\n     sess: &'l Session,\n     tcx: TyCtxt<'l, 'tcx, 'tcx>,\n-    dumper: &'ll mut D,\n+    dumper: &'ll mut JsonDumper<O>,\n \n     span: SpanUtils<'l>,\n \n@@ -75,10 +76,10 @@ pub struct DumpVisitor<'l, 'tcx: 'l, 'll, D: 'll> {\n     // mac_defs: HashSet<Span>,\n }\n \n-impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n+impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n     pub fn new(save_ctxt: SaveContext<'l, 'tcx>,\n-               dumper: &'ll mut D)\n-               -> DumpVisitor<'l, 'tcx, 'll, D> {\n+               dumper: &'ll mut JsonDumper<O>)\n+               -> DumpVisitor<'l, 'tcx, 'll, O> {\n         let span_utils = SpanUtils::new(&save_ctxt.tcx.sess);\n         DumpVisitor {\n             sess: &save_ctxt.tcx.sess,\n@@ -92,7 +93,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n     }\n \n     fn nest_scope<F>(&mut self, scope_id: NodeId, f: F)\n-        where F: FnOnce(&mut DumpVisitor<'l, 'tcx, 'll, D>)\n+        where F: FnOnce(&mut DumpVisitor<'l, 'tcx, 'll, O>)\n     {\n         let parent_scope = self.cur_scope;\n         self.cur_scope = scope_id;\n@@ -101,7 +102,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n     }\n \n     fn nest_tables<F>(&mut self, item_id: NodeId, f: F)\n-        where F: FnOnce(&mut DumpVisitor<'l, 'tcx, 'll, D>)\n+        where F: FnOnce(&mut DumpVisitor<'l, 'tcx, 'll, O>)\n     {\n         let item_def_id = self.tcx.hir.local_def_id(item_id);\n         if self.tcx.has_typeck_tables(item_def_id) {\n@@ -1089,7 +1090,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n     }\n }\n \n-impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll, D> {\n+impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll, O> {\n     fn visit_mod(&mut self, m: &'l ast::Mod, span: Span, attrs: &[ast::Attribute], id: NodeId) {\n         // Since we handle explicit modules ourselves in visit_item, this should\n         // only get called for the root module of a crate."}, {"sha": "4b2301fd7f804dcf22f2042a994e5b5dea0df5de", "filename": "src/librustc_save_analysis/json_api_dumper.rs", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/4d81e8bb2269fb123152c228cfc3670adad5ceb2/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81e8bb2269fb123152c228cfc3670adad5ceb2/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs?ref=4d81e8bb2269fb123152c228cfc3670adad5ceb2", "patch": "@@ -1,66 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::io::Write;\n-\n-use rustc_serialize::json::as_json;\n-\n-use Dump;\n-\n-use rls_data::{Analysis, Import, Def, CratePreludeData, Format, Relation};\n-\n-\n-// A dumper to dump a restricted set of JSON information, designed for use with\n-// libraries distributed without their source. Clients are likely to use type\n-// information here, and (for example) generate Rustdoc URLs, but don't need\n-// information for navigating the source of the crate.\n-// Relative to the regular JSON save-analysis info, this form is filtered to\n-// remove non-visible items.\n-pub struct JsonApiDumper<'b, W: Write + 'b> {\n-    output: &'b mut W,\n-    result: Analysis,\n-}\n-\n-impl<'b, W: Write> JsonApiDumper<'b, W> {\n-    pub fn new(writer: &'b mut W) -> JsonApiDumper<'b, W> {\n-        let mut result = Analysis::new();\n-        result.kind = Format::JsonApi;\n-        JsonApiDumper { output: writer, result }\n-    }\n-}\n-\n-impl<'b, W: Write> Drop for JsonApiDumper<'b, W> {\n-    fn drop(&mut self) {\n-        if let Err(_) = write!(self.output, \"{}\", as_json(&self.result)) {\n-            error!(\"Error writing output\");\n-        }\n-    }\n-}\n-\n-impl<'b, W: Write + 'b> Dump for JsonApiDumper<'b, W> {\n-    fn crate_prelude(&mut self, data: CratePreludeData) {\n-        self.result.prelude = Some(data)\n-    }\n-\n-    fn dump_relation(&mut self, data: Relation) {\n-        self.result.relations.push(data);\n-    }\n-    fn import(&mut self, public: bool, import: Import) {\n-        if public {\n-            self.result.imports.push(import);\n-        }\n-    }\n-    fn dump_def(&mut self, public: bool, mut data: Def) {\n-        if public {\n-            data.attributes = vec![];\n-            self.result.defs.push(data);\n-        }\n-    }\n-}"}, {"sha": "521faba9bcc552488c1154135678537597c5784a", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/52e9f2035ae396cae4a0e0430763b53a676d7eb9/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e9f2035ae396cae4a0e0430763b53a676d7eb9/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=52e9f2035ae396cae4a0e0430763b53a676d7eb9", "patch": "@@ -14,12 +14,12 @@ use rustc_serialize::json::as_json;\n \n use rls_data::{self, Analysis, Import, Def, DefKind, Ref, RefKind, MacroRef,\n                Relation, CratePreludeData};\n+use rls_data::config::Config;\n use rls_span::{Column, Row};\n \n-use Dump;\n-\n pub struct JsonDumper<O: DumpOutput> {\n     result: Analysis,\n+    config: Config,\n     output: O,\n }\n \n@@ -50,14 +50,14 @@ impl<'b> DumpOutput for CallbackOutput<'b> {\n }\n \n impl<'b, W: Write> JsonDumper<WriteOutput<'b, W>> {\n-    pub fn new(writer: &'b mut W) -> JsonDumper<WriteOutput<'b, W>> {\n-        JsonDumper { output: WriteOutput { output: writer }, result: Analysis::new() }\n+    pub fn new(writer: &'b mut W, config: Config) -> JsonDumper<WriteOutput<'b, W>> {\n+        JsonDumper { output: WriteOutput { output: writer }, config, result: Analysis::new() }\n     }\n }\n \n impl<'b> JsonDumper<CallbackOutput<'b>> {\n-    pub fn with_callback(callback: &'b mut FnMut(&Analysis)) -> JsonDumper<CallbackOutput<'b>> {\n-        JsonDumper { output: CallbackOutput { callback: callback }, result: Analysis::new() }\n+    pub fn with_callback(callback: &'b mut FnMut(&Analysis), config: Config) -> JsonDumper<CallbackOutput<'b>> {\n+        JsonDumper { output: CallbackOutput { callback: callback }, config, result: Analysis::new() }\n     }\n }\n \n@@ -67,23 +67,36 @@ impl<O: DumpOutput> Drop for JsonDumper<O> {\n     }\n }\n \n-impl<'b, O: DumpOutput + 'b> Dump for JsonDumper<O> {\n-    fn crate_prelude(&mut self, data: CratePreludeData) {\n+impl<'b, O: DumpOutput + 'b> JsonDumper<O> {\n+    pub fn crate_prelude(&mut self, data: CratePreludeData) {\n         self.result.prelude = Some(data)\n     }\n \n-    fn macro_use(&mut self, data: MacroRef) {\n+    pub fn macro_use(&mut self, data: MacroRef) {\n+        if self.config.pub_only {\n+            return;\n+        }\n         self.result.macro_refs.push(data);\n     }\n \n-    fn import(&mut self, _: bool, import: Import) {\n+    pub fn import(&mut self, public: bool, import: Import) {\n+        if !public && self.config.pub_only {\n+            return;\n+        }\n         self.result.imports.push(import);\n     }\n \n-    fn dump_ref(&mut self, data: Ref) {\n+    pub fn dump_ref(&mut self, data: Ref) {\n+        if self.config.pub_only {\n+            return;\n+        }\n         self.result.refs.push(data);\n     }\n-    fn dump_def(&mut self, _: bool, mut data: Def) {\n+\n+    pub fn dump_def(&mut self, public: bool, mut data: Def) {\n+        if !public && self.config.pub_only {\n+            return;\n+        }\n         if data.kind == DefKind::Mod && data.span.file_name.to_str().unwrap() != data.value {\n             // If the module is an out-of-line defintion, then we'll make the\n             // defintion the first character in the module's file and turn the\n@@ -107,7 +120,7 @@ impl<'b, O: DumpOutput + 'b> Dump for JsonDumper<O> {\n         self.result.defs.push(data);\n     }\n \n-    fn dump_relation(&mut self, data: Relation) {\n+    pub fn dump_relation(&mut self, data: Relation) {\n         self.result.relations.push(data);\n     }\n }"}, {"sha": "42b20d1ce2cb2b23a8049669663b01f8fd0dd3ef", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 13, "deletions": 54, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/52e9f2035ae396cae4a0e0430763b53a676d7eb9/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e9f2035ae396cae4a0e0430763b53a676d7eb9/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=52e9f2035ae396cae4a0e0430763b53a676d7eb9", "patch": "@@ -31,7 +31,6 @@ extern crate rls_data;\n extern crate rls_span;\n \n \n-mod json_api_dumper;\n mod json_dumper;\n mod dump_visitor;\n #[macro_use]\n@@ -61,13 +60,12 @@ use syntax::print::pprust::{ty_to_string, arg_to_string};\n use syntax::codemap::MacroAttribute;\n use syntax_pos::*;\n \n-pub use json_api_dumper::JsonApiDumper;\n-pub use json_dumper::JsonDumper;\n+use json_dumper::JsonDumper;\n use dump_visitor::DumpVisitor;\n use span_utils::SpanUtils;\n \n use rls_data::{Ref, RefKind, SpanData, MacroRef, Def, DefKind, Relation, RelationKind,\n-               ExternalCrateData, Import, CratePreludeData};\n+               ExternalCrateData};\n use rls_data::config::Config;\n \n \n@@ -88,15 +86,6 @@ pub enum Data {\n     RelationData(Relation),\n }\n \n-pub trait Dump {\n-    fn crate_prelude(&mut self, _: CratePreludeData);\n-    fn macro_use(&mut self, _: MacroRef) {}\n-    fn import(&mut self, _: bool, _: Import);\n-    fn dump_ref(&mut self, _: Ref) {}\n-    fn dump_def(&mut self, _: bool, _: Def);\n-    fn dump_relation(&mut self, data: Relation);\n-}\n-\n macro_rules! option_try(\n     ($e:expr) => (match $e { Some(e) => e, None => return None })\n );\n@@ -872,18 +861,6 @@ impl<'a> Visitor<'a> for PathCollector {\n     }\n }\n \n-#[derive(Clone, Copy, Debug, RustcEncodable)]\n-pub enum Format {\n-    Json,\n-    JsonApi,\n-}\n-\n-impl Format {\n-    fn extension(&self) -> &'static str {\n-        \".json\"\n-    }\n-}\n-\n /// Defines what to do with the results of saving the analysis.\n pub trait SaveHandler {\n     fn save<'l, 'tcx>(&mut self,\n@@ -894,15 +871,13 @@ pub trait SaveHandler {\n \n /// Dump the save-analysis results to a file.\n pub struct DumpHandler<'a> {\n-    format: Format,\n     odir: Option<&'a Path>,\n     cratename: String\n }\n \n impl<'a> DumpHandler<'a> {\n-    pub fn new(format: Format, odir: Option<&'a Path>, cratename: &str) -> DumpHandler<'a> {\n+    pub fn new(odir: Option<&'a Path>, cratename: &str) -> DumpHandler<'a> {\n         DumpHandler {\n-            format: format,\n             odir: odir,\n             cratename: cratename.to_owned()\n         }\n@@ -930,7 +905,7 @@ impl<'a> DumpHandler<'a> {\n                 };\n                 out_name.push_str(&self.cratename);\n                 out_name.push_str(&sess.opts.cg.extra_filename);\n-                out_name.push_str(self.format.extension());\n+                out_name.push_str(\".json\");\n                 root_path.push(&out_name);\n \n                 root_path\n@@ -952,22 +927,12 @@ impl<'a> SaveHandler for DumpHandler<'a> {\n                       save_ctxt: SaveContext<'l, 'tcx>,\n                       krate: &ast::Crate,\n                       cratename: &str) {\n-        macro_rules! dump {\n-            ($new_dumper: expr) => {{\n-                let mut dumper = $new_dumper;\n-                let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n-\n-                visitor.dump_crate_info(cratename, krate);\n-                visit::walk_crate(&mut visitor, krate);\n-            }}\n-        }\n-\n         let output = &mut self.output_file(&save_ctxt);\n+        let mut dumper = JsonDumper::new(output, save_ctxt.config.clone());\n+        let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n \n-        match self.format {\n-            Format::Json => dump!(JsonDumper::new(output)),\n-            Format::JsonApi => dump!(JsonApiDumper::new(output)),\n-        }\n+        visitor.dump_crate_info(cratename, krate);\n+        visit::walk_crate(&mut visitor, krate);\n     }\n }\n \n@@ -981,22 +946,16 @@ impl<'b> SaveHandler for CallbackHandler<'b> {\n                       save_ctxt: SaveContext<'l, 'tcx>,\n                       krate: &ast::Crate,\n                       cratename: &str) {\n-        macro_rules! dump {\n-            ($new_dumper: expr) => {{\n-                let mut dumper = $new_dumper;\n-                let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n-\n-                visitor.dump_crate_info(cratename, krate);\n-                visit::walk_crate(&mut visitor, krate);\n-            }}\n-        }\n-\n         // We're using the JsonDumper here because it has the format of the\n         // save-analysis results that we will pass to the callback. IOW, we are\n         // using the JsonDumper to collect the save-analysis results, but not\n         // actually to dump them to a file. This is all a bit convoluted and\n         // there is certainly a simpler design here trying to get out (FIXME).\n-        dump!(JsonDumper::with_callback(self.callback))\n+        let mut dumper = JsonDumper::with_callback(self.callback, save_ctxt.config.clone());\n+        let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n+\n+        visitor.dump_crate_info(cratename, krate);\n+        visit::walk_crate(&mut visitor, krate);\n     }\n }\n "}]}