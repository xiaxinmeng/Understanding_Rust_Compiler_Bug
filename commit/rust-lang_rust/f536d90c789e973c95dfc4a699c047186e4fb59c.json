{"sha": "f536d90c789e973c95dfc4a699c047186e4fb59c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MzZkOTBjNzg5ZTk3M2M5NWRmYzRhNjk5YzA0NzE4NmU0ZmI1OWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-26T17:23:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-26T17:23:42Z"}, "message": "Auto merge of #38542 - YaLTeR:fastcall-fix, r=pnkfelix\n\nFix fastcall not applying inreg attributes to arguments\n\nFixes https://github.com/rust-lang/rust/issues/18086", "tree": {"sha": "43245decb9f2d19a110b9efe583edaca8c3283f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43245decb9f2d19a110b9efe583edaca8c3283f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f536d90c789e973c95dfc4a699c047186e4fb59c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f536d90c789e973c95dfc4a699c047186e4fb59c", "html_url": "https://github.com/rust-lang/rust/commit/f536d90c789e973c95dfc4a699c047186e4fb59c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f536d90c789e973c95dfc4a699c047186e4fb59c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65c043fdd291a9e683b834c800204ec68c9988f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/65c043fdd291a9e683b834c800204ec68c9988f1", "html_url": "https://github.com/rust-lang/rust/commit/65c043fdd291a9e683b834c800204ec68c9988f1"}, {"sha": "5e2cea9a4e270544d48ee7634ef3a7b6f67163a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e2cea9a4e270544d48ee7634ef3a7b6f67163a4", "html_url": "https://github.com/rust-lang/rust/commit/5e2cea9a4e270544d48ee7634ef3a7b6f67163a4"}], "stats": {"total": 153, "additions": 149, "deletions": 4}, "files": [{"sha": "f3dbac7ce682eed8078ecd0fab5c9437f3693b93", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f536d90c789e973c95dfc4a699c047186e4fb59c/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f536d90c789e973c95dfc4a699c047186e4fb59c/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=f536d90c789e973c95dfc4a699c047186e4fb59c", "patch": "@@ -117,6 +117,7 @@ pub enum Attribute {\n     StructRet       = 16,\n     UWTable         = 17,\n     ZExt            = 18,\n+    InReg           = 19,\n }\n \n /// LLVMIntPredicate"}, {"sha": "f0f2511899066d45084c9cc19649aae8194c0ed8", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f536d90c789e973c95dfc4a699c047186e4fb59c/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f536d90c789e973c95dfc4a699c047186e4fb59c/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=f536d90c789e973c95dfc4a699c047186e4fb59c", "patch": "@@ -58,7 +58,7 @@ mod attr_impl {\n     // The subset of llvm::Attribute needed for arguments, packed into a bitfield.\n     bitflags! {\n         #[derive(Default, Debug)]\n-        flags ArgAttribute : u8 {\n+        flags ArgAttribute : u16 {\n             const ByVal     = 1 << 0,\n             const NoAlias   = 1 << 1,\n             const NoCapture = 1 << 2,\n@@ -67,6 +67,7 @@ mod attr_impl {\n             const SExt      = 1 << 5,\n             const StructRet = 1 << 6,\n             const ZExt      = 1 << 7,\n+            const InReg     = 1 << 8,\n         }\n     }\n }\n@@ -80,7 +81,7 @@ macro_rules! for_each_kind {\n impl ArgAttribute {\n     fn for_each_kind<F>(&self, mut f: F) where F: FnMut(llvm::Attribute) {\n         for_each_kind!(self, f,\n-                       ByVal, NoAlias, NoCapture, NonNull, ReadOnly, SExt, StructRet, ZExt)\n+                       ByVal, NoAlias, NoCapture, NonNull, ReadOnly, SExt, StructRet, ZExt, InReg)\n     }\n }\n \n@@ -573,7 +574,14 @@ impl FnType {\n         }\n \n         match &ccx.sess().target.target.arch[..] {\n-            \"x86\" => cabi_x86::compute_abi_info(ccx, self),\n+            \"x86\" => {\n+                let flavor = if abi == Abi::Fastcall {\n+                    cabi_x86::Flavor::Fastcall\n+                } else {\n+                    cabi_x86::Flavor::General\n+                };\n+                cabi_x86::compute_abi_info(ccx, self, flavor);\n+            },\n             \"x86_64\" => if abi == Abi::SysV64 {\n                 cabi_x86_64::compute_abi_info(ccx, self);\n             } else if abi == Abi::Win64 || ccx.sess().target.target.options.is_like_windows {"}, {"sha": "fea005f3d77da388194cdaf7a9f4d1734b544dd0", "filename": "src/librustc_trans/cabi_x86.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f536d90c789e973c95dfc4a699c047186e4fb59c/src%2Flibrustc_trans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f536d90c789e973c95dfc4a699c047186e4fb59c/src%2Flibrustc_trans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_x86.rs?ref=f536d90c789e973c95dfc4a699c047186e4fb59c", "patch": "@@ -14,7 +14,13 @@ use type_::Type;\n use super::common::*;\n use super::machine::*;\n \n-pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) {\n+#[derive(PartialEq)]\n+pub enum Flavor {\n+    General,\n+    Fastcall\n+}\n+\n+pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType, flavor: Flavor) {\n     if !fty.ret.is_ignore() {\n         if fty.ret.ty.kind() == Struct {\n             // Returning a structure. Most often, this will use\n@@ -51,4 +57,46 @@ pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) {\n             arg.extend_integer_width_to(32);\n         }\n     }\n+\n+    if flavor == Flavor::Fastcall {\n+        // Mark arguments as InReg like clang does it,\n+        // so our fastcall is compatible with C/C++ fastcall.\n+\n+        // Clang reference: lib/CodeGen/TargetInfo.cpp\n+        // See X86_32ABIInfo::shouldPrimitiveUseInReg(), X86_32ABIInfo::updateFreeRegs()\n+\n+        // IsSoftFloatABI is only set to true on ARM platforms,\n+        // which in turn can't be x86?\n+\n+        let mut free_regs = 2;\n+\n+        for arg in &mut fty.args {\n+            if arg.is_ignore() || arg.is_indirect() { continue; }\n+\n+            if arg.ty.kind() == Float {\n+                continue;\n+            }\n+\n+            let size = llbitsize_of_real(ccx, arg.ty);\n+            let size_in_regs = (size + 31) / 32;\n+\n+            if size_in_regs == 0 {\n+                continue;\n+            }\n+\n+            if size_in_regs > free_regs {\n+                break;\n+            }\n+\n+            free_regs -= size_in_regs;\n+\n+            if size <= 32 && (arg.ty.kind() == Pointer || arg.ty.kind() == Integer) {\n+                arg.attrs.set(ArgAttribute::InReg);\n+            }\n+\n+            if free_regs == 0 {\n+                break;\n+            }\n+        }\n+    }\n }"}, {"sha": "5d5845213e2301a7add72251249e2967416f9309", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f536d90c789e973c95dfc4a699c047186e4fb59c/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f536d90c789e973c95dfc4a699c047186e4fb59c/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=f536d90c789e973c95dfc4a699c047186e4fb59c", "patch": "@@ -150,6 +150,8 @@ from_rust(LLVMRustAttribute kind) {\n       return Attribute::UWTable;\n     case ZExt:\n       return Attribute::ZExt;\n+    case InReg:\n+      return Attribute::InReg;\n     default:\n       llvm_unreachable(\"bad AttributeKind\");\n   }"}, {"sha": "8f7e0e3d918758281100c7ee17bf33dc2299084e", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f536d90c789e973c95dfc4a699c047186e4fb59c/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/f536d90c789e973c95dfc4a699c047186e4fb59c/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=f536d90c789e973c95dfc4a699c047186e4fb59c", "patch": "@@ -98,6 +98,7 @@ enum LLVMRustAttribute {\n     StructRet       = 16,\n     UWTable         = 17,\n     ZExt            = 18,\n+    InReg           = 19,\n };\n \n typedef struct OpaqueRustString *RustStringRef;"}, {"sha": "e1dda4d2be0843295b9efd3ee0ef4beede008cfd", "filename": "src/test/codegen/fastcall-inreg.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/f536d90c789e973c95dfc4a699c047186e4fb59c/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f536d90c789e973c95dfc4a699c047186e4fb59c/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs?ref=f536d90c789e973c95dfc4a699c047186e4fb59c", "patch": "@@ -0,0 +1,85 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks if the \"fastcall\" calling convention marks function arguments\n+// as \"inreg\" like the C/C++ compilers for the platforms.\n+// x86 only.\n+\n+// ignore-aarch64\n+// ignore-aarch64_be\n+// ignore-arm\n+// ignore-armeb\n+// ignore-avr\n+// ignore-bpfel\n+// ignore-bpfeb\n+// ignore-hexagon\n+// ignore-mips\n+// ignore-mipsel\n+// ignore-mips64\n+// ignore-mips64el\n+// ignore-msp430\n+// ignore-powerpc64\n+// ignore-powerpc64le\n+// ignore-powerpc\n+// ignore-r600\n+// ignore-amdgcn\n+// ignore-sparc\n+// ignore-sparcv9\n+// ignore-sparcel\n+// ignore-s390x\n+// ignore-tce\n+// ignore-thumb\n+// ignore-thumbeb\n+// ignore-x86_64 no-ignore-x86\n+// ignore-xcore\n+// ignore-nvptx\n+// ignore-nvptx64\n+// ignore-le32\n+// ignore-le64\n+// ignore-amdil\n+// ignore-amdil64\n+// ignore-hsail\n+// ignore-hsail64\n+// ignore-spir\n+// ignore-spir64\n+// ignore-kalimba\n+// ignore-shave\n+// ignore-wasm32\n+// ignore-wasm64\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+\n+mod tests {\n+    // CHECK: @f1(i32 inreg, i32 inreg, i32)\n+    #[no_mangle]\n+    extern \"fastcall\" fn f1(_: i32, _: i32, _: i32) {}\n+\n+    // CHECK: @f2(i32* inreg, i32* inreg, i32*)\n+    #[no_mangle]\n+    extern \"fastcall\" fn f2(_: *const i32, _: *const i32, _: *const i32) {}\n+\n+    // CHECK: @f3(float, i32 inreg, i32 inreg, i32)\n+    #[no_mangle]\n+    extern \"fastcall\" fn f3(_: f32, _: i32, _: i32, _: i32) {}\n+\n+    // CHECK: @f4(i32 inreg, float, i32 inreg, i32)\n+    #[no_mangle]\n+    extern \"fastcall\" fn f4(_: i32, _: f32, _: i32, _: i32) {}\n+\n+    // CHECK: @f5(i64, i32)\n+    #[no_mangle]\n+    extern \"fastcall\" fn f5(_: i64, _: i32) {}\n+\n+    // CHECK: @f6(i1 inreg zeroext, i32 inreg, i32)\n+    #[no_mangle]\n+    extern \"fastcall\" fn f6(_: bool, _: i32, _: i32) {}\n+}"}]}