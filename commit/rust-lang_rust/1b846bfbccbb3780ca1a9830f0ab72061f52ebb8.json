{"sha": "1b846bfbccbb3780ca1a9830f0ab72061f52ebb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiODQ2YmZiY2NiYjM3ODBjYTFhOTgzMGYwYWI3MjA2MWY1MmViYjg=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-11-28T01:18:29Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-11-28T03:07:14Z"}, "message": "Slightly improve code samples in E0591\n\n* Improve formatting\n* Don't hide `unsafe` block - it's important!", "tree": {"sha": "09aa409fafd81e9b2ce20d016ad8b81dedbf2198", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09aa409fafd81e9b2ce20d016ad8b81dedbf2198"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b846bfbccbb3780ca1a9830f0ab72061f52ebb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b846bfbccbb3780ca1a9830f0ab72061f52ebb8", "html_url": "https://github.com/rust-lang/rust/commit/1b846bfbccbb3780ca1a9830f0ab72061f52ebb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b846bfbccbb3780ca1a9830f0ab72061f52ebb8/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72da5a9d85a522b11e80d0fdd1fd95247d442604", "url": "https://api.github.com/repos/rust-lang/rust/commits/72da5a9d85a522b11e80d0fdd1fd95247d442604", "html_url": "https://github.com/rust-lang/rust/commit/72da5a9d85a522b11e80d0fdd1fd95247d442604"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "f49805d9b4e15fa0e9d90263b1fe019397976afd", "filename": "compiler/rustc_error_codes/src/error_codes/E0591.md", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1b846bfbccbb3780ca1a9830f0ab72061f52ebb8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0591.md", "raw_url": "https://github.com/rust-lang/rust/raw/1b846bfbccbb3780ca1a9830f0ab72061f52ebb8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0591.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0591.md?ref=1b846bfbccbb3780ca1a9830f0ab72061f52ebb8", "patch": "@@ -1,14 +1,20 @@\n Per [RFC 401][rfc401], if you have a function declaration `foo`:\n \n ```\n+struct S;\n+\n // For the purposes of this explanation, all of these\n // different kinds of `fn` declarations are equivalent:\n-struct S;\n+\n fn foo(x: S) { /* ... */ }\n # #[cfg(for_demonstration_only)]\n-extern \"C\" { fn foo(x: S); }\n+extern \"C\" {\n+    fn foo(x: S);\n+}\n # #[cfg(for_demonstration_only)]\n-impl S { fn foo(self) { /* ... */ } }\n+impl S {\n+    fn foo(self) { /* ... */ }\n+}\n ```\n \n the type of `foo` is **not** `fn(S)`, as one might expect.\n@@ -40,10 +46,10 @@ extern \"C\" fn foo(userdata: Box<i32>) {\n \n # fn callback(_: extern \"C\" fn(*mut i32)) {}\n # use std::mem::transmute;\n-# unsafe {\n-let f: extern \"C\" fn(*mut i32) = transmute(foo);\n-callback(f);\n-# }\n+unsafe {\n+    let f: extern \"C\" fn(*mut i32) = transmute(foo);\n+    callback(f);\n+}\n ```\n \n Here, transmute is being used to convert the types of the fn arguments."}, {"sha": "62f1a7f98ea1679bc839d7c6acf619cbff49389f", "filename": "src/test/ui/explain.stdout", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b846bfbccbb3780ca1a9830f0ab72061f52ebb8/src%2Ftest%2Fui%2Fexplain.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1b846bfbccbb3780ca1a9830f0ab72061f52ebb8/src%2Ftest%2Fui%2Fexplain.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplain.stdout?ref=1b846bfbccbb3780ca1a9830f0ab72061f52ebb8", "patch": "@@ -1,12 +1,18 @@\n Per [RFC 401][rfc401], if you have a function declaration `foo`:\n \n ```\n+struct S;\n+\n // For the purposes of this explanation, all of these\n // different kinds of `fn` declarations are equivalent:\n-struct S;\n+\n fn foo(x: S) { /* ... */ }\n-extern \"C\" { fn foo(x: S); }\n-impl S { fn foo(self) { /* ... */ } }\n+extern \"C\" {\n+    fn foo(x: S);\n+}\n+impl S {\n+    fn foo(self) { /* ... */ }\n+}\n ```\n \n the type of `foo` is **not** `fn(S)`, as one might expect.\n@@ -34,8 +40,10 @@ extern \"C\" fn foo(userdata: Box<i32>) {\n     /* ... */\n }\n \n-let f: extern \"C\" fn(*mut i32) = transmute(foo);\n-callback(f);\n+unsafe {\n+    let f: extern \"C\" fn(*mut i32) = transmute(foo);\n+    callback(f);\n+}\n ```\n \n Here, transmute is being used to convert the types of the fn arguments."}]}