{"sha": "7fc3e82aaeb15c067a1eed914032ba21a7763557", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYzNlODJhYWViMTVjMDY3YTFlZWQ5MTQwMzJiYTIxYTc3NjM1NTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-19T00:36:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-19T00:36:33Z"}, "message": "auto merge of #10366 : brson/rust/ignore-patterns, r=alexcrichton\n\nThis replaces `*` with `..` in enums, `_` with `..` in structs, and `.._` with `..` in vectors. It adds obsolete syntax warnings for the old forms but doesn't turn them on yet because we need a snapshot.\r\n\r\n#5830", "tree": {"sha": "461e1e44ffd698e91076683c8beb9be350559b99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/461e1e44ffd698e91076683c8beb9be350559b99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fc3e82aaeb15c067a1eed914032ba21a7763557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fc3e82aaeb15c067a1eed914032ba21a7763557", "html_url": "https://github.com/rust-lang/rust/commit/7fc3e82aaeb15c067a1eed914032ba21a7763557", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fc3e82aaeb15c067a1eed914032ba21a7763557/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9062988610dc28201c552854a2363157fc297fa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9062988610dc28201c552854a2363157fc297fa5", "html_url": "https://github.com/rust-lang/rust/commit/9062988610dc28201c552854a2363157fc297fa5"}, {"sha": "85f107d8cba0560e1edce8ad7158024f2489ca3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/85f107d8cba0560e1edce8ad7158024f2489ca3b", "html_url": "https://github.com/rust-lang/rust/commit/85f107d8cba0560e1edce8ad7158024f2489ca3b"}], "stats": {"total": 162, "additions": 138, "deletions": 24}, "files": [{"sha": "e014f41edcd9a23c63542e1d252ca976cd3868d9", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=7fc3e82aaeb15c067a1eed914032ba21a7763557", "patch": "@@ -97,7 +97,7 @@ impl CFGBuilder {\n             ast::PatEnum(_, None) |\n             ast::PatLit(*) |\n             ast::PatRange(*) |\n-            ast::PatWild => {\n+            ast::PatWild | ast::PatWildMulti => {\n                 self.add_node(pat.id, [pred])\n             }\n "}, {"sha": "3885ebfc4b65275d9024b1cd036ec93123f80a75", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=7fc3e82aaeb15c067a1eed914032ba21a7763557", "patch": "@@ -333,7 +333,7 @@ fn is_useful_specialized(cx: &MatchCheckCtxt,\n fn pat_ctor_id(cx: &MatchCheckCtxt, p: @Pat) -> Option<ctor> {\n     let pat = raw_pat(p);\n     match pat.node {\n-      PatWild => { None }\n+      PatWild | PatWildMulti => { None }\n       PatIdent(_, _, _) | PatEnum(_, _) => {\n         match cx.tcx.def_map.find(&pat.id) {\n           Some(&DefVariant(_, id, _)) => Some(variant(id)),\n@@ -369,7 +369,7 @@ fn pat_ctor_id(cx: &MatchCheckCtxt, p: @Pat) -> Option<ctor> {\n fn is_wild(cx: &MatchCheckCtxt, p: @Pat) -> bool {\n     let pat = raw_pat(p);\n     match pat.node {\n-      PatWild => { true }\n+      PatWild | PatWildMulti => { true }\n       PatIdent(_, _, _) => {\n         match cx.tcx.def_map.find(&pat.id) {\n           Some(&DefVariant(_, _, _)) | Some(&DefStatic(*)) => { false }\n@@ -532,6 +532,10 @@ fn wild() -> @Pat {\n     @Pat {id: 0, node: PatWild, span: dummy_sp()}\n }\n \n+fn wild_multi() -> @Pat {\n+    @Pat {id: 0, node: PatWildMulti, span: dummy_sp()}\n+}\n+\n fn specialize(cx: &MatchCheckCtxt,\n                   r: &[@Pat],\n                   ctor_id: &ctor,\n@@ -546,6 +550,9 @@ fn specialize(cx: &MatchCheckCtxt,\n             PatWild => {\n                 Some(vec::append(vec::from_elem(arity, wild()), r.tail()))\n             }\n+            PatWildMulti => {\n+                Some(vec::append(vec::from_elem(arity, wild_multi()), r.tail()))\n+            }\n             PatIdent(_, _, _) => {\n                 match cx.tcx.def_map.find(&pat_id) {\n                     Some(&DefVariant(_, id, _)) => {\n@@ -849,7 +856,7 @@ fn is_refutable(cx: &MatchCheckCtxt, pat: &Pat) -> bool {\n       PatIdent(_, _, Some(sub)) => {\n         is_refutable(cx, sub)\n       }\n-      PatWild | PatIdent(_, _, None) => { false }\n+      PatWild | PatWildMulti | PatIdent(_, _, None) => { false }\n       PatLit(@Expr {node: ExprLit(@Spanned { node: lit_nil, _}), _}) => {\n         // \"()\"\n         false"}, {"sha": "d8f66419379136abbbfd3b08b1ade87a60353750", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=7fc3e82aaeb15c067a1eed914032ba21a7763557", "patch": "@@ -876,7 +876,7 @@ impl mem_categorization_ctxt {\n         op(cmt, pat);\n \n         match pat.node {\n-          ast::PatWild => {\n+          ast::PatWild | ast::PatWildMulti => {\n             // _\n           }\n "}, {"sha": "878f0876918f0566ede34a6eb276dd275e1422f9", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=7fc3e82aaeb15c067a1eed914032ba21a7763557", "patch": "@@ -65,7 +65,7 @@ pub fn pat_is_binding(dm: resolve::DefMap, pat: @Pat) -> bool {\n pub fn pat_is_binding_or_wild(dm: resolve::DefMap, pat: @Pat) -> bool {\n     match pat.node {\n         PatIdent(*) => pat_is_binding(dm, pat),\n-        PatWild => true,\n+        PatWild | PatWildMulti => true,\n         _ => false\n     }\n }"}, {"sha": "b48260de766a7a44a981fed790f873e7f646b5fc", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=7fc3e82aaeb15c067a1eed914032ba21a7763557", "patch": "@@ -545,7 +545,7 @@ fn enter_default<'r>(bcx: @mut Block,\n     // Collect all of the matches that can match against anything.\n     let matches = do enter_match(bcx, dm, m, col, val) |p| {\n         match p.node {\n-          ast::PatWild | ast::PatTup(_) => Some(~[]),\n+          ast::PatWild | ast::PatWildMulti | ast::PatTup(_) => Some(~[]),\n           ast::PatIdent(_, _, None) if pat_is_binding(dm, p) => Some(~[]),\n           _ => None\n         }\n@@ -2234,7 +2234,7 @@ fn bind_irrefutable_pat(bcx: @mut Block,\n                 pat.span,\n                 format!(\"vector patterns are never irrefutable!\"));\n         }\n-        ast::PatWild | ast::PatLit(_) | ast::PatRange(_, _) => ()\n+        ast::PatWild | ast::PatWildMulti | ast::PatLit(_) | ast::PatRange(_, _) => ()\n     }\n     return bcx;\n }"}, {"sha": "d4b6295331423b42d059aedef3df55cc642f4e4e", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=7fc3e82aaeb15c067a1eed914032ba21a7763557", "patch": "@@ -2429,7 +2429,7 @@ fn populate_scope_map(cx: &mut CrateContext,\n                 }\n             }\n \n-            ast::PatWild => {\n+            ast::PatWild | ast::PatWildMulti => {\n                 scope_map.insert(pat.id, scope_stack.last().scope_metadata);\n             }\n "}, {"sha": "63f439e43e31119f97cc5d261dab6afafed28ad0", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=7fc3e82aaeb15c067a1eed914032ba21a7763557", "patch": "@@ -414,7 +414,7 @@ pub fn check_pat(pcx: &pat_ctxt, pat: @ast::Pat, expected: ty::t) {\n     let tcx = pcx.fcx.ccx.tcx;\n \n     match pat.node {\n-      ast::PatWild => {\n+      ast::PatWild | ast::PatWildMulti => {\n         fcx.write_ty(pat.id, expected);\n       }\n       ast::PatLit(lt) => {"}, {"sha": "c3827037f15eec37793552d467b1e0605db2a9e9", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=7fc3e82aaeb15c067a1eed914032ba21a7763557", "patch": "@@ -1219,7 +1219,7 @@ pub mod guarantor {\n                rcx.fcx.pat_to_str(pat), guarantor);\n \n         match pat.node {\n-            ast::PatWild => {}\n+            ast::PatWild | ast::PatWildMulti => {}\n             ast::PatIdent(ast::BindByRef(_), _, opt_p) => {\n                 link(rcx, pat.span, pat.id, guarantor);\n "}, {"sha": "f0f2ca2db3350337be552335be8d76c90324f623", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=7fc3e82aaeb15c067a1eed914032ba21a7763557", "patch": "@@ -1137,6 +1137,7 @@ fn name_from_pat(p: &ast::Pat) -> ~str {\n     use syntax::ast::*;\n     match p.node {\n         PatWild => ~\"_\",\n+        PatWildMulti => ~\"..\",\n         PatIdent(_, ref p, _) => path_to_str(p),\n         PatEnum(ref p, _) => path_to_str(p),\n         PatStruct(*) => fail!(\"tried to get argument name from pat_struct, \\"}, {"sha": "79cf52d8da79d228a70c38b7c8a7c694bb43e97a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7fc3e82aaeb15c067a1eed914032ba21a7763557", "patch": "@@ -337,6 +337,7 @@ pub enum BindingMode {\n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n pub enum Pat_ {\n     PatWild,\n+    PatWildMulti,\n     // A pat_ident may either be a new bound variable,\n     // or a nullary enum (in which case the second field\n     // is None)."}, {"sha": "fb50a890c43f5efbb1619d974603706d1fa2c719", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=7fc3e82aaeb15c067a1eed914032ba21a7763557", "patch": "@@ -657,7 +657,7 @@ pub fn walk_pat(pat: @Pat, it: &fn(@Pat) -> bool) -> bool {\n                 slice.iter().advance(|&p| walk_pat(p, |p| it(p))) &&\n                 after.iter().advance(|&p| walk_pat(p, |p| it(p)))\n         }\n-        PatWild | PatLit(_) | PatRange(_, _) | PatIdent(_, _, _) |\n+        PatWild | PatWildMulti | PatLit(_) | PatRange(_, _) | PatIdent(_, _, _) |\n         PatEnum(_, _) => {\n             true\n         }"}, {"sha": "bd99f58cde9d14c06988fdd5392fae664da9e4af", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=7fc3e82aaeb15c067a1eed914032ba21a7763557", "patch": "@@ -174,6 +174,7 @@ pub trait ast_fold {\n     fn fold_pat(&self, p: @Pat) -> @Pat {\n         let node = match p.node {\n             PatWild => PatWild,\n+            PatWildMulti => PatWildMulti,\n             PatIdent(binding_mode, ref pth, ref sub) => {\n                 PatIdent(binding_mode,\n                          self.fold_path(pth),"}, {"sha": "2af6d141aa17829b442e00e5b4ac7d5e0a030b51", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=7fc3e82aaeb15c067a1eed914032ba21a7763557", "patch": "@@ -39,6 +39,9 @@ pub enum ObsoleteSyntax {\n     ObsoleteConstPointer,\n     ObsoleteEmptyImpl,\n     ObsoleteLoopAsContinue,\n+    ObsoleteEnumWildcard,\n+    ObsoleteStructWildcard,\n+    ObsoleteVecDotDotWildcard\n }\n \n impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -113,6 +116,18 @@ impl ParserObsoleteMethods for Parser {\n                 \"`loop` is now only used for loops and `continue` is used for \\\n                  skipping iterations\"\n             ),\n+            ObsoleteEnumWildcard => (\n+                \"enum wildcard\",\n+                \"use `..` instead of `*` for matching all enum fields\"\n+            ),\n+            ObsoleteStructWildcard => (\n+                \"struct wildcard\",\n+                \"use `..` instead of `_` for matching trailing struct fields\"\n+            ),\n+            ObsoleteVecDotDotWildcard => (\n+                \"vec slice wildcard\",\n+                \"use `..` instead of `.._` for matching slices\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "1b2e18f3ca5142558db96f20a50a751c29995b95", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7fc3e82aaeb15c067a1eed914032ba21a7763557", "patch": "@@ -43,7 +43,7 @@ use ast::{MutImmutable, MutMutable, mac_, mac_invoc_tt, matcher, match_nontermin\n use ast::{match_seq, match_tok, method, mt, BiMul, Mutability};\n use ast::{named_field, UnNeg, noreturn, UnNot, Pat, PatBox, PatEnum};\n use ast::{PatIdent, PatLit, PatRange, PatRegion, PatStruct};\n-use ast::{PatTup, PatUniq, PatWild, private};\n+use ast::{PatTup, PatUniq, PatWild, PatWildMulti, private};\n use ast::{BiRem, required};\n use ast::{ret_style, return_val, BiShl, BiShr, Stmt, StmtDecl};\n use ast::{StmtExpr, StmtSemi, StmtMac, struct_def, struct_field};\n@@ -2724,17 +2724,35 @@ impl Parser {\n                 }\n             }\n \n-            let subpat = self.parse_pat();\n             if is_slice {\n-                match subpat {\n-                    @ast::Pat { node: PatWild, _ } => (),\n-                    @ast::Pat { node: PatIdent(_, _, _), _ } => (),\n-                    @ast::Pat { span, _ } => self.span_fatal(\n-                        span, \"expected an identifier or `_`\"\n-                    )\n+                if *self.token == token::COMMA || *self.token == token::RBRACKET {\n+                    slice = Some(@ast::Pat {\n+                        id: ast::DUMMY_NODE_ID,\n+                        node: PatWildMulti,\n+                        span: *self.span,\n+                    })\n+                } else {\n+                    let subpat = self.parse_pat();\n+                    match subpat {\n+                        @ast::Pat { id, node: PatWild, span } => {\n+                            // NOTE #5830 activate after snapshot\n+                            // self.obsolete(*self.span, ObsoleteVecDotDotWildcard);\n+                            slice = Some(@ast::Pat {\n+                                id: id,\n+                                node: PatWildMulti,\n+                                span: span\n+                            })\n+                        },\n+                        @ast::Pat { node: PatIdent(_, _, _), _ } => {\n+                            slice = Some(subpat);\n+                        }\n+                        @ast::Pat { span, _ } => self.span_fatal(\n+                            span, \"expected an identifier or nothing\"\n+                        )\n+                    }\n                 }\n-                slice = Some(subpat);\n             } else {\n+                let subpat = self.parse_pat();\n                 if before_slice {\n                     before.push(subpat);\n                 } else {\n@@ -2755,7 +2773,12 @@ impl Parser {\n             if first { first = false; }\n             else { self.expect(&token::COMMA); }\n \n+            etc = *self.token == token::UNDERSCORE || *self.token == token::DOTDOT;\n             if *self.token == token::UNDERSCORE {\n+                // NOTE #5830 activate after snapshot\n+                // self.obsolete(*self.span, ObsoleteStructWildcard);\n+            }\n+            if etc {\n                 self.bump();\n                 if *self.token != token::RBRACE {\n                     self.fatal(\n@@ -3016,9 +3039,19 @@ impl Parser {\n                                     _ => false,\n                                 }\n                             };\n-                            if is_star {\n+                            let is_dotdot = do self.look_ahead(1) |t| {\n+                                match *t {\n+                                    token::DOTDOT => true,\n+                                    _ => false,\n+                                }\n+                            };\n+                            if is_star | is_dotdot {\n                                 // This is a \"top constructor only\" pat\n                                 self.bump();\n+                                if is_star {\n+                                    // NOTE #5830 activate after snapshot\n+                                    // self.obsolete(*self.span, ObsoleteEnumWildcard);\n+                                }\n                                 self.bump();\n                                 self.expect(&token::RPAREN);\n                                 pat = PatEnum(enum_path, None);"}, {"sha": "68af73d4a01cabd3499dcbc31a5fe3b7f3e1d46d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=7fc3e82aaeb15c067a1eed914032ba21a7763557", "patch": "@@ -1613,6 +1613,7 @@ pub fn print_pat(s: @ps, pat: &ast::Pat) {\n      is that it doesn't matter */\n     match pat.node {\n       ast::PatWild => word(s.s, \"_\"),\n+      ast::PatWildMulti => word(s.s, \"..\"),\n       ast::PatIdent(binding_mode, ref path, sub) => {\n           match binding_mode {\n               ast::BindByRef(mutbl) => {\n@@ -1701,7 +1702,12 @@ pub fn print_pat(s: @ps, pat: &ast::Pat) {\n         }\n         for &p in slice.iter() {\n             if !before.is_empty() { word_space(s, \",\"); }\n-            word(s.s, \"..\");\n+            match p {\n+                @ast::Pat { node: ast::PatWildMulti, _ } => {\n+                    // this case is handled by print_pat\n+                }\n+                _ => word(s.s, \"..\"),\n+            }\n             print_pat(s, p);\n             if !after.is_empty() { word_space(s, \",\"); }\n         }"}, {"sha": "aa712cae5029a9ef2fdf3b65c62cedd211c88e18", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=7fc3e82aaeb15c067a1eed914032ba21a7763557", "patch": "@@ -375,7 +375,7 @@ pub fn walk_pat<E:Clone, V:Visitor<E>>(visitor: &mut V, pattern: &Pat, env: E) {\n             visitor.visit_expr(lower_bound, env.clone());\n             visitor.visit_expr(upper_bound, env)\n         }\n-        PatWild => (),\n+        PatWild | PatWildMulti => (),\n         PatVec(ref prepattern, ref slice_pattern, ref postpatterns) => {\n             for prepattern in prepattern.iter() {\n                 visitor.visit_pat(*prepattern, env.clone())"}, {"sha": "b3b93c768d1e86af02473a9a7a7cffc4aee8c050", "filename": "src/test/run-pass/ignore-all-the-things.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Ftest%2Frun-pass%2Fignore-all-the-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc3e82aaeb15c067a1eed914032ba21a7763557/src%2Ftest%2Frun-pass%2Fignore-all-the-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fignore-all-the-things.rs?ref=7fc3e82aaeb15c067a1eed914032ba21a7763557", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo(int, int, int, int);\n+struct Bar{a: int, b: int, c: int, d: int}\n+\n+pub fn main() {\n+    let Foo(..) = Foo(5, 5, 5, 5);\n+    let Foo(*) = Foo(5, 5, 5, 5);\n+    let Bar{..} = Bar{a: 5, b: 5, c: 5, d: 5};\n+    let Bar{_} = Bar{a: 5, b: 5, c: 5, d: 5};\n+    //let (..) = (5, 5, 5, 5);\n+    //let Foo(a, b, ..) = Foo(5, 5, 5, 5);\n+    //let Foo(.., d) = Foo(5, 5, 5, 5);\n+    //let (a, b, ..) = (5, 5, 5, 5);\n+    //let (.., c, d) = (5, 5, 5, 5);\n+    let Bar{b: b, ..} = Bar{a: 5, b: 5, c: 5, d: 5};\n+    let Bar{b: b, _} = Bar{a: 5, b: 5, c: 5, d: 5};\n+    match [5, 5, 5, 5] {\n+        [..] => { }\n+    }\n+    match [5, 5, 5, 5] {\n+        [a, ..] => { }\n+    }\n+    match [5, 5, 5, 5] {\n+        [.., b] => { }\n+    }\n+    match [5, 5, 5, 5] {\n+        [a, .., b] => { }\n+    }\n+    match [5, 5, 5] {\n+        [.._] => { }\n+    }\n+    match [5, 5, 5] {\n+        [a, .._] => { }\n+    }\n+    match [5, 5, 5] {\n+        [.._, a] => { }\n+    }\n+    match [5, 5, 5] {\n+        [a, .._, b] => { }\n+    }\n+}"}]}