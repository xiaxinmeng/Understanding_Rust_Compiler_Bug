{"sha": "d3649f8d52c9e6d7b1877f6d6781d31c356b76af", "node_id": "C_kwDOAAsO6NoAKGQzNjQ5ZjhkNTJjOWU2ZDdiMTg3N2Y2ZDY3ODFkMzFjMzU2Yjc2YWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-21T18:36:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-21T18:36:53Z"}, "message": "Rollup merge of #94211 - est31:let_else_destructuring_error, r=matthewjasper\n\nBetter error if the user tries to do assignment ... else\n\nIf the user tries to do assignment ... else, we now issue a more comprehensible error in the parser.\n\ncloses #93995", "tree": {"sha": "e99287990f2919c8df14442313c7487a41e1f5a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e99287990f2919c8df14442313c7487a41e1f5a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3649f8d52c9e6d7b1877f6d6781d31c356b76af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiE9vFCRBK7hj4Ov3rIwAAvPYIAByimfxReCt6LGvGr2xlcYVI\neHGXk92G4tw/3DGtU3LvVfhaDH/KKVLMui3ogPwIeDKlIFNjqLv6ky0ah2qtP9Rd\nc5NlcMF0Wem03BQVEzSUSsmk9x0aV/bWLGaXKpaxKe4rtu2mX6UCILWPiIC81NYc\nUJt6hSPbsyBCagY1CaVmAO8DpLjsfKR0qv6ZWhDqJgBM+4k0Obi7NVLprOr85WVz\nGmYmGAPaRAsJ4hxdUxJ9f6yuL6EMif2PU7f4B1v40nrz1bjZqTLDvIwgEks/xJP8\ntGVtJmee1ea1JyEEMPL5SNtmVgkltY6mB40Hk6ul3QIPxPD48ef+wWMAQNt6vv8=\n=DCcB\n-----END PGP SIGNATURE-----\n", "payload": "tree e99287990f2919c8df14442313c7487a41e1f5a0\nparent f3a1a8cd4fbc0d277cc85a2dd8edf937a3af52e6\nparent 76ea56667703ac06689ff1d6fba5d170fa7392a7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645468613 +0100\ncommitter GitHub <noreply@github.com> 1645468613 +0100\n\nRollup merge of #94211 - est31:let_else_destructuring_error, r=matthewjasper\n\nBetter error if the user tries to do assignment ... else\n\nIf the user tries to do assignment ... else, we now issue a more comprehensible error in the parser.\n\ncloses #93995\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3649f8d52c9e6d7b1877f6d6781d31c356b76af", "html_url": "https://github.com/rust-lang/rust/commit/d3649f8d52c9e6d7b1877f6d6781d31c356b76af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3649f8d52c9e6d7b1877f6d6781d31c356b76af/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3a1a8cd4fbc0d277cc85a2dd8edf937a3af52e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3a1a8cd4fbc0d277cc85a2dd8edf937a3af52e6", "html_url": "https://github.com/rust-lang/rust/commit/f3a1a8cd4fbc0d277cc85a2dd8edf937a3af52e6"}, {"sha": "76ea56667703ac06689ff1d6fba5d170fa7392a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/76ea56667703ac06689ff1d6fba5d170fa7392a7", "html_url": "https://github.com/rust-lang/rust/commit/76ea56667703ac06689ff1d6fba5d170fa7392a7"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "965e6a6ca3f2727c8a8ec50019c6ea94e68ed695", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3649f8d52c9e6d7b1877f6d6781d31c356b76af/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3649f8d52c9e6d7b1877f6d6781d31c356b76af/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=d3649f8d52c9e6d7b1877f6d6781d31c356b76af", "patch": "@@ -103,6 +103,16 @@ impl<'a> Parser<'a> {\n             } else {\n                 self.parse_expr_res(Restrictions::STMT_EXPR, Some(attrs))\n             }?;\n+            if matches!(e.kind, ExprKind::Assign(..)) && self.eat_keyword(kw::Else) {\n+                let bl = self.parse_block()?;\n+                // Destructuring assignment ... else.\n+                // This is not allowed, but point it out in a nice way.\n+                let mut err = self.struct_span_err(\n+                    e.span.to(bl.span),\n+                    \"<assignment> ... else { ... } is not allowed\",\n+                );\n+                err.emit();\n+            }\n             self.mk_stmt(lo.to(e.span), StmtKind::Expr(e))\n         } else {\n             self.error_outer_attrs(&attrs.take_for_recovery());"}, {"sha": "9a09c414ac80fb1790d17cb3ad85400dc2051055", "filename": "src/test/ui/let-else/let-else-destructuring.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d3649f8d52c9e6d7b1877f6d6781d31c356b76af/src%2Ftest%2Fui%2Flet-else%2Flet-else-destructuring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3649f8d52c9e6d7b1877f6d6781d31c356b76af/src%2Ftest%2Fui%2Flet-else%2Flet-else-destructuring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-destructuring.rs?ref=d3649f8d52c9e6d7b1877f6d6781d31c356b76af", "patch": "@@ -0,0 +1,18 @@\n+#![feature(let_else)]\n+#[derive(Debug)]\n+enum Foo {\n+    Done,\n+    Nested(Option<&'static Foo>),\n+}\n+\n+fn walk(mut value: &Foo) {\n+    loop {\n+        println!(\"{:?}\", value);\n+        &Foo::Nested(Some(value)) = value else { break }; //~ ERROR invalid left-hand side of assignment\n+        //~^ERROR <assignment> ... else { ... } is not allowed\n+    }\n+}\n+\n+fn main() {\n+    walk(&Foo::Done);\n+}"}, {"sha": "95efb7116829e6252303834987765942dd2a8167", "filename": "src/test/ui/let-else/let-else-destructuring.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d3649f8d52c9e6d7b1877f6d6781d31c356b76af/src%2Ftest%2Fui%2Flet-else%2Flet-else-destructuring.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3649f8d52c9e6d7b1877f6d6781d31c356b76af/src%2Ftest%2Fui%2Flet-else%2Flet-else-destructuring.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-destructuring.stderr?ref=d3649f8d52c9e6d7b1877f6d6781d31c356b76af", "patch": "@@ -0,0 +1,17 @@\n+error: <assignment> ... else { ... } is not allowed\n+  --> $DIR/let-else-destructuring.rs:11:9\n+   |\n+LL |         &Foo::Nested(Some(value)) = value else { break };\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/let-else-destructuring.rs:11:35\n+   |\n+LL |         &Foo::Nested(Some(value)) = value else { break };\n+   |         ------------------------- ^\n+   |         |\n+   |         cannot assign to this expression\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0070`."}]}