{"sha": "72317dee0ddd80ef224eb3a3cf42861dad156cc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMzE3ZGVlMGRkZDgwZWYyMjRlYjNhM2NmNDI4NjFkYWQxNTZjYzk=", "commit": {"author": {"name": "Jesse Ruderman", "email": "jruderman@gmail.com", "date": "2011-09-16T17:44:58Z"}, "committer": {"name": "Jesse Ruderman", "email": "jruderman@gmail.com", "date": "2011-09-16T17:44:58Z"}, "message": "Fuzzer: update lists of known bugs", "tree": {"sha": "022e74156ed16c4f3a811c5f2ee7367c7f1b4ae8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/022e74156ed16c4f3a811c5f2ee7367c7f1b4ae8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72317dee0ddd80ef224eb3a3cf42861dad156cc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72317dee0ddd80ef224eb3a3cf42861dad156cc9", "html_url": "https://github.com/rust-lang/rust/commit/72317dee0ddd80ef224eb3a3cf42861dad156cc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72317dee0ddd80ef224eb3a3cf42861dad156cc9/comments", "author": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25394950ae562d6d70249745638edbbd14884d2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/25394950ae562d6d70249745638edbbd14884d2c", "html_url": "https://github.com/rust-lang/rust/commit/25394950ae562d6d70249745638edbbd14884d2c"}], "stats": {"total": 114, "additions": 67, "deletions": 47}, "files": [{"sha": "679072abd92d916e56d1d270702c1610119eeb4f", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 67, "deletions": 47, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/72317dee0ddd80ef224eb3a3cf42861dad156cc9/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72317dee0ddd80ef224eb3a3cf42861dad156cc9/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=72317dee0ddd80ef224eb3a3cf42861dad156cc9", "patch": "@@ -39,40 +39,39 @@ fn find_rust_files(&files: [str], path: str) {\n \n fn safe_to_steal_expr(e: @ast::expr) -> bool {\n     alt e.node {\n+      /*\n+      // For compiling (rather than pretty-printing)\n+      // combination of https://github.com/graydon/rust/issues/924 with unwind hang?\n+      ast::expr_ret(option::none.) { false }\n+      */\n \n-      // https://github.com/graydon/rust/issues/890\n-      ast::expr_lit(lit) {\n-        alt lit.node {\n-          ast::lit_str(_) { true }\n-          ast::lit_char(_) { true }\n-          ast::lit_int(_) { false }\n-          ast::lit_uint(_) { true }\n-          ast::lit_mach_int(_, _) { false }\n-          ast::lit_float(_) { false }\n-          ast::lit_mach_float(_, _) { false }\n-          ast::lit_nil. { true }\n-          ast::lit_bool(_) { true }\n-        }\n-      }\n+      // If the fuzzer moves a block-ending-in-semicolon into callee position,\n+      // the pretty-printer can't preserve this even by parenthesizing!!\n+      // See email to marijn.\n+      ast::expr_if(_, _, _) { false }\n+      ast::expr_block(_) { false }\n+      ast::expr_alt(_, _) { false }\n+      ast::expr_for(_, _, _) { false }\n+      ast::expr_for_each(_, _, _) { false }\n+      ast::expr_while(_, _) { false }\n \n-      // https://github.com/graydon/rust/issues/890\n+      // https://github.com/graydon/rust/issues/929\n       ast::expr_cast(_, _) { false }\n       ast::expr_assert(_) { false }\n       ast::expr_binary(_, _, _) { false }\n       ast::expr_assign(_, _) { false }\n       ast::expr_assign_op(_, _, _) { false }\n \n-      // https://github.com/graydon/rust/issues/764\n       ast::expr_fail(option::none.) { false }\n       ast::expr_ret(option::none.) { false }\n       ast::expr_put(option::none.) { false }\n \n-      // These prefix-operator keywords are not being parenthesized when in callee positions.\n-      // https://github.com/graydon/rust/issues/891\n-      ast::expr_ret(_) { false }\n-      ast::expr_put(_) { false }\n+      // https://github.com/graydon/rust/issues/927\n+      //ast::expr_assert(_) { false }\n       ast::expr_check(_, _) { false }\n-      ast::expr_log(_, _) { false }\n+\n+      // https://github.com/graydon/rust/issues/928\n+      //ast::expr_cast(_, _) { false }\n \n       _ { true }\n     }\n@@ -138,7 +137,12 @@ fn replace_expr_in_crate(crate: ast::crate, i: uint, newexpr: ast::expr) ->\n         *j_ += 1u;\n         if i_ + 1u == *j_ && safe_to_replace_expr(original) {\n             newexpr_\n-        } else { fold::noop_fold_expr(original, fld) }\n+        } else {\n+            alt(original) {\n+              ast::expr_fail(_) { original /* Don't replace inside fail: https://github.com/graydon/rust/issues/930 */ }\n+              _ { fold::noop_fold_expr(original, fld) }\n+            }\n+        }\n     }\n     let afp =\n         {fold_expr: bind fold_expr_rep(j, i, newexpr.node, _, _)\n@@ -253,50 +257,65 @@ fn check_whole_compiler(code: str, suggested_filename: str) {\n }\n \n fn check_whole_compiler_inner(filename: str) -> compile_result {\n+    /*\n     let p = std::run::program_output(\n             \"/Users/jruderman/code/rust/build/stage1/rustc\",\n             [\"-c\", filename]);\n+    */\n+\n+    let p = std::run::program_output(\"bash\", [\"-c\", \"DYLD_LIBRARY_PATH=/Users/jruderman/code/rust/build/stage0/lib:/Users/jruderman/code/rust/build/rustllvm/ /Users/jruderman/code/rust/build/stage1/rustc -c \" + filename]);\n \n     //log_err #fmt(\"Status: %d\", p.status);\n     if p.err != \"\" {\n         if contains(p.err, \"May only branch on boolean predicates\") {\n             known_bug(\"https://github.com/graydon/rust/issues/892\")\n         } else if contains(p.err, \"(S->getType()->isPointerTy() && \\\"Invalid cast\\\")\") {\n             known_bug(\"https://github.com/graydon/rust/issues/895\")\n-        } else if contains(p.err, \"Initializer type must match GlobalVariable type\") {\n-            known_bug(\"https://github.com/graydon/rust/issues/899\")\n         } else if contains(p.err, \"(castIsValid(op, S, Ty) && \\\"Invalid cast!\\\"), function Create\") {\n             known_bug(\"https://github.com/graydon/rust/issues/901\")\n         } else {\n             log_err \"Stderr: \" + p.err;\n             failed(\"Unfamiliar error message\")\n         }\n-    } else if p.status == 256 {\n-        if contains(p.out, \"Out of stack space, sorry\") {\n-            known_bug(\"Recursive types - https://github.com/graydon/rust/issues/742\")\n-        } else {\n-            log_err \"Stdout: \" + p.out;\n-            failed(\"Unfamiliar sudden exit\")\n-        }\n-    } else if p.status == 6 {\n-        if contains(p.out, \"get_id_ident: can't find item in ext_map\") {\n-            known_bug(\"https://github.com/graydon/rust/issues/876\")\n-        } else if contains(p.out, \"Assertion !cx.terminated failed\") {\n-            known_bug(\"https://github.com/graydon/rust/issues/893 or https://github.com/graydon/rust/issues/894\")\n-        } else if !contains(p.out, \"error:\") {\n-            log_err \"Stdout: \" + p.out;\n-            failed(\"Rejected the input program without a span-error explanation\")\n-        } else {\n-            passed(\"Rejected the input program cleanly\")\n-        }\n-    } else if p.status == 11 {\n-        failed(\"Crashed!?\")\n     } else if p.status == 0 {\n         passed(\"Accepted the input program\")\n+    } else if contains(p.out, \"Out of stack space, sorry\") {\n+        known_bug(\"Recursive types - https://github.com/graydon/rust/issues/742\")\n+    } else if contains(p.out, \"Assertion !cx.terminated failed\") {\n+        known_bug(\"https://github.com/graydon/rust/issues/893 or https://github.com/graydon/rust/issues/894\")\n+//  } else if contains(p.out, \"upcall fail 'non-exhaustive match failure', ../src/comp/middle/trans.rs\") {\n+    } else if contains(p.out, \"trans_rec expected a rec but found _|_\") {\n+        known_bug(\"https://github.com/graydon/rust/issues/924\")\n+    } else if contains(p.out, \"Assertion failed: (alloc->magic == MAGIC)\") {\n+        known_bug(\"https://github.com/graydon/rust/issues/934\")\n+    } else if contains(p.out, \"Assertion failed: (S->getType()->isPointerTy() && \\\"Invalid cast\\\")\") {\n+        known_bug(\"https://github.com/graydon/rust/issues/935\")\n+    } else if contains(p.out, \"Ptr must be a pointer to Val type\") {\n+        known_bug(\"https://github.com/graydon/rust/issues/897\")\n+    } else if contains(p.out, \"Assertion\") && contains(p.out, \"failed\") {\n+        log_err \"Stdout: \" + p.out;\n+        failed(\"Looks like an llvm assertion failure\")\n+\n+    } else if contains(p.out, \"internal compiler error fail called with unsupported type _|_\") {\n+        known_bug(\"https://github.com/graydon/rust/issues/930\")\n+    } else if contains(p.out, \"internal compiler error Translating unsupported cast\") {\n+        known_bug(\"https://github.com/graydon/rust/issues/932\")\n+    } else if contains(p.out, \"internal compiler error sequence_element_type called on non-sequence value\") {\n+        known_bug(\"https://github.com/graydon/rust/issues/931\")\n+    } else if contains(p.out, \"internal compiler error bit_num: asked for pred constraint, found an init constraint\") {\n+        known_bug(\"https://github.com/graydon/rust/issues/933\")\n+    } else if contains(p.out, \"internal compiler error unimplemented\") {\n+        known_bug(\"Something unimplemented\")\n+    } else if contains(p.out, \"internal compiler error\") {\n+        log_err \"Stdout: \" + p.out;\n+        failed(\"internal compiler error\")\n+\n+    } else if contains(p.out, \"error:\") {\n+        passed(\"Rejected the input program cleanly\")\n     } else {\n         log_err p.status;\n         log_err \"!Stdout: \" + p.out;\n-        failed(\"Unfamiliar status code\")\n+        failed(\"What happened?\")\n     }\n }\n \n@@ -317,7 +336,7 @@ fn content_is_dangerous_to_modify(code: str) -> bool {\n     let dangerous_patterns =\n         [\"#macro\", // not safe to steal things inside of it, because they have a special syntax\n          \"#\",      // strange representation of the arguments to #fmt, for example\n-         \"tag\",    // typeck hang: https://github.com/graydon/rust/issues/900\n+         \"tag\",    // typeck hang: https://github.com/graydon/rust/issues/742 (from dup #900)\n          \" be \"];  // don't want to replace its child with a non-call: \"Non-call expression in tail call\"\n \n     for p: str in dangerous_patterns { if contains(code, p) { ret true; } }\n@@ -337,7 +356,7 @@ fn content_is_confusing(code: str) -> bool {\n }\n \n fn file_is_confusing(filename: str) -> bool {\n-    let confusing_files = [];\n+    let confusing_files = [\"expr-alt.rs\"]; // pretty-printing \"(a = b) = c\" vs \"a = b = c\" and wrapping\n \n     for f in confusing_files { if contains(filename, f) { ret true; } }\n \n@@ -418,6 +437,7 @@ fn main(args: [str]) {\n     find_rust_files(files, root);\n     check_convergence(files);\n     check_variants(files);\n+\n     log_err \"Fuzzer done\";\n }\n "}]}