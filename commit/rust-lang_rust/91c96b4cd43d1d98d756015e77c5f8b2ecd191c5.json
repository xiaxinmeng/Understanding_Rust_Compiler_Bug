{"sha": "91c96b4cd43d1d98d756015e77c5f8b2ecd191c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYzk2YjRjZDQzZDFkOThkNzU2MDE1ZTc3YzVmOGIyZWNkMTkxYzU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-01-22T18:32:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-22T18:32:06Z"}, "message": "Merge pull request #600 from solson/rustup\n\nExpose `AllocId`s for priroda", "tree": {"sha": "ce2ab37c142b60901ca1f773d5a9e862ccbc4c7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce2ab37c142b60901ca1f773d5a9e862ccbc4c7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91c96b4cd43d1d98d756015e77c5f8b2ecd191c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcR2GmCRBK7hj4Ov3rIwAAdHIIAIp8LhUr9iQ6s1SCMeDVvqSE\nVl/shS7iBO0uDafh26b6ao/LwhpzcQktifsP7MmvmhTDTxA7I5dG4QasTDIQ7FFK\nKcT+xTj30WWUxDURik5gefCgIRqoDZmgu4YgUgHHgpAowVQOXRyB9UYL9bmWxsrE\n7rqOBa55BGN4kYtO/Mc6d5jm2KyYY5gRHtBGGPtUQq2zBVL1zHNxpO42ThHNmaGH\nsgyATABcmMLA+/Zo5zhpTaghuBBb+47dEDtxNGVTVk7T2bRLsFc6SvWov73egH7o\noMxS2uvf/8gzoG+TQmLvDdI9Yf8Uz+HxdCngubuhkUQUBpGgTDTaJmwTQInX03M=\n=tiC/\n-----END PGP SIGNATURE-----\n", "payload": "tree ce2ab37c142b60901ca1f773d5a9e862ccbc4c7a\nparent 1cd85d2a2767b37f9869b719a74e3da99087c31a\nparent 9f06cdc87a450b486a5bfea209acf958de92dfc8\nauthor Ralf Jung <post@ralfj.de> 1548181926 +0100\ncommitter GitHub <noreply@github.com> 1548181926 +0100\n\nMerge pull request #600 from solson/rustup\n\nExpose `AllocId`s for priroda"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91c96b4cd43d1d98d756015e77c5f8b2ecd191c5", "html_url": "https://github.com/rust-lang/rust/commit/91c96b4cd43d1d98d756015e77c5f8b2ecd191c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91c96b4cd43d1d98d756015e77c5f8b2ecd191c5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cd85d2a2767b37f9869b719a74e3da99087c31a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cd85d2a2767b37f9869b719a74e3da99087c31a", "html_url": "https://github.com/rust-lang/rust/commit/1cd85d2a2767b37f9869b719a74e3da99087c31a"}, {"sha": "9f06cdc87a450b486a5bfea209acf958de92dfc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f06cdc87a450b486a5bfea209acf958de92dfc8", "html_url": "https://github.com/rust-lang/rust/commit/9f06cdc87a450b486a5bfea209acf958de92dfc8"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "ec1a5fdb4288f6166722f65031cd79b7e6eb699f", "filename": "src/mono_hash_map.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91c96b4cd43d1d98d756015e77c5f8b2ecd191c5/src%2Fmono_hash_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91c96b4cd43d1d98d756015e77c5f8b2ecd191c5/src%2Fmono_hash_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmono_hash_map.rs?ref=91c96b4cd43d1d98d756015e77c5f8b2ecd191c5", "patch": "@@ -18,8 +18,16 @@ use crate::AllocMap;\n pub struct MonoHashMap<K: Hash + Eq, V>(RefCell<FxHashMap<K, Box<V>>>);\n \n impl<K: Hash + Eq, V> MonoHashMap<K, V> {\n-    pub fn values<T>(&self, f: impl FnOnce(&mut dyn Iterator<Item=&V>) -> T) -> T {\n-        f(&mut self.0.borrow().values().map(|v| &**v))\n+    /// This function exists for priroda to be able to iterate over all evaluator memory\n+    ///\n+    /// The function is somewhat roundabout with the closure argument because internally the\n+    /// `MonoHashMap` uses a `RefCell`. When iterating over the `HashMap` inside the `RefCell`,\n+    /// we need to keep a borrow to the `HashMap` inside the iterator. The borrow is only alive\n+    /// as long as the `Ref` returned by `RefCell::borrow()` is alive. So we can't return the\n+    /// iterator, as that would drop the `Ref`. We can't return both, as it's not possible in Rust\n+    /// to have a struct/tuple with a field that refers to another field.\n+    pub fn iter<T>(&self, f: impl FnOnce(&mut dyn Iterator<Item=(&K, &V)>) -> T) -> T {\n+        f(&mut self.0.borrow().iter().map(|(k, v)| (k, &**v)))\n     }\n }\n "}]}