{"sha": "3269a4043ce3ece87708fc447b37b330661a5ed0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNjlhNDA0M2NlM2VjZTg3NzA4ZmM0NDdiMzdiMzMwNjYxYTVlZDA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-03-03T04:06:08Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-03-06T00:47:52Z"}, "message": "rewrite vec to be more unsafe, more inlined", "tree": {"sha": "69203e69fa11d00f5b8e787902072880b0ac1ec6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69203e69fa11d00f5b8e787902072880b0ac1ec6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3269a4043ce3ece87708fc447b37b330661a5ed0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3269a4043ce3ece87708fc447b37b330661a5ed0", "html_url": "https://github.com/rust-lang/rust/commit/3269a4043ce3ece87708fc447b37b330661a5ed0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3269a4043ce3ece87708fc447b37b330661a5ed0/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0416a946b7fa256d103beab6767a88759a514f46", "url": "https://api.github.com/repos/rust-lang/rust/commits/0416a946b7fa256d103beab6767a88759a514f46", "html_url": "https://github.com/rust-lang/rust/commit/0416a946b7fa256d103beab6767a88759a514f46"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "d6dda41c3a45500116dd4a3d5acddfa1b66dbbc5", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3269a4043ce3ece87708fc447b37b330661a5ed0/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3269a4043ce3ece87708fc447b37b330661a5ed0/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=3269a4043ce3ece87708fc447b37b330661a5ed0", "patch": "@@ -32,6 +32,7 @@ Function: offset\n \n Calculate the offset from a pointer\n */\n+#[inline(always)]\n fn offset<T>(ptr: *T, count: uint) -> *T {\n     ret rusti::ptr_offset(ptr, count);\n }"}, {"sha": "d337746f532756f8b94e394a61a3ff3f88f10efc", "filename": "src/libcore/uint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3269a4043ce3ece87708fc447b37b330661a5ed0/src%2Flibcore%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3269a4043ce3ece87708fc447b37b330661a5ed0/src%2Flibcore%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint.rs?ref=3269a4043ce3ece87708fc447b37b330661a5ed0", "patch": "@@ -131,6 +131,7 @@ Function: range\n \n Iterate over the range [`lo`..`hi`)\n */\n+#[inline(always)]\n fn range(lo: uint, hi: uint, it: fn(uint)) {\n     let i = lo;\n     while i < hi { it(i); i += 1u; }"}, {"sha": "0baf5a3475123c74c6feea7124f2dd2950cfe1d8", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3269a4043ce3ece87708fc447b37b330661a5ed0/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3269a4043ce3ece87708fc447b37b330661a5ed0/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=3269a4043ce3ece87708fc447b37b330661a5ed0", "patch": "@@ -78,6 +78,7 @@ Function: len\n \n Returns the length of a vector\n */\n+#[inline(always)]\n pure fn len<T>(v: [const T]) -> uint { unchecked { rusti::vec_len(v) } }\n \n /*\n@@ -885,9 +886,17 @@ Iterates over vector `v` and, for each element, calls function `f` with the\n element's value.\n \n */\n-#[inline]\n+#[inline(always)]\n fn iter<T>(v: [const T], f: fn(T)) {\n-    iteri(v) { |_i, v| f(v) }\n+    unsafe {\n+        let mut n = vec::len(v);\n+        let mut p = unsafe::to_ptr(v);\n+        while n > 0u {\n+            f(*p);\n+            p = ptr::offset(p, 1u);\n+            n -= 1u;\n+        }\n+    }\n }\n \n /*\n@@ -896,6 +905,7 @@ Function: iter2\n Iterates over two vectors in parallel\n \n */\n+#[inline]\n fn iter2<U, T>(v: [ U], v2: [const T], f: fn(U, T)) {\n     let i = 0;\n     for elt in v { f(elt, v2[i]); i += 1; }\n@@ -909,6 +919,7 @@ Iterates over a vector's elements and indexes\n Iterates over vector `v` and, for each element, calls function `f` with the\n element's value and index.\n */\n+#[inline(always)]\n fn iteri<T>(v: [const T], f: fn(uint, T)) {\n     let i = 0u, l = len(v);\n     while i < l { f(i, v[i]); i += 1u; }\n@@ -1001,6 +1012,7 @@ fn as_mut_buf<E,T>(v: [mutable E], f: fn(*mutable E) -> T) -> T unsafe {\n }\n \n impl vec_len<T> for [T] {\n+    #[inline(always)]\n     fn len() -> uint { len(self) }\n }\n \n@@ -1020,6 +1032,7 @@ mod unsafe {\n     ptr - An unsafe pointer to a buffer of `T`\n     elts - The number of elements in the buffer\n     */\n+    #[inline(always)]\n     unsafe fn from_buf<T>(ptr: *T, elts: uint) -> [T] {\n         ret rustrt::vec_from_buf_shared(sys::get_type_desc::<T>(),\n                                         ptr, elts);\n@@ -1034,6 +1047,7 @@ mod unsafe {\n     modifing its buffers, so it is up to the caller to ensure that\n     the vector is actually the specified size.\n     */\n+    #[inline(always)]\n     unsafe fn set_len<T>(&v: [const T], new_len: uint) {\n         let repr: **vec_repr = ::unsafe::reinterpret_cast(addr_of(v));\n         (**repr).fill = new_len * sys::size_of::<T>();\n@@ -1050,6 +1064,7 @@ mod unsafe {\n     Modifying the vector may cause its buffer to be reallocated, which\n     would also make any pointers to it invalid.\n     */\n+    #[inline(always)]\n     unsafe fn to_ptr<T>(v: [const T]) -> *T {\n         let repr: **vec_repr = ::unsafe::reinterpret_cast(addr_of(v));\n         ret ::unsafe::reinterpret_cast(addr_of((**repr).data));"}, {"sha": "dc41753d7820daf608935d58b0807bf4bacc6eb4", "filename": "src/rustc/metadata/csearch.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3269a4043ce3ece87708fc447b37b330661a5ed0/src%2Frustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3269a4043ce3ece87708fc447b37b330661a5ed0/src%2Frustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcsearch.rs?ref=3269a4043ce3ece87708fc447b37b330661a5ed0", "patch": "@@ -72,6 +72,9 @@ fn get_item_path(tcx: ty::ctxt, def: ast::def_id) -> ast_map::path {\n     let cstore = tcx.sess.cstore;\n     let cdata = cstore::get_crate_data(cstore, def.crate);\n     let path = decoder::get_item_path(cdata, def.node);\n+\n+    // FIXME #1920: This path is not always correct if the crate is not linked\n+    // into the root namespace.\n     [ast_map::path_mod(cdata.name)] + path\n }\n "}]}