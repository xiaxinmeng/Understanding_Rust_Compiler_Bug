{"sha": "04a35784df4cf267a8bbce6d5542869ed1a52fcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YTM1Nzg0ZGY0Y2YyNjdhOGJiY2U2ZDU1NDI4NjllZDFhNTJmY2I=", "commit": {"author": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-05-22T20:43:52Z"}, "committer": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-05-22T20:43:52Z"}, "message": "Formatting and remove unused imports", "tree": {"sha": "82a79f605994d9573b15b12f3561a6744045afae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82a79f605994d9573b15b12f3561a6744045afae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04a35784df4cf267a8bbce6d5542869ed1a52fcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04a35784df4cf267a8bbce6d5542869ed1a52fcb", "html_url": "https://github.com/rust-lang/rust/commit/04a35784df4cf267a8bbce6d5542869ed1a52fcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04a35784df4cf267a8bbce6d5542869ed1a52fcb/comments", "author": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cd4eb6dd6d8c733077a6aeea5d2cc0812ded096", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cd4eb6dd6d8c733077a6aeea5d2cc0812ded096", "html_url": "https://github.com/rust-lang/rust/commit/5cd4eb6dd6d8c733077a6aeea5d2cc0812ded096"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "52bc7820e9d1a7d629b84946dc1f5c03f2a3adbc", "filename": "crates/ra_assists/src/assist_context.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/04a35784df4cf267a8bbce6d5542869ed1a52fcb/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a35784df4cf267a8bbce6d5542869ed1a52fcb/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_context.rs?ref=04a35784df4cf267a8bbce6d5542869ed1a52fcb", "patch": "@@ -2,7 +2,7 @@\n \n use algo::find_covering_element;\n use hir::Semantics;\n-use ra_db::{FileId, FileRange, FilePosition};\n+use ra_db::{FileId, FileRange};\n use ra_fmt::{leading_indent, reindent};\n use ra_ide_db::{\n     source_change::{SourceChange, SourceFileEdit},\n@@ -173,16 +173,20 @@ impl Assists {\n         Some(())\n     }\n \n-    fn add_impl_multiple_files(&mut self, label: Assist, f: impl FnOnce(&mut AssistDirector)) -> Option<()> {\n+    fn add_impl_multiple_files(\n+        &mut self,\n+        label: Assist,\n+        f: impl FnOnce(&mut AssistDirector),\n+    ) -> Option<()> {\n         let change_label = label.label.clone();\n         if !self.resolve {\n-            return None\n+            return None;\n         }\n         let mut director = AssistDirector::new(change_label.clone());\n         f(&mut director);\n         let changes = director.finish();\n-        let file_edits: Vec<SourceFileEdit> = changes.into_iter()\n-            .map(|mut change| change.source_file_edits.pop().unwrap()).collect();\n+        let file_edits: Vec<SourceFileEdit> =\n+            changes.into_iter().map(|mut change| change.source_file_edits.pop().unwrap()).collect();\n \n         let source_change = SourceChange {\n             source_file_edits: file_edits,\n@@ -291,16 +295,12 @@ impl AssistBuilder {\n pub(crate) struct AssistDirector {\n     source_changes: Vec<SourceChange>,\n     builders: FxHashMap<FileId, AssistBuilder>,\n-    change_label: String \n-} \n+    change_label: String,\n+}\n \n impl AssistDirector {\n     fn new(change_label: String) -> AssistDirector {\n-        AssistDirector {\n-            source_changes: vec![],\n-            builders: FxHashMap::default(),\n-            change_label\n-        }\n+        AssistDirector { source_changes: vec![], builders: FxHashMap::default(), change_label }\n     }\n \n     pub(crate) fn perform(&mut self, file_id: FileId, f: impl FnOnce(&mut AssistBuilder)) {\n@@ -309,8 +309,10 @@ impl AssistDirector {\n     }\n \n     fn finish(mut self) -> Vec<SourceChange> {\n-        for (file_id, builder) in self.builders.into_iter().collect::<Vec<(FileId, AssistBuilder)>>() {\n-            self.source_changes.push(builder.finish());    \n+        for (file_id, builder) in\n+            self.builders.into_iter().collect::<Vec<(FileId, AssistBuilder)>>()\n+        {\n+            self.source_changes.push(builder.finish());\n         }\n         self.source_changes\n     }"}, {"sha": "57907a503799cb48b8433dbd12df934d08c37d38", "filename": "crates/ra_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/04a35784df4cf267a8bbce6d5542869ed1a52fcb/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a35784df4cf267a8bbce6d5542869ed1a52fcb/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=04a35784df4cf267a8bbce6d5542869ed1a52fcb", "patch": "@@ -16,9 +16,9 @@ use crate::{\n };\n use ast::{ArgListOwner, VisibilityOwner};\n use hir::{EnumVariant, Module, ModuleDef};\n+use ra_db::FileId;\n use ra_fmt::leading_indent;\n use rustc_hash::FxHashSet;\n-use ra_db::FileId;\n \n // Assist extract_struct_from_enum\n //\n@@ -229,7 +229,10 @@ fn list_with_visibility(list: &str) -> String {\n #[cfg(test)]\n mod tests {\n \n-    use crate::{utils::FamousDefs, tests::{check_assist, check_assist_not_applicable}};\n+    use crate::{\n+        tests::{check_assist, check_assist_not_applicable},\n+        utils::FamousDefs,\n+    };\n \n     use super::*;\n "}]}