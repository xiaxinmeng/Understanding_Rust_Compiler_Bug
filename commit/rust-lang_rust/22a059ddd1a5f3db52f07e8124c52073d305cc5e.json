{"sha": "22a059ddd1a5f3db52f07e8124c52073d305cc5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYTA1OWRkZDFhNWYzZGI1MmYwN2U4MTI0YzUyMDczZDMwNWNjNWU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-11T09:45:34Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-12T20:15:59Z"}, "message": "Add view items to the ast map", "tree": {"sha": "0f9221af01eeac7238f363135d2bc6ea0f3038c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f9221af01eeac7238f363135d2bc6ea0f3038c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22a059ddd1a5f3db52f07e8124c52073d305cc5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22a059ddd1a5f3db52f07e8124c52073d305cc5e", "html_url": "https://github.com/rust-lang/rust/commit/22a059ddd1a5f3db52f07e8124c52073d305cc5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22a059ddd1a5f3db52f07e8124c52073d305cc5e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "055cc2ee742e29e389c5bd1da3a9d49ff8ca3724", "url": "https://api.github.com/repos/rust-lang/rust/commits/055cc2ee742e29e389c5bd1da3a9d49ff8ca3724", "html_url": "https://github.com/rust-lang/rust/commit/055cc2ee742e29e389c5bd1da3a9d49ff8ca3724"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "f52e7c0ec94c09122aef2551bffbeff53cdfe72e", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22a059ddd1a5f3db52f07e8124c52073d305cc5e/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a059ddd1a5f3db52f07e8124c52073d305cc5e/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=22a059ddd1a5f3db52f07e8124c52073d305cc5e", "patch": "@@ -274,6 +274,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         ast_map::NodeArg(..) |\n         ast_map::NodeBlock(..) |\n         ast_map::NodePat(..) |\n+        ast_map::NodeViewItem(..) |\n         ast_map::NodeLocal(..) => {\n             ccx.sess().bug(&format!(\"can't monomorphize a {:?}\",\n                                    map_node)[])"}, {"sha": "c2cfa484aff3f2b51d5077ed14717b0a9ac52dfd", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/22a059ddd1a5f3db52f07e8124c52073d305cc5e/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a059ddd1a5f3db52f07e8124c52073d305cc5e/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=22a059ddd1a5f3db52f07e8124c52073d305cc5e", "patch": "@@ -1528,6 +1528,19 @@ pub struct ViewItem {\n     pub span: Span,\n }\n \n+impl ViewItem {\n+    pub fn id(&self) -> NodeId {\n+        match self.node {\n+            ViewItemExternCrate(_, _, id) => id,\n+            ViewItemUse(ref vp) => match vp.node {\n+                ViewPathSimple(_, _, id) => id,\n+                ViewPathGlob(_, id) => id,\n+                ViewPathList(_, _, id) => id,\n+            }\n+        }\n+    }\n+}\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum ViewItem_ {\n     /// Ident: name used to refer to this crate in the code"}, {"sha": "f851e468e8841945160a7a761da476a83153d662", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/22a059ddd1a5f3db52f07e8124c52073d305cc5e/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a059ddd1a5f3db52f07e8124c52073d305cc5e/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=22a059ddd1a5f3db52f07e8124c52073d305cc5e", "patch": "@@ -107,6 +107,7 @@ pub fn path_to_string<PI: Iterator<Item=PathElem>>(path: PI) -> String {\n #[derive(Copy, Show)]\n pub enum Node<'ast> {\n     NodeItem(&'ast Item),\n+    NodeViewItem(&'ast ViewItem),\n     NodeForeignItem(&'ast ForeignItem),\n     NodeTraitItem(&'ast TraitItem),\n     NodeImplItem(&'ast ImplItem),\n@@ -133,6 +134,7 @@ enum MapEntry<'ast> {\n \n     /// All the node types, with a parent ID.\n     EntryItem(NodeId, &'ast Item),\n+    EntryViewItem(NodeId, &'ast ViewItem),\n     EntryForeignItem(NodeId, &'ast ForeignItem),\n     EntryTraitItem(NodeId, &'ast TraitItem),\n     EntryImplItem(NodeId, &'ast ImplItem),\n@@ -167,6 +169,7 @@ impl<'ast> MapEntry<'ast> {\n     fn from_node(p: NodeId, node: Node<'ast>) -> MapEntry<'ast> {\n         match node {\n             NodeItem(n) => EntryItem(p, n),\n+            NodeViewItem(n) => EntryViewItem(p, n),\n             NodeForeignItem(n) => EntryForeignItem(p, n),\n             NodeTraitItem(n) => EntryTraitItem(p, n),\n             NodeImplItem(n) => EntryImplItem(p, n),\n@@ -185,6 +188,7 @@ impl<'ast> MapEntry<'ast> {\n     fn parent(self) -> Option<NodeId> {\n         Some(match self {\n             EntryItem(id, _) => id,\n+            EntryViewItem(id, _) => id,\n             EntryForeignItem(id, _) => id,\n             EntryTraitItem(id, _) => id,\n             EntryImplItem(id, _) => id,\n@@ -204,6 +208,7 @@ impl<'ast> MapEntry<'ast> {\n     fn to_node(self) -> Option<Node<'ast>> {\n         Some(match self {\n             EntryItem(_, n) => NodeItem(n),\n+            EntryViewItem(_, n) => NodeViewItem(n),\n             EntryForeignItem(_, n) => NodeForeignItem(n),\n             EntryTraitItem(_, n) => NodeTraitItem(n),\n             EntryImplItem(_, n) => NodeImplItem(n),\n@@ -336,6 +341,13 @@ impl<'ast> Map<'ast> {\n         }\n     }\n \n+    pub fn expect_view_item(&self, id: NodeId) -> &'ast ViewItem {\n+        match self.find(id) {\n+            Some(NodeViewItem(view_item)) => view_item,\n+            _ => panic!(\"expected view item, found {}\", self.node_to_string(id))\n+        }\n+    }\n+\n     pub fn expect_struct(&self, id: NodeId) -> &'ast StructDef {\n         match self.find(id) {\n             Some(NodeItem(i)) => {\n@@ -521,6 +533,7 @@ impl<'ast> Map<'ast> {\n     pub fn opt_span(&self, id: NodeId) -> Option<Span> {\n         let sp = match self.find(id) {\n             Some(NodeItem(item)) => item.span,\n+            Some(NodeViewItem(item)) => item.span,\n             Some(NodeForeignItem(foreign_item)) => foreign_item.span,\n             Some(NodeTraitItem(trait_method)) => {\n                 match *trait_method {\n@@ -813,6 +826,11 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n         self.parent = parent;\n     }\n \n+    fn visit_view_item(&mut self, item: &'ast ViewItem) {\n+        self.insert(item.id(), NodeViewItem(item));\n+        visit::walk_view_item(self, item);\n+    }\n+\n     fn visit_pat(&mut self, pat: &'ast Pat) {\n         self.insert(pat.id, match pat.node {\n             // Note: this is at least *potentially* a pattern...\n@@ -1018,6 +1036,7 @@ impl<'a> NodePrinter for pprust::State<'a> {\n     fn print_node(&mut self, node: &Node) -> IoResult<()> {\n         match *node {\n             NodeItem(a)        => self.print_item(&*a),\n+            NodeViewItem(a)    => self.print_view_item(&*a),\n             NodeForeignItem(a) => self.print_foreign_item(&*a),\n             NodeTraitItem(a)   => self.print_trait_method(&*a),\n             NodeImplItem(a)    => self.print_impl_item(&*a),\n@@ -1060,6 +1079,9 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n             };\n             format!(\"{} {}{}\", item_str, path_str, id_str)\n         }\n+        Some(NodeViewItem(item)) => {\n+            format!(\"view item {}{}\", pprust::view_item_to_string(&*item), id_str)\n+        }\n         Some(NodeForeignItem(item)) => {\n             let path_str = map.path_to_str_with_ident(id, item.ident);\n             format!(\"foreign item {}{}\", path_str, id_str)"}]}