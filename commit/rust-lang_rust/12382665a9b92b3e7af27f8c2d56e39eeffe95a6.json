{"sha": "12382665a9b92b3e7af27f8c2d56e39eeffe95a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMzgyNjY1YTliOTJiM2U3YWYyN2Y4YzJkNTZlMzllZWZmZTk1YTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-30T07:01:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-30T07:01:21Z"}, "message": "Auto merge of #37401 - eddyb:lazy-2, r=nikomatsakis\n\n[2/n] rustc_metadata: move is_extern_item to trans.\n\n*This is part of a series ([prev](https://github.com/rust-lang/rust/pull/37400) | [next](https://github.com/rust-lang/rust/pull/37402)) of patches designed to rework rustc into an out-of-order on-demand pipeline model for both better feature support (e.g. [MIR-based](https://github.com/solson/miri) early constant evaluation) and incremental execution of compiler passes (e.g. type-checking), with beneficial consequences to IDE support as well.\nIf any motivation is unclear, please ask for additional PR description clarifications or code comments.*\n<hr>\n\nMinor cleanup missed by #36551: `is_extern_item` is one of, if not the only `CrateStore` method who takes a `TyCtxt` but doesn't produce something cached in it, and such methods are going away.", "tree": {"sha": "44bcd6bfc1afc1ddb8a165a70c843ea8f211bed0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44bcd6bfc1afc1ddb8a165a70c843ea8f211bed0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12382665a9b92b3e7af27f8c2d56e39eeffe95a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12382665a9b92b3e7af27f8c2d56e39eeffe95a6", "html_url": "https://github.com/rust-lang/rust/commit/12382665a9b92b3e7af27f8c2d56e39eeffe95a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12382665a9b92b3e7af27f8c2d56e39eeffe95a6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef6f74340762f145f780aeb1b549030bd84c5beb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef6f74340762f145f780aeb1b549030bd84c5beb", "html_url": "https://github.com/rust-lang/rust/commit/ef6f74340762f145f780aeb1b549030bd84c5beb"}, {"sha": "3fb24c18ab669e9ee9f8f4bef8541bd90653ea33", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fb24c18ab669e9ee9f8f4bef8541bd90653ea33", "html_url": "https://github.com/rust-lang/rust/commit/3fb24c18ab669e9ee9f8f4bef8541bd90653ea33"}], "stats": {"total": 50, "additions": 16, "deletions": 34}, "files": [{"sha": "59a5147ed1c1681bc8d66ad765f99f5291845e6e", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12382665a9b92b3e7af27f8c2d56e39eeffe95a6/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12382665a9b92b3e7af27f8c2d56e39eeffe95a6/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=12382665a9b92b3e7af27f8c2d56e39eeffe95a6", "patch": "@@ -164,7 +164,6 @@ pub trait CrateStore<'tcx> {\n     fn is_const_fn(&self, did: DefId) -> bool;\n     fn is_defaulted_trait(&self, did: DefId) -> bool;\n     fn is_default_impl(&self, impl_did: DefId) -> bool;\n-    fn is_extern_item<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, did: DefId) -> bool;\n     fn is_foreign_item(&self, did: DefId) -> bool;\n     fn is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool;\n \n@@ -331,8 +330,6 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn is_const_fn(&self, did: DefId) -> bool { bug!(\"is_const_fn\") }\n     fn is_defaulted_trait(&self, did: DefId) -> bool { bug!(\"is_defaulted_trait\") }\n     fn is_default_impl(&self, impl_did: DefId) -> bool { bug!(\"is_default_impl\") }\n-    fn is_extern_item<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, did: DefId) -> bool\n-        { bug!(\"is_extern_item\") }\n     fn is_foreign_item(&self, did: DefId) -> bool { bug!(\"is_foreign_item\") }\n     fn is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool { false }\n "}, {"sha": "a618c98ff774cda9477a684a7c1577c31c8ad2a5", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/12382665a9b92b3e7af27f8c2d56e39eeffe95a6/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12382665a9b92b3e7af27f8c2d56e39eeffe95a6/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=12382665a9b92b3e7af27f8c2d56e39eeffe95a6", "patch": "@@ -206,11 +206,6 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(impl_did.krate).is_default_impl(impl_did.index)\n     }\n \n-    fn is_extern_item<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, did: DefId) -> bool {\n-        self.dep_graph.read(DepNode::MetaData(did));\n-        self.get_crate_data(did.krate).is_extern_item(did.index, tcx)\n-    }\n-\n     fn is_foreign_item(&self, did: DefId) -> bool {\n         self.get_crate_data(did.krate).is_foreign_item(did.index)\n     }"}, {"sha": "ccd497860de8a19f2e1c442407d221fba26fd588", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/12382665a9b92b3e7af27f8c2d56e39eeffe95a6/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12382665a9b92b3e7af27f8c2d56e39eeffe95a6/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=12382665a9b92b3e7af27f8c2d56e39eeffe95a6", "patch": "@@ -1009,30 +1009,6 @@ impl<'a, 'tcx> CrateMetadata {\n         constness == hir::Constness::Const\n     }\n \n-    pub fn is_extern_item(&self, id: DefIndex, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> bool {\n-        let item = match self.maybe_entry(id) {\n-            Some(item) => item.decode(self),\n-            None => return false,\n-        };\n-        let applicable = match item.kind {\n-            EntryKind::ImmStatic |\n-            EntryKind::MutStatic |\n-            EntryKind::ForeignImmStatic |\n-            EntryKind::ForeignMutStatic => true,\n-\n-            EntryKind::Fn(_) |\n-            EntryKind::ForeignFn(_) => self.get_generics(id, tcx).types.is_empty(),\n-\n-            _ => false,\n-        };\n-\n-        if applicable {\n-            attr::contains_extern_indicator(tcx.sess.diagnostic(), &self.get_attributes(&item))\n-        } else {\n-            false\n-        }\n-    }\n-\n     pub fn is_foreign_item(&self, id: DefIndex) -> bool {\n         match self.entry(id).kind {\n             EntryKind::ForeignImmStatic |"}, {"sha": "54dff8c8bb3cf6549ec8c4bbcea447298b53ef64", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/12382665a9b92b3e7af27f8c2d56e39eeffe95a6/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12382665a9b92b3e7af27f8c2d56e39eeffe95a6/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=12382665a9b92b3e7af27f8c2d56e39eeffe95a6", "patch": "@@ -35,6 +35,7 @@ use back::link;\n use back::linker::LinkerInfo;\n use llvm::{Linkage, ValueRef, Vector, get_param};\n use llvm;\n+use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n use middle::lang_items::{LangItem, ExchangeMallocFnLangItem, StartFnLangItem};\n use rustc::ty::subst::Substs;\n@@ -1712,8 +1713,21 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // `reachable_symbols` list later on so it should be ok.\n     for cnum in sess.cstore.crates() {\n         let syms = sess.cstore.reachable_ids(cnum);\n-        reachable_symbols.extend(syms.into_iter().filter(|did| {\n-            sess.cstore.is_extern_item(shared_ccx.tcx(), *did)\n+        reachable_symbols.extend(syms.into_iter().filter(|&def_id| {\n+            let applicable = match sess.cstore.describe_def(def_id) {\n+                Some(Def::Static(..)) => true,\n+                Some(Def::Fn(_)) => {\n+                    shared_ccx.tcx().lookup_generics(def_id).types.is_empty()\n+                }\n+                _ => false\n+            };\n+\n+            if applicable {\n+                let attrs = shared_ccx.tcx().get_attrs(def_id);\n+                attr::contains_extern_indicator(sess.diagnostic(), &attrs)\n+            } else {\n+                false\n+            }\n         }).map(|did| {\n             symbol_for_def_id(did, &shared_ccx, &symbol_map)\n         }));"}]}