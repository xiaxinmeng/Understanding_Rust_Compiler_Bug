{"sha": "01e31683d8fd72d3be8a803279f3bcc9f8cf3274", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZTMxNjgzZDhmZDcyZDNiZThhODAzMjc5ZjNiY2M5ZjhjZjMyNzQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T01:46:04Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:28Z"}, "message": "librustc: De-`@mut` `used_unsafe` in the type context", "tree": {"sha": "7654f2c447606d74c88925192ebd131991c0dcf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7654f2c447606d74c88925192ebd131991c0dcf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01e31683d8fd72d3be8a803279f3bcc9f8cf3274", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01e31683d8fd72d3be8a803279f3bcc9f8cf3274", "html_url": "https://github.com/rust-lang/rust/commit/01e31683d8fd72d3be8a803279f3bcc9f8cf3274", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01e31683d8fd72d3be8a803279f3bcc9f8cf3274/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b71ca3ef7d30814d72f9e41752c6c24f4168cde", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b71ca3ef7d30814d72f9e41752c6c24f4168cde", "html_url": "https://github.com/rust-lang/rust/commit/7b71ca3ef7d30814d72f9e41752c6c24f4168cde"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "d4c566d4a604a22e31b60fdcbf3a0d61b424a4cf", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01e31683d8fd72d3be8a803279f3bcc9f8cf3274/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e31683d8fd72d3be8a803279f3bcc9f8cf3274/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=01e31683d8fd72d3be8a803279f3bcc9f8cf3274", "patch": "@@ -56,7 +56,8 @@ impl EffectCheckVisitor {\n             UnsafeBlock(block_id) => {\n                 // OK, but record this.\n                 debug!(\"effect: recording unsafe block as used: {:?}\", block_id);\n-                let _ = self.tcx.used_unsafe.insert(block_id);\n+                let mut used_unsafe = self.tcx.used_unsafe.borrow_mut();\n+                let _ = used_unsafe.get().insert(block_id);\n             }\n             UnsafeFn => {}\n         }"}, {"sha": "6a5ad369c5ab1382aab508653dfa31be250d4860", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01e31683d8fd72d3be8a803279f3bcc9f8cf3274/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e31683d8fd72d3be8a803279f3bcc9f8cf3274/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=01e31683d8fd72d3be8a803279f3bcc9f8cf3274", "patch": "@@ -1001,8 +1001,9 @@ fn check_unused_unsafe(cx: &Context, e: &ast::Expr) {\n     match e.node {\n         // Don't warn about generated blocks, that'll just pollute the output.\n         ast::ExprBlock(ref blk) => {\n+            let used_unsafe = cx.tcx.used_unsafe.borrow();\n             if blk.rules == ast::UnsafeBlock(ast::UserProvided) &&\n-                !cx.tcx.used_unsafe.contains(&blk.id) {\n+                !used_unsafe.get().contains(&blk.id) {\n                 cx.span_lint(unused_unsafe, blk.span,\n                              \"unnecessary `unsafe` block\");\n             }"}, {"sha": "b86fa8ade778ce90486eae3f2ca356b1d3ae7adf", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01e31683d8fd72d3be8a803279f3bcc9f8cf3274/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e31683d8fd72d3be8a803279f3bcc9f8cf3274/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=01e31683d8fd72d3be8a803279f3bcc9f8cf3274", "patch": "@@ -348,7 +348,7 @@ struct ctxt_ {\n \n     // Set of used unsafe nodes (functions or blocks). Unsafe nodes not\n     // present in this set can be warned about.\n-    used_unsafe: @mut HashSet<ast::NodeId>,\n+    used_unsafe: RefCell<HashSet<ast::NodeId>>,\n \n     // Set of nodes which mark locals as mutable which end up getting used at\n     // some point. Local variable definitions not in this set can be warned\n@@ -1004,7 +1004,7 @@ pub fn mk_ctxt(s: session::Session,\n         trait_impls: RefCell::new(HashMap::new()),\n         inherent_impls: RefCell::new(HashMap::new()),\n         impls: RefCell::new(HashMap::new()),\n-        used_unsafe: @mut HashSet::new(),\n+        used_unsafe: RefCell::new(HashSet::new()),\n         used_mut_nodes: @mut HashSet::new(),\n         impl_vtables: RefCell::new(HashMap::new()),\n         populated_external_types: @mut HashSet::new(),"}]}