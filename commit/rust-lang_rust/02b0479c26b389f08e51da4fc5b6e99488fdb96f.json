{"sha": "02b0479c26b389f08e51da4fc5b6e99488fdb96f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYjA0NzljMjZiMzg5ZjA4ZTUxZGE0ZmM1YjZlOTk0ODhmZGI5NmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-23T01:02:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-23T01:02:32Z"}, "message": "Auto merge of #52568 - oli-obk:span_bug_error, r=varkor\n\nFix loop label resolution around constants\n\nAnd make `delay_span_bug` a little more helpful\n\nr? @varkor\n\nfixes #52442\nfixes #52443", "tree": {"sha": "c568e5f04446e902e4af93d289314d2177beb160", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c568e5f04446e902e4af93d289314d2177beb160"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02b0479c26b389f08e51da4fc5b6e99488fdb96f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02b0479c26b389f08e51da4fc5b6e99488fdb96f", "html_url": "https://github.com/rust-lang/rust/commit/02b0479c26b389f08e51da4fc5b6e99488fdb96f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02b0479c26b389f08e51da4fc5b6e99488fdb96f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67f9c71e4547b9892b2f6ed68c34fb9d0f00c9d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/67f9c71e4547b9892b2f6ed68c34fb9d0f00c9d1", "html_url": "https://github.com/rust-lang/rust/commit/67f9c71e4547b9892b2f6ed68c34fb9d0f00c9d1"}, {"sha": "bab5eb41a7f3f755708527d97a1f8bf09b15d570", "url": "https://api.github.com/repos/rust-lang/rust/commits/bab5eb41a7f3f755708527d97a1f8bf09b15d570", "html_url": "https://github.com/rust-lang/rust/commit/bab5eb41a7f3f755708527d97a1f8bf09b15d570"}], "stats": {"total": 197, "additions": 151, "deletions": 46}, "files": [{"sha": "31350a78ac1b15712b18b7125883ac89766d2807", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 22, "deletions": 36, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=02b0479c26b389f08e51da4fc5b6e99488fdb96f", "patch": "@@ -104,7 +104,6 @@ pub struct LoweringContext<'a> {\n     loop_scopes: Vec<NodeId>,\n     is_in_loop_condition: bool,\n     is_in_trait_impl: bool,\n-    is_in_anon_const: bool,\n \n     /// What to do when we encounter either an \"anonymous lifetime\n     /// reference\". The term \"anonymous\" is meant to encompass both\n@@ -232,7 +231,6 @@ pub fn lower_crate(\n         node_id_to_hir_id: IndexVec::new(),\n         is_generator: false,\n         is_in_trait_impl: false,\n-        is_in_anon_const: false,\n         lifetimes_to_define: Vec::new(),\n         is_collecting_in_band_lifetimes: false,\n         in_scope_lifetimes: Vec::new(),\n@@ -972,26 +970,22 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_loop_destination(&mut self, destination: Option<(NodeId, Label)>) -> hir::Destination {\n-        let target_id = if self.is_in_anon_const {\n-            Err(hir::LoopIdError::OutsideLoopScope)\n-        } else {\n-            match destination {\n-                Some((id, _)) => {\n-                    if let Def::Label(loop_id) = self.expect_full_def(id) {\n-                        Ok(self.lower_node_id(loop_id).node_id)\n-                    } else {\n-                        Err(hir::LoopIdError::UnresolvedLabel)\n-                    }\n-                }\n-                None => {\n-                    self.loop_scopes\n-                        .last()\n-                        .map(|innermost_loop_id| *innermost_loop_id)\n-                        .map(|id| Ok(self.lower_node_id(id).node_id))\n-                        .unwrap_or(Err(hir::LoopIdError::OutsideLoopScope))\n-                        .into()\n+        let target_id = match destination {\n+            Some((id, _)) => {\n+                if let Def::Label(loop_id) = self.expect_full_def(id) {\n+                    Ok(self.lower_node_id(loop_id).node_id)\n+                } else {\n+                    Err(hir::LoopIdError::UnresolvedLabel)\n                 }\n             }\n+            None => {\n+                self.loop_scopes\n+                    .last()\n+                    .map(|innermost_loop_id| *innermost_loop_id)\n+                    .map(|id| Ok(self.lower_node_id(id).node_id))\n+                    .unwrap_or(Err(hir::LoopIdError::OutsideLoopScope))\n+                    .into()\n+            }\n         };\n         hir::Destination {\n             label: self.lower_label(destination.map(|(_, label)| label)),\n@@ -3490,22 +3484,14 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_anon_const(&mut self, c: &AnonConst) -> hir::AnonConst {\n-        let was_in_loop_condition = self.is_in_loop_condition;\n-        self.is_in_loop_condition = false;\n-        let was_in_anon_const = self.is_in_anon_const;\n-        self.is_in_anon_const = true;\n-\n-        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(c.id);\n-        let anon_const = hir::AnonConst {\n-            id: node_id,\n-            hir_id,\n-            body: self.lower_body(None, |this| this.lower_expr(&c.value)),\n-        };\n-\n-        self.is_in_anon_const = was_in_anon_const;\n-        self.is_in_loop_condition = was_in_loop_condition;\n-\n-        anon_const\n+        self.with_new_scopes(|this| {\n+            let LoweredNodeId { node_id, hir_id } = this.lower_node_id(c.id);\n+            hir::AnonConst {\n+                id: node_id,\n+                hir_id,\n+                body: this.lower_body(None, |this| this.lower_expr(&c.value)),\n+            }\n+        })\n     }\n \n     fn lower_expr(&mut self, e: &Expr) -> hir::Expr {"}, {"sha": "293b5c63cf06aa69ec5a1aab4e5b8f1f4fe3cf6d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=02b0479c26b389f08e51da4fc5b6e99488fdb96f", "patch": "@@ -1193,6 +1193,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"run all passes except codegen; no output\"),\n     treat_err_as_bug: bool = (false, parse_bool, [TRACKED],\n           \"treat all errors that occur as bugs\"),\n+    report_delayed_bugs: bool = (false, parse_bool, [TRACKED],\n+          \"immediately print bugs registered with `delay_span_bug`\"),\n     external_macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n           \"show macro backtraces even for non-local macros\"),\n     teach: bool = (false, parse_bool, [TRACKED],\n@@ -3133,6 +3135,10 @@ mod tests {\n         opts.debugging_opts.treat_err_as_bug = true;\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n+        opts = reference.clone();\n+        opts.debugging_opts.report_delayed_bugs = true;\n+        assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n         opts = reference.clone();\n         opts.debugging_opts.continue_parse_after_error = true;\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());"}, {"sha": "77a1129f66d27726dc67aab94a3bec227a88a177", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=02b0479c26b389f08e51da4fc5b6e99488fdb96f", "patch": "@@ -1000,6 +1000,7 @@ pub fn build_session_with_codemap(\n     let can_emit_warnings = !(warnings_allow || cap_lints_allow);\n \n     let treat_err_as_bug = sopts.debugging_opts.treat_err_as_bug;\n+    let report_delayed_bugs = sopts.debugging_opts.report_delayed_bugs;\n \n     let external_macro_backtrace = sopts.debugging_opts.external_macro_backtrace;\n \n@@ -1045,6 +1046,7 @@ pub fn build_session_with_codemap(\n         errors::HandlerFlags {\n             can_emit_warnings,\n             treat_err_as_bug,\n+            report_delayed_bugs,\n             external_macro_backtrace,\n             ..Default::default()\n         },"}, {"sha": "24ece514a47b5c668f5982c8f21e0abc5d14cde9", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=02b0479c26b389f08e51da4fc5b6e99488fdb96f", "patch": "@@ -132,7 +132,7 @@ impl<'a> DiagnosticBuilder<'a> {\n     /// locally in whichever way makes the most sense.\n     pub fn delay_as_bug(&mut self) {\n         self.level = Level::Bug;\n-        *self.handler.delayed_span_bug.borrow_mut() = Some(self.diagnostic.clone());\n+        self.handler.delay_as_bug(self.diagnostic.clone());\n         self.cancel();\n     }\n "}, {"sha": "c0f07645f496ad7879962c8d0ab16d44a33efeee", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=02b0479c26b389f08e51da4fc5b6e99488fdb96f", "patch": "@@ -274,7 +274,7 @@ pub struct Handler {\n     err_count: AtomicUsize,\n     emitter: Lock<Box<dyn Emitter + sync::Send>>,\n     continue_after_error: LockCell<bool>,\n-    delayed_span_bug: Lock<Option<Diagnostic>>,\n+    delayed_span_bugs: Lock<Vec<Diagnostic>>,\n \n     // This set contains the `DiagnosticId` of all emitted diagnostics to avoid\n     // emitting the same diagnostic with extended help (`--teach`) twice, which\n@@ -299,9 +299,25 @@ thread_local!(pub static TRACK_DIAGNOSTICS: Cell<fn(&Diagnostic)> =\n pub struct HandlerFlags {\n     pub can_emit_warnings: bool,\n     pub treat_err_as_bug: bool,\n+    pub report_delayed_bugs: bool,\n     pub external_macro_backtrace: bool,\n }\n \n+impl Drop for Handler {\n+    fn drop(&mut self) {\n+        if self.err_count() == 0 {\n+            let mut bugs = self.delayed_span_bugs.borrow_mut();\n+            let has_bugs = !bugs.is_empty();\n+            for bug in bugs.drain(..) {\n+                DiagnosticBuilder::new_diagnostic(self, bug).emit();\n+            }\n+            if has_bugs {\n+                panic!(\"no errors encountered even though `delay_span_bug` issued\");\n+            }\n+        }\n+    }\n+}\n+\n impl Handler {\n     pub fn with_tty_emitter(color_config: ColorConfig,\n                             can_emit_warnings: bool,\n@@ -346,7 +362,7 @@ impl Handler {\n             err_count: AtomicUsize::new(0),\n             emitter: Lock::new(e),\n             continue_after_error: LockCell::new(true),\n-            delayed_span_bug: Lock::new(None),\n+            delayed_span_bugs: Lock::new(Vec::new()),\n             taught_diagnostics: Lock::new(FxHashSet()),\n             emitted_diagnostic_codes: Lock::new(FxHashSet()),\n             emitted_diagnostics: Lock::new(FxHashSet()),\n@@ -503,11 +519,18 @@ impl Handler {\n     }\n     pub fn delay_span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         if self.flags.treat_err_as_bug {\n+            // FIXME: don't abort here if report_delayed_bugs is off\n             self.span_bug(sp, msg);\n         }\n         let mut diagnostic = Diagnostic::new(Level::Bug, msg);\n         diagnostic.set_span(sp.into());\n-        *self.delayed_span_bug.borrow_mut() = Some(diagnostic);\n+        self.delay_as_bug(diagnostic);\n+    }\n+    fn delay_as_bug(&self, diagnostic: Diagnostic) {\n+        if self.flags.report_delayed_bugs {\n+            DiagnosticBuilder::new_diagnostic(self, diagnostic.clone()).emit();\n+        }\n+        self.delayed_span_bugs.borrow_mut().push(diagnostic);\n     }\n     pub fn span_bug_no_panic<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.emit(&sp.into(), msg, Bug);\n@@ -615,9 +638,6 @@ impl Handler {\n \n     pub fn abort_if_errors(&self) {\n         if self.err_count() == 0 {\n-            if let Some(bug) = self.delayed_span_bug.borrow_mut().take() {\n-                DiagnosticBuilder::new_diagnostic(self, bug).emit();\n-            }\n             return;\n         }\n         FatalError.raise();"}, {"sha": "4820a0f2876ee69b21ed2598db153fb2cae627b7", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=02b0479c26b389f08e51da4fc5b6e99488fdb96f", "patch": "@@ -2359,7 +2359,9 @@ impl<'a> Resolver<'a> {\n         where F: FnOnce(&mut Resolver)\n     {\n         self.ribs[ValueNS].push(Rib::new(ConstantItemRibKind));\n+        self.label_ribs.push(Rib::new(ConstantItemRibKind));\n         f(self);\n+        self.label_ribs.pop();\n         self.ribs[ValueNS].pop();\n     }\n "}, {"sha": "2cfeb2513926b45753855b8754a9885212706127", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=02b0479c26b389f08e51da4fc5b6e99488fdb96f", "patch": "@@ -857,9 +857,6 @@ fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             fcx.require_type_is_sized(expected_type, body.value.span, traits::ConstSized);\n \n             // Gather locals in statics (because of block expressions).\n-            // This is technically unnecessary because locals in static items are forbidden,\n-            // but prevents type checking from blowing up before const checking can properly\n-            // emit an error.\n             GatherLocalsVisitor { fcx: &fcx }.visit_body(body);\n \n             fcx.check_expr_coercable_to_type(&body.value, expected_type);"}, {"sha": "5872c8da1a47e198a64230c3594b9d9d70b1fa61", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=02b0479c26b389f08e51da4fc5b6e99488fdb96f", "patch": "@@ -162,6 +162,7 @@ pub fn new_handler(error_format: ErrorOutputType, codemap: Option<Lrc<codemap::C\n         errors::HandlerFlags {\n             can_emit_warnings: true,\n             treat_err_as_bug: false,\n+            report_delayed_bugs: false,\n             external_macro_backtrace: false,\n             ..Default::default()\n         },"}, {"sha": "755dc153d405201c301cf6307e29c8d7171c1d48", "filename": "src/test/ui/const-eval/issue-52442.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52442.rs?ref=02b0479c26b389f08e51da4fc5b6e99488fdb96f", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    [();  { &loop { break } as *const _ as usize } ]; //~ ERROR unimplemented expression type\n+}"}, {"sha": "586c9fa22cecdf279bda354dcd8d973a1d3639a4", "filename": "src/test/ui/const-eval/issue-52442.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52442.stderr?ref=02b0479c26b389f08e51da4fc5b6e99488fdb96f", "patch": "@@ -0,0 +1,9 @@\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/issue-52442.rs:12:14\n+   |\n+LL |     [();  { &loop { break } as *const _ as usize } ]; //~ ERROR unimplemented expression type\n+   |              ^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0019`."}, {"sha": "2ae94f6d6420a95564709045d149ba457f9bac93", "filename": "src/test/ui/const-eval/issue-52443.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52443.rs?ref=02b0479c26b389f08e51da4fc5b6e99488fdb96f", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    [(); & { loop { continue } } ]; //~ ERROR mismatched types\n+    [(); loop { break }]; //~ ERROR mismatched types\n+    [(); {while true {break}; 0}]; //~ ERROR constant contains unimplemented expression type\n+    [(); { for _ in 0usize.. {}; 0}]; //~ ERROR calls in constants are limited to constant functions\n+    //~^ ERROR constant contains unimplemented expression type\n+    //~| ERROR could not evaluate repeat length\n+}"}, {"sha": "3a145ba78d9b1b082e9ef3b564a9daa23a0b4da2", "filename": "src/test/ui/const-eval/issue-52443.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52443.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02b0479c26b389f08e51da4fc5b6e99488fdb96f/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52443.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52443.stderr?ref=02b0479c26b389f08e51da4fc5b6e99488fdb96f", "patch": "@@ -0,0 +1,51 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-52443.rs:12:10\n+   |\n+LL |     [(); & { loop { continue } } ]; //~ ERROR mismatched types\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^\n+   |          |\n+   |          expected usize, found reference\n+   |          help: consider removing the borrow: `{ loop { continue } }`\n+   |\n+   = note: expected type `usize`\n+              found type `&_`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-52443.rs:13:17\n+   |\n+LL |     [(); loop { break }]; //~ ERROR mismatched types\n+   |                 ^^^^^ expected (), found usize\n+   |\n+   = note: expected type `()`\n+              found type `usize`\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/issue-52443.rs:14:11\n+   |\n+LL |     [(); {while true {break}; 0}]; //~ ERROR constant contains unimplemented expression type\n+   |           ^^^^^^^^^^^^^^^^^^\n+\n+error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/issue-52443.rs:15:21\n+   |\n+LL |     [(); { for _ in 0usize.. {}; 0}]; //~ ERROR calls in constants are limited to constant functions\n+   |                     ^^^^^^^^\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/issue-52443.rs:15:21\n+   |\n+LL |     [(); { for _ in 0usize.. {}; 0}]; //~ ERROR calls in constants are limited to constant functions\n+   |                     ^^^^^^^^\n+\n+error[E0080]: could not evaluate repeat length\n+  --> $DIR/issue-52443.rs:15:10\n+   |\n+LL |     [(); { for _ in 0usize.. {}; 0}]; //~ ERROR calls in constants are limited to constant functions\n+   |          ^^^^^^^^^^^--------^^^^^^^\n+   |                     |\n+   |                     calling non-const fn `<I as std::iter::IntoIterator><std::ops::RangeFrom<usize>>::into_iter`\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors occurred: E0015, E0019, E0080, E0308.\n+For more information about an error, try `rustc --explain E0015`."}]}