{"sha": "f84cc0c0d0ff24e4cce5d05be3afd0347eb9d012", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NGNjMGMwZDBmZjI0ZTRjY2U1ZDA1YmUzYWZkMDM0N2ViOWQwMTI=", "commit": {"author": {"name": "projektir", "email": "oprojektir@gmail.com", "date": "2017-04-13T01:33:49Z"}, "committer": {"name": "projektir", "email": "oprojektir@gmail.com", "date": "2017-04-13T02:57:49Z"}, "message": "Updating docs for std::rc::Rc", "tree": {"sha": "b292761736cd51eee2141090c839555b71e933db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b292761736cd51eee2141090c839555b71e933db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f84cc0c0d0ff24e4cce5d05be3afd0347eb9d012", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f84cc0c0d0ff24e4cce5d05be3afd0347eb9d012", "html_url": "https://github.com/rust-lang/rust/commit/f84cc0c0d0ff24e4cce5d05be3afd0347eb9d012", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f84cc0c0d0ff24e4cce5d05be3afd0347eb9d012/comments", "author": {"login": "projektir", "id": 16269746, "node_id": "MDQ6VXNlcjE2MjY5NzQ2", "avatar_url": "https://avatars.githubusercontent.com/u/16269746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/projektir", "html_url": "https://github.com/projektir", "followers_url": "https://api.github.com/users/projektir/followers", "following_url": "https://api.github.com/users/projektir/following{/other_user}", "gists_url": "https://api.github.com/users/projektir/gists{/gist_id}", "starred_url": "https://api.github.com/users/projektir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/projektir/subscriptions", "organizations_url": "https://api.github.com/users/projektir/orgs", "repos_url": "https://api.github.com/users/projektir/repos", "events_url": "https://api.github.com/users/projektir/events{/privacy}", "received_events_url": "https://api.github.com/users/projektir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "projektir", "id": 16269746, "node_id": "MDQ6VXNlcjE2MjY5NzQ2", "avatar_url": "https://avatars.githubusercontent.com/u/16269746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/projektir", "html_url": "https://github.com/projektir", "followers_url": "https://api.github.com/users/projektir/followers", "following_url": "https://api.github.com/users/projektir/following{/other_user}", "gists_url": "https://api.github.com/users/projektir/gists{/gist_id}", "starred_url": "https://api.github.com/users/projektir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/projektir/subscriptions", "organizations_url": "https://api.github.com/users/projektir/orgs", "repos_url": "https://api.github.com/users/projektir/repos", "events_url": "https://api.github.com/users/projektir/events{/privacy}", "received_events_url": "https://api.github.com/users/projektir/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad36c2f5528d617db66c244d8bcbfc4b36da0ca0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad36c2f5528d617db66c244d8bcbfc4b36da0ca0", "html_url": "https://github.com/rust-lang/rust/commit/ad36c2f5528d617db66c244d8bcbfc4b36da0ca0"}], "stats": {"total": 66, "additions": 33, "deletions": 33}, "files": [{"sha": "fed718e9be4c6aa6ec5eba5c7b184a23c34e47dc", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/f84cc0c0d0ff24e4cce5d05be3afd0347eb9d012/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84cc0c0d0ff24e4cce5d05be3afd0347eb9d012/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=f84cc0c0d0ff24e4cce5d05be3afd0347eb9d012", "patch": "@@ -922,18 +922,29 @@ impl<T> From<T> for Rc<T> {\n     }\n }\n \n-/// A weak version of [`Rc`][rc].\n+/// `Weak` is a version of [`Rc`] that holds a non-owning reference to the\n+/// managed value. The value is accessed by calling [`upgrade`] on the `Weak`\n+/// pointer, which returns an [`Option`]`<`[`Rc`]`<T>>`.\n ///\n-/// `Weak` pointers do not count towards determining if the inner value\n-/// should be dropped.\n+/// Since a `Weak` reference does not count towards ownership, it will not\n+/// prevent the inner value from being dropped, and `Weak` itself makes no\n+/// guarantees about the value still being present and may return [`None`]\n+/// when [`upgrade`]d.\n ///\n-/// The typical way to obtain a `Weak` pointer is to call\n-/// [`Rc::downgrade`][downgrade].\n+/// A `Weak` pointer is useful for keeping a temporary reference to the value\n+/// within [`Rc`] without extending its lifetime. It is also used to prevent\n+/// circular references between [`Rc`] pointers, since mutual owning references\n+/// would never allow either [`Arc`] to be dropped. For example, a tree could\n+/// have strong [`Rc`] pointers from parent nodes to children, and `Weak`\n+/// pointers from children back to their parents.\n ///\n-/// See the [module-level documentation](./index.html) for more details.\n+/// The typical way to obtain a `Weak` pointer is to call [`Rc::downgrade`].\n ///\n-/// [rc]: struct.Rc.html\n-/// [downgrade]: struct.Rc.html#method.downgrade\n+/// [`Rc`]: struct.Rc.html\n+/// [`Rc::downgrade`]: struct.Rc.html#method.downgrade\n+/// [`upgrade`]: struct.Weak.html#method.upgrade\n+/// [`Option`]: ../../std/option/enum.Option.html\n+/// [`None`]: ../../std/option/enum.Option.html#variant.None\n #[stable(feature = \"rc_weak\", since = \"1.4.0\")]\n pub struct Weak<T: ?Sized> {\n     ptr: Shared<RcBox<T>>,\n@@ -948,14 +959,11 @@ impl<T: ?Sized> !marker::Sync for Weak<T> {}\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Weak<U>> for Weak<T> {}\n \n impl<T> Weak<T> {\n-    /// Constructs a new `Weak<T>`, without an accompanying instance of `T`.\n-    ///\n-    /// This allocates memory for `T`, but does not initialize it. Calling\n-    /// [`upgrade`][upgrade] on the return value always gives\n-    /// [`None`][option].\n+    /// Constructs a new `Weak<T>`, allocating memory for `T` without initializing\n+    /// it. Calling [`upgrade`] on the return value always gives [`None`].\n     ///\n-    /// [upgrade]: struct.Weak.html#method.upgrade\n-    /// [option]: ../../std/option/enum.Option.html\n+    /// [`upgrade`]: struct.Weak.html#method.upgrade\n+    /// [`None`]: ../../std/option/enum.Option.html\n     ///\n     /// # Examples\n     ///\n@@ -980,13 +988,13 @@ impl<T> Weak<T> {\n }\n \n impl<T: ?Sized> Weak<T> {\n-    /// Upgrades the `Weak` pointer to an [`Rc`][rc], if possible.\n+    /// Attempts to upgrade the `Weak` pointer to an [`Rc`], extending\n+    /// the lifetime of the value if successful.\n     ///\n-    /// Returns [`None`][option] if the strong count has reached zero and the\n-    /// inner value was destroyed.\n+    /// Returns [`None`] if the value has since been dropped.\n     ///\n-    /// [rc]: struct.Rc.html\n-    /// [option]: ../../std/option/enum.Option.html\n+    /// [`Rc`]: struct.Rc.html\n+    /// [`None`]: ../../std/option/enum.Option.html\n     ///\n     /// # Examples\n     ///\n@@ -1021,8 +1029,6 @@ impl<T: ?Sized> Weak<T> {\n impl<T: ?Sized> Drop for Weak<T> {\n     /// Drops the `Weak` pointer.\n     ///\n-    /// This will decrement the weak reference count.\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1061,10 +1067,7 @@ impl<T: ?Sized> Drop for Weak<T> {\n \n #[stable(feature = \"rc_weak\", since = \"1.4.0\")]\n impl<T: ?Sized> Clone for Weak<T> {\n-    /// Makes a clone of the `Weak` pointer.\n-    ///\n-    /// This creates another pointer to the same inner value, increasing the\n-    /// weak reference count.\n+    /// Makes a clone of the `Weak` pointer that points to the same value.\n     ///\n     /// # Examples\n     ///\n@@ -1091,14 +1094,11 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for Weak<T> {\n \n #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n impl<T> Default for Weak<T> {\n-    /// Constructs a new `Weak<T>`, without an accompanying instance of `T`.\n-    ///\n-    /// This allocates memory for `T`, but does not initialize it. Calling\n-    /// [`upgrade`][upgrade] on the return value always gives\n-    /// [`None`][option].\n+    /// Constructs a new `Weak<T>`, allocating memory for `T` without initializing\n+    /// it. Calling [`upgrade`] on the return value always gives [`None`].\n     ///\n-    /// [upgrade]: struct.Weak.html#method.upgrade\n-    /// [option]: ../../std/option/enum.Option.html\n+    /// [`upgrade`]: struct.Weak.html#method.upgrade\n+    /// [`None`]: ../../std/option/enum.Option.html\n     ///\n     /// # Examples\n     ///"}]}