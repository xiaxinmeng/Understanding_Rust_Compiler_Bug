{"sha": "e36621057d9f497c822eb800934b5933c10510cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNjYyMTA1N2Q5ZjQ5N2M4MjJlYjgwMDkzNGI1OTMzYzEwNTEwY2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-16T22:17:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-16T22:17:33Z"}, "message": "Auto merge of #88719 - estebank:point-at-arg-for-obligation, r=nagisa\n\nPoint at argument instead of call for their obligations\n\nWhen an obligation is introduced by a specific `fn` argument, point at\nthe argument instead of the `fn` call if the obligation fails to be\nfulfilled.\n\nMove the information about pointing at the call argument expression in\nan unmet obligation span from the `FulfillmentError` to a new\n`ObligationCauseCode`.\n\nWhen giving an error about an obligation introduced by a function call\nthat an argument doesn't fulfill, and that argument is a block, add a\nspan_label pointing at the innermost tail expression.\n\nCurrent output:\n\n```\nerror[E0425]: cannot find value `x` in this scope\n --> f10.rs:4:14\n  |\n4 |         Some(x * 2)\n  |              ^ not found in this scope\n\nerror[E0277]: expected a `FnOnce<({integer},)>` closure, found `Option<_>`\n --> f10.rs:2:31\n  |\n2 |       let p = Some(45).and_then({\n  |  ______________________--------_^\n  | |                      |\n  | |                      required by a bound introduced by this call\n3 | |         |x| println!(\"doubling {}\", x);\n4 | |         Some(x * 2)\n  | |         -----------\n5 | |     });\n  | |_____^ expected an `FnOnce<({integer},)>` closure, found `Option<_>`\n  |\n  = help: the trait `FnOnce<({integer},)>` is not implemented for `Option<_>`\n```\n\nPrevious output:\n\n```\nerror[E0425]: cannot find value `x` in this scope\n --> f10.rs:4:14\n  |\n4 |         Some(x * 2)\n  |              ^ not found in this scope\n\nerror[E0277]: expected a `FnOnce<({integer},)>` closure, found `Option<_>`\n --> f10.rs:2:22\n  |\n2 |     let p = Some(45).and_then({\n  |                      ^^^^^^^^ expected an `FnOnce<({integer},)>` closure, found `Option<_>`\n  |\n  = help: the trait `FnOnce<({integer},)>` is not implemented for `Option<_>`\n```\n\nPartially address #27300. Will require rebasing on top of #88546.", "tree": {"sha": "1aeafe4f0f8accab0b051984959e3ef8e7ae24fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1aeafe4f0f8accab0b051984959e3ef8e7ae24fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e36621057d9f497c822eb800934b5933c10510cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e36621057d9f497c822eb800934b5933c10510cf", "html_url": "https://github.com/rust-lang/rust/commit/e36621057d9f497c822eb800934b5933c10510cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e36621057d9f497c822eb800934b5933c10510cf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "html_url": "https://github.com/rust-lang/rust/commit/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d"}, {"sha": "0a4540b08f4d43c8d8d9f4de3d78daa5fcfd8b8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a4540b08f4d43c8d8d9f4de3d78daa5fcfd8b8f", "html_url": "https://github.com/rust-lang/rust/commit/0a4540b08f4d43c8d8d9f4de3d78daa5fcfd8b8f"}], "stats": {"total": 1284, "additions": 884, "deletions": 400}, "files": [{"sha": "41c004ea59608e75426422d2000a202e9906ce5e", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -1998,7 +1998,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                                     &obligation,\n                                     &traits::SelectionError::Unimplemented,\n                                     false,\n-                                    false,\n                                 );\n                             }\n                         }"}, {"sha": "593d06bad7b02bf14adcde627327710befd841b6", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mismatched_static_lifetime.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -29,7 +29,13 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             SubregionOrigin::Subtype(box TypeTrace { ref cause, .. }) => cause,\n             _ => return None,\n         };\n-        let (parent, impl_def_id) = match &cause.code {\n+        // If we added a \"points at argument expression\" obligation, we remove it here, we care\n+        // about the original obligation only.\n+        let code = match &cause.code {\n+            ObligationCauseCode::FunctionArgumentObligation { parent_code, .. } => &*parent_code,\n+            _ => &cause.code,\n+        };\n+        let (parent, impl_def_id) = match code {\n             ObligationCauseCode::MatchImpl(parent, impl_def_id) => (parent, impl_def_id),\n             _ => return None,\n         };"}, {"sha": "e1d6982f164448c1f279779e78a2dc55960917ce", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -66,10 +66,6 @@ pub type Selection<'tcx> = ImplSource<'tcx, PredicateObligation<'tcx>>;\n pub struct FulfillmentError<'tcx> {\n     pub obligation: PredicateObligation<'tcx>,\n     pub code: FulfillmentErrorCode<'tcx>,\n-    /// Diagnostics only: we opportunistically change the `code.span` when we encounter an\n-    /// obligation error caused by a call argument. When this is the case, we also signal that in\n-    /// this field to ensure accuracy of suggestions.\n-    pub points_at_arg_span: bool,\n     /// Diagnostics only: the 'root' obligation which resulted in\n     /// the failure to process `obligation`. This is the obligation\n     /// that was initially passed to `register_predicate_obligation`\n@@ -128,7 +124,7 @@ impl<'tcx> FulfillmentError<'tcx> {\n         code: FulfillmentErrorCode<'tcx>,\n         root_obligation: PredicateObligation<'tcx>,\n     ) -> FulfillmentError<'tcx> {\n-        FulfillmentError { obligation, code, points_at_arg_span: false, root_obligation }\n+        FulfillmentError { obligation, code, root_obligation }\n     }\n }\n "}, {"sha": "b4ae56adf328980d4068ccebdc0b8d9348657d08", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -253,6 +253,15 @@ pub enum ObligationCauseCode<'tcx> {\n \n     DerivedObligation(DerivedObligationCause<'tcx>),\n \n+    FunctionArgumentObligation {\n+        /// The node of the relevant argument in the function call.\n+        arg_hir_id: hir::HirId,\n+        /// The node of the function call.\n+        call_hir_id: hir::HirId,\n+        /// The obligation introduced by this argument.\n+        parent_code: Lrc<ObligationCauseCode<'tcx>>,\n+    },\n+\n     /// Error derived when matching traits/impls; see ObligationCause for more details\n     CompareImplConstObligation,\n \n@@ -368,11 +377,12 @@ impl ObligationCauseCode<'_> {\n     // Return the base obligation, ignoring derived obligations.\n     pub fn peel_derives(&self) -> &Self {\n         let mut base_cause = self;\n-        while let BuiltinDerivedObligation(cause)\n-        | ImplDerivedObligation(cause)\n-        | DerivedObligation(cause) = base_cause\n+        while let BuiltinDerivedObligation(DerivedObligationCause { parent_code, .. })\n+        | ImplDerivedObligation(DerivedObligationCause { parent_code, .. })\n+        | DerivedObligation(DerivedObligationCause { parent_code, .. })\n+        | FunctionArgumentObligation { parent_code, .. } = base_cause\n         {\n-            base_cause = &cause.parent_code;\n+            base_cause = &parent_code;\n         }\n         base_cause\n     }"}, {"sha": "9c962d30ce0e8b8a575627173b019c993dee5b16", "filename": "compiler/rustc_trait_selection/src/traits/chalk_fulfill.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -57,7 +57,6 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n                 .map(|obligation| FulfillmentError {\n                     obligation: obligation.clone(),\n                     code: FulfillmentErrorCode::CodeAmbiguity,\n-                    points_at_arg_span: false,\n                     // FIXME - does Chalk have a notation of 'root obligation'?\n                     // This is just for diagnostics, so it's okay if this is wrong\n                     root_obligation: obligation.clone(),\n@@ -112,7 +111,6 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n                                     code: FulfillmentErrorCode::CodeSelectionError(\n                                         SelectionError::Unimplemented,\n                                     ),\n-                                    points_at_arg_span: false,\n                                     // FIXME - does Chalk have a notation of 'root obligation'?\n                                     // This is just for diagnostics, so it's okay if this is wrong\n                                     root_obligation: obligation,\n@@ -129,7 +127,6 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n                         code: FulfillmentErrorCode::CodeSelectionError(\n                             SelectionError::Unimplemented,\n                         ),\n-                        points_at_arg_span: false,\n                         // FIXME - does Chalk have a notation of 'root obligation'?\n                         // This is just for diagnostics, so it's okay if this is wrong\n                         root_obligation: obligation,"}, {"sha": "8c9acd3ba73e7ce60bd3376ac93136fdfd284f9c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -66,7 +66,6 @@ pub trait InferCtxtExt<'tcx> {\n         root_obligation: &PredicateObligation<'tcx>,\n         error: &SelectionError<'tcx>,\n         fallback_has_occurred: bool,\n-        points_at_arg: bool,\n     );\n \n     /// Given some node representing a fn-like thing in the HIR map,\n@@ -237,7 +236,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         root_obligation: &PredicateObligation<'tcx>,\n         error: &SelectionError<'tcx>,\n         fallback_has_occurred: bool,\n-        points_at_arg: bool,\n     ) {\n         let tcx = self.tcx;\n         let mut span = obligation.cause.span;\n@@ -387,7 +385,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             &obligation,\n                             &mut err,\n                             &trait_ref,\n-                            points_at_arg,\n                             have_alt_message,\n                         ) {\n                             self.note_obligation_cause(&mut err, &obligation);\n@@ -430,8 +427,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             err.span_label(enclosing_scope_span, s.as_str());\n                         }\n \n-                        self.suggest_dereferences(&obligation, &mut err, trait_ref, points_at_arg);\n-                        self.suggest_fn_call(&obligation, &mut err, trait_ref, points_at_arg);\n+                        self.suggest_dereferences(&obligation, &mut err, trait_ref);\n+                        self.suggest_fn_call(&obligation, &mut err, trait_ref);\n                         self.suggest_remove_reference(&obligation, &mut err, trait_ref);\n                         self.suggest_semicolon_removal(&obligation, &mut err, span, trait_ref);\n                         self.note_version_mismatch(&mut err, &trait_ref);\n@@ -500,12 +497,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         // Changing mutability doesn't make a difference to whether we have\n                         // an `Unsize` impl (Fixes ICE in #71036)\n                         if !is_unsize {\n-                            self.suggest_change_mut(\n-                                &obligation,\n-                                &mut err,\n-                                trait_ref,\n-                                points_at_arg,\n-                            );\n+                            self.suggest_change_mut(&obligation, &mut err, trait_ref);\n                         }\n \n                         // If this error is due to `!: Trait` not implemented but `(): Trait` is\n@@ -1214,7 +1206,6 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     &error.root_obligation,\n                     selection_error,\n                     fallback_has_occurred,\n-                    error.points_at_arg_span,\n                 );\n             }\n             FulfillmentErrorCode::CodeProjectionError(ref e) => {"}, {"sha": "f006bede409907b7cc356177fb00385b5b93f97e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 78, "deletions": 22, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -9,6 +9,7 @@ use crate::traits::normalize_projection_type;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n+use rustc_data_structures::sync::Lrc;\n use rustc_errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder, Style};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n@@ -54,7 +55,6 @@ pub trait InferCtxtExt<'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'tcx>,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n-        points_at_arg: bool,\n     );\n \n     fn get_closure_name(\n@@ -69,15 +69,13 @@ pub trait InferCtxtExt<'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n         trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n-        points_at_arg: bool,\n     );\n \n     fn suggest_add_reference_to_arg(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n         trait_ref: &ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n-        points_at_arg: bool,\n         has_custom_message: bool,\n     ) -> bool;\n \n@@ -93,7 +91,6 @@ pub trait InferCtxtExt<'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n         trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n-        points_at_arg: bool,\n     );\n \n     fn suggest_semicolon_removal(\n@@ -490,16 +487,19 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'tcx>,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n-        points_at_arg: bool,\n     ) {\n         // It only make sense when suggesting dereferences for arguments\n-        if !points_at_arg {\n+        let code = if let ObligationCauseCode::FunctionArgumentObligation { parent_code, .. } =\n+            &obligation.cause.code\n+        {\n+            parent_code.clone()\n+        } else {\n             return;\n-        }\n+        };\n         let param_env = obligation.param_env;\n         let body_id = obligation.cause.body_id;\n         let span = obligation.cause.span;\n-        let real_trait_ref = match &obligation.cause.code {\n+        let real_trait_ref = match &*code {\n             ObligationCauseCode::ImplDerivedObligation(cause)\n             | ObligationCauseCode::DerivedObligation(cause)\n             | ObligationCauseCode::BuiltinDerivedObligation(cause) => cause.parent_trait_ref,\n@@ -584,7 +584,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n         trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n-        points_at_arg: bool,\n     ) {\n         let self_ty = match trait_ref.self_ty().no_bound_vars() {\n             None => return,\n@@ -656,11 +655,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n             _ => return,\n         };\n-        if points_at_arg {\n+        if matches!(obligation.cause.code, ObligationCauseCode::FunctionArgumentObligation { .. }) {\n             // When the obligation error has been ensured to have been caused by\n             // an argument, the `obligation.cause.span` points at the expression\n-            // of the argument, so we can provide a suggestion. This is signaled\n-            // by `points_at_arg`. Otherwise, we give a more general note.\n+            // of the argument, so we can provide a suggestion. Otherwise, we give\n+            // a more general note.\n             err.span_suggestion_verbose(\n                 obligation.cause.span.shrink_to_hi(),\n                 &msg,\n@@ -677,18 +676,21 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n         trait_ref: &ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n-        points_at_arg: bool,\n         has_custom_message: bool,\n     ) -> bool {\n         let span = obligation.cause.span;\n-        let points_at_for_iter = matches!(\n-            span.ctxt().outer_expn_data().kind,\n-            ExpnKind::Desugaring(DesugaringKind::ForLoop(ForLoopLoc::IntoIter))\n-        );\n \n-        if !points_at_arg && !points_at_for_iter {\n+        let code = if let ObligationCauseCode::FunctionArgumentObligation { parent_code, .. } =\n+            &obligation.cause.code\n+        {\n+            parent_code.clone()\n+        } else if let ExpnKind::Desugaring(DesugaringKind::ForLoop(ForLoopLoc::IntoIter)) =\n+            span.ctxt().outer_expn_data().kind\n+        {\n+            Lrc::new(obligation.cause.code.clone())\n+        } else {\n             return false;\n-        }\n+        };\n \n         // List of traits for which it would be nonsensical to suggest borrowing.\n         // For instance, immutable references are always Copy, so suggesting to\n@@ -787,7 +789,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             return false;\n         };\n \n-        if let ObligationCauseCode::ImplDerivedObligation(obligation) = &obligation.cause.code {\n+        if let ObligationCauseCode::ImplDerivedObligation(obligation) = &*code {\n             let expected_trait_ref = obligation.parent_trait_ref.skip_binder();\n             let new_imm_trait_ref =\n                 ty::TraitRef::new(obligation.parent_trait_ref.def_id(), imm_substs);\n@@ -799,7 +801,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 return try_borrowing(new_mut_trait_ref, expected_trait_ref, true, &[]);\n             }\n         } else if let ObligationCauseCode::BindingObligation(_, _)\n-        | ObligationCauseCode::ItemObligation(_) = &obligation.cause.code\n+        | ObligationCauseCode::ItemObligation(_) = &*code\n         {\n             if try_borrowing(\n                 ty::TraitRef::new(trait_ref.def_id, imm_substs),\n@@ -891,8 +893,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n         trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n-        points_at_arg: bool,\n     ) {\n+        let points_at_arg = matches!(\n+            obligation.cause.code,\n+            ObligationCauseCode::FunctionArgumentObligation { .. },\n+        );\n+\n         let span = obligation.cause.span;\n         if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n             let refs_number =\n@@ -2289,6 +2295,56 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     )\n                 });\n             }\n+            ObligationCauseCode::FunctionArgumentObligation {\n+                arg_hir_id,\n+                call_hir_id,\n+                ref parent_code,\n+            } => {\n+                let hir = self.tcx.hir();\n+                if let Some(Node::Expr(expr @ hir::Expr { kind: hir::ExprKind::Block(..), .. })) =\n+                    hir.find(arg_hir_id)\n+                {\n+                    let in_progress_typeck_results =\n+                        self.in_progress_typeck_results.map(|t| t.borrow());\n+                    let parent_id = hir.local_def_id(hir.get_parent_item(arg_hir_id));\n+                    let typeck_results: &TypeckResults<'tcx> = match &in_progress_typeck_results {\n+                        Some(t) if t.hir_owner == parent_id => t,\n+                        _ => self.tcx.typeck(parent_id),\n+                    };\n+                    let ty = typeck_results.expr_ty_adjusted(expr);\n+                    let span = expr.peel_blocks().span;\n+                    if Some(span) != err.span.primary_span() {\n+                        err.span_label(\n+                            span,\n+                            &if ty.references_error() {\n+                                String::new()\n+                            } else {\n+                                format!(\"this tail expression is of type `{:?}`\", ty)\n+                            },\n+                        );\n+                    }\n+                }\n+                if let Some(Node::Expr(hir::Expr {\n+                    kind:\n+                        hir::ExprKind::Call(hir::Expr { span, .. }, _)\n+                        | hir::ExprKind::MethodCall(_, span, ..),\n+                    ..\n+                })) = hir.find(call_hir_id)\n+                {\n+                    if Some(*span) != err.span.primary_span() {\n+                        err.span_label(*span, \"required by a bound introduced by this call\");\n+                    }\n+                }\n+                ensure_sufficient_stack(|| {\n+                    self.note_obligation_cause_code(\n+                        err,\n+                        predicate,\n+                        &parent_code,\n+                        obligated_types,\n+                        seen_requirements,\n+                    )\n+                });\n+            }\n             ObligationCauseCode::CompareImplMethodObligation {\n                 item_name,\n                 trait_item_def_id,"}, {"sha": "1cc06b8c2e544b9ca5bdf2130cd61ea1dd21b46f", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -72,7 +72,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         arg_exprs: &'tcx [hir::Expr<'tcx>],\n         expected: Expectation<'tcx>,\n     ) -> Ty<'tcx> {\n-        let original_callee_ty = self.check_expr(callee_expr);\n+        let original_callee_ty = match &callee_expr.kind {\n+            hir::ExprKind::Path(hir::QPath::Resolved(..) | hir::QPath::TypeRelative(..)) => self\n+                .check_expr_with_expectation_and_args(\n+                    callee_expr,\n+                    Expectation::NoExpectation,\n+                    arg_exprs,\n+                ),\n+            _ => self.check_expr(callee_expr),\n+        };\n+\n         let expr_ty = self.structurally_resolved_type(call_expr.span, original_callee_ty);\n \n         let mut autoderef = self.autoderef(callee_expr.span, expr_ty);"}, {"sha": "013aecae586ca93369917a4e7008377de62e4dbb", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -707,13 +707,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n                 // Object safety violations or miscellaneous.\n                 Err(err) => {\n-                    self.report_selection_error(\n-                        obligation.clone(),\n-                        &obligation,\n-                        &err,\n-                        false,\n-                        false,\n-                    );\n+                    self.report_selection_error(obligation.clone(), &obligation, &err, false);\n                     // Treat this like an obligation and follow through\n                     // with the unsizing - the lack of a coercion should\n                     // be silent, as it causes a type mismatch later."}, {"sha": "917adf0e2b9bfa17b489ed22f99c0b243be9d3e3", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -161,6 +161,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         expr: &'tcx hir::Expr<'tcx>,\n         expected: Expectation<'tcx>,\n+    ) -> Ty<'tcx> {\n+        self.check_expr_with_expectation_and_args(expr, expected, &[])\n+    }\n+\n+    /// Same as `check_expr_with_expectation`, but allows us to pass in the arguments of a\n+    /// `ExprKind::Call` when evaluating its callee when it is an `ExprKind::Path`.\n+    pub(super) fn check_expr_with_expectation_and_args(\n+        &self,\n+        expr: &'tcx hir::Expr<'tcx>,\n+        expected: Expectation<'tcx>,\n+        args: &'tcx [hir::Expr<'tcx>],\n     ) -> Ty<'tcx> {\n         if self.tcx().sess.verbose() {\n             // make this code only run with -Zverbose because it is probably slow\n@@ -198,7 +209,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let old_diverges = self.diverges.replace(Diverges::Maybe);\n         let old_has_errors = self.has_errors.replace(false);\n \n-        let ty = ensure_sufficient_stack(|| self.check_expr_kind(expr, expected));\n+        let ty = ensure_sufficient_stack(|| match &expr.kind {\n+            hir::ExprKind::Path(\n+                qpath @ hir::QPath::Resolved(..) | qpath @ hir::QPath::TypeRelative(..),\n+            ) => self.check_expr_path(qpath, expr, args),\n+            _ => self.check_expr_kind(expr, expected),\n+        });\n \n         // Warn for non-block expressions with diverging children.\n         match expr.kind {\n@@ -261,7 +277,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ExprKind::Path(QPath::LangItem(lang_item, _)) => {\n                 self.check_lang_item_path(lang_item, expr)\n             }\n-            ExprKind::Path(ref qpath) => self.check_expr_path(qpath, expr),\n+            ExprKind::Path(ref qpath) => self.check_expr_path(qpath, expr, &[]),\n             ExprKind::InlineAsm(asm) => self.check_expr_asm(asm),\n             ExprKind::LlvmInlineAsm(asm) => {\n                 for expr in asm.outputs_exprs.iter().chain(asm.inputs_exprs.iter()) {\n@@ -481,10 +497,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.resolve_lang_item_path(lang_item, expr.span, expr.hir_id).1\n     }\n \n-    fn check_expr_path(\n+    pub(crate) fn check_expr_path(\n         &self,\n         qpath: &'tcx hir::QPath<'tcx>,\n         expr: &'tcx hir::Expr<'tcx>,\n+        args: &'tcx [hir::Expr<'tcx>],\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx;\n         let (res, opt_ty, segs) =\n@@ -517,16 +534,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // We just want to check sizedness, so instead of introducing\n                     // placeholder lifetimes with probing, we just replace higher lifetimes\n                     // with fresh vars.\n+                    let span = args.get(i).map(|a| a.span).unwrap_or(expr.span);\n                     let input = self\n                         .replace_bound_vars_with_fresh_vars(\n-                            expr.span,\n+                            span,\n                             infer::LateBoundRegionConversionTime::FnCall,\n                             fn_sig.input(i),\n                         )\n                         .0;\n                     self.require_type_is_sized_deferred(\n                         input,\n-                        expr.span,\n+                        span,\n                         traits::SizedArgumentType(None),\n                     );\n                 }"}, {"sha": "ed01dae59f6723e1460d2a534c8c34faac305813", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -83,7 +83,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// version (resolve_vars_if_possible), this version will\n     /// also select obligations if it seems useful, in an effort\n     /// to get more type information.\n-    pub(in super::super) fn resolve_vars_with_obligations(&self, mut ty: Ty<'tcx>) -> Ty<'tcx> {\n+    pub(in super::super) fn resolve_vars_with_obligations(&self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+        self.resolve_vars_with_obligations_and_mutate_fulfillment(ty, |_| {})\n+    }\n+\n+    pub(in super::super) fn resolve_vars_with_obligations_and_mutate_fulfillment(\n+        &self,\n+        mut ty: Ty<'tcx>,\n+        mutate_fulfillment_errors: impl Fn(&mut Vec<traits::FulfillmentError<'tcx>>),\n+    ) -> Ty<'tcx> {\n         debug!(\"resolve_vars_with_obligations(ty={:?})\", ty);\n \n         // No Infer()? Nothing needs doing.\n@@ -103,7 +111,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // possible. This can help substantially when there are\n         // indirect dependencies that don't seem worth tracking\n         // precisely.\n-        self.select_obligations_where_possible(false, |_| {});\n+        self.select_obligations_where_possible(false, mutate_fulfillment_errors);\n         ty = self.resolve_vars_if_possible(ty);\n \n         debug!(\"resolve_vars_with_obligations: ty={:?}\", ty);"}, {"sha": "9cf00bad10b7a0ea9d0616da101a5c4bd1a4b7e5", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -9,6 +9,7 @@ use crate::check::{\n };\n \n use rustc_ast as ast;\n+use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n@@ -324,6 +325,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.point_at_arg_instead_of_call_if_possible(\n                         errors,\n                         &final_arg_types[..],\n+                        expr,\n                         sp,\n                         &args,\n                     );\n@@ -354,8 +356,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     continue;\n                 }\n \n-                debug!(\"checking the argument\");\n                 let formal_ty = formal_tys[i];\n+                debug!(\"checking argument {}: {:?} = {:?}\", i, arg, formal_ty);\n \n                 // The special-cased logic below has three functions:\n                 // 1. Provide as good of an expected type as possible.\n@@ -367,6 +369,42 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 //    to, which is `expected_ty` if `rvalue_hint` returns an\n                 //    `ExpectHasType(expected_ty)`, or the `formal_ty` otherwise.\n                 let coerce_ty = expected.only_has_type(self).unwrap_or(formal_ty);\n+\n+                // Cause selection errors caused by resolving a single argument to point at the\n+                // argument and not the call. This is otherwise redundant with the `demand_coerce`\n+                // call immediately after, but it lets us customize the span pointed to in the\n+                // fulfillment error to be more accurate.\n+                let _ = self.resolve_vars_with_obligations_and_mutate_fulfillment(\n+                    coerce_ty,\n+                    |errors| {\n+                        // This is not coming from a macro or a `derive`.\n+                        if sp.desugaring_kind().is_none()\n+                        && !arg.span.from_expansion()\n+                        // Do not change the spans of `async fn`s.\n+                        && !matches!(\n+                            expr.kind,\n+                            hir::ExprKind::Call(\n+                                hir::Expr {\n+                                    kind: hir::ExprKind::Path(hir::QPath::LangItem(_, _)),\n+                                    ..\n+                                },\n+                                _\n+                            )\n+                        ) {\n+                            for error in errors {\n+                                error.obligation.cause.make_mut().span = arg.span;\n+                                let code = error.obligation.cause.code.clone();\n+                                error.obligation.cause.make_mut().code =\n+                                    ObligationCauseCode::FunctionArgumentObligation {\n+                                        arg_hir_id: arg.hir_id,\n+                                        call_hir_id: expr.hir_id,\n+                                        parent_code: Lrc::new(code),\n+                                    };\n+                            }\n+                        }\n+                    },\n+                );\n+\n                 // We're processing function arguments so we definitely want to use\n                 // two-phase borrows.\n                 self.demand_coerce(&arg, checked_ty, coerce_ty, None, AllowTwoPhase::Yes);\n@@ -907,6 +945,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         errors: &mut Vec<traits::FulfillmentError<'tcx>>,\n         final_arg_types: &[(usize, Ty<'tcx>, Ty<'tcx>)],\n+        expr: &'tcx hir::Expr<'tcx>,\n         call_sp: Span,\n         args: &'tcx [hir::Expr<'tcx>],\n     ) {\n@@ -956,7 +995,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // We make sure that only *one* argument matches the obligation failure\n                     // and we assign the obligation's span to its expression's.\n                     error.obligation.cause.make_mut().span = args[ref_in].span;\n-                    error.points_at_arg_span = true;\n+                    let code = error.obligation.cause.code.clone();\n+                    error.obligation.cause.make_mut().code =\n+                        ObligationCauseCode::FunctionArgumentObligation {\n+                            arg_hir_id: args[ref_in].hir_id,\n+                            call_hir_id: expr.hir_id,\n+                            parent_code: Lrc::new(code),\n+                        };\n                 }\n             }\n         }"}, {"sha": "e66c6b35ca1eed0749a494c4f95d889d19c8fea6", "filename": "src/test/ui/associated-types/associated-types-bound-failure.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `<G as GetToInt>::R: ToInt` is not satisfied\n   --> $DIR/associated-types-bound-failure.rs:19:19\n    |\n LL |     ToInt::to_int(&g.get())\n-   |                   ^^^^^^^^ the trait `ToInt` is not implemented for `<G as GetToInt>::R`\n+   |     ------------- ^^^^^^^^ the trait `ToInt` is not implemented for `<G as GetToInt>::R`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by `ToInt::to_int`\n   --> $DIR/associated-types-bound-failure.rs:6:5"}, {"sha": "912dedfdcebbc3b220401347f2191c494eb02f5a", "filename": "src/test/ui/associated-types/associated-types-path-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.rs?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -28,13 +28,11 @@ pub fn f1_int_uint() {\n pub fn f1_uint_uint() {\n     f1(2u32, 4u32);\n     //~^ ERROR `u32: Foo` is not satisfied\n-    //~| ERROR `u32: Foo` is not satisfied\n }\n \n pub fn f1_uint_int() {\n     f1(2u32, 4i32);\n     //~^ ERROR `u32: Foo` is not satisfied\n-    //~| ERROR `u32: Foo` is not satisfied\n }\n \n pub fn f2_int() {"}, {"sha": "15a5245d54d9577c52a6350962400918138c6670", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -10,10 +10,12 @@ LL |     f1(2i32, 4u32);\n    |               ~~~\n \n error[E0277]: the trait bound `u32: Foo` is not satisfied\n-  --> $DIR/associated-types-path-2.rs:29:5\n+  --> $DIR/associated-types-path-2.rs:29:14\n    |\n LL |     f1(2u32, 4u32);\n-   |     ^^ the trait `Foo` is not implemented for `u32`\n+   |     --       ^^^^ the trait `Foo` is not implemented for `u32`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `f1`\n   --> $DIR/associated-types-path-2.rs:13:14\n@@ -22,31 +24,21 @@ LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n    |              ^^^ required by this bound in `f1`\n \n error[E0277]: the trait bound `u32: Foo` is not satisfied\n-  --> $DIR/associated-types-path-2.rs:29:5\n-   |\n-LL |     f1(2u32, 4u32);\n-   |     ^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `u32`\n-\n-error[E0277]: the trait bound `u32: Foo` is not satisfied\n-  --> $DIR/associated-types-path-2.rs:35:5\n+  --> $DIR/associated-types-path-2.rs:34:14\n    |\n LL |     f1(2u32, 4i32);\n-   |     ^^ the trait `Foo` is not implemented for `u32`\n+   |     --       ^^^^ the trait `Foo` is not implemented for `u32`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `f1`\n   --> $DIR/associated-types-path-2.rs:13:14\n    |\n LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n    |              ^^^ required by this bound in `f1`\n \n-error[E0277]: the trait bound `u32: Foo` is not satisfied\n-  --> $DIR/associated-types-path-2.rs:35:5\n-   |\n-LL |     f1(2u32, 4i32);\n-   |     ^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `u32`\n-\n error[E0308]: mismatched types\n-  --> $DIR/associated-types-path-2.rs:41:18\n+  --> $DIR/associated-types-path-2.rs:39:18\n    |\n LL |     let _: i32 = f2(2i32);\n    |            ---   ^^^^^^^^ expected `i32`, found `u32`\n@@ -58,7 +50,7 @@ help: you can convert a `u32` to an `i32` and panic if the converted value doesn\n LL |     let _: i32 = f2(2i32).try_into().unwrap();\n    |                          ++++++++++++++++++++\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0277, E0308.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "22daaf329102a5a7624c5b71634cfb7c6bdab1d9", "filename": "src/test/ui/associated-types/issue-27675-unchecked-bounds.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/issue-27675-unchecked-bounds.rs:15:31\n    |\n LL |     copy::<dyn Setup<From=T>>(t)\n-   |                               ^ the trait `Copy` is not implemented for `T`\n+   |     ------------------------- ^ the trait `Copy` is not implemented for `T`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `copy`\n   --> $DIR/issue-27675-unchecked-bounds.rs:10:12"}, {"sha": "919abf646037deaa2bcd7ceae1f8aa14e4214d1f", "filename": "src/test/ui/async-await/issue-72442.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `Option<&str>: AsRef<Path>` is not satisfied\n   --> $DIR/issue-72442.rs:12:36\n    |\n LL |             let mut f = File::open(path.to_str())?;\n-   |                                    ^^^^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `Option<&str>`\n+   |                         ---------- ^^^^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `Option<&str>`\n+   |                         |\n+   |                         required by a bound introduced by this call\n    |\n note: required by a bound in `File::open`\n   --> $SRC_DIR/std/src/fs.rs:LL:COL"}, {"sha": "2f1dec9d2090c69f231e82a8cc6d9decf653f049", "filename": "src/test/ui/box/into-boxed-slice-fail.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fbox%2Finto-boxed-slice-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fbox%2Finto-boxed-slice-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox%2Finto-boxed-slice-fail.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the size for values of type `[u8]` cannot be known at compilation\n   --> $DIR/into-boxed-slice-fail.rs:7:35\n    |\n LL |     let _ = Box::into_boxed_slice(boxed_slice);\n-   |                                   ^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |             --------------------- ^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |             |\n+   |             required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n note: required by `Box::<T, A>::into_boxed_slice`\n@@ -24,7 +26,9 @@ error[E0277]: the size for values of type `dyn Debug` cannot be known at compila\n   --> $DIR/into-boxed-slice-fail.rs:11:35\n    |\n LL |     let _ = Box::into_boxed_slice(boxed_trait);\n-   |                                   ^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |             --------------------- ^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |             |\n+   |             required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `dyn Debug`\n note: required by `Box::<T, A>::into_boxed_slice`"}, {"sha": "14d43c1474c575b92a3ed7ffd9655e6cca54a5a9", "filename": "src/test/ui/chalkify/type_inference.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `{float}: Bar` is not satisfied\n   --> $DIR/type_inference.rs:27:14\n    |\n LL |     only_bar(x);\n-   |              ^ the trait `Bar` is not implemented for `{float}`\n+   |     -------- ^ the trait `Bar` is not implemented for `{float}`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the following implementations were found:\n              <i32 as Bar>"}, {"sha": "d4f230780436ea5c80e632223774bfb2dcbc5c94", "filename": "src/test/ui/closure-expected.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fclosure-expected.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fclosure-expected.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: expected a `FnOnce<()>` closure, found `{integer}`\n   --> $DIR/closure-expected.rs:3:23\n    |\n LL |     let y = x.or_else(4);\n-   |                       ^ expected an `FnOnce<()>` closure, found `{integer}`\n+   |               ------- ^ expected an `FnOnce<()>` closure, found `{integer}`\n+   |               |\n+   |               required by a bound introduced by this call\n    |\n    = help: the trait `FnOnce<()>` is not implemented for `{integer}`\n    = note: wrap the `{integer}` in a closure with no arguments: `|| { /* code */ }`"}, {"sha": "1a40326d986c4124e4a765519ebc276e6d83c193", "filename": "src/test/ui/closures/closure-bounds-subtype.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: `F` cannot be shared between threads safely\n   --> $DIR/closure-bounds-subtype.rs:13:22\n    |\n LL |     take_const_owned(f);\n-   |                      ^ `F` cannot be shared between threads safely\n+   |     ---------------- ^ `F` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `take_const_owned`\n   --> $DIR/closure-bounds-subtype.rs:4:50"}, {"sha": "4a47e0549155f9508223981beefcbd89c32958f2", "filename": "src/test/ui/closures/coerce-unsafe-to-closure.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: expected a `FnOnce<(&str,)>` closure, found `unsafe extern \"rust-i\n   --> $DIR/coerce-unsafe-to-closure.rs:2:44\n    |\n LL |     let x: Option<&[u8]> = Some(\"foo\").map(std::mem::transmute);\n-   |                                            ^^^^^^^^^^^^^^^^^^^ expected an `FnOnce<(&str,)>` closure, found `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}`\n+   |                                        --- ^^^^^^^^^^^^^^^^^^^ expected an `FnOnce<(&str,)>` closure, found `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}`\n+   |                                        |\n+   |                                        required by a bound introduced by this call\n    |\n    = help: the trait `FnOnce<(&str,)>` is not implemented for `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}`\n "}, {"sha": "2e2dac288a1da9cd6131b10cd52b36185b4f264f", "filename": "src/test/ui/coherence/coherence-unsafe-trait-object-impl.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-unsafe-trait-object-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-unsafe-trait-object-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-unsafe-trait-object-impl.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `&dyn Trait: Trait` is not satisfied\n   --> $DIR/coherence-unsafe-trait-object-impl.rs:15:13\n    |\n LL |     takes_t(t);\n-   |             ^ the trait `Trait` is not implemented for `&dyn Trait`\n+   |     ------- ^ the trait `Trait` is not implemented for `&dyn Trait`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `takes_t`\n   --> $DIR/coherence-unsafe-trait-object-impl.rs:10:15"}, {"sha": "c63857b2314e9422f5fe31f8f78409df45b212a2", "filename": "src/test/ui/const-generics/issues/issue-86530.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `&str: X` is not satisfied\n   --> $DIR/issue-86530.rs:16:7\n    |\n LL |     z(\" \");\n-   |       ^^^ the trait `X` is not implemented for `&str`\n+   |     - ^^^ the trait `X` is not implemented for `&str`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `z`\n   --> $DIR/issue-86530.rs:10:8"}, {"sha": "2538b5533a6d69f57ee3218bdad585c269468994", "filename": "src/test/ui/derives/deriving-copyclone.stderr", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,10 +2,11 @@ error[E0277]: the trait bound `C: Copy` is not satisfied\n   --> $DIR/deriving-copyclone.rs:31:13\n    |\n LL |     is_copy(B { a: 1, b: C });\n-   |             ^^^^^^^^^^^^^^^^\n-   |             |\n-   |             expected an implementor of trait `Copy`\n-   |             help: consider borrowing here: `&B { a: 1, b: C }`\n+   |     ------- ^^^^^^^^^^^^^^^^\n+   |     |       |\n+   |     |       expected an implementor of trait `Copy`\n+   |     |       help: consider borrowing here: `&B { a: 1, b: C }`\n+   |     required by a bound introduced by this call\n    |\n note: required because of the requirements on the impl of `Copy` for `B<C>`\n   --> $DIR/deriving-copyclone.rs:9:10\n@@ -23,10 +24,11 @@ error[E0277]: the trait bound `C: Clone` is not satisfied\n   --> $DIR/deriving-copyclone.rs:32:14\n    |\n LL |     is_clone(B { a: 1, b: C });\n-   |              ^^^^^^^^^^^^^^^^\n-   |              |\n-   |              expected an implementor of trait `Clone`\n-   |              help: consider borrowing here: `&B { a: 1, b: C }`\n+   |     -------- ^^^^^^^^^^^^^^^^\n+   |     |        |\n+   |     |        expected an implementor of trait `Clone`\n+   |     |        help: consider borrowing here: `&B { a: 1, b: C }`\n+   |     required by a bound introduced by this call\n    |\n note: required because of the requirements on the impl of `Clone` for `B<C>`\n   --> $DIR/deriving-copyclone.rs:9:16\n@@ -44,10 +46,11 @@ error[E0277]: the trait bound `D: Copy` is not satisfied\n   --> $DIR/deriving-copyclone.rs:35:13\n    |\n LL |     is_copy(B { a: 1, b: D });\n-   |             ^^^^^^^^^^^^^^^^\n-   |             |\n-   |             expected an implementor of trait `Copy`\n-   |             help: consider borrowing here: `&B { a: 1, b: D }`\n+   |     ------- ^^^^^^^^^^^^^^^^\n+   |     |       |\n+   |     |       expected an implementor of trait `Copy`\n+   |     |       help: consider borrowing here: `&B { a: 1, b: D }`\n+   |     required by a bound introduced by this call\n    |\n note: required because of the requirements on the impl of `Copy` for `B<D>`\n   --> $DIR/deriving-copyclone.rs:9:10"}, {"sha": "c7458916c536492e9b7da88fa3de4b435fefe4fd", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `i8: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:24:21\n    |\n LL |     Foo::<i32>::bar(&1i8);\n-   |                     ^^^^ the trait `Foo<i32>` is not implemented for `i8`\n+   |     --------------- ^^^^ the trait `Foo<i32>` is not implemented for `i8`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the following implementations were found:\n              <i8 as Foo<bool>>\n@@ -20,7 +22,9 @@ error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:25:21\n    |\n LL |     Foo::<i32>::bar(&1u8);\n-   |                     ^^^^ the trait `Foo<i32>` is not implemented for `u8`\n+   |     --------------- ^^^^ the trait `Foo<i32>` is not implemented for `u8`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the following implementations were found:\n              <u8 as Foo<bool>>\n@@ -37,7 +41,9 @@ error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:26:21\n    |\n LL |     Foo::<i32>::bar(&true);\n-   |                     ^^^^^ the trait `Foo<i32>` is not implemented for `bool`\n+   |     --------------- ^^^^^ the trait `Foo<i32>` is not implemented for `bool`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the following implementations were found:\n              <bool as Foo<bool>>"}, {"sha": "2b4784d7eccbd5ed8258814c2c53d72d327ff1f6", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -16,7 +16,9 @@ error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/E0277.rs:15:15\n    |\n LL |     some_func(5i32);\n-   |               ^^^^ the trait `Foo` is not implemented for `i32`\n+   |     --------- ^^^^ the trait `Foo` is not implemented for `i32`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `some_func`\n   --> $DIR/E0277.rs:7:17"}, {"sha": "637eb27db01e675a5e847493bba30295dacacfef", "filename": "src/test/ui/error-should-say-copy-not-pod.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ferror-should-say-copy-not-pod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ferror-should-say-copy-not-pod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-should-say-copy-not-pod.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `String: Copy` is not satisfied\n   --> $DIR/error-should-say-copy-not-pod.rs:6:17\n    |\n LL |     check_bound(\"nocopy\".to_string());\n-   |                 ^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n+   |     ----------- ^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_bound`\n   --> $DIR/error-should-say-copy-not-pod.rs:3:18"}, {"sha": "14d28b59648c1abfe943890319391d7f82ce3091", "filename": "src/test/ui/expr/malformed_closure/ruby_style_closure.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -5,10 +5,19 @@ LL |         Some(x * 2)\n    |              ^ not found in this scope\n \n error[E0277]: expected a `FnOnce<({integer},)>` closure, found `Option<_>`\n-  --> $DIR/ruby_style_closure.rs:10:22\n+  --> $DIR/ruby_style_closure.rs:10:31\n    |\n-LL |     let p = Some(45).and_then({\n-   |                      ^^^^^^^^ expected an `FnOnce<({integer},)>` closure, found `Option<_>`\n+LL |       let p = Some(45).and_then({\n+   |  ______________________--------_^\n+   | |                      |\n+   | |                      required by a bound introduced by this call\n+LL | |\n+LL | |         |x| println!(\"doubling {}\", x);\n+LL | |         Some(x * 2)\n+   | |         -----------\n+LL | |\n+LL | |     });\n+   | |_____^ expected an `FnOnce<({integer},)>` closure, found `Option<_>`\n    |\n    = help: the trait `FnOnce<({integer},)>` is not implemented for `Option<_>`\n "}, {"sha": "c6f0d5df9b53b3ba44a5f93e32ed5e5232a9da74", "filename": "src/test/ui/extern/extern-wrong-value-type.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: expected a `Fn<()>` closure, found `extern \"C\" fn() {f}`\n   --> $DIR/extern-wrong-value-type.rs:9:11\n    |\n LL |     is_fn(f);\n-   |           ^ expected an `Fn<()>` closure, found `extern \"C\" fn() {f}`\n+   |     ----- ^ expected an `Fn<()>` closure, found `extern \"C\" fn() {f}`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Fn<()>` is not implemented for `extern \"C\" fn() {f}`\n    = note: wrap the `extern \"C\" fn() {f}` in a closure with no arguments: `|| { /* code */ }`"}, {"sha": "0f7520ef7f8a95a80644466eedf36a0a5902a143", "filename": "src/test/ui/feature-gates/feature-gate-unsized_fn_params.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -12,10 +12,10 @@ LL | fn foo(x: &dyn Foo) {\n    |           +\n \n error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time\n-  --> $DIR/feature-gate-unsized_fn_params.rs:24:5\n+  --> $DIR/feature-gate-unsized_fn_params.rs:24:9\n    |\n LL |     foo(*x);\n-   |     ^^^ doesn't have a size known at compile-time\n+   |         ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `(dyn Foo + 'static)`\n    = note: all function arguments must have a statically known size"}, {"sha": "f9fb3a0ef267dbfbd50bfe9f30ecb29ad43c4848", "filename": "src/test/ui/fn/fn-trait-formatting.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -35,7 +35,9 @@ error[E0277]: expected a `Fn<(isize,)>` closure, found `{integer}`\n   --> $DIR/fn-trait-formatting.rs:19:14\n    |\n LL |     needs_fn(1);\n-   |              ^ expected an `Fn<(isize,)>` closure, found `{integer}`\n+   |     -------- ^ expected an `Fn<(isize,)>` closure, found `{integer}`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Fn<(isize,)>` is not implemented for `{integer}`\n note: required by a bound in `needs_fn`"}, {"sha": "4ae745b0ffeacae0b44f51142e7d37db5e1c0246", "filename": "src/test/ui/generator/static-not-unpin.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: `[static generator@$DIR/static-not-unpin.rs:11:25: 13:6]` cannot b\n   --> $DIR/static-not-unpin.rs:14:18\n    |\n LL |     assert_unpin(generator);\n-   |                  ^^^^^^^^^ the trait `Unpin` is not implemented for `[static generator@$DIR/static-not-unpin.rs:11:25: 13:6]`\n+   |     ------------ ^^^^^^^^^ the trait `Unpin` is not implemented for `[static generator@$DIR/static-not-unpin.rs:11:25: 13:6]`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note: consider using `Box::pin`\n note: required by a bound in `assert_unpin`"}, {"sha": "b13226fef6e76fe7ada4ad5948fa3f7428d26faa", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.stderr", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -1,11 +1,19 @@\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/issue-62529-1.rs:80:10\n    |\n-LL |     task(annotate(\n-   |          ^^^^^^^^ expected signature of `for<'r> fn(<RefMutFamily<usize> as FamilyLt<'r>>::Out) -> _`\n-...\n-LL |         |value: &mut usize| {\n-   |         ------------------- found signature of `for<'r> fn(&'r mut usize) -> _`\n+LL |       task(annotate(\n+   |  _____----_^\n+   | |     |\n+   | |     required by a bound introduced by this call\n+LL | |\n+LL | |\n+LL | |         Annotate::<RefMutFamily<usize>>::new(),\n+LL | |         |value: &mut usize| {\n+   | |         ------------------- found signature of `for<'r> fn(&'r mut usize) -> _`\n+LL | |             *value = 2;\n+LL | |         }\n+LL | |     ));\n+   | |_____^ expected signature of `for<'r> fn(<RefMutFamily<usize> as FamilyLt<'r>>::Out) -> _`\n    |\n note: required by a bound in `annotate`\n   --> $DIR/issue-62529-1.rs:44:8\n@@ -20,7 +28,9 @@ error[E0277]: the size for values of type `impl Execute` cannot be known at comp\n   --> $DIR/issue-62529-1.rs:80:10\n    |\n LL |       task(annotate(\n-   |  __________^\n+   |  _____----_^\n+   | |     |\n+   | |     required by a bound introduced by this call\n LL | |\n LL | |\n LL | |         Annotate::<RefMutFamily<usize>>::new(),\n@@ -44,7 +54,9 @@ error[E0277]: the trait bound `impl Execute: Execute` is not satisfied\n   --> $DIR/issue-62529-1.rs:80:10\n    |\n LL |       task(annotate(\n-   |  __________^\n+   |  _____----_^\n+   | |     |\n+   | |     required by a bound introduced by this call\n LL | |\n LL | |\n LL | |         Annotate::<RefMutFamily<usize>>::new(),"}, {"sha": "8cda76b9490c2faa02aa7911ff42ab729a8f9e98", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits-transitive.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits-transitive.rs:47:26\n    |\n LL |     want_bar_for_any_ccx(b);\n-   |                          ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n+   |     -------------------- ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `want_bar_for_any_ccx`\n   --> $DIR/hrtb-higher-ranker-supertraits-transitive.rs:32:15"}, {"sha": "88793a1525bfb7ba98d4bb881f27108607c75698", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `for<'tcx> F: Foo<'tcx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:18:26\n    |\n LL |     want_foo_for_any_tcx(f);\n-   |                          ^ the trait `for<'tcx> Foo<'tcx>` is not implemented for `F`\n+   |     -------------------- ^ the trait `for<'tcx> Foo<'tcx>` is not implemented for `F`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `want_foo_for_any_tcx`\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:22:15\n@@ -20,7 +22,9 @@ error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:35:26\n    |\n LL |     want_bar_for_any_ccx(b);\n-   |                          ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n+   |     -------------------- ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `want_bar_for_any_ccx`\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:39:15"}, {"sha": "7629a5a3be1ea475a59ff154d41fecfb8f7669f6", "filename": "src/test/ui/issues/issue-17651.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17651.rs?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -4,5 +4,4 @@\n fn main() {\n     (|| Box::new(*(&[0][..])))();\n     //~^ ERROR the size for values of type\n-    //~| ERROR the size for values of type\n }"}, {"sha": "214477f6c60ef4881258e7fa883a53453acb06f9", "filename": "src/test/ui/issues/issue-17651.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the size for values of type `[{integer}]` cannot be known at compi\n   --> $DIR/issue-17651.rs:5:18\n    |\n LL |     (|| Box::new(*(&[0][..])))();\n-   |                  ^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |         -------- ^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |         |\n+   |         required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `[{integer}]`\n note: required by `Box::<T>::new`\n@@ -11,16 +13,6 @@ note: required by `Box::<T>::new`\n LL |     pub fn new(x: T) -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the size for values of type `[{integer}]` cannot be known at compilation time\n-  --> $DIR/issue-17651.rs:5:9\n-   |\n-LL |     (|| Box::new(*(&[0][..])))();\n-   |         ^^^^^^^^ doesn't have a size known at compile-time\n-   |\n-   = help: the trait `Sized` is not implemented for `[{integer}]`\n-   = note: all function arguments must have a statically known size\n-   = help: unsized fn params are gated as an unstable feature\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "9c87ee6104a0d27e25f56b3cd47020ca8ccabee1", "filename": "src/test/ui/issues/issue-23966.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: expected a `FnMut<(_, char)>` closure, found `()`\n   --> $DIR/issue-23966.rs:2:32\n    |\n LL |     \"\".chars().fold(|_, _| (), ());\n-   |                                ^^ expected an `FnMut<(_, char)>` closure, found `()`\n+   |                ----            ^^ expected an `FnMut<(_, char)>` closure, found `()`\n+   |                |\n+   |                required by a bound introduced by this call\n    |\n    = help: the trait `FnMut<(_, char)>` is not implemented for `()`\n "}, {"sha": "159cc484c5d4f35c196f66a874c4592d91a31ce1", "filename": "src/test/ui/issues/issue-25076.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-25076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-25076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25076.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `(): InOut<_>` is not satisfied\n   --> $DIR/issue-25076.rs:10:20\n    |\n LL |     do_fold(bot(), ());\n-   |                    ^^ the trait `InOut<_>` is not implemented for `()`\n+   |     -------        ^^ the trait `InOut<_>` is not implemented for `()`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `do_fold`\n   --> $DIR/issue-25076.rs:5:18"}, {"sha": "6a74f4ed489a16828f1224aa340f28d24610bd0c", "filename": "src/test/ui/issues/issue-28098.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:2:28\n    |\n LL |     let _ = Iterator::next(&mut ());\n-   |                            ^^^^^^^ `()` is not an iterator\n+   |             -------------- ^^^^^^^ `()` is not an iterator\n+   |             |\n+   |             required by a bound introduced by this call\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n note: required by `std::iter::Iterator::next`\n@@ -29,7 +31,9 @@ error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:9:28\n    |\n LL |     let _ = Iterator::next(&mut ());\n-   |                            ^^^^^^^ `()` is not an iterator\n+   |             -------------- ^^^^^^^ `()` is not an iterator\n+   |             |\n+   |             required by a bound introduced by this call\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n note: required by `std::iter::Iterator::next`\n@@ -50,7 +54,9 @@ error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:18:28\n    |\n LL |     let _ = Iterator::next(&mut ());\n-   |                            ^^^^^^^ `()` is not an iterator\n+   |             -------------- ^^^^^^^ `()` is not an iterator\n+   |             |\n+   |             required by a bound introduced by this call\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n note: required by `std::iter::Iterator::next`\n@@ -63,7 +69,9 @@ error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:22:28\n    |\n LL |     let _ = Iterator::next(&mut ());\n-   |                            ^^^^^^^ `()` is not an iterator\n+   |             -------------- ^^^^^^^ `()` is not an iterator\n+   |             |\n+   |             required by a bound introduced by this call\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n note: required by `std::iter::Iterator::next`"}, {"sha": "71bbdf5dec7696600f3a02ee2544624d0c097244", "filename": "src/test/ui/issues/issue-30355.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/issue-30355.rs:5:6\n+  --> $DIR/issue-30355.rs:5:8\n    |\n LL |     &X(*Y)\n-   |      ^ doesn't have a size known at compile-time\n+   |        ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n    = note: all function arguments must have a statically known size"}, {"sha": "2e542644b70d4db676b8ab44bef27bf45efd0ca9", "filename": "src/test/ui/issues/issue-47706-trait.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-47706-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-47706-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47706-trait.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -4,7 +4,9 @@ error[E0593]: function is expected to take a single 0-tuple as argument, but it\n LL |     fn f(&self, _: ()) {\n    |     ------------------ takes 2 distinct arguments\n LL |         None::<()>.map(Self::f);\n-   |                        ^^^^^^^ expected function that takes a single 0-tuple as argument\n+   |                    --- ^^^^^^^ expected function that takes a single 0-tuple as argument\n+   |                    |\n+   |                    required by a bound introduced by this call\n \n error: aborting due to previous error\n "}, {"sha": "acf7626c634e3c3100c82ee00e31d8e35701dc26", "filename": "src/test/ui/issues/issue-47706.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -5,7 +5,9 @@ LL |     pub fn new(foo: Option<i32>, _: ()) -> Foo {\n    |     ------------------------------------------ takes 2 arguments\n ...\n LL |         self.foo.map(Foo::new)\n-   |                      ^^^^^^^^ expected function that takes 1 argument\n+   |                  --- ^^^^^^^^ expected function that takes 1 argument\n+   |                  |\n+   |                  required by a bound introduced by this call\n \n error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n   --> $DIR/issue-47706.rs:27:9\n@@ -14,7 +16,9 @@ LL |     Bar(i32),\n    |     -------- takes 1 argument\n ...\n LL |     foo(Qux::Bar);\n-   |         ^^^^^^^^ expected function that takes 0 arguments\n+   |     --- ^^^^^^^^ expected function that takes 0 arguments\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `foo`\n   --> $DIR/issue-47706.rs:22:8"}, {"sha": "9b7fe1ef786f07721f557f1337f72e75b26348e2", "filename": "src/test/ui/issues/issue-59494.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-59494.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-59494.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59494.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: expected a `Fn<(_,)>` closure, found `impl Fn<(((_, _), _),)>`\n   --> $DIR/issue-59494.rs:21:22\n    |\n LL |     let t8 = t8n(t7, t7p(f, g));\n-   |                      ^^^^^^^^^ expected an `Fn<(_,)>` closure, found `impl Fn<(((_, _), _),)>`\n+   |              ---     ^^^^^^^^^ expected an `Fn<(_,)>` closure, found `impl Fn<(((_, _), _),)>`\n+   |              |\n+   |              required by a bound introduced by this call\n    |\n    = help: the trait `Fn<(_,)>` is not implemented for `impl Fn<(((_, _), _),)>`\n note: required by a bound in `t8n`"}, {"sha": "870b25014471d9402ef178545ca6d29e8747281d", "filename": "src/test/ui/issues/issue-60218.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `&u32: Foo` is not satisfied\n-  --> $DIR/issue-60218.rs:18:5\n+  --> $DIR/issue-60218.rs:18:27\n    |\n LL |     trigger_error(vec![], |x: &u32| x)\n-   |     ^^^^^^^^^^^^^ the trait `Foo` is not implemented for `&u32`\n+   |     -------------         ^^^^^^^^^^^ the trait `Foo` is not implemented for `&u32`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `trigger_error`\n   --> $DIR/issue-60218.rs:13:72"}, {"sha": "34893cd8f19d908ffcc7f8b93750145dc5bda854", "filename": "src/test/ui/issues/issue-60283.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,10 +2,11 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/issue-60283.rs:17:13\n    |\n LL |     foo((), drop)\n-   |             ^^^^\n-   |             |\n-   |             expected signature of `for<'a> fn(<() as Trait<'a>>::Item) -> _`\n-   |             found signature of `fn(()) -> _`\n+   |     ---     ^^^^\n+   |     |       |\n+   |     |       expected signature of `for<'a> fn(<() as Trait<'a>>::Item) -> _`\n+   |     |       found signature of `fn(()) -> _`\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `foo`\n   --> $DIR/issue-60283.rs:12:16\n@@ -20,7 +21,9 @@ error[E0277]: the size for values of type `<() as Trait<'_>>::Item` cannot be kn\n   --> $DIR/issue-60283.rs:17:13\n    |\n LL |     foo((), drop)\n-   |             ^^^^ doesn't have a size known at compile-time\n+   |     ---     ^^^^ doesn't have a size known at compile-time\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `<() as Trait<'_>>::Item`\n note: required by a bound in `std::mem::drop`"}, {"sha": "282e236d3d021d84217a3ee3195f2df31e70efc0", "filename": "src/test/ui/issues/issue-66353.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-66353.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-66353.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66353.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -8,7 +8,9 @@ error[E0277]: the trait bound `(): _Func<_>` is not satisfied\n   --> $DIR/issue-66353.rs:12:41\n    |\n LL |     _Func::< <() as _A>::AssocT >::func(());\n-   |                                         ^^ the trait `_Func<_>` is not implemented for `()`\n+   |     ----------------------------------- ^^ the trait `_Func<_>` is not implemented for `()`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by `_Func::func`\n   --> $DIR/issue-66353.rs:4:5"}, {"sha": "0ec5e73f39a855ced018873205deb38b447b0708", "filename": "src/test/ui/issues/issue-87199.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-87199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fissues%2Fissue-87199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-87199.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -20,7 +20,9 @@ error[E0277]: the size for values of type `[i32]` cannot be known at compilation\n   --> $DIR/issue-87199.rs:18:22\n    |\n LL |     ref_arg::<[i32]>(&[5]);\n-   |                      ^^^^ doesn't have a size known at compile-time\n+   |     ---------------- ^^^^ doesn't have a size known at compile-time\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `[i32]`\n note: required by a bound in `ref_arg`"}, {"sha": "89975e9683dbf4eadc3456d9dffcd5504f1135bf", "filename": "src/test/ui/kindck/kindck-impl-type-params-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `Box<{integer}>: Foo` is not satisfied\n   --> $DIR/kindck-impl-type-params-2.rs:13:16\n    |\n LL |     take_param(&x);\n-   |                ^^ the trait `Copy` is not implemented for `Box<{integer}>`\n+   |     ---------- ^^ the trait `Copy` is not implemented for `Box<{integer}>`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required because of the requirements on the impl of `Foo` for `Box<{integer}>`\n   --> $DIR/kindck-impl-type-params-2.rs:6:14"}, {"sha": "016cd393c859195dd812648915ceb3ad76c14741", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.curr.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `Box<{integer}>: Foo` is not satisfied\n   --> $DIR/kindck-inherited-copy-bound.rs:21:16\n    |\n LL |     take_param(&x);\n-   |                ^^ the trait `Copy` is not implemented for `Box<{integer}>`\n+   |     ---------- ^^ the trait `Copy` is not implemented for `Box<{integer}>`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required because of the requirements on the impl of `Foo` for `Box<{integer}>`\n   --> $DIR/kindck-inherited-copy-bound.rs:14:14"}, {"sha": "eaf34dff41bf0f8c083dd1b59da0a22a707846f5", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `Box<{integer}>: Foo` is not satisfied\n   --> $DIR/kindck-inherited-copy-bound.rs:21:16\n    |\n LL |     take_param(&x);\n-   |                ^^ the trait `Copy` is not implemented for `Box<{integer}>`\n+   |     ---------- ^^ the trait `Copy` is not implemented for `Box<{integer}>`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required because of the requirements on the impl of `Foo` for `Box<{integer}>`\n   --> $DIR/kindck-inherited-copy-bound.rs:14:14"}, {"sha": "1f2e169c6813c9eefc4be9839f08a7c8576a141c", "filename": "src/test/ui/mismatched_types/E0631.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -33,7 +33,9 @@ LL |     fn f(_: u64) {}\n    |     ------------ found signature of `fn(u64) -> _`\n ...\n LL |     foo(f);\n-   |         ^ expected signature of `fn(usize) -> _`\n+   |     --- ^ expected signature of `fn(usize) -> _`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `foo`\n   --> $DIR/E0631.rs:3:11\n@@ -48,7 +50,9 @@ LL |     fn f(_: u64) {}\n    |     ------------ found signature of `fn(u64) -> _`\n ...\n LL |     bar(f);\n-   |         ^ expected signature of `fn(usize) -> _`\n+   |     --- ^ expected signature of `fn(usize) -> _`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `bar`\n   --> $DIR/E0631.rs:4:11"}, {"sha": "e8fcf80e940d29b7c152fd791fa359e9978f2002", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -119,7 +119,9 @@ error[E0593]: function is expected to take a single 2-tuple as argument, but it\n   --> $DIR/closure-arg-count.rs:24:57\n    |\n LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(foo);\n-   |                                                         ^^^ expected function that takes a single 2-tuple as argument\n+   |                                                     --- ^^^ expected function that takes a single 2-tuple as argument\n+   |                                                     |\n+   |                                                     required by a bound introduced by this call\n ...\n LL | fn foo() {}\n    | -------- takes 0 arguments\n@@ -130,13 +132,17 @@ error[E0593]: closure is expected to take a single 2-tuple as argument, but it t\n LL |     let bar = |i, x, y| i;\n    |               --------- takes 3 distinct arguments\n LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(bar);\n-   |                                                         ^^^ expected closure that takes a single 2-tuple as argument\n+   |                                                     --- ^^^ expected closure that takes a single 2-tuple as argument\n+   |                                                     |\n+   |                                                     required by a bound introduced by this call\n \n error[E0593]: function is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n   --> $DIR/closure-arg-count.rs:29:57\n    |\n LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(qux);\n-   |                                                         ^^^ expected function that takes a single 2-tuple as argument\n+   |                                                     --- ^^^ expected function that takes a single 2-tuple as argument\n+   |                                                     |\n+   |                                                     required by a bound introduced by this call\n ...\n LL | fn qux(x: usize, y: usize) {}\n    | -------------------------- takes 2 distinct arguments\n@@ -145,13 +151,17 @@ error[E0593]: function is expected to take 1 argument, but it takes 2 arguments\n   --> $DIR/closure-arg-count.rs:32:45\n    |\n LL |     let _it = vec![1, 2, 3].into_iter().map(usize::checked_add);\n-   |                                             ^^^^^^^^^^^^^^^^^^ expected function that takes 1 argument\n+   |                                         --- ^^^^^^^^^^^^^^^^^^ expected function that takes 1 argument\n+   |                                         |\n+   |                                         required by a bound introduced by this call\n \n error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n   --> $DIR/closure-arg-count.rs:35:10\n    |\n LL |     call(Foo);\n-   |          ^^^ expected function that takes 0 arguments\n+   |     ---- ^^^ expected function that takes 0 arguments\n+   |     |\n+   |     required by a bound introduced by this call\n ...\n LL | struct Foo(u8);\n    | --------------- takes 1 argument"}, {"sha": "ce1dde94b5dd021a74f7c42577121fb6745ea1fc", "filename": "src/test/ui/mismatched_types/fn-variance-1.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -5,7 +5,9 @@ LL | fn takes_mut(x: &mut isize) { }\n    | --------------------------- found signature of `for<'r> fn(&'r mut isize) -> _`\n ...\n LL |     apply(&3, takes_mut);\n-   |               ^^^^^^^^^ expected signature of `fn(&{integer}) -> _`\n+   |     -----     ^^^^^^^^^ expected signature of `fn(&{integer}) -> _`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `apply`\n   --> $DIR/fn-variance-1.rs:5:37\n@@ -20,7 +22,9 @@ LL | fn takes_imm(x: &isize) { }\n    | ----------------------- found signature of `for<'r> fn(&'r isize) -> _`\n ...\n LL |     apply(&mut 3, takes_imm);\n-   |                   ^^^^^^^^^ expected signature of `fn(&mut {integer}) -> _`\n+   |     -----         ^^^^^^^^^ expected signature of `fn(&mut {integer}) -> _`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `apply`\n   --> $DIR/fn-variance-1.rs:5:37"}, {"sha": "44ec28f53cc62d5a6ca4cbbc9120378206b1982a", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -16,5 +16,6 @@ pub fn main() {\n     let z = call_it(3, f);\n     //~^ ERROR type mismatch\n     //~| NOTE expected signature of `fn(isize, isize) -> _`\n+    //~| NOTE required by a bound introduced by this call\n     println!(\"{}\", z);\n }"}, {"sha": "f9ef5bc4e39b3680f893345afe5496355d9574a8", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -5,7 +5,9 @@ LL |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n    |                       ----------------------------- found signature of `fn(usize, isize) -> _`\n LL |\n LL |     let z = call_it(3, f);\n-   |                        ^ expected signature of `fn(isize, isize) -> _`\n+   |             -------    ^ expected signature of `fn(isize, isize) -> _`\n+   |             |\n+   |             required by a bound introduced by this call\n    |\n note: required by a bound in `call_it`\n   --> $DIR/unboxed-closures-vtable-mismatch.rs:7:14"}, {"sha": "b3c77b13eafb4e0e352fe249769d8c533d11d8f8", "filename": "src/test/ui/mutexguard-sync.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fmutexguard-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fmutexguard-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmutexguard-sync.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: `Cell<i32>` cannot be shared between threads safely\n   --> $DIR/mutexguard-sync.rs:11:15\n    |\n LL |     test_sync(guard);\n-   |               ^^^^^ `Cell<i32>` cannot be shared between threads safely\n+   |     --------- ^^^^^ `Cell<i32>` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Sync` is not implemented for `Cell<i32>`\n    = note: required because of the requirements on the impl of `Sync` for `MutexGuard<'_, Cell<i32>>`"}, {"sha": "b610857229201a156a3c5967e7cf11625dfd2f7d", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 132, "deletions": 44, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -100,7 +100,9 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:33:11\n    |\n LL |     check(m1::S{});\n-   |           ^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     ----- ^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -112,7 +114,9 @@ error[E0277]: the trait bound `c::S: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:35:11\n    |\n LL |     check(m2::S{});\n-   |           ^^^^^^^ the trait `Impossible` is not implemented for `c::S`\n+   |     ----- ^^^^^^^ the trait `Impossible` is not implemented for `c::S`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -124,7 +128,9 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:36:11\n    |\n LL |     check(m2::S);\n-   |           ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     ----- ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -136,7 +142,9 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:39:11\n    |\n LL |     check(xm1::S{});\n-   |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     ----- ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -148,7 +156,9 @@ error[E0277]: the trait bound `namespace_mix::c::S: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:41:11\n    |\n LL |     check(xm2::S{});\n-   |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::S`\n+   |     ----- ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::S`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -160,7 +170,9 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:42:11\n    |\n LL |     check(xm2::S);\n-   |           ^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     ----- ^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -172,7 +184,9 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:55:11\n    |\n LL |     check(m3::TS{});\n-   |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     ----- ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -184,7 +198,9 @@ error[E0277]: the trait bound `fn() -> c::TS {c::TS}: Impossible` is not satisfi\n   --> $DIR/namespace-mix.rs:56:11\n    |\n LL |     check(m3::TS);\n-   |           ^^^^^^ the trait `Impossible` is not implemented for `fn() -> c::TS {c::TS}`\n+   |     ----- ^^^^^^ the trait `Impossible` is not implemented for `fn() -> c::TS {c::TS}`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -196,7 +212,9 @@ error[E0277]: the trait bound `c::TS: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:57:11\n    |\n LL |     check(m4::TS{});\n-   |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::TS`\n+   |     ----- ^^^^^^^^ the trait `Impossible` is not implemented for `c::TS`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -208,7 +226,9 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:58:11\n    |\n LL |     check(m4::TS);\n-   |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     ----- ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -220,7 +240,9 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:61:11\n    |\n LL |     check(xm3::TS{});\n-   |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     ----- ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -232,7 +254,9 @@ error[E0277]: the trait bound `fn() -> namespace_mix::c::TS {namespace_mix::c::T\n   --> $DIR/namespace-mix.rs:62:11\n    |\n LL |     check(xm3::TS);\n-   |           ^^^^^^^ the trait `Impossible` is not implemented for `fn() -> namespace_mix::c::TS {namespace_mix::c::TS}`\n+   |     ----- ^^^^^^^ the trait `Impossible` is not implemented for `fn() -> namespace_mix::c::TS {namespace_mix::c::TS}`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -244,7 +268,9 @@ error[E0277]: the trait bound `namespace_mix::c::TS: Impossible` is not satisfie\n   --> $DIR/namespace-mix.rs:63:11\n    |\n LL |     check(xm4::TS{});\n-   |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::TS`\n+   |     ----- ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::TS`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -256,7 +282,9 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:64:11\n    |\n LL |     check(xm4::TS);\n-   |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     ----- ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -268,7 +296,9 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:77:11\n    |\n LL |     check(m5::US{});\n-   |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     ----- ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -280,7 +310,9 @@ error[E0277]: the trait bound `c::US: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:78:11\n    |\n LL |     check(m5::US);\n-   |           ^^^^^^ the trait `Impossible` is not implemented for `c::US`\n+   |     ----- ^^^^^^ the trait `Impossible` is not implemented for `c::US`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -292,7 +324,9 @@ error[E0277]: the trait bound `c::US: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:79:11\n    |\n LL |     check(m6::US{});\n-   |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::US`\n+   |     ----- ^^^^^^^^ the trait `Impossible` is not implemented for `c::US`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -304,7 +338,9 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:80:11\n    |\n LL |     check(m6::US);\n-   |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     ----- ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -316,7 +352,9 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:83:11\n    |\n LL |     check(xm5::US{});\n-   |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     ----- ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -328,7 +366,9 @@ error[E0277]: the trait bound `namespace_mix::c::US: Impossible` is not satisfie\n   --> $DIR/namespace-mix.rs:84:11\n    |\n LL |     check(xm5::US);\n-   |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::US`\n+   |     ----- ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::US`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -340,7 +380,9 @@ error[E0277]: the trait bound `namespace_mix::c::US: Impossible` is not satisfie\n   --> $DIR/namespace-mix.rs:85:11\n    |\n LL |     check(xm6::US{});\n-   |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::US`\n+   |     ----- ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::US`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -352,7 +394,9 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:86:11\n    |\n LL |     check(xm6::US);\n-   |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     ----- ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -364,7 +408,9 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:99:11\n    |\n LL |     check(m7::V{});\n-   |           ^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     ----- ^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -376,7 +422,9 @@ error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:101:11\n    |\n LL |     check(m8::V{});\n-   |           ^^^^^^^ the trait `Impossible` is not implemented for `c::E`\n+   |     ----- ^^^^^^^ the trait `Impossible` is not implemented for `c::E`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -388,7 +436,9 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:102:11\n    |\n LL |     check(m8::V);\n-   |           ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     ----- ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -400,7 +450,9 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:105:11\n    |\n LL |     check(xm7::V{});\n-   |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     ----- ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -412,7 +464,9 @@ error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:107:11\n    |\n LL |     check(xm8::V{});\n-   |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n+   |     ----- ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -424,7 +478,9 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:108:11\n    |\n LL |     check(xm8::V);\n-   |           ^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     ----- ^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -436,7 +492,9 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:121:11\n    |\n LL |     check(m9::TV{});\n-   |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     ----- ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -448,7 +506,9 @@ error[E0277]: the trait bound `fn() -> c::E {c::E::TV}: Impossible` is not satis\n   --> $DIR/namespace-mix.rs:122:11\n    |\n LL |     check(m9::TV);\n-   |           ^^^^^^ the trait `Impossible` is not implemented for `fn() -> c::E {c::E::TV}`\n+   |     ----- ^^^^^^ the trait `Impossible` is not implemented for `fn() -> c::E {c::E::TV}`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -460,7 +520,9 @@ error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:123:11\n    |\n LL |     check(mA::TV{});\n-   |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::E`\n+   |     ----- ^^^^^^^^ the trait `Impossible` is not implemented for `c::E`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -472,7 +534,9 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:124:11\n    |\n LL |     check(mA::TV);\n-   |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     ----- ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -484,7 +548,9 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:127:11\n    |\n LL |     check(xm9::TV{});\n-   |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     ----- ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -496,7 +562,9 @@ error[E0277]: the trait bound `fn() -> namespace_mix::c::E {namespace_mix::xm7::\n   --> $DIR/namespace-mix.rs:128:11\n    |\n LL |     check(xm9::TV);\n-   |           ^^^^^^^ the trait `Impossible` is not implemented for `fn() -> namespace_mix::c::E {namespace_mix::xm7::TV}`\n+   |     ----- ^^^^^^^ the trait `Impossible` is not implemented for `fn() -> namespace_mix::c::E {namespace_mix::xm7::TV}`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -508,7 +576,9 @@ error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:129:11\n    |\n LL |     check(xmA::TV{});\n-   |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n+   |     ----- ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -520,7 +590,9 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:130:11\n    |\n LL |     check(xmA::TV);\n-   |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     ----- ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -532,7 +604,9 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:143:11\n    |\n LL |     check(mB::UV{});\n-   |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     ----- ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -544,7 +618,9 @@ error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:144:11\n    |\n LL |     check(mB::UV);\n-   |           ^^^^^^ the trait `Impossible` is not implemented for `c::E`\n+   |     ----- ^^^^^^ the trait `Impossible` is not implemented for `c::E`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -556,7 +632,9 @@ error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:145:11\n    |\n LL |     check(mC::UV{});\n-   |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::E`\n+   |     ----- ^^^^^^^^ the trait `Impossible` is not implemented for `c::E`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -568,7 +646,9 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:146:11\n    |\n LL |     check(mC::UV);\n-   |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     ----- ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -580,7 +660,9 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:149:11\n    |\n LL |     check(xmB::UV{});\n-   |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     ----- ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -592,7 +674,9 @@ error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:150:11\n    |\n LL |     check(xmB::UV);\n-   |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n+   |     ----- ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -604,7 +688,9 @@ error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:151:11\n    |\n LL |     check(xmC::UV{});\n-   |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n+   |     ----- ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13\n@@ -616,7 +702,9 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:152:11\n    |\n LL |     check(xmC::UV);\n-   |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     ----- ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `check`\n   --> $DIR/namespace-mix.rs:21:13"}, {"sha": "ce25da559da3faef9fd6e4d90f6c95722aa8c7c0", "filename": "src/test/ui/no_send-rc.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fno_send-rc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fno_send-rc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-rc.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: `Rc<{integer}>` cannot be sent between threads safely\n   --> $DIR/no_send-rc.rs:7:9\n    |\n LL |     bar(x);\n-   |         ^ `Rc<{integer}>` cannot be sent between threads safely\n+   |     --- ^ `Rc<{integer}>` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Send` is not implemented for `Rc<{integer}>`\n note: required by a bound in `bar`"}, {"sha": "ee7bdf282b740122a7cb3a194c56c03c81518479", "filename": "src/test/ui/no_send-struct.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fno_send-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fno_send-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-struct.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: `Foo` cannot be sent between threads safely\n   --> $DIR/no_send-struct.rs:15:9\n    |\n LL |     bar(x);\n-   |         ^ `Foo` cannot be sent between threads safely\n+   |     --- ^ `Foo` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Send` is not implemented for `Foo`\n note: required by a bound in `bar`"}, {"sha": "9ce3a318f1d3ba22e2329c9dd621c6339297c601", "filename": "src/test/ui/no_share-struct.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fno_share-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fno_share-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_share-struct.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: `Foo` cannot be shared between threads safely\n   --> $DIR/no_share-struct.rs:12:9\n    |\n LL |     bar(x);\n-   |         ^ `Foo` cannot be shared between threads safely\n+   |     --- ^ `Foo` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Sync` is not implemented for `Foo`\n note: required by a bound in `bar`"}, {"sha": "f1dd508a4674163c32e8ec6783793c62fd891db5", "filename": "src/test/ui/object-does-not-impl-trait.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fobject-does-not-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fobject-does-not-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-does-not-impl-trait.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `Box<dyn Foo>: Foo` is not satisfied\n   --> $DIR/object-does-not-impl-trait.rs:6:44\n    |\n LL | fn take_object(f: Box<dyn Foo>) { take_foo(f); }\n-   |                                            ^ the trait `Foo` is not implemented for `Box<dyn Foo>`\n+   |                                   -------- ^ the trait `Foo` is not implemented for `Box<dyn Foo>`\n+   |                                   |\n+   |                                   required by a bound introduced by this call\n    |\n note: required by a bound in `take_foo`\n   --> $DIR/object-does-not-impl-trait.rs:5:15"}, {"sha": "67759d02a161e83db474b5275ba1ac167bee02b8", "filename": "src/test/ui/on-unimplemented/enclosing-scope.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -4,7 +4,9 @@ error[E0277]: the trait bound `Foo: Trait` is not satisfied\n LL |       let x = || {\n    |  _____________-\n LL | |         f(Foo{});\n-   | |           ^^^^^ the trait `Trait` is not implemented for `Foo`\n+   | |         - ^^^^^ the trait `Trait` is not implemented for `Foo`\n+   | |         |\n+   | |         required by a bound introduced by this call\n LL | |         let y = || {\n LL | |             f(Foo{});\n LL | |         };\n@@ -23,7 +25,9 @@ error[E0277]: the trait bound `Foo: Trait` is not satisfied\n LL |           let y = || {\n    |  _________________-\n LL | |             f(Foo{});\n-   | |               ^^^^^ the trait `Trait` is not implemented for `Foo`\n+   | |             - ^^^^^ the trait `Trait` is not implemented for `Foo`\n+   | |             |\n+   | |             required by a bound introduced by this call\n LL | |         };\n    | |_________- in this scope\n    |\n@@ -42,7 +46,9 @@ LL | |         f(Foo{});\n LL | |         let y = || {\n ...  |\n LL | |             f(Foo{});\n-   | |               ^^^^^ the trait `Trait` is not implemented for `Foo`\n+   | |             - ^^^^^ the trait `Trait` is not implemented for `Foo`\n+   | |             |\n+   | |             required by a bound introduced by this call\n ...  |\n LL | |     f(Foo{});\n LL | | }\n@@ -63,7 +69,9 @@ LL | |         f(Foo{});\n LL | |         let y = || {\n ...  |\n LL | |     f(Foo{});\n-   | |       ^^^^^ the trait `Trait` is not implemented for `Foo`\n+   | |     - ^^^^^ the trait `Trait` is not implemented for `Foo`\n+   | |     |\n+   | |     required by a bound introduced by this call\n LL | | }\n    | |_- in this scope\n    |"}, {"sha": "a3658f224260633b69b14b9503596b588fb49a56", "filename": "src/test/ui/on-unimplemented/multiple-impls.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/multiple-impls.rs:33:18\n    |\n LL |     Index::index(&[] as &[i32], 2u32);\n-   |                  ^^^^^^^^^^^^^ trait message\n+   |     ------------ ^^^^^^^^^^^^^ trait message\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n note: required by `Index::index`\n@@ -15,7 +17,9 @@ error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:36:18\n    |\n LL |     Index::index(&[] as &[i32], Foo(2u32));\n-   |                  ^^^^^^^^^^^^^ on impl for Foo\n+   |     ------------ ^^^^^^^^^^^^^ on impl for Foo\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n note: required by `Index::index`\n@@ -28,7 +32,9 @@ error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:39:18\n    |\n LL |     Index::index(&[] as &[i32], Bar(2u32));\n-   |                  ^^^^^^^^^^^^^ on impl for Bar\n+   |     ------------ ^^^^^^^^^^^^^ on impl for Bar\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n note: required by `Index::index`"}, {"sha": "18eca06ba698111d36a1b8c1b6424b23a7127eef", "filename": "src/test/ui/on-unimplemented/on-impl.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/on-impl.rs:22:25\n    |\n LL |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n-   |                         ^^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n+   |     ------------------- ^^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n note: required by `Index::index`"}, {"sha": "1cc653c51cfa1244b46ebeca5f7a71b678c648a6", "filename": "src/test/ui/phantom-auto-trait.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fphantom-auto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fphantom-auto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fphantom-auto-trait.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/phantom-auto-trait.rs:21:12\n    |\n LL |     is_zen(x)\n-   |            ^ `T` cannot be shared between threads safely\n+   |     ------ ^ `T` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required because of the requirements on the impl of `Zen` for `&T`\n   --> $DIR/phantom-auto-trait.rs:10:24\n@@ -29,7 +31,9 @@ error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/phantom-auto-trait.rs:26:12\n    |\n LL |     is_zen(x)\n-   |            ^ `T` cannot be shared between threads safely\n+   |     ------ ^ `T` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required because of the requirements on the impl of `Zen` for `&T`\n   --> $DIR/phantom-auto-trait.rs:10:24"}, {"sha": "0440f17a704deb18f88300aa614dd0c9d027240f", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: can't compare `S` with `S`\n   --> $DIR/call-generic-method-nonconst.rs:19:34\n    |\n LL | pub const EQ: bool = equals_self(&S);\n-   |                                  ^^ no implementation for `S == S`\n+   |                      ----------- ^^ no implementation for `S == S`\n+   |                      |\n+   |                      required by a bound introduced by this call\n    |\n    = help: the trait `PartialEq` is not implemented for `S`\n note: required by a bound in `equals_self`"}, {"sha": "34cd1d2b1074d837610e08bca6d5e547da91debb", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.precise.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -9,6 +9,9 @@ LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n error[E0277]: the trait bound `NonTrivialDrop: Drop` is not satisfied\n   --> $DIR/const-drop-fail.rs:45:5\n    |\n+LL |         const _: () = check($exp);\n+   |                       ----- required by a bound introduced by this call\n+...\n LL |     NonTrivialDrop,\n    |     ^^^^^^^^^^^^^^ the trait `Drop` is not implemented for `NonTrivialDrop`\n    |\n@@ -21,6 +24,9 @@ LL | const fn check<T: ~const Drop>(_: T) {}\n error[E0277]: the trait bound `ConstImplWithDropGlue: Drop` is not satisfied\n   --> $DIR/const-drop-fail.rs:47:5\n    |\n+LL |         const _: () = check($exp);\n+   |                       ----- required by a bound introduced by this call\n+...\n LL |     ConstImplWithDropGlue(NonTrivialDrop),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Drop` is not implemented for `ConstImplWithDropGlue`\n    |\n@@ -45,6 +51,9 @@ LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n error[E0277]: the trait bound `NonTrivialDrop: A` is not satisfied\n   --> $DIR/const-drop-fail.rs:49:5\n    |\n+LL |         const _: () = check($exp);\n+   |                       ----- required by a bound introduced by this call\n+...\n LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `A` is not implemented for `NonTrivialDrop`\n    |"}, {"sha": "34cd1d2b1074d837610e08bca6d5e547da91debb", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.stock.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -9,6 +9,9 @@ LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n error[E0277]: the trait bound `NonTrivialDrop: Drop` is not satisfied\n   --> $DIR/const-drop-fail.rs:45:5\n    |\n+LL |         const _: () = check($exp);\n+   |                       ----- required by a bound introduced by this call\n+...\n LL |     NonTrivialDrop,\n    |     ^^^^^^^^^^^^^^ the trait `Drop` is not implemented for `NonTrivialDrop`\n    |\n@@ -21,6 +24,9 @@ LL | const fn check<T: ~const Drop>(_: T) {}\n error[E0277]: the trait bound `ConstImplWithDropGlue: Drop` is not satisfied\n   --> $DIR/const-drop-fail.rs:47:5\n    |\n+LL |         const _: () = check($exp);\n+   |                       ----- required by a bound introduced by this call\n+...\n LL |     ConstImplWithDropGlue(NonTrivialDrop),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Drop` is not implemented for `ConstImplWithDropGlue`\n    |\n@@ -45,6 +51,9 @@ LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n error[E0277]: the trait bound `NonTrivialDrop: A` is not satisfied\n   --> $DIR/const-drop-fail.rs:49:5\n    |\n+LL |         const _: () = check($exp);\n+   |                       ----- required by a bound introduced by this call\n+...\n LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `A` is not implemented for `NonTrivialDrop`\n    |"}, {"sha": "ea22d1c89b1cc38676067213af1b9f40dabbb0d0", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/fn-traits.stderr", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: expected a `Fn<()>` closure, found `fn() {foo}`\n   --> $DIR/fn-traits.rs:24:10\n    |\n LL |     call(foo);\n-   |          ^^^ expected an `Fn<()>` closure, found `fn() {foo}`\n+   |     ---- ^^^ expected an `Fn<()>` closure, found `fn() {foo}`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Fn<()>` is not implemented for `fn() {foo}`\n    = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }`\n@@ -17,7 +19,9 @@ error[E0277]: expected a `FnMut<()>` closure, found `fn() {foo}`\n   --> $DIR/fn-traits.rs:25:14\n    |\n LL |     call_mut(foo);\n-   |              ^^^ expected an `FnMut<()>` closure, found `fn() {foo}`\n+   |     -------- ^^^ expected an `FnMut<()>` closure, found `fn() {foo}`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `FnMut<()>` is not implemented for `fn() {foo}`\n    = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }`\n@@ -32,7 +36,9 @@ error[E0277]: expected a `FnOnce<()>` closure, found `fn() {foo}`\n   --> $DIR/fn-traits.rs:26:15\n    |\n LL |     call_once(foo);\n-   |               ^^^ expected an `FnOnce<()>` closure, found `fn() {foo}`\n+   |     --------- ^^^ expected an `FnOnce<()>` closure, found `fn() {foo}`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `FnOnce<()>` is not implemented for `fn() {foo}`\n    = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }`\n@@ -47,7 +53,9 @@ error[E0277]: expected a `Fn<()>` closure, found `unsafe fn() {foo_unsafe}`\n   --> $DIR/fn-traits.rs:28:10\n    |\n LL |     call(foo_unsafe);\n-   |          ^^^^^^^^^^ expected an `Fn<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |     ---- ^^^^^^^^^^ expected an `Fn<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Fn<()>` is not implemented for `unsafe fn() {foo_unsafe}`\n    = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }`\n@@ -62,7 +70,9 @@ error[E0277]: expected a `FnMut<()>` closure, found `unsafe fn() {foo_unsafe}`\n   --> $DIR/fn-traits.rs:30:14\n    |\n LL |     call_mut(foo_unsafe);\n-   |              ^^^^^^^^^^ expected an `FnMut<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |     -------- ^^^^^^^^^^ expected an `FnMut<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `FnMut<()>` is not implemented for `unsafe fn() {foo_unsafe}`\n    = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }`\n@@ -77,7 +87,9 @@ error[E0277]: expected a `FnOnce<()>` closure, found `unsafe fn() {foo_unsafe}`\n   --> $DIR/fn-traits.rs:32:15\n    |\n LL |     call_once(foo_unsafe);\n-   |               ^^^^^^^^^^ expected an `FnOnce<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |     --------- ^^^^^^^^^^ expected an `FnOnce<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `FnOnce<()>` is not implemented for `unsafe fn() {foo_unsafe}`\n    = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }`"}, {"sha": "47bd6f6bfa73d0158de9caf50e65c7c293f1fa15", "filename": "src/test/ui/str/str-idx.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -13,7 +13,9 @@ error[E0277]: the type `str` cannot be indexed by `{integer}`\n   --> $DIR/str-idx.rs:4:19\n    |\n LL |     let _ = s.get(4);\n-   |                   ^ string indices are ranges of `usize`\n+   |               --- ^ string indices are ranges of `usize`\n+   |               |\n+   |               required by a bound introduced by this call\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n@@ -23,7 +25,9 @@ error[E0277]: the type `str` cannot be indexed by `{integer}`\n   --> $DIR/str-idx.rs:5:29\n    |\n LL |     let _ = s.get_unchecked(4);\n-   |                             ^ string indices are ranges of `usize`\n+   |               ------------- ^ string indices are ranges of `usize`\n+   |               |\n+   |               required by a bound introduced by this call\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`"}, {"sha": "ab647c75cf1205c88d919bf040775ff230c203a2", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -37,7 +37,9 @@ error[E0277]: the type `str` cannot be indexed by `{integer}`\n   --> $DIR/str-mut-idx.rs:9:15\n    |\n LL |     s.get_mut(1);\n-   |               ^ string indices are ranges of `usize`\n+   |       ------- ^ string indices are ranges of `usize`\n+   |       |\n+   |       required by a bound introduced by this call\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n@@ -47,7 +49,9 @@ error[E0277]: the type `str` cannot be indexed by `{integer}`\n   --> $DIR/str-mut-idx.rs:11:25\n    |\n LL |     s.get_unchecked_mut(1);\n-   |                         ^ string indices are ranges of `usize`\n+   |       ----------------- ^ string indices are ranges of `usize`\n+   |       |\n+   |       required by a bound introduced by this call\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`"}, {"sha": "78ebb3d6bfc245cebfe2b58aa8a040de58a158c4", "filename": "src/test/ui/suggestions/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -5,7 +5,9 @@ LL | async fn foo() {}\n    |          --- consider calling this function\n ...\n LL |     bar(foo);\n-   |         ^^^ `fn() -> impl Future {foo}` is not a future\n+   |     --- ^^^ `fn() -> impl Future {foo}` is not a future\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Future` is not implemented for `fn() -> impl Future {foo}`\n note: required by a bound in `bar`\n@@ -24,7 +26,9 @@ error[E0277]: `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-be\n LL |     let async_closure = async || ();\n    |                         -------- consider calling this closure\n LL |     bar(async_closure);\n-   |         ^^^^^^^^^^^^^ `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]` is not a future\n+   |     --- ^^^^^^^^^^^^^ `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]` is not a future\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Future` is not implemented for `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]`\n note: required by a bound in `bar`"}, {"sha": "b111df49f6e5396c20e6d7ec2c2c49d09164a844", "filename": "src/test/ui/suggestions/fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -5,7 +5,9 @@ LL | fn foo() -> impl T<O=()> { S }\n    |    --- consider calling this function\n ...\n LL |     bar(foo);\n-   |         ^^^ the trait `T` is not implemented for `fn() -> impl T {foo}`\n+   |     --- ^^^ the trait `T` is not implemented for `fn() -> impl T {foo}`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `bar`\n   --> $DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:14:16\n@@ -23,7 +25,9 @@ error[E0277]: the trait bound `[closure@$DIR/fn-ctor-passed-as-arg-where-it-shou\n LL |     let closure = || S;\n    |                   -- consider calling this closure\n LL |     bar(closure);\n-   |         ^^^^^^^ the trait `T` is not implemented for `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:23]`\n+   |     --- ^^^^^^^ the trait `T` is not implemented for `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:23]`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `bar`\n   --> $DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:14:16"}, {"sha": "71779ecb7299f1f14bd0a2cc609a6dc73127bdc0", "filename": "src/test/ui/suggestions/imm-ref-trait-object-literal.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `&S: Trait` is not satisfied\n   --> $DIR/imm-ref-trait-object-literal.rs:12:7\n    |\n LL |   foo(&s);\n-   |       ^^ the trait `Trait` is not implemented for `&S`\n+   |   --- ^^ the trait `Trait` is not implemented for `&S`\n+   |   |\n+   |   required by a bound introduced by this call\n    |\n    = help: the following implementations were found:\n              <&'a mut S as Trait>\n@@ -20,10 +22,11 @@ error[E0277]: the trait bound `S: Trait` is not satisfied\n   --> $DIR/imm-ref-trait-object-literal.rs:13:7\n    |\n LL |   foo(s);\n-   |       ^\n-   |       |\n-   |       expected an implementor of trait `Trait`\n-   |       help: consider mutably borrowing here: `&mut s`\n+   |   --- ^\n+   |   |   |\n+   |   |   expected an implementor of trait `Trait`\n+   |   |   help: consider mutably borrowing here: `&mut s`\n+   |   required by a bound introduced by this call\n    |\n note: required by a bound in `foo`\n   --> $DIR/imm-ref-trait-object-literal.rs:7:11"}, {"sha": "229c4b824f27578726d12947fb1474e77c0ae3f4", "filename": "src/test/ui/suggestions/impl-trait-with-missing-bounds.stderr", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n   --> $DIR/impl-trait-with-missing-bounds.rs:14:13\n    |\n LL |         qux(constraint);\n-   |             ^^^^^^^^^^ `<impl Iterator as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |         --- ^^^^^^^^^^ `<impl Iterator as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |         |\n+   |         required by a bound introduced by this call\n    |\n    = help: the trait `Debug` is not implemented for `<impl Iterator as Iterator>::Item`\n note: required by a bound in `qux`\n@@ -19,7 +21,9 @@ error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n   --> $DIR/impl-trait-with-missing-bounds.rs:22:13\n    |\n LL |         qux(constraint);\n-   |             ^^^^^^^^^^ `<impl Iterator as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |         --- ^^^^^^^^^^ `<impl Iterator as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |         |\n+   |         required by a bound introduced by this call\n    |\n    = help: the trait `Debug` is not implemented for `<impl Iterator as Iterator>::Item`\n note: required by a bound in `qux`\n@@ -36,7 +40,9 @@ error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n   --> $DIR/impl-trait-with-missing-bounds.rs:30:13\n    |\n LL |         qux(constraint);\n-   |             ^^^^^^^^^^ `<impl Iterator as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |         --- ^^^^^^^^^^ `<impl Iterator as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |         |\n+   |         required by a bound introduced by this call\n    |\n    = help: the trait `Debug` is not implemented for `<impl Iterator as Iterator>::Item`\n note: required by a bound in `qux`\n@@ -53,7 +59,9 @@ error[E0277]: `<impl Iterator + std::fmt::Debug as Iterator>::Item` doesn't impl\n   --> $DIR/impl-trait-with-missing-bounds.rs:37:13\n    |\n LL |         qux(constraint);\n-   |             ^^^^^^^^^^ `<impl Iterator + std::fmt::Debug as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |         --- ^^^^^^^^^^ `<impl Iterator + std::fmt::Debug as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |         |\n+   |         required by a bound introduced by this call\n    |\n    = help: the trait `Debug` is not implemented for `<impl Iterator + std::fmt::Debug as Iterator>::Item`\n note: required by a bound in `qux`\n@@ -70,7 +78,9 @@ error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n   --> $DIR/impl-trait-with-missing-bounds.rs:6:13\n    |\n LL |         qux(constraint);\n-   |             ^^^^^^^^^^ `<impl Iterator as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |         --- ^^^^^^^^^^ `<impl Iterator as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |         |\n+   |         required by a bound introduced by this call\n    |\n    = help: the trait `Debug` is not implemented for `<impl Iterator as Iterator>::Item`\n note: required by a bound in `qux`\n@@ -87,7 +97,9 @@ error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n   --> $DIR/impl-trait-with-missing-bounds.rs:45:13\n    |\n LL |         qux(constraint);\n-   |             ^^^^^^^^^^ `<impl Iterator as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |         --- ^^^^^^^^^^ `<impl Iterator as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |         |\n+   |         required by a bound introduced by this call\n    |\n    = help: the trait `Debug` is not implemented for `<impl Iterator as Iterator>::Item`\n note: required by a bound in `qux`"}, {"sha": "93251b2c8dbfc62d91d8102b74300dec54412d43", "filename": "src/test/ui/suggestions/issue-62843.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,10 +2,11 @@ error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   --> $DIR/issue-62843.rs:4:32\n    |\n LL |     println!(\"{:?}\", line.find(pattern));\n-   |                                ^^^^^^^\n-   |                                |\n-   |                                expected an implementor of trait `Pattern<'_>`\n-   |                                help: consider borrowing here: `&pattern`\n+   |                           ---- ^^^^^^^\n+   |                           |    |\n+   |                           |    expected an implementor of trait `Pattern<'_>`\n+   |                           |    help: consider borrowing here: `&pattern`\n+   |                           required by a bound introduced by this call\n    |\n    = note: the trait bound `String: Pattern<'_>` is not satisfied\n    = note: required because of the requirements on the impl of `Pattern<'_>` for `String`"}, {"sha": "a3ab0b8efb060860d1a4e41672c2cd1d586bf5a2", "filename": "src/test/ui/suggestions/issue-79843-impl-trait-with-missing-bounds-on-async-fn.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-79843-impl-trait-with-missing-bounds-on-async-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-79843-impl-trait-with-missing-bounds-on-async-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-79843-impl-trait-with-missing-bounds-on-async-fn.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: `<impl Foo as Foo>::Bar` cannot be sent between threads safely\n   --> $DIR/issue-79843-impl-trait-with-missing-bounds-on-async-fn.rs:14:20\n    |\n LL |     assert_is_send(&bar);\n-   |                    ^^^^ `<impl Foo as Foo>::Bar` cannot be sent between threads safely\n+   |     -------------- ^^^^ `<impl Foo as Foo>::Bar` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Send` is not implemented for `<impl Foo as Foo>::Bar`\n note: required by a bound in `assert_is_send`\n@@ -19,7 +21,9 @@ error[E0277]: `<impl Foo as Foo>::Bar` cannot be sent between threads safely\n   --> $DIR/issue-79843-impl-trait-with-missing-bounds-on-async-fn.rs:24:20\n    |\n LL |     assert_is_send(&bar);\n-   |                    ^^^^ `<impl Foo as Foo>::Bar` cannot be sent between threads safely\n+   |     -------------- ^^^^ `<impl Foo as Foo>::Bar` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Send` is not implemented for `<impl Foo as Foo>::Bar`\n note: required by a bound in `assert_is_send`"}, {"sha": "c1a7a2e101d62476c8951efb94d3cd1d9201bf71", "filename": "src/test/ui/suggestions/issue-84973-2.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,10 +2,11 @@ error[E0277]: the trait bound `i32: Tr` is not satisfied\n   --> $DIR/issue-84973-2.rs:11:9\n    |\n LL |     foo(a);\n-   |         ^\n-   |         |\n-   |         expected an implementor of trait `Tr`\n-   |         help: consider mutably borrowing here: `&mut a`\n+   |     --- ^\n+   |     |   |\n+   |     |   expected an implementor of trait `Tr`\n+   |     |   help: consider mutably borrowing here: `&mut a`\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `foo`\n   --> $DIR/issue-84973-2.rs:7:11"}, {"sha": "6813b07a2ee64069483b5919d7d583d94cc10de1", "filename": "src/test/ui/suggestions/issue-84973-blacklist.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.rs?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -21,7 +21,6 @@ fn main() {\n     let ref_cl: &dyn Fn() -> () = &cl;\n     f_sized(*ref_cl);\n     //~^ ERROR: the size for values of type `dyn Fn()` cannot be known at compilation time [E0277]\n-    //~| ERROR: the size for values of type `dyn Fn()` cannot be known at compilation time [E0277]\n \n     use std::rc::Rc;\n     let rc = Rc::new(0);"}, {"sha": "ae55c96702adaed6e9fd46b0482a968834e5d53c", "filename": "src/test/ui/suggestions/issue-84973-blacklist.stderr", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `String: Copy` is not satisfied\n   --> $DIR/issue-84973-blacklist.rs:15:12\n    |\n LL |     f_copy(\"\".to_string());\n-   |            ^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n+   |     ------ ^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `f_copy`\n   --> $DIR/issue-84973-blacklist.rs:6:14\n@@ -14,7 +16,9 @@ error[E0277]: the trait bound `S: Clone` is not satisfied\n   --> $DIR/issue-84973-blacklist.rs:16:13\n    |\n LL |     f_clone(S);\n-   |             ^ the trait `Clone` is not implemented for `S`\n+   |     ------- ^ the trait `Clone` is not implemented for `S`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `f_clone`\n   --> $DIR/issue-84973-blacklist.rs:7:15\n@@ -39,7 +43,9 @@ error[E0277]: the size for values of type `dyn Fn()` cannot be known at compilat\n   --> $DIR/issue-84973-blacklist.rs:22:13\n    |\n LL |     f_sized(*ref_cl);\n-   |             ^^^^^^^ doesn't have a size known at compile-time\n+   |     ------- ^^^^^^^ doesn't have a size known at compile-time\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `dyn Fn()`\n note: required by a bound in `f_sized`\n@@ -49,10 +55,12 @@ LL | fn f_sized<T: Sized>(t: T) {}\n    |            ^ required by this bound in `f_sized`\n \n error[E0277]: `Rc<{integer}>` cannot be sent between threads safely\n-  --> $DIR/issue-84973-blacklist.rs:28:12\n+  --> $DIR/issue-84973-blacklist.rs:27:12\n    |\n LL |     f_send(rc);\n-   |            ^^ `Rc<{integer}>` cannot be sent between threads safely\n+   |     ------ ^^ `Rc<{integer}>` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Send` is not implemented for `Rc<{integer}>`\n note: required by a bound in `f_send`\n@@ -61,16 +69,6 @@ note: required by a bound in `f_send`\n LL | fn f_send<T: Send>(t: T) {}\n    |              ^^^^ required by this bound in `f_send`\n \n-error[E0277]: the size for values of type `dyn Fn()` cannot be known at compilation time\n-  --> $DIR/issue-84973-blacklist.rs:22:5\n-   |\n-LL |     f_sized(*ref_cl);\n-   |     ^^^^^^^ doesn't have a size known at compile-time\n-   |\n-   = help: the trait `Sized` is not implemented for `dyn Fn()`\n-   = note: all function arguments must have a statically known size\n-   = help: unsized fn params are gated as an unstable feature\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "14b32d8515cd78c82029d5559b79dc693cac2cf9", "filename": "src/test/ui/suggestions/issue-84973-negative.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `i32: Tr` is not satisfied\n   --> $DIR/issue-84973-negative.rs:10:9\n    |\n LL |     bar(a);\n-   |         ^ the trait `Tr` is not implemented for `i32`\n+   |     --- ^ the trait `Tr` is not implemented for `i32`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `bar`\n   --> $DIR/issue-84973-negative.rs:5:11\n@@ -14,10 +16,11 @@ error[E0277]: the trait bound `f32: Tr` is not satisfied\n   --> $DIR/issue-84973-negative.rs:11:9\n    |\n LL |     bar(b);\n-   |         ^\n-   |         |\n-   |         expected an implementor of trait `Tr`\n-   |         help: consider borrowing here: `&b`\n+   |     --- ^\n+   |     |   |\n+   |     |   expected an implementor of trait `Tr`\n+   |     |   help: consider borrowing here: `&b`\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `bar`\n   --> $DIR/issue-84973-negative.rs:5:11"}, {"sha": "169d0cccb43efe05e0c3df6e8f4e75d19489a961", "filename": "src/test/ui/suggestions/issue-84973.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,10 +2,11 @@ error[E0277]: the trait bound `Fancy: SomeTrait` is not satisfied\n   --> $DIR/issue-84973.rs:6:24\n    |\n LL |     let o = Other::new(f);\n-   |                        ^\n-   |                        |\n-   |                        expected an implementor of trait `SomeTrait`\n-   |                        help: consider borrowing here: `&f`\n+   |             ---------- ^\n+   |             |          |\n+   |             |          expected an implementor of trait `SomeTrait`\n+   |             |          help: consider borrowing here: `&f`\n+   |             required by a bound introduced by this call\n    |\n note: required by `Other::<'a, G>::new`\n   --> $DIR/issue-84973.rs:27:5"}, {"sha": "e6a2231390076e02c059bd0b26959f54af4c97ab", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satis\n   --> $DIR/mut-borrow-needed-by-trait.rs:17:29\n    |\n LL |     let fp = BufWriter::new(fp);\n-   |                             ^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n+   |              -------------- ^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n+   |              |\n+   |              required by a bound introduced by this call\n    |\n    = note: `std::io::Write` is implemented for `&mut dyn std::io::Write`, but not for `&dyn std::io::Write`\n note: required by `BufWriter::<W>::new`"}, {"sha": "551a7c5060fc743e9b677ab3a67d63e0954e3fa0", "filename": "src/test/ui/suggestions/restrict-type-argument.stderr", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: `impl Sync` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:4:13\n    |\n LL |     is_send(val);\n-   |             ^^^ `impl Sync` cannot be sent between threads safely\n+   |     ------- ^^^ `impl Sync` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `is_send`\n   --> $DIR/restrict-type-argument.rs:1:15\n@@ -18,7 +20,9 @@ error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:8:13\n    |\n LL |     is_send(val);\n-   |             ^^^ `S` cannot be sent between threads safely\n+   |     ------- ^^^ `S` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `is_send`\n   --> $DIR/restrict-type-argument.rs:1:15\n@@ -34,7 +38,9 @@ error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:12:13\n    |\n LL |     is_send(val);\n-   |             ^^^ `S` cannot be sent between threads safely\n+   |     ------- ^^^ `S` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `is_send`\n   --> $DIR/restrict-type-argument.rs:1:15\n@@ -50,7 +56,9 @@ error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:20:13\n    |\n LL |     is_send(val);\n-   |             ^^^ `S` cannot be sent between threads safely\n+   |     ------- ^^^ `S` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `is_send`\n   --> $DIR/restrict-type-argument.rs:1:15\n@@ -66,7 +74,9 @@ error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:24:13\n    |\n LL |     is_send(val);\n-   |             ^^^ `S` cannot be sent between threads safely\n+   |     ------- ^^^ `S` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `is_send`\n   --> $DIR/restrict-type-argument.rs:1:15\n@@ -82,7 +92,9 @@ error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:28:13\n    |\n LL |     is_send(val);\n-   |             ^^^ `S` cannot be sent between threads safely\n+   |     ------- ^^^ `S` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `is_send`\n   --> $DIR/restrict-type-argument.rs:1:15"}, {"sha": "8dfab8dfa17e5bc1b50b1ab4df1d84cd1721f5ba", "filename": "src/test/ui/suggestions/suggest-change-mut.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `&T: std::io::Read` is not satisfied\n   --> $DIR/suggest-change-mut.rs:12:48\n    |\n LL |         let mut stream_reader = BufReader::new(&stream);\n-   |                                                ^^^^^^^ the trait `std::io::Read` is not implemented for `&T`\n+   |                                 -------------- ^^^^^^^ the trait `std::io::Read` is not implemented for `&T`\n+   |                                 |\n+   |                                 required by a bound introduced by this call\n    |\n note: required by `BufReader::<R>::new`\n   --> $SRC_DIR/std/src/io/buffered/bufreader.rs:LL:COL"}, {"sha": "81e5589d6eb3536e2787c4f32f38ff4447acb623", "filename": "src/test/ui/traits/bound/same-crate-name.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsame-crate-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsame-crate-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsame-crate-name.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `Foo: main::a::Bar` is not satisfied\n   --> $DIR/same-crate-name.rs:31:20\n    |\n LL |         a::try_foo(foo);\n-   |                    ^^^ the trait `main::a::Bar` is not implemented for `Foo`\n+   |         ---------- ^^^ the trait `main::a::Bar` is not implemented for `Foo`\n+   |         |\n+   |         required by a bound introduced by this call\n    |\n help: trait impl with same name found\n   --> $DIR/auxiliary/crate_a2.rs:5:1\n@@ -20,7 +22,9 @@ error[E0277]: the trait bound `DoesNotImplementTrait: main::a::Bar` is not satis\n   --> $DIR/same-crate-name.rs:38:20\n    |\n LL |         a::try_foo(implements_no_traits);\n-   |                    ^^^^^^^^^^^^^^^^^^^^ the trait `main::a::Bar` is not implemented for `DoesNotImplementTrait`\n+   |         ---------- ^^^^^^^^^^^^^^^^^^^^ the trait `main::a::Bar` is not implemented for `DoesNotImplementTrait`\n+   |         |\n+   |         required by a bound introduced by this call\n    |\n note: required by a bound in `try_foo`\n   --> $DIR/auxiliary/crate_a1.rs:3:24\n@@ -32,7 +36,9 @@ error[E0277]: the trait bound `ImplementsWrongTraitConditionally<isize>: main::a\n   --> $DIR/same-crate-name.rs:45:20\n    |\n LL |         a::try_foo(other_variant_implements_mismatched_trait);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `main::a::Bar` is not implemented for `ImplementsWrongTraitConditionally<isize>`\n+   |         ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `main::a::Bar` is not implemented for `ImplementsWrongTraitConditionally<isize>`\n+   |         |\n+   |         required by a bound introduced by this call\n    |\n help: trait impl with same name found\n   --> $DIR/auxiliary/crate_a2.rs:13:1\n@@ -50,7 +56,9 @@ error[E0277]: the trait bound `ImplementsTraitForUsize<isize>: main::a::Bar` is\n   --> $DIR/same-crate-name.rs:51:20\n    |\n LL |         a::try_foo(other_variant_implements_correct_trait);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `main::a::Bar` is not implemented for `ImplementsTraitForUsize<isize>`\n+   |         ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `main::a::Bar` is not implemented for `ImplementsTraitForUsize<isize>`\n+   |         |\n+   |         required by a bound introduced by this call\n    |\n    = help: the following implementations were found:\n              <ImplementsTraitForUsize<usize> as main::a::Bar>"}, {"sha": "7895e50eef5c428e211dd00a54d897f546901ce0", "filename": "src/test/ui/traits/inductive-overflow/supertrait-auto-trait.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -10,7 +10,9 @@ error[E0277]: the trait bound `NoClone: Copy` is not satisfied\n   --> $DIR/supertrait-auto-trait.rs:16:23\n    |\n LL |     let (a, b) = copy(NoClone);\n-   |                       ^^^^^^^ the trait `Copy` is not implemented for `NoClone`\n+   |                  ---- ^^^^^^^ the trait `Copy` is not implemented for `NoClone`\n+   |                  |\n+   |                  required by a bound introduced by this call\n    |\n    = note: required because of the requirements on the impl of `Magic` for `NoClone`\n note: required by a bound in `copy`"}, {"sha": "790e2a81c3a8c0efcdd5ffa6b76b301b866b29b0", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-error.stderr", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: `dummy::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:23:11\n    |\n LL |     Outer(TestType);\n-   |           ^^^^^^^^ `dummy::TestType` cannot be sent between threads safely\n+   |     ----- ^^^^^^^^ `dummy::TestType` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Send` is not implemented for `dummy::TestType`\n note: required by `Outer`\n@@ -28,7 +30,9 @@ error[E0277]: `dummy1b::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:32:13\n    |\n LL |     is_send(TestType);\n-   |             ^^^^^^^^ `dummy1b::TestType` cannot be sent between threads safely\n+   |     ------- ^^^^^^^^ `dummy1b::TestType` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Send` is not implemented for `dummy1b::TestType`\n note: required by a bound in `is_send`\n@@ -41,9 +45,11 @@ error[E0277]: `dummy1c::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:40:13\n    |\n LL |     is_send((8, TestType));\n-   |             ^^^^^^^^^^^^^ `dummy1c::TestType` cannot be sent between threads safely\n+   |     ------- ^^^^^^^^^^^^^ `dummy1c::TestType` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n-   = help: within `({integer}, dummy1c::TestType)`, the trait `Send` is not implemented for `dummy1c::TestType`\n+   = help: the trait `Send` is not implemented for `dummy1c::TestType`\n    = note: required because it appears within the type `({integer}, dummy1c::TestType)`\n note: required by a bound in `is_send`\n   --> $DIR/negated-auto-traits-error.rs:16:15\n@@ -55,10 +61,11 @@ error[E0277]: `dummy2::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:48:13\n    |\n LL |     is_send(Box::new(TestType));\n-   |             ^^^^^^^^^^^^^^^^^^\n-   |             |\n-   |             expected an implementor of trait `Send`\n-   |             help: consider borrowing here: `&Box::new(TestType)`\n+   |     ------- ^^^^^^^^^^^^^^^^^^\n+   |     |       |\n+   |     |       expected an implementor of trait `Send`\n+   |     |       help: consider borrowing here: `&Box::new(TestType)`\n+   |     required by a bound introduced by this call\n    |\n    = note: the trait bound `dummy2::TestType: Send` is not satisfied\n    = note: required because of the requirements on the impl of `Send` for `Unique<dummy2::TestType>`\n@@ -73,9 +80,11 @@ error[E0277]: `dummy3::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:56:13\n    |\n LL |     is_send(Box::new(Outer2(TestType)));\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ `dummy3::TestType` cannot be sent between threads safely\n+   |     ------- ^^^^^^^^^^^^^^^^^^^^^^^^^^ `dummy3::TestType` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n-   = help: within `Outer2<dummy3::TestType>`, the trait `Send` is not implemented for `dummy3::TestType`\n+   = help: the trait `Send` is not implemented for `dummy3::TestType`\n note: required because it appears within the type `Outer2<dummy3::TestType>`\n   --> $DIR/negated-auto-traits-error.rs:12:8\n    |\n@@ -93,10 +102,11 @@ error[E0277]: `main::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:66:13\n    |\n LL |     is_sync(Outer2(TestType));\n-   |             ^^^^^^^^^^^^^^^^\n-   |             |\n-   |             expected an implementor of trait `Sync`\n-   |             help: consider borrowing here: `&Outer2(TestType)`\n+   |     ------- ^^^^^^^^^^^^^^^^\n+   |     |       |\n+   |     |       expected an implementor of trait `Sync`\n+   |     |       help: consider borrowing here: `&Outer2(TestType)`\n+   |     required by a bound introduced by this call\n    |\n    = note: the trait bound `main::TestType: Sync` is not satisfied\n note: required because of the requirements on the impl of `Sync` for `Outer2<main::TestType>`"}, {"sha": "e7d1ee616b34f731f4dfe5bd7e6c54d6d85ffba2", "filename": "src/test/ui/traits/reservation-impl/no-use.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fno-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fno-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fno-use.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `(): MyTrait` is not satisfied\n   --> $DIR/no-use.rs:10:26\n    |\n LL |     <() as MyTrait>::foo(&());\n-   |                          ^^^ the trait `MyTrait` is not implemented for `()`\n+   |     -------------------- ^^^ the trait `MyTrait` is not implemented for `()`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the following implementations were found:\n              <() as MyTrait>"}, {"sha": "2c225f4311d017fd5a72f65dec9f0702b7c02dea", "filename": "src/test/ui/traits/suggest-deferences/issue-39029.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,10 +2,11 @@ error[E0277]: the trait bound `NoToSocketAddrs: ToSocketAddrs` is not satisfied\n   --> $DIR/issue-39029.rs:16:37\n    |\n LL |     let _errors = TcpListener::bind(&bad);\n-   |                                     ^^^^\n-   |                                     |\n-   |                                     the trait `ToSocketAddrs` is not implemented for `NoToSocketAddrs`\n-   |                                     help: consider adding dereference here: `&*bad`\n+   |                   ----------------- ^^^^\n+   |                   |                 |\n+   |                   |                 the trait `ToSocketAddrs` is not implemented for `NoToSocketAddrs`\n+   |                   |                 help: consider adding dereference here: `&*bad`\n+   |                   required by a bound introduced by this call\n    |\n    = note: required because of the requirements on the impl of `ToSocketAddrs` for `&NoToSocketAddrs`\n note: required by a bound in `TcpListener::bind`"}, {"sha": "b77af7ddf474628863341ce536372d48bbed572e", "filename": "src/test/ui/traits/suggest-deferences/issue-62530.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,10 +2,11 @@ error[E0277]: the trait bound `&String: SomeTrait` is not satisfied\n   --> $DIR/issue-62530.rs:13:26\n    |\n LL |     takes_type_parameter(&string);  // Error\n-   |                          ^^^^^^^\n-   |                          |\n-   |                          the trait `SomeTrait` is not implemented for `&String`\n-   |                          help: consider adding dereference here: `&*string`\n+   |     -------------------- ^^^^^^^\n+   |     |                    |\n+   |     |                    the trait `SomeTrait` is not implemented for `&String`\n+   |     |                    help: consider adding dereference here: `&*string`\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `takes_type_parameter`\n   --> $DIR/issue-62530.rs:4:44"}, {"sha": "bf9f85f1b4595ec4d2c541145af0b83ffd637068", "filename": "src/test/ui/traits/suggest-deferences/multiple-0.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,10 +2,11 @@ error[E0277]: the trait bound `&Baz: Happy` is not satisfied\n   --> $DIR/multiple-0.rs:34:9\n    |\n LL |     foo(&baz);\n-   |         ^^^^\n-   |         |\n-   |         the trait `Happy` is not implemented for `&Baz`\n-   |         help: consider adding dereference here: `&***baz`\n+   |     --- ^^^^\n+   |     |   |\n+   |     |   the trait `Happy` is not implemented for `&Baz`\n+   |     |   help: consider adding dereference here: `&***baz`\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `foo`\n   --> $DIR/multiple-0.rs:30:26"}, {"sha": "040fbb3e3e699813fae132946c7076eddfcd92d2", "filename": "src/test/ui/traits/suggest-deferences/multiple-1.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-1.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `&mut Baz: Happy` is not satisfied\n   --> $DIR/multiple-1.rs:52:9\n    |\n LL |     foo(&mut baz);\n-   |         ^^^^^^^^ the trait `Happy` is not implemented for `&mut Baz`\n+   |     --- ^^^^^^^^ the trait `Happy` is not implemented for `&mut Baz`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `foo`\n   --> $DIR/multiple-1.rs:45:26"}, {"sha": "d9e0d21541edefaa2ac7cd83cdde96bf95bfe68f", "filename": "src/test/ui/trivial-bounds/trivial-bounds-leak.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -24,7 +24,9 @@ error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/trivial-bounds-leak.rs:25:15\n    |\n LL |     Foo::test(&4i32);\n-   |               ^^^^^ the trait `Foo` is not implemented for `i32`\n+   |     --------- ^^^^^ the trait `Foo` is not implemented for `i32`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by `Foo::test`\n   --> $DIR/trivial-bounds-leak.rs:5:5\n@@ -36,7 +38,9 @@ error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/trivial-bounds-leak.rs:26:22\n    |\n LL |     generic_function(5i32);\n-   |                      ^^^^ the trait `Foo` is not implemented for `i32`\n+   |     ---------------- ^^^^ the trait `Foo` is not implemented for `i32`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `generic_function`\n   --> $DIR/trivial-bounds-leak.rs:29:24"}, {"sha": "4b5804253b23b7efa555e35ce0ff0601eab5bc97", "filename": "src/test/ui/typeck/typeck-unsafe-always-share.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: `UnsafeCell<MySync<{integer}>>` cannot be shared between threads s\n   --> $DIR/typeck-unsafe-always-share.rs:19:10\n    |\n LL |     test(us);\n-   |          ^^ `UnsafeCell<MySync<{integer}>>` cannot be shared between threads safely\n+   |     ---- ^^ `UnsafeCell<MySync<{integer}>>` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Sync` is not implemented for `UnsafeCell<MySync<{integer}>>`\n note: required by a bound in `test`\n@@ -15,7 +17,9 @@ error[E0277]: `UnsafeCell<NoSync>` cannot be shared between threads safely\n   --> $DIR/typeck-unsafe-always-share.rs:23:10\n    |\n LL |     test(uns);\n-   |          ^^^ `UnsafeCell<NoSync>` cannot be shared between threads safely\n+   |     ---- ^^^ `UnsafeCell<NoSync>` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Sync` is not implemented for `UnsafeCell<NoSync>`\n note: required by a bound in `test`\n@@ -46,7 +50,9 @@ error[E0277]: `NoSync` cannot be shared between threads safely\n   --> $DIR/typeck-unsafe-always-share.rs:30:10\n    |\n LL |     test(NoSync);\n-   |          ^^^^^^ `NoSync` cannot be shared between threads safely\n+   |     ---- ^^^^^^ `NoSync` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Sync` is not implemented for `NoSync`\n note: required by a bound in `test`"}, {"sha": "c8ce3091cf611f54d71be90a106296a2f9afc3ce", "filename": "src/test/ui/unboxed-closures/unboxed-closures-fnmut-as-fn.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: expected a `Fn<(isize,)>` closure, found `S`\n   --> $DIR/unboxed-closures-fnmut-as-fn.rs:28:21\n    |\n LL |     let x = call_it(&S, 22);\n-   |                     ^^ expected an `Fn<(isize,)>` closure, found `S`\n+   |             ------- ^^ expected an `Fn<(isize,)>` closure, found `S`\n+   |             |\n+   |             required by a bound introduced by this call\n    |\n    = help: the trait `Fn<(isize,)>` is not implemented for `S`\n note: required by a bound in `call_it`"}, {"sha": "c9a20232f3508891f71b2e47d4afdcbe80c08783", "filename": "src/test/ui/unboxed-closures/unboxed-closures-unsafe-extern-fn.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: expected a `Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r i\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:20:21\n    |\n LL |     let x = call_it(&square, 22);\n-   |                     ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |             ------- ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |             |\n+   |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n note: required by a bound in `call_it`\n@@ -15,7 +17,9 @@ error[E0277]: expected a `FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:25:25\n    |\n LL |     let y = call_it_mut(&mut square, 22);\n-   |                         ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |             ----------- ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |             |\n+   |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n note: required by a bound in `call_it_mut`\n@@ -28,7 +32,9 @@ error[E0277]: expected a `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:30:26\n    |\n LL |     let z = call_it_once(square, 22);\n-   |                          ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |             ------------ ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |             |\n+   |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n note: required by a bound in `call_it_once`"}, {"sha": "77c176de625ca95e456b7d3af0dd3a7b3e631b7e", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-abi.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: expected a `Fn<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&\n   --> $DIR/unboxed-closures-wrong-abi.rs:20:21\n    |\n LL |     let x = call_it(&square, 22);\n-   |                     ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   |             ------- ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   |             |\n+   |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n note: required by a bound in `call_it`\n@@ -15,7 +17,9 @@ error[E0277]: expected a `FnMut<(&isize,)>` closure, found `for<'r> extern \"C\" f\n   --> $DIR/unboxed-closures-wrong-abi.rs:25:25\n    |\n LL |     let y = call_it_mut(&mut square, 22);\n-   |                         ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   |             ----------- ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   |             |\n+   |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n note: required by a bound in `call_it_mut`\n@@ -28,7 +32,9 @@ error[E0277]: expected a `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\"\n   --> $DIR/unboxed-closures-wrong-abi.rs:30:26\n    |\n LL |     let z = call_it_once(square, 22);\n-   |                          ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   |             ------------ ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   |             |\n+   |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n note: required by a bound in `call_it_once`"}, {"sha": "64d57773d70810ccec4703af0df870e999938150", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-arg-type-extern-fn.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: expected a `Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isi\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:21:21\n    |\n LL |     let x = call_it(&square, 22);\n-   |                     ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |             ------- ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |             |\n+   |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n note: required by a bound in `call_it`\n@@ -15,7 +17,9 @@ error[E0277]: expected a `FnMut<(&isize,)>` closure, found `unsafe fn(isize) ->\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:26:25\n    |\n LL |     let y = call_it_mut(&mut square, 22);\n-   |                         ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |             ----------- ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |             |\n+   |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n note: required by a bound in `call_it_mut`\n@@ -28,7 +32,9 @@ error[E0277]: expected a `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) ->\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:31:26\n    |\n LL |     let z = call_it_once(square, 22);\n-   |                          ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |             ------------ ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |             |\n+   |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n note: required by a bound in `call_it_once`"}, {"sha": "6686e55130fb453579d774d736238a9282612281", "filename": "src/test/ui/unsized-locals/unsized-exprs.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -12,9 +12,11 @@ error[E0277]: the size for values of type `[u8]` cannot be known at compilation\n   --> $DIR/unsized-exprs.rs:24:22\n    |\n LL |     udrop::<A<[u8]>>(A { 0: *foo() });\n-   |                      ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |     ---------------- ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n-   = help: within `A<[u8]>`, the trait `Sized` is not implemented for `[u8]`\n+   = help: the trait `Sized` is not implemented for `[u8]`\n note: required because it appears within the type `A<[u8]>`\n   --> $DIR/unsized-exprs.rs:3:8\n    |"}, {"sha": "39b6583bc4ec4123d915ad1372e47022b1c6973e", "filename": "src/test/ui/unsized/unsized3.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Funsized%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Funsized%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized3.rs?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -44,8 +44,6 @@ fn f9<X: ?Sized>(x1: Box<S<X>>) {\n fn f10<X: ?Sized>(x1: Box<S<X>>) {\n     f5(&(32, *x1));\n     //~^ ERROR the size for values of type\n-    //~| ERROR the size for values of type\n }\n \n-pub fn main() {\n-}\n+pub fn main() {}"}, {"sha": "ae89f2f997728cc2de862b0cca3517d81bdedc03", "filename": "src/test/ui/unsized/unsized3.stderr", "status": "modified", "additions": 17, "deletions": 36, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -4,7 +4,9 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | fn f1<X: ?Sized>(x: &X) {\n    |       - this type parameter needs to be `std::marker::Sized`\n LL |     f2::<X>(x);\n-   |             ^ doesn't have a size known at compile-time\n+   |     ------- ^ doesn't have a size known at compile-time\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `f2`\n   --> $DIR/unsized3.rs:10:7\n@@ -27,7 +29,9 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | fn f3<X: ?Sized + T>(x: &X) {\n    |       - this type parameter needs to be `std::marker::Sized`\n LL |     f4::<X>(x);\n-   |             ^ doesn't have a size known at compile-time\n+   |     ------- ^ doesn't have a size known at compile-time\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `f4`\n   --> $DIR/unsized3.rs:21:7\n@@ -50,7 +54,9 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n    |       - this type parameter needs to be `std::marker::Sized`\n LL |     f5(x1);\n-   |        ^^ doesn't have a size known at compile-time\n+   |     -- ^^ doesn't have a size known at compile-time\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required because it appears within the type `S<X>`\n   --> $DIR/unsized3.rs:28:8\n@@ -78,7 +84,9 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | fn f9<X: ?Sized>(x1: Box<S<X>>) {\n    |       - this type parameter needs to be `std::marker::Sized`\n LL |     f5(&(*x1, 34));\n-   |        ^^^^^^^^^^ doesn't have a size known at compile-time\n+   |     -- ^^^^^^^^^^ doesn't have a size known at compile-time\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required because it appears within the type `S<X>`\n   --> $DIR/unsized3.rs:28:8\n@@ -92,56 +100,29 @@ LL - fn f9<X: ?Sized>(x1: Box<S<X>>) {\n LL + fn f9<X>(x1: Box<S<X>>) {\n    | \n \n-error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized3.rs:45:9\n-   |\n-LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n-   |        - this type parameter needs to be `std::marker::Sized`\n-LL |     f5(&(32, *x1));\n-   |         ^^^^^^^^^ doesn't have a size known at compile-time\n-   |\n-note: required because it appears within the type `S<X>`\n-  --> $DIR/unsized3.rs:28:8\n-   |\n-LL | struct S<X: ?Sized> {\n-   |        ^\n-   = note: required because it appears within the type `({integer}, S<X>)`\n-   = note: tuples must have a statically known size to be initialized\n-help: consider removing the `?Sized` bound to make the type parameter `Sized`\n-   |\n-LL - fn f10<X: ?Sized>(x1: Box<S<X>>) {\n-LL + fn f10<X>(x1: Box<S<X>>) {\n-   | \n-\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:45:8\n    |\n LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n    |        - this type parameter needs to be `std::marker::Sized`\n LL |     f5(&(32, *x1));\n-   |        ^^^^^^^^^^ doesn't have a size known at compile-time\n+   |     -- ^^^^^^^^^^ doesn't have a size known at compile-time\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required because it appears within the type `S<X>`\n   --> $DIR/unsized3.rs:28:8\n    |\n LL | struct S<X: ?Sized> {\n    |        ^\n    = note: required because it appears within the type `({integer}, S<X>)`\n-note: required by a bound in `f5`\n-  --> $DIR/unsized3.rs:24:7\n-   |\n-LL | fn f5<Y>(x: &Y) {}\n-   |       ^ required by this bound in `f5`\n+   = note: tuples must have a statically known size to be initialized\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f10<X: ?Sized>(x1: Box<S<X>>) {\n LL + fn f10<X>(x1: Box<S<X>>) {\n    | \n-help: consider relaxing the implicit `Sized` restriction\n-   |\n-LL | fn f5<Y: ?Sized>(x: &Y) {}\n-   |        ++++++++\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "c5fff622b6b232941913ef93fe33ee2fa67a3fd1", "filename": "src/test/ui/vtable-res-trait-param.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fvtable-res-trait-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fvtable-res-trait-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvtable-res-trait-param.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `{integer}: TraitA` is not satisfied\n   --> $DIR/vtable-res-trait-param.rs:17:18\n    |\n LL |     b.gimme_an_a(y)\n-   |                  ^ the trait `TraitA` is not implemented for `{integer}`\n+   |       ---------- ^ the trait `TraitA` is not implemented for `{integer}`\n+   |       |\n+   |       required by a bound introduced by this call\n \n error: aborting due to previous error\n "}, {"sha": "43fbc0a9061cff74b220d25f6a5dd3f65440acc7", "filename": "src/test/ui/where-clauses/where-clause-constraints-are-local-for-inherent-impl.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/where-clause-constraints-are-local-for-inherent-impl.rs:13:22\n    |\n LL |         require_copy(self.x);\n-   |                      ^^^^^^ the trait `Copy` is not implemented for `T`\n+   |         ------------ ^^^^^^ the trait `Copy` is not implemented for `T`\n+   |         |\n+   |         required by a bound introduced by this call\n    |\n note: required by a bound in `require_copy`\n   --> $DIR/where-clause-constraints-are-local-for-inherent-impl.rs:1:20"}, {"sha": "f2db8fcc4a3f5e13f1ce9616ef73492e55ab790c", "filename": "src/test/ui/where-clauses/where-clause-constraints-are-local-for-trait-impl.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/where-clause-constraints-are-local-for-trait-impl.rs:18:22\n    |\n LL |         require_copy(self.x);\n-   |                      ^^^^^^ the trait `Copy` is not implemented for `T`\n+   |         ------------ ^^^^^^ the trait `Copy` is not implemented for `T`\n+   |         |\n+   |         required by a bound introduced by this call\n    |\n note: required by a bound in `require_copy`\n   --> $DIR/where-clause-constraints-are-local-for-trait-impl.rs:1:20"}, {"sha": "3223dca3cddbfdb86e2c255e98c2068fd1fe8477", "filename": "src/test/ui/where-clauses/where-clauses-method-unsatisfied.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36621057d9f497c822eb800934b5933c10510cf/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr?ref=e36621057d9f497c822eb800934b5933c10510cf", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `Bar: Eq` is not satisfied\n   --> $DIR/where-clauses-method-unsatisfied.rs:18:14\n    |\n LL |     x.equals(&x);\n-   |              ^^ the trait `Eq` is not implemented for `Bar`\n+   |       ------ ^^ the trait `Eq` is not implemented for `Bar`\n+   |       |\n+   |       required by a bound introduced by this call\n \n error: aborting due to previous error\n "}]}