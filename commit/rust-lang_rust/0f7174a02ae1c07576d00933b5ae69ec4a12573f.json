{"sha": "0f7174a02ae1c07576d00933b5ae69ec4a12573f", "node_id": "C_kwDOAAsO6NoAKDBmNzE3NGEwMmFlMWMwNzU3NmQwMDkzM2I1YWU2OWVjNGExMjU3M2Y", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-05-31T17:10:34Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-06-16T15:39:12Z"}, "message": "Re-use the deref-pattern recursion instead of duplicating the logic", "tree": {"sha": "d0f9517d1e7d592988e1f21cfc5b125c9e0b8288", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0f9517d1e7d592988e1f21cfc5b125c9e0b8288"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f7174a02ae1c07576d00933b5ae69ec4a12573f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f7174a02ae1c07576d00933b5ae69ec4a12573f", "html_url": "https://github.com/rust-lang/rust/commit/0f7174a02ae1c07576d00933b5ae69ec4a12573f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f7174a02ae1c07576d00933b5ae69ec4a12573f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2304917aad2f18ee9a1c6969e1197c96dee907b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2304917aad2f18ee9a1c6969e1197c96dee907b6", "html_url": "https://github.com/rust-lang/rust/commit/2304917aad2f18ee9a1c6969e1197c96dee907b6"}], "stats": {"total": 85, "additions": 26, "deletions": 59}, "files": [{"sha": "a2e00d3bfc57d81c2a33eb9ebc50f62d74ff015d", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 26, "deletions": 59, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/0f7174a02ae1c07576d00933b5ae69ec4a12573f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7174a02ae1c07576d00933b5ae69ec4a12573f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=0f7174a02ae1c07576d00933b5ae69ec4a12573f", "patch": "@@ -359,6 +359,15 @@ impl<'tcx> ConstToPat<'tcx> {\n                     def.non_enum_variant().fields.iter().map(|field| field.ty(self.tcx(), substs)),\n                 ))?,\n             },\n+            ty::Slice(elem_ty) => PatKind::Slice {\n+                prefix: cv\n+                    .unwrap_branch()\n+                    .iter()\n+                    .map(|val| self.recur(*val, *elem_ty, false))\n+                    .collect::<Result<_, _>>()?,\n+                slice: None,\n+                suffix: Box::new([]),\n+            },\n             ty::Array(elem_ty, _) => PatKind::Array {\n                 prefix: cv\n                     .unwrap_branch()\n@@ -372,70 +381,16 @@ impl<'tcx> ConstToPat<'tcx> {\n                 // `&str` is represented as a valtree, let's keep using this\n                 // optimization for now.\n                 ty::Str => PatKind::Constant { value: mir::ConstantKind::Ty(tcx.mk_const(cv, ty)) },\n-                // `b\"foo\"` produces a `&[u8; 3]`, but you can't use constants of array type when\n-                // matching against references, you can only use byte string literals.\n-                // The typechecker has a special case for byte string literals, by treating them\n-                // as slices. This means we turn `&[T; N]` constants into slice patterns, which\n-                // has no negative effects on pattern matching, even if we're actually matching on\n-                // arrays.\n-                ty::Array(elem_ty, _) if !self.treat_byte_string_as_slice => {\n-                    let old = self.behind_reference.replace(true);\n-                    // References have the same valtree representation as their pointee.\n-                    let array = cv;\n-                    let val = PatKind::Deref {\n-                        subpattern: Box::new(Pat {\n-                            kind: PatKind::Array {\n-                                prefix: array.unwrap_branch()\n-                                    .iter()\n-                                    .map(|val| self.recur(*val, elem_ty, false))\n-                                    .collect::<Result<_, _>>()?,\n-                                slice: None,\n-                                suffix: Box::new([]),\n-                            },\n-                            span,\n-                            ty: tcx.mk_slice(elem_ty),\n-                        }),\n-                    };\n-                    self.behind_reference.set(old);\n-                    val\n-                }\n-                ty::Array(elem_ty, _) |\n-                // Cannot merge this with the catch all branch below, because the `const_deref`\n-                // changes the type from slice to array, we need to keep the original type in the\n-                // pattern.\n-                ty::Slice(elem_ty) => {\n-                    let old = self.behind_reference.replace(true);\n-                    // References have the same valtree representation as their pointee.\n-                    let array = cv;\n-                    let val = PatKind::Deref {\n-                        subpattern: Box::new(Pat {\n-                            kind: PatKind::Slice {\n-                                prefix: array.unwrap_branch()\n-                                    .iter()\n-                                    .map(|val| self.recur(*val, elem_ty, false))\n-                                    .collect::<Result<_, _>>()?,\n-                                slice: None,\n-                                suffix: Box::new([]),\n-                            },\n-                            span,\n-                            ty: tcx.mk_slice(elem_ty),\n-                        }),\n-                    };\n-                    self.behind_reference.set(old);\n-                    val\n-                }\n                 // Backwards compatibility hack: support references to non-structural types,\n                 // but hard error if we aren't behind a double reference. We could just use\n                 // the fallback code path below, but that would allow *more* of this fishy\n                 // code to compile, as then it only goes through the future incompat lint\n                 // instead of a hard error.\n                 ty::Adt(_, _) if !self.type_marked_structural(*pointee_ty) => {\n                     if self.behind_reference.get() {\n-                        if !self.saw_const_match_error.get()\n-                            && !self.saw_const_match_lint.get()\n-                        {\n-                           self.saw_const_match_lint.set(true);\n-                           tcx.emit_spanned_lint(\n+                        if !self.saw_const_match_error.get() && !self.saw_const_match_lint.get() {\n+                            self.saw_const_match_lint.set(true);\n+                            tcx.emit_spanned_lint(\n                                 lint::builtin::INDIRECT_STRUCTURAL_MATCH,\n                                 self.id,\n                                 span,\n@@ -456,16 +411,28 @@ impl<'tcx> ConstToPat<'tcx> {\n                 // convert the dereferenced constant to a pattern that is the sub-pattern of the\n                 // deref pattern.\n                 _ => {\n-                    if !pointee_ty.is_sized(tcx, param_env) {\n+                    if !pointee_ty.is_sized(tcx, param_env) && !pointee_ty.is_slice() {\n                         let err = UnsizedPattern { span, non_sm_ty: *pointee_ty };\n                         tcx.sess.emit_err(err);\n \n                         // FIXME: introduce PatKind::Error to silence follow up diagnostics due to unreachable patterns.\n                         PatKind::Wild\n                     } else {\n                         let old = self.behind_reference.replace(true);\n+                        // `b\"foo\"` produces a `&[u8; 3]`, but you can't use constants of array type when\n+                        // matching against references, you can only use byte string literals.\n+                        // The typechecker has a special case for byte string literals, by treating them\n+                        // as slices. This means we turn `&[T; N]` constants into slice patterns, which\n+                        // has no negative effects on pattern matching, even if we're actually matching on\n+                        // arrays.\n+                        let pointee_ty = match *pointee_ty.kind() {\n+                            ty::Array(elem_ty, _) if self.treat_byte_string_as_slice => {\n+                                tcx.mk_slice(elem_ty)\n+                            }\n+                            _ => *pointee_ty,\n+                        };\n                         // References have the same valtree representation as their pointee.\n-                        let subpattern = self.recur(cv, *pointee_ty, false)?;\n+                        let subpattern = self.recur(cv, pointee_ty, false)?;\n                         self.behind_reference.set(old);\n                         PatKind::Deref { subpattern }\n                     }"}]}