{"sha": "0e82c5302819abd65e7cf238e1b269673eb91d99", "node_id": "C_kwDOAAsO6NoAKDBlODJjNTMwMjgxOWFiZDY1ZTdjZjIzOGUxYjI2OTY3M2ViOTFkOTk", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2022-07-03T14:02:20Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2022-07-03T14:17:17Z"}, "message": "Add cargo:rustc-check-cfg to rustc_llvm build script", "tree": {"sha": "787648b28d54c8501b9f67a0c0caff772730335a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/787648b28d54c8501b9f67a0c0caff772730335a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e82c5302819abd65e7cf238e1b269673eb91d99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e82c5302819abd65e7cf238e1b269673eb91d99", "html_url": "https://github.com/rust-lang/rust/commit/0e82c5302819abd65e7cf238e1b269673eb91d99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e82c5302819abd65e7cf238e1b269673eb91d99/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f99f9e48ed77a99747c6d07b42fdfe500f1a7de0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f99f9e48ed77a99747c6d07b42fdfe500f1a7de0", "html_url": "https://github.com/rust-lang/rust/commit/f99f9e48ed77a99747c6d07b42fdfe500f1a7de0"}], "stats": {"total": 62, "additions": 29, "deletions": 33}, "files": [{"sha": "62ef5804dce6d7491f1a8c79620d4986114ed745", "filename": "compiler/rustc_llvm/build.rs", "status": "modified", "additions": 29, "deletions": 33, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0e82c5302819abd65e7cf238e1b269673eb91d99/compiler%2Frustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e82c5302819abd65e7cf238e1b269673eb91d99/compiler%2Frustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fbuild.rs?ref=0e82c5302819abd65e7cf238e1b269673eb91d99", "patch": "@@ -4,6 +4,29 @@ use std::fmt::Display;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n \n+const OPTIONAL_COMPONENTS: &[&str] = &[\n+    \"x86\",\n+    \"arm\",\n+    \"aarch64\",\n+    \"amdgpu\",\n+    \"avr\",\n+    \"m68k\",\n+    \"mips\",\n+    \"powerpc\",\n+    \"systemz\",\n+    \"jsbackend\",\n+    \"webassembly\",\n+    \"msp430\",\n+    \"sparc\",\n+    \"nvptx\",\n+    \"hexagon\",\n+    \"riscv\",\n+    \"bpf\",\n+];\n+\n+const REQUIRED_COMPONENTS: &[&str] =\n+    &[\"ipo\", \"bitreader\", \"bitwriter\", \"linker\", \"asmparser\", \"lto\", \"coverage\", \"instrumentation\"];\n+\n fn detect_llvm_link() -> (&'static str, &'static str) {\n     // Force the link mode we want, preferring static by default, but\n     // possibly overridden by `configure --enable-llvm-link-shared`.\n@@ -76,6 +99,10 @@ fn output(cmd: &mut Command) -> String {\n }\n \n fn main() {\n+    for component in REQUIRED_COMPONENTS.iter().chain(OPTIONAL_COMPONENTS.iter()) {\n+        println!(\"cargo:rustc-check-cfg=values(llvm_component,\\\"{}\\\")\", component);\n+    }\n+\n     if tracked_env_var_os(\"RUST_CHECK\").is_some() {\n         // If we're just running `check`, there's no need for LLVM to be built.\n         return;\n@@ -131,42 +158,11 @@ fn main() {\n     let host = env::var(\"HOST\").expect(\"HOST was not set\");\n     let is_crossed = target != host;\n \n-    let optional_components = &[\n-        \"x86\",\n-        \"arm\",\n-        \"aarch64\",\n-        \"amdgpu\",\n-        \"avr\",\n-        \"m68k\",\n-        \"mips\",\n-        \"powerpc\",\n-        \"systemz\",\n-        \"jsbackend\",\n-        \"webassembly\",\n-        \"msp430\",\n-        \"sparc\",\n-        \"nvptx\",\n-        \"hexagon\",\n-        \"riscv\",\n-        \"bpf\",\n-    ];\n-\n-    let required_components = &[\n-        \"ipo\",\n-        \"bitreader\",\n-        \"bitwriter\",\n-        \"linker\",\n-        \"asmparser\",\n-        \"lto\",\n-        \"coverage\",\n-        \"instrumentation\",\n-    ];\n-\n     let components = output(Command::new(&llvm_config).arg(\"--components\"));\n     let mut components = components.split_whitespace().collect::<Vec<_>>();\n-    components.retain(|c| optional_components.contains(c) || required_components.contains(c));\n+    components.retain(|c| OPTIONAL_COMPONENTS.contains(c) || REQUIRED_COMPONENTS.contains(c));\n \n-    for component in required_components {\n+    for component in REQUIRED_COMPONENTS {\n         if !components.contains(component) {\n             panic!(\"require llvm component {} but wasn't found\", component);\n         }"}]}