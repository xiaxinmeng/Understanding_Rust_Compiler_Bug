{"sha": "d11315ebfb4c2d95a1ca6c52bec105237b10e933", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMTMxNWViZmI0YzJkOTVhMWNhNmM1MmJlYzEwNTIzN2IxMGU5MzM=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-03-15T20:10:08Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-04-05T15:05:34Z"}, "message": "Fix misleading function names", "tree": {"sha": "0a02eb871f2836907976d0e8b43bfef1ffea8a2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a02eb871f2836907976d0e8b43bfef1ffea8a2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d11315ebfb4c2d95a1ca6c52bec105237b10e933", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d11315ebfb4c2d95a1ca6c52bec105237b10e933", "html_url": "https://github.com/rust-lang/rust/commit/d11315ebfb4c2d95a1ca6c52bec105237b10e933", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d11315ebfb4c2d95a1ca6c52bec105237b10e933/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cc091bc6e307c4e46f94aac6cf54d0e0e2ce70a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cc091bc6e307c4e46f94aac6cf54d0e0e2ce70a", "html_url": "https://github.com/rust-lang/rust/commit/5cc091bc6e307c4e46f94aac6cf54d0e0e2ce70a"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "22e62beae2f22a96550a6182ba63a545a3fc4420", "filename": "src/shims/sync.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d11315ebfb4c2d95a1ca6c52bec105237b10e933/src%2Fshims%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d11315ebfb4c2d95a1ca6c52bec105237b10e933/src%2Fshims%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fsync.rs?ref=d11315ebfb4c2d95a1ca6c52bec105237b10e933", "patch": "@@ -13,7 +13,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_mutexattr_init(&mut self, attr_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        check_ptr_target_min_size(this, attr_op, 4)?;\n+        assert_ptr_target_min_size(this, attr_op, 4)?;\n \n         let attr = this.read_scalar(attr_op)?.not_undef()?;\n         if this.is_null(attr)? {\n@@ -36,7 +36,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        check_ptr_target_min_size(this, attr_op, 4)?;\n+        assert_ptr_target_min_size(this, attr_op, 4)?;\n \n         let attr = this.read_scalar(attr_op)?.not_undef()?;\n         if this.is_null(attr)? {\n@@ -62,7 +62,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_mutexattr_destroy(&mut self, attr_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        check_ptr_target_min_size(this, attr_op, 4)?;\n+        assert_ptr_target_min_size(this, attr_op, 4)?;\n \n         let attr = this.read_scalar(attr_op)?.not_undef()?;\n         if this.is_null(attr)? {\n@@ -92,8 +92,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        check_ptr_target_min_size(this, mutex_op, 16)?;\n-        check_ptr_target_min_size(this, attr_op, 4)?;\n+        assert_ptr_target_min_size(this, mutex_op, 16)?;\n+        assert_ptr_target_min_size(this, attr_op, 4)?;\n \n         let mutex = this.read_scalar(mutex_op)?.not_undef()?;\n         if this.is_null(mutex)? {\n@@ -125,7 +125,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_mutex_lock(&mut self, mutex_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        check_ptr_target_min_size(this, mutex_op, 16)?;\n+        assert_ptr_target_min_size(this, mutex_op, 16)?;\n \n         let mutex = this.read_scalar(mutex_op)?.not_undef()?;\n         if this.is_null(mutex)? {\n@@ -166,7 +166,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_mutex_trylock(&mut self, mutex_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        check_ptr_target_min_size(this, mutex_op, 16)?;\n+        assert_ptr_target_min_size(this, mutex_op, 16)?;\n \n         let mutex = this.read_scalar(mutex_op)?.not_undef()?;\n         if this.is_null(mutex)? {\n@@ -201,7 +201,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_mutex_unlock(&mut self, mutex_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        check_ptr_target_min_size(this, mutex_op, 16)?;\n+        assert_ptr_target_min_size(this, mutex_op, 16)?;\n \n         let mutex = this.read_scalar(mutex_op)?.not_undef()?;\n         if this.is_null(mutex)? {\n@@ -246,7 +246,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_mutex_destroy(&mut self, mutex_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        check_ptr_target_min_size(this, mutex_op, 16)?;\n+        assert_ptr_target_min_size(this, mutex_op, 16)?;\n \n         let mutex = this.read_scalar(mutex_op)?.not_undef()?;\n         if this.is_null(mutex)? {\n@@ -277,7 +277,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_rwlock_rdlock(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        check_ptr_target_min_size(this, rwlock_op, 12)?;\n+        assert_ptr_target_min_size(this, rwlock_op, 12)?;\n \n         let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;\n         if this.is_null(rwlock)? {\n@@ -301,7 +301,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_rwlock_tryrdlock(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        check_ptr_target_min_size(this, rwlock_op, 12)?;\n+        assert_ptr_target_min_size(this, rwlock_op, 12)?;\n \n         let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;\n         if this.is_null(rwlock)? {\n@@ -325,7 +325,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_rwlock_wrlock(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        check_ptr_target_min_size(this, rwlock_op, 12)?;\n+        assert_ptr_target_min_size(this, rwlock_op, 12)?;\n \n         let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;\n         if this.is_null(rwlock)? {\n@@ -351,7 +351,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_rwlock_trywrlock(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        check_ptr_target_min_size(this, rwlock_op, 12)?;\n+        assert_ptr_target_min_size(this, rwlock_op, 12)?;\n \n         let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;\n         if this.is_null(rwlock)? {\n@@ -375,7 +375,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_rwlock_unlock(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        check_ptr_target_min_size(this, rwlock_op, 12)?;\n+        assert_ptr_target_min_size(this, rwlock_op, 12)?;\n \n         let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;\n         if this.is_null(rwlock)? {\n@@ -402,7 +402,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_rwlock_destroy(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        check_ptr_target_min_size(this, rwlock_op, 12)?;\n+        assert_ptr_target_min_size(this, rwlock_op, 12)?;\n \n         let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;\n         if this.is_null(rwlock)? {\n@@ -427,7 +427,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n }\n \n-fn check_ptr_target_min_size<'mir, 'tcx: 'mir>(ecx: &MiriEvalContext<'mir, 'tcx>, operand: OpTy<'tcx, Tag>, min_size: u64) -> InterpResult<'tcx, ()> {\n+fn assert_ptr_target_min_size<'mir, 'tcx: 'mir>(ecx: &MiriEvalContext<'mir, 'tcx>, operand: OpTy<'tcx, Tag>, min_size: u64) -> InterpResult<'tcx, ()> {\n     let target_ty = match operand.layout.ty.kind {\n         TyKind::RawPtr(TypeAndMut{ ty, mutbl: _ }) => ty,\n         _ => panic!(\"Argument to pthread function was not a raw pointer\"),"}, {"sha": "c1e44789aa74e4e8ee3eb93a464197559cc6de2c", "filename": "tests/run-pass/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d11315ebfb4c2d95a1ca6c52bec105237b10e933/tests%2Frun-pass%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d11315ebfb4c2d95a1ca6c52bec105237b10e933/tests%2Frun-pass%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsync.rs?ref=d11315ebfb4c2d95a1ca6c52bec105237b10e933", "patch": "@@ -10,7 +10,7 @@ fn main() {\n     {\n         test_mutex_libc_recursive();\n         test_rwlock_stdlib();\n-        test_rwlock_libc_init();\n+        test_mutex_libc_init();\n         test_rwlock_libc_static_initializer();\n     }\n }\n@@ -68,7 +68,7 @@ fn test_rwlock_stdlib() {\n // std::sys::unix::rwlock::RWLock keeps track of write_locked and num_readers\n \n #[cfg(not(target_os = \"windows\"))]\n-fn test_rwlock_libc_init() {\n+fn test_mutex_libc_init() {\n     unsafe {\n         let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n         assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, std::ptr::null_mut()), 0);"}]}