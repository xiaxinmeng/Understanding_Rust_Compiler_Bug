{"sha": "ffaf15860836c55c7e64135436b05ba16057a580", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYWYxNTg2MDgzNmM1NWM3ZTY0MTM1NDM2YjA1YmExNjA1N2E1ODA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-06T06:15:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-06T06:15:28Z"}, "message": "Auto merge of #76331 - Aaron1011:fix/group-compat-hack-test, r=petrochenkov\n\nAccount for version number in NtIdent hack\n\nIssue #74616 tracks a backwards-compatibility hack for certain macros.\nThis has is implemented by hard-coding the filenames and macro names of\ncertain code that we want to continue to compile.\n\nHowever, the initial implementation of the hack was based on the\ndirectory structure when building the crate from its repository (e.g.\n`js-sys/src/lib.rs`). When the crate is build as a dependency, it will\ninclude a version number from the clone from the cargo registry (e.g.\n`js-sys-0.3.17/src/lib.rs`), which would fail the check.\n\nThis commit modifies the backwards-compatibility hack to check that\ndesired crate name (`js-sys` or `time-macros-impl`) is a prefix of the\nproper part of the path.\n\nSee https://github.com/rust-lang/rust/issues/76070#issuecomment-687215646\nfor more details.", "tree": {"sha": "3364a3d49e64095507cf77267f01ee0a46555612", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3364a3d49e64095507cf77267f01ee0a46555612"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffaf15860836c55c7e64135436b05ba16057a580", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffaf15860836c55c7e64135436b05ba16057a580", "html_url": "https://github.com/rust-lang/rust/commit/ffaf15860836c55c7e64135436b05ba16057a580", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffaf15860836c55c7e64135436b05ba16057a580/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b40abfd4854ec7323a2b6d39356fca2363ed5631", "url": "https://api.github.com/repos/rust-lang/rust/commits/b40abfd4854ec7323a2b6d39356fca2363ed5631", "html_url": "https://github.com/rust-lang/rust/commit/b40abfd4854ec7323a2b6d39356fca2363ed5631"}, {"sha": "9e7ef659e16464d892d0b84aa9828b76c0e5e4ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e7ef659e16464d892d0b84aa9828b76c0e5e4ca", "html_url": "https://github.com/rust-lang/rust/commit/9e7ef659e16464d892d0b84aa9828b76c0e5e4ca"}], "stats": {"total": 66, "additions": 56, "deletions": 10}, "files": [{"sha": "a2c651d1537b565efcb131200f2473b174c9418b", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ffaf15860836c55c7e64135436b05ba16057a580/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffaf15860836c55c7e64135436b05ba16057a580/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=ffaf15860836c55c7e64135436b05ba16057a580", "patch": "@@ -809,9 +809,19 @@ impl Nonterminal {\n             if let ExpnKind::Macro(_, macro_name) = orig_span.ctxt().outer_expn_data().kind {\n                 let filename = source_map.span_to_filename(orig_span);\n                 if let FileName::Real(RealFileName::Named(path)) = filename {\n-                    if (path.ends_with(\"time-macros-impl/src/lib.rs\")\n-                        && macro_name == sym::impl_macros)\n-                        || (path.ends_with(\"js-sys/src/lib.rs\") && macro_name == sym::arrays)\n+                    let matches_prefix = |prefix| {\n+                        // Check for a path that ends with 'prefix*/src/lib.rs'\n+                        let mut iter = path.components().rev();\n+                        iter.next().and_then(|p| p.as_os_str().to_str()) == Some(\"lib.rs\")\n+                            && iter.next().and_then(|p| p.as_os_str().to_str()) == Some(\"src\")\n+                            && iter\n+                                .next()\n+                                .and_then(|p| p.as_os_str().to_str())\n+                                .map_or(false, |p| p.starts_with(prefix))\n+                    };\n+\n+                    if (macro_name == sym::impl_macros && matches_prefix(\"time-macros-impl\"))\n+                        || (macro_name == sym::arrays && matches_prefix(\"js-sys\"))\n                     {\n                         let snippet = source_map.span_to_snippet(orig_span);\n                         if snippet.as_deref() == Ok(\"$name\") {"}, {"sha": "bc82a2ff196d2e36054c112a4d8b3361d4caff45", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ffaf15860836c55c7e64135436b05ba16057a580/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffaf15860836c55c7e64135436b05ba16057a580/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs?ref=ffaf15860836c55c7e64135436b05ba16057a580", "patch": "@@ -13,18 +13,37 @@ extern crate std;\n // place of a `None`-delimited group. This allows us to maintain\n // backwards compatibility for older versions of these crates.\n \n-include!(\"js-sys/src/lib.rs\");\n-include!(\"time-macros-impl/src/lib.rs\");\n+mod no_version {\n+    include!(\"js-sys/src/lib.rs\");\n+    include!(\"time-macros-impl/src/lib.rs\");\n \n-macro_rules! other {\n-    ($name:ident) => {\n-        #[my_macro] struct Three($name);\n+    macro_rules! other {\n+        ($name:ident) => {\n+            #[my_macro] struct Three($name);\n+        }\n     }\n+\n+    struct Foo;\n+    impl_macros!(Foo);\n+    arrays!(Foo);\n+    other!(Foo);\n }\n \n-fn main() {\n+mod with_version {\n+    include!(\"js-sys-0.3.17/src/lib.rs\");\n+    include!(\"time-macros-impl-0.1.0/src/lib.rs\");\n+\n+    macro_rules! other {\n+        ($name:ident) => {\n+            #[my_macro] struct Three($name);\n+        }\n+    }\n+\n     struct Foo;\n     impl_macros!(Foo);\n     arrays!(Foo);\n     other!(Foo);\n }\n+\n+\n+fn main() {}"}, {"sha": "e7645280a7509a3d5c2ff22eb480b89a1890b277", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.stdout", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ffaf15860836c55c7e64135436b05ba16057a580/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ffaf15860836c55c7e64135436b05ba16057a580/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout?ref=ffaf15860836c55c7e64135436b05ba16057a580", "patch": "@@ -1,3 +1,6 @@\n Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/time-macros-impl/src/lib.rs:5:21: 5:27 (#5) }, Ident { ident: \"One\", span: $DIR/time-macros-impl/src/lib.rs:5:28: 5:31 (#5) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:27:18: 27:21 (#0) }], span: $DIR/time-macros-impl/src/lib.rs:5:31: 5:38 (#5) }, Punct { ch: ';', spacing: Alone, span: $DIR/time-macros-impl/src/lib.rs:5:38: 5:39 (#5) }]\n Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys/src/lib.rs:5:21: 5:27 (#9) }, Ident { ident: \"Two\", span: $DIR/js-sys/src/lib.rs:5:28: 5:31 (#9) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:28:13: 28:16 (#0) }], span: $DIR/js-sys/src/lib.rs:5:31: 5:38 (#9) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys/src/lib.rs:5:38: 5:39 (#9) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:21:21: 21:27 (#13) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:21:28: 21:33 (#13) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:29:12: 29:15 (#0) }], span: $DIR/group-compat-hack.rs:21:34: 21:39 (#13) }], span: $DIR/group-compat-hack.rs:21:33: 21:40 (#13) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:21:40: 21:41 (#13) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:22:25: 22:31 (#13) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:22:32: 22:37 (#13) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:29:12: 29:15 (#0) }], span: $DIR/group-compat-hack.rs:22:38: 22:43 (#13) }], span: $DIR/group-compat-hack.rs:22:37: 22:44 (#13) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:22:44: 22:45 (#13) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:21: 5:27 (#19) }, Ident { ident: \"One\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:28: 5:31 (#19) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:43:18: 43:21 (#0) }], span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:31: 5:38 (#19) }, Punct { ch: ';', spacing: Alone, span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:38: 5:39 (#19) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:21: 5:27 (#23) }, Ident { ident: \"Two\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:28: 5:31 (#23) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:44:13: 44:16 (#0) }], span: $DIR/js-sys-0.3.17/src/lib.rs:5:31: 5:38 (#23) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys-0.3.17/src/lib.rs:5:38: 5:39 (#23) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:38:25: 38:31 (#27) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:38:32: 38:37 (#27) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:45:12: 45:15 (#0) }], span: $DIR/group-compat-hack.rs:38:38: 38:43 (#27) }], span: $DIR/group-compat-hack.rs:38:37: 38:44 (#27) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:38:44: 38:45 (#27) }]"}, {"sha": "d1a66940ebf3cfba4ce0b79eee84a10063c03b3c", "filename": "src/test/ui/proc-macro/group-compat-hack/js-sys-0.3.17/src/lib.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ffaf15860836c55c7e64135436b05ba16057a580/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fjs-sys-0.3.17%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffaf15860836c55c7e64135436b05ba16057a580/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fjs-sys-0.3.17%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fjs-sys-0.3.17%2Fsrc%2Flib.rs?ref=ffaf15860836c55c7e64135436b05ba16057a580", "patch": "@@ -0,0 +1,7 @@\n+// ignore-test this is not a test\n+\n+macro_rules! arrays {\n+    ($name:ident) => {\n+        #[my_macro] struct Two($name);\n+    }\n+}"}, {"sha": "c94c357920974b1e3e6c8f45fb1cc5f06a63cf3e", "filename": "src/test/ui/proc-macro/group-compat-hack/time-macros-impl-0.1.0/src/lib.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ffaf15860836c55c7e64135436b05ba16057a580/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Ftime-macros-impl-0.1.0%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffaf15860836c55c7e64135436b05ba16057a580/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Ftime-macros-impl-0.1.0%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Ftime-macros-impl-0.1.0%2Fsrc%2Flib.rs?ref=ffaf15860836c55c7e64135436b05ba16057a580", "patch": "@@ -0,0 +1,7 @@\n+// ignore-test this is not a test\n+\n+macro_rules! impl_macros {\n+    ($name:ident) => {\n+        #[my_macro] struct One($name);\n+    }\n+}"}]}