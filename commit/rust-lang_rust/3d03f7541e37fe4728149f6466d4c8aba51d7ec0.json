{"sha": "3d03f7541e37fe4728149f6466d4c8aba51d7ec0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMDNmNzU0MWUzN2ZlNDcyODE0OWY2NDY2ZDRjOGFiYTUxZDdlYzA=", "commit": {"author": {"name": "ubsan", "email": "npmazzuca@gmail.com", "date": "2016-07-02T06:33:44Z"}, "committer": {"name": "ubsan", "email": "npmazzuca@gmail.com", "date": "2016-07-02T06:33:44Z"}, "message": "Add more docs - mostly warnings - to std::mem::transmute", "tree": {"sha": "7a7d3dbe6782ece59c63ac85deb3baf58d541795", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a7d3dbe6782ece59c63ac85deb3baf58d541795"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d03f7541e37fe4728149f6466d4c8aba51d7ec0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d03f7541e37fe4728149f6466d4c8aba51d7ec0", "html_url": "https://github.com/rust-lang/rust/commit/3d03f7541e37fe4728149f6466d4c8aba51d7ec0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d03f7541e37fe4728149f6466d4c8aba51d7ec0/comments", "author": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32a6373322d381c5778daea39a4f3b7ff94d9ee0", "url": "https://api.github.com/repos/rust-lang/rust/commits/32a6373322d381c5778daea39a4f3b7ff94d9ee0", "html_url": "https://github.com/rust-lang/rust/commit/32a6373322d381c5778daea39a4f3b7ff94d9ee0"}], "stats": {"total": 99, "additions": 95, "deletions": 4}, "files": [{"sha": "1b52ea33d375a93854541fb6ce2e24f7246790ee", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 95, "deletions": 4, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/3d03f7541e37fe4728149f6466d4c8aba51d7ec0/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d03f7541e37fe4728149f6466d4c8aba51d7ec0/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=3d03f7541e37fe4728149f6466d4c8aba51d7ec0", "patch": "@@ -278,18 +278,109 @@ extern \"rust-intrinsic\" {\n     /// Moves a value out of scope without running drop glue.\n     pub fn forget<T>(_: T) -> ();\n \n-    /// Unsafely transforms a value of one type into a value of another type.\n+    /// Bitcasts a value of one type to another. Both types must have the same\n+    /// size.\n     ///\n-    /// Both types must have the same size.\n+    /// `transmute::<T, U>(t)` is semantically equivalent to the following:\n+    ///\n+    /// ```\n+    /// fn transmute<T, U>(t: T) -> U {\n+    ///   let u: U = std::mem::uninitialized();\n+    ///   std::ptr::copy_nonoverlapping(&t as *const T as *const u8,\n+    ///                                 &mut u as *mut U as *mut u8,\n+    ///                                 std::mem::size_of::<T>());\n+    ///   std::mem::forget(t);\n+    ///   u\n+    /// }\n+    /// ```\n+    ///\n+    /// `transmute` is incredibly unsafe. There are an incredible number of ways\n+    /// to cause undefined behavior with this function. `transmute` should be\n+    /// the absolute last resort.\n+    ///\n+    /// The following is more complete documentation. Read it before using\n+    /// `transmute`:\n+    /// [nomicon](https://doc.rust-lang.org/nomicon/transmutes.html)\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::mem;\n     ///\n-    /// let array: &[u8] = unsafe { mem::transmute(\"Rust\") };\n-    /// assert_eq!(array, [82, 117, 115, 116]);\n+    /// let slice: &[u8] = unsafe { mem::transmute::<&str, &[u8]>(\"Rust\") };\n+    /// assert_eq!(slice, [82, 117, 115, 116]);\n+    /// // this is not a good way to do this.\n+    /// // use .as_bytes()\n+    /// let slice = \"Rust\".as_bytes();\n+    /// assert_eq!(slice, [82, 117, 115, 116]);\n+    /// // Or, just use a byte string\n+    /// assert_eq!(b\"Rust\", [82, 117, 116, 116]);\n+    /// ```\n+    ///\n+    /// There are very few good cases for `transmute`. Most can be achieved\n+    /// through other means. Some commone uses, and the less unsafe way, are as\n+    /// follows:\n+    ///\n+    /// ```\n+    /// // Turning a *mut T into an &mut T\n+    /// let ptr: *mut i32 = &mut 0;\n+    /// let reF_transmuted = std::mem::transmute::<*mut i32, &mut i32>(ptr);\n+    /// let ref_casted = &mut *ptr;\n+    /// ```\n+    ///\n     /// ```\n+    /// // Turning an &mut T into an &mut U\n+    /// let ptr = &mut 0;\n+    /// let val_transmuted = std::mem::transmute::<&mut i32, &mut u32>(ptr);\n+    /// // There is a better way, using `as` and reborrowing:\n+    /// let val_casts = &mut *(ptr as *mut T as *mut U);\n+    /// ```\n+    ///\n+    /// ```\n+    /// // Copying an `&mut T` to reslice:\n+    /// fn split_at_mut_transmute<T>(slice: &mut [T], index: usize)\n+    ///                              -> (&mut [T], &mut [T]) {\n+    ///     let len = slice.len();\n+    ///     assert!(index < len);\n+    ///     let slice2 = std::mem::transmute::<&mut [T], &mut [T]>(slice);\n+    ///     (slice[0..index], slice2[index..len])\n+    /// }\n+    /// // or:\n+    /// fn split_at_mut_casts<T>(slice: &mut [T], index: usize)\n+    ///                          -> (&mut [T], &mut [T]) {\n+    ///     let len = slice.len();\n+    ///     assert!(index < len);\n+    ///     let slice2 = &mut *(slice as *mut [T]); // actually typesafe!\n+    ///     (slice[0..index], slice2[index..len])\n+    /// }\n+    /// ```\n+    ///\n+    /// There are valid uses of transmute.\n+    ///\n+    /// ```\n+    /// // getting the bitpattern of a floating point type\n+    /// let x = std::mem::transmute::<f32, u32>(0.0/0.0)\n+    ///\n+    /// // turning a pointer into a function pointer\n+    /// // in file.c: `int foo(void) { ... }`\n+    /// let handle: *mut libc::c_void = libc::dlopen(\n+    ///     b\"file.so\\0\".as_ptr() as *const libc::c_char, libc::RTLD_LAZY);\n+    /// let foo: *mut libc::c_void = libc::dlsym(\n+    ///     handle,\n+    ///     b\"foo\\0\".as_ptr() as *const libc::c_char);\n+    /// let foo = std::mem::transmute::<*mut libc::c_void,\n+    ///                                 extern fn() -> libc::c_int>(foo);\n+    /// println!(\"{}\", foo());\n+    ///\n+    /// // extending an invariant lifetime; this is advanced, very unsafe rust\n+    /// struct T<'a>(&'a i32);\n+    /// let value = 0;\n+    /// let t = T::new(&value);\n+    /// let ptr = &mut t;\n+    /// let ptr_extended = std::mem::transmute::<&mut T, &mut T<'static>>(ptr);\n+    /// ```\n+    ///\n+    /// But these are few and far between.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn transmute<T, U>(e: T) -> U;\n "}]}