{"sha": "916942d006ce3a551505b7b0328a82b382249b7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNjk0MmQwMDZjZTNhNTUxNTA1YjdiMDMyOGE4MmIzODIyNDliN2M=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-05-17T16:07:16Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-05-17T22:25:03Z"}, "message": "Some cosmetic changes to num.rs", "tree": {"sha": "02e148eebdd078539de17eddb483df617d8ea50f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02e148eebdd078539de17eddb483df617d8ea50f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/916942d006ce3a551505b7b0328a82b382249b7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/916942d006ce3a551505b7b0328a82b382249b7c", "html_url": "https://github.com/rust-lang/rust/commit/916942d006ce3a551505b7b0328a82b382249b7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/916942d006ce3a551505b7b0328a82b382249b7c/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c34c5051a5f42726d34dd09b7bf0ae120800a2d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c34c5051a5f42726d34dd09b7bf0ae120800a2d4", "html_url": "https://github.com/rust-lang/rust/commit/c34c5051a5f42726d34dd09b7bf0ae120800a2d4"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "96b302d317499ef77da41c23e9ce5eefdd77f0db", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/916942d006ce3a551505b7b0328a82b382249b7c/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/916942d006ce3a551505b7b0328a82b382249b7c/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=916942d006ce3a551505b7b0328a82b382249b7c", "patch": "@@ -396,16 +396,15 @@ pub trait FromStrRadix {\n /// - If code written to use this function doesn't care about it, it's\n ///   probably assuming that `x^0` always equals `1`.\n ///\n-pub fn pow_with_uint<T:NumCast+One+Zero+Copy+Div<T,T>+Mul<T,T>>(\n-    radix: uint, pow: uint) -> T {\n+pub fn pow_with_uint<T:NumCast+One+Zero+Copy+Div<T,T>+Mul<T,T>>(radix: uint, pow: uint) -> T {\n     let _0: T = Zero::zero();\n     let _1: T = One::one();\n \n     if pow   == 0u { return _1; }\n     if radix == 0u { return _0; }\n     let mut my_pow     = pow;\n     let mut total      = _1;\n-    let mut multiplier = cast(radix as int);\n+    let mut multiplier = cast(radix);\n     while (my_pow > 0u) {\n         if my_pow % 2u == 1u {\n             total *= multiplier;\n@@ -422,13 +421,13 @@ pub fn test_num<T:Num + NumCast>(ten: T, two: T) {\n     assert_eq!(ten.add(&two),  cast(12));\n     assert_eq!(ten.sub(&two),  cast(8));\n     assert_eq!(ten.mul(&two),  cast(20));\n-    assert_eq!(ten.div(&two), cast(5));\n+    assert_eq!(ten.div(&two),  cast(5));\n     assert_eq!(ten.rem(&two),  cast(0));\n \n     assert_eq!(ten.add(&two),  ten + two);\n     assert_eq!(ten.sub(&two),  ten - two);\n     assert_eq!(ten.mul(&two),  ten * two);\n-    assert_eq!(ten.div(&two), ten / two);\n+    assert_eq!(ten.div(&two),  ten / two);\n     assert_eq!(ten.rem(&two),  ten % two);\n }\n "}]}