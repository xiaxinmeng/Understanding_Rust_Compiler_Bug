{"sha": "4c8d248190819f09753d4f6a9f89e3804e232ae7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjOGQyNDgxOTA4MTlmMDk3NTNkNGY2YTlmODllMzgwNGUyMzJhZTc=", "commit": {"author": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2020-11-14T09:54:16Z"}, "committer": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2020-11-17T16:28:37Z"}, "message": "Update stderr files", "tree": {"sha": "f943cb858c9625a0aa1e58eaf3f411862f99dfb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f943cb858c9625a0aa1e58eaf3f411862f99dfb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c8d248190819f09753d4f6a9f89e3804e232ae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c8d248190819f09753d4f6a9f89e3804e232ae7", "html_url": "https://github.com/rust-lang/rust/commit/4c8d248190819f09753d4f6a9f89e3804e232ae7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c8d248190819f09753d4f6a9f89e3804e232ae7/comments", "author": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86331a46e4030ddea41e1f9f9b8c313f58ce1eb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/86331a46e4030ddea41e1f9f9b8c313f58ce1eb1", "html_url": "https://github.com/rust-lang/rust/commit/86331a46e4030ddea41e1f9f9b8c313f58ce1eb1"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "756e6e818ad4454ee42494add7f11610d078295d", "filename": "tests/ui/map_flatten.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c8d248190819f09753d4f6a9f89e3804e232ae7/tests%2Fui%2Fmap_flatten.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c8d248190819f09753d4f6a9f89e3804e232ae7/tests%2Fui%2Fmap_flatten.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.stderr?ref=4c8d248190819f09753d4f6a9f89e3804e232ae7", "patch": "@@ -1,37 +1,37 @@\n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:15:46\n+  --> $DIR/map_flatten.rs:16:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id)`\n    |\n    = note: `-D clippy::map-flatten` implied by `-D warnings`\n \n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:16:46\n+  --> $DIR/map_flatten.rs:17:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_ref).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id_ref)`\n \n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:17:46\n+  --> $DIR/map_flatten.rs:18:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_closure).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id_closure)`\n \n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:18:46\n+  --> $DIR/map_flatten.rs:19:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| x.checked_add(1)).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(|x| x.checked_add(1))`\n \n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:21:46\n+  --> $DIR/map_flatten.rs:22:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `flat_map` instead: `.flat_map(|x| 0..x)`\n \n error: called `map(..).flatten()` on an `Option`\n-  --> $DIR/map_flatten.rs:24:39\n+  --> $DIR/map_flatten.rs:25:39\n    |\n LL |     let _: Option<_> = (Some(Some(1))).map(|x| x).flatten();\n    |                                       ^^^^^^^^^^^^^^^^^^^^^ help: try using `and_then` instead: `.and_then(|x| x)`"}, {"sha": "ad7f081c71392ff9157f80580d1f62a824319b7c", "filename": "tests/ui/option_option.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c8d248190819f09753d4f6a9f89e3804e232ae7/tests%2Fui%2Foption_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c8d248190819f09753d4f6a9f89e3804e232ae7/tests%2Fui%2Foption_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_option.stderr?ref=4c8d248190819f09753d4f6a9f89e3804e232ae7", "patch": "@@ -59,7 +59,7 @@ LL |     Struct { x: Option<Option<u8>> },\n    |                 ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:78:14\n+  --> $DIR/option_option.rs:76:14\n    |\n LL |         foo: Option<Option<Cow<'a, str>>>,\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "fb8bf339828f4ff4e87f4442e2fbf2de42f5be85", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c8d248190819f09753d4f6a9f89e3804e232ae7/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c8d248190819f09753d4f6a9f89e3804e232ae7/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=4c8d248190819f09753d4f6a9f89e3804e232ae7", "patch": "@@ -79,25 +79,25 @@ LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:76:21\n+  --> $DIR/or_fun_call.rs:77:21\n    |\n LL |     let _ = Some(1).unwrap_or(map[&1]);\n    |                     ^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| map[&1])`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:78:21\n+  --> $DIR/or_fun_call.rs:79:21\n    |\n LL |     let _ = Some(1).unwrap_or(map[&1]);\n    |                     ^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| map[&1])`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:102:35\n+  --> $DIR/or_fun_call.rs:103:35\n    |\n LL |     let _ = Some(\"a\".to_string()).or(Some(\"b\".to_string()));\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(\"b\".to_string()))`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:106:10\n+  --> $DIR/or_fun_call.rs:107:10\n    |\n LL |         .or(Some(Bar(b, Duration::from_secs(2))));\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(Bar(b, Duration::from_secs(2))))`"}, {"sha": "2c01d37192e8e296439258134367a1c37a5c6c63", "filename": "tests/ui/try_err.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c8d248190819f09753d4f6a9f89e3804e232ae7/tests%2Fui%2Ftry_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c8d248190819f09753d4f6a9f89e3804e232ae7/tests%2Fui%2Ftry_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.stderr?ref=4c8d248190819f09753d4f6a9f89e3804e232ae7", "patch": "@@ -29,7 +29,7 @@ LL |                 Err(err)?;\n    |                 ^^^^^^^^^ help: try this: `return Err(err.into())`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:86:23\n+  --> $DIR/try_err.rs:87:23\n    |\n LL |             Err(_) => Err(1)?,\n    |                       ^^^^^^^ help: try this: `return Err(1)`\n@@ -40,7 +40,7 @@ LL |     try_validation!(Ok::<_, i32>(5));\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:101:23\n+  --> $DIR/try_err.rs:102:23\n    |\n LL |             Err(_) => Err(ret_one!())?,\n    |                       ^^^^^^^^^^^^^^^^ help: try this: `return Err(ret_one!())`\n@@ -51,25 +51,25 @@ LL |     try_validation_in_macro!(Ok::<_, i32>(5));\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:140:9\n+  --> $DIR/try_err.rs:141:9\n    |\n LL |         Err(foo!())?;\n    |         ^^^^^^^^^^^^ help: try this: `return Err(foo!())`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:147:9\n+  --> $DIR/try_err.rs:148:9\n    |\n LL |         Err(io::ErrorKind::WriteZero)?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Err(io::ErrorKind::WriteZero.into()))`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:149:9\n+  --> $DIR/try_err.rs:150:9\n    |\n LL |         Err(io::Error::new(io::ErrorKind::InvalidInput, \"error\"))?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Err(io::Error::new(io::ErrorKind::InvalidInput, \"error\")))`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:157:9\n+  --> $DIR/try_err.rs:158:9\n    |\n LL |         Err(io::ErrorKind::NotFound)?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Some(Err(io::ErrorKind::NotFound.into())))`"}]}