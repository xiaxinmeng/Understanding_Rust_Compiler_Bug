{"sha": "b7cbbc374c8549620221ad6c4e6e3c300efa5b1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3Y2JiYzM3NGM4NTQ5NjIwMjIxYWQ2YzRlNmUzYzMwMGVmYTViMWM=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2016-02-11T16:29:44Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-02-19T23:45:13Z"}, "message": "be more type-safe in panic/panic_bounds_check\n\nTODO: find a correct borrow region\n\nFixes #31482", "tree": {"sha": "41258ad44d8589e58b522f1b1dd86cdaba358f27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41258ad44d8589e58b522f1b1dd86cdaba358f27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7cbbc374c8549620221ad6c4e6e3c300efa5b1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7cbbc374c8549620221ad6c4e6e3c300efa5b1c", "html_url": "https://github.com/rust-lang/rust/commit/b7cbbc374c8549620221ad6c4e6e3c300efa5b1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7cbbc374c8549620221ad6c4e6e3c300efa5b1c/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67d1cf112218257025edf75b9cb7ebc8ab8bfa64", "url": "https://api.github.com/repos/rust-lang/rust/commits/67d1cf112218257025edf75b9cb7ebc8ab8bfa64", "html_url": "https://github.com/rust-lang/rust/commit/67d1cf112218257025edf75b9cb7ebc8ab8bfa64"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "314f75beea14985055b499946b52f4e4361dce74", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b7cbbc374c8549620221ad6c4e6e3c300efa5b1c/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7cbbc374c8549620221ad6c4e6e3c300efa5b1c/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=b7cbbc374c8549620221ad6c4e6e3c300efa5b1c", "patch": "@@ -418,25 +418,28 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                              len: Operand<'tcx>,\n                              span: Span) {\n         // fn(&(filename: &'static str, line: u32), index: usize, length: usize) -> !\n+        let region = ty::ReStatic; // TODO(mir-borrowck): use a better region?\n         let func = self.lang_function(lang_items::PanicBoundsCheckFnLangItem);\n-        let args = func.ty.fn_args();\n-        let ref_ty = args.skip_binder()[0];\n-        let (region, tup_ty) = if let ty::TyRef(region, tyandmut) = ref_ty.sty {\n-            (region, tyandmut.ty)\n+        let args = self.hir.tcx().replace_late_bound_regions(&func.ty.fn_args(), |_| region).0;\n+\n+        let ref_ty = args[0];\n+        let tup_ty = if let ty::TyRef(_, tyandmut) = ref_ty.sty {\n+            tyandmut.ty\n         } else {\n             self.hir.span_bug(span, &format!(\"unexpected panic_bound_check type: {:?}\", func.ty));\n         };\n+\n         let (tuple, tuple_ref) = (self.temp(tup_ty), self.temp(ref_ty));\n         let (file, line) = self.span_to_fileline_args(span);\n         let elems = vec![Operand::Constant(file), Operand::Constant(line)];\n         // FIXME: We should have this as a constant, rather than a stack variable (to not pollute\n         // icache with cold branch code), however to achieve that we either have to rely on rvalue\n         // promotion or have some way, in MIR, to create constants.\n-        self.cfg.push_assign(block, DUMMY_SP, &tuple, // tuple = (file_arg, line_arg);\n+        self.cfg.push_assign(block, span, &tuple, // tuple = (file_arg, line_arg);\n                              Rvalue::Aggregate(AggregateKind::Tuple, elems));\n         // FIXME: is this region really correct here?\n-        self.cfg.push_assign(block, DUMMY_SP, &tuple_ref, // tuple_ref = &tuple;\n-                             Rvalue::Ref(*region, BorrowKind::Unique, tuple));\n+        self.cfg.push_assign(block, span, &tuple_ref, // tuple_ref = &tuple;\n+                             Rvalue::Ref(region, BorrowKind::Shared, tuple));\n         let cleanup = self.diverge_cleanup();\n         self.cfg.terminate(block, Terminator::Call {\n             func: Operand::Constant(func),\n@@ -449,18 +452,21 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n     /// Create diverge cleanup and branch to it from `block`.\n     pub fn panic(&mut self, block: BasicBlock, msg: &'static str, span: Span) {\n         // fn(&(msg: &'static str filename: &'static str, line: u32)) -> !\n+        let region = ty::ReStatic; // TODO(mir-borrowck): use a better region?\n         let func = self.lang_function(lang_items::PanicFnLangItem);\n-        let args = func.ty.fn_args();\n-        let ref_ty = args.skip_binder()[0];\n-        let (region, tup_ty) = if let ty::TyRef(region, tyandmut) = ref_ty.sty {\n-            (region, tyandmut.ty)\n+        let args = self.hir.tcx().replace_late_bound_regions(&func.ty.fn_args(), |_| region).0;\n+\n+        let ref_ty = args[0];\n+        let tup_ty = if let ty::TyRef(_, tyandmut) = ref_ty.sty {\n+            tyandmut.ty\n         } else {\n             self.hir.span_bug(span, &format!(\"unexpected panic type: {:?}\", func.ty));\n         };\n+\n         let (tuple, tuple_ref) = (self.temp(tup_ty), self.temp(ref_ty));\n         let (file, line) = self.span_to_fileline_args(span);\n         let message = Constant {\n-            span: DUMMY_SP,\n+            span: span,\n             ty: self.hir.tcx().mk_static_str(),\n             literal: self.hir.str_literal(intern_and_get_ident(msg))\n         };\n@@ -470,11 +476,11 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         // FIXME: We should have this as a constant, rather than a stack variable (to not pollute\n         // icache with cold branch code), however to achieve that we either have to rely on rvalue\n         // promotion or have some way, in MIR, to create constants.\n-        self.cfg.push_assign(block, DUMMY_SP, &tuple, // tuple = (message_arg, file_arg, line_arg);\n+        self.cfg.push_assign(block, span, &tuple, // tuple = (message_arg, file_arg, line_arg);\n                              Rvalue::Aggregate(AggregateKind::Tuple, elems));\n         // FIXME: is this region really correct here?\n-        self.cfg.push_assign(block, DUMMY_SP, &tuple_ref, // tuple_ref = &tuple;\n-                             Rvalue::Ref(*region, BorrowKind::Unique, tuple));\n+        self.cfg.push_assign(block, span, &tuple_ref, // tuple_ref = &tuple;\n+                             Rvalue::Ref(region, BorrowKind::Shared, tuple));\n         let cleanup = self.diverge_cleanup();\n         self.cfg.terminate(block, Terminator::Call {\n             func: Operand::Constant(func),\n@@ -505,11 +511,11 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n     fn span_to_fileline_args(&mut self, span: Span) -> (Constant<'tcx>, Constant<'tcx>) {\n         let span_lines = self.hir.tcx().sess.codemap().lookup_char_pos(span.lo);\n         (Constant {\n-            span: DUMMY_SP,\n+            span: span,\n             ty: self.hir.tcx().mk_static_str(),\n             literal: self.hir.str_literal(intern_and_get_ident(&span_lines.file.name))\n         }, Constant {\n-            span: DUMMY_SP,\n+            span: span,\n             ty: self.hir.tcx().types.u32,\n             literal: self.hir.usize_literal(span_lines.line)\n         })"}]}