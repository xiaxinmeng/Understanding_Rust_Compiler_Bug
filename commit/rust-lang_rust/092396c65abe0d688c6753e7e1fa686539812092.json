{"sha": "092396c65abe0d688c6753e7e1fa686539812092", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MjM5NmM2NWFiZTBkNjg4YzY3NTNlN2UxZmE2ODY1Mzk4MTIwOTI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-02T20:28:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-02T20:28:15Z"}, "message": "Merge #9119\n\n9119: fix: some minor \"extract type alias\" fixes r=jonas-schievink a=jonas-schievink\n\nIt now correctly works inside traits, and no longer messes up the indentation of the original node\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "91b9de8794a22e3fd2b491978b48a89f70550f89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91b9de8794a22e3fd2b491978b48a89f70550f89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/092396c65abe0d688c6753e7e1fa686539812092", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgt+nfCRBK7hj4Ov3rIwAA1e0IAKgwZGOFE9xtFKiPm7yLpDWi\n3miYiSLyd8qbiwQ4xZJ+lVz/MCMzX4XsgFqYLfkpQnjut2bCu9YFK/9s047Y/p4H\nWUzEAYy5oVAwr3+YBTGmXUZZptTE0G13bTFfPEPJ6qcNOVrqNWBVqcDXbA8P40LG\nzpoIvahlhEr28GHLzc+Ra+eK3Ntji1W/hczptDGLK8qOr0FKT+IJve3MxQWiPvqm\nn0k4vOXGKyZEir/Fk3dY2I/5TnVy+jx3bes8vFHQ1/o061PepQm3z1rsxdpap2cZ\nfnnuImLkBrRE8z5u8pBXJDBcdFUcsT64Aq48Hx1bEhvV0fzeRCi5GUpLKC0pKYE=\n=C3WE\n-----END PGP SIGNATURE-----\n", "payload": "tree 91b9de8794a22e3fd2b491978b48a89f70550f89\nparent c2157f5f964c190fefc4e2763f7e57d4940d63c8\nparent 6c0e58d10756742a55a04c221e8625dc8f7252b3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1622665695 +0000\ncommitter GitHub <noreply@github.com> 1622665695 +0000\n\nMerge #9119\n\n9119: fix: some minor \"extract type alias\" fixes r=jonas-schievink a=jonas-schievink\n\nIt now correctly works inside traits, and no longer messes up the indentation of the original node\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/092396c65abe0d688c6753e7e1fa686539812092", "html_url": "https://github.com/rust-lang/rust/commit/092396c65abe0d688c6753e7e1fa686539812092", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/092396c65abe0d688c6753e7e1fa686539812092/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2157f5f964c190fefc4e2763f7e57d4940d63c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2157f5f964c190fefc4e2763f7e57d4940d63c8", "html_url": "https://github.com/rust-lang/rust/commit/c2157f5f964c190fefc4e2763f7e57d4940d63c8"}, {"sha": "6c0e58d10756742a55a04c221e8625dc8f7252b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c0e58d10756742a55a04c221e8625dc8f7252b3", "html_url": "https://github.com/rust-lang/rust/commit/6c0e58d10756742a55a04c221e8625dc8f7252b3"}], "stats": {"total": 68, "additions": 56, "deletions": 12}, "files": [{"sha": "4bccf59847512e74ccb846c810f74dda28a25226", "filename": "crates/ide_assists/src/handlers/extract_type_alias.rs", "status": "modified", "additions": 56, "deletions": 12, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/092396c65abe0d688c6753e7e1fa686539812092/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092396c65abe0d688c6753e7e1fa686539812092/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs?ref=092396c65abe0d688c6753e7e1fa686539812092", "patch": "@@ -1,4 +1,7 @@\n-use syntax::ast::{self, AstNode};\n+use syntax::{\n+    ast::{self, edit::IndentLevel, AstNode},\n+    match_ast,\n+};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n@@ -25,12 +28,15 @@ pub(crate) fn extract_type_alias(acc: &mut Assists, ctx: &AssistContext) -> Opti\n     }\n \n     let node = ctx.find_node_at_range::<ast::Type>()?;\n-    let insert = ctx\n-        .find_node_at_offset::<ast::Impl>()\n-        .map(|imp| imp.syntax().clone())\n-        .or_else(|| ctx.find_node_at_offset::<ast::Item>().map(|item| item.syntax().clone()))?\n-        .text_range()\n-        .start();\n+    let item = ctx.find_node_at_offset::<ast::Item>()?;\n+    let insert = match_ast! {\n+        match (item.syntax().parent()?) {\n+            ast::AssocItemList(it) => it.syntax().parent()?.clone(),\n+            _ => item.syntax().clone(),\n+        }\n+    };\n+    let indent = IndentLevel::from_node(&insert);\n+    let insert = insert.text_range().start();\n     let target = node.syntax().text_range();\n \n     acc.add(\n@@ -42,10 +48,14 @@ pub(crate) fn extract_type_alias(acc: &mut Assists, ctx: &AssistContext) -> Opti\n             builder.replace(target, \"Type\");\n             match ctx.config.snippet_cap {\n                 Some(cap) => {\n-                    builder.insert_snippet(cap, insert, format!(\"type $0Type = {};\\n\\n\", node));\n+                    builder.insert_snippet(\n+                        cap,\n+                        insert,\n+                        format!(\"type $0Type = {};\\n\\n{}\", node, indent),\n+                    );\n                 }\n                 None => {\n-                    builder.insert(insert, format!(\"type Type = {};\\n\\n\", node));\n+                    builder.insert(insert, format!(\"type Type = {};\\n\\n{}\", node, indent));\n                 }\n             }\n         },\n@@ -153,9 +163,9 @@ struct S {\n     }\n \n     #[test]\n-    fn extract_from_impl() {\n-        // When invoked in an impl, extracted type alias should be placed next to the impl, not\n-        // inside.\n+    fn extract_from_impl_or_trait() {\n+        // When invoked in an impl/trait, extracted type alias should be placed next to the\n+        // impl/trait, not inside.\n         check_assist(\n             extract_type_alias,\n             r#\"\n@@ -167,6 +177,40 @@ impl S {\n type $0Type = (u8, u8);\n \n impl S {\n+    fn f() -> Type {}\n+}\n+            \"#,\n+        );\n+        check_assist(\n+            extract_type_alias,\n+            r#\"\n+trait Tr {\n+    fn f() -> $0(u8, u8)$0 {}\n+}\n+            \"#,\n+            r#\"\n+type $0Type = (u8, u8);\n+\n+trait Tr {\n+    fn f() -> Type {}\n+}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn indentation() {\n+        check_assist(\n+            extract_type_alias,\n+            r#\"\n+mod m {\n+    fn f() -> $0u8$0 {}\n+}\n+            \"#,\n+            r#\"\n+mod m {\n+    type $0Type = u8;\n+\n     fn f() -> Type {}\n }\n             \"#,"}]}