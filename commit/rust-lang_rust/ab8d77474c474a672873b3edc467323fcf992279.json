{"sha": "ab8d77474c474a672873b3edc467323fcf992279", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiOGQ3NzQ3NGM0NzRhNjcyODczYjNlZGM0NjczMjNmY2Y5OTIyNzk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-01-24T02:02:15Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-01-24T02:02:22Z"}, "message": "test: fix benchmark unsafe blocks, r=burningtree.", "tree": {"sha": "6276da37c8b96003103c60eed451ead49188199b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6276da37c8b96003103c60eed451ead49188199b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab8d77474c474a672873b3edc467323fcf992279", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab8d77474c474a672873b3edc467323fcf992279", "html_url": "https://github.com/rust-lang/rust/commit/ab8d77474c474a672873b3edc467323fcf992279", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab8d77474c474a672873b3edc467323fcf992279/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddbeccd5dc869579950967679c47a607d333906b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddbeccd5dc869579950967679c47a607d333906b", "html_url": "https://github.com/rust-lang/rust/commit/ddbeccd5dc869579950967679c47a607d333906b"}], "stats": {"total": 111, "additions": 60, "deletions": 51}, "files": [{"sha": "ffb32181dc4cffa62440710f72404402a5505fb5", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ab8d77474c474a672873b3edc467323fcf992279/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab8d77474c474a672873b3edc467323fcf992279/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=ab8d77474c474a672873b3edc467323fcf992279", "patch": "@@ -64,18 +64,20 @@ fn make_random_fasta(wr: io::Writer, id: ~str, desc: ~str, genelist: ~[aminoacid\n     if str::len(op) > 0u { wr.write_line(op); }\n }\n \n-fn make_repeat_fasta(wr: io::Writer, id: ~str, desc: ~str, s: ~str, n: int) unsafe {\n-    wr.write_line(~\">\" + id + ~\" \" + desc);\n-    let mut op: ~str = ~\"\";\n-    let sl: uint = str::len(s);\n-    for uint::range(0u, n as uint) |i| {\n-        str::raw::push_byte(&mut op, s[i % sl]);\n-        if str::len(op) >= LINE_LENGTH() {\n-            wr.write_line(op);\n-            op = ~\"\";\n+fn make_repeat_fasta(wr: io::Writer, id: ~str, desc: ~str, s: ~str, n: int) {\n+    unsafe {\n+        wr.write_line(~\">\" + id + ~\" \" + desc);\n+        let mut op: ~str = ~\"\";\n+        let sl: uint = str::len(s);\n+        for uint::range(0u, n as uint) |i| {\n+            str::raw::push_byte(&mut op, s[i % sl]);\n+            if str::len(op) >= LINE_LENGTH() {\n+                wr.write_line(op);\n+                op = ~\"\";\n+            }\n         }\n+        if str::len(op) > 0u { wr.write_line(op); }\n     }\n-    if str::len(op) > 0u { wr.write_line(op); }\n }\n \n fn acid(ch: char, prob: u32) -> aminoacids { return {ch: ch, prob: prob}; }"}, {"sha": "75e277e33795b8d59fb704683bebeba5941b54f8", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 48, "deletions": 41, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/ab8d77474c474a672873b3edc467323fcf992279/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab8d77474c474a672873b3edc467323fcf992279/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=ab8d77474c474a672873b3edc467323fcf992279", "patch": "@@ -98,23 +98,25 @@ mod NBodySystem {\n \n     pub fn advance_one(bi: &mut Body::props,\n                        bj: &mut Body::props,\n-                       dt: float) unsafe {\n-        let dx = bi.x - bj.x;\n-        let dy = bi.y - bj.y;\n-        let dz = bi.z - bj.z;\n+                       dt: float) {\n+        unsafe {\n+            let dx = bi.x - bj.x;\n+            let dy = bi.y - bj.y;\n+            let dz = bi.z - bj.z;\n \n-        let dSquared = dx * dx + dy * dy + dz * dz;\n+            let dSquared = dx * dx + dy * dy + dz * dz;\n \n-        let distance = ::libc::sqrt(dSquared);\n-        let mag = dt / (dSquared * distance);\n+            let distance = ::libc::sqrt(dSquared);\n+            let mag = dt / (dSquared * distance);\n \n-        bi.vx -= dx * bj.mass * mag;\n-        bi.vy -= dy * bj.mass * mag;\n-        bi.vz -= dz * bj.mass * mag;\n+            bi.vx -= dx * bj.mass * mag;\n+            bi.vy -= dy * bj.mass * mag;\n+            bi.vz -= dz * bj.mass * mag;\n \n-        bj.vx += dx * bi.mass * mag;\n-        bj.vy += dy * bi.mass * mag;\n-        bj.vz += dz * bi.mass * mag;\n+            bj.vx += dx * bi.mass * mag;\n+            bj.vy += dy * bi.mass * mag;\n+            bj.vz += dz * bi.mass * mag;\n+        }\n     }\n \n     pub fn move_(b: &mut Body::props, dt: float) {\n@@ -123,36 +125,41 @@ mod NBodySystem {\n         b.z += dt * b.vz;\n     }\n \n-    pub fn energy(bodies: &[Body::props]) -> float unsafe {\n-        let mut dx;\n-        let mut dy;\n-        let mut dz;\n-        let mut distance;\n-        let mut e = 0.0;\n-\n-        let mut i = 0;\n-        while i < 5 {\n-            e +=\n-                0.5 * bodies[i].mass *\n-                (bodies[i].vx * bodies[i].vx + bodies[i].vy * bodies[i].vy\n-                 + bodies[i].vz * bodies[i].vz);\n-\n-            let mut j = i + 1;\n-            while j < 5 {\n-                dx = bodies[i].x - bodies[j].x;\n-                dy = bodies[i].y - bodies[j].y;\n-                dz = bodies[i].z - bodies[j].z;\n-\n-                distance = ::libc::sqrt(dx * dx + dy * dy + dz * dz);\n-                e -= bodies[i].mass * bodies[j].mass / distance;\n-\n-                j += 1;\n+    pub fn energy(bodies: &[Body::props]) -> float {\n+        unsafe {\n+            let mut dx;\n+            let mut dy;\n+            let mut dz;\n+            let mut distance;\n+            let mut e = 0.0;\n+\n+            let mut i = 0;\n+            while i < 5 {\n+                e +=\n+                    0.5 * bodies[i].mass *\n+                    (bodies[i].vx * bodies[i].vx\n+                     + bodies[i].vy * bodies[i].vy\n+                     + bodies[i].vz * bodies[i].vz);\n+\n+                let mut j = i + 1;\n+                while j < 5 {\n+                    dx = bodies[i].x - bodies[j].x;\n+                    dy = bodies[i].y - bodies[j].y;\n+                    dz = bodies[i].z - bodies[j].z;\n+\n+                    distance = ::libc::sqrt(dx * dx\n+                                            + dy * dy\n+                                            + dz * dz);\n+                    e -= bodies[i].mass\n+                        * bodies[j].mass / distance;\n+\n+                    j += 1;\n+                }\n+\n+                i += 1;\n             }\n-\n-            i += 1;\n+            return e;\n         }\n-        return e;\n-\n     }\n }\n "}]}