{"sha": "1ce0b98c7bad8c01e008ccbc790607f4bb26ec89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZTBiOThjN2JhZDhjMDFlMDA4Y2NiYzc5MDYwN2Y0YmIyNmVjODk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-23T10:21:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-23T10:21:32Z"}, "message": "auto merge of #13692 : vadimcn/rust/Win64-pre, r=alexcrichton\n\nStack unwinding doesn't work yet, so this won't pass a lot of tests.", "tree": {"sha": "b6a118b83a4875ac8f326cb4e968d7e4e46eee3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6a118b83a4875ac8f326cb4e968d7e4e46eee3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89", "html_url": "https://github.com/rust-lang/rust/commit/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49b216539f52ae225dcf5280d52f1b5ee9e84474", "url": "https://api.github.com/repos/rust-lang/rust/commits/49b216539f52ae225dcf5280d52f1b5ee9e84474", "html_url": "https://github.com/rust-lang/rust/commit/49b216539f52ae225dcf5280d52f1b5ee9e84474"}, {"sha": "f686e5ebff1a8a30c496ffe38c9cd0fcde6307ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/f686e5ebff1a8a30c496ffe38c9cd0fcde6307ce", "html_url": "https://github.com/rust-lang/rust/commit/f686e5ebff1a8a30c496ffe38c9cd0fcde6307ce"}], "stats": {"total": 159, "additions": 111, "deletions": 48}, "files": [{"sha": "d0fc5774589878cee26e46a9016135176699aa27", "filename": "mk/rt.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=1ce0b98c7bad8c01e008ccbc790607f4bb26ec89", "patch": "@@ -247,8 +247,8 @@ $$(COMPRT_LIB_$(1)): $$(COMPRT_DEPS) $$(MKFILE_DEPS)\n \t\tRANLIB=\"$$(AR_$(1)) s\" \\\n \t\tCFLAGS=\"$$(CFG_GCCISH_CFLAGS_$(1))\" \\\n \t\tTargetTriple=$(1) \\\n-\t\ttriple-runtime\n-\t$$(Q)cp $$(COMPRT_BUILD_DIR_$(1))/triple/runtime/libcompiler_rt.a $$(COMPRT_LIB_$(1))\n+\t\ttriple-builtins\n+\t$$(Q)cp $$(COMPRT_BUILD_DIR_$(1))/triple/builtins/libcompiler_rt.a $$(COMPRT_LIB_$(1))\n \n ################################################################################\n # libbacktrace"}, {"sha": "ed112ca1e4275e1c5707a898f2bf6164707ba378", "filename": "src/compiler-rt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiler-rt?ref=1ce0b98c7bad8c01e008ccbc790607f4bb26ec89", "patch": "@@ -1 +1 @@\n-Subproject commit f4b221571ce6f05714c1f1c6fa48f1393499989c\n+Subproject commit ed112ca1e4275e1c5707a898f2bf6164707ba378"}, {"sha": "faa21ca74df09bda174951da968c9f58570b5ef0", "filename": "src/etc/get-snapshot.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89/src%2Fetc%2Fget-snapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89/src%2Fetc%2Fget-snapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fget-snapshot.py?ref=1ce0b98c7bad8c01e008ccbc790607f4bb26ec89", "patch": "@@ -50,7 +50,9 @@ def unpack_snapshot(triple, dl_path):\n if len(sys.argv) == 3:\n   dl_path = sys.argv[2]\n else:\n-  snap = determine_curr_snapshot(triple)\n+  # There are no 64-bit Windows snapshots yet, so we'll use 32-bit ones instead, for now\n+  snap_triple = triple if triple != \"x86_64-w64-mingw32\" else \"i686-pc-mingw32\"\n+  snap = determine_curr_snapshot(snap_triple)\n   dl = os.path.join(download_dir_base, snap)\n   url = download_url_base + \"/\" + snap\n   print(\"determined most recent snapshot: \" + snap)"}, {"sha": "34e29b06f76ccb2a16939a838b730dbf5c0791fe", "filename": "src/libgreen/macros.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89/src%2Flibgreen%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89/src%2Flibgreen%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fmacros.rs?ref=1ce0b98c7bad8c01e008ccbc790607f4bb26ec89", "patch": "@@ -52,20 +52,9 @@ macro_rules! rtabort (\n \n pub fn dumb_println(args: &fmt::Arguments) {\n     use std::io;\n-    use libc;\n+    use std::rt;\n \n-    struct Stderr;\n-    impl io::Writer for Stderr {\n-        fn write(&mut self, data: &[u8]) -> io::IoResult<()> {\n-            unsafe {\n-                libc::write(libc::STDERR_FILENO,\n-                            data.as_ptr() as *libc::c_void,\n-                            data.len() as libc::size_t);\n-            }\n-            Ok(()) // just ignore the result\n-        }\n-    }\n-    let mut w = Stderr;\n+    let mut w = rt::Stderr;\n     let _ = fmt::writeln(&mut w as &mut io::Writer, args);\n }\n "}, {"sha": "8e827703cb2b8985de8a3b685ea6915dc86227cf", "filename": "src/librustuv/macros.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89/src%2Flibrustuv%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89/src%2Flibrustuv%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fmacros.rs?ref=1ce0b98c7bad8c01e008ccbc790607f4bb26ec89", "patch": "@@ -29,19 +29,8 @@ macro_rules! uvdebug (\n \n pub fn dumb_println(args: &fmt::Arguments) {\n     use std::io;\n-    use libc;\n+    use std::rt;\n \n-    struct Stderr;\n-    impl io::Writer for Stderr {\n-        fn write(&mut self, data: &[u8]) -> io::IoResult<()> {\n-            let _ = unsafe {\n-                libc::write(libc::STDERR_FILENO,\n-                            data.as_ptr() as *libc::c_void,\n-                            data.len() as libc::size_t)\n-            };\n-            Ok(()) // just ignore the errors\n-        }\n-    }\n-    let mut w = Stderr;\n+    let mut w = rt::Stderr;\n     let _ = fmt::writeln(&mut w as &mut io::Writer, args);\n }"}, {"sha": "afef21e7c688f7c4e0eb73a9f67ee5fba2a08ce3", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=1ce0b98c7bad8c01e008ccbc790607f4bb26ec89", "patch": "@@ -27,7 +27,6 @@ out.write(bytes!(\"Hello, world!\"));\n \n */\n \n-use container::Container;\n use fmt;\n use io::{Reader, Writer, IoResult, IoError, OtherIoError,\n          standard_error, EndOfFile, LineBufferedWriter, BufferedReader};\n@@ -37,11 +36,11 @@ use mem::replace;\n use option::{Option, Some, None};\n use prelude::drop;\n use result::{Ok, Err};\n+use rt;\n use rt::local::Local;\n use rt::rtio::{DontClose, IoFactory, LocalIo, RtioFileStream, RtioTTY};\n use rt::task::Task;\n use str::StrSlice;\n-use slice::ImmutableVector;\n \n // And so begins the tale of acquiring a uv handle to a stdio stream on all\n // platforms in all situations. Our story begins by splitting the world into two\n@@ -236,18 +235,7 @@ fn with_task_stdout(f: |&mut Writer| -> IoResult<()> ) {\n         }\n \n         None => {\n-            struct Stdout;\n-            impl Writer for Stdout {\n-                fn write(&mut self, data: &[u8]) -> IoResult<()> {\n-                    unsafe {\n-                        libc::write(libc::STDOUT_FILENO,\n-                                    data.as_ptr() as *libc::c_void,\n-                                    data.len() as libc::size_t);\n-                    }\n-                    Ok(()) // just ignore the results\n-                }\n-            }\n-            let mut io = Stdout;\n+            let mut io = rt::Stdout;\n             f(&mut io as &mut Writer)\n         }\n     };"}, {"sha": "85699cdfebc02a97691d06b764f06af333d64b56", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=1ce0b98c7bad8c01e008ccbc790607f4bb26ec89", "patch": "@@ -665,6 +665,89 @@ mod imp {\n         }\n     }\n \n+    #[cfg(target_arch = \"x86_64\")]\n+    mod arch {\n+        use libc::{c_longlong, c_ulonglong};\n+        use libc::types::os::arch::extra::{WORD, DWORD, DWORDLONG};\n+\n+        pub struct CONTEXT {\n+            P1Home: DWORDLONG,\n+            P2Home: DWORDLONG,\n+            P3Home: DWORDLONG,\n+            P4Home: DWORDLONG,\n+            P5Home: DWORDLONG,\n+            P6Home: DWORDLONG,\n+\n+            ContextFlags: DWORD,\n+            MxCsr: DWORD,\n+\n+            SegCs: WORD,\n+            SegDs: WORD,\n+            SegEs: WORD,\n+            SegFs: WORD,\n+            SegGs: WORD,\n+            SegSs: WORD,\n+            EFlags: DWORD,\n+\n+            Dr0: DWORDLONG,\n+            Dr1: DWORDLONG,\n+            Dr2: DWORDLONG,\n+            Dr3: DWORDLONG,\n+            Dr6: DWORDLONG,\n+            Dr7: DWORDLONG,\n+\n+            Rax: DWORDLONG,\n+            Rcx: DWORDLONG,\n+            Rdx: DWORDLONG,\n+            Rbx: DWORDLONG,\n+            Rsp: DWORDLONG,\n+            Rbp: DWORDLONG,\n+            Rsi: DWORDLONG,\n+            Rdi: DWORDLONG,\n+            R8:  DWORDLONG,\n+            R9:  DWORDLONG,\n+            R10: DWORDLONG,\n+            R11: DWORDLONG,\n+            R12: DWORDLONG,\n+            R13: DWORDLONG,\n+            R14: DWORDLONG,\n+            R15: DWORDLONG,\n+\n+            Rip: DWORDLONG,\n+\n+            FltSave: FLOATING_SAVE_AREA,\n+\n+            VectorRegister: [M128A, .. 26],\n+            VectorControl: DWORDLONG,\n+\n+            DebugControl: DWORDLONG,\n+            LastBranchToRip: DWORDLONG,\n+            LastBranchFromRip: DWORDLONG,\n+            LastExceptionToRip: DWORDLONG,\n+            LastExceptionFromRip: DWORDLONG,\n+        }\n+\n+        pub struct M128A {\n+            Low:  c_ulonglong,\n+            High: c_longlong\n+        }\n+\n+        pub struct FLOATING_SAVE_AREA {\n+            _Dummy: [u8, ..512] // FIXME: Fill this out\n+        }\n+\n+        pub fn init_frame(frame: &mut super::STACKFRAME64,\n+                          ctx: &CONTEXT) -> DWORD {\n+            frame.AddrPC.Offset = ctx.Rip as u64;\n+            frame.AddrPC.Mode = super::AddrModeFlat;\n+            frame.AddrStack.Offset = ctx.Rsp as u64;\n+            frame.AddrStack.Mode = super::AddrModeFlat;\n+            frame.AddrFrame.Offset = ctx.Rbp as u64;\n+            frame.AddrFrame.Mode = super::AddrModeFlat;\n+            super::IMAGE_FILE_MACHINE_AMD64\n+        }\n+    }\n+\n     struct Cleanup {\n         handle: libc::HANDLE,\n         SymCleanup: SymCleanupFn,"}, {"sha": "a61443d335acb7db046de3b002297cba55bafd91", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=1ce0b98c7bad8c01e008ccbc790607f4bb26ec89", "patch": "@@ -71,6 +71,8 @@ pub use self::util::default_sched_threads;\n // Export unwinding facilities used by the failure macros\n pub use self::unwind::{begin_unwind, begin_unwind_raw, begin_unwind_fmt};\n \n+pub use self::util::{Stdio, Stdout, Stderr};\n+\n // FIXME: these probably shouldn't be public...\n #[doc(hidden)]\n pub mod shouldnt_be_public {"}, {"sha": "84284ca1faf52690f5d854e1664b740e2bd24a2d", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=1ce0b98c7bad8c01e008ccbc790607f4bb26ec89", "patch": "@@ -71,14 +71,22 @@ pub fn default_sched_threads() -> uint {\n     }\n }\n \n-pub struct Stderr;\n+pub struct Stdio(libc::c_int);\n \n-impl io::Writer for Stderr {\n+pub static Stdout: Stdio = Stdio(libc::STDOUT_FILENO);\n+pub static Stderr: Stdio = Stdio(libc::STDERR_FILENO);\n+\n+impl io::Writer for Stdio {\n     fn write(&mut self, data: &[u8]) -> IoResult<()> {\n+        #[cfg(unix)]\n+        type WriteLen = libc::size_t;\n+        #[cfg(windows)]\n+        type WriteLen = libc::c_uint;\n         unsafe {\n-            libc::write(libc::STDERR_FILENO,\n+            let Stdio(fd) = *self;\n+            libc::write(fd,\n                         data.as_ptr() as *libc::c_void,\n-                        data.len() as libc::size_t);\n+                        data.len() as WriteLen);\n         }\n         Ok(()) // yes, we're lying\n     }"}, {"sha": "8faedcbd9edf97606ba835ba05aabfc53b68941e", "filename": "src/libstd/unstable/mutex.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89/src%2Flibstd%2Funstable%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89/src%2Flibstd%2Funstable%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmutex.rs?ref=1ce0b98c7bad8c01e008ccbc790607f4bb26ec89", "patch": "@@ -444,6 +444,8 @@ mod imp {\n     static SPIN_COUNT: DWORD = 4000;\n     #[cfg(target_arch = \"x86\")]\n     static CRIT_SECTION_SIZE: uint = 24;\n+    #[cfg(target_arch = \"x86_64\")]\n+    static CRIT_SECTION_SIZE: uint = 40;\n \n     pub struct Mutex {\n         // pointers for the lock/cond handles, atomically updated"}]}