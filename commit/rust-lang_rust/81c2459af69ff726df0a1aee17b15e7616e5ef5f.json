{"sha": "81c2459af69ff726df0a1aee17b15e7616e5ef5f", "node_id": "C_kwDOAAsO6NoAKDgxYzI0NTlhZjY5ZmY3MjZkZjBhMWFlZTE3YjE1ZTc2MTZlNWVmNWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-05T12:50:59Z"}, "committer": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2023-05-05T18:36:21Z"}, "message": "Stabilize const_ptr_read", "tree": {"sha": "da3c36e64b885b2d80eb1d5daa6e56118a952010", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da3c36e64b885b2d80eb1d5daa6e56118a952010"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81c2459af69ff726df0a1aee17b15e7616e5ef5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81c2459af69ff726df0a1aee17b15e7616e5ef5f", "html_url": "https://github.com/rust-lang/rust/commit/81c2459af69ff726df0a1aee17b15e7616e5ef5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81c2459af69ff726df0a1aee17b15e7616e5ef5f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a18324a4df6bc98bec0b54d35908d7a9cdc7c32", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a18324a4df6bc98bec0b54d35908d7a9cdc7c32", "html_url": "https://github.com/rust-lang/rust/commit/4a18324a4df6bc98bec0b54d35908d7a9cdc7c32"}], "stats": {"total": 77, "additions": 35, "deletions": 42}, "files": [{"sha": "59fa91c1066dc4ef4f225e5eca569848dd335941", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81c2459af69ff726df0a1aee17b15e7616e5ef5f/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c2459af69ff726df0a1aee17b15e7616e5ef5f/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=81c2459af69ff726df0a1aee17b15e7616e5ef5f", "patch": "@@ -113,7 +113,6 @@\n #![feature(const_maybe_uninit_write)]\n #![feature(const_maybe_uninit_zeroed)]\n #![feature(const_pin)]\n-#![feature(const_ptr_read)]\n #![feature(const_refs_to_cell)]\n #![feature(const_size_of_val)]\n #![feature(const_waker)]"}, {"sha": "ff5f4867afb243ab81af5079d6b76b5260aae103", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c2459af69ff726df0a1aee17b15e7616e5ef5f/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c2459af69ff726df0a1aee17b15e7616e5ef5f/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=81c2459af69ff726df0a1aee17b15e7616e5ef5f", "patch": "@@ -2260,7 +2260,7 @@ extern \"rust-intrinsic\" {\n     /// This intrinsic can *only* be called where the pointer is a local without\n     /// projections (`read_via_copy(ptr)`, not `read_via_copy(*ptr)`) so that it\n     /// trivially obeys runtime-MIR rules about derefs in operands.\n-    #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n+    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[rustc_nounwind]\n     pub fn read_via_copy<T>(ptr: *const T) -> T;\n "}, {"sha": "c9b49da069a060d5ab700e99624d936efcdf24a3", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81c2459af69ff726df0a1aee17b15e7616e5ef5f/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c2459af69ff726df0a1aee17b15e7616e5ef5f/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=81c2459af69ff726df0a1aee17b15e7616e5ef5f", "patch": "@@ -140,7 +140,6 @@\n #![feature(const_pointer_is_aligned)]\n #![feature(const_ptr_as_ref)]\n #![feature(const_ptr_is_null)]\n-#![feature(const_ptr_read)]\n #![feature(const_ptr_sub_ptr)]\n #![feature(const_ptr_write)]\n #![feature(const_raw_ptr_comparison)]"}, {"sha": "5ee1b5e4afc785c713c72ca229de7bcadd0dbec5", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81c2459af69ff726df0a1aee17b15e7616e5ef5f/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c2459af69ff726df0a1aee17b15e7616e5ef5f/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=81c2459af69ff726df0a1aee17b15e7616e5ef5f", "patch": "@@ -1195,7 +1195,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// [`ptr::read`]: crate::ptr::read()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n+    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[inline]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn read(self) -> T\n@@ -1236,7 +1236,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// [`ptr::read_unaligned`]: crate::ptr::read_unaligned()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n+    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[inline]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn read_unaligned(self) -> T"}, {"sha": "ecbf4e66fa4897847e438d9efe1ece01d56d4a87", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81c2459af69ff726df0a1aee17b15e7616e5ef5f/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c2459af69ff726df0a1aee17b15e7616e5ef5f/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=81c2459af69ff726df0a1aee17b15e7616e5ef5f", "patch": "@@ -1133,7 +1133,8 @@ pub const unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n /// [valid]: self#safety\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n+#[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[rustc_allow_const_fn_unstable(const_mut_refs, const_maybe_uninit_as_mut_ptr)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n pub const unsafe fn read<T>(src: *const T) -> T {\n     // It would be semantically correct to implement this via `copy_nonoverlapping`\n@@ -1249,7 +1250,8 @@ pub const unsafe fn read<T>(src: *const T) -> T {\n /// ```\n #[inline]\n #[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n-#[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n+#[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[rustc_allow_const_fn_unstable(const_mut_refs, const_maybe_uninit_as_mut_ptr)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n pub const unsafe fn read_unaligned<T>(src: *const T) -> T {\n     let mut tmp = MaybeUninit::<T>::uninit();"}, {"sha": "5edd291fb76aa5384c9ac7e4d599b61d33b2479c", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81c2459af69ff726df0a1aee17b15e7616e5ef5f/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c2459af69ff726df0a1aee17b15e7616e5ef5f/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=81c2459af69ff726df0a1aee17b15e7616e5ef5f", "patch": "@@ -1305,7 +1305,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::read`]: crate::ptr::read()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n+    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[inline(always)]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn read(self) -> T\n@@ -1346,7 +1346,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::read_unaligned`]: crate::ptr::read_unaligned()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n+    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[inline(always)]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn read_unaligned(self) -> T"}, {"sha": "3c49d1705e5ca60a381d95f0babb3a4736d81621", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81c2459af69ff726df0a1aee17b15e7616e5ef5f/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c2459af69ff726df0a1aee17b15e7616e5ef5f/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=81c2459af69ff726df0a1aee17b15e7616e5ef5f", "patch": "@@ -18,7 +18,6 @@\n #![feature(const_pointer_byte_offsets)]\n #![feature(const_pointer_is_aligned)]\n #![feature(const_ptr_as_ref)]\n-#![feature(const_ptr_read)]\n #![feature(const_ptr_write)]\n #![feature(const_trait_impl)]\n #![feature(const_likely)]"}, {"sha": "ff265fba6e2fec760b3581f5acce5495fe61707d", "filename": "src/tools/miri/tests/fail/const-ub-checks.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81c2459af69ff726df0a1aee17b15e7616e5ef5f/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconst-ub-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c2459af69ff726df0a1aee17b15e7616e5ef5f/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconst-ub-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconst-ub-checks.rs?ref=81c2459af69ff726df0a1aee17b15e7616e5ef5f", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_ptr_read)]\n \n const UNALIGNED_READ: () = unsafe {\n     let x = &[0u8; 4];"}, {"sha": "6cfabb65efb25325b4657f12525d7f88b9adb75a", "filename": "tests/ui/const-generics/issues/issue-105821.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c2459af69ff726df0a1aee17b15e7616e5ef5f/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-105821.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c2459af69ff726df0a1aee17b15e7616e5ef5f/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-105821.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-105821.rs?ref=81c2459af69ff726df0a1aee17b15e7616e5ef5f", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n \n #![allow(incomplete_features)]\n-#![feature(adt_const_params, const_ptr_read, generic_const_exprs)]\n+#![feature(adt_const_params, generic_const_exprs)]\n #![allow(dead_code)]\n \n const fn catone<const M: usize>(_a: &[u8; M]) -> [u8; M + 1]"}, {"sha": "a371aa93c5ee2a61d8725eb2ddf0ffac074e5c58", "filename": "tests/ui/const-ptr/out_of_bounds_read.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c2459af69ff726df0a1aee17b15e7616e5ef5f/tests%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c2459af69ff726df0a1aee17b15e7616e5ef5f/tests%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs?ref=81c2459af69ff726df0a1aee17b15e7616e5ef5f", "patch": "@@ -1,7 +1,5 @@\n // error-pattern: evaluation of constant value failed\n \n-#![feature(const_ptr_read)]\n-\n fn main() {\n     use std::ptr;\n "}, {"sha": "c5c0a1cdefcb4d7c9577e1fe622758851587bcbc", "filename": "tests/ui/const-ptr/out_of_bounds_read.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81c2459af69ff726df0a1aee17b15e7616e5ef5f/tests%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81c2459af69ff726df0a1aee17b15e7616e5ef5f/tests%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr?ref=81c2459af69ff726df0a1aee17b15e7616e5ef5f", "patch": "@@ -6,7 +6,7 @@ error[E0080]: evaluation of constant value failed\n note: inside `std::ptr::read::<u32>`\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n note: inside `_READ`\n-  --> $DIR/out_of_bounds_read.rs:12:33\n+  --> $DIR/out_of_bounds_read.rs:10:33\n    |\n LL |     const _READ: u32 = unsafe { ptr::read(PAST_END_PTR) };\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -21,7 +21,7 @@ note: inside `std::ptr::read::<u32>`\n note: inside `ptr::const_ptr::<impl *const u32>::read`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n note: inside `_CONST_READ`\n-  --> $DIR/out_of_bounds_read.rs:13:39\n+  --> $DIR/out_of_bounds_read.rs:11:39\n    |\n LL |     const _CONST_READ: u32 = unsafe { PAST_END_PTR.read() };\n    |                                       ^^^^^^^^^^^^^^^^^^^\n@@ -36,7 +36,7 @@ note: inside `std::ptr::read::<u32>`\n note: inside `ptr::mut_ptr::<impl *mut u32>::read`\n   --> $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n note: inside `_MUT_READ`\n-  --> $DIR/out_of_bounds_read.rs:14:37\n+  --> $DIR/out_of_bounds_read.rs:12:37\n    |\n LL |     const _MUT_READ: u32 = unsafe { (PAST_END_PTR as *mut u32).read() };\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a5d2ea0148659dfad99d034c35a2f857ec11235a", "filename": "tests/ui/consts/const-eval/ub-ref-ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81c2459af69ff726df0a1aee17b15e7616e5ef5f/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c2459af69ff726df0a1aee17b15e7616e5ef5f/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs?ref=81c2459af69ff726df0a1aee17b15e7616e5ef5f", "patch": "@@ -3,7 +3,6 @@\n // normalize-stderr-test \"(the raw bytes of the constant) \\(size: [0-9]*, align: [0-9]*\\)\" -> \"$1 (size: $$SIZE, align: $$ALIGN)\"\n // normalize-stderr-test \"([0-9a-f][0-9a-f] |\u257e\u2500*a(lloc)?[0-9]+(\\+[a-z0-9]+)?\u2500*\u257c )+ *\u2502.*\" -> \"HEX_DUMP\"\n #![allow(invalid_value)]\n-#![feature(const_ptr_read)]\n \n use std::mem;\n "}, {"sha": "1d19dfff50b367de53c57e974bcd0af2c89d3243", "filename": "tests/ui/consts/const-eval/ub-ref-ptr.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/81c2459af69ff726df0a1aee17b15e7616e5ef5f/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81c2459af69ff726df0a1aee17b15e7616e5ef5f/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.stderr?ref=81c2459af69ff726df0a1aee17b15e7616e5ef5f", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:16:1\n+  --> $DIR/ub-ref-ptr.rs:15:1\n    |\n LL | const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n    | ^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 2 byte alignment but found 1)\n@@ -10,7 +10,7 @@ LL | const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:20:1\n+  --> $DIR/ub-ref-ptr.rs:19:1\n    |\n LL | const UNALIGNED_BOX: Box<u16> = unsafe { mem::transmute(&[0u8; 4]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned box (required 2 byte alignment but found 1)\n@@ -21,7 +21,7 @@ LL | const UNALIGNED_BOX: Box<u16> = unsafe { mem::transmute(&[0u8; 4]) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:24:1\n+  --> $DIR/ub-ref-ptr.rs:23:1\n    |\n LL | const NULL: &u16 = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^ constructing invalid value: encountered a null reference\n@@ -32,7 +32,7 @@ LL | const NULL: &u16 = unsafe { mem::transmute(0usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:27:1\n+  --> $DIR/ub-ref-ptr.rs:26:1\n    |\n LL | const NULL_BOX: Box<u16> = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a null box\n@@ -43,7 +43,7 @@ LL | const NULL_BOX: Box<u16> = unsafe { mem::transmute(0usize) };\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-ref-ptr.rs:34:1\n+  --> $DIR/ub-ref-ptr.rs:33:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n@@ -52,7 +52,7 @@ LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-ref-ptr.rs:37:39\n+  --> $DIR/ub-ref-ptr.rs:36:39\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n@@ -61,13 +61,13 @@ LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n note: erroneous constant used\n-  --> $DIR/ub-ref-ptr.rs:37:38\n+  --> $DIR/ub-ref-ptr.rs:36:38\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-ref-ptr.rs:40:86\n+  --> $DIR/ub-ref-ptr.rs:39:86\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n    |                                                                                      ^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n@@ -76,13 +76,13 @@ LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[us\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n note: erroneous constant used\n-  --> $DIR/ub-ref-ptr.rs:40:85\n+  --> $DIR/ub-ref-ptr.rs:39:85\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n    |                                                                                     ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:43:1\n+  --> $DIR/ub-ref-ptr.rs:42:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling reference (0x539[noalloc] has no provenance)\n@@ -93,7 +93,7 @@ LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:46:1\n+  --> $DIR/ub-ref-ptr.rs:45:1\n    |\n LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling box (0x539[noalloc] has no provenance)\n@@ -104,13 +104,13 @@ LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-ref-ptr.rs:49:41\n+  --> $DIR/ub-ref-ptr.rs:48:41\n    |\n LL | const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:53:1\n+  --> $DIR/ub-ref-ptr.rs:52:1\n    |\n LL | const NULL_FN_PTR: fn() = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered null pointer, but expected a function pointer\n@@ -121,13 +121,13 @@ LL | const NULL_FN_PTR: fn() = unsafe { mem::transmute(0usize) };\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-ref-ptr.rs:55:38\n+  --> $DIR/ub-ref-ptr.rs:54:38\n    |\n LL | const UNINIT_FN_PTR: fn() = unsafe { MaybeUninit { uninit: () }.init };\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:58:1\n+  --> $DIR/ub-ref-ptr.rs:57:1\n    |\n LL | const DANGLING_FN_PTR: fn() = unsafe { mem::transmute(13usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0xd[noalloc], but expected a function pointer\n@@ -138,7 +138,7 @@ LL | const DANGLING_FN_PTR: fn() = unsafe { mem::transmute(13usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:60:1\n+  --> $DIR/ub-ref-ptr.rs:59:1\n    |\n LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered alloc41, but expected a function pointer\n@@ -158,7 +158,7 @@ note: inside `std::ptr::read::<u32>`\n note: inside `ptr::const_ptr::<impl *const u32>::read`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n note: inside `UNALIGNED_READ`\n-  --> $DIR/ub-ref-ptr.rs:67:5\n+  --> $DIR/ub-ref-ptr.rs:66:5\n    |\n LL |     ptr.read();\n    |     ^^^^^^^^^^"}, {"sha": "6a3c93ce7a6745d4708c0da089f7baeccdf284ac", "filename": "tests/ui/consts/extra-const-ub/detect-extra-ub.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81c2459af69ff726df0a1aee17b15e7616e5ef5f/tests%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c2459af69ff726df0a1aee17b15e7616e5ef5f/tests%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs?ref=81c2459af69ff726df0a1aee17b15e7616e5ef5f", "patch": "@@ -1,7 +1,6 @@\n // revisions: no_flag with_flag\n // [no_flag] check-pass\n // [with_flag] compile-flags: -Zextra-const-ub-checks\n-#![feature(const_ptr_read)]\n \n use std::mem::transmute;\n "}, {"sha": "3970baefcb354540d16794a632d8dcc59cad8bd5", "filename": "tests/ui/consts/extra-const-ub/detect-extra-ub.with_flag.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81c2459af69ff726df0a1aee17b15e7616e5ef5f/tests%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81c2459af69ff726df0a1aee17b15e7616e5ef5f/tests%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr?ref=81c2459af69ff726df0a1aee17b15e7616e5ef5f", "patch": "@@ -1,11 +1,11 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/detect-extra-ub.rs:9:20\n+  --> $DIR/detect-extra-ub.rs:8:20\n    |\n LL |     let _x: bool = transmute(3u8);\n    |                    ^^^^^^^^^^^^^^ constructing invalid value: encountered 0x03, but expected a boolean\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/detect-extra-ub.rs:15:21\n+  --> $DIR/detect-extra-ub.rs:14:21\n    |\n LL |     let _x: usize = transmute(&3u8);\n    |                     ^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n@@ -14,7 +14,7 @@ LL |     let _x: usize = transmute(&3u8);\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/detect-extra-ub.rs:21:30\n+  --> $DIR/detect-extra-ub.rs:20:30\n    |\n LL |     let _x: (usize, usize) = transmute(x);\n    |                              ^^^^^^^^^^^^ unable to turn pointer into raw bytes\n@@ -23,7 +23,7 @@ LL |     let _x: (usize, usize) = transmute(x);\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/detect-extra-ub.rs:26:20\n+  --> $DIR/detect-extra-ub.rs:25:20\n    |\n LL |     let _x: &u32 = transmute(&[0u8; 4]);\n    |                    ^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 4 byte alignment but found 1)"}, {"sha": "3798332dfd788830a2ececc7f7678c7ab73dd923", "filename": "tests/ui/consts/issue-miri-1910.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81c2459af69ff726df0a1aee17b15e7616e5ef5f/tests%2Fui%2Fconsts%2Fissue-miri-1910.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c2459af69ff726df0a1aee17b15e7616e5ef5f/tests%2Fui%2Fconsts%2Fissue-miri-1910.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-miri-1910.rs?ref=81c2459af69ff726df0a1aee17b15e7616e5ef5f", "patch": "@@ -1,6 +1,5 @@\n // error-pattern unable to turn pointer into raw bytes\n // normalize-stderr-test: \"alloc[0-9]+\\+0x[a-z0-9]+\" -> \"ALLOC\"\n-#![feature(const_ptr_read)]\n \n const C: () = unsafe {\n     let foo = Some(&42 as *const i32);"}, {"sha": "fb758d406b550d80284e62b419a5b64a4843d813", "filename": "tests/ui/consts/issue-miri-1910.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c2459af69ff726df0a1aee17b15e7616e5ef5f/tests%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81c2459af69ff726df0a1aee17b15e7616e5ef5f/tests%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-miri-1910.stderr?ref=81c2459af69ff726df0a1aee17b15e7616e5ef5f", "patch": "@@ -10,7 +10,7 @@ note: inside `std::ptr::read::<u8>`\n note: inside `ptr::const_ptr::<impl *const u8>::read`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n note: inside `C`\n-  --> $DIR/issue-miri-1910.rs:8:5\n+  --> $DIR/issue-miri-1910.rs:7:5\n    |\n LL |     (&foo as *const _ as *const u8).add(one_and_a_half_pointers).read();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}