{"sha": "b4f54f96df60337cb939f6f753a1cc6181e70f4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZjU0Zjk2ZGY2MDMzN2NiOTM5ZjZmNzUzYTFjYzYxODFlNzBmNGI=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2014-12-17T00:24:35Z"}, "committer": {"name": "James Miller", "email": "james@aatch.net", "date": "2014-12-18T02:28:34Z"}, "message": "Minor fixes", "tree": {"sha": "32ddcc2e15fd013576eab8f5059bf5dd24c52fbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32ddcc2e15fd013576eab8f5059bf5dd24c52fbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4f54f96df60337cb939f6f753a1cc6181e70f4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f54f96df60337cb939f6f753a1cc6181e70f4b", "html_url": "https://github.com/rust-lang/rust/commit/b4f54f96df60337cb939f6f753a1cc6181e70f4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4f54f96df60337cb939f6f753a1cc6181e70f4b/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9115b319c31d644f01387c9fe3eff9a498941090", "url": "https://api.github.com/repos/rust-lang/rust/commits/9115b319c31d644f01387c9fe3eff9a498941090", "html_url": "https://github.com/rust-lang/rust/commit/9115b319c31d644f01387c9fe3eff9a498941090"}], "stats": {"total": 13, "additions": 4, "deletions": 9}, "files": [{"sha": "04f86d0a9bad4ea9a065dd596667e9f6d170d7e4", "filename": "src/librustc/middle/cfg/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b4f54f96df60337cb939f6f753a1cc6181e70f4b/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f54f96df60337cb939f6f753a1cc6181e70f4b/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs?ref=b4f54f96df60337cb939f6f753a1cc6181e70f4b", "patch": "@@ -51,9 +51,6 @@ impl CFG {\n     }\n \n     pub fn node_is_reachable(&self, id: ast::NodeId) -> bool {\n-        for node in self.graph.depth_traverse(self.entry) {\n-            if node.id == id { return true }\n-        }\n-        return false;\n+        self.graph.depth_traverse(self.entry).any(|node| node.id == id)\n     }\n }"}, {"sha": "3ba72801e2bff4d90dec310a061221b7f45b9f10", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4f54f96df60337cb939f6f753a1cc6181e70f4b/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f54f96df60337cb939f6f753a1cc6181e70f4b/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=b4f54f96df60337cb939f6f753a1cc6181e70f4b", "patch": "@@ -313,12 +313,10 @@ pub struct DepthFirstTraversal<'g, N:'g, E:'g> {\n \n impl<'g, N, E> Iterator<&'g N> for DepthFirstTraversal<'g, N, E> {\n     fn next(&mut self) -> Option<&'g N> {\n-        while self.stack.len() > 0 {\n-            let idx = self.stack.pop().unwrap();\n-            if self.visited.contains(&idx.node_id()) {\n+        while let Some(idx) = self.stack.pop() {\n+            if self.visited.insert(idx.node_id()) {\n                 continue;\n             }\n-            self.visited.insert(idx.node_id());\n             self.graph.each_outgoing_edge(idx, |_, e| -> bool {\n                 if !self.visited.contains(&e.target().node_id()) {\n                     self.stack.push(e.target());"}, {"sha": "5b90dec8323b9a53ed42a8a2f10cf3be5b06d531", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4f54f96df60337cb939f6f753a1cc6181e70f4b/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f54f96df60337cb939f6f753a1cc6181e70f4b/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=b4f54f96df60337cb939f6f753a1cc6181e70f4b", "patch": "@@ -1468,7 +1468,7 @@ pub fn new_fn_ctxt<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n     let debug_context = debuginfo::create_function_debug_context(ccx, id, param_substs, llfndecl);\n     let (blk_id, cfg) = build_cfg(ccx.tcx(), id);\n     let nested_returns = if let Some(ref cfg) = cfg {\n-       has_nested_returns(ccx.tcx(), cfg, blk_id)\n+        has_nested_returns(ccx.tcx(), cfg, blk_id)\n     } else {\n         false\n     };"}]}