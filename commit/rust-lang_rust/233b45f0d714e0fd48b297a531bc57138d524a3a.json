{"sha": "233b45f0d714e0fd48b297a531bc57138d524a3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzM2I0NWYwZDcxNGUwZmQ0OGIyOTdhNTMxYmM1NzEzOGQ1MjRhM2E=", "commit": {"author": {"name": "ubsan", "email": "npmazzuca@gmail.com", "date": "2016-07-02T06:57:10Z"}, "committer": {"name": "ubsan", "email": "npmazzuca@gmail.com", "date": "2016-07-02T06:57:10Z"}, "message": "Fix up some things which scott mentioned", "tree": {"sha": "88acd45685a347d50a8be37f85d3d97b1e256364", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88acd45685a347d50a8be37f85d3d97b1e256364"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/233b45f0d714e0fd48b297a531bc57138d524a3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/233b45f0d714e0fd48b297a531bc57138d524a3a", "html_url": "https://github.com/rust-lang/rust/commit/233b45f0d714e0fd48b297a531bc57138d524a3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/233b45f0d714e0fd48b297a531bc57138d524a3a/comments", "author": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d03f7541e37fe4728149f6466d4c8aba51d7ec0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d03f7541e37fe4728149f6466d4c8aba51d7ec0", "html_url": "https://github.com/rust-lang/rust/commit/3d03f7541e37fe4728149f6466d4c8aba51d7ec0"}], "stats": {"total": 81, "additions": 46, "deletions": 35}, "files": [{"sha": "c7ea5e9da640b07931688a626d7b9b02258b0845", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 46, "deletions": 35, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/233b45f0d714e0fd48b297a531bc57138d524a3a/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/233b45f0d714e0fd48b297a531bc57138d524a3a/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=233b45f0d714e0fd48b297a531bc57138d524a3a", "patch": "@@ -278,65 +278,74 @@ extern \"rust-intrinsic\" {\n     /// Moves a value out of scope without running drop glue.\n     pub fn forget<T>(_: T) -> ();\n \n-    /// Bitcasts a value of one type to another. Both types must have the same\n-    /// size.\n+    /// Reinterprets the bits of a value of one type as another type. Both types\n+    /// must have the same size. Neither the original, nor the result, may be an\n+    /// invalid value, or else you'll have UB on your hands.\n     ///\n     /// `transmute::<T, U>(t)` is semantically equivalent to the following:\n     ///\n     /// ```\n+    /// // assuming that T and U are the same size\n     /// fn transmute<T, U>(t: T) -> U {\n-    ///   let u: U = std::mem::uninitialized();\n-    ///   std::ptr::copy_nonoverlapping(&t as *const T as *const u8,\n-    ///                                 &mut u as *mut U as *mut u8,\n-    ///                                 std::mem::size_of::<T>());\n-    ///   std::mem::forget(t);\n-    ///   u\n+    ///     let u: U = std::mem::uninitialized();\n+    ///     std::ptr::copy_nonoverlapping(&t as *const T as *const u8,\n+    ///                                   &mut u as *mut U as *mut u8,\n+    ///                                   std::mem::size_of::<T>());\n+    ///     std::mem::forget(t);\n+    ///     u\n     /// }\n     /// ```\n     ///\n-    /// `transmute` is incredibly unsafe. There are an incredible number of ways\n-    /// to cause undefined behavior with this function. `transmute` should be\n+    /// `transmute` is incredibly unsafe. There are a vast number of ways to\n+    /// cause undefined behavior with this function. `transmute` should be\n     /// the absolute last resort.\n     ///\n     /// The following is more complete documentation. Read it before using\n     /// `transmute`:\n     /// [nomicon](https://doc.rust-lang.org/nomicon/transmutes.html)\n     ///\n-    /// # Examples\n+    /// # Alternatives\n+    ///\n+    /// There are very few good cases for `transmute`. Most can be achieved\n+    /// through other means. Some more or less common uses, and a better way,\n+    /// are as follows:\n     ///\n     /// ```\n     /// use std::mem;\n     ///\n-    /// let slice: &[u8] = unsafe { mem::transmute::<&str, &[u8]>(\"Rust\") };\n-    /// assert_eq!(slice, [82, 117, 115, 116]);\n-    /// // this is not a good way to do this.\n-    /// // use .as_bytes()\n-    /// let slice = \"Rust\".as_bytes();\n-    /// assert_eq!(slice, [82, 117, 115, 116]);\n-    /// // Or, just use a byte string\n-    /// assert_eq!(b\"Rust\", [82, 117, 116, 116]);\n-    /// ```\n+    /// // turning a pointer into a usize\n+    /// let ptr = &0;\n+    /// let ptr_num_transmute = std::mem::transmute::<&i32, usize>(ptr);\n+    /// // now with more `as`\n+    /// let ptr_num_cast = ptr as *const i32 as usize;\n     ///\n-    /// There are very few good cases for `transmute`. Most can be achieved\n-    /// through other means. Some commone uses, and the less unsafe way, are as\n-    /// follows:\n     ///\n-    /// ```\n     /// // Turning a *mut T into an &mut T\n     /// let ptr: *mut i32 = &mut 0;\n-    /// let reF_transmuted = std::mem::transmute::<*mut i32, &mut i32>(ptr);\n+    /// let ref_transmuted = std::mem::transmute::<*mut i32, &mut i32>(ptr);\n+    /// // Use reborrows\n     /// let ref_casted = &mut *ptr;\n-    /// ```\n     ///\n-    /// ```\n+    ///\n     /// // Turning an &mut T into an &mut U\n     /// let ptr = &mut 0;\n     /// let val_transmuted = std::mem::transmute::<&mut i32, &mut u32>(ptr);\n-    /// // There is a better way, using `as` and reborrowing:\n-    /// let val_casts = &mut *(ptr as *mut T as *mut U);\n-    /// ```\n+    /// // Reborrowing continues to play a role here, but now we add `as` casts\n+    /// let val_casts = &mut *(ptr as *mut i32 as *mut u32);\n+    ///\n+    ///\n+    /// // Turning an `&str` into an `&[u8]`\n+    /// let slice = unsafe { mem::transmute::<&str, &[u8]>(\"Rust\") };\n+    /// assert_eq!(slice, [82, 117, 115, 116]);\n+    /// // this is not a good way to do this.\n+    /// // use .as_bytes()\n+    /// let slice = \"Rust\".as_bytes();\n+    /// assert_eq!(slice, [82, 117, 115, 116]);\n+    /// // Or, just use a byte string, if you have control over the string\n+    /// // literal\n+    /// assert_eq!(b\"Rust\", [82, 117, 116, 116]);\n+    ///\n     ///\n-    /// ```\n     /// // Copying an `&mut T` to reslice:\n     /// fn split_at_mut_transmute<T>(slice: &mut [T], index: usize)\n     ///                              -> (&mut [T], &mut [T]) {\n@@ -345,7 +354,7 @@ extern \"rust-intrinsic\" {\n     ///     let slice2 = std::mem::transmute::<&mut [T], &mut [T]>(slice);\n     ///     (slice[0..index], slice2[index..len])\n     /// }\n-    /// // or:\n+    /// // Again, use `as` and reborrowing\n     /// fn split_at_mut_casts<T>(slice: &mut [T], index: usize)\n     ///                          -> (&mut [T], &mut [T]) {\n     ///     let len = slice.len();\n@@ -355,12 +364,15 @@ extern \"rust-intrinsic\" {\n     /// }\n     /// ```\n     ///\n-    /// There are valid uses of transmute.\n+    /// # Examples\n+    ///\n+    /// There are valid uses of transmute, though they are few and far between.\n     ///\n     /// ```\n     /// // getting the bitpattern of a floating point type\n     /// let x = std::mem::transmute::<f32, u32>(0.0/0.0)\n     ///\n+    ///\n     /// // turning a pointer into a function pointer\n     /// // in file.c: `int foo(void) { ... }`\n     /// let handle: *mut libc::c_void = libc::dlopen(\n@@ -372,15 +384,14 @@ extern \"rust-intrinsic\" {\n     ///                                 extern fn() -> libc::c_int>(foo);\n     /// println!(\"{}\", foo());\n     ///\n+    ///\n     /// // extending an invariant lifetime; this is advanced, very unsafe rust\n     /// struct T<'a>(&'a i32);\n     /// let value = 0;\n     /// let t = T::new(&value);\n     /// let ptr = &mut t;\n     /// let ptr_extended = std::mem::transmute::<&mut T, &mut T<'static>>(ptr);\n     /// ```\n-    ///\n-    /// But these are few and far between.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn transmute<T, U>(e: T) -> U;\n "}]}