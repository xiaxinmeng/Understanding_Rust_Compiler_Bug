{"sha": "59be5151287e29d5340d6189dea2f18206f51e02", "node_id": "C_kwDOAAsO6NoAKDU5YmU1MTUxMjg3ZTI5ZDUzNDBkNjE4OWRlYTJmMTgyMDZmNTFlMDI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-02T17:33:25Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-02T17:33:25Z"}, "message": "Properly render asyncness for traits without default body", "tree": {"sha": "19b96b5fb48252e97afe8f32ccf404eb8c5cd9a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19b96b5fb48252e97afe8f32ccf404eb8c5cd9a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59be5151287e29d5340d6189dea2f18206f51e02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59be5151287e29d5340d6189dea2f18206f51e02", "html_url": "https://github.com/rust-lang/rust/commit/59be5151287e29d5340d6189dea2f18206f51e02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59be5151287e29d5340d6189dea2f18206f51e02/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0a76127283bc963b085f54a1b275a8e281e81e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0a76127283bc963b085f54a1b275a8e281e81e6", "html_url": "https://github.com/rust-lang/rust/commit/c0a76127283bc963b085f54a1b275a8e281e81e6"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "99d3bda6ebfff7308b01b3acd4aaa3410013aab7", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59be5151287e29d5340d6189dea2f18206f51e02/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59be5151287e29d5340d6189dea2f18206f51e02/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=59be5151287e29d5340d6189dea2f18206f51e02", "patch": "@@ -413,7 +413,7 @@ fn issue33140_self_ty(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Ty<'_>> {\n /// Check if a function is async.\n fn asyncness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::IsAsync {\n     let node = tcx.hir().get_by_def_id(def_id.expect_local());\n-    if let Some(fn_kind) = node.fn_kind() { fn_kind.asyncness() } else { hir::IsAsync::NotAsync }\n+    node.fn_sig().map_or(hir::IsAsync::NotAsync, |sig| sig.header.asyncness)\n }\n \n /// Don't call this directly: use ``tcx.conservative_is_privately_uninhabited`` instead."}, {"sha": "84afdadfa002aa6a1dc9efcf7b65c8e71dd642bc", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/59be5151287e29d5340d6189dea2f18206f51e02/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59be5151287e29d5340d6189dea2f18206f51e02/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=59be5151287e29d5340d6189dea2f18206f51e02", "patch": "@@ -880,7 +880,7 @@ fn clean_fn_or_proc_macro<'tcx>(\n             ProcMacroItem(ProcMacro { kind, helpers })\n         }\n         None => {\n-            let mut func = clean_function(cx, sig, generics, body_id);\n+            let mut func = clean_function(cx, sig, generics, FunctionArgs::Body(body_id));\n             clean_fn_decl_legacy_const_generics(&mut func, attrs);\n             FunctionItem(func)\n         }\n@@ -917,16 +917,28 @@ fn clean_fn_decl_legacy_const_generics(func: &mut Function, attrs: &[ast::Attrib\n     }\n }\n \n+enum FunctionArgs<'tcx> {\n+    Body(hir::BodyId),\n+    Names(&'tcx [Ident]),\n+}\n+\n fn clean_function<'tcx>(\n     cx: &mut DocContext<'tcx>,\n     sig: &hir::FnSig<'tcx>,\n     generics: &hir::Generics<'tcx>,\n-    body_id: hir::BodyId,\n+    args: FunctionArgs<'tcx>,\n ) -> Box<Function> {\n     let (generics, decl) = enter_impl_trait(cx, |cx| {\n         // NOTE: generics must be cleaned before args\n         let generics = clean_generics(generics, cx);\n-        let args = clean_args_from_types_and_body_id(cx, sig.decl.inputs, body_id);\n+        let args = match args {\n+            FunctionArgs::Body(body_id) => {\n+                clean_args_from_types_and_body_id(cx, sig.decl.inputs, body_id)\n+            }\n+            FunctionArgs::Names(names) => {\n+                clean_args_from_types_and_names(cx, sig.decl.inputs, names)\n+            }\n+        };\n         let mut decl = clean_fn_decl_with_args(cx, sig.decl, args);\n         if sig.header.is_async() {\n             decl.output = decl.sugared_async_return_type();\n@@ -1051,18 +1063,12 @@ fn clean_trait_item<'tcx>(trait_item: &hir::TraitItem<'tcx>, cx: &mut DocContext\n             ),\n             hir::TraitItemKind::Const(ty, None) => TyAssocConstItem(clean_ty(ty, cx)),\n             hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(body)) => {\n-                let m = clean_function(cx, sig, trait_item.generics, body);\n+                let m = clean_function(cx, sig, trait_item.generics, FunctionArgs::Body(body));\n                 MethodItem(m, None)\n             }\n             hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Required(names)) => {\n-                let (generics, decl) = enter_impl_trait(cx, |cx| {\n-                    // NOTE: generics must be cleaned before args\n-                    let generics = clean_generics(trait_item.generics, cx);\n-                    let args = clean_args_from_types_and_names(cx, sig.decl.inputs, names);\n-                    let decl = clean_fn_decl_with_args(cx, sig.decl, args);\n-                    (generics, decl)\n-                });\n-                TyMethodItem(Box::new(Function { decl, generics }))\n+                let m = clean_function(cx, sig, trait_item.generics, FunctionArgs::Names(names));\n+                TyMethodItem(m)\n             }\n             hir::TraitItemKind::Type(bounds, Some(default)) => {\n                 let generics = enter_impl_trait(cx, |cx| clean_generics(trait_item.generics, cx));\n@@ -1099,7 +1105,7 @@ pub(crate) fn clean_impl_item<'tcx>(\n                 AssocConstItem(clean_ty(ty, cx), default)\n             }\n             hir::ImplItemKind::Fn(ref sig, body) => {\n-                let m = clean_function(cx, sig, impl_.generics, body);\n+                let m = clean_function(cx, sig, impl_.generics, FunctionArgs::Body(body));\n                 let defaultness = cx.tcx.impl_defaultness(impl_.owner_id);\n                 MethodItem(m, Some(defaultness))\n             }"}, {"sha": "f1eb438b199cea96db69ecf67bf9aea4c0a65149", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59be5151287e29d5340d6189dea2f18206f51e02/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59be5151287e29d5340d6189dea2f18206f51e02/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=59be5151287e29d5340d6189dea2f18206f51e02", "patch": "@@ -694,13 +694,10 @@ impl Item {\n                     asyncness: hir::IsAsync::NotAsync,\n                 }\n             }\n-            ItemKind::FunctionItem(_) | ItemKind::MethodItem(_, _) => {\n+            ItemKind::FunctionItem(_) | ItemKind::MethodItem(_, _) | ItemKind::TyMethodItem(_) => {\n                 let def_id = self.item_id.as_def_id().unwrap();\n                 build_fn_header(def_id, tcx, tcx.asyncness(def_id))\n             }\n-            ItemKind::TyMethodItem(_) => {\n-                build_fn_header(self.item_id.as_def_id().unwrap(), tcx, hir::IsAsync::NotAsync)\n-            }\n             _ => return None,\n         };\n         Some(header)"}, {"sha": "2578bc8f7a1668375716a28ad5744448e0dc2245", "filename": "src/test/rustdoc/async-trait-sig.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/59be5151287e29d5340d6189dea2f18206f51e02/src%2Ftest%2Frustdoc%2Fasync-trait-sig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59be5151287e29d5340d6189dea2f18206f51e02/src%2Ftest%2Frustdoc%2Fasync-trait-sig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-trait-sig.rs?ref=59be5151287e29d5340d6189dea2f18206f51e02", "patch": "@@ -0,0 +1,14 @@\n+// edition:2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+pub trait Foo {\n+    // @has async_trait_sig/trait.Foo.html '//h4[@class=\"code-header\"]' \"async fn bar() -> i32\"\n+    async fn bar() -> i32;\n+\n+    // @has async_trait_sig/trait.Foo.html '//h4[@class=\"code-header\"]' \"async fn baz() -> i32\"\n+    async fn baz() -> i32 {\n+        1\n+    }\n+}"}]}