{"sha": "654ff185881b6f5ab7048ed2b0c02227323fe0df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NGZmMTg1ODgxYjZmNWFiNzA0OGVkMmIwYzAyMjI3MzIzZmUwZGY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-05-11T09:32:56Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-05-11T09:32:56Z"}, "message": "deprecate clippy-as-a-plugin", "tree": {"sha": "4d926d49ce6c7fd257a04306f82391c2d3a00e93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d926d49ce6c7fd257a04306f82391c2d3a00e93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/654ff185881b6f5ab7048ed2b0c02227323fe0df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlr1Y0gsHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MASV\n/w//faniDlg4TlvplQ5accTS4x4XssCKgBt2bYW38TDCPsuZYztXt1YaDj9HPTjI\nDq7kSwdyGnOAoLbF+xPmuMnKGqEVK4D8JXIiwcSDpjDeTx0PAfUshScQeQ5w914e\nvI6vUKFV3yFFZBowTHoWybBuEeRw/QKnSOtFU6U/8W2z1QpOpsjM1j76Qrx1+X8s\n34H/mn/IuUnPDVXQeaNx/9x/VRlh2oHu0mZ8n3d3/QbkMMjxRAgdN0lzwSLJFM0V\nUrOsnsVAybmX+2V/C+XEfYpuYAPgawXYRra3z7DgyF5wF1ayCHqmPaCLIqZ2/EJF\n5/Dcuyvo45NLD9ThBK3qLUAIoVYK9XoeTsYr2OKGo+U4arP7n/CJSmNtBjt06150\nfgf3jiOxN4VU3wt37yEY9MsTHDLY7MlefW33xn7ZNtYwbV6fuMaO6U3h065JJIWF\n5gfBu5Odowjm/5LqgQcWgiBhTDbBxUqgs3L/D8FJ17CA7dYZL7J5zmXxkFhnkvgO\nIAabZVvQdKYdVXD3/BN5TlMd3KrN4z1bUXuNthLXIRvvZtT15UZ5PGb682Hr6r52\nr/bGti3JjJodGLcI8b9s1zPz4p8U+a3wA3EovIZiTzOv/s4M8F4auE+zPmm0uFyr\nLcSIcPRrbga/XIKqRON21G5uUJgOZnEDnOyU05862Us/XRQ=\n=Mgiy\n-----END PGP SIGNATURE-----", "payload": "tree 4d926d49ce6c7fd257a04306f82391c2d3a00e93\nparent 0f5be3611255f58df5e9e71c357ae6b3701a2a5d\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1526031176 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1526031176 +0200\n\ndeprecate clippy-as-a-plugin\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/654ff185881b6f5ab7048ed2b0c02227323fe0df", "html_url": "https://github.com/rust-lang/rust/commit/654ff185881b6f5ab7048ed2b0c02227323fe0df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/654ff185881b6f5ab7048ed2b0c02227323fe0df/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f5be3611255f58df5e9e71c357ae6b3701a2a5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f5be3611255f58df5e9e71c357ae6b3701a2a5d", "html_url": "https://github.com/rust-lang/rust/commit/0f5be3611255f58df5e9e71c357ae6b3701a2a5d"}], "stats": {"total": 91, "additions": 0, "deletions": 91}, "files": [{"sha": "3263b74b5a9ccf1ba6da8907fbe1ae8925757fd9", "filename": "README.md", "status": "modified", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/654ff185881b6f5ab7048ed2b0c02227323fe0df/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/654ff185881b6f5ab7048ed2b0c02227323fe0df/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=654ff185881b6f5ab7048ed2b0c02227323fe0df", "patch": "@@ -71,44 +71,6 @@ similar crates.\n SYSROOT=/path/to/rustc/sysroot cargo install clippy\n ```\n \n-### Optional dependency\n-\n-In some cases you might want to include clippy in your project directly, as an\n-optional dependency. To do this, just modify `Cargo.toml`:\n-\n-```toml\n-[dependencies]\n-clippy = { version = \"*\", optional = true }\n-```\n-\n-And, in your `main.rs` or `lib.rs`, add these lines:\n-\n-```rust\n-#![cfg_attr(feature=\"clippy\", feature(plugin))]\n-#![cfg_attr(feature=\"clippy\", plugin(clippy))]\n-```\n-\n-Then build by enabling the feature: `cargo +nightly build --features \"clippy\"`.\n-\n-Instead of adding the `cfg_attr` attributes you can also run clippy on demand:\n-`cargo rustc --features clippy -- -Z no-trans -Z extra-plugins=clippy`\n-(the `-Z no trans`, while not necessary, will stop the compilation process after\n-typechecking (and lints) have completed, which can significantly reduce the runtime).\n-\n-Alternatively, to only run clippy when testing:\n-\n-```toml\n-[dev-dependencies]\n-clippy = { version = \"*\" }\n-```\n-\n-and add to `main.rs` or  `lib.rs`:\n-\n-```\n-#![cfg_attr(test, feature(plugin))]\n-#![cfg_attr(test, plugin(clippy))]\n-```\n-\n ### Running clippy from the command line without installing it\n \n To have cargo compile your crate with clippy without clippy installation and without needing `#![plugin(clippy)]`\n@@ -121,53 +83,6 @@ cargo run --bin cargo-clippy --manifest-path=path_to_clippys_Cargo.toml\n *[Note](https://github.com/rust-lang-nursery/rust-clippy/wiki#a-word-of-warning):*\n Be sure that clippy was compiled with the same version of rustc that cargo invokes here!\n \n-### As a Compiler Plugin\n-\n-*Note:* This is not a recommended installation method.\n-\n-Since stable Rust is backwards compatible, you should be able to\n-compile your stable programs with nightly Rust with clippy plugged in to\n-circumvent this.\n-\n-Add in your `Cargo.toml`:\n-\n-```toml\n-[dependencies]\n-clippy = \"*\"\n-```\n-\n-You then need to add `#![feature(plugin)]` and `#![plugin(clippy)]` to the top\n-of your crate entry point (`main.rs` or `lib.rs`).\n-\n-Sample `main.rs`:\n-\n-```rust\n-#![feature(plugin)]\n-\n-#![plugin(clippy)]\n-\n-\n-fn main(){\n-    let x = Some(1u8);\n-    match x {\n-        Some(y) => println!(\"{:?}\", y),\n-        _ => ()\n-    }\n-}\n-```\n-\n-Produces this warning:\n-\n-```terminal\n-src/main.rs:8:5: 11:6 warning: you seem to be trying to use match for destructuring a single type. Consider using `if let`, #[warn(single_match)] on by default\n-src/main.rs:8     match x {\n-src/main.rs:9         Some(y) => println!(\"{:?}\", y),\n-src/main.rs:10         _ => ()\n-src/main.rs:11     }\n-src/main.rs:8:5: 11:6 help: Try\n-if let Some(y) = x { println!(\"{:?}\", y) }\n-```\n-\n ## Configuration\n \n Some lints can be configured in a TOML file named with `clippy.toml` or `.clippy.toml`. It contains basic `variable = value` mapping eg.\n@@ -180,12 +95,6 @@ cyclomatic-complexity-threshold = 30\n See the [list of lints](https://rust-lang-nursery.github.io/rust-clippy/master/index.html) for more information about which lints can be configured and the\n meaning of the variables.\n \n-You can also specify the path to the configuration file with:\n-\n-```rust\n-#![plugin(clippy(conf_file=\"path/to/clippy's/configuration\"))]\n-```\n-\n To deactivate the \u201cfor further information visit *lint-link*\u201d message you can\n define the `CLIPPY_DISABLE_DOCS_LINKS` environment variable.\n "}]}