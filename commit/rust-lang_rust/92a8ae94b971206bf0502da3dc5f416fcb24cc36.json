{"sha": "92a8ae94b971206bf0502da3dc5f416fcb24cc36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyYThhZTk0Yjk3MTIwNmJmMDUwMmRhM2RjNWY0MTZmY2IyNGNjMzY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-19T06:28:29Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-19T09:42:01Z"}, "message": "rustc: Make import resolution errors less fatal\n\nFailure happens at the end of import resolution\n\nIssue #440", "tree": {"sha": "2d654ec65c478f100efd7d500b343c46ed17eeb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d654ec65c478f100efd7d500b343c46ed17eeb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92a8ae94b971206bf0502da3dc5f416fcb24cc36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92a8ae94b971206bf0502da3dc5f416fcb24cc36", "html_url": "https://github.com/rust-lang/rust/commit/92a8ae94b971206bf0502da3dc5f416fcb24cc36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92a8ae94b971206bf0502da3dc5f416fcb24cc36/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4539a2cf7ad99851a165c98ed2f4e4a475cffd7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4539a2cf7ad99851a165c98ed2f4e4a475cffd7d", "html_url": "https://github.com/rust-lang/rust/commit/4539a2cf7ad99851a165c98ed2f4e4a475cffd7d"}], "stats": {"total": 69, "additions": 57, "deletions": 12}, "files": [{"sha": "492b82edf01f7254915ba5e40ad3e098eb8796ac", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 57, "deletions": 12, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/92a8ae94b971206bf0502da3dc5f416fcb24cc36/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92a8ae94b971206bf0502da3dc5f416fcb24cc36/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=92a8ae94b971206bf0502da3dc5f416fcb24cc36", "patch": "@@ -251,6 +251,7 @@ fn resolve_imports(&env e) {\n             case (resolved(_, _, _)) { }\n         }\n     }\n+    e.sess.abort_if_errors();\n }\n \n fn resolve_names(&@env e, &@ast::crate c) {\n@@ -437,9 +438,18 @@ fn resolve_import(&env e, &@ast::view_item it, &scopes sc) {\n                  lookup_in_scope(e, next_sc, it.span, end_id, ns_value),\n                  lookup_in_scope(e, next_sc, it.span, end_id, ns_type),\n                  lookup_in_scope(e, next_sc, it.span, end_id, ns_module));\n+        remove_if_unresolved(e.imports, defid._1);\n     } else {\n-        auto dcur =\n-            lookup_in_scope_strict(e, sc, it.span, ids.(0), ns_module);\n+        auto dcur = alt(lookup_in_scope(e, sc, it.span, ids.(0), ns_module)) {\n+            case (some(?dcur)) {\n+                dcur\n+            }\n+            case (none) {\n+                unresolved_err(e, it.span, ids.(0), ns_name(ns_module));\n+                remove_if_unresolved(e.imports, defid._1);\n+                ret () // FIXME (issue #521)\n+            }\n+        };\n         auto i = 1u;\n         while (true) {\n             if (i == n_idents - 1u) {\n@@ -450,11 +460,21 @@ fn resolve_import(&env e, &@ast::view_item it, &scopes sc) {\n                                        outside),\n                          lookup_in_mod(e, dcur, it.span, end_id, ns_module,\n                                        outside));\n+                remove_if_unresolved(e.imports, defid._1);\n                 break;\n             } else {\n-                dcur =\n-                    lookup_in_mod_strict(e, dcur, it.span, ids.(i), ns_module,\n-                                         outside);\n+                dcur = alt (lookup_in_mod(e, dcur, it.span, ids.(i),\n+                                          ns_module, outside)) {\n+                    case (some(?dcur)) {\n+                        dcur\n+                    }\n+                    case (none) {\n+                        unresolved_err(e, it.span, ids.(i),\n+                                       ns_name(ns_module));\n+                        remove_if_unresolved(e.imports, defid._1);\n+                        ret () // FIXME (issue #521)\n+                    }\n+                };\n                 i += 1u;\n             }\n         }\n@@ -464,9 +484,24 @@ fn resolve_import(&env e, &@ast::view_item it, &scopes sc) {\n                 &option::t[def] md) {\n         if (option::is_none(val) && option::is_none(typ) &&\n                 option::is_none(md)) {\n-            unresolved(e, sp, id, \"import\");\n+            unresolved_err(e, sp, id, \"import\");\n+        } else {\n+            e.imports.insert(defid._1, resolved(val, typ, md));\n+        }\n+    }\n+    fn remove_if_unresolved(hashmap[ast::def_num, import_state] imports,\n+                            ast::def_num def_num) {\n+        // If we couldn't resolve the import, don't leave it in a partially\n+        // resolved state, to avoid having it reported later as a cyclic\n+        // import\n+        if (imports.contains_key(def_num)) {\n+            alt (imports.get(def_num)) {\n+                case (resolving(_)) {\n+                    imports.remove(def_num);\n+                }\n+                case (_) { }\n+            }\n         }\n-        e.imports.insert(defid._1, resolved(val, typ, md));\n     }\n }\n \n@@ -480,10 +515,17 @@ fn ns_name(namespace ns) -> str {\n     }\n }\n \n-fn unresolved(&env e, &span sp, &ident id, &str kind) -> ! {\n-    e.sess.span_fatal(sp, \"unresolved \" + kind + \": \" + id);\n+fn unresolved_err(&env e, &span sp, &ident id, &str kind) {\n+    e.sess.span_err(sp, mk_unresolved_msg(id, kind));\n+}\n+\n+fn unresolved_fatal(&env e, &span sp, &ident id, &str kind) -> ! {\n+    e.sess.span_fatal(sp, mk_unresolved_msg(id, kind));\n }\n \n+fn mk_unresolved_msg(&ident id, &str kind) -> str {\n+    ret #fmt(\"unresolved %s: %s\", kind, id);\n+}\n \n // Lookup helpers\n fn lookup_path_strict(&env e, &scopes sc, &span sp, vec[ident] idents,\n@@ -503,7 +545,7 @@ fn lookup_path_strict(&env e, &scopes sc, &span sp, vec[ident] idents,\n fn lookup_in_scope_strict(&env e, scopes sc, &span sp, &ident id,\n                           namespace ns) -> def {\n     alt (lookup_in_scope(e, sc, sp, id, ns)) {\n-        case (none) { unresolved(e, sp, id, ns_name(ns)); }\n+        case (none) { unresolved_fatal(e, sp, id, ns_name(ns)); }\n         case (some(?d)) { ret d; }\n     }\n }\n@@ -756,7 +798,7 @@ fn found_def_item(&@ast::item i, namespace ns) -> option::t[def] {\n fn lookup_in_mod_strict(&env e, def m, &span sp, &ident id, namespace ns,\n                         dir dr) -> def {\n     alt (lookup_in_mod(e, m, sp, id, ns, dr)) {\n-        case (none) { unresolved(e, sp, id, ns_name(ns)); }\n+        case (none) { unresolved_fatal(e, sp, id, ns_name(ns)); }\n         case (some(?d)) { ret d; }\n     }\n }\n@@ -809,7 +851,10 @@ fn lookup_import(&env e, def_id defid, namespace ns) -> option::t[def] {\n             resolve_import(e, item, sc);\n             ret lookup_import(e, defid, ns);\n         }\n-        case (resolving(?sp)) { e.sess.span_fatal(sp, \"cyclic import\"); }\n+        case (resolving(?sp)) {\n+            e.sess.span_err(sp, \"cyclic import\");\n+            ret none;\n+        }\n         case (resolved(?val, ?typ, ?md)) {\n             ret alt (ns) {\n                     case (ns_value) { val }"}]}