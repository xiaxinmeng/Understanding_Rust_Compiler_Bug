{"sha": "5f1f12f555f3d144f434cb7a75a9a8f1b96dc138", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMWYxMmY1NTVmM2QxNDRmNDM0Y2I3YTc1YTlhOGYxYjk2ZGMxMzg=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-08-29T06:49:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-29T06:49:16Z"}, "message": "Merge pull request #1998 from montrivo/bug/is_empty-false-positive\n\nlen_without_is_empty false positive #1740", "tree": {"sha": "c9754518c70d510f5eeb9c2697348fa07b785182", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9754518c70d510f5eeb9c2697348fa07b785182"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f1f12f555f3d144f434cb7a75a9a8f1b96dc138", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f1f12f555f3d144f434cb7a75a9a8f1b96dc138", "html_url": "https://github.com/rust-lang/rust/commit/5f1f12f555f3d144f434cb7a75a9a8f1b96dc138", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f1f12f555f3d144f434cb7a75a9a8f1b96dc138/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73d87d966da565bcd2b20f8d5793d4d7bb14cf61", "url": "https://api.github.com/repos/rust-lang/rust/commits/73d87d966da565bcd2b20f8d5793d4d7bb14cf61", "html_url": "https://github.com/rust-lang/rust/commit/73d87d966da565bcd2b20f8d5793d4d7bb14cf61"}, {"sha": "ec799707718bfeff98b874b748cda07e8f3ff704", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec799707718bfeff98b874b748cda07e8f3ff704", "html_url": "https://github.com/rust-lang/rust/commit/ec799707718bfeff98b874b748cda07e8f3ff704"}], "stats": {"total": 95, "additions": 70, "deletions": 25}, "files": [{"sha": "fceffc4c665d153f6fd00c56f04e979f8aac75f4", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/5f1f12f555f3d144f434cb7a75a9a8f1b96dc138/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1f12f555f3d144f434cb7a75a9a8f1b96dc138/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=5f1f12f555f3d144f434cb7a75a9a8f1b96dc138", "patch": "@@ -2,6 +2,7 @@ use rustc::lint::*;\n use rustc::hir::def_id::DefId;\n use rustc::ty;\n use rustc::hir::*;\n+use std::collections::HashSet;\n use syntax::ast::{Lit, LitKind, Name};\n use syntax::codemap::{Span, Spanned};\n use utils::{get_item_name, in_macro, snippet, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n@@ -88,7 +89,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LenZero {\n     }\n }\n \n-fn check_trait_items(cx: &LateContext, item: &Item, trait_items: &[TraitItemRef]) {\n+fn check_trait_items(cx: &LateContext, visited_trait: &Item, trait_items: &[TraitItemRef]) {\n     fn is_named_self(cx: &LateContext, item: &TraitItemRef, name: &str) -> bool {\n         item.name == name &&\n             if let AssociatedItemKind::Method { has_self } = item.kind {\n@@ -102,18 +103,52 @@ fn check_trait_items(cx: &LateContext, item: &Item, trait_items: &[TraitItemRef]\n             }\n     }\n \n-    if !trait_items.iter().any(|i| is_named_self(cx, i, \"is_empty\")) {\n-        if let Some(i) = trait_items.iter().find(|i| is_named_self(cx, i, \"len\")) {\n-            if cx.access_levels.is_exported(i.id.node_id) {\n-                span_lint(\n-                    cx,\n-                    LEN_WITHOUT_IS_EMPTY,\n-                    item.span,\n-                    &format!(\"trait `{}` has a `len` method but no `is_empty` method\", item.name),\n-                );\n+    // fill the set with current and super traits\n+    fn fill_trait_set<'a, 'b: 'a>(traitt: &'b Item, set: &'a mut HashSet<&'b Item>, cx: &'b LateContext) {\n+        if set.insert(traitt) {\n+            if let ItemTrait(.., ref ty_param_bounds, _) = traitt.node {\n+                for ty_param_bound in ty_param_bounds {\n+                    if let TraitTyParamBound(ref poly_trait_ref, _) = *ty_param_bound {\n+                        let super_trait_node_id = cx.tcx\n+                            .hir\n+                            .as_local_node_id(poly_trait_ref.trait_ref.path.def.def_id())\n+                            .expect(\"the DefId is local, the NodeId should be available\");\n+                        let super_trait = cx.tcx.hir.expect_item(super_trait_node_id);\n+                        fill_trait_set(super_trait, set, cx);\n+                    }\n+                }\n             }\n         }\n     }\n+\n+    if cx.access_levels.is_exported(visited_trait.id) &&\n+        trait_items\n+            .iter()\n+            .any(|i| is_named_self(cx, i, \"len\"))\n+    {\n+        let mut current_and_super_traits = HashSet::new();\n+        fill_trait_set(visited_trait, &mut current_and_super_traits, cx);\n+\n+        let is_empty_method_found = current_and_super_traits\n+            .iter()\n+            .flat_map(|i| match i.node {\n+                ItemTrait(.., ref trait_items) => trait_items.iter(),\n+                _ => bug!(\"should only handle traits\"),\n+            })\n+            .any(|i| is_named_self(cx, i, \"is_empty\"));\n+\n+        if !is_empty_method_found {\n+            span_lint(\n+                cx,\n+                LEN_WITHOUT_IS_EMPTY,\n+                visited_trait.span,\n+                &format!(\n+                    \"trait `{}` has a `len` method but no (possibly inherited) `is_empty` method\",\n+                    visited_trait.name\n+                ),\n+            );\n+        }\n+    }\n }\n \n fn check_impl_items(cx: &LateContext, item: &Item, impl_items: &[ImplItemRef]) {"}, {"sha": "e0e735a934b2b4a3f06bc13bfbede3efa3cc41ef", "filename": "tests/ui/len_zero.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5f1f12f555f3d144f434cb7a75a9a8f1b96dc138/tests%2Fui%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1f12f555f3d144f434cb7a75a9a8f1b96dc138/tests%2Fui%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.rs?ref=5f1f12f555f3d144f434cb7a75a9a8f1b96dc138", "patch": "@@ -125,6 +125,16 @@ impl HasWrongIsEmpty {\n     }\n }\n \n+pub trait Empty {\n+    fn is_empty(&self) -> bool;\n+}\n+\n+pub trait InheritingEmpty: Empty { //must not trigger LEN_WITHOUT_IS_EMPTY\n+    fn len(&self) -> isize;\n+}\n+\n+\n+\n fn main() {\n     let x = [1, 2];\n     if x.len() == 0 {"}, {"sha": "5e3961808b87ed1865dce7b15f61f27fafcccbda", "filename": "tests/ui/len_zero.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5f1f12f555f3d144f434cb7a75a9a8f1b96dc138/tests%2Fui%2Flen_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f1f12f555f3d144f434cb7a75a9a8f1b96dc138/tests%2Fui%2Flen_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.stderr?ref=5f1f12f555f3d144f434cb7a75a9a8f1b96dc138", "patch": "@@ -10,7 +10,7 @@ error: item `PubOne` has a public `len` method but no corresponding `is_empty` m\n    |\n    = note: `-D len-without-is-empty` implied by `-D warnings`\n \n-error: trait `PubTraitsToo` has a `len` method but no `is_empty` method\n+error: trait `PubTraitsToo` has a `len` method but no (possibly inherited) `is_empty` method\n   --> $DIR/len_zero.rs:55:1\n    |\n 55 | / pub trait PubTraitsToo {\n@@ -43,47 +43,47 @@ error: item `HasWrongIsEmpty` has a public `len` method but no corresponding `is\n     | |_^\n \n error: length comparison to zero\n-   --> $DIR/len_zero.rs:130:8\n+   --> $DIR/len_zero.rs:140:8\n     |\n-130 |     if x.len() == 0 {\n+140 |     if x.len() == 0 {\n     |        ^^^^^^^^^^^^ help: using `is_empty` is more concise: `x.is_empty()`\n     |\n     = note: `-D len-zero` implied by `-D warnings`\n \n error: length comparison to zero\n-   --> $DIR/len_zero.rs:134:8\n+   --> $DIR/len_zero.rs:144:8\n     |\n-134 |     if \"\".len() == 0 {\n+144 |     if \"\".len() == 0 {\n     |        ^^^^^^^^^^^^^ help: using `is_empty` is more concise: `\"\".is_empty()`\n \n error: length comparison to zero\n-   --> $DIR/len_zero.rs:148:8\n+   --> $DIR/len_zero.rs:158:8\n     |\n-148 |     if has_is_empty.len() == 0 {\n+158 |     if has_is_empty.len() == 0 {\n     |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `has_is_empty.is_empty()`\n \n error: length comparison to zero\n-   --> $DIR/len_zero.rs:151:8\n+   --> $DIR/len_zero.rs:161:8\n     |\n-151 |     if has_is_empty.len() != 0 {\n+161 |     if has_is_empty.len() != 0 {\n     |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `!has_is_empty.is_empty()`\n \n error: length comparison to zero\n-   --> $DIR/len_zero.rs:154:8\n+   --> $DIR/len_zero.rs:164:8\n     |\n-154 |     if has_is_empty.len() > 0 {\n+164 |     if has_is_empty.len() > 0 {\n     |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `!has_is_empty.is_empty()`\n \n error: length comparison to zero\n-   --> $DIR/len_zero.rs:160:8\n+   --> $DIR/len_zero.rs:170:8\n     |\n-160 |     if with_is_empty.len() == 0 {\n+170 |     if with_is_empty.len() == 0 {\n     |        ^^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `with_is_empty.is_empty()`\n \n error: length comparison to zero\n-   --> $DIR/len_zero.rs:172:8\n+   --> $DIR/len_zero.rs:182:8\n     |\n-172 |     if b.len() != 0 {\n+182 |     if b.len() != 0 {\n     |        ^^^^^^^^^^^^ help: using `is_empty` is more concise: `!b.is_empty()`\n \n error: aborting due to 11 previous errors"}]}