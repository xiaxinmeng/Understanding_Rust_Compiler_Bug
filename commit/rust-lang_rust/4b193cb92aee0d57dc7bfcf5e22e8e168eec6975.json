{"sha": "4b193cb92aee0d57dc7bfcf5e22e8e168eec6975", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMTkzY2I5MmFlZTBkNTdkYzdiZmNmNWUyMmU4ZTE2OGVlYzY5NzU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-17T17:44:20Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-26T13:38:26Z"}, "message": "propagate the `compare_ty` fn further up", "tree": {"sha": "0e71cb4d9be1e25cf3323be841c60b5af7c9f904", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e71cb4d9be1e25cf3323be841c60b5af7c9f904"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b193cb92aee0d57dc7bfcf5e22e8e168eec6975", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b193cb92aee0d57dc7bfcf5e22e8e168eec6975", "html_url": "https://github.com/rust-lang/rust/commit/4b193cb92aee0d57dc7bfcf5e22e8e168eec6975", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b193cb92aee0d57dc7bfcf5e22e8e168eec6975/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13d579bd624005592fdf99a98d3e9f347eaec55a", "url": "https://api.github.com/repos/rust-lang/rust/commits/13d579bd624005592fdf99a98d3e9f347eaec55a", "html_url": "https://github.com/rust-lang/rust/commit/13d579bd624005592fdf99a98d3e9f347eaec55a"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "2275d7001461ba05350b1a0f719627a86aece531", "filename": "src/librustc/infer/outlives/verify.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4b193cb92aee0d57dc7bfcf5e22e8e168eec6975/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b193cb92aee0d57dc7bfcf5e22e8e168eec6975/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs?ref=4b193cb92aee0d57dc7bfcf5e22e8e168eec6975", "patch": "@@ -102,23 +102,15 @@ impl<'cx, 'gcx, 'tcx> VerifyBoundCx<'cx, 'gcx, 'tcx> {\n         self.declared_projection_bounds_from_trait(projection_ty)\n     }\n \n-    pub fn projection_bound(\n-        &self,\n-        projection_ty: ty::ProjectionTy<'tcx>,\n-    ) -> VerifyBound<'tcx> {\n-        debug!(\n-            \"projection_bound(projection_ty={:?})\",\n-            projection_ty\n-        );\n+    pub fn projection_bound(&self, projection_ty: ty::ProjectionTy<'tcx>) -> VerifyBound<'tcx> {\n+        debug!(\"projection_bound(projection_ty={:?})\", projection_ty);\n \n         // Search the env for where clauses like `P: 'a`.\n         let mut declared_bounds =\n             self.declared_generic_bounds_from_env(GenericKind::Projection(projection_ty));\n \n         // Extend with bounds that we can find from the trait.\n-        declared_bounds.extend(\n-            self.projection_declared_bounds_from_trait(projection_ty)\n-        );\n+        declared_bounds.extend(self.projection_declared_bounds_from_trait(projection_ty));\n \n         debug!(\"projection_bound: declared_bounds = {:?}\", declared_bounds);\n \n@@ -158,6 +150,14 @@ impl<'cx, 'gcx, 'tcx> VerifyBoundCx<'cx, 'gcx, 'tcx> {\n     fn declared_generic_bounds_from_env(\n         &self,\n         generic: GenericKind<'tcx>,\n+    ) -> Vec<ty::Region<'tcx>> {\n+        let generic_ty = generic.to_ty(self.tcx);\n+        self.declared_generic_bounds_from_env_with_compare_fn(|ty| ty == generic_ty)\n+    }\n+\n+    fn declared_generic_bounds_from_env_with_compare_fn(\n+        &self,\n+        compare_ty: impl Fn(Ty<'tcx>) -> bool,\n     ) -> Vec<ty::Region<'tcx>> {\n         let tcx = self.tcx;\n \n@@ -167,12 +167,8 @@ impl<'cx, 'gcx, 'tcx> VerifyBoundCx<'cx, 'gcx, 'tcx> {\n         // dubious for projections, but it will work for simple cases\n         // like `T` and `T::Item`. It may not work as well for things\n         // like `<T as Foo<'a>>::Item`.\n-        let generic_ty = generic.to_ty(tcx);\n         let c_b = self.param_env.caller_bounds;\n-        let mut param_bounds = self.collect_outlives_from_predicate_list(\n-            |ty| ty == generic_ty,\n-            c_b,\n-        );\n+        let mut param_bounds = self.collect_outlives_from_predicate_list(&compare_ty, c_b);\n \n         // Next, collect regions we scraped from the well-formedness\n         // constraints in the fn signature. To do that, we walk the list\n@@ -186,8 +182,11 @@ impl<'cx, 'gcx, 'tcx> VerifyBoundCx<'cx, 'gcx, 'tcx> {\n         // well-formed, then, A must be lower-generic by `'a`, but we\n         // don't know that this holds from first principles.\n         for &(r, p) in self.region_bound_pairs {\n-            debug!(\"generic={:?} p={:?}\", generic, p);\n-            if generic == p {\n+            debug!(\n+                \"declared_generic_bounds_from_env_with_compare_fn: region_bound_pair = {:?}\",\n+                (r, p)\n+            );\n+            if compare_ty(p.to_ty(tcx)) {\n                 param_bounds.push(r);\n             }\n         }"}]}