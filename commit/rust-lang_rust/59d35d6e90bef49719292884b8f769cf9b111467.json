{"sha": "59d35d6e90bef49719292884b8f769cf9b111467", "node_id": "C_kwDOAAsO6NoAKDU5ZDM1ZDZlOTBiZWY0OTcxOTI5Mjg4NGI4Zjc2OWNmOWIxMTE0Njc", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-05-31T18:12:02Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-05-31T18:13:24Z"}, "message": "rustdoc: also index impl trait", "tree": {"sha": "852b5ec9feedc84cc1e325cd1b6c8b8d875e7108", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/852b5ec9feedc84cc1e325cd1b6c8b8d875e7108"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59d35d6e90bef49719292884b8f769cf9b111467", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59d35d6e90bef49719292884b8f769cf9b111467", "html_url": "https://github.com/rust-lang/rust/commit/59d35d6e90bef49719292884b8f769cf9b111467", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59d35d6e90bef49719292884b8f769cf9b111467/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16a0d03698bfc9f93250490797f9a1a870f8bcfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/16a0d03698bfc9f93250490797f9a1a870f8bcfe", "html_url": "https://github.com/rust-lang/rust/commit/16a0d03698bfc9f93250490797f9a1a870f8bcfe"}], "stats": {"total": 106, "additions": 100, "deletions": 6}, "files": [{"sha": "4605793d0df941bc70cf4dfad9075a45e361c609", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59d35d6e90bef49719292884b8f769cf9b111467/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d35d6e90bef49719292884b8f769cf9b111467/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=59d35d6e90bef49719292884b8f769cf9b111467", "patch": "@@ -1667,6 +1667,10 @@ impl Type {\n         matches!(self, Type::Generic(_))\n     }\n \n+    pub(crate) fn is_impl_trait(&self) -> bool {\n+        matches!(self, Type::ImplTrait(_))\n+    }\n+\n     pub(crate) fn is_primitive(&self) -> bool {\n         self.primitive_type().is_some()\n     }"}, {"sha": "5ff9cd15a0ab083193c7987dedbcb46c8f016251", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/59d35d6e90bef49719292884b8f769cf9b111467/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d35d6e90bef49719292884b8f769cf9b111467/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=59d35d6e90bef49719292884b8f769cf9b111467", "patch": "@@ -226,7 +226,7 @@ fn get_index_type_name(clean_type: &clean::Type) -> Option<Symbol> {\n             Some(path.segments.last().unwrap().name)\n         }\n         // We return an empty name because we don't care about the generic name itself.\n-        clean::Generic(_) => Some(kw::Empty),\n+        clean::Generic(_) | clean::ImplTrait(_) => Some(kw::Empty),\n         clean::Primitive(ref p) => Some(p.as_sym()),\n         clean::BorrowedRef { ref type_, .. } => get_index_type_name(type_),\n         clean::BareFunction(_)\n@@ -235,8 +235,7 @@ fn get_index_type_name(clean_type: &clean::Type) -> Option<Symbol> {\n         | clean::Array(_, _)\n         | clean::RawPointer(_, _)\n         | clean::QPath { .. }\n-        | clean::Infer\n-        | clean::ImplTrait(_) => None,\n+        | clean::Infer => None,\n     }\n }\n \n@@ -264,10 +263,12 @@ fn add_generics_and_bounds_as_types<'tcx, 'a>(\n         mut generics: Vec<TypeWithKind>,\n         cache: &Cache,\n     ) {\n-        let is_full_generic = ty.is_full_generic();\n+        // generics and impl trait are both identified by their generics,\n+        // rather than a type name itself\n+        let anonymous = ty.is_full_generic() || ty.is_impl_trait();\n         let generics_empty = generics.is_empty();\n \n-        if is_full_generic {\n+        if anonymous {\n             if generics_empty {\n                 // This is a type parameter with no trait bounds (for example: `T` in\n                 // `fn f<T>(p: T)`, so not useful for the rustdoc search because we would end up\n@@ -318,7 +319,7 @@ fn add_generics_and_bounds_as_types<'tcx, 'a>(\n         if index_ty.name.as_ref().map(|s| s.is_empty() && generics_empty).unwrap_or(true) {\n             return;\n         }\n-        if is_full_generic {\n+        if anonymous {\n             // We remove the name of the full generic because we have no use for it.\n             index_ty.name = Some(String::new());\n             res.push(TypeWithKind::from((index_ty, ItemType::Generic)));\n@@ -398,6 +399,23 @@ fn add_generics_and_bounds_as_types<'tcx, 'a>(\n             }\n             insert_ty(res, tcx, arg.clone(), ty_generics, cache);\n         }\n+    } else if let Type::ImplTrait(ref bounds) = *arg {\n+        let mut ty_generics = Vec::new();\n+        for bound in bounds {\n+            if let Some(path) = bound.get_trait_path() {\n+                let ty = Type::Path { path };\n+                add_generics_and_bounds_as_types(\n+                    self_,\n+                    generics,\n+                    &ty,\n+                    tcx,\n+                    recurse + 1,\n+                    &mut ty_generics,\n+                    cache,\n+                );\n+            }\n+        }\n+        insert_ty(res, tcx, arg.clone(), ty_generics, cache);\n     } else {\n         // This is not a type parameter. So for example if we have `T, U: Option<T>`, and we're\n         // looking at `Option`, we enter this \"else\" condition, otherwise if it's `T`, we don't."}, {"sha": "8d594bf8aea7522084f77251b602d077f33d6050", "filename": "src/test/rustdoc-js/impl-trait.js", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/59d35d6e90bef49719292884b8f769cf9b111467/src%2Ftest%2Frustdoc-js%2Fimpl-trait.js", "raw_url": "https://github.com/rust-lang/rust/raw/59d35d6e90bef49719292884b8f769cf9b111467/src%2Ftest%2Frustdoc-js%2Fimpl-trait.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fimpl-trait.js?ref=59d35d6e90bef49719292884b8f769cf9b111467", "patch": "@@ -0,0 +1,51 @@\n+// ignore-order\n+\n+const QUERY = [\n+    'Aaaaaaa -> i32',\n+    'Aaaaaaa -> Aaaaaaa',\n+    'Aaaaaaa -> usize',\n+    '-> Aaaaaaa',\n+    'Aaaaaaa',\n+];\n+\n+const EXPECTED = [\n+    {\n+        // Aaaaaaa -> i32\n+        'others': [\n+            { 'path': 'impl_trait::Ccccccc', 'name': 'eeeeeee' },\n+        ],\n+    },\n+    {\n+        // Aaaaaaa -> Aaaaaaa\n+        'others': [\n+            { 'path': 'impl_trait::Ccccccc', 'name': 'fffffff' },\n+        ],\n+    },\n+    {\n+        // Aaaaaaa -> usize\n+        'others': [],\n+    },\n+    {\n+        // -> Aaaaaaa\n+        'others': [\n+            { 'path': 'impl_trait::Ccccccc', 'name': 'fffffff' },\n+            { 'path': 'impl_trait::Ccccccc', 'name': 'ddddddd' },\n+            { 'path': 'impl_trait', 'name': 'bbbbbbb' },\n+        ],\n+    },\n+    {\n+        // Aaaaaaa\n+        'others': [\n+            { 'path': 'impl_trait', 'name': 'Aaaaaaa' },\n+        ],\n+        'in_args': [\n+            { 'path': 'impl_trait::Ccccccc', 'name': 'fffffff' },\n+            { 'path': 'impl_trait::Ccccccc', 'name': 'eeeeeee' },\n+        ],\n+        'returned': [\n+            { 'path': 'impl_trait::Ccccccc', 'name': 'fffffff' },\n+            { 'path': 'impl_trait::Ccccccc', 'name': 'ddddddd' },\n+            { 'path': 'impl_trait', 'name': 'bbbbbbb' },\n+        ],\n+    },\n+];"}, {"sha": "fb8869b46f3d40aa149a4c03725536f96e8968e1", "filename": "src/test/rustdoc-js/impl-trait.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/59d35d6e90bef49719292884b8f769cf9b111467/src%2Ftest%2Frustdoc-js%2Fimpl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d35d6e90bef49719292884b8f769cf9b111467/src%2Ftest%2Frustdoc-js%2Fimpl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fimpl-trait.rs?ref=59d35d6e90bef49719292884b8f769cf9b111467", "patch": "@@ -0,0 +1,21 @@\n+pub trait Aaaaaaa {}\n+\n+impl Aaaaaaa for () {}\n+\n+pub fn bbbbbbb() -> impl Aaaaaaa {\n+    ()\n+}\n+\n+pub struct Ccccccc {}\n+\n+impl Ccccccc {\n+    pub fn ddddddd(&self) -> impl Aaaaaaa {\n+        ()\n+    }\n+    pub fn eeeeeee(&self, _x: impl Aaaaaaa) -> i32 {\n+        0\n+    }\n+    pub fn fffffff(&self, x: impl Aaaaaaa) -> impl Aaaaaaa {\n+        x\n+    }\n+}"}]}