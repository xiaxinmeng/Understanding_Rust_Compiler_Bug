{"sha": "a2719a285c7baeddb5cb0fd9bdd801b303b74a3e", "node_id": "C_kwDOAAsO6NoAKGEyNzE5YTI4NWM3YmFlZGRiNWNiMGZkOWJkZDgwMWIzMDNiNzRhM2U", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-05T17:39:00Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-05T17:39:00Z"}, "message": "Fix linker error when inline asm sym operand is not exported from local CGU", "tree": {"sha": "769aa1872da7629f816662a26493ce004a1329ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/769aa1872da7629f816662a26493ce004a1329ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2719a285c7baeddb5cb0fd9bdd801b303b74a3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2719a285c7baeddb5cb0fd9bdd801b303b74a3e", "html_url": "https://github.com/rust-lang/rust/commit/a2719a285c7baeddb5cb0fd9bdd801b303b74a3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2719a285c7baeddb5cb0fd9bdd801b303b74a3e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e93be3a4c8f59e3856c22152c3771054577b618", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e93be3a4c8f59e3856c22152c3771054577b618", "html_url": "https://github.com/rust-lang/rust/commit/2e93be3a4c8f59e3856c22152c3771054577b618"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "a8be0d32cc8c7c4d6d2948134bf7e8abf2bcd8a7", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2719a285c7baeddb5cb0fd9bdd801b303b74a3e/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2719a285c7baeddb5cb0fd9bdd801b303b74a3e/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=a2719a285c7baeddb5cb0fd9bdd801b303b74a3e", "patch": "@@ -255,7 +255,7 @@ pub(crate) fn type_sign(ty: Ty<'_>) -> bool {\n }\n \n pub(crate) fn create_wrapper_function(\n-    module: &mut impl Module,\n+    module: &mut dyn Module,\n     unwind_context: &mut UnwindContext,\n     sig: Signature,\n     wrapper_name: &str,"}, {"sha": "6206fbf7dd571505c5954fff7cb55e6ee560870c", "filename": "src/inline_asm.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a2719a285c7baeddb5cb0fd9bdd801b303b74a3e/src%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2719a285c7baeddb5cb0fd9bdd801b303b74a3e/src%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finline_asm.rs?ref=a2719a285c7baeddb5cb0fd9bdd801b303b74a3e", "patch": "@@ -6,7 +6,6 @@ use std::fmt::Write;\n \n use rustc_ast::ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_middle::mir::InlineAsmOperand;\n-use rustc_middle::ty::SymbolName;\n use rustc_span::sym;\n use rustc_target::asm::*;\n \n@@ -30,7 +29,7 @@ enum CInlineAsmOperand<'tcx> {\n         value: String,\n     },\n     Symbol {\n-        symbol: SymbolName<'tcx>,\n+        symbol: String,\n     },\n }\n \n@@ -263,15 +262,37 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n                         substs,\n                     )\n                     .unwrap();\n-                    CInlineAsmOperand::Symbol { symbol: fx.tcx.symbol_name(instance) }\n+                    let symbol = fx.tcx.symbol_name(instance);\n+\n+                    // Pass a wrapper rather than the function itself as the function itself may not\n+                    // be exported from the main codegen unit and may thus be unreachable from the\n+                    // object file created by an external assembler.\n+                    let inline_asm_index = fx.cx.inline_asm_index.get();\n+                    fx.cx.inline_asm_index.set(inline_asm_index + 1);\n+                    let wrapper_name = format!(\n+                        \"__inline_asm_{}_wrapper_n{}\",\n+                        fx.cx.cgu_name.as_str().replace('.', \"__\").replace('-', \"_\"),\n+                        inline_asm_index\n+                    );\n+                    let sig =\n+                        get_function_sig(fx.tcx, fx.target_config.default_call_conv, instance);\n+                    create_wrapper_function(\n+                        fx.module,\n+                        &mut fx.cx.unwind_context,\n+                        sig,\n+                        &wrapper_name,\n+                        symbol.name,\n+                    );\n+\n+                    CInlineAsmOperand::Symbol { symbol: wrapper_name }\n                 } else {\n                     span_bug!(span, \"invalid type for asm sym (fn)\");\n                 }\n             }\n             InlineAsmOperand::SymStatic { def_id } => {\n                 assert!(fx.tcx.is_static(def_id));\n                 let instance = Instance::mono(fx.tcx, def_id).polymorphize(fx.tcx);\n-                CInlineAsmOperand::Symbol { symbol: fx.tcx.symbol_name(instance) }\n+                CInlineAsmOperand::Symbol { symbol: fx.tcx.symbol_name(instance).name.to_owned() }\n             }\n         })\n         .collect::<Vec<_>>();\n@@ -630,7 +651,7 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n                         CInlineAsmOperand::Const { ref value } => {\n                             generated_asm.push_str(value);\n                         }\n-                        CInlineAsmOperand::Symbol { symbol } => generated_asm.push_str(symbol.name),\n+                        CInlineAsmOperand::Symbol { ref symbol } => generated_asm.push_str(symbol),\n                     }\n                 }\n             }"}]}