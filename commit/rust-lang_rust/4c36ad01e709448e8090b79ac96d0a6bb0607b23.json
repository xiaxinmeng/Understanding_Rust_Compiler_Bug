{"sha": "4c36ad01e709448e8090b79ac96d0a6bb0607b23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMzZhZDAxZTcwOTQ0OGU4MDkwYjc5YWM5NmQwYTZiYjA2MDdiMjM=", "commit": {"author": {"name": "Alexander Light", "email": "scialexlight@gmail.com", "date": "2014-11-20T21:38:36Z"}, "committer": {"name": "Alexander Light", "email": "scialexlight@gmail.com", "date": "2014-11-21T20:42:01Z"}, "message": "Add `weak_count` and `strong_count` to Rc and Arc\n\nThese functions allow you to see how many weak and strong references\nthere are to an `Arc`, `Rc`, or an `rc::Weak`. Due to the design of\n`Arc` it is not possible to get the number of weak references of an\narbitrary `arc::Weak`. Look in `arc.rs` for a more in-depth explanation.\n\nOn `arc::Arc` and `arc::Weak` these operations are wait-free and atomic.", "tree": {"sha": "cd77f0dbc10914aa365355a656916d455e121eee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd77f0dbc10914aa365355a656916d455e121eee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c36ad01e709448e8090b79ac96d0a6bb0607b23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c36ad01e709448e8090b79ac96d0a6bb0607b23", "html_url": "https://github.com/rust-lang/rust/commit/4c36ad01e709448e8090b79ac96d0a6bb0607b23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c36ad01e709448e8090b79ac96d0a6bb0607b23/comments", "author": {"login": "scialex", "id": 726053, "node_id": "MDQ6VXNlcjcyNjA1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/726053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scialex", "html_url": "https://github.com/scialex", "followers_url": "https://api.github.com/users/scialex/followers", "following_url": "https://api.github.com/users/scialex/following{/other_user}", "gists_url": "https://api.github.com/users/scialex/gists{/gist_id}", "starred_url": "https://api.github.com/users/scialex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scialex/subscriptions", "organizations_url": "https://api.github.com/users/scialex/orgs", "repos_url": "https://api.github.com/users/scialex/repos", "events_url": "https://api.github.com/users/scialex/events{/privacy}", "received_events_url": "https://api.github.com/users/scialex/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scialex", "id": 726053, "node_id": "MDQ6VXNlcjcyNjA1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/726053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scialex", "html_url": "https://github.com/scialex", "followers_url": "https://api.github.com/users/scialex/followers", "following_url": "https://api.github.com/users/scialex/following{/other_user}", "gists_url": "https://api.github.com/users/scialex/gists{/gist_id}", "starred_url": "https://api.github.com/users/scialex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scialex/subscriptions", "organizations_url": "https://api.github.com/users/scialex/orgs", "repos_url": "https://api.github.com/users/scialex/repos", "events_url": "https://api.github.com/users/scialex/events{/privacy}", "received_events_url": "https://api.github.com/users/scialex/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96c8f2b0c1846756e617f1f1fc1372c506e24248", "url": "https://api.github.com/repos/rust-lang/rust/commits/96c8f2b0c1846756e617f1f1fc1372c506e24248", "html_url": "https://github.com/rust-lang/rust/commit/96c8f2b0c1846756e617f1f1fc1372c506e24248"}], "stats": {"total": 135, "additions": 133, "deletions": 2}, "files": [{"sha": "2a087fa678c9003b9db7bfe131a04d8121e36a1d", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/4c36ad01e709448e8090b79ac96d0a6bb0607b23/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c36ad01e709448e8090b79ac96d0a6bb0607b23/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=4c36ad01e709448e8090b79ac96d0a6bb0607b23", "patch": "@@ -117,6 +117,16 @@ impl<T> Arc<T> {\n         // these contents.\n         unsafe { &*self._ptr }\n     }\n+\n+    /// Get the number of weak references to this value.\n+    #[inline]\n+    #[experimental]\n+    pub fn weak_count(&self) -> uint { self.inner().weak.load(atomic::SeqCst) - 1 }\n+\n+    /// Get the number of strong references to this value.\n+    #[inline]\n+    #[experimental]\n+    pub fn strong_count(&self) -> uint { self.inner().strong.load(atomic::SeqCst) }\n }\n \n #[unstable = \"waiting on stability of Clone\"]\n@@ -247,6 +257,29 @@ impl<T: Sync + Send> Weak<T> {\n         // See comments above for why this is \"safe\"\n         unsafe { &*self._ptr }\n     }\n+\n+    // Why is there no `weak_count()`?\n+    //\n+    // It is not possible to determine the number of weak references with only a weak reference\n+    // accurately in a wait-free manner. This is because we have a data-race with the last strong\n+    // reference's `drop` method. If that operation pauses between decrementing the strong\n+    // reference count to 0 and removing the implicit weak reference that the strong references\n+    // share then we will incorrectly think there is one more weak reference then there really is.\n+    //\n+    // We cannot get around this without making parts of this object no longer wait-free, since we\n+    // would either need to use locks to get mutual exclusion with `drop` or make it so that the\n+    // weak and strong reference counts can be modified atomically together. The first option\n+    // destroys wait-freedom by adding a lock and the second (in addition to being annoying to\n+    // implement) would make many operations (at least `downgrade` and both `clone`s) go from being\n+    // wait-free to merely lock-free, as we would need to do a manual CAS loop to get around other\n+    // threads modifying the other value in each of these cases.\n+\n+    /// Get the number of strong references to this value.\n+    ///\n+    /// If this function returns 0 then the value has been freed.\n+    #[inline]\n+    #[experimental]\n+    pub fn strong_count(&self) -> uint { self.inner().strong.load(atomic::SeqCst) }\n }\n \n #[experimental = \"Weak pointers may not belong in this module.\"]\n@@ -465,6 +498,47 @@ mod tests {\n         drop(arc_weak);\n     }\n \n+    #[test]\n+    fn test_strong_count() {\n+        let a = Arc::new(0u32);\n+        assert!(a.strong_count() == 1);\n+        let w = a.downgrade();\n+        assert!(a.strong_count() == 1);\n+        let b = w.upgrade().expect(\"\");\n+        assert!(b.strong_count() == 2);\n+        assert!(a.strong_count() == 2);\n+        drop(w);\n+        drop(a);\n+        assert!(b.strong_count() == 1);\n+        let c = b.clone();\n+        assert!(b.strong_count() == 2);\n+        assert!(c.strong_count() == 2);\n+    }\n+\n+    #[test]\n+    fn test_weak_count() {\n+        let a = Arc::new(0u32);\n+        assert!(a.strong_count() == 1);\n+        assert!(a.weak_count() == 0);\n+        let w = a.downgrade();\n+        assert!(a.strong_count() == 1);\n+        assert!(w.strong_count() == 1);\n+        assert!(a.weak_count() == 1);\n+        drop(w);\n+        assert!(a.strong_count() == 1);\n+        assert!(a.weak_count() == 0);\n+        let c = a.clone();\n+        assert!(a.strong_count() == 2);\n+        assert!(a.weak_count() == 0);\n+        let d = c.downgrade();\n+        assert!(c.weak_count() == 1);\n+        assert!(c.strong_count() == 2);\n+\n+        drop(a);\n+        drop(c);\n+        drop(d);\n+    }\n+\n     #[test]\n     fn show_arc() {\n         let a = Arc::new(5u32);"}, {"sha": "ba6f5cde2f49ba43a6759a9daca6a6131182e33e", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 59, "deletions": 2, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/4c36ad01e709448e8090b79ac96d0a6bb0607b23/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c36ad01e709448e8090b79ac96d0a6bb0607b23/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=4c36ad01e709448e8090b79ac96d0a6bb0607b23", "patch": "@@ -211,6 +211,16 @@ impl<T> Rc<T> {\n             _noshare: marker::NoSync\n         }\n     }\n+\n+    /// Get the number of weak references to this value.\n+    #[inline]\n+    #[experimental]\n+    pub fn weak_count(&self) -> uint { self.weak() - 1 }\n+\n+    /// Get the number of strong references to this value.\n+    #[inline]\n+    #[experimental]\n+    pub fn strong_count(&self) -> uint { self.strong() }\n }\n \n /// Returns true if the `Rc` currently has unique ownership.\n@@ -220,8 +230,7 @@ impl<T> Rc<T> {\n #[inline]\n #[experimental]\n pub fn is_unique<T>(rc: &Rc<T>) -> bool {\n-    // note that we hold both a strong and a weak reference\n-    rc.strong() == 1 && rc.weak() == 1\n+    rc.weak_count() == 0 && rc.strong_count() == 1\n }\n \n /// Unwraps the contained value if the `Rc` has unique ownership.\n@@ -424,6 +433,20 @@ impl<T> Weak<T> {\n             Some(Rc { _ptr: self._ptr, _nosend: marker::NoSend, _noshare: marker::NoSync })\n         }\n     }\n+\n+    /// Get the number of weak references to this value.\n+    #[inline]\n+    #[experimental]\n+    pub fn weak_count(&self) -> uint {\n+        if self.strong() != 0 { self.weak() - 1 } else { self.weak() }\n+    }\n+\n+    /// Get the number of strong references to this value.\n+    ///\n+    /// If this function returns 0 then the value has been freed.\n+    #[inline]\n+    #[experimental]\n+    pub fn strong_count(&self) -> uint { self.strong() }\n }\n \n #[unsafe_destructor]\n@@ -566,6 +589,40 @@ mod tests {\n         assert!(super::is_unique(&x));\n     }\n \n+    #[test]\n+    fn test_strong_count() {\n+        let a = Rc::new(0u32);\n+        assert!(a.strong_count() == 1);\n+        let w = a.downgrade();\n+        assert!(a.strong_count() == 1);\n+        let b = w.upgrade().expect(\"upgrade of live rc failed\");\n+        assert!(b.strong_count() == 2);\n+        assert!(a.strong_count() == 2);\n+        drop(w);\n+        drop(a);\n+        assert!(b.strong_count() == 1);\n+        let c = b.clone();\n+        assert!(b.strong_count() == 2);\n+        assert!(c.strong_count() == 2);\n+    }\n+\n+    #[test]\n+    fn test_weak_count() {\n+        let a = Rc::new(0u32);\n+        assert!(a.strong_count() == 1);\n+        assert!(a.weak_count() == 0);\n+        let w = a.downgrade();\n+        assert!(a.strong_count() == 1);\n+        assert!(w.weak_count() == 1);\n+        drop(w);\n+        assert!(a.strong_count() == 1);\n+        assert!(a.weak_count() == 0);\n+        let c = a.clone();\n+        assert!(a.strong_count() == 2);\n+        assert!(a.weak_count() == 0);\n+        assert!(c.downgrade().weak_count() == 1);\n+    }\n+\n     #[test]\n     fn try_unwrap() {\n         let x = Rc::new(3u);"}]}