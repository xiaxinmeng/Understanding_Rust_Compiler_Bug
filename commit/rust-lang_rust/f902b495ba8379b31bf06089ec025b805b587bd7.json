{"sha": "f902b495ba8379b31bf06089ec025b805b587bd7", "node_id": "C_kwDOAAsO6NoAKGY5MDJiNDk1YmE4Mzc5YjMxYmYwNjA4OWVjMDI1YjgwNWI1ODdiZDc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-10T04:21:11Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-10T05:41:09Z"}, "message": "Don't print full paths in overlap errors", "tree": {"sha": "44d18fcaaf19dcd6647c5c61dc9723a9e0014d52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44d18fcaaf19dcd6647c5c61dc9723a9e0014d52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f902b495ba8379b31bf06089ec025b805b587bd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f902b495ba8379b31bf06089ec025b805b587bd7", "html_url": "https://github.com/rust-lang/rust/commit/f902b495ba8379b31bf06089ec025b805b587bd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f902b495ba8379b31bf06089ec025b805b587bd7/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e75aab045fc476f176a58c408f6b06f0e275c6e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e75aab045fc476f176a58c408f6b06f0e275c6e1", "html_url": "https://github.com/rust-lang/rust/commit/e75aab045fc476f176a58c408f6b06f0e275c6e1"}], "stats": {"total": 313, "additions": 157, "deletions": 156}, "files": [{"sha": "170d4341ae71b4a3356a12a7c6d03b60d9021f4f", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1254,6 +1254,10 @@ impl HandlerInner {\n         }\n \n         if diagnostic.has_future_breakage() {\n+            // Future breakages aren't emitted if they're Level::Allowed,\n+            // but they still need to be constructed and stashed below,\n+            // so they'll trigger the good-path bug check.\n+            self.suppressed_expected_diag = true;\n             self.future_breakage_diagnostics.push(diagnostic.clone());\n         }\n "}, {"sha": "19f404cb5b78821894ca5b810ade1f1a92ede472", "filename": "compiler/rustc_trait_selection/src/errors.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -58,10 +58,10 @@ pub struct NoValueInOnUnimplemented {\n     pub span: Span,\n }\n \n-pub struct NegativePositiveConflict<'a> {\n+pub struct NegativePositiveConflict<'tcx> {\n     pub impl_span: Span,\n-    pub trait_desc: &'a str,\n-    pub self_desc: &'a Option<String>,\n+    pub trait_desc: ty::TraitRef<'tcx>,\n+    pub self_ty: Option<Ty<'tcx>>,\n     pub negative_impl_span: Result<Span, Symbol>,\n     pub positive_impl_span: Result<Span, Symbol>,\n }\n@@ -73,10 +73,10 @@ impl IntoDiagnostic<'_> for NegativePositiveConflict<'_> {\n         handler: &Handler,\n     ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n         let mut diag = handler.struct_err(fluent::trait_selection_negative_positive_conflict);\n-        diag.set_arg(\"trait_desc\", self.trait_desc);\n+        diag.set_arg(\"trait_desc\", self.trait_desc.print_only_trait_path().to_string());\n         diag.set_arg(\n             \"self_desc\",\n-            self.self_desc.clone().map_or_else(|| String::from(\"none\"), |ty| ty),\n+            self.self_ty.map_or_else(|| \"none\".to_string(), |ty| ty.to_string()),\n         );\n         diag.set_span(self.impl_span);\n         diag.code(rustc_errors::error_code!(E0751));"}, {"sha": "3cf2959a9ffc5e7d24c6219d413c05b7dcf5ad28", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -64,13 +64,13 @@ pub fn add_placeholder_note(err: &mut Diagnostic) {\n /// with a suitably-freshened `ImplHeader` with those types\n /// substituted. Otherwise, returns `None`.\n #[instrument(skip(tcx, skip_leak_check), level = \"debug\")]\n-pub fn overlapping_impls(\n-    tcx: TyCtxt<'_>,\n+pub fn overlapping_impls<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     impl1_def_id: DefId,\n     impl2_def_id: DefId,\n     skip_leak_check: SkipLeakCheck,\n     overlap_mode: OverlapMode,\n-) -> Option<OverlapResult<'_>> {\n+) -> Option<OverlapResult<'tcx>> {\n     // Before doing expensive operations like entering an inference context, do\n     // a quick check via fast_reject to tell if the impl headers could possibly\n     // unify."}, {"sha": "60d589f41cc9c50496db51efa182c9e81615e8d6", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 40, "deletions": 35, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -17,9 +17,9 @@ use crate::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause};\n use rustc_data_structures::fx::FxIndexSet;\n-use rustc_errors::{struct_span_err, DiagnosticBuilder, EmissionGuarantee};\n+use rustc_errors::{error_code, DelayDm, Diagnostic};\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_middle::ty::{self, ImplSubject, TyCtxt};\n+use rustc_middle::ty::{self, ImplSubject, Ty, TyCtxt};\n use rustc_middle::ty::{InternalSubsts, SubstsRef};\n use rustc_session::lint::builtin::COHERENCE_LEAK_CHECK;\n use rustc_session::lint::builtin::ORDER_DEPENDENT_TRAIT_OBJECTS;\n@@ -30,10 +30,10 @@ use super::SelectionContext;\n \n /// Information pertinent to an overlapping impl error.\n #[derive(Debug)]\n-pub struct OverlapError {\n+pub struct OverlapError<'tcx> {\n     pub with_impl: DefId,\n-    pub trait_desc: String,\n-    pub self_desc: Option<String>,\n+    pub trait_ref: ty::TraitRef<'tcx>,\n+    pub self_ty: Option<Ty<'tcx>>,\n     pub intercrate_ambiguity_causes: FxIndexSet<IntercrateAmbiguityCause>,\n     pub involves_placeholder: bool,\n }\n@@ -277,9 +277,9 @@ pub(super) fn specialization_graph_provider(\n // it negatively impacts perf.\n #[cold]\n #[inline(never)]\n-fn report_overlap_conflict(\n-    tcx: TyCtxt<'_>,\n-    overlap: OverlapError,\n+fn report_overlap_conflict<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    overlap: OverlapError<'tcx>,\n     impl_def_id: LocalDefId,\n     used_to_be_allowed: Option<FutureCompatOverlapErrorKind>,\n     sg: &mut specialization_graph::Graph,\n@@ -315,27 +315,27 @@ fn report_overlap_conflict(\n     }\n }\n \n-fn report_negative_positive_conflict(\n-    tcx: TyCtxt<'_>,\n-    overlap: &OverlapError,\n+fn report_negative_positive_conflict<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    overlap: &OverlapError<'tcx>,\n     local_impl_def_id: LocalDefId,\n     negative_impl_def_id: DefId,\n     positive_impl_def_id: DefId,\n     sg: &mut specialization_graph::Graph,\n ) {\n     let mut err = tcx.sess.create_err(NegativePositiveConflict {\n         impl_span: tcx.def_span(local_impl_def_id),\n-        trait_desc: &overlap.trait_desc,\n-        self_desc: &overlap.self_desc,\n+        trait_desc: overlap.trait_ref,\n+        self_ty: overlap.self_ty,\n         negative_impl_span: tcx.span_of_impl(negative_impl_def_id),\n         positive_impl_span: tcx.span_of_impl(positive_impl_def_id),\n     });\n     sg.has_errored = Some(err.emit());\n }\n \n-fn report_conflicting_impls(\n-    tcx: TyCtxt<'_>,\n-    overlap: OverlapError,\n+fn report_conflicting_impls<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    overlap: OverlapError<'tcx>,\n     impl_def_id: LocalDefId,\n     used_to_be_allowed: Option<FutureCompatOverlapErrorKind>,\n     sg: &mut specialization_graph::Graph,\n@@ -345,12 +345,12 @@ fn report_conflicting_impls(\n     // Work to be done after we've built the DiagnosticBuilder. We have to define it\n     // now because the struct_lint methods don't return back the DiagnosticBuilder\n     // that's passed in.\n-    fn decorate<'a, 'b, G: EmissionGuarantee>(\n-        tcx: TyCtxt<'_>,\n-        overlap: OverlapError,\n+    fn decorate<'tcx>(\n+        tcx: TyCtxt<'tcx>,\n+        overlap: &OverlapError<'tcx>,\n         impl_span: Span,\n-        err: &'b mut DiagnosticBuilder<'a, G>,\n-    ) -> &'b mut DiagnosticBuilder<'a, G> {\n+        err: &mut Diagnostic,\n+    ) {\n         match tcx.span_of_impl(overlap.with_impl) {\n             Ok(span) => {\n                 err.span_label(span, \"first implementation here\");\n@@ -359,7 +359,7 @@ fn report_conflicting_impls(\n                     impl_span,\n                     format!(\n                         \"conflicting implementation{}\",\n-                        overlap.self_desc.map_or_else(String::new, |ty| format!(\" for `{}`\", ty))\n+                        overlap.self_ty.map_or_else(String::new, |ty| format!(\" for `{}`\", ty))\n                     ),\n                 );\n             }\n@@ -381,26 +381,28 @@ fn report_conflicting_impls(\n         if overlap.involves_placeholder {\n             coherence::add_placeholder_note(err);\n         }\n-        err\n     }\n \n-    let msg = format!(\n-        \"conflicting implementations of trait `{}`{}{}\",\n-        overlap.trait_desc,\n-        overlap.self_desc.as_deref().map_or_else(String::new, |ty| format!(\" for type `{ty}`\")),\n-        match used_to_be_allowed {\n-            Some(FutureCompatOverlapErrorKind::Issue33140) => \": (E0119)\",\n-            _ => \"\",\n-        }\n-    );\n+    let msg = DelayDm(|| {\n+        format!(\n+            \"conflicting implementations of trait `{}`{}{}\",\n+            overlap.trait_ref.print_only_trait_path(),\n+            overlap.self_ty.map_or_else(String::new, |ty| format!(\" for type `{ty}`\")),\n+            match used_to_be_allowed {\n+                Some(FutureCompatOverlapErrorKind::Issue33140) => \": (E0119)\",\n+                _ => \"\",\n+            }\n+        )\n+    });\n \n     match used_to_be_allowed {\n         None => {\n             let reported = if overlap.with_impl.is_local()\n                 || tcx.orphan_check_impl(impl_def_id).is_ok()\n             {\n-                let mut err = struct_span_err!(tcx.sess, impl_span, E0119, \"{msg}\",);\n-                decorate(tcx, overlap, impl_span, &mut err);\n+                let mut err = tcx.sess.struct_span_err(impl_span, msg);\n+                err.code(error_code!(E0119));\n+                decorate(tcx, &overlap, impl_span, &mut err);\n                 Some(err.emit())\n             } else {\n                 Some(tcx.sess.delay_span_bug(impl_span, \"impl should have failed the orphan check\"))\n@@ -417,7 +419,10 @@ fn report_conflicting_impls(\n                 tcx.hir().local_def_id_to_hir_id(impl_def_id),\n                 impl_span,\n                 msg,\n-                |err| decorate(tcx, overlap, impl_span, err),\n+                |err| {\n+                    decorate(tcx, &overlap, impl_span, err);\n+                    err\n+                },\n             );\n         }\n     };"}, {"sha": "4546c9533930013b0e7cc5a557230968b1dc8767", "filename": "compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 30, "deletions": 38, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -3,7 +3,6 @@ use super::OverlapError;\n use crate::traits;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::fast_reject::{self, SimplifiedType, TreatParams};\n-use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n \n pub use rustc_middle::traits::specialization_graph::*;\n@@ -15,15 +14,15 @@ pub enum FutureCompatOverlapErrorKind {\n }\n \n #[derive(Debug)]\n-pub struct FutureCompatOverlapError {\n-    pub error: OverlapError,\n+pub struct FutureCompatOverlapError<'tcx> {\n+    pub error: OverlapError<'tcx>,\n     pub kind: FutureCompatOverlapErrorKind,\n }\n \n /// The result of attempting to insert an impl into a group of children.\n-enum Inserted {\n+enum Inserted<'tcx> {\n     /// The impl was inserted as a new child in this group of children.\n-    BecameNewSibling(Option<FutureCompatOverlapError>),\n+    BecameNewSibling(Option<FutureCompatOverlapError<'tcx>>),\n \n     /// The impl should replace existing impls [X1, ..], because the impl specializes X1, X2, etc.\n     ReplaceChildren(Vec<DefId>),\n@@ -42,12 +41,12 @@ trait ChildrenExt<'tcx> {\n         impl_def_id: DefId,\n         simplified_self: Option<SimplifiedType>,\n         overlap_mode: OverlapMode,\n-    ) -> Result<Inserted, OverlapError>;\n+    ) -> Result<Inserted<'tcx>, OverlapError<'tcx>>;\n }\n \n-impl ChildrenExt<'_> for Children {\n+impl<'tcx> ChildrenExt<'tcx> for Children {\n     /// Insert an impl into this set of children without comparing to any existing impls.\n-    fn insert_blindly(&mut self, tcx: TyCtxt<'_>, impl_def_id: DefId) {\n+    fn insert_blindly(&mut self, tcx: TyCtxt<'tcx>, impl_def_id: DefId) {\n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         if let Some(st) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), TreatParams::AsInfer)\n         {\n@@ -62,7 +61,7 @@ impl ChildrenExt<'_> for Children {\n     /// Removes an impl from this set of children. Used when replacing\n     /// an impl with a parent. The impl must be present in the list of\n     /// children already.\n-    fn remove_existing(&mut self, tcx: TyCtxt<'_>, impl_def_id: DefId) {\n+    fn remove_existing(&mut self, tcx: TyCtxt<'tcx>, impl_def_id: DefId) {\n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         let vec: &mut Vec<DefId>;\n         if let Some(st) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), TreatParams::AsInfer)\n@@ -82,11 +81,11 @@ impl ChildrenExt<'_> for Children {\n     /// specialization relationships.\n     fn insert(\n         &mut self,\n-        tcx: TyCtxt<'_>,\n+        tcx: TyCtxt<'tcx>,\n         impl_def_id: DefId,\n         simplified_self: Option<SimplifiedType>,\n         overlap_mode: OverlapMode,\n-    ) -> Result<Inserted, OverlapError> {\n+    ) -> Result<Inserted<'tcx>, OverlapError<'tcx>> {\n         let mut last_lint = None;\n         let mut replace_children = Vec::new();\n \n@@ -103,30 +102,23 @@ impl ChildrenExt<'_> for Children {\n                 impl_def_id, simplified_self, possible_sibling,\n             );\n \n-            let create_overlap_error = |overlap: traits::coherence::OverlapResult<'_>| {\n+            let create_overlap_error = |overlap: traits::coherence::OverlapResult<'tcx>| {\n                 let trait_ref = overlap.impl_header.trait_ref.unwrap();\n                 let self_ty = trait_ref.self_ty();\n \n-                // FIXME: should postpone string formatting until we decide to actually emit.\n-                with_no_trimmed_paths!({\n-                    OverlapError {\n-                        with_impl: possible_sibling,\n-                        trait_desc: trait_ref.print_only_trait_path().to_string(),\n-                        // Only report the `Self` type if it has at least\n-                        // some outer concrete shell; otherwise, it's\n-                        // not adding much information.\n-                        self_desc: if self_ty.has_concrete_skeleton() {\n-                            Some(self_ty.to_string())\n-                        } else {\n-                            None\n-                        },\n-                        intercrate_ambiguity_causes: overlap.intercrate_ambiguity_causes,\n-                        involves_placeholder: overlap.involves_placeholder,\n-                    }\n-                })\n+                OverlapError {\n+                    with_impl: possible_sibling,\n+                    trait_ref,\n+                    // Only report the `Self` type if it has at least\n+                    // some outer concrete shell; otherwise, it's\n+                    // not adding much information.\n+                    self_ty: if self_ty.has_concrete_skeleton() { Some(self_ty) } else { None },\n+                    intercrate_ambiguity_causes: overlap.intercrate_ambiguity_causes,\n+                    involves_placeholder: overlap.involves_placeholder,\n+                }\n             };\n \n-            let report_overlap_error = |overlap: traits::coherence::OverlapResult<'_>,\n+            let report_overlap_error = |overlap: traits::coherence::OverlapResult<'tcx>,\n                                         last_lint: &mut _| {\n                 // Found overlap, but no specialization; error out or report future-compat warning.\n \n@@ -255,31 +247,31 @@ where\n     }\n }\n \n-pub trait GraphExt {\n+pub trait GraphExt<'tcx> {\n     /// Insert a local impl into the specialization graph. If an existing impl\n     /// conflicts with it (has overlap, but neither specializes the other),\n     /// information about the area of overlap is returned in the `Err`.\n     fn insert(\n         &mut self,\n-        tcx: TyCtxt<'_>,\n+        tcx: TyCtxt<'tcx>,\n         impl_def_id: DefId,\n         overlap_mode: OverlapMode,\n-    ) -> Result<Option<FutureCompatOverlapError>, OverlapError>;\n+    ) -> Result<Option<FutureCompatOverlapError<'tcx>>, OverlapError<'tcx>>;\n \n     /// Insert cached metadata mapping from a child impl back to its parent.\n-    fn record_impl_from_cstore(&mut self, tcx: TyCtxt<'_>, parent: DefId, child: DefId);\n+    fn record_impl_from_cstore(&mut self, tcx: TyCtxt<'tcx>, parent: DefId, child: DefId);\n }\n \n-impl GraphExt for Graph {\n+impl<'tcx> GraphExt<'tcx> for Graph {\n     /// Insert a local impl into the specialization graph. If an existing impl\n     /// conflicts with it (has overlap, but neither specializes the other),\n     /// information about the area of overlap is returned in the `Err`.\n     fn insert(\n         &mut self,\n-        tcx: TyCtxt<'_>,\n+        tcx: TyCtxt<'tcx>,\n         impl_def_id: DefId,\n         overlap_mode: OverlapMode,\n-    ) -> Result<Option<FutureCompatOverlapError>, OverlapError> {\n+    ) -> Result<Option<FutureCompatOverlapError<'tcx>>, OverlapError<'tcx>> {\n         assert!(impl_def_id.is_local());\n \n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n@@ -376,7 +368,7 @@ impl GraphExt for Graph {\n     }\n \n     /// Insert cached metadata mapping from a child impl back to its parent.\n-    fn record_impl_from_cstore(&mut self, tcx: TyCtxt<'_>, parent: DefId, child: DefId) {\n+    fn record_impl_from_cstore(&mut self, tcx: TyCtxt<'tcx>, parent: DefId, child: DefId) {\n         if self.parent.insert(child, parent).is_some() {\n             bug!(\n                 \"When recording an impl from the crate store, information about its parent \\"}, {"sha": "4d7872598b1e772240c21f250596f8a6b92ab176", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-cross-crate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `go_trait::GoMut` for type `MyThingy`\n+error[E0119]: conflicting implementations of trait `GoMut` for type `MyThingy`\n   --> $DIR/coherence-blanket-conflicts-with-specific-cross-crate.rs:15:1\n    |\n LL | impl GoMut for MyThingy {"}, {"sha": "2463f38a92251a6c837b00bc0649022946c6c4b7", "filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1,4 +1,4 @@\n-error[E0751]: found both positive and negative implementation of trait `std::marker::Send` for type `TestType<_>`:\n+error[E0751]: found both positive and negative implementation of trait `Send` for type `TestType<_>`:\n   --> $DIR/coherence-conflicting-negative-trait-impl.rs:11:1\n    |\n LL | unsafe impl<T: MyTrait + 'static> Send for TestType<T> {}\n@@ -7,7 +7,7 @@ LL |\n LL | impl<T: MyTrait> !Send for TestType<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n \n-error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<_>`\n+error[E0119]: conflicting implementations of trait `Send` for type `TestType<_>`\n   --> $DIR/coherence-conflicting-negative-trait-impl.rs:13:1\n    |\n LL | unsafe impl<T: MyTrait + 'static> Send for TestType<T> {}"}, {"sha": "d40ffc48a29f9fd1e2e371eda681bf9662615b13", "filename": "src/test/ui/coherence/coherence-impls-copy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -9,7 +9,7 @@ LL | impl Copy for i32 {}\n    |\n    = note: define and implement a trait or new type instead\n \n-error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&NotSync`\n+error[E0119]: conflicting implementations of trait `Copy` for type `&NotSync`\n   --> $DIR/coherence-impls-copy.rs:28:1\n    |\n LL | impl Copy for &'static NotSync {}"}, {"sha": "cd398426704cbbbaa63ba0cf0a600c714d19d882", "filename": "src/test/ui/coherence/coherence-overlap-issue-23516.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1,10 +1,10 @@\n-error[E0119]: conflicting implementations of trait `Sweet` for type `std::boxed::Box<_>`\n+error[E0119]: conflicting implementations of trait `Sweet` for type `Box<_>`\n   --> $DIR/coherence-overlap-issue-23516.rs:8:1\n    |\n LL | impl<T:Sugar> Sweet for T { }\n    | ------------------------- first implementation here\n LL | impl<U:Sugar> Sweet for Box<U> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::boxed::Box<_>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Box<_>`\n    |\n    = note: downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`\n "}, {"sha": "94d242eaac431535afb552a361385f0047fd6476", "filename": "src/test/ui/coherence/coherence-projection-conflict-ty-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1,11 +1,11 @@\n-error[E0119]: conflicting implementations of trait `Foo<_>` for type `std::option::Option<_>`\n+error[E0119]: conflicting implementations of trait `Foo<_>` for type `Option<_>`\n   --> $DIR/coherence-projection-conflict-ty-param.rs:10:1\n    |\n LL | impl <P, T: Foo<P>> Foo<P> for Option<T> {}\n    | ---------------------------------------- first implementation here\n LL |\n LL | impl<T, U> Foo<T> for Option<U> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::option::Option<_>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Option<_>`\n \n error: aborting due to previous error\n "}, {"sha": "89615f0fbc63b79da7af14f60d75a5be2f38d746", "filename": "src/test/ui/coherence/coherence-wasm-bindgen.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1,11 +1,11 @@\n-error: conflicting implementations of trait `IntoWasmAbi` for type `&dyn std::ops::Fn(&_) -> _`\n+error: conflicting implementations of trait `IntoWasmAbi` for type `&dyn Fn(&_) -> _`\n   --> $DIR/coherence-wasm-bindgen.rs:28:1\n    |\n LL | impl<'a, 'b, A, R> IntoWasmAbi for &'a (dyn Fn(A) -> R + 'b)\n    | ------------------------------------------------------------ first implementation here\n ...\n LL | impl<'a, 'b, A, R> IntoWasmAbi for &'a (dyn for<'x> Fn(&'x A) -> R + 'b)\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `&dyn std::ops::Fn(&_) -> _`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `&dyn Fn(&_) -> _`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>"}, {"sha": "93486fa5f36050d40712fb40c5a4e8b8540c04e2", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_tuple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1,11 +1,11 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyFundamentalStruct<(MyType,)>`\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `MyFundamentalStruct<(MyType,)>`\n   --> $DIR/coherence_copy_like_err_fundamental_struct_tuple.rs:16:1\n    |\n LL | impl<T: lib::MyCopy> MyTrait for T { }\n    | ---------------------------------- first implementation here\n ...\n LL | impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyFundamentalStruct<(MyType,)>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyFundamentalStruct<(MyType,)>`\n    |\n    = note: upstream crates may add a new impl of trait `lib::MyCopy` for type `lib::MyFundamentalStruct<(MyType,)>` in future versions\n "}, {"sha": "7432733b932a46bc61ecd43e837f69cf2a78b2ce", "filename": "src/test/ui/coherence/coherence_copy_like_err_struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1,11 +1,11 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyStruct<MyType>`\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `MyStruct<MyType>`\n   --> $DIR/coherence_copy_like_err_struct.rs:19:1\n    |\n LL | impl<T: lib::MyCopy> MyTrait for T { }\n    | ---------------------------------- first implementation here\n ...\n LL | impl MyTrait for lib::MyStruct<MyType> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyStruct<MyType>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyStruct<MyType>`\n    |\n    = note: upstream crates may add a new impl of trait `lib::MyCopy` for type `lib::MyStruct<MyType>` in future versions\n "}, {"sha": "4ddd712b27c88b346f9f7f1a39ec1d4eaba4feb8", "filename": "src/test/ui/coherence/inter-crate-ambiguity-causes-notes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fcoherence%2Finter-crate-ambiguity-causes-notes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fcoherence%2Finter-crate-ambiguity-causes-notes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Finter-crate-ambiguity-causes-notes.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::convert::From<()>` for type `S`\n+error[E0119]: conflicting implementations of trait `From<()>` for type `S`\n   --> $DIR/inter-crate-ambiguity-causes-notes.rs:9:1\n    |\n LL | impl From<()> for S {"}, {"sha": "ef888a1c2871eacb2f1311396c1bc370606b1bc4", "filename": "src/test/ui/error-codes/e0119/conflict-with-std.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fconflict-with-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fconflict-with-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fconflict-with-std.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::convert::AsRef<Q>` for type `std::boxed::Box<Q>`\n+error[E0119]: conflicting implementations of trait `AsRef<Q>` for type `Box<Q>`\n   --> $DIR/conflict-with-std.rs:5:1\n    |\n LL | impl AsRef<Q> for Box<Q> {\n@@ -8,7 +8,7 @@ LL | impl AsRef<Q> for Box<Q> {\n            - impl<T, A> AsRef<T> for Box<T, A>\n              where A: Allocator, T: ?Sized;\n \n-error[E0119]: conflicting implementations of trait `std::convert::From<S>` for type `S`\n+error[E0119]: conflicting implementations of trait `From<S>` for type `S`\n   --> $DIR/conflict-with-std.rs:12:1\n    |\n LL | impl From<S> for S {\n@@ -17,7 +17,7 @@ LL | impl From<S> for S {\n    = note: conflicting implementation in crate `core`:\n            - impl<T> From<T> for T;\n \n-error[E0119]: conflicting implementations of trait `std::convert::TryFrom<X>` for type `X`\n+error[E0119]: conflicting implementations of trait `TryFrom<X>` for type `X`\n   --> $DIR/conflict-with-std.rs:19:1\n    |\n LL | impl TryFrom<X> for X {"}, {"sha": "1b2d64282e1e2e5f3e7e4e5c36ccf1fb56a8745c", "filename": "src/test/ui/error-codes/e0119/issue-23563.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-23563.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-23563.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-23563.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `a::LolFrom<&[_]>` for type `LocalType<_>`\n+error[E0119]: conflicting implementations of trait `LolFrom<&[_]>` for type `LocalType<_>`\n   --> $DIR/issue-23563.rs:13:1\n    |\n LL | impl<'a, T> LolFrom<&'a [T]> for LocalType<T> {"}, {"sha": "9b3345c23bb2317e11721bcd90e2f45eba8dacc0", "filename": "src/test/ui/error-codes/e0119/issue-27403.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-27403.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-27403.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-27403.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::convert::Into<_>` for type `GenX<_>`\n+error[E0119]: conflicting implementations of trait `Into<_>` for type `GenX<_>`\n   --> $DIR/issue-27403.rs:5:1\n    |\n LL | impl<S> Into<S> for GenX<S> {"}, {"sha": "99367e808419fa530aa47f28658c3e09332402f5", "filename": "src/test/ui/error-codes/e0119/so-37347311.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fso-37347311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fso-37347311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fso-37347311.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::convert::From<MyError<_>>` for type `MyError<_>`\n+error[E0119]: conflicting implementations of trait `From<MyError<_>>` for type `MyError<_>`\n   --> $DIR/so-37347311.rs:11:1\n    |\n LL | impl<S: Storage> From<S::Error> for MyError<S> {"}, {"sha": "960259080f739fc1022d6a42da345d28fb990d50", "filename": "src/test/ui/issues/issue-28568.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fissues%2Fissue-28568.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fissues%2Fissue-28568.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28568.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::ops::Drop` for type `MyStruct`\n+error[E0119]: conflicting implementations of trait `Drop` for type `MyStruct`\n   --> $DIR/issue-28568.rs:7:1\n    |\n LL | impl Drop for MyStruct {"}, {"sha": "57adc8ad5efc6f2c8e545eb35af1ede3c671d70c", "filename": "src/test/ui/issues/issue-43355.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fissues%2Fissue-43355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fissues%2Fissue-43355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43355.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `Trait1<std::boxed::Box<_>>` for type `A`\n+error[E0119]: conflicting implementations of trait `Trait1<Box<_>>` for type `A`\n   --> $DIR/issue-43355.rs:13:1\n    |\n LL | impl<X, T> Trait1<X> for T where T: Trait2<X> {"}, {"sha": "cbdc10bd2e1ea0ca74d4e9a7bfc63919e5e50df3", "filename": "src/test/ui/issues/issue-48728.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fissues%2Fissue-48728.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fissues%2Fissue-48728.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48728.rs?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1,7 +1,7 @@\n // Regression test for #48728, an ICE that occurred computing\n // coherence \"help\" information.\n \n-#[derive(Clone)] //~ ERROR conflicting implementations of trait `std::clone::Clone`\n+#[derive(Clone)] //~ ERROR conflicting implementations of trait `Clone`\n struct Node<T: ?Sized>(Box<T>);\n \n impl<T: Clone + ?Sized> Clone for Node<[T]> {"}, {"sha": "0bb46724f61661c7c3beea5a4461fcdab304bd45", "filename": "src/test/ui/issues/issue-48728.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::clone::Clone` for type `Node<[_]>`\n+error[E0119]: conflicting implementations of trait `Clone` for type `Node<[_]>`\n   --> $DIR/issue-48728.rs:4:10\n    |\n LL | #[derive(Clone)]"}, {"sha": "553ab3869b338bf0ec89b9c82abf8b11241ff2e7", "filename": "src/test/ui/lint/lint-incoherent-auto-trait-objects.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1,79 +1,79 @@\n-error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + 'static)`: (E0119)\n+error: conflicting implementations of trait `Foo` for type `(dyn Send + 'static)`: (E0119)\n   --> $DIR/lint-incoherent-auto-trait-objects.rs:5:1\n    |\n LL | impl Foo for dyn Send {}\n    | --------------------- first implementation here\n LL |\n LL | impl Foo for dyn Send + Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n    = note: `#[deny(order_dependent_trait_objects)]` on by default\n \n-error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+error: conflicting implementations of trait `Foo` for type `(dyn Send + Sync + 'static)`: (E0119)\n   --> $DIR/lint-incoherent-auto-trait-objects.rs:11:1\n    |\n LL | impl Foo for dyn Send + Sync {}\n    | ---------------------------- first implementation here\n LL |\n LL | impl Foo for dyn Sync + Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n \n-error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+error: conflicting implementations of trait `Foo` for type `(dyn Send + Sync + 'static)`: (E0119)\n   --> $DIR/lint-incoherent-auto-trait-objects.rs:15:1\n    |\n LL | impl Foo for dyn Sync + Send {}\n    | ---------------------------- first implementation here\n ...\n LL | impl Foo for dyn Send + Sync + Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n \n error: aborting due to 3 previous errors\n \n Future incompatibility report: Future breakage diagnostic:\n-error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + 'static)`: (E0119)\n+error: conflicting implementations of trait `Foo` for type `(dyn Send + 'static)`: (E0119)\n   --> $DIR/lint-incoherent-auto-trait-objects.rs:5:1\n    |\n LL | impl Foo for dyn Send {}\n    | --------------------- first implementation here\n LL |\n LL | impl Foo for dyn Send + Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n    = note: `#[deny(order_dependent_trait_objects)]` on by default\n \n Future breakage diagnostic:\n-error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+error: conflicting implementations of trait `Foo` for type `(dyn Send + Sync + 'static)`: (E0119)\n   --> $DIR/lint-incoherent-auto-trait-objects.rs:11:1\n    |\n LL | impl Foo for dyn Send + Sync {}\n    | ---------------------------- first implementation here\n LL |\n LL | impl Foo for dyn Sync + Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n    = note: `#[deny(order_dependent_trait_objects)]` on by default\n \n Future breakage diagnostic:\n-error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+error: conflicting implementations of trait `Foo` for type `(dyn Send + Sync + 'static)`: (E0119)\n   --> $DIR/lint-incoherent-auto-trait-objects.rs:15:1\n    |\n LL | impl Foo for dyn Sync + Send {}\n    | ---------------------------- first implementation here\n ...\n LL | impl Foo for dyn Send + Sync + Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>"}, {"sha": "36a09add4d3bbb9da95edc55c988b47dadd2ac1c", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-and-non-const-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -10,7 +10,7 @@ LL | impl const std::ops::Add for i32 {\n    |\n    = note: define and implement a trait or new type instead\n \n-error[E0119]: conflicting implementations of trait `std::ops::Add` for type `Int`\n+error[E0119]: conflicting implementations of trait `Add` for type `Int`\n   --> $DIR/const-and-non-const-impl.rs:22:1\n    |\n LL | impl std::ops::Add for Int {"}, {"sha": "1fe4869ff548d25827cba8550b80a2abc73b84a2", "filename": "src/test/ui/specialization/specialization-overlap-negative.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -8,7 +8,7 @@ LL | #![feature(specialization)]\n    = help: consider using `min_specialization` instead, which is more stable and complete\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0751]: found both positive and negative implementation of trait `std::marker::Send` for type `TestType<_>`:\n+error[E0751]: found both positive and negative implementation of trait `Send` for type `TestType<_>`:\n   --> $DIR/specialization-overlap-negative.rs:9:1\n    |\n LL | unsafe impl<T: Clone> Send for TestType<T> {}"}, {"sha": "098bf4a70ab48d099bf45cce4f311fb89fde2228", "filename": "src/test/ui/specialization/specialization-overlap.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -8,13 +8,13 @@ LL | #![feature(specialization)]\n    = help: consider using `min_specialization` instead, which is more stable and complete\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0119]: conflicting implementations of trait `Foo` for type `std::vec::Vec<_>`\n+error[E0119]: conflicting implementations of trait `Foo` for type `Vec<_>`\n   --> $DIR/specialization-overlap.rs:5:1\n    |\n LL | impl<T: Clone> Foo for T {}\n    | ------------------------ first implementation here\n LL | impl<T> Foo for Vec<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::vec::Vec<_>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Vec<_>`\n \n error[E0119]: conflicting implementations of trait `Bar` for type `(u8, u8)`\n   --> $DIR/specialization-overlap.rs:9:1"}, {"sha": "80a502c6335e268ef0cf96c6b9d8acd507c4e1fb", "filename": "src/test/ui/traits/issue-33140-hack-boundaries.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Ftraits%2Fissue-33140-hack-boundaries.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Ftraits%2Fissue-33140-hack-boundaries.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-33140-hack-boundaries.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1,34 +1,34 @@\n-error[E0119]: conflicting implementations of trait `Trait1` for type `(dyn std::marker::Send + 'static)`\n+error[E0119]: conflicting implementations of trait `Trait1` for type `(dyn Send + 'static)`\n   --> $DIR/issue-33140-hack-boundaries.rs:18:1\n    |\n LL | impl Trait1 for dyn Send {}\n    | ------------------------ first implementation here\n LL | impl Trait1 for dyn Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + 'static)`\n \n-error[E0751]: found both positive and negative implementation of trait `Trait2` for type `(dyn std::marker::Send + 'static)`:\n+error[E0751]: found both positive and negative implementation of trait `Trait2` for type `(dyn Send + 'static)`:\n   --> $DIR/issue-33140-hack-boundaries.rs:25:1\n    |\n LL | impl Trait2 for dyn Send {}\n    | ------------------------ positive implementation here\n LL | impl !Trait2 for dyn Send {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n \n-error[E0119]: conflicting implementations of trait `Trait3<(dyn std::marker::Sync + 'static)>` for type `(dyn std::marker::Send + 'static)`\n+error[E0119]: conflicting implementations of trait `Trait3<(dyn Sync + 'static)>` for type `(dyn Send + 'static)`\n   --> $DIR/issue-33140-hack-boundaries.rs:32:1\n    |\n LL | impl Trait3<dyn Sync> for dyn Send {}\n    | ---------------------------------- first implementation here\n LL | impl Trait3<dyn Sync> for dyn Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + 'static)`\n \n-error[E0119]: conflicting implementations of trait `Trait4a` for type `(dyn std::marker::Send + 'static)`\n+error[E0119]: conflicting implementations of trait `Trait4a` for type `(dyn Send + 'static)`\n   --> $DIR/issue-33140-hack-boundaries.rs:39:1\n    |\n LL | impl<T: ?Sized> Trait4a for T {}\n    | ----------------------------- first implementation here\n LL | impl Trait4a for dyn Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + 'static)`\n \n error[E0119]: conflicting implementations of trait `Trait4b` for type `()`\n   --> $DIR/issue-33140-hack-boundaries.rs:46:1\n@@ -38,42 +38,42 @@ LL | impl Trait4b for () {}\n LL | impl Trait4b for () {}\n    | ^^^^^^^^^^^^^^^^^^^ conflicting implementation for `()`\n \n-error[E0119]: conflicting implementations of trait `Trait4c` for type `(dyn Trait1 + std::marker::Send + 'static)`\n+error[E0119]: conflicting implementations of trait `Trait4c` for type `(dyn Trait1 + Send + 'static)`\n   --> $DIR/issue-33140-hack-boundaries.rs:53:1\n    |\n LL | impl Trait4c for dyn Trait1 + Send {}\n    | ---------------------------------- first implementation here\n LL | impl Trait4c for dyn Trait1 + Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Trait1 + std::marker::Send + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Trait1 + Send + 'static)`\n \n-error[E0119]: conflicting implementations of trait `Trait4d` for type `dyn std::marker::Send`\n+error[E0119]: conflicting implementations of trait `Trait4d` for type `dyn Send`\n   --> $DIR/issue-33140-hack-boundaries.rs:60:1\n    |\n LL | impl<'a> Trait4d for dyn Send + 'a {}\n    | ---------------------------------- first implementation here\n LL | impl<'a> Trait4d for dyn Send + 'a {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `dyn std::marker::Send`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `dyn Send`\n \n-error[E0119]: conflicting implementations of trait `Trait5` for type `(dyn std::marker::Send + 'static)`\n+error[E0119]: conflicting implementations of trait `Trait5` for type `(dyn Send + 'static)`\n   --> $DIR/issue-33140-hack-boundaries.rs:67:1\n    |\n LL | impl Trait5 for dyn Send {}\n    | ------------------------ first implementation here\n LL | impl Trait5 for dyn Send where u32: Copy {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + 'static)`\n \n error: aborting due to 8 previous errors\n \n Some errors have detailed explanations: E0119, E0751.\n For more information about an error, try `rustc --explain E0119`.\n Future incompatibility report: Future breakage diagnostic:\n-warning: conflicting implementations of trait `Trait0` for type `(dyn std::marker::Send + 'static)`: (E0119)\n+warning: conflicting implementations of trait `Trait0` for type `(dyn Send + 'static)`: (E0119)\n   --> $DIR/issue-33140-hack-boundaries.rs:10:1\n    |\n LL | impl Trait0 for dyn Send {}\n    | ------------------------ first implementation here\n LL | impl Trait0 for dyn Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>"}, {"sha": "d31281f7256e05be8586164de7978bffb0d7393f", "filename": "src/test/ui/traits/issue-33140.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Ftraits%2Fissue-33140.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Ftraits%2Fissue-33140.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-33140.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1,20 +1,20 @@\n-error[E0119]: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+error[E0119]: conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`\n   --> $DIR/issue-33140.rs:9:1\n    |\n LL | impl Trait for dyn Send + Sync {\n    | ------------------------------ first implementation here\n ...\n LL | impl Trait for dyn Sync + Send {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n \n-error[E0119]: conflicting implementations of trait `Trait2` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+error[E0119]: conflicting implementations of trait `Trait2` for type `(dyn Send + Sync + 'static)`\n   --> $DIR/issue-33140.rs:22:1\n    |\n LL | impl Trait2 for dyn Send + Sync {\n    | ------------------------------- first implementation here\n ...\n LL | impl Trait2 for dyn Sync + Send + Sync {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n \n error[E0592]: duplicate definitions with name `abc`\n   --> $DIR/issue-33140.rs:29:5"}, {"sha": "a87acb1fb09769768e66f98798ee56cd8e55bcda", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-clone.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1,4 +1,4 @@\n-error[E0751]: found both positive and negative implementation of trait `std::clone::Clone` for type `&mut MyType<'_>`:\n+error[E0751]: found both positive and negative implementation of trait `Clone` for type `&mut MyType<'_>`:\n   --> $DIR/pin-unsound-issue-66544-clone.rs:7:1\n    |\n LL | impl<'a> Clone for &'a mut MyType<'a> {"}, {"sha": "9185e8f8430bf57ef77bf51e3accea15e29c53a8", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-derefmut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1,4 +1,4 @@\n-error[E0751]: found both positive and negative implementation of trait `std::ops::DerefMut` for type `&MyType<'_>`:\n+error[E0751]: found both positive and negative implementation of trait `DerefMut` for type `&MyType<'_>`:\n   --> $DIR/pin-unsound-issue-66544-derefmut.rs:12:1\n    |\n LL | impl<'a> DerefMut for &'a MyType<'a> {"}, {"sha": "525401f9d69ece487e4be2bfcdfcafd621cc3289", "filename": "src/test/ui/traits/object/issue-33140-traitobject-crate.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-33140-traitobject-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-33140-traitobject-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-33140-traitobject-crate.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1,10 +1,10 @@\n-warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+warning: conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`: (E0119)\n   --> $DIR/issue-33140-traitobject-crate.rs:86:1\n    |\n LL | unsafe impl Trait for dyn (::std::marker::Send) + Sync { }\n    | ------------------------------------------------------ first implementation here\n LL | unsafe impl Trait for dyn (::std::marker::Send) + Send + Sync { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n@@ -14,40 +14,40 @@ note: the lint level is defined here\n LL | #![warn(order_dependent_trait_objects)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+warning: conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`: (E0119)\n   --> $DIR/issue-33140-traitobject-crate.rs:89:1\n    |\n LL | unsafe impl Trait for dyn (::std::marker::Send) + Send + Sync { }\n    | ------------------------------------------------------------- first implementation here\n ...\n LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n \n-warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+warning: conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`: (E0119)\n   --> $DIR/issue-33140-traitobject-crate.rs:93:1\n    |\n LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send { }\n    | ------------------------------------------------------ first implementation here\n ...\n LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send + Sync { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n \n warning: 3 warnings emitted\n \n Future incompatibility report: Future breakage diagnostic:\n-warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+warning: conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`: (E0119)\n   --> $DIR/issue-33140-traitobject-crate.rs:86:1\n    |\n LL | unsafe impl Trait for dyn (::std::marker::Send) + Sync { }\n    | ------------------------------------------------------ first implementation here\n LL | unsafe impl Trait for dyn (::std::marker::Send) + Send + Sync { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n@@ -58,14 +58,14 @@ LL | #![warn(order_dependent_trait_objects)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n Future breakage diagnostic:\n-warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+warning: conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`: (E0119)\n   --> $DIR/issue-33140-traitobject-crate.rs:89:1\n    |\n LL | unsafe impl Trait for dyn (::std::marker::Send) + Send + Sync { }\n    | ------------------------------------------------------------- first implementation here\n ...\n LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n@@ -76,14 +76,14 @@ LL | #![warn(order_dependent_trait_objects)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n Future breakage diagnostic:\n-warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+warning: conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`: (E0119)\n   --> $DIR/issue-33140-traitobject-crate.rs:93:1\n    |\n LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send { }\n    | ------------------------------------------------------ first implementation here\n ...\n LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send + Sync { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>"}, {"sha": "e24ed695dc55cc1e3523d32e61de22aab65dd5b2", "filename": "src/test/ui/traits/overlap-not-permitted-for-builtin-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Ftraits%2Foverlap-not-permitted-for-builtin-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f902b495ba8379b31bf06089ec025b805b587bd7/src%2Ftest%2Fui%2Ftraits%2Foverlap-not-permitted-for-builtin-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Foverlap-not-permitted-for-builtin-trait.stderr?ref=f902b495ba8379b31bf06089ec025b805b587bd7", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::marker::Send` for type `MyStruct`\n+error[E0119]: conflicting implementations of trait `Send` for type `MyStruct`\n   --> $DIR/overlap-not-permitted-for-builtin-trait.rs:7:1\n    |\n LL | impl !Send for MyStruct {}"}]}