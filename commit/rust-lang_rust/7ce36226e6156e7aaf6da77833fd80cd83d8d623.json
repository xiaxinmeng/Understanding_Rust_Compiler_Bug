{"sha": "7ce36226e6156e7aaf6da77833fd80cd83d8d623", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZTM2MjI2ZTYxNTZlN2FhZjZkYTc3ODMzZmQ4MGNkODNkOGQ2MjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-16T09:10:14Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-16T09:10:33Z"}, "message": "implement and test unchecked_{add,sub,mul} intrinsics", "tree": {"sha": "aafeba71ae013e2dd1b56b037cd8121d2d1e5bb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aafeba71ae013e2dd1b56b037cd8121d2d1e5bb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ce36226e6156e7aaf6da77833fd80cd83d8d623", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ce36226e6156e7aaf6da77833fd80cd83d8d623", "html_url": "https://github.com/rust-lang/rust/commit/7ce36226e6156e7aaf6da77833fd80cd83d8d623", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ce36226e6156e7aaf6da77833fd80cd83d8d623/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf748149ce6e4a8af1dcb387b6f5a19a856a6579", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf748149ce6e4a8af1dcb387b6f5a19a856a6579", "html_url": "https://github.com/rust-lang/rust/commit/cf748149ce6e4a8af1dcb387b6f5a19a856a6579"}], "stats": {"total": 86, "additions": 72, "deletions": 14}, "files": [{"sha": "0ecccd02d7e1b6a6c92f26c531b8d665dfd03ba9", "filename": "src/intrinsic.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7ce36226e6156e7aaf6da77833fd80cd83d8d623/src%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce36226e6156e7aaf6da77833fd80cd83d8d623/src%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic.rs?ref=7ce36226e6156e7aaf6da77833fd80cd83d8d623", "patch": "@@ -465,6 +465,22 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 )?;\n             }\n \n+            \"unchecked_add\" | \"unchecked_sub\" | \"unchecked_mul\" => {\n+                let l = this.read_immediate(args[0])?;\n+                let r = this.read_immediate(args[1])?;\n+                let op = match intrinsic_name.get() {\n+                    \"unchecked_add\" => mir::BinOp::Add,\n+                    \"unchecked_sub\" => mir::BinOp::Sub,\n+                    \"unchecked_mul\" => mir::BinOp::Mul,\n+                    _ => bug!(),\n+                };\n+                let (res, overflowed) = this.binary_op(op, l, r)?;\n+                if overflowed {\n+                    return err!(Intrinsic(format!(\"Overflowing arithmetic in {}\", intrinsic_name.get())));\n+                }\n+                this.write_scalar(res, dest)?;\n+            }\n+\n             \"uninit\" => {\n                 // Check fast path: we don't want to force an allocation in case the destination is a simple value,\n                 // but we also do not want to create a new allocation with 0s and then copy that over."}, {"sha": "2447c8ba4a818cb68f3d5a1084d3dd9bb5061ebe", "filename": "tests/compile-fail/unchecked_add1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ce36226e6156e7aaf6da77833fd80cd83d8d623/tests%2Fcompile-fail%2Funchecked_add1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce36226e6156e7aaf6da77833fd80cd83d8d623/tests%2Fcompile-fail%2Funchecked_add1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funchecked_add1.rs?ref=7ce36226e6156e7aaf6da77833fd80cd83d8d623", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // MAX overflow\n+    unsafe { std::intrinsics::unchecked_add(40000u16, 30000); } //~ ERROR Overflowing arithmetic in unchecked_add\n+}"}, {"sha": "e292cdf6d961e07f3858a9cf02d9edc350188c80", "filename": "tests/compile-fail/unchecked_add2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ce36226e6156e7aaf6da77833fd80cd83d8d623/tests%2Fcompile-fail%2Funchecked_add2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce36226e6156e7aaf6da77833fd80cd83d8d623/tests%2Fcompile-fail%2Funchecked_add2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funchecked_add2.rs?ref=7ce36226e6156e7aaf6da77833fd80cd83d8d623", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // MIN overflow\n+    unsafe { std::intrinsics::unchecked_add(-30000i16, -8000); } //~ ERROR Overflowing arithmetic in unchecked_add\n+}"}, {"sha": "57bfaf124c2417c593db226fdf2cb9f3fd78f9bc", "filename": "tests/compile-fail/unchecked_mul1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ce36226e6156e7aaf6da77833fd80cd83d8d623/tests%2Fcompile-fail%2Funchecked_mul1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce36226e6156e7aaf6da77833fd80cd83d8d623/tests%2Fcompile-fail%2Funchecked_mul1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funchecked_mul1.rs?ref=7ce36226e6156e7aaf6da77833fd80cd83d8d623", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // MAX overflow\n+    unsafe { std::intrinsics::unchecked_mul(300u16, 250u16); } //~ ERROR Overflowing arithmetic in unchecked_mul\n+}"}, {"sha": "690f2dc76284ccc4cb4dfaa8779bee7ebd167dd8", "filename": "tests/compile-fail/unchecked_mul2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ce36226e6156e7aaf6da77833fd80cd83d8d623/tests%2Fcompile-fail%2Funchecked_mul2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce36226e6156e7aaf6da77833fd80cd83d8d623/tests%2Fcompile-fail%2Funchecked_mul2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funchecked_mul2.rs?ref=7ce36226e6156e7aaf6da77833fd80cd83d8d623", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // MIN overflow\n+    unsafe { std::intrinsics::unchecked_mul(1_000_000_000i32, -4); } //~ ERROR Overflowing arithmetic in unchecked_mul\n+}"}, {"sha": "0be8afa2c34cc8010ccb52c405660f700cd1e5af", "filename": "tests/compile-fail/unchecked_sub1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ce36226e6156e7aaf6da77833fd80cd83d8d623/tests%2Fcompile-fail%2Funchecked_sub1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce36226e6156e7aaf6da77833fd80cd83d8d623/tests%2Fcompile-fail%2Funchecked_sub1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funchecked_sub1.rs?ref=7ce36226e6156e7aaf6da77833fd80cd83d8d623", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // MIN overflow\n+    unsafe { std::intrinsics::unchecked_sub(14u32, 22); } //~ ERROR Overflowing arithmetic in unchecked_sub\n+}"}, {"sha": "bc23fa37c36764368b6081aec2446bac3fbdc353", "filename": "tests/compile-fail/unchecked_sub2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ce36226e6156e7aaf6da77833fd80cd83d8d623/tests%2Fcompile-fail%2Funchecked_sub2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce36226e6156e7aaf6da77833fd80cd83d8d623/tests%2Fcompile-fail%2Funchecked_sub2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funchecked_sub2.rs?ref=7ce36226e6156e7aaf6da77833fd80cd83d8d623", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // MAX overflow\n+    unsafe { std::intrinsics::unchecked_sub(30000i16, -7000); } //~ ERROR Overflowing arithmetic in unchecked_sub\n+}"}, {"sha": "af3517af6f7a021582e172280607fa1e8a585ace", "filename": "tests/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7ce36226e6156e7aaf6da77833fd80cd83d8d623/tests%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce36226e6156e7aaf6da77833fd80cd83d8d623/tests%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintrinsics-integer.rs?ref=7ce36226e6156e7aaf6da77833fd80cd83d8d623", "patch": "@@ -8,23 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(intrinsics)]\n-\n-mod rusti {\n-    extern \"rust-intrinsic\" {\n-        pub fn ctpop<T>(x: T) -> T;\n-        pub fn ctlz<T>(x: T) -> T;\n-        pub fn ctlz_nonzero<T>(x: T) -> T;\n-        pub fn cttz<T>(x: T) -> T;\n-        pub fn cttz_nonzero<T>(x: T) -> T;\n-        pub fn bswap<T>(x: T) -> T;\n-    }\n-}\n+#![feature(core_intrinsics)]\n+use std::intrinsics::*;\n \n pub fn main() {\n     unsafe {\n-        use crate::rusti::*;\n-\n         assert_eq!(ctpop(0u8), 0); assert_eq!(ctpop(0i8), 0);\n         assert_eq!(ctpop(0u16), 0); assert_eq!(ctpop(0i16), 0);\n         assert_eq!(ctpop(0u32), 0); assert_eq!(ctpop(0i32), 0);\n@@ -138,5 +126,29 @@ pub fn main() {\n         assert_eq!(bswap(0x0ABBCC0Di32), 0x0DCCBB0A);\n         assert_eq!(bswap(0x0122334455667708u64), 0x0877665544332201);\n         assert_eq!(bswap(0x0122334455667708i64), 0x0877665544332201);\n+\n+        assert_eq!(exact_div(9*9u32, 3), 27);\n+        assert_eq!(exact_div(-9*9i32, 3), -27);\n+        assert_eq!(exact_div(9*9i8, -3), -27);\n+        assert_eq!(exact_div(-9*9i64, -3), 27);\n+\n+        assert_eq!(unchecked_div(9*9u32, 2), 40);\n+        assert_eq!(unchecked_div(-9*9i32, 2), -40);\n+        assert_eq!(unchecked_div(9*9i8, -2), -40);\n+        assert_eq!(unchecked_div(-9*9i64, -2), 40);\n+\n+        assert_eq!(unchecked_rem(9*9u32, 2), 1);\n+        assert_eq!(unchecked_rem(-9*9i32, 2), -1);\n+        assert_eq!(unchecked_rem(9*9i8, -2), 1);\n+        assert_eq!(unchecked_rem(-9*9i64, -2), -1);\n+\n+        assert_eq!(unchecked_add(23u8, 19), 42);\n+        assert_eq!(unchecked_add(5, -10), -5);\n+\n+        assert_eq!(unchecked_sub(23u8, 19), 4);\n+        assert_eq!(unchecked_sub(-17, -27), 10);\n+\n+        assert_eq!(unchecked_mul(6u8, 7), 42);\n+        assert_eq!(unchecked_mul(13, -5), -65);\n     }\n }"}]}