{"sha": "5889bb27d673e4762490c21ad734e7fd9705d591", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ODliYjI3ZDY3M2U0NzYyNDkwYzIxYWQ3MzRlN2ZkOTcwNWQ1OTE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-08T23:17:34Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-08T23:17:34Z"}, "message": "Simplify", "tree": {"sha": "ab8cd0a9d6c7a0cc6c3ef9096baf687bee54d80d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab8cd0a9d6c7a0cc6c3ef9096baf687bee54d80d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5889bb27d673e4762490c21ad734e7fd9705d591", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5889bb27d673e4762490c21ad734e7fd9705d591", "html_url": "https://github.com/rust-lang/rust/commit/5889bb27d673e4762490c21ad734e7fd9705d591", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5889bb27d673e4762490c21ad734e7fd9705d591/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be02ac981de88869a9d6069b675a78a2e9e31f99", "url": "https://api.github.com/repos/rust-lang/rust/commits/be02ac981de88869a9d6069b675a78a2e9e31f99", "html_url": "https://github.com/rust-lang/rust/commit/be02ac981de88869a9d6069b675a78a2e9e31f99"}], "stats": {"total": 30, "additions": 8, "deletions": 22}, "files": [{"sha": "b29d1fef9b861108771e4ec7050ee1035e19c1c6", "filename": "crates/ide/src/call_hierarchy.rs", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5889bb27d673e4762490c21ad734e7fd9705d591/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5889bb27d673e4762490c21ad734e7fd9705d591/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs?ref=5889bb27d673e4762490c21ad734e7fd9705d591", "patch": "@@ -5,7 +5,7 @@ use indexmap::IndexMap;\n use hir::Semantics;\n use ide_db::call_info::FnCallNode;\n use ide_db::RootDatabase;\n-use syntax::{ast, match_ast, AstNode, TextRange};\n+use syntax::{ast, AstNode, TextRange};\n \n use crate::{\n     display::TryToNav, goto_definition, references, FilePosition, NavigationTarget, RangeInfo,\n@@ -57,15 +57,9 @@ pub(crate) fn incoming_calls(db: &RootDatabase, position: FilePosition) -> Optio\n \n         // This target is the containing function\n         if let Some(nav) = syntax.ancestors().find_map(|node| {\n-            match_ast! {\n-                match node {\n-                    ast::Fn(it) => {\n-                        let def = sema.to_def(&it)?;\n-                        def.try_to_nav(sema.db)\n-                    },\n-                    _ => None,\n-                }\n-            }\n+            let fn_ = ast::Fn::cast(node)?;\n+            let def = sema.to_def(&fn_)?;\n+            def.try_to_nav(sema.db)\n         }) {\n             let relative_range = reference.file_range.range;\n             calls.add(&nav, relative_range);\n@@ -91,29 +85,21 @@ pub(crate) fn outgoing_calls(db: &RootDatabase, position: FilePosition) -> Optio\n         .filter_map(|node| FnCallNode::with_node_exact(&node))\n         .filter_map(|call_node| {\n             let name_ref = call_node.name_ref()?;\n-\n-            if let Some(func_target) = match &call_node {\n+            let func_target = match call_node {\n                 FnCallNode::CallExpr(expr) => {\n                     //FIXME: Type::as_callable is broken\n                     let callable = sema.type_of_expr(&expr.expr()?)?.as_callable(db)?;\n                     match callable.kind() {\n-                        hir::CallableKind::Function(it) => {\n-                            let fn_def: hir::Function = it.into();\n-                            let nav = fn_def.try_to_nav(db)?;\n-                            Some(nav)\n-                        }\n+                        hir::CallableKind::Function(it) => it.try_to_nav(db),\n                         _ => None,\n                     }\n                 }\n                 FnCallNode::MethodCallExpr(expr) => {\n                     let function = sema.resolve_method_call(&expr)?;\n                     function.try_to_nav(db)\n                 }\n-            } {\n-                Some((func_target, name_ref.syntax().text_range()))\n-            } else {\n-                None\n-            }\n+            }?;\n+            Some((func_target, name_ref.syntax().text_range()))\n         })\n         .for_each(|(nav, range)| calls.add(&nav, range));\n "}]}