{"sha": "b577b9aef357398252bfff630d69efabfceb50e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NzdiOWFlZjM1NzM5ODI1MmJmZmY2MzBkNjllZmFiZmNlYjUwZTg=", "commit": {"author": {"name": "Tommy Ip", "email": "hkmp7tommy@gmail.com", "date": "2017-11-09T17:16:25Z"}, "committer": {"name": "Tommy Ip", "email": "hkmp7tommy@gmail.com", "date": "2017-11-09T20:57:58Z"}, "message": "Retain information on whether a format argument has explicit position", "tree": {"sha": "36cc55a64bb2f6a712260956bb61bae98b750d37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36cc55a64bb2f6a712260956bb61bae98b750d37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b577b9aef357398252bfff630d69efabfceb50e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b577b9aef357398252bfff630d69efabfceb50e8", "html_url": "https://github.com/rust-lang/rust/commit/b577b9aef357398252bfff630d69efabfceb50e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b577b9aef357398252bfff630d69efabfceb50e8/comments", "author": {"login": "tommyip", "id": 18504232, "node_id": "MDQ6VXNlcjE4NTA0MjMy", "avatar_url": "https://avatars.githubusercontent.com/u/18504232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tommyip", "html_url": "https://github.com/tommyip", "followers_url": "https://api.github.com/users/tommyip/followers", "following_url": "https://api.github.com/users/tommyip/following{/other_user}", "gists_url": "https://api.github.com/users/tommyip/gists{/gist_id}", "starred_url": "https://api.github.com/users/tommyip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tommyip/subscriptions", "organizations_url": "https://api.github.com/users/tommyip/orgs", "repos_url": "https://api.github.com/users/tommyip/repos", "events_url": "https://api.github.com/users/tommyip/events{/privacy}", "received_events_url": "https://api.github.com/users/tommyip/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tommyip", "id": 18504232, "node_id": "MDQ6VXNlcjE4NTA0MjMy", "avatar_url": "https://avatars.githubusercontent.com/u/18504232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tommyip", "html_url": "https://github.com/tommyip", "followers_url": "https://api.github.com/users/tommyip/followers", "following_url": "https://api.github.com/users/tommyip/following{/other_user}", "gists_url": "https://api.github.com/users/tommyip/gists{/gist_id}", "starred_url": "https://api.github.com/users/tommyip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tommyip/subscriptions", "organizations_url": "https://api.github.com/users/tommyip/orgs", "repos_url": "https://api.github.com/users/tommyip/repos", "events_url": "https://api.github.com/users/tommyip/events{/privacy}", "received_events_url": "https://api.github.com/users/tommyip/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13a416298c1670f0304eeb64f46a410cd1bb5e8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/13a416298c1670f0304eeb64f46a410cd1bb5e8e", "html_url": "https://github.com/rust-lang/rust/commit/13a416298c1670f0304eeb64f46a410cd1bb5e8e"}], "stats": {"total": 89, "additions": 57, "deletions": 32}, "files": [{"sha": "44cdb5e8a3676b23e6ead56ebedbdcf7ff9cf5f5", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b577b9aef357398252bfff630d69efabfceb50e8/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b577b9aef357398252bfff630d69efabfceb50e8/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=b577b9aef357398252bfff630d69efabfceb50e8", "patch": "@@ -73,7 +73,9 @@ pub struct FormatSpec<'a> {\n /// Enum describing where an argument for a format can be located.\n #[derive(Copy, Clone, PartialEq)]\n pub enum Position<'a> {\n-    /// The argument is located at a specific index.\n+    /// The arugment is implied to be located at an index\n+    ArgumentImplicitlyIs(usize),\n+    /// The argument is located at a specific index given in the format\n     ArgumentIs(usize),\n     /// The argument has a name.\n     ArgumentNamed(&'a str),\n@@ -275,7 +277,7 @@ impl<'a> Parser<'a> {\n             None => {\n                 let i = self.curarg;\n                 self.curarg += 1;\n-                ArgumentIs(i)\n+                ArgumentImplicitlyIs(i)\n             }\n         };\n \n@@ -517,7 +519,7 @@ mod tests {\n     fn format_nothing() {\n         same(\"{}\",\n              &[NextArgument(Argument {\n-                   position: ArgumentIs(0),\n+                   position: ArgumentImplicitlyIs(0),\n                    format: fmtdflt(),\n                })]);\n     }\n@@ -595,7 +597,7 @@ mod tests {\n     fn format_counts() {\n         same(\"{:10s}\",\n              &[NextArgument(Argument {\n-                   position: ArgumentIs(0),\n+                   position: ArgumentImplicitlyIs(0),\n                    format: FormatSpec {\n                        fill: None,\n                        align: AlignUnknown,\n@@ -607,7 +609,7 @@ mod tests {\n                })]);\n         same(\"{:10$.10s}\",\n              &[NextArgument(Argument {\n-                   position: ArgumentIs(0),\n+                   position: ArgumentImplicitlyIs(0),\n                    format: FormatSpec {\n                        fill: None,\n                        align: AlignUnknown,\n@@ -619,7 +621,7 @@ mod tests {\n                })]);\n         same(\"{:.*s}\",\n              &[NextArgument(Argument {\n-                   position: ArgumentIs(1),\n+                   position: ArgumentImplicitlyIs(1),\n                    format: FormatSpec {\n                        fill: None,\n                        align: AlignUnknown,\n@@ -631,7 +633,7 @@ mod tests {\n                })]);\n         same(\"{:.10$s}\",\n              &[NextArgument(Argument {\n-                   position: ArgumentIs(0),\n+                   position: ArgumentImplicitlyIs(0),\n                    format: FormatSpec {\n                        fill: None,\n                        align: AlignUnknown,\n@@ -643,7 +645,7 @@ mod tests {\n                })]);\n         same(\"{:a$.b$s}\",\n              &[NextArgument(Argument {\n-                   position: ArgumentIs(0),\n+                   position: ArgumentImplicitlyIs(0),\n                    format: FormatSpec {\n                        fill: None,\n                        align: AlignUnknown,\n@@ -658,7 +660,7 @@ mod tests {\n     fn format_flags() {\n         same(\"{:-}\",\n              &[NextArgument(Argument {\n-                   position: ArgumentIs(0),\n+                   position: ArgumentImplicitlyIs(0),\n                    format: FormatSpec {\n                        fill: None,\n                        align: AlignUnknown,\n@@ -670,7 +672,7 @@ mod tests {\n                })]);\n         same(\"{:+#}\",\n              &[NextArgument(Argument {\n-                   position: ArgumentIs(0),\n+                   position: ArgumentImplicitlyIs(0),\n                    format: FormatSpec {\n                        fill: None,\n                        align: AlignUnknown,"}, {"sha": "16e200d56f9fbe3c4c584225cb3f823b25c83b9a", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b577b9aef357398252bfff630d69efabfceb50e8/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b577b9aef357398252bfff630d69efabfceb50e8/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=b577b9aef357398252bfff630d69efabfceb50e8", "patch": "@@ -254,7 +254,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n                         }\n                     },\n                     // `{:1}` and `{}` are not to be used\n-                    Position::ArgumentIs(_) => {\n+                    Position::ArgumentIs(_) | Position::ArgumentImplicitlyIs(_) => {\n                         span_err!(tcx.sess, span, E0231,\n                                   \"only named substitution \\\n                                    parameters are allowed\");"}, {"sha": "ad5bd39a45341f4bda51a3b9724465eee60dc3cb", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b577b9aef357398252bfff630d69efabfceb50e8/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b577b9aef357398252bfff630d69efabfceb50e8/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=b577b9aef357398252bfff630d69efabfceb50e8", "patch": "@@ -228,7 +228,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 // argument second, if it's an implicit positional parameter\n                 // it's written second, so it should come after width/precision.\n                 let pos = match arg.position {\n-                    parse::ArgumentIs(i) => Exact(i),\n+                    parse::ArgumentIs(i) | parse::ArgumentImplicitlyIs(i) => Exact(i),\n                     parse::ArgumentNamed(s) => Named(s.to_string()),\n                 };\n \n@@ -254,25 +254,28 @@ impl<'a, 'b> Context<'a, 'b> {\n     fn describe_num_args(&self) -> String {\n         match self.args.len() {\n             0 => \"no arguments were given\".to_string(),\n-            1 => \"there is only 1 argument\".to_string(),\n-            x => format!(\"there are only {} arguments\", x),\n+            1 => \"there is 1 argument\".to_string(),\n+            x => format!(\"there are {} arguments\", x),\n         }\n     }\n \n     /// Handle invalid references to positional arguments. Output different\n     /// errors for the case where all arguments are positional and for when\n-    /// there are named arguments in the format string.\n-    fn report_invalid_references(&self) {\n+    /// there are named arguments or numbered positional arguments in the\n+    /// format string.\n+    fn report_invalid_references(&self, numbered_position_args: bool) {\n+        let mut e;\n         let mut refs: Vec<String> = self.invalid_refs\n                                         .iter()\n                                         .map(|r| r.to_string())\n                                         .collect();\n \n-        let msg = if self.names.is_empty() {\n-            format!(\"{} positional argument{} in format string, but {}\",\n-                    self.pieces.len(),\n-                    if self.pieces.len() > 1 { \"s\" } else { \"\" },\n-                    self.describe_num_args())\n+        if self.names.is_empty() && !numbered_position_args {\n+            e = self.ecx.mut_span_err(self.fmtsp,\n+                &format!(\"{} positional argument{} in format string, but {}\",\n+                         self.pieces.len(),\n+                         if self.pieces.len() > 1 { \"s\" } else { \"\" },\n+                         self.describe_num_args()));\n         } else {\n             let arg_list = match refs.len() {\n                 1 => format!(\"argument {}\", refs.pop().unwrap()),\n@@ -281,12 +284,14 @@ impl<'a, 'b> Context<'a, 'b> {\n                              head=refs.join(\", \"))\n             };\n \n-            format!(\"invalid reference to positional {} ({})\",\n-                    arg_list,\n-                    self.describe_num_args())\n+            e = self.ecx.mut_span_err(self.fmtsp,\n+                &format!(\"invalid reference to positional {} ({})\",\n+                        arg_list,\n+                        self.describe_num_args()));\n+            e.note(\"positional arguments are zero-based\");\n         };\n \n-        self.ecx.span_err(self.fmtsp, &msg[..]);\n+        e.emit();\n     }\n \n     /// Actually verifies and tracks a given format placeholder\n@@ -431,7 +436,8 @@ impl<'a, 'b> Context<'a, 'b> {\n                         }\n                     };\n                     match arg.position {\n-                        parse::ArgumentIs(i) => {\n+                        parse::ArgumentIs(i)\n+                        | parse::ArgumentImplicitlyIs(i) => {\n                             // Map to index in final generated argument array\n                             // in case of multiple types specified\n                             let arg_idx = match arg_index_consumed.get_mut(i) {\n@@ -740,6 +746,18 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n         }\n     }\n \n+    let numbered_position_args = pieces.iter().any(|arg: &parse::Piece| {\n+        match *arg {\n+            parse::String(_) => false,\n+            parse::NextArgument(arg) => {\n+                match arg.position {\n+                    parse::Position::ArgumentIs(_) => true,\n+                    _ => false,\n+                }\n+            }\n+        }\n+    });\n+\n     cx.build_index_map();\n \n     let mut arg_index_consumed = vec![0usize; cx.arg_index_map.len()];\n@@ -766,7 +784,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n     }\n \n     if cx.invalid_refs.len() >= 1 {\n-        cx.report_invalid_references();\n+        cx.report_invalid_references(numbered_position_args);\n     }\n \n     // Make sure that all arguments were used and all arguments have types."}, {"sha": "afe9bc152a36ce5321a5151388be59e7e628b8ff", "filename": "src/test/compile-fail/ifmt-bad-arg.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b577b9aef357398252bfff630d69efabfceb50e8/src%2Ftest%2Fcompile-fail%2Fifmt-bad-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b577b9aef357398252bfff630d69efabfceb50e8/src%2Ftest%2Fcompile-fail%2Fifmt-bad-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fifmt-bad-arg.rs?ref=b577b9aef357398252bfff630d69efabfceb50e8", "patch": "@@ -17,22 +17,26 @@ fn main() {\n     //~^ ERROR: 1 positional argument in format string, but no arguments were given\n \n     format!(\"{1}\", 1);\n-    //~^ ERROR: 1 positional argument in format string, but there is only 1 argument\n+    //~^ ERROR: invalid reference to positional argument 1 (there is 1 argument)\n     //~^^ ERROR: argument never used\n \n     format!(\"{} {}\");\n     //~^ ERROR: 2 positional arguments in format string, but no arguments were given\n \n     format!(\"{0} {1}\", 1);\n-    //~^ ERROR: 2 positional arguments in format string, but there is only 1 argument\n+    //~^ ERROR: invalid reference to positional argument 1 (there is 1 argument)\n \n     format!(\"{0} {1} {2}\", 1, 2);\n-    //~^ ERROR: 3 positional arguments in format string, but there are only 2 arguments\n+    //~^ ERROR: invalid reference to positional argument 2 (there are 2 arguments)\n \n     format!(\"{} {value} {} {}\", 1, value=2);\n-    //~^ ERROR: invalid reference to positional argument 2 (there are only 2 arguments)\n+    //~^ ERROR: invalid reference to positional argument 2 (there are 2 arguments)\n     format!(\"{name} {value} {} {} {} {} {} {}\", 0, name=1, value=2);\n-    //~^ ERROR: invalid reference to positional arguments 3, 4 and 5 (there are only 3 arguments)\n+    //~^ ERROR: invalid reference to positional arguments 3, 4 and 5 (there are 3 arguments)\n+\n+    format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n+    //~^ ERROR: there is no argument named `foo`\n+    //~^^ ERROR: there is no argument named `bar`\n \n     format!(\"{foo}\");                //~ ERROR: no argument named `foo`\n     format!(\"\", 1, 2);               //~ ERROR: multiple unused formatting arguments\n@@ -41,6 +45,7 @@ fn main() {\n     format!(\"{}\", 1, foo=2);         //~ ERROR: named argument never used\n     format!(\"{foo}\", 1, foo=2);      //~ ERROR: argument never used\n     format!(\"\", foo=2);              //~ ERROR: named argument never used\n+    format!(\"{} {}\", 1, 2, foo=1, bar=2);  //~ ERROR: multiple unused formatting arguments\n \n     format!(\"{foo}\", foo=1, foo=2);  //~ ERROR: duplicate argument\n     format!(\"\", foo=1, 2);           //~ ERROR: positional arguments cannot follow"}]}