{"sha": "742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MmVjNGI5YmY3YWU3ZDY5M2RhN2ZlNzVlNWY5NzRlMGZhZmI5ZDA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-08T20:17:46Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-13T04:58:51Z"}, "message": "ast: remove implicit pprust dependency via Display.\n\nInstead just use `pprust::path_to_string(..)` where needed.\n\nThis has two benefits:\n\na) The AST definition is now independent of printing it.\n   (Therefore we get closer to extracting a data-crate.)\n\nb) Debugging should be easier as program flow is clearer.", "tree": {"sha": "279b7b118176d564d71813e9ba0ed2caa5fd5a37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/279b7b118176d564d71813e9ba0ed2caa5fd5a37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0", "html_url": "https://github.com/rust-lang/rust/commit/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d131abefc3aa53fc6376593729e6931326270503", "url": "https://api.github.com/repos/rust-lang/rust/commits/d131abefc3aa53fc6376593729e6931326270503", "html_url": "https://github.com/rust-lang/rust/commit/d131abefc3aa53fc6376593729e6931326270503"}], "stats": {"total": 135, "additions": 88, "deletions": 47}, "files": [{"sha": "60b1b192d10db13aac2c2479fd2fff0111b5fd7f", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0", "patch": "@@ -12,6 +12,7 @@ use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey, StableHa\n use syntax::ast;\n use syntax::attr;\n use syntax::feature_gate;\n+use syntax::print::pprust;\n use syntax::source_map::MultiSpan;\n use syntax::symbol::{Symbol, sym};\n \n@@ -285,7 +286,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                             tool_ident.span,\n                             E0710,\n                             \"an unknown tool name found in scoped lint: `{}`\",\n-                            meta_item.path\n+                            pprust::path_to_string(&meta_item.path),\n                         );\n                         continue;\n                     }"}, {"sha": "9a16d0a0715f75c9218405b324d6f46780b26868", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0", "patch": "@@ -45,7 +45,7 @@ use syntax::feature_gate::{Stability, deprecated_attributes};\n use syntax_pos::{BytePos, Span};\n use syntax::symbol::{Symbol, kw, sym};\n use syntax::errors::{Applicability, DiagnosticBuilder};\n-use syntax::print::pprust::expr_to_string;\n+use syntax::print::pprust::{self, expr_to_string};\n use syntax::visit::FnKind;\n \n use rustc::hir::{self, GenericParamKind, PatKind};\n@@ -701,7 +701,8 @@ impl EarlyLintPass for DeprecatedAttr {\n             }\n         }\n         if attr.check_name(sym::no_start) || attr.check_name(sym::crate_id) {\n-            let msg = format!(\"use of deprecated attribute `{}`: no longer used.\", attr.path);\n+            let path_str = pprust::path_to_string(&attr.path);\n+            let msg = format!(\"use of deprecated attribute `{}`: no longer used.\", path_str);\n             lint_deprecated_attr(cx, attr, &msg, None);\n         }\n     }"}, {"sha": "ad0f75d772548b7208bf942b21d03e1280e9461b", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0", "patch": "@@ -1,4 +1,5 @@\n use syntax::ast::{self, MetaItem};\n+use syntax::print::pprust;\n use syntax::symbol::{Symbol, sym};\n \n use rustc_index::bit_set::{BitSet, HybridBitSet};\n@@ -159,9 +160,8 @@ where\n                 if let Some(s) = item.value_str() {\n                     return Some(s.to_string())\n                 } else {\n-                    sess.span_err(\n-                        item.span,\n-                        &format!(\"{} attribute requires a path\", item.path));\n+                    let path = pprust::path_to_string(&item.path);\n+                    sess.span_err(item.span, &format!(\"{} attribute requires a path\", path));\n                     return None;\n                 }\n             }"}, {"sha": "43c4f720ad41d67da23169d83ff395127f57189a", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0", "patch": "@@ -263,7 +263,8 @@ impl<'a> AstValidator<'a> {\n                 let mut err = self.err_handler().struct_span_err(poly.span,\n                     &format!(\"`?Trait` is not permitted in {}\", where_));\n                 if is_trait {\n-                    err.note(&format!(\"traits are `?{}` by default\", poly.trait_ref.path));\n+                    let path_str = pprust::path_to_string(&poly.trait_ref.path);\n+                    err.note(&format!(\"traits are `?{}` by default\", path_str));\n                 }\n                 err.emit();\n             }"}, {"sha": "2b8965aa5d41c09a56ea4f0ec173f04528911b16", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0", "patch": "@@ -37,6 +37,7 @@ use syntax::ext::expand::AstFragment;\n use syntax::ext::hygiene::ExpnId;\n use syntax::feature_gate::is_builtin_attr;\n use syntax::parse::token::{self, Token};\n+use syntax::print::pprust;\n use syntax::{span_err, struct_span_err};\n use syntax::source_map::{respan, Spanned};\n use syntax::symbol::{kw, sym};\n@@ -228,7 +229,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                         .span_suggestion(\n                             path.span,\n                             \"try\",\n-                            format!(\"crate::{}\", path),\n+                            format!(\"crate::{}\", pprust::path_to_string(&path)),\n                             Applicability::MaybeIncorrect,\n                         )\n                         .emit();"}, {"sha": "ff8f7fc7aa418a12bb6219d0825b403d778f19ff", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0", "patch": "@@ -38,6 +38,7 @@ use rustc_metadata::cstore::CStore;\n use syntax::ext::hygiene::{ExpnId, Transparency, SyntaxContext};\n use syntax::ast::{self, Name, NodeId, Ident, FloatTy, IntTy, UintTy};\n use syntax::ext::base::{SyntaxExtension, MacroKind, SpecialDerives};\n+use syntax::print::pprust;\n use syntax::symbol::{kw, sym};\n \n use syntax::visit::{self, Visitor};\n@@ -2011,13 +2012,13 @@ impl<'a> Resolver<'a> {\n                         let mut candidates =\n                             self.lookup_import_candidates(ident, TypeNS, is_mod);\n                         candidates.sort_by_cached_key(|c| {\n-                            (c.path.segments.len(), c.path.to_string())\n+                            (c.path.segments.len(), pprust::path_to_string(&c.path))\n                         });\n                         if let Some(candidate) = candidates.get(0) {\n                             (\n                                 String::from(\"unresolved import\"),\n                                 Some((\n-                                    vec![(ident.span, candidate.path.to_string())],\n+                                    vec![(ident.span, pprust::path_to_string(&candidate.path))],\n                                     String::from(\"a similar path exists\"),\n                                     Applicability::MaybeIncorrect,\n                                 )),"}, {"sha": "49186088fa06a79637cb039250d83e59cb1d6ca4", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0", "patch": "@@ -21,6 +21,7 @@ use syntax::ext::hygiene::{self, ExpnId, ExpnData, ExpnKind};\n use syntax::ext::compile_declarative_macro;\n use syntax::feature_gate::{emit_feature_err, is_builtin_attr_name};\n use syntax::feature_gate::GateIssue;\n+use syntax::print::pprust;\n use syntax::symbol::{Symbol, kw, sym};\n use syntax_pos::{Span, DUMMY_SP};\n \n@@ -324,7 +325,8 @@ impl<'a> Resolver<'a> {\n \n         Ok(if ext.macro_kind() != kind {\n             let expected = kind.descr_expected();\n-            let msg = format!(\"expected {}, found {} `{}`\", expected, res.descr(), path);\n+            let path_str = pprust::path_to_string(path);\n+            let msg = format!(\"expected {}, found {} `{}`\", expected, res.descr(), path_str);\n             self.session.struct_span_err(path.span, &msg)\n                         .span_label(path.span, format!(\"not {} {}\", kind.article(), expected))\n                         .emit();\n@@ -805,14 +807,16 @@ impl<'a> Resolver<'a> {\n                 }\n             }\n             if let Some(depr) = &stability.rustc_depr {\n-                let (message, lint) = stability::rustc_deprecation_message(depr, &path.to_string());\n+                let path = pprust::path_to_string(path);\n+                let (message, lint) = stability::rustc_deprecation_message(depr, &path);\n                 stability::early_report_deprecation(\n                     self.session, &message, depr.suggestion, lint, span\n                 );\n             }\n         }\n         if let Some(depr) = &ext.deprecation {\n-            let (message, lint) = stability::deprecation_message(depr, &path.to_string());\n+            let path = pprust::path_to_string(&path);\n+            let (message, lint) = stability::deprecation_message(depr, &path);\n             stability::early_report_deprecation(self.session, &message, None, lint, span);\n         }\n     }"}, {"sha": "b726ad1e0d63432552e91d39221aa14176e5f120", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0", "patch": "@@ -46,6 +46,7 @@ use serialize::json::{ToJson, Json, as_json};\n use syntax::ast;\n use syntax::edition::Edition;\n use syntax::ext::base::MacroKind;\n+use syntax::print::pprust;\n use syntax::source_map::FileName;\n use syntax::feature_gate::UnstableFeatures;\n use syntax::symbol::{Symbol, sym};\n@@ -2957,7 +2958,7 @@ fn item_enum(w: &mut Buffer, cx: &Context, it: &clean::Item, e: &clean::Enum) {\n }\n \n fn render_attribute(attr: &ast::MetaItem) -> Option<String> {\n-    let path = attr.path.to_string();\n+    let path = pprust::path_to_string(&attr.path);\n \n     if attr.is_word() {\n         Some(path)"}, {"sha": "79d91125ec4c463a50089c8161cc9655b2bf32f2", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0", "patch": "@@ -7,7 +7,6 @@ pub use crate::util::parser::ExprPrecedence;\n \n use crate::ext::hygiene::ExpnId;\n use crate::parse::token::{self, DelimToken};\n-use crate::print::pprust;\n use crate::ptr::P;\n use crate::source_map::{dummy_spanned, respan, Spanned};\n use crate::symbol::{kw, sym, Symbol};\n@@ -86,12 +85,6 @@ impl PartialEq<Symbol> for Path {\n     }\n }\n \n-impl fmt::Display for Path {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}\", pprust::path_to_string(self))\n-    }\n-}\n-\n impl Path {\n     // Convert a span and an identifier to the corresponding\n     // one-segment path."}, {"sha": "efc48256e7cebaee66a323e53e0d907c9e95280c", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0", "patch": "@@ -5,6 +5,7 @@ use crate::early_buffered_lints::BufferedEarlyLintId;\n use crate::ext::base::ExtCtxt;\n use crate::feature_gate::{Features, GatedCfg};\n use crate::parse::ParseSess;\n+use crate::print::pprust;\n \n use errors::{Applicability, Handler};\n use syntax_pos::hygiene::Transparency;\n@@ -243,7 +244,11 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n             let meta = meta.as_ref().unwrap();\n             let get = |meta: &MetaItem, item: &mut Option<Symbol>| {\n                 if item.is_some() {\n-                    handle_errors(sess, meta.span, AttrError::MultipleItem(meta.path.to_string()));\n+                    handle_errors(\n+                        sess,\n+                        meta.span,\n+                        AttrError::MultipleItem(pprust::path_to_string(&meta.path)),\n+                    );\n                     return false\n                 }\n                 if let Some(v) = meta.value_str() {\n@@ -271,7 +276,10 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                                     handle_errors(\n                                         sess,\n                                         mi.span,\n-                                        AttrError::UnknownMetaItem(mi.path.to_string(), expected),\n+                                        AttrError::UnknownMetaItem(\n+                                            pprust::path_to_string(&mi.path),\n+                                            expected,\n+                                        ),\n                                     );\n                                     continue 'outer\n                                 }\n@@ -362,7 +370,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                                         sess,\n                                         meta.span(),\n                                         AttrError::UnknownMetaItem(\n-                                            mi.path.to_string(),\n+                                            pprust::path_to_string(&mi.path),\n                                             &[\"feature\", \"reason\", \"issue\", \"soft\"]\n                                         ),\n                                     );\n@@ -434,7 +442,8 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                                             sess,\n                                             meta.span(),\n                                             AttrError::UnknownMetaItem(\n-                                                mi.path.to_string(), &[\"since\", \"note\"],\n+                                                pprust::path_to_string(&mi.path),\n+                                                &[\"since\", \"note\"],\n                                             ),\n                                         );\n                                         continue 'outer\n@@ -597,8 +606,11 @@ pub fn eval_condition<F>(cfg: &ast::MetaItem, sess: &ParseSess, eval: &mut F)\n                     !eval_condition(mis[0].meta_item().unwrap(), sess, eval)\n                 },\n                 _ => {\n-                    span_err!(sess.span_diagnostic, cfg.span, E0537,\n-                              \"invalid predicate `{}`\", cfg.path);\n+                    span_err!(\n+                        sess.span_diagnostic, cfg.span, E0537,\n+                        \"invalid predicate `{}`\",\n+                        pprust::path_to_string(&cfg.path)\n+                    );\n                     false\n                 }\n             }\n@@ -653,7 +665,9 @@ fn find_deprecation_generic<'a, I>(sess: &ParseSess,\n                 let get = |meta: &MetaItem, item: &mut Option<Symbol>| {\n                     if item.is_some() {\n                         handle_errors(\n-                            sess, meta.span, AttrError::MultipleItem(meta.path.to_string())\n+                            sess,\n+                            meta.span,\n+                            AttrError::MultipleItem(pprust::path_to_string(&meta.path)),\n                         );\n                         return false\n                     }\n@@ -691,8 +705,10 @@ fn find_deprecation_generic<'a, I>(sess: &ParseSess,\n                                     handle_errors(\n                                         sess,\n                                         meta.span(),\n-                                        AttrError::UnknownMetaItem(mi.path.to_string(),\n-                                                                   &[\"since\", \"note\"]),\n+                                        AttrError::UnknownMetaItem(\n+                                            pprust::path_to_string(&mi.path),\n+                                            &[\"since\", \"note\"],\n+                                        ),\n                                     );\n                                     continue 'outer\n                                 }"}, {"sha": "1e44f3dd5e59aeadc30755947448359fcd67f65c", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0", "patch": "@@ -13,6 +13,7 @@ use crate::mut_visit::*;\n use crate::parse::{DirectoryOwnership, PResult, ParseSess};\n use crate::parse::token;\n use crate::parse::parser::Parser;\n+use crate::print::pprust;\n use crate::ptr::P;\n use crate::symbol::{sym, Symbol};\n use crate::tokenstream::{TokenStream, TokenTree};\n@@ -388,7 +389,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                             \"`derive` may only be applied to structs, enums and unions\");\n                         if let ast::AttrStyle::Inner = attr.style {\n                             let trait_list = derives.iter()\n-                                .map(|t| t.to_string()).collect::<Vec<_>>();\n+                                .map(|t| pprust::path_to_string(t))\n+                                .collect::<Vec<_>>();\n                             let suggestion = format!(\"#[derive({})]\", trait_list.join(\", \"));\n                             err.span_suggestion(\n                                 span, \"try an outer attribute\", suggestion,\n@@ -587,8 +589,11 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     let result = if let Some(result) = fragment_kind.make_from(tok_result) {\n                         result\n                     } else {\n-                        let msg = format!(\"non-{kind} macro in {kind} position: {path}\",\n-                                          kind = fragment_kind.name(), path = mac.path);\n+                        let msg = format!(\n+                            \"non-{kind} macro in {kind} position: {path}\",\n+                            kind = fragment_kind.name(),\n+                            path = pprust::path_to_string(&mac.path),\n+                        );\n                         self.cx.span_err(span, &msg);\n                         self.cx.trace_macros_diag();\n                         fragment_kind.dummy(span)\n@@ -878,7 +883,7 @@ impl<'a> Parser<'a> {\n             err.span_label(span, \"caused by the macro expansion here\");\n             let msg = format!(\n                 \"the usage of `{}!` is likely invalid in {} context\",\n-                macro_path,\n+                pprust::path_to_string(&macro_path),\n                 kind_name,\n             );\n             err.note(&msg);"}, {"sha": "df744e403d841a9bbd0998902e4d00d59bc7e2b8", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0", "patch": "@@ -854,7 +854,7 @@ impl<'a> Parser<'a> {\n                 // This is a best-effort recovery.\n                 path.span,\n                 \"try\",\n-                format!(\"<{}>::{}\", ty_str, path),\n+                format!(\"<{}>::{}\", ty_str, pprust::path_to_string(&path)),\n                 Applicability::MaybeIncorrect,\n             )\n             .emit();"}, {"sha": "a19380657fdfa5da0ac3537ae599d588f89e97d6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0", "patch": "@@ -1454,12 +1454,14 @@ impl<'a> Parser<'a> {\n `pub(super)`: visible only in the current module's parent\n `pub(in path::to::module)`: visible only on the specified path\"##;\n \n+        let path_str = pprust::path_to_string(&path);\n+\n         struct_span_err!(self.sess.span_diagnostic, path.span, E0704, \"{}\", msg)\n             .help(suggestion)\n             .span_suggestion(\n                 path.span,\n-                &format!(\"make this visible only to module `{}` with `in`\", path),\n-                format!(\"in {}\", path),\n+                &format!(\"make this visible only to module `{}` with `in`\", path_str),\n+                format!(\"in {}\", path_str),\n                 Applicability::MachineApplicable,\n             )\n             .emit();"}, {"sha": "660bf9b7d65f169b48a9263eeabe3384ae83a102", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0", "patch": "@@ -552,8 +552,11 @@ impl<'a> Parser<'a> {\n \n                         // Report non-fatal diagnostics, keep `x as usize` as an expression\n                         // in AST and continue parsing.\n-                        let msg = format!(\"`<` is interpreted as a start of generic \\\n-                                           arguments for `{}`, not a {}\", path, op_noun);\n+                        let msg = format!(\n+                            \"`<` is interpreted as a start of generic arguments for `{}`, not a {}\",\n+                            pprust::path_to_string(&path),\n+                            op_noun,\n+                        );\n                         let span_after_type = parser_snapshot_after_type.token.span;\n                         let expr = mk_expr(self, P(Ty {\n                             span: path.span,"}, {"sha": "1d48e8231b40188de0990dad214758fc43f537d2", "filename": "src/libsyntax_ext/proc_macro_harness.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_harness.rs?ref=742ec4b9bf7ae7d693da7fe75e5f974e0fafb9d0", "patch": "@@ -7,6 +7,7 @@ use syntax::ext::base::ExtCtxt;\n use syntax::ext::expand::{AstFragment, ExpansionConfig};\n use syntax::ext::proc_macro::is_proc_macro_attr;\n use syntax::parse::ParseSess;\n+use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym};\n use syntax::visit::{self, Visitor};\n@@ -248,13 +249,20 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n         for attr in &item.attrs {\n             if is_proc_macro_attr(&attr) {\n                 if let Some(prev_attr) = found_attr {\n+                    let path_str = pprust::path_to_string(&attr.path);\n                     let msg = if attr.path.segments[0].ident.name ==\n                                  prev_attr.path.segments[0].ident.name {\n-                        format!(\"only one `#[{}]` attribute is allowed on any given function\",\n-                                attr.path)\n+                        format!(\n+                            \"only one `#[{}]` attribute is allowed on any given function\",\n+                            path_str,\n+                        )\n                     } else {\n-                        format!(\"`#[{}]` and `#[{}]` attributes cannot both be applied \\\n-                                to the same function\", attr.path, prev_attr.path)\n+                        format!(\n+                            \"`#[{}]` and `#[{}]` attributes cannot both be applied\n+                            to the same function\",\n+                            path_str,\n+                            pprust::path_to_string(&prev_attr.path),\n+                        )\n                     };\n \n                     self.handler.struct_span_err(attr.span, &msg)\n@@ -280,8 +288,10 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n         };\n \n         if !is_fn {\n-            let msg = format!(\"the `#[{}]` attribute may only be used on bare functions\",\n-                              attr.path);\n+            let msg = format!(\n+                \"the `#[{}]` attribute may only be used on bare functions\",\n+                pprust::path_to_string(&attr.path),\n+            );\n \n             self.handler.span_err(attr.span, &msg);\n             return;\n@@ -292,8 +302,10 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n         }\n \n         if !self.is_proc_macro_crate {\n-            let msg = format!(\"the `#[{}]` attribute is only usable with crates of the \\\n-                              `proc-macro` crate type\", attr.path);\n+            let msg = format!(\n+                \"the `#[{}]` attribute is only usable with crates of the `proc-macro` crate type\",\n+                pprust::path_to_string(&attr.path),\n+            );\n \n             self.handler.span_err(attr.span, &msg);\n             return;"}]}