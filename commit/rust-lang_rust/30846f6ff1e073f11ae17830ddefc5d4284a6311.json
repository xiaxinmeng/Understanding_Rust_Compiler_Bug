{"sha": "30846f6ff1e073f11ae17830ddefc5d4284a6311", "node_id": "C_kwDOAAsO6NoAKDMwODQ2ZjZmZjFlMDczZjExYWUxNzgzMGRkZWZjNWQ0Mjg0YTYzMTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-04T06:28:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-04T06:28:56Z"}, "message": "Rollup merge of #106396 - jyn514:bump-stage-date, r=pietroalbini\n\nAllow passing a specific date to `bump-stage0`\n\nThis allows regenerating `src/stage0.json` on changes to the tool, without needing to hard-code the date in the source. It was useful for https://github.com/rust-lang/rust/pull/106394, which added clippy to the list of required components.\n\nr? `@pietroalbini`", "tree": {"sha": "e2b37ee12ed23ac10cbcef8f39473a6261c3dfee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2b37ee12ed23ac10cbcef8f39473a6261c3dfee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30846f6ff1e073f11ae17830ddefc5d4284a6311", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjtRyoCRBK7hj4Ov3rIwAAxCYIADRVSCcVtaOU9MKc2ZvDqUL/\nCtVJssAJps28gPo22SJv7DqlExUELtFjdJuCJkYp/xvYWUCB7LZf8x0MKD0HSnvc\nLj80i2QQVwvf2rQNicVubgYG+1u5GFrQ5UT+8WqSYWen2pGNNxMY/OkMVn0VQjd6\n6l0lOi6YeXUealg5skAsNOVgQFvSUIEpluYA1WRPTz1AsvUoa5ztL9QqAmDs26ou\nprLFK52JdAv3m4QgQYMc+Wu/Mt7uUUYnxd5IDPGWkttDGVlwAWZzl6LlLneKvbnQ\nP9n3k5uw/x2939vFuxn7No6BGOk0bX6h0tFl8z3ckskkCspk3Gzq8zP/Gsbs0JA=\n=MHfd\n-----END PGP SIGNATURE-----\n", "payload": "tree e2b37ee12ed23ac10cbcef8f39473a6261c3dfee\nparent 11020b93b670d7091bf933da8231f28debdd5e00\nparent 6f1d9ba581dbf1282825e87424021d8c4cb7ba54\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1672813736 +0100\ncommitter GitHub <noreply@github.com> 1672813736 +0100\n\nRollup merge of #106396 - jyn514:bump-stage-date, r=pietroalbini\n\nAllow passing a specific date to `bump-stage0`\n\nThis allows regenerating `src/stage0.json` on changes to the tool, without needing to hard-code the date in the source. It was useful for https://github.com/rust-lang/rust/pull/106394, which added clippy to the list of required components.\n\nr? `@pietroalbini`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30846f6ff1e073f11ae17830ddefc5d4284a6311", "html_url": "https://github.com/rust-lang/rust/commit/30846f6ff1e073f11ae17830ddefc5d4284a6311", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30846f6ff1e073f11ae17830ddefc5d4284a6311/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11020b93b670d7091bf933da8231f28debdd5e00", "url": "https://api.github.com/repos/rust-lang/rust/commits/11020b93b670d7091bf933da8231f28debdd5e00", "html_url": "https://github.com/rust-lang/rust/commit/11020b93b670d7091bf933da8231f28debdd5e00"}, {"sha": "6f1d9ba581dbf1282825e87424021d8c4cb7ba54", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f1d9ba581dbf1282825e87424021d8c4cb7ba54", "html_url": "https://github.com/rust-lang/rust/commit/6f1d9ba581dbf1282825e87424021d8c4cb7ba54"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "e0280854541a0d95b6979a84b2157c8e1966e55f", "filename": "src/bootstrap/run.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30846f6ff1e073f11ae17830ddefc5d4284a6311/src%2Fbootstrap%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30846f6ff1e073f11ae17830ddefc5d4284a6311/src%2Fbootstrap%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frun.rs?ref=30846f6ff1e073f11ae17830ddefc5d4284a6311", "patch": "@@ -105,6 +105,7 @@ impl Step for BumpStage0 {\n \n     fn run(self, builder: &Builder<'_>) -> Self::Output {\n         let mut cmd = builder.tool_cmd(Tool::BumpStage0);\n+        cmd.args(builder.config.cmd.args());\n         builder.run(&mut cmd);\n     }\n }"}, {"sha": "530a80b1ed374523894a2a23c5775f2cf8b9d78d", "filename": "src/tools/bump-stage0/src/main.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/30846f6ff1e073f11ae17830ddefc5d4284a6311/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30846f6ff1e073f11ae17830ddefc5d4284a6311/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs?ref=30846f6ff1e073f11ae17830ddefc5d4284a6311", "patch": "@@ -1,4 +1,4 @@\n-use anyhow::Error;\n+use anyhow::{Context, Error};\n use curl::easy::Easy;\n use indexmap::IndexMap;\n use std::collections::HashMap;\n@@ -13,12 +13,13 @@ struct Tool {\n     comments: Vec<String>,\n \n     channel: Channel,\n+    date: Option<String>,\n     version: [u16; 3],\n     checksums: IndexMap<String, String>,\n }\n \n impl Tool {\n-    fn new() -> Result<Self, Error> {\n+    fn new(date: Option<String>) -> Result<Self, Error> {\n         let channel = match std::fs::read_to_string(\"src/ci/channel\")?.trim() {\n             \"stable\" => Channel::Stable,\n             \"beta\" => Channel::Beta,\n@@ -40,6 +41,7 @@ impl Tool {\n         Ok(Self {\n             channel,\n             version,\n+            date,\n             config: existing.config,\n             comments: existing.comments,\n             checksums: IndexMap::new(),\n@@ -84,7 +86,7 @@ impl Tool {\n             Channel::Nightly => \"beta\".to_string(),\n         };\n \n-        let manifest = fetch_manifest(&self.config, &channel)?;\n+        let manifest = fetch_manifest(&self.config, &channel, self.date.as_deref())?;\n         self.collect_checksums(&manifest, COMPILER_COMPONENTS)?;\n         Ok(Stage0Toolchain {\n             date: manifest.date,\n@@ -110,7 +112,7 @@ impl Tool {\n             return Ok(None);\n         }\n \n-        let manifest = fetch_manifest(&self.config, \"nightly\")?;\n+        let manifest = fetch_manifest(&self.config, \"nightly\", self.date.as_deref())?;\n         self.collect_checksums(&manifest, RUSTFMT_COMPONENTS)?;\n         Ok(Some(Stage0Toolchain { date: manifest.date, version: \"nightly\".into() }))\n     }\n@@ -141,16 +143,19 @@ impl Tool {\n }\n \n fn main() -> Result<(), Error> {\n-    let tool = Tool::new()?;\n+    let tool = Tool::new(std::env::args().nth(1))?;\n     tool.update_json()?;\n     Ok(())\n }\n \n-fn fetch_manifest(config: &Config, channel: &str) -> Result<Manifest, Error> {\n-    Ok(toml::from_slice(&http_get(&format!(\n-        \"{}/dist/channel-rust-{}.toml\",\n-        config.dist_server, channel\n-    ))?)?)\n+fn fetch_manifest(config: &Config, channel: &str, date: Option<&str>) -> Result<Manifest, Error> {\n+    let url = if let Some(date) = date {\n+        format!(\"{}/dist/{}/channel-rust-{}.toml\", config.dist_server, date, channel)\n+    } else {\n+        format!(\"{}/dist/channel-rust-{}.toml\", config.dist_server, channel)\n+    };\n+\n+    Ok(toml::from_slice(&http_get(&url)?)?)\n }\n \n fn http_get(url: &str) -> Result<Vec<u8>, Error> {\n@@ -164,7 +169,7 @@ fn http_get(url: &str) -> Result<Vec<u8>, Error> {\n             data.extend_from_slice(new_data);\n             Ok(new_data.len())\n         })?;\n-        transfer.perform()?;\n+        transfer.perform().context(format!(\"failed to fetch {url}\"))?;\n     }\n     Ok(data)\n }"}]}