{"sha": "de5a6d3420d9f2f2c4c995e325412e862a9dc583", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNWE2ZDM0MjBkOWYyZjJjNGM5OTVlMzI1NDEyZTg2MmE5ZGM1ODM=", "commit": {"author": {"name": "Urcra", "email": "urcra@urcra.com", "date": "2020-10-25T23:31:25Z"}, "committer": {"name": "Urcra", "email": "urcra@urcra.com", "date": "2020-10-25T23:31:25Z"}, "message": "Initial implementation of comparison_to_empty", "tree": {"sha": "164b0d16ebb2e3bf43cbe5b055896a2f170f2b68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/164b0d16ebb2e3bf43cbe5b055896a2f170f2b68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de5a6d3420d9f2f2c4c995e325412e862a9dc583", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de5a6d3420d9f2f2c4c995e325412e862a9dc583", "html_url": "https://github.com/rust-lang/rust/commit/de5a6d3420d9f2f2c4c995e325412e862a9dc583", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de5a6d3420d9f2f2c4c995e325412e862a9dc583/comments", "author": {"login": "Urcra", "id": 9095312, "node_id": "MDQ6VXNlcjkwOTUzMTI=", "avatar_url": "https://avatars.githubusercontent.com/u/9095312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urcra", "html_url": "https://github.com/Urcra", "followers_url": "https://api.github.com/users/Urcra/followers", "following_url": "https://api.github.com/users/Urcra/following{/other_user}", "gists_url": "https://api.github.com/users/Urcra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urcra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urcra/subscriptions", "organizations_url": "https://api.github.com/users/Urcra/orgs", "repos_url": "https://api.github.com/users/Urcra/repos", "events_url": "https://api.github.com/users/Urcra/events{/privacy}", "received_events_url": "https://api.github.com/users/Urcra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urcra", "id": 9095312, "node_id": "MDQ6VXNlcjkwOTUzMTI=", "avatar_url": "https://avatars.githubusercontent.com/u/9095312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urcra", "html_url": "https://github.com/Urcra", "followers_url": "https://api.github.com/users/Urcra/followers", "following_url": "https://api.github.com/users/Urcra/following{/other_user}", "gists_url": "https://api.github.com/users/Urcra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urcra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urcra/subscriptions", "organizations_url": "https://api.github.com/users/Urcra/orgs", "repos_url": "https://api.github.com/users/Urcra/repos", "events_url": "https://api.github.com/users/Urcra/events{/privacy}", "received_events_url": "https://api.github.com/users/Urcra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b06856eae0fade6e2eaaaad7ab289069ddb6f037", "url": "https://api.github.com/repos/rust-lang/rust/commits/b06856eae0fade6e2eaaaad7ab289069ddb6f037", "html_url": "https://github.com/rust-lang/rust/commit/b06856eae0fade6e2eaaaad7ab289069ddb6f037"}], "stats": {"total": 271, "additions": 271, "deletions": 0}, "files": [{"sha": "869e9949167edee3f286c29bd130b0f79534f11f", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de5a6d3420d9f2f2c4c995e325412e862a9dc583/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/de5a6d3420d9f2f2c4c995e325412e862a9dc583/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=de5a6d3420d9f2f2c4c995e325412e862a9dc583", "patch": "@@ -1664,6 +1664,7 @@ Released 2018-09-13\n [`cognitive_complexity`]: https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity\n [`collapsible_if`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\n [`comparison_chain`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain\n+[`comparison_to_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_to_empty\n [`copy_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#copy_iterator\n [`create_dir`]: https://rust-lang.github.io/rust-clippy/master/index.html#create_dir\n [`crosspointer_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#crosspointer_transmute"}, {"sha": "dae3e03074faeb80f1952290754abc420e6e7184", "filename": "Cargo.toml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de5a6d3420d9f2f2c4c995e325412e862a9dc583/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/de5a6d3420d9f2f2c4c995e325412e862a9dc583/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=de5a6d3420d9f2f2c4c995e325412e862a9dc583", "patch": "@@ -27,6 +27,13 @@ path = \"src/main.rs\"\n name = \"clippy-driver\"\n path = \"src/driver.rs\"\n \n+[target.'cfg(NOT_A_PLATFORM)'.dependencies]\n+rustc_data_structures = { path = \"/home/urcra/rust/compiler/rustc_data_structures\" }\n+rustc_driver = { path = \"/home/urcra/rust/compiler/rustc_driver\" }\n+rustc_errors = { path = \"/home/urcra/rust/compiler/rustc_errors\" }\n+rustc_interface = { path = \"/home/urcra/rust/compiler/rustc_interface\" }\n+rustc_middle = { path = \"/home/urcra/rust/compiler/rustc_middle\" }\n+\n [dependencies]\n # begin automatic update\n clippy_lints = { version = \"0.0.212\", path = \"clippy_lints\" }"}, {"sha": "167db15be200fe23767577412e14bd6462e3abb8", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/de5a6d3420d9f2f2c4c995e325412e862a9dc583/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/de5a6d3420d9f2f2c4c995e325412e862a9dc583/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=de5a6d3420d9f2f2c4c995e325412e862a9dc583", "patch": "@@ -16,6 +16,28 @@ license = \"MIT OR Apache-2.0\"\n keywords = [\"clippy\", \"lint\", \"plugin\"]\n edition = \"2018\"\n \n+[target.'cfg(NOT_A_PLATFORM)'.dependencies]\n+rustc_ast = { path = \"/home/urcra/rust/compiler/rustc_ast\" }\n+rustc_ast_pretty = { path = \"/home/urcra/rust/compiler/rustc_ast_pretty\" }\n+rustc_attr = { path = \"/home/urcra/rust/compiler/rustc_attr\" }\n+rustc_data_structures = { path = \"/home/urcra/rust/compiler/rustc_data_structures\" }\n+rustc_errors = { path = \"/home/urcra/rust/compiler/rustc_errors\" }\n+rustc_hir = { path = \"/home/urcra/rust/compiler/rustc_hir\" }\n+rustc_hir_pretty = { path = \"/home/urcra/rust/compiler/rustc_hir_pretty\" }\n+rustc_index = { path = \"/home/urcra/rust/compiler/rustc_index\" }\n+rustc_infer = { path = \"/home/urcra/rust/compiler/rustc_infer\" }\n+rustc_lexer = { path = \"/home/urcra/rust/compiler/rustc_lexer\" }\n+rustc_lint = { path = \"/home/urcra/rust/compiler/rustc_lint\" }\n+rustc_middle = { path = \"/home/urcra/rust/compiler/rustc_middle\" }\n+rustc_mir = { path = \"/home/urcra/rust/compiler/rustc_mir\" }\n+rustc_parse = { path = \"/home/urcra/rust/compiler/rustc_parse\" }\n+rustc_parse_format = { path = \"/home/urcra/rust/compiler/rustc_parse_format\" }\n+rustc_session = { path = \"/home/urcra/rust/compiler/rustc_session\" }\n+rustc_span = { path = \"/home/urcra/rust/compiler/rustc_span\" }\n+rustc_target = { path = \"/home/urcra/rust/compiler/rustc_target\" }\n+rustc_trait_selection = { path = \"/home/urcra/rust/compiler/rustc_trait_selection\" }\n+rustc_typeck = { path = \"/home/urcra/rust/compiler/rustc_typeck\" }\n+\n [dependencies]\n cargo_metadata = \"0.12\"\n if_chain = \"1.0.0\""}, {"sha": "3b55336722c1cfda53f3c1db519e31f8e49d91d8", "filename": "clippy_lints/src/comparison_to_empty.rs", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/de5a6d3420d9f2f2c4c995e325412e862a9dc583/clippy_lints%2Fsrc%2Fcomparison_to_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5a6d3420d9f2f2c4c995e325412e862a9dc583/clippy_lints%2Fsrc%2Fcomparison_to_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcomparison_to_empty.rs?ref=de5a6d3420d9f2f2c4c995e325412e862a9dc583", "patch": "@@ -0,0 +1,155 @@\n+use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n+use rustc_ast::ast::LitKind;\n+use rustc_errors::Applicability;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{BinOpKind, Expr, ExprKind, ItemKind, TraitItemRef};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::source_map::{Span, Spanned};\n+\n+declare_clippy_lint! {\n+    /// **What it does:**\n+    ///\n+    /// **Why is this bad?**\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// // example code where clippy issues a warning\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// // example code which does not raise clippy warning\n+    /// ```\n+    pub COMPARISON_TO_EMPTY,\n+    style,\n+    \"default lint description\"\n+}\n+\n+declare_lint_pass!(ComparisonToEmpty => [COMPARISON_TO_EMPTY]);\n+\n+impl LateLintPass<'_> for ComparisonToEmpty {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if expr.span.from_expansion() {\n+            return;\n+        }\n+\n+        if let ExprKind::Binary(Spanned { node: cmp, .. }, ref left, ref right) = expr.kind {\n+            match cmp {\n+                BinOpKind::Eq => {\n+                    check_cmp(cx, expr.span, left, right, \"\", 0); // len == 0\n+                    check_cmp(cx, expr.span, right, left, \"\", 0); // 0 == len\n+                },\n+                BinOpKind::Ne => {\n+                    check_cmp(cx, expr.span, left, right, \"!\", 0); // len != 0\n+                    check_cmp(cx, expr.span, right, left, \"!\", 0); // 0 != len\n+                },\n+                BinOpKind::Gt => {\n+                    check_cmp(cx, expr.span, left, right, \"!\", 0); // len > 0\n+                    check_cmp(cx, expr.span, right, left, \"\", 1); // 1 > len\n+                },\n+                BinOpKind::Lt => {\n+                    check_cmp(cx, expr.span, left, right, \"\", 1); // len < 1\n+                    check_cmp(cx, expr.span, right, left, \"!\", 0); // 0 < len\n+                },\n+                BinOpKind::Ge => check_cmp(cx, expr.span, left, right, \"!\", 1), // len >= 1\n+                BinOpKind::Le => check_cmp(cx, expr.span, right, left, \"!\", 1), // 1 <= len\n+                _ => (),\n+            }\n+        }\n+    }\n+\n+}\n+\n+\n+fn check_cmp(cx: &LateContext<'_>, span: Span, lit1: &Expr<'_>, lit2: &Expr<'_>, op: &str, compare_to: u32) {\n+    check_empty_expr(cx, span, lit1, lit2, op)\n+}\n+\n+fn check_empty_expr(\n+    cx: &LateContext<'_>,\n+    span: Span,\n+    lit1: &Expr<'_>,\n+    lit2: &Expr<'_>,\n+    op: &str\n+) {\n+    if (is_empty_array(lit2) || is_empty_string(lit2)) && has_is_empty(cx, lit1) {\n+        let mut applicability = Applicability::MachineApplicable;\n+        span_lint_and_sugg(\n+            cx,\n+            COMPARISON_TO_EMPTY,\n+            span,\n+            &format!(\"comparison to empty slice\"),\n+            &format!(\"using `{}is_empty` is clearer and more explicit\", op),\n+            format!(\n+                \"{}{}.is_empty()\",\n+                op,\n+                snippet_with_applicability(cx, lit1.span, \"_\", &mut applicability)\n+            ),\n+            applicability,\n+        );\n+    }\n+}\n+\n+fn is_empty_string(expr: &Expr<'_>) -> bool {\n+    if let ExprKind::Lit(ref lit) = expr.kind {\n+        if let LitKind::Str(lit, _) = lit.node {\n+            let lit = lit.as_str();\n+            return lit == \"\";\n+        }\n+    }\n+    false\n+}\n+\n+fn is_empty_array(expr: &Expr<'_>) -> bool {\n+    if let ExprKind::Array(ref arr) = expr.kind {\n+        return arr.is_empty();\n+    }\n+    false\n+}\n+\n+\n+/// Checks if this type has an `is_empty` method.\n+fn has_is_empty(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    /// Gets an `AssocItem` and return true if it matches `is_empty(self)`.\n+    fn is_is_empty(cx: &LateContext<'_>, item: &ty::AssocItem) -> bool {\n+        if let ty::AssocKind::Fn = item.kind {\n+            if item.ident.name.as_str() == \"is_empty\" {\n+                let sig = cx.tcx.fn_sig(item.def_id);\n+                let ty = sig.skip_binder();\n+                ty.inputs().len() == 1\n+            } else {\n+                false\n+            }\n+        } else {\n+            false\n+        }\n+    }\n+\n+    /// Checks the inherent impl's items for an `is_empty(self)` method.\n+    fn has_is_empty_impl(cx: &LateContext<'_>, id: DefId) -> bool {\n+        cx.tcx.inherent_impls(id).iter().any(|imp| {\n+            cx.tcx\n+                .associated_items(*imp)\n+                .in_definition_order()\n+                .any(|item| is_is_empty(cx, &item))\n+        })\n+    }\n+\n+    let ty = &cx.typeck_results().expr_ty(expr).peel_refs();\n+    match ty.kind() {\n+        ty::Dynamic(ref tt, ..) => tt.principal().map_or(false, |principal| {\n+            cx.tcx\n+                .associated_items(principal.def_id())\n+                .in_definition_order()\n+                .any(|item| is_is_empty(cx, &item))\n+        }),\n+        ty::Projection(ref proj) => has_is_empty_impl(cx, proj.item_def_id),\n+        ty::Adt(id, _) => has_is_empty_impl(cx, id.did),\n+        ty::Array(..) | ty::Slice(..) | ty::Str => true,\n+        _ => false,\n+    }\n+}"}, {"sha": "75629e13a8ec91807523ccd2b70548ec897f3081", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de5a6d3420d9f2f2c4c995e325412e862a9dc583/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5a6d3420d9f2f2c4c995e325412e862a9dc583/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=de5a6d3420d9f2f2c4c995e325412e862a9dc583", "patch": "@@ -171,6 +171,7 @@ mod checked_conversions;\n mod cognitive_complexity;\n mod collapsible_if;\n mod comparison_chain;\n+mod comparison_to_empty;\n mod copies;\n mod copy_iterator;\n mod create_dir;\n@@ -523,6 +524,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &cognitive_complexity::COGNITIVE_COMPLEXITY,\n         &collapsible_if::COLLAPSIBLE_IF,\n         &comparison_chain::COMPARISON_CHAIN,\n+        &comparison_to_empty::COMPARISON_TO_EMPTY,\n         &copies::IFS_SAME_COND,\n         &copies::IF_SAME_THEN_ELSE,\n         &copies::MATCH_SAME_ARMS,\n@@ -1139,6 +1141,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box disallowed_method::DisallowedMethod::new(&disallowed_methods));\n     store.register_early_pass(|| box asm_syntax::InlineAsmX86AttSyntax);\n     store.register_early_pass(|| box asm_syntax::InlineAsmX86IntelSyntax);\n+    store.register_late_pass(|| box comparison_to_empty::ComparisonToEmpty);\n \n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n@@ -1299,6 +1302,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&bytecount::NAIVE_BYTECOUNT),\n         LintId::of(&collapsible_if::COLLAPSIBLE_IF),\n         LintId::of(&comparison_chain::COMPARISON_CHAIN),\n+        LintId::of(&comparison_to_empty::COMPARISON_TO_EMPTY),\n         LintId::of(&copies::IFS_SAME_COND),\n         LintId::of(&copies::IF_SAME_THEN_ELSE),\n         LintId::of(&derive::DERIVE_HASH_XOR_EQ),\n@@ -1555,6 +1559,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n         LintId::of(&collapsible_if::COLLAPSIBLE_IF),\n         LintId::of(&comparison_chain::COMPARISON_CHAIN),\n+        LintId::of(&comparison_to_empty::COMPARISON_TO_EMPTY),\n         LintId::of(&doc::MISSING_SAFETY_DOC),\n         LintId::of(&doc::NEEDLESS_DOCTEST_MAIN),\n         LintId::of(&enum_variants::ENUM_VARIANT_NAMES),"}, {"sha": "c2b2236bc6611efd6b18d25270e8cf737751f30e", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de5a6d3420d9f2f2c4c995e325412e862a9dc583/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5a6d3420d9f2f2c4c995e325412e862a9dc583/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=de5a6d3420d9f2f2c4c995e325412e862a9dc583", "patch": "@@ -291,6 +291,13 @@ vec![\n         deprecation: None,\n         module: \"comparison_chain\",\n     },\n+    Lint {\n+        name: \"comparison_to_empty\",\n+        group: \"style\",\n+        desc: \"default lint description\",\n+        deprecation: None,\n+        module: \"comparison_to_empty\",\n+    },\n     Lint {\n         name: \"copy_iterator\",\n         group: \"pedantic\","}, {"sha": "261024caca761127e98274d241fa6e92d03a8ff3", "filename": "tests/ui/comparison_to_empty.fixed", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/de5a6d3420d9f2f2c4c995e325412e862a9dc583/tests%2Fui%2Fcomparison_to_empty.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/de5a6d3420d9f2f2c4c995e325412e862a9dc583/tests%2Fui%2Fcomparison_to_empty.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomparison_to_empty.fixed?ref=de5a6d3420d9f2f2c4c995e325412e862a9dc583", "patch": "@@ -0,0 +1,23 @@\n+// run-rustfix\n+\n+#![warn(clippy::comparison_to_empty)]\n+\n+fn main() {\n+    // Disallow comparisons to empty\n+    let s = String::new();\n+    let _ = s.is_empty();\n+    let _ = !s.is_empty();\n+\n+    let v = vec![0];\n+    let _ = v.is_empty();\n+    let _ = !v.is_empty();\n+\n+    // Allow comparisons to non-empty\n+    let s = String::new();\n+    let _ = s == \" \";\n+    let _ = s != \" \";\n+\n+    let v = vec![0];\n+    let _ = v == [0];\n+    let _ = v != [0];\n+}"}, {"sha": "98ddd974951611f19d4e6af4d1b77752036286b4", "filename": "tests/ui/comparison_to_empty.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/de5a6d3420d9f2f2c4c995e325412e862a9dc583/tests%2Fui%2Fcomparison_to_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5a6d3420d9f2f2c4c995e325412e862a9dc583/tests%2Fui%2Fcomparison_to_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomparison_to_empty.rs?ref=de5a6d3420d9f2f2c4c995e325412e862a9dc583", "patch": "@@ -0,0 +1,23 @@\n+// run-rustfix\n+\n+#![warn(clippy::comparison_to_empty)]\n+\n+fn main() {\n+    // Disallow comparisons to empty\n+    let s = String::new();\n+    let _ = s == \"\";\n+    let _ = s != \"\";\n+\n+    let v = vec![0];\n+    let _ = v == [];\n+    let _ = v != [];\n+\n+    // Allow comparisons to non-empty\n+    let s = String::new();\n+    let _ = s == \" \";\n+    let _ = s != \" \";\n+\n+    let v = vec![0];\n+    let _ = v == [0];\n+    let _ = v != [0];\n+}"}, {"sha": "f69d6bd5255df81ad45b23b64868537dd6cdb536", "filename": "tests/ui/comparison_to_empty.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/de5a6d3420d9f2f2c4c995e325412e862a9dc583/tests%2Fui%2Fcomparison_to_empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de5a6d3420d9f2f2c4c995e325412e862a9dc583/tests%2Fui%2Fcomparison_to_empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomparison_to_empty.stderr?ref=de5a6d3420d9f2f2c4c995e325412e862a9dc583", "patch": "@@ -0,0 +1,28 @@\n+error: comparison to empty slice\n+  --> $DIR/comparison_to_empty.rs:8:13\n+   |\n+LL |     let _ = s == \"\";\n+   |             ^^^^^^^ help: using `is_empty` is clearer and more explicit: `s.is_empty()`\n+   |\n+   = note: `-D clippy::comparison-to-empty` implied by `-D warnings`\n+\n+error: comparison to empty slice\n+  --> $DIR/comparison_to_empty.rs:9:13\n+   |\n+LL |     let _ = s != \"\";\n+   |             ^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!s.is_empty()`\n+\n+error: comparison to empty slice\n+  --> $DIR/comparison_to_empty.rs:12:13\n+   |\n+LL |     let _ = v == [];\n+   |             ^^^^^^^ help: using `is_empty` is clearer and more explicit: `v.is_empty()`\n+\n+error: comparison to empty slice\n+  --> $DIR/comparison_to_empty.rs:13:13\n+   |\n+LL |     let _ = v != [];\n+   |             ^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!v.is_empty()`\n+\n+error: aborting due to 4 previous errors\n+"}]}