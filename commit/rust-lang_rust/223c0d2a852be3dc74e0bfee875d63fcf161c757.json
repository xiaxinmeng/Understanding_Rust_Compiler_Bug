{"sha": "223c0d2a852be3dc74e0bfee875d63fcf161c757", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyM2MwZDJhODUyYmUzZGM3NGUwYmZlZTg3NWQ2M2ZjZjE2MWM3NTc=", "commit": {"author": {"name": "Griffin Smith", "email": "root@gws.fyi", "date": "2021-03-29T14:35:21Z"}, "committer": {"name": "Griffin Smith", "email": "root@gws.fyi", "date": "2021-06-05T15:22:30Z"}, "message": "Add a map method to Bound\n\nAdd a map method to std::ops::range::Bound, patterned off of the method\nof the same name on Option", "tree": {"sha": "ccf90eab958b4261c6f11f996f3009b3e72afd3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccf90eab958b4261c6f11f996f3009b3e72afd3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/223c0d2a852be3dc74e0bfee875d63fcf161c757", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/223c0d2a852be3dc74e0bfee875d63fcf161c757", "html_url": "https://github.com/rust-lang/rust/commit/223c0d2a852be3dc74e0bfee875d63fcf161c757", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/223c0d2a852be3dc74e0bfee875d63fcf161c757/comments", "author": {"login": "glittershark", "id": 1481027, "node_id": "MDQ6VXNlcjE0ODEwMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1481027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glittershark", "html_url": "https://github.com/glittershark", "followers_url": "https://api.github.com/users/glittershark/followers", "following_url": "https://api.github.com/users/glittershark/following{/other_user}", "gists_url": "https://api.github.com/users/glittershark/gists{/gist_id}", "starred_url": "https://api.github.com/users/glittershark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glittershark/subscriptions", "organizations_url": "https://api.github.com/users/glittershark/orgs", "repos_url": "https://api.github.com/users/glittershark/repos", "events_url": "https://api.github.com/users/glittershark/events{/privacy}", "received_events_url": "https://api.github.com/users/glittershark/received_events", "type": "User", "site_admin": false}, "committer": {"login": "glittershark", "id": 1481027, "node_id": "MDQ6VXNlcjE0ODEwMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1481027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glittershark", "html_url": "https://github.com/glittershark", "followers_url": "https://api.github.com/users/glittershark/followers", "following_url": "https://api.github.com/users/glittershark/following{/other_user}", "gists_url": "https://api.github.com/users/glittershark/gists{/gist_id}", "starred_url": "https://api.github.com/users/glittershark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glittershark/subscriptions", "organizations_url": "https://api.github.com/users/glittershark/orgs", "repos_url": "https://api.github.com/users/glittershark/repos", "events_url": "https://api.github.com/users/glittershark/events{/privacy}", "received_events_url": "https://api.github.com/users/glittershark/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3aedcf06b73fc36feeebca3d579e1d2a6c40acc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aedcf06b73fc36feeebca3d579e1d2a6c40acc5", "html_url": "https://github.com/rust-lang/rust/commit/3aedcf06b73fc36feeebca3d579e1d2a6c40acc5"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "684e6bb4a0fba0b34e149fdebf34c9ea19b30f44", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/223c0d2a852be3dc74e0bfee875d63fcf161c757/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223c0d2a852be3dc74e0bfee875d63fcf161c757/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=223c0d2a852be3dc74e0bfee875d63fcf161c757", "patch": "@@ -674,10 +674,10 @@ pub enum Bound<T> {\n     Unbounded,\n }\n \n-#[unstable(feature = \"bound_as_ref\", issue = \"80996\")]\n impl<T> Bound<T> {\n     /// Converts from `&Bound<T>` to `Bound<&T>`.\n     #[inline]\n+    #[unstable(feature = \"bound_as_ref\", issue = \"80996\")]\n     pub fn as_ref(&self) -> Bound<&T> {\n         match *self {\n             Included(ref x) => Included(x),\n@@ -688,13 +688,47 @@ impl<T> Bound<T> {\n \n     /// Converts from `&mut Bound<T>` to `Bound<&T>`.\n     #[inline]\n+    #[unstable(feature = \"bound_as_ref\", issue = \"80996\")]\n     pub fn as_mut(&mut self) -> Bound<&mut T> {\n         match *self {\n             Included(ref mut x) => Included(x),\n             Excluded(ref mut x) => Excluded(x),\n             Unbounded => Unbounded,\n         }\n     }\n+\n+    /// Maps a `Bound<T>` to a `Bound<U>` by applying a function to the contained value (including\n+    /// both `Included` and `Excluded`), returning a `Bound` of the same kind.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(bound_map)]\n+    /// use std::ops::Bound::*;\n+    ///\n+    /// let bound_string = Included(\"Hello, World!\");\n+    ///\n+    /// assert_eq!(bound_string.map(|s| s.len()), Included(13));\n+    /// ```\n+    ///\n+    /// ```\n+    /// #![feature(bound_map)]\n+    /// use std::ops::Bound;\n+    /// use Bound::*;\n+    ///\n+    /// let unbounded_string: Bound<String> = Unbounded;\n+    ///\n+    /// assert_eq!(unbounded_string.map(|s| s.len()), Unbounded);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"bound_map\", issue = \"86026\")]\n+    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Bound<U> {\n+        match self {\n+            Unbounded => Unbounded,\n+            Included(x) => Included(f(x)),\n+            Excluded(x) => Excluded(f(x)),\n+        }\n+    }\n }\n \n impl<T: Clone> Bound<&T> {"}]}