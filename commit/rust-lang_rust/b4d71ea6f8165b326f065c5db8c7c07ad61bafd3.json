{"sha": "b4d71ea6f8165b326f065c5db8c7c07ad61bafd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZDcxZWE2ZjgxNjViMzI2ZjA2NWM1ZGI4YzdjMDdhZDYxYmFmZDM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-01T14:26:13Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-07T10:28:01Z"}, "message": "make `fn_sig().subst()` ICE when used with a closure\n\nIt's inefficient, and the substitution there doesn't account for the\nextra regions used by NLL inference, so it's a bad thing to encourage.\n\nAs it happens all callers already know if they have a closure or not,\nfrom what I can tell.", "tree": {"sha": "79dbdefaa1d50a2d0770344ac522326818f2f85b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79dbdefaa1d50a2d0770344ac522326818f2f85b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4d71ea6f8165b326f065c5db8c7c07ad61bafd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4d71ea6f8165b326f065c5db8c7c07ad61bafd3", "html_url": "https://github.com/rust-lang/rust/commit/b4d71ea6f8165b326f065c5db8c7c07ad61bafd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4d71ea6f8165b326f065c5db8c7c07ad61bafd3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5ef3e262f23d419750d7d96dce69ff17baf0e5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ef3e262f23d419750d7d96dce69ff17baf0e5b", "html_url": "https://github.com/rust-lang/rust/commit/d5ef3e262f23d419750d7d96dce69ff17baf0e5b"}], "stats": {"total": 43, "additions": 25, "deletions": 18}, "files": [{"sha": "177c25ac5dba04808bee172041c22b5d5d3fbb82", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4d71ea6f8165b326f065c5db8c7c07ad61bafd3/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d71ea6f8165b326f065c5db8c7c07ad61bafd3/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=b4d71ea6f8165b326f065c5db8c7c07ad61bafd3", "patch": "@@ -10,7 +10,7 @@\n \n use hir::def_id::DefId;\n use ty::{self, Ty, TypeFoldable, Substs, TyCtxt};\n-use ty::subst::{Kind, Subst};\n+use ty::subst::Kind;\n use traits;\n use syntax::abi::Abi;\n use util::ppaux;\n@@ -311,7 +311,7 @@ fn fn_once_adapter_instance<'a, 'tcx>(\n     let self_ty = tcx.mk_closure_from_closure_substs(\n         closure_did, substs);\n \n-    let sig = tcx.fn_sig(closure_did).subst(tcx, substs.substs);\n+    let sig = substs.closure_sig(closure_did, tcx);\n     let sig = tcx.erase_late_bound_regions_and_normalize(&sig);\n     assert_eq!(sig.inputs().len(), 1);\n     let substs = tcx.mk_substs(["}, {"sha": "762cf7a0055d5f7010ace28986f386ea3bd02a4f", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4d71ea6f8165b326f065c5db8c7c07ad61bafd3/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d71ea6f8165b326f065c5db8c7c07ad61bafd3/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=b4d71ea6f8165b326f065c5db8c7c07ad61bafd3", "patch": "@@ -29,7 +29,7 @@ use value::Value;\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::{HasDataLayout, LayoutOf};\n-use rustc::ty::subst::{Kind, Subst, Substs};\n+use rustc::ty::subst::{Kind, Substs};\n use rustc::hir;\n \n use libc::{c_uint, c_char};\n@@ -393,7 +393,7 @@ pub fn ty_fn_sig<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         ty::TyFnPtr(_) => ty.fn_sig(ccx.tcx()),\n         ty::TyClosure(def_id, substs) => {\n             let tcx = ccx.tcx();\n-            let sig = tcx.fn_sig(def_id).subst(tcx, substs.substs);\n+            let sig = substs.closure_sig(def_id, tcx);\n \n             let env_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n             sig.map_bound(|sig| tcx.mk_fn_sig("}, {"sha": "0799a388a8becf207a37b58af9932ddc7a3dacdf", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b4d71ea6f8165b326f065c5db8c7c07ad61bafd3/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d71ea6f8165b326f065c5db8c7c07ad61bafd3/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=b4d71ea6f8165b326f065c5db8c7c07ad61bafd3", "patch": "@@ -20,7 +20,7 @@ use rustc::mir::tcx::PlaceTy;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::layout::{self, LayoutOf, Size};\n use rustc::ty::cast::{CastTy, IntTy};\n-use rustc::ty::subst::{Kind, Substs, Subst};\n+use rustc::ty::subst::{Kind, Substs};\n use rustc_apfloat::{ieee, Float, Status};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use base;\n@@ -658,8 +658,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                                     .find(|it| it.kind == ty::AssociatedKind::Method)\n                                     .unwrap().def_id;\n                                 // Now create its substs [Closure, Tuple]\n-                                let input = tcx.fn_sig(def_id)\n-                                    .subst(tcx, substs.substs).input(0);\n+                                let input = substs.closure_sig(def_id, tcx).input(0);\n                                 let input = tcx.erase_late_bound_regions_and_normalize(&input);\n                                 let substs = tcx.mk_substs([operand.ty, input]\n                                     .iter().cloned().map(Kind::from));"}, {"sha": "d586d1ac31506aa63676a5350435b1e9085424e2", "filename": "src/librustc_trans_utils/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4d71ea6f8165b326f065c5db8c7c07ad61bafd3/src%2Flibrustc_trans_utils%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d71ea6f8165b326f065c5db8c7c07ad61bafd3/src%2Flibrustc_trans_utils%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Fmonomorphize.rs?ref=b4d71ea6f8165b326f065c5db8c7c07ad61bafd3", "patch": "@@ -12,7 +12,7 @@ use rustc::hir::def_id::DefId;\n use rustc::middle::lang_items::DropInPlaceFnLangItem;\n use rustc::traits;\n use rustc::ty::adjustment::CustomCoerceUnsized;\n-use rustc::ty::subst::{Kind, Subst};\n+use rustc::ty::subst::Kind;\n use rustc::ty::{self, Ty, TyCtxt};\n \n pub use rustc::ty::Instance;\n@@ -34,7 +34,7 @@ fn fn_once_adapter_instance<'a, 'tcx>(\n     let self_ty = tcx.mk_closure_from_closure_substs(\n         closure_did, substs);\n \n-    let sig = tcx.fn_sig(closure_did).subst(tcx, substs.substs);\n+    let sig = substs.closure_sig(closure_did, tcx);\n     let sig = tcx.erase_late_bound_regions_and_normalize(&sig);\n     assert_eq!(sig.inputs().len(), 1);\n     let substs = tcx.mk_substs(["}, {"sha": "88b9f3cfb9371c444c46ce6b44027dea660f8583", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b4d71ea6f8165b326f065c5db8c7c07ad61bafd3/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d71ea6f8165b326f065c5db8c7c07ad61bafd3/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=b4d71ea6f8165b326f065c5db8c7c07ad61bafd3", "patch": "@@ -1268,15 +1268,23 @@ fn fn_sig<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             ))\n         }\n \n-        NodeExpr(&hir::Expr { node: hir::ExprClosure(..), hir_id, .. }) => {\n-            let tables = tcx.typeck_tables_of(def_id);\n-            match tables.node_id_to_type(hir_id).sty {\n-                ty::TyClosure(closure_def_id, closure_substs) => {\n-                    assert_eq!(def_id, closure_def_id);\n-                    return closure_substs.closure_sig(closure_def_id, tcx);\n-                }\n-                ref t => bug!(\"closure with non-closure type: {:?}\", t),\n-            }\n+        NodeExpr(&hir::Expr { node: hir::ExprClosure(..), .. }) => {\n+            // In order to property accommodate regions during NLL\n+            // inference, `fn_sig` query only works for top-level\n+            // functions. This is because closures often contain erased regions\n+            // in their signatures that are understood by NLL inference but not other\n+            // parts of the system -- these do not appear in the generics and hence\n+            // are not properly substituted away without some care.\n+            //\n+            // To get the signature of a closure, you should use the\n+            // `closure_sig` method on the `ClosureSubsts`:\n+            //\n+            //    closure_substs.closure_sig(def_id, tcx)\n+            //\n+            // or, inside of an inference context, you can use\n+            //\n+            //    infcx.closure_sig(def_id, closure_substs)\n+            bug!(\"to get the signature of a closure, use `closure_sig()` not `fn_sig()`\");\n         }\n \n         x => {"}]}