{"sha": "cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112", "node_id": "C_kwDOAAsO6NoAKGNjNmIzNzVjZDNlZGNlZTY1YWRjNmE3YWEzZTQ1YTdhNTBmZTgxMTI", "commit": {"author": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-09-24T02:20:42Z"}, "committer": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-09-24T03:08:12Z"}, "message": "fallout2: rework clippy_dev & _lints fmt inlining\n\n* Inline format args where possible\n* simplify a few complex macros into format str\n* use formatdoc!() instead format!(indoc!(...))", "tree": {"sha": "55273409bda3af5fc178ef4371cab53c0426a74b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55273409bda3af5fc178ef4371cab53c0426a74b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112", "html_url": "https://github.com/rust-lang/rust/commit/cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112/comments", "author": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2d426650b6eef2b22a36776ecf7096f9d950b7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d426650b6eef2b22a36776ecf7096f9d950b7c", "html_url": "https://github.com/rust-lang/rust/commit/c2d426650b6eef2b22a36776ecf7096f9d950b7c"}], "stats": {"total": 447, "additions": 181, "deletions": 266}, "files": [{"sha": "2562314418172b67b8d8aaf1cc5ba68d281d1f4d", "filename": "clippy_dev/src/fmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112/clippy_dev%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112/clippy_dev%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Ffmt.rs?ref=cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112", "patch": "@@ -82,16 +82,16 @@ pub fn run(check: bool, verbose: bool) {\n     fn output_err(err: CliError) {\n         match err {\n             CliError::CommandFailed(command, stderr) => {\n-                eprintln!(\"error: A command failed! `{}`\\nstderr: {}\", command, stderr);\n+                eprintln!(\"error: A command failed! `{command}`\\nstderr: {stderr}\");\n             },\n             CliError::IoError(err) => {\n-                eprintln!(\"error: {}\", err);\n+                eprintln!(\"error: {err}\");\n             },\n             CliError::RustfmtNotInstalled => {\n                 eprintln!(\"error: rustfmt nightly is not installed.\");\n             },\n             CliError::WalkDirError(err) => {\n-                eprintln!(\"error: {}\", err);\n+                eprintln!(\"error: {err}\");\n             },\n             CliError::IntellijSetupActive => {\n                 eprintln!("}, {"sha": "cbb2ec7c836cc393390900b8c9c5119d589e1a91", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 74, "deletions": 93, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112", "patch": "@@ -1,5 +1,5 @@\n use crate::clippy_project_root;\n-use indoc::{indoc, writedoc};\n+use indoc::{formatdoc, writedoc};\n use std::fmt::Write as _;\n use std::fs::{self, OpenOptions};\n use std::io::prelude::*;\n@@ -23,7 +23,7 @@ impl<T> Context for io::Result<T> {\n         match self {\n             Ok(t) => Ok(t),\n             Err(e) => {\n-                let message = format!(\"{}: {}\", text.as_ref(), e);\n+                let message = format!(\"{}: {e}\", text.as_ref());\n                 Err(io::Error::new(ErrorKind::Other, message))\n             },\n         }\n@@ -72,7 +72,7 @@ fn create_lint(lint: &LintData<'_>, enable_msrv: bool) -> io::Result<()> {\n         let lint_contents = get_lint_file_contents(lint, enable_msrv);\n         let lint_path = format!(\"clippy_lints/src/{}.rs\", lint.name);\n         write_file(lint.project_root.join(&lint_path), lint_contents.as_bytes())?;\n-        println!(\"Generated lint file: `{}`\", lint_path);\n+        println!(\"Generated lint file: `{lint_path}`\");\n \n         Ok(())\n     }\n@@ -86,7 +86,7 @@ fn create_test(lint: &LintData<'_>) -> io::Result<()> {\n \n         path.push(\"src\");\n         fs::create_dir(&path)?;\n-        let header = format!(\"// compile-flags: --crate-name={}\", lint_name);\n+        let header = format!(\"// compile-flags: --crate-name={lint_name}\");\n         write_file(path.join(\"main.rs\"), get_test_file_contents(lint_name, Some(&header)))?;\n \n         Ok(())\n@@ -106,7 +106,7 @@ fn create_test(lint: &LintData<'_>) -> io::Result<()> {\n         let test_contents = get_test_file_contents(lint.name, None);\n         write_file(lint.project_root.join(&test_path), test_contents)?;\n \n-        println!(\"Generated test file: `{}`\", test_path);\n+        println!(\"Generated test file: `{test_path}`\");\n     }\n \n     Ok(())\n@@ -184,38 +184,36 @@ pub(crate) fn get_stabilization_version() -> String {\n }\n \n fn get_test_file_contents(lint_name: &str, header_commands: Option<&str>) -> String {\n-    let mut contents = format!(\n-        indoc! {\"\n-            #![allow(unused)]\n-            #![warn(clippy::{})]\n-\n-            fn main() {{\n-                // test code goes here\n-            }}\n-        \"},\n-        lint_name\n+    let mut contents = formatdoc!(\n+        r#\"\n+        #![allow(unused)]\n+        #![warn(clippy::{lint_name})]\n+\n+        fn main() {{\n+            // test code goes here\n+        }}\n+    \"#\n     );\n \n     if let Some(header) = header_commands {\n-        contents = format!(\"{}\\n{}\", header, contents);\n+        contents = format!(\"{header}\\n{contents}\");\n     }\n \n     contents\n }\n \n fn get_manifest_contents(lint_name: &str, hint: &str) -> String {\n-    format!(\n-        indoc! {r#\"\n-            # {}\n-\n-            [package]\n-            name = \"{}\"\n-            version = \"0.1.0\"\n-            publish = false\n-\n-            [workspace]\n-        \"#},\n-        hint, lint_name\n+    formatdoc!(\n+        r#\"\n+        # {hint}\n+\n+        [package]\n+        name = \"{lint_name}\"\n+        version = \"0.1.0\"\n+        publish = false\n+\n+        [workspace]\n+    \"#\n     )\n }\n \n@@ -236,85 +234,70 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n     let name_upper = lint_name.to_uppercase();\n \n     result.push_str(&if enable_msrv {\n-        format!(\n-            indoc! {\"\n-                use clippy_utils::msrvs;\n-                {pass_import}\n-                use rustc_lint::{{{context_import}, {pass_type}, LintContext}};\n-                use rustc_semver::RustcVersion;\n-                use rustc_session::{{declare_tool_lint, impl_lint_pass}};\n+        formatdoc!(\n+            r#\"\n+            use clippy_utils::msrvs;\n+            {pass_import}\n+            use rustc_lint::{{{context_import}, {pass_type}, LintContext}};\n+            use rustc_semver::RustcVersion;\n+            use rustc_session::{{declare_tool_lint, impl_lint_pass}};\n \n-            \"},\n-            pass_type = pass_type,\n-            pass_import = pass_import,\n-            context_import = context_import,\n+        \"#\n         )\n     } else {\n-        format!(\n-            indoc! {\"\n-                {pass_import}\n-                use rustc_lint::{{{context_import}, {pass_type}}};\n-                use rustc_session::{{declare_lint_pass, declare_tool_lint}};\n-\n-            \"},\n-            pass_import = pass_import,\n-            pass_type = pass_type,\n-            context_import = context_import\n+        formatdoc!(\n+            r#\"\n+            {pass_import}\n+            use rustc_lint::{{{context_import}, {pass_type}}};\n+            use rustc_session::{{declare_lint_pass, declare_tool_lint}};\n+\n+        \"#\n         )\n     });\n \n     let _ = write!(result, \"{}\", get_lint_declaration(&name_upper, category));\n \n     result.push_str(&if enable_msrv {\n-        format!(\n-            indoc! {\"\n-                pub struct {name_camel} {{\n-                    msrv: Option<RustcVersion>,\n-                }}\n+        formatdoc!(\n+            r#\"\n+            pub struct {name_camel} {{\n+                msrv: Option<RustcVersion>,\n+            }}\n \n-                impl {name_camel} {{\n-                    #[must_use]\n-                    pub fn new(msrv: Option<RustcVersion>) -> Self {{\n-                        Self {{ msrv }}\n-                    }}\n+            impl {name_camel} {{\n+                #[must_use]\n+                pub fn new(msrv: Option<RustcVersion>) -> Self {{\n+                    Self {{ msrv }}\n                 }}\n+            }}\n \n-                impl_lint_pass!({name_camel} => [{name_upper}]);\n+            impl_lint_pass!({name_camel} => [{name_upper}]);\n \n-                impl {pass_type}{pass_lifetimes} for {name_camel} {{\n-                    extract_msrv_attr!({context_import});\n-                }}\n+            impl {pass_type}{pass_lifetimes} for {name_camel} {{\n+                extract_msrv_attr!({context_import});\n+            }}\n \n-                // TODO: Add MSRV level to `clippy_utils/src/msrvs.rs` if needed.\n-                // TODO: Add MSRV test to `tests/ui/min_rust_version_attr.rs`.\n-                // TODO: Update msrv config comment in `clippy_lints/src/utils/conf.rs`\n-            \"},\n-            pass_type = pass_type,\n-            pass_lifetimes = pass_lifetimes,\n-            name_upper = name_upper,\n-            name_camel = name_camel,\n-            context_import = context_import,\n+            // TODO: Add MSRV level to `clippy_utils/src/msrvs.rs` if needed.\n+            // TODO: Add MSRV test to `tests/ui/min_rust_version_attr.rs`.\n+            // TODO: Update msrv config comment in `clippy_lints/src/utils/conf.rs`\n+        \"#\n         )\n     } else {\n-        format!(\n-            indoc! {\"\n-                declare_lint_pass!({name_camel} => [{name_upper}]);\n+        formatdoc!(\n+            r#\"\n+            declare_lint_pass!({name_camel} => [{name_upper}]);\n \n-                impl {pass_type}{pass_lifetimes} for {name_camel} {{}}\n-            \"},\n-            pass_type = pass_type,\n-            pass_lifetimes = pass_lifetimes,\n-            name_upper = name_upper,\n-            name_camel = name_camel,\n+            impl {pass_type}{pass_lifetimes} for {name_camel} {{}}\n+        \"#\n         )\n     });\n \n     result\n }\n \n fn get_lint_declaration(name_upper: &str, category: &str) -> String {\n-    format!(\n-        indoc! {r#\"\n+    formatdoc!(\n+        r#\"\n             declare_clippy_lint! {{\n                 /// ### What it does\n                 ///\n@@ -328,15 +311,13 @@ fn get_lint_declaration(name_upper: &str, category: &str) -> String {\n                 /// ```rust\n                 /// // example code which does not raise clippy warning\n                 /// ```\n-                #[clippy::version = \"{version}\"]\n+                #[clippy::version = \"{}\"]\n                 pub {name_upper},\n                 {category},\n                 \"default lint description\"\n             }}\n-        \"#},\n-        version = get_stabilization_version(),\n-        name_upper = name_upper,\n-        category = category,\n+        \"#,\n+        get_stabilization_version(),\n     )\n }\n \n@@ -350,7 +331,7 @@ fn create_lint_for_ty(lint: &LintData<'_>, enable_msrv: bool, ty: &str) -> io::R\n         _ => {},\n     }\n \n-    let ty_dir = lint.project_root.join(format!(\"clippy_lints/src/{}\", ty));\n+    let ty_dir = lint.project_root.join(format!(\"clippy_lints/src/{ty}\"));\n     assert!(\n         ty_dir.exists() && ty_dir.is_dir(),\n         \"Directory `{}` does not exist!\",\n@@ -410,10 +391,10 @@ fn create_lint_for_ty(lint: &LintData<'_>, enable_msrv: bool, ty: &str) -> io::R\n     }\n \n     write_file(lint_file_path.as_path(), lint_file_contents)?;\n-    println!(\"Generated lint file: `clippy_lints/src/{}/{}.rs`\", ty, lint.name);\n+    println!(\"Generated lint file: `clippy_lints/src/{ty}/{}.rs`\", lint.name);\n     println!(\n-        \"Be sure to add a call to `{}::check` in `clippy_lints/src/{}/mod.rs`!\",\n-        lint.name, ty\n+        \"Be sure to add a call to `{}::check` in `clippy_lints/src/{ty}/mod.rs`!\",\n+        lint.name\n     );\n \n     Ok(())\n@@ -540,7 +521,7 @@ fn setup_mod_file(path: &Path, lint: &LintData<'_>) -> io::Result<&'static str>\n         .chain(std::iter::once(&*lint_name_upper))\n         .filter(|s| !s.is_empty())\n     {\n-        let _ = write!(new_arr_content, \"\\n    {},\", ident);\n+        let _ = write!(new_arr_content, \"\\n    {ident},\");\n     }\n     new_arr_content.push('\\n');\n "}, {"sha": "2e0794f12fa19c2eab6c7f1463ed8e0c9530637c", "filename": "clippy_dev/src/serve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112/clippy_dev%2Fsrc%2Fserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112/clippy_dev%2Fsrc%2Fserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fserve.rs?ref=cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112", "patch": "@@ -10,8 +10,8 @@ use std::time::{Duration, SystemTime};\n /// Panics if the python commands could not be spawned\n pub fn run(port: u16, lint: Option<&String>) -> ! {\n     let mut url = Some(match lint {\n-        None => format!(\"http://localhost:{}\", port),\n-        Some(lint) => format!(\"http://localhost:{}/#{}\", port, lint),\n+        None => format!(\"http://localhost:{port}\"),\n+        Some(lint) => format!(\"http://localhost:{port}/#{lint}\"),\n     });\n \n     loop {"}, {"sha": "1de5b1940bae1a7e1595490f4411afb3347a45b7", "filename": "clippy_dev/src/setup/git_hook.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs?ref=cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112", "patch": "@@ -30,10 +30,7 @@ pub fn install_hook(force_override: bool) {\n             println!(\"info: the hook can be removed with `cargo dev remove git-hook`\");\n             println!(\"git hook successfully installed\");\n         },\n-        Err(err) => eprintln!(\n-            \"error: unable to copy `{}` to `{}` ({})\",\n-            HOOK_SOURCE_FILE, HOOK_TARGET_FILE, err\n-        ),\n+        Err(err) => eprintln!(\"error: unable to copy `{HOOK_SOURCE_FILE}` to `{HOOK_TARGET_FILE}` ({err})\"),\n     }\n }\n \n@@ -77,7 +74,7 @@ pub fn remove_hook() {\n \n fn delete_git_hook_file(path: &Path) -> bool {\n     if let Err(err) = fs::remove_file(path) {\n-        eprintln!(\"error: unable to delete existing pre-commit git hook ({})\", err);\n+        eprintln!(\"error: unable to delete existing pre-commit git hook ({err})\");\n         false\n     } else {\n         true"}, {"sha": "b64e79733eb2453ecc1c1741b71eb6d12a7e858a", "filename": "clippy_dev/src/setup/intellij.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112/clippy_dev%2Fsrc%2Fsetup%2Fintellij.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112/clippy_dev%2Fsrc%2Fsetup%2Fintellij.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fsetup%2Fintellij.rs?ref=cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112", "patch": "@@ -60,7 +60,7 @@ fn check_and_get_rustc_dir(rustc_path: &str) -> Result<PathBuf, ()> {\n                 path = absolute_path;\n             },\n             Err(err) => {\n-                eprintln!(\"error: unable to get the absolute path of rustc ({})\", err);\n+                eprintln!(\"error: unable to get the absolute path of rustc ({err})\");\n                 return Err(());\n             },\n         };\n@@ -103,14 +103,14 @@ fn inject_deps_into_project(rustc_source_dir: &Path, project: &ClippyProjectInfo\n fn read_project_file(file_path: &str) -> Result<String, ()> {\n     let path = Path::new(file_path);\n     if !path.exists() {\n-        eprintln!(\"error: unable to find the file `{}`\", file_path);\n+        eprintln!(\"error: unable to find the file `{file_path}`\");\n         return Err(());\n     }\n \n     match fs::read_to_string(path) {\n         Ok(content) => Ok(content),\n         Err(err) => {\n-            eprintln!(\"error: the file `{}` could not be read ({})\", file_path, err);\n+            eprintln!(\"error: the file `{file_path}` could not be read ({err})\");\n             Err(())\n         },\n     }\n@@ -124,10 +124,7 @@ fn inject_deps_into_manifest(\n ) -> std::io::Result<()> {\n     // do not inject deps if we have already done so\n     if cargo_toml.contains(RUSTC_PATH_SECTION) {\n-        eprintln!(\n-            \"warn: dependencies are already setup inside {}, skipping file\",\n-            manifest_path\n-        );\n+        eprintln!(\"warn: dependencies are already setup inside {manifest_path}, skipping file\");\n         return Ok(());\n     }\n \n@@ -142,11 +139,7 @@ fn inject_deps_into_manifest(\n \n     let new_deps = extern_crates.map(|dep| {\n         // format the dependencies that are going to be put inside the Cargo.toml\n-        format!(\n-            \"{dep} = {{ path = \\\"{source_path}/{dep}\\\" }}\\n\",\n-            dep = dep,\n-            source_path = rustc_source_dir.display()\n-        )\n+        format!(\"{dep} = {{ path = \\\"{}/{dep}\\\" }}\\n\", rustc_source_dir.display())\n     });\n \n     // format a new [dependencies]-block with the new deps we need to inject\n@@ -163,11 +156,11 @@ fn inject_deps_into_manifest(\n     // etc\n     let new_manifest = cargo_toml.replacen(\"[dependencies]\\n\", &all_deps, 1);\n \n-    // println!(\"{}\", new_manifest);\n+    // println!(\"{new_manifest}\");\n     let mut file = File::create(manifest_path)?;\n     file.write_all(new_manifest.as_bytes())?;\n \n-    println!(\"info: successfully setup dependencies inside {}\", manifest_path);\n+    println!(\"info: successfully setup dependencies inside {manifest_path}\");\n \n     Ok(())\n }\n@@ -214,8 +207,8 @@ fn remove_rustc_src_from_project(project: &ClippyProjectInfo) -> bool {\n         },\n         Err(err) => {\n             eprintln!(\n-                \"error: unable to open file `{}` to remove rustc dependencies for {} ({})\",\n-                project.cargo_file, project.name, err\n+                \"error: unable to open file `{}` to remove rustc dependencies for {} ({err})\",\n+                project.cargo_file, project.name\n             );\n             false\n         },"}, {"sha": "dbcdc9b59e529cedc693e813bb40adeea591b549", "filename": "clippy_dev/src/setup/vscode.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112/clippy_dev%2Fsrc%2Fsetup%2Fvscode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112/clippy_dev%2Fsrc%2Fsetup%2Fvscode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fsetup%2Fvscode.rs?ref=cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112", "patch": "@@ -17,10 +17,7 @@ pub fn install_tasks(force_override: bool) {\n             println!(\"info: the task file can be removed with `cargo dev remove vscode-tasks`\");\n             println!(\"vscode tasks successfully installed\");\n         },\n-        Err(err) => eprintln!(\n-            \"error: unable to copy `{}` to `{}` ({})\",\n-            TASK_SOURCE_FILE, TASK_TARGET_FILE, err\n-        ),\n+        Err(err) => eprintln!(\"error: unable to copy `{TASK_SOURCE_FILE}` to `{TASK_TARGET_FILE}` ({err})\"),\n     }\n }\n \n@@ -44,23 +41,17 @@ fn check_install_precondition(force_override: bool) -> bool {\n                 return delete_vs_task_file(path);\n             }\n \n-            eprintln!(\n-                \"error: there is already a `task.json` file inside the `{}` directory\",\n-                VSCODE_DIR\n-            );\n+            eprintln!(\"error: there is already a `task.json` file inside the `{VSCODE_DIR}` directory\");\n             println!(\"info: use the `--force-override` flag to override the existing `task.json` file\");\n             return false;\n         }\n     } else {\n         match fs::create_dir(vs_dir_path) {\n             Ok(_) => {\n-                println!(\"info: created `{}` directory for clippy\", VSCODE_DIR);\n+                println!(\"info: created `{VSCODE_DIR}` directory for clippy\");\n             },\n             Err(err) => {\n-                eprintln!(\n-                    \"error: the task target directory `{}` could not be created ({})\",\n-                    VSCODE_DIR, err\n-                );\n+                eprintln!(\"error: the task target directory `{VSCODE_DIR}` could not be created ({err})\");\n             },\n         }\n     }\n@@ -82,7 +73,7 @@ pub fn remove_tasks() {\n \n fn delete_vs_task_file(path: &Path) -> bool {\n     if let Err(err) = fs::remove_file(path) {\n-        eprintln!(\"error: unable to delete the existing `tasks.json` file ({})\", err);\n+        eprintln!(\"error: unable to delete the existing `tasks.json` file ({err})\");\n         return false;\n     }\n "}, {"sha": "93955bee3f4dd92c414258c555c57bb3a8304a9b", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 46, "deletions": 52, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112", "patch": "@@ -86,7 +86,7 @@ fn generate_lint_files(\n                 )\n                 .sorted()\n             {\n-                writeln!(res, \"[`{}`]: {}#{}\", lint, DOCS_LINK, lint).unwrap();\n+                writeln!(res, \"[`{lint}`]: {DOCS_LINK}#{lint}\").unwrap();\n             }\n         },\n     );\n@@ -99,7 +99,7 @@ fn generate_lint_files(\n         \"// end lints modules, do not remove this comment, it\u2019s used in `update_lints`\",\n         |res| {\n             for lint_mod in usable_lints.iter().map(|l| &l.module).unique().sorted() {\n-                writeln!(res, \"mod {};\", lint_mod).unwrap();\n+                writeln!(res, \"mod {lint_mod};\").unwrap();\n             }\n         },\n     );\n@@ -129,7 +129,7 @@ fn generate_lint_files(\n     for (lint_group, lints) in Lint::by_lint_group(usable_lints.into_iter().chain(internal_lints)) {\n         let content = gen_lint_group_list(&lint_group, lints.iter());\n         process_file(\n-            &format!(\"clippy_lints/src/lib.register_{}.rs\", lint_group),\n+            &format!(\"clippy_lints/src/lib.register_{lint_group}.rs\"),\n             update_mode,\n             &content,\n         );\n@@ -190,9 +190,9 @@ fn print_lint_names(header: &str, lints: &BTreeSet<String>) -> bool {\n     if lints.is_empty() {\n         return false;\n     }\n-    println!(\"{}\", header);\n+    println!(\"{header}\");\n     for lint in lints.iter().sorted() {\n-        println!(\"    {}\", lint);\n+        println!(\"    {lint}\");\n     }\n     println!();\n     true\n@@ -205,16 +205,16 @@ pub fn print_lints() {\n     let grouped_by_lint_group = Lint::by_lint_group(usable_lints.into_iter());\n \n     for (lint_group, mut lints) in grouped_by_lint_group {\n-        println!(\"\\n## {}\", lint_group);\n+        println!(\"\\n## {lint_group}\");\n \n         lints.sort_by_key(|l| l.name.clone());\n \n         for lint in lints {\n-            println!(\"* [{}]({}#{}) ({})\", lint.name, DOCS_LINK, lint.name, lint.desc);\n+            println!(\"* [{}]({DOCS_LINK}#{}) ({})\", lint.name, lint.name, lint.desc);\n         }\n     }\n \n-    println!(\"there are {} lints\", usable_lint_count);\n+    println!(\"there are {usable_lint_count} lints\");\n }\n \n /// Runs the `rename_lint` command.\n@@ -235,10 +235,10 @@ pub fn print_lints() {\n #[allow(clippy::too_many_lines)]\n pub fn rename(old_name: &str, new_name: &str, uplift: bool) {\n     if let Some((prefix, _)) = old_name.split_once(\"::\") {\n-        panic!(\"`{}` should not contain the `{}` prefix\", old_name, prefix);\n+        panic!(\"`{old_name}` should not contain the `{prefix}` prefix\");\n     }\n     if let Some((prefix, _)) = new_name.split_once(\"::\") {\n-        panic!(\"`{}` should not contain the `{}` prefix\", new_name, prefix);\n+        panic!(\"`{new_name}` should not contain the `{prefix}` prefix\");\n     }\n \n     let (mut lints, deprecated_lints, mut renamed_lints) = gather_all();\n@@ -251,28 +251,26 @@ pub fn rename(old_name: &str, new_name: &str, uplift: bool) {\n             found_new_name = true;\n         }\n     }\n-    let old_lint_index = old_lint_index.unwrap_or_else(|| panic!(\"could not find lint `{}`\", old_name));\n+    let old_lint_index = old_lint_index.unwrap_or_else(|| panic!(\"could not find lint `{old_name}`\"));\n \n     let lint = RenamedLint {\n-        old_name: format!(\"clippy::{}\", old_name),\n+        old_name: format!(\"clippy::{old_name}\"),\n         new_name: if uplift {\n             new_name.into()\n         } else {\n-            format!(\"clippy::{}\", new_name)\n+            format!(\"clippy::{new_name}\")\n         },\n     };\n \n     // Renamed lints and deprecated lints shouldn't have been found in the lint list, but check just in\n     // case.\n     assert!(\n         !renamed_lints.iter().any(|l| lint.old_name == l.old_name),\n-        \"`{}` has already been renamed\",\n-        old_name\n+        \"`{old_name}` has already been renamed\"\n     );\n     assert!(\n         !deprecated_lints.iter().any(|l| lint.old_name == l.name),\n-        \"`{}` has already been deprecated\",\n-        old_name\n+        \"`{old_name}` has already been deprecated\"\n     );\n \n     // Update all lint level attributes. (`clippy::lint_name`)\n@@ -309,14 +307,12 @@ pub fn rename(old_name: &str, new_name: &str, uplift: bool) {\n     if uplift {\n         write_file(Path::new(\"tests/ui/rename.rs\"), &gen_renamed_lints_test(&renamed_lints));\n         println!(\n-            \"`{}` has be uplifted. All the code inside `clippy_lints` related to it needs to be removed manually.\",\n-            old_name\n+            \"`{old_name}` has be uplifted. All the code inside `clippy_lints` related to it needs to be removed manually.\"\n         );\n     } else if found_new_name {\n         write_file(Path::new(\"tests/ui/rename.rs\"), &gen_renamed_lints_test(&renamed_lints));\n         println!(\n-            \"`{}` is already defined. The old linting code inside `clippy_lints` needs to be updated/removed manually.\",\n-            new_name\n+            \"`{new_name}` is already defined. The old linting code inside `clippy_lints` needs to be updated/removed manually.\"\n         );\n     } else {\n         // Rename the lint struct and source files sharing a name with the lint.\n@@ -327,25 +323,25 @@ pub fn rename(old_name: &str, new_name: &str, uplift: bool) {\n \n         // Rename test files. only rename `.stderr` and `.fixed` files if the new test name doesn't exist.\n         if try_rename_file(\n-            Path::new(&format!(\"tests/ui/{}.rs\", old_name)),\n-            Path::new(&format!(\"tests/ui/{}.rs\", new_name)),\n+            Path::new(&format!(\"tests/ui/{old_name}.rs\")),\n+            Path::new(&format!(\"tests/ui/{new_name}.rs\")),\n         ) {\n             try_rename_file(\n-                Path::new(&format!(\"tests/ui/{}.stderr\", old_name)),\n-                Path::new(&format!(\"tests/ui/{}.stderr\", new_name)),\n+                Path::new(&format!(\"tests/ui/{old_name}.stderr\")),\n+                Path::new(&format!(\"tests/ui/{new_name}.stderr\")),\n             );\n             try_rename_file(\n-                Path::new(&format!(\"tests/ui/{}.fixed\", old_name)),\n-                Path::new(&format!(\"tests/ui/{}.fixed\", new_name)),\n+                Path::new(&format!(\"tests/ui/{old_name}.fixed\")),\n+                Path::new(&format!(\"tests/ui/{new_name}.fixed\")),\n             );\n         }\n \n         // Try to rename the file containing the lint if the file name matches the lint's name.\n         let replacements;\n         let replacements = if lint.module == old_name\n             && try_rename_file(\n-                Path::new(&format!(\"clippy_lints/src/{}.rs\", old_name)),\n-                Path::new(&format!(\"clippy_lints/src/{}.rs\", new_name)),\n+                Path::new(&format!(\"clippy_lints/src/{old_name}.rs\")),\n+                Path::new(&format!(\"clippy_lints/src/{new_name}.rs\")),\n             ) {\n             // Edit the module name in the lint list. Note there could be multiple lints.\n             for lint in lints.iter_mut().filter(|l| l.module == old_name) {\n@@ -356,14 +352,14 @@ pub fn rename(old_name: &str, new_name: &str, uplift: bool) {\n         } else if !lint.module.contains(\"::\")\n             // Catch cases like `methods/lint_name.rs` where the lint is stored in `methods/mod.rs`\n             && try_rename_file(\n-                Path::new(&format!(\"clippy_lints/src/{}/{}.rs\", lint.module, old_name)),\n-                Path::new(&format!(\"clippy_lints/src/{}/{}.rs\", lint.module, new_name)),\n+                Path::new(&format!(\"clippy_lints/src/{}/{old_name}.rs\", lint.module)),\n+                Path::new(&format!(\"clippy_lints/src/{}/{new_name}.rs\", lint.module)),\n             )\n         {\n             // Edit the module name in the lint list. Note there could be multiple lints, or none.\n-            let renamed_mod = format!(\"{}::{}\", lint.module, old_name);\n+            let renamed_mod = format!(\"{}::{old_name}\", lint.module);\n             for lint in lints.iter_mut().filter(|l| l.module == renamed_mod) {\n-                lint.module = format!(\"{}::{}\", lint.module, new_name);\n+                lint.module = format!(\"{}::{new_name}\", lint.module);\n             }\n             replacements = [(&*old_name_upper, &*new_name_upper), (old_name, new_name)];\n             replacements.as_slice()\n@@ -379,7 +375,7 @@ pub fn rename(old_name: &str, new_name: &str, uplift: bool) {\n         }\n \n         generate_lint_files(UpdateMode::Change, &lints, &deprecated_lints, &renamed_lints);\n-        println!(\"{} has been successfully renamed\", old_name);\n+        println!(\"{old_name} has been successfully renamed\");\n     }\n \n     println!(\"note: `cargo uitest` still needs to be run to update the test results\");\n@@ -408,7 +404,7 @@ pub fn deprecate(name: &str, reason: Option<&String>) {\n         });\n \n         generate_lint_files(UpdateMode::Change, &lints, &deprecated_lints, &renamed_lints);\n-        println!(\"info: `{}` has successfully been deprecated\", name);\n+        println!(\"info: `{name}` has successfully been deprecated\");\n \n         if reason == DEFAULT_DEPRECATION_REASON {\n             println!(\"note: the deprecation reason must be updated in `clippy_lints/src/deprecated_lints.rs`\");\n@@ -421,7 +417,7 @@ pub fn deprecate(name: &str, reason: Option<&String>) {\n     let name_upper = name.to_uppercase();\n \n     let (mut lints, deprecated_lints, renamed_lints) = gather_all();\n-    let Some(lint) = lints.iter().find(|l| l.name == name_lower) else { eprintln!(\"error: failed to find lint `{}`\", name); return; };\n+    let Some(lint) = lints.iter().find(|l| l.name == name_lower) else { eprintln!(\"error: failed to find lint `{name}`\"); return; };\n \n     let mod_path = {\n         let mut mod_path = PathBuf::from(format!(\"clippy_lints/src/{}\", lint.module));\n@@ -450,7 +446,7 @@ fn remove_lint_declaration(name: &str, path: &Path, lints: &mut Vec<Lint>) -> io\n     }\n \n     fn remove_test_assets(name: &str) {\n-        let test_file_stem = format!(\"tests/ui/{}\", name);\n+        let test_file_stem = format!(\"tests/ui/{name}\");\n         let path = Path::new(&test_file_stem);\n \n         // Some lints have their own directories, delete them\n@@ -512,8 +508,7 @@ fn remove_lint_declaration(name: &str, path: &Path, lints: &mut Vec<Lint>) -> io\n                     fs::read_to_string(path).unwrap_or_else(|_| panic!(\"failed to read `{}`\", path.to_string_lossy()));\n \n                 eprintln!(\n-                    \"warn: you will have to manually remove any code related to `{}` from `{}`\",\n-                    name,\n+                    \"warn: you will have to manually remove any code related to `{name}` from `{}`\",\n                     path.display()\n                 );\n \n@@ -528,7 +523,7 @@ fn remove_lint_declaration(name: &str, path: &Path, lints: &mut Vec<Lint>) -> io\n                 content.replace_range(lint.declaration_range.clone(), \"\");\n \n                 // Remove the module declaration (mod xyz;)\n-                let mod_decl = format!(\"\\nmod {};\", name);\n+                let mod_decl = format!(\"\\nmod {name};\");\n                 content = content.replacen(&mod_decl, \"\", 1);\n \n                 remove_impl_lint_pass(&lint.name.to_uppercase(), &mut content);\n@@ -621,13 +616,13 @@ fn round_to_fifty(count: usize) -> usize {\n fn process_file(path: impl AsRef<Path>, update_mode: UpdateMode, content: &str) {\n     if update_mode == UpdateMode::Check {\n         let old_content =\n-            fs::read_to_string(&path).unwrap_or_else(|e| panic!(\"Cannot read from {}: {}\", path.as_ref().display(), e));\n+            fs::read_to_string(&path).unwrap_or_else(|e| panic!(\"Cannot read from {}: {e}\", path.as_ref().display()));\n         if content != old_content {\n             exit_with_failure();\n         }\n     } else {\n         fs::write(&path, content.as_bytes())\n-            .unwrap_or_else(|e| panic!(\"Cannot write to {}: {}\", path.as_ref().display(), e));\n+            .unwrap_or_else(|e| panic!(\"Cannot write to {}: {e}\", path.as_ref().display()));\n     }\n }\n \n@@ -731,11 +726,10 @@ fn gen_lint_group_list<'a>(group_name: &str, lints: impl Iterator<Item = &'a Lin\n \n     let _ = writeln!(\n         output,\n-        \"store.register_group(true, \\\"clippy::{0}\\\", Some(\\\"clippy_{0}\\\"), vec![\",\n-        group_name\n+        \"store.register_group(true, \\\"clippy::{group_name}\\\", Some(\\\"clippy_{group_name}\\\"), vec![\",\n     );\n     for (module, name) in details {\n-        let _ = writeln!(output, \"    LintId::of({}::{}),\", module, name);\n+        let _ = writeln!(output, \"    LintId::of({module}::{name}),\");\n     }\n     output.push_str(\"])\\n\");\n \n@@ -783,7 +777,7 @@ fn gen_register_lint_list<'a>(\n         if !is_public {\n             output.push_str(\"    #[cfg(feature = \\\"internal\\\")]\\n\");\n         }\n-        let _ = writeln!(output, \"    {}::{},\", module_name, lint_name);\n+        let _ = writeln!(output, \"    {module_name}::{lint_name},\");\n     }\n     output.push_str(\"])\\n\");\n \n@@ -841,7 +835,7 @@ fn gather_all() -> (Vec<Lint>, Vec<DeprecatedLint>, Vec<RenamedLint>) {\n     for (rel_path, file) in clippy_lints_src_files() {\n         let path = file.path();\n         let contents =\n-            fs::read_to_string(path).unwrap_or_else(|e| panic!(\"Cannot read from `{}`: {}\", path.display(), e));\n+            fs::read_to_string(path).unwrap_or_else(|e| panic!(\"Cannot read from `{}`: {e}\", path.display()));\n         let module = rel_path\n             .components()\n             .map(|c| c.as_os_str().to_str().unwrap())\n@@ -1050,7 +1044,7 @@ fn remove_line_splices(s: &str) -> String {\n         .trim_matches('#')\n         .strip_prefix('\"')\n         .and_then(|s| s.strip_suffix('\"'))\n-        .unwrap_or_else(|| panic!(\"expected quoted string, found `{}`\", s));\n+        .unwrap_or_else(|| panic!(\"expected quoted string, found `{s}`\"));\n     let mut res = String::with_capacity(s.len());\n     unescape::unescape_literal(s, unescape::Mode::Str, &mut |range, ch| {\n         if ch.is_ok() {\n@@ -1076,18 +1070,18 @@ fn replace_region_in_file(\n     end: &str,\n     write_replacement: impl FnMut(&mut String),\n ) {\n-    let contents = fs::read_to_string(path).unwrap_or_else(|e| panic!(\"Cannot read from `{}`: {}\", path.display(), e));\n+    let contents = fs::read_to_string(path).unwrap_or_else(|e| panic!(\"Cannot read from `{}`: {e}\", path.display()));\n     let new_contents = match replace_region_in_text(&contents, start, end, write_replacement) {\n         Ok(x) => x,\n-        Err(delim) => panic!(\"Couldn't find `{}` in file `{}`\", delim, path.display()),\n+        Err(delim) => panic!(\"Couldn't find `{delim}` in file `{}`\", path.display()),\n     };\n \n     match update_mode {\n         UpdateMode::Check if contents != new_contents => exit_with_failure(),\n         UpdateMode::Check => (),\n         UpdateMode::Change => {\n             if let Err(e) = fs::write(path, new_contents.as_bytes()) {\n-                panic!(\"Cannot write to `{}`: {}\", path.display(), e);\n+                panic!(\"Cannot write to `{}`: {e}\", path.display());\n             }\n         },\n     }\n@@ -1135,7 +1129,7 @@ fn try_rename_file(old_name: &Path, new_name: &Path) -> bool {\n \n #[allow(clippy::needless_pass_by_value)]\n fn panic_file(error: io::Error, name: &Path, action: &str) -> ! {\n-    panic!(\"failed to {} file `{}`: {}\", action, name.display(), error)\n+    panic!(\"failed to {action} file `{}`: {error}\", name.display())\n }\n \n fn rewrite_file(path: &Path, f: impl FnOnce(&str) -> Option<String>) {"}, {"sha": "5332779c1c051984319292324981d99eb555fc11", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112", "patch": "@@ -530,7 +530,7 @@ impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n                     cx,\n                     LINT_WITHOUT_LINT_PASS,\n                     lint_span,\n-                    &format!(\"the lint `{}` is not added to any `LintPass`\", lint_name),\n+                    &format!(\"the lint `{lint_name}` is not added to any `LintPass`\"),\n                 );\n             }\n         }\n@@ -666,7 +666,7 @@ impl<'tcx> LateLintPass<'tcx> for CompilerLintFunctions {\n                     path.ident.span,\n                     \"usage of a compiler lint function\",\n                     None,\n-                    &format!(\"please use the Clippy variant of this function: `{}`\", sugg),\n+                    &format!(\"please use the Clippy variant of this function: `{sugg}`\"),\n                 );\n             }\n         }\n@@ -854,13 +854,8 @@ fn suggest_help(\n         \"this call is collapsible\",\n         \"collapse into\",\n         format!(\n-            \"span_lint_and_help({}, {}, {}, {}, {}, {})\",\n-            and_then_snippets.cx,\n-            and_then_snippets.lint,\n-            and_then_snippets.span,\n-            and_then_snippets.msg,\n-            &option_span,\n-            help\n+            \"span_lint_and_help({}, {}, {}, {}, {}, {help})\",\n+            and_then_snippets.cx, and_then_snippets.lint, and_then_snippets.span, and_then_snippets.msg, &option_span,\n         ),\n         Applicability::MachineApplicable,\n     );\n@@ -886,13 +881,8 @@ fn suggest_note(\n         \"this call is collapsible\",\n         \"collapse into\",\n         format!(\n-            \"span_lint_and_note({}, {}, {}, {}, {}, {})\",\n-            and_then_snippets.cx,\n-            and_then_snippets.lint,\n-            and_then_snippets.span,\n-            and_then_snippets.msg,\n-            note_span,\n-            note\n+            \"span_lint_and_note({}, {}, {}, {}, {note_span}, {note})\",\n+            and_then_snippets.cx, and_then_snippets.lint, and_then_snippets.span, and_then_snippets.msg,\n         ),\n         Applicability::MachineApplicable,\n     );\n@@ -927,7 +917,7 @@ impl<'tcx> LateLintPass<'tcx> for MatchTypeOnDiagItem {\n                     expr.span,\n                     \"usage of `clippy_utils::ty::match_type()` on a type diagnostic item\",\n                     \"try\",\n-                    format!(\"clippy_utils::ty::is_type_diagnostic_item({}, {}, sym::{})\", cx_snippet, ty_snippet, item_name),\n+                    format!(\"clippy_utils::ty::is_type_diagnostic_item({cx_snippet}, {ty_snippet}, sym::{item_name})\"),\n                     Applicability::MaybeIncorrect,\n                 );\n             }"}, {"sha": "c84191bb01034bf0c18b426af5e35805e2d9b2c4", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 33, "deletions": 64, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=cc6b375cd3edcee65adc6a7aa3e45a7a50fe8112", "patch": "@@ -64,46 +64,6 @@ const DEFAULT_LINT_LEVELS: &[(&str, &str)] = &[\n /// This prefix is in front of the lint groups in the lint store. The prefix will be trimmed\n /// to only keep the actual lint group in the output.\n const CLIPPY_LINT_GROUP_PREFIX: &str = \"clippy::\";\n-\n-/// This template will be used to format the configuration section in the lint documentation.\n-/// The `configurations` parameter will be replaced with one or multiple formatted\n-/// `ClippyConfiguration` instances. See `CONFIGURATION_VALUE_TEMPLATE` for further customizations\n-macro_rules! CONFIGURATION_SECTION_TEMPLATE {\n-    () => {\n-        r#\"\n-### Configuration\n-This lint has the following configuration variables:\n-\n-{configurations}\n-\"#\n-    };\n-}\n-/// This template will be used to format an individual `ClippyConfiguration` instance in the\n-/// lint documentation.\n-///\n-/// The format function will provide strings for the following parameters: `name`, `ty`, `doc` and\n-/// `default`\n-macro_rules! CONFIGURATION_VALUE_TEMPLATE {\n-    () => {\n-        \"* `{name}`: `{ty}`: {doc} (defaults to `{default}`)\\n\"\n-    };\n-}\n-\n-macro_rules! RENAMES_SECTION_TEMPLATE {\n-    () => {\n-        r#\"\n-### Past names\n-\n-{names}\n-\"#\n-    };\n-}\n-macro_rules! RENAME_VALUE_TEMPLATE {\n-    () => {\n-        \"* `{name}`\\n\"\n-    };\n-}\n-\n const LINT_EMISSION_FUNCTIONS: [&[&str]; 7] = [\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint\"],\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint_and_help\"],\n@@ -205,7 +165,16 @@ impl MetadataCollector {\n             .filter(|config| config.lints.iter().any(|lint| lint == lint_name))\n             .map(ToString::to_string)\n             .reduce(|acc, x| acc + &x)\n-            .map(|configurations| format!(CONFIGURATION_SECTION_TEMPLATE!(), configurations = configurations))\n+            .map(|configurations| {\n+                format!(\n+                    r#\"\n+### Configuration\n+This lint has the following configuration variables:\n+\n+{configurations}\n+\"#\n+                )\n+            })\n     }\n }\n \n@@ -291,16 +260,13 @@ fn replace_produces(lint_name: &str, docs: &mut String, clippy_project_root: &Pa\n                             continue;\n                         }\n \n-                        panic!(\"lint `{}` has an unterminated code block\", lint_name)\n+                        panic!(\"lint `{lint_name}` has an unterminated code block\")\n                     }\n \n                     break;\n                 },\n                 Some(line) if line.trim_start() == \"{{produces}}\" => {\n-                    panic!(\n-                        \"lint `{}` has marker {{{{produces}}}} with an ignored or missing code block\",\n-                        lint_name\n-                    )\n+                    panic!(\"lint `{lint_name}` has marker {{{{produces}}}} with an ignored or missing code block\")\n                 },\n                 Some(line) => {\n                     let line = line.trim();\n@@ -319,7 +285,7 @@ fn replace_produces(lint_name: &str, docs: &mut String, clippy_project_root: &Pa\n             match lines.next() {\n                 Some(line) if line.trim_start() == \"```\" => break,\n                 Some(line) => example.push(line),\n-                None => panic!(\"lint `{}` has an unterminated code block\", lint_name),\n+                None => panic!(\"lint `{lint_name}` has an unterminated code block\"),\n             }\n         }\n \n@@ -336,10 +302,9 @@ fn replace_produces(lint_name: &str, docs: &mut String, clippy_project_root: &Pa\n                             <summary>Produces</summary>\\n\\\n                             \\n\\\n                             ```text\\n\\\n-                            {}\\n\\\n+                            {output}\\n\\\n                             ```\\n\\\n-                        </details>\",\n-                            output\n+                        </details>\"\n                         ),\n                     );\n \n@@ -394,7 +359,7 @@ fn get_lint_output(lint_name: &str, example: &[&mut String], clippy_project_root\n         panic!(\"failed to write to `{}`: {e}\", file.as_path().to_string_lossy());\n     }\n \n-    let prefixed_name = format!(\"{}{lint_name}\", CLIPPY_LINT_GROUP_PREFIX);\n+    let prefixed_name = format!(\"{CLIPPY_LINT_GROUP_PREFIX}{lint_name}\");\n \n     let mut cmd = Command::new(\"cargo\");\n \n@@ -417,7 +382,7 @@ fn get_lint_output(lint_name: &str, example: &[&mut String], clippy_project_root\n     let output = cmd\n         .arg(file.as_path())\n         .output()\n-        .unwrap_or_else(|e| panic!(\"failed to run `{:?}`: {e}\", cmd));\n+        .unwrap_or_else(|e| panic!(\"failed to run `{cmd:?}`: {e}\"));\n \n     let tmp_file_path = file.to_string_lossy();\n     let stderr = std::str::from_utf8(&output.stderr).unwrap();\n@@ -441,8 +406,7 @@ fn get_lint_output(lint_name: &str, example: &[&mut String], clippy_project_root\n         let rendered: Vec<&str> = msgs.iter().filter_map(|msg| msg[\"rendered\"].as_str()).collect();\n         let non_json: Vec<&str> = stderr.lines().filter(|line| !line.starts_with('{')).collect();\n         panic!(\n-            \"did not find lint `{}` in output of example, got:\\n{}\\n{}\",\n-            lint_name,\n+            \"did not find lint `{lint_name}` in output of example, got:\\n{}\\n{}\",\n             non_json.join(\"\\n\"),\n             rendered.join(\"\\n\")\n         );\n@@ -588,13 +552,10 @@ fn to_kebab(config_name: &str) -> String {\n \n impl fmt::Display for ClippyConfiguration {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> fmt::Result {\n-        write!(\n+        writeln!(\n             f,\n-            CONFIGURATION_VALUE_TEMPLATE!(),\n-            name = self.name,\n-            ty = self.config_type,\n-            doc = self.doc,\n-            default = self.default\n+            \"* `{}`: `{}`: {} (defaults to `{}`)\",\n+            self.name, self.config_type, self.doc, self.default\n         )\n     }\n }\n@@ -811,7 +772,7 @@ fn get_lint_group_and_level_or_lint(\n                 lint_collection_error_item(\n                     cx,\n                     item,\n-                    &format!(\"Unable to determine lint level for found group `{}`\", group),\n+                    &format!(\"Unable to determine lint level for found group `{group}`\"),\n                 );\n                 None\n             }\n@@ -869,7 +830,7 @@ fn collect_renames(lints: &mut Vec<LintMetadata>) {\n                         if name == lint_name;\n                         if let Some(past_name) = k.strip_prefix(CLIPPY_LINT_GROUP_PREFIX);\n                         then {\n-                            write!(collected, RENAME_VALUE_TEMPLATE!(), name = past_name).unwrap();\n+                            writeln!(collected, \"* `{past_name}`\").unwrap();\n                             names.push(past_name.to_string());\n                         }\n                     }\n@@ -882,7 +843,15 @@ fn collect_renames(lints: &mut Vec<LintMetadata>) {\n         }\n \n         if !collected.is_empty() {\n-            write!(&mut lint.docs, RENAMES_SECTION_TEMPLATE!(), names = collected).unwrap();\n+            write!(\n+                &mut lint.docs,\n+                r#\"\n+### Past names\n+\n+{collected}\n+\"#\n+            )\n+            .unwrap();\n         }\n     }\n }\n@@ -895,7 +864,7 @@ fn lint_collection_error_item(cx: &LateContext<'_>, item: &Item<'_>, message: &s\n         cx,\n         INTERNAL_METADATA_COLLECTOR,\n         item.ident.span,\n-        &format!(\"metadata collection error for `{}`: {}\", item.ident.name, message),\n+        &format!(\"metadata collection error for `{}`: {message}\", item.ident.name),\n     );\n }\n "}]}