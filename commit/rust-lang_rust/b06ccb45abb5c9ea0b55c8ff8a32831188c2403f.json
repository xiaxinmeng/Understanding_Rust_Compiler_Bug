{"sha": "b06ccb45abb5c9ea0b55c8ff8a32831188c2403f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNmNjYjQ1YWJiNWM5ZWEwYjU1YzhmZjhhMzI4MzExODhjMjQwM2Y=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-06T21:29:50Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-06T21:39:36Z"}, "message": "Begin adding unit testing infrastructure to the compiler\n\nAdd a --test flag and a pass for transforming the AST to generate a test\nharness.\n\nIssue #428", "tree": {"sha": "becc2cf1cb9bbb9c109a86e69993a1dabfc5aa9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/becc2cf1cb9bbb9c109a86e69993a1dabfc5aa9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b06ccb45abb5c9ea0b55c8ff8a32831188c2403f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b06ccb45abb5c9ea0b55c8ff8a32831188c2403f", "html_url": "https://github.com/rust-lang/rust/commit/b06ccb45abb5c9ea0b55c8ff8a32831188c2403f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b06ccb45abb5c9ea0b55c8ff8a32831188c2403f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0eac640fdd56caa93d5f398a75d24e62feef4730", "url": "https://api.github.com/repos/rust-lang/rust/commits/0eac640fdd56caa93d5f398a75d24e62feef4730", "html_url": "https://github.com/rust-lang/rust/commit/0eac640fdd56caa93d5f398a75d24e62feef4730"}], "stats": {"total": 62, "additions": 58, "deletions": 4}, "files": [{"sha": "f1bd93a4a5d38a053cc76153c58cf11c6c7c7fce", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b06ccb45abb5c9ea0b55c8ff8a32831188c2403f/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06ccb45abb5c9ea0b55c8ff8a32831188c2403f/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=b06ccb45abb5c9ea0b55c8ff8a32831188c2403f", "patch": "@@ -106,6 +106,10 @@ fn compile_input(session::session sess, ast::crate_cfg cfg, str input,\n     if (sess.get_opts().output_type == link::output_type_none) { ret; }\n     crate = time(time_passes, \"configuration\",\n                  bind front::config::strip_unconfigured_items(crate));\n+    if (sess.get_opts().test) {\n+        crate = time(time_passes, \"building test harness\",\n+                     bind front::test::modify_for_testing(sess, crate));\n+    }\n     auto ast_map = time(time_passes, \"ast indexing\",\n                         bind middle::ast_map::map_crate(*crate));\n     auto d =\n@@ -229,7 +233,8 @@ options:\n     --time-passes      time the individual phases of the compiler\n     --time-llvm-passes time the individual phases of the LLVM backend\n     --sysroot <path>   override the system root (default: rustc's directory)\n-    --no-typestate     don't run the typestate pass (unsafe!)\\n\\n\");\n+    --no-typestate     don't run the typestate pass (unsafe!)\n+    --test             build test harness\\n\\n\");\n }\n \n fn get_os(str triple) -> session::os {\n@@ -324,6 +329,7 @@ fn build_session_options(str binary, getopts::match match, str binary_dir) ->\n             case (some(?s)) { s }\n         };\n     auto cfg = parse_cfgspecs(getopts::opt_strs(match, \"cfg\"));\n+    auto test = opt_present(match, \"test\");\n     let @session::options sopts =\n         @rec(shared=shared,\n              optimize=opt_level,\n@@ -337,7 +343,8 @@ fn build_session_options(str binary, getopts::match match, str binary_dir) ->\n              output_type=output_type,\n              library_search_paths=library_search_paths,\n              sysroot=sysroot,\n-             cfg=cfg);\n+             cfg=cfg,\n+             test=test);\n     ret sopts;\n }\n \n@@ -367,7 +374,7 @@ fn main(vec[str] args) {\n          optflag(\"c\"), optopt(\"o\"), optflag(\"g\"), optflag(\"save-temps\"),\n          optopt(\"sysroot\"), optflag(\"stats\"), optflag(\"time-passes\"),\n          optflag(\"time-llvm-passes\"), optflag(\"no-typestate\"),\n-         optflag(\"noverify\"), optmulti(\"cfg\")];\n+         optflag(\"noverify\"), optmulti(\"cfg\"), optflag(\"test\")];\n     auto binary = vec::shift[str](args);\n     auto binary_dir = fs::dirname(binary);\n     auto match ="}, {"sha": "7dce5b9b068a6ed48407bd2f709aa90659de24d7", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b06ccb45abb5c9ea0b55c8ff8a32831188c2403f/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06ccb45abb5c9ea0b55c8ff8a32831188c2403f/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=b06ccb45abb5c9ea0b55c8ff8a32831188c2403f", "patch": "@@ -37,7 +37,8 @@ type options =\n         str sysroot,\n         // The crate config requested for the session, which may be combined\n         // with additional crate configurations during the compile process\n-        ast::crate_cfg cfg);\n+        ast::crate_cfg cfg,\n+        bool test);\n \n type crate_metadata = rec(str name, vec[u8] data);\n "}, {"sha": "376efc7932ee84f46942c7f5902e639b62dccf19", "filename": "src/comp/front/test.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b06ccb45abb5c9ea0b55c8ff8a32831188c2403f/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06ccb45abb5c9ea0b55c8ff8a32831188c2403f/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=b06ccb45abb5c9ea0b55c8ff8a32831188c2403f", "patch": "@@ -0,0 +1,44 @@\n+import driver::session;\n+import syntax::ast;\n+import syntax::fold;\n+\n+export modify_for_testing;\n+\n+type test_ctxt = rec(@session::session sess);\n+\n+// Traverse the crate, collecting all the test functions, eliding any\n+// existing main functions, and synthesizing a main test harness\n+fn modify_for_testing(&session::session sess,\n+                      @ast::crate crate) -> @ast::crate {\n+\n+  auto cx = rec(sess = @sess);\n+\n+  auto precursor = rec(fold_crate = bind fold_crate(cx, _, _)\n+                       with *fold::default_ast_fold());\n+\n+  auto fold = fold::make_fold(precursor);\n+  auto res = @fold.fold_crate(*crate);\n+  // FIXME: This is necessary to break a circular reference\n+  fold::dummy_out(fold);\n+  ret res;\n+}\n+\n+fn fold_crate(&test_ctxt cx, &ast::crate_ c,\n+              fold::ast_fold fld) -> ast::crate_ {\n+  auto folded = fold::noop_fold_crate(c, fld);\n+  ret rec(module = add_test_module(folded.module)\n+          with folded);\n+}\n+\n+fn add_test_module(&ast::_mod m) -> ast::_mod {\n+  ret m;\n+}\n+\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:"}, {"sha": "69336c5cb614a14e7b12def0675c2dbcd154fc27", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b06ccb45abb5c9ea0b55c8ff8a32831188c2403f/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/b06ccb45abb5c9ea0b55c8ff8a32831188c2403f/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=b06ccb45abb5c9ea0b55c8ff8a32831188c2403f", "patch": "@@ -66,6 +66,7 @@ mod syntax {\n mod front {\n     mod attr;\n     mod config;\n+    mod test;\n }\n \n mod back {"}, {"sha": "c53665cf71c574abc7b129b45b78a2cc3d7ef7f7", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b06ccb45abb5c9ea0b55c8ff8a32831188c2403f/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06ccb45abb5c9ea0b55c8ff8a32831188c2403f/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=b06ccb45abb5c9ea0b55c8ff8a32831188c2403f", "patch": "@@ -10,6 +10,7 @@ export ast_fold;\n export default_ast_fold;\n export make_fold;\n export dummy_out;\n+export noop_fold_crate;\n \n type ast_fold = @mutable a_f;\n "}]}