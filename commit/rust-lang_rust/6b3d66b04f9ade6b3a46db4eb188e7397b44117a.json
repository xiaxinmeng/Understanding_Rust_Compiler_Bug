{"sha": "6b3d66b04f9ade6b3a46db4eb188e7397b44117a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiM2Q2NmIwNGY5YWRlNmIzYTQ2ZGI0ZWIxODhlNzM5N2I0NDExN2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-03T19:08:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-03T19:08:06Z"}, "message": "Auto merge of #25060 - luqmana:matching-dst-struct, r=huonw\n\nFixes #23261.\r\n\r\ncc @blaenk", "tree": {"sha": "d6a14c0c0226e23cf147e50011a545d0e86c9367", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6a14c0c0226e23cf147e50011a545d0e86c9367"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b3d66b04f9ade6b3a46db4eb188e7397b44117a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b3d66b04f9ade6b3a46db4eb188e7397b44117a", "html_url": "https://github.com/rust-lang/rust/commit/6b3d66b04f9ade6b3a46db4eb188e7397b44117a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b3d66b04f9ade6b3a46db4eb188e7397b44117a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a60dc4fc4b66760b71f1700cdb8b151cb8a67d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a60dc4fc4b66760b71f1700cdb8b151cb8a67d9", "html_url": "https://github.com/rust-lang/rust/commit/1a60dc4fc4b66760b71f1700cdb8b151cb8a67d9"}, {"sha": "715605faf9d32988bc7b2135a711c08e42a1871e", "url": "https://api.github.com/repos/rust-lang/rust/commits/715605faf9d32988bc7b2135a711c08e42a1871e", "html_url": "https://github.com/rust-lang/rust/commit/715605faf9d32988bc7b2135a711c08e42a1871e"}], "stats": {"total": 105, "additions": 103, "deletions": 2}, "files": [{"sha": "84d464e8f07814d4f72d12ec6f7d5a55625c0ac0", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6b3d66b04f9ade6b3a46db4eb188e7397b44117a/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3d66b04f9ade6b3a46db4eb188e7397b44117a/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=6b3d66b04f9ade6b3a46db4eb188e7397b44117a", "patch": "@@ -210,6 +210,7 @@ use trans::consts;\n use trans::datum::*;\n use trans::debuginfo::{self, DebugLoc, ToDebugLoc};\n use trans::expr::{self, Dest};\n+use trans::monomorphize;\n use trans::tvec;\n use trans::type_of;\n use middle::ty::{self, Ty};\n@@ -1076,9 +1077,39 @@ fn compile_submatch_continue<'a, 'p, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n     let adt_vals = if any_irrefutable_adt_pat(bcx.tcx(), m, col) {\n         let repr = adt::represent_type(bcx.ccx(), left_ty);\n         let arg_count = adt::num_args(&*repr, 0);\n-        let field_vals: Vec<ValueRef> = (0..arg_count).map(|ix|\n-            adt::trans_field_ptr(bcx, &*repr, val, 0, ix)\n+        let (arg_count, struct_val) = if type_is_sized(bcx.tcx(), left_ty) {\n+            (arg_count, val)\n+        } else {\n+            // For an unsized ADT (i.e. DST struct), we need to treat\n+            // the last field specially: instead of simply passing a\n+            // ValueRef pointing to that field, as with all the others,\n+            // we skip it and instead construct a 'fat ptr' below.\n+            (arg_count - 1, Load(bcx, expr::get_dataptr(bcx, val)))\n+        };\n+        let mut field_vals: Vec<ValueRef> = (0..arg_count).map(|ix|\n+            adt::trans_field_ptr(bcx, &*repr, struct_val, 0, ix)\n         ).collect();\n+\n+        match left_ty.sty {\n+            ty::ty_struct(def_id, substs) if !type_is_sized(bcx.tcx(), left_ty) => {\n+                // The last field is technically unsized but\n+                // since we can only ever match that field behind\n+                // a reference we construct a fat ptr here.\n+                let fields = ty::lookup_struct_fields(bcx.tcx(), def_id);\n+                let unsized_ty = fields.iter().last().map(|field| {\n+                    let fty = ty::lookup_field_type(bcx.tcx(), def_id, field.id, substs);\n+                    monomorphize::normalize_associated_type(bcx.tcx(), &fty)\n+                }).unwrap();\n+                let llty = type_of::type_of(bcx.ccx(), unsized_ty);\n+                let scratch = alloca_no_lifetime(bcx, llty, \"__struct_field_fat_ptr\");\n+                let data = adt::trans_field_ptr(bcx, &*repr, struct_val, 0, arg_count);\n+                let len = Load(bcx, expr::get_len(bcx, val));\n+                Store(bcx, data, expr::get_dataptr(bcx, scratch));\n+                Store(bcx, len, expr::get_len(bcx, scratch));\n+                field_vals.push(scratch);\n+            }\n+            _ => {}\n+        }\n         Some(field_vals)\n     } else if any_uniq_pat(m, col) || any_region_pat(m, col) {\n         Some(vec!(Load(bcx, val)))"}, {"sha": "fc806f5429a47c320a9c55a37aa204b8f3bdcf5a", "filename": "src/test/run-pass/issue-23261.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/6b3d66b04f9ade6b3a46db4eb188e7397b44117a/src%2Ftest%2Frun-pass%2Fissue-23261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3d66b04f9ade6b3a46db4eb188e7397b44117a/src%2Ftest%2Frun-pass%2Fissue-23261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23261.rs?ref=6b3d66b04f9ade6b3a46db4eb188e7397b44117a", "patch": "@@ -0,0 +1,70 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Matching on a DST struct should not trigger an LLVM assertion.\n+\n+struct Foo<T: ?Sized> {\n+    a: i32,\n+    inner: T\n+}\n+\n+trait Get {\n+    fn get(&self) -> i32;\n+}\n+\n+impl Get for i32 {\n+    fn get(&self) -> i32 {\n+        *self\n+    }\n+}\n+\n+fn check_val(val: &Foo<[u8]>) {\n+    match *val {\n+        Foo { a, .. } => {\n+            assert_eq!(a, 32);\n+        }\n+    }\n+}\n+\n+fn check_dst_val(val: &Foo<[u8]>) {\n+    match *val {\n+        Foo { ref inner, .. } => {\n+            assert_eq!(inner, [1, 2, 3]);\n+        }\n+    }\n+}\n+\n+fn check_both(val: &Foo<[u8]>) {\n+    match *val {\n+        Foo { a, ref inner } => {\n+            assert_eq!(a, 32);\n+            assert_eq!(inner, [1, 2, 3]);\n+        }\n+    }\n+}\n+\n+fn check_trait_obj(val: &Foo<Get>) {\n+    match *val {\n+        Foo { a, ref inner } => {\n+            assert_eq!(a, 32);\n+            assert_eq!(inner.get(), 32);\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let foo: &Foo<[u8]> = &Foo { a: 32, inner: [1, 2, 3] };\n+    check_val(foo);\n+    check_dst_val(foo);\n+    check_both(foo);\n+\n+    let foo: &Foo<Get> = &Foo { a: 32, inner: 32 };\n+    check_trait_obj(foo);\n+}"}]}