{"sha": "04e5fa3ce2a6a2b74c2940364b13bc106d8cadb6", "node_id": "C_kwDOAAsO6NoAKDA0ZTVmYTNjZTJhNmEyYjc0YzI5NDAzNjRiMTNiYzEwNmQ4Y2FkYjY", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2023-02-21T14:21:57Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2023-03-01T09:20:45Z"}, "message": "Remove last instances of HashSet in query result types.", "tree": {"sha": "c3928d31d05f2378ddd0dca8409c62f493e065e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3928d31d05f2378ddd0dca8409c62f493e065e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04e5fa3ce2a6a2b74c2940364b13bc106d8cadb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04e5fa3ce2a6a2b74c2940364b13bc106d8cadb6", "html_url": "https://github.com/rust-lang/rust/commit/04e5fa3ce2a6a2b74c2940364b13bc106d8cadb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04e5fa3ce2a6a2b74c2940364b13bc106d8cadb6/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "422208ae52564c3b8cbf8416ffd1c92e9c80a3c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/422208ae52564c3b8cbf8416ffd1c92e9c80a3c0", "html_url": "https://github.com/rust-lang/rust/commit/422208ae52564c3b8cbf8416ffd1c92e9c80a3c0"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "268b9ac530f189f1999acedd0acf7c16137020b0", "filename": "compiler/rustc_hir_analysis/src/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04e5fa3ce2a6a2b74c2940364b13bc106d8cadb6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e5fa3ce2a6a2b74c2940364b13bc106d8cadb6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck_unused.rs?ref=04e5fa3ce2a6a2b74c2940364b13bc106d8cadb6", "patch": "@@ -10,7 +10,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n     for item_def_id in tcx.hir().body_owners() {\n         let imports = tcx.used_trait_imports(item_def_id);\n         debug!(\"GatherVisitor: item_def_id={:?} with imports {:#?}\", item_def_id, imports);\n-        used_trait_imports.extend(imports.items().copied());\n+        used_trait_imports.extend_unord(imports.items().copied());\n     }\n \n     for &id in tcx.maybe_unused_trait_imports(()) {"}, {"sha": "09b356bb5b5e9cbfe097729c099e550cce708ef8", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04e5fa3ce2a6a2b74c2940364b13bc106d8cadb6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e5fa3ce2a6a2b74c2940364b13bc106d8cadb6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=04e5fa3ce2a6a2b74c2940364b13bc106d8cadb6", "patch": "@@ -2,7 +2,7 @@\n \n use crate::mir::{Body, ConstantKind, Promoted};\n use crate::ty::{self, OpaqueHiddenType, Ty, TyCtxt};\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::unord::UnordSet;\n use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n@@ -123,7 +123,7 @@ pub struct UnsafetyCheckResult {\n     pub violations: Vec<UnsafetyViolation>,\n \n     /// Used `unsafe` blocks in this function. This is used for the \"unused_unsafe\" lint.\n-    pub used_unsafe_blocks: FxHashSet<hir::HirId>,\n+    pub used_unsafe_blocks: UnordSet<hir::HirId>,\n \n     /// This is `Some` iff the item is not a closure.\n     pub unused_unsafes: Option<Vec<(hir::HirId, UnusedUnsafe)>>,"}, {"sha": "71605113dd572b994dbdb03cfa97b064854640a0", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/04e5fa3ce2a6a2b74c2940364b13bc106d8cadb6/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e5fa3ce2a6a2b74c2940364b13bc106d8cadb6/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=04e5fa3ce2a6a2b74c2940364b13bc106d8cadb6", "patch": "@@ -1,4 +1,4 @@\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::unord::{UnordItems, UnordSet};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n@@ -24,7 +24,7 @@ pub struct UnsafetyChecker<'a, 'tcx> {\n     param_env: ty::ParamEnv<'tcx>,\n \n     /// Used `unsafe` blocks in this function. This is used for the \"unused_unsafe\" lint.\n-    used_unsafe_blocks: FxHashSet<HirId>,\n+    used_unsafe_blocks: UnordSet<HirId>,\n }\n \n impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n@@ -129,7 +129,7 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n                     let def_id = def_id.expect_local();\n                     let UnsafetyCheckResult { violations, used_unsafe_blocks, .. } =\n                         self.tcx.unsafety_check_result(def_id);\n-                    self.register_violations(violations, used_unsafe_blocks.iter().copied());\n+                    self.register_violations(violations, used_unsafe_blocks.items().copied());\n                 }\n             },\n             _ => {}\n@@ -151,7 +151,7 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n                         let local_def_id = def_id.expect_local();\n                         let UnsafetyCheckResult { violations, used_unsafe_blocks, .. } =\n                             self.tcx.unsafety_check_result(local_def_id);\n-                        self.register_violations(violations, used_unsafe_blocks.iter().copied());\n+                        self.register_violations(violations, used_unsafe_blocks.items().copied());\n                     }\n                 }\n             }\n@@ -268,14 +268,14 @@ impl<'tcx> UnsafetyChecker<'_, 'tcx> {\n             .lint_root;\n         self.register_violations(\n             [&UnsafetyViolation { source_info, lint_root, kind, details }],\n-            [],\n+            UnordItems::empty(),\n         );\n     }\n \n     fn register_violations<'a>(\n         &mut self,\n         violations: impl IntoIterator<Item = &'a UnsafetyViolation>,\n-        new_used_unsafe_blocks: impl IntoIterator<Item = HirId>,\n+        new_used_unsafe_blocks: UnordItems<HirId, impl Iterator<Item = HirId>>,\n     ) {\n         let safety = self.body.source_scopes[self.source_info.scope]\n             .local_data\n@@ -308,9 +308,7 @@ impl<'tcx> UnsafetyChecker<'_, 'tcx> {\n             }),\n         };\n \n-        new_used_unsafe_blocks.into_iter().for_each(|hir_id| {\n-            self.used_unsafe_blocks.insert(hir_id);\n-        });\n+        self.used_unsafe_blocks.extend_unord(new_used_unsafe_blocks);\n     }\n     fn check_mut_borrowing_layout_constrained_field(\n         &mut self,\n@@ -407,7 +405,7 @@ enum Context {\n \n struct UnusedUnsafeVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    used_unsafe_blocks: &'a FxHashSet<HirId>,\n+    used_unsafe_blocks: &'a UnordSet<HirId>,\n     context: Context,\n     unused_unsafes: &'a mut Vec<(HirId, UnusedUnsafe)>,\n }\n@@ -458,7 +456,7 @@ impl<'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'_, 'tcx> {\n fn check_unused_unsafe(\n     tcx: TyCtxt<'_>,\n     def_id: LocalDefId,\n-    used_unsafe_blocks: &FxHashSet<HirId>,\n+    used_unsafe_blocks: &UnordSet<HirId>,\n ) -> Vec<(HirId, UnusedUnsafe)> {\n     let body_id = tcx.hir().maybe_body_owned_by(def_id);\n \n@@ -505,7 +503,7 @@ fn unsafety_check_result(\n     if body.is_custom_mir() {\n         return tcx.arena.alloc(UnsafetyCheckResult {\n             violations: Vec::new(),\n-            used_unsafe_blocks: FxHashSet::default(),\n+            used_unsafe_blocks: Default::default(),\n             unused_unsafes: Some(Vec::new()),\n         });\n     }"}]}