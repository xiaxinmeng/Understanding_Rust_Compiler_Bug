{"sha": "2b2e35bfc34618cff7b62a7726ee3a97101d3fa2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMmUzNWJmYzM0NjE4Y2ZmN2I2MmE3NzI2ZWUzYTk3MTAxZDNmYTI=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-08T03:24:18Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-18T02:06:56Z"}, "message": "Prepare def_use MutVisitor to have projections interned", "tree": {"sha": "1ab7246a0f68f3770923c031c785603a5857554a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ab7246a0f68f3770923c031c785603a5857554a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b2e35bfc34618cff7b62a7726ee3a97101d3fa2", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAl2pHkAACgkQiMlBzaHU\nZDIRkg/+JDHp+Zqrj+SxshCHjaJnuZKMVbmUorF6U4dGB4vuJefFQa1KGG+yr6TY\nmze6dfw//d2n+LorabMmztSODCplI7ex4x83P/L5BTar36lfwvNbOmydZRuAdk8E\niLO7ZbgywUq2dYZZ5EgZYh3VICeenNdD93ToMvXCY/TScUAqqwoTIHDlwC7D/ejS\nqymyvk0JP754TsreAL1u+YQC+tDgy8j4HFWlpqXkJv6JyByEbaJL+vsI/KCfhzp1\nwtdXKm8auAO6ivVHbsLR3ADn14mePunF9UyEn8U2ReLud74wg2ch9zReSNylFarj\nOVci3YmgSBJOuPgK3ZXYfUnxMLpIkquqcb5GX8yhaeBGvcEM6S/LLEbHRpjQFHFC\nmaSsJ7Gp0wy9+/s0WqnSWr9gnttPaselq8Ae/alL4zdwfvOCpvsn1NXrETo/WMa4\nucTfGD3LHm4+5NXAArMCVqTfWd0pal16jqUxv7YXz/PQMJsG6GRlLNYhJQgOnEaY\nksUSsuvGIjSaPuZ/kkqGGGlQwZCoHOD35XHGsGSpm4PC/6yZOoK0qoc65mn2GsUx\nxm3hschHB6EGjumi1Svm4T64tGN09JQnD5tU0DQ+e/gTdvK7n1P53we/RUtJJu7j\n8dJHC8yXyzuSD5dM7Vg4GxbxDBfH9S05YgH/n9CWV8+lu63ROX8=\n=x65i\n-----END PGP SIGNATURE-----", "payload": "tree 1ab7246a0f68f3770923c031c785603a5857554a\nparent 39c9ed3ac19b3f6c79069d32a317daa763371369\nauthor Santiago Pastorino <spastorino@gmail.com> 1570505058 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1571364416 -0400\n\nPrepare def_use MutVisitor to have projections interned\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b2e35bfc34618cff7b62a7726ee3a97101d3fa2", "html_url": "https://github.com/rust-lang/rust/commit/2b2e35bfc34618cff7b62a7726ee3a97101d3fa2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b2e35bfc34618cff7b62a7726ee3a97101d3fa2/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39c9ed3ac19b3f6c79069d32a317daa763371369", "url": "https://api.github.com/repos/rust-lang/rust/commits/39c9ed3ac19b3f6c79069d32a317daa763371369", "html_url": "https://github.com/rust-lang/rust/commit/39c9ed3ac19b3f6c79069d32a317daa763371369"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "d90be90bd9d4968431c12c5052e3bdfc59dc9055", "filename": "src/librustc_mir/util/def_use.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2b2e35bfc34618cff7b62a7726ee3a97101d3fa2/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2e35bfc34618cff7b62a7726ee3a97101d3fa2/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fdef_use.rs?ref=2b2e35bfc34618cff7b62a7726ee3a97101d3fa2", "patch": "@@ -1,6 +1,6 @@\n //! Def-use analysis.\n \n-use rustc::mir::{Local, Location, Body};\n+use rustc::mir::{Body, Local, Location, Place, PlaceElem};\n use rustc::mir::visit::{PlaceContext, MutVisitor, Visitor};\n use rustc_index::vec::IndexVec;\n use std::mem;\n@@ -47,13 +47,13 @@ impl DefUseAnalysis {\n         &self.info[local]\n     }\n \n-    fn mutate_defs_and_uses<F>(&self, local: Local, body: &mut Body<'_>, mut callback: F)\n-                               where F: for<'a> FnMut(&'a mut Local,\n+    fn mutate_defs_and_uses<F>(&self, local: Local, body: &mut Body<'_>, callback: F)\n+                               where F: for<'a> Fn(&'a Local,\n                                                       PlaceContext,\n-                                                      Location) {\n+                                                      Location) -> Local {\n         for place_use in &self.info[local].defs_and_uses {\n             MutateUseVisitor::new(local,\n-                                  &mut callback,\n+                                  &callback,\n                                   body).visit_location(body, place_use.location)\n         }\n     }\n@@ -63,7 +63,7 @@ impl DefUseAnalysis {\n                                           local: Local,\n                                           body: &mut Body<'_>,\n                                           new_local: Local) {\n-        self.mutate_defs_and_uses(local, body, |local, _, _| *local = new_local)\n+        self.mutate_defs_and_uses(local, body, |_, _, _| new_local)\n     }\n }\n \n@@ -125,7 +125,7 @@ struct MutateUseVisitor<F> {\n impl<F> MutateUseVisitor<F> {\n     fn new(query: Local, callback: F, _: &Body<'_>)\n            -> MutateUseVisitor<F>\n-           where F: for<'a> FnMut(&'a mut Local, PlaceContext, Location) {\n+           where F: for<'a> Fn(&'a Local, PlaceContext, Location) -> Local {\n         MutateUseVisitor {\n             query,\n             callback,\n@@ -134,13 +134,31 @@ impl<F> MutateUseVisitor<F> {\n }\n \n impl<F> MutVisitor<'_> for MutateUseVisitor<F>\n-              where F: for<'a> FnMut(&'a mut Local, PlaceContext, Location) {\n+              where F: for<'a> Fn(&'a Local, PlaceContext, Location) -> Local {\n     fn visit_local(&mut self,\n                     local: &mut Local,\n                     context: PlaceContext,\n                     location: Location) {\n         if *local == self.query {\n-            (self.callback)(local, context, location)\n+            *local = (self.callback)(local, context, location)\n         }\n     }\n+\n+    fn visit_place(&mut self,\n+                    place: &mut Place<'tcx>,\n+                    context: PlaceContext,\n+                    location: Location) {\n+        self.visit_place_base(&mut place.base, context, location);\n+\n+        let new_projection: Vec<_> = place.projection.iter().map(|elem|\n+            match elem {\n+                PlaceElem::Index(local) if *local == self.query => {\n+                    PlaceElem::Index((self.callback)(&local, context, location))\n+                }\n+                _ => elem.clone(),\n+            }\n+        ).collect();\n+\n+        place.projection = new_projection.into_boxed_slice();\n+    }\n }"}]}