{"sha": "d33493d779ba573403804b8d78e9b72fcf98f894", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMzQ5M2Q3NzliYTU3MzQwMzgwNGI4ZDc4ZTliNzJmY2Y5OGY4OTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-22T07:56:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-22T07:56:33Z"}, "message": "Merge #2641\n\n2641: Parse const generics r=matklad a=roblabla\n\nAdds very primitive support for parsing const generics (`const IDENT: TY`) so that rust-analyzer stops complaining about the syntax being invalid.\r\n\r\nFixes #1574\r\nFixes #2281 \n\nCo-authored-by: roblabla <unfiltered@roblab.la>", "tree": {"sha": "f6fe331d8fac08c821d0820e4c15410e1c9de66a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6fe331d8fac08c821d0820e4c15410e1c9de66a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d33493d779ba573403804b8d78e9b72fcf98f894", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/yGyCRBK7hj4Ov3rIwAAdHIIAKVyPB7OGN6Zyw3Aggq2vFDK\nG3NDSJFP/cFPprFsmsmMQ5jHjttlj3EDdbxthAkKpAMKuuMyke1a25zRmZa9Kuky\nWNrpv2mpHqC2+yYxypceofDTbj5C1r1vymckSMjd8OXYzNqliJNaY3Jf+/AKBIqN\nJa6n138qg+NhRlXYLVEOYWE5V5XpQ8AUGHKFiiIOwy7X5ZNXSdJ6wVSakAbkg2/v\n7birAlWF1z2653DY+evf9Ftq6tACh4cJtdEbyKbcPodC0bVC9Rh35cbkUePFbWhW\ndDyGGDPBxXgaCQ3PwxQhStfZ4qTahNC94Y8H1qq0pyZxlKn8fo15ZG+gEzMdWEk=\n=JfAM\n-----END PGP SIGNATURE-----\n", "payload": "tree f6fe331d8fac08c821d0820e4c15410e1c9de66a\nparent 000710bd089959796947b507d05a6426b7733b47\nparent b04d4a88d1ba7f04445e807b6a816930b1e9bbf2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1577001393 +0000\ncommitter GitHub <noreply@github.com> 1577001393 +0000\n\nMerge #2641\n\n2641: Parse const generics r=matklad a=roblabla\n\nAdds very primitive support for parsing const generics (`const IDENT: TY`) so that rust-analyzer stops complaining about the syntax being invalid.\r\n\r\nFixes #1574\r\nFixes #2281 \n\nCo-authored-by: roblabla <unfiltered@roblab.la>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d33493d779ba573403804b8d78e9b72fcf98f894", "html_url": "https://github.com/rust-lang/rust/commit/d33493d779ba573403804b8d78e9b72fcf98f894", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d33493d779ba573403804b8d78e9b72fcf98f894/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "000710bd089959796947b507d05a6426b7733b47", "url": "https://api.github.com/repos/rust-lang/rust/commits/000710bd089959796947b507d05a6426b7733b47", "html_url": "https://github.com/rust-lang/rust/commit/000710bd089959796947b507d05a6426b7733b47"}, {"sha": "b04d4a88d1ba7f04445e807b6a816930b1e9bbf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b04d4a88d1ba7f04445e807b6a816930b1e9bbf2", "html_url": "https://github.com/rust-lang/rust/commit/b04d4a88d1ba7f04445e807b6a816930b1e9bbf2"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "50e4900c31a7ee7a13df387d1d594db047f3fad5", "filename": "crates/ra_parser/src/grammar/type_params.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d33493d779ba573403804b8d78e9b72fcf98f894/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d33493d779ba573403804b8d78e9b72fcf98f894/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs?ref=d33493d779ba573403804b8d78e9b72fcf98f894", "patch": "@@ -25,6 +25,7 @@ fn type_param_list(p: &mut Parser) {\n         match p.current() {\n             LIFETIME => lifetime_param(p, m),\n             IDENT => type_param(p, m),\n+            CONST_KW => type_const_param(p, m),\n             _ => {\n                 m.abandon(p);\n                 p.err_and_bump(\"expected type parameter\")\n@@ -62,6 +63,16 @@ fn type_param(p: &mut Parser, m: Marker) {\n     m.complete(p, TYPE_PARAM);\n }\n \n+// test const_param\n+// struct S<const N: u32>;\n+fn type_const_param(p: &mut Parser, m: Marker) {\n+    assert!(p.at(CONST_KW));\n+    p.bump(T![const]);\n+    name(p);\n+    types::ascription(p);\n+    m.complete(p, CONST_PARAM);\n+}\n+\n // test type_param_bounds\n // struct S<T: 'a + ?Sized + (Copy)>;\n pub(super) fn bounds(p: &mut Parser) {"}, {"sha": "af2945f571ee0437678504dc15201c44cdc4c4c1", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d33493d779ba573403804b8d78e9b72fcf98f894/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d33493d779ba573403804b8d78e9b72fcf98f894/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=d33493d779ba573403804b8d78e9b72fcf98f894", "patch": "@@ -229,6 +229,7 @@ pub enum SyntaxKind {\n     TYPE_PARAM_LIST,\n     LIFETIME_PARAM,\n     TYPE_PARAM,\n+    CONST_PARAM,\n     TYPE_ARG_LIST,\n     LIFETIME_ARG,\n     TYPE_ARG,"}, {"sha": "9f9d6e63cb610da083a141278fd874d877f0b578", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d33493d779ba573403804b8d78e9b72fcf98f894/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d33493d779ba573403804b8d78e9b72fcf98f894/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=d33493d779ba573403804b8d78e9b72fcf98f894", "patch": "@@ -551,6 +551,36 @@ impl ConstDef {\n     }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct ConstParam {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl AstNode for ConstParam {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            CONST_PARAM => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        &self.syntax\n+    }\n+}\n+impl ast::NameOwner for ConstParam {}\n+impl ast::AttrsOwner for ConstParam {}\n+impl ast::TypeAscriptionOwner for ConstParam {}\n+impl ConstParam {\n+    pub fn default_val(&self) -> Option<Expr> {\n+        AstChildren::new(&self.syntax).next()\n+    }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ContinueExpr {\n     pub(crate) syntax: SyntaxNode,\n }"}, {"sha": "08aafb610d61b4417f398f95c8d492e355d04892", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d33493d779ba573403804b8d78e9b72fcf98f894/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/d33493d779ba573403804b8d78e9b72fcf98f894/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=d33493d779ba573403804b8d78e9b72fcf98f894", "patch": "@@ -245,6 +245,7 @@ Grammar(\n         \"TYPE_PARAM_LIST\",\n         \"LIFETIME_PARAM\",\n         \"TYPE_PARAM\",\n+        \"CONST_PARAM\",\n         \"TYPE_ARG_LIST\",\n         \"LIFETIME_ARG\",\n         \"TYPE_ARG\",\n@@ -604,6 +605,10 @@ Grammar(\n             options: [(\"default_type\", \"TypeRef\")],\n             traits: [\"NameOwner\", \"AttrsOwner\", \"TypeBoundsOwner\"],\n         ),\n+        \"ConstParam\": (\n+            options: [(\"default_val\", \"Expr\")],\n+            traits: [\"NameOwner\", \"AttrsOwner\", \"TypeAscriptionOwner\"],\n+        ),\n         \"LifetimeParam\": (\n             traits: [\"AttrsOwner\"],\n         ),"}, {"sha": "8cdb3b7036788e6606fdbe09f7df095e4240c919", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0147_const_param.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d33493d779ba573403804b8d78e9b72fcf98f894/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0147_const_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d33493d779ba573403804b8d78e9b72fcf98f894/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0147_const_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0147_const_param.rs?ref=d33493d779ba573403804b8d78e9b72fcf98f894", "patch": "@@ -0,0 +1 @@\n+struct S<const N: u32>;"}, {"sha": "f81de7bac7caf79b47da46489e25e8e81086390a", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0147_const_param.txt", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d33493d779ba573403804b8d78e9b72fcf98f894/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0147_const_param.txt", "raw_url": "https://github.com/rust-lang/rust/raw/d33493d779ba573403804b8d78e9b72fcf98f894/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0147_const_param.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0147_const_param.txt?ref=d33493d779ba573403804b8d78e9b72fcf98f894", "patch": "@@ -0,0 +1,23 @@\n+SOURCE_FILE@[0; 24)\n+  STRUCT_DEF@[0; 23)\n+    STRUCT_KW@[0; 6) \"struct\"\n+    WHITESPACE@[6; 7) \" \"\n+    NAME@[7; 8)\n+      IDENT@[7; 8) \"S\"\n+    TYPE_PARAM_LIST@[8; 22)\n+      L_ANGLE@[8; 9) \"<\"\n+      CONST_PARAM@[9; 21)\n+        CONST_KW@[9; 14) \"const\"\n+        WHITESPACE@[14; 15) \" \"\n+        NAME@[15; 16)\n+          IDENT@[15; 16) \"N\"\n+        COLON@[16; 17) \":\"\n+        WHITESPACE@[17; 18) \" \"\n+        PATH_TYPE@[18; 21)\n+          PATH@[18; 21)\n+            PATH_SEGMENT@[18; 21)\n+              NAME_REF@[18; 21)\n+                IDENT@[18; 21) \"u32\"\n+      R_ANGLE@[21; 22) \">\"\n+    SEMI@[22; 23) \";\"\n+  WHITESPACE@[23; 24) \"\\n\""}]}