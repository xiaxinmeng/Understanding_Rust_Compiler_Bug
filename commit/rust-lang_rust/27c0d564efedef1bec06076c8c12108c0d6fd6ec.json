{"sha": "27c0d564efedef1bec06076c8c12108c0d6fd6ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YzBkNTY0ZWZlZGVmMWJlYzA2MDc2YzhjMTIxMDhjMGQ2ZmQ2ZWM=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-07-23T14:45:37Z"}, "committer": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-07-24T02:04:11Z"}, "message": "Mark the suggestion applicable", "tree": {"sha": "5ad2bc1f942e3b87d89b961023629ce301c9b5c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ad2bc1f942e3b87d89b961023629ce301c9b5c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27c0d564efedef1bec06076c8c12108c0d6fd6ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27c0d564efedef1bec06076c8c12108c0d6fd6ec", "html_url": "https://github.com/rust-lang/rust/commit/27c0d564efedef1bec06076c8c12108c0d6fd6ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27c0d564efedef1bec06076c8c12108c0d6fd6ec/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87f0c1f33789df39db871857055a2d7d533da47f", "url": "https://api.github.com/repos/rust-lang/rust/commits/87f0c1f33789df39db871857055a2d7d533da47f", "html_url": "https://github.com/rust-lang/rust/commit/87f0c1f33789df39db871857055a2d7d533da47f"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "e0dcbf520b4c6a7180183d735241ca5b7bf3a9f6", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/27c0d564efedef1bec06076c8c12108c0d6fd6ec/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c0d564efedef1bec06076c8c12108c0d6fd6ec/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=27c0d564efedef1bec06076c8c12108c0d6fd6ec", "patch": "@@ -1048,25 +1048,31 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         err.span_label(span, format!( \"expected {} that takes {}\", kind, expected_str));\n \n         if let Some(found_span) = found_span {\n+            err.span_label(found_span, format!(\"takes {}\", found_str));\n+\n             // Suggest to take and ignore the arguments with expected_args_length `_`s if\n             // found arguments is empty(Suppose the user just wants to ignore args in this case).\n             // like `|_, _|` for closure with 2 expected args.\n             if found_args.is_empty() && is_closure {\n                 let mut underscores = \"_\".repeat(expected_args.len())\n-                                     .split(\"\")\n-                                     .filter(|s| !s.is_empty())\n-                                     .collect::<Vec<_>>()\n-                                     .join(\", \");\n-                err.span_suggestion(\n+                                      .split(\"\")\n+                                      .filter(|s| !s.is_empty())\n+                                      .collect::<Vec<_>>()\n+                                      .join(\", \");\n+                err.span_suggestion_with_applicability(\n                     found_span,\n-                    \"consider changing this to\",\n+                    &format!(\"change the closure to take and ignore the argument{}\",\n+                            if expected_args.len() < 2 {\n+                                \"\"\n+                            } else {\n+                                \"s\"\n+                            }\n+                    ),\n                     format!(\"|{}|\", underscores),\n+                    Applicability::MachineApplicable,\n                 );\n-            } else {\n-                err.span_label(found_span, format!(\"takes {}\", found_str));\n             }\n \n-\n             if let &[ArgKind::Tuple(_, ref fields)] = &found_args[..] {\n                 if fields.len() == expected_args.len() {\n                     let sugg = fields.iter()"}]}