{"sha": "f68514c128e536c5868368861871cb665ed9fdd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ODUxNGMxMjhlNTM2YzU4NjgzNjg4NjE4NzFjYjY2NWVkOWZkZDM=", "commit": {"author": {"name": "Eric Reed", "email": "ecreed@cs.washington.edu", "date": "2013-08-09T00:10:22Z"}, "committer": {"name": "Eric Reed", "email": "ecreed@cs.washington.edu", "date": "2013-08-19T23:26:50Z"}, "message": "Do not execute the callback before cleaning up resources.", "tree": {"sha": "92b749f9deda4298051630fdd071359bc12bbfd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92b749f9deda4298051630fdd071359bc12bbfd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f68514c128e536c5868368861871cb665ed9fdd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f68514c128e536c5868368861871cb665ed9fdd3", "html_url": "https://github.com/rust-lang/rust/commit/f68514c128e536c5868368861871cb665ed9fdd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f68514c128e536c5868368861871cb665ed9fdd3/comments", "author": {"login": "anasazi", "id": 591682, "node_id": "MDQ6VXNlcjU5MTY4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/591682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anasazi", "html_url": "https://github.com/anasazi", "followers_url": "https://api.github.com/users/anasazi/followers", "following_url": "https://api.github.com/users/anasazi/following{/other_user}", "gists_url": "https://api.github.com/users/anasazi/gists{/gist_id}", "starred_url": "https://api.github.com/users/anasazi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anasazi/subscriptions", "organizations_url": "https://api.github.com/users/anasazi/orgs", "repos_url": "https://api.github.com/users/anasazi/repos", "events_url": "https://api.github.com/users/anasazi/events{/privacy}", "received_events_url": "https://api.github.com/users/anasazi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anasazi", "id": 591682, "node_id": "MDQ6VXNlcjU5MTY4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/591682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anasazi", "html_url": "https://github.com/anasazi", "followers_url": "https://api.github.com/users/anasazi/followers", "following_url": "https://api.github.com/users/anasazi/following{/other_user}", "gists_url": "https://api.github.com/users/anasazi/gists{/gist_id}", "starred_url": "https://api.github.com/users/anasazi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anasazi/subscriptions", "organizations_url": "https://api.github.com/users/anasazi/orgs", "repos_url": "https://api.github.com/users/anasazi/repos", "events_url": "https://api.github.com/users/anasazi/events{/privacy}", "received_events_url": "https://api.github.com/users/anasazi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97555e865c55f99684595471fa1d5440b2e6c15e", "url": "https://api.github.com/repos/rust-lang/rust/commits/97555e865c55f99684595471fa1d5440b2e6c15e", "html_url": "https://github.com/rust-lang/rust/commit/97555e865c55f99684595471fa1d5440b2e6c15e"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "746fa5668a5f0651e9f898598570ceda87d78715", "filename": "src/libstd/rt/io/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f68514c128e536c5868368861871cb665ed9fdd3/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f68514c128e536c5868368861871cb665ed9fdd3/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs?ref=f68514c128e536c5868368861871cb665ed9fdd3", "patch": "@@ -88,9 +88,7 @@ impl Writer for TcpStream {\n     fn write(&mut self, buf: &[u8]) {\n         match (**self).write(buf) {\n             Ok(_) => (),\n-            Err(ioerr) => {\n-                io_error::cond.raise(ioerr);\n-            }\n+            Err(ioerr) => io_error::cond.raise(ioerr),\n         }\n     }\n \n@@ -129,9 +127,7 @@ impl TcpListener {\n impl Listener<TcpStream> for TcpListener {\n     fn accept(&mut self) -> Option<TcpStream> {\n         match (**self).accept() {\n-            Ok(s) => {\n-                Some(TcpStream::new(s))\n-            }\n+            Ok(s) => Some(TcpStream::new(s)),\n             Err(ioerr) => {\n                 io_error::cond.raise(ioerr);\n                 return None;"}, {"sha": "e8d0296e543a44afbc7e24ba5754a37016a4116c", "filename": "src/libstd/rt/uv/net.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f68514c128e536c5868368861871cb665ed9fdd3/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f68514c128e536c5868368861871cb665ed9fdd3/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fnet.rs?ref=f68514c128e536c5868368861871cb665ed9fdd3", "patch": "@@ -190,9 +190,10 @@ impl StreamWatcher {\n \n         extern fn close_cb(handle: *uvll::uv_stream_t) {\n             let mut stream_watcher: StreamWatcher = NativeHandle::from_native_handle(handle);\n-            stream_watcher.get_watcher_data().close_cb.take_unwrap()();\n+            let cb = stream_watcher.get_watcher_data().close_cb.take_unwrap();\n             stream_watcher.drop_watcher_data();\n             unsafe { free_handle(handle as *c_void) }\n+            cb();\n         }\n     }\n }\n@@ -411,9 +412,10 @@ impl UdpWatcher {\n \n         extern fn close_cb(handle: *uvll::uv_udp_t) {\n             let mut udp_watcher: UdpWatcher = NativeHandle::from_native_handle(handle);\n-            udp_watcher.get_watcher_data().close_cb.take_unwrap()();\n+            let cb = udp_watcher.get_watcher_data().close_cb.take_unwrap();\n             udp_watcher.drop_watcher_data();\n             unsafe { free_handle(handle as *c_void) }\n+            cb();\n         }\n     }\n }"}]}