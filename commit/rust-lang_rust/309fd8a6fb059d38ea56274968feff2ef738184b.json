{"sha": "309fd8a6fb059d38ea56274968feff2ef738184b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwOWZkOGE2ZmIwNTlkMzhlYTU2Mjc0OTY4ZmVmZjJlZjczODE4NGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-26T09:20:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-26T09:20:33Z"}, "message": "Auto merge of #49469 - Nokel81:allow-irrefutable-let-patterns, r=nikomatsakis\n\nImplementation of RFC 2086 - Allow Irrefutable Let patterns\n\nThis is the set of changes for RFC2086. Tracking issue #44495. Rendered [here](https://github.com/rust-lang/rfcs/pull/2086)", "tree": {"sha": "01e87f88461c1d465b5827b4864a9bbd71a63bf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01e87f88461c1d465b5827b4864a9bbd71a63bf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/309fd8a6fb059d38ea56274968feff2ef738184b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/309fd8a6fb059d38ea56274968feff2ef738184b", "html_url": "https://github.com/rust-lang/rust/commit/309fd8a6fb059d38ea56274968feff2ef738184b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/309fd8a6fb059d38ea56274968feff2ef738184b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "773ce53ce7b3acb97cfbd3d189dc3fbf33ec05c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/773ce53ce7b3acb97cfbd3d189dc3fbf33ec05c6", "html_url": "https://github.com/rust-lang/rust/commit/773ce53ce7b3acb97cfbd3d189dc3fbf33ec05c6"}, {"sha": "91680347a7ef48ddffd9ff06eedb54a550891cf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/91680347a7ef48ddffd9ff06eedb54a550891cf1", "html_url": "https://github.com/rust-lang/rust/commit/91680347a7ef48ddffd9ff06eedb54a550891cf1"}], "stats": {"total": 165, "additions": 143, "deletions": 22}, "files": [{"sha": "46b843778e81077967d1864514553eb31d7696c5", "filename": "src/doc/unstable-book/src/language-features/irrefutable-let-patterns.md", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/309fd8a6fb059d38ea56274968feff2ef738184b/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Firrefutable-let-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/309fd8a6fb059d38ea56274968feff2ef738184b/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Firrefutable-let-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Firrefutable-let-patterns.md?ref=309fd8a6fb059d38ea56274968feff2ef738184b", "patch": "@@ -0,0 +1,28 @@\n+# `irrefutable_let_patterns`\n+\n+The tracking issue for this feature is: [#44495]\n+\n+[#44495]: https://github.com/rust-lang/rust/issues/44495\n+\n+------------------------\n+\n+This feature changes the way that \"irrefutable patterns\" are handled\n+in the `if let` and `while let` forms. An *irrefutable pattern* is one\n+that cannot fail to match -- for example, the `_` pattern matches any\n+value, and hence it is \"irrefutable\". Without this feature, using an\n+irrefutable pattern in an `if let` gives a hard error (since often\n+this indicates programmer error). But when the feature is enabled, the\n+error becomes a lint (since in some cases irrefutable patterns are\n+expected). This means you can use `#[allow]` to silence the lint:\n+\n+```rust\n+#![feature(irrefutable_let_patterns)]\n+\n+#[allow(irrefutable_let_patterns)]\n+fn main() {\n+    // These two examples used to be errors, but now they\n+    // trigger a lint (that is allowed):\n+    if let _ = 5 {}\n+    while let _ = 5 { break; }\n+}\n+```"}, {"sha": "a6bbd93750575cb3093e3f34ff7236f0a9ffc994", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/309fd8a6fb059d38ea56274968feff2ef738184b/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309fd8a6fb059d38ea56274968feff2ef738184b/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=309fd8a6fb059d38ea56274968feff2ef738184b", "patch": "@@ -280,6 +280,12 @@ declare_lint! {\n     \"detects name collision with an existing but unstable method\"\n }\n \n+declare_lint! {\n+    pub IRREFUTABLE_LET_PATTERNS,\n+    Deny,\n+    \"detects irrefutable patterns in if-let and while-let statements\"\n+}\n+\n declare_lint! {\n     pub UNUSED_LABELS,\n     Allow,\n@@ -361,6 +367,7 @@ impl LintPass for HardwiredLints {\n             BARE_TRAIT_OBJECTS,\n             ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n             UNSTABLE_NAME_COLLISIONS,\n+            IRREFUTABLE_LET_PATTERNS,\n             DUPLICATE_ASSOCIATED_TYPE_BINDINGS,\n             DUPLICATE_MACRO_EXPORTS,\n             INTRA_DOC_LINK_RESOLUTION_FAILURE,"}, {"sha": "4ac896d84ff6e97f5ca68a22173f0eee4fa10fc4", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 35, "deletions": 22, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/309fd8a6fb059d38ea56274968feff2ef738184b/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309fd8a6fb059d38ea56274968feff2ef738184b/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=309fd8a6fb059d38ea56274968feff2ef738184b", "patch": "@@ -371,43 +371,56 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                 NotUseful => {\n                     match source {\n                         hir::MatchSource::IfLetDesugar { .. } => {\n-                            if printed_if_let_err {\n-                                // we already printed an irrefutable if-let pattern error.\n-                                // We don't want two, that's just confusing.\n+                            if cx.tcx.features().irrefutable_let_patterns {\n+                                cx.tcx.lint_node(\n+                                    lint::builtin::IRREFUTABLE_LET_PATTERNS,\n+                                    hir_pat.id, pat.span,\n+                                    \"irrefutable if-let pattern\");\n                             } else {\n-                                // find the first arm pattern so we can use its span\n-                                let &(ref first_arm_pats, _) = &arms[0];\n-                                let first_pat = &first_arm_pats[0];\n-                                let span = first_pat.0.span;\n-                                struct_span_err!(cx.tcx.sess, span, E0162,\n-                                                \"irrefutable if-let pattern\")\n-                                    .span_label(span, \"irrefutable pattern\")\n-                                    .emit();\n-                                printed_if_let_err = true;\n+                                if printed_if_let_err {\n+                                    // we already printed an irrefutable if-let pattern error.\n+                                    // We don't want two, that's just confusing.\n+                                } else {\n+                                    // find the first arm pattern so we can use its span\n+                                    let &(ref first_arm_pats, _) = &arms[0];\n+                                    let first_pat = &first_arm_pats[0];\n+                                    let span = first_pat.0.span;\n+                                    struct_span_err!(cx.tcx.sess, span, E0162,\n+                                                    \"irrefutable if-let pattern\")\n+                                        .span_label(span, \"irrefutable pattern\")\n+                                        .emit();\n+                                    printed_if_let_err = true;\n+                                }\n                             }\n                         },\n \n                         hir::MatchSource::WhileLetDesugar => {\n-                            // find the first arm pattern so we can use its span\n-                            let &(ref first_arm_pats, _) = &arms[0];\n-                            let first_pat = &first_arm_pats[0];\n-                            let span = first_pat.0.span;\n-\n                             // check which arm we're on.\n                             match arm_index {\n                                 // The arm with the user-specified pattern.\n                                 0 => {\n                                     cx.tcx.lint_node(\n-                                            lint::builtin::UNREACHABLE_PATTERNS,\n+                                        lint::builtin::UNREACHABLE_PATTERNS,\n                                         hir_pat.id, pat.span,\n                                         \"unreachable pattern\");\n                                 },\n                                 // The arm with the wildcard pattern.\n                                 1 => {\n-                                    struct_span_err!(cx.tcx.sess, span, E0165,\n-                                                     \"irrefutable while-let pattern\")\n-                                        .span_label(span, \"irrefutable pattern\")\n-                                        .emit();\n+                                    if cx.tcx.features().irrefutable_let_patterns {\n+                                        cx.tcx.lint_node(\n+                                            lint::builtin::IRREFUTABLE_LET_PATTERNS,\n+                                            hir_pat.id, pat.span,\n+                                            \"irrefutable while-let pattern\");\n+                                    } else {\n+                                        // find the first arm pattern so we can use its span\n+                                        let &(ref first_arm_pats, _) = &arms[0];\n+                                        let first_pat = &first_arm_pats[0];\n+                                        let span = first_pat.0.span;\n+                                        struct_span_err!(cx.tcx.sess, span, E0165,\n+                                                         \"irrefutable while-let pattern\")\n+                                            .span_label(span, \"irrefutable pattern\")\n+                                            .emit();\n+                                    }\n                                 },\n                                 _ => bug!(),\n                             }"}, {"sha": "51d7a2369954424173e918b1dd8b3a91d4d63314", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/309fd8a6fb059d38ea56274968feff2ef738184b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309fd8a6fb059d38ea56274968feff2ef738184b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=309fd8a6fb059d38ea56274968feff2ef738184b", "patch": "@@ -458,6 +458,9 @@ declare_features! (\n     // Scoped attributes\n     (active, tool_attributes, \"1.25.0\", Some(44690), None),\n \n+    // allow irrefutable patterns in if-let and while-let statements (RFC 2086)\n+    (active, irrefutable_let_patterns, \"1.27.0\", Some(44495), None),\n+\n     // Allows use of the :literal macro fragment specifier (RFC 1576)\n     (active, macro_literal_matcher, \"1.27.0\", Some(35625), None),\n "}, {"sha": "7bcddbb6a2f161271e1879c8105a040acb8008c1", "filename": "src/test/compile-fail/feature-gate-without_gate_irrefutable_pattern.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/309fd8a6fb059d38ea56274968feff2ef738184b/src%2Ftest%2Fcompile-fail%2Ffeature-gate-without_gate_irrefutable_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309fd8a6fb059d38ea56274968feff2ef738184b/src%2Ftest%2Fcompile-fail%2Ffeature-gate-without_gate_irrefutable_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-without_gate_irrefutable_pattern.rs?ref=309fd8a6fb059d38ea56274968feff2ef738184b", "patch": "@@ -0,0 +1,17 @@\n+// gate-test-irrefutable_let_patterns\n+\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[allow(irrefutable_let_patterns)]\n+fn main() {\n+    if let _ = 5 {}\n+    //~^ ERROR 15:12: 15:13: irrefutable if-let pattern [E0162]\n+}"}, {"sha": "8c9a24f4e72225a089e85fb56f0c892ba4e67288", "filename": "src/test/compile-fail/should-fail-no_gate_irrefutable_if_let_pattern.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/309fd8a6fb059d38ea56274968feff2ef738184b/src%2Ftest%2Fcompile-fail%2Fshould-fail-no_gate_irrefutable_if_let_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309fd8a6fb059d38ea56274968feff2ef738184b/src%2Ftest%2Fcompile-fail%2Fshould-fail-no_gate_irrefutable_if_let_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fshould-fail-no_gate_irrefutable_if_let_pattern.rs?ref=309fd8a6fb059d38ea56274968feff2ef738184b", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// should-fail-irrefutable_let_patterns\n+fn main() {\n+    if let _ = 5 {}\n+    //~^ ERROR irrefutable if-let pattern [E0162]\n+}"}, {"sha": "6f95f10c0d93f23c241829c5097165d23e8e6a59", "filename": "src/test/compile-fail/should-fail-with_gate_irrefutable_pattern_deny.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/309fd8a6fb059d38ea56274968feff2ef738184b/src%2Ftest%2Fcompile-fail%2Fshould-fail-with_gate_irrefutable_pattern_deny.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309fd8a6fb059d38ea56274968feff2ef738184b/src%2Ftest%2Fcompile-fail%2Fshould-fail-with_gate_irrefutable_pattern_deny.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fshould-fail-with_gate_irrefutable_pattern_deny.rs?ref=309fd8a6fb059d38ea56274968feff2ef738184b", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(irrefutable_let_patterns)]\n+\n+// should-fail-irrefutable_let_patterns_with_gate\n+fn main() {\n+    if let _ = 5 {}\n+    //~^ ERROR irrefutable if-let pattern [irrefutable_let_patterns]\n+}"}, {"sha": "ea114b63be73a81047ba437087b702f718dc2fb0", "filename": "src/test/run-pass/allow_irrefutable_let_patterns.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/309fd8a6fb059d38ea56274968feff2ef738184b/src%2Ftest%2Frun-pass%2Fallow_irrefutable_let_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309fd8a6fb059d38ea56274968feff2ef738184b/src%2Ftest%2Frun-pass%2Fallow_irrefutable_let_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallow_irrefutable_let_patterns.rs?ref=309fd8a6fb059d38ea56274968feff2ef738184b", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(irrefutable_let_patterns)]\n+\n+// must-compile-successfully-irrefutable_let_patterns_with_gate\n+#[allow(irrefutable_let_patterns)]\n+fn main() {\n+    if let _ = 5 {}\n+\n+    while let _ = 5 {\n+        break;\n+    }\n+}"}]}