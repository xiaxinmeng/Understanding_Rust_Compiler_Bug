{"sha": "37998ab508d5d9fa0d465d7b535dc673087dda8f", "node_id": "C_kwDOAAsO6NoAKDM3OTk4YWI1MDhkNWQ5ZmEwZDQ2NWQ3YjUzNWRjNjczMDg3ZGRhOGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-11T17:33:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-11T17:33:51Z"}, "message": "Auto merge of #112530 - matthiaskrgr:rollup-qee1kc1, r=matthiaskrgr\n\nRollup of 3 pull requests\n\nSuccessful merges:\n\n - #112487 (Update documentation for `tools` defaults)\n - #112513 (Dont compute `opt_suggest_box_span` span for TAIT)\n - #112528 (bootstrap: Don't override `debuginfo-level = 1` to mean `line-tables-only`)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2be4a02adef03e0b830bd73546caa6b9c61c113c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2be4a02adef03e0b830bd73546caa6b9c61c113c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37998ab508d5d9fa0d465d7b535dc673087dda8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37998ab508d5d9fa0d465d7b535dc673087dda8f", "html_url": "https://github.com/rust-lang/rust/commit/37998ab508d5d9fa0d465d7b535dc673087dda8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37998ab508d5d9fa0d465d7b535dc673087dda8f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81c02da94e5f5ec1ec4732e75049c3a3cb4d6c7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/81c02da94e5f5ec1ec4732e75049c3a3cb4d6c7a", "html_url": "https://github.com/rust-lang/rust/commit/81c02da94e5f5ec1ec4732e75049c3a3cb4d6c7a"}, {"sha": "c1f2da56836ca3244d2610112c06d31bd5e7caf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1f2da56836ca3244d2610112c06d31bd5e7caf2", "html_url": "https://github.com/rust-lang/rust/commit/c1f2da56836ca3244d2610112c06d31bd5e7caf2"}], "stats": {"total": 269, "additions": 139, "deletions": 130}, "files": [{"sha": "444ff90595c2318e5102cb4b72bc374a37f514d0", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37998ab508d5d9fa0d465d7b535dc673087dda8f/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37998ab508d5d9fa0d465d7b535dc673087dda8f/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=37998ab508d5d9fa0d465d7b535dc673087dda8f", "patch": "@@ -510,6 +510,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ..\n                 } = self.type_var_origin(expected)? else { return None; };\n \n+                let Some(rpit_local_def_id) = rpit_def_id.as_local() else { return None; };\n+                if !matches!(\n+                    self.tcx.hir().expect_item(rpit_local_def_id).expect_opaque_ty().origin,\n+                    hir::OpaqueTyOrigin::FnReturn(..)\n+                ) {\n+                    return None;\n+                }\n+\n                 let sig = self.body_fn_sig()?;\n \n                 let substs = sig.output().walk().find_map(|arg| {"}, {"sha": "79157eae7ed6d9d4f235904f56b9f55687bf328c", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 4, "deletions": 109, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/37998ab508d5d9fa0d465d7b535dc673087dda8f/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37998ab508d5d9fa0d465d7b535dc673087dda8f/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=37998ab508d5d9fa0d465d7b535dc673087dda8f", "patch": "@@ -36,9 +36,7 @@\n //! ```\n \n use crate::FnCtxt;\n-use rustc_errors::{\n-    struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan,\n-};\n+use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, Visitor};\n@@ -58,7 +56,7 @@ use rustc_middle::ty::visit::TypeVisitableExt;\n use rustc_middle::ty::{self, Ty, TypeAndMut};\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n-use rustc_span::{self, BytePos, DesugaringKind, Span};\n+use rustc_span::{self, DesugaringKind};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n@@ -1702,9 +1700,6 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let mut err = fcx.err_ctxt().report_mismatched_types(cause, expected, found, ty_err);\n \n-        let mut pointing_at_return_type = false;\n-        let mut fn_output = None;\n-\n         let parent_id = fcx.tcx.hir().parent_id(id);\n         let parent = fcx.tcx.hir().get(parent_id);\n         if let Some(expr) = expression\n@@ -1717,7 +1712,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         // label pointing out the cause for the type coercion will be wrong\n         // as prior return coercions would not be relevant (#57664).\n         let fn_decl = if let (Some(expr), Some(blk_id)) = (expression, blk_id) {\n-            pointing_at_return_type =\n+            let pointing_at_return_type =\n                 fcx.suggest_mismatched_types_on_tail(&mut err, expr, expected, found, blk_id);\n             if let (Some(cond_expr), true, false) = (\n                 fcx.tcx.hir().get_if_cause(expr.hir_id),\n@@ -1749,7 +1744,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n \n         if let Some((fn_id, fn_decl, can_suggest)) = fn_decl {\n             if blk_id.is_none() {\n-                pointing_at_return_type |= fcx.suggest_missing_return_type(\n+                fcx.suggest_missing_return_type(\n                     &mut err,\n                     &fn_decl,\n                     expected,\n@@ -1758,9 +1753,6 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     fn_id,\n                 );\n             }\n-            if !pointing_at_return_type {\n-                fn_output = Some(&fn_decl.output); // `impl Trait` return type\n-            }\n         }\n \n         let parent_id = fcx.tcx.hir().get_parent_item(id);\n@@ -1795,106 +1787,9 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n             );\n         }\n \n-        if let (Some(sp), Some(fn_output)) = (ret_coercion_span, fn_output) {\n-            self.add_impl_trait_explanation(&mut err, cause, fcx, expected, sp, fn_output);\n-        }\n-\n         err\n     }\n \n-    fn add_impl_trait_explanation<'a>(\n-        &self,\n-        err: &mut Diagnostic,\n-        cause: &ObligationCause<'tcx>,\n-        fcx: &FnCtxt<'a, 'tcx>,\n-        expected: Ty<'tcx>,\n-        sp: Span,\n-        fn_output: &hir::FnRetTy<'_>,\n-    ) {\n-        let return_sp = fn_output.span();\n-        err.span_label(return_sp, \"expected because this return type...\");\n-        err.span_label(\n-            sp,\n-            format!(\"...is found to be `{}` here\", fcx.resolve_vars_with_obligations(expected)),\n-        );\n-        let impl_trait_msg = \"for information on `impl Trait`, see \\\n-                <https://doc.rust-lang.org/book/ch10-02-traits.html\\\n-                #returning-types-that-implement-traits>\";\n-        let trait_obj_msg = \"for information on trait objects, see \\\n-                <https://doc.rust-lang.org/book/ch17-02-trait-objects.html\\\n-                #using-trait-objects-that-allow-for-values-of-different-types>\";\n-        err.note(\"to return `impl Trait`, all returned values must be of the same type\");\n-        err.note(impl_trait_msg);\n-        let snippet = fcx\n-            .tcx\n-            .sess\n-            .source_map()\n-            .span_to_snippet(return_sp)\n-            .unwrap_or_else(|_| \"dyn Trait\".to_string());\n-        let mut snippet_iter = snippet.split_whitespace();\n-        let has_impl = snippet_iter.next().is_some_and(|s| s == \"impl\");\n-        // Only suggest `Box<dyn Trait>` if `Trait` in `impl Trait` is object safe.\n-        let mut is_object_safe = false;\n-        if let hir::FnRetTy::Return(ty) = fn_output\n-            // Get the return type.\n-            && let hir::TyKind::OpaqueDef(..) = ty.kind\n-        {\n-            let ty = fcx.astconv().ast_ty_to_ty( ty);\n-            // Get the `impl Trait`'s `DefId`.\n-            if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = ty.kind()\n-                // Get the `impl Trait`'s `Item` so that we can get its trait bounds and\n-                // get the `Trait`'s `DefId`.\n-                && let hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds, .. }) =\n-                    fcx.tcx.hir().expect_item(def_id.expect_local()).kind\n-            {\n-                // Are of this `impl Trait`'s traits object safe?\n-                is_object_safe = bounds.iter().all(|bound| {\n-                    bound\n-                        .trait_ref()\n-                        .and_then(|t| t.trait_def_id())\n-                        .is_some_and(|def_id| {\n-                            fcx.tcx.check_is_object_safe(def_id)\n-                        })\n-                })\n-            }\n-        };\n-        if has_impl {\n-            if is_object_safe {\n-                err.multipart_suggestion(\n-                    \"you could change the return type to be a boxed trait object\",\n-                    vec![\n-                        (return_sp.with_hi(return_sp.lo() + BytePos(4)), \"Box<dyn\".to_string()),\n-                        (return_sp.shrink_to_hi(), \">\".to_string()),\n-                    ],\n-                    Applicability::MachineApplicable,\n-                );\n-                let sugg = [sp, cause.span]\n-                    .into_iter()\n-                    .flat_map(|sp| {\n-                        [\n-                            (sp.shrink_to_lo(), \"Box::new(\".to_string()),\n-                            (sp.shrink_to_hi(), \")\".to_string()),\n-                        ]\n-                        .into_iter()\n-                    })\n-                    .collect::<Vec<_>>();\n-                err.multipart_suggestion(\n-                    \"if you change the return type to expect trait objects, box the returned \\\n-                     expressions\",\n-                    sugg,\n-                    Applicability::MaybeIncorrect,\n-                );\n-            } else {\n-                err.help(format!(\n-                    \"if the trait `{}` were object safe, you could return a boxed trait object\",\n-                    &snippet[5..]\n-                ));\n-            }\n-            err.note(trait_obj_msg);\n-        }\n-        err.help(\"you could instead create a new `enum` with a variant for each returned type\");\n-    }\n-\n     /// Checks whether the return type is unsized via an obligation, which makes\n     /// sure we consider `dyn Trait: Sized` where clauses, which are trivially\n     /// false but technically valid for typeck."}, {"sha": "3e4812e7ca995d4553089c2d316e1e9952c48519", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37998ab508d5d9fa0d465d7b535dc673087dda8f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37998ab508d5d9fa0d465d7b535dc673087dda8f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=37998ab508d5d9fa0d465d7b535dc673087dda8f", "patch": "@@ -847,7 +847,25 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 ) {\n                     err.subdiagnostic(subdiag);\n                 }\n-                if let Some(ret_sp) = opt_suggest_box_span {\n+                // don't suggest wrapping either blocks in `if .. {} else {}`\n+                let is_empty_arm = |id| {\n+                    let hir::Node::Block(blk) = self.tcx.hir().get(id)\n+                    else {\n+                        return false;\n+                    };\n+                    if blk.expr.is_some() || !blk.stmts.is_empty() {\n+                        return false;\n+                    }\n+                    let Some((_, hir::Node::Expr(expr))) = self.tcx.hir().parent_iter(id).nth(1)\n+                    else {\n+                        return false;\n+                    };\n+                    matches!(expr.kind, hir::ExprKind::If(..))\n+                };\n+                if let Some(ret_sp) = opt_suggest_box_span\n+                    && !is_empty_arm(then_id)\n+                    && !is_empty_arm(else_id)\n+                {\n                     self.suggest_boxing_for_return_impl_trait(\n                         err,\n                         ret_sp,"}, {"sha": "51d94c48f7ffb7fe8f6f1ddcd68cfbb037ac7fb0", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/37998ab508d5d9fa0d465d7b535dc673087dda8f/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37998ab508d5d9fa0d465d7b535dc673087dda8f/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=37998ab508d5d9fa0d465d7b535dc673087dda8f", "patch": "@@ -1649,12 +1649,7 @@ impl<'a> Builder<'a> {\n                 self.config.rust_debuginfo_level_tools\n             }\n         };\n-        if debuginfo_level == 1 {\n-            // Use less debuginfo than the default to save on disk space.\n-            cargo.env(profile_var(\"DEBUG\"), \"line-tables-only\");\n-        } else {\n-            cargo.env(profile_var(\"DEBUG\"), debuginfo_level.to_string());\n-        };\n+        cargo.env(profile_var(\"DEBUG\"), debuginfo_level.to_string());\n         if self.cc[&target].args().iter().any(|arg| arg == \"-gz\") {\n             rustflags.arg(\"-Clink-arg=-gz\");\n         }"}, {"sha": "b521ad75d63a1fb8172e92803dd193f8cb99f3b6", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 72, "deletions": 14, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/37998ab508d5d9fa0d465d7b535dc673087dda8f/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37998ab508d5d9fa0d465d7b535dc673087dda8f/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=37998ab508d5d9fa0d465d7b535dc673087dda8f", "patch": "@@ -10,7 +10,7 @@ use std::cell::{Cell, RefCell};\n use std::cmp;\n use std::collections::{HashMap, HashSet};\n use std::env;\n-use std::fmt;\n+use std::fmt::{self, Display};\n use std::fs;\n use std::io::IsTerminal;\n use std::path::{Path, PathBuf};\n@@ -50,6 +50,57 @@ pub enum DryRun {\n     UserSelected,\n }\n \n+#[derive(Copy, Clone, Default)]\n+pub enum DebuginfoLevel {\n+    #[default]\n+    None,\n+    LineTablesOnly,\n+    Limited,\n+    Full,\n+}\n+\n+// NOTE: can't derive(Deserialize) because the intermediate trip through toml::Value only\n+// deserializes i64, and derive() only generates visit_u64\n+impl<'de> Deserialize<'de> for DebuginfoLevel {\n+    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n+    where\n+        D: Deserializer<'de>,\n+    {\n+        use serde::de::Error;\n+\n+        Ok(match Deserialize::deserialize(deserializer)? {\n+            StringOrInt::String(\"none\") | StringOrInt::Int(0) => DebuginfoLevel::None,\n+            StringOrInt::String(\"line-tables-only\") => DebuginfoLevel::LineTablesOnly,\n+            StringOrInt::String(\"limited\") | StringOrInt::Int(1) => DebuginfoLevel::Limited,\n+            StringOrInt::String(\"full\") | StringOrInt::Int(2) => DebuginfoLevel::Full,\n+            StringOrInt::Int(n) => {\n+                let other = serde::de::Unexpected::Signed(n);\n+                return Err(D::Error::invalid_value(other, &\"expected 0, 1, or 2\"));\n+            }\n+            StringOrInt::String(s) => {\n+                let other = serde::de::Unexpected::Str(s);\n+                return Err(D::Error::invalid_value(\n+                    other,\n+                    &\"expected none, line-tables-only, limited, or full\",\n+                ));\n+            }\n+        })\n+    }\n+}\n+\n+/// Suitable for passing to `-C debuginfo`\n+impl Display for DebuginfoLevel {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        use DebuginfoLevel::*;\n+        f.write_str(match self {\n+            None => \"0\",\n+            LineTablesOnly => \"line-tables-only\",\n+            Limited => \"1\",\n+            Full => \"2\",\n+        })\n+    }\n+}\n+\n /// Global configuration for the entire build and/or bootstrap.\n ///\n /// This structure is parsed from `config.toml`, and some of the fields are inferred from `git` or build-time parameters.\n@@ -159,10 +210,10 @@ pub struct Config {\n     pub rust_overflow_checks: bool,\n     pub rust_overflow_checks_std: bool,\n     pub rust_debug_logging: bool,\n-    pub rust_debuginfo_level_rustc: u32,\n-    pub rust_debuginfo_level_std: u32,\n-    pub rust_debuginfo_level_tools: u32,\n-    pub rust_debuginfo_level_tests: u32,\n+    pub rust_debuginfo_level_rustc: DebuginfoLevel,\n+    pub rust_debuginfo_level_std: DebuginfoLevel,\n+    pub rust_debuginfo_level_tools: DebuginfoLevel,\n+    pub rust_debuginfo_level_tests: DebuginfoLevel,\n     pub rust_split_debuginfo: SplitDebuginfo,\n     pub rust_rpath: bool,\n     pub rustc_parallel: bool,\n@@ -810,6 +861,13 @@ impl Default for StringOrBool {\n     }\n }\n \n+#[derive(Deserialize)]\n+#[serde(untagged)]\n+enum StringOrInt<'a> {\n+    String(&'a str),\n+    Int(i64),\n+}\n+\n define_config! {\n     /// TOML representation of how the Rust build is configured.\n     struct Rust {\n@@ -822,11 +880,11 @@ define_config! {\n         overflow_checks: Option<bool> = \"overflow-checks\",\n         overflow_checks_std: Option<bool> = \"overflow-checks-std\",\n         debug_logging: Option<bool> = \"debug-logging\",\n-        debuginfo_level: Option<u32> = \"debuginfo-level\",\n-        debuginfo_level_rustc: Option<u32> = \"debuginfo-level-rustc\",\n-        debuginfo_level_std: Option<u32> = \"debuginfo-level-std\",\n-        debuginfo_level_tools: Option<u32> = \"debuginfo-level-tools\",\n-        debuginfo_level_tests: Option<u32> = \"debuginfo-level-tests\",\n+        debuginfo_level: Option<DebuginfoLevel> = \"debuginfo-level\",\n+        debuginfo_level_rustc: Option<DebuginfoLevel> = \"debuginfo-level-rustc\",\n+        debuginfo_level_std: Option<DebuginfoLevel> = \"debuginfo-level-std\",\n+        debuginfo_level_tools: Option<DebuginfoLevel> = \"debuginfo-level-tools\",\n+        debuginfo_level_tests: Option<DebuginfoLevel> = \"debuginfo-level-tests\",\n         split_debuginfo: Option<String> = \"split-debuginfo\",\n         run_dsymutil: Option<bool> = \"run-dsymutil\",\n         backtrace: Option<bool> = \"backtrace\",\n@@ -1478,17 +1536,17 @@ impl Config {\n \n         config.rust_debug_logging = debug_logging.unwrap_or(config.rust_debug_assertions);\n \n-        let with_defaults = |debuginfo_level_specific: Option<u32>| {\n+        let with_defaults = |debuginfo_level_specific: Option<_>| {\n             debuginfo_level_specific.or(debuginfo_level).unwrap_or(if debug == Some(true) {\n-                1\n+                DebuginfoLevel::Limited\n             } else {\n-                0\n+                DebuginfoLevel::None\n             })\n         };\n         config.rust_debuginfo_level_rustc = with_defaults(debuginfo_level_rustc);\n         config.rust_debuginfo_level_std = with_defaults(debuginfo_level_std);\n         config.rust_debuginfo_level_tools = with_defaults(debuginfo_level_tools);\n-        config.rust_debuginfo_level_tests = debuginfo_level_tests.unwrap_or(0);\n+        config.rust_debuginfo_level_tests = debuginfo_level_tests.unwrap_or(DebuginfoLevel::None);\n \n         let download_rustc = config.download_rustc_commit.is_some();\n         // See https://github.com/rust-lang/compiler-team/issues/326"}, {"sha": "79424f28d27b716675c89c2474b724c166cecf56", "filename": "src/bootstrap/defaults/config.tools.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37998ab508d5d9fa0d465d7b535dc673087dda8f/src%2Fbootstrap%2Fdefaults%2Fconfig.tools.toml", "raw_url": "https://github.com/rust-lang/rust/raw/37998ab508d5d9fa0d465d7b535dc673087dda8f/src%2Fbootstrap%2Fdefaults%2Fconfig.tools.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2Fconfig.tools.toml?ref=37998ab508d5d9fa0d465d7b535dc673087dda8f", "patch": "@@ -9,6 +9,8 @@ debug-logging = true\n incremental = true\n # Download rustc from CI instead of building it from source.\n # This cuts compile times by almost 60x, but means you can't modify the compiler.\n+# Using these defaults will download the stage2 compiler (see `download-rustc`\n+# setting) and the stage2 toolchain should therefore be used for these defaults.\n download-rustc = \"if-unchanged\"\n \n [build]"}, {"sha": "e13f3f0bd5eb75082d7c7b017f27b653d95bc237", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37998ab508d5d9fa0d465d7b535dc673087dda8f/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37998ab508d5d9fa0d465d7b535dc673087dda8f/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=37998ab508d5d9fa0d465d7b535dc673087dda8f", "patch": "@@ -176,6 +176,14 @@ pub fn setup(config: &Config, profile: Profile) {\n         );\n     }\n \n+    if profile == Profile::Tools {\n+        eprintln!();\n+        eprintln!(\n+            \"note: the `tools` profile sets up the `stage2` toolchain (use \\\n+            `rustup toolchain link 'name' host/build/stage2` to use rustc)\"\n+        )\n+    }\n+\n     let path = &config.config.clone().unwrap_or(PathBuf::from(\"config.toml\"));\n     setup_config_toml(path, profile, config);\n }"}, {"sha": "befd768b1818a6322d9b170107a889d2319b89ec", "filename": "tests/ui/impl-trait/dont-suggest-box-on-empty-else-arm.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/37998ab508d5d9fa0d465d7b535dc673087dda8f/tests%2Fui%2Fimpl-trait%2Fdont-suggest-box-on-empty-else-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37998ab508d5d9fa0d465d7b535dc673087dda8f/tests%2Fui%2Fimpl-trait%2Fdont-suggest-box-on-empty-else-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fdont-suggest-box-on-empty-else-arm.rs?ref=37998ab508d5d9fa0d465d7b535dc673087dda8f", "patch": "@@ -0,0 +1,9 @@\n+fn test() -> impl std::fmt::Debug {\n+    if true {\n+        \"boo2\"\n+    } else {\n+        //~^ ERROR `if` and `else` have incompatible types\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9b63911da7aa35489c3557fa058dab8c79cb6da7", "filename": "tests/ui/impl-trait/dont-suggest-box-on-empty-else-arm.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37998ab508d5d9fa0d465d7b535dc673087dda8f/tests%2Fui%2Fimpl-trait%2Fdont-suggest-box-on-empty-else-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37998ab508d5d9fa0d465d7b535dc673087dda8f/tests%2Fui%2Fimpl-trait%2Fdont-suggest-box-on-empty-else-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fdont-suggest-box-on-empty-else-arm.stderr?ref=37998ab508d5d9fa0d465d7b535dc673087dda8f", "patch": "@@ -0,0 +1,16 @@\n+error[E0308]: `if` and `else` have incompatible types\n+  --> $DIR/dont-suggest-box-on-empty-else-arm.rs:4:12\n+   |\n+LL |       if true {\n+   |       ------- `if` and `else` have incompatible types\n+LL |           \"boo2\"\n+   |           ------ expected because of this\n+LL |       } else {\n+   |  ____________^\n+LL | |\n+LL | |     }\n+   | |_____^ expected `&str`, found `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}