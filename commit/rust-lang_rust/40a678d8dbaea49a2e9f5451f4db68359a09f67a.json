{"sha": "40a678d8dbaea49a2e9f5451f4db68359a09f67a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwYTY3OGQ4ZGJhZWE0OWEyZTlmNTQ1MWY0ZGI2ODM1OWEwOWY2N2E=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-09-30T21:45:18Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-09-30T21:45:18Z"}, "message": "Use unsized coercions for null ptr tests", "tree": {"sha": "ad24da54125054d055002b22108eedb063fb5813", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad24da54125054d055002b22108eedb063fb5813"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40a678d8dbaea49a2e9f5451f4db68359a09f67a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40a678d8dbaea49a2e9f5451f4db68359a09f67a", "html_url": "https://github.com/rust-lang/rust/commit/40a678d8dbaea49a2e9f5451f4db68359a09f67a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40a678d8dbaea49a2e9f5451f4db68359a09f67a/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c6118339a6d143983c0096b3053aefca694352b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c6118339a6d143983c0096b3053aefca694352b", "html_url": "https://github.com/rust-lang/rust/commit/5c6118339a6d143983c0096b3053aefca694352b"}], "stats": {"total": 66, "additions": 41, "deletions": 25}, "files": [{"sha": "98436f0e1d1cd968d613e70acfe8995c8b8a5257", "filename": "src/libcore/tests/ptr.rs", "status": "modified", "additions": 41, "deletions": 25, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/40a678d8dbaea49a2e9f5451f4db68359a09f67a/src%2Flibcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40a678d8dbaea49a2e9f5451f4db68359a09f67a/src%2Flibcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fptr.rs?ref=40a678d8dbaea49a2e9f5451f4db68359a09f67a", "patch": "@@ -8,26 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::mem;\n use core::ptr::*;\n use core::cell::RefCell;\n \n-\n-/// Create a null pointer to a mutable slice.  This is implemented like\n-/// `slice::from_raw_parts_mut`, which we can't use directly because\n-/// having a null `&mut [T]` even temporarily is UB.\n-fn null_slice<T>() -> *mut [T] {\n-    unsafe {\n-        #[repr(C)]\n-        struct Repr<T> {\n-            pub data: *mut T,\n-            pub len: usize,\n-        }\n-\n-        mem::transmute(Repr { data: null_mut::<T>(), len: 0 })\n-    }\n-}\n-\n #[test]\n fn test() {\n     unsafe {\n@@ -80,7 +63,7 @@ fn test_is_null() {\n     let mq = unsafe { mp.offset(1) };\n     assert!(!mq.is_null());\n \n-    // Pointers to unsized types\n+    // Pointers to unsized types -- slices\n     let s: &mut [u8] = &mut [1, 2, 3];\n     let cs: *const [u8] = s;\n     assert!(!cs.is_null());\n@@ -94,11 +77,24 @@ fn test_is_null() {\n     let mz: *mut [u8] = &mut [];\n     assert!(!mz.is_null());\n \n-    let ncs: *const [u8] = null_slice();\n+    let ncs: *const [u8] = null::<[u8; 3]>();\n     assert!(ncs.is_null());\n \n-    let nms: *mut [u8] = null_slice();\n+    let nms: *mut [u8] = null_mut::<[u8; 3]>();\n     assert!(nms.is_null());\n+\n+    // Pointers to unsized types -- trait objects\n+    let ci: *const ToString = &3;\n+    assert!(!ci.is_null());\n+\n+    let mi: *mut ToString = &mut 3;\n+    assert!(!mi.is_null());\n+\n+    let nci: *const ToString = null::<isize>();\n+    assert!(nci.is_null());\n+\n+    let nmi: *mut ToString = null_mut::<isize>();\n+    assert!(nmi.is_null());\n }\n \n #[test]\n@@ -123,7 +119,7 @@ fn test_as_ref() {\n             assert_eq!(p.as_ref().unwrap(), &2);\n         }\n \n-        // Pointers to unsized types\n+        // Pointers to unsized types -- slices\n         let s: &mut [u8] = &mut [1, 2, 3];\n         let cs: *const [u8] = s;\n         assert_eq!(cs.as_ref(), Some(&*s));\n@@ -137,11 +133,24 @@ fn test_as_ref() {\n         let mz: *mut [u8] = &mut [];\n         assert_eq!(mz.as_ref(), Some(&[][..]));\n \n-        let ncs: *const [u8] = null_slice();\n+        let ncs: *const [u8] = null::<[u8; 3]>();\n         assert_eq!(ncs.as_ref(), None);\n \n-        let nms: *mut [u8] = null_slice();\n+        let nms: *mut [u8] = null_mut::<[u8; 3]>();\n         assert_eq!(nms.as_ref(), None);\n+\n+        // Pointers to unsized types -- trait objects\n+        let ci: *const ToString = &3;\n+        assert!(ci.as_ref().is_some());\n+\n+        let mi: *mut ToString = &mut 3;\n+        assert!(mi.as_ref().is_some());\n+\n+        let nci: *const ToString = null::<isize>();\n+        assert!(nci.as_ref().is_none());\n+\n+        let nmi: *mut ToString = null_mut::<isize>();\n+        assert!(nmi.as_ref().is_none());\n     }\n }\n \n@@ -161,16 +170,23 @@ fn test_as_mut() {\n             assert!(p.as_mut().unwrap() == &mut 2);\n         }\n \n-        // Pointers to unsized types\n+        // Pointers to unsized types -- slices\n         let s: &mut [u8] = &mut [1, 2, 3];\n         let ms: *mut [u8] = s;\n         assert_eq!(ms.as_mut(), Some(s));\n \n         let mz: *mut [u8] = &mut [];\n         assert_eq!(mz.as_mut(), Some(&mut [][..]));\n \n-        let nms: *mut [u8] = null_slice();\n+        let nms: *mut [u8] = null_mut::<[u8; 3]>();\n         assert_eq!(nms.as_mut(), None);\n+\n+        // Pointers to unsized types -- trait objects\n+        let mi: *mut ToString = &mut 3;\n+        assert!(mi.as_mut().is_some());\n+\n+        let nmi: *mut ToString = null_mut::<isize>();\n+        assert!(nmi.as_mut().is_none());\n     }\n }\n "}]}