{"sha": "8fa66e8e07ca565119de195ceefb20cff50ae1ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmYTY2ZThlMDdjYTU2NTExOWRlMTk1Y2VlZmIyMGNmZjUwYWUxZWE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-13T02:32:14Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-14T03:07:10Z"}, "message": "librustc: Remove implicit self from the language, except for old-style drop blocks.", "tree": {"sha": "f9ae9910b40b04ae62daff56b8de1ae002765d2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9ae9910b40b04ae62daff56b8de1ae002765d2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fa66e8e07ca565119de195ceefb20cff50ae1ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fa66e8e07ca565119de195ceefb20cff50ae1ea", "html_url": "https://github.com/rust-lang/rust/commit/8fa66e8e07ca565119de195ceefb20cff50ae1ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fa66e8e07ca565119de195ceefb20cff50ae1ea/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a410652bc953137c8d579f218c2e3e68a9ef8c1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a410652bc953137c8d579f218c2e3e68a9ef8c1c", "html_url": "https://github.com/rust-lang/rust/commit/a410652bc953137c8d579f218c2e3e68a9ef8c1c"}], "stats": {"total": 734, "additions": 339, "deletions": 395}, "files": [{"sha": "3e7b9400e179a4dc5cfe0697a178156982f064fa", "filename": "doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -1135,7 +1135,7 @@ can sometimes make code awkward and parenthesis-filled.\n ~~~\n # struct Point { x: float, y: float }\n # enum Shape { Rectangle(Point, Point) }\n-# impl Shape { fn area() -> int { 0 } }\n+# impl Shape { fn area(&self) -> int { 0 } }\n let start = @Point { x: 10f, y: 20f };\n let end = ~Point { x: (*start).x + 100f, y: (*start).y + 100f };\n let rect = &Rectangle(*start, *end);\n@@ -1149,7 +1149,7 @@ dot), so in most cases, explicitly dereferencing the receiver is not necessary.\n ~~~\n # struct Point { x: float, y: float }\n # enum Shape { Rectangle(Point, Point) }\n-# impl Shape { fn area() -> int { 0 } }\n+# impl Shape { fn area(&self) -> int { 0 } }\n let start = @Point { x: 10f, y: 20f };\n let end = ~Point { x: start.x + 100f, y: start.y + 100f };\n let rect = &Rectangle(*start, *end);"}, {"sha": "1227f7859d8e52c29390ca73d8014b80a09db970", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -75,7 +75,6 @@ pub enum lint {\n     non_camel_case_types,\n     type_limits,\n     default_methods,\n-    deprecated_self,\n     deprecated_mutable_fields,\n     deprecated_drop,\n     foreign_mode,\n@@ -246,13 +245,6 @@ pub fn get_lint_dict() -> LintDict {\n             default: deny\n          }),\n \n-        (@~\"deprecated_self\",\n-         @LintSpec {\n-            lint: deprecated_self,\n-            desc: \"warn about deprecated uses of `self`\",\n-            default: warn\n-         }),\n-\n         (@~\"deprecated_mutable_fields\",\n          @LintSpec {\n             lint: deprecated_mutable_fields,\n@@ -497,7 +489,6 @@ fn check_item(i: @ast::item, cx: ty::ctxt) {\n     check_item_deprecated_modes(cx, i);\n     check_item_type_limits(cx, i);\n     check_item_default_methods(cx, i);\n-    check_item_deprecated_self(cx, i);\n     check_item_deprecated_mutable_fields(cx, i);\n     check_item_deprecated_drop(cx, i);\n }\n@@ -677,46 +668,6 @@ fn check_item_default_methods(cx: ty::ctxt, item: @ast::item) {\n     }\n }\n \n-fn check_item_deprecated_self(cx: ty::ctxt, item: @ast::item) {\n-    fn maybe_warn(cx: ty::ctxt,\n-                  item: @ast::item,\n-                  self_ty: ast::self_ty) {\n-        match self_ty.node {\n-            ast::sty_by_ref => {\n-                cx.sess.span_lint(\n-                    deprecated_self,\n-                    item.id,\n-                    item.id,\n-                    self_ty.span,\n-                    ~\"this method form is deprecated; use an explicit `self` \\\n-                      parameter or mark the method as static\");\n-            }\n-            _ => {}\n-        }\n-    }\n-\n-    match /*bad*/copy item.node {\n-        ast::item_trait(_, _, methods) => {\n-            for methods.each |method| {\n-                match /*bad*/copy *method {\n-                    ast::required(ty_method) => {\n-                        maybe_warn(cx, item, ty_method.self_ty);\n-                    }\n-                    ast::provided(method) => {\n-                        maybe_warn(cx, item, method.self_ty);\n-                    }\n-                }\n-            }\n-        }\n-        ast::item_impl(_, _, _, methods) => {\n-            for methods.each |method| {\n-                maybe_warn(cx, item, method.self_ty);\n-            }\n-        }\n-        _ => {}\n-    }\n-}\n-\n fn check_item_deprecated_mutable_fields(cx: ty::ctxt, item: @ast::item) {\n     match item.node {\n         ast::item_struct(struct_def, _) => {"}, {"sha": "9f5a79c4f818bdfb4ba480e5c3a8fa9ee072b4f2", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -56,6 +56,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteBareFnType,\n     ObsoleteNewtypeEnum,\n     ObsoleteMode,\n+    ObsoleteImplicitSelf,\n }\n \n impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -181,6 +182,11 @@ pub impl Parser {\n                 \"obsolete argument mode\",\n                 \"replace `-` or `++` mode with `+`\"\n             ),\n+            ObsoleteImplicitSelf => (\n+                \"implicit self\",\n+                \"use an explicit `self` declaration or declare the method as \\\n+                 static\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "815a8bfab5df9d01d69c990a432b1543b71e5c0e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -78,7 +78,7 @@ use parse::obsolete::{ObsoleteMutVector, ObsoleteTraitImplVisibility};\n use parse::obsolete::{ObsoleteRecordType, ObsoleteRecordPattern};\n use parse::obsolete::{ObsoleteAssertion, ObsoletePostFnTySigil};\n use parse::obsolete::{ObsoleteBareFnType, ObsoleteNewtypeEnum};\n-use parse::obsolete::{ObsoleteMode};\n+use parse::obsolete::{ObsoleteMode, ObsoleteImplicitSelf};\n use parse::prec::{as_prec, token_to_binop};\n use parse::token::{can_begin_expr, is_ident, is_ident_or_path};\n use parse::token::{is_plain_ident, INTERPOLATED, special_idents};\n@@ -471,6 +471,10 @@ pub impl Parser {\n             // XXX: Wrong. Shouldn't allow both static and self_ty\n             let self_ty = if is_static { static_sty } else { self_ty };\n \n+            if self_ty.node == sty_by_ref {\n+                self.obsolete(self_ty.span, ObsoleteImplicitSelf);\n+            }\n+\n             let hi = p.last_span.hi;\n             debug!(\"parse_trait_methods(): trait method signature ends in \\\n                     `%s`\",\n@@ -2981,6 +2985,10 @@ pub impl Parser {\n         // XXX: interaction between staticness, self_ty is broken now\n         let self_ty = if is_static { static_sty} else { self_ty };\n \n+        if self_ty.node == sty_by_ref {\n+            self.obsolete(self_ty.span, ObsoleteImplicitSelf);\n+        }\n+\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block(true);\n         let hi = body.span.hi;\n         let attrs = vec::append(attrs, inner_attrs);"}, {"sha": "7c6a920fdd02d250698fae521c2187cc2750fe21", "filename": "src/test/auxiliary/ambig_impl_2_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fauxiliary%2Fambig_impl_2_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fauxiliary%2Fambig_impl_2_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fambig_impl_2_lib.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n trait me {\n-    fn me() -> uint;\n+    fn me(&self) -> uint;\n }\n-impl me for uint { fn me() -> uint { self } }\n+impl me for uint { fn me(&self) -> uint { self } }"}, {"sha": "9dc27054ef7384aeaf955f3e43e6420c62bd2d8d", "filename": "src/test/auxiliary/cci_class_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -17,7 +17,7 @@ pub mod kitties {\n     }\n \n     pub impl cat {\n-        fn speak() {}\n+        fn speak(&self) {}\n     }\n \n     pub fn cat(in_x : uint, in_y : int) -> cat {"}, {"sha": "b4191ff1d68e5491fc026d90e42d4fa3331dd39c", "filename": "src/test/auxiliary/cci_impl_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -11,12 +11,12 @@\n #[link(name=\"cci_impl_lib\", vers=\"0.0\")];\n \n trait uint_helpers {\n-    fn to(v: uint, f: &fn(uint));\n+    fn to(self, v: uint, f: &fn(uint));\n }\n \n impl uint_helpers for uint {\n     #[inline]\n-    fn to(v: uint, f: &fn(uint)) {\n+    fn to(self, v: uint, f: &fn(uint)) {\n         let mut i = self;\n         while i < v {\n             f(i);"}, {"sha": "ea42a51ff11d98534194d0bc6ded7f25c18e2d18", "filename": "src/test/auxiliary/crate-method-reexport-grrrrrrr2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -16,11 +16,11 @@ pub mod name_pool {\n     pub type name_pool = ();\n \n     pub trait add {\n-        fn add(s: ~str);\n+        fn add(&self, s: ~str);\n     }\n \n     impl add for name_pool {\n-        fn add(s: ~str) {\n+        fn add(&self, s: ~str) {\n         }\n     }\n }\n@@ -31,11 +31,11 @@ pub mod rust {\n     pub type rt = @();\n \n     pub trait cx {\n-        fn cx();\n+        fn cx(&self);\n     }\n \n     impl cx for rt {\n-        fn cx() {\n+        fn cx(&self) {\n         }\n     }\n }"}, {"sha": "9f4f369b70def9d986f270975c8f573da48cdc42", "filename": "src/test/auxiliary/issue-2414-a.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fauxiliary%2Fissue-2414-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fauxiliary%2Fissue-2414-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2414-a.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -14,10 +14,10 @@\n type t1 = uint;\n \n trait foo {\n-    fn foo();\n+    fn foo(&self);\n }\n \n impl foo for ~str {\n-    fn foo() {}\n+    fn foo(&self) {}\n }\n "}, {"sha": "c09e64eac8cb44246c959cef420d189b1295986f", "filename": "src/test/auxiliary/issue-2526.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2526.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -56,5 +56,5 @@ fn context_res() -> context_res {\n pub type context = arc_destruct<context_res>;\n \n pub impl context {\n-    fn socket() { }\n+    fn socket(&self) { }\n }"}, {"sha": "7969128ce5285cf2059b564ccd40495853717c36", "filename": "src/test/auxiliary/issue_2472_b.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fauxiliary%2Fissue_2472_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fauxiliary%2Fissue_2472_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2472_b.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -12,13 +12,13 @@\n pub struct S(());\n \n pub impl S {\n-    fn foo() { }\n+    fn foo(&self) { }\n }\n \n pub trait T {\n-    fn bar();\n+    fn bar(&self);\n }\n \n impl T for S {\n-    fn bar() { }\n+    fn bar(&self) { }\n }"}, {"sha": "f7c866da9ae29ad6e7f45604fc9493e15f5a552e", "filename": "src/test/auxiliary/issue_3136_a.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fauxiliary%2Fissue_3136_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fauxiliary%2Fissue_3136_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_3136_a.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n trait x {\n-    fn use_x<T>();\n+    fn use_x<T>(&self);\n }\n struct y(());\n impl x for y { \n-    fn use_x<T>() {\n+    fn use_x<T>(&self) {\n         struct foo { //~ ERROR quux\n             i: ()\n         }"}, {"sha": "1c7ebd941c34be37bb1d41e73e6b4343fa255476", "filename": "src/test/auxiliary/trait_inheritance_auto_xc_2_aux.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_2_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_2_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_2_aux.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub trait Foo { fn f() -> int; }\n-pub trait Bar { fn g() -> int; }\n-pub trait Baz { fn h() -> int; }\n+pub trait Foo { fn f(&self) -> int; }\n+pub trait Bar { fn g(&self) -> int; }\n+pub trait Baz { fn h(&self) -> int; }\n \n pub struct A { x: int }\n \n-impl Foo for A { fn f() -> int { 10 } }\n-impl Bar for A { fn g() -> int { 20 } }\n-impl Baz for A { fn h() -> int { 30 } }\n+impl Foo for A { fn f(&self) -> int { 10 } }\n+impl Bar for A { fn g(&self) -> int { 20 } }\n+impl Baz for A { fn h(&self) -> int { 30 } }\n \n "}, {"sha": "d5949d1ce09962fc1752a34b4faec12b481964aa", "filename": "src/test/auxiliary/trait_inheritance_auto_xc_aux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_aux.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo { fn f() -> int; }\n-trait Bar { fn g() -> int; }\n-trait Baz { fn h() -> int; }\n+trait Foo { fn f(&self) -> int; }\n+trait Bar { fn g(&self) -> int; }\n+trait Baz { fn h(&self) -> int; }\n \n trait Quux: Foo + Bar + Baz { }\n "}, {"sha": "c9694fec61080f251549e0bfceb3f2ae363c56e3", "filename": "src/test/auxiliary/trait_inheritance_cross_trait_call_xc_aux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_cross_trait_call_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_cross_trait_call_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_cross_trait_call_xc_aux.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -10,13 +10,13 @@\n \n \n pub trait Foo {\n-    fn f() -> int;\n+    fn f(&self) -> int;\n }\n \n pub struct A {\n     x: int\n }\n \n impl Foo for A {\n-    fn f() -> int { 10 }\n+    fn f(&self) -> int { 10 }\n }"}, {"sha": "ce8c2a29544dbec194cdf6dd067e69f00e55a1f6", "filename": "src/test/compile-fail/ambig_impl_unify.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fambig_impl_unify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fambig_impl_unify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fambig_impl_unify.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n trait foo {\n-    fn foo() -> int;\n+    fn foo(&self) -> int;\n }\n \n impl foo for ~[uint] {\n-    fn foo() -> int {1} //~ NOTE candidate #1 is `__extensions__::foo`\n+    fn foo(&self) -> int {1} //~ NOTE candidate #1 is `__extensions__::foo`\n }\n \n impl foo for ~[int] {\n-    fn foo() -> int {2} //~ NOTE candidate #2 is `__extensions__::foo`\n+    fn foo(&self) -> int {2} //~ NOTE candidate #2 is `__extensions__::foo`\n }\n \n fn main() {"}, {"sha": "4993846f44559817dc13de9fd5cd085cde1cbded", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -16,7 +16,7 @@ struct cat {\n \n pub impl cat {\n \n-  fn speak() { self.meows += 1u; }\n+  fn speak(&self) { self.meows += 1u; }\n }\n \n fn cat(in_x : uint, in_y : int) -> cat {"}, {"sha": "9fe7ae40dbbc3db47fe1bad7c77f4b4f6462f8e7", "filename": "src/test/compile-fail/auto-ref-borrowck-failure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fauto-ref-borrowck-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fauto-ref-borrowck-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauto-ref-borrowck-failure.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -15,11 +15,11 @@ struct Foo {\n }\n \n trait Stuff {\n-    fn printme();\n+    fn printme(self);\n }\n \n impl Stuff for &'self mut Foo {\n-    fn printme() {\n+    fn printme(self) {\n         io::println(fmt!(\"%d\", self.x));\n     }\n }"}, {"sha": "d5b8f99ada0eaea363f5ae91bc3f4c93f4933e2d", "filename": "src/test/compile-fail/bad-method-typaram-kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -13,11 +13,11 @@ fn foo<T>() {\n }\n \n trait bar {\n-    fn bar<T:Copy>();\n+    fn bar<T:Copy>(&self);\n }\n \n impl bar for uint {\n-    fn bar<T:Copy>() {\n+    fn bar<T:Copy>(&self) {\n     }\n }\n "}, {"sha": "9f517ad99a1b1e8567f8e5433c967ded86e0dd00", "filename": "src/test/compile-fail/borrowck-autoref-3261.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -11,7 +11,7 @@\n struct X(Either<(uint,uint),extern fn()>);\n \n pub impl &'self X {\n-    fn with(blk: &fn(x: &Either<(uint,uint),extern fn()>)) {\n+    fn with(self, blk: &fn(x: &Either<(uint,uint),extern fn()>)) {\n         blk(&**self)\n     }\n }"}, {"sha": "23debb4c5e212c841026fc7d13628c03cc475dab", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -20,7 +20,7 @@ impl ops::Add<int,int> for Point {\n }\n \n pub impl Point {\n-    fn times(z: int) -> int {\n+    fn times(&self, z: int) -> int {\n         self.x * self.y * z\n     }\n }"}, {"sha": "4a7228dcca39b1d33731b3b36e198f8eace5cc09", "filename": "src/test/compile-fail/borrowck-loan-rcvr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -11,18 +11,18 @@\n struct point { x: int, y: int }\n \n trait methods {\n-    fn impurem();\n-    fn blockm(f: &fn());\n-    pure fn purem();\n+    fn impurem(&self);\n+    fn blockm(&self, f: &fn());\n+    pure fn purem(&self);\n }\n \n impl methods for point {\n-    fn impurem() {\n+    fn impurem(&self) {\n     }\n \n-    fn blockm(f: &fn()) { f() }\n+    fn blockm(&self, f: &fn()) { f() }\n \n-    pure fn purem() {\n+    pure fn purem(&self) {\n     }\n }\n "}, {"sha": "caa79132182d7c9058f0e496c62467caeea4bf28", "filename": "src/test/compile-fail/class-cast-to-trait.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n trait noisy {\n-  fn speak();\n+  fn speak(&self);\n }\n \n struct cat {\n@@ -21,7 +21,7 @@ struct cat {\n \n pub impl cat {\n \n-  fn eat() -> bool {\n+  fn eat(&self) -> bool {\n     if self.how_hungry > 0 {\n         error!(\"OM NOM NOM\");\n         self.how_hungry -= 2;\n@@ -35,12 +35,12 @@ pub impl cat {\n }\n \n impl noisy for cat {\n-  fn speak() { self.meow(); }\n+  fn speak(&self) { self.meow(); }\n \n }\n \n priv impl cat {\n-    fn meow() {\n+    fn meow(&self) {\n       error!(\"Meow\");\n       self.meows += 1;\n       if self.meows % 5 == 0 {\n@@ -49,7 +49,7 @@ priv impl cat {\n     }\n }\n \n-fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n+fn cat(&self, in_x : uint, in_y : int, in_name: ~str) -> cat {\n     cat {\n         meows: in_x,\n         how_hungry: in_y,"}, {"sha": "f3c5ab2019daec88da80533e1759b47a065b1b26", "filename": "src/test/compile-fail/class-method-missing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:missing method `eat`\n trait animal {\n-  fn eat();\n+  fn eat(&self);\n }\n \n struct cat {"}, {"sha": "b78b065d028f58e5e37449c8c3dcf64f6f9db181", "filename": "src/test/compile-fail/class-missing-self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -13,8 +13,8 @@ struct cat {\n }\n \n priv impl cat {\n-    fn sleep() { loop{} }\n-    fn meow() {\n+    fn sleep(&self) { loop{} }\n+    fn meow(&self) {\n       error!(\"Meow\");\n       meows += 1u; //~ ERROR unresolved name\n       sleep();     //~ ERROR unresolved name"}, {"sha": "26b13566f7a0e69384c51d80e71643be488bf922", "filename": "src/test/compile-fail/explicit-call-to-supertrait-dtor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -13,7 +13,7 @@ struct Foo {\n }\n \n trait Bar : Drop {\n-    fn blah();\n+    fn blah(&self);\n }\n \n impl Drop for Foo {\n@@ -23,7 +23,7 @@ impl Drop for Foo {\n }\n \n impl Bar for Foo {\n-    fn blah() {\n+    fn blah(&self) {\n         self.finalize();    //~ ERROR explicit call to destructor\n     }\n }"}, {"sha": "23b9532083a26933cb309167ea67d0a8913a3f11", "filename": "src/test/compile-fail/infinite-instantiation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -12,17 +12,17 @@\n // issue 2258\n \n trait to_opt {\n-    fn to_option() -> Option<Self>;\n+    fn to_option(&self) -> Option<Self>;\n }\n \n impl to_opt for uint {\n-    fn to_option() -> Option<uint> {\n+    fn to_option(&self) -> Option<uint> {\n         Some(self)\n     }\n }\n \n impl<T:Copy> to_opt for Option<T> {\n-    fn to_option() -> Option<Option<T>> {\n+    fn to_option(&self) -> Option<Option<T>> {\n         Some(self)\n     }\n }"}, {"sha": "def1fa30f3b08e58cd9422020265cc968f04825e", "filename": "src/test/compile-fail/issue-2149.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n trait vec_monad<A> {\n-    fn bind<B>(f: &fn(A) -> ~[B]);\n+    fn bind<B>(&self, f: &fn(A) -> ~[B]);\n }\n \n impl<A> vec_monad<A> for ~[A] {\n-    fn bind<B>(f: &fn(A) -> ~[B]) {\n+    fn bind<B>(&self, f: &fn(A) -> ~[B]) {\n         let mut r = fail!();\n         for self.each |elt| { r += f(*elt); }\n         //~^ WARNING unreachable expression"}, {"sha": "d8acbf2893aa5c441ffcaef15b501540985b9f99", "filename": "src/test/compile-fail/issue-2330.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -11,12 +11,12 @@\n enum chan { }\n \n trait channel<T> {\n-    fn send(v: T);\n+    fn send(&self, v: T);\n }\n \n // `chan` is not a trait, it's an enum\n impl chan for int { //~ ERROR can only implement trait types\n-    fn send(v: int) { fail!() }\n+    fn send(&self, v: int) { fail!() }\n }\n \n fn main() {"}, {"sha": "9840650fa2e4af8b9690303514e817a28a26ad82", "filename": "src/test/compile-fail/issue-2611-5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -12,7 +12,7 @@\n // an impl against a trait\n \n trait A {\n-  fn b<C:Copy,D>(x: C) -> C;\n+  fn b<C:Copy,D>(&self, x: C) -> C;\n }\n \n struct E {\n@@ -21,7 +21,7 @@ struct E {\n \n impl A for E {\n   // n.b. The error message is awful -- see #3404\n-  fn b<F:Copy,G>(_x: G) -> G { fail!() } //~ ERROR method `b` has an incompatible type\n+  fn b<F:Copy,G>(&self, _x: G) -> G { fail!() } //~ ERROR method `b` has an incompatible type\n }\n \n fn main() {}"}, {"sha": "4fc4c005cf611ca36ce30629dd19d3d916d59d32", "filename": "src/test/compile-fail/issue-3021-c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -13,7 +13,7 @@ extern mod std;\n fn siphash<T>() {\n \n     trait t {\n-        fn g(x: T) -> T;  //~ ERROR attempt to use a type argument out of scope\n+        fn g(&self, x: T) -> T;  //~ ERROR attempt to use a type argument out of scope\n         //~^ ERROR attempt to use a type argument out of scope\n         //~^^ ERROR use of undeclared type name `T`\n         //~^^^ ERROR use of undeclared type name `T`"}, {"sha": "5b076c81eb87be61c52e06911aa3f7380f7917eb", "filename": "src/test/compile-fail/issue-3021-d.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -11,8 +11,8 @@\n extern mod std;\n \n trait siphash {\n-    fn result() -> u64;\n-    fn reset();\n+    fn result(&self) -> u64;\n+    fn reset(&self);\n }\n \n fn siphash(k0 : u64, k1 : u64) -> siphash {\n@@ -21,21 +21,21 @@ fn siphash(k0 : u64, k1 : u64) -> siphash {\n         v1: u64,\n     }\n \n-    fn mk_result(st : SipState) -> u64 {\n+    fn mk_result(&self, st : SipState) -> u64 {\n \n         let v0 = st.v0,\n             v1 = st.v1;\n         return v0 ^ v1;\n     }\n \n    impl siphash for SipState {\n-        fn reset() {\n+        fn reset(&self) {\n             self.v0 = k0 ^ 0x736f6d6570736575;  //~ ERROR attempted dynamic environment-capture\n             //~^ ERROR unresolved name: `k0`.\n             self.v1 = k1 ^ 0x646f72616e646f6d;   //~ ERROR attempted dynamic environment-capture\n             //~^ ERROR unresolved name: `k1`.\n         }\n-        fn result() -> u64 { return mk_result(self); }\n+        fn result(&self) -> u64 { return mk_result(self); }\n     }\n }\n "}, {"sha": "343683d79c10563758d6fb67375aecd0d42e3249", "filename": "src/test/compile-fail/issue-3021.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -11,7 +11,7 @@\n extern mod std;\n \n trait SipHash {\n-    fn reset();\n+    fn reset(&self);\n }\n \n fn siphash(k0 : u64) -> SipHash {\n@@ -20,7 +20,7 @@ fn siphash(k0 : u64) -> SipHash {\n     }\n \n     impl SipHash for SipState {\n-        fn reset() {\n+        fn reset(&self) {\n            self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR attempted dynamic environment-capture\n            //~^ ERROR unresolved name: `k0`.\n         }"}, {"sha": "1b121878697ded52b416e23f8489ea6e21f630d3", "filename": "src/test/compile-fail/issue-3668.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -10,11 +10,11 @@\n \n struct P { child: Option<@mut P> }\n trait PTrait {\n-   fn getChildOption() -> Option<@P>;\n+   fn getChildOption(&self) -> Option<@P>;\n }\n \n impl PTrait for P {\n-   fn getChildOption() -> Option<@P> {\n+   fn getChildOption(&self) -> Option<@P> {\n        const childVal: @P = self.child.get(); //~ ERROR attempt to use a non-constant value in a constant\n        fail!();\n    }"}, {"sha": "f6226032eeef384d5c46e496cac8176ddc569091", "filename": "src/test/compile-fail/issue-3763.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -16,7 +16,7 @@ mod my_mod {\n         MyStruct {priv_field: 4}\n     }\n     pub impl MyStruct {\n-        priv fn happyfun() {}\n+        priv fn happyfun(&self) {}\n     }\n }\n "}, {"sha": "abde71fb5d35e0b2ec3c8cffc57bde3e6ae7da6d", "filename": "src/test/compile-fail/kindck-owned-trait-contains.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait repeat<A> { fn get() -> A; }\n+trait repeat<A> { fn get(&self) -> A; }\n \n impl<A:Copy> repeat<A> for @A {\n-    fn get() -> A { *self }\n+    fn get(&self) -> A { *self }\n }\n \n fn repeater<A:Copy>(v: @A) -> @repeat<A> {"}, {"sha": "1f8b9577e6c14dc7ecd8f0bc1cf24324b0333038", "filename": "src/test/compile-fail/kindck-owned-trait-scoped.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -12,11 +12,11 @@\n // be parameterized by a region due to the &self/int constraint.\n \n trait foo {\n-    fn foo(i: &'self int) -> int;\n+    fn foo(&self, i: &'self int) -> int;\n }\n \n impl<T:Copy> foo<'self> for T {\n-    fn foo(i: &'self int) -> int {*i}\n+    fn foo(&self, i: &'self int) -> int {*i}\n }\n \n fn to_foo<T:Copy>(t: T) {"}, {"sha": "af6924ef608b2b013ef31d0a11b82ab9ed63e089", "filename": "src/test/compile-fail/kindck-owned-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait foo { fn foo(); }\n+trait foo { fn foo(&self); }\n \n fn to_foo<T:Copy + foo>(t: T) -> @foo {\n     @t as @foo //~ ERROR value may contain borrowed pointers; use `&static` bound"}, {"sha": "9da103396d87c97746f1bef3bddb54cd96fca17b", "filename": "src/test/compile-fail/lint-deprecated-self.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a410652bc953137c8d579f218c2e3e68a9ef8c1c/src%2Ftest%2Fcompile-fail%2Flint-deprecated-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a410652bc953137c8d579f218c2e3e68a9ef8c1c/src%2Ftest%2Fcompile-fail%2Flint-deprecated-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-deprecated-self.rs?ref=a410652bc953137c8d579f218c2e3e68a9ef8c1c", "patch": "@@ -1,20 +0,0 @@\n-#[forbid(deprecated_self)]\n-mod a {\n-    trait T {\n-        fn f(); //~ ERROR this method form is deprecated\n-    }\n-\n-    struct S {\n-        x: int\n-    }\n-\n-    impl T for S {\n-        fn f() {    //~ ERROR this method form is deprecated\n-        }\n-    }\n-}\n-\n-fn main() {\n-}\n-\n-"}, {"sha": "486fa63a9aa4197bad1867b75cf3bb9a6716bae8", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -15,7 +15,7 @@ use core::hashmap::linear::LinearMap;\n \n fn main() {\n     let x: @Map<~str, ~str> = @LinearMap::new::<~str, ~str>() as\n-        @Map::<~str, ~str>;\n+        @(Map::<~str, ~str>);\n     let y: @Map<uint, ~str> = @x;\n     //~^ ERROR mismatched types: expected `@core::container::Map<uint,~str>`\n }"}, {"sha": "56c715c9847a54b0d75af583b58b0be6bc4cc44a", "filename": "src/test/compile-fail/mutable-class-fields-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -16,7 +16,7 @@ struct cat {\n }\n \n pub impl cat {\n-  fn eat() {\n+  fn eat(&self) {\n     self.how_hungry -= 5;\n   }\n "}, {"sha": "74bdcdc7f82d05179b9d33183031eccdb0814300", "filename": "src/test/compile-fail/private-impl-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fprivate-impl-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fprivate-impl-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-impl-method.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -14,7 +14,7 @@ mod a {\n     }\n \n     pub impl Foo {\n-        priv fn foo() {}\n+        priv fn foo(&self) {}\n     }\n }\n "}, {"sha": "c918758ad7c68dcdf25ff3fa25bf71439aa0ddd9", "filename": "src/test/compile-fail/private-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -18,7 +18,7 @@ mod kitties {\n     }\n \n     pub impl cat {\n-        priv fn nap() { uint::range(1u, 10000u, |_i| false)}\n+        priv fn nap(&self) { uint::range(1u, 10000u, |_i| false)}\n     }\n \n     pub fn cat(in_x : uint, in_y : int) -> cat {"}, {"sha": "e48b03f694e2403531a496eb522a1260fcea281f", "filename": "src/test/compile-fail/pure-modifies-aliased.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fpure-modifies-aliased.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fpure-modifies-aliased.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpure-modifies-aliased.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -19,11 +19,11 @@ pure fn modify_in_box(sum: @mut S) {\n }\n \n trait modify_in_box_rec {\n-    pure fn modify_in_box_rec(sum: @mut S);\n+    pure fn modify_in_box_rec(&self, sum: @mut S);\n }\n \n impl modify_in_box_rec for int {\n-    pure fn modify_in_box_rec(sum: @mut S) {\n+    pure fn modify_in_box_rec(&self, sum: @mut S) {\n         sum.f = self; //~ ERROR assigning to mutable field prohibited in pure context\n     }\n }"}, {"sha": "a136c829165c2547c43812b0349dd0a8fd25ca97", "filename": "src/test/compile-fail/regions-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -14,7 +14,7 @@\n \n struct an_enum(&'self int);\n trait a_trait {\n-    fn foo() -> &'self int;\n+    fn foo(&self) -> &'self int;\n }\n struct a_class { x:&'self int }\n "}, {"sha": "1b737c273dbf0266a8915977c92d4f6e640c3f31", "filename": "src/test/compile-fail/regions-escape-via-trait-or-not.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n trait deref {\n-    fn get() -> int;\n+    fn get(self) -> int;\n }\n \n impl deref for &'self int {\n-    fn get() -> int {\n+    fn get(self) -> int {\n         *self\n     }\n }"}, {"sha": "600590daded0f85caad3cc85e83560e43a4be9d9", "filename": "src/test/compile-fail/regions-infer-paramd-indirect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -19,12 +19,12 @@ struct c<'self> {\n }\n \n trait set_f<'self> {\n-    fn set_f_ok(b: @b<'self>);\n-    fn set_f_bad(b: @b);\n+    fn set_f_ok(&self, b: @b<'self>);\n+    fn set_f_bad(&self, b: @b);\n }\n \n impl<'self> set_f<'self> for c<'self> {\n-    fn set_f_ok(b: @b<'self>) {\n+    fn set_f_ok(&self, b: @b<'self>) {\n         self.f = b;\n     }\n "}, {"sha": "5fd3d68d9f3f691579f21c3d97be2e1242b28a6f", "filename": "src/test/compile-fail/regions-infer-paramd-method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -12,9 +12,9 @@\n // refers to self.\n \n trait foo<'self> {\n-    fn self_int() -> &'self int;\n+    fn self_int(&self) -> &'self int;\n \n-    fn any_int() -> &int;\n+    fn any_int(&self) -> &int;\n }\n \n struct with_foo<'self> {\n@@ -34,7 +34,7 @@ impl<'self> set_foo_foo for with_foo<'self> {\n // Bar is not region parameterized.\n \n trait bar {\n-    fn any_int() -> &int;\n+    fn any_int(&self) -> &int;\n }\n \n struct with_bar {"}, {"sha": "74afdf117588c38359ac59ece6ced5686012248d", "filename": "src/test/compile-fail/regions-trait-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -12,7 +12,7 @@ struct ctxt { v: uint }\n \n trait get_ctxt {\n     // Here the `&` is bound in the method definition:\n-    fn get_ctxt() -> &ctxt;\n+    fn get_ctxt(&self) -> &ctxt;\n }\n \n struct has_ctxt { c: &'self ctxt }\n@@ -21,7 +21,7 @@ impl get_ctxt for has_ctxt<'self> {\n \n     // Here an error occurs because we used `&self` but\n     // the definition used `&`:\n-    fn get_ctxt() -> &'self ctxt { //~ ERROR method `get_ctxt` has an incompatible type\n+    fn get_ctxt(&self) -> &'self ctxt { //~ ERROR method `get_ctxt` has an incompatible type\n         self.c\n     }\n "}, {"sha": "d6f3a74e3ee921a2ecb0534fd9b48bfc64d14129", "filename": "src/test/compile-fail/regions-trait-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -11,13 +11,13 @@\n struct ctxt { v: uint }\n \n trait get_ctxt<'self> {\n-    fn get_ctxt() -> &'self ctxt;\n+    fn get_ctxt(&self) -> &'self ctxt;\n }\n \n struct has_ctxt<'self> { c: &'self ctxt }\n \n impl<'self> get_ctxt<'self> for has_ctxt<'self> {\n-    fn get_ctxt() -> &self/ctxt { self.c }\n+    fn get_ctxt(&self) -> &self/ctxt { self.c }\n }\n \n fn make_gc() -> @get_ctxt  {"}, {"sha": "6bd0b212b96e6cd697bee361925ad9fdd2a2c51f", "filename": "src/test/compile-fail/regions-trait-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fregions-trait-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fregions-trait-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-3.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n trait get_ctxt {\n-    fn get_ctxt() -> &self/uint;\n+    fn get_ctxt(&self) -> &self/uint;\n }\n \n fn make_gc1(gc: @get_ctxt/&a) -> @get_ctxt/&b  {\n@@ -21,7 +21,7 @@ struct Foo {\n }\n \n impl get_ctxt/&self for Foo/&self {\n-    fn get_ctxt() -> &self/uint { self.r }\n+    fn get_ctxt(&self) -> &self/uint { self.r }\n }\n \n fn make_gc2(foo: Foo/&a) -> @get_ctxt/&b  {"}, {"sha": "467154244b760f86ce6c21d2b01d0788edf47af8", "filename": "src/test/compile-fail/selftype-traittype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fselftype-traittype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fselftype-traittype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fselftype-traittype.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n trait add {\n-    fn plus(x: Self) -> Self;\n+    fn plus(&self, x: Self) -> Self;\n }\n \n fn do_add(x: add, y: add) -> add {"}, {"sha": "531d722d8bc3c0dc2554cb0ffc8328f10d8a6d10", "filename": "src/test/compile-fail/staticness-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fstaticness-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fstaticness-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstaticness-mismatch.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -14,7 +14,7 @@ trait foo {\n }\n \n impl foo for int {\n-    fn bar() {} //~ ERROR method `bar` is declared as static in its trait, but not in its impl\n+    fn bar(&self) {} //~ ERROR method `bar` is declared as static in its trait, but not in its impl\n }\n \n fn main() {}"}, {"sha": "a4d39fa829ef459c2409f353265d40ff82178d00", "filename": "src/test/compile-fail/tps-invariant-trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n trait box_trait<T> {\n-    fn get() -> T;\n-    fn set(t: T);\n+    fn get(&self) -> T;\n+    fn set(&self, t: T);\n }\n \n struct box<T> {\n@@ -20,8 +20,8 @@ struct box<T> {\n struct box_impl<T>(box<T>);\n \n impl<T:Copy> box_trait<T> for box_impl<T> {\n-    fn get() -> T { return self.f; }\n-    fn set(t: T) { self.f = t; }\n+    fn get(&self) -> T { return self.f; }\n+    fn set(&self, t: T) { self.f = t; }\n }\n \n fn set_box_trait<T>(b: @box_trait<@const T>, v: @const T) {"}, {"sha": "1471d9232b2b04696ef8cd4c35c079fca0ecdb7e", "filename": "src/test/compile-fail/trait-impl-can-not-have-untraitful-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Ftrait-impl-can-not-have-untraitful-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Ftrait-impl-can-not-have-untraitful-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-can-not-have-untraitful-methods.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -11,7 +11,7 @@\n trait A { }\n \n impl A for int {\n-    fn foo() { } //~ ERROR method `foo` is not a member of trait `A`\n+    fn foo(&self) { } //~ ERROR method `foo` is not a member of trait `A`\n }\n \n fn main() { }"}, {"sha": "c1544c2f557feeb8160a40a2e9f4768c6e903280", "filename": "src/test/compile-fail/trait-impl-different-num-params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Ftrait-impl-different-num-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Ftrait-impl-different-num-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-different-num-params.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n trait foo {\n-    fn bar(x: uint) -> Self;\n+    fn bar(&self, x: uint) -> Self;\n }\n impl foo for int {\n-    fn bar() -> int {\n+    fn bar(&self) -> int {\n         //~^ ERROR method `bar` has 0 parameters but the trait has 1\n         self\n     }"}, {"sha": "a5e37eb949d28bea5c885fc2271a69c2183c2f70", "filename": "src/test/compile-fail/trait-or-new-type-instead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Ftrait-or-new-type-instead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Ftrait-or-new-type-instead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-or-new-type-instead.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern: implement a trait or new type instead\n pub impl <T> Option<T> {\n-    fn foo() { }\n+    fn foo(&self) { }\n }\n \n fn main() { }"}, {"sha": "ebdf354234a5ebd89a3e9b475c649f94d4c3c6ae", "filename": "src/test/compile-fail/trait-test-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait bar { fn dup() -> Self; fn blah<X>(); }\n-impl bar for int { fn dup() -> int { self } fn blah<X>() {} }\n-impl bar for uint { fn dup() -> uint { self } fn blah<X>() {} }\n+trait bar { fn dup(&self) -> Self; fn blah<X>(); }\n+impl bar for int { fn dup(&self) -> int { self } fn blah<X>() {} }\n+impl bar for uint { fn dup(&self) -> uint { self } fn blah<X>() {} }\n \n fn main() {\n     10i.dup::<int>(); //~ ERROR does not take type parameters"}, {"sha": "1682e98fb23837c5d99590faedefaf79d98ca364", "filename": "src/test/compile-fail/trait-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Ftrait-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Ftrait-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-test.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait foo { fn foo(); }\n+trait foo { fn foo(&self); }\n \n-impl int for uint { fn foo() {} } //~ ERROR trait\n+impl int for uint { fn foo(&self) {} } //~ ERROR trait\n \n fn main() {}"}, {"sha": "adcf20212745b22738051f5d95c58ec577b72fe2", "filename": "src/test/compile-fail/vtable-res-trait-param.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n trait TraitA {\n-    fn method_a() -> int;\n+    fn method_a(&self) -> int;\n }\n \n trait TraitB {\n-    fn gimme_an_a<A:TraitA>(a: A) -> int;\n+    fn gimme_an_a<A:TraitA>(&self, a: A) -> int;\n }\n \n impl TraitB for int {\n-    fn gimme_an_a<A:TraitA>(a: A) -> int {\n+    fn gimme_an_a<A:TraitA>(&self, a: A) -> int {\n         a.method_a() + self\n     }\n }"}, {"sha": "2ed3b39a445732328c0759bcfb764c17cc8645c6", "filename": "src/test/run-fail/unwind-box-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-fail%2Funwind-box-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-fail%2Funwind-box-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-trait.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -15,11 +15,11 @@ fn failfn() {\n }\n \n trait i {\n-    fn foo();\n+    fn foo(&self);\n }\n \n impl i for ~int {\n-    fn foo() { }\n+    fn foo(&self) { }\n }\n \n fn main() {"}, {"sha": "5fecbbe70e420942d783a2c1e59f8944c83d9b3f", "filename": "src/test/run-pass/assignability-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-trait.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -13,19 +13,19 @@\n // it.\n \n trait iterable<A> {\n-    fn iterate(blk: &fn(x: &A) -> bool);\n+    fn iterate(&self, blk: &fn(x: &A) -> bool);\n }\n \n impl<A> iterable<A> for &self/[A] {\n-    fn iterate(f: &fn(x: &A) -> bool) {\n+    fn iterate(&self, f: &fn(x: &A) -> bool) {\n         for vec::each(self) |e| {\n             if !f(e) { break; }\n         }\n     }\n }\n \n impl<A> iterable<A> for ~[A] {\n-    fn iterate(f: &fn(x: &A) -> bool) {\n+    fn iterate(&self, f: &fn(x: &A) -> bool) {\n         for vec::each(self) |e| {\n             if !f(e) { break; }\n         }"}, {"sha": "82fca3318b1cf70b203ff700fdde6c085795fff1", "filename": "src/test/run-pass/auto-ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fauto-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fauto-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -13,11 +13,11 @@ struct Foo {\n }\n \n trait Stuff {\n-    fn printme();\n+    fn printme(self);\n }\n \n impl Stuff for &self/Foo {\n-    fn printme() {\n+    fn printme(self) {\n         io::println(fmt!(\"%d\", self.x));\n     }\n }"}, {"sha": "a4dbab49c0c4d45672569c3e660afe4ce8f09392", "filename": "src/test/run-pass/autoderef-method-newtype.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fautoderef-method-newtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fautoderef-method-newtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-newtype.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n trait double {\n-    fn double() -> uint;\n+    fn double(&self) -> uint;\n }\n \n impl double for uint {\n-    fn double() -> uint { self * 2u }\n+    fn double(&self) -> uint { *self * 2u }\n }\n \n struct foo(uint);"}, {"sha": "c4e8e1685733696041bf1f4b8987d353eb750e37", "filename": "src/test/run-pass/autoderef-method-on-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n trait double {\n-    fn double() -> uint;\n+    fn double(self) -> uint;\n }\n \n impl double for uint {\n-    fn double() -> uint { self * 2u }\n+    fn double(self) -> uint { self * 2u }\n }\n \n pub fn main() {"}, {"sha": "ee37781d702bf8207ae9793778b50c3e45ee00ce", "filename": "src/test/run-pass/autoderef-method-priority.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n trait double {\n-    fn double() -> uint;\n+    fn double(self) -> uint;\n }\n \n impl double for uint {\n-    fn double() -> uint { self }\n+    fn double(self) -> uint { self }\n }\n \n impl double for @uint {\n-    fn double() -> uint { *self * 2u }\n+    fn double(self) -> uint { *self * 2u }\n }\n \n pub fn main() {"}, {"sha": "1a49ceb1cde87f54461d8242ee5092ebab8a0c28", "filename": "src/test/run-pass/autoderef-method-twice-but-not-thrice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n trait double {\n-    fn double() -> uint;\n+    fn double(self) -> uint;\n }\n \n impl double for @@uint {\n-    fn double() -> uint { **self * 2u }\n+    fn double(self) -> uint { **self * 2u }\n }\n \n pub fn main() {"}, {"sha": "68691d9aa62317a5234e6bbd265e178e9bb6c0f0", "filename": "src/test/run-pass/autoderef-method-twice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n trait double {\n-    fn double() -> uint;\n+    fn double(self) -> uint;\n }\n \n impl double for uint {\n-    fn double() -> uint { self * 2u }\n+    fn double(self) -> uint { self * 2u }\n }\n \n pub fn main() {"}, {"sha": "9721eb9207eb3274b45ed7729df0d05037c5785f", "filename": "src/test/run-pass/autoderef-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n trait double {\n-    fn double() -> uint;\n+    fn double(self) -> uint;\n }\n \n impl double for uint {\n-    fn double() -> uint { self * 2u }\n+    fn double(self) -> uint { self * 2u }\n }\n \n pub fn main() {"}, {"sha": "7724836b5db9e57f2fe78c64ceb395ee584b5ee2", "filename": "src/test/run-pass/borrowck-newtype-issue-2573.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fborrowck-newtype-issue-2573.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fborrowck-newtype-issue-2573.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-newtype-issue-2573.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -15,11 +15,11 @@ struct baz_ {baz: int}\n type baz = @mut baz_;\n \n trait frob {\n-    fn frob();\n+    fn frob(&self);\n }\n \n impl frob for foo {\n-    fn frob() {\n+    fn frob(&self) {\n         really_impure(self.bar);\n     }\n }"}, {"sha": "e94525d1691a3387f7533bd97ca6ff7b3d307001", "filename": "src/test/run-pass/boxed-trait-with-vstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fboxed-trait-with-vstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fboxed-trait-with-vstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fboxed-trait-with-vstore.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n trait Foo {\n-    fn foo();\n+    fn foo(self);\n }\n \n impl Foo for int {\n-    fn foo() {\n+    fn foo(self) {\n         io::println(\"Hello world!\");\n     }\n }"}, {"sha": "eefa78cc3c9af0db2af2964f72354e848d6a2d29", "filename": "src/test/run-pass/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n trait noisy {\n-  fn speak() -> int;\n+  fn speak(&self) -> int;\n }\n \n struct dog {\n@@ -19,7 +19,7 @@ struct dog {\n }\n \n pub impl dog {\n-    priv fn bark() -> int {\n+    priv fn bark(&self) -> int {\n       debug!(\"Woof %u %d\", *self.barks, *self.volume);\n       *self.barks += 1u;\n       if *self.barks % 3u == 0u {\n@@ -34,7 +34,7 @@ pub impl dog {\n }\n \n impl noisy for dog {\n-  fn speak() -> int { self.bark() }\n+  fn speak(&self) -> int { self.bark() }\n }\n \n fn dog() -> dog {\n@@ -52,15 +52,15 @@ struct cat {\n }\n \n impl noisy for cat {\n-  fn speak() -> int { self.meow() as int }\n+  fn speak(&self) -> int { self.meow() as int }\n }\n \n pub impl cat {\n-  fn meow_count() -> uint { *self.meows }\n+  fn meow_count(&self) -> uint { *self.meows }\n }\n \n priv impl cat {\n-    fn meow() -> uint {\n+    fn meow(&self) -> uint {\n       debug!(\"Meow\");\n       *self.meows += 1u;\n       if *self.meows % 5u == 0u {"}, {"sha": "aa5bb2b519c494e45ed17140e9ad4fff14fd9c8e", "filename": "src/test/run-pass/class-exports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-exports.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -22,10 +22,10 @@ mod kitty {\n     }\n \n     pub impl cat {\n-        fn get_name() -> ~str { copy self.name }\n+        fn get_name(&self) -> ~str { copy self.name }\n     }\n \n-    pub fn cat(in_name: ~str) -> cat {\n+    pub fn cat(&self, in_name: ~str) -> cat {\n         cat {\n             name: in_name,\n             meows: 0u"}, {"sha": "3a626ca6ac1a40461c34dc8e01a0860f658779dd", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -137,25 +137,25 @@ mod test_methods {\n \n     impl Fooable for Foo {\n         #[cfg(bogus)]\n-        static fn what() { }\n+        static fn what(&self) { }\n \n-        static fn what() { }\n+        static fn what(&self) { }\n \n         #[cfg(bogus)]\n-        fn the() { }\n+        fn the(&self) { }\n \n-        fn the() { }\n+        fn the(&self) { }\n     }\n \n     trait Fooable {\n         #[cfg(bogus)]\n-        static fn what();\n+        static fn what(&self);\n \n-        static fn what();\n+        static fn what(&self);\n \n         #[cfg(bogus)]\n-        fn the();\n+        fn the(&self);\n \n-        fn the();\n+        fn the(&self);\n     }\n }"}, {"sha": "62b29d4e4eb2f8da277897e6a9d63bca89b0364f", "filename": "src/test/run-pass/default-method-simple.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fdefault-method-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fdefault-method-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault-method-simple.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -11,19 +11,19 @@\n #[allow(default_methods)];\n \n trait Foo {\n-    fn f() {\n+    fn f(&self) {\n         io::println(\"Hello!\");\n         self.g();\n     }\n-    fn g();\n+    fn g(&self);\n }\n \n struct A {\n     x: int\n }\n \n impl Foo for A {\n-    fn g() {\n+    fn g(&self) {\n         io::println(\"Goodbye!\");\n     }\n }"}, {"sha": "4728f71846357735266959229bdfa15a813a2046", "filename": "src/test/run-pass/early-vtbl-resolution.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fearly-vtbl-resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fearly-vtbl-resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fearly-vtbl-resolution.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -10,10 +10,10 @@\n \n \n trait thing<A> {\n-    fn foo() -> Option<A>;\n+    fn foo(&self) -> Option<A>;\n }\n impl<A> thing<A> for int {\n-    fn foo() -> Option<A> { None }\n+    fn foo(&self) -> Option<A> { None }\n }\n fn foo_func<A, B: thing<A>>(x: B) -> Option<A> { x.foo() }\n "}, {"sha": "acdd3fc460089c772600c509df9a29c9059f9560", "filename": "src/test/run-pass/generic-object.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fgeneric-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fgeneric-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-object.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n trait Foo<T> {\n-    fn get() -> T;\n+    fn get(&self) -> T;\n }\n \n struct S {\n     x: int\n }\n \n impl Foo<int> for S {\n-    fn get() -> int {\n+    fn get(&self) -> int {\n         self.x\n     }\n }"}, {"sha": "10a5661a32468842e03c107390d604cec5e2e0be", "filename": "src/test/run-pass/impl-implicit-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fimpl-implicit-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fimpl-implicit-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-implicit-trait.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -14,7 +14,7 @@ enum option_<T> {\n }\n \n pub impl<T> option_<T> {\n-    fn foo() -> bool { true }\n+    fn foo(&self) -> bool { true }\n }\n \n enum option__ {\n@@ -23,7 +23,7 @@ enum option__ {\n }\n \n pub impl option__ {\n-    fn foo() -> bool { true }\n+    fn foo(&self) -> bool { true }\n }\n \n pub fn main() {"}, {"sha": "849aa2a29f42b2ef7647014113c337e02bbedd20", "filename": "src/test/run-pass/impl-variance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fimpl-variance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fimpl-variance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-variance.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n trait foo {\n-    fn foo() -> uint;\n+    fn foo(&self) -> uint;\n }\n \n impl<T> foo for ~[const T] {\n-    fn foo() -> uint { vec::len(self) }\n+    fn foo(&self) -> uint { vec::len(self) }\n }\n \n pub fn main() {"}, {"sha": "6dda45a99f9dc254eaaf2ba7c1e2df702f88e969", "filename": "src/test/run-pass/issue-2284.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2284.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2284.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2284.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n trait Send {\n-    fn f();\n+    fn f(&self);\n }\n \n fn f<T:Send>(t: T) {\n-    t.f();\n+    t.f(&self);\n }\n \n pub fn main() {"}, {"sha": "9dcee06ba858fc05f782d4b817f02bce442ecc2a", "filename": "src/test/run-pass/issue-2288.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2288.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,14 +9,14 @@\n // except according to those terms.\n \n trait c lam<A:Copy> {\n-  fn chowder(y: A);\n+  fn chowder(&self, y: A);\n }\n struct foo<A> {\n   x: A,\n }\n \n impl<A:Copy> clam<A> for foo<A> {\n-  fn chowder(y: A) {\n+  fn chowder(&self, y: A) {\n   }\n }\n "}, {"sha": "5f47e7ccb9f7975e74dd2187dc33d6d28bfd53d6", "filename": "src/test/run-pass/issue-2311-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -14,7 +14,7 @@ struct foo<A> {\n }\n \n pub impl<A:Copy> foo<A> {\n-   fn bar<B,C:clam<A>>(c: C) -> B {\n+   fn bar<B,C:clam<A>>(&self, c: C) -> B {\n      fail!();\n    }\n }"}, {"sha": "dc873ed08d701c6603359804c971309627bc62e1", "filename": "src/test/run-pass/issue-2311.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2311.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -10,7 +10,7 @@\n \n trait clam<A> { }\n trait foo<A> {\n-   fn bar<B,C:clam<A>>(c: C) -> B;\n+   fn bar<B,C:clam<A>>(&self, c: C) -> B;\n }\n \n pub fn main() { }"}, {"sha": "f3aa96298f0c5e737b7a0ba68fecf2ef3e7389d1", "filename": "src/test/run-pass/issue-2312.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2312.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -15,7 +15,7 @@ trait clam<A> { }\n struct foo(int);\n \n pub impl foo {\n-    fn bar<B,C:clam<B>>(c: C) -> B { fail!(); }\n+    fn bar<B,C:clam<B>>(&self, c: C) -> B { fail!(); }\n }\n \n pub fn main() { }"}, {"sha": "55c72a41a6a328c7b6a4415432d2887921c1f987", "filename": "src/test/run-pass/issue-2445-b.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -13,7 +13,7 @@ struct c1<T> {\n }\n \n pub impl<T:Copy> c1<T> {\n-    fn f1(x: int) {\n+    fn f1(&self, x: int) {\n     }\n }\n \n@@ -24,7 +24,7 @@ fn c1<T:Copy>(x: T) -> c1<T> {\n }\n \n pub impl<T:Copy> c1<T> {\n-    fn f2(x: int) {\n+    fn f2(&self, x: int) {\n     }\n }\n "}, {"sha": "5a82b5340157198234e7eeef50fba5d8000ea33e", "filename": "src/test/run-pass/issue-2445.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2445.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -13,7 +13,7 @@ struct c1<T> {\n }\n \n pub impl<T:Copy> c1<T> {\n-    fn f1(x: T) {}\n+    fn f1(&self, x: T) {}\n }\n \n fn c1<T:Copy>(x: T) -> c1<T> {\n@@ -23,7 +23,7 @@ fn c1<T:Copy>(x: T) -> c1<T> {\n }\n \n pub impl<T:Copy> c1<T> {\n-    fn f2(x: T) {}\n+    fn f2(&self, x: T) {}\n }\n \n "}, {"sha": "599866380883f47f11de7d3a29ea3f4df0a4f791", "filename": "src/test/run-pass/issue-2487-a.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -18,8 +18,7 @@ impl Drop for socket {\n }\n \n pub impl socket {\n-\n-    fn set_identity()  {\n+    fn set_identity(&self)  {\n         do closure {\n             setsockopt_bytes(copy self.sock)\n         }"}, {"sha": "9af41e48aa28f68e872989f67a79e976701d0b85", "filename": "src/test/run-pass/issue-2502.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2502.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -13,7 +13,7 @@ struct font {\n }\n \n pub impl font/&self {\n-    fn buf() -> &self/~[u8] {\n+    fn buf(&self) -> &self/~[u8] {\n         self.fontbuf\n     }\n }"}, {"sha": "35c3d6a88ee33edf0b39ab7c479f27376b6205d7", "filename": "src/test/run-pass/issue-2734.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2734.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -11,7 +11,7 @@\n trait hax { } \n impl<A> hax for A { } \n \n-fn perform_hax<T:&static>(x: @T) -> hax {\n+fn perform_hax<T:&static>(x: @T) -> @hax {\n     @x as @hax\n }\n "}, {"sha": "c1f4e1e49aa08068a88555be8ebb146d2e0e67f6", "filename": "src/test/run-pass/issue-2935.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2935.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -13,11 +13,11 @@\n type t = bool;\n \n trait it {\n-    fn f();\n+    fn f(&self);\n }\n \n impl it for t {\n-    fn f() { }\n+    fn f(&self) { }\n }\n \n pub fn main() {"}, {"sha": "5acae2da1ce4aca1bf461838255780be8ec162a7", "filename": "src/test/run-pass/issue-2936.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2936.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n trait bar<T> {\n-    fn get_bar() -> T;\n+    fn get_bar(&self) -> T;\n }\n \n fn foo<T, U: bar<T>>(b: U) -> T {\n@@ -21,7 +21,7 @@ struct cbar {\n }\n \n impl bar<int> for cbar {\n-    fn get_bar() -> int {\n+    fn get_bar(&self) -> int {\n         self.x\n     }\n }"}, {"sha": "10b845a923d5be53e97f160e1bb8a9231dabfbc0", "filename": "src/test/run-pass/issue-2989.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2989.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -11,11 +11,11 @@\n extern mod std;\n \n trait methods {\n-    fn to_bytes() -> ~[u8];\n+    fn to_bytes(&self) -> ~[u8];\n }\n \n impl methods for () {\n-    fn to_bytes() -> ~[u8] {\n+    fn to_bytes(&self) -> ~[u8] {\n         vec::from_elem(0, 0)\n     }\n }"}, {"sha": "52d6792f4014628102e685dab7d7496f072a5048", "filename": "src/test/run-pass/issue-3563-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-3563-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-3563-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-2.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -10,8 +10,8 @@\n \n #[allow(default_methods)]\n trait Canvas {\n-    fn add_point(point: &int);\n-    fn add_points(shapes: &[int]) {\n+    fn add_point(&self, point: &int);\n+    fn add_points(&self, shapes: &[int]) {\n         for shapes.each |pt| {\n             self.add_point(pt)\n         }"}, {"sha": "edbc7852542c24a8dc4b42181afad70348feaa31", "filename": "src/test/run-pass/issue-3683.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-3683.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-3683.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3683.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -11,14 +11,14 @@\n #[allow(default_methods)];\n \n trait Foo {\n-    fn a() -> int;\n-    fn b() -> int {\n+    fn a(&self) -> int;\n+    fn b(&self) -> int {\n         self.a() + 2\n     }\n }\n \n impl Foo for int {\n-    fn a() -> int {\n+    fn a(&self) -> int {\n         3\n     }\n }"}, {"sha": "948ff1afd81c36adb6bd440c6e261106b5e9cf4c", "filename": "src/test/run-pass/issue-3753.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3753.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -23,7 +23,7 @@ pub enum Shape {\n }\n \n pub impl Shape {\n-    pub fn area(sh: Shape) -> float {\n+    pub fn area(&self, sh: Shape) -> float {\n         match sh {\n             Circle(_, size) => float::consts::pi * size * size,\n             Rectangle(Point {x, y}, Point {x: x2, y: y2}) => (x2 - x) * (y2 - y)"}, {"sha": "7beb4881d7a6471df97cade697f3d5fe63ea154e", "filename": "src/test/run-pass/kindck-owned-trait-contains-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait repeat<A> { fn get() -> A; }\n+trait repeat<A> { fn get(&self) -> A; }\n \n impl<A:Copy> repeat<A> for @A {\n-    fn get() -> A { *self }\n+    fn get(&self) -> A { *self }\n }\n \n fn repeater<A:Copy>(v: @A) -> @repeat<A> {"}, {"sha": "58dcb24edf917d49871e808f212800eb152e12fb", "filename": "src/test/run-pass/max-min-classes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fmax-min-classes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fmax-min-classes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmax-min-classes.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n trait Product {\n-    fn product() -> int;\n+    fn product(&self) -> int;\n }\n \n struct Foo {\n@@ -18,13 +18,13 @@ struct Foo {\n }\n \n pub impl Foo {\n-    fn sum() -> int {\n+    fn sum(&self) -> int {\n         self.x + self.y\n     }\n }\n \n impl Product for Foo {\n-    fn product() -> int {\n+    fn product(&self) -> int {\n         self.x * self.y\n     }\n }"}, {"sha": "db7440738da86ccaecfdd42f12ef817123890a80", "filename": "src/test/run-pass/method-attributes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fmethod-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fmethod-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-attributes.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -13,20 +13,20 @@\n #[frobable]\n trait frobable {\n     #[frob_attr]\n-    fn frob();\n+    fn frob(&self);\n     #[defrob_attr]\n-    fn defrob();\n+    fn defrob(&self);\n }\n \n #[int_frobable]\n impl frobable for int {\n     #[frob_attr1]\n-    fn frob() {\n+    fn frob(&self) {\n         #[frob_attr2];\n     }\n \n     #[defrob_attr1]\n-    fn defrob() {\n+    fn defrob(&self) {\n         #[defrob_attr2];\n     }\n }"}, {"sha": "9b864257d4bae4e61d21ba43b8a9ad06728dbaff", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -11,23 +11,23 @@\n // xfail-fast\n \n trait vec_monad<A> {\n-    fn bind<B:Copy>(f: &fn(&A) -> ~[B]) -> ~[B];\n+    fn bind<B:Copy>(&self, f: &fn(&A) -> ~[B]) -> ~[B];\n }\n \n impl<A> vec_monad<A> for ~[A] {\n-    fn bind<B:Copy>(f: &fn(&A) -> ~[B]) -> ~[B] {\n+    fn bind<B:Copy>(&self, f: &fn(&A) -> ~[B]) -> ~[B] {\n         let mut r = ~[];\n         for self.each |elt| { r += f(elt); }\n         r\n     }\n }\n \n trait option_monad<A> {\n-    fn bind<B>(f: &fn(&A) -> Option<B>) -> Option<B>;\n+    fn bind<B>(&self, f: &fn(&A) -> Option<B>) -> Option<B>;\n }\n \n impl<A> option_monad<A> for Option<A> {\n-    fn bind<B>(f: &fn(&A) -> Option<B>) -> Option<B> {\n+    fn bind<B>(&self, f: &fn(&A) -> Option<B>) -> Option<B> {\n         match self {\n           Some(ref a) => { f(a) }\n           None => { None }"}, {"sha": "a591c3034d2a51b8d372287a829d94c3dd581d2a", "filename": "src/test/run-pass/monomorphize-trait-in-fn-at.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fmonomorphize-trait-in-fn-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fmonomorphize-trait-in-fn-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonomorphize-trait-in-fn-at.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -17,11 +17,11 @@ fn mk_nil<C:ty_ops>(cx: C) -> uint {\n }\n \n trait ty_ops {\n-    fn mk() -> uint;\n+    fn mk(&self) -> uint;\n }\n \n impl ty_ops for () {\n-    fn mk() -> uint { 22u }\n+    fn mk(&self) -> uint { 22u }\n }\n \n pub fn main() {"}, {"sha": "90b3e623f5ed6ef718ad60dc5be6eeeea49de34a", "filename": "src/test/run-pass/monomorphized-callees-with-ty-params-3314.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -14,17 +14,17 @@ trait Serializer {\n }\n \n trait Serializable {\n-    fn serialize<S:Serializer>(s: S);\n+    fn serialize<S:Serializer>(&self, s: S);\n }\n \n impl Serializable for int {\n-    fn serialize<S:Serializer>(_s: S) { }\n+    fn serialize<S:Serializer>(&self, _s: S) { }\n }\n \n struct F<A> { a: A }\n \n impl<A:Copy + Serializable> Serializable for F<A> {\n-    fn serialize<S:Serializer>(s: S) {\n+    fn serialize<S:Serializer>(&self, s: S) {\n         self.a.serialize(s);\n     }\n }"}, {"sha": "6447d46ad896a14660b0cfef3f36e8672242a044", "filename": "src/test/run-pass/nested-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fnested-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fnested-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-class.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -15,7 +15,7 @@ pub fn main() {\n   }\n \n   pub impl b {\n-    fn do_stuff() -> int { return 37; }\n+    fn do_stuff(&self) -> int { return 37; }\n   }\n \n     fn b(i:int) -> b {"}, {"sha": "3f02af3f71cbae5b6018e39425a17025a8ecc90b", "filename": "src/test/run-pass/rcvr-borrowed-to-region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n trait get {\n-    fn get() -> int;\n+    fn get(self) -> int;\n }\n \n // Note: impl on a slice\n impl get for &'self int {\n-    fn get() -> int {\n+    fn get(self) -> int {\n         return *self;\n     }\n }"}, {"sha": "9328189c47cc3b0308636aa2792d59f85517801c", "filename": "src/test/run-pass/rcvr-borrowed-to-slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n trait sum {\n-    fn sum() -> int;\n+    fn sum(self) -> int;\n }\n \n // Note: impl on a slice\n impl sum for &'self [int] {\n-    fn sum() -> int {\n+    fn sum(self) -> int {\n         let mut sum = 0;\n         for vec::each(self) |e| { sum += *e; }\n         return sum;"}, {"sha": "5b3ba0d45edcff42f15afb522781fcfc760b11be", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -19,7 +19,7 @@ use intrinsic::{TyDesc, get_tydesc, visit_tydesc, TyVisitor};\n \n /// Trait for visitor that wishes to reflect on data.\n trait movable_ptr {\n-    fn move_ptr(adjustment: &fn(*c_void) -> *c_void);\n+    fn move_ptr(&self, adjustment: &fn(*c_void) -> *c_void);\n }\n \n /// Helper function for alignment calculation.\n@@ -33,26 +33,26 @@ struct ptr_visit_adaptor<V>(Inner<V>);\n pub impl<V:TyVisitor + movable_ptr> ptr_visit_adaptor<V> {\n \n     #[inline(always)]\n-    fn bump(sz: uint) {\n+    fn bump(&self, sz: uint) {\n       do self.inner.move_ptr() |p| {\n             ((p as uint) + sz) as *c_void\n       };\n     }\n \n     #[inline(always)]\n-    fn align(a: uint) {\n+    fn align(&self, a: uint) {\n       do self.inner.move_ptr() |p| {\n             align(p as uint, a) as *c_void\n       };\n     }\n \n     #[inline(always)]\n-    fn align_to<T>() {\n+    fn align_to<T>(&self) {\n         self.align(sys::min_align_of::<T>());\n     }\n \n     #[inline(always)]\n-    fn bump_past<T>() {\n+    fn bump_past<T>(&self) {\n         self.bump(sys::size_of::<T>());\n     }\n \n@@ -479,13 +479,13 @@ struct Stuff {\n }\n \n pub impl my_visitor {\n-    fn get<T>(f: &fn(T)) {\n+    fn get<T>(&self, f: &fn(T)) {\n         unsafe {\n             f(*(self.ptr1 as *T));\n         }\n     }\n \n-    fn visit_inner(inner: *TyDesc) -> bool {\n+    fn visit_inner(&self, inner: *TyDesc) -> bool {\n         unsafe {\n             let u = my_visitor(*self);\n             let v = ptr_visit_adaptor::<my_visitor>(Inner {inner: u});\n@@ -498,7 +498,7 @@ pub impl my_visitor {\n struct Inner<V> { inner: V }\n \n impl movable_ptr for my_visitor {\n-    fn move_ptr(adjustment: &fn(*c_void) -> *c_void) {\n+    fn move_ptr(&self, adjustment: &fn(*c_void) -> *c_void) {\n         self.ptr1 = adjustment(self.ptr1);\n         self.ptr2 = adjustment(self.ptr2);\n     }"}, {"sha": "2f4eefe5243add3c61d4ab7ad230b3f29f90259c", "filename": "src/test/run-pass/regions-self-impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -13,11 +13,11 @@ struct Clam<'self> {\n }\n \n trait get_chowder<'self> {\n-    fn get_chowder() -> &'self int;\n+    fn get_chowder(&self) -> &'self int;\n }\n \n impl<'self> get_chowder<'self> for Clam<'self> {\n-    fn get_chowder() -> &'self int { return self.chowder; }\n+    fn get_chowder(&self) -> &'self int { return self.chowder; }\n }\n \n pub fn main() {"}, {"sha": "db8cfd1a8658b874b67f4be2e4eeca270276a888", "filename": "src/test/run-pass/regions-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fregions-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fregions-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-trait.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -11,13 +11,13 @@\n struct Ctxt { v: uint }\n \n trait get_ctxt {\n-    fn get_ctxt() -> &self/Ctxt;\n+    fn get_ctxt(&self) -> &self/Ctxt;\n }\n \n struct HasCtxt { c: &'self Ctxt }\n \n impl get_ctxt<'self> for HasCtxt<'self> {\n-    fn get_ctxt() -> &self/Ctxt {\n+    fn get_ctxt(&self) -> &self/Ctxt {\n         self.c\n     }\n }"}, {"sha": "db444f08fab47f9b15408bf64c21d94673a26b35", "filename": "src/test/run-pass/resource-destruct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-destruct.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -19,7 +19,7 @@ impl Drop for shrinky_pointer {\n }\n \n pub impl shrinky_pointer {\n-  fn look_at() -> int { return **(self.i); }\n+  fn look_at(&self) -> int { return **(self.i); }\n }\n \n fn shrinky_pointer(i: @@mut int) -> shrinky_pointer {"}, {"sha": "fe5a6bd2bd517c6cccdf251da26eb95fb2d7f0e2", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -11,42 +11,42 @@\n // xfail-fast\n \n pub trait plus {\n-    fn plus() -> int;\n+    fn plus(&self) -> int;\n }\n \n mod a {\n     use plus;\n-    impl plus for uint { fn plus() -> int { self as int + 20 } }\n+    impl plus for uint { fn plus(&self) -> int { self as int + 20 } }\n }\n \n mod b {\n     use plus;\n-    impl plus for ~str { fn plus() -> int { 200 } }\n+    impl plus for ~str { fn plus(&self) -> int { 200 } }\n }\n \n trait uint_utils {\n-    fn str() -> ~str;\n-    fn multi(f: &fn(uint));\n+    fn str(self) -> ~str;\n+    fn multi(self, f: &fn(uint));\n }\n \n impl uint_utils for uint {\n-    fn str() -> ~str { uint::to_str(self) }\n-    fn multi(f: &fn(uint)) {\n+    fn str(self) -> ~str { uint::to_str(self) }\n+    fn multi(self, f: &fn(uint)) {\n         let mut c = 0u;\n         while c < self { f(c); c += 1u; }\n     }\n }\n \n trait vec_utils<T> {\n-    fn length_() -> uint;\n-    fn iter_(f: &fn(&T));\n-    fn map_<U:Copy>(f: &fn(&T) -> U) -> ~[U];\n+    fn length_(&self, ) -> uint;\n+    fn iter_(&self, f: &fn(&T));\n+    fn map_<U:Copy>(&self, f: &fn(&T) -> U) -> ~[U];\n }\n \n impl<T> vec_utils<T> for ~[T] {\n-    fn length_() -> uint { vec::len(self) }\n-    fn iter_(f: &fn(&T)) { for self.each |x| { f(x); } }\n-    fn map_<U:Copy>(f: &fn(&T) -> U) -> ~[U] {\n+    fn length_(&self) -> uint { vec::len(self) }\n+    fn iter_(&self, f: &fn(&T)) { for self.each |x| { f(x); } }\n+    fn map_<U:Copy>(&self, f: &fn(&T) -> U) -> ~[U] {\n         let mut r = ~[];\n         for self.each |elt| { r += ~[f(elt)]; }\n         r"}, {"sha": "1146412ec4f1456550ed7705fc844497bddbd79d", "filename": "src/test/run-pass/static-method-in-trait-with-tps-intracrate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fstatic-method-in-trait-with-tps-intracrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fstatic-method-in-trait-with-tps-intracrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-method-in-trait-with-tps-intracrate.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,23 +9,23 @@\n // except according to those terms.\n \n trait Deserializer {\n-    fn read_int() -> int;\n+    fn read_int(&self) -> int;\n }\n \n trait Deserializable<D:Deserializer> {\n-    static fn deserialize(d: &D) -> Self;\n+    static fn deserialize(&self, d: &D) -> Self;\n }\n \n impl<D:Deserializer> Deserializable<D> for int {\n-    static fn deserialize(d: &D) -> int {\n+    static fn deserialize(&self, d: &D) -> int {\n         return d.read_int();\n     }\n }\n \n struct FromThinAir { dummy: () }\n \n impl Deserializer for FromThinAir {\n-    fn read_int() -> int { 22 }\n+    fn read_int(&self) -> int { 22 }\n }\n \n pub fn main() {"}, {"sha": "6dcd2a41e076476e1fe39b152c28a4ff857f2787", "filename": "src/test/run-pass/trait-bounds.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,22 +9,22 @@\n // except according to those terms.\n \n trait connection {\n-    fn read() -> int;\n+    fn read(&self) -> int;\n }\n \n trait connection_factory<C:connection> {\n-    fn create() -> C;\n+    fn create(&self) -> C;\n }\n \n type my_connection = ();\n type my_connection_factory = ();\n \n impl connection for () {\n-    fn read() -> int { 43 }\n+    fn read(&self) -> int { 43 }\n }\n \n impl connection_factory<my_connection> for my_connection_factory {\n-    fn create() -> my_connection { () }\n+    fn create(&self) -> my_connection { () }\n }\n \n pub fn main() {"}, {"sha": "328c0b6888cc94e8ab37af18b331bb3dd91e1fc3", "filename": "src/test/run-pass/trait-composition-trivial.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-composition-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-composition-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-composition-trivial.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n trait Foo {\n-    fn foo();\n+    fn foo(&self);\n }\n \n trait Bar : Foo {\n-    fn bar();\n+    fn bar(&self);\n }\n \n pub fn main() {}"}, {"sha": "ce72c7e9a44b35c799426b0f8b109b2ddda88b7e", "filename": "src/test/run-pass/trait-default-method-bound-subst2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst2.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -11,7 +11,7 @@\n // xfail-test\n \n trait A<T> {\n-    fn g(x: T) -> T { x }\n+    fn g(&self, x: T) -> T { x }\n }\n \n impl A<int> for int { }"}, {"sha": "3c1e6a59d0387377f679d31fde2ae92827670b35", "filename": "src/test/run-pass/trait-default-method-bound-subst3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst3.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -11,7 +11,7 @@\n #[allow(default_methods)];\n \n trait A {\n-    fn g<T>(x: T, y: T) -> (T, T) { (x, y) }\n+    fn g<T>(&self, x: T, y: T) -> (T, T) { (x, y) }\n }\n \n impl A for int { }"}, {"sha": "9ac66bfb737f26c9fc880291e912f71975981c71", "filename": "src/test/run-pass/trait-default-method-bound-subst4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst4.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -11,7 +11,7 @@\n #[allow(default_methods)];\n \n trait A<T> {\n-    fn g(x: uint) -> uint { x }\n+    fn g(&self, x: uint) -> uint { x }\n }\n \n impl<T> A<T> for int { }"}, {"sha": "627bc96e6ae99e67c86d7f8721ee2cdb7d832542", "filename": "src/test/run-pass/trait-default-method-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -11,7 +11,7 @@\n #[allow(default_methods)];\n \n trait A {\n-    fn g() -> int { 10 }\n+    fn g(&self) -> int { 10 }\n }\n \n impl A for int { }"}, {"sha": "85e706c9fe5d19aa7ffd31e42b8081e3bc20b93d", "filename": "src/test/run-pass/trait-generic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-generic.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -11,23 +11,23 @@\n // xfail-fast\n \n trait to_str {\n-    fn to_str() -> ~str;\n+    fn to_str(&self) -> ~str;\n }\n impl to_str for int {\n-    fn to_str() -> ~str { int::to_str(self) }\n+    fn to_str(&self) -> ~str { int::to_str(self) }\n }\n impl to_str for ~str {\n-    fn to_str() -> ~str { copy self }\n+    fn to_str(&self) -> ~str { copy self }\n }\n impl to_str for () {\n-    fn to_str() -> ~str { ~\"()\" }\n+    fn to_str(&self) -> ~str { ~\"()\" }\n }\n \n trait map<T> {\n-    fn map<U:Copy>(f: &fn(&T) -> U) -> ~[U];\n+    fn map<U:Copy>(&self, f: &fn(&T) -> U) -> ~[U];\n }\n impl<T> map<T> for ~[T] {\n-    fn map<U:Copy>(f: &fn(&T) -> U) -> ~[U] {\n+    fn map<U:Copy>(&self, f: &fn(&T) -> U) -> ~[U] {\n         let mut r = ~[];\n         for self.each |x| { r += ~[f(x)]; }\n         r"}, {"sha": "51a3168f6e811053feff89bda53233309e1006fd", "filename": "src/test/run-pass/trait-inheritance-auto.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -12,17 +12,17 @@\n // A is already a Foo Bar Baz\n impl<T:Foo + Bar + Baz> Quux for T { }\n \n-trait Foo { fn f() -> int; }\n-trait Bar { fn g() -> int; }\n-trait Baz { fn h() -> int; }\n+trait Foo { fn f(&self) -> int; }\n+trait Bar { fn g(&self) -> int; }\n+trait Baz { fn h(&self) -> int; }\n \n trait Quux: Foo + Bar + Baz { }\n \n struct A { x: int }\n \n-impl Foo for A { fn f() -> int { 10 } }\n-impl Bar for A { fn g() -> int { 20 } }\n-impl Baz for A { fn h() -> int { 30 } }\n+impl Foo for A { fn f(&self) -> int { 10 } }\n+impl Bar for A { fn g(&self) -> int { 20 } }\n+impl Baz for A { fn h(&self) -> int { 30 } }\n \n fn f<T:Quux>(a: &T) {\n     fail_unless!(a.f() == 10);"}, {"sha": "dcc1deed8461779d063f9af3c08ccf378d256393", "filename": "src/test/run-pass/trait-inheritance-call-bound-inherited.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-inheritance-call-bound-inherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-inheritance-call-bound-inherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-call-bound-inherited.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo { fn f() -> int; }\n-trait Bar : Foo { fn g() -> int; }\n+trait Foo { fn f(&self) -> int; }\n+trait Bar : Foo { fn g(&self) -> int; }\n \n struct A { x: int }\n \n-impl Foo for A { fn f() -> int { 10 } }\n-impl Bar for A { fn g() -> int { 20 } }\n+impl Foo for A { fn f(&self) -> int { 10 } }\n+impl Bar for A { fn g(&self) -> int { 20 } }\n \n // Call a function on Foo, given a T: Bar\n fn gg<T:Bar>(a: &T) -> int {"}, {"sha": "ad23cab016e735f847037ec3e7d62d617b5b9888", "filename": "src/test/run-pass/trait-inheritance-call-bound-inherited2.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-inheritance-call-bound-inherited2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-inheritance-call-bound-inherited2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-call-bound-inherited2.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo { fn f() -> int; }\n-trait Bar : Foo { fn g() -> int; }\n-trait Baz : Bar { fn h() -> int; }\n+trait Foo { fn f(&self) -> int; }\n+trait Bar : Foo { fn g(&self) -> int; }\n+trait Baz : Bar { fn h(&self) -> int; }\n \n struct A { x: int }\n \n-impl Foo for A { fn f() -> int { 10 } }\n-impl Bar for A { fn g() -> int { 20 } }\n-impl Baz for A { fn h() -> int { 30 } }\n+impl Foo for A { fn f(&self) -> int { 10 } }\n+impl Bar for A { fn g(&self) -> int { 20 } }\n+impl Baz for A { fn h(&self) -> int { 30 } }\n \n // Call a function on Foo, given a T: Baz,\n // which is inherited via Bar"}, {"sha": "39565382118f9d5c9c3e86b5f45ac7bc9ed9c509", "filename": "src/test/run-pass/trait-inheritance-cast-without-call-to-supertrait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-inheritance-cast-without-call-to-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-inheritance-cast-without-call-to-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-cast-without-call-to-supertrait.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -12,23 +12,23 @@\n // methods. Not testing supertrait methods\n \n trait Foo {\n-    fn f() -> int;\n+    fn f(&self) -> int;\n }\n \n trait Bar : Foo {\n-    fn g() -> int;\n+    fn g(&self) -> int;\n }\n \n struct A {\n     x: int\n }\n \n impl Foo for A {\n-    fn f() -> int { 10 }\n+    fn f(&self) -> int { 10 }\n }\n \n impl Bar for A {\n-    fn g() -> int { 20 }\n+    fn g(&self) -> int { 20 }\n }\n \n pub fn main() {"}, {"sha": "2cde60ecf58f2643dc91f675528967f8107d6d5b", "filename": "src/test/run-pass/trait-inheritance-cross-trait-call.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-inheritance-cross-trait-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-inheritance-cross-trait-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-cross-trait-call.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -8,16 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo { fn f() -> int; }\n-trait Bar : Foo { fn g() -> int; }\n+trait Foo { fn f(&self) -> int; }\n+trait Bar : Foo { fn g(&self) -> int; }\n \n struct A { x: int }\n \n-impl Foo for A { fn f() -> int { 10 } }\n+impl Foo for A { fn f(&self) -> int { 10 } }\n \n impl Bar for A {\n     // Testing that this impl can call the impl of Foo\n-    fn g() -> int { self.f() }\n+    fn g(&self) -> int { self.f() }\n }\n \n pub fn main() {"}, {"sha": "9ca3ccaa22cd4b9eee7077a770d58df1e50c7463", "filename": "src/test/run-pass/trait-inheritance-simple.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-inheritance-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-inheritance-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-simple.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo { fn f() -> int; }\n-trait Bar : Foo { fn g() -> int; }\n+trait Foo { fn f(&self) -> int; }\n+trait Bar : Foo { fn g(&self) -> int; }\n \n struct A { x: int }\n \n-impl Foo for A { fn f() -> int { 10 } }\n-impl Bar for A { fn g() -> int { 20 } }\n+impl Foo for A { fn f(&self) -> int { 10 } }\n+impl Bar for A { fn g(&self) -> int { 20 } }\n \n fn ff<T:Foo>(a: &T) -> int {\n     a.f()"}, {"sha": "c1ee7a2c00a222e3e4698a24a6a2f31f1b02ece3", "filename": "src/test/run-pass/trait-inheritance-subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n pub trait Add<RHS,Result> {\n-    pure fn add(rhs: &RHS) -> Result;\n+    pure fn add(&self, rhs: &RHS) -> Result;\n }\n \n trait MyNum : Add<Self,Self> { }\n \n struct MyInt { val: int }\n \n impl Add<MyInt, MyInt> for MyInt {\n-    pure fn add(other: &MyInt) -> MyInt { mi(self.val + other.val) }\n+    pure fn add(&self, other: &MyInt) -> MyInt { mi(self.val + other.val) }\n }\n \n impl MyNum for MyInt;"}, {"sha": "20b7d529fae206427e8ab1962c6feb3e54371f3e", "filename": "src/test/run-pass/trait-inheritance-subst2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst2.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,25 +9,25 @@\n // except according to those terms.\n \n trait Panda<T> {\n-    fn chomp(bamboo: &T) -> T;\n+    fn chomp(&self, bamboo: &T) -> T;\n }\n \n trait Add<RHS,Result>: Panda<RHS> {\n-    fn add(rhs: &RHS) -> Result;\n+    fn add(&self, rhs: &RHS) -> Result;\n }\n \n trait MyNum : Add<Self,Self> { }\n \n struct MyInt { val: int }\n \n impl Panda<MyInt> for MyInt {\n-    fn chomp(bamboo: &MyInt) -> MyInt {\n+    fn chomp(&self, bamboo: &MyInt) -> MyInt {\n         mi(self.val + bamboo.val)\n     }\n }\n \n impl Add<MyInt, MyInt> for MyInt {\n-    fn add(other: &MyInt) -> MyInt { self.chomp(other) }\n+    fn add(&self, other: &MyInt) -> MyInt { self.chomp(other) }\n }\n \n impl MyNum for MyInt;"}, {"sha": "c70c2ecf9768a9d398767aa902c11ca3c1041e0e", "filename": "src/test/run-pass/trait-inheritance-visibility.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-inheritance-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-inheritance-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-visibility.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n mod traits {\n-    pub trait Foo { fn f() -> int; }\n+    pub trait Foo { fn f(&self) -> int; }\n \n-    impl Foo for int { fn f() -> int { 10 } }\n+    impl Foo for int { fn f(&self) -> int { 10 } }\n }\n \n trait Quux: traits::Foo { }"}, {"sha": "d18452f11fa4190a4dc52600708d4027ba9c4cc2", "filename": "src/test/run-pass/trait-inheritance2.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-inheritance2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-inheritance2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance2.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -8,17 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo { fn f() -> int; }\n-trait Bar { fn g() -> int; }\n-trait Baz { fn h() -> int; }\n+trait Foo { fn f(&self) -> int; }\n+trait Bar { fn g(&self) -> int; }\n+trait Baz { fn h(&self) -> int; }\n \n trait Quux: Foo + Bar + Baz { }\n \n struct A { x: int }\n \n-impl Foo for A { fn f() -> int { 10 } }\n-impl Bar for A { fn g() -> int { 20 } }\n-impl Baz for A { fn h() -> int { 30 } }\n+impl Foo for A { fn f(&self) -> int { 10 } }\n+impl Bar for A { fn g(&self) -> int { 20 } }\n+impl Baz for A { fn h(&self) -> int { 30 } }\n impl Quux for A;\n \n fn f<T:Quux + Foo + Bar + Baz>(a: &T) {"}, {"sha": "1ce2cddc29b054dfe39e0475660224ea5280f7a7", "filename": "src/test/run-pass/trait-region-pointer-simple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-region-pointer-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-region-pointer-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-region-pointer-simple.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n trait Foo {\n-    fn f() -> int;\n+    fn f(&self) -> int;\n }\n \n struct A {\n     x: int\n }\n \n impl Foo for A {\n-    fn f() -> int {\n+    fn f(&self) -> int {\n         io::println(~\"Today's number is \" + self.x.to_str());\n         return self.x;\n     }"}, {"sha": "d5e1a1f2120a5101ea1632f48cbc0a524d5a6188", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -17,15 +17,15 @@ extern mod core;\n use core::{str, int, vec};\n \n trait to_str {\n-    fn to_str() -> ~str;\n+    fn to_str(&self) -> ~str;\n }\n \n impl to_str for int {\n-    fn to_str() -> ~str { int::to_str(self) }\n+    fn to_str(&self) -> ~str { int::to_str(self) }\n }\n \n impl<T:to_str> to_str for ~[T] {\n-    fn to_str() -> ~str {\n+    fn to_str(&self) -> ~str {\n         ~\"[\" + str::connect(vec::map(self, |e| e.to_str() ), ~\", \") + ~\"]\"\n     }\n }"}, {"sha": "21e05aba27b5aa5cd9e153ead61d192b4e742258", "filename": "src/test/run-pass/traits-default-method-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftraits-default-method-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftraits-default-method-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-default-method-macro.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -11,7 +11,7 @@\n #[allow(default_methods)];\n \n trait Foo {\n-    fn bar() -> ~str {\n+    fn bar(&self) -> ~str {\n         fmt!(\"test\")\n     }\n }"}, {"sha": "8edb83ce60ec4d8a73ab3114567728bf6e67b2f2", "filename": "src/test/run-pass/traits-default-method-trivial.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftraits-default-method-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftraits-default-method-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-default-method-trivial.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -11,16 +11,16 @@\n #[allow(default_methods)];\n \n trait Cat {\n-    fn meow() -> bool;\n-    fn scratch() -> bool;\n-    fn purr() -> bool { true }\n+    fn meow(&self) -> bool;\n+    fn scratch(&self) -> bool;\n+    fn purr(&self) -> bool { true }\n }\n \n impl Cat for int {\n-    fn meow() -> bool {\n+    fn meow(&self) -> bool {\n         self.scratch()\n     }\n-    fn scratch() -> bool {\n+    fn scratch(&self) -> bool {\n         self.purr()\n     }\n }"}, {"sha": "56b03bc44897055a4e84691a9c4ab4d2983f65b7", "filename": "src/test/run-pass/typeclasses-eq-example.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -11,13 +11,13 @@\n // Example from lkuper's intern talk, August 2012.\n \n trait Equal {\n-    fn isEq(a: Self) -> bool;\n+    fn isEq(&self, a: Self) -> bool;\n }\n \n enum Color { cyan, magenta, yellow, black }\n \n impl Equal for Color {\n-    fn isEq(a: Color) -> bool {\n+    fn isEq(&self, a: Color) -> bool {\n         match (self, a) {\n           (cyan, cyan)       => { true  }\n           (magenta, magenta) => { true  }\n@@ -34,7 +34,7 @@ enum ColorTree {\n }\n \n impl Equal for ColorTree {\n-    fn isEq(a: ColorTree) -> bool {\n+    fn isEq(&self, a: ColorTree) -> bool {\n         match (self, a) {\n           (leaf(x), leaf(y)) => { x.isEq(y) }\n           (branch(l1, r1), branch(l2, r2)) => { "}, {"sha": "0b59ced98c908f4362a58c25e667aafc52e04da1", "filename": "src/test/run-pass/use-trait-before-def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fuse-trait-before-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa66e8e07ca565119de195ceefb20cff50ae1ea/src%2Ftest%2Frun-pass%2Fuse-trait-before-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-trait-before-def.rs?ref=8fa66e8e07ca565119de195ceefb20cff50ae1ea", "patch": "@@ -10,6 +10,6 @@\n \n // Issue #1761\n \n-impl foo for int { fn foo() -> int { 10 } }\n-trait foo { fn foo() -> int; }\n+impl foo for int { fn foo(&self) -> int { 10 } }\n+trait foo { fn foo(&self) -> int; }\n pub fn main() {}"}]}