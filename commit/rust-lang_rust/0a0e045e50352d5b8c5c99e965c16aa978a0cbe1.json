{"sha": "0a0e045e50352d5b8c5c99e965c16aa978a0cbe1", "node_id": "C_kwDOAAsO6NoAKDBhMGUwNDVlNTAzNTJkNWI4YzVjOTllOTY1YzE2YWE5NzhhMGNiZTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-14T08:06:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-14T08:06:40Z"}, "message": "Auto merge of #111552 - matthiaskrgr:rollup-4nidoti, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #111463 (Better diagnostics for `env!` where variable contains escape)\n - #111477 (better diagnostics for `impl<..> impl Trait for Type`)\n - #111534 (rustdoc-json: Add tests for `#![feature(inherent_associated_types)]`)\n - #111549 ([rustdoc] Convert more GUI tests colors to their original format)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c2cb8ed5aac700c698ba1af046b721a157cd00d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2cb8ed5aac700c698ba1af046b721a157cd00d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1", "html_url": "https://github.com/rust-lang/rust/commit/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "html_url": "https://github.com/rust-lang/rust/commit/bc888958c9e1fdde09791f15d3421bdc3b6d7d29"}, {"sha": "d1cd1273f515eb668578dd58585a75b4e1c3012c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1cd1273f515eb668578dd58585a75b4e1c3012c", "html_url": "https://github.com/rust-lang/rust/commit/d1cd1273f515eb668578dd58585a75b4e1c3012c"}], "stats": {"total": 396, "additions": 296, "deletions": 100}, "files": [{"sha": "8f64e3328619e054b0c24c2ee3966b9c6b12f43b", "filename": "compiler/rustc_builtin_macros/src/env.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs?ref=0a0e045e50352d5b8c5c99e965c16aa978a0cbe1", "patch": "@@ -63,15 +63,16 @@ pub fn expand_env<'cx>(\n         Some(exprs) => exprs.into_iter(),\n     };\n \n-    let Some((var, _style)) = expr_to_string(cx, exprs.next().unwrap(), \"expected string literal\") else {\n+    let var_expr = exprs.next().unwrap();\n+    let Some((var, _)) = expr_to_string(cx, var_expr.clone(), \"expected string literal\") else {\n         return DummyResult::any(sp);\n     };\n \n     let custom_msg = match exprs.next() {\n         None => None,\n         Some(second) => match expr_to_string(cx, second, \"expected string literal\") {\n             None => return DummyResult::any(sp),\n-            Some((s, _style)) => Some(s),\n+            Some((s, _)) => Some(s),\n         },\n     };\n \n@@ -80,10 +81,15 @@ pub fn expand_env<'cx>(\n     cx.sess.parse_sess.env_depinfo.borrow_mut().insert((var, value));\n     let e = match value {\n         None => {\n+            // Use the string literal in the code in the diagnostic to avoid confusing diagnostics,\n+            // e.g. when the literal contains escape sequences.\n+            let ast::ExprKind::Lit(ast::token::Lit { kind: ast::token::LitKind::Str, symbol: original_var, ..}) = &var_expr.kind else {\n+                unreachable!(\"`expr_to_string` ensures this is a string lit\")\n+            };\n             cx.emit_err(errors::EnvNotDefined {\n                 span: sp,\n                 msg: custom_msg,\n-                var,\n+                var: *original_var,\n                 help: custom_msg.is_none().then(|| help_for_missing_env_var(var.as_str())),\n             });\n             return DummyResult::any(sp);"}, {"sha": "2d0f466e236cea87c8cd6ef5f68f04e259c0552e", "filename": "compiler/rustc_parse/messages.ftl", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/compiler%2Frustc_parse%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/compiler%2Frustc_parse%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fmessages.ftl?ref=0a0e045e50352d5b8c5c99e965c16aa978a0cbe1", "patch": "@@ -478,6 +478,11 @@ parse_missing_for_in_trait_impl = missing `for` in a trait impl\n \n parse_expected_trait_in_trait_impl_found_type = expected a trait, found type\n \n+parse_extra_impl_keyword_in_trait_impl = unexpected `impl` keyword\n+    .suggestion = remove the extra `impl`\n+    .note = this is parsed as an `impl Trait` type, but a trait is expected at this position\n+\n+\n parse_non_item_in_item_list = non-item in item list\n     .suggestion_use_const_not_let = consider using `const` instead of `let` for associated const\n     .label_list_start = item list starts here"}, {"sha": "84494eab855c4ffcedbd08b2be79517c083be1eb", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=0a0e045e50352d5b8c5c99e965c16aa978a0cbe1", "patch": "@@ -1519,6 +1519,16 @@ pub(crate) struct ExpectedTraitInTraitImplFoundType {\n     pub span: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(parse_extra_impl_keyword_in_trait_impl)]\n+pub(crate) struct ExtraImplKeywordInTraitImpl {\n+    #[primary_span]\n+    #[suggestion(code = \"\", applicability = \"maybe-incorrect\")]\n+    pub extra_impl_kw: Span,\n+    #[note]\n+    pub impl_trait_span: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(parse_bounds_not_allowed_on_trait_aliases)]\n pub(crate) struct BoundsNotAllowedOnTraitAliases {"}, {"sha": "dc18d400f1e9d1059195c623f78982ab64e86807", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=0a0e045e50352d5b8c5c99e965c16aa978a0cbe1", "patch": "@@ -603,10 +603,24 @@ impl<'a> Parser<'a> {\n                 let path = match ty_first.kind {\n                     // This notably includes paths passed through `ty` macro fragments (#46438).\n                     TyKind::Path(None, path) => path,\n-                    _ => {\n-                        self.sess.emit_err(errors::ExpectedTraitInTraitImplFoundType {\n-                            span: ty_first.span,\n-                        });\n+                    other => {\n+                        if let TyKind::ImplTrait(_, bounds) = other\n+                            && let [bound] = bounds.as_slice()\n+                        {\n+                            // Suggest removing extra `impl` keyword:\n+                            // `impl<T: Default> impl Default for Wrapper<T>`\n+                            //                   ^^^^^\n+                            let extra_impl_kw = ty_first.span.until(bound.span());\n+                            self.sess\n+                                .emit_err(errors::ExtraImplKeywordInTraitImpl {\n+                                    extra_impl_kw,\n+                                    impl_trait_span: ty_first.span\n+                                });\n+                        } else {\n+                            self.sess.emit_err(errors::ExpectedTraitInTraitImplFoundType {\n+                                span: ty_first.span,\n+                            });\n+                        }\n                         err_path(ty_first.span)\n                     }\n                 };"}, {"sha": "6b4966ddeb4085e6eebcf9e21769014c50b56459", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=0a0e045e50352d5b8c5c99e965c16aa978a0cbe1", "patch": "@@ -1 +1 @@\n-0.16.0\n\\ No newline at end of file\n+0.16.3\n\\ No newline at end of file"}, {"sha": "90f7160b7249095dfed3f7db5510fe56cab34408", "filename": "tests/rustdoc-gui/search-result-color.goml", "status": "modified", "additions": 86, "deletions": 86, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/tests%2Frustdoc-gui%2Fsearch-result-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/tests%2Frustdoc-gui%2Fsearch-result-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsearch-result-color.goml?ref=0a0e045e50352d5b8c5c99e965c16aa978a0cbe1", "patch": "@@ -47,89 +47,89 @@ reload:\n wait-for: \"#search-tabs\"\n assert-css: (\n     \"#search-tabs > button > .count\",\n-    {\"color\": \"rgb(136, 136, 136)\"},\n+    {\"color\": \"#888\"},\n     ALL,\n )\n assert-css: (\n     \"//*[@class='desc'][text()='Just a normal struct.']\",\n-    {\"color\": \"rgb(197, 197, 197)\"},\n+    {\"color\": \"#c5c5c5\"},\n )\n assert-css: (\n     \"//*[@class='result-name']/*[text()='test_docs::']\",\n-    {\"color\": \"rgb(0, 150, 207)\"},\n+    {\"color\": \"#0096cf\"},\n )\n \n // Checking the color of the bottom border.\n assert-css: (\n     \".search-results > a\",\n-    {\"border-bottom-color\": \"rgba(170, 170, 170, 0.2)\"}\n+    {\"border-bottom-color\": \"#aaa3\"}\n )\n \n // Checking the color of \"keyword\" text.\n assert-css: (\n     \"//*[@class='result-name']//*[text()='(keyword)']\",\n-    {\"color\": \"rgb(120, 135, 151)\"},\n+    {\"color\": \"#788797\"},\n )\n \n-store-value: (entry_color, \"rgb(0, 150, 207)\") // color of the search entry\n-store-value: (hover_entry_color, \"rgb(255, 255, 255)\") // color of the hovered/focused search entry\n-store-value: (background_color, \"rgba(0, 0, 0, 0)\") // background color\n-store-value: (hover_background_color, \"rgb(60, 60, 60)\") // hover background color\n+store-value: (entry_color, \"#0096cf\") // color of the search entry\n+store-value: (hover_entry_color, \"#fff\") // color of the hovered/focused search entry\n+store-value: (background_color, \"transparent\") // background color\n+store-value: (hover_background_color, \"#3c3c3c\") // hover background color\n \n call-function: (\n     \"check-result-color\", (\n         \"keyword\", // item kind\n-        \"rgb(57, 175, 215)\", // color of item kind\n-        \"rgb(57, 175, 215)\", // color of hovered/focused item kind\n+        \"#39afd7\", // color of item kind\n+        \"#39afd7\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"struct\", // item kind\n-        \"rgb(255, 160, 165)\", // color of item kind\n-        \"rgb(255, 160, 165)\", // color of hovered/focused item kind\n+        \"#ffa0a5\", // color of item kind\n+        \"#ffa0a5\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"associatedtype\", // item kind\n-        \"rgb(57, 175, 215)\", // color of item kind\n-        \"rgb(57, 175, 215)\", // color of hovered/focused item kind\n+        \"#39afd7\", // color of item kind\n+        \"#39afd7\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"tymethod\", // item kind\n-        \"rgb(253, 214, 135)\", // color of item kind\n-        \"rgb(253, 214, 135)\", // color of hovered/focused item kind\n+        \"#fdd687\", // color of item kind\n+        \"#fdd687\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"method\", // item kind\n-        \"rgb(253, 214, 135)\", // color of item kind\n-        \"rgb(253, 214, 135)\", // color of hovered/focused item kind\n+        \"#fdd687\", // color of item kind\n+        \"#fdd687\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"structfield\", // item kind\n-        \"rgb(0, 150, 207)\", // color of item kind\n-        \"rgb(255, 255, 255)\", // color of hovered/focused item kind\n+        \"#0096cf\", // color of item kind\n+        \"#fff\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"macro\", // item kind\n-        \"rgb(163, 122, 204)\", // color of item kind\n-        \"rgb(163, 122, 204)\", // color of hovered/focused item kind\n+        \"#a37acc\", // color of item kind\n+        \"#a37acc\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"fn\", // item kind\n-        \"rgb(253, 214, 135)\", // color of item kind\n-        \"rgb(253, 214, 135)\", // color of hovered/focused item kind\n+        \"#fdd687\", // color of item kind\n+        \"#fdd687\", // color of hovered/focused item kind\n     ),\n )\n \n@@ -138,19 +138,19 @@ move-cursor-to: \".search-input\"\n focus: \".search-input\" // To ensure the `<a>` container isnt focus or hover.\n assert-css: (\n     \"//*[@class='result-name']/*[text()='test_docs::']/ancestor::a\",\n-    {\"color\": \"rgb(0, 150, 207)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+    {\"color\": \"#0096cf\", \"background-color\": \"transparent\"},\n     ALL,\n )\n \n // Checking color and background on hover.\n move-cursor-to: \"//*[@class='desc'][text()='Just a normal struct.']\"\n assert-css: (\n     \"//*[@class='result-name']/*[text()='test_docs::']\",\n-    {\"color\": \"rgb(255, 255, 255)\"},\n+    {\"color\": \"#fff\"},\n )\n assert-css: (\n     \"//*[@class='result-name']/*[text()='test_docs::']/ancestor::a\",\n-    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n+    {\"color\": \"#fff\", \"background-color\": \"rgb(60, 60, 60)\"},\n )\n \n // Dark theme\n@@ -164,89 +164,89 @@ reload:\n wait-for: \"#search-tabs\"\n assert-css: (\n     \"#search-tabs > button > .count\",\n-    {\"color\": \"rgb(136, 136, 136)\"},\n+    {\"color\": \"#888\"},\n     ALL,\n )\n assert-css: (\n     \"//*[@class='desc'][text()='Just a normal struct.']\",\n-    {\"color\": \"rgb(221, 221, 221)\"},\n+    {\"color\": \"#ddd\"},\n )\n assert-css: (\n     \"//*[@class='result-name']/*[text()='test_docs::']\",\n-    {\"color\": \"rgb(221, 221, 221)\"},\n+    {\"color\": \"#ddd\"},\n )\n \n // Checking the color of the bottom border.\n assert-css: (\n     \".search-results > a\",\n-    {\"border-bottom-color\": \"rgba(170, 170, 170, 0.2)\"}\n+    {\"border-bottom-color\": \"#aaa3\"}\n )\n \n // Checking the color for \"keyword\" text.\n assert-css: (\n     \"//*[@class='result-name']//*[text()='(keyword)']\",\n-    {\"color\": \"rgb(221, 221, 221)\"},\n+    {\"color\": \"#ddd\"},\n )\n \n-store-value: (entry_color, \"rgb(221, 221, 221)\") // color of the search entry\n-store-value: (hover_entry_color, \"rgb(221, 221, 221)\") // color of the hovered/focused search entry\n-store-value: (background_color, \"rgba(0, 0, 0, 0)\") // background color\n-store-value: (hover_background_color, \"rgb(97, 97, 97)\") // hover background color\n+store-value: (entry_color, \"#ddd\") // color of the search entry\n+store-value: (hover_entry_color, \"#ddd\") // color of the hovered/focused search entry\n+store-value: (background_color, \"transparent\") // background color\n+store-value: (hover_background_color, \"#616161\") // hover background color\n \n call-function: (\n     \"check-result-color\", (\n         \"keyword\", // item kind\n-        \"rgb(210, 153, 29)\", // color of item kind\n-        \"rgb(210, 153, 29)\", // color of hovered/focused item kind\n+        \"#d2991d\", // color of item kind\n+        \"#d2991d\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"struct\", // item kind\n-        \"rgb(45, 191, 184)\", // color of item kind\n-        \"rgb(45, 191, 184)\", // color of hovered/focused item kind\n+        \"#2dbfb8\", // color of item kind\n+        \"#2dbfb8\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"associatedtype\", // item kind\n-        \"rgb(210, 153, 29)\", // color of item kind\n-        \"rgb(210, 153, 29)\", // color of hovered/focused item kind\n+        \"#d2991d\", // color of item kind\n+        \"#d2991d\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"tymethod\", // item kind\n-        \"rgb(43, 171, 99)\", // color of item kind\n-        \"rgb(43, 171, 99)\", // color of hovered/focused item kind\n+        \"#2bab63\", // color of item kind\n+        \"#2bab63\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"method\", // item kind\n-        \"rgb(43, 171, 99)\", // color of item kind\n-        \"rgb(43, 171, 99)\", // color of hovered/focused item kind\n+        \"#2bab63\", // color of item kind\n+        \"#2bab63\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"structfield\", // item kind\n-        \"rgb(221, 221, 221)\", // color of item kind\n-        \"rgb(221, 221, 221)\", // color of hovered/focused item kind\n+        \"#ddd\", // color of item kind\n+        \"#ddd\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"macro\", // item kind\n-        \"rgb(9, 189, 0)\", // color of item kind\n-        \"rgb(9, 189, 0)\", // color of hovered/focused item kind\n+        \"#09bd00\", // color of item kind\n+        \"#09bd00\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"fn\", // item kind\n-        \"rgb(43, 171, 99)\", // color of item kind\n-        \"rgb(43, 171, 99)\", // color of hovered/focused item kind\n+        \"#2bab63\", // color of item kind\n+        \"#2bab63\", // color of hovered/focused item kind\n     ),\n )\n \n@@ -255,7 +255,7 @@ move-cursor-to: \".search-input\"\n focus: \".search-input\" // To ensure the `<a>` container isnt focus or hover.\n assert-css: (\n     \"//*[@class='result-name']/*[text()='test_docs::']/ancestor::a\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+    {\"color\": \"#ddd\", \"background-color\": \"transparent\"},\n )\n \n // Light theme\n@@ -266,89 +266,89 @@ reload:\n wait-for: \"#search-tabs\"\n assert-css: (\n     \"#search-tabs > button > .count\",\n-    {\"color\": \"rgb(136, 136, 136)\"},\n+    {\"color\": \"#888\"},\n     ALL,\n )\n assert-css: (\n     \"//*[@class='desc'][text()='Just a normal struct.']\",\n-    {\"color\": \"rgb(0, 0, 0)\"},\n+    {\"color\": \"#000\"},\n )\n assert-css: (\n     \"//*[@class='result-name']/*[text()='test_docs::']\",\n-    {\"color\": \"rgb(0, 0, 0)\"},\n+    {\"color\": \"#000\"},\n )\n \n // Checking the color of the bottom border.\n assert-css: (\n     \".search-results > a\",\n-    {\"border-bottom-color\": \"rgba(170, 170, 170, 0.2)\"}\n+    {\"border-bottom-color\": \"#aaa3\"}\n )\n \n // Checking the color for \"keyword\" text.\n assert-css: (\n     \"//*[@class='result-name']//*[text()='(keyword)']\",\n-    {\"color\": \"rgb(0, 0, 0)\"},\n+    {\"color\": \"#000\"},\n )\n \n-store-value: (entry_color, \"rgb(0, 0, 0)\") // color of the search entry\n-store-value: (hover_entry_color, \"rgb(0, 0, 0)\") // color of the hovered/focused search entry\n-store-value: (background_color, \"rgba(0, 0, 0, 0)\") // background color\n-store-value: (hover_background_color, \"rgb(204, 204, 204)\") // hover background color\n+store-value: (entry_color, \"#000\") // color of the search entry\n+store-value: (hover_entry_color, \"#000\") // color of the hovered/focused search entry\n+store-value: (background_color, \"transparent\") // background color\n+store-value: (hover_background_color, \"#ccc\") // hover background color\n \n call-function: (\n     \"check-result-color\", (\n         \"keyword\", // item kind\n-        \"rgb(56, 115, 173)\", // color of item kind\n-        \"rgb(56, 115, 173)\", // color of hovered/focused item kind\n+        \"#3873ad\", // color of item kind\n+        \"#3873ad\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"struct\", // item kind\n-        \"rgb(173, 55, 138)\", // color of item kind\n-        \"rgb(173, 55, 138)\", // color of hovered/focused item kind\n+        \"#ad378a\", // color of item kind\n+        \"#ad378a\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"associatedtype\", // item kind\n-        \"rgb(56, 115, 173)\", // color of item kind\n-        \"rgb(56, 115, 173)\", // color of hovered/focused item kind\n+        \"#3873ad\", // color of item kind\n+        \"#3873ad\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"tymethod\", // item kind\n-        \"rgb(173, 124, 55)\", // color of item kind\n-        \"rgb(173, 124, 55)\", // color of hovered/focused item kind\n+        \"#ad7c37\", // color of item kind\n+        \"#ad7c37\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"method\", // item kind\n-        \"rgb(173, 124, 55)\", // color of item kind\n-        \"rgb(173, 124, 55)\", // color of hovered/focused item kind\n+        \"#ad7c37\", // color of item kind\n+        \"#ad7c37\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"structfield\", // item kind\n-        \"rgb(0, 0, 0)\", // color of item kind\n-        \"rgb(0, 0, 0)\", // color of hovered/focused item kind\n+        \"#000\", // color of item kind\n+        \"#000\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"macro\", // item kind\n-        \"rgb(6, 128, 0)\", // color of item kind\n-        \"rgb(6, 128, 0)\", // color of hovered/focused item kind\n+        \"#068000\", // color of item kind\n+        \"#068000\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"fn\", // item kind\n-        \"rgb(173, 124, 55)\", // color of item kind\n-        \"rgb(173, 124, 55)\", // color of hovered/focused item kind\n+        \"#ad7c37\", // color of item kind\n+        \"#ad7c37\", // color of hovered/focused item kind\n     ),\n )\n \n@@ -357,7 +357,7 @@ move-cursor-to: \".search-input\"\n focus: \".search-input\" // To ensure the `<a>` container isnt focus or hover.\n assert-css: (\n     \"//*[@class='result-name']/*[text()='test_docs::']/ancestor::a\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+    {\"color\": \"#000\", \"background-color\": \"transparent\"},\n )\n \n // Check the alias.\n@@ -386,16 +386,16 @@ define-function: (\n \n call-function: (\"check-alias\", {\n     \"theme\": \"ayu\",\n-    \"alias\": \"rgb(197, 197, 197)\",\n-    \"grey\": \"rgb(153, 153, 153)\",\n+    \"alias\": \"#c5c5c5\",\n+    \"grey\": \"#999\",\n })\n call-function: (\"check-alias\", {\n     \"theme\": \"dark\",\n-    \"alias\": \"rgb(255, 255, 255)\",\n-    \"grey\": \"rgb(204, 204, 204)\",\n+    \"alias\": \"#fff\",\n+    \"grey\": \"#ccc\",\n })\n call-function: (\"check-alias\", {\n     \"theme\": \"light\",\n-    \"alias\": \"rgb(0, 0, 0)\",\n-    \"grey\": \"rgb(153, 153, 153)\",\n+    \"alias\": \"#000\",\n+    \"grey\": \"#999\",\n })"}, {"sha": "ed63def93df0cfbf3d59f5bbdbdeced877b969a0", "filename": "tests/rustdoc-json/type/inherent_associated_type.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type.rs?ref=0a0e045e50352d5b8c5c99e965c16aa978a0cbe1", "patch": "@@ -0,0 +1,29 @@\n+// ignore-tidy-linelength\n+#![feature(inherent_associated_types)]\n+#![feature(no_core)]\n+#![allow(incomplete_features)]\n+#![no_core]\n+\n+// @set OwnerMetadata = '$.index[*][?(@.name==\"OwnerMetadata\")].id'\n+pub struct OwnerMetadata;\n+// @set Owner = '$.index[*][?(@.name==\"Owner\")].id'\n+pub struct Owner;\n+\n+pub fn create() -> Owner::Metadata {\n+    OwnerMetadata\n+}\n+// @is '$.index[*][?(@.name==\"create\")].inner.decl.output.kind' '\"qualified_path\"'\n+// @is '$.index[*][?(@.name==\"create\")].inner.decl.output.inner.name' '\"Metadata\"'\n+// @is '$.index[*][?(@.name==\"create\")].inner.decl.output.inner.trait' null\n+// @is '$.index[*][?(@.name==\"create\")].inner.decl.output.inner.self_type.kind' '\"resolved_path\"'\n+// @is '$.index[*][?(@.name==\"create\")].inner.decl.output.inner.self_type.inner.id' $Owner\n+\n+/// impl\n+impl Owner {\n+    /// iat\n+    pub type Metadata = OwnerMetadata;\n+}\n+// @set iat = '$.index[*][?(@.docs==\"iat\")].id'\n+// @is '$.index[*][?(@.docs==\"impl\")].inner.items[*]' $iat\n+// @is '$.index[*][?(@.docs==\"iat\")].kind' '\"assoc_type\"'\n+// @is '$.index[*][?(@.docs==\"iat\")].inner.default.inner.id' $OwnerMetadata"}, {"sha": "a089600b692d6395a3cc1618c3864b7bba15c4dc", "filename": "tests/rustdoc-json/type/inherent_associated_type_bound.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_bound.rs?ref=0a0e045e50352d5b8c5c99e965c16aa978a0cbe1", "patch": "@@ -0,0 +1,21 @@\n+// ignore-tidy-linelength\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+// @set Carrier = '$.index[*][?(@.name==\"Carrier\")].id'\n+pub struct Carrier<'a>(&'a ());\n+\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.kind' '\"function_pointer\"'\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.generic_params[*].name' \\\"\"'b\"\\\"\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].kind' '\"qualified_path\"'\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].inner.self_type.inner.id' $Carrier\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].inner.self_type.inner.args.angle_bracketed.args[0].lifetime' \\\"\"'b\"\\\"\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].inner.name' '\"Focus\"'\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].inner.trait' null\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].inner.args.angle_bracketed.args[0].type.inner' '\"i32\"'\n+\n+pub type User = for<'b> fn(Carrier<'b>::Focus<i32>);\n+\n+impl<'a> Carrier<'a> {\n+    pub type Focus<T> = &'a mut T;\n+}"}, {"sha": "30c68bfe56c917d0c88cb45b22062280588e9106", "filename": "tests/rustdoc-json/type/inherent_associated_type_projections.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_projections.rs?ref=0a0e045e50352d5b8c5c99e965c16aa978a0cbe1", "patch": "@@ -0,0 +1,33 @@\n+// ignore-tidy-linelength\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+// @set Parametrized = '$.index[*][?(@.name==\"Parametrized\")].id'\n+pub struct Parametrized<T>(T);\n+\n+// @is '$.index[*][?(@.name==\"Test\")].inner.type.kind' '\"qualified_path\"'\n+// @is '$.index[*][?(@.name==\"Test\")].inner.type.inner.self_type.inner.id' $Parametrized\n+// @is '$.index[*][?(@.name==\"Test\")].inner.type.inner.self_type.inner.args.angle_bracketed.args[0].type' '{\"inner\": \"i32\", \"kind\": \"primitive\"}'\n+// @is '$.index[*][?(@.name==\"Test\")].inner.type.inner.name' '\"Proj\"'\n+// @is '$.index[*][?(@.name==\"Test\")].inner.type.inner.trait' null\n+pub type Test = Parametrized<i32>::Proj;\n+\n+/// param_bool\n+impl Parametrized<bool> {\n+    /// param_bool_proj\n+    pub type Proj = ();\n+}\n+\n+/// param_i32\n+impl Parametrized<i32> {\n+    /// param_i32_proj\n+    pub type Proj = String;\n+}\n+\n+// @set param_bool = '$.index[*][?(@.docs==\"param_bool\")].id'\n+// @set param_i32 = '$.index[*][?(@.docs==\"param_i32\")].id'\n+// @set param_bool_proj = '$.index[*][?(@.docs==\"param_bool_proj\")].id'\n+// @set param_i32_proj = '$.index[*][?(@.docs==\"param_i32_proj\")].id'\n+\n+// @is '$.index[*][?(@.docs==\"param_bool\")].inner.items[*]' $param_bool_proj\n+// @is '$.index[*][?(@.docs==\"param_i32\")].inner.items[*]' $param_i32_proj"}, {"sha": "d898feb78c6f7cdcf041a58519274b2da917a1b3", "filename": "tests/ui/extenv/extenv-escaped-var.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/tests%2Fui%2Fextenv%2Fextenv-escaped-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/tests%2Fui%2Fextenv%2Fextenv-escaped-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextenv%2Fextenv-escaped-var.rs?ref=0a0e045e50352d5b8c5c99e965c16aa978a0cbe1", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    env!(\"\\t\"); //~ERROR environment variable `\\t` not defined at compile time\n+}"}, {"sha": "25e218c63f336b1599588721e361a1aeecae8ec4", "filename": "tests/ui/extenv/extenv-escaped-var.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/tests%2Fui%2Fextenv%2Fextenv-escaped-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/tests%2Fui%2Fextenv%2Fextenv-escaped-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextenv%2Fextenv-escaped-var.stderr?ref=0a0e045e50352d5b8c5c99e965c16aa978a0cbe1", "patch": "@@ -0,0 +1,11 @@\n+error: environment variable `\\t` not defined at compile time\n+  --> $DIR/extenv-escaped-var.rs:2:5\n+   |\n+LL |     env!(\"\\t\");\n+   |     ^^^^^^^^^^\n+   |\n+   = help: use `std::env::var(\"\\t\")` to read the variable at run time\n+   = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "10589ec2f54a4a1b216dac215a2dea601a85e212", "filename": "tests/ui/extenv/issue-110547.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/tests%2Fui%2Fextenv%2Fissue-110547.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/tests%2Fui%2Fextenv%2Fissue-110547.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextenv%2Fissue-110547.stderr?ref=0a0e045e50352d5b8c5c99e965c16aa978a0cbe1", "patch": "@@ -1,28 +1,28 @@\n-error: environment variable `    ` not defined at compile time\n+error: environment variable `\\t` not defined at compile time\n   --> $DIR/issue-110547.rs:4:5\n    |\n LL |     env!{\"\\t\"};\n    |     ^^^^^^^^^^\n    |\n-   = help: use `std::env::var(\"    \")` to read the variable at run time\n+   = help: use `std::env::var(\"\\t\")` to read the variable at run time\n    = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: environment variable `    ` not defined at compile time\n+error: environment variable `\\t` not defined at compile time\n   --> $DIR/issue-110547.rs:5:5\n    |\n LL |     env!(\"\\t\");\n    |     ^^^^^^^^^^\n    |\n-   = help: use `std::env::var(\"    \")` to read the variable at run time\n+   = help: use `std::env::var(\"\\t\")` to read the variable at run time\n    = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: environment variable `` not defined at compile time\n+error: environment variable `\\u{2069}` not defined at compile time\n   --> $DIR/issue-110547.rs:6:5\n    |\n LL |     env!(\"\\u{2069}\");\n    |     ^^^^^^^^^^^^^^^^\n    |\n-   = help: use `std::env::var(\"\")` to read the variable at run time\n+   = help: use `std::env::var(\"\\u{2069}\")` to read the variable at run time\n    = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors"}, {"sha": "cd4f2610d3f04c6a088d2be38617cf2317c694e0", "filename": "tests/ui/impl-trait/extra-impl-in-trait-impl.fixed", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.fixed?ref=0a0e045e50352d5b8c5c99e965c16aa978a0cbe1", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+\n+struct S<T>(T);\n+struct S2;\n+\n+impl<T: Default> Default for S<T> {\n+    //~^ ERROR: unexpected `impl` keyword\n+    //~| HELP: remove the extra `impl`\n+    fn default() -> Self { todo!() }\n+}\n+\n+impl Default for S2 {\n+    //~^ ERROR: unexpected `impl` keyword\n+    //~| HELP: remove the extra `impl`\n+    fn default() -> Self { todo!() }\n+}\n+\n+\n+fn main() {}"}, {"sha": "024b703e6f23549103d0170724892b7b5c8a4f9c", "filename": "tests/ui/impl-trait/extra-impl-in-trait-impl.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.rs?ref=0a0e045e50352d5b8c5c99e965c16aa978a0cbe1", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+\n+struct S<T>(T);\n+struct S2;\n+\n+impl<T: Default> impl Default for S<T> {\n+    //~^ ERROR: unexpected `impl` keyword\n+    //~| HELP: remove the extra `impl`\n+    fn default() -> Self { todo!() }\n+}\n+\n+impl impl Default for S2 {\n+    //~^ ERROR: unexpected `impl` keyword\n+    //~| HELP: remove the extra `impl`\n+    fn default() -> Self { todo!() }\n+}\n+\n+\n+fn main() {}"}, {"sha": "5aafc8b64d4ff476784edab9dfdbd2d4991b3ba5", "filename": "tests/ui/impl-trait/extra-impl-in-trait-impl.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.stderr?ref=0a0e045e50352d5b8c5c99e965c16aa978a0cbe1", "patch": "@@ -0,0 +1,26 @@\n+error: unexpected `impl` keyword\n+  --> $DIR/extra-impl-in-trait-impl.rs:6:18\n+   |\n+LL | impl<T: Default> impl Default for S<T> {\n+   |                  ^^^^^ help: remove the extra `impl`\n+   |\n+note: this is parsed as an `impl Trait` type, but a trait is expected at this position\n+  --> $DIR/extra-impl-in-trait-impl.rs:6:18\n+   |\n+LL | impl<T: Default> impl Default for S<T> {\n+   |                  ^^^^^^^^^^^^\n+\n+error: unexpected `impl` keyword\n+  --> $DIR/extra-impl-in-trait-impl.rs:12:6\n+   |\n+LL | impl impl Default for S2 {\n+   |      ^^^^^ help: remove the extra `impl`\n+   |\n+note: this is parsed as an `impl Trait` type, but a trait is expected at this position\n+  --> $DIR/extra-impl-in-trait-impl.rs:12:6\n+   |\n+LL | impl impl Default for S2 {\n+   |      ^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}