{"sha": "db74e1f1e3e5c7497bb9af68814497c8df1fd0b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNzRlMWYxZTNlNWM3NDk3YmI5YWY2ODgxNDQ5N2M4ZGYxZmQwYjg=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-20T10:09:22Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-21T18:42:25Z"}, "message": "Add cfg(target_has_atomic_equal_alignment).\n\nThis is needed for Atomic::from_mut.", "tree": {"sha": "7d4603d900ade36ac6eebb218468fcd531bea92b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d4603d900ade36ac6eebb218468fcd531bea92b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db74e1f1e3e5c7497bb9af68814497c8df1fd0b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db74e1f1e3e5c7497bb9af68814497c8df1fd0b8", "html_url": "https://github.com/rust-lang/rust/commit/db74e1f1e3e5c7497bb9af68814497c8df1fd0b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db74e1f1e3e5c7497bb9af68814497c8df1fd0b8/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eff9b0b29a8898c839d46f3c66526710afed68a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eff9b0b29a8898c839d46f3c66526710afed68a", "html_url": "https://github.com/rust-lang/rust/commit/4eff9b0b29a8898c839d46f3c66526710afed68a"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "8b7fd59cd874ae57c665d559af0de011bad64126", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db74e1f1e3e5c7497bb9af68814497c8df1fd0b8/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db74e1f1e3e5c7497bb9af68814497c8df1fd0b8/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=db74e1f1e3e5c7497bb9af68814497c8df1fd0b8", "patch": "@@ -26,6 +26,11 @@ const GATED_CFGS: &[GatedCfg] = &[\n     (sym::target_thread_local, sym::cfg_target_thread_local, cfg_fn!(cfg_target_thread_local)),\n     (sym::target_has_atomic, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n     (sym::target_has_atomic_load_store, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n+    (\n+        sym::target_has_atomic_equal_alignment,\n+        sym::cfg_target_has_atomic,\n+        cfg_fn!(cfg_target_has_atomic),\n+    ),\n     (sym::sanitize, sym::cfg_sanitize, cfg_fn!(cfg_sanitize)),\n     (sym::version, sym::cfg_version, cfg_fn!(cfg_version)),\n ];"}, {"sha": "09e5948cdd750b37b8f7592be8dd19a983b5c099", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/db74e1f1e3e5c7497bb9af68814497c8df1fd0b8/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db74e1f1e3e5c7497bb9af68814497c8df1fd0b8/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=db74e1f1e3e5c7497bb9af68814497c8df1fd0b8", "patch": "@@ -12,6 +12,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::impl_stable_hash_via_hash;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n \n+use rustc_target::abi::{Align, TargetDataLayout};\n use rustc_target::spec::{Target, TargetTriple};\n \n use crate::parse::CrateConfig;\n@@ -748,6 +749,7 @@ pub fn default_configuration(sess: &Session) -> CrateConfig {\n     let min_atomic_width = sess.target.target.min_atomic_width();\n     let max_atomic_width = sess.target.target.max_atomic_width();\n     let atomic_cas = sess.target.target.options.atomic_cas;\n+    let layout = TargetDataLayout::parse(&sess.target.target).unwrap();\n \n     let mut ret = FxHashSet::default();\n     ret.reserve(6); // the minimum number of insertions\n@@ -769,18 +771,27 @@ pub fn default_configuration(sess: &Session) -> CrateConfig {\n     if sess.target.target.options.has_elf_tls {\n         ret.insert((sym::target_thread_local, None));\n     }\n-    for &i in &[8, 16, 32, 64, 128] {\n+    for &(i, align) in &[\n+        (8, layout.i8_align.abi),\n+        (16, layout.i16_align.abi),\n+        (32, layout.i32_align.abi),\n+        (64, layout.i64_align.abi),\n+        (128, layout.i128_align.abi),\n+    ] {\n         if i >= min_atomic_width && i <= max_atomic_width {\n-            let mut insert_atomic = |s| {\n+            let mut insert_atomic = |s, align: Align| {\n                 ret.insert((sym::target_has_atomic_load_store, Some(Symbol::intern(s))));\n                 if atomic_cas {\n                     ret.insert((sym::target_has_atomic, Some(Symbol::intern(s))));\n                 }\n+                if align.bits() == i {\n+                    ret.insert((sym::target_has_atomic_equal_alignment, Some(Symbol::intern(s))));\n+                }\n             };\n             let s = i.to_string();\n-            insert_atomic(&s);\n+            insert_atomic(&s, align);\n             if &s == wordsz {\n-                insert_atomic(\"ptr\");\n+                insert_atomic(\"ptr\", layout.pointer_align.abi);\n             }\n         }\n     }"}, {"sha": "60688d26d4ce0dbd4c1f9f4638ec3ad2ced0717a", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db74e1f1e3e5c7497bb9af68814497c8df1fd0b8/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db74e1f1e3e5c7497bb9af68814497c8df1fd0b8/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=db74e1f1e3e5c7497bb9af68814497c8df1fd0b8", "patch": "@@ -1071,6 +1071,7 @@ symbols! {\n         target_feature,\n         target_feature_11,\n         target_has_atomic,\n+        target_has_atomic_equal_alignment,\n         target_has_atomic_load_store,\n         target_os,\n         target_pointer_width,"}]}