{"sha": "efc508ba4ce9bc0ac3570436b3400c6e0b0f1dfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYzUwOGJhNGNlOWJjMGFjMzU3MDQzNmIzNDAwYzZlMGIwZjFkZmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-31T22:58:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-31T22:58:37Z"}, "message": "Auto merge of #51096 - matthewjasper:reverse-normalization-bounds, r=nikomatsakis\n\nRegister outlives predicates from queries the right way around.\n\nCloses #49354\nThe region constraints from queries need to be reversed from sub to outlives.\n\nNote: wf checking reports these errors before NLL, so I'm not sure if there's any case when these predicates need to be created at all.\n\ncc @nikomatsakis", "tree": {"sha": "04b94ccb71457ed95c2e2a8c747ac4a5ae85340d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04b94ccb71457ed95c2e2a8c747ac4a5ae85340d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efc508ba4ce9bc0ac3570436b3400c6e0b0f1dfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efc508ba4ce9bc0ac3570436b3400c6e0b0f1dfb", "html_url": "https://github.com/rust-lang/rust/commit/efc508ba4ce9bc0ac3570436b3400c6e0b0f1dfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efc508ba4ce9bc0ac3570436b3400c6e0b0f1dfb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d", "html_url": "https://github.com/rust-lang/rust/commit/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d"}, {"sha": "b83daea479ceee19445058001ed0a6412ec25889", "url": "https://api.github.com/repos/rust-lang/rust/commits/b83daea479ceee19445058001ed0a6412ec25889", "html_url": "https://github.com/rust-lang/rust/commit/b83daea479ceee19445058001ed0a6412ec25889"}], "stats": {"total": 87, "additions": 82, "deletions": 5}, "files": [{"sha": "cdf20bdafadc40024990d6035823f5c416126b24", "filename": "src/librustc_traits/util.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/efc508ba4ce9bc0ac3570436b3400c6e0b0f1dfb/src%2Flibrustc_traits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc508ba4ce9bc0ac3570436b3400c6e0b0f1dfb/src%2Flibrustc_traits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Futil.rs?ref=efc508ba4ce9bc0ac3570436b3400c6e0b0f1dfb", "patch": "@@ -74,17 +74,19 @@ where\n         let mut outlives: Vec<_> = constraints\n             .into_iter()\n             .map(|(k, _)| match *k {\n+                // Swap regions because we are going from sub (<=) to outlives\n+                // (>=).\n                 Constraint::VarSubVar(v1, v2) => ty::OutlivesPredicate(\n-                    tcx.mk_region(ty::ReVar(v1)).into(),\n-                    tcx.mk_region(ty::ReVar(v2)),\n+                    tcx.mk_region(ty::ReVar(v2)).into(),\n+                    tcx.mk_region(ty::ReVar(v1)),\n                 ),\n                 Constraint::VarSubReg(v1, r2) => {\n-                    ty::OutlivesPredicate(tcx.mk_region(ty::ReVar(v1)).into(), r2)\n+                    ty::OutlivesPredicate(r2.into(), tcx.mk_region(ty::ReVar(v1)))\n                 }\n                 Constraint::RegSubVar(r1, v2) => {\n-                    ty::OutlivesPredicate(r1.into(), tcx.mk_region(ty::ReVar(v2)))\n+                    ty::OutlivesPredicate(tcx.mk_region(ty::ReVar(v2)).into(), r1)\n                 }\n-                Constraint::RegSubReg(r1, r2) => ty::OutlivesPredicate(r1.into(), r2),\n+                Constraint::RegSubReg(r1, r2) => ty::OutlivesPredicate(r2.into(), r1),\n             })\n             .map(ty::Binder::dummy) // no bound regions in the code above\n             .collect();"}, {"sha": "65b5cc12478c8c16f012ad79d179b459561dffa9", "filename": "src/test/ui/nll/normalization-bounds-error.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/efc508ba4ce9bc0ac3570436b3400c6e0b0f1dfb/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc508ba4ce9bc0ac3570436b3400c6e0b0f1dfb/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.rs?ref=efc508ba4ce9bc0ac3570436b3400c6e0b0f1dfb", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we error when a bound from the impl is not satisfied when\n+// normalizing an associated type.\n+\n+#![feature(nll)]\n+trait Visitor<'d> {\n+    type Value;\n+}\n+\n+impl<'a, 'd: 'a> Visitor<'d> for &'a () {\n+    type Value = ();\n+}\n+\n+fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n+//~^ ERROR\n+\n+fn main() {}"}, {"sha": "970384f9d56ff179de146ac569b5de03f989a6c7", "filename": "src/test/ui/nll/normalization-bounds-error.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/efc508ba4ce9bc0ac3570436b3400c6e0b0f1dfb/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efc508ba4ce9bc0ac3570436b3400c6e0b0f1dfb/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr?ref=efc508ba4ce9bc0ac3570436b3400c6e0b0f1dfb", "patch": "@@ -0,0 +1,23 @@\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'d` due to conflicting requirements\n+  --> $DIR/normalization-bounds-error.rs:23:1\n+   |\n+LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime 'd as defined on the function body at 23:1...\n+  --> $DIR/normalization-bounds-error.rs:23:1\n+   |\n+LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...but the lifetime must also be valid for the lifetime 'a as defined on the function body at 23:1...\n+  --> $DIR/normalization-bounds-error.rs:23:1\n+   |\n+LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...so that the types are compatible:\n+           expected Visitor<'d>\n+              found Visitor<'_>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "722a6c00e750c622073057f20ecaaa36c8cc6ef0", "filename": "src/test/ui/nll/normalization-bounds.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/efc508ba4ce9bc0ac3570436b3400c6e0b0f1dfb/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc508ba4ce9bc0ac3570436b3400c6e0b0f1dfb/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds.rs?ref=efc508ba4ce9bc0ac3570436b3400c6e0b0f1dfb", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that lifetime bounds get checked the right way around with NLL enabled.\n+\n+//run-pass\n+\n+#![feature(nll)]\n+trait Visitor<'d> {\n+    type Value;\n+}\n+\n+impl<'a, 'd: 'a> Visitor<'d> for &'a () {\n+    type Value = ();\n+}\n+\n+fn visit_seq<'d: 'a, 'a>() -> <&'a () as Visitor<'d>>::Value {}\n+\n+fn main() {}"}]}