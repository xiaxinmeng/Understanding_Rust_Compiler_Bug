{"sha": "84bab312abaf810a04eb2ef910b535b524c56c47", "node_id": "C_kwDOAAsO6NoAKDg0YmFiMzEyYWJhZjgxMGEwNGViMmVmOTEwYjUzNWI1MjRjNTZjNDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-21T08:04:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-21T08:04:58Z"}, "message": "Auto merge of #96840 - cjgillot:query-feed, r=oli-obk\n\nAllow to feed a value in another query's cache and remove `WithOptConstParam`\n\nI used it to remove `WithOptConstParam` queries, as an example.\n\nThe idea is that a query (here `typeck(function)`) can write into another query's cache (here `type_of(anon const)`). The dependency node for `type_of` would depend on all the current dependencies of `typeck`.\n\nThere is still an issue with cycles: if `type_of(anon const)` is accessed before `typeck(function)`, we will still have the usual cycle.  The way around this issue is to `ensure` that `typeck(function)` is called before accessing `type_of(anon const)`.\n\nWhen replayed, we may the following cases:\n- `typeck` is green, in that case `type_of` is green too, and all is right;\n- `type_of` is green, `typeck` may still be marked as red (it depends on strictly more things than `type_of`) -> we verify that the saved value and the re-computed value of `type_of` have the same hash;\n- `type_of` is red, then `typeck` is red -> it's the caller responsibility to ensure `typeck` is recomputed *before* `type_of`.\n\nAs `anon consts` have their own `DefPathData`, it's not possible to have the def-id of the anon-const point to something outside the original function, but the general case may have to be resolved before using this device more broadly.\n\nThere is an open question about loading from the on-disk cache.  If `typeck` is loaded from the on-disk cache, the side-effect does not happen. The regular `type_of` implementation can go and fetch the correct value from the decoded `typeck` results, and the dep-graph will check that the hashes match, but I'm not sure we want to rely on this behaviour.\n\nI specifically allowed to feed the value to `type_of` from inside a call to `type_of`.  In that case, the dep-graph will check that the fingerprints of both values match.\n\nThis implementation is still very sensitive to cycles, and requires that we call `typeck(function)` before `typeck(anon const)`.  The reason is that `typeck(anon const)` calls `type_of(anon const)`, which calls `typeck(function)`, which feeds `type_of(anon const)`, and needs to build the MIR so needs `typeck(anon const)`.  The latter call would not cycle, since `type_of(anon const)` has been set, but I'd rather not remove the cycle check.", "tree": {"sha": "f16deaf35e11df4534c10a9aa08222cfd852c763", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f16deaf35e11df4534c10a9aa08222cfd852c763"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84bab312abaf810a04eb2ef910b535b524c56c47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84bab312abaf810a04eb2ef910b535b524c56c47", "html_url": "https://github.com/rust-lang/rust/commit/84bab312abaf810a04eb2ef910b535b524c56c47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84bab312abaf810a04eb2ef910b535b524c56c47/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8197b1a1a1af705aefa52194024876d14173a75", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8197b1a1a1af705aefa52194024876d14173a75", "html_url": "https://github.com/rust-lang/rust/commit/e8197b1a1a1af705aefa52194024876d14173a75"}, {"sha": "8ead58c67bb4cc0c23e5f3c9d335a2b6e90d1854", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ead58c67bb4cc0c23e5f3c9d335a2b6e90d1854", "html_url": "https://github.com/rust-lang/rust/commit/8ead58c67bb4cc0c23e5f3c9d335a2b6e90d1854"}], "stats": {"total": 14, "additions": 4, "deletions": 10}, "files": [{"sha": "eed0f1f19918bf903d5276d7130ea12cf2c649f9", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84bab312abaf810a04eb2ef910b535b524c56c47/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84bab312abaf810a04eb2ef910b535b524c56c47/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=84bab312abaf810a04eb2ef910b535b524c56c47", "patch": "@@ -196,11 +196,9 @@ fn is_value_unfrozen_poly<'tcx>(cx: &LateContext<'tcx>, body_id: BodyId, ty: Ty<\n fn is_value_unfrozen_expr<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId, def_id: DefId, ty: Ty<'tcx>) -> bool {\n     let substs = cx.typeck_results().node_substs(hir_id);\n \n-    let result = cx.tcx.const_eval_resolve(\n-        cx.param_env,\n-        mir::UnevaluatedConst::new(ty::WithOptConstParam::unknown(def_id), substs),\n-        None,\n-    );\n+    let result = cx\n+        .tcx\n+        .const_eval_resolve(cx.param_env, mir::UnevaluatedConst::new(def_id, substs), None);\n     is_value_unfrozen_raw(cx, result, ty)\n }\n "}, {"sha": "99bfc4b5717c89c21af69a97bc456148cf2a74bd", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84bab312abaf810a04eb2ef910b535b524c56c47/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84bab312abaf810a04eb2ef910b535b524c56c47/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=84bab312abaf810a04eb2ef910b535b524c56c47", "patch": "@@ -450,11 +450,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                 let result = self\n                     .lcx\n                     .tcx\n-                    .const_eval_resolve(\n-                        self.param_env,\n-                        mir::UnevaluatedConst::new(ty::WithOptConstParam::unknown(def_id), substs),\n-                        None,\n-                    )\n+                    .const_eval_resolve(self.param_env, mir::UnevaluatedConst::new(def_id, substs), None)\n                     .ok()\n                     .map(|val| rustc_middle::mir::ConstantKind::from_value(val, ty))?;\n                 let result = miri_to_const(self.lcx.tcx, result);"}]}