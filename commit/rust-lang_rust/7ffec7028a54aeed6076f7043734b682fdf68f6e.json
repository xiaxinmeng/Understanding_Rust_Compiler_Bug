{"sha": "7ffec7028a54aeed6076f7043734b682fdf68f6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZmVjNzAyOGE1NGFlZWQ2MDc2ZjcwNDM3MzRiNjgyZmRmNjhmNmU=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-07-03T22:10:06Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-07-03T23:35:18Z"}, "message": "rustc_ast_pretty: Don't print space after `$`\n\nFor example, this code:\n\n    $arg:expr\n\nused to be pretty-printed as:\n\n    $ arg : expr\n\nbut is now pretty-printed as:\n\n    $arg : expr", "tree": {"sha": "aa93358eca68daf1dac0d9c6c8cde769bcb534bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa93358eca68daf1dac0d9c6c8cde769bcb534bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ffec7028a54aeed6076f7043734b682fdf68f6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ffec7028a54aeed6076f7043734b682fdf68f6e", "html_url": "https://github.com/rust-lang/rust/commit/7ffec7028a54aeed6076f7043734b682fdf68f6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ffec7028a54aeed6076f7043734b682fdf68f6e/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f82d4845f219357c80ed68a6391d0bf00611f228", "url": "https://api.github.com/repos/rust-lang/rust/commits/f82d4845f219357c80ed68a6391d0bf00611f228", "html_url": "https://github.com/rust-lang/rust/commit/f82d4845f219357c80ed68a6391d0bf00611f228"}], "stats": {"total": 60, "additions": 32, "deletions": 28}, "files": [{"sha": "8b7b306a54dd2bd3c003486ac15a1ec6e905e3b5", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ffec7028a54aeed6076f7043734b682fdf68f6e/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffec7028a54aeed6076f7043734b682fdf68f6e/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=7ffec7028a54aeed6076f7043734b682fdf68f6e", "patch": "@@ -136,11 +136,11 @@ pub fn print_crate<'a>(\n     s.s.eof()\n }\n \n-// This makes printed token streams look slightly nicer,\n-// and also addresses some specific regressions described in #63896 and #73345.\n+/// This makes printed token streams look slightly nicer,\n+/// and also addresses some specific regressions described in #63896 and #73345.\n fn tt_prepend_space(tt: &TokenTree, prev: &TokenTree) -> bool {\n     if let TokenTree::Token(token) = prev {\n-        if matches!(token.kind, token::Dot) {\n+        if matches!(token.kind, token::Dot | token::Dollar) {\n             return false;\n         }\n         if let token::DocComment(comment_kind, ..) = token.kind {"}, {"sha": "e6c4d195691ca0d2abf06982908e9745cd2e5629", "filename": "src/test/pretty/cast-lt.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ffec7028a54aeed6076f7043734b682fdf68f6e/src%2Ftest%2Fpretty%2Fcast-lt.pp", "raw_url": "https://github.com/rust-lang/rust/raw/7ffec7028a54aeed6076f7043734b682fdf68f6e/src%2Ftest%2Fpretty%2Fcast-lt.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fcast-lt.pp?ref=7ffec7028a54aeed6076f7043734b682fdf68f6e", "patch": "@@ -8,6 +8,6 @@\n // pretty-mode:expanded\n // pp-exact:cast-lt.pp\n \n-macro_rules! negative { ($ e : expr) => { $ e < 0 } }\n+macro_rules! negative { ($e : expr) => { $e < 0 } }\n \n fn main() { (1 as i32) < 0; }"}, {"sha": "257c032b536da2356a97dba71cddea90560b49f4", "filename": "src/test/pretty/delimited-token-groups.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ffec7028a54aeed6076f7043734b682fdf68f6e/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffec7028a54aeed6076f7043734b682fdf68f6e/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs?ref=7ffec7028a54aeed6076f7043734b682fdf68f6e", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(rustc_attrs)]\n \n-macro_rules! mac { ($ ($ tt : tt) *) => () }\n+macro_rules! mac { ($($tt : tt) *) => () }\n \n mac! {\n     struct S { field1 : u8, field2 : u16, } impl Clone for S"}, {"sha": "d3865d93a30d8ca0949c0808a39f0aeded46aa11", "filename": "src/test/pretty/macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ffec7028a54aeed6076f7043734b682fdf68f6e/src%2Ftest%2Fpretty%2Fmacro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffec7028a54aeed6076f7043734b682fdf68f6e/src%2Ftest%2Fpretty%2Fmacro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmacro.rs?ref=7ffec7028a54aeed6076f7043734b682fdf68f6e", "patch": "@@ -2,6 +2,6 @@\n \n #![feature(decl_macro)]\n \n-pub(crate) macro mac { ($ arg : expr) => { $ arg + $ arg } }\n+pub(crate) macro mac { ($arg : expr) => { $arg + $arg } }\n \n fn main() { }"}, {"sha": "3b13f2530dd9276f2009948de758835e9c6bd63c", "filename": "src/test/pretty/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ffec7028a54aeed6076f7043734b682fdf68f6e/src%2Ftest%2Fpretty%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffec7028a54aeed6076f7043734b682fdf68f6e/src%2Ftest%2Fpretty%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmacro_rules.rs?ref=7ffec7028a54aeed6076f7043734b682fdf68f6e", "patch": "@@ -11,9 +11,9 @@ macro_rules! matcher_brackets {\n }\n \n macro_rules! all_fragments {\n-    ($ b : block, $ e : expr, $ i : ident, $ it : item, $ l : lifetime, $ lit\n-     : literal, $ m : meta, $ p : pat, $ pth : path, $ s : stmt, $ tt : tt, $\n-     ty : ty, $ vis : vis) => { } ;\n+    ($b : block, $e : expr, $i : ident, $it : item, $l : lifetime, $lit :\n+     literal, $m : meta, $p : pat, $pth : path, $s : stmt, $tt : tt, $ty : ty,\n+     $vis : vis) => { } ;\n }\n \n fn main() { }"}, {"sha": "fe19dadbe0243113ffde82585b78e34123115ef8", "filename": "src/test/rustdoc/decl_macro.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ffec7028a54aeed6076f7043734b682fdf68f6e/src%2Ftest%2Frustdoc%2Fdecl_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffec7028a54aeed6076f7043734b682fdf68f6e/src%2Ftest%2Frustdoc%2Fdecl_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdecl_macro.rs?ref=7ffec7028a54aeed6076f7043734b682fdf68f6e", "patch": "@@ -9,7 +9,7 @@ pub macro my_macro() {\n \n }\n \n-// @has decl_macro/macro.my_macro_2.html //pre 'pub macro my_macro_2($ ($ tok : tt) *) {'\n+// @has decl_macro/macro.my_macro_2.html //pre 'pub macro my_macro_2($($tok : tt) *) {'\n // @has - //pre '...'\n // @has - //pre '}'\n pub macro my_macro_2($($tok:tt)*) {\n@@ -18,8 +18,8 @@ pub macro my_macro_2($($tok:tt)*) {\n \n // @has decl_macro/macro.my_macro_multi.html //pre 'pub macro my_macro_multi {'\n // @has - //pre '(_) => { ... },'\n-// @has - //pre '($ foo : ident.$ bar : expr) => { ... },'\n-// @has - //pre '($ ($ foo : literal), +) => { ... },'\n+// @has - //pre '($foo : ident.$bar : expr) => { ... },'\n+// @has - //pre '($($foo : literal), +) => { ... },'\n // @has - //pre '}'\n pub macro my_macro_multi {\n     (_) => {\n@@ -33,7 +33,7 @@ pub macro my_macro_multi {\n     }\n }\n \n-// @has decl_macro/macro.by_example_single.html //pre 'pub macro by_example_single($ foo : expr) {'\n+// @has decl_macro/macro.by_example_single.html //pre 'pub macro by_example_single($foo : expr) {'\n // @has - //pre '...'\n // @has - //pre '}'\n pub macro by_example_single {\n@@ -42,12 +42,12 @@ pub macro by_example_single {\n \n mod a {\n     mod b {\n-        // @has decl_macro/a/b/macro.by_example_vis.html //pre 'pub(super) macro by_example_vis($ foo : expr) {'\n+        // @has decl_macro/a/b/macro.by_example_vis.html //pre 'pub(super) macro by_example_vis($foo : expr) {'\n         pub(in super) macro by_example_vis {\n             ($foo:expr) => {}\n         }\n         mod c {\n-            // @has decl_macro/a/b/c/macro.by_example_vis_named.html //pre 'pub(in a) macro by_example_vis_named($ foo : expr) {'\n+            // @has decl_macro/a/b/c/macro.by_example_vis_named.html //pre 'pub(in a) macro by_example_vis_named($foo : expr) {'\n             pub(in a) macro by_example_vis_named {\n                 ($foo:expr) => {}\n             }"}, {"sha": "5f8340e7312a0ec03cfaf69c3797e3614f3e4d74", "filename": "src/test/rustdoc/macro_rules-matchers.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7ffec7028a54aeed6076f7043734b682fdf68f6e/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffec7028a54aeed6076f7043734b682fdf68f6e/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs?ref=7ffec7028a54aeed6076f7043734b682fdf68f6e", "patch": "@@ -14,10 +14,12 @@\n // @has - '//span[@class=\"op\"]' '>'\n // @has - '{ ... };'\n \n-// @has - '($ ($'\n-// @has - '//span[@class=\"ident\"]' 'arg'\n+// @has - '($('\n+// @has - '//span[@class=\"macro-nonterminal\"]' '$'\n+// @has - '//span[@class=\"macro-nonterminal\"]' 'arg'\n // @has - ':'\n // @has - '//span[@class=\"ident\"]' 'tt'\n+// @has - '),'\n // @has - '//span[@class=\"op\"]' '+'\n // @has - ')'\n pub use std::todo;\n@@ -27,10 +29,12 @@ mod mod1 {\n     // @has - 'macro_rules!'\n     // @has - 'macro1'\n     // @has - '{ ()'\n-    // @has - '($ ('\n-    // @has - 'arg'\n+    // @has - '($('\n+    // @has - '//span[@class=\"macro-nonterminal\"]' '$'\n+    // @has - '//span[@class=\"macro-nonterminal\"]' 'arg'\n+    // @has - ':'\n     // @has - 'expr'\n-    // @has - ','\n+    // @has - '),'\n     // @has - '+'\n     // @has - ')'\n     #[macro_export]"}, {"sha": "1cd454720e7d14250bc3fc07cb0e0be25f4dbcc9", "filename": "src/test/rustdoc/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ffec7028a54aeed6076f7043734b682fdf68f6e/src%2Ftest%2Frustdoc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffec7028a54aeed6076f7043734b682fdf68f6e/src%2Ftest%2Frustdoc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacros.rs?ref=7ffec7028a54aeed6076f7043734b682fdf68f6e", "patch": "@@ -1,7 +1,7 @@\n // @has macros/macro.my_macro.html //pre 'macro_rules! my_macro {'\n // @has - //pre '() => { ... };'\n-// @has - //pre '($ a : tt) => { ... };'\n-// @has - //pre '($ e : expr) => { ... };'\n+// @has - //pre '($a : tt) => { ... };'\n+// @has - //pre '($e : expr) => { ... };'\n #[macro_export]\n macro_rules! my_macro {\n     () => [];\n@@ -12,8 +12,8 @@ macro_rules! my_macro {\n // Check that exported macro defined in a module are shown at crate root.\n // @has macros/macro.my_sub_macro.html //pre 'macro_rules! my_sub_macro {'\n // @has - //pre '() => { ... };'\n-// @has - //pre '($ a : tt) => { ... };'\n-// @has - //pre '($ e : expr) => { ... };'\n+// @has - //pre '($a : tt) => { ... };'\n+// @has - //pre '($e : expr) => { ... };'\n mod sub {\n     #[macro_export]\n     macro_rules! my_sub_macro {"}, {"sha": "ae2857d505e6028c29cefad9abf6e87cae4f4c92", "filename": "src/test/ui/hygiene/unpretty-debug.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ffec7028a54aeed6076f7043734b682fdf68f6e/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/7ffec7028a54aeed6076f7043734b682fdf68f6e/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout?ref=7ffec7028a54aeed6076f7043734b682fdf68f6e", "patch": "@@ -8,7 +8,7 @@\n #![feature /* 0#0 */(no_core)]\n #![no_core /* 0#0 */]\n \n-macro_rules! foo /* 0#0 */ { ($ x : ident) => { y + $ x } }\n+macro_rules! foo /* 0#0 */ { ($x : ident) => { y + $x } }\n \n fn bar /* 0#0 */() {\n     let x /* 0#0 */ = 1;"}, {"sha": "368326e02166e573038f528482e8faf5615c4fd8", "filename": "src/test/ui/proc-macro/meta-macro-hygiene.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ffec7028a54aeed6076f7043734b682fdf68f6e/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/7ffec7028a54aeed6076f7043734b682fdf68f6e/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout?ref=7ffec7028a54aeed6076f7043734b682fdf68f6e", "patch": "@@ -30,7 +30,7 @@ macro_rules! produce_it\n     */ {\n     () =>\n     {\n-        meta_macro :: print_def_site! ($ crate :: dummy! ()) ;\n+        meta_macro :: print_def_site! ($crate :: dummy! ()) ;\n         // `print_def_site!` will respan the `$crate` identifier\n         // with `Span::def_site()`. This should cause it to resolve\n         // relative to `meta_macro`, *not* `make_macro` (despite"}, {"sha": "2911707fdb03e60d7f95308ce5895ea8d86952d7", "filename": "src/test/ui/proc-macro/nonterminal-token-hygiene.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ffec7028a54aeed6076f7043734b682fdf68f6e/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/7ffec7028a54aeed6076f7043734b682fdf68f6e/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout?ref=7ffec7028a54aeed6076f7043734b682fdf68f6e", "patch": "@@ -50,9 +50,9 @@ macro_rules! outer\n     /*\n     0#0\n     */ {\n-    ($ item : item) =>\n+    ($item : item) =>\n     {\n-        macro inner() { print_bang! { $ item } } inner! () ;\n+        macro inner() { print_bang! { $item } } inner! () ;\n \n     } ;\n }"}]}