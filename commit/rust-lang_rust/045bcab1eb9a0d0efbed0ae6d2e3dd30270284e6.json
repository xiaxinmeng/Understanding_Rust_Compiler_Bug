{"sha": "045bcab1eb9a0d0efbed0ae6d2e3dd30270284e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NWJjYWIxZWI5YTBkMGVmYmVkMGFlNmQyZTNkZDMwMjcwMjg0ZTY=", "commit": {"author": {"name": "Samrat Man Singh", "email": "samratmansingh@gmail.com", "date": "2020-08-08T09:38:29Z"}, "committer": {"name": "Samrat Man Singh", "email": "samratmansingh@gmail.com", "date": "2020-08-08T09:38:29Z"}, "message": "Add FIXME's for `dup` and other syscalls to support stdin/out/err", "tree": {"sha": "4f401b952e3d9b38c3dda18bd123cf14912d1a3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f401b952e3d9b38c3dda18bd123cf14912d1a3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/045bcab1eb9a0d0efbed0ae6d2e3dd30270284e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/045bcab1eb9a0d0efbed0ae6d2e3dd30270284e6", "html_url": "https://github.com/rust-lang/rust/commit/045bcab1eb9a0d0efbed0ae6d2e3dd30270284e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/045bcab1eb9a0d0efbed0ae6d2e3dd30270284e6/comments", "author": {"login": "samrat", "id": 480806, "node_id": "MDQ6VXNlcjQ4MDgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/480806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrat", "html_url": "https://github.com/samrat", "followers_url": "https://api.github.com/users/samrat/followers", "following_url": "https://api.github.com/users/samrat/following{/other_user}", "gists_url": "https://api.github.com/users/samrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrat/subscriptions", "organizations_url": "https://api.github.com/users/samrat/orgs", "repos_url": "https://api.github.com/users/samrat/repos", "events_url": "https://api.github.com/users/samrat/events{/privacy}", "received_events_url": "https://api.github.com/users/samrat/received_events", "type": "User", "site_admin": false}, "committer": {"login": "samrat", "id": 480806, "node_id": "MDQ6VXNlcjQ4MDgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/480806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrat", "html_url": "https://github.com/samrat", "followers_url": "https://api.github.com/users/samrat/followers", "following_url": "https://api.github.com/users/samrat/following{/other_user}", "gists_url": "https://api.github.com/users/samrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrat/subscriptions", "organizations_url": "https://api.github.com/users/samrat/orgs", "repos_url": "https://api.github.com/users/samrat/repos", "events_url": "https://api.github.com/users/samrat/events{/privacy}", "received_events_url": "https://api.github.com/users/samrat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "773dfb31f0c35ec992892b4677ea5764068f8092", "url": "https://api.github.com/repos/rust-lang/rust/commits/773dfb31f0c35ec992892b4677ea5764068f8092", "html_url": "https://github.com/rust-lang/rust/commit/773dfb31f0c35ec992892b4677ea5764068f8092"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "ec6fb7c537356fb5a1fac79085019086cc12ef07", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/045bcab1eb9a0d0efbed0ae6d2e3dd30270284e6/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/045bcab1eb9a0d0efbed0ae6d2e3dd30270284e6/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=045bcab1eb9a0d0efbed0ae6d2e3dd30270284e6", "patch": "@@ -485,6 +485,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let fh = &mut this.machine.file_handler;\n             let (file_result, writable) = match fh.handles.get(&fd) {\n                 Some(file_descriptor) => {\n+                    // FIXME: Support \"dup\" for all FDs(stdin, etc)\n                     let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n                     (file.try_clone(), *writable)\n                 },\n@@ -499,6 +500,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         {\n             let &[_, _] = check_arg_count(args)?;\n             if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n+                // FIXME: Support fullfsync for all FDs\n                 match file_descriptor.as_file_handle() {\n                     Ok(FileHandle { file, writable }) => {\n                         let io_result = maybe_sync_file(&file, *writable, File::sync_all);\n@@ -522,6 +524,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n \n         if let Some(file_descriptor) = this.machine.file_handler.handles.remove(&fd) {\n+            // FIXME: Support `close` for all FDs(stdin, etc)\n             let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n             // We sync the file if it was opened in a mode different than read-only.\n             if *writable {\n@@ -1219,6 +1222,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n         let length = this.read_scalar(length_op)?.to_i64()?;\n         if let Some(file_descriptor) = this.machine.file_handler.handles.get_mut(&fd) {\n+            // FIXME: Support ftruncate64 for all FDs\n             let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n             if *writable {\n                 if let Ok(length) = length.try_into() {\n@@ -1252,6 +1256,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n         if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n+            // FIXME: Support fsync for all FDs\n             let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n             let io_result = maybe_sync_file(&file, *writable, File::sync_all);\n             this.try_unwrap_io_result(io_result)\n@@ -1267,6 +1272,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n         if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n+            // FIXME: Support fdatasync for all FDs\n             let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n             let io_result = maybe_sync_file(&file, *writable, File::sync_data);\n             this.try_unwrap_io_result(io_result)\n@@ -1306,6 +1312,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n \n         if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n+            // FIXME: Support sync_data_range for all FDs\n             let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n             let io_result = maybe_sync_file(&file, *writable, File::sync_data);\n             this.try_unwrap_io_result(io_result)"}]}