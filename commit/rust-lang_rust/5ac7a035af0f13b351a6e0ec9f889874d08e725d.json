{"sha": "5ac7a035af0f13b351a6e0ec9f889874d08e725d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYzdhMDM1YWYwZjEzYjM1MWE2ZTBlYzlmODg5ODc0ZDA4ZTcyNWQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-26T17:33:42Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-26T17:55:07Z"}, "message": "Put the const type and value into <code>", "tree": {"sha": "e77ee0d31f6a42fa51d0d1908295852f232d4663", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e77ee0d31f6a42fa51d0d1908295852f232d4663"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ac7a035af0f13b351a6e0ec9f889874d08e725d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ac7a035af0f13b351a6e0ec9f889874d08e725d", "html_url": "https://github.com/rust-lang/rust/commit/5ac7a035af0f13b351a6e0ec9f889874d08e725d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ac7a035af0f13b351a6e0ec9f889874d08e725d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "081336e8eb5d94071dad7f6fee9efd00305dc381", "url": "https://api.github.com/repos/rust-lang/rust/commits/081336e8eb5d94071dad7f6fee9efd00305dc381", "html_url": "https://github.com/rust-lang/rust/commit/081336e8eb5d94071dad7f6fee9efd00305dc381"}], "stats": {"total": 115, "additions": 88, "deletions": 27}, "files": [{"sha": "215d3d1a8279c6375cdebc732c5160e211a8c260", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ac7a035af0f13b351a6e0ec9f889874d08e725d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac7a035af0f13b351a6e0ec9f889874d08e725d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5ac7a035af0f13b351a6e0ec9f889874d08e725d", "patch": "@@ -1475,7 +1475,7 @@ pub struct PolyTrait {\n /// A representation of a Type suitable for hyperlinking purposes. Ideally one can get the original\n /// type out of the AST/TyCtxt given one of these, if more information is needed. Most importantly\n /// it does not preserve mutability or boxes.\n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub enum Type {\n     /// structs/enums/traits (most that'd be an hir::TyPath)\n     ResolvedPath {"}, {"sha": "c796f0b20d3bb840a51b6cbff77984dd63cf097c", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 70, "deletions": 18, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/5ac7a035af0f13b351a6e0ec9f889874d08e725d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac7a035af0f13b351a6e0ec9f889874d08e725d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=5ac7a035af0f13b351a6e0ec9f889874d08e725d", "patch": "@@ -560,7 +560,8 @@ impl<'a> fmt::Display for HRef<'a> {\n     }\n }\n \n-fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt::Result {\n+fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool,\n+            is_not_debug: bool) -> fmt::Result {\n     match *t {\n         clean::Generic(ref name) => {\n             f.write_str(name)\n@@ -571,7 +572,8 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n             tybounds(f, typarams)\n         }\n         clean::Infer => write!(f, \"_\"),\n-        clean::Primitive(prim) => primitive_link(f, prim, prim.as_str()),\n+        clean::Primitive(prim) if is_not_debug => primitive_link(f, prim, prim.as_str()),\n+        clean::Primitive(prim) => write!(f, \"{}\", prim.as_str()),\n         clean::BareFunction(ref decl) => {\n             if f.alternate() {\n                 write!(f, \"{}{}fn{:#}{:#}\",\n@@ -589,26 +591,30 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n         }\n         clean::Tuple(ref typs) => {\n             match &typs[..] {\n-                &[] => primitive_link(f, PrimitiveType::Tuple, \"()\"),\n-                &[ref one] => {\n+                &[] if is_not_debug => primitive_link(f, PrimitiveType::Tuple, \"()\"),\n+                &[] => write!(f, \"()\"),\n+                &[ref one] if is_not_debug => {\n                     primitive_link(f, PrimitiveType::Tuple, \"(\")?;\n                     //carry f.alternate() into this display w/o branching manually\n                     fmt::Display::fmt(one, f)?;\n                     primitive_link(f, PrimitiveType::Tuple, \",)\")\n                 }\n-                many => {\n+                &[ref one] => write!(f, \"({},)\", one),\n+                many if is_not_debug => {\n                     primitive_link(f, PrimitiveType::Tuple, \"(\")?;\n                     fmt::Display::fmt(&CommaSep(&many), f)?;\n                     primitive_link(f, PrimitiveType::Tuple, \")\")\n                 }\n+                many => write!(f, \"({})\", &CommaSep(&many)),\n             }\n         }\n-        clean::Vector(ref t) => {\n+        clean::Vector(ref t) if is_not_debug => {\n             primitive_link(f, PrimitiveType::Slice, &format!(\"[\"))?;\n             fmt::Display::fmt(t, f)?;\n             primitive_link(f, PrimitiveType::Slice, &format!(\"]\"))\n         }\n-        clean::FixedVector(ref t, ref s) => {\n+        clean::Vector(ref t) => write!(f, \"[{}]\", t),\n+        clean::FixedVector(ref t, ref s) if is_not_debug => {\n             primitive_link(f, PrimitiveType::Array, \"[\")?;\n             fmt::Display::fmt(t, f)?;\n             if f.alternate() {\n@@ -619,10 +625,17 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n                                &format!(\"; {}]\", Escape(s)))\n             }\n         }\n+        clean::FixedVector(ref t, ref s) => {\n+            if f.alternate() {\n+                write!(f, \"[{}; {}]\", t, s)\n+            } else {\n+                write!(f, \"[{}; {}]\", t, Escape(s))\n+            }\n+        }\n         clean::Never => f.write_str(\"!\"),\n         clean::RawPointer(m, ref t) => {\n             match **t {\n-                clean::Generic(_) | clean::ResolvedPath {is_generic: true, ..} => {\n+                clean::Generic(_) | clean::ResolvedPath {is_generic: true, ..} if is_not_debug => {\n                     if f.alternate() {\n                         primitive_link(f, clean::PrimitiveType::RawPointer,\n                                        &format!(\"*{}{:#}\", RawMutableSpace(m), t))\n@@ -631,11 +644,21 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n                                        &format!(\"*{}{}\", RawMutableSpace(m), t))\n                     }\n                 }\n-                _ => {\n+                clean::Generic(_) | clean::ResolvedPath {is_generic: true, ..} => {\n+                    if f.alternate() {\n+                        write!(f, \"*{}{:#}\", RawMutableSpace(m), t)\n+                    } else {\n+                        write!(f, \"*{}{}\", RawMutableSpace(m), t)\n+                    }\n+                }\n+                _ if is_not_debug => {\n                     primitive_link(f, clean::PrimitiveType::RawPointer,\n                                    &format!(\"*{}\", RawMutableSpace(m)))?;\n                     fmt::Display::fmt(t, f)\n                 }\n+                _ => {\n+                    write!(f, \"*{}{}\", RawMutableSpace(m), t)\n+                }\n             }\n         }\n         clean::BorrowedRef{ lifetime: ref l, mutability, type_: ref ty} => {\n@@ -647,15 +670,23 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n             match **ty {\n                 clean::Vector(ref bt) => { // BorrowedRef{ ... Vector(T) } is &[T]\n                     match **bt {\n-                        clean::Generic(_) =>\n+                        clean::Generic(_) if is_not_debug => {\n                             if f.alternate() {\n                                 primitive_link(f, PrimitiveType::Slice,\n                                     &format!(\"&{}{}[{:#}]\", lt, m, **bt))\n                             } else {\n                                 primitive_link(f, PrimitiveType::Slice,\n                                     &format!(\"&amp;{}{}[{}]\", lt, m, **bt))\n-                            },\n-                        _ => {\n+                            }\n+                        }\n+                        clean::Generic(_) => {\n+                            if f.alternate() {\n+                                write!(f, \"&{}{}[{:#}]\", lt, m, **bt)\n+                            } else {\n+                                write!(f, \"&{}{}[{}]\", lt, m, **bt)\n+                            }\n+                        }\n+                        _ if is_not_debug => {\n                             if f.alternate() {\n                                 primitive_link(f, PrimitiveType::Slice,\n                                                &format!(\"&{}{}[\", lt, m))?;\n@@ -667,15 +698,26 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n                             }\n                             primitive_link(f, PrimitiveType::Slice, \"]\")\n                         }\n+                        _ => {\n+                            if f.alternate() {\n+                                write!(f, \"&{}{}[{:#}]\", lt, m, **bt)\n+                            } else {\n+                                write!(f, \"&{}{}[{}]\", lt, m, **bt)\n+                            }\n+                        }\n                     }\n                 }\n                 _ => {\n                     if f.alternate() {\n                         write!(f, \"&{}{}\", lt, m)?;\n-                        fmt_type(&ty, f, use_absolute)\n+                        fmt_type(&ty, f, use_absolute, is_not_debug)\n                     } else {\n-                        write!(f, \"&amp;{}{}\", lt, m)?;\n-                        fmt_type(&ty, f, use_absolute)\n+                        if is_not_debug {\n+                            write!(f, \"&amp;{}{}\", lt, m)?;\n+                        } else {\n+                            write!(f, \"&{}{}\", lt, m)?;\n+                        }\n+                        fmt_type(&ty, f, use_absolute, is_not_debug)\n                     }\n                 }\n             }\n@@ -725,7 +767,11 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n             if f.alternate() {\n                 write!(f, \"<{:#} as {:#}>::{}\", self_type, trait_, name)\n             } else {\n-                write!(f, \"&lt;{} as {}&gt;::{}\", self_type, trait_, name)\n+                if is_not_debug {\n+                    write!(f, \"&lt;{} as {}&gt;::{}\", self_type, trait_, name)\n+                } else {\n+                    write!(f, \"<{} as {}>::{}\", self_type, trait_, name)\n+                }\n             }\n         }\n         clean::Unique(..) => {\n@@ -736,7 +782,13 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n \n impl fmt::Display for clean::Type {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt_type(self, f, false)\n+        fmt_type(self, f, false, true)\n+    }\n+}\n+\n+impl fmt::Debug for clean::Type {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt_type(self, f, false, false)\n     }\n }\n \n@@ -777,7 +829,7 @@ fn fmt_impl(i: &clean::Impl,\n         plain.push_str(\" for \");\n     }\n \n-    fmt_type(&i.for_, f, use_absolute)?;\n+    fmt_type(&i.for_, f, use_absolute, true)?;\n     plain.push_str(&format!(\"{:#}\", i.for_));\n \n     fmt::Display::fmt(&WhereClause(&i.generics, plain.len() + 1), f)?;"}, {"sha": "30127ca96a15d8718c94919b54e9a252ee3f7217", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5ac7a035af0f13b351a6e0ec9f889874d08e725d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac7a035af0f13b351a6e0ec9f889874d08e725d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=5ac7a035af0f13b351a6e0ec9f889874d08e725d", "patch": "@@ -1654,9 +1654,23 @@ fn document_short(w: &mut fmt::Formatter, item: &clean::Item, link: AssocItemLin\n     Ok(())\n }\n \n+fn md_render_assoc_item(item: &clean::Item) -> String {\n+    match item.inner {\n+        clean::AssociatedConstItem(ref ty, ref default) => {\n+            if let Some(default) = default.as_ref() {\n+                format!(\"```\\n{}: {:?} = {}\\n```\\n\\n\", item.name.as_ref().unwrap(), ty, default)\n+            } else {\n+                format!(\"```\\n{}: {:?}\\n```\\n\\n\", item.name.as_ref().unwrap(), ty)\n+            }\n+        }\n+        _ => String::new(),\n+    }\n+}\n+\n fn document_full(w: &mut fmt::Formatter, item: &clean::Item) -> fmt::Result {\n     if let Some(s) = item.doc_value() {\n-        write!(w, \"<div class='docblock'>{}</div>\", Markdown(s))?;\n+        write!(w, \"<div class='docblock'>{}</div>\",\n+               Markdown(&format!(\"{}{}\", md_render_assoc_item(item), s)))?;\n     }\n     Ok(())\n }\n@@ -2214,17 +2228,12 @@ fn naive_assoc_href(it: &clean::Item, link: AssocItemLink) -> String {\n \n fn assoc_const(w: &mut fmt::Formatter,\n                it: &clean::Item,\n-               ty: &clean::Type,\n-               default: Option<&String>,\n+               _ty: &clean::Type,\n+               _default: Option<&String>,\n                link: AssocItemLink) -> fmt::Result {\n     write!(w, \"const <a href='{}' class='constant'><b>{}</b></a>\",\n            naive_assoc_href(it, link),\n            it.name.as_ref().unwrap())?;\n-\n-    write!(w, \": {}\", ty)?;\n-    if let Some(default) = default {\n-        write!(w, \" = {}\", Escape(default))?;\n-    }\n     Ok(())\n }\n "}]}