{"sha": "4fc8542c4be546f1b825f4aad3def3d53b58c5b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYzg1NDJjNGJlNTQ2ZjFiODI1ZjRhYWQzZGVmM2Q1M2I1OGM1YjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-11T19:42:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-11T19:42:01Z"}, "message": "Auto merge of #1221 - RalfJung:rustup, r=RalfJung\n\nRustup", "tree": {"sha": "5a580fc2d825f88233dbd815f9ace73d873ecdae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a580fc2d825f88233dbd815f9ace73d873ecdae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fc8542c4be546f1b825f4aad3def3d53b58c5b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fc8542c4be546f1b825f4aad3def3d53b58c5b1", "html_url": "https://github.com/rust-lang/rust/commit/4fc8542c4be546f1b825f4aad3def3d53b58c5b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fc8542c4be546f1b825f4aad3def3d53b58c5b1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "704228d0bb65227c82a8b44ab819485912b44007", "url": "https://api.github.com/repos/rust-lang/rust/commits/704228d0bb65227c82a8b44ab819485912b44007", "html_url": "https://github.com/rust-lang/rust/commit/704228d0bb65227c82a8b44ab819485912b44007"}, {"sha": "76ee8ff4589b5085c68c5efbebd8d3fb07b8a00d", "url": "https://api.github.com/repos/rust-lang/rust/commits/76ee8ff4589b5085c68c5efbebd8d3fb07b8a00d", "html_url": "https://github.com/rust-lang/rust/commit/76ee8ff4589b5085c68c5efbebd8d3fb07b8a00d"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "66d096c0a02b066dc56d2325489656353167ccfe", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc8542c4be546f1b825f4aad3def3d53b58c5b1/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/4fc8542c4be546f1b825f4aad3def3d53b58c5b1/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=4fc8542c4be546f1b825f4aad3def3d53b58c5b1", "patch": "@@ -1 +1 @@\n-303d8aff6092709edd4dbd35b1c88e9aa40bf6d8\n+c20d7eecbc0928b57da8fe30b2ef8528e2bdd5be"}, {"sha": "e40bfcf6276adcde031c8f485522277d25a90efd", "filename": "src/bin/miri.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4fc8542c4be546f1b825f4aad3def3d53b58c5b1/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc8542c4be546f1b825f4aad3def3d53b58c5b1/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=4fc8542c4be546f1b825f4aad3def3d53b58c5b1", "patch": "@@ -7,23 +7,22 @@ extern crate log;\n extern crate log_settings;\n extern crate miri;\n extern crate rustc;\n-extern crate rustc_codegen_utils;\n extern crate rustc_driver;\n-extern crate rustc_errors;\n extern crate rustc_hir;\n extern crate rustc_interface;\n-extern crate rustc_metadata;\n-extern crate rustc_span;\n+extern crate rustc_session;\n \n use std::convert::TryFrom;\n use std::env;\n use std::str::FromStr;\n \n use hex::FromHexError;\n \n+use rustc_session::CtfeBacktrace;\n use rustc_driver::Compilation;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_interface::{interface, Queries};\n+use rustc::ty::TyCtxt;\n \n struct MiriCompilerCalls {\n     miri_config: miri::MiriConfig,\n@@ -35,10 +34,10 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n         compiler: &interface::Compiler,\n         queries: &'tcx Queries<'tcx>,\n     ) -> Compilation {\n-        init_late_loggers();\n         compiler.session().abort_if_errors();\n \n         queries.global_ctxt().unwrap().peek_mut().enter(|tcx| {\n+            init_late_loggers(tcx);\n             let (entry_def_id, _) = tcx.entry_fn(LOCAL_CRATE).expect(\"no main function found!\");\n             let mut config = self.miri_config.clone();\n \n@@ -72,7 +71,7 @@ fn init_early_loggers() {\n     }\n }\n \n-fn init_late_loggers() {\n+fn init_late_loggers(tcx: TyCtxt<'_>) {\n     // We initialize loggers right before we start evaluation. We overwrite the `RUSTC_LOG`\n     // env var if it is not set, control it based on `MIRI_LOG`.\n     if let Ok(var) = env::var(\"MIRI_LOG\") {\n@@ -96,10 +95,13 @@ fn init_late_loggers() {\n \n     // If `MIRI_BACKTRACE` is set and `RUSTC_CTFE_BACKTRACE` is not, set `RUSTC_CTFE_BACKTRACE`.\n     // Do this late, so we ideally only apply this to Miri's errors.\n-    if let Ok(var) = env::var(\"MIRI_BACKTRACE\") {\n-        if env::var(\"RUSTC_CTFE_BACKTRACE\") == Err(env::VarError::NotPresent) {\n-            env::set_var(\"RUSTC_CTFE_BACKTRACE\", &var);\n-        }\n+    if let Ok(val) = env::var(\"MIRI_BACKTRACE\") {\n+        let ctfe_backtrace = match &*val {\n+            \"immediate\" => CtfeBacktrace::Immediate,\n+            \"0\" => CtfeBacktrace::Disabled,\n+            _ => CtfeBacktrace::Capture,\n+        };\n+        *tcx.sess.ctfe_backtrace.borrow_mut() = ctfe_backtrace;\n     }\n }\n "}, {"sha": "bd5884786c0e0f90373e1129e6707f6df256d43a", "filename": "src/machine.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fc8542c4be546f1b825f4aad3def3d53b58c5b1/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc8542c4be546f1b825f4aad3def3d53b58c5b1/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=4fc8542c4be546f1b825f4aad3def3d53b58c5b1", "patch": "@@ -265,11 +265,10 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     #[inline(always)]\n     fn assert_panic(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        span: Span,\n         msg: &mir::AssertMessage<'tcx>,\n         unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n-        ecx.assert_panic(span, msg, unwind)\n+        ecx.assert_panic(msg, unwind)\n     }\n \n     #[inline(always)]"}, {"sha": "d6f563deb0f930eba46a43efdcafbeadeead5900", "filename": "src/shims/panic.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4fc8542c4be546f1b825f4aad3def3d53b58c5b1/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc8542c4be546f1b825f4aad3def3d53b58c5b1/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=4fc8542c4be546f1b825f4aad3def3d53b58c5b1", "patch": "@@ -14,7 +14,6 @@\n use rustc::mir;\n use rustc::ty::{self, layout::LayoutOf};\n use rustc_target::spec::PanicStrategy;\n-use rustc_span::source_map::Span;\n \n use crate::*;\n \n@@ -176,7 +175,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     fn assert_panic(\n         &mut self,\n-        span: Span,\n         msg: &mir::AssertMessage<'tcx>,\n         unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n@@ -187,19 +185,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             BoundsCheck { ref index, ref len } => {\n                 // Forward to `panic_bounds_check` lang item.\n \n-                // First arg: Caller location.\n-                let location = this.alloc_caller_location_for_span(span);\n-                // Second arg: index.\n+                // First arg: index.\n                 let index = this.read_scalar(this.eval_operand(index, None)?)?;\n-                // Third arg: len.\n+                // Second arg: len.\n                 let len = this.read_scalar(this.eval_operand(len, None)?)?;\n \n                 // Call the lang item.\n                 let panic_bounds_check = this.tcx.lang_items().panic_bounds_check_fn().unwrap();\n                 let panic_bounds_check = ty::Instance::mono(this.tcx.tcx, panic_bounds_check);\n                 this.call_function(\n                     panic_bounds_check,\n-                    &[location.ptr.into(), index.into(), len.into()],\n+                    &[index.into(), len.into()],\n                     None,\n                     StackPopCleanup::Goto { ret: None, unwind },\n                 )?;"}]}