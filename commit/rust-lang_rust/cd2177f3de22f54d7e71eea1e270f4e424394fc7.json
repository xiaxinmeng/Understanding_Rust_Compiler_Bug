{"sha": "cd2177f3de22f54d7e71eea1e270f4e424394fc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMjE3N2YzZGUyMmY1NGQ3ZTcxZWVhMWUyNzBmNGU0MjQzOTRmYzc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-18T22:54:19Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-19T16:25:20Z"}, "message": "expand: Stop derive expansion un unexpected targets early\n\nCollect derive placeholders using `collect` instead of `push`", "tree": {"sha": "fc14fa30678990db7f8974853af94ae72717c188", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc14fa30678990db7f8974853af94ae72717c188"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd2177f3de22f54d7e71eea1e270f4e424394fc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd2177f3de22f54d7e71eea1e270f4e424394fc7", "html_url": "https://github.com/rust-lang/rust/commit/cd2177f3de22f54d7e71eea1e270f4e424394fc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd2177f3de22f54d7e71eea1e270f4e424394fc7/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec547202b4fa11cd351b29d076391d2913364fc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec547202b4fa11cd351b29d076391d2913364fc6", "html_url": "https://github.com/rust-lang/rust/commit/ec547202b4fa11cd351b29d076391d2913364fc6"}], "stats": {"total": 129, "additions": 41, "deletions": 88}, "files": [{"sha": "c2240aabd884b43397432ddb276d8e9afbbbd2b8", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 35, "deletions": 25, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/cd2177f3de22f54d7e71eea1e270f4e424394fc7/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2177f3de22f54d7e71eea1e270f4e424394fc7/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=cd2177f3de22f54d7e71eea1e270f4e424394fc7", "patch": "@@ -492,6 +492,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             self.cx.force_mode = force;\n \n             // FIXME(jseyfried): Refactor out the following logic\n+            let fragment_kind = invoc.fragment_kind;\n             let (expanded_fragment, new_invocations) = match res {\n                 InvocationRes::Single(ext) => match self.expand_invoc(invoc, &ext.kind) {\n                     ExpandResult::Ready(fragment) => self.collect_invocations(fragment, &[]),\n@@ -512,36 +513,45 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 InvocationRes::DeriveContainer(_exts) => {\n                     // FIXME: Consider using the derive resolutions (`_exts`) immediately,\n                     // instead of enqueuing the derives to be resolved again later.\n-                    let (derives, item) = match invoc.kind {\n+                    let (derives, mut item) = match invoc.kind {\n                         InvocationKind::DeriveContainer { derives, item } => (derives, item),\n                         _ => unreachable!(),\n                     };\n-                    if !item.derive_allowed() {\n+                    let (item, derive_placeholders) = if !item.derive_allowed() {\n                         self.error_derive_forbidden_on_non_adt(&derives, &item);\n-                    }\n+                        item.visit_attrs(|attrs| attrs.retain(|a| !a.has_name(sym::derive)));\n+                        (item, Vec::new())\n+                    } else {\n+                        let mut item = StripUnconfigured {\n+                            sess: self.cx.sess,\n+                            features: self.cx.ecfg.features,\n+                        }\n+                        .fully_configure(item);\n+                        item.visit_attrs(|attrs| attrs.retain(|a| !a.has_name(sym::derive)));\n+\n+                        invocations.reserve(derives.len());\n+                        let derive_placeholders = derives\n+                            .into_iter()\n+                            .map(|path| {\n+                                let expn_id = ExpnId::fresh(None);\n+                                invocations.push((\n+                                    Invocation {\n+                                        kind: InvocationKind::Derive { path, item: item.clone() },\n+                                        fragment_kind,\n+                                        expansion_data: ExpansionData {\n+                                            id: expn_id,\n+                                            ..self.cx.current_expansion.clone()\n+                                        },\n+                                    },\n+                                    None,\n+                                ));\n+                                NodeId::placeholder_from_expn_id(expn_id)\n+                            })\n+                            .collect::<Vec<_>>();\n+                        (item, derive_placeholders)\n+                    };\n \n-                    let mut item = self.fully_configure(item);\n-                    item.visit_attrs(|attrs| attrs.retain(|a| !a.has_name(sym::derive)));\n-\n-                    let mut derive_placeholders = Vec::with_capacity(derives.len());\n-                    invocations.reserve(derives.len());\n-                    for path in derives {\n-                        let expn_id = ExpnId::fresh(None);\n-                        derive_placeholders.push(NodeId::placeholder_from_expn_id(expn_id));\n-                        invocations.push((\n-                            Invocation {\n-                                kind: InvocationKind::Derive { path, item: item.clone() },\n-                                fragment_kind: invoc.fragment_kind,\n-                                expansion_data: ExpansionData {\n-                                    id: expn_id,\n-                                    ..invoc.expansion_data.clone()\n-                                },\n-                            },\n-                            None,\n-                        ));\n-                    }\n-                    let fragment =\n-                        invoc.fragment_kind.expect_from_annotatables(::std::iter::once(item));\n+                    let fragment = fragment_kind.expect_from_annotatables(::std::iter::once(item));\n                     self.collect_invocations(fragment, &derive_placeholders)\n                 }\n             };"}, {"sha": "1102f3c4640a188a3b0adb5785b4a11cc25cdb60", "filename": "src/test/ui/issues/issue-36617.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd2177f3de22f54d7e71eea1e270f4e424394fc7/src%2Ftest%2Fui%2Fissues%2Fissue-36617.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2177f3de22f54d7e71eea1e270f4e424394fc7/src%2Ftest%2Fui%2Fissues%2Fissue-36617.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36617.rs?ref=cd2177f3de22f54d7e71eea1e270f4e424394fc7", "patch": "@@ -1,5 +1,4 @@\n #![derive(Copy)] //~ ERROR `derive` may only be applied to structs, enums and unions\n                  //~| ERROR cannot determine resolution for the derive macro `Copy`\n-                 //~| ERROR cannot determine resolution for the derive macro `Copy`\n \n fn main() {}"}, {"sha": "dc6ef1692591382f51290e50c1d22e05a9acd775", "filename": "src/test/ui/issues/issue-36617.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd2177f3de22f54d7e71eea1e270f4e424394fc7/src%2Ftest%2Fui%2Fissues%2Fissue-36617.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd2177f3de22f54d7e71eea1e270f4e424394fc7/src%2Ftest%2Fui%2Fissues%2Fissue-36617.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36617.stderr?ref=cd2177f3de22f54d7e71eea1e270f4e424394fc7", "patch": "@@ -12,14 +12,6 @@ LL | #![derive(Copy)]\n    |\n    = note: import resolution is stuck, try simplifying macro imports\n \n-error: cannot determine resolution for the derive macro `Copy`\n-  --> $DIR/issue-36617.rs:1:11\n-   |\n-LL | #![derive(Copy)]\n-   |           ^^^^\n-   |\n-   = note: import resolution is stuck, try simplifying macro imports\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0774`."}, {"sha": "bf95f8fa7e1ec8fbcfb388efed713b96be520c49", "filename": "src/test/ui/issues/issue-49934-errors.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd2177f3de22f54d7e71eea1e270f4e424394fc7/src%2Ftest%2Fui%2Fissues%2Fissue-49934-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2177f3de22f54d7e71eea1e270f4e424394fc7/src%2Ftest%2Fui%2Fissues%2Fissue-49934-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49934-errors.rs?ref=cd2177f3de22f54d7e71eea1e270f4e424394fc7", "patch": "@@ -1,10 +1,8 @@\n fn foo<#[derive(Debug)] T>() {\n //~^ ERROR `derive` may only be applied to structs, enums and unions\n-//~| ERROR expected an inert attribute, found a derive macro\n     match 0 {\n         #[derive(Debug)]\n         //~^ ERROR `derive` may only be applied to structs, enums and unions\n-        //~| ERROR expected an inert attribute, found a derive macro\n         _ => (),\n     }\n }"}, {"sha": "71cd2d30342438c5a713e5bbf3b84669c7bd0ab8", "filename": "src/test/ui/issues/issue-49934-errors.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd2177f3de22f54d7e71eea1e270f4e424394fc7/src%2Ftest%2Fui%2Fissues%2Fissue-49934-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd2177f3de22f54d7e71eea1e270f4e424394fc7/src%2Ftest%2Fui%2Fissues%2Fissue-49934-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49934-errors.stderr?ref=cd2177f3de22f54d7e71eea1e270f4e424394fc7", "patch": "@@ -4,24 +4,12 @@ error[E0774]: `derive` may only be applied to structs, enums and unions\n LL | fn foo<#[derive(Debug)] T>() {\n    |        ^^^^^^^^^^^^^^^^\n \n-error: expected an inert attribute, found a derive macro\n-  --> $DIR/issue-49934-errors.rs:1:17\n-   |\n-LL | fn foo<#[derive(Debug)] T>() {\n-   |                 ^^^^^\n-\n error[E0774]: `derive` may only be applied to structs, enums and unions\n-  --> $DIR/issue-49934-errors.rs:5:9\n+  --> $DIR/issue-49934-errors.rs:4:9\n    |\n LL |         #[derive(Debug)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: expected an inert attribute, found a derive macro\n-  --> $DIR/issue-49934-errors.rs:5:18\n-   |\n-LL |         #[derive(Debug)]\n-   |                  ^^^^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0774`."}, {"sha": "1fd7cddc7c937b6c007396d9271938494af6a145", "filename": "src/test/ui/malformed/issue-69341-malformed-derive-inert.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd2177f3de22f54d7e71eea1e270f4e424394fc7/src%2Ftest%2Fui%2Fmalformed%2Fissue-69341-malformed-derive-inert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2177f3de22f54d7e71eea1e270f4e424394fc7/src%2Ftest%2Fui%2Fmalformed%2Fissue-69341-malformed-derive-inert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fissue-69341-malformed-derive-inert.rs?ref=cd2177f3de22f54d7e71eea1e270f4e424394fc7", "patch": "@@ -4,7 +4,6 @@ struct CLI {\n     #[derive(parse())]\n     //~^ ERROR traits in `#[derive(...)]` don't accept arguments\n     //~| ERROR cannot find derive macro `parse` in this scope\n-    //~| ERROR cannot find derive macro `parse` in this scope\n     path: (),\n     //~^ ERROR `derive` may only be applied to structs, enums and unions\n }"}, {"sha": "db40ce07530450db1c91cd47642a21dae4d26873", "filename": "src/test/ui/malformed/issue-69341-malformed-derive-inert.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd2177f3de22f54d7e71eea1e270f4e424394fc7/src%2Ftest%2Fui%2Fmalformed%2Fissue-69341-malformed-derive-inert.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd2177f3de22f54d7e71eea1e270f4e424394fc7/src%2Ftest%2Fui%2Fmalformed%2Fissue-69341-malformed-derive-inert.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fissue-69341-malformed-derive-inert.stderr?ref=cd2177f3de22f54d7e71eea1e270f4e424394fc7", "patch": "@@ -5,7 +5,7 @@ LL |     #[derive(parse())]\n    |                   ^^ help: remove the arguments\n \n error[E0774]: `derive` may only be applied to structs, enums and unions\n-  --> $DIR/issue-69341-malformed-derive-inert.rs:8:5\n+  --> $DIR/issue-69341-malformed-derive-inert.rs:7:5\n    |\n LL |     path: (),\n    |     ^^^^^^^^\n@@ -16,12 +16,6 @@ error: cannot find derive macro `parse` in this scope\n LL |     #[derive(parse())]\n    |              ^^^^^\n \n-error: cannot find derive macro `parse` in this scope\n-  --> $DIR/issue-69341-malformed-derive-inert.rs:4:14\n-   |\n-LL |     #[derive(parse())]\n-   |              ^^^^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0774`."}, {"sha": "8f1599a5abcb0fbf98e965e8cf84dcff70d9f108", "filename": "src/test/ui/span/issue-43927-non-ADT-derive.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd2177f3de22f54d7e71eea1e270f4e424394fc7/src%2Ftest%2Fui%2Fspan%2Fissue-43927-non-ADT-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2177f3de22f54d7e71eea1e270f4e424394fc7/src%2Ftest%2Fui%2Fspan%2Fissue-43927-non-ADT-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-43927-non-ADT-derive.rs?ref=cd2177f3de22f54d7e71eea1e270f4e424394fc7", "patch": "@@ -5,9 +5,6 @@\n //~| ERROR cannot determine resolution for the derive macro `Debug`\n //~| ERROR cannot determine resolution for the derive macro `PartialEq`\n //~| ERROR cannot determine resolution for the derive macro `Eq`\n-//~| ERROR cannot determine resolution for the derive macro `Debug`\n-//~| ERROR cannot determine resolution for the derive macro `PartialEq`\n-//~| ERROR cannot determine resolution for the derive macro `Eq`\n struct DerivedOn;\n \n fn main() {}"}, {"sha": "85beac535c965616031408ae8c2d8b1938fc992e", "filename": "src/test/ui/span/issue-43927-non-ADT-derive.stderr", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cd2177f3de22f54d7e71eea1e270f4e424394fc7/src%2Ftest%2Fui%2Fspan%2Fissue-43927-non-ADT-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd2177f3de22f54d7e71eea1e270f4e424394fc7/src%2Ftest%2Fui%2Fspan%2Fissue-43927-non-ADT-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-43927-non-ADT-derive.stderr?ref=cd2177f3de22f54d7e71eea1e270f4e424394fc7", "patch": "@@ -28,30 +28,6 @@ LL | #![derive(Debug, PartialEq, Eq)] // should be an outer attribute!\n    |\n    = note: import resolution is stuck, try simplifying macro imports\n \n-error: cannot determine resolution for the derive macro `Eq`\n-  --> $DIR/issue-43927-non-ADT-derive.rs:3:29\n-   |\n-LL | #![derive(Debug, PartialEq, Eq)] // should be an outer attribute!\n-   |                             ^^\n-   |\n-   = note: import resolution is stuck, try simplifying macro imports\n-\n-error: cannot determine resolution for the derive macro `PartialEq`\n-  --> $DIR/issue-43927-non-ADT-derive.rs:3:18\n-   |\n-LL | #![derive(Debug, PartialEq, Eq)] // should be an outer attribute!\n-   |                  ^^^^^^^^^\n-   |\n-   = note: import resolution is stuck, try simplifying macro imports\n-\n-error: cannot determine resolution for the derive macro `Debug`\n-  --> $DIR/issue-43927-non-ADT-derive.rs:3:11\n-   |\n-LL | #![derive(Debug, PartialEq, Eq)] // should be an outer attribute!\n-   |           ^^^^^\n-   |\n-   = note: import resolution is stuck, try simplifying macro imports\n-\n-error: aborting due to 7 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0774`."}]}