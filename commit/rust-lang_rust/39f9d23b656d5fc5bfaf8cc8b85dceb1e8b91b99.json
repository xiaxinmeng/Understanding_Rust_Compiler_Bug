{"sha": "39f9d23b656d5fc5bfaf8cc8b85dceb1e8b91b99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZjlkMjNiNjU2ZDVmYzViZmFmOGNjOGI4NWRjZWIxZThiOTFiOTk=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-02-27T02:14:55Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-03-07T01:18:51Z"}, "message": "Add flag for rustc_std_internal_symbol attribute\n\nPart of #47320", "tree": {"sha": "1da89503511b6bc22c659bef5acb9fed316ea73e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1da89503511b6bc22c659bef5acb9fed316ea73e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39f9d23b656d5fc5bfaf8cc8b85dceb1e8b91b99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39f9d23b656d5fc5bfaf8cc8b85dceb1e8b91b99", "html_url": "https://github.com/rust-lang/rust/commit/39f9d23b656d5fc5bfaf8cc8b85dceb1e8b91b99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39f9d23b656d5fc5bfaf8cc8b85dceb1e8b91b99/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bc7f41955c7583eca76c77fb45e51e3431cc89e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bc7f41955c7583eca76c77fb45e51e3431cc89e", "html_url": "https://github.com/rust-lang/rust/commit/6bc7f41955c7583eca76c77fb45e51e3431cc89e"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "69f43bc293d0824d51ba95e64f255d44ec6aebe5", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39f9d23b656d5fc5bfaf8cc8b85dceb1e8b91b99/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f9d23b656d5fc5bfaf8cc8b85dceb1e8b91b99/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=39f9d23b656d5fc5bfaf8cc8b85dceb1e8b91b99", "patch": "@@ -2228,6 +2228,7 @@ bitflags! {\n         const RUSTC_ALLOCATOR_NOUNWIND  = 0b0000_1000;\n         const NAKED                     = 0b0001_0000;\n         const NO_MANGLE                 = 0b0010_0000;\n+        const RUSTC_STD_INTERNAL_SYMBOL = 0b0100_0000;\n     }\n }\n "}, {"sha": "20edef8b35ccb1bb45a333e9a7fd67ef30093db1", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f9d23b656d5fc5bfaf8cc8b85dceb1e8b91b99/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f9d23b656d5fc5bfaf8cc8b85dceb1e8b91b99/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=39f9d23b656d5fc5bfaf8cc8b85dceb1e8b91b99", "patch": "@@ -188,7 +188,7 @@\n //! this is not implemented however: a mono item will be produced\n //! regardless of whether it is actually needed or not.\n \n-use rustc::hir;\n+use rustc::hir::{self, TransFnAttrFlags};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n \n use rustc::hir::map as hir_map;\n@@ -211,8 +211,6 @@ use monomorphize::item::{MonoItemExt, DefPathBasedNames, InstantiationMode};\n \n use rustc_data_structures::bitvec::BitVector;\n \n-use syntax::attr;\n-\n use std::iter;\n \n #[derive(PartialEq, Eq, Hash, Clone, Copy, Debug)]\n@@ -985,8 +983,8 @@ impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n             MonoItemCollectionMode::Lazy => {\n                 self.entry_fn == Some(def_id) ||\n                 self.tcx.is_reachable_non_generic(def_id) ||\n-                attr::contains_name(&self.tcx.get_attrs(def_id),\n-                                    \"rustc_std_internal_symbol\")\n+                self.tcx.trans_fn_attrs(def_id).flags.contains(\n+                    TransFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL)\n             }\n         }\n     }"}, {"sha": "fd79ae7435ed1b74857c187b5aaa5d8fcde9b661", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39f9d23b656d5fc5bfaf8cc8b85dceb1e8b91b99/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f9d23b656d5fc5bfaf8cc8b85dceb1e8b91b99/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=39f9d23b656d5fc5bfaf8cc8b85dceb1e8b91b99", "patch": "@@ -13,6 +13,7 @@ use std::sync::Arc;\n \n use monomorphize::Instance;\n use rustc::hir;\n+use rustc::hir::TransFnAttrFlags;\n use rustc::hir::def_id::CrateNum;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::middle::exported_symbols::{SymbolExportLevel, ExportedSymbol, metadata_symbol_name};\n@@ -21,7 +22,6 @@ use rustc::ty::{TyCtxt, SymbolName};\n use rustc::ty::maps::Providers;\n use rustc::util::nodemap::{FxHashMap, DefIdSet};\n use rustc_allocator::ALLOCATOR_METHODS;\n-use syntax::attr;\n \n pub type ExportedSymbols = FxHashMap<\n     CrateNum,\n@@ -258,8 +258,8 @@ fn symbol_export_level_provider(tcx: TyCtxt, sym_def_id: DefId) -> SymbolExportL\n     // are not considered for export\n     let trans_fn_attrs = tcx.trans_fn_attrs(sym_def_id);\n     let is_extern = trans_fn_attrs.contains_extern_indicator();\n-    let std_internal = attr::contains_name(&tcx.get_attrs(sym_def_id),\n-                                           \"rustc_std_internal_symbol\");\n+    let std_internal = trans_fn_attrs.flags.contains(TransFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL);\n+\n     if is_extern && !std_internal {\n         SymbolExportLevel::C\n     } else {"}, {"sha": "f8e10c208ac6533794f2abfb41ed914f72485ab6", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39f9d23b656d5fc5bfaf8cc8b85dceb1e8b91b99/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f9d23b656d5fc5bfaf8cc8b85dceb1e8b91b99/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=39f9d23b656d5fc5bfaf8cc8b85dceb1e8b91b99", "patch": "@@ -1745,6 +1745,8 @@ fn trans_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> TransFnAt\n             trans_fn_attrs.flags |= TransFnAttrFlags::NAKED;\n         } else if attr.check_name(\"no_mangle\") {\n             trans_fn_attrs.flags |= TransFnAttrFlags::NO_MANGLE;\n+        } else if attr.check_name(\"rustc_std_internal_symbol\") {\n+            trans_fn_attrs.flags |= TransFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL;\n         } else if attr.check_name(\"inline\") {\n             trans_fn_attrs.inline = attrs.iter().fold(InlineAttr::None, |ia, attr| {\n                 if attr.path != \"inline\" {"}]}