{"sha": "e8d266fa6dd7ee883d1bba52eb6a37c5e473978f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZDI2NmZhNmRkN2VlODgzZDFiYmE1MmViNmEzN2M1ZTQ3Mzk3OGY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-19T13:17:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-19T13:17:05Z"}, "message": "Merge #5814\n\n5814: Add SelfParam to code_model\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "5ef5dceeeafb7105f41b6fe12bb1563f424f2e87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ef5dceeeafb7105f41b6fe12bb1563f424f2e87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfPSZRCRBK7hj4Ov3rIwAAdHIIAB8X+Ee4fFlOVDqyR6r+kbRE\npNpd6+yBDmMEtu3r1o6iFlAni5SieeZK0z+Qc+yO9I8fjUIfEad261n6XpdgZte4\na5ndzPmM/ftjghvMFv9+kFSNDB+w6ZEV0MVISDjRhlq2UF3WxNXgVeQ80JJrUsw8\nZIOJcDrVLGgHsssV9UZiGp6tx+ENVjM/85/vKtBjnAkkQGtyvN+9Mt1Ml2P9hr5W\n7ydM6ec+HmIGAyUwEtiPV2c/wznjfQM8xAOVct/idlVefW36iZt63/62p3KeaTGe\n9hebmpEjjd4gz5JjRjZMRJxGw1rnxyctnZHPmtwAs8HjDf3dzBL3sXSio0W7/xw=\n=8HhN\n-----END PGP SIGNATURE-----\n", "payload": "tree 5ef5dceeeafb7105f41b6fe12bb1563f424f2e87\nparent 422856d70f934b49f5b35043f3b51b6da08a61fa\nparent b9b4693ce3bf0229ea40f09e6404fad3e7823321\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1597843025 +0000\ncommitter GitHub <noreply@github.com> 1597843025 +0000\n\nMerge #5814\n\n5814: Add SelfParam to code_model\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f", "html_url": "https://github.com/rust-lang/rust/commit/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "422856d70f934b49f5b35043f3b51b6da08a61fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/422856d70f934b49f5b35043f3b51b6da08a61fa", "html_url": "https://github.com/rust-lang/rust/commit/422856d70f934b49f5b35043f3b51b6da08a61fa"}, {"sha": "b9b4693ce3bf0229ea40f09e6404fad3e7823321", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9b4693ce3bf0229ea40f09e6404fad3e7823321", "html_url": "https://github.com/rust-lang/rust/commit/b9b4693ce3bf0229ea40f09e6404fad3e7823321"}], "stats": {"total": 105, "additions": 62, "deletions": 43}, "files": [{"sha": "3254f316b531e7bd4a8638a9eb99d8e053848a45", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 38, "deletions": 15, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=e8d266fa6dd7ee883d1bba52eb6a37c5e473978f", "patch": "@@ -666,23 +666,11 @@ impl Function {\n         db.function_data(self.id).name.clone()\n     }\n \n-    pub fn has_self_param(self, db: &dyn HirDatabase) -> bool {\n-        db.function_data(self.id).has_self_param\n-    }\n-\n-    pub fn mutability_of_self_param(self, db: &dyn HirDatabase) -> Option<Mutability> {\n-        let func_data = db.function_data(self.id);\n-        if !func_data.has_self_param {\n+    pub fn self_param(self, db: &dyn HirDatabase) -> Option<SelfParam> {\n+        if !db.function_data(self.id).has_self_param {\n             return None;\n         }\n-\n-        func_data.params.first().and_then(|param| {\n-            if let TypeRef::Reference(_, mutability) = param {\n-                Some(*mutability)\n-            } else {\n-                None\n-            }\n-        })\n+        Some(SelfParam { func: self.id })\n     }\n \n     pub fn params(self, db: &dyn HirDatabase) -> Vec<TypeRef> {\n@@ -698,6 +686,41 @@ impl Function {\n     }\n }\n \n+// Note: logically, this belongs to `hir_ty`, but we are not using it there yet.\n+pub enum Access {\n+    Shared,\n+    Exclusive,\n+    Owned,\n+}\n+\n+impl From<Mutability> for Access {\n+    fn from(mutability: Mutability) -> Access {\n+        match mutability {\n+            Mutability::Shared => Access::Shared,\n+            Mutability::Mut => Access::Exclusive,\n+        }\n+    }\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct SelfParam {\n+    func: FunctionId,\n+}\n+\n+impl SelfParam {\n+    pub fn access(self, db: &dyn HirDatabase) -> Access {\n+        let func_data = db.function_data(self.func);\n+        func_data\n+            .params\n+            .first()\n+            .map(|param| match *param {\n+                TypeRef::Reference(_, mutability) => mutability.into(),\n+                _ => Access::Owned,\n+            })\n+            .unwrap_or(Access::Owned)\n+    }\n+}\n+\n impl HasVisibility for Function {\n     fn visibility(&self, db: &dyn HirDatabase) -> Visibility {\n         let function_data = db.function_data(self.id);"}, {"sha": "447e6069892314128e546903569707f0bb4ab3d4", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=e8d266fa6dd7ee883d1bba52eb6a37c5e473978f", "patch": "@@ -32,10 +32,10 @@ mod has_source;\n \n pub use crate::{\n     code_model::{\n-        Adt, AsAssocItem, AssocItem, AssocItemContainer, AttrDef, Callable, CallableKind, Const,\n-        Crate, CrateDependency, DefWithBody, Docs, Enum, EnumVariant, Field, FieldSource, Function,\n-        GenericDef, HasAttrs, HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, ScopeDef,\n-        Static, Struct, Trait, Type, TypeAlias, TypeParam, Union, VariantDef, Visibility,\n+        Access, Adt, AsAssocItem, AssocItem, AssocItemContainer, AttrDef, Callable, CallableKind,\n+        Const, Crate, CrateDependency, DefWithBody, Docs, Enum, EnumVariant, Field, FieldSource,\n+        Function, GenericDef, HasAttrs, HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef,\n+        ScopeDef, Static, Struct, Trait, Type, TypeAlias, TypeParam, Union, VariantDef, Visibility,\n     },\n     has_source::HasSource,\n     semantics::{original_range, PathResolution, SelfKind, Semantics, SemanticsScope},"}, {"sha": "cabeaaf981e730be70c1d8fbc2c51ea3e27bf6ae", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=e8d266fa6dd7ee883d1bba52eb6a37c5e473978f", "patch": "@@ -21,13 +21,13 @@ use syntax::{\n };\n \n use crate::{\n+    code_model::Access,\n     db::HirDatabase,\n     diagnostics::Diagnostic,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, SourceAnalyzer},\n     AssocItem, Callable, Crate, Field, Function, HirFileId, ImplDef, InFile, Local, MacroDef,\n-    Module, ModuleDef, Name, Origin, Path, ScopeDef, Trait, Type, TypeAlias, TypeParam, TypeRef,\n-    VariantDef,\n+    Module, ModuleDef, Name, Origin, Path, ScopeDef, Trait, Type, TypeAlias, TypeParam, VariantDef,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -627,9 +627,11 @@ impl<'db> SemanticsImpl<'db> {\n                 }\n \n                 let func = self.resolve_method_call(&method_call_expr).map(Function::from)?;\n-                let is_unsafe = func.has_self_param(self.db)\n-                    && matches!(func.params(self.db).first(), Some(TypeRef::Reference(..)));\n-                Some(is_unsafe)\n+                let res = match func.self_param(self.db)?.access(self.db) {\n+                    Access::Shared | Access::Exclusive => true,\n+                    Access::Owned => false,\n+                };\n+                Some(res)\n             })\n             .unwrap_or(false)\n     }"}, {"sha": "5488db43f72086b244ec6d2188a6e18f649b48a2", "filename": "crates/ide/src/completion/complete_dot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=e8d266fa6dd7ee883d1bba52eb6a37c5e473978f", "patch": "@@ -48,7 +48,7 @@ fn complete_methods(acc: &mut Completions, ctx: &CompletionContext, receiver: &T\n         let mut seen_methods = FxHashSet::default();\n         let traits_in_scope = ctx.scope.traits_in_scope();\n         receiver.iterate_method_candidates(ctx.db, krate, &traits_in_scope, None, |_ty, func| {\n-            if func.has_self_param(ctx.db)\n+            if func.self_param(ctx.db).is_some()\n                 && ctx.scope.module().map_or(true, |m| func.is_visible_from(ctx.db, m))\n                 && seen_methods.insert(func.name(ctx.db))\n             {"}, {"sha": "d0d3a9f34d15d44507deb5f70f642143f829c43e", "filename": "crates/ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=e8d266fa6dd7ee883d1bba52eb6a37c5e473978f", "patch": "@@ -136,7 +136,7 @@ fn add_function_impl(\n         .lookup_by(fn_name)\n         .set_documentation(func.docs(ctx.db));\n \n-    let completion_kind = if func.has_self_param(ctx.db) {\n+    let completion_kind = if func.self_param(ctx.db).is_some() {\n         CompletionItemKind::Method\n     } else {\n         CompletionItemKind::Function"}, {"sha": "a73f8ab0b927fd8552063c0cf28ca941bb78c7d8", "filename": "crates/ide/src/completion/presentation.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f/crates%2Fide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f/crates%2Fide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=e8d266fa6dd7ee883d1bba52eb6a37c5e473978f", "patch": "@@ -191,14 +191,12 @@ impl Completions {\n         func: hir::Function,\n         local_name: Option<String>,\n     ) {\n-        let has_self_param = func.has_self_param(ctx.db);\n-\n         let name = local_name.unwrap_or_else(|| func.name(ctx.db).to_string());\n         let ast_node = func.source(ctx.db).value;\n \n         let mut builder =\n             CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.clone())\n-                .kind(if has_self_param {\n+                .kind(if func.self_param(ctx.db).is_some() {\n                     CompletionItemKind::Method\n                 } else {\n                     CompletionItemKind::Function"}, {"sha": "fc4f56550656edba11405ed87b62ca3ebf2f07c7", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=e8d266fa6dd7ee883d1bba52eb6a37c5e473978f", "patch": "@@ -4,7 +4,7 @@ mod injection;\n #[cfg(test)]\n mod tests;\n \n-use hir::{Mutability, Name, SelfKind, Semantics, VariantDef};\n+use hir::{Name, SelfKind, Semantics, VariantDef};\n use ide_db::{\n     defs::{classify_name, classify_name_ref, Definition, NameClass, NameRefClass},\n     RootDatabase,\n@@ -761,17 +761,13 @@ fn highlight_name(\n                             h |= HighlightModifier::Unsafe;\n                         }\n \n-                        return if func.has_self_param(db) {\n-                            match func.mutability_of_self_param(db) {\n-                                Some(mutability) => match mutability {\n-                                    Mutability::Mut => h | HighlightModifier::Mutable,\n-                                    Mutability::Shared => h,\n-                                },\n-                                None => h,\n-                            }\n-                        } else {\n-                            h\n-                        };\n+                        match func.self_param(db) {\n+                            None => h,\n+                            Some(self_param) => match self_param.access(db) {\n+                                hir::Access::Exclusive => h | HighlightModifier::Mutable,\n+                                hir::Access::Shared | hir::Access::Owned => h,\n+                            },\n+                        }\n                     });\n             }\n             hir::ModuleDef::Adt(hir::Adt::Struct(_)) => HighlightTag::Struct,"}, {"sha": "26968c474dd7c6be1038febd8f07b4faec1ce16c", "filename": "crates/ssr/src/matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f/crates%2Fssr%2Fsrc%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f/crates%2Fssr%2Fsrc%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Fmatching.rs?ref=e8d266fa6dd7ee883d1bba52eb6a37c5e473978f", "patch": "@@ -545,7 +545,7 @@ impl<'db, 'sema> Matcher<'db, 'sema> {\n         // If the function we're calling takes a self parameter, then we store additional\n         // information on the placeholder match about autoderef and autoref. This allows us to use\n         // the placeholder in a context where autoderef and autoref don't apply.\n-        if code_resolved_function.has_self_param(self.sema.db) {\n+        if code_resolved_function.self_param(self.sema.db).is_some() {\n             if let (Some(pattern_type), Some(expr)) = (&pattern_ufcs.qualifier_type, &code.expr()) {\n                 let deref_count = self.check_expr_type(pattern_type, expr)?;\n                 let pattern_receiver = pattern_args.next();"}, {"sha": "5d2cbec47a56d4da9570136f033ce3c45044edde", "filename": "crates/ssr/src/resolving.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f/crates%2Fssr%2Fsrc%2Fresolving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f/crates%2Fssr%2Fsrc%2Fresolving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Fresolving.rs?ref=e8d266fa6dd7ee883d1bba52eb6a37c5e473978f", "patch": "@@ -165,7 +165,7 @@ impl Resolver<'_, '_> {\n     fn ok_to_use_path_resolution(&self, resolution: &hir::PathResolution) -> bool {\n         match resolution {\n             hir::PathResolution::AssocItem(hir::AssocItem::Function(function)) => {\n-                if function.has_self_param(self.resolution_scope.scope.db) {\n+                if function.self_param(self.resolution_scope.scope.db).is_some() {\n                     // If we don't use this path resolution, then we won't be able to match method\n                     // calls. e.g. `Foo::bar($s)` should match `x.bar()`.\n                     true"}]}