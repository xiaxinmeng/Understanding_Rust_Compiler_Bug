{"sha": "4badd2faf8092870a0ecc920856b169eefc5f15c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYWRkMmZhZjgwOTI4NzBhMGVjYzkyMDg1NmIxNjllZWZjNWYxNWM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-17T19:27:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-17T19:27:32Z"}, "message": "Merge #10265\n\n10265: internal: parser cleanups r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "c4e3904436f1191ff01d55e3511e0ab7a6f4589a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4e3904436f1191ff01d55e3511e0ab7a6f4589a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4badd2faf8092870a0ecc920856b169eefc5f15c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhROwkCRBK7hj4Ov3rIwAAnhgIAA3Z85mizqYMUyd1Ft+3Jo8c\nM5SRwHX2DGcVmvjWD6mCr5oQfHOpmg1ZmPZvnyTm2lw4EKjCnNUF6o798bG3PV0U\nMyflumTlMQ1OQvNeqnWjoVzl+B35T+p++94WfnrF8eCgAwMhV+vyASYutGULaIRV\n3TUXmmtW8bMH+NgKl03I8RFqUcz7xEFVw9Odm6I/IGJOx1sDqMzTfMOKQn/w1p04\nYGLWLmJhHm5Ca+An24zseWrMR6RgOndycBKzA/0ioVdLwPo0G89f6LfMwOG6fQvv\nT0MlVpvUaJKDZNzc4d3J7c7YC0jRh7PA75dZkmgPisNRgBe6zUzLjQ+WIgiusQo=\n=EDDy\n-----END PGP SIGNATURE-----\n", "payload": "tree c4e3904436f1191ff01d55e3511e0ab7a6f4589a\nparent d44779f8a5d8c169fb5fc11e835422d38240261b\nparent 329b01ca67eede1cfe2695e8ee85eb0bfd5148b5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1631906852 +0000\ncommitter GitHub <noreply@github.com> 1631906852 +0000\n\nMerge #10265\n\n10265: internal: parser cleanups r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4badd2faf8092870a0ecc920856b169eefc5f15c", "html_url": "https://github.com/rust-lang/rust/commit/4badd2faf8092870a0ecc920856b169eefc5f15c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4badd2faf8092870a0ecc920856b169eefc5f15c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d44779f8a5d8c169fb5fc11e835422d38240261b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d44779f8a5d8c169fb5fc11e835422d38240261b", "html_url": "https://github.com/rust-lang/rust/commit/d44779f8a5d8c169fb5fc11e835422d38240261b"}, {"sha": "329b01ca67eede1cfe2695e8ee85eb0bfd5148b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/329b01ca67eede1cfe2695e8ee85eb0bfd5148b5", "html_url": "https://github.com/rust-lang/rust/commit/329b01ca67eede1cfe2695e8ee85eb0bfd5148b5"}], "stats": {"total": 1039, "additions": 543, "deletions": 496}, "files": [{"sha": "80d7b09b3e1069a99a0b770573d759eb1f7c3896", "filename": "crates/parser/src/grammar/attributes.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -12,31 +12,13 @@ pub(super) fn outer_attrs(p: &mut Parser) {\n     }\n }\n \n-pub(super) fn meta(p: &mut Parser) {\n-    let meta = p.start();\n-    paths::use_path(p);\n-\n-    match p.current() {\n-        T![=] => {\n-            p.bump(T![=]);\n-            if expressions::expr(p).0.is_none() {\n-                p.error(\"expected expression\");\n-            }\n-        }\n-        T!['('] | T!['['] | T!['{'] => items::token_tree(p),\n-        _ => {}\n-    }\n-\n-    meta.complete(p, META);\n-}\n-\n fn attr(p: &mut Parser, inner: bool) {\n-    let attr = p.start();\n     assert!(p.at(T![#]));\n+\n+    let attr = p.start();\n     p.bump(T![#]);\n \n     if inner {\n-        assert!(p.at(T![!]));\n         p.bump(T![!]);\n     }\n \n@@ -51,3 +33,21 @@ fn attr(p: &mut Parser, inner: bool) {\n     }\n     attr.complete(p, ATTR);\n }\n+\n+pub(super) fn meta(p: &mut Parser) {\n+    let meta = p.start();\n+    paths::use_path(p);\n+\n+    match p.current() {\n+        T![=] => {\n+            p.bump(T![=]);\n+            if expressions::expr(p).0.is_none() {\n+                p.error(\"expected expression\");\n+            }\n+        }\n+        T!['('] | T!['['] | T!['{'] => items::token_tree(p),\n+        _ => {}\n+    }\n+\n+    meta.complete(p, META);\n+}"}, {"sha": "12e62cddbc0d14221c901c6b140c3531a39b1d33", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -71,7 +71,7 @@ pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi, prefer_expr: bool) {\n \n     // test block_items\n     // fn a() { fn b() {} }\n-    let m = match items::maybe_item(p, m) {\n+    let m = match items::opt_item(p, m) {\n         Ok(()) => return,\n         Err(m) => m,\n     };"}, {"sha": "e0b740a8152591875995ea55be2374ce3f3cb51e", "filename": "crates/parser/src/grammar/items.rs", "status": "modified", "additions": 79, "deletions": 100, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -44,7 +44,8 @@ pub(super) const ITEM_RECOVERY_SET: TokenSet = TokenSet::new(&[\n pub(super) fn item_or_macro(p: &mut Parser, stop_on_r_curly: bool) {\n     let m = p.start();\n     attributes::outer_attrs(p);\n-    let m = match maybe_item(p, m) {\n+\n+    let m = match opt_item(p, m) {\n         Ok(()) => {\n             if p.at(T![;]) {\n                 p.err_and_bump(\n@@ -56,6 +57,7 @@ pub(super) fn item_or_macro(p: &mut Parser, stop_on_r_curly: bool) {\n         }\n         Err(m) => m,\n     };\n+\n     if paths::is_use_path_start(p) {\n         match macro_call(p) {\n             BlockLike::Block => (),\n@@ -64,30 +66,30 @@ pub(super) fn item_or_macro(p: &mut Parser, stop_on_r_curly: bool) {\n             }\n         }\n         m.complete(p, MACRO_CALL);\n-    } else {\n-        m.abandon(p);\n-        if p.at(T!['{']) {\n-            error_block(p, \"expected an item\");\n-        } else if p.at(T!['}']) && !stop_on_r_curly {\n+        return;\n+    }\n+\n+    m.abandon(p);\n+    match p.current() {\n+        T!['{'] => error_block(p, \"expected an item\"),\n+        T!['}'] if !stop_on_r_curly => {\n             let e = p.start();\n             p.error(\"unmatched `}`\");\n             p.bump(T!['}']);\n             e.complete(p, ERROR);\n-        } else if !p.at(EOF) && !p.at(T!['}']) {\n-            p.err_and_bump(\"expected an item\");\n-        } else {\n-            p.error(\"expected an item\");\n         }\n+        EOF | T!['}'] => p.error(\"expected an item\"),\n+        _ => p.err_and_bump(\"expected an item\"),\n     }\n }\n \n /// Try to parse an item, completing `m` in case of success.\n-pub(super) fn maybe_item(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n+pub(super) fn opt_item(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n     // test_err pub_expr\n     // fn foo() { pub 92; }\n     let has_visibility = opt_visibility(p);\n \n-    let m = match items_without_modifiers(p, m) {\n+    let m = match opt_item_without_modifiers(p, m) {\n         Ok(()) => return Ok(()),\n         Err(m) => m,\n     };\n@@ -235,48 +237,20 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n     Ok(())\n }\n \n-fn items_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n+fn opt_item_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n     let la = p.nth(1);\n     match p.current() {\n-        // test extern_crate\n-        // extern crate foo;\n         T![extern] if la == T![crate] => extern_crate(p, m),\n         T![use] => use_item::use_(p, m),\n         T![mod] => mod_item(p, m),\n \n         T![type] => type_alias(p, m),\n-\n-        T![struct] => {\n-            // test struct_items\n-            // struct Foo;\n-            // struct Foo {}\n-            // struct Foo();\n-            // struct Foo(String, usize);\n-            // struct Foo {\n-            //     a: i32,\n-            //     b: f32,\n-            // }\n-            adt::strukt(p, m);\n-        }\n+        T![struct] => adt::strukt(p, m),\n         T![enum] => adt::enum_(p, m),\n-        IDENT if p.at_contextual_kw(\"union\") && p.nth(1) == IDENT => {\n-            // test union_items\n-            // union Foo {}\n-            // union Foo {\n-            //     a: i32,\n-            //     b: f32,\n-            // }\n-            adt::union(p, m);\n-        }\n+        IDENT if p.at_contextual_kw(\"union\") && p.nth(1) == IDENT => adt::union(p, m),\n \n-        // test pub_macro_def\n-        // pub macro m($:ident) {}\n-        T![macro] => {\n-            macro_def(p, m);\n-        }\n-        IDENT if p.at_contextual_kw(\"macro_rules\") && p.nth(1) == BANG => {\n-            macro_rules(p, m);\n-        }\n+        T![macro] => macro_def(p, m),\n+        IDENT if p.at_contextual_kw(\"macro_rules\") && p.nth(1) == BANG => macro_rules(p, m),\n \n         T![const] if (la == IDENT || la == T![_] || la == T![mut]) => consts::konst(p, m),\n         T![static] => consts::static_(p, m),\n@@ -286,26 +260,78 @@ fn items_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n     Ok(())\n }\n \n+// test extern_crate\n+// extern crate foo;\n fn extern_crate(p: &mut Parser, m: Marker) {\n-    assert!(p.at(T![extern]));\n     p.bump(T![extern]);\n-\n-    assert!(p.at(T![crate]));\n     p.bump(T![crate]);\n \n     if p.at(T![self]) {\n+        // test extern_crate_self\n+        // extern crate self;\n         let m = p.start();\n         p.bump(T![self]);\n         m.complete(p, NAME_REF);\n     } else {\n         name_ref(p);\n     }\n \n+    // test extern_crate_rename\n+    // extern crate foo as bar;\n     opt_rename(p);\n     p.expect(T![;]);\n     m.complete(p, EXTERN_CRATE);\n }\n \n+// test mod_item\n+// mod a;\n+pub(crate) fn mod_item(p: &mut Parser, m: Marker) {\n+    p.bump(T![mod]);\n+    name(p);\n+    if p.at(T!['{']) {\n+        // test mod_item_curly\n+        // mod b { }\n+        item_list(p);\n+    } else if !p.eat(T![;]) {\n+        p.error(\"expected `;` or `{`\");\n+    }\n+    m.complete(p, MODULE);\n+}\n+\n+// test type_alias\n+// type Foo = Bar;\n+fn type_alias(p: &mut Parser, m: Marker) {\n+    p.bump(T![type]);\n+\n+    name(p);\n+\n+    // test type_item_type_params\n+    // type Result<T> = ();\n+    type_params::opt_generic_param_list(p);\n+\n+    if p.at(T![:]) {\n+        type_params::bounds(p);\n+    }\n+\n+    // test type_item_where_clause\n+    // type Foo where Foo: Copy = ();\n+    type_params::opt_where_clause(p);\n+    if p.eat(T![=]) {\n+        types::type_(p);\n+    }\n+    p.expect(T![;]);\n+    m.complete(p, TYPE_ALIAS);\n+}\n+\n+pub(crate) fn item_list(p: &mut Parser) {\n+    assert!(p.at(T!['{']));\n+    let m = p.start();\n+    p.bump(T!['{']);\n+    mod_contents(p, true);\n+    p.expect(T!['}']);\n+    m.complete(p, ITEM_LIST);\n+}\n+\n pub(crate) fn extern_item_list(p: &mut Parser) {\n     assert!(p.at(T!['{']));\n     let m = p.start();\n@@ -347,54 +373,6 @@ fn fn_(p: &mut Parser) {\n     }\n }\n \n-// test type_item\n-// type Foo = Bar;\n-fn type_alias(p: &mut Parser, m: Marker) {\n-    assert!(p.at(T![type]));\n-    p.bump(T![type]);\n-\n-    name(p);\n-\n-    // test type_item_type_params\n-    // type Result<T> = ();\n-    type_params::opt_generic_param_list(p);\n-\n-    if p.at(T![:]) {\n-        type_params::bounds(p);\n-    }\n-\n-    // test type_item_where_clause\n-    // type Foo where Foo: Copy = ();\n-    type_params::opt_where_clause(p);\n-    if p.eat(T![=]) {\n-        types::type_(p);\n-    }\n-    p.expect(T![;]);\n-    m.complete(p, TYPE_ALIAS);\n-}\n-\n-pub(crate) fn mod_item(p: &mut Parser, m: Marker) {\n-    assert!(p.at(T![mod]));\n-    p.bump(T![mod]);\n-\n-    name(p);\n-    if p.at(T!['{']) {\n-        item_list(p);\n-    } else if !p.eat(T![;]) {\n-        p.error(\"expected `;` or `{`\");\n-    }\n-    m.complete(p, MODULE);\n-}\n-\n-pub(crate) fn item_list(p: &mut Parser) {\n-    assert!(p.at(T!['{']));\n-    let m = p.start();\n-    p.bump(T!['{']);\n-    mod_contents(p, true);\n-    p.expect(T!['}']);\n-    m.complete(p, ITEM_LIST);\n-}\n-\n fn macro_rules(p: &mut Parser, m: Marker) {\n     assert!(p.at_contextual_kw(\"macro_rules\"));\n     p.bump_remap(T![macro_rules]);\n@@ -429,23 +407,24 @@ fn macro_rules(p: &mut Parser, m: Marker) {\n }\n \n // test macro_def\n-// macro m { ($i:ident) => {} }\n // macro m($i:ident) {}\n fn macro_def(p: &mut Parser, m: Marker) {\n     p.expect(T![macro]);\n     name_r(p, ITEM_RECOVERY_SET);\n     if p.at(T!['{']) {\n+        // test macro_def_curly\n+        // macro m { ($i:ident) => {} }\n         token_tree(p);\n-    } else if !p.at(T!['(']) {\n-        p.error(\"unmatched `(`\");\n-    } else {\n+    } else if p.at(T!['(']) {\n         let m = p.start();\n         token_tree(p);\n         match p.current() {\n             T!['{'] | T!['['] | T!['('] => token_tree(p),\n             _ => p.error(\"expected `{`, `[`, `(`\"),\n         }\n         m.complete(p, TOKEN_TREE);\n+    } else {\n+        p.error(\"unmatched `(`\");\n     }\n \n     m.complete(p, MACRO_DEF);"}, {"sha": "eaf16bc1a10303794089ba12e0c43c422b82d7c1", "filename": "crates/parser/src/grammar/items/adt.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -1,18 +1,21 @@\n use super::*;\n \n+// test struct_item\n+// struct S {}\n pub(super) fn strukt(p: &mut Parser, m: Marker) {\n-    assert!(p.at(T![struct]));\n     p.bump(T![struct]);\n-    struct_or_union(p, m, T![struct], STRUCT);\n+    struct_or_union(p, m, true);\n }\n \n+// test union_item\n+// struct U { i: i32, f: f32 }\n pub(super) fn union(p: &mut Parser, m: Marker) {\n     assert!(p.at_contextual_kw(\"union\"));\n     p.bump_remap(T![union]);\n-    struct_or_union(p, m, T![union], UNION);\n+    struct_or_union(p, m, false);\n }\n \n-fn struct_or_union(p: &mut Parser, m: Marker, kw: SyntaxKind, def: SyntaxKind) {\n+fn struct_or_union(p: &mut Parser, m: Marker, is_struct: bool) {\n     name_r(p, ITEM_RECOVERY_SET);\n     type_params::opt_generic_param_list(p);\n     match p.current() {\n@@ -29,26 +32,24 @@ fn struct_or_union(p: &mut Parser, m: Marker, kw: SyntaxKind, def: SyntaxKind) {\n                 }\n             }\n         }\n-        T![;] if kw == T![struct] => {\n+        T!['{'] => record_field_list(p),\n+        // test unit_struct\n+        // struct S;\n+        T![;] if is_struct => {\n             p.bump(T![;]);\n         }\n-        T!['{'] => record_field_list(p),\n-        T!['('] if kw == T![struct] => {\n+        // test tuple_struct\n+        // struct S(String, usize);\n+        T!['('] if is_struct => {\n             tuple_field_list(p);\n             // test tuple_struct_where\n-            // struct Test<T>(T) where T: Clone;\n-            // struct Test<T>(T);\n+            // struct S<T>(T) where T: Clone;\n             type_params::opt_where_clause(p);\n             p.expect(T![;]);\n         }\n-        _ if kw == T![struct] => {\n-            p.error(\"expected `;`, `{`, or `(`\");\n-        }\n-        _ => {\n-            p.error(\"expected `{`\");\n-        }\n+        _ => p.error(if is_struct { \"expected `;`, `{`, or `(`\" } else { \"expected `{`\" }),\n     }\n-    m.complete(p, def);\n+    m.complete(p, if is_struct { STRUCT } else { UNION });\n }\n \n pub(super) fn enum_(p: &mut Parser, m: Marker) {\n@@ -102,6 +103,8 @@ pub(crate) fn variant_list(p: &mut Parser) {\n     m.complete(p, VARIANT_LIST);\n }\n \n+// test record_field_list\n+// struct S { a: i32, b: f32 }\n pub(crate) fn record_field_list(p: &mut Parser) {\n     assert!(p.at(T!['{']));\n     let m = p.start();"}, {"sha": "6589e479519323b1d20d20d81f778011fe563e40", "filename": "crates/syntax/test_data/parser/inline/ok/0068_union_items.rast", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d44779f8a5d8c169fb5fc11e835422d38240261b/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.rast", "raw_url": "https://github.com/rust-lang/rust/raw/d44779f8a5d8c169fb5fc11e835422d38240261b/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.rast?ref=d44779f8a5d8c169fb5fc11e835422d38240261b", "patch": "@@ -1,46 +0,0 @@\n-SOURCE_FILE@0..51\n-  UNION@0..12\n-    UNION_KW@0..5 \"union\"\n-    WHITESPACE@5..6 \" \"\n-    NAME@6..9\n-      IDENT@6..9 \"Foo\"\n-    WHITESPACE@9..10 \" \"\n-    RECORD_FIELD_LIST@10..12\n-      L_CURLY@10..11 \"{\"\n-      R_CURLY@11..12 \"}\"\n-  WHITESPACE@12..13 \"\\n\"\n-  UNION@13..50\n-    UNION_KW@13..18 \"union\"\n-    WHITESPACE@18..19 \" \"\n-    NAME@19..22\n-      IDENT@19..22 \"Foo\"\n-    WHITESPACE@22..23 \" \"\n-    RECORD_FIELD_LIST@23..50\n-      L_CURLY@23..24 \"{\"\n-      WHITESPACE@24..29 \"\\n    \"\n-      RECORD_FIELD@29..35\n-        NAME@29..30\n-          IDENT@29..30 \"a\"\n-        COLON@30..31 \":\"\n-        WHITESPACE@31..32 \" \"\n-        PATH_TYPE@32..35\n-          PATH@32..35\n-            PATH_SEGMENT@32..35\n-              NAME_REF@32..35\n-                IDENT@32..35 \"i32\"\n-      COMMA@35..36 \",\"\n-      WHITESPACE@36..41 \"\\n    \"\n-      RECORD_FIELD@41..47\n-        NAME@41..42\n-          IDENT@41..42 \"b\"\n-        COLON@42..43 \":\"\n-        WHITESPACE@43..44 \" \"\n-        PATH_TYPE@44..47\n-          PATH@44..47\n-            PATH_SEGMENT@44..47\n-              NAME_REF@44..47\n-                IDENT@44..47 \"f32\"\n-      COMMA@47..48 \",\"\n-      WHITESPACE@48..49 \"\\n\"\n-      R_CURLY@49..50 \"}\"\n-  WHITESPACE@50..51 \"\\n\""}, {"sha": "b7dd610d80a958bf168d7a7cc0fe33adbd6966ca", "filename": "crates/syntax/test_data/parser/inline/ok/0068_union_items.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d44779f8a5d8c169fb5fc11e835422d38240261b/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44779f8a5d8c169fb5fc11e835422d38240261b/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.rs?ref=d44779f8a5d8c169fb5fc11e835422d38240261b", "patch": "@@ -1,5 +0,0 @@\n-union Foo {}\n-union Foo {\n-    a: i32,\n-    b: f32,\n-}"}, {"sha": "2befc8388ec70abcb7c245c0b679a425780f0850", "filename": "crates/syntax/test_data/parser/inline/ok/0078_type_alias.rast", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0078_type_alias.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0078_type_alias.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0078_type_alias.rast?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "previous_filename": "crates/syntax/test_data/parser/inline/ok/0078_type_item.rast"}, {"sha": "04c0344fa3641f0a3ce226d05680e2b1eb58a4e3", "filename": "crates/syntax/test_data/parser/inline/ok/0078_type_alias.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0078_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0078_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0078_type_alias.rs?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "previous_filename": "crates/syntax/test_data/parser/inline/ok/0078_type_item.rs"}, {"sha": "693e3f3ee1245864d423b68dae606b0fb9c923e5", "filename": "crates/syntax/test_data/parser/inline/ok/0083_struct_items.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d44779f8a5d8c169fb5fc11e835422d38240261b/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0083_struct_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44779f8a5d8c169fb5fc11e835422d38240261b/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0083_struct_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0083_struct_items.rs?ref=d44779f8a5d8c169fb5fc11e835422d38240261b", "patch": "@@ -1,8 +0,0 @@\n-struct Foo;\n-struct Foo {}\n-struct Foo();\n-struct Foo(String, usize);\n-struct Foo {\n-    a: i32,\n-    b: f32,\n-}"}, {"sha": "31961113634ebf0c789bd6ef5b398fff80b2d9c0", "filename": "crates/syntax/test_data/parser/inline/ok/0114_tuple_struct_where.rast", "status": "modified", "additions": 40, "deletions": 62, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.rast?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -1,64 +1,42 @@\n-SOURCE_FILE@0..53\n-  STRUCT@0..33\n+SOURCE_FILE@0..31\n+  STRUCT@0..30\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n-    NAME@7..11\n-      IDENT@7..11 \"Test\"\n-    GENERIC_PARAM_LIST@11..14\n-      L_ANGLE@11..12 \"<\"\n-      TYPE_PARAM@12..13\n-        NAME@12..13\n-          IDENT@12..13 \"T\"\n-      R_ANGLE@13..14 \">\"\n-    TUPLE_FIELD_LIST@14..17\n-      L_PAREN@14..15 \"(\"\n-      TUPLE_FIELD@15..16\n-        PATH_TYPE@15..16\n-          PATH@15..16\n-            PATH_SEGMENT@15..16\n-              NAME_REF@15..16\n-                IDENT@15..16 \"T\"\n-      R_PAREN@16..17 \")\"\n-    WHITESPACE@17..18 \" \"\n-    WHERE_CLAUSE@18..32\n-      WHERE_KW@18..23 \"where\"\n-      WHITESPACE@23..24 \" \"\n-      WHERE_PRED@24..32\n-        PATH_TYPE@24..25\n-          PATH@24..25\n-            PATH_SEGMENT@24..25\n-              NAME_REF@24..25\n-                IDENT@24..25 \"T\"\n-        COLON@25..26 \":\"\n-        WHITESPACE@26..27 \" \"\n-        TYPE_BOUND_LIST@27..32\n-          TYPE_BOUND@27..32\n-            PATH_TYPE@27..32\n-              PATH@27..32\n-                PATH_SEGMENT@27..32\n-                  NAME_REF@27..32\n-                    IDENT@27..32 \"Clone\"\n-    SEMICOLON@32..33 \";\"\n-  WHITESPACE@33..34 \"\\n\"\n-  STRUCT@34..52\n-    STRUCT_KW@34..40 \"struct\"\n-    WHITESPACE@40..41 \" \"\n-    NAME@41..45\n-      IDENT@41..45 \"Test\"\n-    GENERIC_PARAM_LIST@45..48\n-      L_ANGLE@45..46 \"<\"\n-      TYPE_PARAM@46..47\n-        NAME@46..47\n-          IDENT@46..47 \"T\"\n-      R_ANGLE@47..48 \">\"\n-    TUPLE_FIELD_LIST@48..51\n-      L_PAREN@48..49 \"(\"\n-      TUPLE_FIELD@49..50\n-        PATH_TYPE@49..50\n-          PATH@49..50\n-            PATH_SEGMENT@49..50\n-              NAME_REF@49..50\n-                IDENT@49..50 \"T\"\n-      R_PAREN@50..51 \")\"\n-    SEMICOLON@51..52 \";\"\n-  WHITESPACE@52..53 \"\\n\"\n+    NAME@7..8\n+      IDENT@7..8 \"S\"\n+    GENERIC_PARAM_LIST@8..11\n+      L_ANGLE@8..9 \"<\"\n+      TYPE_PARAM@9..10\n+        NAME@9..10\n+          IDENT@9..10 \"T\"\n+      R_ANGLE@10..11 \">\"\n+    TUPLE_FIELD_LIST@11..14\n+      L_PAREN@11..12 \"(\"\n+      TUPLE_FIELD@12..13\n+        PATH_TYPE@12..13\n+          PATH@12..13\n+            PATH_SEGMENT@12..13\n+              NAME_REF@12..13\n+                IDENT@12..13 \"T\"\n+      R_PAREN@13..14 \")\"\n+    WHITESPACE@14..15 \" \"\n+    WHERE_CLAUSE@15..29\n+      WHERE_KW@15..20 \"where\"\n+      WHITESPACE@20..21 \" \"\n+      WHERE_PRED@21..29\n+        PATH_TYPE@21..22\n+          PATH@21..22\n+            PATH_SEGMENT@21..22\n+              NAME_REF@21..22\n+                IDENT@21..22 \"T\"\n+        COLON@22..23 \":\"\n+        WHITESPACE@23..24 \" \"\n+        TYPE_BOUND_LIST@24..29\n+          TYPE_BOUND@24..29\n+            PATH_TYPE@24..29\n+              PATH@24..29\n+                PATH_SEGMENT@24..29\n+                  NAME_REF@24..29\n+                    IDENT@24..29 \"Clone\"\n+    SEMICOLON@29..30 \";\"\n+  WHITESPACE@30..31 \"\\n\""}, {"sha": "a602e0018275a3748a84f7796a8e58283db250b1", "filename": "crates/syntax/test_data/parser/inline/ok/0114_tuple_struct_where.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.rs?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -1,2 +1 @@\n-struct Test<T>(T) where T: Clone;\n-struct Test<T>(T);\n+struct S<T>(T) where T: Clone;"}, {"sha": "4d7b78d5caa3a1b7dce73c9a29af70f3c0c05e72", "filename": "crates/syntax/test_data/parser/inline/ok/0147_macro_def.rast", "status": "modified", "additions": 15, "deletions": 41, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0147_macro_def.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0147_macro_def.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0147_macro_def.rast?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -1,45 +1,19 @@\n-SOURCE_FILE@0..50\n-  MACRO_DEF@0..28\n+SOURCE_FILE@0..21\n+  MACRO_DEF@0..20\n     MACRO_KW@0..5 \"macro\"\n     WHITESPACE@5..6 \" \"\n     NAME@6..7\n       IDENT@6..7 \"m\"\n-    WHITESPACE@7..8 \" \"\n-    TOKEN_TREE@8..28\n-      L_CURLY@8..9 \"{\"\n-      WHITESPACE@9..10 \" \"\n-      TOKEN_TREE@10..20\n-        L_PAREN@10..11 \"(\"\n-        DOLLAR@11..12 \"$\"\n-        IDENT@12..13 \"i\"\n-        COLON@13..14 \":\"\n-        IDENT@14..19 \"ident\"\n-        R_PAREN@19..20 \")\"\n-      WHITESPACE@20..21 \" \"\n-      EQ@21..22 \"=\"\n-      R_ANGLE@22..23 \">\"\n-      WHITESPACE@23..24 \" \"\n-      TOKEN_TREE@24..26\n-        L_CURLY@24..25 \"{\"\n-        R_CURLY@25..26 \"}\"\n-      WHITESPACE@26..27 \" \"\n-      R_CURLY@27..28 \"}\"\n-  WHITESPACE@28..29 \"\\n\"\n-  MACRO_DEF@29..49\n-    MACRO_KW@29..34 \"macro\"\n-    WHITESPACE@34..35 \" \"\n-    NAME@35..36\n-      IDENT@35..36 \"m\"\n-    TOKEN_TREE@36..49\n-      TOKEN_TREE@36..46\n-        L_PAREN@36..37 \"(\"\n-        DOLLAR@37..38 \"$\"\n-        IDENT@38..39 \"i\"\n-        COLON@39..40 \":\"\n-        IDENT@40..45 \"ident\"\n-        R_PAREN@45..46 \")\"\n-      WHITESPACE@46..47 \" \"\n-      TOKEN_TREE@47..49\n-        L_CURLY@47..48 \"{\"\n-        R_CURLY@48..49 \"}\"\n-  WHITESPACE@49..50 \"\\n\"\n+    TOKEN_TREE@7..20\n+      TOKEN_TREE@7..17\n+        L_PAREN@7..8 \"(\"\n+        DOLLAR@8..9 \"$\"\n+        IDENT@9..10 \"i\"\n+        COLON@10..11 \":\"\n+        IDENT@11..16 \"ident\"\n+        R_PAREN@16..17 \")\"\n+      WHITESPACE@17..18 \" \"\n+      TOKEN_TREE@18..20\n+        L_CURLY@18..19 \"{\"\n+        R_CURLY@19..20 \"}\"\n+  WHITESPACE@20..21 \"\\n\""}, {"sha": "a014ae5464e5210421f7e58d9952b188bd7b8e71", "filename": "crates/syntax/test_data/parser/inline/ok/0147_macro_def.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0147_macro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0147_macro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0147_macro_def.rs?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -1,2 +1 @@\n-macro m { ($i:ident) => {} }\n macro m($i:ident) {}"}, {"sha": "1c527f60b9c22e94745579e819cbc62d272ce215", "filename": "crates/syntax/test_data/parser/inline/ok/0148_pub_macro_def.rast", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d44779f8a5d8c169fb5fc11e835422d38240261b/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0148_pub_macro_def.rast", "raw_url": "https://github.com/rust-lang/rust/raw/d44779f8a5d8c169fb5fc11e835422d38240261b/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0148_pub_macro_def.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0148_pub_macro_def.rast?ref=d44779f8a5d8c169fb5fc11e835422d38240261b", "patch": "@@ -1,21 +0,0 @@\n-SOURCE_FILE@0..24\n-  MACRO_DEF@0..23\n-    VISIBILITY@0..3\n-      PUB_KW@0..3 \"pub\"\n-    WHITESPACE@3..4 \" \"\n-    MACRO_KW@4..9 \"macro\"\n-    WHITESPACE@9..10 \" \"\n-    NAME@10..11\n-      IDENT@10..11 \"m\"\n-    TOKEN_TREE@11..23\n-      TOKEN_TREE@11..20\n-        L_PAREN@11..12 \"(\"\n-        DOLLAR@12..13 \"$\"\n-        COLON@13..14 \":\"\n-        IDENT@14..19 \"ident\"\n-        R_PAREN@19..20 \")\"\n-      WHITESPACE@20..21 \" \"\n-      TOKEN_TREE@21..23\n-        L_CURLY@21..22 \"{\"\n-        R_CURLY@22..23 \"}\"\n-  WHITESPACE@23..24 \"\\n\""}, {"sha": "3b2be597fd85232a558395cb85aa0993389a73ff", "filename": "crates/syntax/test_data/parser/inline/ok/0148_pub_macro_def.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d44779f8a5d8c169fb5fc11e835422d38240261b/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0148_pub_macro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44779f8a5d8c169fb5fc11e835422d38240261b/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0148_pub_macro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0148_pub_macro_def.rs?ref=d44779f8a5d8c169fb5fc11e835422d38240261b", "patch": "@@ -1 +0,0 @@\n-pub macro m($:ident) {}"}, {"sha": "87516e9fc409b9cd3ec46fe768c2b4d2592cf80a", "filename": "crates/syntax/test_data/parser/inline/ok/0168_extern_crate_rename.rast", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0168_extern_crate_rename.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0168_extern_crate_rename.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0168_extern_crate_rename.rast?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -0,0 +1,16 @@\n+SOURCE_FILE@0..25\n+  EXTERN_CRATE@0..24\n+    EXTERN_KW@0..6 \"extern\"\n+    WHITESPACE@6..7 \" \"\n+    CRATE_KW@7..12 \"crate\"\n+    WHITESPACE@12..13 \" \"\n+    NAME_REF@13..16\n+      IDENT@13..16 \"foo\"\n+    WHITESPACE@16..17 \" \"\n+    RENAME@17..23\n+      AS_KW@17..19 \"as\"\n+      WHITESPACE@19..20 \" \"\n+      NAME@20..23\n+        IDENT@20..23 \"bar\"\n+    SEMICOLON@23..24 \";\"\n+  WHITESPACE@24..25 \"\\n\""}, {"sha": "fc76e17dda4780b671bd6204c1fce316625ca162", "filename": "crates/syntax/test_data/parser/inline/ok/0168_extern_crate_rename.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0168_extern_crate_rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0168_extern_crate_rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0168_extern_crate_rename.rs?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -0,0 +1 @@\n+extern crate foo as bar;"}, {"sha": "26b4c0f1959467f1f88e42596eeac36cecead15c", "filename": "crates/syntax/test_data/parser/inline/ok/0168_extern_crate_self.rast", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0168_extern_crate_self.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0168_extern_crate_self.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0168_extern_crate_self.rast?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -0,0 +1,10 @@\n+SOURCE_FILE@0..19\n+  EXTERN_CRATE@0..18\n+    EXTERN_KW@0..6 \"extern\"\n+    WHITESPACE@6..7 \" \"\n+    CRATE_KW@7..12 \"crate\"\n+    WHITESPACE@12..13 \" \"\n+    NAME_REF@13..17\n+      SELF_KW@13..17 \"self\"\n+    SEMICOLON@17..18 \";\"\n+  WHITESPACE@18..19 \"\\n\""}, {"sha": "c969ed109361b206f147963d505f81bf2188890c", "filename": "crates/syntax/test_data/parser/inline/ok/0168_extern_crate_self.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0168_extern_crate_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0168_extern_crate_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0168_extern_crate_self.rs?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -0,0 +1 @@\n+extern crate self;"}, {"sha": "423eacf92e23a3d481d22d7c473de4c3804935a2", "filename": "crates/syntax/test_data/parser/inline/ok/0169_mod_item.rast", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0169_mod_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0169_mod_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0169_mod_item.rast?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -0,0 +1,8 @@\n+SOURCE_FILE@0..7\n+  MODULE@0..6\n+    MOD_KW@0..3 \"mod\"\n+    WHITESPACE@3..4 \" \"\n+    NAME@4..5\n+      IDENT@4..5 \"a\"\n+    SEMICOLON@5..6 \";\"\n+  WHITESPACE@6..7 \"\\n\""}, {"sha": "f21af614da057799f1daff3eae932ab1a1505ea6", "filename": "crates/syntax/test_data/parser/inline/ok/0169_mod_item.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0169_mod_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0169_mod_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0169_mod_item.rs?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -0,0 +1 @@\n+mod a;"}, {"sha": "33ad9c44f5c62b34f4549014fd0d92c2e0db7e6b", "filename": "crates/syntax/test_data/parser/inline/ok/0170_mod_item_curly.rast", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0170_mod_item_curly.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0170_mod_item_curly.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0170_mod_item_curly.rast?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -0,0 +1,12 @@\n+SOURCE_FILE@0..10\n+  MODULE@0..9\n+    MOD_KW@0..3 \"mod\"\n+    WHITESPACE@3..4 \" \"\n+    NAME@4..5\n+      IDENT@4..5 \"b\"\n+    WHITESPACE@5..6 \" \"\n+    ITEM_LIST@6..9\n+      L_CURLY@6..7 \"{\"\n+      WHITESPACE@7..8 \" \"\n+      R_CURLY@8..9 \"}\"\n+  WHITESPACE@9..10 \"\\n\""}, {"sha": "16b1b43e8773e1bd511b289532a05706f63275a1", "filename": "crates/syntax/test_data/parser/inline/ok/0170_mod_item_curly.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0170_mod_item_curly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0170_mod_item_curly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0170_mod_item_curly.rs?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -0,0 +1 @@\n+mod b { }"}, {"sha": "935fd6e07be8c2c92a77dece323430b907d5e879", "filename": "crates/syntax/test_data/parser/inline/ok/0170_tuple_struct.rast", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0170_tuple_struct.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0170_tuple_struct.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0170_tuple_struct.rast?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -0,0 +1,25 @@\n+SOURCE_FILE@0..25\n+  STRUCT@0..24\n+    STRUCT_KW@0..6 \"struct\"\n+    WHITESPACE@6..7 \" \"\n+    NAME@7..8\n+      IDENT@7..8 \"S\"\n+    TUPLE_FIELD_LIST@8..23\n+      L_PAREN@8..9 \"(\"\n+      TUPLE_FIELD@9..15\n+        PATH_TYPE@9..15\n+          PATH@9..15\n+            PATH_SEGMENT@9..15\n+              NAME_REF@9..15\n+                IDENT@9..15 \"String\"\n+      COMMA@15..16 \",\"\n+      WHITESPACE@16..17 \" \"\n+      TUPLE_FIELD@17..22\n+        PATH_TYPE@17..22\n+          PATH@17..22\n+            PATH_SEGMENT@17..22\n+              NAME_REF@17..22\n+                IDENT@17..22 \"usize\"\n+      R_PAREN@22..23 \")\"\n+    SEMICOLON@23..24 \";\"\n+  WHITESPACE@24..25 \"\\n\""}, {"sha": "b4e05717ed3871cc8fd2fa709caba7a20121e504", "filename": "crates/syntax/test_data/parser/inline/ok/0170_tuple_struct.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0170_tuple_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0170_tuple_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0170_tuple_struct.rs?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -0,0 +1 @@\n+struct S(String, usize);"}, {"sha": "3134482f0de0a5fd3b336692cb24ebd57c323586", "filename": "crates/syntax/test_data/parser/inline/ok/0171_struct_item.rast", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0171_struct_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0171_struct_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0171_struct_item.rast?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -0,0 +1,11 @@\n+SOURCE_FILE@0..12\n+  STRUCT@0..11\n+    STRUCT_KW@0..6 \"struct\"\n+    WHITESPACE@6..7 \" \"\n+    NAME@7..8\n+      IDENT@7..8 \"S\"\n+    WHITESPACE@8..9 \" \"\n+    RECORD_FIELD_LIST@9..11\n+      L_CURLY@9..10 \"{\"\n+      R_CURLY@10..11 \"}\"\n+  WHITESPACE@11..12 \"\\n\""}, {"sha": "5f1a34f49b96cb4a1fddbd7bce40bb3baaeb08c1", "filename": "crates/syntax/test_data/parser/inline/ok/0171_struct_item.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0171_struct_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0171_struct_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0171_struct_item.rs?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -0,0 +1 @@\n+struct S {}"}, {"sha": "ce1135c597d15c6e5c6e66bbac8fba4f55a84b24", "filename": "crates/syntax/test_data/parser/inline/ok/0172_record_field_list.rast", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0172_record_field_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0172_record_field_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0172_record_field_list.rast?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -0,0 +1,35 @@\n+SOURCE_FILE@0..28\n+  STRUCT@0..27\n+    STRUCT_KW@0..6 \"struct\"\n+    WHITESPACE@6..7 \" \"\n+    NAME@7..8\n+      IDENT@7..8 \"S\"\n+    WHITESPACE@8..9 \" \"\n+    RECORD_FIELD_LIST@9..27\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..11 \" \"\n+      RECORD_FIELD@11..17\n+        NAME@11..12\n+          IDENT@11..12 \"a\"\n+        COLON@12..13 \":\"\n+        WHITESPACE@13..14 \" \"\n+        PATH_TYPE@14..17\n+          PATH@14..17\n+            PATH_SEGMENT@14..17\n+              NAME_REF@14..17\n+                IDENT@14..17 \"i32\"\n+      COMMA@17..18 \",\"\n+      WHITESPACE@18..19 \" \"\n+      RECORD_FIELD@19..25\n+        NAME@19..20\n+          IDENT@19..20 \"b\"\n+        COLON@20..21 \":\"\n+        WHITESPACE@21..22 \" \"\n+        PATH_TYPE@22..25\n+          PATH@22..25\n+            PATH_SEGMENT@22..25\n+              NAME_REF@22..25\n+                IDENT@22..25 \"f32\"\n+      WHITESPACE@25..26 \" \"\n+      R_CURLY@26..27 \"}\"\n+  WHITESPACE@27..28 \"\\n\""}, {"sha": "a3bd7787db77c0a78369d6c676c64d4819f08cd4", "filename": "crates/syntax/test_data/parser/inline/ok/0172_record_field_list.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0172_record_field_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0172_record_field_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0172_record_field_list.rs?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -0,0 +1 @@\n+struct S { a: i32, b: f32 }"}, {"sha": "3ec00bf55a0ac850ff29269598cc3adcbf719f66", "filename": "crates/syntax/test_data/parser/inline/ok/0173_macro_def_curly.rast", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0173_macro_def_curly.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0173_macro_def_curly.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0173_macro_def_curly.rast?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -0,0 +1,27 @@\n+SOURCE_FILE@0..29\n+  MACRO_DEF@0..28\n+    MACRO_KW@0..5 \"macro\"\n+    WHITESPACE@5..6 \" \"\n+    NAME@6..7\n+      IDENT@6..7 \"m\"\n+    WHITESPACE@7..8 \" \"\n+    TOKEN_TREE@8..28\n+      L_CURLY@8..9 \"{\"\n+      WHITESPACE@9..10 \" \"\n+      TOKEN_TREE@10..20\n+        L_PAREN@10..11 \"(\"\n+        DOLLAR@11..12 \"$\"\n+        IDENT@12..13 \"i\"\n+        COLON@13..14 \":\"\n+        IDENT@14..19 \"ident\"\n+        R_PAREN@19..20 \")\"\n+      WHITESPACE@20..21 \" \"\n+      EQ@21..22 \"=\"\n+      R_ANGLE@22..23 \">\"\n+      WHITESPACE@23..24 \" \"\n+      TOKEN_TREE@24..26\n+        L_CURLY@24..25 \"{\"\n+        R_CURLY@25..26 \"}\"\n+      WHITESPACE@26..27 \" \"\n+      R_CURLY@27..28 \"}\"\n+  WHITESPACE@28..29 \"\\n\""}, {"sha": "5ed0c777dc94227627cefb7bdc1fcc8df824ec6f", "filename": "crates/syntax/test_data/parser/inline/ok/0173_macro_def_curly.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0173_macro_def_curly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0173_macro_def_curly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0173_macro_def_curly.rs?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -0,0 +1 @@\n+macro m { ($i:ident) => {} }"}, {"sha": "5d5c0d69bc015935d374e825917ee403117bc05c", "filename": "crates/syntax/test_data/parser/inline/ok/0173_union_item.rast", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0173_union_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0173_union_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0173_union_item.rast?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -0,0 +1,35 @@\n+SOURCE_FILE@0..28\n+  STRUCT@0..27\n+    STRUCT_KW@0..6 \"struct\"\n+    WHITESPACE@6..7 \" \"\n+    NAME@7..8\n+      IDENT@7..8 \"U\"\n+    WHITESPACE@8..9 \" \"\n+    RECORD_FIELD_LIST@9..27\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..11 \" \"\n+      RECORD_FIELD@11..17\n+        NAME@11..12\n+          IDENT@11..12 \"i\"\n+        COLON@12..13 \":\"\n+        WHITESPACE@13..14 \" \"\n+        PATH_TYPE@14..17\n+          PATH@14..17\n+            PATH_SEGMENT@14..17\n+              NAME_REF@14..17\n+                IDENT@14..17 \"i32\"\n+      COMMA@17..18 \",\"\n+      WHITESPACE@18..19 \" \"\n+      RECORD_FIELD@19..25\n+        NAME@19..20\n+          IDENT@19..20 \"f\"\n+        COLON@20..21 \":\"\n+        WHITESPACE@21..22 \" \"\n+        PATH_TYPE@22..25\n+          PATH@22..25\n+            PATH_SEGMENT@22..25\n+              NAME_REF@22..25\n+                IDENT@22..25 \"f32\"\n+      WHITESPACE@25..26 \" \"\n+      R_CURLY@26..27 \"}\"\n+  WHITESPACE@27..28 \"\\n\""}, {"sha": "5edf50de3bd5ed58e1b43b4e5e12bbe634603f05", "filename": "crates/syntax/test_data/parser/inline/ok/0173_union_item.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0173_union_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0173_union_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0173_union_item.rs?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -0,0 +1 @@\n+struct U { i: i32, f: f32 }"}, {"sha": "b20235889fcd4ba64ec0f84645cdbf7c597cedf2", "filename": "crates/syntax/test_data/parser/inline/ok/0174_unit_struct.rast", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0174_unit_struct.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0174_unit_struct.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0174_unit_struct.rast?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -0,0 +1,8 @@\n+SOURCE_FILE@0..10\n+  STRUCT@0..9\n+    STRUCT_KW@0..6 \"struct\"\n+    WHITESPACE@6..7 \" \"\n+    NAME@7..8\n+      IDENT@7..8 \"S\"\n+    SEMICOLON@8..9 \";\"\n+  WHITESPACE@9..10 \"\\n\""}, {"sha": "28377c2760ba8dde214ff71b836bb949a554e8be", "filename": "crates/syntax/test_data/parser/inline/ok/0174_unit_struct.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0174_unit_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0174_unit_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0174_unit_struct.rs?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -0,0 +1 @@\n+struct S;"}, {"sha": "712e1534625905cda8e1d0fbae1474be460be89c", "filename": "crates/syntax/test_data/parser/ok/0008_mod_item.rast", "status": "modified", "additions": 72, "deletions": 89, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0008_mod_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0008_mod_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0008_mod_item.rast?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -1,93 +1,76 @@\n-SOURCE_FILE@0..118\n-  MODULE@0..6\n+SOURCE_FILE@0..100\n+  MODULE@0..46\n     MOD_KW@0..3 \"mod\"\n     WHITESPACE@3..4 \" \"\n     NAME@4..5\n-      IDENT@4..5 \"a\"\n-    SEMICOLON@5..6 \";\"\n-  WHITESPACE@6..8 \"\\n\\n\"\n-  MODULE@8..17\n-    MOD_KW@8..11 \"mod\"\n-    WHITESPACE@11..12 \" \"\n-    NAME@12..13\n-      IDENT@12..13 \"b\"\n-    WHITESPACE@13..14 \" \"\n-    ITEM_LIST@14..17\n-      L_CURLY@14..15 \"{\"\n-      WHITESPACE@15..16 \"\\n\"\n-      R_CURLY@16..17 \"}\"\n-  WHITESPACE@17..19 \"\\n\\n\"\n-  MODULE@19..65\n-    MOD_KW@19..22 \"mod\"\n-    WHITESPACE@22..23 \" \"\n-    NAME@23..24\n-      IDENT@23..24 \"c\"\n-    WHITESPACE@24..25 \" \"\n-    ITEM_LIST@25..65\n-      L_CURLY@25..26 \"{\"\n-      WHITESPACE@26..31 \"\\n    \"\n-      FN@31..47\n-        FN_KW@31..33 \"fn\"\n-        WHITESPACE@33..34 \" \"\n-        NAME@34..37\n-          IDENT@34..37 \"foo\"\n-        PARAM_LIST@37..39\n-          L_PAREN@37..38 \"(\"\n-          R_PAREN@38..39 \")\"\n+      IDENT@4..5 \"c\"\n+    WHITESPACE@5..6 \" \"\n+    ITEM_LIST@6..46\n+      L_CURLY@6..7 \"{\"\n+      WHITESPACE@7..12 \"\\n    \"\n+      FN@12..28\n+        FN_KW@12..14 \"fn\"\n+        WHITESPACE@14..15 \" \"\n+        NAME@15..18\n+          IDENT@15..18 \"foo\"\n+        PARAM_LIST@18..20\n+          L_PAREN@18..19 \"(\"\n+          R_PAREN@19..20 \")\"\n+        WHITESPACE@20..21 \" \"\n+        BLOCK_EXPR@21..28\n+          L_CURLY@21..22 \"{\"\n+          WHITESPACE@22..27 \"\\n    \"\n+          R_CURLY@27..28 \"}\"\n+      WHITESPACE@28..33 \"\\n    \"\n+      STRUCT@33..44\n+        STRUCT_KW@33..39 \"struct\"\n         WHITESPACE@39..40 \" \"\n-        BLOCK_EXPR@40..47\n-          L_CURLY@40..41 \"{\"\n-          WHITESPACE@41..46 \"\\n    \"\n-          R_CURLY@46..47 \"}\"\n-      WHITESPACE@47..52 \"\\n    \"\n-      STRUCT@52..63\n-        STRUCT_KW@52..58 \"struct\"\n-        WHITESPACE@58..59 \" \"\n-        NAME@59..60\n-          IDENT@59..60 \"S\"\n-        WHITESPACE@60..61 \" \"\n-        RECORD_FIELD_LIST@61..63\n-          L_CURLY@61..62 \"{\"\n-          R_CURLY@62..63 \"}\"\n-      WHITESPACE@63..64 \"\\n\"\n-      R_CURLY@64..65 \"}\"\n-  WHITESPACE@65..67 \"\\n\\n\"\n-  MODULE@67..118\n-    MOD_KW@67..70 \"mod\"\n-    WHITESPACE@70..71 \" \"\n-    NAME@71..72\n-      IDENT@71..72 \"d\"\n-    WHITESPACE@72..73 \" \"\n-    ITEM_LIST@73..118\n-      L_CURLY@73..74 \"{\"\n-      WHITESPACE@74..79 \"\\n    \"\n-      ATTR@79..87\n-        POUND@79..80 \"#\"\n-        BANG@80..81 \"!\"\n-        L_BRACK@81..82 \"[\"\n-        META@82..86\n-          PATH@82..86\n-            PATH_SEGMENT@82..86\n-              NAME_REF@82..86\n-                IDENT@82..86 \"attr\"\n-        R_BRACK@86..87 \"]\"\n-      WHITESPACE@87..92 \"\\n    \"\n-      MODULE@92..98\n-        MOD_KW@92..95 \"mod\"\n-        WHITESPACE@95..96 \" \"\n-        NAME@96..97\n-          IDENT@96..97 \"e\"\n-        SEMICOLON@97..98 \";\"\n-      WHITESPACE@98..103 \"\\n    \"\n-      MODULE@103..116\n-        MOD_KW@103..106 \"mod\"\n-        WHITESPACE@106..107 \" \"\n-        NAME@107..108\n-          IDENT@107..108 \"f\"\n-        WHITESPACE@108..109 \" \"\n-        ITEM_LIST@109..116\n-          L_CURLY@109..110 \"{\"\n-          WHITESPACE@110..115 \"\\n    \"\n-          R_CURLY@115..116 \"}\"\n-      WHITESPACE@116..117 \"\\n\"\n-      R_CURLY@117..118 \"}\"\n+        NAME@40..41\n+          IDENT@40..41 \"S\"\n+        WHITESPACE@41..42 \" \"\n+        RECORD_FIELD_LIST@42..44\n+          L_CURLY@42..43 \"{\"\n+          R_CURLY@43..44 \"}\"\n+      WHITESPACE@44..45 \"\\n\"\n+      R_CURLY@45..46 \"}\"\n+  WHITESPACE@46..48 \"\\n\\n\"\n+  MODULE@48..99\n+    MOD_KW@48..51 \"mod\"\n+    WHITESPACE@51..52 \" \"\n+    NAME@52..53\n+      IDENT@52..53 \"d\"\n+    WHITESPACE@53..54 \" \"\n+    ITEM_LIST@54..99\n+      L_CURLY@54..55 \"{\"\n+      WHITESPACE@55..60 \"\\n    \"\n+      ATTR@60..68\n+        POUND@60..61 \"#\"\n+        BANG@61..62 \"!\"\n+        L_BRACK@62..63 \"[\"\n+        META@63..67\n+          PATH@63..67\n+            PATH_SEGMENT@63..67\n+              NAME_REF@63..67\n+                IDENT@63..67 \"attr\"\n+        R_BRACK@67..68 \"]\"\n+      WHITESPACE@68..73 \"\\n    \"\n+      MODULE@73..79\n+        MOD_KW@73..76 \"mod\"\n+        WHITESPACE@76..77 \" \"\n+        NAME@77..78\n+          IDENT@77..78 \"e\"\n+        SEMICOLON@78..79 \";\"\n+      WHITESPACE@79..84 \"\\n    \"\n+      MODULE@84..97\n+        MOD_KW@84..87 \"mod\"\n+        WHITESPACE@87..88 \" \"\n+        NAME@88..89\n+          IDENT@88..89 \"f\"\n+        WHITESPACE@89..90 \" \"\n+        ITEM_LIST@90..97\n+          L_CURLY@90..91 \"{\"\n+          WHITESPACE@91..96 \"\\n    \"\n+          R_CURLY@96..97 \"}\"\n+      WHITESPACE@97..98 \"\\n\"\n+      R_CURLY@98..99 \"}\"\n+  WHITESPACE@99..100 \"\\n\""}, {"sha": "4ff0d9795c781701edf44d062abaa68e37761015", "filename": "crates/syntax/test_data/parser/ok/0008_mod_item.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0008_mod_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0008_mod_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0008_mod_item.rs?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -1,8 +1,3 @@\n-mod a;\n-\n-mod b {\n-}\n-\n mod c {\n     fn foo() {\n     }\n@@ -14,4 +9,4 @@ mod d {\n     mod e;\n     mod f {\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "79dc9001a21650c35dd0fd4d28637b775b6dfff7", "filename": "crates/syntax/test_data/parser/ok/0012_visibility.rast", "status": "modified", "additions": 97, "deletions": 77, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0012_visibility.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0012_visibility.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0012_visibility.rast?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -1,4 +1,4 @@\n-SOURCE_FILE@0..98\n+SOURCE_FILE@0..122\n   FN@0..9\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n@@ -28,81 +28,101 @@ SOURCE_FILE@0..98\n       L_CURLY@21..22 \"{\"\n       R_CURLY@22..23 \"}\"\n   WHITESPACE@23..24 \"\\n\"\n-  FN@24..44\n-    VISIBILITY@24..34\n+  MACRO_DEF@24..47\n+    VISIBILITY@24..27\n       PUB_KW@24..27 \"pub\"\n-      L_PAREN@27..28 \"(\"\n-      PATH@28..33\n-        PATH_SEGMENT@28..33\n-          NAME_REF@28..33\n-            CRATE_KW@28..33 \"crate\"\n-      R_PAREN@33..34 \")\"\n-    WHITESPACE@34..35 \" \"\n-    FN_KW@35..37 \"fn\"\n-    WHITESPACE@37..38 \" \"\n-    NAME@38..39\n-      IDENT@38..39 \"c\"\n-    PARAM_LIST@39..41\n-      L_PAREN@39..40 \"(\"\n-      R_PAREN@40..41 \")\"\n-    WHITESPACE@41..42 \" \"\n-    BLOCK_EXPR@42..44\n-      L_CURLY@42..43 \"{\"\n-      R_CURLY@43..44 \"}\"\n-  WHITESPACE@44..45 \"\\n\"\n-  FN@45..65\n-    VISIBILITY@45..55\n-      PUB_KW@45..48 \"pub\"\n-      L_PAREN@48..49 \"(\"\n-      PATH@49..54\n-        PATH_SEGMENT@49..54\n-          NAME_REF@49..54\n-            SUPER_KW@49..54 \"super\"\n-      R_PAREN@54..55 \")\"\n-    WHITESPACE@55..56 \" \"\n-    FN_KW@56..58 \"fn\"\n+    WHITESPACE@27..28 \" \"\n+    MACRO_KW@28..33 \"macro\"\n+    WHITESPACE@33..34 \" \"\n+    NAME@34..35\n+      IDENT@34..35 \"m\"\n+    TOKEN_TREE@35..47\n+      TOKEN_TREE@35..44\n+        L_PAREN@35..36 \"(\"\n+        DOLLAR@36..37 \"$\"\n+        COLON@37..38 \":\"\n+        IDENT@38..43 \"ident\"\n+        R_PAREN@43..44 \")\"\n+      WHITESPACE@44..45 \" \"\n+      TOKEN_TREE@45..47\n+        L_CURLY@45..46 \"{\"\n+        R_CURLY@46..47 \"}\"\n+  WHITESPACE@47..48 \"\\n\"\n+  FN@48..68\n+    VISIBILITY@48..58\n+      PUB_KW@48..51 \"pub\"\n+      L_PAREN@51..52 \"(\"\n+      PATH@52..57\n+        PATH_SEGMENT@52..57\n+          NAME_REF@52..57\n+            CRATE_KW@52..57 \"crate\"\n+      R_PAREN@57..58 \")\"\n     WHITESPACE@58..59 \" \"\n-    NAME@59..60\n-      IDENT@59..60 \"d\"\n-    PARAM_LIST@60..62\n-      L_PAREN@60..61 \"(\"\n-      R_PAREN@61..62 \")\"\n-    WHITESPACE@62..63 \" \"\n-    BLOCK_EXPR@63..65\n-      L_CURLY@63..64 \"{\"\n-      R_CURLY@64..65 \"}\"\n-  WHITESPACE@65..66 \"\\n\"\n-  FN@66..97\n-    VISIBILITY@66..87\n-      PUB_KW@66..69 \"pub\"\n-      L_PAREN@69..70 \"(\"\n-      IN_KW@70..72 \"in\"\n-      WHITESPACE@72..73 \" \"\n-      PATH@73..86\n-        PATH@73..81\n-          PATH@73..76\n-            PATH_SEGMENT@73..76\n-              NAME_REF@73..76\n-                IDENT@73..76 \"foo\"\n-          COLON2@76..78 \"::\"\n-          PATH_SEGMENT@78..81\n-            NAME_REF@78..81\n-              IDENT@78..81 \"bar\"\n-        COLON2@81..83 \"::\"\n-        PATH_SEGMENT@83..86\n-          NAME_REF@83..86\n-            IDENT@83..86 \"baz\"\n-      R_PAREN@86..87 \")\"\n-    WHITESPACE@87..88 \" \"\n-    FN_KW@88..90 \"fn\"\n-    WHITESPACE@90..91 \" \"\n-    NAME@91..92\n-      IDENT@91..92 \"e\"\n-    PARAM_LIST@92..94\n-      L_PAREN@92..93 \"(\"\n-      R_PAREN@93..94 \")\"\n-    WHITESPACE@94..95 \" \"\n-    BLOCK_EXPR@95..97\n-      L_CURLY@95..96 \"{\"\n-      R_CURLY@96..97 \"}\"\n-  WHITESPACE@97..98 \"\\n\"\n+    FN_KW@59..61 \"fn\"\n+    WHITESPACE@61..62 \" \"\n+    NAME@62..63\n+      IDENT@62..63 \"c\"\n+    PARAM_LIST@63..65\n+      L_PAREN@63..64 \"(\"\n+      R_PAREN@64..65 \")\"\n+    WHITESPACE@65..66 \" \"\n+    BLOCK_EXPR@66..68\n+      L_CURLY@66..67 \"{\"\n+      R_CURLY@67..68 \"}\"\n+  WHITESPACE@68..69 \"\\n\"\n+  FN@69..89\n+    VISIBILITY@69..79\n+      PUB_KW@69..72 \"pub\"\n+      L_PAREN@72..73 \"(\"\n+      PATH@73..78\n+        PATH_SEGMENT@73..78\n+          NAME_REF@73..78\n+            SUPER_KW@73..78 \"super\"\n+      R_PAREN@78..79 \")\"\n+    WHITESPACE@79..80 \" \"\n+    FN_KW@80..82 \"fn\"\n+    WHITESPACE@82..83 \" \"\n+    NAME@83..84\n+      IDENT@83..84 \"d\"\n+    PARAM_LIST@84..86\n+      L_PAREN@84..85 \"(\"\n+      R_PAREN@85..86 \")\"\n+    WHITESPACE@86..87 \" \"\n+    BLOCK_EXPR@87..89\n+      L_CURLY@87..88 \"{\"\n+      R_CURLY@88..89 \"}\"\n+  WHITESPACE@89..90 \"\\n\"\n+  FN@90..121\n+    VISIBILITY@90..111\n+      PUB_KW@90..93 \"pub\"\n+      L_PAREN@93..94 \"(\"\n+      IN_KW@94..96 \"in\"\n+      WHITESPACE@96..97 \" \"\n+      PATH@97..110\n+        PATH@97..105\n+          PATH@97..100\n+            PATH_SEGMENT@97..100\n+              NAME_REF@97..100\n+                IDENT@97..100 \"foo\"\n+          COLON2@100..102 \"::\"\n+          PATH_SEGMENT@102..105\n+            NAME_REF@102..105\n+              IDENT@102..105 \"bar\"\n+        COLON2@105..107 \"::\"\n+        PATH_SEGMENT@107..110\n+          NAME_REF@107..110\n+            IDENT@107..110 \"baz\"\n+      R_PAREN@110..111 \")\"\n+    WHITESPACE@111..112 \" \"\n+    FN_KW@112..114 \"fn\"\n+    WHITESPACE@114..115 \" \"\n+    NAME@115..116\n+      IDENT@115..116 \"e\"\n+    PARAM_LIST@116..118\n+      L_PAREN@116..117 \"(\"\n+      R_PAREN@117..118 \")\"\n+    WHITESPACE@118..119 \" \"\n+    BLOCK_EXPR@119..121\n+      L_CURLY@119..120 \"{\"\n+      R_CURLY@120..121 \"}\"\n+  WHITESPACE@121..122 \"\\n\""}, {"sha": "129d486fae2aaf845e9dd5110e158ae01d07ab5f", "filename": "crates/syntax/test_data/parser/ok/0012_visibility.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0012_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4badd2faf8092870a0ecc920856b169eefc5f15c/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0012_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0012_visibility.rs?ref=4badd2faf8092870a0ecc920856b169eefc5f15c", "patch": "@@ -1,5 +1,6 @@\n fn a() {}\n pub fn b() {}\n+pub macro m($:ident) {}\n pub(crate) fn c() {}\n pub(super) fn d() {}\n pub(in foo::bar::baz) fn e() {}"}]}