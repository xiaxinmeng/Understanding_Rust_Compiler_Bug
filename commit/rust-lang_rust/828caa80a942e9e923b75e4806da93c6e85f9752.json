{"sha": "828caa80a942e9e923b75e4806da93c6e85f9752", "node_id": "C_kwDOAAsO6NoAKDgyOGNhYTgwYTk0MmU5ZTkyM2I3NWU0ODA2ZGE5M2M2ZTg1Zjk3NTI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-17T13:41:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-17T13:41:53Z"}, "message": "Rollup merge of #110930 - b-naber:normalize-elaborate-drops, r=cjgillot\n\nDon't expect normalization to succeed in elaborate_drops\n\nFixes https://github.com/rust-lang/rust/issues/110682\n\nThis was exposed through the changes in https://github.com/rust-lang/rust/pull/109247, which causes more things to be inlined. Inlining can happen before monomorphization, so we can't expect normalization to succeed. In the elaborate_drops analysis we currently have [this call](https://github.com/rust-lang/rust/blob/033aa092ab23ba14cdad27073c5e37ba0eddb428/compiler/rustc_mir_dataflow/src/elaborate_drops.rs#L278) to `normalize_erasing_regions`, which ICEs when normalization fails. The types are used to infer [whether the type needs a drop](https://github.com/rust-lang/rust/blob/033aa092ab23ba14cdad27073c5e37ba0eddb428/compiler/rustc_mir_dataflow/src/elaborate_drops.rs#L374), where `needs_drop` itself [uses `try_normalize_erasing_regions`](https://github.com/rust-lang/rust/blob/033aa092ab23ba14cdad27073c5e37ba0eddb428/compiler/rustc_middle/src/ty/util.rs#L1121).\n\n~[`instance_mir`](https://doc.rust-lang.org/stable/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.instance_mir) isn't explicit about whether it expects the instances corresponding to the `InstanceDef`s to be monomorphized (though I think in all other contexts the function is used post-monomorphization), so the use of `instance_mir` in inlining doesn't necessarily seem wrong to me.~", "tree": {"sha": "a2ca1d67699dd7764109d37be32acec05f3562d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2ca1d67699dd7764109d37be32acec05f3562d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/828caa80a942e9e923b75e4806da93c6e85f9752", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkZNmhCRBK7hj4Ov3rIwAA1skIADQUKBs9VNgRvul6d5HlkfrV\nZApZziycw4wJPukk8z7re6/16YIQ6KcSaL9ZY9g/24ODdO2elkyo5aS2lvvu8NoF\n21Xj0GVHQQPKrM6kJaNx6itN+itnuCH3fGo+PaunXKwrqlQVhR0jUyMntl0zcNrL\nimn8fb3hNI91ArnwFJvkPC1uRcPVLwnHhffjcal7YvBvmoAghJkk23FRvN1Buwt7\nQ5v7HbNirylka4pU7zq82Qxd++iP+qyglBYWqspi0zMgpmEAQlZjwOhC4deuC1wO\nM/WzzSZ8y5urgC4SL3EazUDEyCPrfxpfrPre3yNObH7v7IgRB4lzBPvtx50LzlE=\n=BfkL\n-----END PGP SIGNATURE-----\n", "payload": "tree a2ca1d67699dd7764109d37be32acec05f3562d1\nparent c2ccc855e74aec03e434405eca3c247ee2432e53\nparent e7a2f52ba163a47e751b6e6d666b52c2acdd0949\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1684330913 +0530\ncommitter GitHub <noreply@github.com> 1684330913 +0530\n\nRollup merge of #110930 - b-naber:normalize-elaborate-drops, r=cjgillot\n\nDon't expect normalization to succeed in elaborate_drops\n\nFixes https://github.com/rust-lang/rust/issues/110682\n\nThis was exposed through the changes in https://github.com/rust-lang/rust/pull/109247, which causes more things to be inlined. Inlining can happen before monomorphization, so we can't expect normalization to succeed. In the elaborate_drops analysis we currently have [this call](https://github.com/rust-lang/rust/blob/033aa092ab23ba14cdad27073c5e37ba0eddb428/compiler/rustc_mir_dataflow/src/elaborate_drops.rs#L278) to `normalize_erasing_regions`, which ICEs when normalization fails. The types are used to infer [whether the type needs a drop](https://github.com/rust-lang/rust/blob/033aa092ab23ba14cdad27073c5e37ba0eddb428/compiler/rustc_mir_dataflow/src/elaborate_drops.rs#L374), where `needs_drop` itself [uses `try_normalize_erasing_regions`](https://github.com/rust-lang/rust/blob/033aa092ab23ba14cdad27073c5e37ba0eddb428/compiler/rustc_middle/src/ty/util.rs#L1121).\n\n~[`instance_mir`](https://doc.rust-lang.org/stable/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.instance_mir) isn't explicit about whether it expects the instances corresponding to the `InstanceDef`s to be monomorphized (though I think in all other contexts the function is used post-monomorphization), so the use of `instance_mir` in inlining doesn't necessarily seem wrong to me.~\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/828caa80a942e9e923b75e4806da93c6e85f9752", "html_url": "https://github.com/rust-lang/rust/commit/828caa80a942e9e923b75e4806da93c6e85f9752", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/828caa80a942e9e923b75e4806da93c6e85f9752/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2ccc855e74aec03e434405eca3c247ee2432e53", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2ccc855e74aec03e434405eca3c247ee2432e53", "html_url": "https://github.com/rust-lang/rust/commit/c2ccc855e74aec03e434405eca3c247ee2432e53"}, {"sha": "e7a2f52ba163a47e751b6e6d666b52c2acdd0949", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7a2f52ba163a47e751b6e6d666b52c2acdd0949", "html_url": "https://github.com/rust-lang/rust/commit/e7a2f52ba163a47e751b6e6d666b52c2acdd0949"}], "stats": {"total": 120, "additions": 119, "deletions": 1}, "files": [{"sha": "18895072c3b96460639477235fa4e402c56755e1", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/828caa80a942e9e923b75e4806da93c6e85f9752/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828caa80a942e9e923b75e4806da93c6e85f9752/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=828caa80a942e9e923b75e4806da93c6e85f9752", "patch": "@@ -276,6 +276,7 @@ where\n                 assert_eq!(self.elaborator.param_env().reveal(), Reveal::All);\n                 let field_ty =\n                     tcx.normalize_erasing_regions(self.elaborator.param_env(), f.ty(tcx, substs));\n+\n                 (tcx.mk_place_field(base_place, field, field_ty), subpath)\n             })\n             .collect()"}, {"sha": "12f955d46bd31438e1b05fab7e295d6cf3173c0c", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/828caa80a942e9e923b75e4806da93c6e85f9752/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828caa80a942e9e923b75e4806da93c6e85f9752/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=828caa80a942e9e923b75e4806da93c6e85f9752", "patch": "@@ -7,6 +7,7 @@ use rustc_index::Idx;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n+use rustc_middle::ty::TypeVisitableExt;\n use rustc_middle::ty::{self, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_session::config::OptLevel;\n use rustc_span::{hygiene::ExpnKind, ExpnData, LocalExpnId, Span};\n@@ -168,7 +169,7 @@ impl<'tcx> Inliner<'tcx> {\n         let callee_attrs = self.tcx.codegen_fn_attrs(callsite.callee.def_id());\n         self.check_codegen_attributes(callsite, callee_attrs)?;\n         self.check_mir_is_available(caller_body, &callsite.callee)?;\n-        let callee_body = self.tcx.instance_mir(callsite.callee.def);\n+        let callee_body = try_instance_mir(self.tcx, callsite.callee.def)?;\n         self.check_mir_body(callsite, callee_body, callee_attrs)?;\n \n         if !self.tcx.consider_optimizing(|| {\n@@ -1128,3 +1129,27 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n         }\n     }\n }\n+\n+#[instrument(skip(tcx), level = \"debug\")]\n+fn try_instance_mir<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    instance: InstanceDef<'tcx>,\n+) -> Result<&'tcx Body<'tcx>, &'static str> {\n+    match instance {\n+        ty::InstanceDef::DropGlue(_, Some(ty)) => match ty.kind() {\n+            ty::Adt(def, substs) => {\n+                let fields = def.all_fields();\n+                for field in fields {\n+                    let field_ty = field.ty(tcx, substs);\n+                    if field_ty.has_param() && field_ty.has_projections() {\n+                        return Err(\"cannot build drop shim for polymorphic type\");\n+                    }\n+                }\n+\n+                Ok(tcx.instance_mir(instance))\n+            }\n+            _ => Ok(tcx.instance_mir(instance)),\n+        },\n+        _ => Ok(tcx.instance_mir(instance)),\n+    }\n+}"}, {"sha": "35f9c7e8d9be668edf42b69bce77e14e544c20ec", "filename": "tests/ui/drop/issue-110682.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/828caa80a942e9e923b75e4806da93c6e85f9752/tests%2Fui%2Fdrop%2Fissue-110682.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828caa80a942e9e923b75e4806da93c6e85f9752/tests%2Fui%2Fdrop%2Fissue-110682.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop%2Fissue-110682.rs?ref=828caa80a942e9e923b75e4806da93c6e85f9752", "patch": "@@ -0,0 +1,92 @@\n+// build-pass\n+// compile-flags: -Zmir-opt-level=3\n+\n+use std::fmt::Debug;\n+use std::mem::ManuallyDrop;\n+use std::ptr;\n+\n+pub trait BitRegister {}\n+\n+macro_rules! register {\n+    ($($t:ty),+ $(,)?) => { $(\n+        impl BitRegister for $t {\n+        }\n+    )* };\n+}\n+\n+register!(u8, u16, u32);\n+\n+pub trait BitStore: Sized + Debug {\n+    /// The register type that the implementor describes.\n+    type Mem: BitRegister + Into<Self>;\n+}\n+\n+macro_rules! store {\n+    ($($t:ty),+ $(,)?) => { $(\n+        impl BitStore for $t {\n+            type Mem = Self;\n+        }\n+    )+ };\n+}\n+\n+store!(u8, u16, u32,);\n+\n+#[repr(C)]\n+pub struct BitVec<T>\n+where\n+    T: BitStore,\n+{\n+    /// Region pointer describing the live portion of the owned buffer.\n+    pointer: ptr::NonNull<T>,\n+    /// Allocated capacity, in elements `T`, of the owned buffer.\n+    capacity: usize,\n+}\n+\n+impl<T> BitVec<T>\n+where\n+    T: BitStore,\n+{\n+    pub fn new() -> Self {\n+        let pointer = ptr::NonNull::<T>::new(ptr::null_mut()).unwrap();\n+\n+        BitVec { pointer, capacity: 10 }\n+    }\n+\n+    pub fn clear(&mut self) {\n+        unsafe {\n+            self.set_len(0);\n+        }\n+    }\n+\n+    #[inline]\n+    pub unsafe fn set_len(&mut self, new_len: usize) {}\n+\n+    fn with_vec<F, R>(&mut self, func: F) -> R\n+    where\n+        F: FnOnce(&mut ManuallyDrop<Vec<T::Mem>>) -> R,\n+    {\n+        let cap = self.capacity;\n+        let elts = 10;\n+        let mut vec = ManuallyDrop::new(unsafe { Vec::from_raw_parts(ptr::null_mut(), elts, cap) });\n+        let out = func(&mut vec);\n+\n+        out\n+    }\n+}\n+\n+impl<T> Drop for BitVec<T>\n+where\n+    T: BitStore,\n+{\n+    #[inline]\n+    fn drop(&mut self) {\n+        //  The buffer elements do not have destructors.\n+        self.clear();\n+        //  Run the `Vec` destructor to de\u00e4llocate the buffer.\n+        self.with_vec(|vec| unsafe { ManuallyDrop::drop(vec) });\n+    }\n+}\n+\n+fn main() {\n+    let bitvec = BitVec::<u32>::new();\n+}"}]}