{"sha": "4b3737510b97faa7d2fad3c98aa16eed46334703", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMzczNzUxMGI5N2ZhYTdkMmZhZDNjOThhYTE2ZWVkNDYzMzQ3MDM=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "github@adolfo.ochagavia.xyz", "date": "2018-10-12T17:20:58Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "github@adolfo.ochagavia.xyz", "date": "2018-10-12T17:20:58Z"}, "message": "Cleanup fold code and split logic to fold single elements", "tree": {"sha": "4d052d23ac53bf7444bb2f6235dc7ad4358152b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d052d23ac53bf7444bb2f6235dc7ad4358152b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b3737510b97faa7d2fad3c98aa16eed46334703", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b3737510b97faa7d2fad3c98aa16eed46334703", "html_url": "https://github.com/rust-lang/rust/commit/4b3737510b97faa7d2fad3c98aa16eed46334703", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b3737510b97faa7d2fad3c98aa16eed46334703/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee0a6bf0535a5a6c7e536d2cffa11959c3ee2ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee0a6bf0535a5a6c7e536d2cffa11959c3ee2ae3", "html_url": "https://github.com/rust-lang/rust/commit/ee0a6bf0535a5a6c7e536d2cffa11959c3ee2ae3"}], "stats": {"total": 152, "additions": 112, "deletions": 40}, "files": [{"sha": "d45210ec7913baa14114fa5502cc7c7f9dbc8ff6", "filename": "crates/ra_editor/src/folding_ranges.rs", "status": "modified", "additions": 69, "deletions": 38, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/4b3737510b97faa7d2fad3c98aa16eed46334703/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b3737510b97faa7d2fad3c98aa16eed46334703/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs?ref=4b3737510b97faa7d2fad3c98aa16eed46334703", "patch": "@@ -22,65 +22,96 @@ pub struct Fold {\n \n pub fn folding_ranges(file: &File) -> Vec<Fold> {\n     let mut res = vec![];\n-    let mut visited = FxHashSet::default();\n+    let mut group_members = FxHashSet::default();\n \n     for node in file.syntax().descendants() {\n-        if visited.contains(&node) {\n-            continue;\n+        // Fold items that span multiple lines\n+        if let Some(kind) = fold_kind(node.kind()) {\n+            if has_newline(node) {\n+                res.push(Fold { range: node.range(), kind });\n+            }\n         }\n \n-        if let Some(comment) = ast::Comment::cast(node) {\n-            // Multiline comments (`/* ... */`) can only be folded if they span multiple lines\n-            let range = if let ast::CommentFlavor::Multiline = comment.flavor() {\n-                if comment.text().contains('\\n') {\n-                    Some(comment.syntax().range())\n-                } else {\n-                    None\n-                }\n-            } else {\n-                contiguous_range_for(SyntaxKind::COMMENT, node, &mut visited)\n-            };\n-\n-            range.map(|range| res.push(Fold { range, kind: FoldKind::Comment }));\n+        // Also fold item *groups* that span multiple lines\n+\n+        // Note: we need to skip elements of the group that we have already visited,\n+        // otherwise there will be folds for the whole group and for its sub groups\n+        if group_members.contains(&node) {\n+            continue;\n         }\n \n-        if let SyntaxKind::USE_ITEM = node.kind() {\n-            contiguous_range_for(SyntaxKind::USE_ITEM, node, &mut visited)\n-                .map(|range| res.push(Fold { range, kind: FoldKind::Imports}));\n-        };\n+        if let Some(kind) = fold_kind(node.kind()) {\n+            contiguous_range_for_group(node.kind(), node, &mut group_members)\n+                .map(|range| res.push(Fold { range, kind }));\n+        }\n     }\n \n     res\n }\n \n-fn contiguous_range_for<'a>(\n-    kind: SyntaxKind,\n-    node: SyntaxNodeRef<'a>,\n+fn fold_kind(kind: SyntaxKind) -> Option<FoldKind> {\n+    match kind {\n+        SyntaxKind::COMMENT => Some(FoldKind::Comment),\n+        SyntaxKind::USE_ITEM => Some(FoldKind::Imports),\n+        _ => None\n+    }\n+}\n+\n+fn has_newline(\n+    node: SyntaxNodeRef,\n+) -> bool {\n+    for descendant in node.descendants() {\n+        if let Some(ws) = ast::Whitespace::cast(descendant) {\n+            if ws.has_newlines() {\n+                return true;\n+            }\n+        } else if let Some(comment) = ast::Comment::cast(descendant) {\n+            if comment.has_newlines() {\n+                return true;\n+            }\n+        }\n+    }\n+\n+    false\n+}\n+\n+fn contiguous_range_for_group<'a>(\n+    group_kind: SyntaxKind,\n+    first: SyntaxNodeRef<'a>,\n     visited: &mut FxHashSet<SyntaxNodeRef<'a>>,\n ) -> Option<TextRange> {\n-    visited.insert(node);\n+    visited.insert(first);\n+\n+    let mut last = first;\n \n-    let left = node;\n-    let mut right = node;\n-    for node in node.siblings(Direction::Next) {\n+    for node in first.siblings(Direction::Next) {\n         visited.insert(node);\n-        match node.kind() {\n-            SyntaxKind::WHITESPACE if !node.leaf_text().unwrap().as_str().contains(\"\\n\\n\") => (),\n-            k => {\n-                if k == kind {\n-                    right = node\n-                } else {\n-                    break;\n-                }\n+        if let Some(ws) = ast::Whitespace::cast(node) {\n+            // There is a blank line, which means the group ends here\n+            if ws.count_newlines_lazy().take(2).count() == 2 {\n+                break;\n             }\n+\n+            // Ignore whitespace without blank lines\n+            continue;\n+        }\n+\n+        // The group ends when an element of a different kind is reached\n+        if node.kind() != group_kind {\n+            break;\n         }\n+\n+        // Keep track of the last node in the group\n+        last = node;\n     }\n-    if left != right {\n+\n+    if first != last {\n         Some(TextRange::from_to(\n-            left.range().start(),\n-            right.range().end(),\n+            first.range().start(),\n+            last.range().end(),\n         ))\n     } else {\n+        // The group consists of only one element, therefore it cannot be folded\n         None\n     }\n }"}, {"sha": "85aa5e0dd9a470936a5581ad8b286d2c18100189", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4b3737510b97faa7d2fad3c98aa16eed46334703/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b3737510b97faa7d2fad3c98aa16eed46334703/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=4b3737510b97faa7d2fad3c98aa16eed46334703", "patch": "@@ -2193,3 +2193,21 @@ impl<'a> WhileExpr<'a> {\n     }\n }\n \n+// Whitespace\n+#[derive(Debug, Clone, Copy)]\n+pub struct Whitespace<'a> {\n+    syntax: SyntaxNodeRef<'a>,\n+}\n+\n+impl<'a> AstNode<'a> for Whitespace<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            WHITESPACE => Some(Whitespace { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<'a> Whitespace<'a> {}\n+"}, {"sha": "00c852274d2675635f256d4952963e0fc04d84e6", "filename": "crates/ra_syntax/src/ast/mod.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4b3737510b97faa7d2fad3c98aa16eed46334703/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b3737510b97faa7d2fad3c98aa16eed46334703/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs?ref=4b3737510b97faa7d2fad3c98aa16eed46334703", "patch": "@@ -100,8 +100,8 @@ impl<'a> Lifetime<'a> {\n }\n \n impl<'a> Comment<'a> {\n-    pub fn text(&self) -> SmolStr {\n-        self.syntax().leaf_text().unwrap().clone()\n+    pub fn text(&self) -> &SmolStr {\n+        self.syntax().leaf_text().unwrap()\n     }\n \n     pub fn flavor(&self) -> CommentFlavor {\n@@ -120,6 +120,14 @@ impl<'a> Comment<'a> {\n     pub fn prefix(&self) -> &'static str {\n         self.flavor().prefix()\n     }\n+\n+    pub fn count_newlines_lazy(&self) -> impl Iterator<Item = &()> {\n+        self.text().chars().filter(|&c| c == '\\n').map(|_| &())\n+    }\n+\n+    pub fn has_newlines(&self) -> bool {\n+        self.count_newlines_lazy().count() > 0\n+    }\n }\n \n #[derive(Debug)]\n@@ -142,6 +150,20 @@ impl CommentFlavor {\n     }\n }\n \n+impl<'a> Whitespace<'a> {\n+    pub fn text(&self) -> &SmolStr {\n+        &self.syntax().leaf_text().unwrap()\n+    }\n+\n+    pub fn count_newlines_lazy(&self) -> impl Iterator<Item = &()> {\n+        self.text().chars().filter(|&c| c == '\\n').map(|_| &())\n+    }\n+\n+    pub fn has_newlines(&self) -> bool {\n+        self.count_newlines_lazy().count() > 0\n+    }\n+}\n+\n impl<'a> Name<'a> {\n     pub fn text(&self) -> SmolStr {\n         let ident = self.syntax().first_child()"}, {"sha": "d538739de00933f1747ab791c599a7059dff6c93", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b3737510b97faa7d2fad3c98aa16eed46334703/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/4b3737510b97faa7d2fad3c98aa16eed46334703/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=4b3737510b97faa7d2fad3c98aa16eed46334703", "patch": "@@ -538,5 +538,6 @@ Grammar(\n             options: [ \"NameRef\" ]\n         ),\n         \"Comment\": (),\n+        \"Whitespace\": (),\n     },\n )"}]}