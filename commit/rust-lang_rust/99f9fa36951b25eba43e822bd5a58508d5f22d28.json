{"sha": "99f9fa36951b25eba43e822bd5a58508d5f22d28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZjlmYTM2OTUxYjI1ZWJhNDNlODIyYmQ1YTU4NTA4ZDVmMjJkMjg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-01T03:49:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-01T03:49:23Z"}, "message": "Rollup merge of #66679 - mark-i-m:fix-anon-lifetime-errors, r=matthewjasper\n\nImprove lifetime errors with implicit trait object lifetimes\n\nr? @matthewjasper\n\ncc @estebank\n\nI still think the ideal solution would be to construct a `BrAnon`, but that seems like a more invasive change, and can be done later. This at least gets rid of the hack in `OutliveSuggestion` and is slightly more principled.", "tree": {"sha": "f4ac69a2a7ed3f57be4cf857bc2548ce57a73acc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4ac69a2a7ed3f57be4cf857bc2548ce57a73acc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99f9fa36951b25eba43e822bd5a58508d5f22d28", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd4zhDCRBK7hj4Ov3rIwAAdHIIAJm6cQ9Awxe/dd+iBlKUSuor\n9wIBi5E9/0ODzy2v15ZK6jW8EBNOcaHXPTGjYblFEY5p5VmycBcHIjXauXSeTa3W\nlOXRkgLDdSMvWbZRhexzIX+duGh2IJAg5fu9vs+ea3hh0YB12OVpD0LrkZO52M6S\nUPgK/BJvco4zxINzQuFfajLTOT3uj81A06OToCNedp0PPxeT/Ff8RsmOjY/Ughaq\nNHrEp22xOAZwMFKql2MBNcJ5bPMF4rE4GRF7p92/RHegNIOskTrPJJHl8Js0WCbP\nbKfow9aFM6TsN+65Dh8Jy9Z+nKio47DOT05EC4x2VP9BDYXZ7gCV/pi9sXIwjXw=\n=sB3K\n-----END PGP SIGNATURE-----\n", "payload": "tree f4ac69a2a7ed3f57be4cf857bc2548ce57a73acc\nparent cb43d82fd65774a6e7bca5c3cd78381d3496b357\nparent 2a86b6cb33536efe5d4d10764b04542205abe581\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1575172163 +0100\ncommitter GitHub <noreply@github.com> 1575172163 +0100\n\nRollup merge of #66679 - mark-i-m:fix-anon-lifetime-errors, r=matthewjasper\n\nImprove lifetime errors with implicit trait object lifetimes\n\nr? @matthewjasper\n\ncc @estebank\n\nI still think the ideal solution would be to construct a `BrAnon`, but that seems like a more invasive change, and can be done later. This at least gets rid of the hack in `OutliveSuggestion` and is slightly more principled.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99f9fa36951b25eba43e822bd5a58508d5f22d28", "html_url": "https://github.com/rust-lang/rust/commit/99f9fa36951b25eba43e822bd5a58508d5f22d28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99f9fa36951b25eba43e822bd5a58508d5f22d28/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb43d82fd65774a6e7bca5c3cd78381d3496b357", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb43d82fd65774a6e7bca5c3cd78381d3496b357", "html_url": "https://github.com/rust-lang/rust/commit/cb43d82fd65774a6e7bca5c3cd78381d3496b357"}, {"sha": "2a86b6cb33536efe5d4d10764b04542205abe581", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a86b6cb33536efe5d4d10764b04542205abe581", "html_url": "https://github.com/rust-lang/rust/commit/2a86b6cb33536efe5d4d10764b04542205abe581"}], "stats": {"total": 285, "additions": 120, "deletions": 165}, "files": [{"sha": "6cb0d1e9946b597ce41724b53c6ca9d3f5fe96b6", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f9fa36951b25eba43e822bd5a58508d5f22d28/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f9fa36951b25eba43e822bd5a58508d5f22d28/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=99f9fa36951b25eba43e822bd5a58508d5f22d28", "patch": "@@ -69,7 +69,7 @@ pub enum BoundRegion {\n impl BoundRegion {\n     pub fn is_named(&self) -> bool {\n         match *self {\n-            BoundRegion::BrNamed(..) => true,\n+            BoundRegion::BrNamed(_, name) => name != kw::UnderscoreLifetime,\n             _ => false,\n         }\n     }"}, {"sha": "938059c2a923b84199ad5dd87ebc0ba5876a5f5d", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/outlives_suggestion.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/99f9fa36951b25eba43e822bd5a58508d5f22d28/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f9fa36951b25eba43e822bd5a58508d5f22d28/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Foutlives_suggestion.rs?ref=99f9fa36951b25eba43e822bd5a58508d5f22d28", "patch": "@@ -78,17 +78,7 @@ impl OutlivesSuggestionBuilder<'a> {\n         match name.source {\n             RegionNameSource::NamedEarlyBoundRegion(..)\n             | RegionNameSource::NamedFreeRegion(..)\n-            | RegionNameSource::Static => {\n-                // FIXME: This is a bit hacky. We should ideally have a semantic way for checking\n-                // if the name is `'_`...\n-                if name.name().with(|name| name != \"'_\") {\n-                    debug!(\"Region {:?} is suggestable\", name);\n-                    true\n-                } else {\n-                    debug!(\"Region {:?} is NOT suggestable\", name);\n-                    false\n-                }\n-            }\n+            | RegionNameSource::Static => true,\n \n             // Don't give suggestions for upvars, closure return types, or other unnamable\n             // regions.\n@@ -98,7 +88,8 @@ impl OutlivesSuggestionBuilder<'a> {\n             | RegionNameSource::MatchedAdtAndSegment(..)\n             | RegionNameSource::AnonRegionFromUpvar(..)\n             | RegionNameSource::AnonRegionFromOutput(..)\n-            | RegionNameSource::AnonRegionFromYieldTy(..) => {\n+            | RegionNameSource::AnonRegionFromYieldTy(..)\n+            | RegionNameSource::AnonRegionFromAsyncFn(..) => {\n                 debug!(\"Region {:?} is NOT suggestable\", name);\n                 false\n             }"}, {"sha": "0f5d1c5edc49858bd970b37bd7d508ad1bf3316e", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 34, "deletions": 49, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/99f9fa36951b25eba43e822bd5a58508d5f22d28/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f9fa36951b25eba43e822bd5a58508d5f22d28/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=99f9fa36951b25eba43e822bd5a58508d5f22d28", "patch": "@@ -13,13 +13,13 @@ use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n use rustc::mir::{Local, Body};\n use rustc::ty::subst::{SubstsRef, GenericArgKind};\n-use rustc::ty::{self, RegionKind, RegionVid, Ty, TyCtxt};\n+use rustc::ty::{self, RegionVid, Ty, TyCtxt};\n use rustc::ty::print::RegionHighlightMode;\n use rustc_index::vec::IndexVec;\n use rustc_errors::DiagnosticBuilder;\n use syntax::symbol::kw;\n use rustc_data_structures::fx::FxHashMap;\n-use syntax_pos::{Span, symbol::Symbol};\n+use syntax_pos::{Span, symbol::Symbol, DUMMY_SP};\n \n /// A name for a particular region used in emitting diagnostics. This name could be a generated\n /// name like `'1`, a name used by the user like `'a`, or a name like `'static`.\n@@ -55,7 +55,10 @@ crate enum RegionNameSource {\n     AnonRegionFromUpvar(Span, String),\n     /// The region corresponding to the return type of a closure.\n     AnonRegionFromOutput(Span, String, String),\n+    /// The region from a type yielded by a generator.\n     AnonRegionFromYieldTy(Span, String),\n+    /// An anonymous region from an async fn.\n+    AnonRegionFromAsyncFn(Span),\n }\n \n /// Records region names that have been assigned before so that we can use the same ones in later\n@@ -113,14 +116,11 @@ impl RegionName {\n             RegionNameSource::MatchedAdtAndSegment(..) |\n             RegionNameSource::AnonRegionFromUpvar(..) |\n             RegionNameSource::AnonRegionFromOutput(..) |\n-            RegionNameSource::AnonRegionFromYieldTy(..) => false,\n+            RegionNameSource::AnonRegionFromYieldTy(..) |\n+            RegionNameSource::AnonRegionFromAsyncFn(..) => false,\n         }\n     }\n \n-    crate fn name(&self) -> Symbol {\n-        self.name\n-    }\n-\n     crate fn highlight_region_name(&self, diag: &mut DiagnosticBuilder<'_>) {\n         match &self.source {\n             RegionNameSource::NamedFreeRegion(span)\n@@ -137,7 +137,8 @@ impl RegionName {\n             RegionNameSource::CannotMatchHirTy(span, type_name) => {\n                 diag.span_label(*span, format!(\"has type `{}`\", type_name));\n             }\n-            RegionNameSource::MatchedHirTy(span) => {\n+            RegionNameSource::MatchedHirTy(span) |\n+            RegionNameSource::AnonRegionFromAsyncFn(span) => {\n                 diag.span_label(\n                     *span,\n                     format!(\"let's call the lifetime of this reference `{}`\", self),\n@@ -270,7 +271,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         match error_region {\n             ty::ReEarlyBound(ebr) => {\n                 if ebr.has_name() {\n-                    let span = self.get_named_span(tcx, error_region, ebr.name);\n+                    let span = tcx.hir().span_if_local(ebr.def_id).unwrap_or(DUMMY_SP);\n                     Some(RegionName {\n                         name: ebr.name,\n                         source: RegionNameSource::NamedEarlyBoundRegion(span),\n@@ -286,12 +287,30 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             }),\n \n             ty::ReFree(free_region) => match free_region.bound_region {\n-                ty::BoundRegion::BrNamed(_, name) => {\n-                    let span = self.get_named_span(tcx, error_region, name);\n-                    Some(RegionName {\n-                        name,\n-                        source: RegionNameSource::NamedFreeRegion(span),\n-                    })\n+                ty::BoundRegion::BrNamed(region_def_id, name) => {\n+                    // Get the span to point to, even if we don't use the name.\n+                    let span = tcx.hir().span_if_local(region_def_id).unwrap_or(DUMMY_SP);\n+                    debug!(\"bound region named: {:?}, is_named: {:?}\",\n+                        name, free_region.bound_region.is_named());\n+\n+                    if free_region.bound_region.is_named() {\n+                        // A named region that is actually named.\n+                        Some(RegionName {\n+                            name,\n+                            source: RegionNameSource::NamedFreeRegion(span),\n+                        })\n+                    } else {\n+                        // If we spuriously thought that the region is named, we should let the\n+                        // system generate a true name for error messages. Currently this can\n+                        // happen if we have an elided name in an async fn for example: the\n+                        // compiler will generate a region named `'_`, but reporting such a name is\n+                        // not actually useful, so we synthesize a name for it instead.\n+                        let name = renctx.synthesize_region_name();\n+                        Some(RegionName {\n+                            name,\n+                            source: RegionNameSource::AnonRegionFromAsyncFn(span),\n+                        })\n+                    }\n                 }\n \n                 ty::BoundRegion::BrEnv => {\n@@ -350,40 +369,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         }\n     }\n \n-    /// Gets a span of a named region to provide context for error messages that\n-    /// mention that span, for example:\n-    ///\n-    /// ```\n-    ///  |\n-    ///  | fn two_regions<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n-    ///  |                --  -- lifetime `'b` defined here\n-    ///  |                |\n-    ///  |                lifetime `'a` defined here\n-    ///  |\n-    ///  |     with_signature(cell, t, |cell, t| require(cell, t));\n-    ///  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must\n-    ///  |                                                         outlive `'a`\n-    /// ```\n-    fn get_named_span(\n-        &self,\n-        tcx: TyCtxt<'tcx>,\n-        error_region: &RegionKind,\n-        name: Symbol,\n-    ) -> Span {\n-        let scope = error_region.free_region_binding_scope(tcx);\n-        let node = tcx.hir().as_local_hir_id(scope).unwrap_or(hir::DUMMY_HIR_ID);\n-\n-        let span = tcx.sess.source_map().def_span(tcx.hir().span(node));\n-        if let Some(param) = tcx.hir()\n-            .get_generics(scope)\n-            .and_then(|generics| generics.get_named(name))\n-        {\n-            param.span\n-        } else {\n-            span\n-        }\n-    }\n-\n     /// Finds an argument that contains `fr` and label it with a fully\n     /// elaborated type, returning something like `'1`. Result looks\n     /// like:"}, {"sha": "4ae3971e90eae7265f6637c290c25e4ecbd3db5e", "filename": "src/test/ui/async-await/issues/issue-63388-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99f9fa36951b25eba43e822bd5a58508d5f22d28/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99f9fa36951b25eba43e822bd5a58508d5f22d28/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr?ref=99f9fa36951b25eba43e822bd5a58508d5f22d28", "patch": "@@ -12,12 +12,12 @@ error: lifetime may not live long enough\n LL |       async fn do_sth<'a>(\n    |                       -- lifetime `'a` defined here\n LL |           &'a self, foo: &dyn Foo\n-   |                          - lifetime `'_` defined here\n+   |                          - let's call the lifetime of this reference `'1`\n LL |       ) -> &dyn Foo\n LL | /     {\n LL | |         foo\n LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'_`\n+   | |_____^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5a63553adc5c8f5262477a42cb3d425bf6ab0995", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99f9fa36951b25eba43e822bd5a58508d5f22d28/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99f9fa36951b25eba43e822bd5a58508d5f22d28/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr?ref=99f9fa36951b25eba43e822bd5a58508d5f22d28", "patch": "@@ -2,11 +2,11 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:48\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                          -                     ^^^^^^^^ returning this value requires that `'_` must outlive `'static`\n+   |                          -                     ^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n    |                          |\n-   |                          lifetime `'_` defined here\n+   |                          let's call the lifetime of this reference `'1`\n    |\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'_`, add `'_` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                     ^^^^^^^^^^^^^^^"}, {"sha": "b05940fd273a146ebda42d28d66c4b7631c8f528", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/99f9fa36951b25eba43e822bd5a58508d5f22d28/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99f9fa36951b25eba43e822bd5a58508d5f22d28/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr?ref=99f9fa36951b25eba43e822bd5a58508d5f22d28", "patch": "@@ -10,19 +10,19 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:52\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                          -                         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n-   |                          |\n-   |                          lifetime `'_` defined here\n-   |                          lifetime `'_` defined here\n+   |                          -         -               ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |                          |         |\n+   |                          |         let's call the lifetime of this reference `'1`\n+   |                          let's call the lifetime of this reference `'2`\n \n error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:75\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                          -                                                ^^^^^^^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n-   |                          |\n-   |                          lifetime `'_` defined here\n-   |                          lifetime `'_` defined here\n+   |                          -          -                                     ^^^^^^^^^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |                          |          |\n+   |                          |          let's call the lifetime of this reference `'1`\n+   |                          let's call the lifetime of this reference `'2`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:58\n@@ -36,8 +36,9 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:64\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n-   |                  --              - lifetime `'_` defined here  ^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'a`\n-   |                  |\n+   |                  --              -                             ^^^ function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n+   |                  |               |\n+   |                  |               let's call the lifetime of this reference `'1`\n    |                  lifetime `'a` defined here\n \n error: aborting due to 5 previous errors"}, {"sha": "8dd823a2204971b127bc76106a9f44ff7303a726", "filename": "src/test/ui/self/elision/lt-ref-self-async.nll.stderr", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/99f9fa36951b25eba43e822bd5a58508d5f22d28/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99f9fa36951b25eba43e822bd5a58508d5f22d28/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr?ref=99f9fa36951b25eba43e822bd5a58508d5f22d28", "patch": "@@ -10,12 +10,11 @@ error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:13:9\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                       -\n+   |                       -         - let's call the lifetime of this reference `'1`\n    |                       |\n-   |                       lifetime `'_` defined here\n-   |                       lifetime `'_` defined here\n+   |                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/lt-ref-self-async.rs:18:48\n@@ -29,12 +28,11 @@ error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                             -\n+   |                             -         - let's call the lifetime of this reference `'1`\n    |                             |\n-   |                             lifetime `'_` defined here\n-   |                             lifetime `'_` defined here\n+   |                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/lt-ref-self-async.rs:22:57\n@@ -48,12 +46,11 @@ error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                     -\n+   |                                     -          - let's call the lifetime of this reference `'1`\n    |                                     |\n-   |                                     lifetime `'_` defined here\n-   |                                     lifetime `'_` defined here\n+   |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/lt-ref-self-async.rs:26:57\n@@ -67,12 +64,11 @@ error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                     -\n+   |                                     -          - let's call the lifetime of this reference `'1`\n    |                                     |\n-   |                                     lifetime `'_` defined here\n-   |                                     lifetime `'_` defined here\n+   |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/lt-ref-self-async.rs:30:66\n@@ -86,12 +82,11 @@ error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                             -\n+   |                                             -           - let's call the lifetime of this reference `'1`\n    |                                             |\n-   |                                             lifetime `'_` defined here\n-   |                                             lifetime `'_` defined here\n+   |                                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/lt-ref-self-async.rs:34:62\n@@ -105,12 +100,11 @@ error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:35:9\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                         -\n+   |                                         -           - let's call the lifetime of this reference `'1`\n    |                                         |\n-   |                                         lifetime `'_` defined here\n-   |                                         lifetime `'_` defined here\n+   |                                         let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "768f532c18317ca4f7512e3ca5b1315d8219a19c", "filename": "src/test/ui/self/elision/ref-mut-self-async.nll.stderr", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/99f9fa36951b25eba43e822bd5a58508d5f22d28/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99f9fa36951b25eba43e822bd5a58508d5f22d28/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr?ref=99f9fa36951b25eba43e822bd5a58508d5f22d28", "patch": "@@ -10,12 +10,11 @@ error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:13:9\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n-   |                       -\n+   |                       -             - let's call the lifetime of this reference `'1`\n    |                       |\n-   |                       lifetime `'_` defined here\n-   |                       lifetime `'_` defined here\n+   |                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-self-async.rs:18:52\n@@ -29,12 +28,11 @@ error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n-   |                             -\n+   |                             -             - let's call the lifetime of this reference `'1`\n    |                             |\n-   |                             lifetime `'_` defined here\n-   |                             lifetime `'_` defined here\n+   |                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-self-async.rs:22:61\n@@ -48,12 +46,11 @@ error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n-   |                                     -\n+   |                                     -              - let's call the lifetime of this reference `'1`\n    |                                     |\n-   |                                     lifetime `'_` defined here\n-   |                                     lifetime `'_` defined here\n+   |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-self-async.rs:26:61\n@@ -67,12 +64,11 @@ error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n-   |                                     -\n+   |                                     -              - let's call the lifetime of this reference `'1`\n    |                                     |\n-   |                                     lifetime `'_` defined here\n-   |                                     lifetime `'_` defined here\n+   |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-self-async.rs:30:70\n@@ -86,12 +82,11 @@ error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n-   |                                             -\n+   |                                             -               - let's call the lifetime of this reference `'1`\n    |                                             |\n-   |                                             lifetime `'_` defined here\n-   |                                             lifetime `'_` defined here\n+   |                                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-self-async.rs:34:70\n@@ -105,12 +100,11 @@ error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:35:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n-   |                                             -\n+   |                                             -               - let's call the lifetime of this reference `'1`\n    |                                             |\n-   |                                             lifetime `'_` defined here\n-   |                                             lifetime `'_` defined here\n+   |                                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "9e26e411d30bd832183f4479d449a47b8e36eac8", "filename": "src/test/ui/self/elision/ref-mut-struct-async.nll.stderr", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/99f9fa36951b25eba43e822bd5a58508d5f22d28/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99f9fa36951b25eba43e822bd5a58508d5f22d28/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr?ref=99f9fa36951b25eba43e822bd5a58508d5f22d28", "patch": "@@ -10,12 +10,11 @@ error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:13:9\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n-   |                               -\n+   |                               -               - let's call the lifetime of this reference `'1`\n    |                               |\n-   |                               lifetime `'_` defined here\n-   |                               lifetime `'_` defined here\n+   |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-struct-async.rs:16:65\n@@ -29,12 +28,11 @@ error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n-   |                                       -\n+   |                                       -                - let's call the lifetime of this reference `'1`\n    |                                       |\n-   |                                       lifetime `'_` defined here\n-   |                                       lifetime `'_` defined here\n+   |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-struct-async.rs:20:65\n@@ -48,12 +46,11 @@ error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n-   |                                       -\n+   |                                       -                - let's call the lifetime of this reference `'1`\n    |                                       |\n-   |                                       lifetime `'_` defined here\n-   |                                       lifetime `'_` defined here\n+   |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-struct-async.rs:24:74\n@@ -67,12 +64,11 @@ error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                               -\n+   |                                               -                 - let's call the lifetime of this reference `'1`\n    |                                               |\n-   |                                               lifetime `'_` defined here\n-   |                                               lifetime `'_` defined here\n+   |                                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-struct-async.rs:28:74\n@@ -86,12 +82,11 @@ error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                               -\n+   |                                               -                 - let's call the lifetime of this reference `'1`\n    |                                               |\n-   |                                               lifetime `'_` defined here\n-   |                                               lifetime `'_` defined here\n+   |                                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 10 previous errors\n "}, {"sha": "cbf051205ed969cfd9f836ca3bc030d8ccd6885b", "filename": "src/test/ui/self/elision/ref-struct-async.nll.stderr", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/99f9fa36951b25eba43e822bd5a58508d5f22d28/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99f9fa36951b25eba43e822bd5a58508d5f22d28/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr?ref=99f9fa36951b25eba43e822bd5a58508d5f22d28", "patch": "@@ -10,12 +10,11 @@ error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:13:9\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n-   |                               -\n+   |                               -           - let's call the lifetime of this reference `'1`\n    |                               |\n-   |                               lifetime `'_` defined here\n-   |                               lifetime `'_` defined here\n+   |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-struct-async.rs:16:61\n@@ -29,12 +28,11 @@ error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n-   |                                       -\n+   |                                       -            - let's call the lifetime of this reference `'1`\n    |                                       |\n-   |                                       lifetime `'_` defined here\n-   |                                       lifetime `'_` defined here\n+   |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-struct-async.rs:20:61\n@@ -48,12 +46,11 @@ error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n-   |                                       -\n+   |                                       -            - let's call the lifetime of this reference `'1`\n    |                                       |\n-   |                                       lifetime `'_` defined here\n-   |                                       lifetime `'_` defined here\n+   |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-struct-async.rs:24:70\n@@ -67,12 +64,11 @@ error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n-   |                                               -\n+   |                                               -             - let's call the lifetime of this reference `'1`\n    |                                               |\n-   |                                               lifetime `'_` defined here\n-   |                                               lifetime `'_` defined here\n+   |                                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-struct-async.rs:28:66\n@@ -86,12 +82,11 @@ error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n-   |                                           -\n+   |                                           -             - let's call the lifetime of this reference `'1`\n    |                                           |\n-   |                                           lifetime `'_` defined here\n-   |                                           lifetime `'_` defined here\n+   |                                           let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 10 previous errors\n "}]}