{"sha": "ed758912d31c159c26768a4603db55372f948b82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNzU4OTEyZDMxYzE1OWMyNjc2OGE0NjAzZGI1NTM3MmY5NDhiODI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-11-12T19:52:32Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-16T11:04:34Z"}, "message": "Split debuginfo/emit.rs part out of debuginfo/mod.rs", "tree": {"sha": "64b2c7e8f9d713b0e706af80d39b7bbaed755b5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64b2c7e8f9d713b0e706af80d39b7bbaed755b5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed758912d31c159c26768a4603db55372f948b82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed758912d31c159c26768a4603db55372f948b82", "html_url": "https://github.com/rust-lang/rust/commit/ed758912d31c159c26768a4603db55372f948b82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed758912d31c159c26768a4603db55372f948b82/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d07fe816af78de1578e9f915012b6485c2928f38", "url": "https://api.github.com/repos/rust-lang/rust/commits/d07fe816af78de1578e9f915012b6485c2928f38", "html_url": "https://github.com/rust-lang/rust/commit/d07fe816af78de1578e9f915012b6485c2928f38"}], "stats": {"total": 272, "additions": 142, "deletions": 130}, "files": [{"sha": "2b6dc9f669f30a124d4349ae4fb57e7f6339129e", "filename": "src/debuginfo/emit.rs", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/ed758912d31c159c26768a4603db55372f948b82/src%2Fdebuginfo%2Femit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed758912d31c159c26768a4603db55372f948b82/src%2Fdebuginfo%2Femit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Femit.rs?ref=ed758912d31c159c26768a4603db55372f948b82", "patch": "@@ -0,0 +1,135 @@\n+use std::collections::HashMap;\n+\n+use gimli::write::{Address, AttributeValue, EndianVec, Result, Sections, Writer};\n+use gimli::{RunTimeEndian, SectionId};\n+\n+use crate::backend::WriteDebugInfo;\n+\n+use super::DebugContext;\n+\n+impl DebugContext<'_> {\n+    pub fn emit<P: WriteDebugInfo>(&mut self, product: &mut P) {\n+        let unit_range_list_id = self.dwarf.unit.ranges.add(self.unit_range_list.clone());\n+        let root = self.dwarf.unit.root();\n+        let root = self.dwarf.unit.get_mut(root);\n+        root.set(\n+            gimli::DW_AT_ranges,\n+            AttributeValue::RangeListRef(unit_range_list_id),\n+        );\n+\n+        let mut sections = Sections::new(WriterRelocate::new(self));\n+        self.dwarf.write(&mut sections).unwrap();\n+\n+        let mut section_map = HashMap::new();\n+        let _: Result<()> = sections.for_each_mut(|id, section| {\n+            if !section.writer.slice().is_empty() {\n+                let section_id = product.add_debug_section(id, section.writer.take());\n+                section_map.insert(id, section_id);\n+            }\n+            Ok(())\n+        });\n+\n+        let _: Result<()> = sections.for_each(|id, section| {\n+            if let Some(section_id) = section_map.get(&id) {\n+                for reloc in &section.relocs {\n+                    product.add_debug_reloc(&section_map, &self.symbols, section_id, reloc);\n+                }\n+            }\n+            Ok(())\n+        });\n+    }\n+}\n+\n+#[derive(Clone)]\n+pub struct DebugReloc {\n+    pub offset: u32,\n+    pub size: u8,\n+    pub name: DebugRelocName,\n+    pub addend: i64,\n+}\n+\n+#[derive(Clone)]\n+pub enum DebugRelocName {\n+    Section(SectionId),\n+    Symbol(usize),\n+}\n+\n+#[derive(Clone)]\n+struct WriterRelocate {\n+    relocs: Vec<DebugReloc>,\n+    writer: EndianVec<RunTimeEndian>,\n+}\n+\n+impl WriterRelocate {\n+    fn new(ctx: &DebugContext) -> Self {\n+        WriterRelocate {\n+            relocs: Vec::new(),\n+            writer: EndianVec::new(ctx.endian),\n+        }\n+    }\n+}\n+\n+impl Writer for WriterRelocate {\n+    type Endian = RunTimeEndian;\n+\n+    fn endian(&self) -> Self::Endian {\n+        self.writer.endian()\n+    }\n+\n+    fn len(&self) -> usize {\n+        self.writer.len()\n+    }\n+\n+    fn write(&mut self, bytes: &[u8]) -> Result<()> {\n+        self.writer.write(bytes)\n+    }\n+\n+    fn write_at(&mut self, offset: usize, bytes: &[u8]) -> Result<()> {\n+        self.writer.write_at(offset, bytes)\n+    }\n+\n+    fn write_address(&mut self, address: Address, size: u8) -> Result<()> {\n+        match address {\n+            Address::Constant(val) => self.write_udata(val, size),\n+            Address::Symbol { symbol, addend } => {\n+                let offset = self.len() as u64;\n+                self.relocs.push(DebugReloc {\n+                    offset: offset as u32,\n+                    size,\n+                    name: DebugRelocName::Symbol(symbol),\n+                    addend: addend as i64,\n+                });\n+                self.write_udata(0, size)\n+            }\n+        }\n+    }\n+\n+    // TODO: implement write_eh_pointer\n+\n+    fn write_offset(&mut self, val: usize, section: SectionId, size: u8) -> Result<()> {\n+        let offset = self.len() as u32;\n+        self.relocs.push(DebugReloc {\n+            offset,\n+            size,\n+            name: DebugRelocName::Section(section),\n+            addend: val as i64,\n+        });\n+        self.write_udata(0, size)\n+    }\n+\n+    fn write_offset_at(\n+        &mut self,\n+        offset: usize,\n+        val: usize,\n+        section: SectionId,\n+        size: u8,\n+    ) -> Result<()> {\n+        self.relocs.push(DebugReloc {\n+            offset: offset as u32,\n+            size,\n+            name: DebugRelocName::Section(section),\n+            addend: val as i64,\n+        });\n+        self.write_udata_at(offset, 0, size)\n+    }\n+}"}, {"sha": "3ab03a411c8b4eb4eb21609b22f7ab8cd650e604", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 7, "deletions": 130, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/ed758912d31c159c26768a4603db55372f948b82/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed758912d31c159c26768a4603db55372f948b82/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=ed758912d31c159c26768a4603db55372f948b82", "patch": "@@ -1,18 +1,19 @@\n-use crate::prelude::*;\n+mod emit;\n \n-use crate::backend::WriteDebugInfo;\n+use crate::prelude::*;\n \n use syntax::source_map::FileName;\n \n use cranelift::codegen::ir::{StackSlots, ValueLoc};\n use cranelift::codegen::isa::RegUnit;\n \n use gimli::write::{\n-    self, Address, AttributeValue, DwarfUnit, EndianVec, Expression, FileId, LineProgram,\n-    LineString, LineStringTable, Location, LocationList, Range, RangeList, Result, Sections,\n-    UnitEntryId, Writer,\n+    self, Address, AttributeValue, DwarfUnit, Expression, FileId, LineProgram, LineString,\n+    LineStringTable, Location, LocationList, Range, RangeList, UnitEntryId, Writer,\n };\n-use gimli::{Encoding, Format, LineEncoding, Register, RunTimeEndian, SectionId, X86_64};\n+use gimli::{Encoding, Format, LineEncoding, Register, RunTimeEndian, X86_64};\n+\n+pub use emit::{DebugReloc, DebugRelocName};\n \n fn target_endian(tcx: TyCtxt) -> RunTimeEndian {\n     use rustc::ty::layout::Endian;\n@@ -57,20 +58,6 @@ fn line_program_add_file(\n     }\n }\n \n-#[derive(Clone)]\n-pub struct DebugReloc {\n-    pub offset: u32,\n-    pub size: u8,\n-    pub name: DebugRelocName,\n-    pub addend: i64,\n-}\n-\n-#[derive(Clone)]\n-pub enum DebugRelocName {\n-    Section(SectionId),\n-    Symbol(usize),\n-}\n-\n pub struct DebugContext<'tcx> {\n     tcx: TyCtxt<'tcx>,\n \n@@ -225,37 +212,6 @@ impl<'tcx> DebugContext<'tcx> {\n \n         type_id\n     }\n-\n-    pub fn emit<P: WriteDebugInfo>(&mut self, product: &mut P) {\n-        let unit_range_list_id = self.dwarf.unit.ranges.add(self.unit_range_list.clone());\n-        let root = self.dwarf.unit.root();\n-        let root = self.dwarf.unit.get_mut(root);\n-        root.set(\n-            gimli::DW_AT_ranges,\n-            AttributeValue::RangeListRef(unit_range_list_id),\n-        );\n-\n-        let mut sections = Sections::new(WriterRelocate::new(self));\n-        self.dwarf.write(&mut sections).unwrap();\n-\n-        let mut section_map = HashMap::new();\n-        let _: Result<()> = sections.for_each_mut(|id, section| {\n-            if !section.writer.slice().is_empty() {\n-                let section_id = product.add_debug_section(id, section.writer.take());\n-                section_map.insert(id, section_id);\n-            }\n-            Ok(())\n-        });\n-\n-        let _: Result<()> = sections.for_each(|id, section| {\n-            if let Some(section_id) = section_map.get(&id) {\n-                for reloc in &section.relocs {\n-                    product.add_debug_reloc(&section_map, &self.symbols, section_id, reloc);\n-                }\n-            }\n-            Ok(())\n-        });\n-    }\n }\n \n pub struct FunctionDebugContext<'a, 'tcx> {\n@@ -449,85 +405,6 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n     }\n }\n \n-#[derive(Clone)]\n-struct WriterRelocate {\n-    relocs: Vec<DebugReloc>,\n-    writer: EndianVec<RunTimeEndian>,\n-}\n-\n-impl WriterRelocate {\n-    fn new(ctx: &DebugContext) -> Self {\n-        WriterRelocate {\n-            relocs: Vec::new(),\n-            writer: EndianVec::new(ctx.endian),\n-        }\n-    }\n-}\n-\n-impl Writer for WriterRelocate {\n-    type Endian = RunTimeEndian;\n-\n-    fn endian(&self) -> Self::Endian {\n-        self.writer.endian()\n-    }\n-\n-    fn len(&self) -> usize {\n-        self.writer.len()\n-    }\n-\n-    fn write(&mut self, bytes: &[u8]) -> Result<()> {\n-        self.writer.write(bytes)\n-    }\n-\n-    fn write_at(&mut self, offset: usize, bytes: &[u8]) -> Result<()> {\n-        self.writer.write_at(offset, bytes)\n-    }\n-\n-    fn write_address(&mut self, address: Address, size: u8) -> Result<()> {\n-        match address {\n-            Address::Constant(val) => self.write_udata(val, size),\n-            Address::Symbol { symbol, addend } => {\n-                let offset = self.len() as u64;\n-                self.relocs.push(DebugReloc {\n-                    offset: offset as u32,\n-                    size,\n-                    name: DebugRelocName::Symbol(symbol),\n-                    addend: addend as i64,\n-                });\n-                self.write_udata(0, size)\n-            }\n-        }\n-    }\n-\n-    // TODO: implement write_eh_pointer\n-\n-    fn write_offset(&mut self, val: usize, section: SectionId, size: u8) -> Result<()> {\n-        let offset = self.len() as u32;\n-        self.relocs.push(DebugReloc {\n-            offset,\n-            size,\n-            name: DebugRelocName::Section(section),\n-            addend: val as i64,\n-        });\n-        self.write_udata(0, size)\n-    }\n-\n-    fn write_offset_at(\n-        &mut self,\n-        offset: usize,\n-        val: usize,\n-        section: SectionId,\n-        size: u8,\n-    ) -> Result<()> {\n-        self.relocs.push(DebugReloc {\n-            offset: offset as u32,\n-            size,\n-            name: DebugRelocName::Section(section),\n-            addend: val as i64,\n-        });\n-        self.write_udata_at(offset, 0, size)\n-    }\n-}\n \n \n "}]}