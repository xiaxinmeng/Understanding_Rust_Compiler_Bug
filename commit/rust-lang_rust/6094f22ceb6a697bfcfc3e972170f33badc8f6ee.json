{"sha": "6094f22ceb6a697bfcfc3e972170f33badc8f6ee", "node_id": "C_kwDOAAsO6NoAKDYwOTRmMjJjZWI2YTY5N2JmY2ZjM2U5NzIxNzBmMzNiYWRjOGY2ZWU", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-11-24T01:36:54Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-12-01T23:40:46Z"}, "message": "impl unary.rs for Simd<{i,u}{8,16,32,64,size}, _>\n\nIn order to assure type soundness, these \"base\" impls\nneed to go directly on Simd<T, _> for every scalar type argument.\nA bit of cleanup of ops.rs is still warranted.", "tree": {"sha": "61b12af28d06636cb716d3dd007a76c3a5ef2cf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61b12af28d06636cb716d3dd007a76c3a5ef2cf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6094f22ceb6a697bfcfc3e972170f33badc8f6ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6094f22ceb6a697bfcfc3e972170f33badc8f6ee", "html_url": "https://github.com/rust-lang/rust/commit/6094f22ceb6a697bfcfc3e972170f33badc8f6ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6094f22ceb6a697bfcfc3e972170f33badc8f6ee/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51ff9259256f8db9b5491777f0f6cce92b11bde9", "url": "https://api.github.com/repos/rust-lang/rust/commits/51ff9259256f8db9b5491777f0f6cce92b11bde9", "html_url": "https://github.com/rust-lang/rust/commit/51ff9259256f8db9b5491777f0f6cce92b11bde9"}], "stats": {"total": 130, "additions": 78, "deletions": 52}, "files": [{"sha": "b7da4f341d171716125678cc03a560703ad275b3", "filename": "crates/core_simd/src/ops.rs", "status": "modified", "additions": 1, "deletions": 52, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/6094f22ceb6a697bfcfc3e972170f33badc8f6ee/crates%2Fcore_simd%2Fsrc%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6094f22ceb6a697bfcfc3e972170f33badc8f6ee/crates%2Fcore_simd%2Fsrc%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fops.rs?ref=6094f22ceb6a697bfcfc3e972170f33badc8f6ee", "patch": "@@ -7,6 +7,7 @@ use core::ops::{Shl, Shr};\n \n mod assign;\n mod deref;\n+mod unary;\n \n impl<I, T, const LANES: usize> core::ops::Index<I> for Simd<T, LANES>\n where\n@@ -65,25 +66,6 @@ macro_rules! impl_ref_ops {\n             fn $fn($self_tok, $rhs_arg: $rhs_arg_ty) -> Self::Output $body\n         }\n     };\n-\n-    // unary op\n-    {\n-        impl<const $lanes:ident: usize> core::ops::$trait:ident for $type:ty\n-        where\n-            LaneCount<$lanes2:ident>: SupportedLaneCount,\n-        {\n-            type Output = $output:ty;\n-            fn $fn:ident($self_tok:ident) -> Self::Output $body:tt\n-        }\n-    } => {\n-        impl<const $lanes: usize> core::ops::$trait for $type\n-        where\n-            LaneCount<$lanes2>: SupportedLaneCount,\n-        {\n-            type Output = $output;\n-            fn $fn($self_tok) -> Self::Output $body\n-        }\n-    }\n }\n \n /// Automatically implements operators over vectors and scalars for a particular vector.\n@@ -119,34 +101,6 @@ macro_rules! impl_op {\n         impl_op! { @binary $scalar, BitXor::bitxor, simd_xor }\n     };\n \n-    { impl Not for $scalar:ty } => {\n-        impl_ref_ops! {\n-            impl<const LANES: usize> core::ops::Not for Simd<$scalar, LANES>\n-            where\n-                LaneCount<LANES>: SupportedLaneCount,\n-            {\n-                type Output = Self;\n-                fn not(self) -> Self::Output {\n-                    self ^ Self::splat(!<$scalar>::default())\n-                }\n-            }\n-        }\n-    };\n-\n-    { impl Neg for $scalar:ty } => {\n-        impl_ref_ops! {\n-            impl<const LANES: usize> core::ops::Neg for Simd<$scalar, LANES>\n-            where\n-                LaneCount<LANES>: SupportedLaneCount,\n-            {\n-                type Output = Self;\n-                fn neg(self) -> Self::Output {\n-                    unsafe { intrinsics::simd_neg(self) }\n-                }\n-            }\n-        }\n-    };\n-\n     // generic binary op with assignment when output is `Self`\n     { @binary $scalar:ty, $trait:ident :: $trait_fn:ident, $intrinsic:ident } => {\n         impl_ref_ops! {\n@@ -204,7 +158,6 @@ macro_rules! impl_float_ops {\n             impl_op! { impl Mul for $scalar }\n             impl_op! { impl Div for $scalar }\n             impl_op! { impl Rem for $scalar }\n-            impl_op! { impl Neg for $scalar }\n         )*\n     };\n }\n@@ -219,7 +172,6 @@ macro_rules! impl_unsigned_int_ops {\n             impl_op! { impl BitAnd for $scalar }\n             impl_op! { impl BitOr  for $scalar }\n             impl_op! { impl BitXor for $scalar }\n-            impl_op! { impl Not for $scalar }\n \n             // Integers panic on divide by 0\n             impl_ref_ops! {\n@@ -441,9 +393,6 @@ macro_rules! impl_unsigned_int_ops {\n macro_rules! impl_signed_int_ops {\n     { $($scalar:ty),* } => {\n         impl_unsigned_int_ops! { $($scalar),* }\n-        $( // scalar\n-            impl_op! { impl Neg for $scalar }\n-        )*\n     };\n }\n "}, {"sha": "4ebea560fc65fa51e3d7f0594506e03a0c27adfa", "filename": "crates/core_simd/src/ops/unary.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/6094f22ceb6a697bfcfc3e972170f33badc8f6ee/crates%2Fcore_simd%2Fsrc%2Fops%2Funary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6094f22ceb6a697bfcfc3e972170f33badc8f6ee/crates%2Fcore_simd%2Fsrc%2Fops%2Funary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fops%2Funary.rs?ref=6094f22ceb6a697bfcfc3e972170f33badc8f6ee", "patch": "@@ -0,0 +1,77 @@\n+use crate::simd::intrinsics;\n+use crate::simd::{LaneCount, Simd, SimdElement, SupportedLaneCount};\n+use core::ops::{Neg, Not}; // unary ops\n+\n+macro_rules! neg {\n+    ($(impl<const LANES: usize> Neg for Simd<$scalar:ty, LANES>)*) => {\n+        $(impl<const LANES: usize> Neg for Simd<$scalar, LANES>\n+        where\n+            $scalar: SimdElement,\n+            LaneCount<LANES>: SupportedLaneCount,\n+        {\n+            type Output = Self;\n+\n+            #[inline]\n+            #[must_use = \"operator returns a new vector without mutating the input\"]\n+            fn neg(self) -> Self::Output {\n+                unsafe { intrinsics::simd_neg(self) }\n+            }\n+        })*\n+    }\n+}\n+\n+neg! {\n+    impl<const LANES: usize> Neg for Simd<f32, LANES>\n+\n+    impl<const LANES: usize> Neg for Simd<f64, LANES>\n+\n+    impl<const LANES: usize> Neg for Simd<i8, LANES>\n+\n+    impl<const LANES: usize> Neg for Simd<i16, LANES>\n+\n+    impl<const LANES: usize> Neg for Simd<i32, LANES>\n+\n+    impl<const LANES: usize> Neg for Simd<i64, LANES>\n+\n+    impl<const LANES: usize> Neg for Simd<isize, LANES>\n+}\n+\n+macro_rules! not {\n+    ($(impl<const LANES: usize> Not for Simd<$scalar:ty, LANES>)*) => {\n+        $(impl<const LANES: usize> Not for Simd<$scalar, LANES>\n+        where\n+            $scalar: SimdElement,\n+            LaneCount<LANES>: SupportedLaneCount,\n+        {\n+            type Output = Self;\n+\n+            #[inline]\n+            #[must_use = \"operator returns a new vector without mutating the input\"]\n+            fn not(self) -> Self::Output {\n+                self ^ (Simd::splat(!(0 as $scalar)))\n+            }\n+        })*\n+    }\n+}\n+\n+not! {\n+    impl<const LANES: usize> Not for Simd<i8, LANES>\n+\n+    impl<const LANES: usize> Not for Simd<i16, LANES>\n+\n+    impl<const LANES: usize> Not for Simd<i32, LANES>\n+\n+    impl<const LANES: usize> Not for Simd<i64, LANES>\n+\n+    impl<const LANES: usize> Not for Simd<isize, LANES>\n+\n+    impl<const LANES: usize> Not for Simd<u8, LANES>\n+\n+    impl<const LANES: usize> Not for Simd<u16, LANES>\n+\n+    impl<const LANES: usize> Not for Simd<u32, LANES>\n+\n+    impl<const LANES: usize> Not for Simd<u64, LANES>\n+\n+    impl<const LANES: usize> Not for Simd<usize, LANES>\n+}"}]}