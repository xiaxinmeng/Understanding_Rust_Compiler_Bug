{"sha": "cd8cfbfb098f8e1da086ee7d164af03e3fdde189", "node_id": "C_kwDOAAsO6NoAKGNkOGNmYmZiMDk4ZjhlMWRhMDg2ZWU3ZDE2NGFmMDNlM2ZkZGUxODk", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-06-02T21:06:54Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-06-02T22:29:20Z"}, "message": "review comments", "tree": {"sha": "f7f5d26ddb2960c1bd9ccd916de7c84324e9afff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7f5d26ddb2960c1bd9ccd916de7c84324e9afff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd8cfbfb098f8e1da086ee7d164af03e3fdde189", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd8cfbfb098f8e1da086ee7d164af03e3fdde189", "html_url": "https://github.com/rust-lang/rust/commit/cd8cfbfb098f8e1da086ee7d164af03e3fdde189", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd8cfbfb098f8e1da086ee7d164af03e3fdde189/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad63f907e987673fc99dce3e4d1437720705f5a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad63f907e987673fc99dce3e4d1437720705f5a8", "html_url": "https://github.com/rust-lang/rust/commit/ad63f907e987673fc99dce3e4d1437720705f5a8"}], "stats": {"total": 106, "additions": 47, "deletions": 59}, "files": [{"sha": "bcff2ae51290932fb4df6995be917329f25e6bd7", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 19, "deletions": 31, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/cd8cfbfb098f8e1da086ee7d164af03e3fdde189/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8cfbfb098f8e1da086ee7d164af03e3fdde189/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=cd8cfbfb098f8e1da086ee7d164af03e3fdde189", "patch": "@@ -1816,7 +1816,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 // work for the `enum`, instead of just looking if it takes *any*.\n                                 err.span_suggestion_verbose(\n                                     args_span,\n-                                    &format!(\"{type_name} doesn't have type parameters\"),\n+                                    &format!(\"{type_name} doesn't have generic parameters\"),\n                                     String::new(),\n                                     Applicability::MachineApplicable,\n                                 );\n@@ -2115,20 +2115,15 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     if segment.args().args.is_empty() {\n                         None\n                     } else {\n-                        let mut desc = res.descr();\n-                        if desc == \"unresolved item\" {\n-                            desc = \"this type\";\n-                        };\n-\n-                        let name = match res {\n-                            Res::PrimTy(ty) => Some(ty.name()),\n-                            Res::Def(_, def_id) => self.tcx().opt_item_name(def_id),\n-                            _ => None,\n-                        };\n                         Some((\n-                            match name {\n-                                Some(ty) => format!(\"{desc} `{ty}`\"),\n-                                None => desc.to_string(),\n+                            match res {\n+                                Res::PrimTy(ty) => format!(\"{} `{}`\", res.descr(), ty.name()),\n+                                Res::Def(_, def_id)\n+                                if let Some(name) = self.tcx().opt_item_name(def_id) => {\n+                                    format!(\"{} `{name}`\", res.descr())\n+                                }\n+                                Res::Err => \"this type\".to_string(),\n+                                _ => res.descr().to_string(),\n                             },\n                             segment.ident.span,\n                         ))\n@@ -2158,33 +2153,26 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             });\n         let mut emitted = false;\n         if lt || ty || ct || inf {\n-            let arg_spans: Vec<Span> = args\n-                .map(|arg| match arg {\n-                    hir::GenericArg::Lifetime(lt) => lt.span,\n-                    hir::GenericArg::Type(ty) => ty.span,\n-                    hir::GenericArg::Const(ct) => ct.span,\n-                    hir::GenericArg::Infer(inf) => inf.span,\n-                })\n-                .collect();\n+            let arg_spans: Vec<Span> = args.map(|arg| arg.span()).collect();\n \n-            let mut types = Vec::with_capacity(4);\n+            let mut kinds = Vec::with_capacity(4);\n             if lt {\n-                types.push(\"lifetime\");\n+                kinds.push(\"lifetime\");\n             }\n             if ty {\n-                types.push(\"type\");\n+                kinds.push(\"type\");\n             }\n             if ct {\n-                types.push(\"const\");\n+                kinds.push(\"const\");\n             }\n             if inf {\n-                types.push(\"generic\");\n+                kinds.push(\"generic\");\n             }\n-            let (kind, s) = match types[..] {\n+            let (kind, s) = match kinds[..] {\n                 [.., _, last] => (\n                     format!(\n                         \"{} and {last}\",\n-                        types[..types.len() - 1]\n+                        kinds[..kinds.len() - 1]\n                             .iter()\n                             .map(|&x| x)\n                             .intersperse(\", \")\n@@ -2464,7 +2452,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         );\n                         let mut postfix = \"\";\n                         if generics == 0 {\n-                            postfix = \", which doesn't have type parameters\";\n+                            postfix = \", which doesn't have generic parameters\";\n                         }\n                         span.push_span_label(\n                             t_sp,\n@@ -2557,7 +2545,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         if let Some(args) = segment.args {\n                             err.span_suggestion_verbose(\n                                 segment.ident.span.shrink_to_hi().to(args.span_ext),\n-                                &format!(\"primitive type `{name}` doesn't have type parameters\"),\n+                                &format!(\"primitive type `{name}` doesn't have generic parameters\"),\n                                 String::new(),\n                                 Applicability::MaybeIncorrect,\n                             );"}, {"sha": "e0e437e18ae8c6a4b9c93c9ce4a48501fbcd416a", "filename": "src/test/ui/error-codes/E0109.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd8cfbfb098f8e1da086ee7d164af03e3fdde189/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8cfbfb098f8e1da086ee7d164af03e3fdde189/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr?ref=cd8cfbfb098f8e1da086ee7d164af03e3fdde189", "patch": "@@ -6,7 +6,7 @@ LL | type X = u32<i32>;\n    |          |\n    |          not allowed on this\n    |\n-help: primitive type `u32` doesn't have type parameters\n+help: primitive type `u32` doesn't have generic parameters\n    |\n LL - type X = u32<i32>;\n LL + type X = u32;"}, {"sha": "15e1b959193fae7cdd99407326d20d13af060134", "filename": "src/test/ui/error-codes/E0110.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd8cfbfb098f8e1da086ee7d164af03e3fdde189/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8cfbfb098f8e1da086ee7d164af03e3fdde189/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr?ref=cd8cfbfb098f8e1da086ee7d164af03e3fdde189", "patch": "@@ -6,7 +6,7 @@ LL | type X = u32<'static>;\n    |          |\n    |          not allowed on this\n    |\n-help: primitive type `u32` doesn't have type parameters\n+help: primitive type `u32` doesn't have generic parameters\n    |\n LL - type X = u32<'static>;\n LL + type X = u32;"}, {"sha": "cccdd7b0f023ff938575e152b3e88af51fdd60ec", "filename": "src/test/ui/structs/struct-path-self.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd8cfbfb098f8e1da086ee7d164af03e3fdde189/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8cfbfb098f8e1da086ee7d164af03e3fdde189/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr?ref=cd8cfbfb098f8e1da086ee7d164af03e3fdde189", "patch": "@@ -42,7 +42,7 @@ note: `Self` is of type `S`\n   --> $DIR/struct-path-self.rs:1:8\n    |\n LL | struct S;\n-   |        ^ `Self` corresponds to this type, which doesn't have type parameters\n+   |        ^ `Self` corresponds to this type, which doesn't have generic parameters\n ...\n LL | impl Tr for S {\n    | ------------- `Self` is on type `S` in this `impl`\n@@ -64,7 +64,7 @@ note: `Self` is of type `S`\n   --> $DIR/struct-path-self.rs:1:8\n    |\n LL | struct S;\n-   |        ^ `Self` corresponds to this type, which doesn't have type parameters\n+   |        ^ `Self` corresponds to this type, which doesn't have generic parameters\n ...\n LL | impl S {\n    | ------ `Self` is on type `S` in this `impl`"}, {"sha": "199fd6a23f75550af2c8c6615523b92cc47ef8c6", "filename": "src/test/ui/type/issue-91268.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd8cfbfb098f8e1da086ee7d164af03e3fdde189/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8cfbfb098f8e1da086ee7d164af03e3fdde189/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr?ref=cd8cfbfb098f8e1da086ee7d164af03e3fdde189", "patch": "@@ -38,7 +38,7 @@ LL |     0: u8(\u0163\n    |        |\n    |        not allowed on this\n    |\n-help: primitive type `u8` doesn't have type parameters\n+help: primitive type `u8` doesn't have generic parameters\n    |\n LL -     0: u8(\u0163\n LL +     0: u8"}, {"sha": "7e7bc580b3b9535b9edb0e8743e8958e218da76a", "filename": "src/test/ui/typeck/prim-with-args.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/cd8cfbfb098f8e1da086ee7d164af03e3fdde189/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8cfbfb098f8e1da086ee7d164af03e3fdde189/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.stderr?ref=cd8cfbfb098f8e1da086ee7d164af03e3fdde189", "patch": "@@ -6,7 +6,7 @@ LL | let _x: isize<isize>;\n    |         |\n    |         not allowed on this\n    |\n-help: primitive type `isize` doesn't have type parameters\n+help: primitive type `isize` doesn't have generic parameters\n    |\n LL - let _x: isize<isize>;\n LL + let _x: isize;\n@@ -20,7 +20,7 @@ LL | let _x: i8<isize>;\n    |         |\n    |         not allowed on this\n    |\n-help: primitive type `i8` doesn't have type parameters\n+help: primitive type `i8` doesn't have generic parameters\n    |\n LL - let _x: i8<isize>;\n LL + let _x: i8;\n@@ -34,7 +34,7 @@ LL | let _x: i16<isize>;\n    |         |\n    |         not allowed on this\n    |\n-help: primitive type `i16` doesn't have type parameters\n+help: primitive type `i16` doesn't have generic parameters\n    |\n LL - let _x: i16<isize>;\n LL + let _x: i16;\n@@ -48,7 +48,7 @@ LL | let _x: i32<isize>;\n    |         |\n    |         not allowed on this\n    |\n-help: primitive type `i32` doesn't have type parameters\n+help: primitive type `i32` doesn't have generic parameters\n    |\n LL - let _x: i32<isize>;\n LL + let _x: i32;\n@@ -62,7 +62,7 @@ LL | let _x: i64<isize>;\n    |         |\n    |         not allowed on this\n    |\n-help: primitive type `i64` doesn't have type parameters\n+help: primitive type `i64` doesn't have generic parameters\n    |\n LL - let _x: i64<isize>;\n LL + let _x: i64;\n@@ -76,7 +76,7 @@ LL | let _x: usize<isize>;\n    |         |\n    |         not allowed on this\n    |\n-help: primitive type `usize` doesn't have type parameters\n+help: primitive type `usize` doesn't have generic parameters\n    |\n LL - let _x: usize<isize>;\n LL + let _x: usize;\n@@ -90,7 +90,7 @@ LL | let _x: u8<isize>;\n    |         |\n    |         not allowed on this\n    |\n-help: primitive type `u8` doesn't have type parameters\n+help: primitive type `u8` doesn't have generic parameters\n    |\n LL - let _x: u8<isize>;\n LL + let _x: u8;\n@@ -104,7 +104,7 @@ LL | let _x: u16<isize>;\n    |         |\n    |         not allowed on this\n    |\n-help: primitive type `u16` doesn't have type parameters\n+help: primitive type `u16` doesn't have generic parameters\n    |\n LL - let _x: u16<isize>;\n LL + let _x: u16;\n@@ -118,7 +118,7 @@ LL | let _x: u32<isize>;\n    |         |\n    |         not allowed on this\n    |\n-help: primitive type `u32` doesn't have type parameters\n+help: primitive type `u32` doesn't have generic parameters\n    |\n LL - let _x: u32<isize>;\n LL + let _x: u32;\n@@ -132,7 +132,7 @@ LL | let _x: u64<isize>;\n    |         |\n    |         not allowed on this\n    |\n-help: primitive type `u64` doesn't have type parameters\n+help: primitive type `u64` doesn't have generic parameters\n    |\n LL - let _x: u64<isize>;\n LL + let _x: u64;\n@@ -146,7 +146,7 @@ LL | let _x: char<isize>;\n    |         |\n    |         not allowed on this\n    |\n-help: primitive type `char` doesn't have type parameters\n+help: primitive type `char` doesn't have generic parameters\n    |\n LL - let _x: char<isize>;\n LL + let _x: char;\n@@ -160,7 +160,7 @@ LL | let _x: isize<'static>;\n    |         |\n    |         not allowed on this\n    |\n-help: primitive type `isize` doesn't have type parameters\n+help: primitive type `isize` doesn't have generic parameters\n    |\n LL - let _x: isize<'static>;\n LL + let _x: isize;\n@@ -174,7 +174,7 @@ LL | let _x: i8<'static>;\n    |         |\n    |         not allowed on this\n    |\n-help: primitive type `i8` doesn't have type parameters\n+help: primitive type `i8` doesn't have generic parameters\n    |\n LL - let _x: i8<'static>;\n LL + let _x: i8;\n@@ -188,7 +188,7 @@ LL | let _x: i16<'static>;\n    |         |\n    |         not allowed on this\n    |\n-help: primitive type `i16` doesn't have type parameters\n+help: primitive type `i16` doesn't have generic parameters\n    |\n LL - let _x: i16<'static>;\n LL + let _x: i16;\n@@ -202,7 +202,7 @@ LL | let _x: i32<'static>;\n    |         |\n    |         not allowed on this\n    |\n-help: primitive type `i32` doesn't have type parameters\n+help: primitive type `i32` doesn't have generic parameters\n    |\n LL - let _x: i32<'static>;\n LL + let _x: i32;\n@@ -216,7 +216,7 @@ LL | let _x: i64<'static>;\n    |         |\n    |         not allowed on this\n    |\n-help: primitive type `i64` doesn't have type parameters\n+help: primitive type `i64` doesn't have generic parameters\n    |\n LL - let _x: i64<'static>;\n LL + let _x: i64;\n@@ -230,7 +230,7 @@ LL | let _x: usize<'static>;\n    |         |\n    |         not allowed on this\n    |\n-help: primitive type `usize` doesn't have type parameters\n+help: primitive type `usize` doesn't have generic parameters\n    |\n LL - let _x: usize<'static>;\n LL + let _x: usize;\n@@ -244,7 +244,7 @@ LL | let _x: u8<'static>;\n    |         |\n    |         not allowed on this\n    |\n-help: primitive type `u8` doesn't have type parameters\n+help: primitive type `u8` doesn't have generic parameters\n    |\n LL - let _x: u8<'static>;\n LL + let _x: u8;\n@@ -258,7 +258,7 @@ LL | let _x: u16<'static>;\n    |         |\n    |         not allowed on this\n    |\n-help: primitive type `u16` doesn't have type parameters\n+help: primitive type `u16` doesn't have generic parameters\n    |\n LL - let _x: u16<'static>;\n LL + let _x: u16;\n@@ -272,7 +272,7 @@ LL | let _x: u32<'static>;\n    |         |\n    |         not allowed on this\n    |\n-help: primitive type `u32` doesn't have type parameters\n+help: primitive type `u32` doesn't have generic parameters\n    |\n LL - let _x: u32<'static>;\n LL + let _x: u32;\n@@ -286,7 +286,7 @@ LL | let _x: u64<'static>;\n    |         |\n    |         not allowed on this\n    |\n-help: primitive type `u64` doesn't have type parameters\n+help: primitive type `u64` doesn't have generic parameters\n    |\n LL - let _x: u64<'static>;\n LL + let _x: u64;\n@@ -300,7 +300,7 @@ LL | let _x: char<'static>;\n    |         |\n    |         not allowed on this\n    |\n-help: primitive type `char` doesn't have type parameters\n+help: primitive type `char` doesn't have generic parameters\n    |\n LL - let _x: char<'static>;\n LL + let _x: char;"}, {"sha": "c657f0faa0b98a64ba2a0252ad8e9d6cf579759a", "filename": "src/test/ui/usize-generic-argument-parent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd8cfbfb098f8e1da086ee7d164af03e3fdde189/src%2Ftest%2Fui%2Fusize-generic-argument-parent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8cfbfb098f8e1da086ee7d164af03e3fdde189/src%2Ftest%2Fui%2Fusize-generic-argument-parent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fusize-generic-argument-parent.stderr?ref=cd8cfbfb098f8e1da086ee7d164af03e3fdde189", "patch": "@@ -6,7 +6,7 @@ LL |     let x: usize<foo>;\n    |            |\n    |            not allowed on this\n    |\n-help: primitive type `usize` doesn't have type parameters\n+help: primitive type `usize` doesn't have generic parameters\n    |\n LL -     let x: usize<foo>;\n LL +     let x: usize;"}]}