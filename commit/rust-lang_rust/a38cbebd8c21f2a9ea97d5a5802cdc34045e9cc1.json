{"sha": "a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzOGNiZWJkOGMyMWYyYTllYTk3ZDVhNTgwMmNkYzM0MDQ1ZTljYzE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-01T22:15:15Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-03T00:49:31Z"}, "message": "libstd: Remove `fn@`, `fn~`, and `fn&` from libstd. rs=defun", "tree": {"sha": "127ac6ab5d79bb137a7d215f84969bb3a8ce3a28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/127ac6ab5d79bb137a7d215f84969bb3a8ce3a28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1", "html_url": "https://github.com/rust-lang/rust/commit/a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "256afb8a1057fdbe7bca2860af1ddb6ef0768d5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c", "html_url": "https://github.com/rust-lang/rust/commit/256afb8a1057fdbe7bca2860af1ddb6ef0768d5c"}], "stats": {"total": 83, "additions": 43, "deletions": 40}, "files": [{"sha": "30538a129425a5eae0f6f9a1c9b3b1e44f8fa6df", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1", "patch": "@@ -53,7 +53,7 @@ pub struct CVec<T> {\n }\n \n struct DtorRes {\n-  dtor: Option<fn@()>,\n+  dtor: Option<@fn()>,\n }\n \n impl Drop for DtorRes {\n@@ -65,7 +65,7 @@ impl Drop for DtorRes {\n     }\n }\n \n-fn DtorRes(dtor: Option<fn@()>) -> DtorRes {\n+fn DtorRes(dtor: Option<@fn()>) -> DtorRes {\n     DtorRes {\n         dtor: dtor\n     }\n@@ -102,7 +102,7 @@ pub unsafe fn CVec<T>(base: *mut T, len: uint) -> CVec<T> {\n  * * dtor - A function to run when the value is destructed, useful\n  *          for freeing the buffer, etc.\n  */\n-pub unsafe fn c_vec_with_dtor<T>(base: *mut T, len: uint, dtor: fn@())\n+pub unsafe fn c_vec_with_dtor<T>(base: *mut T, len: uint, dtor: @fn())\n   -> CVec<T> {\n     return CVec{\n         base: base,"}, {"sha": "990c37ce807ec773003cfd78724b387ab4108564", "filename": "src/libstd/future.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1", "patch": "@@ -37,13 +37,13 @@ pub struct Future<A> {\n }\n \n // FIXME(#2829) -- futures should not be copyable, because they close\n-// over fn~'s that have pipes and so forth within!\n+// over ~fn's that have pipes and so forth within!\n impl<A> Drop for Future<A> {\n     fn finalize(&self) {}\n }\n \n priv enum FutureState<A> {\n-    Pending(fn~() -> A),\n+    Pending(~fn() -> A),\n     Evaluating,\n     Forced(A)\n }\n@@ -125,7 +125,7 @@ pub fn from_fn<A>(f: ~fn() -> A) -> Future<A> {\n     Future {state: Pending(f)}\n }\n \n-pub fn spawn<A:Owned>(blk: fn~() -> A) -> Future<A> {\n+pub fn spawn<A:Owned>(blk: ~fn() -> A) -> Future<A> {\n     /*!\n      * Create a future from a unique closure.\n      *"}, {"sha": "5b116705698fd48ff81c694eec0cc1bd47ade29f", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1", "patch": "@@ -625,8 +625,8 @@ pub fn accept(new_conn: TcpNewConnection)\n  */\n pub fn listen(host_ip: ip::IpAddr, port: uint, backlog: uint,\n               iotask: &IoTask,\n-              on_establish_cb: fn~(SharedChan<Option<TcpErrData>>),\n-              new_connect_cb: fn~(TcpNewConnection,\n+              on_establish_cb: ~fn(SharedChan<Option<TcpErrData>>),\n+              new_connect_cb: ~fn(TcpNewConnection,\n                                   SharedChan<Option<TcpErrData>>))\n     -> result::Result<(), TcpListenErrData> {\n     do listen_common(host_ip, port, backlog, iotask,\n@@ -643,11 +643,13 @@ pub fn listen(host_ip: ip::IpAddr, port: uint, backlog: uint,\n     }\n }\n \n-fn listen_common(host_ip: ip::IpAddr, port: uint, backlog: uint,\n-          iotask: &IoTask,\n-          on_establish_cb: fn~(SharedChan<Option<TcpErrData>>),\n-          on_connect_cb: fn~(*uv::ll::uv_tcp_t))\n-    -> result::Result<(), TcpListenErrData> {\n+fn listen_common(host_ip: ip::IpAddr,\n+                 port: uint,\n+                 backlog: uint,\n+                 iotask: &IoTask,\n+                 on_establish_cb: ~fn(SharedChan<Option<TcpErrData>>),\n+                 on_connect_cb: ~fn(*uv::ll::uv_tcp_t))\n+              -> result::Result<(), TcpListenErrData> {\n     unsafe {\n         let (stream_closed_po, stream_closed_ch) = stream::<()>();\n         let stream_closed_ch = SharedChan(stream_closed_ch);\n@@ -1197,7 +1199,7 @@ struct TcpListenFcData {\n     server_stream_ptr: *uv::ll::uv_tcp_t,\n     stream_closed_ch: SharedChan<()>,\n     kill_ch: SharedChan<Option<TcpErrData>>,\n-    on_connect_cb: fn~(*uv::ll::uv_tcp_t),\n+    on_connect_cb: ~fn(*uv::ll::uv_tcp_t),\n     iotask: IoTask,\n     ipv6: bool,\n     mut active: bool,"}, {"sha": "d65921f910cb4ac009e83caa865c12c21de06ce0", "filename": "src/libstd/par.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1/src%2Flibstd%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1/src%2Flibstd%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpar.rs?ref=a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1", "patch": "@@ -94,24 +94,24 @@ pub fn map<A:Copy + Owned,B:Copy + Owned>(\n     xs: &[A], fn_factory: &fn() -> ~fn(&A) -> B) -> ~[B] {\n     vec::concat(map_slices(xs, || {\n         let f = fn_factory();\n-        fn~(_base: uint, slice : &[A]) -> ~[B] {\n-            vec::map(slice, |x| f(x))\n-        }\n+        let result: ~fn(uint, &[A]) -> ~[B] =\n+            |_, slice| vec::map(slice, |x| f(x));\n+        result\n     }))\n }\n \n /// A parallel version of mapi.\n pub fn mapi<A:Copy + Owned,B:Copy + Owned>(\n-    xs: &[A],\n-    fn_factory: &fn() -> ~fn(uint, &A) -> B) -> ~[B]\n-{\n+        xs: &[A],\n+        fn_factory: &fn() -> ~fn(uint, &A) -> B) -> ~[B] {\n     let slices = map_slices(xs, || {\n         let f = fn_factory();\n-        fn~(base: uint, slice : &[A]) -> ~[B] {\n+        let result: ~fn(uint, &[A]) -> ~[B] = |base, slice| {\n             vec::mapi(slice, |i, x| {\n                 f(i + base, x)\n             })\n-        }\n+        };\n+        result\n     });\n     let r = vec::concat(slices);\n     log(info, (r.len(), xs.len()));\n@@ -126,11 +126,12 @@ pub fn alli<A:Copy + Owned>(\n {\n     do vec::all(map_slices(xs, || {\n         let f = fn_factory();\n-        fn~(base: uint, slice : &[A]) -> bool {\n+        let result: ~fn(uint, &[A]) -> bool = |base, slice| {\n             vec::alli(slice, |i, x| {\n                 f(i + base, x)\n             })\n-        }\n+        };\n+        result\n     })) |x| { *x }\n }\n \n@@ -140,8 +141,8 @@ pub fn any<A:Copy + Owned>(\n     fn_factory: &fn() -> ~fn(&A) -> bool) -> bool {\n     do vec::any(map_slices(xs, || {\n         let f = fn_factory();\n-        fn~(_base : uint, slice: &[A]) -> bool {\n-            vec::any(slice, |x| f(x))\n-        }\n+        let result: ~fn(uint, &[A]) -> bool =\n+            |_, slice| vec::any(slice, |x| f(x));\n+        result\n     })) |x| { *x }\n }"}, {"sha": "4ffa9b01d2b10c0232b84196152ba83b84fe4aae", "filename": "src/libstd/test.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1", "patch": "@@ -409,7 +409,7 @@ type MonitorMsg = (TestDesc, TestResult);\n \n fn run_tests(opts: &TestOpts,\n              tests: ~[TestDescAndFn],\n-             callback: fn@(e: TestEvent)) {\n+             callback: @fn(e: TestEvent)) {\n     let mut filtered_tests = filter_tests(opts, tests);\n \n     let filtered_descs = filtered_tests.map(|t| t.desc);\n@@ -537,7 +537,7 @@ pub fn filter_tests(\n \n struct TestFuture {\n     test: TestDesc,\n-    wait: fn@() -> TestResult,\n+    wait: @fn() -> TestResult,\n }\n \n pub fn run_test(force_ignore: bool,\n@@ -782,7 +782,7 @@ mod tests {\n                 ignore: true,\n                 should_fail: false\n             },\n-            testfn: DynTestFn(fn~() { f()}),\n+            testfn: DynTestFn(|| f()),\n         };\n         let (p, ch) = stream();\n         let ch = SharedChan(ch);\n@@ -800,7 +800,7 @@ mod tests {\n                 ignore: true,\n                 should_fail: false\n             },\n-            testfn: DynTestFn(fn~() { f()}),\n+            testfn: DynTestFn(|| f()),\n         };\n         let (p, ch) = stream();\n         let ch = SharedChan(ch);\n@@ -819,7 +819,7 @@ mod tests {\n                 ignore: false,\n                 should_fail: true\n             },\n-            testfn: DynTestFn(fn~() { f() }),\n+            testfn: DynTestFn(|| f()),\n         };\n         let (p, ch) = stream();\n         let ch = SharedChan(ch);\n@@ -837,7 +837,7 @@ mod tests {\n                 ignore: false,\n                 should_fail: true\n             },\n-            testfn: DynTestFn(fn~() { f() }),\n+            testfn: DynTestFn(|| f()),\n         };\n         let (p, ch) = stream();\n         let ch = SharedChan(ch);\n@@ -890,15 +890,15 @@ mod tests {\n                     ignore: true,\n                     should_fail: false,\n                 },\n-                testfn: DynTestFn(fn~() { }),\n+                testfn: DynTestFn(|| {}),\n             },\n             TestDescAndFn {\n                 desc: TestDesc {\n                     name: StaticTestName(\"2\"),\n                     ignore: false,\n                     should_fail: false\n                 },\n-                testfn: DynTestFn(fn~() { }),\n+                testfn: DynTestFn(|| {}),\n             },\n         ];\n         let filtered = filter_tests(&opts, tests);"}, {"sha": "daf90f345e052b6ba3d02474af6921629e7488fe", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1", "patch": "@@ -97,7 +97,7 @@ fn get_monitor_task_gl() -> IoTask {\n \n fn spawn_loop() -> IoTask {\n     let builder = do task().add_wrapper |task_body| {\n-        fn~() {\n+        let result: ~fn() = || {\n             // The I/O loop task also needs to be weak so it doesn't keep\n             // the runtime alive\n             unsafe {\n@@ -112,7 +112,8 @@ fn spawn_loop() -> IoTask {\n                     debug!(\"global libuv task is leaving weakened state\");\n                 }\n             }\n-        }\n+        };\n+        result\n     };\n     let builder = builder.unlinked();\n     spawn_iotask(builder)"}, {"sha": "6179b10f3c373bcdfed3d92b2d0c692736291e5a", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=a38cbebd8c21f2a9ea97d5a5802cdc34045e9cc1", "patch": "@@ -76,8 +76,7 @@ pub fn spawn_iotask(task: task::TaskBuilder) -> IoTask {\n  * module. It is not safe to send the `loop_ptr` param to this callback out\n  * via ports/chans.\n  */\n-pub unsafe fn interact(iotask: &IoTask,\n-                   cb: fn~(*c_void)) {\n+pub unsafe fn interact(iotask: &IoTask, cb: ~fn(*c_void)) {\n     send_msg(iotask, Interaction(cb));\n }\n \n@@ -98,7 +97,7 @@ pub fn exit(iotask: &IoTask) {\n // INTERNAL API\n \n enum IoTaskMsg {\n-    Interaction (fn~(*libc::c_void)),\n+    Interaction(~fn(*libc::c_void)),\n     TeardownLoop\n }\n "}]}