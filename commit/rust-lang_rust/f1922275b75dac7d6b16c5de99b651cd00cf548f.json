{"sha": "f1922275b75dac7d6b16c5de99b651cd00cf548f", "node_id": "C_kwDOAAsO6NoAKGYxOTIyMjc1Yjc1ZGFjN2Q2YjE2YzVkZTk5YjY1MWNkMDBjZjU0OGY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-10T04:12:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-10T04:12:13Z"}, "message": "Rollup merge of #110747 - oli-obk:smirty, r=spastorino\n\nEncode types in SMIR\n\nThe first commit makes sure we can actually store a Ty<'tcx> (with the lifetime) in the thread local and get it back out. The second commit then introduces types.\n\nr? `@spastorino`", "tree": {"sha": "7d780c7b14f4fb08be2b007d254d7a9aab25de5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d780c7b14f4fb08be2b007d254d7a9aab25de5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1922275b75dac7d6b16c5de99b651cd00cf548f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkWxmdCRBK7hj4Ov3rIwAAXfQIAFRLFJZ3S+JGC1Hq1tYLnSu5\nX3OvL9xpDrbCc8sOQUyOVpyvZgu1WccLM4nRCnYpIqeUp45CWsQVMdDYKuqoqC+x\nsfwchSADGaex8UG88bAFjUjPrzyhu8ar35q3Pv7t0YqqF+hL2QMZ1x1y4S2gIvAH\ngx9yBCugNcAupyuXafCnVdOEYk/U8NF9d+u/LD5/n2YF5PswU13hUN/x4YQv/ukV\nHQ6zKmp5KPIaCtm6gKrVlyk+pKs5tCY1eJDPDOTq3y7iogNDNSYUvoVGj/cYgYP5\nIz00Z40Hentkjfg5i8Fh3sD4y59lAhuFilVE19XgjYLEHwpweqcu3ocsSxjHpYs=\n=HsyI\n-----END PGP SIGNATURE-----\n", "payload": "tree 7d780c7b14f4fb08be2b007d254d7a9aab25de5f\nparent c14d912cd2618e45923480646e69e397991f9eef\nparent 5c6e2342f61ed9296fafb3781f0a89675a470eb9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1683691933 +0200\ncommitter GitHub <noreply@github.com> 1683691933 +0200\n\nRollup merge of #110747 - oli-obk:smirty, r=spastorino\n\nEncode types in SMIR\n\nThe first commit makes sure we can actually store a Ty<'tcx> (with the lifetime) in the thread local and get it back out. The second commit then introduces types.\n\nr? `@spastorino`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1922275b75dac7d6b16c5de99b651cd00cf548f", "html_url": "https://github.com/rust-lang/rust/commit/f1922275b75dac7d6b16c5de99b651cd00cf548f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1922275b75dac7d6b16c5de99b651cd00cf548f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c14d912cd2618e45923480646e69e397991f9eef", "url": "https://api.github.com/repos/rust-lang/rust/commits/c14d912cd2618e45923480646e69e397991f9eef", "html_url": "https://github.com/rust-lang/rust/commit/c14d912cd2618e45923480646e69e397991f9eef"}, {"sha": "5c6e2342f61ed9296fafb3781f0a89675a470eb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c6e2342f61ed9296fafb3781f0a89675a470eb9", "html_url": "https://github.com/rust-lang/rust/commit/5c6e2342f61ed9296fafb3781f0a89675a470eb9"}], "stats": {"total": 270, "additions": 207, "deletions": 63}, "files": [{"sha": "b00f0a1c1531236a409c8bfe4eff24ab4f64a7cd", "filename": "compiler/rustc_smir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1922275b75dac7d6b16c5de99b651cd00cf548f/compiler%2Frustc_smir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1922275b75dac7d6b16c5de99b651cd00cf548f/compiler%2Frustc_smir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Flib.rs?ref=f1922275b75dac7d6b16c5de99b651cd00cf548f", "patch": "@@ -11,6 +11,8 @@\n     test(attr(allow(unused_variables), deny(warnings)))\n )]\n #![cfg_attr(not(feature = \"default\"), feature(rustc_private))]\n+#![feature(local_key_cell_methods)]\n+#![feature(ptr_metadata)]\n \n pub mod rustc_internal;\n pub mod stable_mir;"}, {"sha": "609a04d263c961eabe7092aba59bd1b66544668a", "filename": "compiler/rustc_smir/src/rustc_internal/mod.rs", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f1922275b75dac7d6b16c5de99b651cd00cf548f/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1922275b75dac7d6b16c5de99b651cd00cf548f/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs?ref=f1922275b75dac7d6b16c5de99b651cd00cf548f", "patch": "@@ -3,30 +3,49 @@\n //! For that, we define APIs that will temporarily be public to 3P that exposes rustc internal APIs\n //! until stable MIR is complete.\n \n-use std::sync::RwLock;\n-\n-use crate::stable_mir;\n+use crate::{\n+    rustc_smir::Tables,\n+    stable_mir::{self, with},\n+};\n+use rustc_middle::ty::TyCtxt;\n pub use rustc_span::def_id::{CrateNum, DefId};\n \n-static DEF_ID_MAP: RwLock<Vec<DefId>> = RwLock::new(Vec::new());\n+fn with_tables<R>(mut f: impl FnMut(&mut Tables<'_>) -> R) -> R {\n+    let mut ret = None;\n+    with(|tables| tables.rustc_tables(&mut |t| ret = Some(f(t))));\n+    ret.unwrap()\n+}\n \n pub fn item_def_id(item: &stable_mir::CrateItem) -> DefId {\n-    DEF_ID_MAP.read().unwrap()[item.0]\n+    with_tables(|t| t.item_def_id(item))\n }\n \n pub fn crate_item(did: DefId) -> stable_mir::CrateItem {\n-    // FIXME: this becomes inefficient when we have too many ids\n-    let mut map = DEF_ID_MAP.write().unwrap();\n-    for (i, &d) in map.iter().enumerate() {\n-        if d == did {\n-            return stable_mir::CrateItem(i);\n+    with_tables(|t| t.crate_item(did))\n+}\n+\n+impl<'tcx> Tables<'tcx> {\n+    pub fn item_def_id(&self, item: &stable_mir::CrateItem) -> DefId {\n+        self.def_ids[item.0]\n+    }\n+\n+    pub fn crate_item(&mut self, did: DefId) -> stable_mir::CrateItem {\n+        // FIXME: this becomes inefficient when we have too many ids\n+        for (i, &d) in self.def_ids.iter().enumerate() {\n+            if d == did {\n+                return stable_mir::CrateItem(i);\n+            }\n         }\n+        let id = self.def_ids.len();\n+        self.def_ids.push(did);\n+        stable_mir::CrateItem(id)\n     }\n-    let id = map.len();\n-    map.push(did);\n-    stable_mir::CrateItem(id)\n }\n \n pub fn crate_num(item: &stable_mir::Crate) -> CrateNum {\n     item.id.into()\n }\n+\n+pub fn run(tcx: TyCtxt<'_>, f: impl FnOnce()) {\n+    crate::stable_mir::run(Tables { tcx, def_ids: vec![], types: vec![] }, f);\n+}"}, {"sha": "6af43f5d3f358fe73aed0a4fa5cf913c1d20b30f", "filename": "compiler/rustc_smir/src/rustc_smir/mod.rs", "status": "modified", "additions": 92, "deletions": 43, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/f1922275b75dac7d6b16c5de99b651cd00cf548f/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1922275b75dac7d6b16c5de99b651cd00cf548f/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs?ref=f1922275b75dac7d6b16c5de99b651cd00cf548f", "patch": "@@ -7,41 +7,107 @@\n //!\n //! For now, we are developing everything inside `rustc`, thus, we keep this module private.\n \n-use crate::{\n-    rustc_internal::{crate_item, item_def_id},\n-    stable_mir::{self},\n-};\n-use rustc_middle::ty::{tls::with, TyCtxt};\n-use rustc_span::def_id::{CrateNum, LOCAL_CRATE};\n+use crate::stable_mir::{self, ty::TyKind, Context};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_span::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use tracing::debug;\n \n-/// Get information about the local crate.\n-pub fn local_crate() -> stable_mir::Crate {\n-    with(|tcx| smir_crate(tcx, LOCAL_CRATE))\n-}\n+impl<'tcx> Context for Tables<'tcx> {\n+    fn local_crate(&self) -> stable_mir::Crate {\n+        smir_crate(self.tcx, LOCAL_CRATE)\n+    }\n \n-/// Retrieve a list of all external crates.\n-pub fn external_crates() -> Vec<stable_mir::Crate> {\n-    with(|tcx| tcx.crates(()).iter().map(|crate_num| smir_crate(tcx, *crate_num)).collect())\n-}\n+    fn external_crates(&self) -> Vec<stable_mir::Crate> {\n+        self.tcx.crates(()).iter().map(|crate_num| smir_crate(self.tcx, *crate_num)).collect()\n+    }\n \n-/// Find a crate with the given name.\n-pub fn find_crate(name: &str) -> Option<stable_mir::Crate> {\n-    with(|tcx| {\n-        [LOCAL_CRATE].iter().chain(tcx.crates(()).iter()).find_map(|crate_num| {\n-            let crate_name = tcx.crate_name(*crate_num).to_string();\n-            (name == crate_name).then(|| smir_crate(tcx, *crate_num))\n+    fn find_crate(&self, name: &str) -> Option<stable_mir::Crate> {\n+        [LOCAL_CRATE].iter().chain(self.tcx.crates(()).iter()).find_map(|crate_num| {\n+            let crate_name = self.tcx.crate_name(*crate_num).to_string();\n+            (name == crate_name).then(|| smir_crate(self.tcx, *crate_num))\n         })\n-    })\n+    }\n+\n+    fn all_local_items(&mut self) -> stable_mir::CrateItems {\n+        self.tcx.mir_keys(()).iter().map(|item| self.crate_item(item.to_def_id())).collect()\n+    }\n+    fn entry_fn(&mut self) -> Option<stable_mir::CrateItem> {\n+        Some(self.crate_item(self.tcx.entry_fn(())?.0))\n+    }\n+    fn mir_body(&mut self, item: &stable_mir::CrateItem) -> stable_mir::mir::Body {\n+        let def_id = self.item_def_id(item);\n+        let mir = self.tcx.optimized_mir(def_id);\n+        stable_mir::mir::Body {\n+            blocks: mir\n+                .basic_blocks\n+                .iter()\n+                .map(|block| stable_mir::mir::BasicBlock {\n+                    terminator: rustc_terminator_to_terminator(block.terminator()),\n+                    statements: block.statements.iter().map(rustc_statement_to_statement).collect(),\n+                })\n+                .collect(),\n+            locals: mir.local_decls.iter().map(|decl| self.intern_ty(decl.ty)).collect(),\n+        }\n+    }\n+\n+    fn rustc_tables(&mut self, f: &mut dyn FnMut(&mut Tables<'_>)) {\n+        f(self)\n+    }\n+\n+    fn ty_kind(&mut self, ty: crate::stable_mir::ty::Ty) -> TyKind {\n+        self.rustc_ty_to_ty(self.types[ty.0])\n+    }\n }\n \n-/// Retrieve all items of the local crate that have a MIR associated with them.\n-pub fn all_local_items() -> stable_mir::CrateItems {\n-    with(|tcx| tcx.mir_keys(()).iter().map(|item| crate_item(item.to_def_id())).collect())\n+pub struct Tables<'tcx> {\n+    pub tcx: TyCtxt<'tcx>,\n+    pub def_ids: Vec<DefId>,\n+    pub types: Vec<Ty<'tcx>>,\n }\n \n-pub fn entry_fn() -> Option<stable_mir::CrateItem> {\n-    with(|tcx| Some(crate_item(tcx.entry_fn(())?.0)))\n+impl<'tcx> Tables<'tcx> {\n+    fn rustc_ty_to_ty(&mut self, ty: Ty<'tcx>) -> TyKind {\n+        match ty.kind() {\n+            ty::Bool => TyKind::Bool,\n+            ty::Char => todo!(),\n+            ty::Int(_) => todo!(),\n+            ty::Uint(_) => todo!(),\n+            ty::Float(_) => todo!(),\n+            ty::Adt(_, _) => todo!(),\n+            ty::Foreign(_) => todo!(),\n+            ty::Str => todo!(),\n+            ty::Array(_, _) => todo!(),\n+            ty::Slice(_) => todo!(),\n+            ty::RawPtr(_) => todo!(),\n+            ty::Ref(_, _, _) => todo!(),\n+            ty::FnDef(_, _) => todo!(),\n+            ty::FnPtr(_) => todo!(),\n+            ty::Placeholder(..) => todo!(),\n+            ty::Dynamic(_, _, _) => todo!(),\n+            ty::Closure(_, _) => todo!(),\n+            ty::Generator(_, _, _) => todo!(),\n+            ty::GeneratorWitness(_) => todo!(),\n+            ty::GeneratorWitnessMIR(_, _) => todo!(),\n+            ty::Never => todo!(),\n+            ty::Tuple(fields) => {\n+                TyKind::Tuple(fields.iter().map(|ty| self.intern_ty(ty)).collect())\n+            }\n+            ty::Alias(_, _) => todo!(),\n+            ty::Param(_) => todo!(),\n+            ty::Bound(_, _) => todo!(),\n+            ty::Infer(_) => todo!(),\n+            ty::Error(_) => todo!(),\n+        }\n+    }\n+\n+    fn intern_ty(&mut self, ty: Ty<'tcx>) -> stable_mir::ty::Ty {\n+        if let Some(id) = self.types.iter().position(|&t| t == ty) {\n+            return stable_mir::ty::Ty(id);\n+        }\n+        let id = self.types.len();\n+        self.types.push(ty);\n+        stable_mir::ty::Ty(id)\n+    }\n }\n \n /// Build a stable mir crate from a given crate number.\n@@ -52,23 +118,6 @@ fn smir_crate(tcx: TyCtxt<'_>, crate_num: CrateNum) -> stable_mir::Crate {\n     stable_mir::Crate { id: crate_num.into(), name: crate_name, is_local }\n }\n \n-pub fn mir_body(item: &stable_mir::CrateItem) -> stable_mir::mir::Body {\n-    with(|tcx| {\n-        let def_id = item_def_id(item);\n-        let mir = tcx.optimized_mir(def_id);\n-        stable_mir::mir::Body {\n-            blocks: mir\n-                .basic_blocks\n-                .iter()\n-                .map(|block| stable_mir::mir::BasicBlock {\n-                    terminator: rustc_terminator_to_terminator(block.terminator()),\n-                    statements: block.statements.iter().map(rustc_statement_to_statement).collect(),\n-                })\n-                .collect(),\n-        }\n-    })\n-}\n-\n fn rustc_statement_to_statement(\n     s: &rustc_middle::mir::Statement<'_>,\n ) -> stable_mir::mir::Statement {"}, {"sha": "6328c35aa5982f563e4c4e127a20ddd35f214228", "filename": "compiler/rustc_smir/src/stable_mir/mir/body.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1922275b75dac7d6b16c5de99b651cd00cf548f/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1922275b75dac7d6b16c5de99b651cd00cf548f/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs?ref=f1922275b75dac7d6b16c5de99b651cd00cf548f", "patch": "@@ -1,6 +1,9 @@\n+use crate::stable_mir::ty::Ty;\n+\n #[derive(Clone, Debug)]\n pub struct Body {\n     pub blocks: Vec<BasicBlock>,\n+    pub locals: Vec<Ty>,\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "612777b9c75395d279f91d9e278ff652d548e599", "filename": "compiler/rustc_smir/src/stable_mir/mod.rs", "status": "modified", "additions": 60, "deletions": 6, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/f1922275b75dac7d6b16c5de99b651cd00cf548f/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1922275b75dac7d6b16c5de99b651cd00cf548f/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs?ref=f1922275b75dac7d6b16c5de99b651cd00cf548f", "patch": "@@ -11,7 +11,14 @@\n //! There shouldn't be any direct references to internal compiler constructs in this module.\n //! If you need an internal construct, consider using `rustc_internal` or `rustc_smir`.\n \n+use std::cell::Cell;\n+\n+use crate::rustc_smir::Tables;\n+\n+use self::ty::{Ty, TyKind};\n+\n pub mod mir;\n+pub mod ty;\n \n /// Use String for now but we should replace it.\n pub type Symbol = String;\n@@ -41,33 +48,80 @@ pub struct CrateItem(pub(crate) DefId);\n \n impl CrateItem {\n     pub fn body(&self) -> mir::Body {\n-        crate::rustc_smir::mir_body(self)\n+        with(|cx| cx.mir_body(self))\n     }\n }\n \n /// Return the function where execution starts if the current\n /// crate defines that. This is usually `main`, but could be\n /// `start` if the crate is a no-std crate.\n pub fn entry_fn() -> Option<CrateItem> {\n-    crate::rustc_smir::entry_fn()\n+    with(|cx| cx.entry_fn())\n }\n \n /// Access to the local crate.\n pub fn local_crate() -> Crate {\n-    crate::rustc_smir::local_crate()\n+    with(|cx| cx.local_crate())\n }\n \n /// Try to find a crate with the given name.\n pub fn find_crate(name: &str) -> Option<Crate> {\n-    crate::rustc_smir::find_crate(name)\n+    with(|cx| cx.find_crate(name))\n }\n \n /// Try to find a crate with the given name.\n pub fn external_crates() -> Vec<Crate> {\n-    crate::rustc_smir::external_crates()\n+    with(|cx| cx.external_crates())\n }\n \n /// Retrieve all items in the local crate that have a MIR associated with them.\n pub fn all_local_items() -> CrateItems {\n-    crate::rustc_smir::all_local_items()\n+    with(|cx| cx.all_local_items())\n+}\n+\n+pub trait Context {\n+    fn entry_fn(&mut self) -> Option<CrateItem>;\n+    /// Retrieve all items of the local crate that have a MIR associated with them.\n+    fn all_local_items(&mut self) -> CrateItems;\n+    fn mir_body(&mut self, item: &CrateItem) -> mir::Body;\n+    /// Get information about the local crate.\n+    fn local_crate(&self) -> Crate;\n+    /// Retrieve a list of all external crates.\n+    fn external_crates(&self) -> Vec<Crate>;\n+\n+    /// Find a crate with the given name.\n+    fn find_crate(&self, name: &str) -> Option<Crate>;\n+\n+    /// Obtain the representation of a type.\n+    fn ty_kind(&mut self, ty: Ty) -> TyKind;\n+\n+    /// HACK: Until we have fully stable consumers, we need an escape hatch\n+    /// to get `DefId`s out of `CrateItem`s.\n+    fn rustc_tables(&mut self, f: &mut dyn FnMut(&mut Tables<'_>));\n+}\n+\n+thread_local! {\n+    /// A thread local variable that stores a pointer to the tables mapping between TyCtxt\n+    /// datastructures and stable MIR datastructures.\n+    static TLV: Cell<*mut ()> = const { Cell::new(std::ptr::null_mut()) };\n+}\n+\n+pub fn run(mut context: impl Context, f: impl FnOnce()) {\n+    assert!(TLV.get().is_null());\n+    fn g<'a>(mut context: &mut (dyn Context + 'a), f: impl FnOnce()) {\n+        TLV.set(&mut context as *mut &mut _ as _);\n+        f();\n+        TLV.replace(std::ptr::null_mut());\n+    }\n+    g(&mut context, f);\n+}\n+\n+/// Loads the current context and calls a function with it.\n+/// Do not nest these, as that will ICE.\n+pub(crate) fn with<R>(f: impl FnOnce(&mut dyn Context) -> R) -> R {\n+    let ptr = TLV.replace(std::ptr::null_mut()) as *mut &mut dyn Context;\n+    assert!(!ptr.is_null());\n+    let ret = f(unsafe { *ptr });\n+    TLV.set(ptr as _);\n+    ret\n }"}, {"sha": "f27801b0f6caec31947c984b6ca4f3575057b736", "filename": "compiler/rustc_smir/src/stable_mir/ty.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1922275b75dac7d6b16c5de99b651cd00cf548f/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1922275b75dac7d6b16c5de99b651cd00cf548f/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fty.rs?ref=f1922275b75dac7d6b16c5de99b651cd00cf548f", "patch": "@@ -0,0 +1,15 @@\n+use super::with;\n+\n+#[derive(Copy, Clone, Debug)]\n+pub struct Ty(pub usize);\n+\n+impl Ty {\n+    pub fn kind(&self) -> TyKind {\n+        with(|context| context.ty_kind(*self))\n+    }\n+}\n+\n+pub enum TyKind {\n+    Bool,\n+    Tuple(Vec<Ty>),\n+}"}, {"sha": "a3db2e9ef24c4a2db9e86dd0078b9b3e546e5fa2", "filename": "tests/ui-fulldeps/stable-mir/crate-info.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1922275b75dac7d6b16c5de99b651cd00cf548f/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1922275b75dac7d6b16c5de99b651cd00cf548f/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs?ref=f1922275b75dac7d6b16c5de99b651cd00cf548f", "patch": "@@ -40,6 +40,7 @@ fn test_stable_mir(tcx: TyCtxt<'_>) {\n \n     let bar = get_item(tcx, &items, (DefKind::Fn, \"bar\")).unwrap();\n     let body = bar.body();\n+    assert_eq!(body.locals.len(), 2);\n     assert_eq!(body.blocks.len(), 1);\n     let block = &body.blocks[0];\n     assert_eq!(block.statements.len(), 1);\n@@ -54,6 +55,7 @@ fn test_stable_mir(tcx: TyCtxt<'_>) {\n \n     let foo_bar = get_item(tcx, &items, (DefKind::Fn, \"foo_bar\")).unwrap();\n     let body = foo_bar.body();\n+    assert_eq!(body.locals.len(), 7);\n     assert_eq!(body.blocks.len(), 4);\n     let block = &body.blocks[0];\n     match &block.terminator {\n@@ -123,7 +125,7 @@ impl Callbacks for SMirCalls {\n         queries: &'tcx Queries<'tcx>,\n     ) -> Compilation {\n         queries.global_ctxt().unwrap().enter(|tcx| {\n-            test_stable_mir(tcx);\n+            rustc_smir::rustc_internal::run(tcx, || test_stable_mir(tcx));\n         });\n         // No need to keep going.\n         Compilation::Stop"}]}