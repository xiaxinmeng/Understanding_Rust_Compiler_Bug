{"sha": "e7f20335a66cb175a3754391b60c0a202410e5cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZjIwMzM1YTY2Y2IxNzVhMzc1NDM5MWI2MGMwYTIwMjQxMGU1Y2Y=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-04-21T21:06:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-21T21:06:19Z"}, "message": "Rollup merge of #84379 - marmeladema:test-for-issue-79949, r=jackh726\n\nAdd GAT related tests\n\nCloses #79949\nCloses #79636\nCloses #78671\nCloses #70303\nCloses #70304\nCloses #71176", "tree": {"sha": "0f29025b62428fc34831bb6af60fa63822f6b779", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f29025b62428fc34831bb6af60fa63822f6b779"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7f20335a66cb175a3754391b60c0a202410e5cf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJggJPLCRBK7hj4Ov3rIwAA708IAAbKmnm/XI+OunKqu5YfCLFs\nxUzcM4OQSOFmJWfwtMQ2ge8bptNvcKqf0TXUM0ZAe3DKFywmqySbB4BZ2hfaC46Q\n2QCZGjZLU7lRfUWLEokRpY65m6JW9zYmsTG/2YvYsAjzXtkniCjHKUPF4pNw2mhT\nlpis2KL9WyjLbwRI5siXM4IK6jcko6xAWHRD939xF0uCsN3waQINxRg95tbl8Bwn\nw0+lu+3NrR+xm63mXehP6ISDVfl5K0dhWqDTwFzlM0XqXH2XD2J/Rn2JPIHlFiK9\nJWJZeUvaTh8S6q8veQgdZeUEQzPvmK16T2CJ/bb/Cxcv9Bt3R3to75YiuKTUiWo=\n=SyZQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 0f29025b62428fc34831bb6af60fa63822f6b779\nparent 193b63159392654c16f4c8a04c30c44783a6f458\nparent d328dbc60f51a70f0c6eeec644af303719e563a4\nauthor Mara Bos <m-ou.se@m-ou.se> 1619039179 +0200\ncommitter GitHub <noreply@github.com> 1619039179 +0200\n\nRollup merge of #84379 - marmeladema:test-for-issue-79949, r=jackh726\n\nAdd GAT related tests\n\nCloses #79949\nCloses #79636\nCloses #78671\nCloses #70303\nCloses #70304\nCloses #71176\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7f20335a66cb175a3754391b60c0a202410e5cf", "html_url": "https://github.com/rust-lang/rust/commit/e7f20335a66cb175a3754391b60c0a202410e5cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7f20335a66cb175a3754391b60c0a202410e5cf/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "193b63159392654c16f4c8a04c30c44783a6f458", "url": "https://api.github.com/repos/rust-lang/rust/commits/193b63159392654c16f4c8a04c30c44783a6f458", "html_url": "https://github.com/rust-lang/rust/commit/193b63159392654c16f4c8a04c30c44783a6f458"}, {"sha": "d328dbc60f51a70f0c6eeec644af303719e563a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d328dbc60f51a70f0c6eeec644af303719e563a4", "html_url": "https://github.com/rust-lang/rust/commit/d328dbc60f51a70f0c6eeec644af303719e563a4"}], "stats": {"total": 317, "additions": 317, "deletions": 0}, "files": [{"sha": "9f924f1fd81d8bc2df40bc88ed41d342086baae3", "filename": "src/test/ui/associated-type-bounds/issue-79949.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-79949.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-79949.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-79949.rs?ref=e7f20335a66cb175a3754391b60c0a202410e5cf", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(associated_type_bounds)]\n+#![feature(generic_associated_types)]\n+\n+trait MP {\n+    type T<'a>;\n+}\n+struct S(String);\n+impl MP for S {\n+    type T<'a> = &'a str;\n+}\n+\n+trait SR: MP {\n+    fn sr<IM>(&self) -> i32\n+    where\n+        for<'a> IM: T<T: U<<Self as MP>::T<'a>>>;\n+}\n+\n+trait T {\n+    type T;\n+}\n+trait U<X> {}\n+\n+fn main() {}"}, {"sha": "a1cb2295b639ee348311773026f425bda5c2da18", "filename": "src/test/ui/generic-associated-types/issue-70303.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70303.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70303.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70303.rs?ref=e7f20335a66cb175a3754391b60c0a202410e5cf", "patch": "@@ -0,0 +1,60 @@\n+// check-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+trait Document {\n+    type Cursor<'a>: DocCursor<'a>;\n+\n+    fn cursor(&self) -> Self::Cursor<'_>;\n+}\n+\n+struct DocumentImpl {}\n+\n+impl Document for DocumentImpl {\n+    type Cursor<'a> = DocCursorImpl<'a>;\n+\n+    fn cursor(&self) -> Self::Cursor<'_> {\n+        DocCursorImpl {\n+            document: &self,\n+        }\n+    }\n+}\n+\n+\n+trait DocCursor<'a> {}\n+\n+struct DocCursorImpl<'a> {\n+    document: &'a DocumentImpl,\n+}\n+\n+impl<'a> DocCursor<'a> for DocCursorImpl<'a> {}\n+\n+struct Lexer<'d, Cursor>\n+where\n+    Cursor: DocCursor<'d>,\n+{\n+    cursor: Cursor,\n+    _phantom: std::marker::PhantomData<&'d ()>,\n+}\n+\n+\n+impl<'d, Cursor> Lexer<'d, Cursor>\n+where\n+    Cursor: DocCursor<'d>,\n+{\n+    pub fn from<Doc>(document: &'d Doc) -> Lexer<'d, Cursor>\n+    where\n+        Doc: Document<Cursor<'d> = Cursor>,\n+    {\n+        Lexer {\n+            cursor: document.cursor(),\n+            _phantom: std::marker::PhantomData,\n+        }\n+    }\n+}\n+\n+pub fn main() {\n+    let doc = DocumentImpl {};\n+    let lexer: Lexer<'_, DocCursorImpl<'_>> = Lexer::from(&doc);\n+}"}, {"sha": "225f61d132ee61b11db5b8489c3705bcd220430a", "filename": "src/test/ui/generic-associated-types/issue-70304.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.rs?ref=e7f20335a66cb175a3754391b60c0a202410e5cf", "patch": "@@ -0,0 +1,63 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+trait Document {\n+    type Cursor<'a>: DocCursor<'a>;\n+\n+    fn cursor(&self) -> Self::Cursor<'_>;\n+}\n+\n+struct DocumentImpl {}\n+\n+impl Document for DocumentImpl {\n+    type Cursor<'a> = DocCursorImpl<'a>;\n+\n+    fn cursor(&self) -> Self::Cursor<'_> {\n+        DocCursorImpl {\n+            document: &self,\n+        }\n+    }\n+}\n+\n+\n+trait DocCursor<'a> {}\n+\n+struct DocCursorImpl<'a> {\n+    document: &'a DocumentImpl,\n+}\n+\n+impl<'a> DocCursor<'a> for DocCursorImpl<'a> {}\n+\n+struct Lexer<'d, Cursor>\n+where\n+    Cursor: DocCursor<'d>,\n+{\n+    cursor: Cursor,\n+    _phantom: std::marker::PhantomData<&'d ()>,\n+}\n+\n+\n+impl<'d, Cursor> Lexer<'d, Cursor>\n+where\n+    Cursor: DocCursor<'d>,\n+{\n+    pub fn from<Doc>(document: &'d Doc) -> Lexer<'d, Cursor>\n+    where\n+        Doc: Document<Cursor<'d> = Cursor>,\n+    {\n+        Lexer {\n+            cursor: document.cursor(),\n+            _phantom: std::marker::PhantomData,\n+        }\n+    }\n+}\n+\n+fn create_doc() -> impl Document<Cursor<'_> = DocCursorImpl<'_>> {\n+                                       //~^ ERROR: missing lifetime specifier\n+    DocumentImpl {}\n+}\n+\n+pub fn main() {\n+    let doc = create_doc();\n+    let lexer: Lexer<'_, DocCursorImpl<'_>> = Lexer::from(&doc);\n+}"}, {"sha": "dfa86018976dc62ca1b6812fb6353c2057ab66c5", "filename": "src/test/ui/generic-associated-types/issue-70304.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.stderr?ref=e7f20335a66cb175a3754391b60c0a202410e5cf", "patch": "@@ -0,0 +1,15 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/issue-70304.rs:55:41\n+   |\n+LL | fn create_doc() -> impl Document<Cursor<'_> = DocCursorImpl<'_>> {\n+   |                                         ^^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL | fn create_doc() -> impl Document<Cursor<'static> = DocCursorImpl<'_>> {\n+   |                                         ^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "470476bf476a0a0aa4c34e0da13b8d6ffa2c9fc9", "filename": "src/test/ui/generic-associated-types/issue-71176.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.rs?ref=e7f20335a66cb175a3754391b60c0a202410e5cf", "patch": "@@ -0,0 +1,21 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+trait Provider {\n+    type A<'a>;\n+      //~^ ERROR: missing generics for associated type\n+}\n+\n+impl Provider for () {\n+    type A<'a> = ();\n+}\n+\n+struct Holder<B> {\n+  inner: Box<dyn Provider<A = B>>,\n+}\n+\n+fn main() {\n+    Holder {\n+        inner: Box::new(()),\n+    };\n+}"}, {"sha": "dd19dd4ad8e8307d7369b0be909e584d207b3d17", "filename": "src/test/ui/generic-associated-types/issue-71176.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.stderr?ref=e7f20335a66cb175a3754391b60c0a202410e5cf", "patch": "@@ -0,0 +1,19 @@\n+error[E0107]: missing generics for associated type `Provider::A`\n+  --> $DIR/issue-71176.rs:5:10\n+   |\n+LL |     type A<'a>;\n+   |          ^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-71176.rs:5:10\n+   |\n+LL |     type A<'a>;\n+   |          ^ --\n+help: use angle brackets to add missing lifetime argument\n+   |\n+LL |     type A<'a><'a>;\n+   |           ^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "1b02aac8bcb2481847ace23e5a1b5a3e59ce5fe9", "filename": "src/test/ui/generic-associated-types/issue-78671.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs?ref=e7f20335a66cb175a3754391b60c0a202410e5cf", "patch": "@@ -0,0 +1,14 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+trait CollectionFamily {\n+    type Member<T>;\n+         //~^ ERROR: missing generics for associated type\n+}\n+fn floatify() {\n+    Box::new(Family) as &dyn CollectionFamily<Member=usize>\n+}\n+\n+struct Family;\n+\n+fn main() {}"}, {"sha": "7a9aced5beab8f8eb0967b423dc7845a95f7a1bc", "filename": "src/test/ui/generic-associated-types/issue-78671.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr?ref=e7f20335a66cb175a3754391b60c0a202410e5cf", "patch": "@@ -0,0 +1,19 @@\n+error[E0107]: missing generics for associated type `CollectionFamily::Member`\n+  --> $DIR/issue-78671.rs:5:10\n+   |\n+LL |     type Member<T>;\n+   |          ^^^^^^ expected 1 type argument\n+   |\n+note: associated type defined here, with 1 type parameter: `T`\n+  --> $DIR/issue-78671.rs:5:10\n+   |\n+LL |     type Member<T>;\n+   |          ^^^^^^ -\n+help: use angle brackets to add missing type argument\n+   |\n+LL |     type Member<T><T>;\n+   |                ^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "17f9387e29204cf9019f6cb016ef80314ba6d948", "filename": "src/test/ui/generic-associated-types/issue-79636-1.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.rs?ref=e7f20335a66cb175a3754391b60c0a202410e5cf", "patch": "@@ -0,0 +1,24 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+trait Monad {\n+    type Unwrapped;\n+    type Wrapped<B>;\n+         //~^ ERROR: missing generics for associated type `Monad::Wrapped`\n+\n+    fn bind<B, F>(self, f: F) -> Self::Wrapped<B> {\n+        todo!()\n+    }\n+}\n+\n+fn join<MOuter, MInner, A>(outer: MOuter) -> MOuter::Wrapped<A>\n+where\n+    MOuter: Monad<Unwrapped = MInner>,\n+    MInner: Monad<Unwrapped = A, Wrapped = MOuter::Wrapped<A>>,\n+{\n+    outer.bind(|inner| inner)\n+}\n+\n+fn main() {\n+    assert_eq!(join(Some(Some(true))), Some(true));\n+}"}, {"sha": "58eeb43f70d6637c590f33115f1d5262c205804f", "filename": "src/test/ui/generic-associated-types/issue-79636-1.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.stderr?ref=e7f20335a66cb175a3754391b60c0a202410e5cf", "patch": "@@ -0,0 +1,19 @@\n+error[E0107]: missing generics for associated type `Monad::Wrapped`\n+  --> $DIR/issue-79636-1.rs:6:10\n+   |\n+LL |     type Wrapped<B>;\n+   |          ^^^^^^^ expected 1 type argument\n+   |\n+note: associated type defined here, with 1 type parameter: `B`\n+  --> $DIR/issue-79636-1.rs:6:10\n+   |\n+LL |     type Wrapped<B>;\n+   |          ^^^^^^^ -\n+help: use angle brackets to add missing type argument\n+   |\n+LL |     type Wrapped<B><B>;\n+   |                 ^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "5a6542193752b51cde26561c2a9b4ad9a90a56cc", "filename": "src/test/ui/generic-associated-types/issue-79636-2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.rs?ref=e7f20335a66cb175a3754391b60c0a202410e5cf", "patch": "@@ -0,0 +1,18 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+trait SomeTrait {\n+    type Wrapped<A>: SomeTrait;\n+         //~^ ERROR: missing generics for associated type `SomeTrait::Wrapped`\n+\n+    fn f() -> ();\n+}\n+\n+fn program<W>() -> ()\n+where\n+    W: SomeTrait<Wrapped = W>,\n+{\n+    return W::f();\n+}\n+\n+fn main() {}"}, {"sha": "d5e3c56ebb9ef928bb57e4de4ed6c42ec9824054", "filename": "src/test/ui/generic-associated-types/issue-79636-2.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7f20335a66cb175a3754391b60c0a202410e5cf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.stderr?ref=e7f20335a66cb175a3754391b60c0a202410e5cf", "patch": "@@ -0,0 +1,19 @@\n+error[E0107]: missing generics for associated type `SomeTrait::Wrapped`\n+  --> $DIR/issue-79636-2.rs:5:10\n+   |\n+LL |     type Wrapped<A>: SomeTrait;\n+   |          ^^^^^^^ expected 1 type argument\n+   |\n+note: associated type defined here, with 1 type parameter: `A`\n+  --> $DIR/issue-79636-2.rs:5:10\n+   |\n+LL |     type Wrapped<A>: SomeTrait;\n+   |          ^^^^^^^ -\n+help: use angle brackets to add missing type argument\n+   |\n+LL |     type Wrapped<A><A>: SomeTrait;\n+   |                 ^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}]}