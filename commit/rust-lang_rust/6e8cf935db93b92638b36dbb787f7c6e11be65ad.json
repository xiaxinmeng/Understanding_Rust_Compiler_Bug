{"sha": "6e8cf935db93b92638b36dbb787f7c6e11be65ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlOGNmOTM1ZGI5M2I5MjYzOGIzNmRiYjc4N2Y3YzZlMTFiZTY1YWQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-30T05:30:15Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-30T05:30:15Z"}, "message": "core: Add each, each_char to str::extensions", "tree": {"sha": "daa4a4f79c57ab7658700a05eb8d0d6eb88aa311", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daa4a4f79c57ab7658700a05eb8d0d6eb88aa311"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e8cf935db93b92638b36dbb787f7c6e11be65ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e8cf935db93b92638b36dbb787f7c6e11be65ad", "html_url": "https://github.com/rust-lang/rust/commit/6e8cf935db93b92638b36dbb787f7c6e11be65ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e8cf935db93b92638b36dbb787f7c6e11be65ad/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8641c95221786d13c5e91f1d78c9d0158c376438", "url": "https://api.github.com/repos/rust-lang/rust/commits/8641c95221786d13c5e91f1d78c9d0158c376438", "html_url": "https://github.com/rust-lang/rust/commit/8641c95221786d13c5e91f1d78c9d0158c376438"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "421eb5878620160c1ebfbe459cd7ca0619325858", "filename": "src/libcore/str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e8cf935db93b92638b36dbb787f7c6e11be65ad/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8cf935db93b92638b36dbb787f7c6e11be65ad/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=6e8cf935db93b92638b36dbb787f7c6e11be65ad", "patch": "@@ -1761,6 +1761,12 @@ impl extensions for str {\n     #[doc = \"Returns true if one string contains another\"]\n     #[inline]\n     fn contains(needle: str) -> bool { contains(self, needle) }\n+    #[doc = \"Iterate over the bytes in a string\"]\n+    #[inline]\n+    fn each(it: fn(u8) -> bool) { each(self, it) }\n+    #[doc = \"Iterate over the chars in a string\"]\n+    #[inline]\n+    fn each_char(it: fn(char) -> bool) { each_char(self, it) }\n     #[doc = \"Returns true if one string ends with another\"]\n     #[inline]\n     fn ends_with(needle: str) -> bool { ends_with(self, needle) }"}]}