{"sha": "b2085d967468cf6694b510573196396d509ec486", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMDg1ZDk2NzQ2OGNmNjY5NGI1MTA1NzMxOTYzOTZkNTA5ZWM0ODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-04T19:06:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-04T19:06:46Z"}, "message": "auto merge of #20527 : nikomatsakis/rust/japaric-boxed-uc-ice-fix, r=aturon\n\nThis fixes an ICE that japaric was encountering in the wf checker.\r\n\r\nr? @aturon", "tree": {"sha": "64440431fcd930d186205051c3ca520de75d3152", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64440431fcd930d186205051c3ca520de75d3152"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2085d967468cf6694b510573196396d509ec486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2085d967468cf6694b510573196396d509ec486", "html_url": "https://github.com/rust-lang/rust/commit/b2085d967468cf6694b510573196396d509ec486", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2085d967468cf6694b510573196396d509ec486/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "260e46115b922d29ca98b3cbea190011b1d3e63f", "url": "https://api.github.com/repos/rust-lang/rust/commits/260e46115b922d29ca98b3cbea190011b1d3e63f", "html_url": "https://github.com/rust-lang/rust/commit/260e46115b922d29ca98b3cbea190011b1d3e63f"}, {"sha": "537139ee00c3519435998bab45431f10285ec7a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/537139ee00c3519435998bab45431f10285ec7a7", "html_url": "https://github.com/rust-lang/rust/commit/537139ee00c3519435998bab45431f10285ec7a7"}], "stats": {"total": 76, "additions": 58, "deletions": 18}, "files": [{"sha": "6fc5919669402adf23b69eb406c28f398514d508", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b2085d967468cf6694b510573196396d509ec486/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2085d967468cf6694b510573196396d509ec486/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=b2085d967468cf6694b510573196396d509ec486", "patch": "@@ -70,6 +70,13 @@ pub trait TypeFolder<'tcx> : Sized {\n     /// track the Debruijn index nesting level.\n     fn exit_region_binder(&mut self) { }\n \n+    fn fold_binder<T>(&mut self, t: &ty::Binder<T>) -> ty::Binder<T>\n+        where T : TypeFoldable<'tcx> + Repr<'tcx>\n+    {\n+        // FIXME(#20526) this should replace `enter_region_binder`/`exit_region_binder`.\n+        super_fold_binder(self, t)\n+    }\n+\n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         super_fold_ty(self, t)\n     }\n@@ -183,12 +190,9 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Vec<T> {\n     }\n }\n \n-impl<'tcx, T:TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n+impl<'tcx, T:TypeFoldable<'tcx>+Repr<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n     fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::Binder<T> {\n-        folder.enter_region_binder();\n-        let result = ty::Binder(self.0.fold_with(folder));\n-        folder.exit_region_binder();\n-        result\n+        folder.fold_binder(self)\n     }\n }\n \n@@ -556,6 +560,17 @@ impl<'tcx> TypeFoldable<'tcx> for ty::UnboxedClosureUpvar<'tcx> {\n //\n // They should invoke `foo.fold_with()` to do recursive folding.\n \n+pub fn super_fold_binder<'tcx, T, U>(this: &mut T,\n+                                     binder: &ty::Binder<U>)\n+                                     -> ty::Binder<U>\n+    where T : TypeFolder<'tcx>, U : TypeFoldable<'tcx>\n+{\n+    this.enter_region_binder();\n+    let result = ty::Binder(binder.0.fold_with(this));\n+    this.exit_region_binder();\n+    result\n+}\n+\n pub fn super_fold_ty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n                                                 ty: Ty<'tcx>)\n                                                 -> Ty<'tcx> {"}, {"sha": "42ac1af325f4842f4194b0783027459e375bb11c", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b2085d967468cf6694b510573196396d509ec486/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2085d967468cf6694b510573196396d509ec486/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=b2085d967468cf6694b510573196396d509ec486", "patch": "@@ -301,6 +301,18 @@ impl<'cx,'tcx> TypeFolder<'tcx> for BoundsChecker<'cx,'tcx> {\n         self.fcx.tcx()\n     }\n \n+    fn fold_binder<T>(&mut self, binder: &ty::Binder<T>) -> ty::Binder<T>\n+        where T : TypeFoldable<'tcx> + Repr<'tcx>\n+    {\n+        self.binding_count += 1;\n+        let value = liberate_late_bound_regions(self.fcx.tcx(), self.scope, binder);\n+        debug!(\"BoundsChecker::fold_binder: late-bound regions replaced: {}\",\n+               value.repr(self.tcx()));\n+        let value = value.fold_with(self);\n+        self.binding_count -= 1;\n+        ty::Binder(value)\n+    }\n+\n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         debug!(\"BoundsChecker t={}\",\n                t.repr(self.tcx()));\n@@ -361,19 +373,6 @@ impl<'cx,'tcx> TypeFolder<'tcx> for BoundsChecker<'cx,'tcx> {\n \n                 self.fold_substs(substs);\n             }\n-            ty::ty_bare_fn(_, &ty::BareFnTy{sig: ref fn_sig, ..}) |\n-            ty::ty_closure(box ty::ClosureTy{sig: ref fn_sig, ..}) => {\n-                self.binding_count += 1;\n-\n-                let fn_sig = liberate_late_bound_regions(self.fcx.tcx(), self.scope, fn_sig);\n-\n-                debug!(\"late-bound regions replaced: {}\",\n-                       fn_sig.repr(self.tcx()));\n-\n-                self.fold_fn_sig(&fn_sig);\n-\n-                self.binding_count -= 1;\n-            }\n             _ => {\n                 super_fold_ty(self, t);\n             }"}, {"sha": "256b199d7292059d510575220494fc4f5101ad85", "filename": "src/test/run-pass/wf-bound-region-in-object-type.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b2085d967468cf6694b510573196396d509ec486/src%2Ftest%2Frun-pass%2Fwf-bound-region-in-object-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2085d967468cf6694b510573196396d509ec486/src%2Ftest%2Frun-pass%2Fwf-bound-region-in-object-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwf-bound-region-in-object-type.rs?ref=b2085d967468cf6694b510573196396d509ec486", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the `wf` checker properly handles bound regions in object\n+// types. Compiling this code used to trigger an ICE.\n+\n+pub struct Context<'tcx> {\n+    vec: &'tcx Vec<int>\n+}\n+\n+pub type Cmd<'a> = &'a int;\n+\n+pub type DecodeInlinedItem<'a> =\n+    Box<for<'tcx> FnMut(Cmd, &Context<'tcx>) -> Result<&'tcx int, ()> + 'a>;\n+\n+fn foo(d: DecodeInlinedItem) {\n+}\n+\n+fn main() { }"}]}