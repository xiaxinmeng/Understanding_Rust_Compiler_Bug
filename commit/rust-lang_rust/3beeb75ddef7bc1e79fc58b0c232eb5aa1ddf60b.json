{"sha": "3beeb75ddef7bc1e79fc58b0c232eb5aa1ddf60b", "node_id": "C_kwDOAAsO6NoAKDNiZWViNzVkZGVmN2JjMWU3OWZjNThiMGMyMzJlYjVhYTFkZGY2MGI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-10T21:41:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-10T21:41:28Z"}, "message": "Rollup merge of #91709 - juniorbassani:use-from-array-in-set-examples, r=jyn514\n\nReplace iterator-based set construction by *Set::From<[T; N]>\n\nThis uses the array-based construction for `BtreeSet`s and `HashSet`s instead of first creating an iterator. I could also replace the `let mut a = Set::new(); a.insert(...);` fragments if desired.", "tree": {"sha": "9988fb8d260a0b4b07dd2f847bf90892b7066276", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9988fb8d260a0b4b07dd2f847bf90892b7066276"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3beeb75ddef7bc1e79fc58b0c232eb5aa1ddf60b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhs8mICRBK7hj4Ov3rIwAApPYIAGMz4KgW3655Hk84qaGULKD/\nxVT4Zag9OyeOWOUKSqAekKgk+SHQfyiy3I4FEAEyqFg0HIw1dxhGTTkZk8F7+ojy\nPe8NfIvv713DTh6o0kt62RyFaLRRv3pwQXD8/PwmWBT5i6Ci1KAozmhOomwpOiI/\nhvaKfFgcvqN68Gd8EdGpMfFOO4Z5C5OicADZvaxr/uZOQwC5BqK15UkJ1C1UGiOz\nOsId/6Pz2TfF7JU0YEf7mlUgdgrc1li5DmGVSCmjSbqjysmhkUy6lY8pBrhL0sEj\nzCocNOJ6NN4E9duci0J7KY0s3+d925Ve3TMEwSMnBVT8mc535yxbu2i9v5FjHLQ=\n=gAMi\n-----END PGP SIGNATURE-----\n", "payload": "tree 9988fb8d260a0b4b07dd2f847bf90892b7066276\nparent 698ea96a8f301779389eb7787862b78f55690c2a\nparent cebd9494bdee15e45303bf9ecf7c77b60a6c15b5\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639172488 +0100\ncommitter GitHub <noreply@github.com> 1639172488 +0100\n\nRollup merge of #91709 - juniorbassani:use-from-array-in-set-examples, r=jyn514\n\nReplace iterator-based set construction by *Set::From<[T; N]>\n\nThis uses the array-based construction for `BtreeSet`s and `HashSet`s instead of first creating an iterator. I could also replace the `let mut a = Set::new(); a.insert(...);` fragments if desired.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3beeb75ddef7bc1e79fc58b0c232eb5aa1ddf60b", "html_url": "https://github.com/rust-lang/rust/commit/3beeb75ddef7bc1e79fc58b0c232eb5aa1ddf60b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3beeb75ddef7bc1e79fc58b0c232eb5aa1ddf60b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "698ea96a8f301779389eb7787862b78f55690c2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/698ea96a8f301779389eb7787862b78f55690c2a", "html_url": "https://github.com/rust-lang/rust/commit/698ea96a8f301779389eb7787862b78f55690c2a"}, {"sha": "cebd9494bdee15e45303bf9ecf7c77b60a6c15b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/cebd9494bdee15e45303bf9ecf7c77b60a6c15b5", "html_url": "https://github.com/rust-lang/rust/commit/cebd9494bdee15e45303bf9ecf7c77b60a6c15b5"}], "stats": {"total": 112, "additions": 55, "deletions": 57}, "files": [{"sha": "dfdf3c938428835823564615e2d7ef91f0d2bf31", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3beeb75ddef7bc1e79fc58b0c232eb5aa1ddf60b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3beeb75ddef7bc1e79fc58b0c232eb5aa1ddf60b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=3beeb75ddef7bc1e79fc58b0c232eb5aa1ddf60b", "patch": "@@ -491,7 +491,7 @@ impl<T> BTreeSet<T> {\n     /// ```\n     /// use std::collections::BTreeSet;\n     ///\n-    /// let set: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// let set = BTreeSet::from([1, 2, 3]);\n     /// assert_eq!(set.contains(&1), true);\n     /// assert_eq!(set.contains(&4), false);\n     /// ```\n@@ -515,7 +515,7 @@ impl<T> BTreeSet<T> {\n     /// ```\n     /// use std::collections::BTreeSet;\n     ///\n-    /// let set: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// let set = BTreeSet::from([1, 2, 3]);\n     /// assert_eq!(set.get(&2), Some(&2));\n     /// assert_eq!(set.get(&4), None);\n     /// ```\n@@ -536,7 +536,7 @@ impl<T> BTreeSet<T> {\n     /// ```\n     /// use std::collections::BTreeSet;\n     ///\n-    /// let a: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// let a = BTreeSet::from([1, 2, 3]);\n     /// let mut b = BTreeSet::new();\n     ///\n     /// assert_eq!(a.is_disjoint(&b), true);\n@@ -562,7 +562,7 @@ impl<T> BTreeSet<T> {\n     /// ```\n     /// use std::collections::BTreeSet;\n     ///\n-    /// let sup: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// let sup = BTreeSet::from([1, 2, 3]);\n     /// let mut set = BTreeSet::new();\n     ///\n     /// assert_eq!(set.is_subset(&sup), true);\n@@ -639,7 +639,7 @@ impl<T> BTreeSet<T> {\n     /// ```\n     /// use std::collections::BTreeSet;\n     ///\n-    /// let sub: BTreeSet<_> = [1, 2].iter().cloned().collect();\n+    /// let sub = BTreeSet::from([1, 2]);\n     /// let mut set = BTreeSet::new();\n     ///\n     /// assert_eq!(set.is_superset(&sub), false);\n@@ -853,7 +853,7 @@ impl<T> BTreeSet<T> {\n     /// ```\n     /// use std::collections::BTreeSet;\n     ///\n-    /// let mut set: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// let mut set = BTreeSet::from([1, 2, 3]);\n     /// assert_eq!(set.take(&2), Some(2));\n     /// assert_eq!(set.take(&2), None);\n     /// ```\n@@ -876,8 +876,7 @@ impl<T> BTreeSet<T> {\n     /// ```\n     /// use std::collections::BTreeSet;\n     ///\n-    /// let xs = [1, 2, 3, 4, 5, 6];\n-    /// let mut set: BTreeSet<i32> = xs.iter().cloned().collect();\n+    /// let mut set = BTreeSet::from([1, 2, 3, 4, 5, 6]);\n     /// // Keep only the even numbers.\n     /// set.retain(|&k| k % 2 == 0);\n     /// assert!(set.iter().eq([2, 4, 6].iter()));\n@@ -1009,7 +1008,7 @@ impl<T> BTreeSet<T> {\n     /// ```\n     /// use std::collections::BTreeSet;\n     ///\n-    /// let set: BTreeSet<usize> = [1, 2, 3].iter().cloned().collect();\n+    /// let set = BTreeSet::from([1, 2, 3]);\n     /// let mut set_iter = set.iter();\n     /// assert_eq!(set_iter.next(), Some(&1));\n     /// assert_eq!(set_iter.next(), Some(&2));\n@@ -1022,7 +1021,7 @@ impl<T> BTreeSet<T> {\n     /// ```\n     /// use std::collections::BTreeSet;\n     ///\n-    /// let set: BTreeSet<usize> = [3, 1, 2].iter().cloned().collect();\n+    /// let set = BTreeSet::from([3, 1, 2]);\n     /// let mut set_iter = set.iter();\n     /// assert_eq!(set_iter.next(), Some(&1));\n     /// assert_eq!(set_iter.next(), Some(&2));\n@@ -1124,7 +1123,7 @@ impl<T> IntoIterator for BTreeSet<T> {\n     /// ```\n     /// use std::collections::BTreeSet;\n     ///\n-    /// let set: BTreeSet<usize> = [1, 2, 3, 4].iter().cloned().collect();\n+    /// let set = BTreeSet::from([1, 2, 3, 4]);\n     ///\n     /// let v: Vec<_> = set.into_iter().collect();\n     /// assert_eq!(v, [1, 2, 3, 4]);\n@@ -1243,8 +1242,8 @@ impl<T: Ord + Clone> Sub<&BTreeSet<T>> for &BTreeSet<T> {\n     /// ```\n     /// use std::collections::BTreeSet;\n     ///\n-    /// let a: BTreeSet<_> = vec![1, 2, 3].into_iter().collect();\n-    /// let b: BTreeSet<_> = vec![3, 4, 5].into_iter().collect();\n+    /// let a = BTreeSet::from([1, 2, 3]);\n+    /// let b = BTreeSet::from([3, 4, 5]);\n     ///\n     /// let result = &a - &b;\n     /// let result_vec: Vec<_> = result.into_iter().collect();\n@@ -1266,8 +1265,8 @@ impl<T: Ord + Clone> BitXor<&BTreeSet<T>> for &BTreeSet<T> {\n     /// ```\n     /// use std::collections::BTreeSet;\n     ///\n-    /// let a: BTreeSet<_> = vec![1, 2, 3].into_iter().collect();\n-    /// let b: BTreeSet<_> = vec![2, 3, 4].into_iter().collect();\n+    /// let a = BTreeSet::from([1, 2, 3]);\n+    /// let b = BTreeSet::from([2, 3, 4]);\n     ///\n     /// let result = &a ^ &b;\n     /// let result_vec: Vec<_> = result.into_iter().collect();\n@@ -1289,8 +1288,8 @@ impl<T: Ord + Clone> BitAnd<&BTreeSet<T>> for &BTreeSet<T> {\n     /// ```\n     /// use std::collections::BTreeSet;\n     ///\n-    /// let a: BTreeSet<_> = vec![1, 2, 3].into_iter().collect();\n-    /// let b: BTreeSet<_> = vec![2, 3, 4].into_iter().collect();\n+    /// let a = BTreeSet::from([1, 2, 3]);\n+    /// let b = BTreeSet::from([2, 3, 4]);\n     ///\n     /// let result = &a & &b;\n     /// let result_vec: Vec<_> = result.into_iter().collect();\n@@ -1312,8 +1311,8 @@ impl<T: Ord + Clone> BitOr<&BTreeSet<T>> for &BTreeSet<T> {\n     /// ```\n     /// use std::collections::BTreeSet;\n     ///\n-    /// let a: BTreeSet<_> = vec![1, 2, 3].into_iter().collect();\n-    /// let b: BTreeSet<_> = vec![3, 4, 5].into_iter().collect();\n+    /// let a = BTreeSet::from([1, 2, 3]);\n+    /// let b = BTreeSet::from([3, 4, 5]);\n     ///\n     /// let result = &a | &b;\n     /// let result_vec: Vec<_> = result.into_iter().collect();"}, {"sha": "a1e28c0b0a695acba54719d5dee8187918124421", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 37, "deletions": 38, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/3beeb75ddef7bc1e79fc58b0c232eb5aa1ddf60b/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3beeb75ddef7bc1e79fc58b0c232eb5aa1ddf60b/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=3beeb75ddef7bc1e79fc58b0c232eb5aa1ddf60b", "patch": "@@ -233,7 +233,7 @@ impl<T, S> HashSet<T, S> {\n     /// ```\n     /// use std::collections::HashSet;\n     ///\n-    /// let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// let mut set = HashSet::from([1, 2, 3]);\n     /// assert!(!set.is_empty());\n     ///\n     /// // print 1, 2, 3 in an arbitrary order\n@@ -489,8 +489,8 @@ where\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n-    /// let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n-    /// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n+    /// let a = HashSet::from([1, 2, 3]);\n+    /// let b = HashSet::from([4, 2, 3, 4]);\n     ///\n     /// // Can be seen as `a - b`.\n     /// for x in a.difference(&b) {\n@@ -518,8 +518,8 @@ where\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n-    /// let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n-    /// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n+    /// let a = HashSet::from([1, 2, 3]);\n+    /// let b = HashSet::from([4, 2, 3, 4]);\n     ///\n     /// // Print 1, 4 in arbitrary order.\n     /// for x in a.symmetric_difference(&b) {\n@@ -548,8 +548,8 @@ where\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n-    /// let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n-    /// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n+    /// let a = HashSet::from([1, 2, 3]);\n+    /// let b = HashSet::from([4, 2, 3, 4]);\n     ///\n     /// // Print 2, 3 in arbitrary order.\n     /// for x in a.intersection(&b) {\n@@ -576,8 +576,8 @@ where\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n-    /// let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n-    /// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n+    /// let a = HashSet::from([1, 2, 3]);\n+    /// let b = HashSet::from([4, 2, 3, 4]);\n     ///\n     /// // Print 1, 2, 3, 4 in arbitrary order.\n     /// for x in a.union(&b) {\n@@ -608,7 +608,7 @@ where\n     /// ```\n     /// use std::collections::HashSet;\n     ///\n-    /// let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// let set = HashSet::from([1, 2, 3]);\n     /// assert_eq!(set.contains(&1), true);\n     /// assert_eq!(set.contains(&4), false);\n     /// ```\n@@ -633,7 +633,7 @@ where\n     /// ```\n     /// use std::collections::HashSet;\n     ///\n-    /// let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// let set = HashSet::from([1, 2, 3]);\n     /// assert_eq!(set.get(&2), Some(&2));\n     /// assert_eq!(set.get(&4), None);\n     /// ```\n@@ -657,7 +657,7 @@ where\n     ///\n     /// use std::collections::HashSet;\n     ///\n-    /// let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// let mut set = HashSet::from([1, 2, 3]);\n     /// assert_eq!(set.len(), 3);\n     /// assert_eq!(set.get_or_insert(2), &2);\n     /// assert_eq!(set.get_or_insert(100), &100);\n@@ -744,7 +744,7 @@ where\n     /// ```\n     /// use std::collections::HashSet;\n     ///\n-    /// let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// let a = HashSet::from([1, 2, 3]);\n     /// let mut b = HashSet::new();\n     ///\n     /// assert_eq!(a.is_disjoint(&b), true);\n@@ -770,7 +770,7 @@ where\n     /// ```\n     /// use std::collections::HashSet;\n     ///\n-    /// let sup: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// let sup = HashSet::from([1, 2, 3]);\n     /// let mut set = HashSet::new();\n     ///\n     /// assert_eq!(set.is_subset(&sup), true);\n@@ -792,7 +792,7 @@ where\n     /// ```\n     /// use std::collections::HashSet;\n     ///\n-    /// let sub: HashSet<_> = [1, 2].iter().cloned().collect();\n+    /// let sub = HashSet::from([1, 2]);\n     /// let mut set = HashSet::new();\n     ///\n     /// assert_eq!(set.is_superset(&sub), false);\n@@ -893,7 +893,7 @@ where\n     /// ```\n     /// use std::collections::HashSet;\n     ///\n-    /// let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// let mut set = HashSet::from([1, 2, 3]);\n     /// assert_eq!(set.take(&2), Some(2));\n     /// assert_eq!(set.take(&2), None);\n     /// ```\n@@ -917,8 +917,7 @@ where\n     /// ```\n     /// use std::collections::HashSet;\n     ///\n-    /// let xs = [1, 2, 3, 4, 5, 6];\n-    /// let mut set: HashSet<i32> = xs.iter().cloned().collect();\n+    /// let mut set = HashSet::from([1, 2, 3, 4, 5, 6]);\n     /// set.retain(|&k| k % 2 == 0);\n     /// assert_eq!(set.len(), 3);\n     /// ```\n@@ -1097,8 +1096,8 @@ where\n     /// ```\n     /// use std::collections::HashSet;\n     ///\n-    /// let a: HashSet<_> = vec![1, 2, 3].into_iter().collect();\n-    /// let b: HashSet<_> = vec![3, 4, 5].into_iter().collect();\n+    /// let a = HashSet::from([1, 2, 3]);\n+    /// let b = HashSet::from([3, 4, 5]);\n     ///\n     /// let set = &a | &b;\n     ///\n@@ -1130,8 +1129,8 @@ where\n     /// ```\n     /// use std::collections::HashSet;\n     ///\n-    /// let a: HashSet<_> = vec![1, 2, 3].into_iter().collect();\n-    /// let b: HashSet<_> = vec![2, 3, 4].into_iter().collect();\n+    /// let a = HashSet::from([1, 2, 3]);\n+    /// let b = HashSet::from([2, 3, 4]);\n     ///\n     /// let set = &a & &b;\n     ///\n@@ -1163,8 +1162,8 @@ where\n     /// ```\n     /// use std::collections::HashSet;\n     ///\n-    /// let a: HashSet<_> = vec![1, 2, 3].into_iter().collect();\n-    /// let b: HashSet<_> = vec![3, 4, 5].into_iter().collect();\n+    /// let a = HashSet::from([1, 2, 3]);\n+    /// let b = HashSet::from([3, 4, 5]);\n     ///\n     /// let set = &a ^ &b;\n     ///\n@@ -1196,8 +1195,8 @@ where\n     /// ```\n     /// use std::collections::HashSet;\n     ///\n-    /// let a: HashSet<_> = vec![1, 2, 3].into_iter().collect();\n-    /// let b: HashSet<_> = vec![3, 4, 5].into_iter().collect();\n+    /// let a = HashSet::from([1, 2, 3]);\n+    /// let b = HashSet::from([3, 4, 5]);\n     ///\n     /// let set = &a - &b;\n     ///\n@@ -1226,7 +1225,7 @@ where\n /// ```\n /// use std::collections::HashSet;\n ///\n-/// let a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n+/// let a = HashSet::from([1, 2, 3]);\n ///\n /// let mut iter = a.iter();\n /// ```\n@@ -1248,7 +1247,7 @@ pub struct Iter<'a, K: 'a> {\n /// ```\n /// use std::collections::HashSet;\n ///\n-/// let a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n+/// let a = HashSet::from([1, 2, 3]);\n ///\n /// let mut iter = a.into_iter();\n /// ```\n@@ -1269,7 +1268,7 @@ pub struct IntoIter<K> {\n /// ```\n /// use std::collections::HashSet;\n ///\n-/// let mut a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n+/// let mut a = HashSet::from([1, 2, 3]);\n ///\n /// let mut drain = a.drain();\n /// ```\n@@ -1291,7 +1290,7 @@ pub struct Drain<'a, K: 'a> {\n ///\n /// use std::collections::HashSet;\n ///\n-/// let mut a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n+/// let mut a = HashSet::from([1, 2, 3]);\n ///\n /// let mut drain_filtered = a.drain_filter(|v| v % 2 == 0);\n /// ```\n@@ -1315,8 +1314,8 @@ where\n /// ```\n /// use std::collections::HashSet;\n ///\n-/// let a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n-/// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n+/// let a = HashSet::from([1, 2, 3]);\n+/// let b = HashSet::from([4, 2, 3, 4]);\n ///\n /// let mut intersection = a.intersection(&b);\n /// ```\n@@ -1342,8 +1341,8 @@ pub struct Intersection<'a, T: 'a, S: 'a> {\n /// ```\n /// use std::collections::HashSet;\n ///\n-/// let a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n-/// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n+/// let a = HashSet::from([1, 2, 3]);\n+/// let b = HashSet::from([4, 2, 3, 4]);\n ///\n /// let mut difference = a.difference(&b);\n /// ```\n@@ -1369,8 +1368,8 @@ pub struct Difference<'a, T: 'a, S: 'a> {\n /// ```\n /// use std::collections::HashSet;\n ///\n-/// let a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n-/// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n+/// let a = HashSet::from([1, 2, 3]);\n+/// let b = HashSet::from([4, 2, 3, 4]);\n ///\n /// let mut intersection = a.symmetric_difference(&b);\n /// ```\n@@ -1393,8 +1392,8 @@ pub struct SymmetricDifference<'a, T: 'a, S: 'a> {\n /// ```\n /// use std::collections::HashSet;\n ///\n-/// let a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n-/// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n+/// let a = HashSet::from([1, 2, 3]);\n+/// let b = HashSet::from([4, 2, 3, 4]);\n ///\n /// let mut union_iter = a.union(&b);\n /// ```"}]}