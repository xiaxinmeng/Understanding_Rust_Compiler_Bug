{"sha": "9d157ada35c0e363e30344526755649c3399f7de", "node_id": "C_kwDOAAsO6NoAKDlkMTU3YWRhMzVjMGUzNjNlMzAzNDQ1MjY3NTU2NDljMzM5OWY3ZGU", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-04-09T15:19:33Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-05-08T20:53:14Z"}, "message": "Warn on unused doc(hidden) on trait impl items", "tree": {"sha": "911d4c9d8169ffb9a844a3b75f45460428b58634", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/911d4c9d8169ffb9a844a3b75f45460428b58634"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d157ada35c0e363e30344526755649c3399f7de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d157ada35c0e363e30344526755649c3399f7de", "html_url": "https://github.com/rust-lang/rust/commit/9d157ada35c0e363e30344526755649c3399f7de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d157ada35c0e363e30344526755649c3399f7de/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83322c557fcaa9b6750955ceb6b9591df6c53a65", "url": "https://api.github.com/repos/rust-lang/rust/commits/83322c557fcaa9b6750955ceb6b9591df6c53a65", "html_url": "https://github.com/rust-lang/rust/commit/83322c557fcaa9b6750955ceb6b9591df6c53a65"}], "stats": {"total": 251, "additions": 225, "deletions": 26}, "files": [{"sha": "2b0fa57cba8b1f7d2695a7664e76ae217cca1038", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 74, "deletions": 2, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/9d157ada35c0e363e30344526755649c3399f7de/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d157ada35c0e363e30344526755649c3399f7de/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=9d157ada35c0e363e30344526755649c3399f7de", "patch": "@@ -4,7 +4,8 @@\n //! conflicts between multiple such attributes attached to the same\n //! item.\n \n-use rustc_ast::{ast, AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem};\n+use rustc_ast::tokenstream::DelimSpan;\n+use rustc_ast::{ast, AttrStyle, Attribute, Lit, LitKind, MacArgs, MetaItemKind, NestedMetaItem};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability, MultiSpan};\n use rustc_feature::{AttributeDuplicates, AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n@@ -810,6 +811,68 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n+    /// Checks `#[doc(hidden)]` attributes. Returns `true` if valid.\n+    fn check_doc_hidden(\n+        &self,\n+        attr: &Attribute,\n+        meta_index: usize,\n+        meta: &NestedMetaItem,\n+        hir_id: HirId,\n+        target: Target,\n+    ) -> bool {\n+        if let Target::AssocConst\n+        | Target::AssocTy\n+        | Target::Method(MethodKind::Trait { body: true }) = target\n+        {\n+            let parent_hir_id = self.tcx.hir().get_parent_item(hir_id);\n+            let containing_item = self.tcx.hir().expect_item(parent_hir_id);\n+\n+            if Target::from_item(containing_item) == Target::Impl {\n+                let meta_items = attr.meta_item_list().unwrap();\n+\n+                let (span, replacement_span) = if meta_items.len() == 1 {\n+                    (attr.span, attr.span)\n+                } else {\n+                    let meta_span = meta.span();\n+                    (\n+                        meta_span,\n+                        meta_span.until(match meta_items.get(meta_index + 1) {\n+                            Some(next_item) => next_item.span(),\n+                            None => match attr.get_normal_item().args {\n+                                MacArgs::Delimited(DelimSpan { close, .. }, ..) => close,\n+                                _ => unreachable!(),\n+                            },\n+                        }),\n+                    )\n+                };\n+\n+                // FIXME: #[doc(hidden)] was previously erroneously allowed on trait impl items,\n+                // so for backward compatibility only emit a warning and do not mark it as invalid.\n+                self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, span, |lint| {\n+                    lint.build(\"`#[doc(hidden)]` is ignored on trait impl items\")\n+                        .warn(\n+                            \"this was previously accepted by the compiler but is \\\n+                             being phased out; it will become a hard error in \\\n+                             a future release!\",\n+                        )\n+                        .note(\n+                            \"whether the impl item is `doc(hidden)` or not \\\n+                             entirely depends on the corresponding trait item\",\n+                        )\n+                        .span_suggestion(\n+                            replacement_span,\n+                            \"remove this attribute\",\n+                            String::new(),\n+                            Applicability::MachineApplicable,\n+                        )\n+                        .emit();\n+                });\n+            }\n+        }\n+\n+        true\n+    }\n+\n     /// Checks that an attribute is *not* used at the crate level. Returns `true` if valid.\n     fn check_attr_not_crate_level(\n         &self,\n@@ -928,7 +991,7 @@ impl CheckAttrVisitor<'_> {\n         let mut is_valid = true;\n \n         if let Some(mi) = attr.meta() && let Some(list) = mi.meta_item_list() {\n-            for meta in list {\n+            for (meta_index, meta) in list.into_iter().enumerate() {\n                 if let Some(i_meta) = meta.meta_item() {\n                     match i_meta.name_or_empty() {\n                         sym::alias\n@@ -969,6 +1032,15 @@ impl CheckAttrVisitor<'_> {\n                             is_valid = false;\n                         }\n \n+                        sym::hidden if !self.check_doc_hidden(attr,\n+                            meta_index,\n+                            meta,\n+                            hir_id,\n+                            target,\n+                            ) => {\n+                            is_valid = false;\n+                        }\n+\n                         // no_default_passes: deprecated\n                         // passes: deprecated\n                         // plugins: removed, but rustdoc warns about it itself"}, {"sha": "19198ab3aa1b53f562628ea16a2ffbcd3062667d", "filename": "library/alloc/src/collections/vec_deque/iter.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d157ada35c0e363e30344526755649c3399f7de/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d157ada35c0e363e30344526755649c3399f7de/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs?ref=9d157ada35c0e363e30344526755649c3399f7de", "patch": "@@ -122,7 +122,6 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     }\n \n     #[inline]\n-    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         // Safety: The TrustedRandomAccess contract requires that callers only pass an index\n         // that is in bounds."}, {"sha": "b78c0d5e1b3cfdbeb68dfd134e8c3aa02c144b66", "filename": "library/alloc/src/collections/vec_deque/iter_mut.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d157ada35c0e363e30344526755649c3399f7de/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d157ada35c0e363e30344526755649c3399f7de/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs?ref=9d157ada35c0e363e30344526755649c3399f7de", "patch": "@@ -100,7 +100,6 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n     }\n \n     #[inline]\n-    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         // Safety: The TrustedRandomAccess contract requires that callers only pass an index\n         // that is in bounds."}, {"sha": "a7df6f59b59894270fffd5fd005c5e06024365eb", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d157ada35c0e363e30344526755649c3399f7de/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d157ada35c0e363e30344526755649c3399f7de/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=9d157ada35c0e363e30344526755649c3399f7de", "patch": "@@ -202,7 +202,6 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n         self.len()\n     }\n \n-    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, i: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccessNoCoerce,"}, {"sha": "4fa5d129bc6af6ccfa6853c8cc16cf76ea1839dc", "filename": "library/core/src/convert/num.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d157ada35c0e363e30344526755649c3399f7de/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d157ada35c0e363e30344526755649c3399f7de/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs?ref=9d157ada35c0e363e30344526755649c3399f7de", "patch": "@@ -25,7 +25,6 @@ macro_rules! impl_float_to_int {\n         $(\n             #[unstable(feature = \"convert_float_to_int\", issue = \"67057\")]\n             impl FloatToInt<$Int> for $Float {\n-                #[doc(hidden)]\n                 #[inline]\n                 unsafe fn to_int_unchecked(self) -> $Int {\n                     // SAFETY: the safety contract must be upheld by the caller."}, {"sha": "aba24a79dcf7920595ed1f1a70a73f4540011853", "filename": "library/core/src/iter/adapters/cloned.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d157ada35c0e363e30344526755649c3399f7de/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d157ada35c0e363e30344526755649c3399f7de/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs?ref=9d157ada35c0e363e30344526755649c3399f7de", "patch": "@@ -60,7 +60,6 @@ where\n         self.it.map(T::clone).fold(init, f)\n     }\n \n-    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> T\n     where\n         Self: TrustedRandomAccessNoCoerce,"}, {"sha": "f9bfd77d7fbbff40bd337cc9e97eb199dc215207", "filename": "library/core/src/iter/adapters/copied.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d157ada35c0e363e30344526755649c3399f7de/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d157ada35c0e363e30344526755649c3399f7de/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs?ref=9d157ada35c0e363e30344526755649c3399f7de", "patch": "@@ -81,7 +81,6 @@ where\n         self.it.advance_by(n)\n     }\n \n-    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> T\n     where\n         Self: TrustedRandomAccessNoCoerce,"}, {"sha": "14a126951115cd156891c48407431d74beb20af8", "filename": "library/core/src/iter/adapters/enumerate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d157ada35c0e363e30344526755649c3399f7de/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d157ada35c0e363e30344526755649c3399f7de/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs?ref=9d157ada35c0e363e30344526755649c3399f7de", "patch": "@@ -128,7 +128,6 @@ where\n     }\n \n     #[rustc_inherit_overflow_checks]\n-    #[doc(hidden)]\n     #[inline]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item\n     where"}, {"sha": "8adb53c6714284c1d6376c3114c6f15c92e1d243", "filename": "library/core/src/iter/adapters/fuse.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d157ada35c0e363e30344526755649c3399f7de/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d157ada35c0e363e30344526755649c3399f7de/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs?ref=9d157ada35c0e363e30344526755649c3399f7de", "patch": "@@ -129,7 +129,6 @@ where\n     }\n \n     #[inline]\n-    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccessNoCoerce,"}, {"sha": "9e25dbe462c91eb3648dd7fd09af0ba99de3b248", "filename": "library/core/src/iter/adapters/map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d157ada35c0e363e30344526755649c3399f7de/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d157ada35c0e363e30344526755649c3399f7de/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs?ref=9d157ada35c0e363e30344526755649c3399f7de", "patch": "@@ -124,7 +124,6 @@ where\n         self.iter.fold(init, map_fold(self.f, g))\n     }\n \n-    #[doc(hidden)]\n     #[inline]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> B\n     where"}, {"sha": "8153c8cfef133aa0c2d246d4b4169335dbeaf965", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d157ada35c0e363e30344526755649c3399f7de/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d157ada35c0e363e30344526755649c3399f7de/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=9d157ada35c0e363e30344526755649c3399f7de", "patch": "@@ -95,7 +95,6 @@ where\n     }\n \n     #[inline]\n-    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccessNoCoerce,"}, {"sha": "f7aeee8c9adc6f36ec1f989441ae897b94b4763c", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d157ada35c0e363e30344526755649c3399f7de/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d157ada35c0e363e30344526755649c3399f7de/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=9d157ada35c0e363e30344526755649c3399f7de", "patch": "@@ -752,7 +752,6 @@ impl<A: Step> Iterator for ops::Range<A> {\n     }\n \n     #[inline]\n-    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccessNoCoerce,"}, {"sha": "772a9698d84cc9b930d2e73f1cfe8125d33e027c", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9d157ada35c0e363e30344526755649c3399f7de/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d157ada35c0e363e30344526755649c3399f7de/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=9d157ada35c0e363e30344526755649c3399f7de", "patch": "@@ -1322,7 +1322,6 @@ impl<'a, T> Iterator for Windows<'a, T> {\n         }\n     }\n \n-    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         // SAFETY: since the caller guarantees that `i` is in bounds,\n         // which means that `i` cannot overflow an `isize`, and the\n@@ -1478,7 +1477,6 @@ impl<'a, T> Iterator for Chunks<'a, T> {\n         }\n     }\n \n-    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         let start = idx * self.chunk_size;\n         // SAFETY: the caller guarantees that `i` is in bounds,\n@@ -1657,7 +1655,6 @@ impl<'a, T> Iterator for ChunksMut<'a, T> {\n         }\n     }\n \n-    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         let start = idx * self.chunk_size;\n         // SAFETY: see comments for `Chunks::__iterator_get_unchecked`.\n@@ -1830,7 +1827,6 @@ impl<'a, T> Iterator for ChunksExact<'a, T> {\n         self.next_back()\n     }\n \n-    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         let start = idx * self.chunk_size;\n         // SAFETY: mostly identical to `Chunks::__iterator_get_unchecked`.\n@@ -1984,7 +1980,6 @@ impl<'a, T> Iterator for ChunksExactMut<'a, T> {\n         self.next_back()\n     }\n \n-    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         let start = idx * self.chunk_size;\n         // SAFETY: see comments for `ChunksMut::__iterator_get_unchecked`.\n@@ -2248,7 +2243,6 @@ impl<'a, T, const N: usize> Iterator for ArrayChunks<'a, T, N> {\n         self.iter.last()\n     }\n \n-    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, i: usize) -> &'a [T; N] {\n         // SAFETY: The safety guarantees of `__iterator_get_unchecked` are\n         // transferred to the caller.\n@@ -2367,7 +2361,6 @@ impl<'a, T, const N: usize> Iterator for ArrayChunksMut<'a, T, N> {\n         self.iter.last()\n     }\n \n-    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, i: usize) -> &'a mut [T; N] {\n         // SAFETY: The safety guarantees of `__iterator_get_unchecked` are transferred to\n         // the caller.\n@@ -2520,7 +2513,6 @@ impl<'a, T> Iterator for RChunks<'a, T> {\n         }\n     }\n \n-    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         let end = self.v.len() - idx * self.chunk_size;\n         let start = match end.checked_sub(self.chunk_size) {\n@@ -2689,7 +2681,6 @@ impl<'a, T> Iterator for RChunksMut<'a, T> {\n         }\n     }\n \n-    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         let end = self.v.len() - idx * self.chunk_size;\n         let start = match end.checked_sub(self.chunk_size) {\n@@ -2856,7 +2847,6 @@ impl<'a, T> Iterator for RChunksExact<'a, T> {\n         self.next_back()\n     }\n \n-    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         let end = self.v.len() - idx * self.chunk_size;\n         let start = end - self.chunk_size;\n@@ -3016,7 +3006,6 @@ impl<'a, T> Iterator for RChunksExactMut<'a, T> {\n         self.next_back()\n     }\n \n-    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         let end = self.v.len() - idx * self.chunk_size;\n         let start = end - self.chunk_size;"}, {"sha": "c05242222dde7e54c1b4b5477a2efb397073593b", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d157ada35c0e363e30344526755649c3399f7de/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d157ada35c0e363e30344526755649c3399f7de/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=9d157ada35c0e363e30344526755649c3399f7de", "patch": "@@ -325,7 +325,6 @@ macro_rules! iterator {\n                 None\n             }\n \n-            #[doc(hidden)]\n             #[inline]\n             unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n                 // SAFETY: the caller must guarantee that `i` is in bounds of"}, {"sha": "f46acc11f2dd3a34fa74f34ae8c7e5a57663f0c5", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d157ada35c0e363e30344526755649c3399f7de/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d157ada35c0e363e30344526755649c3399f7de/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=9d157ada35c0e363e30344526755649c3399f7de", "patch": "@@ -298,7 +298,6 @@ impl Iterator for Bytes<'_> {\n     }\n \n     #[inline]\n-    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> u8 {\n         // SAFETY: the caller must uphold the safety contract\n         // for `Iterator::__iterator_get_unchecked`."}, {"sha": "36a14097ac308d2cca4e49768a6ba0d7e46a397a", "filename": "src/test/ui/lint/unused/unused-attr-doc-hidden.fixed", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9d157ada35c0e363e30344526755649c3399f7de/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9d157ada35c0e363e30344526755649c3399f7de/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.fixed?ref=9d157ada35c0e363e30344526755649c3399f7de", "patch": "@@ -0,0 +1,42 @@\n+#![deny(unused_attributes)]\n+#![crate_type = \"lib\"]\n+// run-rustfix\n+\n+pub trait Trait {\n+    type It;\n+    const IT: ();\n+    fn it0();\n+    fn it1();\n+    fn it2();\n+}\n+\n+pub struct Implementor;\n+\n+impl Trait for Implementor {\n+    \n+    type It = ();\n+    //~^^ ERROR `#[doc(hidden)]` is ignored\n+    //~|  WARNING this was previously accepted\n+\n+    \n+    const IT: () = ();\n+    //~^^ ERROR `#[doc(hidden)]` is ignored\n+    //~|  WARNING this was previously accepted\n+\n+    #[doc(alias = \"aka\")]\n+    fn it0() {}\n+    //~^^ ERROR `#[doc(hidden)]` is ignored\n+    //~|  WARNING this was previously accepted\n+\n+    #[doc(alias = \"this\", )]\n+    fn it1() {}\n+    //~^^ ERROR `#[doc(hidden)]` is ignored\n+    //~|  WARNING this was previously accepted\n+\n+    #[doc()]\n+    fn it2() {}\n+    //~^^ ERROR `#[doc(hidden)]` is ignored\n+    //~|  WARNING this was previously accepted\n+    //~|  ERROR `#[doc(hidden)]` is ignored\n+    //~|  WARNING this was previously accepted\n+}"}, {"sha": "e58c4f22f31abe275e8ef51e80f8aaebb386858e", "filename": "src/test/ui/lint/unused/unused-attr-doc-hidden.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9d157ada35c0e363e30344526755649c3399f7de/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d157ada35c0e363e30344526755649c3399f7de/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.rs?ref=9d157ada35c0e363e30344526755649c3399f7de", "patch": "@@ -0,0 +1,42 @@\n+#![deny(unused_attributes)]\n+#![crate_type = \"lib\"]\n+// run-rustfix\n+\n+pub trait Trait {\n+    type It;\n+    const IT: ();\n+    fn it0();\n+    fn it1();\n+    fn it2();\n+}\n+\n+pub struct Implementor;\n+\n+impl Trait for Implementor {\n+    #[doc(hidden)]\n+    type It = ();\n+    //~^^ ERROR `#[doc(hidden)]` is ignored\n+    //~|  WARNING this was previously accepted\n+\n+    #[doc(hidden)]\n+    const IT: () = ();\n+    //~^^ ERROR `#[doc(hidden)]` is ignored\n+    //~|  WARNING this was previously accepted\n+\n+    #[doc(hidden, alias = \"aka\")]\n+    fn it0() {}\n+    //~^^ ERROR `#[doc(hidden)]` is ignored\n+    //~|  WARNING this was previously accepted\n+\n+    #[doc(alias = \"this\", hidden,)]\n+    fn it1() {}\n+    //~^^ ERROR `#[doc(hidden)]` is ignored\n+    //~|  WARNING this was previously accepted\n+\n+    #[doc(hidden, hidden)]\n+    fn it2() {}\n+    //~^^ ERROR `#[doc(hidden)]` is ignored\n+    //~|  WARNING this was previously accepted\n+    //~|  ERROR `#[doc(hidden)]` is ignored\n+    //~|  WARNING this was previously accepted\n+}"}, {"sha": "fd1202a29de2ecab36d08c376856709a09ca1428", "filename": "src/test/ui/lint/unused/unused-attr-doc-hidden.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/9d157ada35c0e363e30344526755649c3399f7de/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d157ada35c0e363e30344526755649c3399f7de/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.stderr?ref=9d157ada35c0e363e30344526755649c3399f7de", "patch": "@@ -0,0 +1,67 @@\n+error: `#[doc(hidden)]` is ignored on trait impl items\n+  --> $DIR/unused-attr-doc-hidden.rs:16:5\n+   |\n+LL |     #[doc(hidden)]\n+   |     ^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unused-attr-doc-hidden.rs:1:9\n+   |\n+LL | #![deny(unused_attributes)]\n+   |         ^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: whether the impl item is `doc(hidden)` or not entirely depends on the corresponding trait item\n+\n+error: `#[doc(hidden)]` is ignored on trait impl items\n+  --> $DIR/unused-attr-doc-hidden.rs:21:5\n+   |\n+LL |     #[doc(hidden)]\n+   |     ^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: whether the impl item is `doc(hidden)` or not entirely depends on the corresponding trait item\n+\n+error: `#[doc(hidden)]` is ignored on trait impl items\n+  --> $DIR/unused-attr-doc-hidden.rs:26:11\n+   |\n+LL |     #[doc(hidden, alias = \"aka\")]\n+   |           ^^^^^^--\n+   |           |\n+   |           help: remove this attribute\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: whether the impl item is `doc(hidden)` or not entirely depends on the corresponding trait item\n+\n+error: `#[doc(hidden)]` is ignored on trait impl items\n+  --> $DIR/unused-attr-doc-hidden.rs:31:27\n+   |\n+LL |     #[doc(alias = \"this\", hidden,)]\n+   |                           ^^^^^^-\n+   |                           |\n+   |                           help: remove this attribute\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: whether the impl item is `doc(hidden)` or not entirely depends on the corresponding trait item\n+\n+error: `#[doc(hidden)]` is ignored on trait impl items\n+  --> $DIR/unused-attr-doc-hidden.rs:36:11\n+   |\n+LL |     #[doc(hidden, hidden)]\n+   |           ^^^^^^--\n+   |           |\n+   |           help: remove this attribute\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: whether the impl item is `doc(hidden)` or not entirely depends on the corresponding trait item\n+\n+error: `#[doc(hidden)]` is ignored on trait impl items\n+  --> $DIR/unused-attr-doc-hidden.rs:36:19\n+   |\n+LL |     #[doc(hidden, hidden)]\n+   |                   ^^^^^^ help: remove this attribute\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: whether the impl item is `doc(hidden)` or not entirely depends on the corresponding trait item\n+\n+error: aborting due to 6 previous errors\n+"}]}