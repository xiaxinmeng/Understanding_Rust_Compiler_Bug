{"sha": "7abb1fafcec155c4b596147fda4aff5a5cda62f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYmIxZmFmY2VjMTU1YzRiNTk2MTQ3ZmRhNGFmZjVhNWNkYTYyZjM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-09T01:49:21Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-17T23:41:21Z"}, "message": "Remove side table of future incompatibility info\n\nMoves this information to a direct field of Lint, which is where it\nbelongs.", "tree": {"sha": "ff8331254460ff73b590cbc58c96d329a626b24c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff8331254460ff73b590cbc58c96d329a626b24c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7abb1fafcec155c4b596147fda4aff5a5cda62f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7abb1fafcec155c4b596147fda4aff5a5cda62f3", "html_url": "https://github.com/rust-lang/rust/commit/7abb1fafcec155c4b596147fda4aff5a5cda62f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7abb1fafcec155c4b596147fda4aff5a5cda62f3/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1abc30660c0c0b081a42d0a476d81ba04e6d16b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1abc30660c0c0b081a42d0a476d81ba04e6d16b", "html_url": "https://github.com/rust-lang/rust/commit/c1abc30660c0c0b081a42d0a476d81ba04e6d16b"}], "stats": {"total": 414, "additions": 183, "deletions": 231}, "files": [{"sha": "4c1093e00ceed560f094df2f9b72b1247110bca5", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 134, "deletions": 27, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/7abb1fafcec155c4b596147fda4aff5a5cda62f3/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7abb1fafcec155c4b596147fda4aff5a5cda62f3/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=7abb1fafcec155c4b596147fda4aff5a5cda62f3", "patch": "@@ -4,11 +4,12 @@\n //! compiler code, rather than using their own custom pass. Those\n //! lints are all available in `rustc_lint::builtin`.\n \n-use crate::lint::{LintPass, LateLintPass, LintArray};\n+use crate::lint::{LintPass, LateLintPass, LintArray, FutureIncompatibleInfo};\n use crate::middle::stability;\n use crate::session::Session;\n use errors::{Applicability, DiagnosticBuilder, pluralise};\n use syntax::ast;\n+use syntax::edition::Edition;\n use syntax::source_map::Span;\n use syntax::symbol::Symbol;\n \n@@ -125,7 +126,11 @@ declare_lint! {\n declare_lint! {\n     pub PRIVATE_IN_PUBLIC,\n     Warn,\n-    \"detect private items in public interfaces not caught by the old implementation\"\n+    \"detect private items in public interfaces not caught by the old implementation\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n@@ -137,13 +142,21 @@ declare_lint! {\n declare_lint! {\n     pub PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n     Deny,\n-    \"detect public re-exports of private extern crates\"\n+    \"detect public re-exports of private extern crates\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub INVALID_TYPE_PARAM_DEFAULT,\n     Deny,\n-    \"type parameter default erroneously allowed in invalid location\"\n+    \"type parameter default erroneously allowed in invalid location\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #36887 <https://github.com/rust-lang/rust/issues/36887>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n@@ -155,56 +168,92 @@ declare_lint! {\n declare_lint! {\n     pub SAFE_EXTERN_STATICS,\n     Deny,\n-    \"safe access to extern statics was erroneously allowed\"\n+    \"safe access to extern statics was erroneously allowed\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #36247 <https://github.com/rust-lang/rust/issues/36247>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub SAFE_PACKED_BORROWS,\n     Warn,\n-    \"safe borrows of fields of packed structs were was erroneously allowed\"\n+    \"safe borrows of fields of packed structs were was erroneously allowed\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #46043 <https://github.com/rust-lang/rust/issues/46043>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub PATTERNS_IN_FNS_WITHOUT_BODY,\n     Warn,\n-    \"patterns in functions without body were erroneously allowed\"\n+    \"patterns in functions without body were erroneously allowed\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #35203 <https://github.com/rust-lang/rust/issues/35203>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub LEGACY_DIRECTORY_OWNERSHIP,\n     Deny,\n     \"non-inline, non-`#[path]` modules (e.g., `mod foo;`) were erroneously allowed in some files \\\n-     not named `mod.rs`\"\n+     not named `mod.rs`\",\n+     @future_incompatible = FutureIncompatibleInfo {\n+         reference: \"issue #37872 <https://github.com/rust-lang/rust/issues/37872>\",\n+         edition: None,\n+     };\n }\n \n declare_lint! {\n     pub LEGACY_CONSTRUCTOR_VISIBILITY,\n     Deny,\n-    \"detects use of struct constructors that would be invisible with new visibility rules\"\n+    \"detects use of struct constructors that would be invisible with new visibility rules\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #39207 <https://github.com/rust-lang/rust/issues/39207>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub MISSING_FRAGMENT_SPECIFIER,\n     Deny,\n-    \"detects missing fragment specifiers in unused `macro_rules!` patterns\"\n+    \"detects missing fragment specifiers in unused `macro_rules!` patterns\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #40107 <https://github.com/rust-lang/rust/issues/40107>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n     Deny,\n-    \"detects parenthesized generic parameters in type and module names\"\n+    \"detects parenthesized generic parameters in type and module names\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #42238 <https://github.com/rust-lang/rust/issues/42238>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub LATE_BOUND_LIFETIME_ARGUMENTS,\n     Warn,\n-    \"detects generic lifetime arguments in path segments with late bound lifetime parameters\"\n+    \"detects generic lifetime arguments in path segments with late bound lifetime parameters\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #42868 <https://github.com/rust-lang/rust/issues/42868>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub ORDER_DEPENDENT_TRAIT_OBJECTS,\n     Deny,\n-    \"trait-object types were treated as different depending on marker-trait order\"\n+    \"trait-object types were treated as different depending on marker-trait order\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #56484 <https://github.com/rust-lang/rust/issues/56484>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n@@ -247,7 +296,11 @@ declare_lint! {\n declare_lint! {\n     pub TYVAR_BEHIND_RAW_POINTER,\n     Warn,\n-    \"raw pointer to an inference variable\"\n+    \"raw pointer to an inference variable\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #46906 <https://github.com/rust-lang/rust/issues/46906>\",\n+        edition: Some(Edition::Edition2018),\n+    };\n }\n \n declare_lint! {\n@@ -266,19 +319,33 @@ declare_lint! {\n     pub ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n     Allow,\n     \"fully qualified paths that start with a module name \\\n-     instead of `crate`, `self`, or an extern crate name\"\n+     instead of `crate`, `self`, or an extern crate name\",\n+     @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #53130 <https://github.com/rust-lang/rust/issues/53130>\",\n+        edition: Some(Edition::Edition2018),\n+     };\n }\n \n declare_lint! {\n     pub ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n     Warn,\n-    \"floating-point literals cannot be used in patterns\"\n+    \"floating-point literals cannot be used in patterns\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #41620 <https://github.com/rust-lang/rust/issues/41620>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub UNSTABLE_NAME_COLLISIONS,\n     Warn,\n-    \"detects name collision with an existing but unstable method\"\n+    \"detects name collision with an existing but unstable method\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #48919 <https://github.com/rust-lang/rust/issues/48919>\",\n+        edition: None,\n+        // Note: this item represents future incompatibility of all unstable functions in the\n+        //       standard library, and thus should never be removed or changed to an error.\n+    };\n }\n \n declare_lint! {\n@@ -296,7 +363,11 @@ declare_lint! {\n declare_lint! {\n     pub DUPLICATE_MACRO_EXPORTS,\n     Deny,\n-    \"detects duplicate macro exports\"\n+    \"detects duplicate macro exports\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #35896 <https://github.com/rust-lang/rust/issues/35896>\",\n+        edition: Some(Edition::Edition2018),\n+    };\n }\n \n declare_lint! {\n@@ -320,13 +391,21 @@ declare_lint! {\n declare_lint! {\n     pub WHERE_CLAUSES_OBJECT_SAFETY,\n     Warn,\n-    \"checks the object safety of where clauses\"\n+    \"checks the object safety of where clauses\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #51443 <https://github.com/rust-lang/rust/issues/51443>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n     Warn,\n-    \"detects proc macro derives using inaccessible names from parent modules\"\n+    \"detects proc macro derives using inaccessible names from parent modules\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #50504 <https://github.com/rust-lang/rust/issues/50504>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n@@ -340,7 +419,11 @@ declare_lint! {\n     pub MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,\n     Deny,\n     \"macro-expanded `macro_export` macros from the current crate \\\n-     cannot be referred to by absolute paths\"\n+     cannot be referred to by absolute paths\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #52234 <https://github.com/rust-lang/rust/issues/52234>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n@@ -353,15 +436,23 @@ declare_lint! {\n     pub INDIRECT_STRUCTURAL_MATCH,\n     // defaulting to allow until rust-lang/rust#62614 is fixed.\n     Allow,\n-    \"pattern with const indirectly referencing non-`#[structural_match]` type\"\n+    \"pattern with const indirectly referencing non-`#[structural_match]` type\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #62411 <https://github.com/rust-lang/rust/issues/62411>\",\n+        edition: None,\n+    };\n }\n \n /// Some lints that are buffered from `libsyntax`. See `syntax::early_buffered_lints`.\n pub mod parser {\n     declare_lint! {\n         pub ILL_FORMED_ATTRIBUTE_INPUT,\n         Warn,\n-        \"ill-formed attribute inputs that were previously accepted and used in practice\"\n+        \"ill-formed attribute inputs that were previously accepted and used in practice\",\n+        @future_incompatible = super::FutureIncompatibleInfo {\n+            reference: \"issue #57571 <https://github.com/rust-lang/rust/issues/57571>\",\n+            edition: None,\n+        };\n     }\n \n     declare_lint! {\n@@ -387,25 +478,41 @@ declare_lint! {\n declare_lint! {\n     pub AMBIGUOUS_ASSOCIATED_ITEMS,\n     Deny,\n-    \"ambiguous associated items\"\n+    \"ambiguous associated items\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #57644 <https://github.com/rust-lang/rust/issues/57644>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub NESTED_IMPL_TRAIT,\n     Warn,\n-    \"nested occurrence of `impl Trait` type\"\n+    \"nested occurrence of `impl Trait` type\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #59014 <https://github.com/rust-lang/rust/issues/59014>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub MUTABLE_BORROW_RESERVATION_CONFLICT,\n     Warn,\n-    \"reservation of a two-phased borrow conflicts with other shared borrows\"\n+    \"reservation of a two-phased borrow conflicts with other shared borrows\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #59159 <https://github.com/rust-lang/rust/issues/59159>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub SOFT_UNSTABLE,\n     Deny,\n-    \"a feature gate that doesn't break dependent crates\"\n+    \"a feature gate that doesn't break dependent crates\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #64266 <https://github.com/rust-lang/rust/issues/64266>\",\n+        edition: None,\n+    };\n }\n \n declare_lint_pass! {"}, {"sha": "97b9f21163dbe0a56ce4696427eae68971ab60bb", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 20, "deletions": 43, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/7abb1fafcec155c4b596147fda4aff5a5cda62f3/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7abb1fafcec155c4b596147fda4aff5a5cda62f3/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=7abb1fafcec155c4b596147fda4aff5a5cda62f3", "patch": "@@ -22,7 +22,7 @@ use crate::hir::intravisit as hir_visit;\n use crate::hir::intravisit::Visitor;\n use crate::hir::map::{definitions::DisambiguatedDefPathData, DefPathData};\n use crate::lint::{EarlyLintPass, LateLintPass, EarlyLintPassObject, LateLintPassObject};\n-use crate::lint::{Level, Lint, LintId, LintPass, LintBuffer};\n+use crate::lint::{Level, Lint, LintId, LintPass, LintBuffer, FutureIncompatibleInfo};\n use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::lint::levels::{LintLevelSets, LintLevelsBuilder};\n use crate::middle::privacy::AccessLevels;\n@@ -38,7 +38,6 @@ use std::default::Default as StdDefault;\n use rustc_data_structures::sync::{ReadGuard, ParallelIterator, join, par_iter};\n use rustc_serialize::{Decoder, Decodable, Encoder, Encodable};\n use syntax::ast;\n-use syntax::edition;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::visit as ast_visit;\n use syntax_pos::{MultiSpan, Span, symbol::Symbol};\n@@ -69,10 +68,6 @@ pub struct LintStore {\n \n     /// Map of registered lint groups to what lints they expand to.\n     lint_groups: FxHashMap<&'static str, LintGroup>,\n-\n-    /// Extra info for future incompatibility lints, describing the\n-    /// issue or RFC that caused the incompatibility.\n-    future_incompatible: FxHashMap<LintId, FutureIncompatibleInfo>,\n }\n \n /// Lints that are buffered up early on in the `Session` before the\n@@ -86,18 +81,6 @@ pub struct BufferedEarlyLint {\n     pub diagnostic: BuiltinLintDiagnostics,\n }\n \n-/// Extra information for a future incompatibility lint. See the call\n-/// to `register_future_incompatible` in `librustc_lint/lib.rs` for\n-/// guidelines.\n-pub struct FutureIncompatibleInfo {\n-    pub id: LintId,\n-    /// e.g., a URL for an issue/PR/RFC or error code\n-    pub reference: &'static str,\n-    /// If this is an edition fixing lint, the edition in which\n-    /// this lint becomes obsolete\n-    pub edition: Option<edition::Edition>,\n-}\n-\n /// The target of the `by_name` map, which accounts for renaming/deprecation.\n enum TargetLint {\n     /// A direct lint target\n@@ -152,7 +135,6 @@ impl LintStore {\n             late_passes: vec![],\n             late_module_passes: vec![],\n             by_name: Default::default(),\n-            future_incompatible: Default::default(),\n             lint_groups: Default::default(),\n         }\n     }\n@@ -198,36 +180,31 @@ impl LintStore {\n             if self.by_name.insert(lint.name_lower(), Id(id)).is_some() {\n                 bug!(\"duplicate specification of lint {}\", lint.name_lower())\n             }\n-        }\n-    }\n \n-    pub fn register_future_incompatible(&mut self,\n-                                        lints: Vec<FutureIncompatibleInfo>) {\n+            if let Some(FutureIncompatibleInfo { edition, .. }) = lint.future_incompatible {\n+                if let Some(edition) = edition {\n+                    self.lint_groups.entry(edition.lint_name())\n+                        .or_insert(LintGroup {\n+                            lint_ids: vec![],\n+                            from_plugin: lint.is_plugin,\n+                            depr: None,\n+                        })\n+                        .lint_ids.push(id);\n+                }\n \n-        for edition in edition::ALL_EDITIONS {\n-            let lints = lints.iter().filter(|f| f.edition == Some(*edition)).map(|f| f.id)\n-                             .collect::<Vec<_>>();\n-            if !lints.is_empty() {\n-                self.register_group(false, edition.lint_name(), None, lints)\n+                self.lint_groups.entry(\"future_incompatible\")\n+                    .or_insert(LintGroup {\n+                        lint_ids: vec![],\n+                        from_plugin: lint.is_plugin,\n+                        depr: None,\n+                    })\n+                    .lint_ids.push(id);\n             }\n         }\n-\n-        let mut future_incompatible = Vec::with_capacity(lints.len());\n-        for lint in lints {\n-            future_incompatible.push(lint.id);\n-            self.future_incompatible.insert(lint.id, lint);\n-        }\n-\n-        self.register_group(\n-            false,\n-            \"future_incompatible\",\n-            None,\n-            future_incompatible,\n-        );\n     }\n \n-    pub fn future_incompatible(&self, id: LintId) -> Option<&FutureIncompatibleInfo> {\n-        self.future_incompatible.get(&id)\n+    pub fn future_incompatible(&self, id: LintId) -> Option<FutureIncompatibleInfo> {\n+        id.lint.future_incompatible\n     }\n \n     pub fn register_group_alias("}, {"sha": "ba7ec0ed6e484507e3171f37169cb9a2e2423eed", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7abb1fafcec155c4b596147fda4aff5a5cda62f3/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7abb1fafcec155c4b596147fda4aff5a5cda62f3/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=7abb1fafcec155c4b596147fda4aff5a5cda62f3", "patch": "@@ -45,7 +45,7 @@ use syntax_pos::Span;\n \n pub use crate::lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n                         check_crate, check_ast_crate, late_lint_mod, CheckLintNameResult,\n-                        FutureIncompatibleInfo, BufferedEarlyLint,};\n+                        BufferedEarlyLint,};\n \n /// Specification of a single lint.\n #[derive(Copy, Clone, Debug)]\n@@ -77,9 +77,21 @@ pub struct Lint {\n     /// `true` if this lint is reported even inside expansions of external macros.\n     pub report_in_external_macro: bool,\n \n+    pub future_incompatible: Option<FutureIncompatibleInfo>,\n+\n     pub is_plugin: bool,\n }\n \n+/// Extra information for a future incompatibility lint.\n+#[derive(Copy, Clone, Debug)]\n+pub struct FutureIncompatibleInfo {\n+    /// e.g., a URL for an issue/PR/RFC or error code\n+    pub reference: &'static str,\n+    /// If this is an edition fixing lint, the edition in which\n+    /// this lint becomes obsolete\n+    pub edition: Option<Edition>,\n+}\n+\n impl Lint {\n     pub const fn default_fields_for_macro() -> Self {\n         Lint {\n@@ -89,6 +101,7 @@ impl Lint {\n             edition_lint_opts: None,\n             is_plugin: false,\n             report_in_external_macro: false,\n+            future_incompatible: None,\n         }\n     }\n \n@@ -122,14 +135,16 @@ macro_rules! declare_lint {\n             $vis $NAME, $Level, $desc,\n         );\n     );\n-    ($vis: vis $NAME: ident, $Level: ident, $desc: expr, $($v:ident),*) => (\n+    ($vis: vis $NAME: ident, $Level: ident, $desc: expr,\n+     $(@future_incompatible = $fi:expr;)? $($v:ident),*) => (\n         $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n             name: stringify!($NAME),\n             default_level: $crate::lint::$Level,\n             desc: $desc,\n             edition_lint_opts: None,\n             is_plugin: false,\n             $($v: true,)*\n+            $(future_incompatible: Some($fi),)*\n             ..$crate::lint::Lint::default_fields_for_macro()\n         };\n     );\n@@ -171,6 +186,7 @@ macro_rules! declare_tool_lint {\n             desc: $desc,\n             edition_lint_opts: None,\n             report_in_external_macro: $external,\n+            future_incompatible: None,\n             is_plugin: true,\n         };\n     );"}, {"sha": "bce04471cec48ea6cfade90008d00ed413ad404b", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7abb1fafcec155c4b596147fda4aff5a5cda62f3/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7abb1fafcec155c4b596147fda4aff5a5cda62f3/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=7abb1fafcec155c4b596147fda4aff5a5cda62f3", "patch": "@@ -27,6 +27,7 @@ use rustc::hir::def::{Res, DefKind};\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::ty::{self, Ty, TyCtxt, layout::VariantIdx};\n use rustc::{lint, util};\n+use rustc::lint::FutureIncompatibleInfo;\n use hir::Node;\n use util::nodemap::HirIdSet;\n use lint::{LateContext, LintContext, LintArray};\n@@ -601,7 +602,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDebugImplementations {\n declare_lint! {\n     pub ANONYMOUS_PARAMETERS,\n     Allow,\n-    \"detects anonymous parameters\"\n+    \"detects anonymous parameters\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #41686 <https://github.com/rust-lang/rust/issues/41686>\",\n+        edition: Some(Edition::Edition2018),\n+    };\n }\n \n declare_lint_pass!(\n@@ -1423,7 +1428,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnameableTestItems {\n declare_lint! {\n     pub KEYWORD_IDENTS,\n     Allow,\n-    \"detects edition keywords being used as an identifier\"\n+    \"detects edition keywords being used as an identifier\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #49716 <https://github.com/rust-lang/rust/issues/49716>\",\n+        edition: Some(Edition::Edition2018),\n+    };\n }\n \n declare_lint_pass!("}, {"sha": "c83074c95ca0a3ab41c9be4455f06041276842c2", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 157, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/7abb1fafcec155c4b596147fda4aff5a5cda62f3/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7abb1fafcec155c4b596147fda4aff5a5cda62f3/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=7abb1fafcec155c4b596147fda4aff5a5cda62f3", "patch": "@@ -33,25 +33,21 @@ use rustc::lint;\n use rustc::lint::{EarlyContext, LateContext, LateLintPass, EarlyLintPass, LintPass, LintArray};\n use rustc::lint::builtin::{\n     BARE_TRAIT_OBJECTS,\n-    ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n     ELIDED_LIFETIMES_IN_PATHS,\n     EXPLICIT_OUTLIVES_REQUIREMENTS,\n     INTRA_DOC_LINK_RESOLUTION_FAILURE,\n     MISSING_DOC_CODE_EXAMPLES,\n     PRIVATE_DOC_TESTS,\n-    parser::ILL_FORMED_ATTRIBUTE_INPUT,\n };\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n \n use syntax::ast;\n-use syntax::edition::Edition;\n use syntax_pos::Span;\n \n use lint::LintId;\n-use lint::FutureIncompatibleInfo;\n \n use redundant_semicolon::*;\n use nonstandard_style::*;\n@@ -276,159 +272,6 @@ pub fn register_builtins(store: &mut lint::LintStore, no_interleave_lints: bool)\n                     MISSING_DOC_CODE_EXAMPLES,\n                     PRIVATE_DOC_TESTS);\n \n-    // Guidelines for creating a future incompatibility lint:\n-    //\n-    // - Create a lint defaulting to warn as normal, with ideally the same error\n-    //   message you would normally give\n-    // - Add a suitable reference, typically an RFC or tracking issue. Go ahead\n-    //   and include the full URL, sort items in ascending order of issue numbers.\n-    // - Later, change lint to error\n-    // - Eventually, remove lint\n-    store.register_future_incompatible(vec![\n-        FutureIncompatibleInfo {\n-            id: LintId::of(PRIVATE_IN_PUBLIC),\n-            reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(PUB_USE_OF_PRIVATE_EXTERN_CRATE),\n-            reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(PATTERNS_IN_FNS_WITHOUT_BODY),\n-            reference: \"issue #35203 <https://github.com/rust-lang/rust/issues/35203>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(DUPLICATE_MACRO_EXPORTS),\n-            reference: \"issue #35896 <https://github.com/rust-lang/rust/issues/35896>\",\n-            edition: Some(Edition::Edition2018),\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(KEYWORD_IDENTS),\n-            reference: \"issue #49716 <https://github.com/rust-lang/rust/issues/49716>\",\n-            edition: Some(Edition::Edition2018),\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(SAFE_EXTERN_STATICS),\n-            reference: \"issue #36247 <https://github.com/rust-lang/rust/issues/36247>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(INVALID_TYPE_PARAM_DEFAULT),\n-            reference: \"issue #36887 <https://github.com/rust-lang/rust/issues/36887>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(LEGACY_DIRECTORY_OWNERSHIP),\n-            reference: \"issue #37872 <https://github.com/rust-lang/rust/issues/37872>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(LEGACY_CONSTRUCTOR_VISIBILITY),\n-            reference: \"issue #39207 <https://github.com/rust-lang/rust/issues/39207>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(MISSING_FRAGMENT_SPECIFIER),\n-            reference: \"issue #40107 <https://github.com/rust-lang/rust/issues/40107>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(ILLEGAL_FLOATING_POINT_LITERAL_PATTERN),\n-            reference: \"issue #41620 <https://github.com/rust-lang/rust/issues/41620>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(ANONYMOUS_PARAMETERS),\n-            reference: \"issue #41686 <https://github.com/rust-lang/rust/issues/41686>\",\n-            edition: Some(Edition::Edition2018),\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES),\n-            reference: \"issue #42238 <https://github.com/rust-lang/rust/issues/42238>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(LATE_BOUND_LIFETIME_ARGUMENTS),\n-            reference: \"issue #42868 <https://github.com/rust-lang/rust/issues/42868>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(SAFE_PACKED_BORROWS),\n-            reference: \"issue #46043 <https://github.com/rust-lang/rust/issues/46043>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(ORDER_DEPENDENT_TRAIT_OBJECTS),\n-            reference: \"issue #56484 <https://github.com/rust-lang/rust/issues/56484>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(TYVAR_BEHIND_RAW_POINTER),\n-            reference: \"issue #46906 <https://github.com/rust-lang/rust/issues/46906>\",\n-            edition: Some(Edition::Edition2018),\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(UNSTABLE_NAME_COLLISIONS),\n-            reference: \"issue #48919 <https://github.com/rust-lang/rust/issues/48919>\",\n-            edition: None,\n-            // Note: this item represents future incompatibility of all unstable functions in the\n-            //       standard library, and thus should never be removed or changed to an error.\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE),\n-            reference: \"issue #53130 <https://github.com/rust-lang/rust/issues/53130>\",\n-            edition: Some(Edition::Edition2018),\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(WHERE_CLAUSES_OBJECT_SAFETY),\n-            reference: \"issue #51443 <https://github.com/rust-lang/rust/issues/51443>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(PROC_MACRO_DERIVE_RESOLUTION_FALLBACK),\n-            reference: \"issue #50504 <https://github.com/rust-lang/rust/issues/50504>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS),\n-            reference: \"issue #52234 <https://github.com/rust-lang/rust/issues/52234>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(ILL_FORMED_ATTRIBUTE_INPUT),\n-            reference: \"issue #57571 <https://github.com/rust-lang/rust/issues/57571>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(AMBIGUOUS_ASSOCIATED_ITEMS),\n-            reference: \"issue #57644 <https://github.com/rust-lang/rust/issues/57644>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(NESTED_IMPL_TRAIT),\n-            reference: \"issue #59014 <https://github.com/rust-lang/rust/issues/59014>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(MUTABLE_BORROW_RESERVATION_CONFLICT),\n-            reference: \"issue #59159 <https://github.com/rust-lang/rust/issues/59159>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(INDIRECT_STRUCTURAL_MATCH),\n-            reference: \"issue #62411 <https://github.com/rust-lang/rust/issues/62411>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(SOFT_UNSTABLE),\n-            reference: \"issue #64266 <https://github.com/rust-lang/rust/issues/64266>\",\n-            edition: None,\n-        },\n-        ]);\n-\n     // Register renamed and removed lints.\n     store.register_renamed(\"single_use_lifetime\", \"single_use_lifetimes\");\n     store.register_renamed(\"elided_lifetime_in_path\", \"elided_lifetimes_in_paths\");"}]}