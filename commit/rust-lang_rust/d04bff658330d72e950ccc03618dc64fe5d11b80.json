{"sha": "d04bff658330d72e950ccc03618dc64fe5d11b80", "node_id": "C_kwDOAAsO6NoAKGQwNGJmZjY1ODMzMGQ3MmU5NTBjY2MwMzYxOGRjNjRmZTVkMTFiODA", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-10-05T16:26:48Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-10-17T08:54:03Z"}, "message": "add inline to `TrivialTypeTraversalImpls`", "tree": {"sha": "4709b7bf53b58566af44c363bb1cfd6a43dffd0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4709b7bf53b58566af44c363bb1cfd6a43dffd0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d04bff658330d72e950ccc03618dc64fe5d11b80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d04bff658330d72e950ccc03618dc64fe5d11b80", "html_url": "https://github.com/rust-lang/rust/commit/d04bff658330d72e950ccc03618dc64fe5d11b80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d04bff658330d72e950ccc03618dc64fe5d11b80/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "face090ef15de41ae7bdb2e681e4ada25210a7cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/face090ef15de41ae7bdb2e681e4ada25210a7cf", "html_url": "https://github.com/rust-lang/rust/commit/face090ef15de41ae7bdb2e681e4ada25210a7cf"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "01fe72de61258bfac36a8f780f12ac1f1d3255ba", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d04bff658330d72e950ccc03618dc64fe5d11b80/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04bff658330d72e950ccc03618dc64fe5d11b80/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=d04bff658330d72e950ccc03618dc64fe5d11b80", "patch": "@@ -54,13 +54,22 @@ macro_rules! TrivialTypeTraversalImpls {\n             impl<$tcx> $crate::ty::fold::TypeFoldable<$tcx> for $ty {\n                 fn try_fold_with<F: $crate::ty::fold::FallibleTypeFolder<$tcx>>(\n                     self,\n-                    _: &mut F\n-                ) -> ::std::result::Result<$ty, F::Error> {\n+                    _: &mut F,\n+                ) -> ::std::result::Result<Self, F::Error> {\n                     Ok(self)\n                 }\n+\n+                #[inline]\n+                fn fold_with<F: $crate::ty::fold::TypeFolder<$tcx>>(\n+                    self,\n+                    _: &mut F,\n+                ) -> Self {\n+                    self\n+                }\n             }\n \n             impl<$tcx> $crate::ty::visit::TypeVisitable<$tcx> for $ty {\n+                #[inline]\n                 fn visit_with<F: $crate::ty::visit::TypeVisitor<$tcx>>(\n                     &self,\n                     _: &mut F)"}, {"sha": "4c0974f86fb35240532d9b9c9dd342c4bf46e627", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d04bff658330d72e950ccc03618dc64fe5d11b80/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04bff658330d72e950ccc03618dc64fe5d11b80/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=d04bff658330d72e950ccc03618dc64fe5d11b80", "patch": "@@ -26,6 +26,12 @@ TrivialTypeTraversalAndLiftImpls! {\n     GeneratorSavedLocal,\n }\n \n+TrivialTypeTraversalImpls! {\n+    for <'tcx> {\n+        ConstValue<'tcx>,\n+    }\n+}\n+\n impl<'tcx> TypeFoldable<'tcx> for &'tcx [InlineAsmTemplatePiece] {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n@@ -49,9 +55,3 @@ impl<'tcx, R: Idx, C: Idx> TypeFoldable<'tcx> for BitMatrix<R, C> {\n         Ok(self)\n     }\n }\n-\n-impl<'tcx> TypeFoldable<'tcx> for ConstValue<'tcx> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n-        Ok(self)\n-    }\n-}"}, {"sha": "e7cd497b206a9eacc500ea7f6bf76258e1b0c1a4", "filename": "compiler/rustc_middle/src/mir/type_visitable.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d04bff658330d72e950ccc03618dc64fe5d11b80/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04bff658330d72e950ccc03618dc64fe5d11b80/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs?ref=d04bff658330d72e950ccc03618dc64fe5d11b80", "patch": "@@ -7,9 +7,3 @@ impl<'tcx, R: Idx, C: Idx> TypeVisitable<'tcx> for BitMatrix<R, C> {\n         ControlFlow::CONTINUE\n     }\n }\n-\n-impl<'tcx> TypeVisitable<'tcx> for ConstValue<'tcx> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n-        ControlFlow::CONTINUE\n-    }\n-}"}]}