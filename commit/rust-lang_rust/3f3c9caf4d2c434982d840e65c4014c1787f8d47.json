{"sha": "3f3c9caf4d2c434982d840e65c4014c1787f8d47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmM2M5Y2FmNGQyYzQzNDk4MmQ4NDBlNjVjNDAxNGMxNzg3ZjhkNDc=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-05-30T01:22:38Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-05-30T01:22:38Z"}, "message": "Handle poststates of breaking loops correctly in typestate\n\nThe poststate should be one where all predicates are assumed false,\nrather than the unchanged prestate.\n\nCloses #2374", "tree": {"sha": "76c9e0020334ff46b7688945d37c2196305ef971", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76c9e0020334ff46b7688945d37c2196305ef971"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f3c9caf4d2c434982d840e65c4014c1787f8d47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f3c9caf4d2c434982d840e65c4014c1787f8d47", "html_url": "https://github.com/rust-lang/rust/commit/3f3c9caf4d2c434982d840e65c4014c1787f8d47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f3c9caf4d2c434982d840e65c4014c1787f8d47/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b30daa6eefcd27a4e6ddccc6ccfc933ab28a80c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b30daa6eefcd27a4e6ddccc6ccfc933ab28a80c6", "html_url": "https://github.com/rust-lang/rust/commit/b30daa6eefcd27a4e6ddccc6ccfc933ab28a80c6"}], "stats": {"total": 35, "additions": 10, "deletions": 25}, "files": [{"sha": "eaf4be1955cc353fadabb5c1607d85ee7d24c368", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3f3c9caf4d2c434982d840e65c4014c1787f8d47/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3c9caf4d2c434982d840e65c4014c1787f8d47/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=3f3c9caf4d2c434982d840e65c4014c1787f8d47", "patch": "@@ -2,6 +2,7 @@ import ann::*;\n import aux::*;\n import tritv::{tritv_clone, tritv_set, ttrue};\n \n+import syntax::print::pprust::block_to_str;\n import bitvectors::*;\n import pat_util::*;\n import syntax::ast::*;\n@@ -13,9 +14,6 @@ import driver::session::session;\n import std::map::hashmap;\n \n fn forbid_upvar(fcx: fn_ctxt, rhs_id: node_id, sp: span, t: oper_type) {\n-    //            fcx.ccx.tcx.sess.span_note(sp,\n-    //              #fmt(\"forbid_upvar: checking. %?\", t));\n-\n     alt t {\n       oper_move {\n         alt local_node_id_to_def(fcx, rhs_id) {\n@@ -457,12 +455,18 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n         let mut changed = set_prestate_ann(fcx.ccx, e.id, loop_pres)\n               | find_pre_post_state_block(fcx, loop_pres, body);\n         /* conservative approximation: if a loop contains a break\n-           or cont, we assume nothing about the poststate */\n+           or cont, we assume nothing about the poststate (so, we\n+           set all predicates to \"don't know\" */\n         /* which is still unsound -- see [Break-unsound] */\n         if may_break(body) {\n                 /* Only do this if there are *breaks* not conts.\n-                 An infinite loop with conts is still an infinite loop. */\n-            ret changed | set_poststate_ann(fcx.ccx, e.id, pres);\n+                 An infinite loop with conts is still an infinite loop.\n+                We assume all preds are FALSE, not '?' -- because in the\n+                worst case, the body could invalidate all preds and\n+                deinitialize everything before breaking */\n+            let post = empty_poststate(num_constrs);\n+            tritv::tritv_kill(post);\n+            ret changed | set_poststate_ann(fcx.ccx, e.id, post);\n         } else {\n             ret changed | set_poststate_ann(fcx.ccx, e.id,\n                                             false_postcond(num_constrs));"}, {"sha": "05fcbca9633a038f0f3d3bff29c738f8974c357a", "filename": "src/rustc/middle/tstate/tritv.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3f3c9caf4d2c434982d840e65c4014c1787f8d47/src%2Frustc%2Fmiddle%2Ftstate%2Ftritv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3c9caf4d2c434982d840e65c4014c1787f8d47/src%2Frustc%2Fmiddle%2Ftstate%2Ftritv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Ftritv.rs?ref=3f3c9caf4d2c434982d840e65c4014c1787f8d47", "patch": "@@ -109,27 +109,14 @@ fn trit_or(a: trit, b: trit) -> trit {\n fn trit_and(a: trit, b: trit) -> trit {\n     alt a {\n       dont_care { b }\n-\n-\n-\n-\n       // also seems wrong for case b = ttrue\n       ttrue {\n         alt b {\n           dont_care { ttrue }\n-\n-\n-\n-\n           // ??? Seems wrong\n           ttrue {\n             ttrue\n           }\n-\n-\n-\n-\n-\n           // false wins, since if something is uninit\n           // on one path, we care\n           // (Rationale: it's always safe to assume that\n@@ -140,11 +127,6 @@ fn trit_and(a: trit, b: trit) -> trit {\n           }\n         }\n       }\n-\n-\n-\n-\n-\n       // Rationale: if it's uninit on one path,\n       // we can consider it as uninit on all paths\n       tfalse {"}, {"sha": "a55fe477ba796c4efbb588f968de27f84da57583", "filename": "src/test/compile-fail/loop-pred-constraints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f3c9caf4d2c434982d840e65c4014c1787f8d47/src%2Ftest%2Fcompile-fail%2Floop-pred-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3c9caf4d2c434982d840e65c4014c1787f8d47/src%2Ftest%2Fcompile-fail%2Floop-pred-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floop-pred-constraints.rs?ref=3f3c9caf4d2c434982d840e65c4014c1787f8d47", "patch": "@@ -1,4 +1,3 @@\n-// xfail-test\n // https://github.com/mozilla/rust/issues/2374\n // error-pattern:unsatisfied precondition constraint (for example, even(y\n "}]}