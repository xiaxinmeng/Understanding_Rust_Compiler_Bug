{"sha": "65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "node_id": "C_kwDOAAsO6NoAKDY1ZDJmMmE1ZjljMzIzYzg4ZDEwNjhlOGU5MGQwYjQ3YTIwZDQ5MWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-19T05:23:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-19T05:23:40Z"}, "message": "Auto merge of #106810 - oli-obk:resolver_reverse_plumbing, r=petrochenkov\n\nVarious cleanups around pre-TyCtxt queries and functions\n\npart of #105462\n\nbased on https://github.com/rust-lang/rust/pull/106776 (everything starting at [0e2b39f](https://github.com/rust-lang/rust/pull/106810/commits/0e2b39fd1ffde51b50d45ccbe41de52b85136b8b) is new in this PR)\n\nr? `@petrochenkov`\n\nI think this should be most of the uncontroversial part of #105462.", "tree": {"sha": "dee0cdbd8d893160c307f5afb7cb8d7373d8dfca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dee0cdbd8d893160c307f5afb7cb8d7373d8dfca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "html_url": "https://github.com/rust-lang/rust/commit/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "html_url": "https://github.com/rust-lang/rust/commit/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb"}, {"sha": "13555593672b49b5306990d63d0e61a49e17d9f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/13555593672b49b5306990d63d0e61a49e17d9f0", "html_url": "https://github.com/rust-lang/rust/commit/13555593672b49b5306990d63d0e61a49e17d9f0"}], "stats": {"total": 503, "additions": 203, "deletions": 300}, "files": [{"sha": "28fbcb15b2b5893ab9ea6912d5047a05a6f293a7", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "patch": "@@ -68,7 +68,7 @@ impl DebugContext {\n             .working_dir\n             .to_string_lossy(FileNameDisplayPreference::Remapped)\n             .into_owned();\n-        let (name, file_info) = match tcx.sess.local_crate_source_file.clone() {\n+        let (name, file_info) = match tcx.sess.local_crate_source_file() {\n             Some(path) => {\n                 let name = path.to_string_lossy().into_owned();\n                 (name, None)"}, {"sha": "b6eb5ee183fa397e6487e75983d27cbe393bcdfc", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "patch": "@@ -782,10 +782,10 @@ pub fn build_compile_unit_di_node<'ll, 'tcx>(\n     codegen_unit_name: &str,\n     debug_context: &CodegenUnitDebugContext<'ll, 'tcx>,\n ) -> &'ll DIDescriptor {\n-    let mut name_in_debuginfo = match tcx.sess.local_crate_source_file {\n-        Some(ref path) => path.clone(),\n-        None => PathBuf::from(tcx.crate_name(LOCAL_CRATE).as_str()),\n-    };\n+    let mut name_in_debuginfo = tcx\n+        .sess\n+        .local_crate_source_file()\n+        .unwrap_or_else(|| PathBuf::from(tcx.crate_name(LOCAL_CRATE).as_str()));\n \n     // To avoid breaking split DWARF, we need to ensure that each codegen unit\n     // has a unique `DW_AT_name`. This is because there's a remote chance that"}, {"sha": "f50ad0137b88aacff80bed38c6e5caeccf54cc11", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 32, "deletions": 78, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "patch": "@@ -219,7 +219,6 @@ fn run_compiler(\n         crate_cfg: cfg,\n         crate_check_cfg: check_cfg,\n         input: Input::File(PathBuf::new()),\n-        input_path: None,\n         output_file: ofile,\n         output_dir: odir,\n         file_loader,\n@@ -237,9 +236,8 @@ fn run_compiler(\n \n     match make_input(config.opts.error_format, &matches.free) {\n         Err(reported) => return Err(reported),\n-        Ok(Some((input, input_file_path))) => {\n+        Ok(Some(input)) => {\n             config.input = input;\n-            config.input_path = input_file_path;\n \n             callbacks.config(&mut config);\n         }\n@@ -261,14 +259,8 @@ fn run_compiler(\n                         describe_lints(compiler.session(), &lint_store, registered_lints);\n                         return;\n                     }\n-                    let should_stop = print_crate_info(\n-                        &***compiler.codegen_backend(),\n-                        compiler.session(),\n-                        None,\n-                        compiler.output_dir(),\n-                        compiler.output_file(),\n-                        compiler.temps_dir(),\n-                    );\n+                    let should_stop =\n+                        print_crate_info(&***compiler.codegen_backend(), compiler.session(), false);\n \n                     if should_stop == Compilation::Stop {\n                         return;\n@@ -290,18 +282,9 @@ fn run_compiler(\n \n     interface::run_compiler(config, |compiler| {\n         let sess = compiler.session();\n-        let should_stop = print_crate_info(\n-            &***compiler.codegen_backend(),\n-            sess,\n-            Some(compiler.input()),\n-            compiler.output_dir(),\n-            compiler.output_file(),\n-            compiler.temps_dir(),\n-        )\n-        .and_then(|| {\n-            list_metadata(sess, &*compiler.codegen_backend().metadata_loader(), compiler.input())\n-        })\n-        .and_then(|| try_process_rlink(sess, compiler));\n+        let should_stop = print_crate_info(&***compiler.codegen_backend(), sess, true)\n+            .and_then(|| list_metadata(sess, &*compiler.codegen_backend().metadata_loader()))\n+            .and_then(|| try_process_rlink(sess, compiler));\n \n         if should_stop == Compilation::Stop {\n             return sess.compile_status();\n@@ -315,24 +298,12 @@ fn run_compiler(\n                 if ppm.needs_ast_map() {\n                     let expanded_crate = queries.expansion()?.borrow().0.clone();\n                     queries.global_ctxt()?.enter(|tcx| {\n-                        pretty::print_after_hir_lowering(\n-                            tcx,\n-                            compiler.input(),\n-                            &*expanded_crate,\n-                            *ppm,\n-                            compiler.output_file().as_deref(),\n-                        );\n+                        pretty::print_after_hir_lowering(tcx, &*expanded_crate, *ppm);\n                         Ok(())\n                     })?;\n                 } else {\n                     let krate = queries.parse()?.steal();\n-                    pretty::print_after_parsing(\n-                        sess,\n-                        compiler.input(),\n-                        &krate,\n-                        *ppm,\n-                        compiler.output_file().as_deref(),\n-                    );\n+                    pretty::print_after_parsing(sess, &krate, *ppm);\n                 }\n                 trace!(\"finished pretty-printing\");\n                 return early_exit();\n@@ -357,21 +328,17 @@ fn run_compiler(\n                 }\n             }\n \n-            queries.expansion()?;\n+            queries.global_ctxt()?;\n             if callbacks.after_expansion(compiler, queries) == Compilation::Stop {\n                 return early_exit();\n             }\n \n-            queries.prepare_outputs()?;\n-\n             if sess.opts.output_types.contains_key(&OutputType::DepInfo)\n                 && sess.opts.output_types.len() == 1\n             {\n                 return early_exit();\n             }\n \n-            queries.global_ctxt()?;\n-\n             if sess.opts.unstable_opts.no_analysis {\n                 return early_exit();\n             }\n@@ -384,9 +351,9 @@ fn run_compiler(\n                         save::process_crate(\n                             tcx,\n                             crate_name,\n-                            compiler.input(),\n+                            &sess.io.input,\n                             None,\n-                            DumpHandler::new(compiler.output_dir().as_deref(), crate_name),\n+                            DumpHandler::new(sess.io.output_dir.as_deref(), crate_name),\n                         )\n                     });\n                 }\n@@ -439,7 +406,7 @@ fn make_output(matches: &getopts::Matches) -> (Option<PathBuf>, Option<PathBuf>)\n fn make_input(\n     error_format: ErrorOutputType,\n     free_matches: &[String],\n-) -> Result<Option<(Input, Option<PathBuf>)>, ErrorGuaranteed> {\n+) -> Result<Option<Input>, ErrorGuaranteed> {\n     if free_matches.len() == 1 {\n         let ifile = &free_matches[0];\n         if ifile == \"-\" {\n@@ -461,12 +428,12 @@ fn make_input(\n                 let line = isize::from_str_radix(&line, 10)\n                     .expect(\"UNSTABLE_RUSTDOC_TEST_LINE needs to be an number\");\n                 let file_name = FileName::doc_test_source_code(PathBuf::from(path), line);\n-                Ok(Some((Input::Str { name: file_name, input: src }, None)))\n+                Ok(Some(Input::Str { name: file_name, input: src }))\n             } else {\n-                Ok(Some((Input::Str { name: FileName::anon_source_code(&src), input: src }, None)))\n+                Ok(Some(Input::Str { name: FileName::anon_source_code(&src), input: src }))\n             }\n         } else {\n-            Ok(Some((Input::File(PathBuf::from(ifile)), Some(PathBuf::from(ifile)))))\n+            Ok(Some(Input::File(PathBuf::from(ifile))))\n         }\n     } else {\n         Ok(None)\n@@ -560,7 +527,7 @@ fn show_content_with_pager(content: &str) {\n \n pub fn try_process_rlink(sess: &Session, compiler: &interface::Compiler) -> Compilation {\n     if sess.opts.unstable_opts.link_only {\n-        if let Input::File(file) = compiler.input() {\n+        if let Input::File(file) = &sess.io.input {\n             // FIXME: #![crate_type] and #![crate_name] support not implemented yet\n             sess.init_crate_types(collect_crate_types(sess, &[]));\n             let outputs = compiler.build_output_filenames(sess, &[]);\n@@ -601,13 +568,9 @@ pub fn try_process_rlink(sess: &Session, compiler: &interface::Compiler) -> Comp\n     }\n }\n \n-pub fn list_metadata(\n-    sess: &Session,\n-    metadata_loader: &dyn MetadataLoader,\n-    input: &Input,\n-) -> Compilation {\n+pub fn list_metadata(sess: &Session, metadata_loader: &dyn MetadataLoader) -> Compilation {\n     if sess.opts.unstable_opts.ls {\n-        match *input {\n+        match sess.io.input {\n             Input::File(ref ifile) => {\n                 let path = &(*ifile);\n                 let mut v = Vec::new();\n@@ -627,10 +590,7 @@ pub fn list_metadata(\n fn print_crate_info(\n     codegen_backend: &dyn CodegenBackend,\n     sess: &Session,\n-    input: Option<&Input>,\n-    odir: &Option<PathBuf>,\n-    ofile: &Option<PathBuf>,\n-    temps_dir: &Option<PathBuf>,\n+    parse_attrs: bool,\n ) -> Compilation {\n     use rustc_session::config::PrintRequest::*;\n     // NativeStaticLibs and LinkArgs are special - printed during linking\n@@ -639,18 +599,17 @@ fn print_crate_info(\n         return Compilation::Continue;\n     }\n \n-    let attrs = match input {\n-        None => None,\n-        Some(input) => {\n-            let result = parse_crate_attrs(sess, input);\n-            match result {\n-                Ok(attrs) => Some(attrs),\n-                Err(mut parse_error) => {\n-                    parse_error.emit();\n-                    return Compilation::Stop;\n-                }\n+    let attrs = if parse_attrs {\n+        let result = parse_crate_attrs(sess);\n+        match result {\n+            Ok(attrs) => Some(attrs),\n+            Err(mut parse_error) => {\n+                parse_error.emit();\n+                return Compilation::Stop;\n             }\n         }\n+    } else {\n+        None\n     };\n     for req in &sess.opts.prints {\n         match *req {\n@@ -665,14 +624,9 @@ fn print_crate_info(\n                 println!(\"{}\", serde_json::to_string_pretty(&sess.target.to_json()).unwrap());\n             }\n             FileNames | CrateName => {\n-                let input = input.unwrap_or_else(|| {\n-                    early_error(ErrorOutputType::default(), \"no input file provided\")\n-                });\n                 let attrs = attrs.as_ref().unwrap();\n-                let t_outputs = rustc_interface::util::build_output_filenames(\n-                    input, odir, ofile, temps_dir, attrs, sess,\n-                );\n-                let id = rustc_session::output::find_crate_name(sess, attrs, input);\n+                let t_outputs = rustc_interface::util::build_output_filenames(attrs, sess);\n+                let id = rustc_session::output::find_crate_name(sess, attrs);\n                 if *req == PrintRequest::CrateName {\n                     println!(\"{id}\");\n                     continue;\n@@ -1108,8 +1062,8 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n     Some(matches)\n }\n \n-fn parse_crate_attrs<'a>(sess: &'a Session, input: &Input) -> PResult<'a, ast::AttrVec> {\n-    match input {\n+fn parse_crate_attrs<'a>(sess: &'a Session) -> PResult<'a, ast::AttrVec> {\n+    match &sess.io.input {\n         Input::File(ifile) => rustc_parse::parse_crate_attrs_from_file(ifile, &sess.parse_sess),\n         Input::Str { name, input } => rustc_parse::parse_crate_attrs_from_source_str(\n             name.clone(),"}, {"sha": "ae3ac8625b1862ca109c1a216329268abc6a6557", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 14, "deletions": 31, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "patch": "@@ -9,14 +9,13 @@ use rustc_hir_pretty as pprust_hir;\n use rustc_middle::hir::map as hir_map;\n use rustc_middle::mir::{write_mir_graphviz, write_mir_pretty};\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_session::config::{Input, PpAstTreeMode, PpHirMode, PpMode, PpSourceMode};\n+use rustc_session::config::{PpAstTreeMode, PpHirMode, PpMode, PpSourceMode};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n use rustc_span::FileName;\n \n use std::cell::Cell;\n use std::fmt::Write;\n-use std::path::Path;\n \n pub use self::PpMode::*;\n pub use self::PpSourceMode::*;\n@@ -345,8 +344,8 @@ impl<'tcx> pprust_hir::PpAnn for TypedAnnotation<'tcx> {\n     }\n }\n \n-fn get_source(input: &Input, sess: &Session) -> (String, FileName) {\n-    let src_name = input.source_name();\n+fn get_source(sess: &Session) -> (String, FileName) {\n+    let src_name = sess.io.input.source_name();\n     let src = String::clone(\n         sess.source_map()\n             .get_source_file(&src_name)\n@@ -358,8 +357,8 @@ fn get_source(input: &Input, sess: &Session) -> (String, FileName) {\n     (src, src_name)\n }\n \n-fn write_or_print(out: &str, ofile: Option<&Path>, sess: &Session) {\n-    match ofile {\n+fn write_or_print(out: &str, sess: &Session) {\n+    match &sess.io.output_file {\n         None => print!(\"{out}\"),\n         Some(p) => {\n             if let Err(e) = std::fs::write(p, out) {\n@@ -372,14 +371,8 @@ fn write_or_print(out: &str, ofile: Option<&Path>, sess: &Session) {\n     }\n }\n \n-pub fn print_after_parsing(\n-    sess: &Session,\n-    input: &Input,\n-    krate: &ast::Crate,\n-    ppm: PpMode,\n-    ofile: Option<&Path>,\n-) {\n-    let (src, src_name) = get_source(input, sess);\n+pub fn print_after_parsing(sess: &Session, krate: &ast::Crate, ppm: PpMode) {\n+    let (src, src_name) = get_source(sess);\n \n     let out = match ppm {\n         Source(s) => {\n@@ -407,22 +400,16 @@ pub fn print_after_parsing(\n         _ => unreachable!(),\n     };\n \n-    write_or_print(&out, ofile, sess);\n+    write_or_print(&out, sess);\n }\n \n-pub fn print_after_hir_lowering<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    input: &Input,\n-    krate: &ast::Crate,\n-    ppm: PpMode,\n-    ofile: Option<&Path>,\n-) {\n+pub fn print_after_hir_lowering<'tcx>(tcx: TyCtxt<'tcx>, krate: &ast::Crate, ppm: PpMode) {\n     if ppm.needs_analysis() {\n-        abort_on_err(print_with_analysis(tcx, ppm, ofile), tcx.sess);\n+        abort_on_err(print_with_analysis(tcx, ppm), tcx.sess);\n         return;\n     }\n \n-    let (src, src_name) = get_source(input, tcx.sess);\n+    let (src, src_name) = get_source(tcx.sess);\n \n     let out = match ppm {\n         Source(s) => {\n@@ -474,18 +461,14 @@ pub fn print_after_hir_lowering<'tcx>(\n         _ => unreachable!(),\n     };\n \n-    write_or_print(&out, ofile, tcx.sess);\n+    write_or_print(&out, tcx.sess);\n }\n \n // In an ideal world, this would be a public function called by the driver after\n // analysis is performed. However, we want to call `phase_3_run_analysis_passes`\n // with a different callback than the standard driver, so that isn't easy.\n // Instead, we call that function ourselves.\n-fn print_with_analysis(\n-    tcx: TyCtxt<'_>,\n-    ppm: PpMode,\n-    ofile: Option<&Path>,\n-) -> Result<(), ErrorGuaranteed> {\n+fn print_with_analysis(tcx: TyCtxt<'_>, ppm: PpMode) -> Result<(), ErrorGuaranteed> {\n     tcx.analysis(())?;\n     let out = match ppm {\n         Mir => {\n@@ -518,7 +501,7 @@ fn print_with_analysis(\n         _ => unreachable!(),\n     };\n \n-    write_or_print(&out, ofile, tcx.sess);\n+    write_or_print(&out, tcx.sess);\n \n     Ok(())\n }"}, {"sha": "7a5e45ada3f6a8f9528778435c6496d78980dc65", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 10, "deletions": 35, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "patch": "@@ -14,10 +14,10 @@ use rustc_middle::ty;\n use rustc_parse::maybe_new_parser_from_source_str;\n use rustc_query_impl::QueryCtxt;\n use rustc_session::config::{self, CheckCfg, ErrorOutputType, Input, OutputFilenames};\n-use rustc_session::early_error;\n use rustc_session::lint;\n use rustc_session::parse::{CrateConfig, ParseSess};\n use rustc_session::Session;\n+use rustc_session::{early_error, CompilerIO};\n use rustc_span::source_map::{FileLoader, FileName};\n use rustc_span::symbol::sym;\n use std::path::PathBuf;\n@@ -35,11 +35,6 @@ pub type Result<T> = result::Result<T, ErrorGuaranteed>;\n pub struct Compiler {\n     pub(crate) sess: Lrc<Session>,\n     codegen_backend: Lrc<Box<dyn CodegenBackend>>,\n-    pub(crate) input: Input,\n-    pub(crate) input_path: Option<PathBuf>,\n-    pub(crate) output_dir: Option<PathBuf>,\n-    pub(crate) output_file: Option<PathBuf>,\n-    pub(crate) temps_dir: Option<PathBuf>,\n     pub(crate) register_lints: Option<Box<dyn Fn(&Session, &mut LintStore) + Send + Sync>>,\n     pub(crate) override_queries:\n         Option<fn(&Session, &mut ty::query::Providers, &mut ty::query::ExternProviders)>,\n@@ -52,18 +47,6 @@ impl Compiler {\n     pub fn codegen_backend(&self) -> &Lrc<Box<dyn CodegenBackend>> {\n         &self.codegen_backend\n     }\n-    pub fn input(&self) -> &Input {\n-        &self.input\n-    }\n-    pub fn output_dir(&self) -> &Option<PathBuf> {\n-        &self.output_dir\n-    }\n-    pub fn output_file(&self) -> &Option<PathBuf> {\n-        &self.output_file\n-    }\n-    pub fn temps_dir(&self) -> &Option<PathBuf> {\n-        &self.temps_dir\n-    }\n     pub fn register_lints(&self) -> &Option<Box<dyn Fn(&Session, &mut LintStore) + Send + Sync>> {\n         &self.register_lints\n     }\n@@ -72,14 +55,7 @@ impl Compiler {\n         sess: &Session,\n         attrs: &[ast::Attribute],\n     ) -> OutputFilenames {\n-        util::build_output_filenames(\n-            &self.input,\n-            &self.output_dir,\n-            &self.output_file,\n-            &self.temps_dir,\n-            attrs,\n-            sess,\n-        )\n+        util::build_output_filenames(attrs, sess)\n     }\n }\n \n@@ -244,7 +220,6 @@ pub struct Config {\n     pub crate_check_cfg: CheckCfg,\n \n     pub input: Input,\n-    pub input_path: Option<PathBuf>,\n     pub output_dir: Option<PathBuf>,\n     pub output_file: Option<PathBuf>,\n     pub file_loader: Option<Box<dyn FileLoader + Send + Sync>>,\n@@ -287,12 +262,19 @@ pub fn run_compiler<R: Send>(config: Config, f: impl FnOnce(&Compiler) -> R + Se\n             crate::callbacks::setup_callbacks();\n \n             let registry = &config.registry;\n+\n+            let temps_dir = config.opts.unstable_opts.temps_dir.as_deref().map(PathBuf::from);\n             let (mut sess, codegen_backend) = util::create_session(\n                 config.opts,\n                 config.crate_cfg,\n                 config.crate_check_cfg,\n                 config.file_loader,\n-                config.input_path.clone(),\n+                CompilerIO {\n+                    input: config.input,\n+                    output_dir: config.output_dir,\n+                    output_file: config.output_file,\n+                    temps_dir,\n+                },\n                 config.lint_caps,\n                 config.make_codegen_backend,\n                 registry.clone(),\n@@ -302,16 +284,9 @@ pub fn run_compiler<R: Send>(config: Config, f: impl FnOnce(&Compiler) -> R + Se\n                 parse_sess_created(&mut sess.parse_sess);\n             }\n \n-            let temps_dir = sess.opts.unstable_opts.temps_dir.as_deref().map(PathBuf::from);\n-\n             let compiler = Compiler {\n                 sess: Lrc::new(sess),\n                 codegen_backend: Lrc::new(codegen_backend),\n-                input: config.input,\n-                input_path: config.input_path,\n-                output_dir: config.output_dir,\n-                output_file: config.output_file,\n-                temps_dir,\n                 register_lints: config.register_lints,\n                 override_queries: config.override_queries,\n             };"}, {"sha": "2fa846b7e4bfc0c349c65540110c44bd549901a7", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 10, "deletions": 42, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "patch": "@@ -13,7 +13,6 @@ use rustc_ast::{self as ast, visit};\n use rustc_borrowck as mir_borrowck;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::parallel;\n-use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_errors::{ErrorGuaranteed, PResult};\n use rustc_expand::base::{ExtCtxt, LintStoreExpand, ResolverExpand};\n@@ -31,7 +30,7 @@ use rustc_plugin_impl as plugin;\n use rustc_query_impl::{OnDiskCache, Queries as TcxQueries};\n use rustc_resolve::{Resolver, ResolverArenas};\n use rustc_session::config::{CrateType, Input, OutputFilenames, OutputType};\n-use rustc_session::cstore::{MetadataLoader, MetadataLoaderDyn};\n+use rustc_session::cstore::{MetadataLoader, MetadataLoaderDyn, Untracked};\n use rustc_session::output::filename_for_input;\n use rustc_session::search_paths::PathKind;\n use rustc_session::{Limit, Session};\n@@ -51,8 +50,8 @@ use std::rc::Rc;\n use std::sync::LazyLock;\n use std::{env, fs, iter};\n \n-pub fn parse<'a>(sess: &'a Session, input: &Input) -> PResult<'a, ast::Crate> {\n-    let krate = sess.time(\"parse_crate\", || match input {\n+pub fn parse<'a>(sess: &'a Session) -> PResult<'a, ast::Crate> {\n+    let krate = sess.time(\"parse_crate\", || match &sess.io.input {\n         Input::File(file) => parse_crate_from_file(file, &sess.parse_sess),\n         Input::Str { input, name } => {\n             parse_crate_from_source_str(name.clone(), input.clone(), &sess.parse_sess)\n@@ -666,28 +665,20 @@ fn write_out_deps(\n \n pub fn prepare_outputs(\n     sess: &Session,\n-    compiler: &Compiler,\n     krate: &ast::Crate,\n     boxed_resolver: &RefCell<BoxedResolver>,\n     crate_name: Symbol,\n ) -> Result<OutputFilenames> {\n     let _timer = sess.timer(\"prepare_outputs\");\n \n     // FIXME: rustdoc passes &[] instead of &krate.attrs here\n-    let outputs = util::build_output_filenames(\n-        &compiler.input,\n-        &compiler.output_dir,\n-        &compiler.output_file,\n-        &compiler.temps_dir,\n-        &krate.attrs,\n-        sess,\n-    );\n+    let outputs = util::build_output_filenames(&krate.attrs, sess);\n \n     let output_paths =\n-        generated_output_paths(sess, &outputs, compiler.output_file.is_some(), crate_name);\n+        generated_output_paths(sess, &outputs, sess.io.output_file.is_some(), crate_name);\n \n     // Ensure the source file isn't accidentally overwritten during compilation.\n-    if let Some(ref input_path) = compiler.input_path {\n+    if let Some(ref input_path) = sess.io.input.opt_path() {\n         if sess.opts.will_create_output_file() {\n             if output_contains_path(&output_paths, input_path) {\n                 let reported = sess.emit_err(InputFileWouldBeOverWritten { path: input_path });\n@@ -701,7 +692,7 @@ pub fn prepare_outputs(\n         }\n     }\n \n-    if let Some(ref dir) = compiler.temps_dir {\n+    if let Some(ref dir) = sess.io.temps_dir {\n         if fs::create_dir_all(dir).is_err() {\n             let reported = sess.emit_err(TempsDirError);\n             return Err(reported);\n@@ -714,7 +705,7 @@ pub fn prepare_outputs(\n         && sess.opts.output_types.len() == 1;\n \n     if !only_dep_info {\n-        if let Some(ref dir) = compiler.output_dir {\n+        if let Some(ref dir) = sess.io.output_dir {\n             if fs::create_dir_all(dir).is_err() {\n                 let reported = sess.emit_err(OutDirError);\n                 return Err(reported);\n@@ -775,11 +766,8 @@ impl<'tcx> QueryContext<'tcx> {\n pub fn create_global_ctxt<'tcx>(\n     compiler: &'tcx Compiler,\n     lint_store: Lrc<LintStore>,\n-    krate: Lrc<ast::Crate>,\n     dep_graph: DepGraph,\n-    resolver: Rc<RefCell<BoxedResolver>>,\n-    outputs: OutputFilenames,\n-    crate_name: Symbol,\n+    untracked: Untracked,\n     queries: &'tcx OnceCell<TcxQueries<'tcx>>,\n     global_ctxt: &'tcx OnceCell<GlobalCtxt<'tcx>>,\n     arena: &'tcx WorkerLocal<Arena<'tcx>>,\n@@ -790,8 +778,6 @@ pub fn create_global_ctxt<'tcx>(\n     // incr. comp. yet.\n     dep_graph.assert_ignored();\n \n-    let resolver_outputs = BoxedResolver::to_resolver_outputs(resolver);\n-\n     let sess = &compiler.session();\n     let query_result_on_disk_cache = rustc_incremental::load_query_result_cache(sess);\n \n@@ -810,12 +796,6 @@ pub fn create_global_ctxt<'tcx>(\n         TcxQueries::new(local_providers, extern_providers, query_result_on_disk_cache)\n     });\n \n-    let ty::ResolverOutputs {\n-        global_ctxt: untracked_resolutions,\n-        ast_lowering: untracked_resolver_for_lowering,\n-        untracked,\n-    } = resolver_outputs;\n-\n     let gcx = sess.time(\"setup_global_ctxt\", || {\n         global_ctxt.get_or_init(move || {\n             TyCtxt::create_global_ctxt(\n@@ -832,19 +812,7 @@ pub fn create_global_ctxt<'tcx>(\n         })\n     });\n \n-    let mut qcx = QueryContext { gcx };\n-    qcx.enter(|tcx| {\n-        let feed = tcx.feed_unit_query();\n-        feed.resolver_for_lowering(\n-            tcx.arena.alloc(Steal::new((untracked_resolver_for_lowering, krate))),\n-        );\n-        feed.resolutions(tcx.arena.alloc(untracked_resolutions));\n-        feed.output_filenames(tcx.arena.alloc(std::sync::Arc::new(outputs)));\n-        feed.features_query(sess.features_untracked());\n-        let feed = tcx.feed_local_crate();\n-        feed.crate_name(crate_name);\n-    });\n-    qcx\n+    QueryContext { gcx }\n }\n \n /// Runs the resolution, type-checking, region checking and other"}, {"sha": "d5a49dd75be6a06bf7a7efa310342a139c15335b", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 31, "deletions": 33, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "patch": "@@ -13,7 +13,7 @@ use rustc_incremental::DepGraphFuture;\n use rustc_lint::LintStore;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n-use rustc_middle::ty::{GlobalCtxt, TyCtxt};\n+use rustc_middle::ty::{self, GlobalCtxt, TyCtxt};\n use rustc_query_impl::Queries as TcxQueries;\n use rustc_session::config::{self, OutputFilenames, OutputType};\n use rustc_session::{output::find_crate_name, Session};\n@@ -90,7 +90,6 @@ pub struct Queries<'tcx> {\n     register_plugins: Query<(ast::Crate, Lrc<LintStore>)>,\n     expansion: Query<(Lrc<ast::Crate>, Rc<RefCell<BoxedResolver>>, Lrc<LintStore>)>,\n     dep_graph: Query<DepGraph>,\n-    prepare_outputs: Query<OutputFilenames>,\n     global_ctxt: Query<QueryContext<'tcx>>,\n     ongoing_codegen: Query<Box<dyn Any>>,\n }\n@@ -109,7 +108,6 @@ impl<'tcx> Queries<'tcx> {\n             register_plugins: Default::default(),\n             expansion: Default::default(),\n             dep_graph: Default::default(),\n-            prepare_outputs: Default::default(),\n             global_ctxt: Default::default(),\n             ongoing_codegen: Default::default(),\n         }\n@@ -130,10 +128,8 @@ impl<'tcx> Queries<'tcx> {\n     }\n \n     pub fn parse(&self) -> Result<QueryResult<'_, ast::Crate>> {\n-        self.parse.compute(|| {\n-            passes::parse(self.session(), &self.compiler.input)\n-                .map_err(|mut parse_error| parse_error.emit())\n-        })\n+        self.parse\n+            .compute(|| passes::parse(self.session()).map_err(|mut parse_error| parse_error.emit()))\n     }\n \n     pub fn register_plugins(&self) -> Result<QueryResult<'_, (ast::Crate, Lrc<LintStore>)>> {\n@@ -161,13 +157,13 @@ impl<'tcx> Queries<'tcx> {\n         })\n     }\n \n-    pub fn crate_name(&self) -> Result<QueryResult<'_, Symbol>> {\n+    fn crate_name(&self) -> Result<QueryResult<'_, Symbol>> {\n         self.crate_name.compute(|| {\n             Ok({\n                 let parse_result = self.parse()?;\n                 let krate = parse_result.borrow();\n                 // parse `#[crate_name]` even if `--crate-name` was passed, to make sure it matches.\n-                find_crate_name(self.session(), &krate.attrs, &self.compiler.input)\n+                find_crate_name(self.session(), &krate.attrs)\n             })\n         })\n     }\n@@ -211,40 +207,42 @@ impl<'tcx> Queries<'tcx> {\n         })\n     }\n \n-    pub fn prepare_outputs(&self) -> Result<QueryResult<'_, OutputFilenames>> {\n-        self.prepare_outputs.compute(|| {\n-            let expansion = self.expansion()?;\n-            let (krate, boxed_resolver, _) = &*expansion.borrow();\n-            let crate_name = *self.crate_name()?.borrow();\n-            passes::prepare_outputs(\n-                self.session(),\n-                self.compiler,\n-                krate,\n-                &*boxed_resolver,\n-                crate_name,\n-            )\n-        })\n-    }\n-\n     pub fn global_ctxt(&'tcx self) -> Result<QueryResult<'_, QueryContext<'tcx>>> {\n         self.global_ctxt.compute(|| {\n             let crate_name = *self.crate_name()?.borrow();\n-            let outputs = self.prepare_outputs()?.steal();\n-            let dep_graph = self.dep_graph()?.borrow().clone();\n             let (krate, resolver, lint_store) = self.expansion()?.steal();\n-            Ok(passes::create_global_ctxt(\n+\n+            let outputs = passes::prepare_outputs(self.session(), &krate, &resolver, crate_name)?;\n+\n+            let ty::ResolverOutputs {\n+                untracked,\n+                global_ctxt: untracked_resolutions,\n+                ast_lowering: untracked_resolver_for_lowering,\n+            } = BoxedResolver::to_resolver_outputs(resolver);\n+\n+            let mut qcx = passes::create_global_ctxt(\n                 self.compiler,\n                 lint_store,\n-                krate,\n-                dep_graph,\n-                resolver,\n-                outputs,\n-                crate_name,\n+                self.dep_graph()?.steal(),\n+                untracked,\n                 &self.queries,\n                 &self.gcx,\n                 &self.arena,\n                 &self.hir_arena,\n-            ))\n+            );\n+\n+            qcx.enter(|tcx| {\n+                let feed = tcx.feed_unit_query();\n+                feed.resolver_for_lowering(\n+                    tcx.arena.alloc(Steal::new((untracked_resolver_for_lowering, krate))),\n+                );\n+                feed.resolutions(tcx.arena.alloc(untracked_resolutions));\n+                feed.output_filenames(tcx.arena.alloc(std::sync::Arc::new(outputs)));\n+                feed.features_query(tcx.sess.features_untracked());\n+                let feed = tcx.feed_local_crate();\n+                feed.crate_name(crate_name);\n+            });\n+            Ok(qcx)\n         })\n     }\n "}, {"sha": "f94bc4d4c66ac9d0fd872586a12308b6aa86731d", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "patch": "@@ -4,6 +4,7 @@ use crate::interface::parse_cfgspecs;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{emitter::HumanReadableErrorType, registry, ColorConfig};\n use rustc_session::config::rustc_optgroups;\n+use rustc_session::config::Input;\n use rustc_session::config::TraitSolver;\n use rustc_session::config::{build_configuration, build_session_options, to_crate_config};\n use rustc_session::config::{\n@@ -17,9 +18,11 @@ use rustc_session::config::{InstrumentCoverage, Passes};\n use rustc_session::lint::Level;\n use rustc_session::search_paths::SearchPath;\n use rustc_session::utils::{CanonicalizedPath, NativeLib, NativeLibKind};\n+use rustc_session::CompilerIO;\n use rustc_session::{build_session, getopts, Session};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::symbol::sym;\n+use rustc_span::FileName;\n use rustc_span::SourceFileHashAlgorithm;\n use rustc_target::spec::{CodeModel, LinkerFlavorCli, MergeFunctions, PanicStrategy, RelocModel};\n use rustc_target::spec::{RelroLevel, SanitizerSet, SplitDebuginfo, StackProtector, TlsModel};\n@@ -39,7 +42,14 @@ fn build_session_options_and_crate_config(matches: getopts::Matches) -> (Options\n fn mk_session(matches: getopts::Matches) -> (Session, CfgSpecs) {\n     let registry = registry::Registry::new(&[]);\n     let (sessopts, cfg) = build_session_options_and_crate_config(matches);\n-    let sess = build_session(sessopts, None, None, registry, Default::default(), None, None);\n+    let temps_dir = sessopts.unstable_opts.temps_dir.as_deref().map(PathBuf::from);\n+    let io = CompilerIO {\n+        input: Input::Str { name: FileName::Custom(String::new()), input: String::new() },\n+        output_dir: None,\n+        output_file: None,\n+        temps_dir,\n+    };\n+    let sess = build_session(sessopts, io, None, registry, Default::default(), None, None);\n     (sess, cfg)\n }\n "}, {"sha": "54363e07b971a2830c789a7c34336d362e480573", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "patch": "@@ -8,7 +8,7 @@ use rustc_parse::validate_attr;\n use rustc_session as session;\n use rustc_session::config::CheckCfg;\n use rustc_session::config::{self, CrateType};\n-use rustc_session::config::{ErrorOutputType, Input, OutputFilenames};\n+use rustc_session::config::{ErrorOutputType, OutputFilenames};\n use rustc_session::filesearch::sysroot_candidates;\n use rustc_session::lint::{self, BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::parse::CrateConfig;\n@@ -17,6 +17,7 @@ use rustc_span::edition::Edition;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::FileLoader;\n use rustc_span::symbol::{sym, Symbol};\n+use session::CompilerIO;\n use std::env;\n use std::env::consts::{DLL_PREFIX, DLL_SUFFIX};\n use std::mem;\n@@ -58,7 +59,7 @@ pub fn create_session(\n     cfg: FxHashSet<(String, Option<String>)>,\n     check_cfg: CheckCfg,\n     file_loader: Option<Box<dyn FileLoader + Send + Sync + 'static>>,\n-    input_path: Option<PathBuf>,\n+    io: CompilerIO,\n     lint_caps: FxHashMap<lint::LintId, lint::Level>,\n     make_codegen_backend: Option<\n         Box<dyn FnOnce(&config::Options) -> Box<dyn CodegenBackend> + Send>,\n@@ -89,7 +90,7 @@ pub fn create_session(\n \n     let mut sess = session::build_session(\n         sopts,\n-        input_path,\n+        io,\n         bundle,\n         descriptions,\n         lint_caps,\n@@ -486,34 +487,27 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<C\n     base\n }\n \n-pub fn build_output_filenames(\n-    input: &Input,\n-    odir: &Option<PathBuf>,\n-    ofile: &Option<PathBuf>,\n-    temps_dir: &Option<PathBuf>,\n-    attrs: &[ast::Attribute],\n-    sess: &Session,\n-) -> OutputFilenames {\n-    match *ofile {\n+pub fn build_output_filenames(attrs: &[ast::Attribute], sess: &Session) -> OutputFilenames {\n+    match sess.io.output_file {\n         None => {\n             // \"-\" as input file will cause the parser to read from stdin so we\n             // have to make up a name\n             // We want to toss everything after the final '.'\n-            let dirpath = (*odir).as_ref().cloned().unwrap_or_default();\n+            let dirpath = sess.io.output_dir.clone().unwrap_or_default();\n \n             // If a crate name is present, we use it as the link name\n             let stem = sess\n                 .opts\n                 .crate_name\n                 .clone()\n                 .or_else(|| rustc_attr::find_crate_name(sess, attrs).map(|n| n.to_string()))\n-                .unwrap_or_else(|| input.filestem().to_owned());\n+                .unwrap_or_else(|| sess.io.input.filestem().to_owned());\n \n             OutputFilenames::new(\n                 dirpath,\n                 stem,\n                 None,\n-                temps_dir.clone(),\n+                sess.io.temps_dir.clone(),\n                 sess.opts.cg.extra_filename.clone(),\n                 sess.opts.output_types.clone(),\n             )\n@@ -534,15 +528,15 @@ pub fn build_output_filenames(\n                 }\n                 Some(out_file.clone())\n             };\n-            if *odir != None {\n+            if sess.io.output_dir != None {\n                 sess.warn(\"ignoring --out-dir flag due to -o flag\");\n             }\n \n             OutputFilenames::new(\n                 out_file.parent().unwrap_or_else(|| Path::new(\"\")).to_path_buf(),\n                 out_file.file_stem().unwrap_or_default().to_str().unwrap().to_string(),\n                 ofile,\n-                temps_dir.clone(),\n+                sess.io.temps_dir.clone(),\n                 sess.opts.cg.extra_filename.clone(),\n                 sess.opts.output_types.clone(),\n             )"}, {"sha": "b327ba63330ba8044ddd15daa4bc110a3ab9e023", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "patch": "@@ -195,7 +195,7 @@ fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_>) {\n \n     // There is no main function.\n     let mut has_filename = true;\n-    let filename = tcx.sess.local_crate_source_file.clone().unwrap_or_else(|| {\n+    let filename = tcx.sess.local_crate_source_file().unwrap_or_else(|| {\n         has_filename = false;\n         Default::default()\n     });"}, {"sha": "a5f09de1c401ba0c86fac6d1df3953b109de29fa", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "patch": "@@ -112,9 +112,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n     }\n \n     pub fn dump_crate_info(&mut self, name: Symbol) {\n-        let source_file = self.tcx.sess.local_crate_source_file.as_ref();\n-        let crate_root = source_file.map(|source_file| {\n-            let source_file = Path::new(source_file);\n+        let crate_root = self.tcx.sess.local_crate_source_file().map(|source_file| {\n             match source_file.file_name() {\n                 Some(_) => source_file.parent().unwrap().display(),\n                 None => source_file.display(),\n@@ -157,10 +155,14 @@ impl<'tcx> DumpVisitor<'tcx> {\n                 .enumerate()\n                 .filter(|(i, _)| !remap_arg_indices.contains(i))\n                 .map(|(_, arg)| match input {\n-                    Input::File(ref path) if path == Path::new(&arg) => {\n-                        let mapped = &self.tcx.sess.local_crate_source_file;\n-                        mapped.as_ref().unwrap().to_string_lossy().into()\n-                    }\n+                    Input::File(ref path) if path == Path::new(&arg) => self\n+                        .tcx\n+                        .sess\n+                        .local_crate_source_file()\n+                        .as_ref()\n+                        .unwrap()\n+                        .to_string_lossy()\n+                        .into(),\n                     _ => arg,\n                 });\n "}, {"sha": "e65d57bb3db3e7737ffbc18b8670df244346be6f", "filename": "compiler/rustc_save_analysis/src/span_utils.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_save_analysis%2Fsrc%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_save_analysis%2Fsrc%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fspan_utils.rs?ref=65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "patch": "@@ -18,13 +18,7 @@ impl<'a> SpanUtils<'a> {\n         match &file.name {\n             FileName::Real(RealFileName::LocalPath(path)) => {\n                 if path.is_absolute() {\n-                    self.sess\n-                        .source_map()\n-                        .path_mapping()\n-                        .map_prefix(path.into())\n-                        .0\n-                        .display()\n-                        .to_string()\n+                    self.sess.source_map().path_mapping().map_prefix(path).0.display().to_string()\n                 } else {\n                     self.sess\n                         .opts"}, {"sha": "586454f76574c5b2ad62a7075674da3e9da39cd2", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "patch": "@@ -591,6 +591,24 @@ impl Input {\n             Input::Str { ref name, .. } => name.clone(),\n         }\n     }\n+\n+    pub fn opt_path(&self) -> Option<&Path> {\n+        match self {\n+            Input::File(file) => Some(file),\n+            Input::Str { name, .. } => match name {\n+                FileName::Real(real) => real.local_path(),\n+                FileName::QuoteExpansion(_) => None,\n+                FileName::Anon(_) => None,\n+                FileName::MacroExpansion(_) => None,\n+                FileName::ProcMacroSourceCode(_) => None,\n+                FileName::CfgSpec(_) => None,\n+                FileName::CliCrateAttr(_) => None,\n+                FileName::Custom(_) => None,\n+                FileName::DocTest(path, _) => Some(path),\n+                FileName::InlineAsm(_) => None,\n+            },\n+        }\n+    }\n }\n \n #[derive(Clone, Hash, Debug, HashStable_Generic)]\n@@ -2496,12 +2514,12 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         early_error(error_format, &format!(\"Current directory is invalid: {e}\"));\n     });\n \n-    let (path, remapped) =\n-        FilePathMapping::new(remap_path_prefix.clone()).map_prefix(working_dir.clone());\n+    let remap = FilePathMapping::new(remap_path_prefix.clone());\n+    let (path, remapped) = remap.map_prefix(&working_dir);\n     let working_dir = if remapped {\n-        RealFileName::Remapped { local_path: Some(working_dir), virtual_name: path }\n+        RealFileName::Remapped { virtual_name: path.into_owned(), local_path: Some(working_dir) }\n     } else {\n-        RealFileName::LocalPath(path)\n+        RealFileName::LocalPath(path.into_owned())\n     };\n \n     Options {"}, {"sha": "c3f0c4b58f57ad61eb04cbad7be79918950af8e3", "filename": "compiler/rustc_session/src/output.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foutput.rs?ref=65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "patch": "@@ -45,7 +45,7 @@ fn is_writeable(p: &Path) -> bool {\n     }\n }\n \n-pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute], input: &Input) -> Symbol {\n+pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute]) -> Symbol {\n     let validate = |s: Symbol, span: Option<Span>| {\n         validate_crate_name(sess, s, span);\n         s\n@@ -71,7 +71,7 @@ pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute], input: &Input)\n     if let Some((attr, s)) = attr_crate_name {\n         return validate(s, Some(attr.span));\n     }\n-    if let Input::File(ref path) = *input {\n+    if let Input::File(ref path) = sess.io.input {\n         if let Some(s) = path.file_stem().and_then(|s| s.to_str()) {\n             if s.starts_with('-') {\n                 sess.emit_err(CrateNameInvalid { s });"}, {"sha": "95f199de6ff6ff0c14b781586d20f72c303819b7", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "patch": "@@ -1,6 +1,7 @@\n use crate::cgu_reuse_tracker::CguReuseTracker;\n use crate::code_stats::CodeStats;\n pub use crate::code_stats::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n+use crate::config::Input;\n use crate::config::{self, CrateType, InstrumentCoverage, OptLevel, OutputType, SwitchWithOptPath};\n use crate::errors::{\n     BranchProtectionRequiresAArch64, CannotEnableCrtStaticLinux, CannotMixAndMatchSanitizers,\n@@ -137,6 +138,13 @@ pub struct Limits {\n     pub const_eval_limit: Limit,\n }\n \n+pub struct CompilerIO {\n+    pub input: Input,\n+    pub output_dir: Option<PathBuf>,\n+    pub output_file: Option<PathBuf>,\n+    pub temps_dir: Option<PathBuf>,\n+}\n+\n /// Represents the data associated with a compilation\n /// session for a single crate.\n pub struct Session {\n@@ -147,9 +155,8 @@ pub struct Session {\n     pub target_tlib_path: Lrc<SearchPath>,\n     pub parse_sess: ParseSess,\n     pub sysroot: PathBuf,\n-    /// The name of the root source file of the crate, in the local file system.\n-    /// `None` means that there is no source file.\n-    pub local_crate_source_file: Option<PathBuf>,\n+    /// Input, input file path and output file path to this compilation process.\n+    pub io: CompilerIO,\n \n     crate_types: OnceCell<Vec<CrateType>>,\n     /// The `stable_crate_id` is constructed out of the crate name and all the\n@@ -228,6 +235,11 @@ impl Session {\n         self.miri_unleashed_features.lock().push((span, feature_gate));\n     }\n \n+    pub fn local_crate_source_file(&self) -> Option<PathBuf> {\n+        let path = self.io.input.opt_path()?;\n+        Some(self.opts.file_path_mapping().map_prefix(path).0.into_owned())\n+    }\n+\n     fn check_miri_unleashed_features(&self) {\n         let unleashed_features = self.miri_unleashed_features.lock();\n         if !unleashed_features.is_empty() {\n@@ -1298,7 +1310,7 @@ fn default_emitter(\n #[allow(rustc::bad_opt_access)]\n pub fn build_session(\n     sopts: config::Options,\n-    local_crate_source_file: Option<PathBuf>,\n+    io: CompilerIO,\n     bundle: Option<Lrc<rustc_errors::FluentBundle>>,\n     registry: rustc_errors::registry::Registry,\n     driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n@@ -1391,11 +1403,6 @@ pub fn build_session(\n         Lrc::new(SearchPath::from_sysroot_and_triple(&sysroot, target_triple))\n     };\n \n-    let file_path_mapping = sopts.file_path_mapping();\n-\n-    let local_crate_source_file =\n-        local_crate_source_file.map(|path| file_path_mapping.map_prefix(path).0);\n-\n     let optimization_fuel = Lock::new(OptimizationFuel {\n         remaining: sopts.unstable_opts.fuel.as_ref().map_or(0, |&(_, i)| i),\n         out_of_fuel: false,\n@@ -1427,7 +1434,7 @@ pub fn build_session(\n         target_tlib_path,\n         parse_sess,\n         sysroot,\n-        local_crate_source_file,\n+        io,\n         crate_types: OnceCell::new(),\n         stable_crate_id: OnceCell::new(),\n         features: OnceCell::new(),"}, {"sha": "2e339a9d2d2b00eca439bdbd4930e9072c1a0e7a", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "patch": "@@ -1150,7 +1150,8 @@ impl FilePathMapping {\n     /// Applies any path prefix substitution as defined by the mapping.\n     /// The return value is the remapped path and a boolean indicating whether\n     /// the path was affected by the mapping.\n-    pub fn map_prefix(&self, path: PathBuf) -> (PathBuf, bool) {\n+    pub fn map_prefix<'a>(&'a self, path: impl Into<Cow<'a, Path>>) -> (Cow<'a, Path>, bool) {\n+        let path = path.into();\n         if path.as_os_str().is_empty() {\n             // Exit early if the path is empty and therefore there's nothing to remap.\n             // This is mostly to reduce spam for `RUSTC_LOG=[remap_path_prefix]`.\n@@ -1160,7 +1161,10 @@ impl FilePathMapping {\n         return remap_path_prefix(&self.mapping, path);\n \n         #[instrument(level = \"debug\", skip(mapping), ret)]\n-        fn remap_path_prefix(mapping: &[(PathBuf, PathBuf)], path: PathBuf) -> (PathBuf, bool) {\n+        fn remap_path_prefix<'a>(\n+            mapping: &'a [(PathBuf, PathBuf)],\n+            path: Cow<'a, Path>,\n+        ) -> (Cow<'a, Path>, bool) {\n             // NOTE: We are iterating over the mapping entries from last to first\n             //       because entries specified later on the command line should\n             //       take precedence.\n@@ -1175,9 +1179,9 @@ impl FilePathMapping {\n                         // in remapped paths down the line.\n                         // So, if we have an exact match, we just return that without a call\n                         // to `Path::join()`.\n-                        to.clone()\n+                        to.into()\n                     } else {\n-                        to.join(rest)\n+                        to.join(rest).into()\n                     };\n                     debug!(\"Match - remapped\");\n \n@@ -1195,11 +1199,11 @@ impl FilePathMapping {\n     fn map_filename_prefix(&self, file: &FileName) -> (FileName, bool) {\n         match file {\n             FileName::Real(realfile) if let RealFileName::LocalPath(local_path) = realfile => {\n-                let (mapped_path, mapped) = self.map_prefix(local_path.to_path_buf());\n+                let (mapped_path, mapped) = self.map_prefix(local_path);\n                 let realfile = if mapped {\n                     RealFileName::Remapped {\n                         local_path: Some(local_path.clone()),\n-                        virtual_name: mapped_path,\n+                        virtual_name: mapped_path.into_owned(),\n                     }\n                 } else {\n                     realfile.clone()\n@@ -1240,14 +1244,17 @@ impl FilePathMapping {\n                 let (new_path, was_remapped) = self.map_prefix(unmapped_file_path);\n                 if was_remapped {\n                     // It was remapped, so don't modify further\n-                    return RealFileName::Remapped { local_path: None, virtual_name: new_path };\n+                    return RealFileName::Remapped {\n+                        local_path: None,\n+                        virtual_name: new_path.into_owned(),\n+                    };\n                 }\n \n                 if new_path.is_absolute() {\n                     // No remapping has applied to this path and it is absolute,\n                     // so the working directory cannot influence it either, so\n                     // we are done.\n-                    return RealFileName::LocalPath(new_path);\n+                    return RealFileName::LocalPath(new_path.into_owned());\n                 }\n \n                 debug_assert!(new_path.is_relative());\n@@ -1265,12 +1272,12 @@ impl FilePathMapping {\n                             RealFileName::Remapped {\n                                 // Erase the actual path\n                                 local_path: None,\n-                                virtual_name: file_path_abs,\n+                                virtual_name: file_path_abs.into_owned(),\n                             }\n                         } else {\n                             // No kind of remapping applied to this path, so\n                             // we leave it as it is.\n-                            RealFileName::LocalPath(file_path_abs)\n+                            RealFileName::LocalPath(file_path_abs.into_owned())\n                         }\n                     }\n                     RealFileName::Remapped {"}, {"sha": "686b3b00d7047a7120717418ce5106c118599408", "filename": "compiler/rustc_span/src/source_map/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs?ref=65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "patch": "@@ -391,7 +391,7 @@ fn path_prefix_remapping_expand_to_absolute() {\n     let working_directory = path(\"/foo\");\n     let working_directory = RealFileName::Remapped {\n         local_path: Some(working_directory.clone()),\n-        virtual_name: mapping.map_prefix(working_directory).0,\n+        virtual_name: mapping.map_prefix(working_directory).0.into_owned(),\n     };\n \n     assert_eq!(working_directory.remapped_path_if_available(), path(\"FOO\"));"}, {"sha": "2153e7d8c9ad9623193aed1fc98994b270e8f788", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "patch": "@@ -225,7 +225,6 @@ pub(crate) fn create_config(\n     // Add the doc cfg into the doc build.\n     cfgs.push(\"doc\".to_string());\n \n-    let cpath = Some(input.clone());\n     let input = Input::File(input);\n \n     // By default, rustdoc ignores all lints.\n@@ -277,7 +276,6 @@ pub(crate) fn create_config(\n         crate_cfg: interface::parse_cfgspecs(cfgs),\n         crate_check_cfg: interface::parse_check_cfg(check_cfgs),\n         input,\n-        input_path: cpath,\n         output_file: None,\n         output_dir: None,\n         file_loader: None,"}, {"sha": "c1a652c75f4a16a0999fface3e8d8f8db60752af", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "patch": "@@ -95,7 +95,6 @@ pub(crate) fn run(options: RustdocOptions) -> Result<(), ErrorGuaranteed> {\n         crate_cfg: interface::parse_cfgspecs(cfgs),\n         crate_check_cfg: interface::parse_check_cfg(options.check_cfgs.clone()),\n         input,\n-        input_path: None,\n         output_file: None,\n         output_dir: None,\n         file_loader: None,"}, {"sha": "4fa33e8907d0862c881ae98727f11401a4ea059c", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "patch": "@@ -2921,7 +2921,7 @@ fn render_call_locations(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Ite\n         // Look for the example file in the source map if it exists, otherwise return a dummy span\n         let file_span = (|| {\n             let source_map = tcx.sess.source_map();\n-            let crate_src = tcx.sess.local_crate_source_file.as_ref()?;\n+            let crate_src = tcx.sess.local_crate_source_file()?;\n             let abs_crate_src = crate_src.canonicalize().ok()?;\n             let crate_root = abs_crate_src.parent()?.parent()?;\n             let rel_path = path.strip_prefix(crate_root).ok()?;"}, {"sha": "c0267956aab4ab714da49b422f5a8fb1eaa4e972", "filename": "src/tools/miri/src/bin/miri.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs?ref=65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "patch": "@@ -56,12 +56,12 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n \n     fn after_analysis<'tcx>(\n         &mut self,\n-        compiler: &rustc_interface::interface::Compiler,\n+        _: &rustc_interface::interface::Compiler,\n         queries: &'tcx rustc_interface::Queries<'tcx>,\n     ) -> Compilation {\n-        compiler.session().abort_if_errors();\n-\n         queries.global_ctxt().unwrap().enter(|tcx| {\n+            tcx.sess.abort_if_errors();\n+\n             init_late_loggers(tcx);\n             if !tcx.sess.crate_types().contains(&CrateType::Executable) {\n                 tcx.sess.fatal(\"miri only makes sense on bin crates\");\n@@ -75,7 +75,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n             let mut config = self.miri_config.clone();\n \n             // Add filename to `miri` arguments.\n-            config.args.insert(0, compiler.input().filestem().to_string());\n+            config.args.insert(0, tcx.sess.io.input.filestem().to_string());\n \n             // Adjust working directory for interpretation.\n             if let Some(cwd) = env::var_os(\"MIRI_CWD\") {\n@@ -87,10 +87,9 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                     i32::try_from(return_code).expect(\"Return value was too large!\"),\n                 );\n             }\n+            tcx.sess.abort_if_errors();\n         });\n \n-        compiler.session().abort_if_errors();\n-\n         Compilation::Stop\n     }\n }"}, {"sha": "5bb38fc02af91be94cf296b3c6358341d0b6eb23", "filename": "tests/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/tests%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c/tests%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "patch": "@@ -1,12 +1,12 @@\n #![feature(rustc_private)]\n \n-extern crate rustc_interface;\n extern crate rustc_driver;\n+extern crate rustc_interface;\n extern crate rustc_session;\n extern crate rustc_span;\n \n-use rustc_session::config::{Input, Options, OutputType, OutputTypes};\n use rustc_interface::interface;\n+use rustc_session::config::{Input, Options, OutputType, OutputTypes};\n use rustc_span::source_map::FileName;\n \n use std::path::PathBuf;\n@@ -50,7 +50,6 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n         crate_cfg: Default::default(),\n         crate_check_cfg: Default::default(),\n         input,\n-        input_path: None,\n         output_file: Some(output),\n         output_dir: None,\n         file_loader: None,\n@@ -64,9 +63,7 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n \n     interface::run_compiler(config, |compiler| {\n         // This runs all the passes prior to linking, too.\n-        let linker = compiler.enter(|queries| {\n-            queries.linker()\n-        });\n+        let linker = compiler.enter(|queries| queries.linker());\n         if let Ok(linker) = linker {\n             linker.link();\n         }"}]}