{"sha": "10f342abae4e9aafb02c3adaaa050f43eb0e2dd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZjM0MmFiYWU0ZTlhYWZiMDJjM2FkYWFhMDUwZjQzZWIwZTJkZDA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-13T10:16:54Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-13T10:21:29Z"}, "message": "miri: fix exact_div", "tree": {"sha": "e6ce393e6ac6f15a13f4071556513289b800ff78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6ce393e6ac6f15a13f4071556513289b800ff78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10f342abae4e9aafb02c3adaaa050f43eb0e2dd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10f342abae4e9aafb02c3adaaa050f43eb0e2dd0", "html_url": "https://github.com/rust-lang/rust/commit/10f342abae4e9aafb02c3adaaa050f43eb0e2dd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10f342abae4e9aafb02c3adaaa050f43eb0e2dd0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e6eaceedeeda764056eb0e2134735793533770d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e6eaceedeeda764056eb0e2134735793533770d", "html_url": "https://github.com/rust-lang/rust/commit/2e6eaceedeeda764056eb0e2134735793533770d"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "33070f7e65671d3f6c67268ee79441433697f0c4", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10f342abae4e9aafb02c3adaaa050f43eb0e2dd0/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f342abae4e9aafb02c3adaaa050f43eb0e2dd0/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=10f342abae4e9aafb02c3adaaa050f43eb0e2dd0", "patch": "@@ -410,8 +410,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx> {\n         // Performs an exact division, resulting in undefined behavior where\n         // `x % y != 0` or `y == 0` or `x == T::min_value() && y == -1`.\n-        // First, check x % y != 0.\n-        if self.binary_op(BinOp::Rem, a, b)?.to_bits()? != 0 {\n+        // First, check x % y != 0 (or if that computation overflows).\n+        let (res, overflow, _ty) = self.overflowing_binary_op(BinOp::Rem, a, b)?;\n+        if overflow || res.to_bits(a.layout.size)? != 0 {\n             // Then, check if `b` is -1, which is the \"min_value / -1\" case.\n             let minus1 = Scalar::from_int(-1, dest.layout.size);\n             let b_scalar = b.to_scalar().unwrap();\n@@ -421,6 +422,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 throw_ub_format!(\"exact_div: {} cannot be divided by {} without remainder\", a, b,)\n             }\n         }\n+        // `Rem` says this is all right, so we can let `Div` do its job.\n         self.binop_ignore_overflow(BinOp::Div, a, b, dest)\n     }\n }"}]}