{"sha": "28027d38380a4b217301bc6e3c02aa8c0cb1726d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MDI3ZDM4MzgwYTRiMjE3MzAxYmM2ZTNjMDJhYThjMGNiMTcyNmQ=", "commit": {"author": {"name": "Brian Leibig", "email": "brian.leibig@gmail.com", "date": "2012-12-07T00:52:10Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-07T22:54:10Z"}, "message": "Add :load command to REPL that can compile and load external libraries", "tree": {"sha": "b9c449672b67880b664deae4064c7570ac19dc79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9c449672b67880b664deae4064c7570ac19dc79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28027d38380a4b217301bc6e3c02aa8c0cb1726d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28027d38380a4b217301bc6e3c02aa8c0cb1726d", "html_url": "https://github.com/rust-lang/rust/commit/28027d38380a4b217301bc6e3c02aa8c0cb1726d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28027d38380a4b217301bc6e3c02aa8c0cb1726d/comments", "author": {"login": "bleibig", "id": 1253302, "node_id": "MDQ6VXNlcjEyNTMzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1253302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bleibig", "html_url": "https://github.com/bleibig", "followers_url": "https://api.github.com/users/bleibig/followers", "following_url": "https://api.github.com/users/bleibig/following{/other_user}", "gists_url": "https://api.github.com/users/bleibig/gists{/gist_id}", "starred_url": "https://api.github.com/users/bleibig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bleibig/subscriptions", "organizations_url": "https://api.github.com/users/bleibig/orgs", "repos_url": "https://api.github.com/users/bleibig/repos", "events_url": "https://api.github.com/users/bleibig/events{/privacy}", "received_events_url": "https://api.github.com/users/bleibig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbc04dbb244d4789f4e76ddae9b48ea79e32dfb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc04dbb244d4789f4e76ddae9b48ea79e32dfb3", "html_url": "https://github.com/rust-lang/rust/commit/bbc04dbb244d4789f4e76ddae9b48ea79e32dfb3"}], "stats": {"total": 101, "additions": 96, "deletions": 5}, "files": [{"sha": "5b2b593b69270b406a4a7b9bc56ca2e18f82a8f7", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 96, "deletions": 5, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/28027d38380a4b217301bc6e3c02aa8c0cb1726d/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/28027d38380a4b217301bc6e3c02aa8c0cb1726d/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=28027d38380a4b217301bc6e3c02aa8c0cb1726d", "patch": "@@ -51,6 +51,7 @@ struct Repl {\n     binary: ~str,\n     running: bool,\n     view_items: ~str,\n+    lib_search_paths: ~[~str],\n     stmts: ~str\n }\n \n@@ -132,7 +133,7 @@ fn run(repl: Repl, input: ~str) -> Repl {\n     let options: @session::options = @{\n         crate_type: session::unknown_crate,\n         binary: repl.binary,\n-        addl_lib_search_paths: ~[os::getcwd()],\n+        addl_lib_search_paths: repl.lib_search_paths.map(|p| Path(*p)),\n         .. *session::basic_options()\n     };\n \n@@ -284,6 +285,63 @@ fn run(repl: Repl, input: ~str) -> Repl {\n     record(repl, blk, sess.parse_sess.interner)\n }\n \n+// Compiles a crate given by the filename as a library if the compiled\n+// version doesn't exist or is older than the source file. Binary is\n+// the name of the compiling executable. Returns Some(true) if it\n+// successfully compiled, Some(false) if the crate wasn't compiled\n+// because it already exists and is newer than the source file, or\n+// None if there were compile errors.\n+fn compile_crate(src_filename: ~str, binary: ~str) -> Option<bool> {\n+    match do task::try {\n+        let src_path = Path(src_filename);\n+        let options: @session::options = @{\n+            binary: binary,\n+            addl_lib_search_paths: ~[os::getcwd()],\n+            .. *session::basic_options()\n+        };\n+        let input = driver::file_input(src_path);\n+        let sess = driver::build_session(options, diagnostic::emit);\n+        sess.building_library = true;\n+        let cfg = driver::build_configuration(sess, binary, input);\n+        let outputs = driver::build_output_filenames(input, &None, &None, sess);\n+        // If the library already exists and is newer than the source\n+        // file, skip compilation and return None.\n+        let mut should_compile = true;\n+        let dir = os::list_dir_path(&Path(outputs.out_filename.dirname()));\n+        let maybe_lib_path = do dir.find |file| {\n+            // The actual file's name has a hash value and version\n+            // number in it which is unknown at this time, so looking\n+            // for a file that matches out_filename won't work,\n+            // instead we guess which file is the library by matching\n+            // the prefix and suffix of out_filename to files in the\n+            // directory.\n+            let file_str = file.filename().get();\n+            file_str.starts_with(outputs.out_filename.filestem().get())\n+                && file_str.ends_with(outputs.out_filename.filetype().get())\n+        };\n+        match maybe_lib_path {\n+            Some(lib_path) => {\n+                let (src_mtime, _) = src_path.get_mtime().get();\n+                let (lib_mtime, _) = lib_path.get_mtime().get();\n+                if lib_mtime >= src_mtime {\n+                    should_compile = false;\n+                }\n+            },\n+            None => { },\n+        }\n+        if (should_compile) {\n+            io::println(fmt!(\"compiling %s...\", src_filename));\n+            driver::compile_upto(sess, cfg, input, driver::cu_everything,\n+                                 Some(outputs));\n+            true\n+        } else { false }\n+    } {\n+        Ok(true) => Some(true),\n+        Ok(false) => Some(false),\n+        Err(_) => None,\n+    }\n+}\n+\n /// Tries to get a line from rl after outputting a prompt. Returns\n /// None if no input was read (e.g. EOF was reached).\n fn get_line(prompt: ~str) -> Option<~str> {\n@@ -302,7 +360,7 @@ fn get_line(prompt: ~str) -> Option<~str> {\n \n /// Run a command, e.g. :clear, :exit, etc.\n fn run_cmd(repl: &mut Repl, _in: io::Reader, _out: io::Writer,\n-           cmd: ~str, _args: ~[~str]) -> CmdAction {\n+           cmd: ~str, args: ~[~str]) -> CmdAction {\n     let mut action = action_none;\n     match cmd {\n         ~\"exit\" => repl.running = false,\n@@ -316,10 +374,43 @@ fn run_cmd(repl: &mut Repl, _in: io::Reader, _out: io::Writer,\n         ~\"help\" => {\n             io::println(\n                 ~\":{\\\\n ..lines.. \\\\n:}\\\\n - execute multiline command\\n\" +\n+                ~\":load <crate> ... - loads given crates as dynamic libraries\" +\n                 ~\":clear - clear the screen\\n\" +\n                 ~\":exit - exit from the repl\\n\" +\n                 ~\":help - show this message\");\n         }\n+        ~\"load\" => {\n+            let mut loaded_crates: ~[~str] = ~[];\n+            for args.each |arg| {\n+                let (crate, filename) =\n+                    if arg.ends_with(\".rs\") || arg.ends_with(\".rc\") {\n+                    (arg.substr(0, arg.len() - 3), *arg)\n+                } else {\n+                    (*arg, arg + ~\".rs\")\n+                };\n+                match compile_crate(filename, repl.binary) {\n+                    Some(_) => loaded_crates.push(crate),\n+                    None => { }\n+                }\n+            }\n+            for loaded_crates.each |crate| {\n+                let crate_path = Path(*crate);\n+                let crate_dir = crate_path.dirname();\n+                let crate_name = crate_path.filename().get();\n+                if !repl.view_items.contains(*crate) {\n+                    repl.view_items += fmt!(\"extern mod %s;\\n\", crate_name);\n+                    if !repl.lib_search_paths.contains(&crate_dir) {\n+                        repl.lib_search_paths.push(crate_dir);\n+                    }\n+                }\n+            }\n+            if loaded_crates.is_empty() {\n+                io::println(\"no crates loaded\");\n+            } else {\n+                io::println(fmt!(\"crates loaded: %s\",\n+                                 str::connect(loaded_crates, \", \")));\n+            }\n+        }\n         ~\"{\" => {\n             let mut multiline_cmd = ~\"\";\n             let mut end_multiline = false;\n@@ -356,9 +447,7 @@ fn run_line(repl: &mut Repl, in: io::Reader, out: io::Writer, line: ~str)\n \n             if !cmd.is_empty() {\n                 let args = if len > 1 {\n-                    do vec::view(split, 1, len - 1).map |arg| {\n-                        *arg\n-                    }\n+                    vec::slice(split, 1, len)\n                 } else { ~[] };\n \n                 match run_cmd(repl, in, out, cmd, args) {\n@@ -394,6 +483,7 @@ pub fn main() {\n         binary: args[0],\n         running: true,\n         view_items: ~\"\",\n+        lib_search_paths: ~[],\n         stmts: ~\"\"\n     };\n \n@@ -403,6 +493,7 @@ pub fn main() {\n                 suggest(~\":clear\");\n                 suggest(~\":exit\");\n                 suggest(~\":help\");\n+                suggest(~\":load\");\n             }\n         }\n     }"}]}