{"sha": "8821affd1523a719ffb9f6537d53f8725ab00592", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MjFhZmZkMTUyM2E3MTlmZmI5ZjY1MzdkNTNmODcyNWFiMDA1OTI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-12T19:18:11Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-17T16:41:43Z"}, "message": "rustc: Move some attr methods to queries\n\nOtherwise we may emit double errors related to the `#[export_name]` attribute,\nfor example, and using a query should ensure that it's only emitted at most\nonce.", "tree": {"sha": "50df34d96d1c8aa101bb8a2adf417ca79c0cffb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50df34d96d1c8aa101bb8a2adf417ca79c0cffb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8821affd1523a719ffb9f6537d53f8725ab00592", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8821affd1523a719ffb9f6537d53f8725ab00592", "html_url": "https://github.com/rust-lang/rust/commit/8821affd1523a719ffb9f6537d53f8725ab00592", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8821affd1523a719ffb9f6537d53f8725ab00592/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "132bde7cf1ee102b6eb370561bf9af9cfbfb4224", "url": "https://api.github.com/repos/rust-lang/rust/commits/132bde7cf1ee102b6eb370561bf9af9cfbfb4224", "html_url": "https://github.com/rust-lang/rust/commit/132bde7cf1ee102b6eb370561bf9af9cfbfb4224"}], "stats": {"total": 127, "additions": 69, "deletions": 58}, "files": [{"sha": "3a534ef93ad6dff9f10ee38f0769128bceb99c54", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8821affd1523a719ffb9f6537d53f8725ab00592/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8821affd1523a719ffb9f6537d53f8725ab00592/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=8821affd1523a719ffb9f6537d53f8725ab00592", "patch": "@@ -577,6 +577,8 @@ define_dep_nodes!( <'tcx>\n     [] AllCrateNums,\n     [] ExportedSymbols,\n     [] CollectAndPartitionTranslationItems,\n+    [] ExportName(DefId),\n+    [] ContainsExternIndicator(DefId),\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "7c4424509019705b0ca921e78fb2a4548efb37d8", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8821affd1523a719ffb9f6537d53f8725ab00592/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8821affd1523a719ffb9f6537d53f8725ab00592/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=8821affd1523a719ffb9f6537d53f8725ab00592", "patch": "@@ -233,8 +233,8 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                 } else {\n                     false\n                 };\n-                let is_extern = attr::contains_extern_indicator(&self.tcx.sess.diagnostic(),\n-                                                                &item.attrs);\n+                let def_id = self.tcx.hir.local_def_id(item.id);\n+                let is_extern = self.tcx.contains_extern_indicator(def_id);\n                 if reachable || is_extern {\n                     self.reachable_symbols.insert(search_item);\n                 }"}, {"sha": "cf8e9cbbd3d31163d0f94e69d6e66d76b8116a49", "filename": "src/librustc/middle/trans.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8821affd1523a719ffb9f6537d53f8725ab00592/src%2Flibrustc%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8821affd1523a719ffb9f6537d53f8725ab00592/src%2Flibrustc%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans.rs?ref=8821affd1523a719ffb9f6537d53f8725ab00592", "patch": "@@ -1,3 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n use syntax::ast::NodeId;\n use syntax::symbol::InternedString;\n use ty::Instance;"}, {"sha": "75c20a25131ab0795b209662274268518c69ce6c", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8821affd1523a719ffb9f6537d53f8725ab00592/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8821affd1523a719ffb9f6537d53f8725ab00592/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=8821affd1523a719ffb9f6537d53f8725ab00592", "patch": "@@ -1392,6 +1392,8 @@ define_maps! { <'tcx>\n     [] fn collect_and_partition_translation_items:\n         collect_and_partition_translation_items_node(CrateNum)\n         -> (Arc<FxHashSet<TransItem<'tcx>>>, Vec<Arc<CodegenUnit<'tcx>>>),\n+    [] fn export_name: ExportName(DefId) -> Option<Symbol>,\n+    [] fn contains_extern_indicator: ContainsExternIndicator(DefId) -> bool,\n }\n \n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {"}, {"sha": "01b8db557bd1b7b0a1d759f642332127830f233a", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8821affd1523a719ffb9f6537d53f8725ab00592/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8821affd1523a719ffb9f6537d53f8725ab00592/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=8821affd1523a719ffb9f6537d53f8725ab00592", "patch": "@@ -17,7 +17,6 @@ use rustc::ty::TyCtxt;\n use rustc_allocator::ALLOCATOR_METHODS;\n use rustc::middle::exported_symbols::{ExportedSymbols, SymbolExportLevel};\n use rustc::middle::exported_symbols::is_below_threshold;\n-use syntax::attr;\n \n pub fn compute<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> ExportedSymbols {\n     let export_threshold = crates_export_threshold(&tcx.sess.crate_types.borrow());\n@@ -137,11 +136,8 @@ pub fn compute<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> ExportedSymbols {\n \n     return ExportedSymbols::new(export_threshold, exports, local_exports);\n \n-    fn export_level(tcx: TyCtxt,\n-                    sym_def_id: DefId)\n-                    -> SymbolExportLevel {\n-        let attrs = tcx.get_attrs(sym_def_id);\n-        if attr::contains_extern_indicator(tcx.sess.diagnostic(), &attrs) {\n+    fn export_level(tcx: TyCtxt, sym_def_id: DefId) -> SymbolExportLevel {\n+        if tcx.contains_extern_indicator(sym_def_id) {\n             SymbolExportLevel::C\n         } else {\n             SymbolExportLevel::Rust"}, {"sha": "306071223fc2c1d532459869174bc22c064f2ab0", "filename": "src/librustc_trans/back/symbol_names.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8821affd1523a719ffb9f6537d53f8725ab00592/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8821affd1523a719ffb9f6537d53f8725ab00592/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs?ref=8821affd1523a719ffb9f6537d53f8725ab00592", "patch": "@@ -119,6 +119,30 @@ pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         def_symbol_name,\n         symbol_name,\n+\n+        export_name: |tcx, id| {\n+            tcx.get_attrs(id).iter().fold(None, |ia, attr| {\n+                if attr.check_name(\"export_name\") {\n+                    if let s @ Some(_) = attr.value_str() {\n+                        s\n+                    } else {\n+                        struct_span_err!(tcx.sess, attr.span, E0558,\n+                                         \"export_name attribute has invalid format\")\n+                            .span_label(attr.span, \"did you mean #[export_name=\\\"*\\\"]?\")\n+                            .emit();\n+                        None\n+                    }\n+                } else {\n+                    ia\n+                }\n+            })\n+        },\n+\n+        contains_extern_indicator: |tcx, id| {\n+            attr::contains_name(&tcx.get_attrs(id), \"no_mangle\") ||\n+                tcx.export_name(id).is_some()\n+        },\n+\n         ..*providers\n     };\n }\n@@ -245,7 +269,7 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n         return tcx.item_name(def_id).to_string();\n     }\n \n-    if let Some(name) = attr::find_export_name_attr(tcx.sess.diagnostic(), &attrs) {\n+    if let Some(name) = tcx.export_name(def_id) {\n         // Use provided name\n         return name.to_string();\n     }"}, {"sha": "8485867689129bfa02bf64b0d6978d3161e1acd3", "filename": "src/librustc_trans/diagnostics.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8821affd1523a719ffb9f6537d53f8725ab00592/src%2Flibrustc_trans%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8821affd1523a719ffb9f6537d53f8725ab00592/src%2Flibrustc_trans%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdiagnostics.rs?ref=8821affd1523a719ffb9f6537d53f8725ab00592", "patch": "@@ -46,4 +46,28 @@ extern \"platform-intrinsic\" {\n unsafe { simd_add(i32x1(0), i32x1(1)); } // ok!\n ```\n \"##,\n+\n+E0558: r##\"\n+The `export_name` attribute was malformed.\n+\n+Erroneous code example:\n+\n+```ignore (error-emitted-at-codegen-which-cannot-be-handled-by-compile_fail)\n+#[export_name] // error: export_name attribute has invalid format\n+pub fn something() {}\n+\n+fn main() {}\n+```\n+\n+The `export_name` attribute expects a string in order to determine the name of\n+the exported symbol. Example:\n+\n+```\n+#[export_name = \"some_function\"] // ok!\n+pub fn something() {}\n+\n+fn main() {}\n+```\n+\"##,\n+\n }"}, {"sha": "42c3e620baa7f39b57f9f77c9831f3d6ca8bc7eb", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8821affd1523a719ffb9f6537d53f8725ab00592/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8821affd1523a719ffb9f6537d53f8725ab00592/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=8821affd1523a719ffb9f6537d53f8725ab00592", "patch": "@@ -76,6 +76,8 @@ use rustc::middle::cstore::{NativeLibrary, CrateSource, LibSource};\n use rustc::ty::maps::Providers;\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n \n+mod diagnostics;\n+\n pub mod back {\n     mod archive;\n     mod command;\n@@ -88,8 +90,6 @@ pub mod back {\n     mod rpath;\n }\n \n-mod diagnostics;\n-\n mod abi;\n mod adt;\n mod allocator;"}, {"sha": "36ab3737f3803cb8aeaa82c7f4316ca24de443bc", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8821affd1523a719ffb9f6537d53f8725ab00592/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8821affd1523a719ffb9f6537d53f8725ab00592/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=8821affd1523a719ffb9f6537d53f8725ab00592", "patch": "@@ -506,30 +506,6 @@ pub fn find_crate_name(attrs: &[Attribute]) -> Option<Symbol> {\n     first_attr_value_str_by_name(attrs, \"crate_name\")\n }\n \n-/// Find the value of #[export_name=*] attribute and check its validity.\n-pub fn find_export_name_attr(diag: &Handler, attrs: &[Attribute]) -> Option<Symbol> {\n-    attrs.iter().fold(None, |ia,attr| {\n-        if attr.check_name(\"export_name\") {\n-            if let s@Some(_) = attr.value_str() {\n-                s\n-            } else {\n-                struct_span_err!(diag, attr.span, E0558,\n-                                 \"export_name attribute has invalid format\")\n-                    .span_label(attr.span, \"did you mean #[export_name=\\\"*\\\"]?\")\n-                    .emit();\n-                None\n-            }\n-        } else {\n-            ia\n-        }\n-    })\n-}\n-\n-pub fn contains_extern_indicator(diag: &Handler, attrs: &[Attribute]) -> bool {\n-    contains_name(attrs, \"no_mangle\") ||\n-        find_export_name_attr(diag, attrs).is_some()\n-}\n-\n #[derive(Copy, Clone, PartialEq)]\n pub enum InlineAttr {\n     None,"}, {"sha": "b29883670bdeae3dfb496fd7e7c92c31dd34e8c5", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8821affd1523a719ffb9f6537d53f8725ab00592/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8821affd1523a719ffb9f6537d53f8725ab00592/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=8821affd1523a719ffb9f6537d53f8725ab00592", "patch": "@@ -219,29 +219,6 @@ Erroneous code example:\n Delete the offending feature attribute.\n \"##,\n \n-E0558: r##\"\n-The `export_name` attribute was malformed.\n-\n-Erroneous code example:\n-\n-```compile_fail,E0558\n-#[export_name] // error: export_name attribute has invalid format\n-pub fn something() {}\n-\n-fn main() {}\n-```\n-\n-The `export_name` attribute expects a string in order to determine the name of\n-the exported symbol. Example:\n-\n-```\n-#[export_name = \"some_function\"] // ok!\n-pub fn something() {}\n-\n-fn main() {}\n-```\n-\"##,\n-\n E0565: r##\"\n A literal was used in an attribute that doesn't support literals.\n "}]}