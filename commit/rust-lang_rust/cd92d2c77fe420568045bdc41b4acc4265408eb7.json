{"sha": "cd92d2c77fe420568045bdc41b4acc4265408eb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkOTJkMmM3N2ZlNDIwNTY4MDQ1YmRjNDFiNGFjYzQyNjU0MDhlYjc=", "commit": {"author": {"name": "Flaper Fesp", "email": "flaper87@gmail.com", "date": "2013-08-17T22:51:39Z"}, "committer": {"name": "Flaper Fesp", "email": "flaper87@gmail.com", "date": "2013-08-26T22:34:16Z"}, "message": "Make rekillable consistent with unkillable\n\nAs for now, rekillable is an unsafe function, instead, it should behave\njust like unkillable by encapsulating unsafe code within an unsafe\nblock.\n\nThis patch does that and removes unsafe blocks that were encapsulating\nrekillable calls throughout rust's libs.\n\nFixes #8232", "tree": {"sha": "411b81105b25aea869014104148699a1f43fbe74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/411b81105b25aea869014104148699a1f43fbe74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd92d2c77fe420568045bdc41b4acc4265408eb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd92d2c77fe420568045bdc41b4acc4265408eb7", "html_url": "https://github.com/rust-lang/rust/commit/cd92d2c77fe420568045bdc41b4acc4265408eb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd92d2c77fe420568045bdc41b4acc4265408eb7/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cd91c8cc4e87f3abd9201515eefe24f0124810c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cd91c8cc4e87f3abd9201515eefe24f0124810c", "html_url": "https://github.com/rust-lang/rust/commit/9cd91c8cc4e87f3abd9201515eefe24f0124810c"}], "stats": {"total": 91, "additions": 46, "deletions": 45}, "files": [{"sha": "1952c35eb9df295b3d8c342f8aa2d4f5ce05448e", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 19, "deletions": 29, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/cd92d2c77fe420568045bdc41b4acc4265408eb7/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd92d2c77fe420568045bdc41b4acc4265408eb7/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=cd92d2c77fe420568045bdc41b4acc4265408eb7", "patch": "@@ -135,9 +135,7 @@ impl<Q:Send> Sem<Q> {\n         do task::unkillable {\n             do (|| {\n                 self.acquire();\n-                unsafe {\n-                    do task::rekillable { blk() }\n-                }\n+                do task::rekillable { blk() }\n             }).finally {\n                 self.release();\n             }\n@@ -234,10 +232,8 @@ impl<'self> Condvar<'self> {\n                 // signaller already sent -- I mean 'unconditionally' in contrast\n                 // with acquire().)\n                 do (|| {\n-                    unsafe {\n-                        do task::rekillable {\n-                            let _ = WaitEnd.take_unwrap().recv();\n-                        }\n+                    do task::rekillable {\n+                        let _ = WaitEnd.take_unwrap().recv();\n                     }\n                 }).finally {\n                     // Reacquire the condvar. Note this is back in the unkillable\n@@ -516,14 +512,12 @@ impl RWLock {\n      * 'write' from other tasks will run concurrently with this one.\n      */\n     pub fn write<U>(&self, blk: &fn() -> U) -> U {\n-        unsafe {\n-            do task::unkillable {\n-                (&self.order_lock).acquire();\n-                do (&self.access_lock).access {\n-                    (&self.order_lock).release();\n-                    do task::rekillable {\n-                        blk()\n-                    }\n+        do task::unkillable {\n+            (&self.order_lock).acquire();\n+            do (&self.access_lock).access {\n+                (&self.order_lock).release();\n+                do task::rekillable {\n+                    blk()\n                 }\n             }\n         }\n@@ -562,16 +556,14 @@ impl RWLock {\n         // which can't happen until T2 finishes the downgrade-read entirely.\n         // The astute reader will also note that making waking writers use the\n         // order_lock is better for not starving readers.\n-        unsafe {\n-            do task::unkillable {\n-                (&self.order_lock).acquire();\n-                do (&self.access_lock).access_cond |cond| {\n-                    (&self.order_lock).release();\n-                    do task::rekillable {\n-                        let opt_lock = Just(&self.order_lock);\n-                        blk(&Condvar { sem: cond.sem, order: opt_lock,\n-                                       token: NonCopyable::new() })\n-                    }\n+        do task::unkillable {\n+            (&self.order_lock).acquire();\n+            do (&self.access_lock).access_cond |cond| {\n+                (&self.order_lock).release();\n+                do task::rekillable {\n+                    let opt_lock = Just(&self.order_lock);\n+                    blk(&Condvar { sem: cond.sem, order: opt_lock,\n+                                   token: NonCopyable::new() })\n                 }\n             }\n         }\n@@ -606,10 +598,8 @@ impl RWLock {\n             (&self.access_lock).acquire();\n             (&self.order_lock).release();\n             do (|| {\n-                unsafe {\n-                    do task::rekillable {\n-                        blk(RWLockWriteMode { lock: self, token: NonCopyable::new() })\n-                    }\n+                do task::rekillable {\n+                    blk(RWLockWriteMode { lock: self, token: NonCopyable::new() })\n                 }\n             }).finally {\n                 let writer_or_last_reader;"}, {"sha": "bac4991d858ff917d8ff83f150587063ea13741e", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/cd92d2c77fe420568045bdc41b4acc4265408eb7/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd92d2c77fe420568045bdc41b4acc4265408eb7/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=cd92d2c77fe420568045bdc41b4acc4265408eb7", "patch": "@@ -597,21 +597,34 @@ pub fn unkillable<U>(f: &fn() -> U) -> U {\n     }\n }\n \n-/// The inverse of unkillable. Only ever to be used nested in unkillable().\n-pub unsafe fn rekillable<U>(f: &fn() -> U) -> U {\n+/**\n+ * Makes killable a task marked as unkillable\n+ *\n+ * # Example\n+ *\n+ * ~~~\n+ * do task::unkillable {\n+ *     do task::rekillable {\n+ *          // Task is killable\n+ *     }\n+ * }\n+ */\n+pub fn rekillable<U>(f: &fn() -> U) -> U {\n     use rt::task::Task;\n \n-    if in_green_task_context() {\n-        let t = Local::unsafe_borrow::<Task>();\n-        do (|| {\n-            (*t).death.allow_kill((*t).unwinder.unwinding);\n+    unsafe {\n+        if in_green_task_context() {\n+            let t = Local::unsafe_borrow::<Task>();\n+            do (|| {\n+                (*t).death.allow_kill((*t).unwinder.unwinding);\n+                f()\n+            }).finally {\n+                (*t).death.inhibit_kill((*t).unwinder.unwinding);\n+            }\n+        } else {\n+            // FIXME(#3095): As in unkillable().\n             f()\n-        }).finally {\n-            (*t).death.inhibit_kill((*t).unwinder.unwinding);\n         }\n-    } else {\n-        // FIXME(#3095): As in unkillable().\n-        f()\n     }\n }\n \n@@ -646,11 +659,9 @@ fn test_kill_rekillable_task() {\n     do run_in_newsched_task {\n         do task::try {\n             do task::unkillable {\n-                unsafe {\n-                    do task::rekillable {\n-                        do task::spawn {\n-                            fail!();\n-                        }\n+                do task::rekillable {\n+                    do task::spawn {\n+                        fail!();\n                     }\n                 }\n             }"}]}