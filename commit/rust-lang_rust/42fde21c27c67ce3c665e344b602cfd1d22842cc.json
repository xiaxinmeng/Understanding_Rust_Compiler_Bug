{"sha": "42fde21c27c67ce3c665e344b602cfd1d22842cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZmRlMjFjMjdjNjdjZTNjNjY1ZTM0NGI2MDJjZmQxZDIyODQyY2M=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-03-10T14:03:06Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-04-03T17:41:50Z"}, "message": "Add tests to rustbuild\n\nIn order to run tests, previous commits have cfg'd out various parts of\nrustbuild. Generally speaking, these are filesystem-related operations\nand process-spawning related parts. Then, rustbuild is run \"as normal\"\nand the various steps that where run are retrieved from the cache and\nchecked against the expected results.\n\nNote that this means that the current implementation primarily tests\n\"what\" we build, but doesn't actually test that what we build *will*\nbuild. In other words, it doesn't do any form of dependency verification\nfor any crate. This is possible to implement, but is considered future\nwork.\n\nThis implementation strives to cfg out as little code as possible; it\nalso does not currently test anywhere near all of rustbuild. The current\ntests are also not checked for \"correctness,\" rather, they simply\nrepresent what we do as of this commit, which may be wrong.\n\nTest cases are drawn from the old implementation of rustbuild, though\nthe expected results may vary.", "tree": {"sha": "360e19e105e1aad9f1f4e4372b0655e3764b83b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/360e19e105e1aad9f1f4e4372b0655e3764b83b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42fde21c27c67ce3c665e344b602cfd1d22842cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42fde21c27c67ce3c665e344b602cfd1d22842cc", "html_url": "https://github.com/rust-lang/rust/commit/42fde21c27c67ce3c665e344b602cfd1d22842cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42fde21c27c67ce3c665e344b602cfd1d22842cc/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fd42ec130148cb49e83028153f17dab6843966e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fd42ec130148cb49e83028153f17dab6843966e", "html_url": "https://github.com/rust-lang/rust/commit/8fd42ec130148cb49e83028153f17dab6843966e"}], "stats": {"total": 516, "additions": 514, "deletions": 2}, "files": [{"sha": "b76bbd372712e82cb7dd1a0f9bbfd8e5d6c77b33", "filename": "src/Cargo.lock", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/42fde21c27c67ce3c665e344b602cfd1d22842cc/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/42fde21c27c67ce3c665e344b602cfd1d22842cc/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=42fde21c27c67ce3c665e344b602cfd1d22842cc", "patch": "@@ -124,6 +124,7 @@ dependencies = [\n  \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pretty_assertions 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -528,6 +529,11 @@ name = \"diff\"\n version = \"0.1.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"difference\"\n+version = \"2.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"dlmalloc\"\n version = \"0.0.0\"\n@@ -1233,6 +1239,15 @@ name = \"pkg-config\"\n version = \"0.3.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"pretty_assertions\"\n+version = \"0.5.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"difference 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"proc-macro2\"\n version = \"0.2.3\"\n@@ -2683,6 +2698,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum curl-sys 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f46e49c7125131f5afaded06944d6888b55cbdf8eba05dae73c954019b907961\"\n \"checksum derive-new 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6fcb923bab47a948f1b01cec2f758fdebba95c9ebc255458654b2b88efe59d71\"\n \"checksum diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3c2b69f912779fbb121ceb775d74d51e915af17aaebc38d28a592843a2dd0a3a\"\n+\"checksum difference 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198\"\n \"checksum dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"09c3753c3db574d215cba4ea76018483895d7bff25a31b49ba45db21c48e50ab\"\n \"checksum either 1.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3be565ca5c557d7f59e7cfcf1844f9e3033650c929c6566f511e8005f205c1d0\"\n \"checksum ena 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8b449f3b18c89d2dbe40548d2ee4fa58ea0a08b761992da6ecb9788e4688834\"\n@@ -2755,6 +2771,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum pest 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0fce5d8b5cc33983fc74f78ad552b5522ab41442c4ca91606e4236eb4b5ceefc\"\n \"checksum pest_derive 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab94faafeb93f4c5e3ce81ca0e5a779529a602ad5d09ae6d21996bfb8b6a52bf\"\n \"checksum pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a8b4c6b8165cd1a1cd4b9b120978131389f64bdaf456435caa41e630edba903\"\n+\"checksum pretty_assertions 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a029430f0d744bc3d15dd474d591bed2402b645d024583082b9f63bb936dac6\"\n \"checksum proc-macro2 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cd07deb3c6d1d9ff827999c7f9b04cdfd66b1b17ae508e14fe47b620f2282ae0\"\n \"checksum proc-macro2 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388d7ea47318c5ccdeb9ba6312cee7d3f65dd2804be8580a170fce410d50b786\"\n \"checksum pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d6fdf85cda6cadfae5428a54661d431330b312bc767ddbc57adbedc24da66e32\""}, {"sha": "c09a3d865230fe184760a54465dedd1815430814", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42fde21c27c67ce3c665e344b602cfd1d22842cc/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/42fde21c27c67ce3c665e344b602cfd1d22842cc/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=42fde21c27c67ce3c665e344b602cfd1d22842cc", "patch": "@@ -42,3 +42,6 @@ serde_json = \"1.0.2\"\n toml = \"0.4\"\n lazy_static = \"0.2\"\n time = \"0.1\"\n+\n+[dev-dependencies]\n+pretty_assertions = \"0.5\""}, {"sha": "80136aa86e3e23667cee1492163994df89a55c03", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 477, "deletions": 2, "changes": 479, "blob_url": "https://github.com/rust-lang/rust/blob/42fde21c27c67ce3c665e344b602cfd1d22842cc/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fde21c27c67ce3c665e344b602cfd1d22842cc/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=42fde21c27c67ce3c665e344b602cfd1d22842cc", "patch": "@@ -401,12 +401,16 @@ impl<'a> Builder<'a> {\n     }\n \n     pub fn execute_cli(&self) {\n-        StepDescription::run(&Builder::get_step_descriptions(self.kind), self, &self.paths);\n+        self.run_step_descriptions(&Builder::get_step_descriptions(self.kind), &self.paths);\n     }\n \n     pub fn default_doc(&self, paths: Option<&[PathBuf]>) {\n         let paths = paths.unwrap_or(&[]);\n-        StepDescription::run(&Builder::get_step_descriptions(Kind::Doc), self, paths);\n+        self.run_step_descriptions(&Builder::get_step_descriptions(Kind::Doc), paths);\n+    }\n+\n+    fn run_step_descriptions(&self, v: &[StepDescription], paths: &[PathBuf]) {\n+        StepDescription::run(v, self, paths);\n     }\n \n     /// Obtain a compiler at a given stage and for a given host. Explicitly does\n@@ -862,3 +866,474 @@ impl<'a> Builder<'a> {\n         out\n     }\n }\n+\n+#[cfg(test)]\n+mod __test {\n+    use config::Config;\n+    use super::*;\n+\n+    fn configure(host: &[&str], target: &[&str]) -> Config {\n+        let mut config = Config::default_opts();\n+        config.run_host_only = true;\n+        config.build = INTERNER.intern_str(\"A\");\n+        config.hosts = vec![config.build].clone().into_iter()\n+            .chain(host.iter().map(|s| INTERNER.intern_str(s))).collect::<Vec<_>>();\n+        config.targets = config.hosts.clone().into_iter()\n+            .chain(target.iter().map(|s| INTERNER.intern_str(s))).collect::<Vec<_>>();\n+        config\n+    }\n+\n+    fn first<A, B>(v: Vec<(A, B)>) -> Vec<A> {\n+        v.into_iter().map(|(a, _)| a).collect::<Vec<_>>()\n+    }\n+\n+    #[test]\n+    fn dist_baseline() {\n+        let build = Build::new(configure(&[], &[]));\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n+\n+        let a = INTERNER.intern_str(\"A\");\n+\n+        assert_eq!(first(builder.cache.all::<dist::Docs>()), &[\n+            dist::Docs { stage: 2, host: a },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<dist::Mingw>()), &[\n+            dist::Mingw { host: a },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<dist::Rustc>()), &[\n+            dist::Rustc { compiler: Compiler { host: a, stage: 2 } },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<dist::Std>()), &[\n+            dist::Std {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: a,\n+            },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n+    }\n+\n+    #[test]\n+    fn dist_with_targets() {\n+        let build = Build::new(configure(&[], &[\"B\"]));\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n+\n+        let a = INTERNER.intern_str(\"A\");\n+        let b = INTERNER.intern_str(\"B\");\n+\n+        assert_eq!(first(builder.cache.all::<dist::Docs>()), &[\n+            dist::Docs { stage: 2, host: a },\n+            dist::Docs { stage: 2, host: b },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<dist::Mingw>()), &[\n+            dist::Mingw { host: a },\n+            dist::Mingw { host: b },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<dist::Rustc>()), &[\n+            dist::Rustc { compiler: Compiler { host: a, stage: 2 } },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<dist::Std>()), &[\n+            dist::Std {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: a,\n+            },\n+            dist::Std {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: b,\n+            },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n+    }\n+\n+    #[test]\n+    fn dist_with_hosts() {\n+        let build = Build::new(configure(&[\"B\"], &[]));\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n+\n+        let a = INTERNER.intern_str(\"A\");\n+        let b = INTERNER.intern_str(\"B\");\n+\n+        assert_eq!(first(builder.cache.all::<dist::Docs>()), &[\n+            dist::Docs { stage: 2, host: a },\n+            dist::Docs { stage: 2, host: b },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<dist::Mingw>()), &[\n+            dist::Mingw { host: a },\n+            dist::Mingw { host: b },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<dist::Rustc>()), &[\n+            dist::Rustc { compiler: Compiler { host: a, stage: 2 } },\n+            dist::Rustc { compiler: Compiler { host: b, stage: 2 } },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<dist::Std>()), &[\n+            dist::Std {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: a,\n+            },\n+            dist::Std {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: b,\n+            },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n+    }\n+\n+    #[test]\n+    fn dist_with_targets_and_hosts() {\n+        let build = Build::new(configure(&[\"B\"], &[\"C\"]));\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n+\n+        let a = INTERNER.intern_str(\"A\");\n+        let b = INTERNER.intern_str(\"B\");\n+        let c = INTERNER.intern_str(\"C\");\n+\n+        assert_eq!(first(builder.cache.all::<dist::Docs>()), &[\n+            dist::Docs { stage: 2, host: a },\n+            dist::Docs { stage: 2, host: b },\n+            dist::Docs { stage: 2, host: c },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<dist::Mingw>()), &[\n+            dist::Mingw { host: a },\n+            dist::Mingw { host: b },\n+            dist::Mingw { host: c },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<dist::Rustc>()), &[\n+            dist::Rustc { compiler: Compiler { host: a, stage: 2 } },\n+            dist::Rustc { compiler: Compiler { host: b, stage: 2 } },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<dist::Std>()), &[\n+            dist::Std {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: a,\n+            },\n+            dist::Std {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: b,\n+            },\n+            dist::Std {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: c,\n+            },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n+    }\n+\n+    #[test]\n+    fn dist_with_target_flag() {\n+        let mut config = configure(&[\"B\"], &[\"C\"]);\n+        config.run_host_only = false; // as-if --target=C was passed\n+        let build = Build::new(config);\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n+\n+        let a = INTERNER.intern_str(\"A\");\n+        let b = INTERNER.intern_str(\"B\");\n+        let c = INTERNER.intern_str(\"C\");\n+\n+        assert_eq!(first(builder.cache.all::<dist::Docs>()), &[\n+            dist::Docs { stage: 2, host: a },\n+            dist::Docs { stage: 2, host: b },\n+            dist::Docs { stage: 2, host: c },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<dist::Mingw>()), &[\n+            dist::Mingw { host: a },\n+            dist::Mingw { host: b },\n+            dist::Mingw { host: c },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<dist::Rustc>()), &[]);\n+        assert_eq!(first(builder.cache.all::<dist::Std>()), &[\n+            dist::Std {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: a,\n+            },\n+            dist::Std {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: b,\n+            },\n+            dist::Std {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: c,\n+            },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<dist::Src>()), &[]);\n+    }\n+\n+    #[test]\n+    fn dist_with_same_targets_and_hosts() {\n+        let build = Build::new(configure(&[\"B\"], &[\"B\"]));\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n+\n+        let a = INTERNER.intern_str(\"A\");\n+        let b = INTERNER.intern_str(\"B\");\n+\n+        assert_eq!(first(builder.cache.all::<dist::Docs>()), &[\n+            dist::Docs { stage: 2, host: a },\n+            dist::Docs { stage: 2, host: b },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<dist::Mingw>()), &[\n+            dist::Mingw { host: a },\n+            dist::Mingw { host: b },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<dist::Rustc>()), &[\n+            dist::Rustc { compiler: Compiler { host: a, stage: 2 } },\n+            dist::Rustc { compiler: Compiler { host: b, stage: 2 } },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<dist::Std>()), &[\n+            dist::Std {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: a,\n+            },\n+            dist::Std {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: b,\n+            },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n+        assert_eq!(first(builder.cache.all::<compile::Std>()), &[\n+            compile::Std {\n+                compiler: Compiler { host: a, stage: 0 },\n+                target: a,\n+            },\n+            compile::Std {\n+                compiler: Compiler { host: a, stage: 1 },\n+                target: a,\n+            },\n+            compile::Std {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: a,\n+            },\n+            compile::Std {\n+                compiler: Compiler { host: a, stage: 1 },\n+                target: b,\n+            },\n+            compile::Std {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: b,\n+            },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<compile::Test>()), &[\n+            compile::Test {\n+                compiler: Compiler { host: a, stage: 0 },\n+                target: a,\n+            },\n+            compile::Test {\n+                compiler: Compiler { host: a, stage: 1 },\n+                target: a,\n+            },\n+            compile::Test {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: a,\n+            },\n+            compile::Test {\n+                compiler: Compiler { host: a, stage: 1 },\n+                target: b,\n+            },\n+            compile::Test {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: b,\n+            },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<compile::Assemble>()), &[\n+            compile::Assemble {\n+                target_compiler: Compiler { host: a, stage: 0 },\n+            },\n+            compile::Assemble {\n+                target_compiler: Compiler { host: a, stage: 1 },\n+            },\n+            compile::Assemble {\n+                target_compiler: Compiler { host: a, stage: 2 },\n+            },\n+            compile::Assemble {\n+                target_compiler: Compiler { host: b, stage: 2 },\n+            },\n+        ]);\n+    }\n+\n+    #[test]\n+    fn build_default() {\n+        let build = Build::new(configure(&[\"B\"], &[\"C\"]));\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n+\n+        let a = INTERNER.intern_str(\"A\");\n+        let b = INTERNER.intern_str(\"B\");\n+        let c = INTERNER.intern_str(\"C\");\n+\n+        assert!(!builder.cache.all::<compile::Std>().is_empty());\n+        assert!(!builder.cache.all::<compile::Assemble>().is_empty());\n+        assert_eq!(first(builder.cache.all::<compile::Rustc>()), &[\n+            compile::Rustc {\n+                compiler: Compiler { host: a, stage: 0 },\n+                target: a,\n+            },\n+            compile::Rustc {\n+                compiler: Compiler { host: a, stage: 1 },\n+                target: a,\n+            },\n+            compile::Rustc {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: a,\n+            },\n+            compile::Rustc {\n+                compiler: Compiler { host: b, stage: 2 },\n+                target: a,\n+            },\n+            compile::Rustc {\n+                compiler: Compiler { host: a, stage: 0 },\n+                target: b,\n+            },\n+            compile::Rustc {\n+                compiler: Compiler { host: a, stage: 1 },\n+                target: b,\n+            },\n+            compile::Rustc {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: b,\n+            },\n+            compile::Rustc {\n+                compiler: Compiler { host: b, stage: 2 },\n+                target: b,\n+            },\n+        ]);\n+\n+        assert_eq!(first(builder.cache.all::<compile::Test>()), &[\n+            compile::Test {\n+                compiler: Compiler { host: a, stage: 0 },\n+                target: a,\n+            },\n+            compile::Test {\n+                compiler: Compiler { host: a, stage: 1 },\n+                target: a,\n+            },\n+            compile::Test {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: a,\n+            },\n+            compile::Test {\n+                compiler: Compiler { host: b, stage: 2 },\n+                target: a,\n+            },\n+            compile::Test {\n+                compiler: Compiler { host: a, stage: 0 },\n+                target: b,\n+            },\n+            compile::Test {\n+                compiler: Compiler { host: a, stage: 1 },\n+                target: b,\n+            },\n+            compile::Test {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: b,\n+            },\n+            compile::Test {\n+                compiler: Compiler { host: b, stage: 2 },\n+                target: b,\n+            },\n+            compile::Test {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: c,\n+            },\n+            compile::Test {\n+                compiler: Compiler { host: b, stage: 2 },\n+                target: c,\n+            },\n+        ]);\n+    }\n+\n+    #[test]\n+    fn build_with_target_flag() {\n+        let mut config = configure(&[\"B\"], &[\"C\"]);\n+        config.run_host_only = false;\n+        let build = Build::new(config);\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n+\n+        let a = INTERNER.intern_str(\"A\");\n+        let b = INTERNER.intern_str(\"B\");\n+        let c = INTERNER.intern_str(\"C\");\n+\n+        assert!(!builder.cache.all::<compile::Std>().is_empty());\n+        assert_eq!(first(builder.cache.all::<compile::Assemble>()), &[\n+            compile::Assemble {\n+                target_compiler: Compiler { host: a, stage: 0 },\n+            },\n+            compile::Assemble {\n+                target_compiler: Compiler { host: a, stage: 1 },\n+            },\n+            compile::Assemble {\n+                target_compiler: Compiler { host: b, stage: 1 },\n+            },\n+            compile::Assemble {\n+                target_compiler: Compiler { host: a, stage: 2 },\n+            },\n+            compile::Assemble {\n+                target_compiler: Compiler { host: b, stage: 2 },\n+            },\n+        ]);\n+        assert_eq!(first(builder.cache.all::<compile::Rustc>()), &[\n+            compile::Rustc {\n+                compiler: Compiler { host: a, stage: 0 },\n+                target: a,\n+            },\n+            compile::Rustc {\n+                compiler: Compiler { host: a, stage: 1 },\n+                target: a,\n+            },\n+            compile::Rustc {\n+                compiler: Compiler { host: a, stage: 0 },\n+                target: b,\n+            },\n+            compile::Rustc {\n+                compiler: Compiler { host: a, stage: 1 },\n+                target: b,\n+            },\n+        ]);\n+\n+        assert_eq!(first(builder.cache.all::<compile::Test>()), &[\n+            compile::Test {\n+                compiler: Compiler { host: a, stage: 0 },\n+                target: a,\n+            },\n+            compile::Test {\n+                compiler: Compiler { host: a, stage: 1 },\n+                target: a,\n+            },\n+            compile::Test {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: a,\n+            },\n+            compile::Test {\n+                compiler: Compiler { host: b, stage: 2 },\n+                target: a,\n+            },\n+            compile::Test {\n+                compiler: Compiler { host: a, stage: 0 },\n+                target: b,\n+            },\n+            compile::Test {\n+                compiler: Compiler { host: a, stage: 1 },\n+                target: b,\n+            },\n+            compile::Test {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: b,\n+            },\n+            compile::Test {\n+                compiler: Compiler { host: b, stage: 2 },\n+                target: b,\n+            },\n+            compile::Test {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: c,\n+            },\n+            compile::Test {\n+                compiler: Compiler { host: b, stage: 2 },\n+                target: c,\n+            },\n+        ]);\n+    }\n+}"}, {"sha": "d81c6bc28e52705f06c463ad55b0b137eb7fa2e6", "filename": "src/bootstrap/cache.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42fde21c27c67ce3c665e344b602cfd1d22842cc/src%2Fbootstrap%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fde21c27c67ce3c665e344b602cfd1d22842cc/src%2Fbootstrap%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcache.rs?ref=42fde21c27c67ce3c665e344b602cfd1d22842cc", "patch": "@@ -278,4 +278,16 @@ impl Cache {\n                         .expect(\"invalid type mapped\");\n         stepcache.get(step).cloned()\n     }\n+\n+    #[cfg(test)]\n+    pub fn all<S: Ord + Copy + Step>(&mut self) -> Vec<(S, S::Output)> {\n+        let cache = self.0.get_mut();\n+        let type_id = TypeId::of::<S>();\n+        let mut v = cache.remove(&type_id)\n+            .map(|b| b.downcast::<HashMap<S, S::Output>>().expect(\"correct type\"))\n+            .map(|m| m.into_iter().collect::<Vec<_>>())\n+            .unwrap_or_default();\n+        v.sort_by_key(|&(a, _)| a);\n+        v\n+    }\n }"}, {"sha": "b7c8150a7dab97c6ae2e3918db82013ba576a445", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42fde21c27c67ce3c665e344b602cfd1d22842cc/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fde21c27c67ce3c665e344b602cfd1d22842cc/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=42fde21c27c67ce3c665e344b602cfd1d22842cc", "patch": "@@ -132,6 +132,10 @@ extern crate num_cpus;\n extern crate toml;\n extern crate time;\n \n+#[cfg(test)]\n+#[macro_use]\n+extern crate pretty_assertions;\n+\n #[cfg(unix)]\n extern crate libc;\n "}, {"sha": "0b70a50f67d57568b2810924fa64879c63e57523", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42fde21c27c67ce3c665e344b602cfd1d22842cc/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fde21c27c67ce3c665e344b602cfd1d22842cc/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=42fde21c27c67ce3c665e344b602cfd1d22842cc", "patch": "@@ -1692,6 +1692,7 @@ impl Step for Bootstrap {\n         let mut cmd = Command::new(&build.initial_cargo);\n         cmd.arg(\"test\")\n            .current_dir(build.src.join(\"src/bootstrap\"))\n+           .env(\"RUSTFLAGS\", \"-Cdebuginfo=2\")\n            .env(\"CARGO_TARGET_DIR\", build.out.join(\"bootstrap\"))\n            .env(\"RUSTC_BOOTSTRAP\", \"1\")\n            .env(\"RUSTC\", &build.initial_rustc);"}]}