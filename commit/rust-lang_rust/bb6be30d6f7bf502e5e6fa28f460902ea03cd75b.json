{"sha": "bb6be30d6f7bf502e5e6fa28f460902ea03cd75b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNmJlMzBkNmY3YmY1MDJlNWU2ZmEyOGY0NjA5MDJlYTAzY2Q3NWI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-31T22:06:00Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-09-01T01:33:55Z"}, "message": "Remove some SIMD codepaths from trans.", "tree": {"sha": "be76c1e9a8b309ea4721540e26db33f72154bbae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be76c1e9a8b309ea4721540e26db33f72154bbae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb6be30d6f7bf502e5e6fa28f460902ea03cd75b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6be30d6f7bf502e5e6fa28f460902ea03cd75b", "html_url": "https://github.com/rust-lang/rust/commit/bb6be30d6f7bf502e5e6fa28f460902ea03cd75b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb6be30d6f7bf502e5e6fa28f460902ea03cd75b/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d3e8379c8314ac523197997dd573cfcbaa0a631", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d3e8379c8314ac523197997dd573cfcbaa0a631", "html_url": "https://github.com/rust-lang/rust/commit/2d3e8379c8314ac523197997dd573cfcbaa0a631"}], "stats": {"total": 52, "additions": 9, "deletions": 43}, "files": [{"sha": "87a73c4d0a26771c06577605a502067deadfb120", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bb6be30d6f7bf502e5e6fa28f460902ea03cd75b/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6be30d6f7bf502e5e6fa28f460902ea03cd75b/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=bb6be30d6f7bf502e5e6fa28f460902ea03cd75b", "patch": "@@ -501,14 +501,9 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             debug!(\"const_expr_unadjusted: te1={}, ty={:?}\",\n                    cx.tn().val_to_string(te1),\n                    ty);\n-            let is_simd = ty.is_simd();\n-            let intype = if is_simd {\n-                ty.simd_type(cx.tcx())\n-            } else {\n-                ty\n-            };\n-            let is_float = intype.is_fp();\n-            let signed = intype.is_signed();\n+            assert!(!ty.is_simd());\n+            let is_float = ty.is_fp();\n+            let signed = ty.is_signed();\n \n             let (te2, _) = const_expr(cx, &**e2, param_substs, fn_args);\n \n@@ -552,14 +547,7 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                         ConstFCmp(cmp, te1, te2)\n                     } else {\n                         let cmp = base::bin_op_to_icmp_predicate(cx, b.node, signed);\n-                        let bool_val = ConstICmp(cmp, te1, te2);\n-                        if is_simd {\n-                            // LLVM outputs an `< size x i1 >`, so we need to perform\n-                            // a sign extension to get the correctly sized type.\n-                            llvm::LLVMConstIntCast(bool_val, val_ty(te1).to_ref(), True)\n-                        } else {\n-                            bool_val\n-                        }\n+                        ConstICmp(cmp, te1, te2)\n                     }\n                 },\n             } } // unsafe { match b.node {"}, {"sha": "b4472881389ba726040af1a22fbec5c2c3e22cbd", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bb6be30d6f7bf502e5e6fa28f460902ea03cd75b/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6be30d6f7bf502e5e6fa28f460902ea03cd75b/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=bb6be30d6f7bf502e5e6fa28f460902ea03cd75b", "patch": "@@ -1693,14 +1693,9 @@ fn trans_eager_binop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let _icx = push_ctxt(\"trans_eager_binop\");\n \n     let tcx = bcx.tcx();\n-    let is_simd = lhs_t.is_simd();\n-    let intype = if is_simd {\n-        lhs_t.simd_type(tcx)\n-    } else {\n-        lhs_t\n-    };\n-    let is_float = intype.is_fp();\n-    let is_signed = intype.is_signed();\n+    assert!(!lhs_t.is_simd());\n+    let is_float = lhs_t.is_fp();\n+    let is_signed = lhs_t.is_signed();\n     let info = expr_info(binop_expr);\n \n     let binop_debug_loc = binop_expr.debug_loc();\n@@ -1710,8 +1705,6 @@ fn trans_eager_binop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n       ast::BiAdd => {\n         if is_float {\n             FAdd(bcx, lhs, rhs, binop_debug_loc)\n-        } else if is_simd {\n-            Add(bcx, lhs, rhs, binop_debug_loc)\n         } else {\n             let (newbcx, res) = with_overflow_check(\n                 bcx, OverflowOp::Add, info, lhs_t, lhs, rhs, binop_debug_loc);\n@@ -1722,8 +1715,6 @@ fn trans_eager_binop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n       ast::BiSub => {\n         if is_float {\n             FSub(bcx, lhs, rhs, binop_debug_loc)\n-        } else if is_simd {\n-            Sub(bcx, lhs, rhs, binop_debug_loc)\n         } else {\n             let (newbcx, res) = with_overflow_check(\n                 bcx, OverflowOp::Sub, info, lhs_t, lhs, rhs, binop_debug_loc);\n@@ -1734,8 +1725,6 @@ fn trans_eager_binop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n       ast::BiMul => {\n         if is_float {\n             FMul(bcx, lhs, rhs, binop_debug_loc)\n-        } else if is_simd {\n-            Mul(bcx, lhs, rhs, binop_debug_loc)\n         } else {\n             let (newbcx, res) = with_overflow_check(\n                 bcx, OverflowOp::Mul, info, lhs_t, lhs, rhs, binop_debug_loc);\n@@ -1828,11 +1817,7 @@ fn trans_eager_binop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n           res\n       }\n       ast::BiEq | ast::BiNe | ast::BiLt | ast::BiGe | ast::BiLe | ast::BiGt => {\n-        if is_simd {\n-            base::compare_simd_types(bcx, lhs, rhs, intype, val_ty(lhs), op.node, binop_debug_loc)\n-        } else {\n-            base::compare_scalar_types(bcx, lhs, rhs, intype, op.node, binop_debug_loc)\n-        }\n+          base::compare_scalar_types(bcx, lhs, rhs, lhs_t, op.node, binop_debug_loc)\n       }\n       _ => {\n         bcx.tcx().sess.span_bug(binop_expr.span, \"unexpected binop\");\n@@ -2533,14 +2518,7 @@ fn build_unchecked_rshift<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let rhs = base::cast_shift_expr_rhs(bcx, ast::BinOp_::BiShr, lhs, rhs);\n     // #1877, #10183: Ensure that input is always valid\n     let rhs = shift_mask_rhs(bcx, rhs, binop_debug_loc);\n-    let tcx = bcx.tcx();\n-    let is_simd = lhs_t.is_simd();\n-    let intype = if is_simd {\n-        lhs_t.simd_type(tcx)\n-    } else {\n-        lhs_t\n-    };\n-    let is_signed = intype.is_signed();\n+    let is_signed = lhs_t.is_signed();\n     if is_signed {\n         AShr(bcx, lhs, rhs, binop_debug_loc)\n     } else {"}]}