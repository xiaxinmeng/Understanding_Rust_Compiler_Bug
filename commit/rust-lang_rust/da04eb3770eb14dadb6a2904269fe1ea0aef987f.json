{"sha": "da04eb3770eb14dadb6a2904269fe1ea0aef987f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMDRlYjM3NzBlYjE0ZGFkYjZhMjkwNDI2OWZlMWVhMGFlZjk4N2Y=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-15T12:01:27Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-15T12:01:27Z"}, "message": "Merge #837\n\n837: Generalize vfs.rs test to address fsevents timing-dependent behavior. r=matklad a=pnkfelix\n\nGeneralize `tests/vfs.rs` processing to address wildly-varying timing-dependent behavior from fsevents (i.e. on Mac OS X).\r\n\r\nFix #734 \n\nCo-authored-by: Felix S. Klock II <pnkfelix@pnkfx.org>", "tree": {"sha": "18bc8021e9bed334a92503c1a51ce4ce15fe5f32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18bc8021e9bed334a92503c1a51ce4ce15fe5f32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da04eb3770eb14dadb6a2904269fe1ea0aef987f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da04eb3770eb14dadb6a2904269fe1ea0aef987f", "html_url": "https://github.com/rust-lang/rust/commit/da04eb3770eb14dadb6a2904269fe1ea0aef987f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da04eb3770eb14dadb6a2904269fe1ea0aef987f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "17370463e2bc23f7a654f95f589cf6de767f9fb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/17370463e2bc23f7a654f95f589cf6de767f9fb8", "html_url": "https://github.com/rust-lang/rust/commit/17370463e2bc23f7a654f95f589cf6de767f9fb8"}, {"sha": "f7e711b77fc4d7163c736d102783d1b407d9f705", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7e711b77fc4d7163c736d102783d1b407d9f705", "html_url": "https://github.com/rust-lang/rust/commit/f7e711b77fc4d7163c736d102783d1b407d9f705"}], "stats": {"total": 76, "additions": 67, "deletions": 9}, "files": [{"sha": "2ae7bb40b7d9826c4200926103d98673b4820884", "filename": "crates/ra_vfs/tests/vfs.rs", "status": "modified", "additions": 67, "deletions": 9, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/da04eb3770eb14dadb6a2904269fe1ea0aef987f/crates%2Fra_vfs%2Ftests%2Fvfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da04eb3770eb14dadb6a2904269fe1ea0aef987f/crates%2Fra_vfs%2Ftests%2Fvfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Ftests%2Fvfs.rs?ref=da04eb3770eb14dadb6a2904269fe1ea0aef987f", "patch": "@@ -5,12 +5,27 @@ use crossbeam_channel::RecvTimeoutError;\n use ra_vfs::{Vfs, VfsChange};\n use tempfile::tempdir;\n \n+/// Processes exactly `num_tasks` events waiting in the `vfs` message queue.\n+///\n+/// Panics if there are not exactly that many tasks enqueued for processing.\n fn process_tasks(vfs: &mut Vfs, num_tasks: u32) {\n-    for _ in 0..num_tasks {\n-        let task = vfs.task_receiver().recv_timeout(Duration::from_secs(3)).unwrap();\n+    process_tasks_in_range(vfs, num_tasks, num_tasks);\n+}\n+\n+/// Processes up to `max_count` events waiting in the `vfs` message queue.\n+///\n+/// Panics if it cannot process at least `min_count` events.\n+/// Panics if more than `max_count` events are enqueued for processing.\n+fn process_tasks_in_range(vfs: &mut Vfs, min_count: u32, max_count: u32) {\n+    for i in 0..max_count {\n+        let task = match vfs.task_receiver().recv_timeout(Duration::from_secs(3)) {\n+            Err(RecvTimeoutError::Timeout) if i >= min_count => return,\n+            otherwise => otherwise.unwrap(),\n+        };\n         log::debug!(\"{:?}\", task);\n         vfs.handle_task(task);\n     }\n+    assert!(vfs.task_receiver().is_empty());\n }\n \n macro_rules! assert_match {\n@@ -67,6 +82,28 @@ fn test_vfs_works() -> std::io::Result<()> {\n         assert_eq!(files, expected_files);\n     }\n \n+    // rust-analyzer#734: fsevents has a bunch of events still sitting around.\n+    process_tasks_in_range(&mut vfs, 0, 7);\n+    match vfs.commit_changes().as_slice() {\n+        [] => {}\n+\n+        // This arises on fsevents (unless we wait 30 seconds before\n+        // calling `Vfs::new` above). We need to churn through these\n+        // events so that we can focus on the event that arises from\n+        // the `fs::write` below.\n+        [VfsChange::ChangeFile { .. }, // hello\n+         VfsChange::ChangeFile { .. }, // world\n+         VfsChange::AddFile { .. }, // b/baz.rs, nested hello\n+         VfsChange::ChangeFile { .. }, // hello\n+         VfsChange::ChangeFile { .. }, // world\n+         VfsChange::ChangeFile { .. }, // nested hello\n+         VfsChange::ChangeFile { .. }, // nested hello\n+        ] => {}\n+\n+        changes => panic!(\"Expected events for setting up initial files, got: {GOT:?}\",\n+                          GOT=changes),\n+    }\n+\n     fs::write(&dir.path().join(\"a/b/baz.rs\"), \"quux\").unwrap();\n     process_tasks(&mut vfs, 1);\n     assert_match!(\n@@ -118,18 +155,39 @@ fn test_vfs_works() -> std::io::Result<()> {\n \n     fs::rename(&dir.path().join(\"a/sub1/sub2/new.rs\"), &dir.path().join(\"a/sub1/sub2/new1.rs\"))\n         .unwrap();\n-    // NOTE: Windows generates extra `Write` events when renaming?\n-    // meaning we have extra tasks to process\n-    process_tasks(&mut vfs, if cfg!(windows) { 4 } else { 2 });\n-    assert_match!(\n-        vfs.commit_changes().as_slice(),\n-        [VfsChange::RemoveFile { path: removed_path, .. }, VfsChange::AddFile { text, path: added_path, .. }],\n+\n+    // rust-analyzer#734: For testing purposes, work-around\n+    // passcod/notify#181 by processing either 1 or 2 events. (In\n+    // particular, Mac can hand back either 1 or 2 events in a\n+    // timing-dependent fashion.)\n+    //\n+    // rust-analyzer#827: Windows generates extra `Write` events when\n+    // renaming? meaning we have extra tasks to process.\n+    process_tasks_in_range(&mut vfs, 1, if cfg!(windows) { 4 } else { 2 });\n+    match vfs.commit_changes().as_slice() {\n+        [VfsChange::RemoveFile { path: removed_path, .. }, VfsChange::AddFile { text, path: added_path, .. }] =>\n         {\n             assert_eq!(removed_path, \"sub1/sub2/new.rs\");\n             assert_eq!(added_path, \"sub1/sub2/new1.rs\");\n             assert_eq!(text.as_str(), \"new hello\");\n         }\n-    );\n+\n+        // Hopefully passcod/notify#181 will be addressed in some\n+        // manner that will reliably emit an event mentioning\n+        // `sub1/sub2/new.rs`. But until then, must accept that\n+        // debouncing loses information unrecoverably.\n+        [VfsChange::AddFile { text, path: added_path, .. }] => {\n+            assert_eq!(added_path, \"sub1/sub2/new1.rs\");\n+            assert_eq!(text.as_str(), \"new hello\");\n+        }\n+\n+        changes => panic!(\n+            \"Expected events for rename of {OLD} to {NEW}, got: {GOT:?}\",\n+            OLD = \"sub1/sub2/new.rs\",\n+            NEW = \"sub1/sub2/new1.rs\",\n+            GOT = changes\n+        ),\n+    }\n \n     fs::remove_file(&dir.path().join(\"a/sub1/sub2/new1.rs\")).unwrap();\n     process_tasks(&mut vfs, 1);"}]}