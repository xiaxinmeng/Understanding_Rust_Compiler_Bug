{"sha": "04070d11485463f55edcf9cd37b443ebffe320e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MDcwZDExNDg1NDYzZjU1ZWRjZjljZDM3YjQ0M2ViZmZlMzIwZTg=", "commit": {"author": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2017-09-28T14:37:37Z"}, "committer": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2017-11-03T20:27:40Z"}, "message": "Make ascii methods on u8 insta-stable\n\nThose methods will shadow the methods of `AsciiExt`, so if we don't\nmake them insta-stable, everyone will hitting stability errors. It\nis fine adding those as stable, because they are just being moved\naround [according to sfackler][1].\n\nOPEN QUESTION: this commit also stabilizes the `AsciiExt` methods\nthat were previously feature gated by the `ascii_ctype` feature.\nMaybe we don't want to stablilize those yet.\n\n[1]: https://github.com/rust-lang/rust/pull/44042#issuecomment-329939279", "tree": {"sha": "5367dd27a478b55323445808d6ce9960fc172ab0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5367dd27a478b55323445808d6ce9960fc172ab0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04070d11485463f55edcf9cd37b443ebffe320e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04070d11485463f55edcf9cd37b443ebffe320e8", "html_url": "https://github.com/rust-lang/rust/commit/04070d11485463f55edcf9cd37b443ebffe320e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04070d11485463f55edcf9cd37b443ebffe320e8/comments", "author": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3f2be4bd8790da2af8ed2b85dcea77d95a5da3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f2be4bd8790da2af8ed2b85dcea77d95a5da3e", "html_url": "https://github.com/rust-lang/rust/commit/d3f2be4bd8790da2af8ed2b85dcea77d95a5da3e"}], "stats": {"total": 64, "additions": 16, "deletions": 48}, "files": [{"sha": "9142b386fe8579d8118fd9a59663a49575b10dd6", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 16, "deletions": 48, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/04070d11485463f55edcf9cd37b443ebffe320e8/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04070d11485463f55edcf9cd37b443ebffe320e8/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=04070d11485463f55edcf9cd37b443ebffe320e8", "patch": "@@ -2264,15 +2264,13 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_methods_on_intrinsics)]\n-    ///\n     /// let ascii = 97u8;\n     /// let non_ascii = 150u8;\n     ///\n     /// assert!(ascii.is_ascii());\n     /// assert!(!non_ascii.is_ascii());\n     /// ```\n-    #[unstable(feature = \"ascii_methods_on_intrinsics\", issue = \"0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n     #[inline]\n     pub fn is_ascii(&self) -> bool {\n         *self & 128 == 0\n@@ -2288,15 +2286,13 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_methods_on_intrinsics)]\n-    ///\n     /// let lowercase_a = 97u8;\n     ///\n     /// assert_eq!(65, lowercase_a.to_ascii_uppercase());\n     /// ```\n     ///\n     /// [`make_ascii_uppercase`]: #method.make_ascii_uppercase\n-    #[unstable(feature = \"ascii_methods_on_intrinsics\", issue = \"0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> u8 {\n         ASCII_UPPERCASE_MAP[*self as usize]\n@@ -2312,15 +2308,13 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_methods_on_intrinsics)]\n-    ///\n     /// let uppercase_a = 65u8;\n     ///\n     /// assert_eq!(97, uppercase_a.to_ascii_lowercase());\n     /// ```\n     ///\n     /// [`make_ascii_lowercase`]: #method.make_ascii_lowercase\n-    #[unstable(feature = \"ascii_methods_on_intrinsics\", issue = \"0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> u8 {\n         ASCII_LOWERCASE_MAP[*self as usize]\n@@ -2334,14 +2328,12 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_methods_on_intrinsics)]\n-    ///\n     /// let lowercase_a = 97u8;\n     /// let uppercase_a = 65u8;\n     ///\n     /// assert!(lowercase_a.eq_ignore_ascii_case(uppercase_a));\n     /// ```\n-    #[unstable(feature = \"ascii_methods_on_intrinsics\", issue = \"0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n     #[inline]\n     pub fn eq_ignore_ascii_case(&self, other: u8) -> bool {\n         self.to_ascii_lowercase() == other.to_ascii_lowercase()\n@@ -2358,8 +2350,6 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_methods_on_intrinsics)]\n-    ///\n     /// let mut byte = b'a';\n     ///\n     /// byte.make_ascii_uppercase();\n@@ -2368,7 +2358,7 @@ impl u8 {\n     /// ```\n     ///\n     /// [`to_ascii_uppercase`]: #method.to_ascii_uppercase\n-    #[unstable(feature = \"ascii_methods_on_intrinsics\", issue = \"0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n     #[inline]\n     pub fn make_ascii_uppercase(&mut self) {\n         *self = self.to_ascii_uppercase();\n@@ -2385,8 +2375,6 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_methods_on_intrinsics)]\n-    ///\n     /// let mut byte = b'A';\n     ///\n     /// byte.make_ascii_lowercase();\n@@ -2395,7 +2383,7 @@ impl u8 {\n     /// ```\n     ///\n     /// [`to_ascii_lowercase`]: #method.to_ascii_lowercase\n-    #[unstable(feature = \"ascii_methods_on_intrinsics\", issue = \"0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n     #[inline]\n     pub fn make_ascii_lowercase(&mut self) {\n         *self = self.to_ascii_lowercase();\n@@ -2409,8 +2397,6 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_methods_on_intrinsics)]\n-    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -2431,7 +2417,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_alphabetic());\n     /// assert!(!esc.is_ascii_alphabetic());\n     /// ```\n-    #[unstable(feature = \"ascii_methods_on_intrinsics\", issue = \"0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n     #[inline]\n     pub fn is_ascii_alphabetic(&self) -> bool {\n         if *self >= 0x80 { return false; }\n@@ -2447,8 +2433,6 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_methods_on_intrinsics)]\n-    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -2469,7 +2453,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_uppercase());\n     /// assert!(!esc.is_ascii_uppercase());\n     /// ```\n-    #[unstable(feature = \"ascii_methods_on_intrinsics\", issue = \"0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n     #[inline]\n     pub fn is_ascii_uppercase(&self) -> bool {\n         if *self >= 0x80 { return false }\n@@ -2485,8 +2469,6 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_methods_on_intrinsics)]\n-    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -2507,7 +2489,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_lowercase());\n     /// assert!(!esc.is_ascii_lowercase());\n     /// ```\n-    #[unstable(feature = \"ascii_methods_on_intrinsics\", issue = \"0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n     #[inline]\n     pub fn is_ascii_lowercase(&self) -> bool {\n         if *self >= 0x80 { return false }\n@@ -2525,8 +2507,6 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_methods_on_intrinsics)]\n-    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -2547,7 +2527,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_alphanumeric());\n     /// assert!(!esc.is_ascii_alphanumeric());\n     /// ```\n-    #[unstable(feature = \"ascii_methods_on_intrinsics\", issue = \"0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n     #[inline]\n     pub fn is_ascii_alphanumeric(&self) -> bool {\n         if *self >= 0x80 { return false }\n@@ -2563,8 +2543,6 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_methods_on_intrinsics)]\n-    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -2585,7 +2563,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_digit());\n     /// assert!(!esc.is_ascii_digit());\n     /// ```\n-    #[unstable(feature = \"ascii_methods_on_intrinsics\", issue = \"0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n     #[inline]\n     pub fn is_ascii_digit(&self) -> bool {\n         if *self >= 0x80 { return false }\n@@ -2603,8 +2581,6 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_methods_on_intrinsics)]\n-    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -2625,7 +2601,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_hexdigit());\n     /// assert!(!esc.is_ascii_hexdigit());\n     /// ```\n-    #[unstable(feature = \"ascii_methods_on_intrinsics\", issue = \"0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n     #[inline]\n     pub fn is_ascii_hexdigit(&self) -> bool {\n         if *self >= 0x80 { return false }\n@@ -2645,8 +2621,6 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_methods_on_intrinsics)]\n-    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -2667,7 +2641,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_punctuation());\n     /// assert!(!esc.is_ascii_punctuation());\n     /// ```\n-    #[unstable(feature = \"ascii_methods_on_intrinsics\", issue = \"0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n     #[inline]\n     pub fn is_ascii_punctuation(&self) -> bool {\n         if *self >= 0x80 { return false }\n@@ -2683,8 +2657,6 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_methods_on_intrinsics)]\n-    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -2705,7 +2677,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_graphic());\n     /// assert!(!esc.is_ascii_graphic());\n     /// ```\n-    #[unstable(feature = \"ascii_methods_on_intrinsics\", issue = \"0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n     #[inline]\n     pub fn is_ascii_graphic(&self) -> bool {\n         if *self >= 0x80 { return false; }\n@@ -2738,8 +2710,6 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_methods_on_intrinsics)]\n-    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -2760,7 +2730,7 @@ impl u8 {\n     /// assert!(lf.is_ascii_whitespace());\n     /// assert!(!esc.is_ascii_whitespace());\n     /// ```\n-    #[unstable(feature = \"ascii_methods_on_intrinsics\", issue = \"0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n     #[inline]\n     pub fn is_ascii_whitespace(&self) -> bool {\n         if *self >= 0x80 { return false; }\n@@ -2778,8 +2748,6 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_methods_on_intrinsics)]\n-    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -2800,7 +2768,7 @@ impl u8 {\n     /// assert!(lf.is_ascii_control());\n     /// assert!(esc.is_ascii_control());\n     /// ```\n-    #[unstable(feature = \"ascii_methods_on_intrinsics\", issue = \"0\")]\n+    #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.21.0\")]\n     #[inline]\n     pub fn is_ascii_control(&self) -> bool {\n         if *self >= 0x80 { return false; }"}]}