{"sha": "0f8eb81011dcc2f235e74a4f0b7c2d80c1b0b4ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmOGViODEwMTFkY2MyZjIzNWU3NGE0ZjBiN2MyZDgwYzFiMGI0YWI=", "commit": {"author": {"name": "Florian Gilcher", "email": "florian.gilcher@asquera.de", "date": "2016-08-29T18:05:47Z"}, "committer": {"name": "Florian Gilcher", "email": "florian.gilcher@asquera.de", "date": "2016-09-01T17:16:19Z"}, "message": "Document try!'s error conversion behaviour", "tree": {"sha": "fdd342d71ab65db1e8ced8ad19a679c31d978c41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdd342d71ab65db1e8ced8ad19a679c31d978c41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f8eb81011dcc2f235e74a4f0b7c2d80c1b0b4ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f8eb81011dcc2f235e74a4f0b7c2d80c1b0b4ab", "html_url": "https://github.com/rust-lang/rust/commit/0f8eb81011dcc2f235e74a4f0b7c2d80c1b0b4ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f8eb81011dcc2f235e74a4f0b7c2d80c1b0b4ab/comments", "author": {"login": "skade", "id": 47542, "node_id": "MDQ6VXNlcjQ3NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/47542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skade", "html_url": "https://github.com/skade", "followers_url": "https://api.github.com/users/skade/followers", "following_url": "https://api.github.com/users/skade/following{/other_user}", "gists_url": "https://api.github.com/users/skade/gists{/gist_id}", "starred_url": "https://api.github.com/users/skade/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skade/subscriptions", "organizations_url": "https://api.github.com/users/skade/orgs", "repos_url": "https://api.github.com/users/skade/repos", "events_url": "https://api.github.com/users/skade/events{/privacy}", "received_events_url": "https://api.github.com/users/skade/received_events", "type": "User", "site_admin": false}, "committer": {"login": "skade", "id": 47542, "node_id": "MDQ6VXNlcjQ3NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/47542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skade", "html_url": "https://github.com/skade", "followers_url": "https://api.github.com/users/skade/followers", "following_url": "https://api.github.com/users/skade/following{/other_user}", "gists_url": "https://api.github.com/users/skade/gists{/gist_id}", "starred_url": "https://api.github.com/users/skade/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skade/subscriptions", "organizations_url": "https://api.github.com/users/skade/orgs", "repos_url": "https://api.github.com/users/skade/repos", "events_url": "https://api.github.com/users/skade/events{/privacy}", "received_events_url": "https://api.github.com/users/skade/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86dde9bbda92c02c61282b5df5d38338a798ef3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/86dde9bbda92c02c61282b5df5d38338a798ef3b", "html_url": "https://github.com/rust-lang/rust/commit/86dde9bbda92c02c61282b5df5d38338a798ef3b"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "f29a49dd5fe1ac236209d833849ad88c12746e29", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0f8eb81011dcc2f235e74a4f0b7c2d80c1b0b4ab/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8eb81011dcc2f235e74a4f0b7c2d80c1b0b4ab/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=0f8eb81011dcc2f235e74a4f0b7c2d80c1b0b4ab", "patch": "@@ -189,10 +189,19 @@ macro_rules! debug_assert_eq {\n     ($($arg:tt)*) => (if cfg!(debug_assertions) { assert_eq!($($arg)*); })\n }\n \n-/// Helper macro for unwrapping `Result` values while returning early with an\n-/// error if the value of the expression is `Err`. Can only be used in\n-/// functions that return `Result` because of the early return of `Err` that\n-/// it provides.\n+/// Helper macro for reducing boilerplate code for matching `Result` together\n+/// with converting downstream errors.\n+///\n+/// `try!` matches the given `Result`. In case of the `Ok` variant, the\n+/// expression has the value of the wrapped value.\n+///\n+/// In case of the `Err` variant, it retrieves the inner error. `try!` then\n+/// performs conversion using `From`. This provides automatic conversion\n+/// between specialized errors and more general ones. The resulting\n+/// error is then immediately returned.\n+///\n+/// Because of the early return, `try!` can only be used in functions that\n+/// return `Result`.\n ///\n /// # Examples\n ///\n@@ -201,18 +210,28 @@ macro_rules! debug_assert_eq {\n /// use std::fs::File;\n /// use std::io::prelude::*;\n ///\n-/// fn write_to_file_using_try() -> Result<(), io::Error> {\n+/// enum MyError {\n+///     FileWriteError\n+/// }\n+///\n+/// impl From<io::Error> for MyError {\n+///     fn from(e: io::Error) -> MyError {\n+///         MyError::FileWriteError\n+///     }\n+/// }\n+///\n+/// fn write_to_file_using_try() -> Result<(), MyError> {\n ///     let mut file = try!(File::create(\"my_best_friends.txt\"));\n ///     try!(file.write_all(b\"This is a list of my best friends.\"));\n ///     println!(\"I wrote to the file\");\n ///     Ok(())\n /// }\n /// // This is equivalent to:\n-/// fn write_to_file_using_match() -> Result<(), io::Error> {\n+/// fn write_to_file_using_match() -> Result<(), MyError> {\n ///     let mut file = try!(File::create(\"my_best_friends.txt\"));\n ///     match file.write_all(b\"This is a list of my best friends.\") {\n ///         Ok(v) => v,\n-///         Err(e) => return Err(e),\n+///         Err(e) => return Err(From::from(e)),\n ///     }\n ///     println!(\"I wrote to the file\");\n ///     Ok(())"}]}