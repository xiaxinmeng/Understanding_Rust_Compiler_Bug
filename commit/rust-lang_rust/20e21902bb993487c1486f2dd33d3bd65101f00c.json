{"sha": "20e21902bb993487c1486f2dd33d3bd65101f00c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZTIxOTAyYmI5OTM0ODdjMTQ4NmYyZGQzM2QzYmQ2NTEwMWYwMGM=", "commit": {"author": {"name": "Russell Cohen", "email": "russell.r.cohen@gmail.com", "date": "2020-03-30T16:39:40Z"}, "committer": {"name": "Russell Cohen", "email": "russell.r.cohen@gmail.com", "date": "2020-03-30T16:39:40Z"}, "message": "Clean up redudant conditions and match exprs", "tree": {"sha": "f22a0ae75da69ebbfc4d466cf933b9f735722624", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f22a0ae75da69ebbfc4d466cf933b9f735722624"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20e21902bb993487c1486f2dd33d3bd65101f00c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20e21902bb993487c1486f2dd33d3bd65101f00c", "html_url": "https://github.com/rust-lang/rust/commit/20e21902bb993487c1486f2dd33d3bd65101f00c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20e21902bb993487c1486f2dd33d3bd65101f00c/comments", "author": {"login": "rcoh", "id": 492903, "node_id": "MDQ6VXNlcjQ5MjkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/492903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcoh", "html_url": "https://github.com/rcoh", "followers_url": "https://api.github.com/users/rcoh/followers", "following_url": "https://api.github.com/users/rcoh/following{/other_user}", "gists_url": "https://api.github.com/users/rcoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcoh/subscriptions", "organizations_url": "https://api.github.com/users/rcoh/orgs", "repos_url": "https://api.github.com/users/rcoh/repos", "events_url": "https://api.github.com/users/rcoh/events{/privacy}", "received_events_url": "https://api.github.com/users/rcoh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rcoh", "id": 492903, "node_id": "MDQ6VXNlcjQ5MjkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/492903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcoh", "html_url": "https://github.com/rcoh", "followers_url": "https://api.github.com/users/rcoh/followers", "following_url": "https://api.github.com/users/rcoh/following{/other_user}", "gists_url": "https://api.github.com/users/rcoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcoh/subscriptions", "organizations_url": "https://api.github.com/users/rcoh/orgs", "repos_url": "https://api.github.com/users/rcoh/repos", "events_url": "https://api.github.com/users/rcoh/events{/privacy}", "received_events_url": "https://api.github.com/users/rcoh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bceab25d6c206a7b92716e0c9e9a89b97d131e8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bceab25d6c206a7b92716e0c9e9a89b97d131e8e", "html_url": "https://github.com/rust-lang/rust/commit/bceab25d6c206a7b92716e0c9e9a89b97d131e8e"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "fcb7475cc2e89890d16bc92bce45a5a1af21ec53", "filename": "src/librustc_lexer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20e21902bb993487c1486f2dd33d3bd65101f00c/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20e21902bb993487c1486f2dd33d3bd65101f00c/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Flib.rs?ref=20e21902bb993487c1486f2dd33d3bd65101f00c", "patch": "@@ -731,7 +731,7 @@ impl Cursor<'_> {\n                     n_end_hashes,\n                     possible_terminator_offset: None,\n                 };\n-            } else if n_end_hashes > 0 && n_end_hashes > max_hashes {\n+            } else if n_end_hashes > max_hashes {\n                 // Keep track of possible terminators to give a hint about where there might be\n                 // a missing terminator\n                 possible_terminator_offset ="}, {"sha": "12b9b682682485038b7482c6abee3c4a568ba3f3", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/20e21902bb993487c1486f2dd33d3bd65101f00c/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20e21902bb993487c1486f2dd33d3bd65101f00c/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=20e21902bb993487c1486f2dd33d3bd65101f00c", "patch": "@@ -287,15 +287,14 @@ impl<'a> Parser<'a> {\n     }\n \n     fn check_too_many_raw_str_terminators(&mut self, err: &mut DiagnosticBuilder<'_>) -> bool {\n-        let prev_token_raw_str = match self.prev_token.kind {\n-            TokenKind::Literal(Lit {\n-                kind: LitKind::StrRaw(n) | LitKind::ByteStrRaw(n), ..\n-            }) => Some(n),\n-            _ => None,\n-        };\n-\n-        if let Some(n_hashes) = prev_token_raw_str {\n-            if self.token.kind == TokenKind::Pound {\n+        match (&self.prev_token.kind, &self.token.kind) {\n+            (\n+                TokenKind::Literal(Lit {\n+                    kind: LitKind::StrRaw(n_hashes) | LitKind::ByteStrRaw(n_hashes),\n+                    ..\n+                }),\n+                TokenKind::Pound,\n+            ) => {\n                 err.set_primary_message(\"too many `#` when terminating raw string\");\n                 err.span_suggestion(\n                     self.token.span,\n@@ -304,10 +303,10 @@ impl<'a> Parser<'a> {\n                     Applicability::MachineApplicable,\n                 );\n                 err.note(&format!(\"the raw string started with {} `#`s\", n_hashes));\n-                return true;\n+                true\n             }\n+            _ => false,\n         }\n-        false\n     }\n \n     pub fn maybe_annotate_with_ascription("}]}