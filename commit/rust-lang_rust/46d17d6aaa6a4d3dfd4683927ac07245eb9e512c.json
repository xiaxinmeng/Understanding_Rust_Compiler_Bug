{"sha": "46d17d6aaa6a4d3dfd4683927ac07245eb9e512c", "node_id": "C_kwDOAAsO6NoAKDQ2ZDE3ZDZhYWE2YTRkM2RmZDQ2ODM5MjdhYzA3MjQ1ZWI5ZTUxMmM", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-05T10:08:32Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-05T10:08:32Z"}, "message": "remove Clean trait implementation for hir::TraitItem", "tree": {"sha": "4c0c1ce8dbadcff0d2305be47939dc1a95ded0c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c0c1ce8dbadcff0d2305be47939dc1a95ded0c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46d17d6aaa6a4d3dfd4683927ac07245eb9e512c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46d17d6aaa6a4d3dfd4683927ac07245eb9e512c", "html_url": "https://github.com/rust-lang/rust/commit/46d17d6aaa6a4d3dfd4683927ac07245eb9e512c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46d17d6aaa6a4d3dfd4683927ac07245eb9e512c/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38083acde207d4c112554afa4bdd1d7dad81165a", "url": "https://api.github.com/repos/rust-lang/rust/commits/38083acde207d4c112554afa4bdd1d7dad81165a", "html_url": "https://github.com/rust-lang/rust/commit/38083acde207d4c112554afa4bdd1d7dad81165a"}], "stats": {"total": 102, "additions": 51, "deletions": 51}, "files": [{"sha": "312a593761bfe796c3c22ef819c9a342811916a1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/46d17d6aaa6a4d3dfd4683927ac07245eb9e512c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d17d6aaa6a4d3dfd4683927ac07245eb9e512c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=46d17d6aaa6a4d3dfd4683927ac07245eb9e512c", "patch": "@@ -1016,55 +1016,53 @@ fn clean_poly_trait_ref<'tcx>(\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Item> for hir::TraitItem<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Item {\n-        let local_did = self.def_id.to_def_id();\n-        cx.with_param_env(local_did, |cx| {\n-            let inner = match self.kind {\n-                hir::TraitItemKind::Const(ty, Some(default)) => AssocConstItem(\n-                    clean_ty(ty, cx),\n-                    ConstantKind::Local { def_id: local_did, body: default },\n-                ),\n-                hir::TraitItemKind::Const(ty, None) => TyAssocConstItem(clean_ty(ty, cx)),\n-                hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(body)) => {\n-                    let m = clean_function(cx, sig, self.generics, body);\n-                    MethodItem(m, None)\n-                }\n-                hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Required(names)) => {\n-                    let (generics, decl) = enter_impl_trait(cx, |cx| {\n-                        // NOTE: generics must be cleaned before args\n-                        let generics = self.generics.clean(cx);\n-                        let args = clean_args_from_types_and_names(cx, sig.decl.inputs, names);\n-                        let decl = clean_fn_decl_with_args(cx, sig.decl, args);\n-                        (generics, decl)\n-                    });\n-                    TyMethodItem(Box::new(Function { decl, generics }))\n-                }\n-                hir::TraitItemKind::Type(bounds, Some(default)) => {\n-                    let generics = enter_impl_trait(cx, |cx| self.generics.clean(cx));\n-                    let bounds = bounds.iter().filter_map(|x| x.clean(cx)).collect();\n-                    let item_type = clean_middle_ty(hir_ty_to_ty(cx.tcx, default), cx, None);\n-                    AssocTypeItem(\n-                        Box::new(Typedef {\n-                            type_: clean_ty(default, cx),\n-                            generics,\n-                            item_type: Some(item_type),\n-                        }),\n-                        bounds,\n-                    )\n-                }\n-                hir::TraitItemKind::Type(bounds, None) => {\n-                    let generics = enter_impl_trait(cx, |cx| self.generics.clean(cx));\n-                    let bounds = bounds.iter().filter_map(|x| x.clean(cx)).collect();\n-                    TyAssocTypeItem(Box::new(generics), bounds)\n-                }\n-            };\n-            let what_rustc_thinks =\n-                Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx);\n-            // Trait items always inherit the trait's visibility -- we don't want to show `pub`.\n-            Item { visibility: Inherited, ..what_rustc_thinks }\n-        })\n-    }\n+fn clean_trait_item<'tcx>(trait_item: &hir::TraitItem<'tcx>, cx: &mut DocContext<'tcx>) -> Item {\n+    let local_did = trait_item.def_id.to_def_id();\n+    cx.with_param_env(local_did, |cx| {\n+        let inner = match trait_item.kind {\n+            hir::TraitItemKind::Const(ty, Some(default)) => AssocConstItem(\n+                clean_ty(ty, cx),\n+                ConstantKind::Local { def_id: local_did, body: default },\n+            ),\n+            hir::TraitItemKind::Const(ty, None) => TyAssocConstItem(clean_ty(ty, cx)),\n+            hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(body)) => {\n+                let m = clean_function(cx, sig, trait_item.generics, body);\n+                MethodItem(m, None)\n+            }\n+            hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Required(names)) => {\n+                let (generics, decl) = enter_impl_trait(cx, |cx| {\n+                    // NOTE: generics must be cleaned before args\n+                    let generics = trait_item.generics.clean(cx);\n+                    let args = clean_args_from_types_and_names(cx, sig.decl.inputs, names);\n+                    let decl = clean_fn_decl_with_args(cx, sig.decl, args);\n+                    (generics, decl)\n+                });\n+                TyMethodItem(Box::new(Function { decl, generics }))\n+            }\n+            hir::TraitItemKind::Type(bounds, Some(default)) => {\n+                let generics = enter_impl_trait(cx, |cx| trait_item.generics.clean(cx));\n+                let bounds = bounds.iter().filter_map(|x| x.clean(cx)).collect();\n+                let item_type = clean_middle_ty(hir_ty_to_ty(cx.tcx, default), cx, None);\n+                AssocTypeItem(\n+                    Box::new(Typedef {\n+                        type_: clean_ty(default, cx),\n+                        generics,\n+                        item_type: Some(item_type),\n+                    }),\n+                    bounds,\n+                )\n+            }\n+            hir::TraitItemKind::Type(bounds, None) => {\n+                let generics = enter_impl_trait(cx, |cx| trait_item.generics.clean(cx));\n+                let bounds = bounds.iter().filter_map(|x| x.clean(cx)).collect();\n+                TyAssocTypeItem(Box::new(generics), bounds)\n+            }\n+        };\n+        let what_rustc_thinks =\n+            Item::from_def_id_and_parts(local_did, Some(trait_item.ident.name), inner, cx);\n+        // Trait items always inherit the trait's visibility -- we don't want to show `pub`.\n+        Item { visibility: Inherited, ..what_rustc_thinks }\n+    })\n }\n \n impl<'tcx> Clean<'tcx, Item> for hir::ImplItem<'tcx> {\n@@ -1954,8 +1952,10 @@ fn clean_maybe_renamed_item<'tcx>(\n                 })\n             }\n             ItemKind::Trait(_, _, generics, bounds, item_ids) => {\n-                let items =\n-                    item_ids.iter().map(|ti| cx.tcx.hir().trait_item(ti.id).clean(cx)).collect();\n+                let items = item_ids\n+                    .iter()\n+                    .map(|ti| clean_trait_item(cx.tcx.hir().trait_item(ti.id), cx))\n+                    .collect();\n \n                 TraitItem(Trait {\n                     def_id,"}]}