{"sha": "14875fd3b7d623a21dd252ab80d6e3e6c772151d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ODc1ZmQzYjdkNjIzYTIxZGQyNTJhYjgwZDZlM2U2Yzc3MjE1MWQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-06-26T14:23:15Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-07-07T18:03:23Z"}, "message": "prevent illegal coinductive matching in trait evaluation\n\nPreviously, coinductive matching was only blocked on the fulfillment\npath, and ignored on the evaluation path.", "tree": {"sha": "feffa84675865a89b3be06194668037b108b00f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/feffa84675865a89b3be06194668037b108b00f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14875fd3b7d623a21dd252ab80d6e3e6c772151d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14875fd3b7d623a21dd252ab80d6e3e6c772151d", "html_url": "https://github.com/rust-lang/rust/commit/14875fd3b7d623a21dd252ab80d6e3e6c772151d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14875fd3b7d623a21dd252ab80d6e3e6c772151d/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "703341051d857bba054f97c38f80d10aab44521c", "url": "https://api.github.com/repos/rust-lang/rust/commits/703341051d857bba054f97c38f80d10aab44521c", "html_url": "https://github.com/rust-lang/rust/commit/703341051d857bba054f97c38f80d10aab44521c"}], "stats": {"total": 79, "additions": 41, "deletions": 38}, "files": [{"sha": "f47c336656b5a0b91620c0826eb924174c3d9a43", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/14875fd3b7d623a21dd252ab80d6e3e6c772151d/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14875fd3b7d623a21dd252ab80d6e3e6c772151d/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=14875fd3b7d623a21dd252ab80d6e3e6c772151d", "patch": "@@ -318,7 +318,7 @@ impl<'a, 'b, 'gcx, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'gcx,\n                                _marker: PhantomData<&'c PendingPredicateObligation<'tcx>>)\n         where I: Clone + Iterator<Item=&'c PendingPredicateObligation<'tcx>>,\n     {\n-        if coinductive_match(self.selcx, cycle.clone()) {\n+        if self.selcx.coinductive_match(cycle.clone().map(|s| s.obligation.predicate)) {\n             debug!(\"process_child_obligations: coinductive match\");\n         } else {\n             let cycle : Vec<_> = cycle.map(|c| c.obligation.clone()).collect();\n@@ -549,40 +549,6 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n     }\n }\n \n-/// For defaulted traits, we use a co-inductive strategy to solve, so\n-/// that recursion is ok. This routine returns true if the top of the\n-/// stack (`cycle[0]`):\n-/// - is a defaulted trait, and\n-/// - it also appears in the backtrace at some position `X`; and,\n-/// - all the predicates at positions `X..` between `X` an the top are\n-///   also defaulted traits.\n-fn coinductive_match<'a,'c,'gcx,'tcx,I>(selcx: &mut SelectionContext<'a,'gcx,'tcx>,\n-                                        cycle: I) -> bool\n-    where I: Iterator<Item=&'c PendingPredicateObligation<'tcx>>,\n-          'tcx: 'c\n-{\n-    let mut cycle = cycle;\n-    cycle\n-        .all(|bt_obligation| {\n-            let result = coinductive_obligation(selcx, &bt_obligation.obligation);\n-            debug!(\"coinductive_match: bt_obligation={:?} coinductive={}\",\n-                   bt_obligation, result);\n-            result\n-        })\n-}\n-\n-fn coinductive_obligation<'a,'gcx,'tcx>(selcx: &SelectionContext<'a,'gcx,'tcx>,\n-                                          obligation: &PredicateObligation<'tcx>)\n-                                          -> bool {\n-    match obligation.predicate {\n-        ty::Predicate::Trait(ref data) => {\n-            selcx.tcx().trait_has_default_impl(data.def_id())\n-        }\n-        _ => {\n-            false\n-        }\n-    }\n-}\n \n fn register_region_obligation<'tcx>(t_a: Ty<'tcx>,\n                                     r_b: ty::Region<'tcx>,"}, {"sha": "7b1863e8e134b491ace355f726273b92dac6521d", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/14875fd3b7d623a21dd252ab80d6e3e6c772151d/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14875fd3b7d623a21dd252ab80d6e3e6c772151d/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=14875fd3b7d623a21dd252ab80d6e3e6c772151d", "patch": "@@ -703,14 +703,24 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         // affect the inferencer state and (b) that if we see two\n         // skolemized types with the same index, they refer to the\n         // same unbound type variable.\n-        if\n+        if let Some(rec_index) =\n             stack.iter()\n             .skip(1) // skip top-most frame\n-            .any(|prev| stack.fresh_trait_ref == prev.fresh_trait_ref)\n+            .position(|prev| stack.fresh_trait_ref == prev.fresh_trait_ref)\n         {\n             debug!(\"evaluate_stack({:?}) --> recursive\",\n                    stack.fresh_trait_ref);\n-            return EvaluatedToOk;\n+            let cycle = stack.iter().skip(1).take(rec_index+1);\n+            let cycle = cycle.map(|stack| ty::Predicate::Trait(stack.obligation.predicate));\n+            if self.coinductive_match(cycle) {\n+                debug!(\"evaluate_stack({:?}) --> recursive, coinductive\",\n+                       stack.fresh_trait_ref);\n+                return EvaluatedToOk;\n+            } else {\n+                debug!(\"evaluate_stack({:?}) --> recursive, inductive\",\n+                       stack.fresh_trait_ref);\n+                return EvaluatedToErr;\n+            }\n         }\n \n         match self.candidate_from_obligation(stack) {\n@@ -720,6 +730,33 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n+    /// For defaulted traits, we use a co-inductive strategy to solve, so\n+    /// that recursion is ok. This routine returns true if the top of the\n+    /// stack (`cycle[0]`):\n+    /// - is a defaulted trait, and\n+    /// - it also appears in the backtrace at some position `X`; and,\n+    /// - all the predicates at positions `X..` between `X` an the top are\n+    ///   also defaulted traits.\n+    pub fn coinductive_match<I>(&mut self, cycle: I) -> bool\n+        where I: Iterator<Item=ty::Predicate<'tcx>>\n+    {\n+        let mut cycle = cycle;\n+        cycle.all(|predicate| self.coinductive_predicate(predicate))\n+    }\n+\n+    fn coinductive_predicate(&self, predicate: ty::Predicate<'tcx>) -> bool {\n+        let result = match predicate {\n+            ty::Predicate::Trait(ref data) => {\n+                self.tcx().trait_has_default_impl(data.def_id())\n+            }\n+            _ => {\n+                false\n+            }\n+        };\n+        debug!(\"coinductive_predicate({:?}) = {:?}\", predicate, result);\n+        result\n+    }\n+\n     /// Further evaluate `candidate` to decide whether all type parameters match and whether nested\n     /// obligations are met. Returns true if `candidate` remains viable after this further\n     /// scrutiny."}]}