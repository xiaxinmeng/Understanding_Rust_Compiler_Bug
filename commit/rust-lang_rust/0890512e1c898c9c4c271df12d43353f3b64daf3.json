{"sha": "0890512e1c898c9c4c271df12d43353f3b64daf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4OTA1MTJlMWM4OThjOWM0YzI3MWRmMTJkNDMzNTNmM2I2NGRhZjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-09T12:07:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-09T12:31:10Z"}, "message": "Include config into the manual", "tree": {"sha": "e658d5553f1f116ab738326dd76b397a938f7e57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e658d5553f1f116ab738326dd76b397a938f7e57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0890512e1c898c9c4c271df12d43353f3b64daf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0890512e1c898c9c4c271df12d43353f3b64daf3", "html_url": "https://github.com/rust-lang/rust/commit/0890512e1c898c9c4c271df12d43353f3b64daf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0890512e1c898c9c4c271df12d43353f3b64daf3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd83ded8ee89e79d6b446518c3d74f6c18f8f5d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd83ded8ee89e79d6b446518c3d74f6c18f8f5d9", "html_url": "https://github.com/rust-lang/rust/commit/cd83ded8ee89e79d6b446518c3d74f6c18f8f5d9"}], "stats": {"total": 193, "additions": 174, "deletions": 19}, "files": [{"sha": "bd41a971ba9975c300ac121c7e1928a90a0f6481", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 57, "deletions": 18, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/0890512e1c898c9c4c271df12d43353f3b64daf3/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0890512e1c898c9c4c271df12d43353f3b64daf3/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=0890512e1c898c9c4c271df12d43353f3b64daf3", "patch": "@@ -637,6 +637,17 @@ macro_rules! _config_data {\n                     },)*\n                 ])\n             }\n+\n+            #[cfg(test)]\n+            fn manual() -> String {\n+                manual(&[\n+                    $({\n+                        let field = stringify!($field);\n+                        let ty = stringify!($ty);\n+                        (field, ty, &[$($doc),*], $default)\n+                    },)*\n+                ])\n+            }\n         }\n     };\n }\n@@ -753,26 +764,54 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n     map.into()\n }\n \n-#[test]\n-fn schema_in_sync_with_package_json() {\n-    fn remove_ws(text: &str) -> String {\n-        text.replace(char::is_whitespace, \"\")\n-    }\n+#[cfg(test)]\n+fn manual(fields: &[(&'static str, &'static str, &[&str], &str)]) -> String {\n+    fields\n+        .iter()\n+        .map(|(field, _ty, doc, default)| {\n+            let name = field.replace(\"_\", \".\");\n+            let name = format!(\"rust-analyzer.{} (default: `{}`)\", name, default);\n+            format!(\"{}::\\n{}\\n\", name, doc.join(\" \"))\n+        })\n+        .collect::<String>()\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use std::fs;\n+\n+    use test_utils::project_dir;\n+\n+    use super::*;\n \n-    let s = Config::json_schema();\n-    let schema = format!(\"{:#}\", s);\n-    let schema = schema.trim_start_matches('{').trim_end_matches('}');\n+    #[test]\n+    fn schema_in_sync_with_package_json() {\n+        let s = Config::json_schema();\n+        let schema = format!(\"{:#}\", s);\n+        let schema = schema.trim_start_matches('{').trim_end_matches('}');\n \n-    let package_json = std::env::current_dir()\n-        .unwrap()\n-        .ancestors()\n-        .nth(2)\n-        .unwrap()\n-        .join(\"editors/code/package.json\");\n-    let package_json = std::fs::read_to_string(&package_json).unwrap();\n+        let package_json = project_dir().join(\"editors/code/package.json\");\n+        let package_json = fs::read_to_string(&package_json).unwrap();\n+\n+        let p = remove_ws(&package_json);\n+        let s = remove_ws(&schema);\n+\n+        assert!(p.contains(&s), \"update config in package.json. New config:\\n{:#}\", schema);\n+    }\n \n-    let p = remove_ws(&package_json);\n-    let s = remove_ws(&schema);\n+    #[test]\n+    fn schema_in_sync_with_docs() {\n+        let docs_path = project_dir().join(\"docs/user/generated_config.adoc\");\n+        let current = fs::read_to_string(&docs_path).unwrap();\n+        let expected = ConfigData::manual();\n \n-    assert!(p.contains(&s), \"update config in package.json. New config:\\n{:#}\", schema);\n+        if remove_ws(&current) != remove_ws(&expected) {\n+            fs::write(&docs_path, expected).unwrap();\n+            panic!(\"updated config manual\");\n+        }\n+    }\n+\n+    fn remove_ws(text: &str) -> String {\n+        text.replace(char::is_whitespace, \"\")\n+    }\n }"}, {"sha": "cb2ae6fc10c2262703ee3b76c7a873f4aa5c2b9a", "filename": "docs/user/generated_config.adoc", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/0890512e1c898c9c4c271df12d43353f3b64daf3/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/0890512e1c898c9c4c271df12d43353f3b64daf3/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=0890512e1c898c9c4c271df12d43353f3b64daf3", "patch": "@@ -0,0 +1,106 @@\n+rust-analyzer.assist.importMergeBehaviour (default: `\"full\"`)::\n+ The strategy to use when inserting new imports or merging imports.\n+rust-analyzer.assist.importPrefix (default: `\"plain\"`)::\n+ The path structure for newly inserted paths to use.\n+rust-analyzer.callInfo.full (default: `true`)::\n+ Show function name and docs in parameter hints.\n+rust-analyzer.cargo.autoreload (default: `true`)::\n+ Automatically refresh project info via `cargo metadata` on  Cargo.toml changes.\n+rust-analyzer.cargo.allFeatures (default: `false`)::\n+ Activate all available features.\n+rust-analyzer.cargo.features (default: `[]`)::\n+ List of features to activate.\n+rust-analyzer.cargo.loadOutDirsFromCheck (default: `false`)::\n+ Run `cargo check` on startup to get the correct value for package  OUT_DIRs.\n+rust-analyzer.cargo.noDefaultFeatures (default: `false`)::\n+ Do not activate the `default` feature.\n+rust-analyzer.cargo.target (default: `null`)::\n+ Compilation target (target triple).\n+rust-analyzer.cargo.noSysroot (default: `false`)::\n+ Internal config for debugging, disables loading of sysroot crates.\n+rust-analyzer.checkOnSave.enable (default: `true`)::\n+ Run specified `cargo check` command for diagnostics on save.\n+rust-analyzer.checkOnSave.allFeatures (default: `null`)::\n+ Check with all features (will be passed as `--all-features`).  Defaults to `rust-analyzer.cargo.allFeatures`.\n+rust-analyzer.checkOnSave.allTargets (default: `true`)::\n+ Check all targets and tests (will be passed as `--all-targets`).\n+rust-analyzer.checkOnSave.command (default: `\"check\"`)::\n+ Cargo command to use for `cargo check`.\n+rust-analyzer.checkOnSave.noDefaultFeatures (default: `null`)::\n+ Do not activate the `default` feature.\n+rust-analyzer.checkOnSave.target (default: `null`)::\n+ Check for a specific target. Defaults to  `rust-analyzer.cargo.target`.\n+rust-analyzer.checkOnSave.extraArgs (default: `[]`)::\n+ Extra arguments for `cargo check`.\n+rust-analyzer.checkOnSave.features (default: `null`)::\n+ List of features to activate. Defaults to  `rust-analyzer.cargo.features`.\n+rust-analyzer.checkOnSave.overrideCommand (default: `null`)::\n+ Advanced option, fully override the command rust-analyzer uses for  checking. The command should include `--message-format=json` or  similar option.\n+rust-analyzer.completion.addCallArgumentSnippets (default: `true`)::\n+ Whether to add argument snippets when completing functions.\n+rust-analyzer.completion.addCallParenthesis (default: `true`)::\n+ Whether to add parenthesis when completing functions.\n+rust-analyzer.completion.postfix.enable (default: `true`)::\n+ Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\n+rust-analyzer.completion.autoimport.enable (default: `true`)::\n+ Toggles the additional completions that automatically add imports when completed.  Note that your client have to specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n+rust-analyzer.diagnostics.enable (default: `true`)::\n+ Whether to show native rust-analyzer diagnostics.\n+rust-analyzer.diagnostics.enableExperimental (default: `true`)::\n+ Whether to show experimental rust-analyzer diagnostics that might  have more false positives than usual.\n+rust-analyzer.diagnostics.disabled (default: `[]`)::\n+ List of rust-analyzer diagnostics to disable.\n+rust-analyzer.diagnostics.warningsAsHint (default: `[]`)::\n+ List of warnings that should be displayed with info severity.\\nThe  warnings will be indicated by a blue squiggly underline in code and  a blue icon in the problems panel.\n+rust-analyzer.diagnostics.warningsAsInfo (default: `[]`)::\n+ List of warnings that should be displayed with hint severity.\\nThe  warnings will be indicated by faded text or three dots in code and  will not show up in the problems panel.\n+rust-analyzer.files.watcher (default: `\"client\"`)::\n+ Controls file watching implementation.\n+rust-analyzer.hoverActions.debug (default: `true`)::\n+ Whether to show `Debug` action. Only applies when  `#rust-analyzer.hoverActions.enable#` is set.\n+rust-analyzer.hoverActions.enable (default: `true`)::\n+ Whether to show HoverActions in Rust files.\n+rust-analyzer.hoverActions.gotoTypeDef (default: `true`)::\n+ Whether to show `Go to Type Definition` action. Only applies when  `#rust-analyzer.hoverActions.enable#` is set.\n+rust-analyzer.hoverActions.implementations (default: `true`)::\n+ Whether to show `Implementations` action. Only applies when  `#rust-analyzer.hoverActions.enable#` is set.\n+rust-analyzer.hoverActions.run (default: `true`)::\n+ Whether to show `Run` action. Only applies when  `#rust-analyzer.hoverActions.enable#` is set.\n+rust-analyzer.hoverActions.linksInHover (default: `true`)::\n+ Use markdown syntax for links in hover.\n+rust-analyzer.inlayHints.chainingHints (default: `true`)::\n+ Whether to show inlay type hints for method chains.\n+rust-analyzer.inlayHints.maxLength (default: `null`)::\n+ Maximum length for inlay hints.\n+rust-analyzer.inlayHints.parameterHints (default: `true`)::\n+ Whether to show function parameter name inlay hints at the call  site.\n+rust-analyzer.inlayHints.typeHints (default: `true`)::\n+ Whether to show inlay type hints for variables.\n+rust-analyzer.lens.debug (default: `true`)::\n+ Whether to show `Debug` lens. Only applies when  `#rust-analyzer.lens.enable#` is set.\n+rust-analyzer.lens.enable (default: `true`)::\n+ Whether to show CodeLens in Rust files.\n+rust-analyzer.lens.implementations (default: `true`)::\n+ Whether to show `Implementations` lens. Only applies when  `#rust-analyzer.lens.enable#` is set.\n+rust-analyzer.lens.run (default: `true`)::\n+ Whether to show `Run` lens. Only applies when  `#rust-analyzer.lens.enable#` is set.\n+rust-analyzer.lens.methodReferences (default: `false`)::\n+ Whether to show `Method References` lens. Only applies when  `#rust-analyzer.lens.enable#` is set.\n+rust-analyzer.linkedProjects (default: `[]`)::\n+ Disable project auto-discovery in favor of explicitly specified set  of projects.  \\nElements must be paths pointing to Cargo.toml,  rust-project.json, or JSON objects in rust-project.json format.\n+rust-analyzer.lruCapacity (default: `null`)::\n+ Number of syntax trees rust-analyzer keeps in memory.\n+rust-analyzer.notifications.cargoTomlNotFound (default: `true`)::\n+ Whether to show `can't find Cargo.toml` error message.\n+rust-analyzer.procMacro.enable (default: `false`)::\n+ Enable Proc macro support, cargo.loadOutDirsFromCheck must be  enabled.\n+rust-analyzer.runnables.overrideCargo (default: `null`)::\n+ Command to be executed instead of 'cargo' for runnables.\n+rust-analyzer.runnables.cargoExtraArgs (default: `[]`)::\n+ Additional arguments to be passed to cargo for runnables such as  tests or binaries.\\nFor example, it may be '--release'.\n+rust-analyzer.rustcSource (default: `null`)::\n+ Path to the rust compiler sources, for usage in rustc_private projects.\n+rust-analyzer.rustfmt.extraArgs (default: `[]`)::\n+ Additional arguments to rustfmt.\n+rust-analyzer.rustfmt.overrideCommand (default: `null`)::\n+ Advanced option, fully override the command rust-analyzer uses for  formatting."}, {"sha": "f506d243fe862ea84e6b2f1adea5ff92b9beb170", "filename": "docs/user/manual.adoc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0890512e1c898c9c4c271df12d43353f3b64daf3/docs%2Fuser%2Fmanual.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/0890512e1c898c9c4c271df12d43353f3b64daf3/docs%2Fuser%2Fmanual.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fmanual.adoc?ref=0890512e1c898c9c4c271df12d43353f3b64daf3", "patch": "@@ -263,6 +263,15 @@ If you get an error saying `No such file or directory: 'rust-analyzer'`, see the\n \n GNOME Builder 3.37.1 and newer has native `rust-analyzer` support. If the LSP binary is not available, GNOME Builder can install it when opening a Rust file.\n \n+== Configration\n+\n+rust-analyzer is configured via LSP messages, which means that it's up to the editor to decide on the exact format and location of configuration files.\n+Please consult your editor's documentation to learn how to configure LSP servers.\n+\n+This is the list of config options rust-analyzer supports:\n+\n+include::./generated_config.adoc[]\n+\n == Non-Cargo Based Projects\n \n rust-analyzer does not require Cargo."}, {"sha": "2d716253e10315a5208d518862d08158e0a75190", "filename": "xtask/src/release.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0890512e1c898c9c4c271df12d43353f3b64daf3/xtask%2Fsrc%2Frelease.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0890512e1c898c9c4c271df12d43353f3b64daf3/xtask%2Fsrc%2Frelease.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Frelease.rs?ref=0890512e1c898c9c4c271df12d43353f3b64daf3", "patch": "@@ -54,9 +54,10 @@ https://github.com/sponsors/rust-analyzer[GitHub Sponsors].\n \n         for &adoc in [\n             \"manual.adoc\",\n-            \"generated_features.adoc\",\n             \"generated_assists.adoc\",\n+            \"generated_config.adoc\",\n             \"generated_diagnostic.adoc\",\n+            \"generated_features.adoc\",\n         ]\n         .iter()\n         {"}]}