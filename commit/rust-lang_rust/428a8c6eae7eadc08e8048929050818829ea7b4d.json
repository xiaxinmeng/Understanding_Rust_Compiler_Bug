{"sha": "428a8c6eae7eadc08e8048929050818829ea7b4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyOGE4YzZlYWU3ZWFkYzA4ZTgwNDg5MjkwNTA4MTg4MjllYTdiNGQ=", "commit": {"author": {"name": "Nicholas-Baron", "email": "nicholas.baron.ten@gmail.com", "date": "2020-09-19T19:45:14Z"}, "committer": {"name": "Nicholas-Baron", "email": "nicholas.baron.ten@gmail.com", "date": "2020-09-21T01:58:32Z"}, "message": "Moved the Diverges struct to its own file", "tree": {"sha": "ce20df054513fabe33889d9e869356852be65f0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce20df054513fabe33889d9e869356852be65f0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/428a8c6eae7eadc08e8048929050818829ea7b4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/428a8c6eae7eadc08e8048929050818829ea7b4d", "html_url": "https://github.com/rust-lang/rust/commit/428a8c6eae7eadc08e8048929050818829ea7b4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/428a8c6eae7eadc08e8048929050818829ea7b4d/comments", "author": {"login": "Nicholas-Baron", "id": 35079404, "node_id": "MDQ6VXNlcjM1MDc5NDA0", "avatar_url": "https://avatars.githubusercontent.com/u/35079404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nicholas-Baron", "html_url": "https://github.com/Nicholas-Baron", "followers_url": "https://api.github.com/users/Nicholas-Baron/followers", "following_url": "https://api.github.com/users/Nicholas-Baron/following{/other_user}", "gists_url": "https://api.github.com/users/Nicholas-Baron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nicholas-Baron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nicholas-Baron/subscriptions", "organizations_url": "https://api.github.com/users/Nicholas-Baron/orgs", "repos_url": "https://api.github.com/users/Nicholas-Baron/repos", "events_url": "https://api.github.com/users/Nicholas-Baron/events{/privacy}", "received_events_url": "https://api.github.com/users/Nicholas-Baron/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nicholas-Baron", "id": 35079404, "node_id": "MDQ6VXNlcjM1MDc5NDA0", "avatar_url": "https://avatars.githubusercontent.com/u/35079404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nicholas-Baron", "html_url": "https://github.com/Nicholas-Baron", "followers_url": "https://api.github.com/users/Nicholas-Baron/followers", "following_url": "https://api.github.com/users/Nicholas-Baron/following{/other_user}", "gists_url": "https://api.github.com/users/Nicholas-Baron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nicholas-Baron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nicholas-Baron/subscriptions", "organizations_url": "https://api.github.com/users/Nicholas-Baron/orgs", "repos_url": "https://api.github.com/users/Nicholas-Baron/repos", "events_url": "https://api.github.com/users/Nicholas-Baron/events{/privacy}", "received_events_url": "https://api.github.com/users/Nicholas-Baron/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1e93796797624f33ea4f0f8563d002f28234d7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1e93796797624f33ea4f0f8563d002f28234d7d", "html_url": "https://github.com/rust-lang/rust/commit/b1e93796797624f33ea4f0f8563d002f28234d7d"}], "stats": {"total": 157, "additions": 80, "deletions": 77}, "files": [{"sha": "963a93a95c2bbc386dd026010593d883e6d621f9", "filename": "compiler/rustc_typeck/src/check/diverges.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/428a8c6eae7eadc08e8048929050818829ea7b4d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdiverges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428a8c6eae7eadc08e8048929050818829ea7b4d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdiverges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdiverges.rs?ref=428a8c6eae7eadc08e8048929050818829ea7b4d", "patch": "@@ -0,0 +1,78 @@\n+use rustc_span::source_map::DUMMY_SP;\n+use rustc_span::{self, Span};\n+use std::{cmp, ops};\n+\n+/// Tracks whether executing a node may exit normally (versus\n+/// return/break/panic, which \"diverge\", leaving dead code in their\n+/// wake). Tracked semi-automatically (through type variables marked\n+/// as diverging), with some manual adjustments for control-flow\n+/// primitives (approximating a CFG).\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+pub enum Diverges {\n+    /// Potentially unknown, some cases converge,\n+    /// others require a CFG to determine them.\n+    Maybe,\n+\n+    /// Definitely known to diverge and therefore\n+    /// not reach the next sibling or its parent.\n+    Always {\n+        /// The `Span` points to the expression\n+        /// that caused us to diverge\n+        /// (e.g. `return`, `break`, etc).\n+        span: Span,\n+        /// In some cases (e.g. a `match` expression\n+        /// where all arms diverge), we may be\n+        /// able to provide a more informative\n+        /// message to the user.\n+        /// If this is `None`, a default message\n+        /// will be generated, which is suitable\n+        /// for most cases.\n+        custom_note: Option<&'static str>,\n+    },\n+\n+    /// Same as `Always` but with a reachability\n+    /// warning already emitted.\n+    WarnedAlways,\n+}\n+\n+// Convenience impls for combining `Diverges`.\n+\n+impl ops::BitAnd for Diverges {\n+    type Output = Self;\n+    fn bitand(self, other: Self) -> Self {\n+        cmp::min(self, other)\n+    }\n+}\n+\n+impl ops::BitOr for Diverges {\n+    type Output = Self;\n+    fn bitor(self, other: Self) -> Self {\n+        cmp::max(self, other)\n+    }\n+}\n+\n+impl ops::BitAndAssign for Diverges {\n+    fn bitand_assign(&mut self, other: Self) {\n+        *self = *self & other;\n+    }\n+}\n+\n+impl ops::BitOrAssign for Diverges {\n+    fn bitor_assign(&mut self, other: Self) {\n+        *self = *self | other;\n+    }\n+}\n+\n+impl Diverges {\n+    /// Creates a `Diverges::Always` with the provided `span` and the default note message.\n+    pub(super) fn always(span: Span) -> Diverges {\n+        Diverges::Always { span, custom_note: None }\n+    }\n+\n+    pub(super) fn is_always(self) -> bool {\n+        // Enum comparison ignores the\n+        // contents of fields, so we just\n+        // fill them in with garbage here.\n+        self >= Diverges::Always { span: DUMMY_SP, custom_note: None }\n+    }\n+}"}, {"sha": "98370d858d193c603fabac0122004bc12717d156", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 2, "deletions": 77, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/428a8c6eae7eadc08e8048929050818829ea7b4d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428a8c6eae7eadc08e8048929050818829ea7b4d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=428a8c6eae7eadc08e8048929050818829ea7b4d", "patch": "@@ -70,6 +70,7 @@ mod closure;\n pub mod coercion;\n mod compare_method;\n pub mod demand;\n+mod diverges;\n pub mod dropck;\n mod expr;\n mod fn_ctxt;\n@@ -86,6 +87,7 @@ mod upvar;\n mod wfcheck;\n pub mod writeback;\n \n+pub use diverges::Diverges;\n pub use fn_ctxt::FnCtxt;\n pub use inherited::{Inherited, InheritedBuilder};\n \n@@ -125,8 +127,6 @@ use rustc_trait_selection::traits::error_reporting::suggestions::ReturnsVisitor;\n use rustc_trait_selection::traits::{self, ObligationCauseCode};\n \n use std::cell::{Ref, RefCell, RefMut};\n-use std::cmp;\n-use std::ops::{self};\n \n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::indenter;\n@@ -326,81 +326,6 @@ pub enum PlaceOp {\n     Index,\n }\n \n-/// Tracks whether executing a node may exit normally (versus\n-/// return/break/panic, which \"diverge\", leaving dead code in their\n-/// wake). Tracked semi-automatically (through type variables marked\n-/// as diverging), with some manual adjustments for control-flow\n-/// primitives (approximating a CFG).\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n-pub enum Diverges {\n-    /// Potentially unknown, some cases converge,\n-    /// others require a CFG to determine them.\n-    Maybe,\n-\n-    /// Definitely known to diverge and therefore\n-    /// not reach the next sibling or its parent.\n-    Always {\n-        /// The `Span` points to the expression\n-        /// that caused us to diverge\n-        /// (e.g. `return`, `break`, etc).\n-        span: Span,\n-        /// In some cases (e.g. a `match` expression\n-        /// where all arms diverge), we may be\n-        /// able to provide a more informative\n-        /// message to the user.\n-        /// If this is `None`, a default message\n-        /// will be generated, which is suitable\n-        /// for most cases.\n-        custom_note: Option<&'static str>,\n-    },\n-\n-    /// Same as `Always` but with a reachability\n-    /// warning already emitted.\n-    WarnedAlways,\n-}\n-\n-// Convenience impls for combining `Diverges`.\n-\n-impl ops::BitAnd for Diverges {\n-    type Output = Self;\n-    fn bitand(self, other: Self) -> Self {\n-        cmp::min(self, other)\n-    }\n-}\n-\n-impl ops::BitOr for Diverges {\n-    type Output = Self;\n-    fn bitor(self, other: Self) -> Self {\n-        cmp::max(self, other)\n-    }\n-}\n-\n-impl ops::BitAndAssign for Diverges {\n-    fn bitand_assign(&mut self, other: Self) {\n-        *self = *self & other;\n-    }\n-}\n-\n-impl ops::BitOrAssign for Diverges {\n-    fn bitor_assign(&mut self, other: Self) {\n-        *self = *self | other;\n-    }\n-}\n-\n-impl Diverges {\n-    /// Creates a `Diverges::Always` with the provided `span` and the default note message.\n-    fn always(span: Span) -> Diverges {\n-        Diverges::Always { span, custom_note: None }\n-    }\n-\n-    fn is_always(self) -> bool {\n-        // Enum comparison ignores the\n-        // contents of fields, so we just\n-        // fill them in with garbage here.\n-        self >= Diverges::Always { span: DUMMY_SP, custom_note: None }\n-    }\n-}\n-\n pub struct BreakableCtxt<'tcx> {\n     may_break: bool,\n "}]}