{"sha": "5d54aa678153d0af0edc8b4dd2d74709d10ca66c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNTRhYTY3ODE1M2QwYWYwZWRjOGI0ZGQyZDc0NzA5ZDEwY2E2NmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-23T17:18:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-23T17:18:47Z"}, "message": "add union to code_model", "tree": {"sha": "610413e9cfaf7631b931cf3ca3c57304391cd72d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/610413e9cfaf7631b931cf3ca3c57304391cd72d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d54aa678153d0af0edc8b4dd2d74709d10ca66c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d54aa678153d0af0edc8b4dd2d74709d10ca66c", "html_url": "https://github.com/rust-lang/rust/commit/5d54aa678153d0af0edc8b4dd2d74709d10ca66c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eef24bddc96ddcdbcad5fddb9c0cf0e2ccad7681", "url": "https://api.github.com/repos/rust-lang/rust/commits/eef24bddc96ddcdbcad5fddb9c0cf0e2ccad7681", "html_url": "https://github.com/rust-lang/rust/commit/eef24bddc96ddcdbcad5fddb9c0cf0e2ccad7681"}], "stats": {"total": 128, "additions": 102, "deletions": 26}, "files": [{"sha": "5e5905f1565b340d40b5ddefeab7a22f3d04759e", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=5d54aa678153d0af0edc8b4dd2d74709d10ca66c", "patch": "@@ -10,22 +10,24 @@ use ra_syntax::{\n };\n \n use crate::{\n-    Name, AsName, Struct, Enum, EnumVariant, Crate,\n+    Name, AsName, Struct, Union, Enum, EnumVariant, Crate,\n     HirDatabase, HirFileId, StructField, FieldSource,\n     type_ref::TypeRef, DefDatabase,\n };\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub enum AdtDef {\n     Struct(Struct),\n+    Union(Union),\n     Enum(Enum),\n }\n-impl_froms!(AdtDef: Struct, Enum);\n+impl_froms!(AdtDef: Struct, Union, Enum);\n \n impl AdtDef {\n     pub(crate) fn krate(self, db: &impl HirDatabase) -> Option<Crate> {\n         match self {\n             AdtDef::Struct(s) => s.module(db),\n+            AdtDef::Union(s) => s.module(db),\n             AdtDef::Enum(e) => e.module(db),\n         }\n         .krate(db)\n@@ -38,6 +40,7 @@ impl Struct {\n     }\n }\n \n+/// Note that we use `StructData` for unions as well!\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct StructData {\n     pub(crate) name: Option<Name>,"}, {"sha": "970b7841209f984593a78ffa27d0f4b02a510884", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=5d54aa678153d0af0edc8b4dd2d74709d10ca66c", "patch": "@@ -71,6 +71,7 @@ pub enum ModuleDef {\n     Module(Module),\n     Function(Function),\n     Struct(Struct),\n+    Union(Union),\n     Enum(Enum),\n     // Can't be directly declared, but can be imported.\n     EnumVariant(EnumVariant),\n@@ -83,6 +84,7 @@ impl_froms!(\n     ModuleDef: Module,\n     Function,\n     Struct,\n+    Union,\n     Enum,\n     EnumVariant,\n     Const,\n@@ -325,6 +327,42 @@ impl Docs for Struct {\n     }\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct Union {\n+    pub(crate) id: StructId,\n+}\n+\n+impl Union {\n+    pub fn source(&self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::StructDef>) {\n+        self.id.source(db)\n+    }\n+\n+    pub fn name(&self, db: &impl HirDatabase) -> Option<Name> {\n+        db.struct_data(Struct { id: self.id }).name.clone()\n+    }\n+\n+    pub fn module(&self, db: &impl HirDatabase) -> Module {\n+        self.id.module(db)\n+    }\n+\n+    // FIXME move to a more general type\n+    /// Builds a resolver for type references inside this union.\n+    pub(crate) fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n+        // take the outer scope...\n+        let r = self.module(db).resolver(db);\n+        // ...and add generic params, if present\n+        let p = self.generic_params(db);\n+        let r = if !p.params.is_empty() { r.push_generic_params_scope(p) } else { r };\n+        r\n+    }\n+}\n+\n+impl Docs for Union {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        docs_from_ast(&*self.source(db).1)\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Enum {\n     pub(crate) id: EnumId,"}, {"sha": "8effbbe35cd014889e000d8750b436b5de26f0b3", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=5d54aa678153d0af0edc8b4dd2d74709d10ca66c", "patch": "@@ -9,7 +9,7 @@ use ra_syntax::ast::{self, NameOwner, TypeParamsOwner, TypeBoundsOwner, DefaultT\n \n use crate::{\n     db::{ HirDatabase, DefDatabase},\n-    Name, AsName, Function, Struct, Enum, Trait, TypeAlias, ImplBlock, Container, path::Path, type_ref::TypeRef, AdtDef\n+    Name, AsName, Function, Struct, Union, Enum, Trait, TypeAlias, ImplBlock, Container, path::Path, type_ref::TypeRef, AdtDef\n };\n \n /// Data about a generic parameter (to a function, struct, impl, ...).\n@@ -42,12 +42,13 @@ pub struct WherePredicate {\n pub enum GenericDef {\n     Function(Function),\n     Struct(Struct),\n+    Union(Union),\n     Enum(Enum),\n     Trait(Trait),\n     TypeAlias(TypeAlias),\n     ImplBlock(ImplBlock),\n }\n-impl_froms!(GenericDef: Function, Struct, Enum, Trait, TypeAlias, ImplBlock);\n+impl_froms!(GenericDef: Function, Struct, Union, Enum, Trait, TypeAlias, ImplBlock);\n \n impl GenericParams {\n     pub(crate) fn generic_params_query(\n@@ -58,14 +59,18 @@ impl GenericParams {\n         let parent = match def {\n             GenericDef::Function(it) => it.container(db).map(GenericDef::from),\n             GenericDef::TypeAlias(it) => it.container(db).map(GenericDef::from),\n-            GenericDef::Struct(_) | GenericDef::Enum(_) | GenericDef::Trait(_) => None,\n+            GenericDef::Struct(_)\n+            | GenericDef::Union(_)\n+            | GenericDef::Enum(_)\n+            | GenericDef::Trait(_) => None,\n             GenericDef::ImplBlock(_) => None,\n         };\n         generics.parent_params = parent.map(|p| db.generic_params(p));\n         let start = generics.parent_params.as_ref().map(|p| p.params.len()).unwrap_or(0) as u32;\n         match def {\n             GenericDef::Function(it) => generics.fill(&*it.source(db).1, start),\n             GenericDef::Struct(it) => generics.fill(&*it.source(db).1, start),\n+            GenericDef::Union(it) => generics.fill(&*it.source(db).1, start),\n             GenericDef::Enum(it) => generics.fill(&*it.source(db).1, start),\n             GenericDef::Trait(it) => {\n                 // traits get the Self type as an implicit first type parameter\n@@ -171,6 +176,7 @@ impl GenericDef {\n         match self {\n             GenericDef::Function(inner) => inner.resolver(db),\n             GenericDef::Struct(inner) => inner.resolver(db),\n+            GenericDef::Union(inner) => inner.resolver(db),\n             GenericDef::Enum(inner) => inner.resolver(db),\n             GenericDef::Trait(inner) => inner.resolver(db),\n             GenericDef::TypeAlias(inner) => inner.resolver(db),\n@@ -192,6 +198,7 @@ impl From<crate::adt::AdtDef> for GenericDef {\n     fn from(adt: crate::adt::AdtDef) -> Self {\n         match adt {\n             AdtDef::Struct(s) => s.into(),\n+            AdtDef::Union(u) => u.into(),\n             AdtDef::Enum(e) => e.into(),\n         }\n     }"}, {"sha": "0135644db1cd27fa557390b59a8f2d31a18e1fc0", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=5d54aa678153d0af0edc8b4dd2d74709d10ca66c", "patch": "@@ -77,7 +77,7 @@ pub use self::code_model_api::{\n     Crate, CrateDependency,\n     DefWithBody,\n     Module, ModuleDef, ModuleSource,\n-    Struct, Enum, EnumVariant,\n+    Struct, Union, Enum, EnumVariant,\n     Function, FnSignature,\n     StructField, FieldSource,\n     Static, Const, ConstSignature,"}, {"sha": "621236551e40c357b2cdec43f9bb69d3fb04fa63", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=5d54aa678153d0af0edc8b4dd2d74709d10ca66c", "patch": "@@ -6,7 +6,7 @@ use ra_db::FileId;\n use ra_syntax::ast;\n \n use crate::{\n-    Function, Module, Struct, Enum, Const, Static, Trait, TypeAlias,\n+    Function, Module, Struct, Union, Enum, Const, Static, Trait, TypeAlias,\n     DefDatabase, HirFileId, Name, Path,\n     KnownName,\n     nameres::{\n@@ -495,6 +495,10 @@ where\n                 let s = def!(Struct, ast_id);\n                 PerNs::both(s, s)\n             }\n+            raw::DefKind::Union(ast_id) => {\n+                let s = def!(Union, ast_id);\n+                PerNs::both(s, s)\n+            }\n             raw::DefKind::Enum(ast_id) => PerNs::types(def!(Enum, ast_id)),\n             raw::DefKind::Const(ast_id) => PerNs::values(def!(Const, ast_id)),\n             raw::DefKind::Static(ast_id) => PerNs::values(def!(Static, ast_id)),"}, {"sha": "1b4dcbb7a094792c47060db8863c90a2d7b0da62", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=5d54aa678153d0af0edc8b4dd2d74709d10ca66c", "patch": "@@ -1,7 +1,4 @@\n-use std::{\n-    sync::Arc,\n-    ops::Index,\n-};\n+use std::{sync::Arc, ops::Index};\n \n use test_utils::tested_by;\n use ra_arena::{Arena, impl_arena_id, RawId, map::ArenaMap};\n@@ -10,10 +7,7 @@ use ra_syntax::{\n     ast::{self, NameOwner, AttrsOwner},\n };\n \n-use crate::{\n-    DefDatabase, Name, AsName, Path, HirFileId, ModuleSource,\n-    AstIdMap, FileAstId, Either,\n-};\n+use crate::{DefDatabase, Name, AsName, Path, HirFileId, ModuleSource, AstIdMap, FileAstId, Either};\n \n /// `RawItems` is a set of top-level items in a file (except for impls).\n ///\n@@ -161,6 +155,7 @@ pub(super) struct DefData {\n pub(super) enum DefKind {\n     Function(FileAstId<ast::FnDef>),\n     Struct(FileAstId<ast::StructDef>),\n+    Union(FileAstId<ast::StructDef>),\n     Enum(FileAstId<ast::EnumDef>),\n     Const(FileAstId<ast::ConstDef>),\n     Static(FileAstId<ast::StaticDef>),\n@@ -215,7 +210,13 @@ impl RawItemsCollector {\n                 return;\n             }\n             ast::ModuleItemKind::StructDef(it) => {\n-                (DefKind::Struct(self.source_ast_id_map.ast_id(it)), it.name())\n+                let id = self.source_ast_id_map.ast_id(it);\n+                let name = it.name();\n+                if it.is_union() {\n+                    (DefKind::Union(id), name)\n+                } else {\n+                    (DefKind::Struct(id), name)\n+                }\n             }\n             ast::ModuleItemKind::EnumDef(it) => {\n                 (DefKind::Enum(self.source_ast_id_map.ast_id(it)), it.name())"}, {"sha": "76d34c12b6853d8bfe66e0a8e8e9fe1ac1a7c998", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=5d54aa678153d0af0edc8b4dd2d74709d10ca66c", "patch": "@@ -536,6 +536,7 @@ impl HirDisplay for ApplicationTy {\n             TypeCtor::Adt(def_id) => {\n                 let name = match def_id {\n                     AdtDef::Struct(s) => s.name(f.db),\n+                    AdtDef::Union(u) => u.name(f.db),\n                     AdtDef::Enum(e) => e.name(f.db),\n                 }\n                 .unwrap_or_else(Name::missing);"}, {"sha": "7d8250292ef293677d8f95c3de05679fff3f11c7", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=5d54aa678153d0af0edc8b4dd2d74709d10ca66c", "patch": "@@ -27,13 +27,13 @@ use ra_prof::profile;\n use test_utils::tested_by;\n \n use crate::{\n-    Function, StructField, Path, Name,\n-    FnSignature, AdtDef,ConstSignature,\n-    HirDatabase,\n-    DefWithBody,\n-    ImplItem,\n+    Function, StructField, Path, Name, FnSignature, AdtDef, ConstSignature, HirDatabase,\n+    DefWithBody, ImplItem,\n     type_ref::{TypeRef, Mutability},\n-    expr::{Body, Expr, BindingAnnotation, Literal, ExprId, Pat, PatId, UnaryOp, BinaryOp, Statement, FieldPat,Array, self},\n+    expr::{\n+        Body, Expr, BindingAnnotation, Literal, ExprId, Pat, PatId, UnaryOp, BinaryOp, Statement,\n+        FieldPat, Array, self,\n+    },\n     generics::{GenericParams, HasGenericParams},\n     path::{GenericArgs, GenericArg},\n     ModuleDef,\n@@ -644,7 +644,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let ty = self.insert_type_vars(ty.apply_substs(substs));\n                 (ty, Some(var.into()))\n             }\n-            TypableDef::TypeAlias(_)\n+            TypableDef::Union(_)\n+            | TypableDef::TypeAlias(_)\n             | TypableDef::Function(_)\n             | TypableDef::Enum(_)\n             | TypableDef::Const(_)\n@@ -1407,7 +1408,11 @@ impl Expectation {\n }\n \n mod diagnostics {\n-    use crate::{expr::ExprId, diagnostics::{DiagnosticSink, NoSuchField}, HirDatabase, Function};\n+    use crate::{\n+        expr::ExprId,\n+        diagnostics::{DiagnosticSink, NoSuchField},\n+        HirDatabase, Function,\n+};\n \n     #[derive(Debug, PartialEq, Eq, Clone)]\n     pub(super) enum InferenceDiagnostic {"}, {"sha": "7defa7a9b9eb060e3c8c84822cc8f761402c2c6b", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=5d54aa678153d0af0edc8b4dd2d74709d10ca66c", "patch": "@@ -9,7 +9,7 @@ use std::sync::Arc;\n use std::iter;\n \n use crate::{\n-    Function, Struct, StructField, Enum, EnumVariant, Path, ModuleDef, TypeAlias, Const, Static,\n+    Function, Struct, Union, StructField, Enum, EnumVariant, Path, ModuleDef, TypeAlias, Const, Static,\n     HirDatabase,\n     type_ref::TypeRef,\n     name::KnownName,\n@@ -124,6 +124,7 @@ impl Ty {\n         let def_generic: Option<GenericDef> = match resolved {\n             TypableDef::Function(func) => Some(func.into()),\n             TypableDef::Struct(s) => Some(s.into()),\n+            TypableDef::Union(u) => Some(u.into()),\n             TypableDef::Enum(e) => Some(e.into()),\n             TypableDef::EnumVariant(var) => Some(var.parent_enum(db).into()),\n             TypableDef::TypeAlias(t) => Some(t.into()),\n@@ -144,6 +145,7 @@ impl Ty {\n         let segment = match resolved {\n             TypableDef::Function(_)\n             | TypableDef::Struct(_)\n+            | TypableDef::Union(_)\n             | TypableDef::Enum(_)\n             | TypableDef::Const(_)\n             | TypableDef::Static(_)\n@@ -293,12 +295,14 @@ pub(crate) fn type_for_def(db: &impl HirDatabase, def: TypableDef, ns: Namespace\n         (TypableDef::Struct(s), Namespace::Values) => type_for_struct_constructor(db, s),\n         (TypableDef::Enum(e), Namespace::Types) => type_for_adt(db, e),\n         (TypableDef::EnumVariant(v), Namespace::Values) => type_for_enum_variant_constructor(db, v),\n+        (TypableDef::Union(u), Namespace::Types) => type_for_adt(db, u),\n         (TypableDef::TypeAlias(t), Namespace::Types) => type_for_type_alias(db, t),\n         (TypableDef::Const(c), Namespace::Values) => type_for_const(db, c),\n         (TypableDef::Static(c), Namespace::Values) => type_for_static(db, c),\n \n         // 'error' cases:\n         (TypableDef::Function(_), Namespace::Types) => Ty::Unknown,\n+        (TypableDef::Union(_), Namespace::Values) => Ty::Unknown,\n         (TypableDef::Enum(_), Namespace::Values) => Ty::Unknown,\n         (TypableDef::EnumVariant(_), Namespace::Types) => Ty::Unknown,\n         (TypableDef::TypeAlias(_), Namespace::Values) => Ty::Unknown,\n@@ -467,19 +471,21 @@ fn type_for_type_alias(db: &impl HirDatabase, t: TypeAlias) -> Ty {\n pub enum TypableDef {\n     Function(Function),\n     Struct(Struct),\n+    Union(Union),\n     Enum(Enum),\n     EnumVariant(EnumVariant),\n     TypeAlias(TypeAlias),\n     Const(Const),\n     Static(Static),\n }\n-impl_froms!(TypableDef: Function, Struct, Enum, EnumVariant, TypeAlias, Const, Static);\n+impl_froms!(TypableDef: Function, Struct, Union, Enum, EnumVariant, TypeAlias, Const, Static);\n \n impl From<ModuleDef> for Option<TypableDef> {\n     fn from(def: ModuleDef) -> Option<TypableDef> {\n         let res = match def {\n             ModuleDef::Function(f) => f.into(),\n             ModuleDef::Struct(s) => s.into(),\n+            ModuleDef::Union(u) => u.into(),\n             ModuleDef::Enum(e) => e.into(),\n             ModuleDef::EnumVariant(v) => v.into(),\n             ModuleDef::TypeAlias(t) => t.into(),"}, {"sha": "a00c1b60b231cebea0567ab9585dcbb082f47afc", "filename": "crates/ra_ide_api/src/completion/complete_struct_literal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs?ref=5d54aa678153d0af0edc8b4dd2d74709d10ca66c", "patch": "@@ -20,6 +20,7 @@ pub(super) fn complete_struct_literal(acc: &mut Completions, ctx: &CompletionCon\n         }\n \n         // FIXME unions\n+        AdtDef::Union(_) => (),\n         AdtDef::Enum(_) => (),\n     };\n }"}, {"sha": "064d379a4fbd136c04ff67fd8bc1a9aabc9ce94e", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=5d54aa678153d0af0edc8b4dd2d74709d10ca66c", "patch": "@@ -63,6 +63,7 @@ impl Completions {\n                 return self.add_function_with_name(ctx, Some(local_name), *func);\n             }\n             Resolution::Def(Struct(it)) => (CompletionItemKind::Struct, it.docs(ctx.db)),\n+            Resolution::Def(Union(it)) => (CompletionItemKind::Struct, it.docs(ctx.db)),\n             Resolution::Def(Enum(it)) => (CompletionItemKind::Enum, it.docs(ctx.db)),\n             Resolution::Def(EnumVariant(it)) => (CompletionItemKind::EnumVariant, it.docs(ctx.db)),\n             Resolution::Def(Const(it)) => (CompletionItemKind::Const, it.docs(ctx.db)),"}, {"sha": "7f81483f78f71f4967bc18508f63a88790348a73", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=5d54aa678153d0af0edc8b4dd2d74709d10ca66c", "patch": "@@ -154,6 +154,10 @@ impl NavigationTarget {\n                 let (file_id, node) = s.source(db);\n                 NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n+            hir::AdtDef::Union(s) => {\n+                let (file_id, node) = s.source(db);\n+                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+            }\n             hir::AdtDef::Enum(s) => {\n                 let (file_id, node) = s.source(db);\n                 NavigationTarget::from_named(file_id.original_file(db), &*node)\n@@ -169,6 +173,10 @@ impl NavigationTarget {\n                 let (file_id, node) = s.source(db);\n                 NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n+            hir::ModuleDef::Union(s) => {\n+                let (file_id, node) = s.source(db);\n+                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+            }\n             hir::ModuleDef::Const(s) => {\n                 let (file_id, node) = s.source(db);\n                 NavigationTarget::from_named(file_id.original_file(db), &*node)"}, {"sha": "77c9ae3b13fe595b0702864d1e07bdf6b882cc0c", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d54aa678153d0af0edc8b4dd2d74709d10ca66c/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=5d54aa678153d0af0edc8b4dd2d74709d10ca66c", "patch": "@@ -57,6 +57,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                         Some(Def(ModuleDef::Module(_))) => \"module\",\n                         Some(Def(ModuleDef::Function(_))) => \"function\",\n                         Some(Def(ModuleDef::Struct(_))) => \"type\",\n+                        Some(Def(ModuleDef::Union(_))) => \"type\",\n                         Some(Def(ModuleDef::Enum(_))) => \"type\",\n                         Some(Def(ModuleDef::EnumVariant(_))) => \"constant\",\n                         Some(Def(ModuleDef::Const(_))) => \"constant\","}]}