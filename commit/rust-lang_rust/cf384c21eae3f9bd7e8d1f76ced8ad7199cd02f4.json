{"sha": "cf384c21eae3f9bd7e8d1f76ced8ad7199cd02f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMzg0YzIxZWFlM2Y5YmQ3ZThkMWY3NmNlZDhhZDcxOTljZDAyZjQ=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-11-17T16:31:13Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-11-17T22:41:26Z"}, "message": "Clear up the reference around let\n\nFirst, re-word the section on if let/while let to be more clear.\n\nSecond, actually call them let statements in the statement section\n\nFixes #29801", "tree": {"sha": "7a369f2aee667e54a0bc9ccd6f97c3a269ea8801", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a369f2aee667e54a0bc9ccd6f97c3a269ea8801"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf384c21eae3f9bd7e8d1f76ced8ad7199cd02f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf384c21eae3f9bd7e8d1f76ced8ad7199cd02f4", "html_url": "https://github.com/rust-lang/rust/commit/cf384c21eae3f9bd7e8d1f76ced8ad7199cd02f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf384c21eae3f9bd7e8d1f76ced8ad7199cd02f4/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57c8a3e8b6a3200bb01d0ea60e4686a1ecfcb907", "url": "https://api.github.com/repos/rust-lang/rust/commits/57c8a3e8b6a3200bb01d0ea60e4686a1ecfcb907", "html_url": "https://github.com/rust-lang/rust/commit/57c8a3e8b6a3200bb01d0ea60e4686a1ecfcb907"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "b057b846be7d452381c0a5f5eabd5ad45f39a826", "filename": "src/doc/reference.md", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cf384c21eae3f9bd7e8d1f76ced8ad7199cd02f4/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/cf384c21eae3f9bd7e8d1f76ced8ad7199cd02f4/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=cf384c21eae3f9bd7e8d1f76ced8ad7199cd02f4", "patch": "@@ -2415,9 +2415,9 @@ in meaning to declaring the item outside the statement block.\n > **Note**: there is no implicit capture of the function's dynamic environment when\n > declaring a function-local item.\n \n-#### Variable declarations\n+#### `let` statements\n \n-A _variable declaration_ introduces a new set of variable, given by a pattern. The\n+A _`let` statement_ introduces a new set of variables, given by a pattern. The\n pattern may be followed by a type annotation, and/or an initializer expression.\n When no type annotation is given, the compiler will infer the type, or signal\n an error if insufficient type information is available for definite inference.\n@@ -3190,10 +3190,11 @@ let message = match maybe_digit {\n \n ### `if let` expressions\n \n-An `if let` expression is semantically identical to an `if` expression but in place\n-of a condition expression it expects a refutable let statement. If the value of the\n-expression on the right hand side of the let statement matches the pattern, the corresponding\n-block will execute, otherwise flow proceeds to the first `else` block that follows.\n+An `if let` expression is semantically identical to an `if` expression but in\n+place of a condition expression it expects a `let` statement with a refutable\n+pattern. If the value of the expression on the right hand side of the `let`\n+statement matches the pattern, the corresponding block will execute, otherwise\n+flow proceeds to the first `else` block that follows.\n \n ```\n let dish = (\"Ham\", \"Eggs\");\n@@ -3211,11 +3212,11 @@ if let (\"Ham\", b) = dish {\n \n ### `while let` loops\n \n-A `while let` loop is semantically identical to a `while` loop but in place of a\n-condition expression it expects a refutable let statement. If the value of the\n-expression on the right hand side of the let statement matches the pattern, the\n-loop body block executes and control returns to the pattern matching statement.\n-Otherwise, the while expression completes.\n+A `while let` loop is semantically identical to a `while` loop but in place of\n+a condition expression it expects `let` statement with a refutable pattern. If\n+the value of the expression on the right hand side of the `let` statement\n+matches the pattern, the loop body block executes and control returns to the\n+pattern matching statement. Otherwise, the while expression completes.\n \n ### `return` expressions\n "}]}