{"sha": "b88a612d9a427f4d814bddbe9002821ecf9e0980", "node_id": "C_kwDOAAsO6NoAKGI4OGE2MTJkOWE0MjdmNGQ4MTRiZGRiZTkwMDI4MjFlY2Y5ZTA5ODA", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2021-08-09T23:05:11Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2021-12-13T20:36:32Z"}, "message": "Change error for pub in fn decl if already present", "tree": {"sha": "b4e41214fa510c028bb3d3842eebe3433b05a0c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4e41214fa510c028bb3d3842eebe3433b05a0c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b88a612d9a427f4d814bddbe9002821ecf9e0980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b88a612d9a427f4d814bddbe9002821ecf9e0980", "html_url": "https://github.com/rust-lang/rust/commit/b88a612d9a427f4d814bddbe9002821ecf9e0980", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b88a612d9a427f4d814bddbe9002821ecf9e0980/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1796de7bb123df3f3d32124ededf1344434f672e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1796de7bb123df3f3d32124ededf1344434f672e", "html_url": "https://github.com/rust-lang/rust/commit/1796de7bb123df3f3d32124ededf1344434f672e"}], "stats": {"total": 53, "additions": 39, "deletions": 14}, "files": [{"sha": "ece0e6da3318a5f9603c93f92edadb78c921f468", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b88a612d9a427f4d814bddbe9002821ecf9e0980/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88a612d9a427f4d814bddbe9002821ecf9e0980/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=b88a612d9a427f4d814bddbe9002821ecf9e0980", "patch": "@@ -223,7 +223,7 @@ impl<'a> Parser<'a> {\n             (Ident::empty(), ItemKind::Use(tree))\n         } else if self.check_fn_front_matter(def_final) {\n             // FUNCTION ITEM\n-            let (ident, sig, generics, body) = self.parse_fn(attrs, fn_parse_mode, lo)?;\n+            let (ident, sig, generics, body) = self.parse_fn(attrs, fn_parse_mode, lo, Some(vis))?;\n             (ident, ItemKind::Fn(Box::new(Fn { defaultness: def(), sig, generics, body })))\n         } else if self.eat_keyword(kw::Extern) {\n             if self.eat_keyword(kw::Crate) {\n@@ -1513,7 +1513,7 @@ impl<'a> Parser<'a> {\n             let err = if self.check_fn_front_matter(false) {\n                 // We use `parse_fn` to get a span for the function\n                 let fn_parse_mode = FnParseMode { req_name: |_| true, req_body: true };\n-                if let Err(mut db) = self.parse_fn(&mut Vec::new(), fn_parse_mode, lo) {\n+                if let Err(mut db) = self.parse_fn(&mut Vec::new(), fn_parse_mode, lo, None) {\n                     db.delay_as_bug();\n                 }\n                 let mut err = self.struct_span_err(\n@@ -1793,8 +1793,9 @@ impl<'a> Parser<'a> {\n         attrs: &mut Vec<Attribute>,\n         fn_parse_mode: FnParseMode,\n         sig_lo: Span,\n+        vis: Option<&Visibility>,\n     ) -> PResult<'a, (Ident, FnSig, Generics, Option<P<Block>>)> {\n-        let header = self.parse_fn_front_matter()?; // `const ... fn`\n+        let header = self.parse_fn_front_matter(vis)?; // `const ... fn`\n         let ident = self.parse_ident()?; // `foo`\n         let mut generics = self.parse_generics()?; // `<'a, T, ...>`\n         let decl =\n@@ -1903,12 +1904,15 @@ impl<'a> Parser<'a> {\n     /// Parses all the \"front matter\" (or \"qualifiers\") for a `fn` declaration,\n     /// up to and including the `fn` keyword. The formal grammar is:\n     ///\n-    /// ```\n+    /// ```text\n     /// Extern = \"extern\" StringLit? ;\n     /// FnQual = \"const\"? \"async\"? \"unsafe\"? Extern? ;\n     /// FnFrontMatter = FnQual \"fn\" ;\n     /// ```\n-    pub(super) fn parse_fn_front_matter(&mut self) -> PResult<'a, FnHeader> {\n+    pub(super) fn parse_fn_front_matter(\n+        &mut self,\n+        vis: Option<&Visibility>,\n+    ) -> PResult<'a, FnHeader> {\n         let sp_start = self.token.span;\n         let constness = self.parse_constness();\n \n@@ -1962,23 +1966,43 @@ impl<'a> Parser<'a> {\n                     }\n                     // Recover incorrect visibility order such as `async pub`.\n                     else if self.check_keyword(kw::Pub) {\n+                        let orig_vis = vis.unwrap_or(&Visibility {\n+                            span: rustc_span::DUMMY_SP,\n+                            kind: VisibilityKind::Inherited,\n+                            tokens: None,\n+                        });\n+\n                         let sp = sp_start.to(self.prev_token.span);\n                         if let Ok(snippet) = self.span_to_snippet(sp) {\n-                            let vis = match self.parse_visibility(FollowedByType::No) {\n+                            let current_vis = match self.parse_visibility(FollowedByType::No) {\n                                 Ok(v) => v,\n                                 Err(mut d) => {\n                                     d.cancel();\n                                     return Err(err);\n                                 }\n                             };\n-                            let vs = pprust::vis_to_string(&vis);\n+                            let vs = pprust::vis_to_string(&current_vis);\n                             let vs = vs.trim_end();\n-                            err.span_suggestion(\n-                                sp_start.to(self.prev_token.span),\n-                                &format!(\"visibility `{}` must come before `{}`\", vs, snippet),\n-                                format!(\"{} {}\", vs, snippet),\n-                                Applicability::MachineApplicable,\n-                            );\n+\n+                            // There was no explicit visibility\n+                            if matches!(orig_vis.kind, VisibilityKind::Inherited) {\n+                                err.span_suggestion(\n+                                    sp,\n+                                    &format!(\"visibility `{}` must come before `{}`\", vs, snippet),\n+                                    format!(\"{} {}\", vs, snippet),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            }\n+                            // There was an explicit visibility\n+                            else {\n+                                err.span_suggestion(\n+                                    current_vis.span,\n+                                    \"there is already a visibility, remove this one\",\n+                                    \"\".to_string(),\n+                                    Applicability::MachineApplicable,\n+                                )\n+                                .span_note(orig_vis.span, \"explicit visibility first seen here\");\n+                            }\n                         }\n                     }\n                     return Err(err);"}, {"sha": "3dbe8bf93f305f12ac1f6862ccb2b6aa5c79f68e", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88a612d9a427f4d814bddbe9002821ecf9e0980/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88a612d9a427f4d814bddbe9002821ecf9e0980/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=b88a612d9a427f4d814bddbe9002821ecf9e0980", "patch": "@@ -474,7 +474,8 @@ impl<'a> Parser<'a> {\n         params: Vec<GenericParam>,\n         recover_return_sign: RecoverReturnSign,\n     ) -> PResult<'a, TyKind> {\n-        let ast::FnHeader { ext, unsafety, constness, asyncness } = self.parse_fn_front_matter()?;\n+        let ast::FnHeader { ext, unsafety, constness, asyncness } =\n+            self.parse_fn_front_matter(None)?;\n         let decl = self.parse_fn_decl(|_| false, AllowPlus::No, recover_return_sign)?;\n         let whole_span = lo.to(self.prev_token.span);\n         if let ast::Const::Yes(span) = constness {"}]}