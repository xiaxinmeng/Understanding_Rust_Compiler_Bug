{"sha": "e12d22239aeef111b92a0d7d0ed5ca1c8872bab5", "node_id": "C_kwDOAAsO6NoAKGUxMmQyMjIzOWFlZWYxMTFiOTJhMGQ3ZDBlZDVjYTFjODg3MmJhYjU", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-06T12:20:02Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-06T13:38:50Z"}, "message": "Add debug asserts to hand-implemented `Ord`/`Eq` impls", "tree": {"sha": "fb29ef509849f12f107a9f0ec7d7b670b9fbe349", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb29ef509849f12f107a9f0ec7d7b670b9fbe349"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e12d22239aeef111b92a0d7d0ed5ca1c8872bab5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e12d22239aeef111b92a0d7d0ed5ca1c8872bab5", "html_url": "https://github.com/rust-lang/rust/commit/e12d22239aeef111b92a0d7d0ed5ca1c8872bab5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e12d22239aeef111b92a0d7d0ed5ca1c8872bab5/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07fbb1b372435283716885fc2973808ff7da22ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/07fbb1b372435283716885fc2973808ff7da22ca", "html_url": "https://github.com/rust-lang/rust/commit/07fbb1b372435283716885fc2973808ff7da22ca"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "3ed616d709b1edf4e1b38933c8002417eea0fb67", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e12d22239aeef111b92a0d7d0ed5ca1c8872bab5/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e12d22239aeef111b92a0d7d0ed5ca1c8872bab5/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=e12d22239aeef111b92a0d7d0ed5ca1c8872bab5", "patch": "@@ -330,7 +330,14 @@ impl<I: Interner> PartialEq for TyKind<I> {\n                 (Placeholder(a_p), Placeholder(b_p)) => a_p == b_p,\n                 (Infer(a_t), Infer(b_t)) => a_t == b_t,\n                 (Error(a_e), Error(b_e)) => a_e == b_e,\n-                _ => true, // unreachable\n+                (Bool, Bool) | (Char, Char) | (Str, Str) | (Never, Never) => true,\n+                _ => {\n+                    debug_assert!(\n+                        false,\n+                        \"This branch must be unreachable, maybe the match is missing an arm? self = self = {self:?}, other = {other:?}\"\n+                    );\n+                    true\n+                }\n             }\n     }\n }\n@@ -381,7 +388,11 @@ impl<I: Interner> Ord for TyKind<I> {\n                 (Placeholder(a_p), Placeholder(b_p)) => a_p.cmp(b_p),\n                 (Infer(a_t), Infer(b_t)) => a_t.cmp(b_t),\n                 (Error(a_e), Error(b_e)) => a_e.cmp(b_e),\n-                _ => Ordering::Equal, // unreachable\n+                (Bool, Bool) | (Char, Char) | (Str, Str) | (Never, Never) => Ordering::Equal,\n+                _ => {\n+                    debug_assert!(false, \"This branch must be unreachable, maybe the match is missing an arm? self = self = {self:?}, other = {other:?}\");\n+                    Ordering::Equal\n+                }\n             }\n         })\n     }\n@@ -977,7 +988,13 @@ impl<I: Interner> PartialEq for RegionKind<I> {\n                 (ReVar(a_r), ReVar(b_r)) => a_r == b_r,\n                 (RePlaceholder(a_r), RePlaceholder(b_r)) => a_r == b_r,\n                 (ReErased, ReErased) => true,\n-                _ => true, // unreachable\n+                _ => {\n+                    debug_assert!(\n+                        false,\n+                        \"This branch must be unreachable, maybe the match is missing an arm? self = self = {self:?}, other = {other:?}\"\n+                    );\n+                    true\n+                }\n             }\n     }\n }\n@@ -1008,7 +1025,10 @@ impl<I: Interner> Ord for RegionKind<I> {\n                 (ReVar(a_r), ReVar(b_r)) => a_r.cmp(b_r),\n                 (RePlaceholder(a_r), RePlaceholder(b_r)) => a_r.cmp(b_r),\n                 (ReErased, ReErased) => Ordering::Equal,\n-                _ => Ordering::Equal, // unreachable\n+                _ => {\n+                    debug_assert!(false, \"This branch must be unreachable, maybe the match is missing an arm? self = self = {self:?}, other = {other:?}\");\n+                    Ordering::Equal\n+                }\n             }\n         })\n     }"}]}