{"sha": "033f28d4364e0bd0ff7031b67e6bd0356fe00bfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzM2YyOGQ0MzY0ZTBiZDBmZjcwMzFiNjdlNmJkMDM1NmZlMDBiZmQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-07T03:08:16Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-13T18:30:14Z"}, "message": "core: Rename ImmutableSlice::unsafe_ref to unsafe_get\n\nDeprecate the previous.", "tree": {"sha": "b1f101da8d54893d32a4766157fadceeb80d890f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1f101da8d54893d32a4766157fadceeb80d890f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/033f28d4364e0bd0ff7031b67e6bd0356fe00bfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/033f28d4364e0bd0ff7031b67e6bd0356fe00bfd", "html_url": "https://github.com/rust-lang/rust/commit/033f28d4364e0bd0ff7031b67e6bd0356fe00bfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/033f28d4364e0bd0ff7031b67e6bd0356fe00bfd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "html_url": "https://github.com/rust-lang/rust/commit/fbc93082ec92c3534c4b27fef35d78d97bd77fd2"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "3b9e2ac72dc4b02952976d03a9bf8ab850ba0c41", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033f28d4364e0bd0ff7031b67e6bd0356fe00bfd/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033f28d4364e0bd0ff7031b67e6bd0356fe00bfd/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=033f28d4364e0bd0ff7031b67e6bd0356fe00bfd", "patch": "@@ -141,7 +141,7 @@ impl String {\n         let mut i = 0;\n         let total = v.len();\n         fn unsafe_get(xs: &[u8], i: uint) -> u8 {\n-            unsafe { *xs.unsafe_ref(i) }\n+            unsafe { *xs.unsafe_get(i) }\n         }\n         fn safe_get(xs: &[u8], i: uint, total: uint) -> u8 {\n             if i >= total {"}, {"sha": "dcfe256807467fdeaa9f3f59867153d3e1aa68c9", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033f28d4364e0bd0ff7031b67e6bd0356fe00bfd/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033f28d4364e0bd0ff7031b67e6bd0356fe00bfd/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=033f28d4364e0bd0ff7031b67e6bd0356fe00bfd", "patch": "@@ -926,7 +926,7 @@ macro_rules! iterator_impl {\n                 // such thing as invalid pointers and memory unsafety. The\n                 // reason is performance, without doing this we can get the\n                 // bench_iter_large microbenchmark down to about 30000 ns/iter\n-                // (using .unsafe_ref to index self.stack directly, 38000\n+                // (using .unsafe_get to index self.stack directly, 38000\n                 // ns/iter with [] checked indexing), but this smashes that down\n                 // to 13500 ns/iter.\n                 //"}, {"sha": "fd069f5472710cce28dfb6dc6b6ae7f802dee870", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/033f28d4364e0bd0ff7031b67e6bd0356fe00bfd/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033f28d4364e0bd0ff7031b67e6bd0356fe00bfd/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=033f28d4364e0bd0ff7031b67e6bd0356fe00bfd", "patch": "@@ -348,7 +348,7 @@ impl<T: Clone> Vec<T> {\n             unsafe {\n                 ptr::write(\n                     self.as_mut_slice().unsafe_mut_ref(len),\n-                    other.unsafe_ref(i).clone());\n+                    other.unsafe_get(i).clone());\n                 self.set_len(len + 1);\n             }\n         }\n@@ -703,7 +703,7 @@ impl<T> Vec<T> {\n                 // decrement len before the read(), so a failure on Drop doesn't\n                 // re-drop the just-failed value.\n                 self.len -= 1;\n-                ptr::read(self.as_slice().unsafe_ref(self.len));\n+                ptr::read(self.as_slice().unsafe_get(self.len));\n             }\n         }\n     }\n@@ -1605,7 +1605,7 @@ impl<T> MutableSeq<T> for Vec<T> {\n         } else {\n             unsafe {\n                 self.len -= 1;\n-                Some(ptr::read(self.as_slice().unsafe_ref(self.len())))\n+                Some(ptr::read(self.as_slice().unsafe_get(self.len())))\n             }\n         }\n     }"}, {"sha": "8d57437671959d9d80af164bb9d3c512f7f0e9e4", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/033f28d4364e0bd0ff7031b67e6bd0356fe00bfd/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033f28d4364e0bd0ff7031b67e6bd0356fe00bfd/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=033f28d4364e0bd0ff7031b67e6bd0356fe00bfd", "patch": "@@ -173,8 +173,14 @@ pub trait ImmutableSlice<'a, T> {\n \n     /// Returns a pointer to the element at the given index, without doing\n     /// bounds checking.\n+    #[deprecated = \"renamed to `unsafe_get`\"]\n     unsafe fn unsafe_ref(self, index: uint) -> &'a T;\n \n+    /// Returns a pointer to the element at the given index, without doing\n+    /// bounds checking.\n+    #[unstable]\n+    unsafe fn unsafe_get(self, index: uint) -> &'a T;\n+\n     /**\n      * Returns an unsafe pointer to the vector's buffer\n      *\n@@ -351,10 +357,16 @@ impl<'a,T> ImmutableSlice<'a, T> for &'a [T] {\n     }\n \n     #[inline]\n+    #[deprecated = \"renamed to `unsafe_get`\"]\n     unsafe fn unsafe_ref(self, index: uint) -> &'a T {\n         transmute(self.repr().data.offset(index as int))\n     }\n \n+    #[inline]\n+    unsafe fn unsafe_get(self, index: uint) -> &'a T {\n+        transmute(self.repr().data.offset(index as int))\n+    }\n+\n     #[inline]\n     fn as_ptr(&self) -> *const T {\n         self.repr().data"}, {"sha": "2fbfa6d6e85a0da393ae2050cb9d7ff963e4ab3f", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/033f28d4364e0bd0ff7031b67e6bd0356fe00bfd/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033f28d4364e0bd0ff7031b67e6bd0356fe00bfd/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=033f28d4364e0bd0ff7031b67e6bd0356fe00bfd", "patch": "@@ -348,7 +348,7 @@ impl Isaac64Rng {\n         static MP_VEC: [(uint, uint), .. 2] = [(0,MIDPOINT), (MIDPOINT, 0)];\n         macro_rules! ind (\n             ($x:expr) => {\n-                *self.mem.unsafe_ref(($x as uint >> 3) & (RAND_SIZE_64 - 1))\n+                *self.mem.unsafe_get(($x as uint >> 3) & (RAND_SIZE_64 - 1))\n             }\n         );\n \n@@ -362,8 +362,8 @@ impl Isaac64Rng {\n                             let mix = if $j == 0 {!mix} else {mix};\n \n                             unsafe {\n-                                let x = *self.mem.unsafe_ref(base + mr_offset);\n-                                a = mix + *self.mem.unsafe_ref(base + m2_offset);\n+                                let x = *self.mem.unsafe_get(base + mr_offset);\n+                                a = mix + *self.mem.unsafe_get(base + m2_offset);\n                                 let y = ind!(x) + a + b;\n                                 self.mem.unsafe_set(base + mr_offset, y);\n \n@@ -379,8 +379,8 @@ impl Isaac64Rng {\n                             let mix = if $j == 0 {!mix} else {mix};\n \n                             unsafe {\n-                                let x = *self.mem.unsafe_ref(base + mr_offset);\n-                                a = mix + *self.mem.unsafe_ref(base + m2_offset);\n+                                let x = *self.mem.unsafe_get(base + mr_offset);\n+                                a = mix + *self.mem.unsafe_get(base + m2_offset);\n                                 let y = ind!(x) + a + b;\n                                 self.mem.unsafe_set(base + mr_offset, y);\n \n@@ -416,7 +416,7 @@ impl Rng for Isaac64Rng {\n             self.isaac64();\n         }\n         self.cnt -= 1;\n-        unsafe { *self.rsl.unsafe_ref(self.cnt) }\n+        unsafe { *self.rsl.unsafe_get(self.cnt) }\n     }\n }\n "}]}