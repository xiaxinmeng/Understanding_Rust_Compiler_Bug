{"sha": "f8bccb1658dce1b70e08c7c8f438b65f6f9bc139", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YmNjYjE2NThkY2UxYjcwZTA4YzdjOGY0MzhiNjVmNmY5YmMxMzk=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-31T13:07:29Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-07T23:31:58Z"}, "message": "Move sidebar to Buffer-printing", "tree": {"sha": "f1af0d7d232001ae73e2e131c5907c7ef89f352a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1af0d7d232001ae73e2e131c5907c7ef89f352a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8bccb1658dce1b70e08c7c8f438b65f6f9bc139", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8bccb1658dce1b70e08c7c8f438b65f6f9bc139", "html_url": "https://github.com/rust-lang/rust/commit/f8bccb1658dce1b70e08c7c8f438b65f6f9bc139", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8bccb1658dce1b70e08c7c8f438b65f6f9bc139/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04dc72eeef1ecea0833ce022dde0fd45c4744757", "url": "https://api.github.com/repos/rust-lang/rust/commits/04dc72eeef1ecea0833ce022dde0fd45c4744757", "html_url": "https://github.com/rust-lang/rust/commit/04dc72eeef1ecea0833ce022dde0fd45c4744757"}], "stats": {"total": 132, "additions": 70, "deletions": 62}, "files": [{"sha": "99ddbcd7170d73fb4d06b3f0171c1eeb098ae232", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f8bccb1658dce1b70e08c7c8f438b65f6f9bc139/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8bccb1658dce1b70e08c7c8f438b65f6f9bc139/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=f8bccb1658dce1b70e08c7c8f438b65f6f9bc139", "patch": "@@ -22,6 +22,24 @@ pub trait Print {\n     fn print(&self, buffer: &mut Buffer);\n }\n \n+impl<T: ?Sized + Print> Print for &'_ T {\n+    fn print(&self, buffer: &mut Buffer) {\n+        (&**self).print(buffer)\n+    }\n+}\n+\n+impl Print for String {\n+    fn print(&self, buffer: &mut Buffer) {\n+        buffer.write_str(self);\n+    }\n+}\n+\n+impl Print for str {\n+    fn print(&self, buffer: &mut Buffer) {\n+        buffer.write_str(self);\n+    }\n+}\n+\n #[derive(Debug, Clone)]\n pub struct Buffer {\n     for_html: bool,\n@@ -74,6 +92,11 @@ impl Buffer {\n         self.buffer.write_fmt(v).unwrap();\n     }\n \n+    crate fn to_display<T: ?Sized + Print>(mut self, t: &T) -> String {\n+        t.print(&mut self);\n+        self.into_inner()\n+    }\n+\n     crate fn display<T: fmt::Display>(&mut self, t: T) {\n         if self.for_html {\n             write!(self, \"{}\", t);"}, {"sha": "38dcfbfcec49c1c9c4b7699d4d2e988d77836495", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8bccb1658dce1b70e08c7c8f438b65f6f9bc139/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8bccb1658dce1b70e08c7c8f438b65f6f9bc139/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=f8bccb1658dce1b70e08c7c8f438b65f6f9bc139", "patch": "@@ -3,6 +3,7 @@ use std::path::PathBuf;\n \n use crate::externalfiles::ExternalHtml;\n use crate::html::render::SlashChecker;\n+use crate::html::format::{Buffer, Print};\n \n #[derive(Clone)]\n pub struct Layout {\n@@ -30,7 +31,7 @@ pub struct Page<'a> {\n     pub static_extra_scripts: &'a [&'a str],\n }\n \n-pub fn render<T: fmt::Display, S: fmt::Display>(\n+pub fn render<T: fmt::Display, S: Print>(\n     layout: &Layout,\n     page: &Page<'_>,\n     sidebar: &S,\n@@ -208,7 +209,7 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n     in_header = layout.external_html.in_header,\n     before_content = layout.external_html.before_content,\n     after_content = layout.external_html.after_content,\n-    sidebar   = *sidebar,\n+    sidebar   = Buffer::html().to_display(sidebar),\n     krate     = layout.krate,\n     themes = themes.iter()\n                    .filter_map(|t| t.file_stem())"}, {"sha": "40e7081c57c72d6eac55704cad7f11afee6dd2c1", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 44, "deletions": 60, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/f8bccb1658dce1b70e08c7c8f438b65f6f9bc139/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8bccb1658dce1b70e08c7c8f438b65f6f9bc139/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=f8bccb1658dce1b70e08c7c8f438b65f6f9bc139", "patch": "@@ -65,7 +65,7 @@ use crate::docfs::{DocFS, ErrorStorage, PathError};\n use crate::doctree;\n use crate::fold::DocFolder;\n use crate::html::escape::Escape;\n-use crate::html::format::{Buffer, AsyncSpace, ConstnessSpace};\n+use crate::html::format::{Print, Buffer, AsyncSpace, ConstnessSpace};\n use crate::html::format::{GenericBounds, WhereClause, href, AbiSpace, DefaultSpace};\n use crate::html::format::{VisSpace, Function, UnsafetySpace, MutableSpace};\n use crate::html::format::fmt_impl_for_trait_page;\n@@ -4266,15 +4266,15 @@ fn item_foreign_type(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item)\n     render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)\n }\n \n-impl<'a> fmt::Display for Sidebar<'a> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+impl Print for Sidebar<'_> {\n+    fn print(&self, buffer: &mut Buffer) {\n         let cx = self.cx;\n         let it = self.item;\n         let parentlen = cx.current.len() - if it.is_mod() {1} else {0};\n \n         if it.is_struct() || it.is_trait() || it.is_primitive() || it.is_union()\n             || it.is_enum() || it.is_mod() || it.is_typedef() {\n-            write!(fmt, \"<p class='location'>{}{}</p>\",\n+            write!(buffer, \"<p class='location'>{}{}</p>\",\n                 match it.inner {\n                     clean::StructItem(..) => \"Struct \",\n                     clean::TraitItem(..) => \"Trait \",\n@@ -4290,33 +4290,33 @@ impl<'a> fmt::Display for Sidebar<'a> {\n                     },\n                     _ => \"\",\n                 },\n-                it.name.as_ref().unwrap())?;\n+                it.name.as_ref().unwrap());\n         }\n \n         if it.is_crate() {\n             if let Some(ref version) = cache().crate_version {\n-                write!(fmt,\n+                write!(buffer,\n                        \"<div class='block version'>\\\n                         <p>Version {}</p>\\\n                         </div>\",\n-                       version)?;\n+                       version);\n             }\n         }\n \n-        write!(fmt, \"<div class=\\\"sidebar-elems\\\">\")?;\n+        write!(buffer, \"<div class=\\\"sidebar-elems\\\">\");\n         if it.is_crate() {\n-            write!(fmt, \"<a id='all-types' href='all.html'><p>See all {}'s items</p></a>\",\n-                   it.name.as_ref().expect(\"crates always have a name\"))?;\n+            write!(buffer, \"<a id='all-types' href='all.html'><p>See all {}'s items</p></a>\",\n+                   it.name.as_ref().expect(\"crates always have a name\"));\n         }\n         match it.inner {\n-            clean::StructItem(ref s) => sidebar_struct(fmt, it, s)?,\n-            clean::TraitItem(ref t) => sidebar_trait(fmt, it, t)?,\n-            clean::PrimitiveItem(ref p) => sidebar_primitive(fmt, it, p)?,\n-            clean::UnionItem(ref u) => sidebar_union(fmt, it, u)?,\n-            clean::EnumItem(ref e) => sidebar_enum(fmt, it, e)?,\n-            clean::TypedefItem(ref t, _) => sidebar_typedef(fmt, it, t)?,\n-            clean::ModuleItem(ref m) => sidebar_module(fmt, it, &m.items)?,\n-            clean::ForeignTypeItem => sidebar_foreign_type(fmt, it)?,\n+            clean::StructItem(ref s) => sidebar_struct(buffer, it, s),\n+            clean::TraitItem(ref t) => sidebar_trait(buffer, it, t),\n+            clean::PrimitiveItem(ref p) => sidebar_primitive(buffer, it, p),\n+            clean::UnionItem(ref u) => sidebar_union(buffer, it, u),\n+            clean::EnumItem(ref e) => sidebar_enum(buffer, it, e),\n+            clean::TypedefItem(ref t, _) => sidebar_typedef(buffer, it, t),\n+            clean::ModuleItem(ref m) => sidebar_module(buffer, it, &m.items),\n+            clean::ForeignTypeItem => sidebar_foreign_type(buffer, it),\n             _ => (),\n         }\n \n@@ -4328,39 +4328,37 @@ impl<'a> fmt::Display for Sidebar<'a> {\n         // as much HTML as possible in order to allow non-JS-enabled browsers\n         // to navigate the documentation (though slightly inefficiently).\n \n-        write!(fmt, \"<p class='location'>\")?;\n+        write!(buffer, \"<p class='location'>\");\n         for (i, name) in cx.current.iter().take(parentlen).enumerate() {\n             if i > 0 {\n-                write!(fmt, \"::<wbr>\")?;\n+                write!(buffer, \"::<wbr>\");\n             }\n-            write!(fmt, \"<a href='{}index.html'>{}</a>\",\n+            write!(buffer, \"<a href='{}index.html'>{}</a>\",\n                    &cx.root_path()[..(cx.current.len() - i - 1) * 3],\n-                   *name)?;\n+                   *name);\n         }\n-        write!(fmt, \"</p>\")?;\n+        write!(buffer, \"</p>\");\n \n         // Sidebar refers to the enclosing module, not this module.\n         let relpath = if it.is_mod() { \"../\" } else { \"\" };\n-        write!(fmt,\n+        write!(buffer,\n                \"<script>window.sidebarCurrent = {{\\\n                    name: '{name}', \\\n                    ty: '{ty}', \\\n                    relpath: '{path}'\\\n                 }};</script>\",\n                name = it.name.as_ref().map(|x| &x[..]).unwrap_or(\"\"),\n                ty = it.type_().css_class(),\n-               path = relpath)?;\n+               path = relpath);\n         if parentlen == 0 {\n             // There is no sidebar-items.js beyond the crate root path\n             // FIXME maybe dynamic crate loading can be merged here\n         } else {\n-            write!(fmt, \"<script defer src=\\\"{path}sidebar-items.js\\\"></script>\",\n-                   path = relpath)?;\n+            write!(buffer, \"<script defer src=\\\"{path}sidebar-items.js\\\"></script>\",\n+                   path = relpath);\n         }\n         // Closes sidebar-elems div.\n-        write!(fmt, \"</div>\")?;\n-\n-        Ok(())\n+        write!(buffer, \"</div>\");\n     }\n }\n \n@@ -4534,8 +4532,7 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n     out\n }\n \n-fn sidebar_struct(fmt: &mut fmt::Formatter<'_>, it: &clean::Item,\n-                  s: &clean::Struct) -> fmt::Result {\n+fn sidebar_struct(buf: &mut Buffer, it: &clean::Item, s: &clean::Struct) {\n     let mut sidebar = String::new();\n     let fields = get_struct_fields_name(&s.fields);\n \n@@ -4549,9 +4546,8 @@ fn sidebar_struct(fmt: &mut fmt::Formatter<'_>, it: &clean::Item,\n     sidebar.push_str(&sidebar_assoc_items(it));\n \n     if !sidebar.is_empty() {\n-        write!(fmt, \"<div class=\\\"block items\\\">{}</div>\", sidebar)?;\n+        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar);\n     }\n-    Ok(())\n }\n \n fn get_id_for_impl_on_foreign_type(for_: &clean::Type, trait_: &clean::Type) -> String {\n@@ -4575,8 +4571,7 @@ fn is_negative_impl(i: &clean::Impl) -> bool {\n     i.polarity == Some(clean::ImplPolarity::Negative)\n }\n \n-fn sidebar_trait(fmt: &mut fmt::Formatter<'_>, it: &clean::Item,\n-                 t: &clean::Trait) -> fmt::Result {\n+fn sidebar_trait(buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n     let mut sidebar = String::new();\n \n     let types = t.items\n@@ -4684,27 +4679,23 @@ fn sidebar_trait(fmt: &mut fmt::Formatter<'_>, it: &clean::Item,\n \n     sidebar.push_str(&sidebar_assoc_items(it));\n \n-    write!(fmt, \"<div class=\\\"block items\\\">{}</div>\", sidebar)\n+    write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar)\n }\n \n-fn sidebar_primitive(fmt: &mut fmt::Formatter<'_>, it: &clean::Item,\n-                     _p: &clean::PrimitiveType) -> fmt::Result {\n+fn sidebar_primitive(buf: &mut Buffer, it: &clean::Item, _p: &clean::PrimitiveType) {\n     let sidebar = sidebar_assoc_items(it);\n \n     if !sidebar.is_empty() {\n-        write!(fmt, \"<div class=\\\"block items\\\">{}</div>\", sidebar)?;\n+        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar);\n     }\n-    Ok(())\n }\n \n-fn sidebar_typedef(fmt: &mut fmt::Formatter<'_>, it: &clean::Item,\n-                   _t: &clean::Typedef) -> fmt::Result {\n+fn sidebar_typedef(buf: &mut Buffer, it: &clean::Item, _t: &clean::Typedef) {\n     let sidebar = sidebar_assoc_items(it);\n \n     if !sidebar.is_empty() {\n-        write!(fmt, \"<div class=\\\"block items\\\">{}</div>\", sidebar)?;\n+        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar);\n     }\n-    Ok(())\n }\n \n fn get_struct_fields_name(fields: &[clean::Item]) -> String {\n@@ -4722,8 +4713,7 @@ fn get_struct_fields_name(fields: &[clean::Item]) -> String {\n           .collect()\n }\n \n-fn sidebar_union(fmt: &mut fmt::Formatter<'_>, it: &clean::Item,\n-                 u: &clean::Union) -> fmt::Result {\n+fn sidebar_union(buf: &mut Buffer, it: &clean::Item, u: &clean::Union) {\n     let mut sidebar = String::new();\n     let fields = get_struct_fields_name(&u.fields);\n \n@@ -4735,13 +4725,11 @@ fn sidebar_union(fmt: &mut fmt::Formatter<'_>, it: &clean::Item,\n     sidebar.push_str(&sidebar_assoc_items(it));\n \n     if !sidebar.is_empty() {\n-        write!(fmt, \"<div class=\\\"block items\\\">{}</div>\", sidebar)?;\n+        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar);\n     }\n-    Ok(())\n }\n \n-fn sidebar_enum(fmt: &mut fmt::Formatter<'_>, it: &clean::Item,\n-                e: &clean::Enum) -> fmt::Result {\n+fn sidebar_enum(buf: &mut Buffer, it: &clean::Item, e: &clean::Enum) {\n     let mut sidebar = String::new();\n \n     let variants = e.variants.iter()\n@@ -4759,9 +4747,8 @@ fn sidebar_enum(fmt: &mut fmt::Formatter<'_>, it: &clean::Item,\n     sidebar.push_str(&sidebar_assoc_items(it));\n \n     if !sidebar.is_empty() {\n-        write!(fmt, \"<div class=\\\"block items\\\">{}</div>\", sidebar)?;\n+        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar);\n     }\n-    Ok(())\n }\n \n fn item_ty_to_strs(ty: &ItemType) -> (&'static str, &'static str) {\n@@ -4795,8 +4782,7 @@ fn item_ty_to_strs(ty: &ItemType) -> (&'static str, &'static str) {\n     }\n }\n \n-fn sidebar_module(fmt: &mut fmt::Formatter<'_>, _it: &clean::Item,\n-                  items: &[clean::Item]) -> fmt::Result {\n+fn sidebar_module(buf: &mut Buffer, _it: &clean::Item, items: &[clean::Item]) {\n     let mut sidebar = String::new();\n \n     if items.iter().any(|it| it.type_() == ItemType::ExternCrate ||\n@@ -4823,17 +4809,15 @@ fn sidebar_module(fmt: &mut fmt::Formatter<'_>, _it: &clean::Item,\n     }\n \n     if !sidebar.is_empty() {\n-        write!(fmt, \"<div class=\\\"block items\\\"><ul>{}</ul></div>\", sidebar)?;\n+        write!(buf, \"<div class=\\\"block items\\\"><ul>{}</ul></div>\", sidebar);\n     }\n-    Ok(())\n }\n \n-fn sidebar_foreign_type(fmt: &mut fmt::Formatter<'_>, it: &clean::Item) -> fmt::Result {\n+fn sidebar_foreign_type(buf: &mut Buffer, it: &clean::Item) {\n     let sidebar = sidebar_assoc_items(it);\n     if !sidebar.is_empty() {\n-        write!(fmt, \"<div class=\\\"block items\\\">{}</div>\", sidebar)?;\n+        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar);\n     }\n-    Ok(())\n }\n \n fn item_macro(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,"}]}