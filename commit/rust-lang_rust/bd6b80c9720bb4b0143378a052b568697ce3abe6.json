{"sha": "bd6b80c9720bb4b0143378a052b568697ce3abe6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNmI4MGM5NzIwYmI0YjAxNDMzNzhhMDUyYjU2ODY5N2NlM2FiZTY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-19T00:59:49Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-19T01:17:31Z"}, "message": "rt: Get rid of the rethrow in upcall_fail\n\nThrowing in upcall_fail ends up running lots of code in the red zone. To avoid\nit we have the personality function figure out which stack it's on and switch\nas needed.", "tree": {"sha": "4d261511241d91b59b485f3192803c922d98b728", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d261511241d91b59b485f3192803c922d98b728"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd6b80c9720bb4b0143378a052b568697ce3abe6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd6b80c9720bb4b0143378a052b568697ce3abe6", "html_url": "https://github.com/rust-lang/rust/commit/bd6b80c9720bb4b0143378a052b568697ce3abe6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd6b80c9720bb4b0143378a052b568697ce3abe6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c73eb8ff51da170ff10aba73934f10e40d26366d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c73eb8ff51da170ff10aba73934f10e40d26366d", "html_url": "https://github.com/rust-lang/rust/commit/c73eb8ff51da170ff10aba73934f10e40d26366d"}], "stats": {"total": 47, "additions": 35, "deletions": 12}, "files": [{"sha": "f30315174b6f19a27b6bbf506945a60a69b0cb18", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bd6b80c9720bb4b0143378a052b568697ce3abe6/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/bd6b80c9720bb4b0143378a052b568697ce3abe6/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=bd6b80c9720bb4b0143378a052b568697ce3abe6", "patch": "@@ -732,6 +732,17 @@ rust_task::record_stack_limit() {\n \n extern \"C\" uintptr_t get_sp();\n \n+static bool\n+sp_in_stk_seg(uintptr_t sp, stk_seg *stk) {\n+    // Not positive these bounds for sp are correct.  I think that the first\n+    // possible value for esp on a new stack is stk->end, which points to the\n+    // address before the first value to be pushed onto a new stack. The last\n+    // possible address we can push data to is stk->data.  Regardless, there's\n+    // so much slop at either end that we should never hit one of these\n+    // boundaries.\n+    return (uintptr_t)stk->data <= sp && sp <= stk->end;\n+}\n+\n /*\n Called by landing pads during unwinding to figure out which\n stack segment we are currently running on, delete the others,\n@@ -741,17 +752,21 @@ through __morestack).\n void\n rust_task::reset_stack_limit() {\n     uintptr_t sp = get_sp();\n-    // Not positive these bounds for sp are correct.\n-    // I think that the first possible value for esp on a new\n-    // stack is stk->end, which points one word in front of\n-    // the first work to be pushed onto a new stack.\n-    while (sp <= (uintptr_t)stk->data || stk->end < sp) {\n+    while (!sp_in_stk_seg(sp, stk)) {\n         del_stk(this, stk);\n         A(sched, stk != NULL, \"Failed to find the current stack\");\n     }\n     record_stack_limit();\n }\n \n+/*\n+Returns true if we're currently running on the Rust stack\n+ */\n+bool\n+rust_task::on_rust_stack() {\n+    return sp_in_stk_seg(get_sp(), stk);\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "51ae00a6b7077e06b1eaa52e6d84bc9802539ede", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd6b80c9720bb4b0143378a052b568697ce3abe6/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/bd6b80c9720bb4b0143378a052b568697ce3abe6/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=bd6b80c9720bb4b0143378a052b568697ce3abe6", "patch": "@@ -202,6 +202,7 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     void del_stack();\n     void record_stack_limit();\n     void reset_stack_limit();\n+    bool on_rust_stack();\n };\n \n //"}, {"sha": "5febc5098a21e7ea640e28b6acf607b51c9c80c1", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bd6b80c9720bb4b0143378a052b568697ce3abe6/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/bd6b80c9720bb4b0143378a052b568697ce3abe6/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=bd6b80c9720bb4b0143378a052b568697ce3abe6", "patch": "@@ -88,12 +88,8 @@ extern \"C\" CDECL void\n upcall_fail(char const *expr,\n             char const *file,\n             size_t line) {\n-    try {\n-        s_fail_args args = {expr,file,line};\n-        UPCALL_SWITCH_STACK(&args, upcall_s_fail);\n-    } catch (rust_task*) {\n-        throw;\n-    }\n+    s_fail_args args = {expr,file,line};\n+    UPCALL_SWITCH_STACK(&args, upcall_s_fail);\n }\n \n /**********************************************************************\n@@ -536,7 +532,18 @@ upcall_rust_personality(int version,\n     s_rust_personality_args args = {(_Unwind_Reason_Code)0,\n                                     version, actions, exception_class,\n                                     ue_header, context};\n-    UPCALL_SWITCH_STACK(&args, upcall_s_rust_personality);\n+    rust_task *task = rust_scheduler::get_task();\n+\n+    // The personality function is run on the stack of the\n+    // last function that threw or landed, which is going\n+    // to sometimes be the C stack. If we're on the Rust stack\n+    // then switch to the C stack.\n+\n+    if (task->on_rust_stack()) {\n+        UPCALL_SWITCH_STACK(&args, upcall_s_rust_personality);\n+    } else {\n+        upcall_s_rust_personality(&args);\n+    }\n     return args.retval;\n }\n "}]}