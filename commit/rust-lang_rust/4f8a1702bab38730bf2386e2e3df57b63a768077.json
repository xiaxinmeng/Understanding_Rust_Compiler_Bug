{"sha": "4f8a1702bab38730bf2386e2e3df57b63a768077", "node_id": "C_kwDOAAsO6NoAKDRmOGExNzAyYmFiMzg3MzBiZjIzODZlMmUzZGY1N2I2M2E3NjgwNzc", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-11T04:37:21Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-11T10:46:41Z"}, "message": "Add a second level to the AST size reporting.\n\nThis tells you which variants of the enums are most common, which is\nvery useful. I've only done it for the AST for now, HIR can be done\nlater.", "tree": {"sha": "1b9e5b2dc974f040a13314f783fb4c9dd6bd7f5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b9e5b2dc974f040a13314f783fb4c9dd6bd7f5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f8a1702bab38730bf2386e2e3df57b63a768077", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f8a1702bab38730bf2386e2e3df57b63a768077", "html_url": "https://github.com/rust-lang/rust/commit/4f8a1702bab38730bf2386e2e3df57b63a768077", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f8a1702bab38730bf2386e2e3df57b63a768077/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85c749266d1e9a38a9fd9c45ef417d0d464ef634", "url": "https://api.github.com/repos/rust-lang/rust/commits/85c749266d1e9a38a9fd9c45ef417d0d464ef634", "html_url": "https://github.com/rust-lang/rust/commit/85c749266d1e9a38a9fd9c45ef417d0d464ef634"}], "stats": {"total": 282, "additions": 246, "deletions": 36}, "files": [{"sha": "ec070e6a9c5c63fdaabb85f126de05822fd4e12f", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 184, "deletions": 34, "changes": 218, "blob_url": "https://github.com/rust-lang/rust/blob/4f8a1702bab38730bf2386e2e3df57b63a768077/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8a1702bab38730bf2386e2e3df57b63a768077/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=4f8a1702bab38730bf2386e2e3df57b63a768077", "patch": "@@ -21,11 +21,28 @@ enum Id {\n     None,\n }\n \n-struct NodeData {\n+struct NodeStats {\n     count: usize,\n     size: usize,\n }\n \n+impl NodeStats {\n+    fn new() -> NodeStats {\n+        NodeStats { count: 0, size: 0 }\n+    }\n+}\n+\n+struct Node {\n+    stats: NodeStats,\n+    subnodes: FxHashMap<&'static str, NodeStats>,\n+}\n+\n+impl Node {\n+    fn new() -> Node {\n+        Node { stats: NodeStats::new(), subnodes: FxHashMap::default() }\n+    }\n+}\n+\n /// This type measures the size of AST and HIR nodes, by implementing the AST\n /// and HIR `Visitor` traits. But we don't measure every visited type because\n /// that could cause double counting.\n@@ -45,14 +62,14 @@ struct NodeData {\n /// unfortunate.\n struct StatCollector<'k> {\n     krate: Option<Map<'k>>,\n-    data: FxHashMap<&'static str, NodeData>,\n+    nodes: FxHashMap<&'static str, Node>,\n     seen: FxHashSet<Id>,\n }\n \n pub fn print_hir_stats(tcx: TyCtxt<'_>) {\n     let mut collector = StatCollector {\n         krate: Some(tcx.hir()),\n-        data: FxHashMap::default(),\n+        nodes: FxHashMap::default(),\n         seen: FxHashSet::default(),\n     };\n     tcx.hir().walk_toplevel_module(&mut collector);\n@@ -64,47 +81,82 @@ pub fn print_ast_stats(krate: &ast::Crate, title: &str) {\n     use rustc_ast::visit::Visitor;\n \n     let mut collector =\n-        StatCollector { krate: None, data: FxHashMap::default(), seen: FxHashSet::default() };\n+        StatCollector { krate: None, nodes: FxHashMap::default(), seen: FxHashSet::default() };\n     collector.visit_crate(krate);\n     collector.print(title);\n }\n \n impl<'k> StatCollector<'k> {\n-    fn record<T>(&mut self, label: &'static str, id: Id, node: &T) {\n+    // Record a top-level node.\n+    fn record<T>(&mut self, label: &'static str, id: Id, val: &T) {\n+        self.record_inner(label, None, id, val);\n+    }\n+\n+    // Record a two-level entry, with a top-level enum type and a variant.\n+    fn record_variant<T>(&mut self, label1: &'static str, label2: &'static str, id: Id, val: &T) {\n+        self.record_inner(label1, Some(label2), id, val);\n+    }\n+\n+    fn record_inner<T>(\n+        &mut self,\n+        label1: &'static str,\n+        label2: Option<&'static str>,\n+        id: Id,\n+        val: &T,\n+    ) {\n         if id != Id::None && !self.seen.insert(id) {\n             return;\n         }\n \n-        let entry = self.data.entry(label).or_insert(NodeData { count: 0, size: 0 });\n+        let node = self.nodes.entry(label1).or_insert(Node::new());\n+        node.stats.count += 1;\n+        node.stats.size = std::mem::size_of_val(val);\n \n-        entry.count += 1;\n-        entry.size = std::mem::size_of_val(node);\n+        if let Some(label2) = label2 {\n+            let subnode = node.subnodes.entry(label2).or_insert(NodeStats::new());\n+            subnode.count += 1;\n+            subnode.size = std::mem::size_of_val(val);\n+        }\n     }\n \n     fn print(&self, title: &str) {\n-        let mut stats: Vec<_> = self.data.iter().collect();\n-\n-        stats.sort_by_key(|&(_, ref d)| d.count * d.size);\n+        let mut nodes: Vec<_> = self.nodes.iter().collect();\n+        nodes.sort_by_key(|&(_, ref node)| node.stats.count * node.stats.size);\n \n-        let total_size = stats.iter().map(|(_, data)| data.count * data.size).sum();\n+        let total_size = nodes.iter().map(|(_, node)| node.stats.count * node.stats.size).sum();\n \n         eprintln!(\"\\n{}\\n\", title);\n \n         eprintln!(\"{:<18}{:>18}{:>14}{:>14}\", \"Name\", \"Accumulated Size\", \"Count\", \"Item Size\");\n         eprintln!(\"----------------------------------------------------------------\");\n \n-        let percent = |m, n| { (m * 100) as f64 / n as f64 };\n+        let percent = |m, n| (m * 100) as f64 / n as f64;\n \n-        for (label, data) in stats {\n-            let size = data.count * data.size;\n+        for (label, node) in nodes {\n+            let size = node.stats.count * node.stats.size;\n             eprintln!(\n                 \"{:<18}{:>10} ({:4.1}%){:>14}{:>14}\",\n                 label,\n                 to_readable_str(size),\n                 percent(size, total_size),\n-                to_readable_str(data.count),\n-                to_readable_str(data.size)\n+                to_readable_str(node.stats.count),\n+                to_readable_str(node.stats.size)\n             );\n+            if !node.subnodes.is_empty() {\n+                let mut subnodes: Vec<_> = node.subnodes.iter().collect();\n+                subnodes.sort_by_key(|&(_, ref subnode)| subnode.count * subnode.size);\n+\n+                for (label, subnode) in subnodes {\n+                    let size = subnode.count * subnode.size;\n+                    eprintln!(\n+                        \"- {:<18}{:>10} ({:4.1}%){:>14}\",\n+                        label,\n+                        to_readable_str(size),\n+                        percent(size, total_size),\n+                        to_readable_str(subnode.count),\n+                    );\n+                }\n+            }\n         }\n         eprintln!(\"----------------------------------------------------------------\");\n         eprintln!(\"{:<18}{:>10}\\n\", \"Total\", to_readable_str(total_size));\n@@ -268,14 +320,54 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     }\n }\n \n+// Used to avoid boilerplate for types with many variants.\n+macro_rules! record_variants {\n+    (\n+        ($self:ident, $val:expr, $kind:expr, $ty:ty, $tykind:ident), // mandatory pieces\n+        [$($variant:ident),*]\n+    ) => {\n+        match $kind {\n+            $(\n+                ast::$tykind::$variant { .. } => {\n+                    $self.record_variant(stringify!($ty), stringify!($variant), Id::None, $val)\n+                }\n+            )*\n+        }\n+    };\n+}\n+\n impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n     fn visit_foreign_item(&mut self, i: &'v ast::ForeignItem) {\n-        self.record(\"ForeignItem\", Id::None, i);\n+        record_variants!(\n+            (self, i, i.kind, ForeignItem, ForeignItemKind),\n+            [Static, Fn, TyAlias, MacCall]\n+        );\n         ast_visit::walk_foreign_item(self, i)\n     }\n \n     fn visit_item(&mut self, i: &'v ast::Item) {\n-        self.record(\"Item\", Id::None, i);\n+        record_variants!(\n+            (self, i, i.kind, Item, ItemKind),\n+            [\n+                ExternCrate,\n+                Use,\n+                Static,\n+                Const,\n+                Fn,\n+                Mod,\n+                ForeignMod,\n+                GlobalAsm,\n+                TyAlias,\n+                Enum,\n+                Struct,\n+                Union,\n+                Trait,\n+                TraitAlias,\n+                Impl,\n+                MacCall,\n+                MacroDef\n+            ]\n+        );\n         ast_visit::walk_item(self, i)\n     }\n \n@@ -290,7 +382,10 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_stmt(&mut self, s: &'v ast::Stmt) {\n-        self.record(\"Stmt\", Id::None, s);\n+        record_variants!(\n+            (self, s, s.kind, Stmt, StmtKind),\n+            [Local, Item, Expr, Semi, Empty, MacCall]\n+        );\n         ast_visit::walk_stmt(self, s)\n     }\n \n@@ -305,17 +400,66 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_pat(&mut self, p: &'v ast::Pat) {\n-        self.record(\"Pat\", Id::None, p);\n+        record_variants!(\n+            (self, p, p.kind, Pat, PatKind),\n+            [\n+                Wild,\n+                Ident,\n+                Struct,\n+                TupleStruct,\n+                Or,\n+                Path,\n+                Tuple,\n+                Box,\n+                Ref,\n+                Lit,\n+                Range,\n+                Slice,\n+                Rest,\n+                Paren,\n+                MacCall\n+            ]\n+        );\n         ast_visit::walk_pat(self, p)\n     }\n \n-    fn visit_expr(&mut self, ex: &'v ast::Expr) {\n-        self.record(\"Expr\", Id::None, ex);\n-        ast_visit::walk_expr(self, ex)\n+    fn visit_expr(&mut self, e: &'v ast::Expr) {\n+        record_variants!(\n+            (self, e, e.kind, Expr, ExprKind),\n+            [\n+                Box, Array, ConstBlock, Call, MethodCall, Tup, Binary, Unary, Lit, Cast, Type, Let,\n+                If, While, ForLoop, Loop, Match, Closure, Block, Async, Await, TryBlock, Assign,\n+                AssignOp, Field, Index, Range, Underscore, Path, AddrOf, Break, Continue, Ret,\n+                InlineAsm, MacCall, Struct, Repeat, Paren, Try, Yield, Yeet, Err\n+            ]\n+        );\n+        ast_visit::walk_expr(self, e)\n     }\n \n     fn visit_ty(&mut self, t: &'v ast::Ty) {\n-        self.record(\"Ty\", Id::None, t);\n+        record_variants!(\n+            (self, t, t.kind, Ty, TyKind),\n+            [\n+                Slice,\n+                Array,\n+                Ptr,\n+                Rptr,\n+                BareFn,\n+                Never,\n+                Tup,\n+                Path,\n+                TraitObject,\n+                ImplTrait,\n+                Paren,\n+                Typeof,\n+                Infer,\n+                ImplicitSelf,\n+                MacCall,\n+                Err,\n+                CVarArgs\n+            ]\n+        );\n+\n         ast_visit::walk_ty(self, t)\n     }\n \n@@ -325,7 +469,10 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_where_predicate(&mut self, p: &'v ast::WherePredicate) {\n-        self.record(\"WherePredicate\", Id::None, p);\n+        record_variants!(\n+            (self, p, p, WherePredicate, WherePredicate),\n+            [BoundPredicate, RegionPredicate, EqPredicate]\n+        );\n         ast_visit::walk_where_predicate(self, p)\n     }\n \n@@ -334,14 +481,17 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n         ast_visit::walk_fn(self, fk, s)\n     }\n \n-    fn visit_assoc_item(&mut self, item: &'v ast::AssocItem, ctxt: ast_visit::AssocCtxt) {\n-        self.record(\"AssocItem\", Id::None, item);\n-        ast_visit::walk_assoc_item(self, item, ctxt);\n+    fn visit_assoc_item(&mut self, i: &'v ast::AssocItem, ctxt: ast_visit::AssocCtxt) {\n+        record_variants!(\n+            (self, i, i.kind, AssocItem, AssocItemKind),\n+            [Const, Fn, TyAlias, MacCall]\n+        );\n+        ast_visit::walk_assoc_item(self, i, ctxt);\n     }\n \n-    fn visit_param_bound(&mut self, bounds: &'v ast::GenericBound, _ctxt: BoundKind) {\n-        self.record(\"GenericBound\", Id::None, bounds);\n-        ast_visit::walk_param_bound(self, bounds)\n+    fn visit_param_bound(&mut self, b: &'v ast::GenericBound, _ctxt: BoundKind) {\n+        record_variants!((self, b, b, GenericBound, GenericBound), [Trait, Outlives]);\n+        ast_visit::walk_param_bound(self, b)\n     }\n \n     fn visit_field_def(&mut self, s: &'v ast::FieldDef) {\n@@ -369,12 +519,12 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n     // common, so we implement `visit_generic_args` and tolerate the double\n     // counting in the former case.\n     fn visit_generic_args(&mut self, sp: Span, g: &'v ast::GenericArgs) {\n-        self.record(\"GenericArgs\", Id::None, g);\n+        record_variants!((self, g, g, GenericArgs, GenericArgs), [AngleBracketed, Parenthesized]);\n         ast_visit::walk_generic_args(self, sp, g)\n     }\n \n     fn visit_attribute(&mut self, attr: &'v ast::Attribute) {\n-        self.record(\"Attribute\", Id::None, attr);\n+        record_variants!((self, attr, attr.kind, Attribute, AttrKind), [Normal, DocComment]);\n         ast_visit::walk_attribute(self, attr)\n     }\n "}, {"sha": "a24b3ada57e59547d67f0e7761b38984dccdd12f", "filename": "src/test/ui/stats/hir-stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f8a1702bab38730bf2386e2e3df57b63a768077/src%2Ftest%2Fui%2Fstats%2Fhir-stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8a1702bab38730bf2386e2e3df57b63a768077/src%2Ftest%2Fui%2Fstats%2Fhir-stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.rs?ref=4f8a1702bab38730bf2386e2e3df57b63a768077", "patch": "@@ -2,8 +2,8 @@\n // compile-flags: -Zhir-stats\n // only-x86_64\n \n-// The aim here is to include at least one of every different type of AST/HIR\n-// node reported by `-Zhir-stats`.\n+// The aim here is to include at least one of every different type of top-level\n+// AST/HIR node reported by `-Zhir-stats`.\n \n #![allow(dead_code)]\n "}, {"sha": "f4874408c909400c5ad114e4ea452a261aa34894", "filename": "src/test/ui/stats/hir-stats.stderr", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4f8a1702bab38730bf2386e2e3df57b63a768077/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f8a1702bab38730bf2386e2e3df57b63a768077/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr?ref=4f8a1702bab38730bf2386e2e3df57b63a768077", "patch": "@@ -5,26 +5,55 @@ Name                Accumulated Size         Count     Item Size\n ----------------------------------------------------------------\n ExprField                 48 ( 0.5%)             1            48\n GenericArgs               64 ( 0.7%)             1            64\n+- AngleBracketed            64 ( 0.7%)             1\n Local                     72 ( 0.8%)             1            72\n WherePredicate            72 ( 0.8%)             1            72\n+- BoundPredicate            72 ( 0.8%)             1\n Crate                     72 ( 0.8%)             1            72\n Arm                       96 ( 1.0%)             2            48\n FieldDef                 160 ( 1.7%)             2            80\n ForeignItem              160 ( 1.7%)             1           160\n+- Fn                       160 ( 1.7%)             1\n Stmt                     160 ( 1.7%)             5            32\n+- Local                     32 ( 0.3%)             1\n+- MacCall                   32 ( 0.3%)             1\n+- Expr                      96 ( 1.0%)             3\n Param                    160 ( 1.7%)             4            40\n FnDecl                   200 ( 2.2%)             5            40\n Variant                  240 ( 2.6%)             2           120\n Block                    288 ( 3.1%)             6            48\n Attribute                304 ( 3.3%)             2           152\n+- Normal                   152 ( 1.7%)             1\n+- DocComment               152 ( 1.7%)             1\n GenericBound             352 ( 3.8%)             4            88\n+- Trait                    352 ( 3.8%)             4\n GenericParam             520 ( 5.7%)             5           104\n AssocItem                640 ( 7.0%)             4           160\n+- TyAlias                  320 ( 3.5%)             2\n+- Fn                       320 ( 3.5%)             2\n PathSegment              720 ( 7.9%)            30            24\n Expr                     832 ( 9.1%)             8           104\n+- Path                     104 ( 1.1%)             1\n+- Match                    104 ( 1.1%)             1\n+- Struct                   104 ( 1.1%)             1\n+- Lit                      208 ( 2.3%)             2\n+- Block                    312 ( 3.4%)             3\n Pat                      840 ( 9.2%)             7           120\n+- Struct                   120 ( 1.3%)             1\n+- Wild                     120 ( 1.3%)             1\n+- Ident                    600 ( 6.6%)             5\n Ty                     1_344 (14.7%)            14            96\n+- Rptr                      96 ( 1.0%)             1\n+- Ptr                       96 ( 1.0%)             1\n+- ImplicitSelf             192 ( 2.1%)             2\n+- Path                     960 (10.5%)            10\n Item                   1_800 (19.7%)             9           200\n+- Trait                    200 ( 2.2%)             1\n+- Enum                     200 ( 2.2%)             1\n+- ForeignMod               200 ( 2.2%)             1\n+- Impl                     200 ( 2.2%)             1\n+- Fn                       400 ( 4.4%)             2\n+- Use                      600 ( 6.6%)             3\n ----------------------------------------------------------------\n Total                  9_144\n \n@@ -35,27 +64,58 @@ Name                Accumulated Size         Count     Item Size\n ----------------------------------------------------------------\n ExprField                 48 ( 0.5%)             1            48\n GenericArgs               64 ( 0.6%)             1            64\n+- AngleBracketed            64 ( 0.6%)             1\n Local                     72 ( 0.7%)             1            72\n WherePredicate            72 ( 0.7%)             1            72\n+- BoundPredicate            72 ( 0.7%)             1\n Crate                     72 ( 0.7%)             1            72\n Arm                       96 ( 0.9%)             2            48\n InlineAsm                120 ( 1.2%)             1           120\n FieldDef                 160 ( 1.6%)             2            80\n ForeignItem              160 ( 1.6%)             1           160\n+- Fn                       160 ( 1.6%)             1\n Stmt                     160 ( 1.6%)             5            32\n+- Local                     32 ( 0.3%)             1\n+- Semi                      32 ( 0.3%)             1\n+- Expr                      96 ( 0.9%)             3\n Param                    160 ( 1.6%)             4            40\n FnDecl                   200 ( 2.0%)             5            40\n Variant                  240 ( 2.4%)             2           120\n Block                    288 ( 2.8%)             6            48\n GenericBound             352 ( 3.5%)             4            88\n+- Trait                    352 ( 3.5%)             4\n GenericParam             520 ( 5.1%)             5           104\n Attribute                608 ( 6.0%)             4           152\n+- DocComment               152 ( 1.5%)             1\n+- Normal                   456 ( 4.5%)             3\n AssocItem                640 ( 6.3%)             4           160\n+- TyAlias                  320 ( 3.2%)             2\n+- Fn                       320 ( 3.2%)             2\n PathSegment              792 ( 7.8%)            33            24\n Pat                      840 ( 8.3%)             7           120\n+- Struct                   120 ( 1.2%)             1\n+- Wild                     120 ( 1.2%)             1\n+- Ident                    600 ( 5.9%)             5\n Expr                     936 ( 9.2%)             9           104\n+- Path                     104 ( 1.0%)             1\n+- Match                    104 ( 1.0%)             1\n+- Struct                   104 ( 1.0%)             1\n+- InlineAsm                104 ( 1.0%)             1\n+- Lit                      208 ( 2.1%)             2\n+- Block                    312 ( 3.1%)             3\n Ty                     1_344 (13.2%)            14            96\n+- Rptr                      96 ( 0.9%)             1\n+- Ptr                       96 ( 0.9%)             1\n+- ImplicitSelf             192 ( 1.9%)             2\n+- Path                     960 ( 9.5%)            10\n Item                   2_200 (21.7%)            11           200\n+- Trait                    200 ( 2.0%)             1\n+- Enum                     200 ( 2.0%)             1\n+- ExternCrate              200 ( 2.0%)             1\n+- ForeignMod               200 ( 2.0%)             1\n+- Impl                     200 ( 2.0%)             1\n+- Fn                       400 ( 3.9%)             2\n+- Use                      800 ( 7.9%)             4\n ----------------------------------------------------------------\n Total                 10_144\n "}]}