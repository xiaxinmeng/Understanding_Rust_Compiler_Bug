{"sha": "4d5441fe3dc0869b3f6637e6320c9091b8d9efa0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNTQ0MWZlM2RjMDg2OWIzZjY2MzdlNjMyMGM5MDkxYjhkOWVmYTA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-08T14:14:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-03-10T16:15:13Z"}, "message": "add comments and remove unused code paths", "tree": {"sha": "052ecc24dac51b49e172fccbf8ef15f65c022870", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/052ecc24dac51b49e172fccbf8ef15f65c022870"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d5441fe3dc0869b3f6637e6320c9091b8d9efa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d5441fe3dc0869b3f6637e6320c9091b8d9efa0", "html_url": "https://github.com/rust-lang/rust/commit/4d5441fe3dc0869b3f6637e6320c9091b8d9efa0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d5441fe3dc0869b3f6637e6320c9091b8d9efa0/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b6b544d6512bfac7c926b3d93246fd14a56eb1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b6b544d6512bfac7c926b3d93246fd14a56eb1d", "html_url": "https://github.com/rust-lang/rust/commit/4b6b544d6512bfac7c926b3d93246fd14a56eb1d"}], "stats": {"total": 84, "additions": 49, "deletions": 35}, "files": [{"sha": "8be5d4327e72ec2c134e7746ecaa11985fc69b3c", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4d5441fe3dc0869b3f6637e6320c9091b8d9efa0/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5441fe3dc0869b3f6637e6320c9091b8d9efa0/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=4d5441fe3dc0869b3f6637e6320c9091b8d9efa0", "patch": "@@ -77,12 +77,37 @@ impl DepGraph {\n         op()\n     }\n \n+    /// Starts a new dep-graph task. Dep-graph tasks are specified\n+    /// using a free function (`task`) and **not** a closure -- this\n+    /// is intentional because we want to exercise tight control over\n+    /// what state they have access to. In particular, we want to\n+    /// prevent implicit 'leaks' of tracked state into the task (which\n+    /// could then be read without generating correct edges in the\n+    /// dep-graph -- see the [README] for more details on the\n+    /// dep-graph). To this end, the task function gets exactly two\n+    /// pieces of state: the context `cx` and an argument `arg`. Both\n+    /// of these bits of state must be of some type that implements\n+    /// `DepGraphSafe` and hence does not leak.\n+    ///\n+    /// The choice of two arguments is not fundamental. One argument\n+    /// would work just as well, since multiple values can be\n+    /// collected using tuples. However, using two arguments works out\n+    /// to be quite convenient, since it is common to need a context\n+    /// (`cx`) and some argument (e.g., a `DefId` identifying what\n+    /// item to process).\n+    ///\n+    /// For cases where you need some other number of arguments:\n+    ///\n+    /// - If you only need one argument, just use `()` for the `arg`\n+    ///   parameter.\n+    /// - If you need 3+ arguments, use a tuple for the\n+    ///   `arg` parameter.\n+    ///\n+    /// [README]: README.md\n     pub fn with_task<C, A, R>(&self, key: DepNode<DefId>, cx: C, arg: A, task: fn(C, A) -> R) -> R\n         where C: DepGraphSafe, A: DepGraphSafe\n     {\n         let _task = self.in_task(key);\n-        cx.read(self);\n-        arg.read(self);\n         task(cx, arg)\n     }\n "}, {"sha": "a9f0a44e4208c031f7ade3e7bd5756ba3d103b9a", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d5441fe3dc0869b3f6637e6320c9091b8d9efa0/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5441fe3dc0869b3f6637e6320c9091b8d9efa0/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=4d5441fe3dc0869b3f6637e6320c9091b8d9efa0", "patch": "@@ -15,7 +15,6 @@ mod edges;\n mod graph;\n mod query;\n mod raii;\n-#[macro_use]\n mod safe;\n mod shadow;\n mod thread;"}, {"sha": "f85f0338ed997b6c7e0e5f260679d14797dc301b", "filename": "src/librustc/dep_graph/safe.rs", "status": "modified", "additions": 22, "deletions": 29, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4d5441fe3dc0869b3f6637e6320c9091b8d9efa0/src%2Flibrustc%2Fdep_graph%2Fsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5441fe3dc0869b3f6637e6320c9091b8d9efa0/src%2Flibrustc%2Fdep_graph%2Fsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fsafe.rs?ref=4d5441fe3dc0869b3f6637e6320c9091b8d9efa0", "patch": "@@ -13,58 +13,51 @@ use hir::def_id::DefId;\n use syntax::ast::NodeId;\n use ty::TyCtxt;\n \n-use super::graph::DepGraph;\n-\n-/// The `DepGraphSafe` auto trait is used to specify what kinds of\n-/// values are safe to \"leak\" into a task.  The idea is that this\n-/// should be only be implemented for things like the tcx, which will\n-/// create reads in the dep-graph whenever the trait loads anything\n-/// that might depend on the input program.\n+/// The `DepGraphSafe` trait is used to specify what kinds of values\n+/// are safe to \"leak\" into a task. The idea is that this should be\n+/// only be implemented for things like the tcx as well as various id\n+/// types, which will create reads in the dep-graph whenever the trait\n+/// loads anything that might depend on the input program.\n pub trait DepGraphSafe {\n-    fn read(&self, graph: &DepGraph);\n }\n \n+/// A `BodyId` on its own doesn't give access to any particular state.\n+/// You must fetch the state from the various maps or generate\n+/// on-demand queries, all of which create reads.\n impl DepGraphSafe for BodyId {\n-    fn read(&self, _graph: &DepGraph) {\n-        // a BodyId on its own doesn't give access to any particular state\n-    }\n }\n \n+/// A `NodeId` on its own doesn't give access to any particular state.\n+/// You must fetch the state from the various maps or generate\n+/// on-demand queries, all of which create reads.\n impl DepGraphSafe for NodeId {\n-    fn read(&self, _graph: &DepGraph) {\n-        // a DefId doesn't give any particular state\n-    }\n }\n \n+/// A `DefId` on its own doesn't give access to any particular state.\n+/// You must fetch the state from the various maps or generate\n+/// on-demand queries, all of which create reads.\n impl DepGraphSafe for DefId {\n-    fn read(&self, _graph: &DepGraph) {\n-        // a DefId doesn't give any particular state\n-    }\n }\n \n+/// The type context itself can be used to access all kinds of tracked\n+/// state, but those accesses should always generate read events.\n impl<'a, 'gcx, 'tcx> DepGraphSafe for TyCtxt<'a, 'gcx, 'tcx> {\n-    fn read(&self, _graph: &DepGraph) {\n-    }\n }\n \n+/// Tuples make it easy to build up state.\n impl<A, B> DepGraphSafe for (A, B)\n     where A: DepGraphSafe, B: DepGraphSafe\n {\n-    fn read(&self, graph: &DepGraph) {\n-        self.0.read(graph);\n-        self.1.read(graph);\n-    }\n }\n \n+/// No data here! :)\n impl DepGraphSafe for () {\n-    fn read(&self, _graph: &DepGraph) {\n-    }\n }\n \n-/// A convenient override. We should phase out usage of this over\n-/// time.\n+/// A convenient override that lets you pass arbitrary state into a\n+/// task. Every use should be accompanied by a comment explaining why\n+/// it makes sense (or how it could be refactored away in the future).\n pub struct AssertDepGraphSafe<T>(pub T);\n+\n impl<T> DepGraphSafe for AssertDepGraphSafe<T> {\n-    fn read(&self, _graph: &DepGraph) {\n-    }\n }"}, {"sha": "c4fccdcb9eb6220ce01c6727797aa487ca098e88", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d5441fe3dc0869b3f6637e6320c9091b8d9efa0/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5441fe3dc0869b3f6637e6320c9091b8d9efa0/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=4d5441fe3dc0869b3f6637e6320c9091b8d9efa0", "patch": "@@ -70,7 +70,6 @@ mod macros;\n pub mod diagnostics;\n \n pub mod cfg;\n-#[macro_use]\n pub mod dep_graph;\n pub mod hir;\n pub mod infer;"}, {"sha": "52851ea995d4b7c42edd769695931a5fc707a064", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5441fe3dc0869b3f6637e6320c9091b8d9efa0/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5441fe3dc0869b3f6637e6320c9091b8d9efa0/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=4d5441fe3dc0869b3f6637e6320c9091b8d9efa0", "patch": "@@ -276,8 +276,6 @@ pub struct CrateContext<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> DepGraphSafe for CrateContext<'a, 'tcx> {\n-    fn read(&self, _graph: &DepGraph) {\n-    }\n }\n \n pub struct CrateContextIterator<'a, 'tcx: 'a> {"}]}