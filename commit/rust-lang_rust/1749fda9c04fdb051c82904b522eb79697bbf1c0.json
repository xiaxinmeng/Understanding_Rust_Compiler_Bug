{"sha": "1749fda9c04fdb051c82904b522eb79697bbf1c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NDlmZGE5YzA0ZmRiMDUxYzgyOTA0YjUyMmViNzk2OTdiYmYxYzA=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-27T12:34:37Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-09-05T04:28:52Z"}, "message": "Factor write_ty out of more pattern-checking functions", "tree": {"sha": "6070ff7bccc7181e8316f57d37f363504868cd2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6070ff7bccc7181e8316f57d37f363504868cd2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1749fda9c04fdb051c82904b522eb79697bbf1c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1749fda9c04fdb051c82904b522eb79697bbf1c0", "html_url": "https://github.com/rust-lang/rust/commit/1749fda9c04fdb051c82904b522eb79697bbf1c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1749fda9c04fdb051c82904b522eb79697bbf1c0/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5ff28cd14bf90b45f97d370538d792693036b27", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5ff28cd14bf90b45f97d370538d792693036b27", "html_url": "https://github.com/rust-lang/rust/commit/c5ff28cd14bf90b45f97d370538d792693036b27"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "ee66597e72a469f82a43045bf728ca68ca160361", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1749fda9c04fdb051c82904b522eb79697bbf1c0/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1749fda9c04fdb051c82904b522eb79697bbf1c0/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=1749fda9c04fdb051c82904b522eb79697bbf1c0", "patch": "@@ -150,14 +150,17 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 self.write_ty(pat.id, typ);\n             }\n             PatKind::TupleStruct(ref path, ref subpats, ddpos) => {\n-                self.check_pat_tuple_struct(pat, path, &subpats, ddpos, expected);\n+                let pat_ty = self.check_pat_tuple_struct(pat, path, &subpats, ddpos, expected);\n+                write_ty(pat.id, pat_ty);\n             }\n             PatKind::Path(ref opt_qself, ref path) => {\n                 let opt_qself_ty = opt_qself.as_ref().map(|qself| self.to_ty(&qself.ty));\n-                self.check_pat_path(pat, opt_qself_ty, path, expected);\n+                let pat_ty = self.check_pat_path(pat, opt_qself_ty, path, expected);\n+                write_ty(pat.id, pat_ty);\n             }\n             PatKind::Struct(ref path, ref fields, etc) => {\n-                self.check_pat_struct(pat, path, fields, etc, expected);\n+                let pat_ty = self.check_pat_struct(pat, path, fields, etc, expected);\n+                write_ty(pat.id, pat_ty);\n             }\n             PatKind::Tuple(ref elements, ddpos) => {\n                 let mut expected_len = elements.len();\n@@ -481,40 +484,38 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         path: &hir::Path,\n                         fields: &'gcx [Spanned<hir::FieldPat>],\n                         etc: bool,\n-                        expected: Ty<'tcx>)\n+                        expected: Ty<'tcx>) -> Ty<'tcx>\n     {\n         // Resolve the path and check the definition for errors.\n         let (variant, pat_ty) = if let Some(variant_ty) = self.check_struct_path(path, pat.id,\n                                                                                  pat.span) {\n             variant_ty\n         } else {\n-            self.write_error(pat.id);\n             for field in fields {\n                 self.check_pat(&field.node.pat, self.tcx.types.err);\n             }\n-            return;\n+            return tcx.types.err;\n         };\n-        self.write_ty(pat.id, pat_ty);\n \n         // Type check the path.\n         self.demand_eqtype(pat.span, expected, pat_ty);\n \n         // Type check subpatterns.\n         self.check_struct_pat_fields(pat_ty, pat.span, variant, fields, etc);\n+        pat_ty\n     }\n \n     fn check_pat_path(&self,\n                       pat: &hir::Pat,\n                       opt_self_ty: Option<Ty<'tcx>>,\n                       path: &hir::Path,\n-                      expected: Ty<'tcx>)\n+                      expected: Ty<'tcx>) -> Ty<'tcx>\n     {\n         let tcx = self.tcx;\n         let report_unexpected_def = || {\n             span_err!(tcx.sess, pat.span, E0533,\n                       \"`{}` does not name a unit variant, unit struct or a constant\",\n                       pprust::path_to_string(path));\n-            self.write_error(pat.id);\n         };\n \n         // Resolve the path and check the definition for errors.\n@@ -523,18 +524,17 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         match def {\n             Def::Err => {\n                 self.set_tainted_by_errors();\n-                self.write_error(pat.id);\n-                return;\n+                return tcx.types.err;\n             }\n             Def::Method(..) => {\n                 report_unexpected_def();\n-                return;\n+                return tcx.types.err;\n             }\n             Def::Variant(..) | Def::Struct(..) => {\n                 let variant = tcx.expect_variant_def(def);\n                 if variant.kind != VariantKind::Unit {\n                     report_unexpected_def();\n-                    return;\n+                    return tcx.types.err;\n                 }\n             }\n             Def::Const(..) | Def::AssociatedConst(..) => {} // OK\n@@ -543,20 +543,19 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         // Type check the path.\n         let pat_ty = self.instantiate_value_path(segments, opt_ty, def, pat.span, pat.id);\n-        self.write_ty(pat.id, pat_ty);\n         self.demand_suptype(pat.span, expected, pat_ty);\n+        pat_ty\n     }\n \n     fn check_pat_tuple_struct(&self,\n                               pat: &hir::Pat,\n                               path: &hir::Path,\n                               subpats: &'gcx [P<hir::Pat>],\n                               ddpos: Option<usize>,\n-                              expected: Ty<'tcx>)\n+                              expected: Ty<'tcx>) -> Ty<'tcx>\n     {\n         let tcx = self.tcx;\n         let on_error = || {\n-            self.write_error(pat.id);\n             for pat in subpats {\n                 self.check_pat(&pat, tcx.types.err);\n             }\n@@ -580,11 +579,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             Def::Err => {\n                 self.set_tainted_by_errors();\n                 on_error();\n-                return;\n+                return tcx.types.err;\n             }\n             Def::Const(..) | Def::AssociatedConst(..) | Def::Method(..) => {\n                 report_unexpected_def(false);\n-                return;\n+                return tcx.types.err;\n             }\n             Def::Variant(..) | Def::Struct(..) => {\n                 tcx.expect_variant_def(def)\n@@ -597,21 +596,18 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             report_unexpected_def(true);\n         } else if variant.kind != VariantKind::Tuple {\n             report_unexpected_def(false);\n-            return;\n+            return tcx.types.err;\n         }\n \n         // Type check the path.\n         let pat_ty = self.instantiate_value_path(segments, opt_ty, def, pat.span, pat.id);\n-        self.write_ty(pat.id, pat_ty);\n-\n         let pat_ty = if pat_ty.is_fn() {\n             // Replace constructor type with constructed type for tuple struct patterns.\n             tcx.no_late_bound_regions(&pat_ty.fn_ret()).unwrap()\n         } else {\n             // Leave the type as is for unit structs (backward compatibility).\n             pat_ty\n         };\n-        self.write_ty(pat.id, pat_ty);\n         self.demand_eqtype(pat.span, expected, pat_ty);\n \n         // Type check subpatterns.\n@@ -644,7 +640,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                variant.fields.len(), fields_ending, subpats.len()))\n                 .emit();\n             on_error();\n+            return tcx.types.err;\n         }\n+        pat_ty\n     }\n \n     fn check_struct_pat_fields(&self,"}]}