{"sha": "b5447b50b053c27a74dbb21b965b0da397cb5560", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NDQ3YjUwYjA1M2MyN2E3NGRiYjIxYjk2NWIwZGEzOTdjYjU1NjA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-23T23:19:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-23T23:19:57Z"}, "message": "Rollup merge of #57817 - davidtwco:issue-54521, r=estebank\n\nAdd error for trailing angle brackets.\n\nFixes #54521.\n\nThis PR adds a error (and accompanying machine applicable\nsuggestion) for trailing angle brackets on function calls with a\nturbofish.\n\nr? @estebank", "tree": {"sha": "cbb18755809614d42f1bb60d01967b2f5dd43193", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbb18755809614d42f1bb60d01967b2f5dd43193"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5447b50b053c27a74dbb21b965b0da397cb5560", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcSPadCRBK7hj4Ov3rIwAAdHIIABGUP5/ZVJbETwmrrVExBJH8\nAxKhV9ixrZFVKBUEi4JOIkZWDyKhgBgoNMCz/aRyMhlrXXwDgoEOIddb+Bw7TRP6\nvKGuGaRhj2lCFGCbnbhXvYX2ssJkpBWiCUZV0kNISRXiY6v5/qLCSjBegOycAXvb\nyEmT6MLzXei5Gfz71fx54d8hJR/jteWuKqzeZ1faBtz3+B0mYqYbQouJyax6jWAB\nbluwpf7TuVhaK/9IqIp0iT7il12zRFsKrk8ab5Tw+Zaq21fR17Hqgv07eUutMT9f\n8bo5GzxoYoXGFLUEMFOyoA4EDQuRI6rQZl/fcGf64t/TICCaxqjXCYbXjyoBRas=\n=igJ5\n-----END PGP SIGNATURE-----\n", "payload": "tree cbb18755809614d42f1bb60d01967b2f5dd43193\nparent da182a0fe705d80f1480b321fd20d8a3ba94e2b8\nparent 914d142c02b558a597055c66a0e7e09115416211\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1548285597 +0100\ncommitter GitHub <noreply@github.com> 1548285597 +0100\n\nRollup merge of #57817 - davidtwco:issue-54521, r=estebank\n\nAdd error for trailing angle brackets.\n\nFixes #54521.\n\nThis PR adds a error (and accompanying machine applicable\nsuggestion) for trailing angle brackets on function calls with a\nturbofish.\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5447b50b053c27a74dbb21b965b0da397cb5560", "html_url": "https://github.com/rust-lang/rust/commit/b5447b50b053c27a74dbb21b965b0da397cb5560", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5447b50b053c27a74dbb21b965b0da397cb5560/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da182a0fe705d80f1480b321fd20d8a3ba94e2b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/da182a0fe705d80f1480b321fd20d8a3ba94e2b8", "html_url": "https://github.com/rust-lang/rust/commit/da182a0fe705d80f1480b321fd20d8a3ba94e2b8"}, {"sha": "914d142c02b558a597055c66a0e7e09115416211", "url": "https://api.github.com/repos/rust-lang/rust/commits/914d142c02b558a597055c66a0e7e09115416211", "html_url": "https://github.com/rust-lang/rust/commit/914d142c02b558a597055c66a0e7e09115416211"}], "stats": {"total": 304, "additions": 303, "deletions": 1}, "files": [{"sha": "af521848e9057f04beb511691186156bba4cbf6d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b5447b50b053c27a74dbb21b965b0da397cb5560/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5447b50b053c27a74dbb21b965b0da397cb5560/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b5447b50b053c27a74dbb21b965b0da397cb5560", "patch": "@@ -140,6 +140,20 @@ pub enum GenericArgs {\n }\n \n impl GenericArgs {\n+    pub fn is_parenthesized(&self) -> bool {\n+        match *self {\n+            Parenthesized(..) => true,\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn is_angle_bracketed(&self) -> bool {\n+        match *self {\n+            AngleBracketed(..) => true,\n+            _ => false,\n+        }\n+    }\n+\n     pub fn span(&self) -> Span {\n         match *self {\n             AngleBracketed(ref data) => data.span,"}, {"sha": "c7e33a16564280152c54b69bafeeffb219e852b7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 133, "deletions": 1, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/b5447b50b053c27a74dbb21b965b0da397cb5560/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5447b50b053c27a74dbb21b965b0da397cb5560/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b5447b50b053c27a74dbb21b965b0da397cb5560", "patch": "@@ -2188,7 +2188,27 @@ impl<'a> Parser<'a> {\n                            enable_warning: bool)\n                            -> PResult<'a, ()> {\n         loop {\n-            segments.push(self.parse_path_segment(style, enable_warning)?);\n+            let segment = self.parse_path_segment(style, enable_warning)?;\n+            if style == PathStyle::Expr {\n+                // In order to check for trailing angle brackets, we must have finished\n+                // recursing (`parse_path_segment` can indirectly call this function),\n+                // that is, the next token must be the highlighted part of the below example:\n+                //\n+                // `Foo::<Bar as Baz<T>>::Qux`\n+                //                      ^ here\n+                //\n+                // As opposed to the below highlight (if we had only finished the first\n+                // recursion):\n+                //\n+                // `Foo::<Bar as Baz<T>>::Qux`\n+                //                     ^ here\n+                //\n+                // `PathStyle::Expr` is only provided at the root invocation and never in\n+                // `parse_path_segment` to recurse and therefore can be checked to maintain\n+                // this invariant.\n+                self.check_trailing_angle_brackets(&segment, token::ModSep);\n+            }\n+            segments.push(segment);\n \n             if self.is_import_coupler() || !self.eat(&token::ModSep) {\n                 return Ok(());\n@@ -2821,6 +2841,8 @@ impl<'a> Parser<'a> {\n     // Assuming we have just parsed `.`, continue parsing into an expression.\n     fn parse_dot_suffix(&mut self, self_arg: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {\n         let segment = self.parse_path_segment(PathStyle::Expr, true)?;\n+        self.check_trailing_angle_brackets(&segment, token::OpenDelim(token::Paren));\n+\n         Ok(match self.token {\n             token::OpenDelim(token::Paren) => {\n                 // Method call `expr.f()`\n@@ -2848,6 +2870,116 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n+    /// This function checks if there are trailing angle brackets and produces\n+    /// a diagnostic to suggest removing them.\n+    ///\n+    /// ```ignore (diagnostic)\n+    /// let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>>();\n+    ///                                                        ^^ help: remove extra angle brackets\n+    /// ```\n+    fn check_trailing_angle_brackets(&mut self, segment: &PathSegment, end: token::Token) {\n+        // This function is intended to be invoked after parsing a path segment where there are two\n+        // cases:\n+        //\n+        // 1. A specific token is expected after the path segment.\n+        //    eg. `x.foo(`, `x.foo::<u32>(` (parenthesis - method call),\n+        //        `Foo::`, or `Foo::<Bar>::` (mod sep - continued path).\n+        // 2. No specific token is expected after the path segment.\n+        //    eg. `x.foo` (field access)\n+        //\n+        // This function is called after parsing `.foo` and before parsing the token `end` (if\n+        // present). This includes any angle bracket arguments, such as `.foo::<u32>` or\n+        // `Foo::<Bar>`.\n+\n+        // We only care about trailing angle brackets if we previously parsed angle bracket\n+        // arguments. This helps stop us incorrectly suggesting that extra angle brackets be\n+        // removed in this case:\n+        //\n+        // `x.foo >> (3)` (where `x.foo` is a `u32` for example)\n+        //\n+        // This case is particularly tricky as we won't notice it just looking at the tokens -\n+        // it will appear the same (in terms of upcoming tokens) as below (since the `::<u32>` will\n+        // have already been parsed):\n+        //\n+        // `x.foo::<u32>>>(3)`\n+        let parsed_angle_bracket_args = segment.args\n+            .as_ref()\n+            .map(|args| args.is_angle_bracketed())\n+            .unwrap_or(false);\n+\n+        debug!(\n+            \"check_trailing_angle_brackets: parsed_angle_bracket_args={:?}\",\n+            parsed_angle_bracket_args,\n+        );\n+        if !parsed_angle_bracket_args {\n+            return;\n+        }\n+\n+        // Keep the span at the start so we can highlight the sequence of `>` characters to be\n+        // removed.\n+        let lo = self.span;\n+\n+        // We need to look-ahead to see if we have `>` characters without moving the cursor forward\n+        // (since we might have the field access case and the characters we're eating are\n+        // actual operators and not trailing characters - ie `x.foo >> 3`).\n+        let mut position = 0;\n+\n+        // We can encounter `>` or `>>` tokens in any order, so we need to keep track of how\n+        // many of each (so we can correctly pluralize our error messages) and continue to\n+        // advance.\n+        let mut number_of_shr = 0;\n+        let mut number_of_gt = 0;\n+        while self.look_ahead(position, |t| {\n+            trace!(\"check_trailing_angle_brackets: t={:?}\", t);\n+            if *t == token::BinOp(token::BinOpToken::Shr) {\n+                number_of_shr += 1;\n+                true\n+            } else if *t == token::Gt {\n+                number_of_gt += 1;\n+                true\n+            } else {\n+                false\n+            }\n+        }) {\n+            position += 1;\n+        }\n+\n+        // If we didn't find any trailing `>` characters, then we have nothing to error about.\n+        debug!(\n+            \"check_trailing_angle_brackets: number_of_gt={:?} number_of_shr={:?}\",\n+            number_of_gt, number_of_shr,\n+        );\n+        if number_of_gt < 1 && number_of_shr < 1 {\n+            return;\n+        }\n+\n+        // Finally, double check that we have our end token as otherwise this is the\n+        // second case.\n+        if self.look_ahead(position, |t| {\n+            trace!(\"check_trailing_angle_brackets: t={:?}\", t);\n+            *t == end\n+        }) {\n+            // Eat from where we started until the end token so that parsing can continue\n+            // as if we didn't have those extra angle brackets.\n+            self.eat_to_tokens(&[&end]);\n+            let span = lo.until(self.span);\n+\n+            let plural = number_of_gt > 1 || number_of_shr >= 1;\n+            self.diagnostic()\n+                .struct_span_err(\n+                    span,\n+                    &format!(\"unmatched angle bracket{}\", if plural { \"s\" } else { \"\" }),\n+                )\n+                .span_suggestion_with_applicability(\n+                    span,\n+                    &format!(\"remove extra angle bracket{}\", if plural { \"s\" } else { \"\" }),\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n+        }\n+    }\n+\n     fn parse_dot_or_call_expr_with_(&mut self, e0: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {\n         let mut e = e0;\n         let mut hi;"}, {"sha": "d6a14a6e11f674de9723f7e40f37632ee84da761", "filename": "src/test/ui/issues/issue-54521-1.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b5447b50b053c27a74dbb21b965b0da397cb5560/src%2Ftest%2Fui%2Fissues%2Fissue-54521-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5447b50b053c27a74dbb21b965b0da397cb5560/src%2Ftest%2Fui%2Fissues%2Fissue-54521-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54521-1.rs?ref=b5447b50b053c27a74dbb21b965b0da397cb5560", "patch": "@@ -0,0 +1,16 @@\n+// compile-pass\n+\n+// This test checks that the `remove extra angle brackets` error doesn't happen for some\n+// potential edge-cases..\n+\n+struct X {\n+    len: u32,\n+}\n+\n+fn main() {\n+    let x = X { len: 3 };\n+\n+    let _ = x.len > (3);\n+\n+    let _ = x.len >> (3);\n+}"}, {"sha": "a91c4fe43ea46e066bb67e386fd58c3e5d451505", "filename": "src/test/ui/issues/issue-54521-2.fixed", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b5447b50b053c27a74dbb21b965b0da397cb5560/src%2Ftest%2Fui%2Fissues%2Fissue-54521-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b5447b50b053c27a74dbb21b965b0da397cb5560/src%2Ftest%2Fui%2Fissues%2Fissue-54521-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54521-2.fixed?ref=b5447b50b053c27a74dbb21b965b0da397cb5560", "patch": "@@ -0,0 +1,22 @@\n+// run-rustfix\n+\n+// This test checks that the following error is emitted and the suggestion works:\n+//\n+// ```\n+// let _ = Vec::<usize>>>::new();\n+//                     ^^ help: remove extra angle brackets\n+// ```\n+\n+fn main() {\n+    let _ = Vec::<usize>::new();\n+    //~^ ERROR unmatched angle bracket\n+\n+    let _ = Vec::<usize>::new();\n+    //~^ ERROR unmatched angle bracket\n+\n+    let _ = Vec::<usize>::new();\n+    //~^ ERROR unmatched angle bracket\n+\n+    let _ = Vec::<usize>::new();\n+    //~^ ERROR unmatched angle bracket\n+}"}, {"sha": "3639aac87ee7fdae4b695fc02f47c1e378f51bc3", "filename": "src/test/ui/issues/issue-54521-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b5447b50b053c27a74dbb21b965b0da397cb5560/src%2Ftest%2Fui%2Fissues%2Fissue-54521-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5447b50b053c27a74dbb21b965b0da397cb5560/src%2Ftest%2Fui%2Fissues%2Fissue-54521-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54521-2.rs?ref=b5447b50b053c27a74dbb21b965b0da397cb5560", "patch": "@@ -0,0 +1,22 @@\n+// run-rustfix\n+\n+// This test checks that the following error is emitted and the suggestion works:\n+//\n+// ```\n+// let _ = Vec::<usize>>>::new();\n+//                     ^^ help: remove extra angle brackets\n+// ```\n+\n+fn main() {\n+    let _ = Vec::<usize>>>>>::new();\n+    //~^ ERROR unmatched angle bracket\n+\n+    let _ = Vec::<usize>>>>::new();\n+    //~^ ERROR unmatched angle bracket\n+\n+    let _ = Vec::<usize>>>::new();\n+    //~^ ERROR unmatched angle bracket\n+\n+    let _ = Vec::<usize>>::new();\n+    //~^ ERROR unmatched angle bracket\n+}"}, {"sha": "9556b83b730a4ecbda08ab50a9daad9e3ebf2a75", "filename": "src/test/ui/issues/issue-54521-2.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b5447b50b053c27a74dbb21b965b0da397cb5560/src%2Ftest%2Fui%2Fissues%2Fissue-54521-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b5447b50b053c27a74dbb21b965b0da397cb5560/src%2Ftest%2Fui%2Fissues%2Fissue-54521-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54521-2.stderr?ref=b5447b50b053c27a74dbb21b965b0da397cb5560", "patch": "@@ -0,0 +1,26 @@\n+error: unmatched angle brackets\n+  --> $DIR/issue-54521-2.rs:11:25\n+   |\n+LL |     let _ = Vec::<usize>>>>>::new();\n+   |                         ^^^^ help: remove extra angle brackets\n+\n+error: unmatched angle brackets\n+  --> $DIR/issue-54521-2.rs:14:25\n+   |\n+LL |     let _ = Vec::<usize>>>>::new();\n+   |                         ^^^ help: remove extra angle brackets\n+\n+error: unmatched angle brackets\n+  --> $DIR/issue-54521-2.rs:17:25\n+   |\n+LL |     let _ = Vec::<usize>>>::new();\n+   |                         ^^ help: remove extra angle brackets\n+\n+error: unmatched angle bracket\n+  --> $DIR/issue-54521-2.rs:20:25\n+   |\n+LL |     let _ = Vec::<usize>>::new();\n+   |                         ^ help: remove extra angle bracket\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "84ab6866cf133e61f086e0184068d33cf7e53b44", "filename": "src/test/ui/issues/issue-54521.fixed", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b5447b50b053c27a74dbb21b965b0da397cb5560/src%2Ftest%2Fui%2Fissues%2Fissue-54521.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b5447b50b053c27a74dbb21b965b0da397cb5560/src%2Ftest%2Fui%2Fissues%2Fissue-54521.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54521.fixed?ref=b5447b50b053c27a74dbb21b965b0da397cb5560", "patch": "@@ -0,0 +1,22 @@\n+// run-rustfix\n+\n+// This test checks that the following error is emitted and the suggestion works:\n+//\n+// ```\n+// let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>>();\n+//                                                        ^^ help: remove extra angle brackets\n+// ```\n+\n+fn main() {\n+    let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>();\n+    //~^ ERROR unmatched angle bracket\n+\n+    let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>();\n+    //~^ ERROR unmatched angle bracket\n+\n+    let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>();\n+    //~^ ERROR unmatched angle bracket\n+\n+    let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>();\n+    //~^ ERROR unmatched angle bracket\n+}"}, {"sha": "f1d68504178804baba3f333a4b102c1c9d3f83a2", "filename": "src/test/ui/issues/issue-54521.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b5447b50b053c27a74dbb21b965b0da397cb5560/src%2Ftest%2Fui%2Fissues%2Fissue-54521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5447b50b053c27a74dbb21b965b0da397cb5560/src%2Ftest%2Fui%2Fissues%2Fissue-54521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54521.rs?ref=b5447b50b053c27a74dbb21b965b0da397cb5560", "patch": "@@ -0,0 +1,22 @@\n+// run-rustfix\n+\n+// This test checks that the following error is emitted and the suggestion works:\n+//\n+// ```\n+// let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>>();\n+//                                                        ^^ help: remove extra angle brackets\n+// ```\n+\n+fn main() {\n+    let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>>>>();\n+    //~^ ERROR unmatched angle bracket\n+\n+    let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>>>();\n+    //~^ ERROR unmatched angle bracket\n+\n+    let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>>();\n+    //~^ ERROR unmatched angle bracket\n+\n+    let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>();\n+    //~^ ERROR unmatched angle bracket\n+}"}, {"sha": "ffefbfd0348a8d8c1c7c64bcac07e048e92a611a", "filename": "src/test/ui/issues/issue-54521.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b5447b50b053c27a74dbb21b965b0da397cb5560/src%2Ftest%2Fui%2Fissues%2Fissue-54521.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b5447b50b053c27a74dbb21b965b0da397cb5560/src%2Ftest%2Fui%2Fissues%2Fissue-54521.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54521.stderr?ref=b5447b50b053c27a74dbb21b965b0da397cb5560", "patch": "@@ -0,0 +1,26 @@\n+error: unmatched angle brackets\n+  --> $DIR/issue-54521.rs:11:60\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>>>>();\n+   |                                                            ^^^^ help: remove extra angle brackets\n+\n+error: unmatched angle brackets\n+  --> $DIR/issue-54521.rs:14:60\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>>>();\n+   |                                                            ^^^ help: remove extra angle brackets\n+\n+error: unmatched angle brackets\n+  --> $DIR/issue-54521.rs:17:60\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>>();\n+   |                                                            ^^ help: remove extra angle brackets\n+\n+error: unmatched angle bracket\n+  --> $DIR/issue-54521.rs:20:60\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>();\n+   |                                                            ^ help: remove extra angle bracket\n+\n+error: aborting due to 4 previous errors\n+"}]}