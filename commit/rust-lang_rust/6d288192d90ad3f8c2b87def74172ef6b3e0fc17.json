{"sha": "6d288192d90ad3f8c2b87def74172ef6b3e0fc17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMjg4MTkyZDkwYWQzZjhjMmI4N2RlZjc0MTcyZWY2YjNlMGZjMTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-26T23:35:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-26T23:35:38Z"}, "message": "Auto merge of #27294 - eddyb:deep-unsize-hinting, r=nrc\n\n`Rc::new(RefCell::new(x)): Rc<RefCell<Trait>>` should not mean `RefCell::new(x): RefCell<Trait>`.\r\nThe latter is impossible, as an rvalue can't have an unsized type.\r\nWe were already handling unsized argument hints, but not when dealing with unsized structures.", "tree": {"sha": "eb5a5a0a84f99a6af0c02b40a1b0c70f03692993", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb5a5a0a84f99a6af0c02b40a1b0c70f03692993"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d288192d90ad3f8c2b87def74172ef6b3e0fc17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d288192d90ad3f8c2b87def74172ef6b3e0fc17", "html_url": "https://github.com/rust-lang/rust/commit/6d288192d90ad3f8c2b87def74172ef6b3e0fc17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d288192d90ad3f8c2b87def74172ef6b3e0fc17/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d36798c89806fc4eaabb83831be1a4c90919a02", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d36798c89806fc4eaabb83831be1a4c90919a02", "html_url": "https://github.com/rust-lang/rust/commit/6d36798c89806fc4eaabb83831be1a4c90919a02"}, {"sha": "c46f91324434d46472bd4aa15286240b7ba537d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c46f91324434d46472bd4aa15286240b7ba537d6", "html_url": "https://github.com/rust-lang/rust/commit/c46f91324434d46472bd4aa15286240b7ba537d6"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "0c60cdc4ca2cfe1bd21e18bdf8086fa5c54a8c14", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d288192d90ad3f8c2b87def74172ef6b3e0fc17/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d288192d90ad3f8c2b87def74172ef6b3e0fc17/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6d288192d90ad3f8c2b87def74172ef6b3e0fc17", "patch": "@@ -2490,7 +2490,7 @@ fn check_argument_types<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                 // The special-cased logic below has three functions:\n                 // 1. Provide as good of an expected type as possible.\n                 let expected = expected_arg_tys.get(i).map(|&ty| {\n-                    Expectation::rvalue_hint(ty)\n+                    Expectation::rvalue_hint(fcx.tcx(), ty)\n                 });\n \n                 check_expr_with_unifier(fcx, &**arg,\n@@ -3268,7 +3268,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n             match unop {\n                 ast::UnUniq => match ty.sty {\n                     ty::TyBox(ty) => {\n-                        Expectation::rvalue_hint(ty)\n+                        Expectation::rvalue_hint(tcx, ty)\n                     }\n                     _ => {\n                         NoExpectation\n@@ -3345,7 +3345,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                         // the last field of a struct can be unsized.\n                         ExpectHasType(mt.ty)\n                     } else {\n-                        Expectation::rvalue_hint(mt.ty)\n+                        Expectation::rvalue_hint(tcx, mt.ty)\n                     }\n                 }\n                 _ => NoExpectation\n@@ -3982,8 +3982,8 @@ impl<'tcx> Expectation<'tcx> {\n     /// which still is useful, because it informs integer literals and the like.\n     /// See the test case `test/run-pass/coerce-expect-unsized.rs` and #20169\n     /// for examples of where this comes up,.\n-    fn rvalue_hint(ty: Ty<'tcx>) -> Expectation<'tcx> {\n-        match ty.sty {\n+    fn rvalue_hint(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> Expectation<'tcx> {\n+        match tcx.struct_tail(ty).sty {\n             ty::TySlice(_) | ty::TyTrait(..) => {\n                 ExpectRvalueLikeUnsized(ty)\n             }"}, {"sha": "ee4ec24b7e3dad97370ca4831ad9d57806656861", "filename": "src/test/run-pass/coerce-expect-unsized.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d288192d90ad3f8c2b87def74172ef6b3e0fc17/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d288192d90ad3f8c2b87def74172ef6b3e0fc17/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs?ref=6d288192d90ad3f8c2b87def74172ef6b3e0fc17", "patch": "@@ -13,7 +13,9 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n+use std::cell::RefCell;\n use std::fmt::Debug;\n+use std::rc::Rc;\n \n // Check that coercions apply at the pointer level and don't cause\n // rvalue expressions to be unsized. See #20169 for more information.\n@@ -45,6 +47,9 @@ pub fn main() {\n     let _: Box<[isize]> = Box::new([1, 2, 3]);\n     let _: Box<Fn(isize) -> _> = Box::new(|x| (x as u8));\n \n+    let _: Rc<RefCell<[isize]>> = Rc::new(RefCell::new([1, 2, 3]));\n+    let _: Rc<RefCell<FnMut(isize) -> _>> = Rc::new(RefCell::new(|x| (x as u8)));\n+\n     let _: Vec<Box<Fn(isize) -> _>> = vec![\n         Box::new(|x| (x as u8)),\n         Box::new(|x| (x as i16 as u8)),"}]}