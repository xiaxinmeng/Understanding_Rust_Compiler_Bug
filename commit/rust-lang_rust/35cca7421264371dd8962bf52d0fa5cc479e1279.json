{"sha": "35cca7421264371dd8962bf52d0fa5cc479e1279", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1Y2NhNzQyMTI2NDM3MWRkODk2MmJmNTJkMGZhNWNjNDc5ZTEyNzk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-17T09:09:18Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-24T05:28:55Z"}, "message": "defatalize BangProcMacro::expand", "tree": {"sha": "81e0249c879b0d3335d6fd68c074e3b364542980", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81e0249c879b0d3335d6fd68c074e3b364542980"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35cca7421264371dd8962bf52d0fa5cc479e1279", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35cca7421264371dd8962bf52d0fa5cc479e1279", "html_url": "https://github.com/rust-lang/rust/commit/35cca7421264371dd8962bf52d0fa5cc479e1279", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35cca7421264371dd8962bf52d0fa5cc479e1279/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0537e2081e11ef55c5ab71c3ca5f76fe7158312", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0537e2081e11ef55c5ab71c3ca5f76fe7158312", "html_url": "https://github.com/rust-lang/rust/commit/b0537e2081e11ef55c5ab71c3ca5f76fe7158312"}], "stats": {"total": 77, "additions": 52, "deletions": 25}, "files": [{"sha": "20e1895270a7b8f94de51e9d520603680e600107", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/35cca7421264371dd8962bf52d0fa5cc479e1279/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35cca7421264371dd8962bf52d0fa5cc479e1279/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=35cca7421264371dd8962bf52d0fa5cc479e1279", "patch": "@@ -10,7 +10,7 @@ use rustc_ast::visit::{AssocCtxt, Visitor};\n use rustc_attr::{self as attr, Deprecation, HasAttrs, Stability};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{self, Lrc};\n-use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n+use rustc_errors::{DiagnosticBuilder, DiagnosticId, ErrorReported};\n use rustc_parse::{self, parser, MACRO_ARGUMENTS};\n use rustc_session::parse::ParseSess;\n use rustc_span::edition::Edition;\n@@ -296,16 +296,26 @@ where\n }\n \n pub trait ProcMacro {\n-    fn expand<'cx>(&self, ecx: &'cx mut ExtCtxt<'_>, span: Span, ts: TokenStream) -> TokenStream;\n+    fn expand<'cx>(\n+        &self,\n+        ecx: &'cx mut ExtCtxt<'_>,\n+        span: Span,\n+        ts: TokenStream,\n+    ) -> Result<TokenStream, ErrorReported>;\n }\n \n impl<F> ProcMacro for F\n where\n     F: Fn(TokenStream) -> TokenStream,\n {\n-    fn expand<'cx>(&self, _ecx: &'cx mut ExtCtxt<'_>, _span: Span, ts: TokenStream) -> TokenStream {\n+    fn expand<'cx>(\n+        &self,\n+        _ecx: &'cx mut ExtCtxt<'_>,\n+        _span: Span,\n+        ts: TokenStream,\n+    ) -> Result<TokenStream, ErrorReported> {\n         // FIXME setup implicit context in TLS before calling self.\n-        (*self)(ts)\n+        Ok((*self)(ts))\n     }\n }\n "}, {"sha": "57314824d5a8480fe04ac28162048600cb85045c", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/35cca7421264371dd8962bf52d0fa5cc479e1279/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35cca7421264371dd8962bf52d0fa5cc479e1279/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=35cca7421264371dd8962bf52d0fa5cc479e1279", "patch": "@@ -682,7 +682,10 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             InvocationKind::Bang { mac, .. } => match ext {\n                 SyntaxExtensionKind::Bang(expander) => {\n                     self.gate_proc_macro_expansion_kind(span, fragment_kind);\n-                    let tok_result = expander.expand(self.cx, span, mac.args.inner_tokens());\n+                    let tok_result = match expander.expand(self.cx, span, mac.args.inner_tokens()) {\n+                        Err(_) => return ExpandResult::Ready(fragment_kind.dummy(span)),\n+                        Ok(ts) => ts,\n+                    };\n                     self.parse_ast_fragment(tok_result, fragment_kind, &mac.path, span)\n                 }\n                 SyntaxExtensionKind::LegacyBang(expander) => {"}, {"sha": "404f29f1fcf03caedcb5428e8d861cbcf475c576", "filename": "src/librustc_expand/proc_macro.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/35cca7421264371dd8962bf52d0fa5cc479e1279/src%2Flibrustc_expand%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35cca7421264371dd8962bf52d0fa5cc479e1279/src%2Flibrustc_expand%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro.rs?ref=35cca7421264371dd8962bf52d0fa5cc479e1279", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::ast::{self, ItemKind, MetaItemKind, NestedMetaItem};\n use rustc_ast::token;\n use rustc_ast::tokenstream::{self, TokenStream};\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{Applicability, FatalError};\n+use rustc_errors::{Applicability, ErrorReported, FatalError};\n use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -21,21 +21,16 @@ impl base::ProcMacro for BangProcMacro {\n         ecx: &'cx mut ExtCtxt<'_>,\n         span: Span,\n         input: TokenStream,\n-    ) -> TokenStream {\n+    ) -> Result<TokenStream, ErrorReported> {\n         let server = proc_macro_server::Rustc::new(ecx);\n-        match self.client.run(&EXEC_STRATEGY, server, input) {\n-            Ok(stream) => stream,\n-            Err(e) => {\n-                let msg = \"proc macro panicked\";\n-                let mut err = ecx.struct_span_fatal(span, msg);\n-                if let Some(s) = e.as_str() {\n-                    err.help(&format!(\"message: {}\", s));\n-                }\n-\n-                err.emit();\n-                FatalError.raise();\n+        self.client.run(&EXEC_STRATEGY, server, input).map_err(|e| {\n+            let mut err = ecx.struct_span_err(span, \"proc macro panicked\");\n+            if let Some(s) = e.as_str() {\n+                err.help(&format!(\"message: {}\", s));\n             }\n-        }\n+            err.emit();\n+            ErrorReported\n+        })\n     }\n }\n "}, {"sha": "3f78dea917b1960b7910b42ad918718163d06359", "filename": "src/test/ui/proc-macro/invalid-punct-ident-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35cca7421264371dd8962bf52d0fa5cc479e1279/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35cca7421264371dd8962bf52d0fa5cc479e1279/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.rs?ref=35cca7421264371dd8962bf52d0fa5cc479e1279", "patch": "@@ -14,3 +14,5 @@\n extern crate invalid_punct_ident;\n \n invalid_punct!(); //~ ERROR proc macro panicked\n+\n+fn main() {}"}, {"sha": "4e89e80ae7c412c68fc752a2306351d25e6ca843", "filename": "src/test/ui/proc-macro/invalid-punct-ident-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35cca7421264371dd8962bf52d0fa5cc479e1279/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35cca7421264371dd8962bf52d0fa5cc479e1279/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.rs?ref=35cca7421264371dd8962bf52d0fa5cc479e1279", "patch": "@@ -14,3 +14,5 @@\n extern crate invalid_punct_ident;\n \n invalid_ident!(); //~ ERROR proc macro panicked\n+\n+fn main() {}"}, {"sha": "8d8ce8f932e7118fb27b0557ea1084882ea0ead8", "filename": "src/test/ui/proc-macro/invalid-punct-ident-3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35cca7421264371dd8962bf52d0fa5cc479e1279/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35cca7421264371dd8962bf52d0fa5cc479e1279/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.rs?ref=35cca7421264371dd8962bf52d0fa5cc479e1279", "patch": "@@ -14,3 +14,5 @@\n extern crate invalid_punct_ident;\n \n invalid_raw_ident!(); //~ ERROR proc macro panicked\n+\n+fn main() {}"}, {"sha": "ab0250f53f6992251805bbb41f036b2b9a43fbf6", "filename": "src/test/ui/proc-macro/invalid-punct-ident-4.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/35cca7421264371dd8962bf52d0fa5cc479e1279/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35cca7421264371dd8962bf52d0fa5cc479e1279/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.rs?ref=35cca7421264371dd8962bf52d0fa5cc479e1279", "patch": "@@ -1,7 +1,10 @@\n // aux-build:invalid-punct-ident.rs\n \n-#[macro_use]\n+// We use `main` not found below as a witness for error recovery in proc macro expansion.\n+\n+#[macro_use] //~ ERROR `main` function not found\n extern crate invalid_punct_ident;\n \n-lexer_failure!(); //~ ERROR proc macro panicked\n-                  //~| ERROR unexpected closing delimiter: `)`\n+lexer_failure!();\n+//~^ ERROR proc macro panicked\n+//~| ERROR unexpected closing delimiter: `)`"}, {"sha": "296e2fb094280e2fa1f1f650489f1f192fe213a7", "filename": "src/test/ui/proc-macro/invalid-punct-ident-4.stderr", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/35cca7421264371dd8962bf52d0fa5cc479e1279/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35cca7421264371dd8962bf52d0fa5cc479e1279/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.stderr?ref=35cca7421264371dd8962bf52d0fa5cc479e1279", "patch": "@@ -1,16 +1,26 @@\n error: unexpected closing delimiter: `)`\n-  --> $DIR/invalid-punct-ident-4.rs:6:1\n+  --> $DIR/invalid-punct-ident-4.rs:8:1\n    |\n LL | lexer_failure!();\n    | ^^^^^^^^^^^^^^^^^ unexpected closing delimiter\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: proc macro panicked\n-  --> $DIR/invalid-punct-ident-4.rs:6:1\n+  --> $DIR/invalid-punct-ident-4.rs:8:1\n    |\n LL | lexer_failure!();\n    | ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error[E0601]: `main` function not found in crate `invalid_punct_ident_4`\n+  --> $DIR/invalid-punct-ident-4.rs:5:1\n+   |\n+LL | / #[macro_use]\n+LL | | extern crate invalid_punct_ident;\n+LL | |\n+LL | | lexer_failure!();\n+   | |_________________^ consider adding a `main` function to `$DIR/invalid-punct-ident-4.rs`\n+\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0601`."}]}