{"sha": "43cbbabccb10d361fc9111369450f882f6688f84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzY2JiYWJjY2IxMGQzNjFmYzkxMTEzNjk0NTBmODgyZjY2ODhmODQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-16T19:52:43Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-16T21:21:43Z"}, "message": "rustc: Correctly mark attributes as inner attributes\n\nIssue #487", "tree": {"sha": "941d62ee2cd85849b32172782036294f979de717", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/941d62ee2cd85849b32172782036294f979de717"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43cbbabccb10d361fc9111369450f882f6688f84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43cbbabccb10d361fc9111369450f882f6688f84", "html_url": "https://github.com/rust-lang/rust/commit/43cbbabccb10d361fc9111369450f882f6688f84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43cbbabccb10d361fc9111369450f882f6688f84/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3996d32b0e43e5c9c8992b71aa52a03ebdfd2cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3996d32b0e43e5c9c8992b71aa52a03ebdfd2cc", "html_url": "https://github.com/rust-lang/rust/commit/f3996d32b0e43e5c9c8992b71aa52a03ebdfd2cc"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "0834483267827e155ae12c82e992561821f37b6c", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/43cbbabccb10d361fc9111369450f882f6688f84/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43cbbabccb10d361fc9111369450f882f6688f84/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=43cbbabccb10d361fc9111369450f882f6688f84", "patch": "@@ -2050,7 +2050,7 @@ fn parse_outer_attrs_or_ext(&parser p) -> attr_or_ext {\n         auto lo = p.get_lo_pos();\n         p.bump();\n         if (p.peek() == token::LBRACKET) {\n-            auto first_attr = parse_attribute_naked(p, lo);\n+            auto first_attr = parse_attribute_naked(p, ast::attr_outer, lo);\n             ret some(left([first_attr] + parse_outer_attributes(p)));\n         } else {\n             ret some(right(parse_syntax_ext_naked(p, lo)));\n@@ -2064,23 +2064,24 @@ fn parse_outer_attrs_or_ext(&parser p) -> attr_or_ext {\n fn parse_outer_attributes(&parser p) -> vec[ast::attribute] {\n     let vec[ast::attribute] attrs = [];\n     while (p.peek() == token::POUND) {\n-        attrs += [parse_attribute(p)];\n+        attrs += [parse_attribute(p, ast::attr_outer)];\n     }\n     ret attrs;\n }\n \n-fn parse_attribute(&parser p) -> ast::attribute {\n+fn parse_attribute(&parser p, ast::attr_style style) -> ast::attribute {\n     auto lo = p.get_lo_pos();\n     expect(p, token::POUND);\n-    ret parse_attribute_naked(p, lo);\n+    ret parse_attribute_naked(p, style, lo);\n }\n \n-fn parse_attribute_naked(&parser p, uint lo) -> ast::attribute {\n+fn parse_attribute_naked(&parser p, ast::attr_style style,\n+                         uint lo) -> ast::attribute {\n     expect(p, token::LBRACKET);\n     auto meta_item = parse_meta_item(p);\n     expect(p, token::RBRACKET);\n     auto hi = p.get_hi_pos();\n-    ret spanned(lo, hi, rec(style=ast::attr_outer, value=*meta_item));\n+    ret spanned(lo, hi, rec(style=style, value=*meta_item));\n }\n \n // Parse attributes that appear after the opening of an item, each terminated\n@@ -2094,12 +2095,17 @@ fn parse_inner_attributes(&parser p) -> tup(vec[ast::attribute],\n     let vec[ast::attribute] inner_attrs = [];\n     let vec[ast::attribute] next_outer_attrs = [];\n     while (p.peek() == token::POUND) {\n-        auto attr = parse_attribute(p);\n+        auto attr = parse_attribute(p, ast::attr_inner);\n         if (p.peek() == token::SEMI) {\n             p.bump();\n             inner_attrs += [attr];\n         } else {\n-            next_outer_attrs += [attr];\n+            // It's not really an inner attribute\n+            auto outer_attr = spanned(attr.span.lo,\n+                                      attr.span.hi,\n+                                      rec(style=ast::attr_outer,\n+                                          value=attr.node.value));\n+            next_outer_attrs += [outer_attr];\n             break;\n         }\n     }"}]}