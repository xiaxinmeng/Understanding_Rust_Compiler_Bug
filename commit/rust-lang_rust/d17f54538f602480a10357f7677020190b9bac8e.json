{"sha": "d17f54538f602480a10357f7677020190b9bac8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxN2Y1NDUzOGY2MDI0ODBhMTAzNTdmNzY3NzAyMDE5MGI5YmFjOGU=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-12T03:28:31Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-16T02:27:02Z"}, "message": "Move let_unit_value to its own module", "tree": {"sha": "7c6cb6ee7b24775f089ded5c2536d9e0d2dc4843", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c6cb6ee7b24775f089ded5c2536d9e0d2dc4843"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d17f54538f602480a10357f7677020190b9bac8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d17f54538f602480a10357f7677020190b9bac8e", "html_url": "https://github.com/rust-lang/rust/commit/d17f54538f602480a10357f7677020190b9bac8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d17f54538f602480a10357f7677020190b9bac8e/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37bffb7797ff7ffa65eeda3f936a1d45670c157b", "url": "https://api.github.com/repos/rust-lang/rust/commits/37bffb7797ff7ffa65eeda3f936a1d45670c157b", "html_url": "https://github.com/rust-lang/rust/commit/37bffb7797ff7ffa65eeda3f936a1d45670c157b"}], "stats": {"total": 81, "additions": 47, "deletions": 34}, "files": [{"sha": "a8c4eb61a85391c83a98859c06f9a964b8a0337c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d17f54538f602480a10357f7677020190b9bac8e/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d17f54538f602480a10357f7677020190b9bac8e/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d17f54538f602480a10357f7677020190b9bac8e", "patch": "@@ -1085,7 +1085,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box map_clone::MapClone);\n     store.register_late_pass(|| box map_err_ignore::MapErrIgnore);\n     store.register_late_pass(|| box shadow::Shadow);\n-    store.register_late_pass(|| box unit_types::LetUnitValue);\n+    store.register_late_pass(|| box unit_types::UnitTypes);\n     store.register_late_pass(|| box unit_types::UnitCmp);\n     store.register_late_pass(|| box loops::Loops);\n     store.register_late_pass(|| box main_recursion::MainRecursion::default());"}, {"sha": "126f6aa746adcf3f0c8f01d97d832edfee4786e4", "filename": "clippy_lints/src/unit_types/let_unit_value.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d17f54538f602480a10357f7677020190b9bac8e/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d17f54538f602480a10357f7677020190b9bac8e/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs?ref=d17f54538f602480a10357f7677020190b9bac8e", "patch": "@@ -0,0 +1,40 @@\n+use rustc_errors::Applicability;\n+use rustc_hir::{Stmt, StmtKind};\n+use rustc_lint::{LateContext, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+\n+use crate::utils::diagnostics::span_lint_and_then;\n+use crate::utils::higher;\n+use crate::utils::source::snippet_with_macro_callsite;\n+\n+use super::{utils, LET_UNIT_VALUE};\n+\n+pub(super) fn check(cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n+    if let StmtKind::Local(ref local) = stmt.kind {\n+        if utils::is_unit(cx.typeck_results().pat_ty(&local.pat)) {\n+            if in_external_macro(cx.sess(), stmt.span) || local.pat.span.from_expansion() {\n+                return;\n+            }\n+            if higher::is_from_for_desugar(local) {\n+                return;\n+            }\n+            span_lint_and_then(\n+                cx,\n+                LET_UNIT_VALUE,\n+                stmt.span,\n+                \"this let-binding has unit value\",\n+                |diag| {\n+                    if let Some(expr) = &local.init {\n+                        let snip = snippet_with_macro_callsite(cx, expr.span, \"()\");\n+                        diag.span_suggestion(\n+                            stmt.span,\n+                            \"omit the `let` binding\",\n+                            format!(\"{};\", snip),\n+                            Applicability::MachineApplicable, // snippet\n+                        );\n+                    }\n+                },\n+            );\n+        }\n+    }\n+}"}, {"sha": "530c0fcf53dd71d5a3eb7a42d0403b0552a6f4f1", "filename": "clippy_lints/src/unit_types/mod.rs", "status": "modified", "additions": 6, "deletions": 33, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d17f54538f602480a10357f7677020190b9bac8e/clippy_lints%2Fsrc%2Funit_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d17f54538f602480a10357f7677020190b9bac8e/clippy_lints%2Fsrc%2Funit_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Fmod.rs?ref=d17f54538f602480a10357f7677020190b9bac8e", "patch": "@@ -1,18 +1,17 @@\n+mod let_unit_value;\n mod utils;\n \n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::{BinOpKind, Block, Expr, ExprKind, MatchSource, Node, Stmt, StmtKind};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::lint::in_external_macro;\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n \n use if_chain::if_chain;\n \n use crate::utils::diagnostics::{span_lint, span_lint_and_then};\n-use crate::utils::higher;\n-use crate::utils::source::{indent_of, reindent_multiline, snippet_opt, snippet_with_macro_callsite};\n+use crate::utils::source::{indent_of, reindent_multiline, snippet_opt};\n \n use utils::{is_unit, is_unit_literal};\n \n@@ -35,37 +34,11 @@ declare_clippy_lint! {\n     \"creating a `let` binding to a value of unit type, which usually can't be used afterwards\"\n }\n \n-declare_lint_pass!(LetUnitValue => [LET_UNIT_VALUE]);\n+declare_lint_pass!(UnitTypes => [LET_UNIT_VALUE]);\n \n-impl<'tcx> LateLintPass<'tcx> for LetUnitValue {\n+impl<'tcx> LateLintPass<'tcx> for UnitTypes {\n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n-        if let StmtKind::Local(ref local) = stmt.kind {\n-            if is_unit(cx.typeck_results().pat_ty(&local.pat)) {\n-                if in_external_macro(cx.sess(), stmt.span) || local.pat.span.from_expansion() {\n-                    return;\n-                }\n-                if higher::is_from_for_desugar(local) {\n-                    return;\n-                }\n-                span_lint_and_then(\n-                    cx,\n-                    LET_UNIT_VALUE,\n-                    stmt.span,\n-                    \"this let-binding has unit value\",\n-                    |diag| {\n-                        if let Some(expr) = &local.init {\n-                            let snip = snippet_with_macro_callsite(cx, expr.span, \"()\");\n-                            diag.span_suggestion(\n-                                stmt.span,\n-                                \"omit the `let` binding\",\n-                                format!(\"{};\", snip),\n-                                Applicability::MachineApplicable, // snippet\n-                            );\n-                        }\n-                    },\n-                );\n-            }\n-        }\n+        let_unit_value::check(cx, stmt);\n     }\n }\n "}]}