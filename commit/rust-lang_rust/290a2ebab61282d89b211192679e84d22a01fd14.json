{"sha": "290a2ebab61282d89b211192679e84d22a01fd14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MGEyZWJhYjYxMjgyZDg5YjIxMTE5MjY3OWU4NGQyMmEwMWZkMTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-17T13:46:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-17T13:46:32Z"}, "message": "auto merge of #6442 : sstewartgallus/rust/incoming, r=pcwalton\n\nAdded unit test to prevent similar mistakes from happening again. The\r\nprevious method was wrong because it dereferenced a pointer to a void type to\r\nmatch on the result. No self pointer was needed, and the correct method\r\nsignature took the self value by value.\r\n\r\nI feel silly that I made this mistake in https://github.com/mozilla/rust/pull/6348", "tree": {"sha": "07244bb12c47783ef31fe4c3aaa10d0094b5699d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07244bb12c47783ef31fe4c3aaa10d0094b5699d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/290a2ebab61282d89b211192679e84d22a01fd14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/290a2ebab61282d89b211192679e84d22a01fd14", "html_url": "https://github.com/rust-lang/rust/commit/290a2ebab61282d89b211192679e84d22a01fd14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/290a2ebab61282d89b211192679e84d22a01fd14/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbbc244f7303113ad7a0be01ffb8aa617b199c4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbbc244f7303113ad7a0be01ffb8aa617b199c4b", "html_url": "https://github.com/rust-lang/rust/commit/dbbc244f7303113ad7a0be01ffb8aa617b199c4b"}, {"sha": "8c5de02289d515a367746d062b81e4d473e558ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c5de02289d515a367746d062b81e4d473e558ee", "html_url": "https://github.com/rust-lang/rust/commit/8c5de02289d515a367746d062b81e4d473e558ee"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "e5067fb90bcc0ad8556b7d25f32b0c0391d190ff", "filename": "src/libcore/util.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/290a2ebab61282d89b211192679e84d22a01fd14/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/290a2ebab61282d89b211192679e84d22a01fd14/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=290a2ebab61282d89b211192679e84d22a01fd14", "patch": "@@ -138,8 +138,8 @@ pub enum Void { }\n \n pub impl Void {\n     /// A utility function for ignoring this uninhabited type\n-    fn uninhabited(&self) -> ! {\n-        match *self {\n+    fn uninhabited(self) -> ! {\n+        match self {\n             // Nothing to match on\n         }\n     }\n@@ -177,7 +177,8 @@ pub fn unreachable() -> ! {\n #[cfg(test)]\n mod tests {\n     use option::{None, Some};\n-    use util::{NonCopyable, id, replace, swap};\n+    use util::{Void, NonCopyable, id, replace, swap};\n+    use either::{Either, Left, Right};\n \n     #[test]\n     pub fn identity_crisis() {\n@@ -202,4 +203,12 @@ mod tests {\n         assert!(x.is_none());\n         assert!(y.is_some());\n     }\n+    #[test]\n+    pub fn test_uninhabited() {\n+        let could_only_be_coin : Either <Void, ()> = Right (());\n+        match could_only_be_coin {\n+            Right (coin) => coin,\n+            Left (is_void) => is_void.uninhabited ()\n+        }\n+    }\n }"}]}