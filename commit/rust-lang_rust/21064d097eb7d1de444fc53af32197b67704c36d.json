{"sha": "21064d097eb7d1de444fc53af32197b67704c36d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMDY0ZDA5N2ViN2QxZGU0NDRmYzUzYWYzMjE5N2I2NzcwNGMzNmQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-01T01:43:10Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-25T22:18:30Z"}, "message": "Refactor away resolve_imports::Shadowable and rename shadowable -> is_prelude", "tree": {"sha": "1c98f0b2455c22ea207f699b975188cf28cafeee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c98f0b2455c22ea207f699b975188cf28cafeee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21064d097eb7d1de444fc53af32197b67704c36d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21064d097eb7d1de444fc53af32197b67704c36d", "html_url": "https://github.com/rust-lang/rust/commit/21064d097eb7d1de444fc53af32197b67704c36d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21064d097eb7d1de444fc53af32197b67704c36d/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64a13a46601bb47a470264936b623b4adf706128", "url": "https://api.github.com/repos/rust-lang/rust/commits/64a13a46601bb47a470264936b623b4adf706128", "html_url": "https://github.com/rust-lang/rust/commit/64a13a46601bb47a470264936b623b4adf706128"}], "stats": {"total": 33, "additions": 10, "deletions": 23}, "files": [{"sha": "c30e6b8e2cfd67ceb9c40a703517e0c12c31237a", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/21064d097eb7d1de444fc53af32197b67704c36d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21064d097eb7d1de444fc53af32197b67704c36d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=21064d097eb7d1de444fc53af32197b67704c36d", "patch": "@@ -22,7 +22,6 @@ use {NameBinding, NameBindingKind};\n use module_to_string;\n use ParentLink::{ModuleParentLink, BlockParentLink};\n use Resolver;\n-use resolve_imports::Shadowable;\n use {resolve_error, resolve_struct_error, ResolutionError};\n \n use rustc::middle::cstore::{CrateStore, ChildItem, DlDef, DlField, DlImpl};\n@@ -161,14 +160,9 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 };\n \n                 // Build up the import directives.\n-                let shadowable = item.attrs.iter().any(|attr| {\n+                let is_prelude = item.attrs.iter().any(|attr| {\n                     attr.name() == special_idents::prelude_import.name.as_str()\n                 });\n-                let shadowable = if shadowable {\n-                    Shadowable::Always\n-                } else {\n-                    Shadowable::Never\n-                };\n \n                 match view_path.node {\n                     ViewPathSimple(binding, ref full_path) => {\n@@ -186,7 +180,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                                     view_path.span,\n                                                     item.id,\n                                                     is_public,\n-                                                    shadowable);\n+                                                    is_prelude);\n                     }\n                     ViewPathList(_, ref source_items) => {\n                         // Make sure there's at most one `mod` import in the list.\n@@ -237,7 +231,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                                         source_item.span,\n                                                         source_item.node.id(),\n                                                         is_public,\n-                                                        shadowable);\n+                                                        is_prelude);\n                         }\n                     }\n                     ViewPathGlob(_) => {\n@@ -247,7 +241,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                                     view_path.span,\n                                                     item.id,\n                                                     is_public,\n-                                                    shadowable);\n+                                                    is_prelude);\n                     }\n                 }\n                 parent\n@@ -631,7 +625,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                               span: Span,\n                               id: NodeId,\n                               is_public: bool,\n-                              shadowable: Shadowable) {\n+                              is_prelude: bool) {\n         // Bump the reference count on the name. Or, if this is a glob, set\n         // the appropriate flag.\n \n@@ -648,7 +642,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n         }\n \n         let directive =\n-            ImportDirective::new(module_path, subclass, span, id, is_public, shadowable);\n+            ImportDirective::new(module_path, subclass, span, id, is_public, is_prelude);\n         module_.add_import_directive(directive);\n         self.unresolved_imports += 1;\n     }"}, {"sha": "eaa0753b8ce15844933761a72769da48f0302bd5", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/21064d097eb7d1de444fc53af32197b67704c36d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21064d097eb7d1de444fc53af32197b67704c36d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=21064d097eb7d1de444fc53af32197b67704c36d", "patch": "@@ -57,13 +57,6 @@ impl ImportDirectiveSubclass {\n     }\n }\n \n-/// Whether an import can be shadowed by another import.\n-#[derive(Debug,PartialEq,Clone,Copy)]\n-pub enum Shadowable {\n-    Always,\n-    Never,\n-}\n-\n /// One import directive.\n #[derive(Debug,Clone)]\n pub struct ImportDirective {\n@@ -72,7 +65,7 @@ pub struct ImportDirective {\n     pub span: Span,\n     pub id: NodeId,\n     pub is_public: bool, // see note in ImportResolutionPerNamespace about how to use this\n-    pub shadowable: Shadowable,\n+    pub is_prelude: bool,\n }\n \n impl ImportDirective {\n@@ -81,15 +74,15 @@ impl ImportDirective {\n                span: Span,\n                id: NodeId,\n                is_public: bool,\n-               shadowable: Shadowable)\n+               is_prelude: bool)\n                -> ImportDirective {\n         ImportDirective {\n             module_path: module_path,\n             subclass: subclass,\n             span: span,\n             id: id,\n             is_public: is_public,\n-            shadowable: shadowable,\n+            is_prelude: is_prelude,\n         }\n     }\n \n@@ -105,7 +98,7 @@ impl ImportDirective {\n         if let GlobImport = self.subclass {\n             modifiers = modifiers | DefModifiers::GLOB_IMPORTED;\n         }\n-        if self.shadowable == Shadowable::Always {\n+        if self.is_prelude {\n             modifiers = modifiers | DefModifiers::PRELUDE;\n         }\n "}]}