{"sha": "8e3105b6db6eb30a95061b56e78581dae0a98996", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMzEwNWI2ZGI2ZWIzMGE5NTA2MWI1NmU3ODU4MWRhZTBhOTg5OTY=", "commit": {"author": {"name": "Daniel Patterson", "email": "dbp@riseup.net", "date": "2012-08-01T04:40:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-03T18:28:19Z"}, "message": "std::net::url - fix to_str to work with authorityless urls, add test", "tree": {"sha": "f22a8e0194911345132e4cbbd027ddb2c6297ec2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f22a8e0194911345132e4cbbd027ddb2c6297ec2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e3105b6db6eb30a95061b56e78581dae0a98996", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e3105b6db6eb30a95061b56e78581dae0a98996", "html_url": "https://github.com/rust-lang/rust/commit/8e3105b6db6eb30a95061b56e78581dae0a98996", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e3105b6db6eb30a95061b56e78581dae0a98996/comments", "author": null, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21187206c3521f10d91627771d682c513a4356dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/21187206c3521f10d91627771d682c513a4356dc", "html_url": "https://github.com/rust-lang/rust/commit/21187206c3521f10d91627771d682c513a4356dc"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "d046dec5225994ed95cac44dc1445e92e1f8988d", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8e3105b6db6eb30a95061b56e78581dae0a98996/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3105b6db6eb30a95061b56e78581dae0a98996/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=8e3105b6db6eb30a95061b56e78581dae0a98996", "patch": "@@ -644,6 +644,11 @@ fn to_str(url: url) -> ~str {\n     } else {\n        ~\"\"\n     };\n+    let authority = if str::len(url.host) != 0 {\n+        str::concat(~[~\"//\", user, copy url.host])\n+    } else {\n+        ~\"\"\n+    };\n     let query = if url.query.len() == 0 {\n         ~\"\"\n     } else {\n@@ -657,12 +662,11 @@ fn to_str(url: url) -> ~str {\n     };\n \n     return str::concat(~[copy url.scheme,\n-                      ~\"://\",\n-                      user,\n-                      copy url.host,\n-                      copy url.path,\n-                      query,\n-                      fragment]);\n+                         ~\":\",\n+                         authority,\n+                         copy url.path,\n+                         query,\n+                         fragment]);\n }\n \n impl of to_str::to_str for url {\n@@ -849,6 +853,12 @@ mod tests {\n             .get().second() == ~\"#&+\";\n     }\n \n+    #[test]\n+    fn test_url_without_authority() {\n+        let url = ~\"mailto:test@email.com\";\n+        assert to_str(result::unwrap(from_str(url))) == url;\n+    }\n+\n     #[test]\n     fn test_encode() {\n         assert encode(~\"\") == ~\"\";"}]}