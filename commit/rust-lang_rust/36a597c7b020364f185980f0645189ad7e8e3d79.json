{"sha": "36a597c7b020364f185980f0645189ad7e8e3d79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YTU5N2M3YjAyMDM2NGYxODU5ODBmMDY0NTE4OWFkN2U4ZTNkNzk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-14T04:23:41Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-14T07:20:57Z"}, "message": "Rollup merge of #29032 - goyox86:goyox86/rusfmting-librustc_bitflags, r=alexcrichton\n\nHi Rustaceans!\n\nThis is the result of running latest rustfmt on librustc_bitflags!\n\n//cc @nrc", "tree": {"sha": "e157fef757ccf62823aa1554f4e344e401e03ffa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e157fef757ccf62823aa1554f4e344e401e03ffa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36a597c7b020364f185980f0645189ad7e8e3d79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36a597c7b020364f185980f0645189ad7e8e3d79", "html_url": "https://github.com/rust-lang/rust/commit/36a597c7b020364f185980f0645189ad7e8e3d79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36a597c7b020364f185980f0645189ad7e8e3d79/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdd8ed26c4ec49b983bf4db29f4d92923d70c684", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdd8ed26c4ec49b983bf4db29f4d92923d70c684", "html_url": "https://github.com/rust-lang/rust/commit/cdd8ed26c4ec49b983bf4db29f4d92923d70c684"}, {"sha": "19a2a769a5d74d1c0fabc71a3829c4042824fb05", "url": "https://api.github.com/repos/rust-lang/rust/commits/19a2a769a5d74d1c0fabc71a3829c4042824fb05", "html_url": "https://github.com/rust-lang/rust/commit/19a2a769a5d74d1c0fabc71a3829c4042824fb05"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "16f586cf5e0627487883b2f37b90496635b1520f", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/36a597c7b020364f185980f0645189ad7e8e3d79/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a597c7b020364f185980f0645189ad7e8e3d79/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=36a597c7b020364f185980f0645189ad7e8e3d79", "patch": "@@ -22,7 +22,9 @@\n \n //! A typesafe bitmask flag generator.\n \n-#[cfg(test)] #[macro_use] extern crate std;\n+#[cfg(test)]\n+#[macro_use]\n+extern crate std;\n \n /// The `bitflags!` macro generates a `struct` that holds a set of C-style\n /// bitmask flags. It is useful for creating typesafe wrappers for C APIs.\n@@ -321,7 +323,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_bits(){\n+    fn test_bits() {\n         assert_eq!(Flags::empty().bits(), 0b00000000);\n         assert_eq!(Flags::FlagA.bits(), 0b00000001);\n         assert_eq!(Flags::FlagABC.bits(), 0b00000111);\n@@ -354,7 +356,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_is_empty(){\n+    fn test_is_empty() {\n         assert!(Flags::empty().is_empty());\n         assert!(!Flags::FlagA.is_empty());\n         assert!(!Flags::FlagABC.is_empty());\n@@ -413,7 +415,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_insert(){\n+    fn test_insert() {\n         let mut e1 = Flags::FlagA;\n         let e2 = Flags::FlagA | Flags::FlagB;\n         e1.insert(e2);\n@@ -425,7 +427,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_remove(){\n+    fn test_remove() {\n         let mut e1 = Flags::FlagA | Flags::FlagB;\n         let e2 = Flags::FlagA | Flags::FlagC;\n         e1.remove(e2);\n@@ -484,12 +486,12 @@ mod tests {\n \n     #[test]\n     fn test_hash() {\n-      let mut x = Flags::empty();\n-      let mut y = Flags::empty();\n-      assert!(hash(&x) == hash(&y));\n-      x = Flags::all();\n-      y = Flags::FlagABC;\n-      assert!(hash(&x) == hash(&y));\n+        let mut x = Flags::empty();\n+        let mut y = Flags::empty();\n+        assert!(hash(&x) == hash(&y));\n+        x = Flags::all();\n+        y = Flags::FlagABC;\n+        assert!(hash(&x) == hash(&y));\n     }\n \n     fn hash<T: Hash>(t: &T) -> u64 {"}]}