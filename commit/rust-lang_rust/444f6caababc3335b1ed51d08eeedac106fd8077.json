{"sha": "444f6caababc3335b1ed51d08eeedac106fd8077", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NGY2Y2FhYmFiYzMzMzViMWVkNTFkMDhlZWVkYWMxMDZmZDgwNzc=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-01T16:01:18Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-01T19:31:25Z"}, "message": "Resolve associated types", "tree": {"sha": "d99e32e304730f5472caf7606c4d8e6d3b959e89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d99e32e304730f5472caf7606c4d8e6d3b959e89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/444f6caababc3335b1ed51d08eeedac106fd8077", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/444f6caababc3335b1ed51d08eeedac106fd8077", "html_url": "https://github.com/rust-lang/rust/commit/444f6caababc3335b1ed51d08eeedac106fd8077", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/444f6caababc3335b1ed51d08eeedac106fd8077/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75011bbccbf2e00092222a1071ba9111f834a4ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/75011bbccbf2e00092222a1071ba9111f834a4ae", "html_url": "https://github.com/rust-lang/rust/commit/75011bbccbf2e00092222a1071ba9111f834a4ae"}], "stats": {"total": 69, "additions": 64, "deletions": 5}, "files": [{"sha": "3bf722d2a708c7473b726c2d11328ab017cbf506", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/444f6caababc3335b1ed51d08eeedac106fd8077/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444f6caababc3335b1ed51d08eeedac106fd8077/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=444f6caababc3335b1ed51d08eeedac106fd8077", "patch": "@@ -76,9 +76,11 @@ impl PathResolution {\n     pub fn assoc_type_shorthand_candidates<R>(\n         &self,\n         db: &dyn HirDatabase,\n-        mut cb: impl FnMut(TypeAlias) -> Option<R>,\n+        mut cb: impl FnMut(&Name, TypeAlias) -> Option<R>,\n     ) -> Option<R> {\n-        associated_type_shorthand_candidates(db, self.in_type_ns()?, |_, _, id| cb(id.into()))\n+        associated_type_shorthand_candidates(db, self.in_type_ns()?, |name, _, id| {\n+            cb(name, id.into())\n+        })\n     }\n }\n "}, {"sha": "8423dd101997bffd2a1206d99d7ed092acae98c2", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/444f6caababc3335b1ed51d08eeedac106fd8077/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444f6caababc3335b1ed51d08eeedac106fd8077/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=444f6caababc3335b1ed51d08eeedac106fd8077", "patch": "@@ -466,7 +466,8 @@ fn resolve_hir_path_(\n     prefer_value_ns: bool,\n ) -> Option<PathResolution> {\n     let types = || {\n-        resolver.resolve_path_in_type_ns_fully(db.upcast(), path.mod_path()).map(|ty| match ty {\n+        let (ty, remaining) = resolver.resolve_path_in_type_ns(db.upcast(), path.mod_path())?;\n+        let res = match ty {\n             TypeNs::SelfType(it) => PathResolution::SelfType(it.into()),\n             TypeNs::GenericParam(id) => PathResolution::TypeParam(TypeParam { id }),\n             TypeNs::AdtSelfType(it) | TypeNs::AdtId(it) => {\n@@ -476,7 +477,21 @@ fn resolve_hir_path_(\n             TypeNs::TypeAliasId(it) => PathResolution::Def(TypeAlias::from(it).into()),\n             TypeNs::BuiltinType(it) => PathResolution::Def(BuiltinType::from(it).into()),\n             TypeNs::TraitId(it) => PathResolution::Def(Trait::from(it).into()),\n-        })\n+        };\n+        match remaining {\n+            Some(1) => {\n+                let unresolved = path.segments().get(1)?;\n+                res.assoc_type_shorthand_candidates(db, |name, alias| {\n+                    (name == unresolved.name).then(|| alias)\n+                })\n+                .map(TypeAlias::from)\n+                .map(Into::into)\n+                .map(PathResolution::Def)\n+            }\n+            // ambiguous\n+            Some(_) => None,\n+            None => Some(res),\n+        }\n     };\n \n     let body_owner = resolver.body_owner();"}, {"sha": "8f98056c1c5f84d35a41952b81926282854e5913", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/444f6caababc3335b1ed51d08eeedac106fd8077/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444f6caababc3335b1ed51d08eeedac106fd8077/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=444f6caababc3335b1ed51d08eeedac106fd8077", "patch": "@@ -3834,4 +3834,46 @@ fn foo() {}\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn hover_generic_assoc() {\n+        check(\n+            r#\"\n+fn foo<T: A>() where T::Assoc$0: {}\n+\n+trait A {\n+    type Assoc;\n+}\"#,\n+            expect![[r#\"\n+                *Assoc*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                type Assoc\n+                ```\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+trait A where\n+    Self::Assoc$0: ,\n+{\n+    type Assoc;\n+}\"#,\n+            expect![[r#\"\n+                *Assoc*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                type Assoc\n+                ```\n+            \"#]],\n+        )\n+    }\n }"}, {"sha": "969249df6035a528154aab0cabe98f8b1c1dd246", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444f6caababc3335b1ed51d08eeedac106fd8077/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444f6caababc3335b1ed51d08eeedac106fd8077/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=444f6caababc3335b1ed51d08eeedac106fd8077", "patch": "@@ -24,7 +24,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n     };\n \n     // Add associated types on type parameters and `Self`.\n-    resolution.assoc_type_shorthand_candidates(ctx.db, |alias| {\n+    resolution.assoc_type_shorthand_candidates(ctx.db, |_, alias| {\n         acc.add_type_alias(ctx, alias);\n         None::<()>\n     });"}]}