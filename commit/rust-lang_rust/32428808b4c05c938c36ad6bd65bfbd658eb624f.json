{"sha": "32428808b4c05c938c36ad6bd65bfbd658eb624f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNDI4ODA4YjRjMDVjOTM4YzM2YWQ2YmQ2NWJmYmQ2NThlYjYyNGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-11T14:37:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-11T14:37:39Z"}, "message": "Auto merge of #49861 - pnkfelix:compare-mode-nll-followup-2, r=nikomatsakis\n\nBlindly checkpoint status of NLL mode ui tests\n\nThis takes the next (and potentially final?) step with #48879.\n\nNamely, this PR got things to the point where I can successfully run `compiletest` on `src/test/ui` with `--compile-mode=nll`.\n\nHere are the main pieces of it:\n\n 1. To figure out how to even run `compiletest` normally on the ui directory, I ran `x.py test -vv`, and then looked for the `compiletest` invocation that mentioned `src/test/ui`.\n 2. I took the aforementioned `compiletest` invocation and used it, adding `--compile-mode=nll` to the end. It had 170 failing cases.\n 3. Due to #49855, I had to edit some of the tests so that they fail even under NLL, via `#[rustc_error]`. That's the first commit. (Then goto 2 to double-check no such tests remain.)\n 4. I took the generated `build/target/test/foo.stderr` file for every case that failed, and blindly copied it to `src/test/foo.nll.stderr`. That's the second commit.\n 5. Goto 2 until there were no failing cases.\n 6. Remove any stamp files, and re-run `x.py test` to make sure that the edits and new `.nll.stderr` files haven't broken the pre-existing test suite.", "tree": {"sha": "95b41f3d17f7c7f4ff82e6d7a8b5a27e4130ae6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95b41f3d17f7c7f4ff82e6d7a8b5a27e4130ae6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32428808b4c05c938c36ad6bd65bfbd658eb624f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32428808b4c05c938c36ad6bd65bfbd658eb624f", "html_url": "https://github.com/rust-lang/rust/commit/32428808b4c05c938c36ad6bd65bfbd658eb624f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32428808b4c05c938c36ad6bd65bfbd658eb624f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca26ef321c44358404ef788d315c4557eb015fb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca26ef321c44358404ef788d315c4557eb015fb2", "html_url": "https://github.com/rust-lang/rust/commit/ca26ef321c44358404ef788d315c4557eb015fb2"}, {"sha": "746d63a203174f6c91396230b86f6b4fbda507c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/746d63a203174f6c91396230b86f6b4fbda507c4", "html_url": "https://github.com/rust-lang/rust/commit/746d63a203174f6c91396230b86f6b4fbda507c4"}], "stats": {"total": 3682, "additions": 3626, "deletions": 56}, "files": [{"sha": "deb2e7ed4a33dfaeee88d3d1ed071128ce3fb7cc", "filename": "src/test/ui/augmented-assignments.nll.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,26 @@\n+error[E0505]: cannot move out of `x` because it is borrowed\n+  --> $DIR/augmented-assignments.rs:26:5\n+   |\n+LL |       x   //~ error: use of moved value: `x`\n+   |       -\n+   |       |\n+   |  _____borrow of `x` occurs here\n+   | |\n+LL | |     //~^ value used here after move\n+LL | |     +=\n+LL | |     x;  //~ value moved here\n+   | |     -\n+   | |     |\n+   | |_____move out of `x` occurs here\n+   |       borrow later used here\n+\n+error[E0596]: cannot borrow immutable item `y` as mutable\n+  --> $DIR/augmented-assignments.rs:30:5\n+   |\n+LL |     y   //~ error: cannot borrow immutable local variable `y` as mutable\n+   |     ^ cannot borrow as mutable\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0505, E0596.\n+For more information about an error, try `rustc --explain E0505`."}, {"sha": "1b370567ed10c7d55f1085b6a792f290f2be8571", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.nll.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,25 @@\n+error[E0382]: use of moved value: `a.y`\n+  --> $DIR/borrowck-box-insensitivity.rs:46:14\n+   |\n+LL |     let _x = a.x;\n+   |              --- value moved here\n+LL |     //~^ value moved here\n+LL |     let _y = a.y; //~ ERROR use of moved\n+   |              ^^^ value used here after move\n+   |\n+   = note: move occurs because `a.y` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a.y`\n+  --> $DIR/borrowck-box-insensitivity.rs:108:14\n+   |\n+LL |     let _x = a.x.x;\n+   |              ----- value moved here\n+LL |     //~^ value moved here\n+LL |     let _y = a.y; //~ ERROR use of collaterally moved\n+   |              ^^^ value used here after move\n+   |\n+   = note: move occurs because `a.y` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "a21a6e36778c5ec4b9a739ae13db119f7c46979d", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut.nll.stderr", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,78 @@\n+error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n+  --> $DIR/borrowck-closures-two-mut.rs:24:24\n+   |\n+LL |     let c1 = to_fn_mut(|| x = 4);\n+   |                        -- - previous borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        first mutable borrow occurs here\n+LL |     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable more than once\n+   |                        ^^ - borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        second mutable borrow occurs here\n+LL |     //~| ERROR cannot borrow `x` as mutable more than once\n+LL | }\n+   | - first borrow ends here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n+  --> $DIR/borrowck-closures-two-mut.rs:35:24\n+   |\n+LL |     let c1 = to_fn_mut(|| set(&mut x));\n+   |                        --          - previous borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        first mutable borrow occurs here\n+LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+   |                        ^^          - borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        second mutable borrow occurs here\n+LL |     //~| ERROR cannot borrow `x` as mutable more than once\n+LL | }\n+   | - first borrow ends here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n+  --> $DIR/borrowck-closures-two-mut.rs:42:24\n+   |\n+LL |     let c1 = to_fn_mut(|| x = 5);\n+   |                        -- - previous borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        first mutable borrow occurs here\n+LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+   |                        ^^          - borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        second mutable borrow occurs here\n+LL |     //~| ERROR cannot borrow `x` as mutable more than once\n+LL | }\n+   | - first borrow ends here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n+  --> $DIR/borrowck-closures-two-mut.rs:49:24\n+   |\n+LL |     let c1 = to_fn_mut(|| x = 5);\n+   |                        -- - previous borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        first mutable borrow occurs here\n+LL |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nested closure)\n+   |                        ^^                                  - borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        second mutable borrow occurs here\n+...\n+LL | }\n+   | - first borrow ends here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n+  --> $DIR/borrowck-closures-two-mut.rs:61:24\n+   |\n+LL |     let c1 = to_fn_mut(|| set(&mut *x.f));\n+   |                        --           - previous borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        first mutable borrow occurs here\n+LL |     let c2 = to_fn_mut(|| set(&mut *x.f));\n+   |                        ^^           - borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        second mutable borrow occurs here\n+...\n+LL | }\n+   | - first borrow ends here\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "b931bc45b77ee37661e64aaafb9c5af2f16a95e5", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-1.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error[E0597]: `books` does not live long enough\n+  --> $DIR/borrowck-escaping-closure-error-1.rs:23:11\n+   |\n+LL |     spawn(|| books.push(4));\n+   |           ^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n+LL |     //~^ ERROR E0373\n+LL | }\n+   | - borrowed value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "2b5070977a39b4b82b104ce323693ec73a57d0a3", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-2.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,18 @@\n+error[E0597]: `books` does not live long enough\n+  --> $DIR/borrowck-escaping-closure-error-2.rs:21:14\n+   |\n+LL |     Box::new(|| books.push(4))\n+   |              ^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n+LL |     //~^ ERROR E0373\n+LL | }\n+   | - borrowed value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 19:1...\n+  --> $DIR/borrowck-escaping-closure-error-2.rs:19:1\n+   |\n+LL | fn foo<'a>(x: &'a i32) -> Box<FnMut()+'a> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "927d8c3745885b39b35f7b8f96a4237567810363", "filename": "src/test/ui/borrowck/borrowck-in-static.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,9 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-in-static.rs:15:17\n+   |\n+LL |     Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n+   |                 ^ cannot move out of borrowed content\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "c563a28b317d60fccd83351ce5375f8f8b0aabb5", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.nll.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,40 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-move-error-with-note.rs:23:19\n+   |\n+LL |         Foo::Foo1(num1,\n+   |                   ^^^^ cannot move out of borrowed content\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-move-error-with-note.rs:24:19\n+   |\n+LL |                   num2) => (),\n+   |                   ^^^^ cannot move out of borrowed content\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-move-error-with-note.rs:25:19\n+   |\n+LL |         Foo::Foo2(num) => (),\n+   |                   ^^^ cannot move out of borrowed content\n+\n+error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n+  --> $DIR/borrowck-move-error-with-note.rs:42:16\n+   |\n+LL |             f: _s,\n+   |                ^^ cannot move out of here\n+\n+error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n+  --> $DIR/borrowck-move-error-with-note.rs:43:16\n+   |\n+LL |             g: _t\n+   |                ^^ cannot move out of here\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-move-error-with-note.rs:59:9\n+   |\n+LL |         n => {\n+   |         ^ cannot move out of borrowed content\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors occurred: E0507, E0509.\n+For more information about an error, try `rustc --explain E0507`."}, {"sha": "a430c97158a488b8a773906008dcc6cd4949ab44", "filename": "src/test/ui/borrowck/borrowck-move-out-of-vec-tail.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,15 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-move-out-of-vec-tail.rs:30:33\n+   |\n+LL |                 &[Foo { string: a },\n+   |                                 ^ cannot move out of borrowed content\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-move-out-of-vec-tail.rs:34:33\n+   |\n+LL |                   Foo { string: b }] => {\n+   |                                 ^ cannot move out of borrowed content\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "951907876b9ca10e49625f374374532c41ff56d6", "filename": "src/test/ui/borrowck/borrowck-report-with-custom-diagnostic.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error: compilation successful\n+  --> $DIR/borrowck-report-with-custom-diagnostic.rs:12:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     // Original borrow ends at end of function\n+LL | |     let mut x = 1;\n+LL | |     let y = &mut x;\n+...  |\n+LL | |     //~^ immutable borrow occurs here\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "cdfee2e8a704957be2e1a96ea93130390af2d409", "filename": "src/test/ui/borrowck/borrowck-report-with-custom-diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -7,9 +7,9 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n #![allow(dead_code)]\n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     // Original borrow ends at end of function\n     let mut x = 1;\n     let y = &mut x;"}, {"sha": "d5a66a6c70635b08a04cca16925bd6b1e8a59780", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.nll.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,51 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:42:15\n+   |\n+LL |         &mut [_a, //~ ERROR cannot move out\n+   |               ^^ cannot move out of borrowed content\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:55:13\n+   |\n+LL |     let a = vec[0]; //~ ERROR cannot move out\n+   |             ^^^^^^ cannot move out of borrowed content\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:65:10\n+   |\n+LL |          _b] => {}\n+   |          ^^ cannot move out of borrowed content\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:68:13\n+   |\n+LL |     let a = vec[0]; //~ ERROR cannot move out\n+   |             ^^^^^^ cannot move out of borrowed content\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:76:15\n+   |\n+LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n+   |               ^^ cannot move out of borrowed content\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:76:19\n+   |\n+LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n+   |                   ^^ cannot move out of borrowed content\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:76:23\n+   |\n+LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n+   |                       ^^ cannot move out of borrowed content\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:80:13\n+   |\n+LL |     let a = vec[0]; //~ ERROR cannot move out\n+   |             ^^^^^^ cannot move out of borrowed content\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "ecd17edb079f13afdc0a3cab6eb59b38e163a0be", "filename": "src/test/ui/borrowck/issue-45983.nll.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,30 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/issue-45983.rs:17:27\n+   |\n+LL |     give_any(|y| x = Some(y));\n+   |                           ^\n+\n+error: free region `` does not outlive free region `'_#2r`\n+  --> $DIR/issue-45983.rs:17:27\n+   |\n+LL |     give_any(|y| x = Some(y));\n+   |                           ^\n+\n+error[E0594]: cannot assign to immutable item `x`\n+  --> $DIR/issue-45983.rs:17:18\n+   |\n+LL |     give_any(|y| x = Some(y));\n+   |                  ^^^^^^^^^^^ cannot mutate\n+   |\n+   = note: Value not mutable causing this error: `x`\n+\n+error[E0596]: cannot borrow immutable item `x` as mutable\n+  --> $DIR/issue-45983.rs:17:14\n+   |\n+LL |     give_any(|y| x = Some(y));\n+   |              ^^^^^^^^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "c55c49604d0083a4012a68edb7343ea0831d89cf", "filename": "src/test/ui/borrowck/issue-7573.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/issue-7573.rs:27:31\n+   |\n+LL |     let mut lines_to_use: Vec<&CrateId> = Vec::new();\n+   |                               ^\n+\n+error: free region `` does not outlive free region `'_#2r`\n+  --> $DIR/issue-7573.rs:32:9\n+   |\n+LL |         lines_to_use.push(installed_id);\n+   |         ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "fc288e6b1d6145da8dae576f1217aac1d78c2d00", "filename": "src/test/ui/borrowck/mut-borrow-in-loop.nll.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,21 @@\n+error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n+  --> $DIR/mut-borrow-in-loop.rs:20:25\n+   |\n+LL |             (self.func)(arg) //~ ERROR cannot borrow\n+   |                         ^^^ mutable borrow starts here in previous iteration of loop\n+\n+error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n+  --> $DIR/mut-borrow-in-loop.rs:26:25\n+   |\n+LL |             (self.func)(arg) //~ ERROR cannot borrow\n+   |                         ^^^ mutable borrow starts here in previous iteration of loop\n+\n+error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n+  --> $DIR/mut-borrow-in-loop.rs:33:25\n+   |\n+LL |             (self.func)(arg) //~ ERROR cannot borrow\n+   |                         ^^^ mutable borrow starts here in previous iteration of loop\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "dab769820a685e34d84a58fb5c3d59f76eb69330", "filename": "src/test/ui/borrowck/mut-borrow-outside-loop.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error: compilation successful\n+  --> $DIR/mut-borrow-outside-loop.rs:13:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     let mut void = ();\n+LL | |\n+LL | |     let first = &mut void;\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "edc877718ad0af5ea25c6a688af464bf3572bb99", "filename": "src/test/ui/borrowck/mut-borrow-outside-loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // ensure borrowck messages are correct outside special case\n-\n-fn main() {\n+#![feature(rustc_attrs)]\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let mut void = ();\n \n     let first = &mut void;"}, {"sha": "d34a716bb2b306bf7bf861de382470d609cd7062", "filename": "src/test/ui/borrowck/regions-escape-bound-fn-2.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/regions-escape-bound-fn-2.rs:18:27\n+   |\n+LL |     with_int(|y| x = Some(y));\n+   |                           ^\n+\n+error: free region `` does not outlive free region `'_#2r`\n+  --> $DIR/regions-escape-bound-fn-2.rs:18:27\n+   |\n+LL |     with_int(|y| x = Some(y));\n+   |                           ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b69c172bcdc2320f51f89bee55e3dd7ddfd880ec", "filename": "src/test/ui/borrowck/regions-escape-bound-fn.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/regions-escape-bound-fn.rs:18:22\n+   |\n+LL |     with_int(|y| x = Some(y));\n+   |                      ^^^^^^^\n+\n+error: free region `` does not outlive free region `'_#2r`\n+  --> $DIR/regions-escape-bound-fn.rs:18:27\n+   |\n+LL |     with_int(|y| x = Some(y));\n+   |                           ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "788654a2ecc033e81996a05478e4fc38bfa50d29", "filename": "src/test/ui/borrowck/regions-escape-unboxed-closure.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/regions-escape-unboxed-closure.rs:16:27\n+   |\n+LL |     with_int(&mut |y| x = Some(y));\n+   |                           ^^^^^^^\n+\n+error: free region `` does not outlive free region `'_#2r`\n+  --> $DIR/regions-escape-unboxed-closure.rs:16:32\n+   |\n+LL |     with_int(&mut |y| x = Some(y));\n+   |                                ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "7464e33e8c101b7b3119071146e01655ab276d4a", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,9 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/unboxed-closures-move-upvar-from-non-once-ref-closure.rs:21:9\n+   |\n+LL |         y.into_iter();\n+   |         ^ cannot move out of borrowed content\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "18edf2addc53d4cf8d6ac16f10778007a27c08af", "filename": "src/test/ui/closure-expected-type/expect-region-supply-region.nll.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,44 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/expect-region-supply-region.rs:28:13\n+   |\n+LL |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n+   |             ^^^^^^^\n+\n+warning: not reporting region error due to -Znll\n+  --> $DIR/expect-region-supply-region.rs:38:13\n+   |\n+LL |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n+   |             ^^^^^^^\n+\n+warning: not reporting region error due to -Znll\n+  --> $DIR/expect-region-supply-region.rs:47:33\n+   |\n+LL |     closure_expecting_bound(|x: &'x u32| {\n+   |                                 ^^^^^^^\n+\n+warning: not reporting region error due to -Znll\n+  --> $DIR/expect-region-supply-region.rs:52:13\n+   |\n+LL |         f = Some(x);\n+   |             ^^^^^^^\n+\n+error: free region `` does not outlive free region `'_#2r`\n+  --> $DIR/expect-region-supply-region.rs:28:18\n+   |\n+LL |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n+   |                  ^\n+\n+error: free region `` does not outlive free region `'_#2r`\n+  --> $DIR/expect-region-supply-region.rs:38:18\n+   |\n+LL |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n+   |                  ^\n+\n+error: free region `` does not outlive free region `'_#2r`\n+  --> $DIR/expect-region-supply-region.rs:52:18\n+   |\n+LL |         f = Some(x);\n+   |                  ^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "bda8a3b85f758dfe39a3efc6aaf9d50c0c1889d1", "filename": "src/test/ui/closure_context/issue-42065.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,11 @@\n+error[E0382]: use of moved value: `debug_dump_dict`\n+  --> $DIR/issue-42065.rs:21:5\n+   |\n+LL |     debug_dump_dict();\n+   |     --------------- value moved here\n+LL |     debug_dump_dict();\n+   |     ^^^^^^^^^^^^^^^ value used here after move\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "4526616e48899dce909577308d39b7bcc4edd443", "filename": "src/test/ui/codemap_tests/huge_multispan_highlight.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,9 @@\n+error[E0596]: cannot borrow immutable item `x` as mutable\n+  --> $DIR/huge_multispan_highlight.rs:100:13\n+   |\n+LL |     let y = &mut x; //~ ERROR cannot borrow\n+   |             ^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "952ccdb98dae9875e6ed8d9924936bca386c428c", "filename": "src/test/ui/codemap_tests/issue-11715.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,12 @@\n+error: compilation successful\n+  --> $DIR/issue-11715.rs:97:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     let mut x = \"foo\";\n+LL | |     let y = &mut x;\n+LL | |     let z = &mut x; //~ ERROR cannot borrow\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "03c85fbfcd7739ccb23c5d66a89eadc1661beea6", "filename": "src/test/ui/codemap_tests/issue-11715.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -93,8 +93,8 @@\n \n \n \n-\n-fn main() {\n+#![feature(rustc_attrs)]\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let mut x = \"foo\";\n     let y = &mut x;\n     let z = &mut x; //~ ERROR cannot borrow"}, {"sha": "52ce3787f5885c1932aa09e8017cc1c87cdf9941", "filename": "src/test/ui/codemap_tests/one_line.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,13 @@\n+error[E0499]: cannot borrow `v` as mutable more than once at a time\n+  --> $DIR/one_line.rs:13:12\n+   |\n+LL |     v.push(v.pop().unwrap()); //~ ERROR cannot borrow\n+   |     -------^----------------\n+   |     |      |\n+   |     |      second mutable borrow occurs here\n+   |     first mutable borrow occurs here\n+   |     borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "b6630b2e666cf7078dd7dabf45dc20f63800b485", "filename": "src/test/ui/codemap_tests/overlapping_spans.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,9 @@\n+error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n+  --> $DIR/overlapping_spans.rs:21:14\n+   |\n+LL |         S {f:_s} => {} //~ ERROR cannot move out\n+   |              ^^ cannot move out of here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0509`."}, {"sha": "c56cb7772c81b4b2bd6fb7dce61d6388e280c48d", "filename": "src/test/ui/codemap_tests/tab_3.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error[E0382]: borrow of moved value: `some_vec`\n+  --> $DIR/tab_3.rs:17:20\n+   |\n+LL |     some_vec.into_iter();\n+   |     -------- value moved here\n+LL |     {\n+LL |         println!(\"{:?}\", some_vec); //~ ERROR use of moved\n+   |                          ^^^^^^^^ value borrowed here after move\n+   |\n+   = note: move occurs because `some_vec` has type `std::vec::Vec<&str>`, which does not implement the `Copy` trait\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "2d5a31f0586b192e65ab99ab2a4fdd4766279f42", "filename": "src/test/ui/command-line-diagnostics.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fcommand-line-diagnostics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fcommand-line-diagnostics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand-line-diagnostics.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,11 @@\n+error[E0384]: cannot assign twice to immutable variable `x`\n+  --> $DIR/command-line-diagnostics.rs:16:5\n+   |\n+LL |     let x = 42;\n+   |             -- first assignment to `x`\n+LL |     x = 43;\n+   |     ^^^^^^ cannot assign twice to immutable variable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0384`."}, {"sha": "6b63f64c699e283905e10dece0fe3f6a5fdb309e", "filename": "src/test/ui/did_you_mean/issue-31424.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,15 @@\n+error[E0596]: cannot borrow immutable item `self` as mutable\n+  --> $DIR/issue-31424.rs:17:9\n+   |\n+LL |         (&mut self).bar(); //~ ERROR cannot borrow\n+   |         ^^^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow immutable item `self` as mutable\n+  --> $DIR/issue-31424.rs:23:9\n+   |\n+LL |         (&mut self).bar(); //~ ERROR cannot borrow\n+   |         ^^^^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "afdc26a75c73f6471f593c92d125f5549a704eee", "filename": "src/test/ui/did_you_mean/issue-34126.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,13 @@\n+error[E0502]: cannot borrow `self` as mutable because it is also borrowed as immutable\n+  --> $DIR/issue-34126.rs:16:18\n+   |\n+LL |         self.run(&mut self); //~ ERROR cannot borrow\n+   |         ---------^^^^^^^^^-\n+   |         |        |\n+   |         |        mutable borrow occurs here\n+   |         immutable borrow occurs here\n+   |         borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "258e1bb1ad7da4dd18e44d06b5dcbb993f86e885", "filename": "src/test/ui/did_you_mean/issue-34337.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,9 @@\n+error[E0596]: cannot borrow immutable item `key` as mutable\n+  --> $DIR/issue-34337.rs:16:9\n+   |\n+LL |     get(&mut key); //~ ERROR cannot borrow\n+   |         ^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "7b5f452d32217ebab437c510b33ffb38eabb456f", "filename": "src/test/ui/did_you_mean/issue-35937.nll.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,28 @@\n+error[E0596]: cannot borrow immutable item `f.v` as mutable\n+  --> $DIR/issue-35937.rs:17:5\n+   |\n+LL |     f.v.push(\"cat\".to_string()); //~ ERROR cannot borrow\n+   |     ^^^ cannot borrow as mutable\n+   |\n+   = note: Value not mutable causing this error: `f`\n+\n+error[E0384]: cannot assign twice to immutable variable `s.x`\n+  --> $DIR/issue-35937.rs:26:5\n+   |\n+LL |     let s = S { x: 42 };\n+   |             ----------- first assignment to `s.x`\n+LL |     s.x += 1; //~ ERROR cannot assign\n+   |     ^^^^^^^^ cannot assign twice to immutable variable\n+\n+error[E0384]: cannot assign twice to immutable variable `s.x`\n+  --> $DIR/issue-35937.rs:30:5\n+   |\n+LL | fn bar(s: S) {\n+   |        - first assignment to `s.x`\n+LL |     s.x += 1; //~ ERROR cannot assign\n+   |     ^^^^^^^^ cannot assign twice to immutable variable\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0384, E0596.\n+For more information about an error, try `rustc --explain E0384`."}, {"sha": "29c7192a98bc6513915628179e5aa106e5ccb34b", "filename": "src/test/ui/did_you_mean/issue-37139.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,9 @@\n+error[E0596]: cannot borrow immutable item `x` as mutable\n+  --> $DIR/issue-37139.rs:22:18\n+   |\n+LL |             test(&mut x); //~ ERROR cannot borrow immutable\n+   |                  ^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "099479eaf2b6b22e43c2e3766260a6173c56066d", "filename": "src/test/ui/did_you_mean/issue-38147-1.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,11 @@\n+error[E0596]: cannot borrow immutable item `*self.s` as mutable\n+  --> $DIR/issue-38147-1.rs:27:9\n+   |\n+LL |         self.s.push('x'); //~ ERROR cannot borrow data mutably\n+   |         ^^^^^^ cannot borrow as mutable\n+   |\n+   = note: Value not mutable causing this error: `*self`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "c8e231ea3b3dc25ac028ed41b2e98e51726ccd11", "filename": "src/test/ui/did_you_mean/issue-38147-2.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,9 @@\n+error[E0596]: cannot borrow immutable item `*self.s` as mutable\n+  --> $DIR/issue-38147-2.rs:17:9\n+   |\n+LL |         self.s.push('x');\n+   |         ^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "c5d6551b647dd890e3b55008663db43dea90d314", "filename": "src/test/ui/did_you_mean/issue-38147-3.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,9 @@\n+error[E0596]: cannot borrow immutable item `*self.s` as mutable\n+  --> $DIR/issue-38147-3.rs:17:9\n+   |\n+LL |         self.s.push('x');\n+   |         ^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "5649fc903a07884c0dad7defd1457f3609eb6fc1", "filename": "src/test/ui/did_you_mean/issue-38147-4.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,11 @@\n+error[E0596]: cannot borrow immutable item `*f.s` as mutable\n+  --> $DIR/issue-38147-4.rs:16:5\n+   |\n+LL |     f.s.push('x'); //~ ERROR cannot borrow data mutably\n+   |     ^^^ cannot borrow as mutable\n+   |\n+   = note: Value not mutable causing this error: `*f`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "6e57796aa45c75f97c1f80b5104ef08584b783a0", "filename": "src/test/ui/did_you_mean/issue-39544.nll.stderr", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,98 @@\n+error[E0596]: cannot borrow immutable item `z.x` as mutable\n+  --> $DIR/issue-39544.rs:21:13\n+   |\n+LL |     let _ = &mut z.x; //~ ERROR cannot borrow\n+   |             ^^^^^^^^ cannot borrow as mutable\n+   |\n+   = note: Value not mutable causing this error: `z`\n+\n+error[E0596]: cannot borrow immutable item `self.x` as mutable\n+  --> $DIR/issue-39544.rs:26:17\n+   |\n+LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+   = note: Value not mutable causing this error: `*self`\n+\n+error[E0596]: cannot borrow immutable item `self.x` as mutable\n+  --> $DIR/issue-39544.rs:30:17\n+   |\n+LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+   = note: Value not mutable causing this error: `*self`\n+\n+error[E0596]: cannot borrow immutable item `other.x` as mutable\n+  --> $DIR/issue-39544.rs:31:17\n+   |\n+LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+   = note: Value not mutable causing this error: `*other`\n+\n+error[E0596]: cannot borrow immutable item `self.x` as mutable\n+  --> $DIR/issue-39544.rs:35:17\n+   |\n+LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+   = note: Value not mutable causing this error: `*self`\n+\n+error[E0596]: cannot borrow immutable item `other.x` as mutable\n+  --> $DIR/issue-39544.rs:36:17\n+   |\n+LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+   = note: Value not mutable causing this error: `*other`\n+\n+error[E0596]: cannot borrow immutable item `self.x` as mutable\n+  --> $DIR/issue-39544.rs:40:17\n+   |\n+LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+   = note: Value not mutable causing this error: `*self`\n+\n+error[E0596]: cannot borrow immutable item `other.x` as mutable\n+  --> $DIR/issue-39544.rs:41:17\n+   |\n+LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+   = note: Value not mutable causing this error: `*other`\n+\n+error[E0596]: cannot borrow immutable item `other.x` as mutable\n+  --> $DIR/issue-39544.rs:45:17\n+   |\n+LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+   = note: Value not mutable causing this error: `*other`\n+\n+error[E0596]: cannot borrow immutable item `z.x` as mutable\n+  --> $DIR/issue-39544.rs:51:13\n+   |\n+LL |     let _ = &mut z.x; //~ ERROR cannot borrow\n+   |             ^^^^^^^^ cannot borrow as mutable\n+   |\n+   = note: Value not mutable causing this error: `z`\n+\n+error[E0596]: cannot borrow immutable item `w.x` as mutable\n+  --> $DIR/issue-39544.rs:52:13\n+   |\n+LL |     let _ = &mut w.x; //~ ERROR cannot borrow\n+   |             ^^^^^^^^ cannot borrow as mutable\n+   |\n+   = note: Value not mutable causing this error: `*w`\n+\n+error[E0594]: cannot assign to immutable item `*x.0`\n+  --> $DIR/issue-39544.rs:58:5\n+   |\n+LL |     *x.0 = 1;\n+   |     ^^^^^^^^ cannot mutate\n+\n+error: aborting due to 12 previous errors\n+\n+Some errors occurred: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "489e1c39c46b9504f9bf00fe4d8a69662af1f81d", "filename": "src/test/ui/did_you_mean/issue-40823.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,9 @@\n+error[E0596]: cannot borrow immutable item `*buf` as mutable\n+  --> $DIR/issue-40823.rs:13:5\n+   |\n+LL |     buf.iter_mut(); //~ ERROR cannot borrow immutable borrowed content\n+   |     ^^^ cannot borrow as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "692f697e889bc0684e76ca380e6096636f124b96", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error: compilation successful\n+  --> $DIR/dropck-eyepatch-extern-crate.rs:27:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     use std::cell::Cell;\n+LL | |     let c_long;\n+LL | |     let (c, mut dt, mut dr, mut pt, mut pr, st, sr)\n+...  |\n+LL | |     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "e06b47a8d79dc46e10f0ab3208dd74d29151d693", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -19,12 +19,12 @@\n //\n // See also dropck-eyepatch.rs for more information about the general\n // structure of the test.\n-\n+#![feature(rustc_attrs)]\n extern crate dropck_eyepatch_extern_crate as other;\n \n use other::{Dt,Dr,Pt,Pr,St,Sr};\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     use std::cell::Cell;\n     let c_long;\n     let (c, mut dt, mut dr, mut pt, mut pr, st, sr)"}, {"sha": "f50168fd5862d649bd685c531ac9513ed66e5c82", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error: compilation successful\n+  --> $DIR/dropck-eyepatch-reorder.rs:44:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     use std::cell::Cell;\n+LL | |     let c_long;\n+LL | |     let (c, mut dt, mut dr, mut pt, mut pr, st, sr)\n+...  |\n+LL | |     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "832eeacbec54a2fc47bd7b44db5fde01b8346e92", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(dropck_eyepatch)]\n+#![feature(dropck_eyepatch, rustc_attrs)]\n \n // The point of this test is to test uses of `#[may_dangle]` attribute\n // where the formal declaration order (in the impl generics) does not\n@@ -41,7 +41,7 @@ unsafe impl<'b, #[may_dangle] 'a, B: fmt::Debug> Drop for Pr<'a, 'b, B> {\n     fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n }\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     use std::cell::Cell;\n     let c_long;\n     let (c, mut dt, mut dr, mut pt, mut pr, st, sr)"}, {"sha": "8c55fdbc0b86b17bc19cd3ee34072544bf33c1c1", "filename": "src/test/ui/dropck/dropck-eyepatch.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error: compilation successful\n+  --> $DIR/dropck-eyepatch.rs:67:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     use std::cell::Cell;\n+LL | |     let c_long;\n+LL | |     let (c, mut dt, mut dr, mut pt, mut pr, st, sr)\n+...  |\n+LL | |     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "cfa67837485e50ec2bcee32c45aa38c4dcda0b75", "filename": "src/test/ui/dropck/dropck-eyepatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(dropck_eyepatch)]\n+#![feature(dropck_eyepatch, rustc_attrs)]\n \n // The point of this test is to illustrate that the `#[may_dangle]`\n // attribute specifically allows, in the context of a type\n@@ -64,7 +64,7 @@ unsafe impl<#[may_dangle] 'a, 'b, B: fmt::Debug> Drop for Pr<'a, 'b, B> {\n     fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n }\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     use std::cell::Cell;\n     let c_long;\n     let (c, mut dt, mut dr, mut pt, mut pr, st, sr)"}, {"sha": "ec31f5d05d787f6413bb19afeeeb32b4a5b8a6e9", "filename": "src/test/ui/error-codes/E0017.nll.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0017.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0017.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,28 @@\n+error[E0017]: references in constants may only refer to immutable values\n+  --> $DIR/E0017.rs:14:30\n+   |\n+LL | const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n+   |                              ^^^^^^ constants require immutable values\n+\n+error[E0017]: references in statics may only refer to immutable values\n+  --> $DIR/E0017.rs:15:39\n+   |\n+LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+   |                                       ^^^^^^ statics require immutable values\n+\n+error[E0017]: references in statics may only refer to immutable values\n+  --> $DIR/E0017.rs:17:38\n+   |\n+LL | static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n+   |                                      ^^^^^^ statics require immutable values\n+\n+error[E0596]: cannot borrow immutable item `X` as mutable\n+  --> $DIR/E0017.rs:15:39\n+   |\n+LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+   |                                       ^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors occurred: E0017, E0596.\n+For more information about an error, try `rustc --explain E0017`."}, {"sha": "6aaff7433830d7a0fb510212570d3ef5fa976e03", "filename": "src/test/ui/error-codes/E0161.nll.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,16 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/E0161.rs:14:28\n+   |\n+LL |     let _x: Box<str> = box *\"hello\"; //~ ERROR E0161\n+   |                            ^^^^^^^^ cannot move out of borrowed content\n+\n+error[E0161]: cannot move a value of type str: the size of str cannot be statically determined\n+  --> $DIR/E0161.rs:14:28\n+   |\n+LL |     let _x: Box<str> = box *\"hello\"; //~ ERROR E0161\n+   |                            ^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0161, E0507.\n+For more information about an error, try `rustc --explain E0161`."}, {"sha": "6a4bd6b31a116675fb6b32c51c6a5a9fa18b7473", "filename": "src/test/ui/error-codes/E0388.nll.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0388.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0388.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,28 @@\n+error[E0017]: references in constants may only refer to immutable values\n+  --> $DIR/E0388.rs:14:30\n+   |\n+LL | const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n+   |                              ^^^^^^ constants require immutable values\n+\n+error[E0017]: references in statics may only refer to immutable values\n+  --> $DIR/E0388.rs:15:39\n+   |\n+LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+   |                                       ^^^^^^ statics require immutable values\n+\n+error[E0017]: references in statics may only refer to immutable values\n+  --> $DIR/E0388.rs:17:38\n+   |\n+LL | static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n+   |                                      ^^^^^^ statics require immutable values\n+\n+error[E0596]: cannot borrow immutable item `X` as mutable\n+  --> $DIR/E0388.rs:15:39\n+   |\n+LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+   |                                       ^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors occurred: E0017, E0596.\n+For more information about an error, try `rustc --explain E0017`."}, {"sha": "13ba653a5cad85ca6519d9f9535d32d2dd2768a5", "filename": "src/test/ui/error-codes/E0389.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0389.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0389.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0389.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,11 @@\n+error[E0594]: cannot assign to immutable item `fancy_ref.num`\n+  --> $DIR/E0389.rs:18:5\n+   |\n+LL |     fancy_ref.num = 6; //~ ERROR E0389\n+   |     ^^^^^^^^^^^^^^^^^ cannot mutate\n+   |\n+   = note: Value not mutable causing this error: `*fancy_ref`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "27a71df147e1d759bb9086c613ed4c33d690cd08", "filename": "src/test/ui/error-codes/E0499.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0499.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0499.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0499.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,12 @@\n+error: compilation successful\n+  --> $DIR/E0499.rs:11:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     let mut i = 0;\n+LL | |     let mut x = &mut i;\n+LL | |     let mut a = &mut i; //~ ERROR E0499\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c39972369347a52733e2b01f0c5d25f686a8b2ae", "filename": "src/test/ui/error-codes/E0499.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0499.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0499.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0499.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -7,8 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n-fn main() {\n+#![feature(rustc_attrs)]\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let mut i = 0;\n     let mut x = &mut i;\n     let mut a = &mut i; //~ ERROR E0499"}, {"sha": "67a08661040cf075ad978522a5d0b83a3b955b33", "filename": "src/test/ui/error-codes/E0502.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,9 @@\n+error: compilation successful\n+  --> $DIR/E0502.rs:17:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "9c126bdcde84b40dda7e2b9676bbb9d27d15ecaf", "filename": "src/test/ui/error-codes/E0502.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0502.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0502.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0502.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -7,12 +7,12 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n fn bar(x: &mut i32) {}\n fn foo(a: &mut i32) {\n     let ref y = a;\n     bar(a); //~ ERROR E0502\n }\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n }"}, {"sha": "6c5e99d8769049dd7358447a61e70393cba96203", "filename": "src/test/ui/error-codes/E0503.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0503.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0503.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0503.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,12 @@\n+error: compilation successful\n+  --> $DIR/E0503.rs:11:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     let mut value = 3;\n+LL | |     let _borrow = &mut value;\n+LL | |     let _sum = value + 1; //~ ERROR E0503\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "1822a8925d3cd9a41ae55beb96e6e8bfbf01825e", "filename": "src/test/ui/error-codes/E0503.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0503.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0503.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0503.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -7,8 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n-fn main() {\n+#![feature(rustc_attrs)]\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let mut value = 3;\n     let _borrow = &mut value;\n     let _sum = value + 1; //~ ERROR E0503"}, {"sha": "ec30bb306fc3fd3d2e539ce69cd1edddfa5b8743", "filename": "src/test/ui/error-codes/E0504.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0504.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0504.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0504.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,18 @@\n+error[E0505]: cannot move out of `fancy_num` because it is borrowed\n+  --> $DIR/E0504.rs:19:13\n+   |\n+LL |       let fancy_ref = &fancy_num;\n+   |                       ---------- borrow of `fancy_num` occurs here\n+LL | \n+LL |       let x = move || {\n+   |  _____________^\n+LL | |         println!(\"child function: {}\", fancy_num.num); //~ ERROR E0504\n+LL | |     };\n+   | |_____^ move out of `fancy_num` occurs here\n+...\n+LL |       println!(\"main function: {}\", fancy_ref.num);\n+   |                                     ------------- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0505`."}, {"sha": "556e0c73d1af6376d17baa87168047b2f0bfd0e8", "filename": "src/test/ui/error-codes/E0505.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0505.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0505.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0505.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error: compilation successful\n+  --> $DIR/E0505.rs:15:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     let x = Value{};\n+LL | |     {\n+LL | |         let _ref_to_val: &Value = &x;\n+LL | |         eat(x); //~ ERROR E0505\n+LL | |     }\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "dd2980936c0b2b62db040bd90e7964dbb0e2a1e1", "filename": "src/test/ui/error-codes/E0505.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0505.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0505.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0505.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -7,12 +7,12 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n struct Value {}\n \n fn eat(val: Value) {}\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let x = Value{};\n     {\n         let _ref_to_val: &Value = &x;"}, {"sha": "56d970494a0e07efe8687505c9ada8b9355cac21", "filename": "src/test/ui/error-codes/E0509.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0509.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0509.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0509.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,9 @@\n+error[E0509]: cannot move out of type `DropStruct`, which implements the `Drop` trait\n+  --> $DIR/E0509.rs:26:23\n+   |\n+LL |     let fancy_field = drop_struct.fancy; //~ ERROR E0509\n+   |                       ^^^^^^^^^^^^^^^^^ cannot move out of here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0509`."}, {"sha": "56119e4226e60e52d11ff0143c2ca6c2959b63d9", "filename": "src/test/ui/error-codes/E0597.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,13 @@\n+error: compilation successful\n+  --> $DIR/E0597.rs:15:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     let mut x = Foo { x: None };\n+LL | |     let y = 0;\n+LL | |     x.x = Some(&y);\n+LL | |     //~^ `y` does not live long enough [E0597]\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "74178a69444040631df70d19e0f5910233eccc9f", "filename": "src/test/ui/error-codes/E0597.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0597.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0597.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0597.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -7,12 +7,12 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n struct Foo<'a> {\n     x: Option<&'a u32>,\n }\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let mut x = Foo { x: None };\n     let y = 0;\n     x.x = Some(&y);"}, {"sha": "e9f0979569176d1629b0cd261348da844395fadd", "filename": "src/test/ui/error-codes/E0621-does-not-trigger-for-closures.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/E0621-does-not-trigger-for-closures.rs:25:5\n+   |\n+LL |     invoke(&x, |a, b| if a > b { a } else { b }); //~ ERROR E0495\n+   |     ^^^^^^\n+\n+error: free region `` does not outlive free region `'_#2r`\n+  --> $DIR/E0621-does-not-trigger-for-closures.rs:25:26\n+   |\n+LL |     invoke(&x, |a, b| if a > b { a } else { b }); //~ ERROR E0495\n+   |                          ^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "81de0d14aa7d33bf22fddbd7dcab7e87d8c96485", "filename": "src/test/ui/feature-gate-nll.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ffeature-gate-nll.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ffeature-gate-nll.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-nll.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,13 @@\n+error: compilation successful\n+  --> $DIR/feature-gate-nll.rs:13:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     let mut x = 33;\n+LL | |\n+LL | |     let p = &x;\n+LL | |     x = 22; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "752b1fa821f7f9cf59fcaa1610c3ef3d833028de", "filename": "src/test/ui/feature-gate-nll.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ffeature-gate-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Ffeature-gate-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-nll.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -7,10 +7,10 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let mut x = 33;\n \n     let p = &x;"}, {"sha": "1801da6c8b2ddf73720c50a74235335089d80fa2", "filename": "src/test/ui/generator/borrowing.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error: compilation successful\n+  --> $DIR/borrowing.rs:15:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     let _b = {\n+LL | |         let a = 3;\n+LL | |         unsafe { (|| yield &a).resume() }\n+...  |\n+LL | |     };\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "f80aca9fb00e6c357b73554d5c7f69411bf9b152", "filename": "src/test/ui/generator/borrowing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(generators, generator_trait)]\n+#![feature(generators, generator_trait, rustc_attrs)]\n \n use std::ops::Generator;\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let _b = {\n         let a = 3;\n         unsafe { (|| yield &a).resume() }"}, {"sha": "72ebaab32789825674c71e21fbf6975a5a0f7ec4", "filename": "src/test/ui/generator/dropck.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error: compilation successful\n+  --> $DIR/dropck.rs:16:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     let (cell, mut gen);\n+LL | |     cell = Box::new(RefCell::new(0));\n+LL | |     let ref_ = Box::leak(Box::new(Some(cell.borrow_mut())));\n+...  |\n+LL | |     // drops the RefCell and then the Ref, leading to use-after-free\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "8f4ba64fd57276fc4a121b4d0c203d1e724173a9", "filename": "src/test/ui/generator/dropck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(generators, generator_trait, box_leak)]\n+#![feature(generators, generator_trait, box_leak, rustc_attrs)]\n \n use std::cell::RefCell;\n use std::ops::Generator;\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let (cell, mut gen);\n     cell = Box::new(RefCell::new(0));\n     let ref_ = Box::leak(Box::new(Some(cell.borrow_mut())));"}, {"sha": "ec8adf9d37c46669c51b1107a4c6ab1cc1d2d8d2", "filename": "src/test/ui/generator/pattern-borrow.nll.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,8 @@\n+error: compilation successful\n+  --> $DIR/pattern-borrow.rs:15:1\n+   |\n+LL | fn main() { #![rustc_error] } // rust-lang/rust#49855\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "dd63b9eaa5b1c1627e1f36bd9b9b6bb5fffe1471", "filename": "src/test/ui/generator/pattern-borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(generators)]\n+#![feature(generators, rustc_attrs)]\n \n enum Test { A(i32), B, }\n \n-fn main() { }\n+fn main() { #![rustc_error] } // rust-lang/rust#49855\n \n fn fun(test: Test) {\n     move || {"}, {"sha": "08839c23c37622261aa1cb76e3a157e323af6534", "filename": "src/test/ui/generator/ref-escapes-but-not-over-yield.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,12 @@\n+error[E0597]: `b` does not live long enough\n+  --> $DIR/ref-escapes-but-not-over-yield.rs:24:13\n+   |\n+LL |         a = &b;\n+   |             ^^ borrowed value does not live long enough\n+LL |         //~^ ERROR `b` does not live long enough\n+LL |     };\n+   |     - borrowed value only lives until here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "6242ec0f548c95c54eb5bab39cd1f3238ba5f984", "filename": "src/test/ui/generator/yield-in-args.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,9 @@\n+error[E0626]: borrow may still be in use when generator yields\n+  --> $DIR/yield-in-args.rs:18:13\n+   |\n+LL |         foo(&b, yield); //~ ERROR\n+   |             ^^  ----- possible yield occurs here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0626`."}, {"sha": "be4852aaf06e16e0ac6ac8beb654222b444e7b44", "filename": "src/test/ui/generator/yield-while-iterating.nll.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,55 @@\n+error[E0626]: borrow may still be in use when generator yields\n+  --> $DIR/yield-while-iterating.rs:22:18\n+   |\n+LL |         for p in &x { //~ ERROR\n+   |                  ^^\n+LL |             yield();\n+   |             ------- possible yield occurs here\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/yield-while-iterating.rs:50:17\n+   |\n+LL |       let mut b = || {\n+   |  _________________^\n+LL | |         for p in &mut x {\n+LL | |             yield p;\n+LL | |         }\n+LL | |     };\n+   | |     ^\n+   | |     |\n+   | |_____temporary value only lives until here\n+   |       temporary value does not live long enough\n+\n+error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n+  --> $DIR/yield-while-iterating.rs:67:20\n+   |\n+LL |       let mut b = || {\n+   |  _________________-\n+LL | |         for p in &mut x {\n+LL | |             yield p;\n+LL | |         }\n+LL | |     };\n+   | |_____- mutable borrow occurs here\n+LL |       println!(\"{}\", x[0]); //~ ERROR\n+   |                      ^ immutable borrow occurs here\n+LL |       b.resume();\n+   |       - borrow later used here\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/yield-while-iterating.rs:62:17\n+   |\n+LL |       let mut b = || {\n+   |  _________________^\n+LL | |         for p in &mut x {\n+LL | |             yield p;\n+LL | |         }\n+LL | |     };\n+   | |     ^\n+   | |     |\n+   | |_____temporary value only lives until here\n+   |       temporary value does not live long enough\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors occurred: E0502, E0597, E0626.\n+For more information about an error, try `rustc --explain E0502`."}, {"sha": "14989079527415fc32f9f7c30e133e742bb63997", "filename": "src/test/ui/generator/yield-while-ref-reborrowed.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,18 @@\n+error[E0501]: cannot borrow `x` as immutable because previous closure requires unique access\n+  --> $DIR/yield-while-ref-reborrowed.rs:45:20\n+   |\n+LL |       let mut b = || {\n+   |  _________________-\n+LL | |         let a = &mut *x;\n+LL | |         yield();\n+LL | |         println!(\"{}\", a);\n+LL | |     };\n+   | |_____- closure construction occurs here\n+LL |       println!(\"{}\", x); //~ ERROR\n+   |                      ^ borrow occurs here\n+LL |       b.resume();\n+   |       - borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0501`."}, {"sha": "34ee39c7164023454d71638e5453ceb8b3efa384", "filename": "src/test/ui/in-band-lifetimes/impl/dyn-trait.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/dyn-trait.rs:33:16\n+   |\n+LL |     static_val(x); //~ ERROR cannot infer\n+   |                ^\n+\n+error: free region `'a` does not outlive free region `'static`\n+  --> $DIR/dyn-trait.rs:33:5\n+   |\n+LL |     static_val(x); //~ ERROR cannot infer\n+   |     ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "0930583a7ee33d7b250d17d977c6a3270c52afa2", "filename": "src/test/ui/in-band-lifetimes/mismatched.nll.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,32 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/mismatched.rs:14:42\n+   |\n+LL | fn foo(x: &'a u32, y: &u32) -> &'a u32 { y } //~ ERROR explicit lifetime required\n+   |                                          ^\n+\n+warning: not reporting region error due to -Znll\n+  --> $DIR/mismatched.rs:16:46\n+   |\n+LL | fn foo2(x: &'a u32, y: &'b u32) -> &'a u32 { y } //~ ERROR lifetime mismatch\n+   |                                              ^\n+\n+error[E0621]: explicit lifetime required in the type of `y`\n+  --> $DIR/mismatched.rs:14:42\n+   |\n+LL | fn foo(x: &'a u32, y: &u32) -> &'a u32 { y } //~ ERROR explicit lifetime required\n+   |                    -                     ^ lifetime `'a` required\n+   |                    |\n+   |                    consider changing the type of `y` to `&'a u32`\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/mismatched.rs:16:46\n+   |\n+LL | fn foo2(x: &'a u32, y: &'b u32) -> &'a u32 { y } //~ ERROR lifetime mismatch\n+   |                        -------     -------   ^ ...but data from `y` is returned here\n+   |                        |\n+   |                        this parameter and the return type are declared with different lifetimes...\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0621, E0623.\n+For more information about an error, try `rustc --explain E0621`."}, {"sha": "5e42cab9974dab9aef5336602d2c3a2813878d57", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/mismatched_trait.rs:16:9\n+   |\n+LL |         y //~ ERROR explicit lifetime required\n+   |         ^\n+\n+error[E0621]: explicit lifetime required in the type of `y`\n+  --> $DIR/mismatched_trait.rs:16:9\n+   |\n+LL |     fn baz(&self, x: &'a u32, y: &u32) -> &'a u32 {\n+   |                               - consider changing the type of `y` to `&'a u32`\n+LL |         y //~ ERROR explicit lifetime required\n+   |         ^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "546d7b0ed5c8a4cfe1f4061a94baa700b7559098", "filename": "src/test/ui/in-band-lifetimes/mut_while_borrow.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmut_while_borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmut_while_borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmut_while_borrow.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,13 @@\n+error[E0506]: cannot assign to `p` because it is borrowed\n+  --> $DIR/mut_while_borrow.rs:19:5\n+   |\n+LL |     let r = foo(&p);\n+   |                 -- borrow of `p` occurs here\n+LL |     p += 1; //~ ERROR cannot assign to `p` because it is borrowed\n+   |     ^^^^^^ assignment to borrowed `p` occurs here\n+LL |     println!(\"{}\", r);\n+   |                    - borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "604ad38ad2340eb12afe338058be6f55ccfe7313", "filename": "src/test/ui/issue-13058.nll.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-13058.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-13058.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-13058.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,27 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/issue-13058.rs:24:21\n+   |\n+LL |     let cont_iter = cont.iter();\n+   |                     ^^^^\n+\n+warning: not reporting region error due to -Znll\n+  --> $DIR/issue-13058.rs:24:26\n+   |\n+LL |     let cont_iter = cont.iter();\n+   |                          ^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-13058.rs:36:11\n+   |\n+LL |     check((3, 5));\n+   |           ^^^^^^\n+   |           |\n+   |           expected reference, found tuple\n+   |           help: consider borrowing here: `&(3, 5)`\n+   |\n+   = note: expected type `&_`\n+              found type `({integer}, {integer})`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "d6009e8078dceb204102b6f977f68de9cbb4fd21", "filename": "src/test/ui/issue-17263.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-17263.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-17263.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17263.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error: compilation successful\n+  --> $DIR/issue-17263.rs:15:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     let mut x: Box<_> = box Foo { a: 1, b: 2 };\n+LL | |     let (a, b) = (&mut x.a, &mut x.b);\n+LL | |     //~^ ERROR cannot borrow `x` (via `x.b`) as mutable more than once at a time\n+...  |\n+LL | |     //~^ ERROR cannot borrow `foo` (via `foo.b`) as immutable\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b251f9a415253eab1a1f71908a854bb4dc83e122", "filename": "src/test/ui/issue-17263.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-17263.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-17263.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17263.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n+#![feature(box_syntax, rustc_attrs)]\n \n struct Foo { a: isize, b: isize }\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let mut x: Box<_> = box Foo { a: 1, b: 2 };\n     let (a, b) = (&mut x.a, &mut x.b);\n     //~^ ERROR cannot borrow `x` (via `x.b`) as mutable more than once at a time"}, {"sha": "b5b9cefb70639402fe93eb602ac9978e92f59c67", "filename": "src/test/ui/issue-21600.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-21600.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-21600.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-21600.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,15 @@\n+error[E0596]: cannot borrow immutable item `x` as mutable\n+  --> $DIR/issue-21600.rs:24:20\n+   |\n+LL |         call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer\n+   |                    ^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow immutable item `x` as mutable\n+  --> $DIR/issue-21600.rs:24:17\n+   |\n+LL |         call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer\n+   |                 ^^^^^^^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "05ba186c6bb6a7eb0b21f0d1e317228404c9b7a7", "filename": "src/test/ui/issue-25793.nll.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-25793.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-25793.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-25793.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,8 @@\n+error: compilation successful\n+  --> $DIR/issue-25793.rs:32:1\n+   |\n+LL | fn main() { #![rustc_error] } // rust-lang/rust#49855\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "8624527145c2ac8a4e2476c43ca97e290e8794a3", "filename": "src/test/ui/issue-25793.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-25793.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-25793.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-25793.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n macro_rules! width(\n     ($this:expr) => {\n         $this.width.unwrap()\n@@ -29,4 +29,4 @@ impl HasInfo {\n     }\n }\n \n-fn main() {}\n+fn main() { #![rustc_error] } // rust-lang/rust#49855"}, {"sha": "040e6300af60a48162f76b05c27da0e03feb400e", "filename": "src/test/ui/issue-36400.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-36400.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-36400.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-36400.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,11 @@\n+error[E0596]: cannot borrow immutable item `*x` as mutable\n+  --> $DIR/issue-36400.rs:15:7\n+   |\n+LL |     f(&mut *x); //~ ERROR cannot borrow immutable\n+   |       ^^^^^^^ cannot borrow as mutable\n+   |\n+   = note: Value not mutable causing this error: `x`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "48e27014792c7d854395d6a41b40d302be0148e1", "filename": "src/test/ui/issue-40402-ref-hints/issue-40402-1.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,9 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/issue-40402-1.rs:19:13\n+   |\n+LL |     let e = f.v[0]; //~ ERROR cannot move out of indexed content\n+   |             ^^^^^^ cannot move out of borrowed content\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "0b907c5acf1dc860ada026d6c1d35b0c246de744", "filename": "src/test/ui/issue-40402-ref-hints/issue-40402-2.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,15 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/issue-40402-2.rs:15:10\n+   |\n+LL |     let (a, b) = x[0]; //~ ERROR cannot move out of indexed content\n+   |          ^ cannot move out of borrowed content\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/issue-40402-2.rs:15:13\n+   |\n+LL |     let (a, b) = x[0]; //~ ERROR cannot move out of indexed content\n+   |             ^ cannot move out of borrowed content\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "cae04aaedfdf334b5a48d10da5b7a1258036e9b8", "filename": "src/test/ui/issue-42106.nll.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-42106.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-42106.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42106.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,8 @@\n+error: compilation successful\n+  --> $DIR/issue-42106.rs:16:1\n+   |\n+LL | fn main() { #![rustc_error] } // rust-lang/rust#49855\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "96f410578ce5a55d62856bd6d8708e5ebdd66bb4", "filename": "src/test/ui/issue-42106.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-42106.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-42106.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42106.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -7,10 +7,10 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n fn do_something<T>(collection: &mut Vec<T>) {\n     let _a = &collection;\n     collection.swap(1, 2); //~ ERROR also borrowed as immutable\n }\n \n-fn main() {}\n+fn main() { #![rustc_error] } // rust-lang/rust#49855"}, {"sha": "7f4273bc8c770d8c3a937a46ac2344b8af9428f4", "filename": "src/test/ui/issue-4335.nll.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-4335.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-4335.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-4335.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,25 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/issue-4335.rs:16:20\n+   |\n+LL |     id(Box::new(|| *v))\n+   |                    ^^ cannot move out of borrowed content\n+\n+error[E0597]: `v` does not live long enough\n+  --> $DIR/issue-4335.rs:16:17\n+   |\n+LL |     id(Box::new(|| *v))\n+   |                 ^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - borrowed value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'r as defined on the function body at 15:1...\n+  --> $DIR/issue-4335.rs:15:1\n+   |\n+LL | fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0507, E0597.\n+For more information about an error, try `rustc --explain E0507`."}, {"sha": "cf108691a0e4f65a2034c7ca927a1a79450e00b4", "filename": "src/test/ui/issue-45697-1.nll.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-45697-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-45697-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45697-1.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,34 @@\n+error[E0506]: cannot assign to `*y.pointer` because it is borrowed (Ast)\n+  --> $DIR/issue-45697-1.rs:30:9\n+   |\n+LL |         let z = copy_borrowed_ptr(&mut y);\n+   |                                        - borrow of `*y.pointer` occurs here\n+LL |         *y.pointer += 1;\n+   |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n+\n+error[E0503]: cannot use `*y.pointer` because it was mutably borrowed (Mir)\n+  --> $DIR/issue-45697-1.rs:30:9\n+   |\n+LL |         let z = copy_borrowed_ptr(&mut y);\n+   |                                   ------ borrow of `y` occurs here\n+LL |         *y.pointer += 1;\n+   |         ^^^^^^^^^^^^^^^ use of borrowed `y`\n+...\n+LL |         *z.pointer += 1;\n+   |         --------------- borrow later used here\n+\n+error[E0506]: cannot assign to `*y.pointer` because it is borrowed (Mir)\n+  --> $DIR/issue-45697-1.rs:30:9\n+   |\n+LL |         let z = copy_borrowed_ptr(&mut y);\n+   |                                   ------ borrow of `*y.pointer` occurs here\n+LL |         *y.pointer += 1;\n+   |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n+...\n+LL |         *z.pointer += 1;\n+   |         --------------- borrow later used here\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0503, E0506.\n+For more information about an error, try `rustc --explain E0503`."}, {"sha": "a85972fcd7a1c05b6e24577a7352cf3ba92a7ca4", "filename": "src/test/ui/issue-45697.nll.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-45697.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-45697.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45697.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,34 @@\n+error[E0506]: cannot assign to `*y.pointer` because it is borrowed (Ast)\n+  --> $DIR/issue-45697.rs:30:9\n+   |\n+LL |         let z = copy_borrowed_ptr(&mut y);\n+   |                                        - borrow of `*y.pointer` occurs here\n+LL |         *y.pointer += 1;\n+   |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n+\n+error[E0503]: cannot use `*y.pointer` because it was mutably borrowed (Mir)\n+  --> $DIR/issue-45697.rs:30:9\n+   |\n+LL |         let z = copy_borrowed_ptr(&mut y);\n+   |                                   ------ borrow of `y` occurs here\n+LL |         *y.pointer += 1;\n+   |         ^^^^^^^^^^^^^^^ use of borrowed `y`\n+...\n+LL |         *z.pointer += 1;\n+   |         --------------- borrow later used here\n+\n+error[E0506]: cannot assign to `*y.pointer` because it is borrowed (Mir)\n+  --> $DIR/issue-45697.rs:30:9\n+   |\n+LL |         let z = copy_borrowed_ptr(&mut y);\n+   |                                   ------ borrow of `*y.pointer` occurs here\n+LL |         *y.pointer += 1;\n+   |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n+...\n+LL |         *z.pointer += 1;\n+   |         --------------- borrow later used here\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0503, E0506.\n+For more information about an error, try `rustc --explain E0503`."}, {"sha": "0108056bc7278265ae61aba0d7c536908bfcd6d8", "filename": "src/test/ui/issue-46471-1.nll.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-46471-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fissue-46471-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46471-1.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,28 @@\n+error[E0597]: `z` does not live long enough (Ast)\n+  --> $DIR/issue-46471-1.rs:16:14\n+   |\n+LL |         &mut z\n+   |              ^ borrowed value does not live long enough\n+LL |     };\n+   |     - `z` dropped here while still borrowed\n+...\n+LL | }\n+   | - borrowed value needs to live until here\n+\n+error[E0597]: `z` does not live long enough (Mir)\n+  --> $DIR/issue-46471-1.rs:16:9\n+   |\n+LL |       let y = {\n+   |  _____________-\n+LL | |         let mut z = 0;\n+LL | |         &mut z\n+   | |         ^^^^^^ borrowed value does not live long enough\n+LL | |     };\n+   | |     -\n+   | |     |\n+   | |_____borrowed value only lives until here\n+   |       borrow later used here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "62ccea36bd344a9ec5d9c178a871a44187d439a2", "filename": "src/test/ui/lifetime-errors/42701_one_named_and_one_anonymous.nll.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,22 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/42701_one_named_and_one_anonymous.rs:20:9\n+   |\n+LL |         &*x //~ ERROR explicit lifetime\n+   |         ^^^\n+\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/42701_one_named_and_one_anonymous.rs:16:5\n+   |\n+LL |   fn foo2<'a>(a: &'a Foo, x: &i32) -> &'a i32 {\n+   |                           - consider changing the type of `x` to `&'a i32`\n+LL | /     if true {\n+LL | |         let p: &i32 = &a.field;\n+LL | |         &*p\n+LL | |     } else {\n+LL | |         &*x //~ ERROR explicit lifetime\n+LL | |     }\n+   | |_____^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "78546594ef0dc95a228f8ae96a81186715bd1faf", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-early-bound-in-struct.nll.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,23 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex1-return-one-existing-name-early-bound-in-struct.rs:21:21\n+   |\n+LL |                     other //~ ERROR explicit lifetime\n+   |                     ^^^^^\n+\n+error[E0621]: explicit lifetime required in the type of `other`\n+  --> $DIR/ex1-return-one-existing-name-early-bound-in-struct.rs:18:9\n+   |\n+LL |       fn bar(&self, other: Foo) -> Foo<'a> {\n+   |                     ----- consider changing the type of `other` to `Foo<'a>`\n+LL | /         match *self {\n+LL | |             Foo::Bar(s) => {\n+LL | |                 if s == \"test\" {\n+LL | |                     other //~ ERROR explicit lifetime\n+...  |\n+LL | |             }\n+LL | |         }\n+   | |_________^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "11bb1df3c78aa7d81f8b4038cf74946d0fa4e1c3", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-2.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex1-return-one-existing-name-if-else-2.rs:12:16\n+   |\n+LL |     if x > y { x } else { y } //~ ERROR explicit lifetime\n+   |                ^\n+\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/ex1-return-one-existing-name-if-else-2.rs:12:8\n+   |\n+LL | fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n+   |            - consider changing the type of `x` to `&'a i32`\n+LL |     if x > y { x } else { y } //~ ERROR explicit lifetime\n+   |        ^^^^^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "a619e6ca964cd56ada9f7412db031bde47a87999", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-3.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,18 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex1-return-one-existing-name-if-else-3.rs:12:27\n+   |\n+LL |     if x > y { x } else { y } //~ ERROR explicit lifetime\n+   |                           ^\n+\n+error[E0621]: explicit lifetime required in parameter type\n+  --> $DIR/ex1-return-one-existing-name-if-else-3.rs:11:13\n+   |\n+LL | fn foo<'a>((x, y): (&'a i32, &i32)) -> &'a i32 {\n+   |            -^----\n+   |            ||\n+   |            |lifetime `'a` required\n+   |            consider changing type to `(&'a i32, &'a i32)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "92245173ce85958867f33167ac83bb63911b64e4", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-2.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl-2.rs:14:15\n+   |\n+LL |    if x > y { x } else { y } //~ ERROR explicit lifetime\n+   |               ^\n+\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl-2.rs:14:7\n+   |\n+LL | fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n+   |            - consider changing the type of `x` to `&'a i32`\n+LL |    if x > y { x } else { y } //~ ERROR explicit lifetime\n+   |       ^^^^^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "32ef068b8b9bba9d01e7638887628adf64b80e5c", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-3.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,18 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl-3.rs:18:36\n+   |\n+LL |     if true { &self.field } else { x } //~ ERROR explicit lifetime\n+   |                                    ^\n+\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl-3.rs:18:5\n+   |\n+LL |   fn foo<'a>(&'a self, x: &i32) -> &i32 {\n+   |                        - consider changing the type of `x` to `&'a i32`\n+LL | \n+LL |     if true { &self.field } else { x } //~ ERROR explicit lifetime\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "fd10b0d338cb362784f87a35454d16eaa338387a", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.nll.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,20 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:21:20\n+   |\n+LL |         if x > y { x } else { y } //~ ERROR lifetime mismatch\n+   |                    ^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:21:12\n+   |\n+LL |     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n+   |                   ----                 -------\n+   |                   |\n+   |                   this parameter and the return type are declared with different lifetimes...\n+LL | \n+LL |         if x > y { x } else { y } //~ ERROR lifetime mismatch\n+   |            ^^^^^ ...but data from `x` is returned here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "f17b24a0aca9c438dedf6c010b32287f0bf65f40", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex1-return-one-existing-name-if-else.rs:12:27\n+   |\n+LL |     if x > y { x } else { y } //~ ERROR explicit lifetime\n+   |                           ^\n+\n+error[E0621]: explicit lifetime required in the type of `y`\n+  --> $DIR/ex1-return-one-existing-name-if-else.rs:12:8\n+   |\n+LL | fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {\n+   |                        - consider changing the type of `y` to `&'a i32`\n+LL |     if x > y { x } else { y } //~ ERROR explicit lifetime\n+   |        ^^^^^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "b1663fe5eb65458a7aecafde1cdaa615f0bc11d5", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.nll.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,20 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex1-return-one-existing-name-return-type-is-anon.rs:18:5\n+   |\n+LL |     x //~ ERROR lifetime mismatch\n+   |     ^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex1-return-one-existing-name-return-type-is-anon.rs:18:5\n+   |\n+LL |   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n+   |                        -------     ----\n+   |                        |\n+   |                        this parameter and the return type are declared with different lifetimes...\n+LL | \n+LL |     x //~ ERROR lifetime mismatch\n+   |     ^ ...but data from `x` is returned here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "19b8bd2f780f0c5cefb29f3a4f039124bde2e2f4", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-self-is-anon.nll.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,20 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:18:30\n+   |\n+LL |         if true { x } else { self } //~ ERROR lifetime mismatch\n+   |                              ^^^^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:18:9\n+   |\n+LL |     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n+   |                -----                 -------\n+   |                |\n+   |                this parameter and the return type are declared with different lifetimes...\n+LL | \n+LL |         if true { x } else { self } //~ ERROR lifetime mismatch\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...but data from `self` is returned here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "0b34e464b4b0fd0e7c23488e069af0dda157c323", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name-2.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex2a-push-one-existing-name-2.rs:16:12\n+   |\n+LL |     y.push(x); //~ ERROR explicit lifetime\n+   |            ^\n+\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/ex2a-push-one-existing-name-2.rs:16:5\n+   |\n+LL | fn foo<'a>(x: Ref<i32>, y: &mut Vec<Ref<'a, i32>>) {\n+   |            - consider changing the type of `x` to `Ref<'a, i32>`\n+LL |     y.push(x); //~ ERROR explicit lifetime\n+   |     ^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "212b39966aae829ed4284d9f83322a19080d1211", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name-early-bound.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex2a-push-one-existing-name-early-bound.rs:17:12\n+   |\n+LL |     x.push(y); //~ ERROR explicit lifetime required\n+   |            ^\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/ex2a-push-one-existing-name-early-bound.rs:20:9\n+   |\n+LL | let x = baz;\n+   |     -   ^^^ cannot infer type for `T`\n+   |     |\n+   |     consider giving `x` a type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "ad39028154ad8e14c33dd56fbb97f1dd229d6adb", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex2a-push-one-existing-name.rs:16:12\n+   |\n+LL |     x.push(y); //~ ERROR explicit lifetime\n+   |            ^\n+\n+error[E0621]: explicit lifetime required in the type of `y`\n+  --> $DIR/ex2a-push-one-existing-name.rs:16:5\n+   |\n+LL | fn foo<'a>(x: &mut Vec<Ref<'a, i32>>, y: Ref<i32>) {\n+   |                                       - consider changing the type of `y` to `Ref<'a, i32>`\n+LL |     x.push(y); //~ ERROR explicit lifetime\n+   |     ^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "34daea7c9f46f6aba908319ab08db05e28c5b34d", "filename": "src/test/ui/lifetime-errors/ex2b-push-no-existing-names.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex2b-push-no-existing-names.rs:16:12\n+   |\n+LL |     x.push(y); //~ ERROR lifetime mismatch\n+   |            ^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex2b-push-no-existing-names.rs:16:5\n+   |\n+LL | fn foo(x: &mut Vec<Ref<i32>>, y: Ref<i32>) {\n+   |                    --------      -------- these two types are declared with different lifetimes...\n+LL |     x.push(y); //~ ERROR lifetime mismatch\n+   |     ^ ...but data from `y` flows into `x` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "96baa5c8ad2a8c67862192a0f3c0fe74904b0e1c", "filename": "src/test/ui/lifetime-errors/ex2c-push-inference-variable.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex2c-push-inference-variable.rs:16:13\n+   |\n+LL |     let z = Ref { data: y.data };\n+   |             ^^^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex2c-push-inference-variable.rs:16:9\n+   |\n+LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n+   |                                   ------------      ------------ these two types are declared with different lifetimes...\n+LL |     let z = Ref { data: y.data };\n+   |         ^ ...but data from `y` flows into `x` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "e5d47689b494822f6ada534c3c44c1a0efd9d389", "filename": "src/test/ui/lifetime-errors/ex2d-push-inference-variable-2.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex2d-push-inference-variable-2.rs:17:13\n+   |\n+LL |     let b = Ref { data: y.data };\n+   |             ^^^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex2d-push-inference-variable-2.rs:16:9\n+   |\n+LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n+   |                                   ------------      ------------ these two types are declared with different lifetimes...\n+LL |     let a: &mut Vec<Ref<i32>> = x; //~ ERROR lifetime mismatch\n+   |         ^ ...but data from `y` flows into `x` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "668752f8e0296fa461d5ec3dd614b760253d9cd6", "filename": "src/test/ui/lifetime-errors/ex2e-push-inference-variable-3.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex2e-push-inference-variable-3.rs:17:13\n+   |\n+LL |     let b = Ref { data: y.data };\n+   |             ^^^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex2e-push-inference-variable-3.rs:16:9\n+   |\n+LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n+   |                                   ------------      ------------ these two types are declared with different lifetimes...\n+LL |     let a: &mut Vec<Ref<i32>> = x; //~ ERROR lifetime mismatch\n+   |         ^ ...but data from `y` flows into `x` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "452342497117a3c6e63d92681264ad44a1a31be3", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-2.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex3-both-anon-regions-2.rs:12:9\n+   |\n+LL |     v = x; //~ ERROR lifetime mismatch\n+   |         ^\n+\n+error[E0384]: cannot assign twice to immutable variable `v`\n+  --> $DIR/ex3-both-anon-regions-2.rs:12:5\n+   |\n+LL | fn foo((v, w): (&u8, &u8), x: &u8) {\n+   |         - first assignment to `v`\n+LL |     v = x; //~ ERROR lifetime mismatch\n+   |     ^^^^^ cannot assign twice to immutable variable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0384`."}, {"sha": "581088a9258a772009eebbe8062cc56082a9b0b0", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-3.nll.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,31 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex3-both-anon-regions-3.rs:12:13\n+   |\n+LL |     z.push((x,y)); //~ ERROR lifetime mismatch\n+   |             ^\n+\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex3-both-anon-regions-3.rs:12:15\n+   |\n+LL |     z.push((x,y)); //~ ERROR lifetime mismatch\n+   |               ^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-3.rs:11:33\n+   |\n+LL | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n+   |                     ---         ^       --- these two types are declared with different lifetimes...\n+   |                                 |\n+   |                                 ...but data flows into `z` here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-3.rs:11:33\n+   |\n+LL | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n+   |                         ---     ^            --- these two types are declared with different lifetimes...\n+   |                                 |\n+   |                                 ...but data flows into `z` here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "b15f5f4a0fcafb5dcf3e24fefe84d6c2de99bf01", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-2.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-2.rs:16:11\n+   |\n+LL |     x.b = y.b; //~ ERROR lifetime mismatch\n+   |           ^^^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-2.rs:16:5\n+   |\n+LL | fn foo(mut x: Ref, y: Ref) {\n+   |               ---     --- these two types are declared with different lifetimes...\n+LL |     x.b = y.b; //~ ERROR lifetime mismatch\n+   |     ^^^^^^^^^ ...but data from `y` flows into `x` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "0ec73c2e77815089d3ae51f0e958afe2bb43ed2c", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-3.nll.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,19 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-3.rs:16:11\n+   |\n+LL |     x.a = x.b; //~ ERROR lifetime mismatch\n+   |           ^^^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-3.rs:16:5\n+   |\n+LL | fn foo(mut x: Ref) {\n+   |               ---\n+   |               |\n+   |               this type is declared with multiple lifetimes...\n+LL |     x.a = x.b; //~ ERROR lifetime mismatch\n+   |     ^^^^^^^^^ ...but data with one lifetime flows into the other here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "727a701d3f252af9365dd3f01f81f4c4f2ccf156", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-4.nll.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,19 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-4.rs:16:11\n+   |\n+LL |     x.a = x.b; //~ ERROR lifetime mismatch\n+   |           ^^^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-4.rs:16:5\n+   |\n+LL | fn foo(mut x: Ref) {\n+   |               ---\n+   |               |\n+   |               this type is declared with multiple lifetimes...\n+LL |     x.a = x.b; //~ ERROR lifetime mismatch\n+   |     ^^^^^^^^^ ...but data with one lifetime flows into the other here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "f010c87377ed710b12d4f03ec4353a170abff903", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,18 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-earlybound-regions.rs:18:12\n+   |\n+LL |     x.push(y); //~ ERROR lifetime mismatch\n+   |            ^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-earlybound-regions.rs:18:5\n+   |\n+LL | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>)\n+   |                           -------      ------- these two types are declared with different lifetimes...\n+...\n+LL |     x.push(y); //~ ERROR lifetime mismatch\n+   |     ^ ...but data from `y` flows into `x` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "2b48b176ae898f35f4f92ec8104665d718c5c35c", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-latebound-regions.rs:15:12\n+   |\n+LL |     x.push(y); //~ ERROR lifetime mismatch\n+   |            ^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-latebound-regions.rs:15:5\n+   |\n+LL | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>) {\n+   |                           -------      ------- these two types are declared with different lifetimes...\n+LL |     x.push(y); //~ ERROR lifetime mismatch\n+   |     ^ ...but data from `y` flows into `x` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "c9ac04cb01e5f218129cf2a66f08116319303415", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex3-both-anon-regions-both-are-structs.rs:15:12\n+   |\n+LL |     x.push(y); //~ ERROR lifetime mismatch\n+   |            ^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-both-are-structs.rs:15:5\n+   |\n+LL | fn foo(mut x: Vec<Ref>, y: Ref) {\n+   |                   ---      --- these two types are declared with different lifetimes...\n+LL |     x.push(y); //~ ERROR lifetime mismatch\n+   |     ^ ...but data from `y` flows into `x` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "9c7fc8ac45863d86a2a9d138ecc11e2e789381f0", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-latebound-regions.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex3-both-anon-regions-latebound-regions.rs:12:12\n+   |\n+LL |     x.push(y); //~ ERROR lifetime mismatch\n+   |            ^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-latebound-regions.rs:12:5\n+   |\n+LL | fn foo<'a,'b>(x: &mut Vec<&'a u8>, y: &'b u8) {\n+   |                           ------      ------ these two types are declared with different lifetimes...\n+LL |     x.push(y); //~ ERROR lifetime mismatch\n+   |     ^ ...but data from `y` flows into `x` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "85a0b7c134556d81c69e0a9a5d6ef5bfa316aff8", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct-2.nll.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,28 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:14:9\n+   |\n+LL |     y = x.b; //~ ERROR lifetime mismatch\n+   |         ^^^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:14:5\n+   |\n+LL | fn foo(mut x: Ref, y: &u32) {\n+   |               ---     ----\n+   |               |\n+   |               these two types are declared with different lifetimes...\n+LL |     y = x.b; //~ ERROR lifetime mismatch\n+   |     ^^^^^^^ ...but data from `x` flows into `y` here\n+\n+error[E0384]: cannot assign to immutable argument `y`\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:14:5\n+   |\n+LL | fn foo(mut x: Ref, y: &u32) {\n+   |                    - argument not declared as `mut`\n+LL |     y = x.b; //~ ERROR lifetime mismatch\n+   |     ^^^^^^^ cannot assign to immutable argument\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0384, E0623.\n+For more information about an error, try `rustc --explain E0384`."}, {"sha": "4e160001b87392117c33d76054169794c2f3cc8f", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct-3.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-3.rs:14:11\n+   |\n+LL |     y.b = x; //~ ERROR lifetime mismatch\n+   |           ^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-3.rs:14:5\n+   |\n+LL | fn foo(mut y: Ref, x: &u32) {\n+   |               ---     ---- these two types are declared with different lifetimes...\n+LL |     y.b = x; //~ ERROR lifetime mismatch\n+   |     ^^^^^^^ ...but data from `x` flows into `y` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "7bbc3c4084f045527a78e0b2eae1c7bd64df32f5", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct-4.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-4.rs:14:11\n+   |\n+LL |     y.b = x; //~ ERROR lifetime mismatch\n+   |           ^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-4.rs:14:5\n+   |\n+LL | fn foo(mut y: Ref, x: &u32) {\n+   |               ---     ---- these two types are declared with different lifetimes...\n+LL |     y.b = x; //~ ERROR lifetime mismatch\n+   |     ^^^^^^^ ...but data from `x` flows into `y` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "9fd7bbac247aac3e53c43e2feb5422314c0f0149", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex3-both-anon-regions-one-is-struct.rs:17:11\n+   |\n+LL |     x.b = y; //~ ERROR lifetime mismatch\n+   |           ^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-one-is-struct.rs:17:5\n+   |\n+LL | fn foo(mut x: Ref, y: &u32) {\n+   |               ---     ---- these two types are declared with different lifetimes...\n+LL |     x.b = y; //~ ERROR lifetime mismatch\n+   |     ^^^^^^^ ...but data from `y` flows into `x` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "528a846991c046a425f3297a1304cf142248349a", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.nll.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,19 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex3-both-anon-regions-return-type-is-anon.rs:17:5\n+   |\n+LL |     x //~ ERROR lifetime mismatch\n+   |     ^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-return-type-is-anon.rs:17:5\n+   |\n+LL |   fn foo<'a>(&self, x: &i32) -> &i32 {\n+   |                        ----     ----\n+   |                        |\n+   |                        this parameter and the return type are declared with different lifetimes...\n+LL |     x //~ ERROR lifetime mismatch\n+   |     ^ ...but data from `x` is returned here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "f8c0b5940c95b21ed573548c7244e6716a3a4652", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-self-is-anon.nll.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,19 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex3-both-anon-regions-self-is-anon.rs:17:19\n+   |\n+LL |         if true { x } else { self } //~ ERROR lifetime mismatch\n+   |                   ^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-self-is-anon.rs:17:9\n+   |\n+LL |     fn foo<'a>(&self, x: &Foo) -> &Foo {\n+   |                          ----     ----\n+   |                          |\n+   |                          this parameter and the return type are declared with different lifetimes...\n+LL |         if true { x } else { self } //~ ERROR lifetime mismatch\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...but data from `x` is returned here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "284f760435cfacbf12fa3c72057cfb236e13b680", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-using-fn-items.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,24 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex3-both-anon-regions-using-fn-items.rs:11:10\n+   |\n+LL |   y.push(z); //~ ERROR lifetime mismatch\n+   |          ^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-using-fn-items.rs:11:3\n+   |\n+LL | fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n+   |                               ---      --- these two types are declared with different lifetimes...\n+LL |   y.push(z); //~ ERROR lifetime mismatch\n+   |   ^ ...but data from `z` flows into `y` here\n+\n+error[E0596]: cannot borrow immutable item `y` as mutable\n+  --> $DIR/ex3-both-anon-regions-using-fn-items.rs:11:3\n+   |\n+LL |   y.push(z); //~ ERROR lifetime mismatch\n+   |   ^ cannot borrow as mutable\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0596, E0623.\n+For more information about an error, try `rustc --explain E0596`."}, {"sha": "389549a8464b768a7f33afa5c96c06686e20fd63", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-using-impl-items.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex3-both-anon-regions-using-impl-items.rs:15:16\n+   |\n+LL |         x.push(y); //~ ERROR lifetime mismatch\n+   |                ^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-using-impl-items.rs:15:9\n+   |\n+LL |     fn foo(x: &mut Vec<&u8>, y: &u8) {\n+   |                        ---      --- these two types are declared with different lifetimes...\n+LL |         x.push(y); //~ ERROR lifetime mismatch\n+   |         ^ ...but data from `y` flows into `x` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "185ea89275f35b13702f2f91b5d3432496888f6a", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-using-trait-objects.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,24 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:11:10\n+   |\n+LL |   y.push(z); //~ ERROR lifetime mismatch\n+   |          ^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:11:3\n+   |\n+LL | fn foo(x:Box<Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n+   |                 ---  --- these two types are declared with different lifetimes...\n+LL |   y.push(z); //~ ERROR lifetime mismatch\n+   |   ^ ...but data from `z` flows into `y` here\n+\n+error[E0596]: cannot borrow immutable item `y` as mutable\n+  --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:11:3\n+   |\n+LL |   y.push(z); //~ ERROR lifetime mismatch\n+   |   ^ cannot borrow as mutable\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0596, E0623.\n+For more information about an error, try `rustc --explain E0596`."}, {"sha": "629a97ab5ca5cd0bbc90ac8362396d093381dfb1", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ex3-both-anon-regions.rs:12:12\n+   |\n+LL |     x.push(y); //~ ERROR lifetime mismatch\n+   |            ^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions.rs:12:5\n+   |\n+LL | fn foo(x: &mut Vec<&u8>, y: &u8) {\n+   |                    ---      --- these two types are declared with different lifetimes...\n+LL |     x.push(y); //~ ERROR lifetime mismatch\n+   |     ^ ...but data from `y` flows into `x` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "d13f9ccc37da26763789a2cc5ee6878626492c34", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,10 @@\n+error: compilation successful\n+  --> $DIR/borrowck-let-suggestion.rs:15:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     f();\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "a7a7d5c503518b0cbad4eca76e6d137c21e31190", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -7,11 +7,11 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n fn f() {\n     let x = vec![1].iter();\n }\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     f();\n }"}, {"sha": "a12baab415907892419e271e5a1f9f3a6ac652cc", "filename": "src/test/ui/macros/span-covering-argument-1.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,12 @@\n+error[E0596]: cannot borrow immutable item `foo` as mutable\n+  --> $DIR/span-covering-argument-1.rs:15:14\n+   |\n+LL |             *&mut $s = 0;\n+   |              ^^^^^^^ cannot borrow as mutable\n+...\n+LL |     bad!(foo whatever);\n+   |     ------------------- in this macro invocation\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "942d9816c4ee3bcb0059145248fee3e7aaccb868", "filename": "src/test/ui/moves-based-on-type-block-bad.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fmoves-based-on-type-block-bad.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fmoves-based-on-type-block-bad.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves-based-on-type-block-bad.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,9 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/moves-based-on-type-block-bad.rs:37:28\n+   |\n+LL |                 box E::Bar(x) => println!(\"{}\", x.to_string()),\n+   |                            ^ cannot move out of borrowed content\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "6ebbf670acd9f7e681fdc9962c3cde773c52e792", "filename": "src/test/ui/moves-based-on-type-match-bindings.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fmoves-based-on-type-match-bindings.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fmoves-based-on-type-match-bindings.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves-based-on-type-match-bindings.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error[E0382]: borrow of moved value: `x`\n+  --> $DIR/moves-based-on-type-match-bindings.rs:26:11\n+   |\n+LL |         Foo {f} => {}\n+   |              - value moved here\n+...\n+LL |     touch(&x); //~ ERROR use of partially moved value: `x`\n+   |           ^^ value borrowed here after move\n+   |\n+   = note: move occurs because `x` has type `Foo<std::string::String>`, which does not implement the `Copy` trait\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "c6f021f8c36cbbf21259531db20550abc10e063a", "filename": "src/test/ui/nll/get_default.nll.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,51 @@\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Ast)\n+  --> $DIR/get_default.rs:33:17\n+   |\n+LL |         match map.get() {\n+   |               --- immutable borrow occurs here\n+...\n+LL |                 map.set(String::new()); // Just AST errors here\n+   |                 ^^^ mutable borrow occurs here\n+...\n+LL | }\n+   | - immutable borrow ends here\n+\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Ast)\n+  --> $DIR/get_default.rs:44:17\n+   |\n+LL |         match map.get() {\n+   |               --- immutable borrow occurs here\n+LL |             Some(v) => {\n+LL |                 map.set(String::new()); // Both AST and MIR error here\n+   |                 ^^^ mutable borrow occurs here\n+...\n+LL | }\n+   | - immutable borrow ends here\n+\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Ast)\n+  --> $DIR/get_default.rs:50:17\n+   |\n+LL |         match map.get() {\n+   |               --- immutable borrow occurs here\n+...\n+LL |                 map.set(String::new()); // Just AST errors here\n+   |                 ^^^ mutable borrow occurs here\n+...\n+LL | }\n+   | - immutable borrow ends here\n+\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Mir)\n+  --> $DIR/get_default.rs:44:17\n+   |\n+LL |         match map.get() {\n+   |               --- immutable borrow occurs here\n+LL |             Some(v) => {\n+LL |                 map.set(String::new()); // Both AST and MIR error here\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n+...\n+LL |                 return v;\n+   |                        - borrow later used here\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "1a53c033baa532cddb26dfccb7b05622eaa510cb", "filename": "src/test/ui/region-borrow-params-issue-29793-small.nll.stderr", "status": "added", "additions": 279, "deletions": 0, "changes": 279, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fregion-borrow-params-issue-29793-small.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fregion-borrow-params-issue-29793-small.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregion-borrow-params-issue-29793-small.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,279 @@\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:19:17\n+   |\n+LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL |     };\n+   |      - borrowed value only lives until here\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:19:17\n+   |\n+LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL |     };\n+   |      - borrowed value only lives until here\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:34:17\n+   |\n+LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL |     };\n+   |      - borrowed value only lives until here\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:34:17\n+   |\n+LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL |     };\n+   |      - borrowed value only lives until here\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:65:17\n+   |\n+LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL |     };\n+   |     - borrowed value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 64:5...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:64:5\n+   |\n+LL |     fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:65:17\n+   |\n+LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL |     };\n+   |     - borrowed value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 64:5...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:64:5\n+   |\n+LL |     fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:76:17\n+   |\n+LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL |     };\n+   |     - borrowed value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 75:5...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:75:5\n+   |\n+LL |     fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:76:17\n+   |\n+LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL |     };\n+   |     - borrowed value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 75:5...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:75:5\n+   |\n+LL |     fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:100:21\n+   |\n+LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL |         }\n+   |         - borrowed value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 99:9...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:99:9\n+   |\n+LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:100:21\n+   |\n+LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL |         }\n+   |         - borrowed value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 99:9...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:99:9\n+   |\n+LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:114:21\n+   |\n+LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL |         }\n+   |         - borrowed value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 113:9...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:113:9\n+   |\n+LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:114:21\n+   |\n+LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL |         }\n+   |         - borrowed value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 113:9...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:113:9\n+   |\n+LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:142:21\n+   |\n+LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL |         }\n+   |         - borrowed value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 141:9...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:141:9\n+   |\n+LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:142:21\n+   |\n+LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL |         }\n+   |         - borrowed value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 141:9...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:141:9\n+   |\n+LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:157:21\n+   |\n+LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL |         }\n+   |         - borrowed value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 156:9...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:156:9\n+   |\n+LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:157:21\n+   |\n+LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL |         }\n+   |         - borrowed value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 156:9...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:156:9\n+   |\n+LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:185:21\n+   |\n+LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL |         }\n+   |         - borrowed value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 184:9...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:184:9\n+   |\n+LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:185:21\n+   |\n+LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL |         }\n+   |         - borrowed value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 184:9...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:184:9\n+   |\n+LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:199:21\n+   |\n+LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL |         }\n+   |         - borrowed value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 198:9...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:198:9\n+   |\n+LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:199:21\n+   |\n+LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL |         }\n+   |         - borrowed value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 198:9...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:198:9\n+   |\n+LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 20 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "2c973f9bdea5e4683cb55fdf25b3399d393443b9", "filename": "src/test/ui/regions-nested-fns-2.nll.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fregions-nested-fns-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fregions-nested-fns-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions-nested-fns-2.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,16 @@\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/regions-nested-fns-2.rs:16:9\n+   |\n+LL | /         |z| {\n+LL | |             //~^ ERROR E0373\n+LL | |             if false { &y } else { z }\n+LL | |         });\n+   | |_________^ borrowed value does not live long enough\n+LL |   }\n+   |   - borrowed value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "10384e3b7ca291be7c565c19f3c138764854fd1d", "filename": "src/test/ui/rfc-2005-default-binding-mode/borrowck-issue-49631.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error[E0502]: cannot borrow `foo` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-issue-49631.rs:30:9\n+   |\n+LL |     while let Some(Ok(string)) = foo.get() {\n+   |                                  --- immutable borrow occurs here\n+LL |         foo.mutate();\n+   |         ^^^^^^^^^^^^ mutable borrow occurs here\n+LL |         //~^ ERROR cannot borrow `foo` as mutable\n+LL |         println!(\"foo={:?}\", *string);\n+   |                              ------- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "6ae5f777a9396808df73850d8b3f129a5abe5406", "filename": "src/test/ui/rfc-2005-default-binding-mode/enum.nll.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,21 @@\n+error[E0594]: cannot assign to immutable item `*x`\n+  --> $DIR/enum.rs:19:5\n+   |\n+LL |     *x += 1; //~ ERROR cannot assign to immutable\n+   |     ^^^^^^^ cannot mutate\n+\n+error[E0594]: cannot assign to immutable item `*x`\n+  --> $DIR/enum.rs:23:9\n+   |\n+LL |         *x += 1; //~ ERROR cannot assign to immutable\n+   |         ^^^^^^^ cannot mutate\n+\n+error[E0594]: cannot assign to immutable item `*x`\n+  --> $DIR/enum.rs:29:9\n+   |\n+LL |         *x += 1; //~ ERROR cannot assign to immutable\n+   |         ^^^^^^^ cannot mutate\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "7138c4ac06e1fb4c01b63525d0d5c04a57b3bb6f", "filename": "src/test/ui/rfc-2005-default-binding-mode/explicit-mut.nll.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,21 @@\n+error[E0594]: cannot assign to immutable item `*n`\n+  --> $DIR/explicit-mut.rs:17:13\n+   |\n+LL |             *n += 1; //~ ERROR cannot assign to immutable\n+   |             ^^^^^^^ cannot mutate\n+\n+error[E0594]: cannot assign to immutable item `*n`\n+  --> $DIR/explicit-mut.rs:25:13\n+   |\n+LL |             *n += 1; //~ ERROR cannot assign to immutable\n+   |             ^^^^^^^ cannot mutate\n+\n+error[E0594]: cannot assign to immutable item `*n`\n+  --> $DIR/explicit-mut.rs:33:13\n+   |\n+LL |             *n += 1; //~ ERROR cannot assign to immutable\n+   |             ^^^^^^^ cannot mutate\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "172828b9a40f9f1bd1a2e06bbc0e56cbda21a49b", "filename": "src/test/ui/span/borrowck-borrow-overloaded-auto-deref-mut.nll.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,51 @@\n+error[E0596]: cannot borrow immutable item `x` as mutable\n+  --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:63:24\n+   |\n+LL |     let __isize = &mut x.y; //~ ERROR cannot borrow\n+   |                        ^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow immutable item `*x` as mutable\n+  --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:75:10\n+   |\n+LL |     &mut x.y //~ ERROR cannot borrow\n+   |          ^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow immutable item `x` as mutable\n+  --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:98:5\n+   |\n+LL |     x.y = 3; //~ ERROR cannot borrow\n+   |     ^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow immutable item `*x` as mutable\n+  --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:102:5\n+   |\n+LL |     x.y = 3; //~ ERROR cannot borrow\n+   |     ^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow immutable item `x` as mutable\n+  --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:119:5\n+   |\n+LL |     x.set(0, 0); //~ ERROR cannot borrow\n+   |     ^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow immutable item `*x` as mutable\n+  --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:131:5\n+   |\n+LL |     x.y_mut() //~ ERROR cannot borrow\n+   |     ^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow immutable item `x` as mutable\n+  --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:139:6\n+   |\n+LL |     *x.y_mut() = 3; //~ ERROR cannot borrow\n+   |      ^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow immutable item `*x` as mutable\n+  --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:143:6\n+   |\n+LL |     *x.y_mut() = 3; //~ ERROR cannot borrow\n+   |      ^ cannot borrow as mutable\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "24abe85de76f728d604adaa91c6b2d6c6207cff4", "filename": "src/test/ui/span/borrowck-borrow-overloaded-deref-mut.nll.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,27 @@\n+error[E0596]: cannot borrow immutable item `x` as mutable\n+  --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:39:25\n+   |\n+LL |     let __isize = &mut *x; //~ ERROR cannot borrow\n+   |                         ^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow immutable item `*x` as mutable\n+  --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:51:11\n+   |\n+LL |     &mut **x //~ ERROR cannot borrow\n+   |           ^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow immutable item `x` as mutable\n+  --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:59:6\n+   |\n+LL |     *x = 3; //~ ERROR cannot borrow\n+   |      ^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow immutable item `*x` as mutable\n+  --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:63:6\n+   |\n+LL |     **x = 3; //~ ERROR cannot borrow\n+   |      ^^ cannot borrow as mutable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "505ee95088f559f51f8b140c172469f4e090b906", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.nll.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,54 @@\n+error[E0499]: cannot borrow `f` as mutable more than once at a time\n+  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:22:16\n+   |\n+LL |       f(Box::new(|| {\n+   |       -          ^^ second mutable borrow occurs here\n+   |       |\n+   |  _____first mutable borrow occurs here\n+   | |\n+LL | |     //~^ ERROR: cannot borrow `f` as mutable more than once\n+LL | |         f((Box::new(|| {})))\n+   | |         - borrow occurs due to use of `f` in closure\n+LL | |     }));\n+   | |_______- borrow later used here\n+\n+error[E0596]: cannot borrow immutable item `*f` as mutable\n+  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:35:5\n+   |\n+LL |     (*f)();\n+   |     ^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow immutable item `*f.f` as mutable\n+  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:44:5\n+   |\n+LL |     f.f.call_mut(())\n+   |     ^^^ cannot borrow as mutable\n+   |\n+   = note: Value not mutable causing this error: `*f`\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:66:13\n+   |\n+LL |         foo(f);\n+   |             ^ cannot move out of borrowed content\n+\n+error[E0505]: cannot move out of `f` because it is borrowed\n+  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:65:16\n+   |\n+LL |        f(Box::new(|a| {\n+   |   _____-__________^\n+   |  |     |\n+   |  |_____borrow of `f` occurs here\n+   | ||\n+LL | ||         foo(f);\n+LL | ||         //~^ ERROR cannot move `f` into closure because it is borrowed\n+LL | ||         //~| ERROR cannot move out of captured outer variable in an `FnMut` closure\n+LL | ||     }), 3);\n+   | ||_____^____- borrow later used here\n+   |  |_____|\n+   |        move out of `f` occurs here\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors occurred: E0499, E0505, E0507, E0596.\n+For more information about an error, try `rustc --explain E0499`."}, {"sha": "43934bf4aeec15fff36516d960922370aa5bdc62", "filename": "src/test/ui/span/borrowck-call-method-from-mut-aliasable.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,9 @@\n+error[E0596]: cannot borrow immutable item `*x` as mutable\n+  --> $DIR/borrowck-call-method-from-mut-aliasable.rs:27:5\n+   |\n+LL |     x.h(); //~ ERROR cannot borrow\n+   |     ^ cannot borrow as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "d3c6fd66599478c6de092761e2e67e959796748a", "filename": "src/test/ui/span/borrowck-fn-in-const-b.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,9 @@\n+error[E0596]: cannot borrow immutable item `*x` as mutable\n+  --> $DIR/borrowck-fn-in-const-b.rs:17:9\n+   |\n+LL |         x.push(format!(\"this is broken\"));\n+   |         ^ cannot borrow as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "d02f70ea292f22f75971b2697f28c5896bb0a46d", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,10 @@\n+error: compilation successful\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:61:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     f();\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "60e6c6e298938a4faa5db68a29702f206491c2a5", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n fn id<T>(x: T) -> T { x }\n \n fn f() {\n@@ -58,6 +58,6 @@ fn f() {\n //~| NOTE temporary value needs to live until here\n //~| NOTE temporary value needs to live until here\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     f();\n }"}, {"sha": "100b5ae150a7de9be84e3f4e87fbbcc986802215", "filename": "src/test/ui/span/borrowck-object-mutability.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,17 @@\n+error[E0596]: cannot borrow immutable item `*x` as mutable\n+  --> $DIR/borrowck-object-mutability.rs:19:5\n+   |\n+LL |     x.borrowed_mut(); //~ ERROR cannot borrow\n+   |     ^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow immutable item `*x` as mutable\n+  --> $DIR/borrowck-object-mutability.rs:29:5\n+   |\n+LL |     x.borrowed_mut(); //~ ERROR cannot borrow\n+   |     ^ cannot borrow as mutable\n+   |\n+   = note: Value not mutable causing this error: `x`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "171bb3dda66646302a787f33c4faf626e060f796", "filename": "src/test/ui/span/borrowck-ref-into-rvalue.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/borrowck-ref-into-rvalue.rs:13:11\n+   |\n+LL |     match Some(\"Hello\".to_string()) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+...\n+LL |     }\n+   |     - temporary value only lives until here\n+LL |     println!(\"{}\", *msg);\n+   |                    ---- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/span/destructor-restrictions.nll.stderr", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f"}, {"sha": "64a76399da3454ef1bff452c08b7b0331c1e2cfd", "filename": "src/test/ui/span/dropck-object-cycle.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,15 @@\n+error[E0597]: `*m` does not live long enough\n+  --> $DIR/dropck-object-cycle.rs:37:31\n+   |\n+LL |     assert_eq!(object_invoke1(&*m), (4,5));\n+   |                               ^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `m` is dropped\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "fee0d7feb6d367ab41c0b3732550b642f425c2ac", "filename": "src/test/ui/span/dropck_arr_cycle_checked.nll.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,39 @@\n+error[E0597]: `b1` does not live long enough\n+  --> $DIR/dropck_arr_cycle_checked.rs:111:24\n+   |\n+LL |     b3.a[0].v.set(Some(&b1));\n+   |                        ^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `b1` is dropped\n+\n+error[E0597]: `b2` does not live long enough\n+  --> $DIR/dropck_arr_cycle_checked.rs:103:24\n+   |\n+LL |     b1.a[0].v.set(Some(&b2));\n+   |                        ^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `b1` is dropped\n+\n+error[E0597]: `b3` does not live long enough\n+  --> $DIR/dropck_arr_cycle_checked.rs:105:24\n+   |\n+LL |     b1.a[1].v.set(Some(&b3));\n+   |                        ^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `b1` is dropped\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "2a8ef24307d2476ff68bf8a519b21c9757277e92", "filename": "src/test/ui/span/dropck_direct_cycle_with_drop.nll.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,27 @@\n+error[E0597]: `d1` does not live long enough\n+  --> $DIR/dropck_direct_cycle_with_drop.rs:48:19\n+   |\n+LL |     d2.p.set(Some(&d1));\n+   |                   ^^^ borrowed value does not live long enough\n+LL |     //~^ ERROR `d1` does not live long enough\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `d1` is dropped\n+\n+error[E0597]: `d2` does not live long enough\n+  --> $DIR/dropck_direct_cycle_with_drop.rs:46:19\n+   |\n+LL |     d1.p.set(Some(&d2));\n+   |                   ^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `d1` is dropped\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "0eeec8e51beaac36f63dae5510e3ae563bf6f4f2", "filename": "src/test/ui/span/dropck_misc_variants.nll.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,26 @@\n+error[E0597]: `bomb` does not live long enough\n+  --> $DIR/dropck_misc_variants.rs:33:36\n+   |\n+LL |     _w = Wrap::<&[&str]>(NoisyDrop(&bomb));\n+   |                                    ^^^^^ borrowed value does not live long enough\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `_w` is dropped\n+\n+error[E0597]: `v` does not live long enough\n+  --> $DIR/dropck_misc_variants.rs:41:27\n+   |\n+LL |         let u = NoisyDrop(&v);\n+   |                           ^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `_w` is dropped\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "41edd04c92e8c21a3f6df71c91dbe557aa34f0e7", "filename": "src/test/ui/span/dropck_vec_cycle_checked.nll.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,39 @@\n+error[E0597]: `c1` does not live long enough\n+  --> $DIR/dropck_vec_cycle_checked.rs:118:24\n+   |\n+LL |     c3.v[0].v.set(Some(&c1));\n+   |                        ^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `c1` is dropped\n+\n+error[E0597]: `c2` does not live long enough\n+  --> $DIR/dropck_vec_cycle_checked.rs:110:24\n+   |\n+LL |     c1.v[0].v.set(Some(&c2));\n+   |                        ^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `c1` is dropped\n+\n+error[E0597]: `c3` does not live long enough\n+  --> $DIR/dropck_vec_cycle_checked.rs:112:24\n+   |\n+LL |     c1.v[1].v.set(Some(&c3));\n+   |                        ^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `c1` is dropped\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "68a4d5d25f424df093fb1541d02b9a24d71684b7", "filename": "src/test/ui/span/issue-11925.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-11925.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-11925.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-11925.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,12 @@\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/issue-11925.rs:18:35\n+   |\n+LL |         let f = to_fn_once(move|| &x); //~ ERROR does not live long enough\n+   |                                   ^-\n+   |                                   ||\n+   |                                   |borrowed value only lives until here\n+   |                                   borrowed value does not live long enough\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "2f3f6c5efa2ddf2102375745f173f19a3ea81b4e", "filename": "src/test/ui/span/issue-15480.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-15480.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-15480.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-15480.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/issue-15480.rs:15:10\n+   |\n+LL |         &id(3)\n+   |          ^^^^^ temporary value does not live long enough\n+LL |     ];\n+   |      - temporary value only lives until here\n+...\n+LL |     for &&x in &v {\n+   |                -- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/span/issue-23338-locals-die-before-temps-of-body.nll.stderr", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f"}, {"sha": "3f18f4d025a09d12ce4e770ce79589f0a999facf", "filename": "src/test/ui/span/issue-24805-dropck-child-has-items-via-parent.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,15 @@\n+error[E0597]: `d1` does not live long enough\n+  --> $DIR/issue-24805-dropck-child-has-items-via-parent.rs:38:18\n+   |\n+LL |     _d = D_Child(&d1);\n+   |                  ^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `_d` is dropped\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "79e607bb392c89d56d54463b33a1ae5c89fbb468", "filename": "src/test/ui/span/issue-24805-dropck-trait-has-items.nll.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,36 @@\n+error[E0597]: `d1` does not live long enough\n+  --> $DIR/issue-24805-dropck-trait-has-items.rs:47:26\n+   |\n+LL |     _d = D_HasSelfMethod(&d1);\n+   |                          ^^^ borrowed value does not live long enough\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `_d` is dropped\n+\n+error[E0597]: `d1` does not live long enough\n+  --> $DIR/issue-24805-dropck-trait-has-items.rs:53:33\n+   |\n+LL |     _d = D_HasMethodWithSelfArg(&d1);\n+   |                                 ^^^ borrowed value does not live long enough\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `_d` is dropped\n+\n+error[E0597]: `d1` does not live long enough\n+  --> $DIR/issue-24805-dropck-trait-has-items.rs:59:20\n+   |\n+LL |     _d = D_HasType(&d1);\n+   |                    ^^^ borrowed value does not live long enough\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `_d` is dropped\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "550f9d8b60de0684ab0686884182d847bea0a226", "filename": "src/test/ui/span/issue-24895-copy-clone-dropck.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error[E0597]: `d1` does not live long enough\n+  --> $DIR/issue-24895-copy-clone-dropck.rs:37:14\n+   |\n+LL |     d2 = D(S(&d1, \"inner\"), \"d2\");\n+   |              ^^^ borrowed value does not live long enough\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `d2` is dropped\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "770fed8cd9cc9341c4aaabd1f556ed89c24fb231", "filename": "src/test/ui/span/issue-25199.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-25199.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-25199.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-25199.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,15 @@\n+error[E0597]: `container` does not live long enough\n+  --> $DIR/issue-25199.rs:80:27\n+   |\n+LL |     let test = Test{test: &container};\n+   |                           ^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `container` is dropped\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "64bb83fc782191201927c45280609bb36fd34183", "filename": "src/test/ui/span/issue-26656.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-26656.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-26656.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-26656.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error[E0597]: `ticking` does not live long enough\n+  --> $DIR/issue-26656.rs:50:35\n+   |\n+LL |     zook.button = B::BigRedButton(&ticking);\n+   |                                   ^^^^^^^^ borrowed value does not live long enough\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `zook` is dropped\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "80a7421f4bd20b7172bc98d3e775e389ff534908", "filename": "src/test/ui/span/issue-29106.nll.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-29106.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-29106.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-29106.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,25 @@\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/issue-29106.rs:26:26\n+   |\n+LL |         y = Arc::new(Foo(&x));\n+   |                          ^^ borrowed value does not live long enough\n+LL |     }\n+   |     -\n+   |     |\n+   |     borrowed value only lives until here\n+   |     borrow later used here, when `y` is dropped\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/issue-29106.rs:33:25\n+   |\n+LL |         y = Rc::new(Foo(&x));\n+   |                         ^^ borrowed value does not live long enough\n+LL |     }\n+   |     -\n+   |     |\n+   |     borrowed value only lives until here\n+   |     borrow later used here, when `y` is dropped\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "5802bac04b1c7fc0661435be4ff65c91e4c2d79d", "filename": "src/test/ui/span/issue-36537.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-36537.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-36537.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36537.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,13 @@\n+error: compilation successful\n+  --> $DIR/issue-36537.rs:11:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     let p;\n+LL | |     let a = 42;\n+LL | |     p = &a;\n+LL | |     //~^ ERROR `a` does not live long enough\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "ca04101cf568a5db9909f5161b4991d1349497b6", "filename": "src/test/ui/span/issue-36537.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-36537.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-36537.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36537.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -7,8 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n-fn main() {\n+#![feature(rustc_attrs)]\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let p;\n     let a = 42;\n     p = &a;"}, {"sha": "d9608f3a8963005e343e82a8cbd73cdba77de653", "filename": "src/test/ui/span/issue-40157.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-40157.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue-40157.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-40157.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,13 @@\n+error[E0597]: `foo` does not live long enough\n+  --> $DIR/issue-40157.rs:12:53\n+   |\n+LL |     {println!(\"{:?}\", match { let foo = vec![1, 2]; foo.get(1) } { x => x });}\n+   |                       ------------------------------^^^--------------------\n+   |                       |                             |          |\n+   |                       |                             |          borrowed value only lives until here\n+   |                       |                             borrowed value does not live long enough\n+   |                       borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "c5e7a93c76349676accb54a978c1ce7ced7301ec", "filename": "src/test/ui/span/issue28498-reject-ex1.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,15 @@\n+error[E0597]: `foo.data` does not live long enough\n+  --> $DIR/issue28498-reject-ex1.rs:44:29\n+   |\n+LL |     foo.data[0].1.set(Some(&foo.data[1]));\n+   |                             ^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `foo` is dropped\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "25708219bd1be88ddd1f213636c34c523fd74d32", "filename": "src/test/ui/span/issue28498-reject-lifetime-param.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,15 @@\n+error[E0597]: `first_dropped` does not live long enough\n+  --> $DIR/issue28498-reject-lifetime-param.rs:44:19\n+   |\n+LL |     foo1 = Foo(1, &first_dropped);\n+   |                   ^^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `foo1` is dropped\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "661570963948dcd81cc0a143814c0b6bbe4fcbf8", "filename": "src/test/ui/span/issue28498-reject-passed-to-fn.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,15 @@\n+error[E0597]: `first_dropped` does not live long enough\n+  --> $DIR/issue28498-reject-passed-to-fn.rs:46:19\n+   |\n+LL |     foo1 = Foo(1, &first_dropped, Box::new(callback));\n+   |                   ^^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `foo1` is dropped\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "bb9d67983de7a60d3adfad8c0132990c9c695ad3", "filename": "src/test/ui/span/issue28498-reject-trait-bound.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,15 @@\n+error[E0597]: `first_dropped` does not live long enough\n+  --> $DIR/issue28498-reject-trait-bound.rs:46:19\n+   |\n+LL |     foo1 = Foo(1, &first_dropped);\n+   |                   ^^^^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `foo1` is dropped\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "8e1cb9720e2369ac971bc8bdb30f062e1d38a169", "filename": "src/test/ui/span/mut-arg-hint.nll.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,21 @@\n+error[E0596]: cannot borrow immutable item `*a` as mutable\n+  --> $DIR/mut-arg-hint.rs:13:9\n+   |\n+LL |         a.push_str(\"bar\"); //~ ERROR cannot borrow immutable borrowed content\n+   |         ^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow immutable item `*a` as mutable\n+  --> $DIR/mut-arg-hint.rs:18:5\n+   |\n+LL |     a.push_str(\"foo\"); //~ ERROR cannot borrow immutable borrowed content\n+   |     ^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow immutable item `*a` as mutable\n+  --> $DIR/mut-arg-hint.rs:25:9\n+   |\n+LL |         a.push_str(\"foo\"); //~ ERROR cannot borrow immutable borrowed content\n+   |         ^ cannot borrow as mutable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "3cad23a3c03af00a9a492770b6ba460fb6ca3b59", "filename": "src/test/ui/span/mut-ptr-cant-outlive-ref.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error: compilation successful\n+  --> $DIR/mut-ptr-cant-outlive-ref.rs:13:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     let m = RefCell::new(0);\n+LL | |     let p;\n+LL | |     {\n+...  |\n+LL | |     //~^^ ERROR `b` does not live long enough\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "9774303197c59b24af8429b9e88224f2a7eb8136", "filename": "src/test/ui/span/mut-ptr-cant-outlive-ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -7,10 +7,10 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n use std::cell::RefCell;\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let m = RefCell::new(0);\n     let p;\n     {"}, {"sha": "afb319b57d421add0ad4b455962a76212b7a8b17", "filename": "src/test/ui/span/range-2.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Frange-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Frange-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Frange-2.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error: compilation successful\n+  --> $DIR/range-2.rs:13:1\n+   |\n+LL | / pub fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     let r = {\n+LL | |         let a = 42;\n+LL | |         let b = 42;\n+...  |\n+LL | |     //~| ERROR `b` does not live long enough\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "a1ed9bc6aa84bb43f10e7c2f21775a9faffb7802", "filename": "src/test/ui/span/range-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Frange-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Frange-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Frange-2.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // Test range syntax - borrow errors.\n-\n-pub fn main() {\n+#![feature(rustc_attrs)]\n+pub fn main() { #![rustc_error] // rust-lang/rust#49855\n     let r = {\n         let a = 42;\n         let b = 42;"}, {"sha": "3c918fdb1472a6d35575947e8ae983d3aa7e0e59", "filename": "src/test/ui/span/regionck-unboxed-closure-lifetimes.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error: compilation successful\n+  --> $DIR/regionck-unboxed-closure-lifetimes.rs:13:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     let mut f;\n+LL | |     {\n+LL | |         let c = 1;\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c814941c81124b5bab251f2fbd0d9729e54252be", "filename": "src/test/ui/span/regionck-unboxed-closure-lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -7,10 +7,10 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n use std::ops::FnMut;\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let mut f;\n     {\n         let c = 1;"}, {"sha": "651296dbeaf6a701e7b4f785b702d8f716006a01", "filename": "src/test/ui/span/regions-close-over-borrowed-ref-in-obj.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/regions-close-over-borrowed-ref-in-obj.rs:22:27\n+   |\n+LL |         let ss: &isize = &id(1);\n+   |                           ^^^^^ temporary value does not live long enough\n+...\n+LL |     }\n+   |     - temporary value only lives until here\n+LL | }\n+   | - borrow later used here, when `blah` is dropped\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "c8a1f801201489dc58324d3b0ed2d82b3bfa5134", "filename": "src/test/ui/span/regions-close-over-type-parameter-2.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,18 @@\n+error[E0597]: `tmp0` does not live long enough\n+  --> $DIR/regions-close-over-type-parameter-2.rs:33:20\n+   |\n+LL |       let _ = {\n+   |  _____________-\n+LL | |         let tmp0 = 3;\n+LL | |         let tmp1 = &tmp0;\n+   | |                    ^^^^^ borrowed value does not live long enough\n+LL | |         repeater3(tmp1)\n+LL | |     };\n+   | |     -\n+   | |     |\n+   | |_____borrowed value only lives until here\n+   |       borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "7fd2bfbdd8f9745e4cbcab5048f25a8955690aa6", "filename": "src/test/ui/span/regions-escape-loop-via-variable.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,13 @@\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/regions-escape-loop-via-variable.rs:21:13\n+   |\n+LL |         let x = 1 + *p;\n+   |                     -- borrow later used here\n+LL |         p = &x;\n+   |             ^^ borrowed value does not live long enough\n+LL |     }\n+   |     - borrowed value only lives until here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "c7aa40f18e36a8315b89aa73a9e8173e0454947a", "filename": "src/test/ui/span/regions-escape-loop-via-vec.nll.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,49 @@\n+error[E0503]: cannot use `x` because it was mutably borrowed\n+  --> $DIR/regions-escape-loop-via-vec.rs:15:11\n+   |\n+LL |     let mut _y = vec![&mut x];\n+   |                       ------ borrow of `x` occurs here\n+LL |     while x < 10 { //~ ERROR cannot use `x` because it was mutably borrowed\n+   |           ^ use of borrowed `x`\n+LL |         let mut z = x; //~ ERROR cannot use `x` because it was mutably borrowed\n+LL |         _y.push(&mut z);\n+   |         -- borrow later used here\n+\n+error[E0503]: cannot use `x` because it was mutably borrowed\n+  --> $DIR/regions-escape-loop-via-vec.rs:16:21\n+   |\n+LL |     let mut _y = vec![&mut x];\n+   |                       ------ borrow of `x` occurs here\n+LL |     while x < 10 { //~ ERROR cannot use `x` because it was mutably borrowed\n+LL |         let mut z = x; //~ ERROR cannot use `x` because it was mutably borrowed\n+   |                     ^ use of borrowed `x`\n+LL |         _y.push(&mut z);\n+   |         -- borrow later used here\n+\n+error[E0503]: cannot use `x` because it was mutably borrowed\n+  --> $DIR/regions-escape-loop-via-vec.rs:19:9\n+   |\n+LL |     let mut _y = vec![&mut x];\n+   |                       ------ borrow of `x` occurs here\n+...\n+LL |         _y.push(&mut z);\n+   |         -- borrow later used here\n+LL |         //~^ ERROR `z` does not live long enough\n+LL |         x += 1; //~ ERROR cannot assign\n+   |         ^^^^^^ use of borrowed `x`\n+\n+error[E0597]: `z` does not live long enough\n+  --> $DIR/regions-escape-loop-via-vec.rs:17:17\n+   |\n+LL |         _y.push(&mut z);\n+   |         --      ^^^^^^ borrowed value does not live long enough\n+   |         |\n+   |         borrow later used here\n+...\n+LL |     }\n+   |     - borrowed value only lives until here\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors occurred: E0503, E0597.\n+For more information about an error, try `rustc --explain E0503`."}, {"sha": "034f80c7d54af7d87b52464c222604962f0c9475", "filename": "src/test/ui/span/regions-infer-borrow-scope-within-loop.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error[E0597]: `*x` does not live long enough\n+  --> $DIR/regions-infer-borrow-scope-within-loop.rs:24:20\n+   |\n+LL |         y = borrow(&*x);\n+   |                    ^^^ borrowed value does not live long enough\n+...\n+LL |     }\n+   |     - borrowed value only lives until here\n+LL |     assert!(*y != 0);\n+   |             -- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "710b19e193264e508b4b4c0fafb55edf5bb542cf", "filename": "src/test/ui/span/send-is-not-static-ensures-scoping.nll.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,30 @@\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/send-is-not-static-ensures-scoping.rs:29:16\n+   |\n+LL |           scoped(|| {\n+   |  ________________^\n+LL | |             let _z = y;\n+LL | |             //~^ ERROR `y` does not live long enough\n+LL | |         })\n+   | |_________^ borrowed value does not live long enough\n+LL |       };\n+   |       - borrowed value only lives until here\n+LL | \n+LL |       bad.join();\n+   |       --- borrow later used here\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/send-is-not-static-ensures-scoping.rs:26:17\n+   |\n+LL |         let y = &x;\n+   |                 ^^ borrowed value does not live long enough\n+...\n+LL |     };\n+   |     - borrowed value only lives until here\n+LL | \n+LL |     bad.join();\n+   |     --- borrow later used here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "e794f8c27e854e11a9ea295b6681443e4561d12a", "filename": "src/test/ui/span/send-is-not-static-std-sync-2.nll.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,37 @@\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/send-is-not-static-std-sync-2.rs:21:20\n+   |\n+LL |         Mutex::new(&x)\n+   |                    ^^ borrowed value does not live long enough\n+LL |     };\n+   |     - borrowed value only lives until here\n+...\n+LL |     let _dangling = *lock.lock().unwrap();\n+   |                      ---- borrow later used here\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/send-is-not-static-std-sync-2.rs:31:21\n+   |\n+LL |         RwLock::new(&x)\n+   |                     ^^ borrowed value does not live long enough\n+LL |     };\n+   |     - borrowed value only lives until here\n+LL |     //~^^ ERROR `x` does not live long enough\n+LL |     let _dangling = *lock.read().unwrap();\n+   |                      ---- borrow later used here\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/send-is-not-static-std-sync-2.rs:41:25\n+   |\n+LL |     let (_tx, rx) = {\n+   |          --- borrow later used here\n+...\n+LL |         let _ = tx.send(&x);\n+   |                         ^^ borrowed value does not live long enough\n+LL |         (tx, rx)\n+LL |     };\n+   |     - borrowed value only lives until here\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "211433061104ba22579360fb427bfd6d713ac2bf", "filename": "src/test/ui/span/send-is-not-static-std-sync.nll.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,48 @@\n+error[E0505]: cannot move out of `y` because it is borrowed\n+  --> $DIR/send-is-not-static-std-sync.rs:23:10\n+   |\n+LL |     *lock.lock().unwrap() = &*y;\n+   |                             --- borrow of `*y` occurs here\n+LL |     drop(y); //~ ERROR cannot move out\n+   |          ^ move out of `y` occurs here\n+...\n+LL |         *lock.lock().unwrap() = &z;\n+   |          ---- borrow later used here\n+\n+error[E0505]: cannot move out of `y` because it is borrowed\n+  --> $DIR/send-is-not-static-std-sync.rs:36:10\n+   |\n+LL |     *lock.write().unwrap() = &*y;\n+   |                              --- borrow of `*y` occurs here\n+LL |     drop(y); //~ ERROR cannot move out\n+   |          ^ move out of `y` occurs here\n+...\n+LL |         *lock.write().unwrap() = &z;\n+   |          ---- borrow later used here\n+\n+error[E0505]: cannot move out of `y` because it is borrowed\n+  --> $DIR/send-is-not-static-std-sync.rs:51:10\n+   |\n+LL |     tx.send(&*y);\n+   |             --- borrow of `*y` occurs here\n+LL |     drop(y); //~ ERROR cannot move out\n+   |          ^ move out of `y` occurs here\n+...\n+LL |         tx.send(&z).unwrap();\n+   |         -- borrow later used here\n+\n+error[E0597]: `z` does not live long enough\n+  --> $DIR/send-is-not-static-std-sync.rs:54:17\n+   |\n+LL |         tx.send(&z).unwrap();\n+   |                 ^^ borrowed value does not live long enough\n+LL |     }\n+   |     - borrowed value only lives until here\n+LL |     //~^^ ERROR `z` does not live long enough\n+LL | }\n+   | - borrow later used here, when `tx` is dropped\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors occurred: E0505, E0597.\n+For more information about an error, try `rustc --explain E0505`."}, {"sha": "52ca125f8b62ebeb30402a91a4ad8d77795773e3", "filename": "src/test/ui/span/slice-borrow.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error: compilation successful\n+  --> $DIR/slice-borrow.rs:13:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     let y;\n+LL | |     {\n+LL | |         let x: &[isize] = &vec![1, 2, 3, 4, 5];\n+LL | |         y = &x[1..];\n+LL | |     }\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "45dff62672befced39f2327641f9a23be4a1935d", "filename": "src/test/ui/span/slice-borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -7,10 +7,10 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n // Test slicing expressions doesn't defeat the borrow checker.\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let y;\n     {\n         let x: &[isize] = &vec![1, 2, 3, 4, 5];"}, {"sha": "389adb231c4228ddb7f9b611cc7913fd150dbf9c", "filename": "src/test/ui/span/vec-must-not-hide-type-from-dropck.nll.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,27 @@\n+error[E0597]: `c1` does not live long enough\n+  --> $DIR/vec-must-not-hide-type-from-dropck.rs:129:24\n+   |\n+LL |     c2.v[0].v.set(Some(&c1));\n+   |                        ^^^ borrowed value does not live long enough\n+LL |     //~^ ERROR `c1` does not live long enough\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `c1` is dropped\n+\n+error[E0597]: `c2` does not live long enough\n+  --> $DIR/vec-must-not-hide-type-from-dropck.rs:127:24\n+   |\n+LL |     c1.v[0].v.set(Some(&c2));\n+   |                        ^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `c1` is dropped\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "09ecc666cbc01163c0c78c950dcffc0e7f3c61e3", "filename": "src/test/ui/span/vec_refs_data_with_early_death.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error: compilation successful\n+  --> $DIR/vec_refs_data_with_early_death.rs:21:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     let mut v = Vec::new();\n+LL | |\n+LL | |     let x: i8 = 3;\n+...  |\n+LL | |     assert_eq!(v, [&3, &4]);\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "a3532d919bc09e4d4d39ad052a9dd4cdef96bd0e", "filename": "src/test/ui/span/vec_refs_data_with_early_death.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -17,8 +17,8 @@\n //  element it owns; thus, for data like this, it seems like we could\n //  loosen the restrictions here if we wanted. But it also is not\n //  clear whether such loosening is terribly important.)\n-\n-fn main() {\n+#![feature(rustc_attrs)]\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let mut v = Vec::new();\n \n     let x: i8 = 3;"}, {"sha": "a175cf1b38a448d1ef1168accca1c5b04fb8ffbe", "filename": "src/test/ui/span/wf-method-late-bound-regions.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,14 @@\n+error: compilation successful\n+  --> $DIR/wf-method-late-bound-regions.rs:25:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     let f = Foo(None);\n+LL | |     let f2 = f;\n+LL | |     let dangling = {\n+...  |\n+LL | |     println!(\"{}\", dangling);\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "317cd395d0a736f7a08654b6216421e5deecd7ac", "filename": "src/test/ui/span/wf-method-late-bound-regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -11,7 +11,7 @@\n // A method's receiver must be well-formed, even if it has late-bound regions.\n // Because of this, a method's substs being well-formed does not imply that\n // the method's implied bounds are met.\n-\n+#![feature(rustc_attrs)]\n struct Foo<'b>(Option<&'b ()>);\n \n trait Bar<'b> {\n@@ -22,7 +22,7 @@ impl<'b> Bar<'b> for Foo<'b> {\n     fn xmute<'a>(&'a self, u: &'b u32) -> &'a u32 { u }\n }\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let f = Foo(None);\n     let f2 = f;\n     let dangling = {"}, {"sha": "e4e93ecac8e620656ca2c160c2b89a2d3eed7077", "filename": "src/test/ui/suggestions/closure-immutable-outer-variable.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,9 @@\n+error[E0594]: cannot assign to immutable item `y`\n+  --> $DIR/closure-immutable-outer-variable.rs:19:26\n+   |\n+LL |     foo(Box::new(move || y = false) as Box<_>); //~ ERROR cannot assign to captured outer variable\n+   |                          ^^^^^^^^^ cannot mutate\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "ed691843f9b26b500d44e2f1c2242318e9db4074", "filename": "src/test/ui/suggestions/fn-closure-mutable-capture.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fsuggestions%2Ffn-closure-mutable-capture.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Fsuggestions%2Ffn-closure-mutable-capture.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-closure-mutable-capture.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,9 @@\n+error[E0594]: cannot assign to immutable item `x`\n+  --> $DIR/fn-closure-mutable-capture.rs:15:17\n+   |\n+LL |     bar(move || x = 1);\n+   |                 ^^^^^ cannot mutate\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "f8ea891914ec676a66141d3a4214cfd0f0c03fc1", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.nll.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -0,0 +1,36 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/dyn-trait-underscore.rs:20:14\n+   |\n+LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n+   |              ^^^^^\n+\n+warning: not reporting region error due to -Znll\n+  --> $DIR/dyn-trait-underscore.rs:20:20\n+   |\n+LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n+   |                    ^^^^\n+\n+warning: not reporting region error due to -Znll\n+  --> $DIR/dyn-trait-underscore.rs:20:5\n+   |\n+LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n+   |     ^^^^^^^^\n+\n+warning: not reporting region error due to -Znll\n+  --> $DIR/dyn-trait-underscore.rs:20:5\n+   |\n+LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: free region `` does not outlive free region `'static`\n+  --> $DIR/dyn-trait-underscore.rs:18:52\n+   |\n+LL |   fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n+   |  ____________________________________________________^\n+LL | |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n+LL | |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "bda58bc09f77625714a23244b2018ebace908ddc", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32428808b4c05c938c36ad6bd65bfbd658eb624f/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=32428808b4c05c938c36ad6bd65bfbd658eb624f", "patch": "@@ -12,14 +12,41 @@\n \n use std::path::Path;\n \n+// See rust-lang/rust#48879: In addition to the mapping from `foo.rs`\n+// to `foo.stderr`/`foo.stdout`, we also can optionally have\n+// `foo.$mode.stderr`, where $mode is one of the strings on this list,\n+// as an alternative to use when running under that mode.\n+static COMPARE_MODE_NAMES: [&'static str; 1] = [\"nll\"];\n+\n pub fn check(path: &Path, bad: &mut bool) {\n     super::walk_many(&[&path.join(\"test/ui\"), &path.join(\"test/ui-fulldeps\")],\n                      &mut |_| false,\n                      &mut |file_path| {\n         if let Some(ext) = file_path.extension() {\n             if (ext == \"stderr\" || ext == \"stdout\") && !file_path.with_extension(\"rs\").exists() {\n-                println!(\"Stray file with UI testing output: {:?}\", file_path);\n-                *bad = true;\n+\n+                // rust-lang/rust#48879: this fn used to be beautful\n+                // because Path API special-cases replacing\n+                // extensions. That works great for \".stderr\" but not\n+                // so well for \".nll.stderr\". To support the latter,\n+                // we explicitly search backwards for mode's starting\n+                // point and build corresponding source name.\n+                let filename = file_path.file_name().expect(\"need filename\")\n+                    .to_str().expect(\"need UTF-8 filename\");\n+                let found_matching_prefix = COMPARE_MODE_NAMES.iter().any(|mode| {\n+                    if let Some(r_idx) = filename.rfind(&format!(\".{}\", mode)) {\n+                        let source_name = format!(\"{}.rs\", &filename[0..r_idx]);\n+                        let source_path = file_path.with_file_name(source_name);\n+                        source_path.exists()\n+                    } else {\n+                        false\n+                    }\n+                });\n+\n+                if !found_matching_prefix {\n+                    println!(\"Stray file with UI testing output: {:?}\", file_path);\n+                    *bad = true;\n+                }\n             }\n         }\n     });"}]}