{"sha": "589ad6a5b7328867d08cbd16863e7f49e720f4d7", "node_id": "C_kwDOAAsO6NoAKDU4OWFkNmE1YjczMjg4NjdkMDhjYmQxNjg2M2U3ZjQ5ZTcyMGY0ZDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-14T01:06:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-14T01:06:05Z"}, "message": "Auto merge of #90883 - matthiaskrgr:rollup-iu9k5pe, r=matthiaskrgr\n\nRollup of 3 pull requests\n\nSuccessful merges:\n\n - #90771 (Fix trait object error code)\n - #90840 (relate lifetime in `TypeOutlives` bounds on drop impls)\n - #90853 (rustdoc: Use an empty Vec instead of Option<Vec>)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "93eac15d9196c6546d051baaf46c52d2fb4e5ff8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93eac15d9196c6546d051baaf46c52d2fb4e5ff8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/589ad6a5b7328867d08cbd16863e7f49e720f4d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/589ad6a5b7328867d08cbd16863e7f49e720f4d7", "html_url": "https://github.com/rust-lang/rust/commit/589ad6a5b7328867d08cbd16863e7f49e720f4d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/589ad6a5b7328867d08cbd16863e7f49e720f4d7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b416e3892d9526709f3a248f5ed3a43a970f795e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b416e3892d9526709f3a248f5ed3a43a970f795e", "html_url": "https://github.com/rust-lang/rust/commit/b416e3892d9526709f3a248f5ed3a43a970f795e"}, {"sha": "c677a8da86e8bc5fb2a2c0fec54e0e71c2caca97", "url": "https://api.github.com/repos/rust-lang/rust/commits/c677a8da86e8bc5fb2a2c0fec54e0e71c2caca97", "html_url": "https://github.com/rust-lang/rust/commit/c677a8da86e8bc5fb2a2c0fec54e0e71c2caca97"}], "stats": {"total": 64, "additions": 46, "deletions": 18}, "files": [{"sha": "4b4d29307ff6fafc125d2cd606a2d32fc6e928bd", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/589ad6a5b7328867d08cbd16863e7f49e720f4d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/589ad6a5b7328867d08cbd16863e7f49e720f4d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=589ad6a5b7328867d08cbd16863e7f49e720f4d7", "patch": "@@ -240,8 +240,12 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n                     ty::PredicateKind::ConstEvaluatable(a),\n                     ty::PredicateKind::ConstEvaluatable(b),\n                 ) => tcx.try_unify_abstract_consts((a, b)),\n-                (ty::PredicateKind::TypeOutlives(a), ty::PredicateKind::TypeOutlives(b)) => {\n-                    relator.relate(predicate.rebind(a.0), p.rebind(b.0)).is_ok()\n+                (\n+                    ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty_a, lt_a)),\n+                    ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty_b, lt_b)),\n+                ) => {\n+                    relator.relate(predicate.rebind(ty_a), p.rebind(ty_b)).is_ok()\n+                        && relator.relate(predicate.rebind(lt_a), p.rebind(lt_b)).is_ok()\n                 }\n                 _ => predicate == p,\n             }"}, {"sha": "aae59eee99142878d26722dd366ee69124370527", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/589ad6a5b7328867d08cbd16863e7f49e720f4d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/589ad6a5b7328867d08cbd16863e7f49e720f4d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=589ad6a5b7328867d08cbd16863e7f49e720f4d7", "patch": "@@ -952,7 +952,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let mut err = rustc_errors::struct_span_err!(\n                         self.sess(),\n                         self_ty.span,\n-                        E0783,\n+                        E0782,\n                         \"{}\",\n                         msg,\n                     );"}, {"sha": "9164916af097711bf48da58857b0954e615d1774", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/589ad6a5b7328867d08cbd16863e7f49e720f4d7/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/589ad6a5b7328867d08cbd16863e7f49e720f4d7/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=589ad6a5b7328867d08cbd16863e7f49e720f4d7", "patch": "@@ -205,7 +205,6 @@ crate fn get_index_search_type<'tcx>(\n \n     inputs.retain(|a| a.ty.name.is_some());\n     output.retain(|a| a.ty.name.is_some());\n-    let output = if output.is_empty() { None } else { Some(output) };\n \n     Some(IndexItemFunctionType { inputs, output })\n }"}, {"sha": "dd592de41bd6c142c98f40828f001f3d239ea483", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/589ad6a5b7328867d08cbd16863e7f49e720f4d7/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/589ad6a5b7328867d08cbd16863e7f49e720f4d7/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=589ad6a5b7328867d08cbd16863e7f49e720f4d7", "patch": "@@ -117,7 +117,7 @@ crate struct RenderType {\n #[derive(Debug)]\n crate struct IndexItemFunctionType {\n     inputs: Vec<TypeWithKind>,\n-    output: Option<Vec<TypeWithKind>>,\n+    output: Vec<TypeWithKind>,\n }\n \n impl Serialize for IndexItemFunctionType {\n@@ -126,21 +126,16 @@ impl Serialize for IndexItemFunctionType {\n         S: Serializer,\n     {\n         // If we couldn't figure out a type, just write `null`.\n-        let mut iter = self.inputs.iter();\n-        if match self.output {\n-            Some(ref output) => iter.chain(output.iter()).any(|i| i.ty.name.is_none()),\n-            None => iter.any(|i| i.ty.name.is_none()),\n-        } {\n+        let has_missing = self.inputs.iter().chain(self.output.iter()).any(|i| i.ty.name.is_none());\n+        if has_missing {\n             serializer.serialize_none()\n         } else {\n             let mut seq = serializer.serialize_seq(None)?;\n             seq.serialize_element(&self.inputs)?;\n-            if let Some(output) = &self.output {\n-                if output.len() > 1 {\n-                    seq.serialize_element(&output)?;\n-                } else {\n-                    seq.serialize_element(&output[0])?;\n-                }\n+            match self.output.as_slice() {\n+                [] => {}\n+                [one] => seq.serialize_element(one)?,\n+                all => seq.serialize_element(all)?,\n             }\n             seq.end()\n         }"}, {"sha": "42530d317308abb11c07f45cb42b74b7627ad14b", "filename": "src/test/ui/dropck/relate_lt_in_type_outlives_bound.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/589ad6a5b7328867d08cbd16863e7f49e720f4d7/src%2Ftest%2Fui%2Fdropck%2Frelate_lt_in_type_outlives_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/589ad6a5b7328867d08cbd16863e7f49e720f4d7/src%2Ftest%2Fui%2Fdropck%2Frelate_lt_in_type_outlives_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Frelate_lt_in_type_outlives_bound.rs?ref=589ad6a5b7328867d08cbd16863e7f49e720f4d7", "patch": "@@ -0,0 +1,13 @@\n+struct Wrapper<'a, T>(&'a T)\n+where\n+    T: 'a;\n+\n+impl<'a, T> Drop for Wrapper<'a, T>\n+where\n+    T: 'static,\n+    //~^ error: `Drop` impl requires `T: 'static` but the struct it is implemented for does not\n+{\n+    fn drop(&mut self) {}\n+}\n+\n+fn main() {}"}, {"sha": "5176684e15340a5a75262698ad3735e88aa52929", "filename": "src/test/ui/dropck/relate_lt_in_type_outlives_bound.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/589ad6a5b7328867d08cbd16863e7f49e720f4d7/src%2Ftest%2Fui%2Fdropck%2Frelate_lt_in_type_outlives_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/589ad6a5b7328867d08cbd16863e7f49e720f4d7/src%2Ftest%2Fui%2Fdropck%2Frelate_lt_in_type_outlives_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Frelate_lt_in_type_outlives_bound.stderr?ref=589ad6a5b7328867d08cbd16863e7f49e720f4d7", "patch": "@@ -0,0 +1,17 @@\n+error[E0367]: `Drop` impl requires `T: 'static` but the struct it is implemented for does not\n+  --> $DIR/relate_lt_in_type_outlives_bound.rs:7:8\n+   |\n+LL |     T: 'static,\n+   |        ^^^^^^^\n+   |\n+note: the implementor must specify the same requirement\n+  --> $DIR/relate_lt_in_type_outlives_bound.rs:1:1\n+   |\n+LL | / struct Wrapper<'a, T>(&'a T)\n+LL | | where\n+LL | |     T: 'a;\n+   | |__________^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0367`."}, {"sha": "a7119b073abfadfd3b7bd120d9a1313b2ccb5412", "filename": "src/test/ui/editions/dyn-trait-sugg-2021.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/589ad6a5b7328867d08cbd16863e7f49e720f4d7/src%2Ftest%2Fui%2Feditions%2Fdyn-trait-sugg-2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/589ad6a5b7328867d08cbd16863e7f49e720f4d7/src%2Ftest%2Fui%2Feditions%2Fdyn-trait-sugg-2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fdyn-trait-sugg-2021.stderr?ref=589ad6a5b7328867d08cbd16863e7f49e720f4d7", "patch": "@@ -1,9 +1,9 @@\n-error[E0783]: trait objects without an explicit `dyn` are deprecated\n+error[E0782]: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/dyn-trait-sugg-2021.rs:10:5\n    |\n LL |     Foo::hi(123);\n    |     ^^^ help: use `dyn`: `<dyn Foo>`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0783`.\n+For more information about this error, try `rustc --explain E0782`."}]}