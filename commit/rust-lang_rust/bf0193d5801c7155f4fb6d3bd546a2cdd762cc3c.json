{"sha": "bf0193d5801c7155f4fb6d3bd546a2cdd762cc3c", "node_id": "C_kwDOAAsO6NoAKGJmMDE5M2Q1ODAxYzcxNTVmNGZiNmQzYmQ1NDZhMmNkZDc2MmNjM2M", "commit": {"author": {"name": "Chayim Refael Friedman", "email": "chayimfr@gmail.com", "date": "2022-05-24T21:57:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-24T21:57:51Z"}, "message": "Suggest adding a semicolon to a closure without block\n\nThis transforms `|| expr` into `|| { expr; }`.", "tree": {"sha": "4f17de0b4c04c79ec21207ef17fccc0fdf9016bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f17de0b4c04c79ec21207ef17fccc0fdf9016bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf0193d5801c7155f4fb6d3bd546a2cdd762cc3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf0193d5801c7155f4fb6d3bd546a2cdd762cc3c", "html_url": "https://github.com/rust-lang/rust/commit/bf0193d5801c7155f4fb6d3bd546a2cdd762cc3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf0193d5801c7155f4fb6d3bd546a2cdd762cc3c/comments", "author": {"login": "ChayimFriedman2", "id": 24700207, "node_id": "MDQ6VXNlcjI0NzAwMjA3", "avatar_url": "https://avatars.githubusercontent.com/u/24700207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChayimFriedman2", "html_url": "https://github.com/ChayimFriedman2", "followers_url": "https://api.github.com/users/ChayimFriedman2/followers", "following_url": "https://api.github.com/users/ChayimFriedman2/following{/other_user}", "gists_url": "https://api.github.com/users/ChayimFriedman2/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChayimFriedman2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChayimFriedman2/subscriptions", "organizations_url": "https://api.github.com/users/ChayimFriedman2/orgs", "repos_url": "https://api.github.com/users/ChayimFriedman2/repos", "events_url": "https://api.github.com/users/ChayimFriedman2/events{/privacy}", "received_events_url": "https://api.github.com/users/ChayimFriedman2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2eba058e6e1c698723e47074561a30b50b5fa7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2eba058e6e1c698723e47074561a30b50b5fa7a", "html_url": "https://github.com/rust-lang/rust/commit/b2eba058e6e1c698723e47074561a30b50b5fa7a"}], "stats": {"total": 85, "additions": 69, "deletions": 16}, "files": [{"sha": "407a0267f1358bb05b6a4161e9c433d11f0bd46c", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bf0193d5801c7155f4fb6d3bd546a2cdd762cc3c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0193d5801c7155f4fb6d3bd546a2cdd762cc3c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=bf0193d5801c7155f4fb6d3bd546a2cdd762cc3c", "patch": "@@ -1500,7 +1500,8 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             coercion_error.clone(),\n                             fcx,\n                             parent_id,\n-                            expression.map(|expr| (expr, blk_id)),\n+                            expression,\n+                            Some(blk_id),\n                         );\n                         if !fcx.tcx.features().unsized_locals {\n                             unsized_return = self.is_return_ty_unsized(fcx, blk_id);\n@@ -1514,6 +1515,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             coercion_error.clone(),\n                             fcx,\n                             id,\n+                            expression,\n                             None,\n                         );\n                         if !fcx.tcx.features().unsized_locals {\n@@ -1564,21 +1566,30 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         ty_err: TypeError<'tcx>,\n         fcx: &FnCtxt<'a, 'tcx>,\n         id: hir::HirId,\n-        expression: Option<(&'tcx hir::Expr<'tcx>, hir::HirId)>,\n+        expression: Option<&'tcx hir::Expr<'tcx>>,\n+        blk_id: Option<hir::HirId>,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let mut err = fcx.report_mismatched_types(cause, expected, found, ty_err);\n \n         let mut pointing_at_return_type = false;\n         let mut fn_output = None;\n \n+        let parent_id = fcx.tcx.hir().get_parent_node(id);\n+        let parent = fcx.tcx.hir().get(parent_id);\n+        if let Some(expr) = expression\n+            && let hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(_, _, body_id, ..), .. }) = parent\n+            && !matches!(fcx.tcx.hir().get(body_id.hir_id), hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Block(..), .. }))\n+            && expr.can_have_side_effects()\n+            && !in_external_macro(fcx.tcx.sess, expr.span)\n+        {\n+            fcx.suggest_missing_semicolon(&mut err, expr, expected, true);\n+        }\n         // Verify that this is a tail expression of a function, otherwise the\n         // label pointing out the cause for the type coercion will be wrong\n         // as prior return coercions would not be relevant (#57664).\n-        let parent_id = fcx.tcx.hir().get_parent_node(id);\n-        let fn_decl = if let Some((expr, blk_id)) = expression {\n+        let fn_decl = if let (Some(expr), Some(blk_id)) = (expression, blk_id) {\n             pointing_at_return_type =\n                 fcx.suggest_mismatched_types_on_tail(&mut err, expr, expected, found, blk_id);\n-            let parent = fcx.tcx.hir().get(parent_id);\n             if let (Some(cond_expr), true, false) = (\n                 fcx.tcx.hir().get_if_cause(expr.hir_id),\n                 expected.is_unit(),\n@@ -1607,7 +1618,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         };\n \n         if let Some((fn_decl, can_suggest)) = fn_decl {\n-            if expression.is_none() {\n+            if blk_id.is_none() {\n                 pointing_at_return_type |= fcx.suggest_missing_return_type(\n                     &mut err,\n                     &fn_decl,\n@@ -1625,8 +1636,8 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         let parent_id = fcx.tcx.hir().get_parent_item(id);\n         let parent_item = fcx.tcx.hir().get_by_def_id(parent_id);\n \n-        if let (Some((expr, _)), Some((fn_decl, _, _))) =\n-            (expression, fcx.get_node_fn_decl(parent_item))\n+        if let (Some(expr), Some(_), Some((fn_decl, _, _))) =\n+            (expression, blk_id, fcx.get_node_fn_decl(parent_item))\n         {\n             fcx.suggest_missing_break_or_return_expr(\n                 &mut err,"}, {"sha": "40b667beaac0adf6b401a739753868905e826f98", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bf0193d5801c7155f4fb6d3bd546a2cdd762cc3c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0193d5801c7155f4fb6d3bd546a2cdd762cc3c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=bf0193d5801c7155f4fb6d3bd546a2cdd762cc3c", "patch": "@@ -50,7 +50,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // adding a semicolon, because there's nowhere to put it.\n         // See issue #81943.\n         if expr.can_have_side_effects() && !in_external_macro(self.tcx.sess, expr.span) {\n-            self.suggest_missing_semicolon(err, expr, expected);\n+            self.suggest_missing_semicolon(err, expr, expected, false);\n         }\n         let mut pointing_at_return_type = false;\n         if let Some((fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n@@ -473,11 +473,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// This routine checks if the return expression in a block would make sense on its own as a\n     /// statement and the return type has been left as default or has been specified as `()`. If so,\n     /// it suggests adding a semicolon.\n-    fn suggest_missing_semicolon(\n+    ///\n+    /// If the expression is the expression of a closure without block (`|| expr`), a\n+    /// block is needed to be added too (`|| { expr; }`). This is denoted by `needs_block`.\n+    pub fn suggest_missing_semicolon(\n         &self,\n         err: &mut Diagnostic,\n         expression: &'tcx hir::Expr<'tcx>,\n         expected: Ty<'tcx>,\n+        needs_block: bool,\n     ) {\n         if expected.is_unit() {\n             // `BlockTailExpression` only relevant if the tail expr would be\n@@ -491,12 +495,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 | ExprKind::Block(..)\n                     if expression.can_have_side_effects() =>\n                 {\n-                    err.span_suggestion(\n-                        expression.span.shrink_to_hi(),\n-                        \"consider using a semicolon here\",\n-                        \";\".to_string(),\n-                        Applicability::MachineApplicable,\n-                    );\n+                    if needs_block {\n+                        err.multipart_suggestion(\n+                            \"consider using a semicolon here\",\n+                            vec![\n+                                (expression.span.shrink_to_lo(), \"{ \".to_owned()),\n+                                (expression.span.shrink_to_hi(), \"; }\".to_owned()),\n+                            ],\n+                            Applicability::MachineApplicable,\n+                        );\n+                    } else {\n+                        err.span_suggestion(\n+                            expression.span.shrink_to_hi(),\n+                            \"consider using a semicolon here\",\n+                            \";\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n                 }\n                 _ => (),\n             }"}, {"sha": "3ae91be60c5a062eebf426cb7c526d44db5edd93", "filename": "src/test/ui/closures/add_semicolon_non_block_closure.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bf0193d5801c7155f4fb6d3bd546a2cdd762cc3c/src%2Ftest%2Fui%2Fclosures%2Fadd_semicolon_non_block_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0193d5801c7155f4fb6d3bd546a2cdd762cc3c/src%2Ftest%2Fui%2Fclosures%2Fadd_semicolon_non_block_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fadd_semicolon_non_block_closure.rs?ref=bf0193d5801c7155f4fb6d3bd546a2cdd762cc3c", "patch": "@@ -0,0 +1,11 @@\n+fn foo(_f: impl Fn()) {}\n+\n+fn bar() -> i32 {\n+    1\n+}\n+\n+fn main() {\n+    foo(|| bar())\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider using a semicolon here\n+}"}, {"sha": "ed829fc98f86fc60c503be9696d45e605d8e6e98", "filename": "src/test/ui/closures/add_semicolon_non_block_closure.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bf0193d5801c7155f4fb6d3bd546a2cdd762cc3c/src%2Ftest%2Fui%2Fclosures%2Fadd_semicolon_non_block_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bf0193d5801c7155f4fb6d3bd546a2cdd762cc3c/src%2Ftest%2Fui%2Fclosures%2Fadd_semicolon_non_block_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fadd_semicolon_non_block_closure.stderr?ref=bf0193d5801c7155f4fb6d3bd546a2cdd762cc3c", "patch": "@@ -0,0 +1,16 @@\n+error[E0308]: mismatched types\n+  --> $DIR/add_semicolon_non_block_closure.rs:8:12\n+   |\n+LL | fn main() {\n+   |           - expected `()` because of default return type\n+LL |     foo(|| bar())\n+   |            ^^^^^ expected `()`, found `i32`\n+   |\n+help: consider using a semicolon here\n+   |\n+LL |     foo(|| { bar(); })\n+   |            +      +++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}