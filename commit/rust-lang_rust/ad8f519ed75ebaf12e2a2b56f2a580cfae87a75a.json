{"sha": "ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "node_id": "C_kwDOAAsO6NoAKGFkOGY1MTllZDc1ZWJhZjEyZTJhMmI1NmYyYTU4MGNmYWU4N2E3NWE", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-09-26T20:40:24Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-09-26T20:40:24Z"}, "message": "Enable inline stack probes on PowerPC and SystemZ", "tree": {"sha": "d7b9f941cfea344dc6788a5a79d393980efd6db3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7b9f941cfea344dc6788a5a79d393980efd6db3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "html_url": "https://github.com/rust-lang/rust/commit/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1d7dec558d863fb76f98453088b36cb1a926d48", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d7dec558d863fb76f98453088b36cb1a926d48", "html_url": "https://github.com/rust-lang/rust/commit/e1d7dec558d863fb76f98453088b36cb1a926d48"}], "stats": {"total": 155, "additions": 107, "deletions": 48}, "files": [{"sha": "9f4cc3d80f1c9ab0088d90f6cd228b36f1362637", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs?ref=ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "patch": "@@ -1,11 +1,12 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"ppc64\".into();\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n+    base.stack_probes = StackProbeType::Inline;\n \n     Target {\n         llvm_target: \"powerpc64-unknown-freebsd\".into(),"}, {"sha": "21955a616c2de049cefb7a223bdbb963b2655193", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs?ref=ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "patch": "@@ -1,11 +1,12 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"ppc64\".into();\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n+    base.stack_probes = StackProbeType::Inline;\n \n     Target {\n         llvm_target: \"powerpc64-unknown-linux-gnu\".into(),"}, {"sha": "bbf86e4ff41cad6b2e5943dc868708cfb2445cd0", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs?ref=ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "patch": "@@ -1,11 +1,12 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"ppc64\".into();\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n+    base.stack_probes = StackProbeType::Inline;\n \n     Target {\n         llvm_target: \"powerpc64-unknown-linux-musl\".into(),"}, {"sha": "bfa61a21fb3e69b4e745d337bff2873917385b26", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_openbsd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_openbsd.rs?ref=ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "patch": "@@ -1,11 +1,12 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n     base.cpu = \"ppc64\".into();\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n+    base.stack_probes = StackProbeType::Inline;\n \n     Target {\n         llvm_target: \"powerpc64-unknown-openbsd\".into(),"}, {"sha": "4ebf342ad22e47d15a50fcd0f4266687f25312d9", "filename": "compiler/rustc_target/src/spec/powerpc64_wrs_vxworks.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs?ref=ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "patch": "@@ -1,11 +1,12 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.cpu = \"ppc64\".into();\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n+    base.stack_probes = StackProbeType::Inline;\n \n     Target {\n         llvm_target: \"powerpc64-unknown-linux-gnu\".into(),"}, {"sha": "a7ab90785314339ab83338197ab9b36941e4fef0", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_freebsd.rs?ref=ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "patch": "@@ -1,10 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"ppc64le\".into();\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n+    base.stack_probes = StackProbeType::Inline;\n \n     Target {\n         llvm_target: \"powerpc64le-unknown-freebsd\".into(),"}, {"sha": "69fd6be6dc0e00ebf77f84df5132f7536d22e41a", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs?ref=ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "patch": "@@ -1,10 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"ppc64le\".into();\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n+    base.stack_probes = StackProbeType::Inline;\n \n     Target {\n         llvm_target: \"powerpc64le-unknown-linux-gnu\".into(),"}, {"sha": "ae3a8b545191a8f3543257f48f918f57f510b36f", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs?ref=ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "patch": "@@ -1,10 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"ppc64le\".into();\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n+    base.stack_probes = StackProbeType::Inline;\n \n     Target {\n         llvm_target: \"powerpc64le-unknown-linux-musl\".into(),"}, {"sha": "b5d4e5de05e290755e7c0137d234f2ecbe3521ea", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_freebsd.rs?ref=ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "patch": "@@ -1,11 +1,12 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n     // Extra hint to linker that we are generating secure-PLT code.\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\", \"--target=powerpc-unknown-freebsd13.0\"]);\n     base.max_atomic_width = Some(32);\n+    base.stack_probes = StackProbeType::Inline;\n \n     Target {\n         llvm_target: \"powerpc-unknown-freebsd13.0\".into(),"}, {"sha": "0ceb66c327be50126af12529f27bed7ffa49ddbf", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs?ref=ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "patch": "@@ -1,10 +1,11 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n     base.max_atomic_width = Some(32);\n+    base.stack_probes = StackProbeType::Inline;\n \n     Target {\n         llvm_target: \"powerpc-unknown-linux-gnu\".into(),"}, {"sha": "716090f39cac208b005fa3792e4466a77fa2ecbf", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_gnuspe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs?ref=ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "patch": "@@ -1,10 +1,11 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-mspe\"]);\n     base.max_atomic_width = Some(32);\n+    base.stack_probes = StackProbeType::Inline;\n \n     Target {\n         llvm_target: \"powerpc-unknown-linux-gnuspe\".into(),"}, {"sha": "d8cd158584a3c1a9a109ea21b6fdf3fbcb2600f8", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs?ref=ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "patch": "@@ -1,10 +1,11 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n     base.max_atomic_width = Some(32);\n+    base.stack_probes = StackProbeType::Inline;\n \n     Target {\n         llvm_target: \"powerpc-unknown-linux-musl\".into(),"}, {"sha": "7053e4b9c26fe01e58cbb3e4eb518c63eba6e8cc", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_netbsd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs?ref=ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "patch": "@@ -1,10 +1,11 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n     base.max_atomic_width = Some(32);\n+    base.stack_probes = StackProbeType::Inline;\n \n     Target {\n         llvm_target: \"powerpc-unknown-netbsd\".into(),"}, {"sha": "dec85f9961b82934b987b355ac891a76ecd689d9", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_openbsd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_openbsd.rs?ref=ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "patch": "@@ -1,10 +1,11 @@\n use crate::abi::Endian;\n-use crate::spec::Target;\n+use crate::spec::{StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n     base.endian = Endian::Big;\n     base.max_atomic_width = Some(32);\n+    base.stack_probes = StackProbeType::Inline;\n \n     Target {\n         llvm_target: \"powerpc-unknown-openbsd\".into(),"}, {"sha": "e0c5db6eacfe64fa8fc5354fde8947a9aa59393e", "filename": "compiler/rustc_target/src/spec/powerpc_wrs_vxworks.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs?ref=ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "patch": "@@ -1,10 +1,11 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\", \"--secure-plt\"]);\n     base.max_atomic_width = Some(32);\n+    base.stack_probes = StackProbeType::Inline;\n \n     Target {\n         llvm_target: \"powerpc-unknown-linux-gnu\".into(),"}, {"sha": "c7f41b1da87f64cb2b3a4c27222c1d5708666d0a", "filename": "compiler/rustc_target/src/spec/powerpc_wrs_vxworks_spe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs?ref=ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "patch": "@@ -1,10 +1,11 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-mspe\", \"--secure-plt\"]);\n     base.max_atomic_width = Some(32);\n+    base.stack_probes = StackProbeType::Inline;\n \n     Target {\n         llvm_target: \"powerpc-unknown-linux-gnuspe\".into(),"}, {"sha": "9bb9c931f5c464fde3d272d2f79b4dbfd0bd9c6d", "filename": "compiler/rustc_target/src/spec/s390x_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs?ref=ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "patch": "@@ -1,5 +1,5 @@\n use crate::abi::Endian;\n-use crate::spec::Target;\n+use crate::spec::{StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n@@ -12,6 +12,7 @@ pub fn target() -> Target {\n     base.features = \"-vector\".into();\n     base.max_atomic_width = Some(64);\n     base.min_global_align = Some(16);\n+    base.stack_probes = StackProbeType::Inline;\n \n     Target {\n         llvm_target: \"s390x-unknown-linux-gnu\".into(),"}, {"sha": "f877279781de0b31331d90c4ea4bbff02d2e5d7f", "filename": "compiler/rustc_target/src/spec/s390x_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_musl.rs?ref=ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "patch": "@@ -1,5 +1,5 @@\n use crate::abi::Endian;\n-use crate::spec::Target;\n+use crate::spec::{StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n@@ -13,6 +13,7 @@ pub fn target() -> Target {\n     base.max_atomic_width = Some(64);\n     base.min_global_align = Some(16);\n     base.static_position_independent_executables = true;\n+    base.stack_probes = StackProbeType::Inline;\n \n     Target {\n         llvm_target: \"s390x-unknown-linux-musl\".into(),"}, {"sha": "56b02fdecadcb7aa912b46946c814688bf6a2672", "filename": "src/test/codegen/stack-probes-call.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/src%2Ftest%2Fcodegen%2Fstack-probes-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/src%2Ftest%2Fcodegen%2Fstack-probes-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstack-probes-call.rs?ref=ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "patch": "@@ -0,0 +1,22 @@\n+// Check the \"probe-stack\" attribute for targets with `StackProbeType::Call`,\n+// or `StackProbeType::InlineOrCall` when running on older LLVM.\n+\n+// compile-flags: -C no-prepopulate-passes\n+// revisions: i686 x86_64\n+//[i686] compile-flags: --target i686-unknown-linux-gnu\n+//[i686] needs-llvm-components: x86\n+//[x86_64] compile-flags: --target x86_64-unknown-linux-gnu\n+//[x86_64] needs-llvm-components: x86\n+\n+#![crate_type = \"rlib\"]\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+#[no_mangle]\n+pub fn foo() {\n+// CHECK: @foo() unnamed_addr #0\n+// CHECK: attributes #0 = { {{.*}}\"probe-stack\"=\"__rust_probestack\"{{.*}} }\n+}"}, {"sha": "837a161081069b621a6cf3d3a116deba3674d8e5", "filename": "src/test/codegen/stack-probes-inline.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/src%2Ftest%2Fcodegen%2Fstack-probes-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/src%2Ftest%2Fcodegen%2Fstack-probes-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstack-probes-inline.rs?ref=ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "patch": "@@ -0,0 +1,26 @@\n+// Check the \"probe-stack\" attribute for targets with `StackProbeType::Inline`,\n+// or `StackProbeType::InlineOrCall` when running on newer LLVM.\n+\n+// compile-flags: -C no-prepopulate-passes\n+// revisions: powerpc powerpc64 powerpc64le s390x\n+//[powerpc] compile-flags: --target powerpc-unknown-linux-gnu\n+//[powerpc] needs-llvm-components: powerpc\n+//[powerpc64] compile-flags: --target powerpc64-unknown-linux-gnu\n+//[powerpc64] needs-llvm-components: powerpc\n+//[powerpc64le] compile-flags: --target powerpc64le-unknown-linux-gnu\n+//[powerpc64le] needs-llvm-components: powerpc\n+//[s390x] compile-flags: --target s390x-unknown-linux-gnu\n+//[s390x] needs-llvm-components: systemz\n+\n+#![crate_type = \"rlib\"]\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+#[no_mangle]\n+pub fn foo() {\n+// CHECK: @foo() unnamed_addr #0\n+// CHECK: attributes #0 = { {{.*}}\"probe-stack\"=\"inline-asm\"{{.*}} }\n+}"}, {"sha": "9bd351df3eaa069d45a1356c1582fc2b638382de", "filename": "src/test/codegen/stack-probes.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7dec558d863fb76f98453088b36cb1a926d48/src%2Ftest%2Fcodegen%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7dec558d863fb76f98453088b36cb1a926d48/src%2Ftest%2Fcodegen%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstack-probes.rs?ref=e1d7dec558d863fb76f98453088b36cb1a926d48", "patch": "@@ -1,22 +0,0 @@\n-// ignore-arm\n-// ignore-aarch64\n-// ignore-mips\n-// ignore-mips64\n-// ignore-powerpc\n-// ignore-powerpc64\n-// ignore-powerpc64le\n-// ignore-riscv64\n-// ignore-s390x\n-// ignore-sparc\n-// ignore-sparc64\n-// ignore-wasm\n-// ignore-emscripten\n-// ignore-windows\n-// compile-flags: -C no-prepopulate-passes\n-\n-#![crate_type = \"lib\"]\n-\n-#[no_mangle]\n-pub fn foo() {\n-// CHECK: @foo() unnamed_addr #0\n-}"}, {"sha": "6d934538f4c814b42b8b6ec7aa5a225a3901563f", "filename": "src/test/ui/abi/stack-probes-lto.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/src%2Ftest%2Fui%2Fabi%2Fstack-probes-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/src%2Ftest%2Fui%2Fabi%2Fstack-probes-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fstack-probes-lto.rs?ref=ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "patch": "@@ -3,8 +3,6 @@\n // ignore-aarch64\n // ignore-mips\n // ignore-mips64\n-// ignore-powerpc\n-// ignore-s390x\n // ignore-sparc\n // ignore-sparc64\n // ignore-wasm"}, {"sha": "e7b91644b3b298d71dcb8b494b4dbb2b7dea1880", "filename": "src/test/ui/abi/stack-probes.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/src%2Ftest%2Fui%2Fabi%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a/src%2Ftest%2Fui%2Fabi%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fstack-probes.rs?ref=ad8f519ed75ebaf12e2a2b56f2a580cfae87a75a", "patch": "@@ -3,8 +3,6 @@\n // ignore-aarch64\n // ignore-mips\n // ignore-mips64\n-// ignore-powerpc\n-// ignore-s390x\n // ignore-sparc\n // ignore-sparc64\n // ignore-wasm\n@@ -27,8 +25,9 @@ fn main() {\n     let args = env::args().skip(1).collect::<Vec<_>>();\n     if args.len() > 0 {\n         match &args[0][..] {\n-            \"main-thread\" => recurse(&MaybeUninit::uninit()),\n-            \"child-thread\" => thread::spawn(|| recurse(&MaybeUninit::uninit())).join().unwrap(),\n+            \"main-recurse\" => overflow_recurse(),\n+            \"child-recurse\" => thread::spawn(overflow_recurse).join().unwrap(),\n+            \"child-frame\" => overflow_frame(),\n             _ => panic!(),\n         }\n         return;\n@@ -41,9 +40,10 @@ fn main() {\n     // that we report stack overflow on the main thread, see #43052 for some\n     // details\n     if cfg!(not(target_os = \"linux\")) {\n-        assert_overflow(Command::new(&me).arg(\"main-thread\"));\n+        assert_overflow(Command::new(&me).arg(\"main-recurse\"));\n     }\n-    assert_overflow(Command::new(&me).arg(\"child-thread\"));\n+    assert_overflow(Command::new(&me).arg(\"child-recurse\"));\n+    assert_overflow(Command::new(&me).arg(\"child-frame\"));\n }\n \n #[allow(unconditional_recursion)]\n@@ -55,6 +55,23 @@ fn recurse(array: &MaybeUninit<[u64; 1024]>) {\n     recurse(&local);\n }\n \n+#[inline(never)]\n+fn overflow_recurse() {\n+    recurse(&MaybeUninit::uninit());\n+}\n+\n+fn overflow_frame() {\n+    // By using a 1MiB stack frame with only 512KiB stack, we'll jump over any\n+    // guard page, even with 64K pages -- but stack probes should catch it.\n+    const STACK_SIZE: usize = 512 * 1024;\n+    thread::Builder::new().stack_size(STACK_SIZE).spawn(|| {\n+        let local: MaybeUninit<[u8; 2 * STACK_SIZE]> = MaybeUninit::uninit();\n+        unsafe {\n+            black_box(local.as_ptr() as u64);\n+        }\n+    }).unwrap().join().unwrap();\n+}\n+\n fn assert_overflow(cmd: &mut Command) {\n     let output = cmd.output().unwrap();\n     assert!(!output.status.success());"}]}