{"sha": "698fcd38fa9548e64a2092ff48c9d15ceb57d40c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5OGZjZDM4ZmE5NTQ4ZTY0YTIwOTJmZjQ4YzlkMTVjZWI1N2Q0MGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-26T11:48:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-26T11:48:34Z"}, "message": "Auto merge of #68545 - estebank:verbose-bound-display, r=petrochenkov\n\nUse better bound names in `-Zverbose` mode\n\nr? @petrochenkov as per https://github.com/rust-lang/rust/pull/67951/files#r365524015", "tree": {"sha": "badd84a8b6eedc4e52f9454394bc9996aeb6b823", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/badd84a8b6eedc4e52f9454394bc9996aeb6b823"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/698fcd38fa9548e64a2092ff48c9d15ceb57d40c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/698fcd38fa9548e64a2092ff48c9d15ceb57d40c", "html_url": "https://github.com/rust-lang/rust/commit/698fcd38fa9548e64a2092ff48c9d15ceb57d40c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/698fcd38fa9548e64a2092ff48c9d15ceb57d40c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d8778d767f0dde6fe2bc9459f21ead8e124d8cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d8778d767f0dde6fe2bc9459f21ead8e124d8cb", "html_url": "https://github.com/rust-lang/rust/commit/3d8778d767f0dde6fe2bc9459f21ead8e124d8cb"}, {"sha": "3fb18104761fe5b6a8a70435ccff54c65400f360", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fb18104761fe5b6a8a70435ccff54c65400f360", "html_url": "https://github.com/rust-lang/rust/commit/3fb18104761fe5b6a8a70435ccff54c65400f360"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "58566bdcc35497a30ff8702033394f20bd6d3a57", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/698fcd38fa9548e64a2092ff48c9d15ceb57d40c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698fcd38fa9548e64a2092ff48c9d15ceb57d40c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=698fcd38fa9548e64a2092ff48c9d15ceb57d40c", "patch": "@@ -1778,8 +1778,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n \n         let mut err = match *sub {\n-            ty::ReEarlyBound(_)\n-            | ty::ReFree(ty::FreeRegion { bound_region: ty::BrNamed(..), .. }) => {\n+            ty::ReEarlyBound(ty::EarlyBoundRegion { name, .. })\n+            | ty::ReFree(ty::FreeRegion { bound_region: ty::BrNamed(_, name), .. }) => {\n                 // Does the required lifetime have a nice name we can print?\n                 let mut err = struct_span_err!(\n                     self.tcx.sess,\n@@ -1788,7 +1788,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     \"{} may not live long enough\",\n                     labeled_user_string\n                 );\n-                binding_suggestion(&mut err, type_param_span, bound_kind, sub);\n+                // Explicitely use the name instead of `sub`'s `Display` impl. The `Display` impl\n+                // for the bound is not suitable for suggestions when `-Zverbose` is set because it\n+                // uses `Debug` output, so we handle it specially here so that suggestions are\n+                // always correct.\n+                binding_suggestion(&mut err, type_param_span, bound_kind, name);\n                 err\n             }\n "}, {"sha": "b705ad9009a29334c68a1ba7a9255fbc228cdf4b", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/698fcd38fa9548e64a2092ff48c9d15ceb57d40c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/698fcd38fa9548e64a2092ff48c9d15ceb57d40c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=698fcd38fa9548e64a2092ff48c9d15ceb57d40c", "patch": "@@ -45,7 +45,7 @@ LL | |         require(value);\n LL | |     });\n    | |_____^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n+   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n error: aborting due to previous error\n "}, {"sha": "053aef951f2644e2452fc13e464a9e0626dd1371", "filename": "src/test/ui/nll/ty-outlives/impl-trait-outlives.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/698fcd38fa9548e64a2092ff48c9d15ceb57d40c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/698fcd38fa9548e64a2092ff48c9d15ceb57d40c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr?ref=698fcd38fa9548e64a2092ff48c9d15ceb57d40c", "patch": "@@ -4,15 +4,15 @@ error[E0309]: the parameter type `T` may not live long enough\n LL | fn no_region<'a, T>(x: Box<T>) -> impl Debug + 'a\n    |                                   ^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n+   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/impl-trait-outlives.rs:22:42\n    |\n LL | fn wrong_region<'a, 'b, T>(x: Box<T>) -> impl Debug + 'a\n    |                                          ^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n+   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n error: aborting due to 2 previous errors\n "}, {"sha": "84365465eda8634bcdfdf8dc56cc62caf7eb415c", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/698fcd38fa9548e64a2092ff48c9d15ceb57d40c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/698fcd38fa9548e64a2092ff48c9d15ceb57d40c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=698fcd38fa9548e64a2092ff48c9d15ceb57d40c", "patch": "@@ -31,7 +31,7 @@ error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not liv\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as std::iter::Iterator>::Item: ReEarlyBound(0, 'a)`...\n+   = help: consider adding an explicit lifetime bound `<T as std::iter::Iterator>::Item: 'a`...\n \n note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:34:23\n@@ -92,7 +92,7 @@ error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not liv\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as std::iter::Iterator>::Item: ReEarlyBound(0, 'a)`...\n+   = help: consider adding an explicit lifetime bound `<T as std::iter::Iterator>::Item: 'a`...\n \n note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:52:23"}, {"sha": "b0338de9333b460fe46477a2ea95ae5aff06e2a2", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/698fcd38fa9548e64a2092ff48c9d15ceb57d40c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/698fcd38fa9548e64a2092ff48c9d15ceb57d40c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.stderr?ref=698fcd38fa9548e64a2092ff48c9d15ceb57d40c", "patch": "@@ -4,15 +4,15 @@ error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not liv\n LL |     Box::new(x.next())\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as std::iter::Iterator>::Item: ReEarlyBound(0, 'a)`...\n+   = help: consider adding an explicit lifetime bound `<T as std::iter::Iterator>::Item: 'a`...\n \n error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n   --> $DIR/projection-no-regions-fn.rs:28:5\n    |\n LL |     Box::new(x.next())\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as std::iter::Iterator>::Item: ReEarlyBound(0, 'a)`...\n+   = help: consider adding an explicit lifetime bound `<T as std::iter::Iterator>::Item: 'a`...\n \n error: aborting due to 2 previous errors\n "}, {"sha": "118a849f98416361bf514bf376be3f5e423c4abf", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/698fcd38fa9548e64a2092ff48c9d15ceb57d40c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/698fcd38fa9548e64a2092ff48c9d15ceb57d40c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=698fcd38fa9548e64a2092ff48c9d15ceb57d40c", "patch": "@@ -33,7 +33,7 @@ error[E0309]: the parameter type `T` may not live long enough\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:15 ~ projection_one_region_closure[317d]::no_relationships_late[0]), BrNamed(DefId(0:16 ~ projection_one_region_closure[317d]::no_relationships_late[0]::'a[0]), 'a))`...\n+   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n error: lifetime may not live long enough\n   --> $DIR/projection-one-region-closure.rs:45:39\n@@ -82,7 +82,7 @@ error[E0309]: the parameter type `T` may not live long enough\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n+   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n error: lifetime may not live long enough\n   --> $DIR/projection-one-region-closure.rs:56:39"}, {"sha": "ff402f89ae861fb75639d8a0c3bc451c8d3f69b8", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/698fcd38fa9548e64a2092ff48c9d15ceb57d40c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/698fcd38fa9548e64a2092ff48c9d15ceb57d40c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=698fcd38fa9548e64a2092ff48c9d15ceb57d40c", "patch": "@@ -32,7 +32,7 @@ error[E0309]: the associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r, '_#6r>>::AssocType: ReFree(DefId(0:17 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(DefId(0:18 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]::'a[0]), 'a))`...\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r, '_#6r>>::AssocType: 'a`...\n \n note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n@@ -67,7 +67,7 @@ error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: ReEarlyBound(0, 'a)`...\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: 'a`...\n \n note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:61:29"}, {"sha": "9b08a1074967383903657dbdb42163501cb0bb1c", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/698fcd38fa9548e64a2092ff48c9d15ceb57d40c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/698fcd38fa9548e64a2092ff48c9d15ceb57d40c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=698fcd38fa9548e64a2092ff48c9d15ceb57d40c", "patch": "@@ -53,7 +53,7 @@ error[E0309]: the parameter type `T` may not live long enough\n LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                        ^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:12 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]), BrNamed(DefId(0:13 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]::'a[0]), 'a))`...\n+   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n error: aborting due to previous error\n "}, {"sha": "3cd1f4358710f51e7a1e94c2d8fc2024bc932276", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/698fcd38fa9548e64a2092ff48c9d15ceb57d40c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/698fcd38fa9548e64a2092ff48c9d15ceb57d40c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=698fcd38fa9548e64a2092ff48c9d15ceb57d40c", "patch": "@@ -31,15 +31,15 @@ error[E0309]: the parameter type `T` may not live long enough\n LL |     with_signature(x, |y| y)\n    |                       ^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n+   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:41:5\n    |\n LL |     x\n    |     ^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n+   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4740ed645f1da2131738079746aab1835e6cc9b3", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/698fcd38fa9548e64a2092ff48c9d15ceb57d40c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/698fcd38fa9548e64a2092ff48c9d15ceb57d40c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=698fcd38fa9548e64a2092ff48c9d15ceb57d40c", "patch": "@@ -46,7 +46,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:11 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]), BrNamed(DefId(0:12 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]::'a[0]), 'a))`...\n+   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:43:26\n@@ -126,7 +126,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:19 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]), BrNamed(DefId(0:20 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]::'a[0]), 'a))`...\n+   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:77:26"}]}