{"sha": "9342d1e73e28d496d88f24beaf5b629981fdb09d", "node_id": "C_kwDOAAsO6NoAKDkzNDJkMWU3M2UyOGQ0OTZkODhmMjRiZWFmNWI2Mjk5ODFmZGIwOWQ", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-12-01T18:34:59Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-12-13T01:38:38Z"}, "message": "Allow unsafe through inline const\n\nThis is handled similar to closures", "tree": {"sha": "5ddae41aede447bbb8900d738c6ce277a0501c26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ddae41aede447bbb8900d738c6ce277a0501c26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9342d1e73e28d496d88f24beaf5b629981fdb09d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9342d1e73e28d496d88f24beaf5b629981fdb09d", "html_url": "https://github.com/rust-lang/rust/commit/9342d1e73e28d496d88f24beaf5b629981fdb09d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9342d1e73e28d496d88f24beaf5b629981fdb09d/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37d7de337903a558dbeb1e82c844fe915ab8ff25", "url": "https://api.github.com/repos/rust-lang/rust/commits/37d7de337903a558dbeb1e82c844fe915ab8ff25", "html_url": "https://github.com/rust-lang/rust/commit/37d7de337903a558dbeb1e82c844fe915ab8ff25"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "782abd7804d5d0f66ed7175a141d42fe41bb6e2d", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9342d1e73e28d496d88f24beaf5b629981fdb09d/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9342d1e73e28d496d88f24beaf5b629981fdb09d/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=9342d1e73e28d496d88f24beaf5b629981fdb09d", "patch": "@@ -1,6 +1,7 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::hir_id::HirId;\n use rustc_hir::intravisit;\n@@ -134,6 +135,28 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n         self.super_rvalue(rvalue, location);\n     }\n \n+    fn visit_operand(&mut self, op: &Operand<'tcx>, location: Location) {\n+        if let Operand::Constant(constant) = op {\n+            let maybe_uneval = match constant.literal {\n+                ConstantKind::Val(..) | ConstantKind::Ty(_) => None,\n+                ConstantKind::Unevaluated(uv, _) => Some(uv),\n+            };\n+\n+            if let Some(uv) = maybe_uneval {\n+                if uv.promoted.is_none() {\n+                    let def_id = uv.def.def_id_for_type_of();\n+                    if self.tcx.def_kind(def_id) == DefKind::InlineConst {\n+                        let local_def_id = def_id.expect_local();\n+                        let UnsafetyCheckResult { violations, used_unsafe_blocks, .. } =\n+                            self.tcx.unsafety_check_result(local_def_id);\n+                        self.register_violations(violations, used_unsafe_blocks.iter().copied());\n+                    }\n+                }\n+            }\n+        }\n+        self.super_operand(op, location);\n+    }\n+\n     fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, _location: Location) {\n         // On types with `scalar_valid_range`, prevent\n         // * `&mut x.field`\n@@ -410,6 +433,12 @@ impl<'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'_, 'tcx> {\n         intravisit::walk_block(self, block);\n     }\n \n+    fn visit_anon_const(&mut self, c: &'tcx hir::AnonConst) {\n+        if matches!(self.tcx.def_kind(c.def_id), DefKind::InlineConst) {\n+            self.visit_body(self.tcx.hir().body(c.body))\n+        }\n+    }\n+\n     fn visit_fn(\n         &mut self,\n         fk: intravisit::FnKind<'tcx>,\n@@ -484,7 +513,7 @@ fn unsafety_check_result<'tcx>(\n     let mut checker = UnsafetyChecker::new(body, def.did, tcx, param_env);\n     checker.visit_body(&body);\n \n-    let unused_unsafes = (!tcx.is_closure(def.did.to_def_id()))\n+    let unused_unsafes = (!tcx.is_typeck_child(def.did.to_def_id()))\n         .then(|| check_unused_unsafe(tcx, def.did, &checker.used_unsafe_blocks));\n \n     tcx.arena.alloc(UnsafetyCheckResult {\n@@ -516,8 +545,8 @@ fn report_unused_unsafe(tcx: TyCtxt<'_>, kind: UnusedUnsafe, id: HirId) {\n pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     debug!(\"check_unsafety({:?})\", def_id);\n \n-    // closures are handled by their parent fn.\n-    if tcx.is_closure(def_id.to_def_id()) {\n+    // closures and inline consts are handled by their parent fn.\n+    if tcx.is_typeck_child(def_id.to_def_id()) {\n         return;\n     }\n "}]}