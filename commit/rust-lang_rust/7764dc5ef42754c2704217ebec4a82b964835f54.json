{"sha": "7764dc5ef42754c2704217ebec4a82b964835f54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NjRkYzVlZjQyNzU0YzI3MDQyMTdlYmVjNGE4MmI5NjQ4MzVmNTQ=", "commit": {"author": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2016-06-16T08:36:11Z"}, "committer": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2016-06-16T08:36:11Z"}, "message": "Add slice_iter_nth lint", "tree": {"sha": "b320f6dc0ab8c6d026501f237d8578cd806c4c0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b320f6dc0ab8c6d026501f237d8578cd806c4c0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7764dc5ef42754c2704217ebec4a82b964835f54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7764dc5ef42754c2704217ebec4a82b964835f54", "html_url": "https://github.com/rust-lang/rust/commit/7764dc5ef42754c2704217ebec4a82b964835f54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7764dc5ef42754c2704217ebec4a82b964835f54/comments", "author": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "555e4555b15b26122ad084ad5983b565200c5992", "url": "https://api.github.com/repos/rust-lang/rust/commits/555e4555b15b26122ad084ad5983b565200c5992", "html_url": "https://github.com/rust-lang/rust/commit/555e4555b15b26122ad084ad5983b565200c5992"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "30702057bdbc56b87825740aef07ae4c1312a3ec", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7764dc5ef42754c2704217ebec4a82b964835f54/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/7764dc5ef42754c2704217ebec4a82b964835f54/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=7764dc5ef42754c2704217ebec4a82b964835f54", "patch": "@@ -234,6 +234,7 @@ All notable changes to this project will be documented in this file.\n [`single_char_pattern`]: https://github.com/Manishearth/rust-clippy/wiki#single_char_pattern\n [`single_match`]: https://github.com/Manishearth/rust-clippy/wiki#single_match\n [`single_match_else`]: https://github.com/Manishearth/rust-clippy/wiki#single_match_else\n+[`slice_iter_nth`]: https://github.com/Manishearth/rust-clippy/wiki#slice_iter_nth\n [`str_to_string`]: https://github.com/Manishearth/rust-clippy/wiki#str_to_string\n [`string_add`]: https://github.com/Manishearth/rust-clippy/wiki#string_add\n [`string_add_assign`]: https://github.com/Manishearth/rust-clippy/wiki#string_add_assign"}, {"sha": "5707b0ee70cfed4805eeac4f8eb02222b83cf096", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7764dc5ef42754c2704217ebec4a82b964835f54/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/7764dc5ef42754c2704217ebec4a82b964835f54/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=7764dc5ef42754c2704217ebec4a82b964835f54", "patch": "@@ -17,7 +17,7 @@ Table of contents:\n \n ## Lints\n \n-There are 152 lints included in this crate:\n+There are 153 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -140,6 +140,7 @@ name\n [single_char_pattern](https://github.com/Manishearth/rust-clippy/wiki#single_char_pattern)                           | warn    | using a single-character str where a char could be used, e.g. `_.split(\"x\")`\n [single_match](https://github.com/Manishearth/rust-clippy/wiki#single_match)                                         | warn    | a match statement with a single nontrivial arm (i.e, where the other arm is `_ => {}`) is used; recommends `if let` instead\n [single_match_else](https://github.com/Manishearth/rust-clippy/wiki#single_match_else)                               | allow   | a match statement with a two arms where the second arm's pattern is a wildcard; recommends `if let` instead\n+[slice_iter_nth](https://github.com/Manishearth/rust-clippy/wiki#slice_iter_nth)                                     | warn    | using `.iter().nth()` on a slice\n [string_add](https://github.com/Manishearth/rust-clippy/wiki#string_add)                                             | allow   | using `x + ..` where x is a `String`; suggests using `push_str()` instead\n [string_add_assign](https://github.com/Manishearth/rust-clippy/wiki#string_add_assign)                               | allow   | using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\n [string_lit_as_bytes](https://github.com/Manishearth/rust-clippy/wiki#string_lit_as_bytes)                           | warn    | calling `as_bytes` on a string literal; suggests using a byte string literal instead"}, {"sha": "072326b1a087e02f92e3879b8c42e75ffa6080d7", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7764dc5ef42754c2704217ebec4a82b964835f54/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7764dc5ef42754c2704217ebec4a82b964835f54/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=7764dc5ef42754c2704217ebec4a82b964835f54", "patch": "@@ -357,6 +357,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         methods::SEARCH_IS_SOME,\n         methods::SHOULD_IMPLEMENT_TRAIT,\n         methods::SINGLE_CHAR_PATTERN,\n+        methods::SLICE_ITER_NTH,\n         methods::TEMPORARY_CSTRING_AS_PTR,\n         methods::WRONG_SELF_CONVENTION,\n         minmax::MIN_MAX,"}, {"sha": "b7d98b5fdd643cd2acdcd0d7bfe8d907f301c35e", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7764dc5ef42754c2704217ebec4a82b964835f54/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7764dc5ef42754c2704217ebec4a82b964835f54/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=7764dc5ef42754c2704217ebec4a82b964835f54", "patch": "@@ -312,6 +312,28 @@ declare_lint! {\n     \"getting the inner pointer of a temporary `CString`\"\n }\n \n+/// **What it does:** This lint checks for use of `.iter().nth()` on a slice.\n+///\n+/// **Why is this bad?** `.get()` is more efficient and more readable.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let some_slice = &[0, 1, 2, 3][..];\n+/// let third_elem = some_slice.iter().nth(3);\n+/// ```\n+/// The correct use would be:\n+/// ```rust\n+/// let some_slice = &[0, 1, 2, 3][..];\n+/// let third_elem = some_slice.get(3);\n+/// ```\n+declare_lint! {\n+    pub SLICE_ITER_NTH,\n+    Warn,\n+    \"using `.iter().nth()` on a slice\"\n+}\n+\n impl LintPass for MethodsPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(EXTEND_FROM_SLICE,\n@@ -330,7 +352,8 @@ impl LintPass for MethodsPass {\n                     NEW_RET_NO_SELF,\n                     SINGLE_CHAR_PATTERN,\n                     SEARCH_IS_SOME,\n-                    TEMPORARY_CSTRING_AS_PTR)\n+                    TEMPORARY_CSTRING_AS_PTR,\n+                    SLICE_ITER_NTH)\n     }\n }\n \n@@ -363,6 +386,8 @@ impl LateLintPass for MethodsPass {\n                     lint_extend(cx, expr, arglists[0]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"unwrap\", \"as_ptr\"]) {\n                     lint_cstring_as_ptr(cx, expr, &arglists[0][0], &arglists[1][0]);\n+                } else if let Some(arglists) = method_chain_args(expr, &[\"iter\", \"nth\"]) {\n+                    lint_slice_iter_nth(cx, expr, arglists[0]);\n                 }\n \n                 lint_or_fun_call(cx, expr, &name.node.as_str(), args);\n@@ -616,6 +641,18 @@ fn lint_cstring_as_ptr(cx: &LateContext, expr: &hir::Expr, new: &hir::Expr, unwr\n     }}\n }\n \n+#[allow(ptr_arg)]\n+// Type of MethodArgs is potentially a Vec\n+fn lint_slice_iter_nth(cx: &LateContext, expr: &hir::Expr, iter_args: &MethodArgs){\n+    // lint if the caller of `.iter().nth` is a `slice`\n+    if let Some(_) = derefs_to_slice(cx, &iter_args[0], &cx.tcx.expr_ty(&iter_args[0])) {\n+        span_lint(cx,\n+                  SLICE_ITER_NTH,\n+                  expr.span,\n+                  \"called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\");\n+    }\n+}\n+\n fn derefs_to_slice(cx: &LateContext, expr: &hir::Expr, ty: &ty::Ty) -> Option<(Span, &'static str)> {\n     fn may_slice(cx: &LateContext, ty: &ty::Ty) -> bool {\n         match ty.sty {"}]}