{"sha": "c311b30cacf91e8bfc4b6fb586dc3ec843140e26", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMTFiMzBjYWNmOTFlOGJmYzRiNmZiNTg2ZGMzZWM4NDMxNDBlMjY=", "commit": {"author": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-05-26T12:17:20Z"}, "committer": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-05-30T23:24:38Z"}, "message": "Add type to represent collection of lines in files\n\nThis commit adds a type to represent lines in files, and adds it to the\n`Config` struct. It will be used for restricting formatting to specific\nlines.\n\nRefs #434", "tree": {"sha": "83444dba397623003492e8c62b804fdd2bf22118", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83444dba397623003492e8c62b804fdd2bf22118"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c311b30cacf91e8bfc4b6fb586dc3ec843140e26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c311b30cacf91e8bfc4b6fb586dc3ec843140e26", "html_url": "https://github.com/rust-lang/rust/commit/c311b30cacf91e8bfc4b6fb586dc3ec843140e26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c311b30cacf91e8bfc4b6fb586dc3ec843140e26/comments", "author": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed27b4799a34607627ea9b2e3c73a693820e4bbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed27b4799a34607627ea9b2e3c73a693820e4bbf", "html_url": "https://github.com/rust-lang/rust/commit/ed27b4799a34607627ea9b2e3c73a693820e4bbf"}], "stats": {"total": 239, "additions": 239, "deletions": 0}, "files": [{"sha": "fc8070979d6f63488ed42f7341f769d3482bdcd9", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c311b30cacf91e8bfc4b6fb586dc3ec843140e26/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c311b30cacf91e8bfc4b6fb586dc3ec843140e26/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c311b30cacf91e8bfc4b6fb586dc3ec843140e26", "patch": "@@ -7,6 +7,7 @@ dependencies = [\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.4.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"multimap 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.1.71 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strings 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -80,6 +81,11 @@ dependencies = [\n  \"libc 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"multimap\"\n+version = \"0.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"regex\"\n version = \"0.1.71\""}, {"sha": "9d8ad68ed8aba3f40cbddd746b9485f2080bdb3b", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c311b30cacf91e8bfc4b6fb586dc3ec843140e26/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c311b30cacf91e8bfc4b6fb586dc3ec843140e26/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=c311b30cacf91e8bfc4b6fb586dc3ec843140e26", "patch": "@@ -26,3 +26,4 @@ log = \"0.3\"\n env_logger = \"0.3\"\n getopts = \"0.2\"\n itertools = \"0.4.15\"\n+multimap = \"0.3\""}, {"sha": "ecb638514177df82eb6b43292d256d0782abe66c", "filename": "src/config.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c311b30cacf91e8bfc4b6fb586dc3ec843140e26/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c311b30cacf91e8bfc4b6fb586dc3ec843140e26/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=c311b30cacf91e8bfc4b6fb586dc3ec843140e26", "patch": "@@ -10,6 +10,7 @@\n \n extern crate toml;\n \n+use file_lines::FileLines;\n use lists::{SeparatorTactic, ListTactic};\n use std::io::Write;\n \n@@ -200,6 +201,12 @@ impl ConfigType for String {\n     }\n }\n \n+impl ConfigType for FileLines {\n+    fn doc_hint() -> String {\n+        String::from(\"<json>\")\n+    }\n+}\n+\n pub struct ConfigHelpItem {\n     option_name: &'static str,\n     doc_string: &'static str,\n@@ -327,6 +334,8 @@ macro_rules! create_config {\n create_config! {\n     verbose: bool, false, \"Use verbose output\";\n     skip_children: bool, false, \"Don't reformat out of line modules\";\n+    file_lines: FileLines, FileLines::all(),\n+        \"Lines to format\";\n     max_width: usize, 100, \"Maximum width of each line\";\n     ideal_width: usize, 80, \"Ideal width of each line\";\n     tab_spaces: usize, 4, \"Number of spaces per tab\";"}, {"sha": "e437202360d47103f22d8cccdff5612930252e71", "filename": "src/file_lines.rs", "status": "added", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/c311b30cacf91e8bfc4b6fb586dc3ec843140e26/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c311b30cacf91e8bfc4b6fb586dc3ec843140e26/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=c311b30cacf91e8bfc4b6fb586dc3ec843140e26", "patch": "@@ -0,0 +1,221 @@\n+//! This module contains types and functions to support formatting specific line ranges.\n+use std::{cmp, iter, str};\n+\n+use itertools::Itertools;\n+use multimap::MultiMap;\n+use rustc_serialize::{self, json};\n+\n+use codemap::LineRange;\n+\n+/// A range that is inclusive of both ends.\n+#[derive(Clone, Copy, Debug, Eq, PartialEq, RustcDecodable)]\n+struct Range {\n+    pub lo: usize,\n+    pub hi: usize,\n+}\n+\n+impl<'a> From<&'a LineRange> for Range {\n+    fn from(range: &'a LineRange) -> Range {\n+        Range::new(range.lo, range.hi)\n+    }\n+}\n+\n+impl Range {\n+    fn new(lo: usize, hi: usize) -> Range {\n+        Range { lo: lo, hi: hi }\n+    }\n+\n+    fn is_empty(self) -> bool {\n+        self.lo > self.hi\n+    }\n+\n+    fn contains(self, other: Range) -> bool {\n+        if other.is_empty() {\n+            true\n+        } else {\n+            !self.is_empty() && self.lo <= other.lo && self.hi >= other.hi\n+        }\n+    }\n+\n+    fn intersects(self, other: Range) -> bool {\n+        if self.is_empty() || other.is_empty() {\n+            false\n+        } else {\n+            (self.lo <= other.hi && other.hi <= self.hi) ||\n+            (other.lo <= self.hi && self.hi <= other.hi)\n+        }\n+    }\n+\n+    fn adjacent_to(self, other: Range) -> bool {\n+        if self.is_empty() || other.is_empty() {\n+            false\n+        } else {\n+            self.hi + 1 == other.lo || other.hi + 1 == self.lo\n+        }\n+    }\n+\n+    /// Returns a new `Range` with lines from `self` and `other` if they were adjacent or\n+    /// intersect; returns `None` otherwise.\n+    fn merge(self, other: Range) -> Option<Range> {\n+        if self.adjacent_to(other) || self.intersects(other) {\n+            Some(Range::new(cmp::min(self.lo, other.lo), cmp::max(self.hi, other.hi)))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+/// A set of lines in files.\n+///\n+/// It is represented as a multimap keyed on file names, with values a collection of\n+/// non-overlapping ranges sorted by their start point. An inner `None` is interpreted to mean all\n+/// lines in all files.\n+#[derive(Clone, Debug, Default)]\n+pub struct FileLines(Option<MultiMap<String, Range>>);\n+\n+/// Normalizes the ranges so that the invariants for `FileLines` hold: ranges are non-overlapping,\n+/// and ordered by their start point.\n+fn normalize_ranges(map: &mut MultiMap<String, Range>) {\n+    for (_, ranges) in map.iter_all_mut() {\n+        ranges.sort_by_key(|x| x.lo);\n+        let merged = ranges.drain(..).coalesce(|x, y| x.merge(y).ok_or((x, y))).collect();\n+        *ranges = merged;\n+    }\n+}\n+\n+impl FileLines {\n+    /// Creates a `FileLines` that contains all lines in all files.\n+    pub fn all() -> FileLines {\n+        FileLines(None)\n+    }\n+\n+    /// Creates a `FileLines` from a `MultiMap`, ensuring that the invariants hold.\n+    fn from_multimap(map: MultiMap<String, Range>) -> FileLines {\n+        let mut map = map;\n+        normalize_ranges(&mut map);\n+        FileLines(Some(map))\n+    }\n+\n+    /// Returns an iterator over the files contained in `self`.\n+    pub fn files(&self) -> Files {\n+        Files(self.0.as_ref().map(MultiMap::keys))\n+    }\n+\n+    /// Returns true if `range` is fully contained in `self`.\n+    pub fn contains(&self, range: &LineRange) -> bool {\n+        let map = match self.0 {\n+            // `None` means \"all lines in all files\".\n+            None => return true,\n+            Some(ref map) => map,\n+        };\n+\n+        match map.get_vec(range.file_name()) {\n+            None => false,\n+            Some(ranges) => ranges.iter().any(|r| r.contains(Range::from(range))),\n+        }\n+    }\n+\n+    /// Returns true if any lines in `range` are in `self`.\n+    pub fn intersects(&self, range: &LineRange) -> bool {\n+        let map = match self.0 {\n+            // `None` means \"all lines in all files\".\n+            None => return true,\n+            Some(ref map) => map,\n+        };\n+\n+        match map.get_vec(range.file_name()) {\n+            None => false,\n+            Some(ranges) => ranges.iter().any(|r| r.intersects(Range::from(range))),\n+        }\n+    }\n+}\n+\n+/// FileLines files iterator.\n+pub struct Files<'a>(Option<::std::collections::hash_map::Keys<'a, String, Vec<Range>>>);\n+\n+impl<'a> iter::Iterator for Files<'a> {\n+    type Item = &'a String;\n+\n+    fn next(&mut self) -> Option<&'a String> {\n+        self.0.as_mut().and_then(Iterator::next)\n+    }\n+}\n+\n+// This impl is needed for `Config::override_value` to work for use in tests.\n+impl str::FromStr for FileLines {\n+    type Err = String;\n+\n+    fn from_str(s: &str) -> Result<FileLines, String> {\n+        let v: Vec<JsonSpan> = try!(json::decode(s).map_err(|e| e.to_string()));\n+        let m = v.into_iter().map(JsonSpan::into_tuple).collect();\n+        Ok(FileLines::from_multimap(m))\n+    }\n+}\n+\n+// For JSON decoding.\n+#[derive(Clone, Debug, RustcDecodable)]\n+struct JsonSpan {\n+    file: String,\n+    range: (usize, usize),\n+}\n+\n+impl JsonSpan {\n+    // To allow `collect()`ing into a `MultiMap`.\n+    fn into_tuple(self) -> (String, Range) {\n+        let (lo, hi) = self.range;\n+        (self.file, Range::new(lo, hi))\n+    }\n+}\n+\n+// This impl is needed for inclusion in the `Config` struct. We don't have a toml representation\n+// for `FileLines`, so it will just panic instead.\n+impl rustc_serialize::Decodable for FileLines {\n+    fn decode<D: rustc_serialize::Decoder>(_: &mut D) -> Result<Self, D::Error> {\n+        unimplemented!();\n+    }\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use super::Range;\n+\n+    #[test]\n+    fn test_range_intersects() {\n+        assert!(Range::new(1, 2).intersects(Range::new(1, 1)));\n+        assert!(Range::new(1, 2).intersects(Range::new(2, 2)));\n+        assert!(!Range::new(1, 2).intersects(Range::new(0, 0)));\n+        assert!(!Range::new(1, 2).intersects(Range::new(3, 10)));\n+        assert!(!Range::new(1, 3).intersects(Range::new(5, 5)));\n+    }\n+\n+    #[test]\n+    fn test_range_adjacent_to() {\n+        assert!(!Range::new(1, 2).adjacent_to(Range::new(1, 1)));\n+        assert!(!Range::new(1, 2).adjacent_to(Range::new(2, 2)));\n+        assert!(Range::new(1, 2).adjacent_to(Range::new(0, 0)));\n+        assert!(Range::new(1, 2).adjacent_to(Range::new(3, 10)));\n+        assert!(!Range::new(1, 3).adjacent_to(Range::new(5, 5)));\n+    }\n+\n+    #[test]\n+    fn test_range_contains() {\n+        assert!(Range::new(1, 2).contains(Range::new(1, 1)));\n+        assert!(Range::new(1, 2).contains(Range::new(2, 2)));\n+        assert!(!Range::new(1, 2).contains(Range::new(0, 0)));\n+        assert!(!Range::new(1, 2).contains(Range::new(3, 10)));\n+    }\n+\n+    #[test]\n+    fn test_range_merge() {\n+        assert_eq!(None, Range::new(1, 3).merge(Range::new(5, 5)));\n+        assert_eq!(None, Range::new(4, 7).merge(Range::new(0, 1)));\n+        assert_eq!(Some(Range::new(3, 7)),\n+                   Range::new(3, 5).merge(Range::new(4, 7)));\n+        assert_eq!(Some(Range::new(3, 7)),\n+                   Range::new(3, 5).merge(Range::new(5, 7)));\n+        assert_eq!(Some(Range::new(3, 7)),\n+                   Range::new(3, 5).merge(Range::new(6, 7)));\n+        assert_eq!(Some(Range::new(3, 7)),\n+                   Range::new(3, 7).merge(Range::new(4, 5)));\n+    }\n+}"}, {"sha": "322eed374de8b50a3f5411cf44a0c837568b2679", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c311b30cacf91e8bfc4b6fb586dc3ec843140e26/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c311b30cacf91e8bfc4b6fb586dc3ec843140e26/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c311b30cacf91e8bfc4b6fb586dc3ec843140e26", "patch": "@@ -25,6 +25,7 @@ extern crate regex;\n extern crate diff;\n extern crate term;\n extern crate itertools;\n+extern crate multimap;\n \n use syntax::ast;\n use syntax::codemap::{mk_sp, CodeMap, Span};\n@@ -54,6 +55,7 @@ mod utils;\n pub mod config;\n pub mod codemap;\n pub mod filemap;\n+pub mod file_lines;\n pub mod visitor;\n mod checkstyle;\n mod items;"}]}