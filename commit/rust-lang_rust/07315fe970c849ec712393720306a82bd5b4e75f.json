{"sha": "07315fe970c849ec712393720306a82bd5b4e75f", "node_id": "C_kwDOAAsO6NoAKDA3MzE1ZmU5NzBjODQ5ZWM3MTIzOTM3MjAzMDZhODJiZDViNGU3NWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-07T19:10:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-07T19:10:25Z"}, "message": "Rollup merge of #100206 - RalfJung:miri-terminfo, r=thomcc\n\ntest: skip terminfo parsing in Miri\n\nTerminfo parsing takes a significant amount of time in Miri, making libtest startup very slow. To work around that Miri in fact unsets the `TERM` variable. However, this means we don't get colors in `cargo miri test`.\n\nSo I propose we add some logic in libtest that skips parsing terminfo files under Miri, and just uses the regular basic coloring commands (taken from the `colored` crate).\n\nAs far as I can see, these two commands are all that libtest ever needs from terminfo, so Miri doesn't even lose any functionality through this. If you want I can entirely remove the terminfo parsing code and just use these commands instead.\n\nCc https://github.com/rust-lang/miri/issues/2292 `@saethlin`", "tree": {"sha": "5e63b490ef7894fd0fe714f1b9b14bb3a74879a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e63b490ef7894fd0fe714f1b9b14bb3a74879a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07315fe970c849ec712393720306a82bd5b4e75f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi8A4hCRBK7hj4Ov3rIwAA4/gIAGmFf2GCLgQUuhQTDRQ/JSL/\neCC5bh+y9CHpmFRwLAdaRPeX3NO1sJYTknFFF6aGGwPS/2PT1HSLJ4Vgg+nQdWjj\nZ1pOXrPEU0qoXhachqMpN7vav7ZBzzz6fNaqT2VtAKCNXCDkmWVSu0XiBY9xvAnZ\nXJAhSTA96nQCTphO2M1OYxw07I8xAgeJ+MEaFQV+aVpOsrqgkPfrdjElxzmUwDa5\n/pe6Dw+/kk0kciZ6aB2Ktw7e44F9nacxutk77r5hZyA3tGAszH4DWCbgWemN087U\nco2dHFWl5aSHTgLsPSmfovuyEsAA9oHbdcLtng3wOZW5d9Krj6uLkq7gJBoiiOc=\n=yBLM\n-----END PGP SIGNATURE-----\n", "payload": "tree 5e63b490ef7894fd0fe714f1b9b14bb3a74879a1\nparent 790377a0b9022d22ebd16ccc83750cc30c72a9e8\nparent 5076c902a4b8f328d6a3ecf83fc86a1d0be09de4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659899425 +0200\ncommitter GitHub <noreply@github.com> 1659899425 +0200\n\nRollup merge of #100206 - RalfJung:miri-terminfo, r=thomcc\n\ntest: skip terminfo parsing in Miri\n\nTerminfo parsing takes a significant amount of time in Miri, making libtest startup very slow. To work around that Miri in fact unsets the `TERM` variable. However, this means we don't get colors in `cargo miri test`.\n\nSo I propose we add some logic in libtest that skips parsing terminfo files under Miri, and just uses the regular basic coloring commands (taken from the `colored` crate).\n\nAs far as I can see, these two commands are all that libtest ever needs from terminfo, so Miri doesn't even lose any functionality through this. If you want I can entirely remove the terminfo parsing code and just use these commands instead.\n\nCc https://github.com/rust-lang/miri/issues/2292 `@saethlin`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07315fe970c849ec712393720306a82bd5b4e75f", "html_url": "https://github.com/rust-lang/rust/commit/07315fe970c849ec712393720306a82bd5b4e75f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07315fe970c849ec712393720306a82bd5b4e75f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "790377a0b9022d22ebd16ccc83750cc30c72a9e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/790377a0b9022d22ebd16ccc83750cc30c72a9e8", "html_url": "https://github.com/rust-lang/rust/commit/790377a0b9022d22ebd16ccc83750cc30c72a9e8"}, {"sha": "5076c902a4b8f328d6a3ecf83fc86a1d0be09de4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5076c902a4b8f328d6a3ecf83fc86a1d0be09de4", "html_url": "https://github.com/rust-lang/rust/commit/5076c902a4b8f328d6a3ecf83fc86a1d0be09de4"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "355859019714b5e17f86e3717ffae6d05fa022b1", "filename": "library/test/src/term/terminfo/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/07315fe970c849ec712393720306a82bd5b4e75f/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07315fe970c849ec712393720306a82bd5b4e75f/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fmod.rs?ref=07315fe970c849ec712393720306a82bd5b4e75f", "patch": "@@ -80,6 +80,17 @@ impl TermInfo {\n \n     /// Creates a TermInfo for the named terminal.\n     pub(crate) fn from_name(name: &str) -> Result<TermInfo, Error> {\n+        if cfg!(miri) {\n+            // Avoid all the work of parsing the terminfo (it's pretty slow under Miri), and just\n+            // assume that the standard color codes work (like e.g. the 'colored' crate).\n+            return Ok(TermInfo {\n+                names: Default::default(),\n+                bools: Default::default(),\n+                numbers: Default::default(),\n+                strings: Default::default(),\n+            });\n+        }\n+\n         get_dbpath_for_term(name)\n             .ok_or_else(|| {\n                 Error::IoError(io::Error::new(io::ErrorKind::NotFound, \"terminfo file not found\"))\n@@ -119,13 +130,22 @@ pub(crate) struct TerminfoTerminal<T> {\n impl<T: Write + Send> Terminal for TerminfoTerminal<T> {\n     fn fg(&mut self, color: color::Color) -> io::Result<bool> {\n         let color = self.dim_if_necessary(color);\n+        if cfg!(miri) && color < 8 {\n+            // The Miri logic for this only works for the most basic 8 colors, which we just assume\n+            // the terminal will support. (`num_colors` is always 0 in Miri, so higher colors will\n+            // just fail. But libtest doesn't use any higher colors anyway.)\n+            return write!(self.out, \"\\x1B[3{color}m\").and(Ok(true));\n+        }\n         if self.num_colors > color {\n             return self.apply_cap(\"setaf\", &[Param::Number(color as i32)]);\n         }\n         Ok(false)\n     }\n \n     fn reset(&mut self) -> io::Result<bool> {\n+        if cfg!(miri) {\n+            return write!(self.out, \"\\x1B[0m\").and(Ok(true));\n+        }\n         // are there any terminals that have color/attrs and not sgr0?\n         // Try falling back to sgr, then op\n         let cmd = match [\"sgr0\", \"sgr\", \"op\"].iter().find_map(|cap| self.ti.strings.get(*cap)) {"}]}