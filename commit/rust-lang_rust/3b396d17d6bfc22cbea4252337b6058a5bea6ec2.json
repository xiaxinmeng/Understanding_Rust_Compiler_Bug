{"sha": "3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMzk2ZDE3ZDZiZmMyMmNiZWE0MjUyMzM3YjYwNThhNWJlYTZlYzI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-04T01:55:19Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-04T01:56:49Z"}, "message": "Merge remote-tracking branch 'thestinger/old_map' into incoming\n\nConflicts:\n\tsrc/test/bench/core-map.rs", "tree": {"sha": "0fe0198f7877ccd9580c73191c37bf352e6889c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fe0198f7877ccd9580c73191c37bf352e6889c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "html_url": "https://github.com/rust-lang/rust/commit/3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04eb9b4eb0472aa89dce1ad53d33f5e52284b128", "url": "https://api.github.com/repos/rust-lang/rust/commits/04eb9b4eb0472aa89dce1ad53d33f5e52284b128", "html_url": "https://github.com/rust-lang/rust/commit/04eb9b4eb0472aa89dce1ad53d33f5e52284b128"}, {"sha": "4fd9264875c0e0ee450316e8fbf15977d8978a74", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fd9264875c0e0ee450316e8fbf15977d8978a74", "html_url": "https://github.com/rust-lang/rust/commit/4fd9264875c0e0ee450316e8fbf15977d8978a74"}], "stats": {"total": 1143, "additions": 515, "deletions": 628}, "files": [{"sha": "190314b2ec3a6f0a77a44c9c3629c36c53ce75be", "filename": "doc/rust.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -448,10 +448,10 @@ expression context, the final namespace qualifier is omitted.\n Two examples of paths with type arguments:\n \n ~~~~\n-# use std::map;\n+# use std::oldmap;\n # fn f() {\n # fn id<T:Copy>(t: T) -> T { t }\n-type t = map::HashMap<int,~str>;  // Type arguments used in a type expression\n+type t = oldmap::HashMap<int,~str>;  // Type arguments used in a type expression\n let x = id::<int>(10);           // Type arguments used in a call expression\n # }\n ~~~~"}, {"sha": "df2618c74e1a41b5ab36db350b4c8f0920e6f435", "filename": "doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -1791,7 +1791,7 @@ illegal to copy and pass by value.\n Generic `type`, `struct`, and `enum` declarations follow the same pattern:\n \n ~~~~\n-# use std::map::HashMap;\n+# use std::oldmap::HashMap;\n type Set<T> = HashMap<T, ()>;\n \n struct Stack<T> {"}, {"sha": "960bcf88eb7ef7fc3b2ff972f01ffbfa841a1472", "filename": "src/libcargo/cargo.rc", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibcargo%2Fcargo.rc", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibcargo%2Fcargo.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcargo%2Fcargo.rc?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -53,8 +53,8 @@ use core::io::WriterUtil;\n use core::result::{Ok, Err};\n use core::hashmap::linear::LinearMap;\n use std::getopts::{optflag, optopt, opt_present};\n-use std::map::HashMap;\n-use std::{map, json, tempfile, term, sort, getopts};\n+use std::oldmap::HashMap;\n+use std::{oldmap, json, tempfile, term, sort, getopts};\n use syntax::codemap::span;\n use syntax::diagnostic::span_handler;\n use syntax::diagnostic;\n@@ -110,9 +110,9 @@ pub struct Cargo {\n     libdir: Path,\n     workdir: Path,\n     sourcedir: Path,\n-    sources: map::HashMap<~str, @Source>,\n+    sources: oldmap::HashMap<~str, @Source>,\n     mut current_install: ~str,\n-    dep_cache: map::HashMap<~str, bool>,\n+    dep_cache: oldmap::HashMap<~str, bool>,\n     opts: Options\n }\n \n@@ -490,7 +490,7 @@ pub fn parse_source(name: ~str, j: &json::Json) -> @Source {\n }\n \n pub fn try_parse_sources(filename: &Path,\n-                         sources: map::HashMap<~str, @Source>) {\n+                         sources: oldmap::HashMap<~str, @Source>) {\n     if !os::path_exists(filename)  { return; }\n     let c = io::read_whole_file_str(filename);\n     match json::from_str(c.get()) {\n@@ -730,7 +730,7 @@ pub fn configure(opts: Options) -> Cargo {\n     need_dir(&c.libdir);\n     need_dir(&c.bindir);\n \n-    for sources.each_key |k| {\n+    for sources.each_key_ref |&k| {\n         let mut s = sources.get(k);\n         load_source_packages(&c, s);\n         sources.insert(k, s);\n@@ -748,7 +748,7 @@ pub fn configure(opts: Options) -> Cargo {\n }\n \n pub fn for_each_package(c: &Cargo, b: fn(s: @Source, p: &Package)) {\n-    for c.sources.each_value |v| {\n+    for c.sources.each_value_ref |&v| {\n         for v.packages.each |p| {\n             b(v, p);\n         }\n@@ -833,7 +833,7 @@ pub fn rustc_sysroot() -> ~str {\n     }\n }\n \n-pub fn install_source(c: &Cargo, path: &Path) {\n+pub fn install_source(c: &mut Cargo, path: &Path) {\n     debug!(\"source: %s\", path.to_str());\n     os::change_dir(path);\n \n@@ -872,7 +872,8 @@ pub fn install_source(c: &Cargo, path: &Path) {\n     }\n }\n \n-pub fn install_git(c: &Cargo, wd: &Path, url: ~str, reference: Option<~str>) {\n+pub fn install_git(c: &mut Cargo, wd: &Path, url: ~str,\n+                   reference: Option<~str>) {\n     run::program_output(~\"git\", ~[~\"clone\", url, wd.to_str()]);\n     if reference.is_some() {\n         let r = reference.get();\n@@ -883,7 +884,7 @@ pub fn install_git(c: &Cargo, wd: &Path, url: ~str, reference: Option<~str>) {\n     install_source(c, wd);\n }\n \n-pub fn install_curl(c: &Cargo, wd: &Path, url: ~str) {\n+pub fn install_curl(c: &mut Cargo, wd: &Path, url: ~str) {\n     let tarpath = wd.push(\"pkg.tar\");\n     let p = run::program_output(~\"curl\", ~[~\"-f\", ~\"-s\", ~\"-o\",\n                                          tarpath.to_str(), url]);\n@@ -896,14 +897,14 @@ pub fn install_curl(c: &Cargo, wd: &Path, url: ~str) {\n     install_source(c, wd);\n }\n \n-pub fn install_file(c: &Cargo, wd: &Path, path: &Path) {\n+pub fn install_file(c: &mut Cargo, wd: &Path, path: &Path) {\n     run::program_output(~\"tar\", ~[~\"-x\", ~\"--strip-components=1\",\n                                   ~\"-C\", wd.to_str(),\n                                   ~\"-f\", path.to_str()]);\n     install_source(c, wd);\n }\n \n-pub fn install_package(c: &Cargo, src: ~str, wd: &Path, pkg: Package) {\n+pub fn install_package(c: &mut Cargo, src: ~str, wd: &Path, pkg: Package) {\n     let url = copy pkg.url;\n     let method = match pkg.method {\n         ~\"git\" => ~\"git\",\n@@ -922,15 +923,15 @@ pub fn install_package(c: &Cargo, src: ~str, wd: &Path, pkg: Package) {\n }\n \n pub fn cargo_suggestion(c: &Cargo, fallback: fn()) {\n-    if c.sources.size() == 0u {\n+    if c.sources.is_empty() {\n         error(~\"no sources defined - you may wish to run \" +\n               ~\"`cargo init`\");\n         return;\n     }\n     fallback();\n }\n \n-pub fn install_uuid(c: &Cargo, wd: &Path, uuid: ~str) {\n+pub fn install_uuid(c: &mut Cargo, wd: &Path, uuid: ~str) {\n     let mut ps = ~[];\n     for_each_package(c, |s, p| {\n         if p.uuid == uuid {\n@@ -954,7 +955,7 @@ pub fn install_uuid(c: &Cargo, wd: &Path, uuid: ~str) {\n     }\n }\n \n-pub fn install_named(c: &Cargo, wd: &Path, name: ~str) {\n+pub fn install_named(c: &mut Cargo, wd: &Path, name: ~str) {\n     let mut ps = ~[];\n     for_each_package(c, |s, p| {\n         if p.name == name {\n@@ -978,7 +979,8 @@ pub fn install_named(c: &Cargo, wd: &Path, name: ~str) {\n     }\n }\n \n-pub fn install_uuid_specific(c: &Cargo, wd: &Path, src: ~str, uuid: ~str) {\n+pub fn install_uuid_specific(c: &mut Cargo, wd: &Path, src: ~str,\n+                             uuid: ~str) {\n     match c.sources.find(src) {\n         Some(s) => {\n             for s.packages.each |p| {\n@@ -993,7 +995,8 @@ pub fn install_uuid_specific(c: &Cargo, wd: &Path, src: ~str, uuid: ~str) {\n     error(~\"can't find package: \" + src + ~\"/\" + uuid);\n }\n \n-pub fn install_named_specific(c: &Cargo, wd: &Path, src: ~str, name: ~str) {\n+pub fn install_named_specific(c: &mut Cargo, wd: &Path, src: ~str,\n+                              name: ~str) {\n     match c.sources.find(src) {\n         Some(s) => {\n             for s.packages.each |p| {\n@@ -1060,7 +1063,7 @@ pub fn cmd_uninstall(c: &Cargo) {\n     }\n }\n \n-pub fn install_query(c: &Cargo, wd: &Path, target: ~str) {\n+pub fn install_query(c: &mut Cargo, wd: &Path, target: ~str) {\n     match c.dep_cache.find(target) {\n         Some(inst) => {\n             if inst {\n@@ -1112,10 +1115,7 @@ pub fn install_query(c: &Cargo, wd: &Path, target: ~str) {\n     // a bit of a hack. It should be cleaned up in the future.\n \n     if target == c.current_install {\n-        for c.dep_cache.each |k, _v| {\n-            c.dep_cache.remove(k);\n-        }\n-\n+        c.dep_cache.clear();\n         c.current_install = ~\"\";\n     }\n }\n@@ -1128,7 +1128,7 @@ pub fn get_temp_workdir(c: &Cargo) -> Path {\n     }\n }\n \n-pub fn cmd_install(c: &Cargo) {\n+pub fn cmd_install(c: &mut Cargo) {\n     unsafe {\n         let wd = get_temp_workdir(c);\n \n@@ -1155,7 +1155,7 @@ pub fn cmd_install(c: &Cargo) {\n }\n \n pub fn sync(c: &Cargo) {\n-    for c.sources.each_key |k| {\n+    for c.sources.each_key_ref |&k| {\n         let mut s = c.sources.get(k);\n         sync_one(c, s);\n         c.sources.insert(k, s);\n@@ -1569,7 +1569,7 @@ pub fn cmd_list(c: &Cargo) {\n             }\n         }\n     } else {\n-        for c.sources.each_value |v| {\n+        for c.sources.each_value_ref |&v| {\n             print_source(v);\n         }\n     }\n@@ -1620,7 +1620,7 @@ pub fn dump_cache(c: &Cargo) {\n }\n \n pub fn dump_sources(c: &Cargo) {\n-    if c.sources.size() < 1u {\n+    if c.sources.is_empty() {\n         return;\n     }\n \n@@ -1636,7 +1636,7 @@ pub fn dump_sources(c: &Cargo) {\n         result::Ok(writer) => {\n             let mut hash = ~LinearMap::new();\n \n-            for c.sources.each |k, v| {\n+            for c.sources.each_ref |&k, &v| {\n                 let mut chash = ~LinearMap::new();\n \n                 chash.insert(~\"url\", json::String(v.url));\n@@ -1675,7 +1675,7 @@ pub fn copy_warn(srcfile: &Path, destfile: &Path) {\n \n pub fn cmd_sources(c: &Cargo) {\n     if vec::len(c.opts.free) < 3u {\n-        for c.sources.each_value |v| {\n+        for c.sources.each_value_ref |&v| {\n             info(fmt!(\"%s (%s) via %s\",\n                       v.name, v.url, v.method));\n         }\n@@ -1686,8 +1686,8 @@ pub fn cmd_sources(c: &Cargo) {\n \n     match action {\n         ~\"clear\" => {\n-          for c.sources.each_key |k| {\n-                c.sources.remove(k);\n+          for c.sources.each_key_ref |&k| {\n+                c.sources.remove(&k);\n             }\n \n             info(~\"cleared sources\");\n@@ -1706,7 +1706,7 @@ pub fn cmd_sources(c: &Cargo) {\n                 return;\n             }\n \n-            if c.sources.contains_key(name) {\n+            if c.sources.contains_key_ref(&name) {\n                 error(fmt!(\"source already exists: %s\", name));\n             } else {\n                 c.sources.insert(name, @Source {\n@@ -1733,8 +1733,8 @@ pub fn cmd_sources(c: &Cargo) {\n                 return;\n             }\n \n-            if c.sources.contains_key(name) {\n-                c.sources.remove(name);\n+            if c.sources.contains_key_ref(&name) {\n+                c.sources.remove(&name);\n                 info(fmt!(\"removed source: %s\", name));\n             } else {\n                 error(fmt!(\"no such source: %s\", name));\n@@ -1825,7 +1825,7 @@ pub fn cmd_sources(c: &Cargo) {\n \n             match c.sources.find(name) {\n                 Some(source) => {\n-                    c.sources.remove(name);\n+                    c.sources.remove(&name);\n                     c.sources.insert(newn, source);\n                     info(fmt!(\"renamed source: %s to %s\", name, newn));\n                 }\n@@ -1967,7 +1967,7 @@ pub fn main() {\n \n     match o.free[1] {\n         ~\"init\" => cmd_init(&c),\n-        ~\"install\" => cmd_install(&c),\n+        ~\"install\" => cmd_install(&mut c),\n         ~\"uninstall\" => cmd_uninstall(&c),\n         ~\"list\" => cmd_list(&c),\n         ~\"search\" => cmd_search(&c),"}, {"sha": "22923cb7290423c715596abccb0946a1834b7ea0", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -36,7 +36,7 @@ use core::ptr;\n use core::run;\n use core::str;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std::sha1::sha1;\n use syntax::ast;\n use syntax::ast_map::{path, path_mod, path_name};"}, {"sha": "f6a5fec75aded03fe56ef50ad7e02cefc0632a49", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -18,8 +18,8 @@ use core::os;\n use core::uint;\n use core::util;\n use core::vec;\n-use std::map::HashMap;\n-use std::map;\n+use std::oldmap::HashMap;\n+use std::oldmap;\n \n pure fn not_win32(os: session::os) -> bool {\n   match os {\n@@ -187,7 +187,7 @@ pub fn get_install_prefix_rpath(target_triple: &str) -> Path {\n }\n \n pub fn minimize_rpaths(rpaths: &[Path]) -> ~[Path] {\n-    let set = map::HashMap();\n+    let set = oldmap::HashMap();\n     let mut minimized = ~[];\n     for rpaths.each |rpath| {\n         let s = rpath.to_str();"}, {"sha": "1464fa29afc1298e646ad024ca26ca461ff7c94c", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -35,7 +35,7 @@ use std::getopts::groups::{optopt, optmulti, optflag, optflagopt, getopts};\n use std::getopts::groups;\n use std::getopts::{opt_present};\n use std::getopts;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std;\n use syntax::ast;\n use syntax::ast_map;"}, {"sha": "e114a18f4fd382b42675b5ea66ec335d76ad3dc1", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -20,7 +20,7 @@ use core::ptr;\n use core::str;\n use core::uint;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub type Opcode = u32;\n pub type Bool = c_uint;"}, {"sha": "66956489a27ef5a486c7ce2ead8335aa94c17333", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -30,7 +30,7 @@ use syntax::parse::token::ident_interner;\n use syntax::print::pprust;\n use syntax::visit;\n use syntax::{ast, ast_util};\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n // Traverses an AST, reading all the information about use'd crates and extern\n // libraries necessary for later resolving, typechecking, linking, etc."}, {"sha": "59cc7d1dba603fae1982db774b4bc3ce873b0935", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -23,7 +23,7 @@ use core::dvec::DVec;\n use core::vec;\n use reader = std::ebml::reader;\n use std::ebml;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::codemap::dummy_sp;"}, {"sha": "c8a1a619436b374178cf0b2ffcfcccbade0fac34", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -21,8 +21,8 @@ use metadata::decoder;\n use core::option;\n use core::str;\n use core::vec;\n-use std::map::HashMap;\n-use std::map;\n+use std::oldmap::HashMap;\n+use std::oldmap;\n use std;\n use syntax::{ast, attr};\n use syntax::parse::token::ident_interner;\n@@ -31,7 +31,7 @@ use syntax::parse::token::ident_interner;\n // local crate numbers (as generated during this session). Each external\n // crate may refer to types in other external crates, and each has their\n // own crate numbers.\n-pub type cnum_map = map::HashMap<ast::crate_num, ast::crate_num>;\n+pub type cnum_map = oldmap::HashMap<ast::crate_num, ast::crate_num>;\n \n pub type crate_metadata = @{name: ~str,\n                             data: @~[u8],\n@@ -46,24 +46,24 @@ pub type crate_metadata = @{name: ~str,\n pub enum CStore { private(cstore_private), }\n \n type cstore_private =\n-    @{metas: map::HashMap<ast::crate_num, crate_metadata>,\n+    @{metas: oldmap::HashMap<ast::crate_num, crate_metadata>,\n       use_crate_map: use_crate_map,\n       mut used_crate_files: ~[Path],\n       mut used_libraries: ~[~str],\n       mut used_link_args: ~[~str],\n       intr: @ident_interner};\n \n // Map from node_id's of local use statements to crate numbers\n-type use_crate_map = map::HashMap<ast::node_id, ast::crate_num>;\n+type use_crate_map = oldmap::HashMap<ast::node_id, ast::crate_num>;\n \n // Internal method to retrieve the data from the cstore\n pure fn p(cstore: CStore) -> cstore_private {\n     match cstore { private(p) => p }\n }\n \n pub fn mk_cstore(intr: @ident_interner) -> CStore {\n-    let meta_cache = map::HashMap();\n-    let crate_map = map::HashMap();\n+    let meta_cache = oldmap::HashMap();\n+    let crate_map = oldmap::HashMap();\n     return private(@{metas: meta_cache,\n                      use_crate_map: crate_map,\n                      mut used_crate_files: ~[],\n@@ -94,12 +94,12 @@ pub fn set_crate_data(cstore: CStore,\n }\n \n pub fn have_crate_data(cstore: CStore, cnum: ast::crate_num) -> bool {\n-    return p(cstore).metas.contains_key(cnum);\n+    return p(cstore).metas.contains_key_ref(&cnum);\n }\n \n pub fn iter_crate_data(cstore: CStore,\n                        i: fn(ast::crate_num, crate_metadata)) {\n-    for p(cstore).metas.each |k,v| { i(k, v);};\n+    for p(cstore).metas.each_ref |&k, &v| { i(k, v);};\n }\n \n pub fn add_used_crate_file(cstore: CStore, lib: &Path) {\n@@ -148,7 +148,7 @@ pub fn get_dep_hashes(cstore: CStore) -> ~[~str] {\n     type crate_hash = {name: ~str, hash: ~str};\n     let mut result = ~[];\n \n-    for p(cstore).use_crate_map.each_value |cnum| {\n+    for p(cstore).use_crate_map.each_value_ref |&cnum| {\n         let cdata = cstore::get_crate_data(cstore, cnum);\n         let hash = decoder::get_crate_hash(cdata.data);\n         debug!(\"Add hash[%s]: %s\", cdata.name, hash);"}, {"sha": "c3c7c969cd87a05af5abba7b622fc26aa56e195b", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -36,8 +36,8 @@ use core::str;\n use core::vec;\n use std::ebml::reader;\n use std::ebml;\n-use std::map::HashMap;\n-use std::map;\n+use std::oldmap::HashMap;\n+use std::oldmap;\n use std::serialize::Decodable;\n use syntax::ast_map;\n use syntax::attr;"}, {"sha": "438084a3bd7a5d60d3de0288199909ef46f66f59", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -36,9 +36,9 @@ use core::str;\n use core::to_bytes::IterBytes;\n use core::uint;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std::serialize::Encodable;\n-use std::{ebml, map};\n+use std::{ebml, oldmap};\n use std;\n use syntax::ast::*;\n use syntax::ast;\n@@ -52,7 +52,7 @@ use syntax;\n use writer = std::ebml::writer;\n \n // used by astencode:\n-type abbrev_map = map::HashMap<ty::t, tyencode::ty_abbrev>;\n+type abbrev_map = oldmap::HashMap<ty::t, tyencode::ty_abbrev>;\n \n pub type encode_inlined_item = fn@(ecx: @encode_ctxt,\n                                    ebml_w: writer::Encoder,\n@@ -99,7 +99,7 @@ pub enum encode_ctxt = {\n };\n \n pub fn reachable(ecx: @encode_ctxt, id: node_id) -> bool {\n-    ecx.reachable.contains_key(id)\n+    ecx.reachable.contains_key_ref(&id)\n }\n \n fn encode_name(ecx: @encode_ctxt, ebml_w: writer::Encoder, name: ident) {"}, {"sha": "5dd499dfd63d7a125c434ccb2794e2d50192c081", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -27,7 +27,7 @@ use core::vec;\n use syntax::ast;\n use syntax::ast::*;\n use syntax::codemap::{respan, dummy_sp};\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n // Compact string representation for ty::t values. API ty_str &\n // parse_from_str. Extra parameters are for converting to/from def_ids in the"}, {"sha": "a0e2065b20b8c36434243bdea3ba246d3186dac3", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -20,7 +20,7 @@ use core::io::WriterUtil;\n use core::io;\n use core::uint;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::*;\n use syntax::diagnostic::span_handler;\n use syntax::print::pprust::*;"}, {"sha": "2fc592e131e61a282a057fcb16904547087cc27e", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -31,7 +31,7 @@ use std::ebml::reader::get_doc;\n use std::ebml::reader;\n use std::ebml::writer::Encoder;\n use std::ebml;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std::prettyprint;\n use std::serialize;\n use std::serialize::{Encodable, EncoderHelpers, DecoderHelpers};"}, {"sha": "19740b6a929b28091ee465a6cc133e3c1604cb6b", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -35,7 +35,7 @@ use core::cmp;\n use core::dvec::DVec;\n use core::uint;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::{m_const, m_imm, m_mutbl};\n use syntax::ast;\n use syntax::ast_util;\n@@ -665,7 +665,7 @@ fn check_loans_in_expr(expr: @ast::expr,\n \n     self.check_for_conflicting_loans(expr.id);\n \n-    if self.bccx.moves_map.contains_key(expr.id) {\n+    if self.bccx.moves_map.contains_key_ref(&expr.id) {\n         self.check_move_out_from_expr(expr);\n     }\n \n@@ -686,15 +686,15 @@ fn check_loans_in_expr(expr: @ast::expr,\n       }\n       ast::expr_index(_, rval) |\n       ast::expr_binary(_, _, rval)\n-      if self.bccx.method_map.contains_key(expr.id) => {\n+      if self.bccx.method_map.contains_key_ref(&expr.id) => {\n         self.check_call(expr,\n                         None,\n                         expr.callee_id,\n                         expr.span,\n                         ~[rval]);\n       }\n       ast::expr_unary(*) | ast::expr_index(*)\n-      if self.bccx.method_map.contains_key(expr.id) => {\n+      if self.bccx.method_map.contains_key_ref(&expr.id) => {\n         self.check_call(expr,\n                         None,\n                         expr.callee_id,"}, {"sha": "b7b9942492411618dac7b89656ce280c74c90b49", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -33,7 +33,7 @@ use util::ppaux::{expr_repr, region_to_str};\n use core::dvec;\n use core::hashmap::linear::LinearSet;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::{m_const, m_imm, m_mutbl};\n use syntax::ast;\n use syntax::codemap::span;\n@@ -204,7 +204,7 @@ fn req_loans_in_expr(ex: @ast::expr,\n       ast::expr_binary(_, rcvr, _) |\n       ast::expr_unary(_, rcvr) |\n       ast::expr_assign_op(_, rcvr, _)\n-      if self.bccx.method_map.contains_key(ex.id) => {\n+      if self.bccx.method_map.contains_key_ref(&ex.id) => {\n         // Receivers in method calls are always passed by ref.\n         //\n         // Here, in an overloaded operator, the call is this expression,\n@@ -241,7 +241,7 @@ fn req_loans_in_expr(ex: @ast::expr,\n       // }\n \n       ast::expr_field(rcvr, _, _)\n-      if self.bccx.method_map.contains_key(ex.id) => {\n+      if self.bccx.method_map.contains_key_ref(&ex.id) => {\n         // Receivers in method calls are always passed by ref.\n         //\n         // Here, the field a.b is in fact a closure.  Eventually, this"}, {"sha": "b160c2e5a146d3a72f4c46b469e100b1e692a047", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -241,7 +241,7 @@ use core::io;\n use core::result::{Result, Ok, Err};\n use std::list::{List, Cons, Nil};\n use std::list;\n-use std::map::{HashMap, Set};\n+use std::oldmap::{HashMap, Set};\n use syntax::ast::{mutability, m_mutbl, m_imm, m_const};\n use syntax::ast;\n use syntax::ast_map;"}, {"sha": "3bc34d2ef292cb9cd381cd55ff998817be3ed684", "filename": "src/librustc/middle/borrowck/preserve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -375,7 +375,7 @@ impl PreserveCtxt {\n                 // scope_id;`. Though that would potentially re-introduce\n                 // the ICE. See #3511 for more details.\n                 let scope_to_use = if\n-                    self.bccx.stmt_map.contains_key(scope_id) {\n+                    self.bccx.stmt_map.contains_key_ref(&scope_id) {\n                     // Root it in its parent scope, b/c\n                     // trans won't introduce a new scope for the\n                     // stmt"}, {"sha": "98c3fdaa8c35d84065164da1f45010442e20712c", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -18,7 +18,7 @@ use util::ppaux;\n \n use core::dvec::DVec;\n use core::option;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::*;\n use syntax::codemap;\n use syntax::{visit, ast_util, ast_map};\n@@ -102,7 +102,7 @@ pub fn check_expr(sess: Session,\n           }\n           expr_lit(@codemap::spanned {node: lit_str(_), _}) => { }\n           expr_binary(_, _, _) | expr_unary(_, _) => {\n-            if method_map.contains_key(e.id) {\n+            if method_map.contains_key_ref(&e.id) {\n                 sess.span_err(e.span, ~\"user-defined operators are not \\\n                                        allowed in constant expressions\");\n             }"}, {"sha": "e25ceee5d30164a005ebed785c71e0e309d18901", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -23,7 +23,7 @@ use core::cmp;\n use core::option;\n use core::uint;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std::sort;\n use syntax::ast::*;\n use syntax::ast_util::{variant_def_ids, unguarded_pat, walk_pat};\n@@ -59,7 +59,7 @@ pub fn expr_is_non_moving_lvalue(cx: @MatchCheckCtxt, expr: @expr) -> bool {\n         return false;\n     }\n \n-    !cx.moves_map.contains_key(expr.id)\n+    !cx.moves_map.contains_key_ref(&expr.id)\n }\n \n pub fn check_expr(cx: @MatchCheckCtxt, ex: @expr, &&s: (), v: visit::vt<()>) {\n@@ -734,7 +734,7 @@ pub fn check_legality_of_move_bindings(cx: @MatchCheckCtxt,\n                     by_ref_span = Some(span);\n                 }\n                 bind_infer => {\n-                    if cx.moves_map.contains_key(id) {\n+                    if cx.moves_map.contains_key_ref(&id) {\n                         any_by_move = true;\n                     }\n                 }\n@@ -774,7 +774,7 @@ pub fn check_legality_of_move_bindings(cx: @MatchCheckCtxt,\n             if pat_is_binding(def_map, p) {\n                 match p.node {\n                     pat_ident(_, _, sub) => {\n-                        if cx.moves_map.contains_key(p.id) {\n+                        if cx.moves_map.contains_key_ref(&p.id) {\n                             check_move(p, sub);\n                         }\n                     }\n@@ -800,7 +800,7 @@ pub fn check_legality_of_move_bindings(cx: @MatchCheckCtxt,\n                                 behind_bad_pointer);\n \n                         if behind_bad_pointer &&\n-                            cx.moves_map.contains_key(pat.id)\n+                            cx.moves_map.contains_key_ref(&pat.id)\n                         {\n                             cx.tcx.sess.span_err(\n                                 pat.span,"}, {"sha": "1e9d8c9c08e28b595c8a5db07454f2afd8470535", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -18,7 +18,7 @@ use middle::ty;\n use core::int;\n use core::option::*;\n use core::vec;\n-use std::map::*;\n+use std::oldmap::*;\n use syntax::codemap::span;\n use syntax::print::pprust::path_to_str;\n use syntax::{ast, ast_util, visit};\n@@ -71,7 +71,7 @@ fn collect_freevars(def_map: resolve::DefMap, blk: ast::blk)\n                       }\n                       if i == depth { // Made it to end of loop\n                         let dnum = ast_util::def_id_of_def(def).node;\n-                        if !seen.contains_key(dnum) {\n+                        if !seen.contains_key_ref(&dnum) {\n                             refs.push(@freevar_entry {\n                                 def: def,\n                                 span: expr.span,"}, {"sha": "09232a2a0c52f5d9a08701422c662c6788f2f6ec", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -24,7 +24,7 @@ use util::ppaux::{ty_to_str, tys_to_str};\n use core::option;\n use core::str;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::*;\n use syntax::codemap::{span, spanned};\n use syntax::print::pprust::expr_to_str;"}, {"sha": "3eb65505e6462a8aceceda6ff606ea72b61ce531", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -33,7 +33,7 @@ use syntax::visit::{default_simple_visitor, mk_simple_visitor, SimpleVisitor};\n use syntax::visit::{visit_crate, visit_item};\n \n use core::ptr;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use str_eq = str::eq;\n \n pub enum LangItem {\n@@ -391,7 +391,7 @@ impl LanguageItemCollector {\n     }\n \n     fn check_completeness() {\n-        for self.item_refs.each |key, item_ref| {\n+        for self.item_refs.each_ref |&key, &item_ref| {\n             match self.items.items[item_ref] {\n                 None => {\n                     self.session.err(fmt!(\"no item found for `%s`\", key));"}, {"sha": "0dc7a746e9e8389ca90ef50faa5aa034ad0a720c", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -32,8 +32,8 @@ use core::u32;\n use core::u64;\n use core::uint;\n use core::vec;\n-use std::map::{Map, HashMap};\n-use std::map;\n+use std::oldmap::{Map, HashMap};\n+use std::oldmap;\n use std::oldsmallintmap::{Map, SmallIntMap};\n use std::oldsmallintmap;\n use syntax::ast_util::{path_to_ident};\n@@ -233,7 +233,7 @@ pub fn get_lint_dict() -> lint_dict {\n            default: warn}),\n         */\n     ];\n-    map::hash_from_vec(v)\n+    oldmap::hash_from_vec(v)\n }\n \n // This is a highly not-optimal set of data structure decisions.\n@@ -400,7 +400,9 @@ pub fn build_settings_crate(sess: session::Session, crate: @ast::crate) {\n                     sess: sess});\n \n     // Install defaults.\n-    for cx.dict.each |_k, spec| { cx.set_level(spec.lint, spec.default); }\n+    for cx.dict.each_value_ref |&spec| {\n+        cx.set_level(spec.lint, spec.default);\n+    }\n \n     // Install command-line options, overriding defaults.\n     for sess.opts.lint_opts.each |pair| {"}, {"sha": "d14d58122a75907a899f445de11d1248d5f0176c", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -119,7 +119,7 @@ use core::ptr;\n use core::to_str;\n use core::uint;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::*;\n use syntax::codemap::span;\n use syntax::parse::token::special_idents;"}, {"sha": "94fc63b75ddaae2948bf82964ce8233b1f69b033", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -348,7 +348,7 @@ pub impl &mem_categorization_ctxt {\n         let expr_ty = tcx.ty(expr);\n         match expr.node {\n           ast::expr_unary(ast::deref, e_base) => {\n-            if self.method_map.contains_key(expr.id) {\n+            if self.method_map.contains_key_ref(&expr.id) {\n                 return self.cat_rvalue(expr, expr_ty);\n             }\n \n@@ -357,7 +357,7 @@ pub impl &mem_categorization_ctxt {\n           }\n \n           ast::expr_field(base, f_name, _) => {\n-            if self.method_map.contains_key(expr.id) {\n+            if self.method_map.contains_key_ref(&expr.id) {\n                 return self.cat_method_ref(expr, expr_ty);\n             }\n \n@@ -366,7 +366,7 @@ pub impl &mem_categorization_ctxt {\n           }\n \n           ast::expr_index(base, _) => {\n-            if self.method_map.contains_key(expr.id) {\n+            if self.method_map.contains_key_ref(&expr.id) {\n                 return self.cat_rvalue(expr, expr_ty);\n             }\n "}, {"sha": "8adebdb45820d88c2c7b7e61558249c8c43f20de", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -217,7 +217,7 @@ use util::ppaux;\n use util::common::indenter;\n \n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::*;\n use syntax::ast_util;\n use syntax::visit;\n@@ -640,7 +640,7 @@ impl VisitContext {\n                                arg_exprs: &[@expr],\n                                visitor: vt<VisitContext>) -> bool\n     {\n-        if !self.method_map.contains_key(expr.id) {\n+        if !self.method_map.contains_key_ref(&expr.id) {\n             return false;\n         }\n \n@@ -771,7 +771,7 @@ impl VisitContext {\n             for arm.pats.each |pat| {\n                 let mut found = false;\n                 do pat_bindings(self.tcx.def_map, *pat) |_, node_id, _, _| {\n-                    if moves_map.contains_key(node_id) {\n+                    if moves_map.contains_key_ref(&node_id) {\n                         found = true;\n                     }\n                 }"}, {"sha": "c39d750a5814a4508acb678926e2bb42dfb62a3d", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -18,7 +18,7 @@ use syntax::ast_util::{path_to_ident, walk_pat};\n use syntax::fold;\n use syntax::fold::*;\n use syntax::codemap::{span, respan};\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub type PatIdMap = HashMap<ident, node_id>;\n "}, {"sha": "4602d2aff4ee95b43b24d2c6576ce47f6aabbd7b", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -32,7 +32,7 @@ use core::dvec::DVec;\n use core::vec;\n use std::list;\n use std::list::list;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast_map;\n use syntax::codemap::span;\n use syntax::print::pprust;\n@@ -296,7 +296,7 @@ pub fn resolve_expr(expr: @ast::expr, cx: ctxt, visitor: visit::vt<ctxt>) {\n       _ => {}\n     };\n \n-    if new_cx.root_exprs.contains_key(expr.id) {\n+    if new_cx.root_exprs.contains_key_ref(&expr.id) {\n         new_cx.parent = Some(expr.id);\n     }\n \n@@ -833,7 +833,7 @@ pub fn determine_rp_in_crate(sess: Session,\n \n     debug!(\"%s\", {\n         debug!(\"Region variance results:\");\n-        for cx.region_paramd_items.each |key, value| {\n+        for cx.region_paramd_items.each_ref |&key, &value| {\n             debug!(\"item %? (%s) is parameterized with variance %?\",\n                    key,\n                    ast_map::node_id_to_str(ast_map, key,"}, {"sha": "c40b6df692689de79e1ed0b9f2a63cfe9ab974f2", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 34, "deletions": 30, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -79,7 +79,7 @@ use str::{connect, split_str};\n use vec::pop;\n \n use std::list::{Cons, List, Nil};\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use str_eq = str::eq;\n \n // Definition mapping\n@@ -1913,7 +1913,7 @@ pub impl Resolver {\n                self.module_to_str(module_));\n         self.resolve_imports_for_module(module_);\n \n-        for module_.children.each |_name, child_node| {\n+        for module_.children.each_value_ref |&child_node| {\n             match child_node.get_module_if_available() {\n                 None => {\n                     // Nothing to do.\n@@ -1924,7 +1924,7 @@ pub impl Resolver {\n             }\n         }\n \n-        for module_.anonymous_children.each |_block_id, child_module| {\n+        for module_.anonymous_children.each_value_ref |&child_module| {\n             self.resolve_imports_for_module_subtree(child_module);\n         }\n     }\n@@ -2211,7 +2211,7 @@ pub impl Resolver {\n         }\n \n         // We've successfully resolved the import. Write the results in.\n-        assert module_.import_resolutions.contains_key(target);\n+        assert module_.import_resolutions.contains_key_ref(&target);\n         let import_resolution = module_.import_resolutions.get(target);\n \n         match value_result {\n@@ -2370,7 +2370,7 @@ pub impl Resolver {\n         }\n \n         // We've successfully resolved the import. Write the results in.\n-        assert module_.import_resolutions.contains_key(target);\n+        assert module_.import_resolutions.contains_key_ref(&target);\n         let import_resolution = module_.import_resolutions.get(target);\n \n         match module_result {\n@@ -2430,8 +2430,8 @@ pub impl Resolver {\n         assert containing_module.glob_count == 0;\n \n         // Add all resolved imports from the containing module.\n-        for containing_module.import_resolutions.each\n-                |ident, target_import_resolution| {\n+        for containing_module.import_resolutions.each_ref\n+                |&ident, &target_import_resolution| {\n \n             debug!(\"(resolving glob import) writing module resolution \\\n                     %? into `%s`\",\n@@ -2480,7 +2480,7 @@ pub impl Resolver {\n         }\n \n         // Add all children from the containing module.\n-        for containing_module.children.each |ident, name_bindings| {\n+        for containing_module.children.each_ref |&ident, &name_bindings| {\n             let mut dest_import_resolution;\n             match module_.import_resolutions.find(ident) {\n                 None => {\n@@ -3148,7 +3148,7 @@ pub impl Resolver {\n         }\n \n         // Descend into children and anonymous children.\n-        for module_.children.each |_name, child_node| {\n+        for module_.children.each_value_ref |&child_node| {\n             match child_node.get_module_if_available() {\n                 None => {\n                     // Continue.\n@@ -3159,7 +3159,7 @@ pub impl Resolver {\n             }\n         }\n \n-        for module_.anonymous_children.each |_name, module_| {\n+        for module_.anonymous_children.each_value_ref |&module_| {\n             self.report_unresolved_imports(module_);\n         }\n     }\n@@ -3204,7 +3204,7 @@ pub impl Resolver {\n \n         self.record_exports_for_module(module_);\n \n-        for module_.children.each |_ident, child_name_bindings| {\n+        for module_.children.each_value_ref |&child_name_bindings| {\n             match child_name_bindings.get_module_if_available() {\n                 None => {\n                     // Nothing to do.\n@@ -3215,7 +3215,7 @@ pub impl Resolver {\n             }\n         }\n \n-        for module_.anonymous_children.each |_node_id, child_module| {\n+        for module_.anonymous_children.each_value_ref |&child_module| {\n             self.record_exports_for_module_subtree(child_module);\n         }\n     }\n@@ -4068,7 +4068,7 @@ pub impl Resolver {\n         for arm.pats.eachi() |i, p| {\n             let map_i = self.binding_mode_map(*p);\n \n-            for map_0.each |key, binding_0| {\n+            for map_0.each_ref |&key, &binding_0| {\n                 match map_i.find(key) {\n                   None => {\n                     self.session.span_err(\n@@ -4089,8 +4089,8 @@ pub impl Resolver {\n                 }\n             }\n \n-            for map_i.each |key, binding| {\n-                if !map_0.contains_key(key) {\n+            for map_i.each_ref |&key, &binding| {\n+                if !map_0.contains_key_ref(&key) {\n                     self.session.span_err(\n                         binding.span,\n                         fmt!(\"variable `%s` from pattern #%u is \\\n@@ -4319,7 +4319,8 @@ pub impl Resolver {\n \n                             match bindings_list {\n                                 Some(bindings_list)\n-                                if !bindings_list.contains_key(ident) => {\n+                                if !bindings_list.contains_key_ref(&ident)\n+                                    => {\n                                     let last_rib = (*self.value_ribs).last();\n                                     last_rib.bindings.insert(ident,\n                                                              dl_def(def));\n@@ -4391,16 +4392,19 @@ pub impl Resolver {\n                 pat_struct(path, _, _) => {\n                     match self.resolve_path(path, TypeNS, false, visitor) {\n                         Some(def_ty(class_id))\n-                                if self.structs.contains_key(class_id) => {\n+                                if self.structs.contains_key_ref(&class_id)\n+                                     => {\n                             let class_def = def_struct(class_id);\n                             self.record_def(pattern.id, class_def);\n                         }\n                         Some(definition @ def_struct(class_id))\n-                                if self.structs.contains_key(class_id) => {\n+                                if self.structs.contains_key_ref(&class_id)\n+                                     => {\n                             self.record_def(pattern.id, definition);\n                         }\n                         Some(definition @ def_variant(_, variant_id))\n-                                if self.structs.contains_key(variant_id) => {\n+                                if self.structs.contains_key_ref(&variant_id)\n+                                     => {\n                             self.record_def(pattern.id, definition);\n                         }\n                         result => {\n@@ -4848,12 +4852,12 @@ pub impl Resolver {\n \n                 match self.resolve_path(path, TypeNS, false, visitor) {\n                     Some(def_ty(class_id)) | Some(def_struct(class_id))\n-                            if self.structs.contains_key(class_id) => {\n+                            if self.structs.contains_key_ref(&class_id) => {\n                         let class_def = def_struct(class_id);\n                         self.record_def(expr.id, class_def);\n                     }\n                     Some(definition @ def_variant(_, class_id))\n-                            if self.structs.contains_key(class_id) => {\n+                            if self.structs.contains_key_ref(&class_id) => {\n                         self.record_def(expr.id, definition);\n                     }\n                     _ => {\n@@ -4997,7 +5001,7 @@ pub impl Resolver {\n             }\n \n             // Look for trait children.\n-            for search_module.children.each |_name, child_name_bindings| {\n+            for search_module.children.each_value_ref |&child_name_bindings| {\n                 match child_name_bindings.def_for_namespace(TypeNS) {\n                     Some(def) => {\n                         match def {\n@@ -5017,8 +5021,8 @@ pub impl Resolver {\n             }\n \n             // Look for imports.\n-            for search_module.import_resolutions.each\n-                    |_ident, import_resolution| {\n+            for search_module.import_resolutions.each_value_ref\n+                    |&import_resolution| {\n \n                 match import_resolution.target_for_namespace(TypeNS) {\n                     None => {\n@@ -5073,7 +5077,7 @@ pub impl Resolver {\n                self.session.str_of(name));\n \n         match self.trait_info.find(trait_def_id) {\n-            Some(trait_info) if trait_info.contains_key(name) => {\n+            Some(trait_info) if trait_info.contains_key_ref(&name) => {\n                 debug!(\"(adding trait info if containing method) found trait \\\n                         %d:%d for method '%s'\",\n                        trait_def_id.crate,\n@@ -5180,7 +5184,7 @@ pub impl Resolver {\n \n         self.check_for_unused_imports_in_module(module_);\n \n-        for module_.children.each |_ident, child_name_bindings| {\n+        for module_.children.each_value_ref |&child_name_bindings| {\n             match (*child_name_bindings).get_module_if_available() {\n                 None => {\n                     // Nothing to do.\n@@ -5192,13 +5196,13 @@ pub impl Resolver {\n             }\n         }\n \n-        for module_.anonymous_children.each |_node_id, child_module| {\n+        for module_.anonymous_children.each_value_ref |&child_module| {\n             self.check_for_unused_imports_in_module_subtree(child_module);\n         }\n     }\n \n     fn check_for_unused_imports_in_module(module_: @Module) {\n-        for module_.import_resolutions.each |_name, import_resolution| {\n+        for module_.import_resolutions.each_value_ref |&import_resolution| {\n             if !import_resolution.used {\n                 match self.unused_import_lint_level {\n                     warn => {\n@@ -5257,12 +5261,12 @@ pub impl Resolver {\n         debug!(\"Dump of module `%s`:\", self.module_to_str(module_));\n \n         debug!(\"Children:\");\n-        for module_.children.each |name, _child| {\n+        for module_.children.each_key_ref |&name| {\n             debug!(\"* %s\", self.session.str_of(name));\n         }\n \n         debug!(\"Import resolutions:\");\n-        for module_.import_resolutions.each |name, import_resolution| {\n+        for module_.import_resolutions.each_ref |&name, &import_resolution| {\n             let mut value_repr;\n             match (*import_resolution).target_for_namespace(ValueNS) {\n                 None => { value_repr = ~\"\"; }"}, {"sha": "6913cf8e2f5187e83d14b5f94c92f0842f5e46ef", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -164,7 +164,7 @@ use util::common::indenter;\n \n use core::dvec::DVec;\n use core::dvec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::def_id;\n use syntax::ast;\n use syntax::ast_util::{dummy_sp, path_to_ident};\n@@ -1085,7 +1085,7 @@ pub fn store_non_ref_bindings(bcx: block,\n      */\n \n     let mut bcx = bcx;\n-    for data.bindings_map.each_value |binding_info| {\n+    for data.bindings_map.each_value_ref |&binding_info| {\n         match binding_info.trmode {\n             TrByValue(is_move, lldest) => {\n                 let llval = Load(bcx, binding_info.llmatch); // get a T*\n@@ -1119,7 +1119,7 @@ pub fn insert_lllocals(bcx: block,\n      * the `fcx.lllocals` map.  If add_cleans is true, then adds cleanups for\n      * the bindings. */\n \n-    for data.bindings_map.each_value |binding_info| {\n+    for data.bindings_map.each_value_ref |&binding_info| {\n         let llval = match binding_info.trmode {\n             // By value bindings: use the stack slot that we\n             // copied/moved the value into\n@@ -1191,14 +1191,14 @@ pub fn compile_guard(bcx: block,\n \n     fn drop_bindings(bcx: block, data: &ArmData) -> block {\n         let mut bcx = bcx;\n-        for data.bindings_map.each_value |binding_info| {\n+        for data.bindings_map.each_value_ref |&binding_info| {\n             match binding_info.trmode {\n                 TrByValue(_, llval) => {\n                     bcx = glue::drop_ty(bcx, llval, binding_info.ty);\n                 }\n                 TrByRef | TrByImplicitRef => {}\n             }\n-            bcx.fcx.lllocals.remove(binding_info.id);\n+            bcx.fcx.lllocals.remove(&binding_info.id);\n         }\n         return bcx;\n     }\n@@ -1586,7 +1586,7 @@ pub fn trans_match_inner(scope_cx: block,\n                     // but during matching we need to store a *T as explained\n                     // above\n                     let is_move =\n-                        scope_cx.ccx().maps.moves_map.contains_key(p_id);\n+                        scope_cx.ccx().maps.moves_map.contains_key_ref(&p_id);\n                     llmatch = alloca(bcx, T_ptr(llvariable_ty));\n                     trmode = TrByValue(is_move, alloca(bcx, llvariable_ty));\n                 }"}, {"sha": "a858ecb520a504bb9e0f132ecc4491a7b418a2c7", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -75,9 +75,9 @@ use core::libc::{c_uint, c_ulonglong};\n use core::option::{is_none, is_some};\n use core::option;\n use core::uint;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std::oldsmallintmap;\n-use std::{map, time, list};\n+use std::{oldmap, time, list};\n use syntax::ast_map::{path, path_elt_to_str, path_mod, path_name};\n use syntax::ast_util::{def_id_of_def, local_def, path_to_ident};\n use syntax::attr;\n@@ -169,8 +169,7 @@ pub fn get_extern_fn(externs: HashMap<~str, ValueRef>,\n                      +name: ~str,\n                      cc: lib::llvm::CallConv,\n                      ty: TypeRef) -> ValueRef {\n-    // XXX: Bad copy.\n-    if externs.contains_key(copy name) { return externs.get(name); }\n+    if externs.contains_key_ref(&name) { return externs.get(name); }\n     // XXX: Bad copy.\n     let f = decl_fn(llmod, copy name, cc, ty);\n     externs.insert(name, f);\n@@ -180,8 +179,7 @@ pub fn get_extern_fn(externs: HashMap<~str, ValueRef>,\n pub fn get_extern_const(externs: HashMap<~str, ValueRef>, llmod: ModuleRef,\n                         +name: ~str, ty: TypeRef) -> ValueRef {\n     unsafe {\n-        // XXX: Bad copy.\n-        if externs.contains_key(copy name) { return externs.get(name); }\n+        if externs.contains_key_ref(&name) { return externs.get(name); }\n         let c = str::as_c_str(name, |buf| {\n             llvm::LLVMAddGlobal(llmod, ty, buf)\n         });\n@@ -451,7 +449,7 @@ pub fn set_glue_inlining(f: ValueRef, t: ty::t) {\n // silently mangles such symbols, breaking our linkage model.\n pub fn note_unique_llvm_symbol(ccx: @crate_ctxt, +sym: ~str) {\n     // XXX: Bad copy.\n-    if ccx.all_llvm_symbols.contains_key(copy sym) {\n+    if ccx.all_llvm_symbols.contains_key_ref(&sym) {\n         ccx.sess.bug(~\"duplicate LLVM symbol: \" + sym);\n     }\n     ccx.all_llvm_symbols.insert(sym, ());\n@@ -2485,7 +2483,7 @@ pub fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n             ccx.sess.bug(~\"get_item_val(): unexpected variant\")\n           }\n         };\n-        if !(exprt || ccx.reachable.contains_key(id)) {\n+        if !(exprt || ccx.reachable.contains_key_ref(&id)) {\n             lib::llvm::SetLinkage(val, lib::llvm::InternalLinkage);\n         }\n         ccx.item_vals.insert(id, val);\n@@ -2798,7 +2796,7 @@ pub fn decl_gc_metadata(ccx: @crate_ctxt, llmod_id: ~str) {\n \n pub fn create_module_map(ccx: @crate_ctxt) -> ValueRef {\n     let elttype = T_struct(~[ccx.int_type, ccx.int_type]);\n-    let maptype = T_array(elttype, ccx.module_data.size() + 1u);\n+    let maptype = T_array(elttype, ccx.module_data.len() + 1);\n     let map = str::as_c_str(~\"_rust_mod_map\", |buf| {\n         unsafe {\n             llvm::LLVMAddGlobal(ccx.llmod, maptype, buf)\n@@ -2808,7 +2806,7 @@ pub fn create_module_map(ccx: @crate_ctxt) -> ValueRef {\n         lib::llvm::SetLinkage(map, lib::llvm::InternalLinkage);\n     }\n     let mut elts: ~[ValueRef] = ~[];\n-    for ccx.module_data.each |key, val| {\n+    for ccx.module_data.each_ref |&key, &val| {\n         let elt = C_struct(~[p2i(ccx, C_cstr(ccx, key)),\n                             p2i(ccx, val)]);\n         elts.push(elt);\n@@ -3016,7 +3014,7 @@ pub fn trans_crate(sess: session::Session,\n               monomorphized: HashMap(),\n               monomorphizing: HashMap(),\n               type_use_cache: HashMap(),\n-              vtables: map::HashMap(),\n+              vtables: oldmap::HashMap(),\n               const_cstr_cache: HashMap(),\n               const_globals: HashMap(),\n               const_values: HashMap(),\n@@ -3089,7 +3087,7 @@ pub fn trans_crate(sess: session::Session,\n         }\n \n         if ccx.sess.count_llvm_insns() {\n-            for ccx.stats.llvm_insns.each |k, v| {\n+            for ccx.stats.llvm_insns.each_ref |&k, &v| {\n                 io::println(fmt!(\"%-7u %s\", v, k));\n             }\n         }"}, {"sha": "7923643358026ada337091c835c1eb9ae5eb28f2", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -22,7 +22,7 @@ use core::cast;\n use core::libc;\n use core::str;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::codemap;\n \n pub fn terminate(cx: block, _: &str) {"}, {"sha": "833cff80d2ddb9d69f55a381e14962637168e064", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -672,7 +672,8 @@ pub fn trans_arg_expr(bcx: block,\n         // FIXME(#3548) use the adjustments table\n         match autoref_arg {\n             DoAutorefArg => {\n-                assert !bcx.ccx().maps.moves_map.contains_key(arg_expr.id);\n+                assert !bcx.ccx().maps.moves_map.contains_key_ref(\n+                    &arg_expr.id);\n                 val = arg_datum.to_ref_llval(bcx);\n             }\n             DontAutorefArg => {\n@@ -682,16 +683,16 @@ pub fn trans_arg_expr(bcx: block,\n                         // the explicit self code currently passes by-ref, it\n                         // does not hold.\n                         //\n-                        //assert !bcx.ccx().maps.moves_map.contains_key(\n-                        //    arg_expr.id);\n+                        //assert !bcx.ccx().maps.moves_map.contains_key_ref(\n+                        //    &arg_expr.id);\n                         val = arg_datum.to_ref_llval(bcx);\n                     }\n \n                     ast::by_val => {\n                         // NB: avoid running the take glue.\n \n-                        assert !bcx.ccx().maps.moves_map.contains_key(\n-                            arg_expr.id);\n+                        assert !bcx.ccx().maps.moves_map.contains_key_ref(\n+                            &arg_expr.id);\n                         val = arg_datum.to_value_llval(bcx);\n                     }\n "}, {"sha": "9a115acbd8dde28496324b60d5a44dfca9ee7f45", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -28,7 +28,7 @@ use middle::trans::type_of::*;\n use util::ppaux::ty_to_str;\n \n use core::libc::c_uint;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast;\n use syntax::ast_map::{path, path_mod, path_name};\n use syntax::ast_util;"}, {"sha": "f21a3150a1c386201ffd5dbeef3745835ac2c2ad", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -53,7 +53,7 @@ use core::str;\n use core::to_bytes;\n use core::vec::raw::to_ptr;\n use core::vec;\n-use std::map::{HashMap, Set};\n+use std::oldmap::{HashMap, Set};\n use syntax::ast::ident;\n use syntax::ast_map::path;\n use syntax::codemap::span;"}, {"sha": "b5652fed10e6dbbdadc1bb9070b4c4dfb4323275", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -126,7 +126,7 @@ pub fn get_const_val(cx: @crate_ctxt, def_id: ast::def_id) -> ValueRef {\n     if !ast_util::is_local(def_id) {\n         cx.tcx.sess.bug(~\"cross-crate constants\");\n     }\n-    if !cx.const_values.contains_key(def_id.node) {\n+    if !cx.const_values.contains_key_ref(&def_id.node) {\n         match cx.tcx.items.get(def_id.node) {\n             ast_map::node_item(@ast::item {\n                 node: ast::item_const(_, subexpr), _"}, {"sha": "240c323965faa4f8fd68521bac8dffbfb42f9f6b", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -183,8 +183,7 @@ pub fn trans_log(log_ex: @ast::expr,\n     // XXX: Bad copy.\n     let modname = path_str(ccx.sess, copy modpath);\n \n-    // XXX: Bad copy.\n-    let global = if ccx.module_data.contains_key(copy modname) {\n+    let global = if ccx.module_data.contains_key_ref(&modname) {\n         ccx.module_data.get(modname)\n     } else {\n         let s = link::mangle_internal_name_by_path_and_seq("}, {"sha": "c3bd34ececbd0873c299cf28c3bfff1341b95ce4", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -223,7 +223,7 @@ pub impl Datum {\n          * `id` is located in the move table, but copies otherwise.\n          */\n \n-        if bcx.ccx().maps.moves_map.contains_key(id) {\n+        if bcx.ccx().maps.moves_map.contains_key_ref(&id) {\n             self.move_to(bcx, action, dst)\n         } else {\n             self.copy_to(bcx, action, dst)"}, {"sha": "35abddfb85a515c5b47cd6787cd1d6cf552641be", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -26,8 +26,8 @@ use util::ppaux::ty_to_str;\n use core::libc;\n use core::option;\n use core::sys;\n-use std::map::HashMap;\n-use std::map;\n+use std::oldmap::HashMap;\n+use std::oldmap;\n use syntax::ast::Ty;\n use syntax::codemap::{span, CharPos};\n use syntax::parse::token::ident_interner;\n@@ -111,13 +111,13 @@ pub type debug_ctxt = {\n };\n \n pub fn mk_ctxt(+crate: ~str, intr: @ident_interner) -> debug_ctxt {\n-    {llmetadata: map::HashMap(),\n+    {llmetadata: oldmap::HashMap(),\n      names: new_namegen(intr),\n      crate_file: crate}\n }\n \n fn update_cache(cache: metadata_cache, mdtag: int, val: debug_metadata) {\n-    let existing = if cache.contains_key(mdtag) {\n+    let existing = if cache.contains_key_ref(&mdtag) {\n         cache.get(mdtag)\n     } else {\n         ~[]\n@@ -176,7 +176,7 @@ fn cached_metadata<T: Copy>(cache: metadata_cache,\n                             eq_fn: fn(md: T) -> bool)\n                          -> Option<T> {\n     unsafe {\n-        if cache.contains_key(mdtag) {\n+        if cache.contains_key_ref(&mdtag) {\n             let items = cache.get(mdtag);\n             for items.each |item| {\n                 let md: T = md_from_metadata::<T>(*item);"}, {"sha": "4cf449cd972104e7a0413c9d6b321e7f3e98f2e1", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -265,7 +265,7 @@ pub fn trans_to_datum(bcx: block, expr: @ast::expr) -> DatumBlock {\n }\n \n pub fn trans_into(bcx: block, expr: @ast::expr, dest: Dest) -> block {\n-    if bcx.tcx().adjustments.contains_key(expr.id) {\n+    if bcx.tcx().adjustments.contains_key_ref(&expr.id) {\n         // use trans_to_datum, which is mildly less efficient but\n         // which will perform the adjustments:\n         let datumblock = trans_to_datum(bcx, expr);\n@@ -426,7 +426,7 @@ fn trans_rvalue_datum_unadjusted(bcx: block, expr: @ast::expr) -> DatumBlock {\n         }\n         ast::expr_binary(op, lhs, rhs) => {\n             // if overloaded, would be RvalueDpsExpr\n-            assert !bcx.ccx().maps.method_map.contains_key(expr.id);\n+            assert !bcx.ccx().maps.method_map.contains_key_ref(&expr.id);\n \n             return trans_binary(bcx, expr, op, lhs, rhs);\n         }\n@@ -1243,7 +1243,7 @@ fn trans_unary_datum(bcx: block,\n     assert op != ast::deref;\n \n     // if overloaded, would be RvalueDpsExpr\n-    assert !bcx.ccx().maps.method_map.contains_key(un_expr.id);\n+    assert !bcx.ccx().maps.method_map.contains_key_ref(&un_expr.id);\n \n     let un_ty = expr_ty(bcx, un_expr);\n     let sub_ty = expr_ty(bcx, sub_expr);"}, {"sha": "849a718a52e9c6268bb887eccbd20eb976403a14", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -380,7 +380,7 @@ pub fn make_visit_glue(bcx: block, v: ValueRef, t: ty::t) {\n     let _icx = bcx.insn_ctxt(\"make_visit_glue\");\n     let mut bcx = bcx;\n     let ty_visitor_name = special_idents::ty_visitor;\n-    assert bcx.ccx().tcx.intrinsic_defs.contains_key(ty_visitor_name);\n+    assert bcx.ccx().tcx.intrinsic_defs.contains_key_ref(&ty_visitor_name);\n     let (trait_id, ty) = bcx.ccx().tcx.intrinsic_defs.get(ty_visitor_name);\n     let v = PointerCast(bcx, v, T_ptr(type_of::type_of(bcx.ccx(), ty)));\n     bcx = reflect::emit_calls_to_trait_visit_ty(bcx, t, v, trait_id);\n@@ -757,7 +757,7 @@ pub fn emit_tydescs(ccx: @crate_ctxt) {\n     let _icx = ccx.insn_ctxt(\"emit_tydescs\");\n     // As of this point, allow no more tydescs to be created.\n     ccx.finished_tydescs = true;\n-    for ccx.tydescs.each |_key, val| {\n+    for ccx.tydescs.each_value_ref |&val| {\n         let glue_fn_ty = T_ptr(T_generic_glue_fn(ccx));\n         let ti = val;\n "}, {"sha": "1b3e13cddabffe17c4cc8c831e7930283e664606", "filename": "src/librustc/middle/trans/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -178,7 +178,7 @@ pub fn llalign_of(cx: @crate_ctxt, t: TypeRef) -> ValueRef {\n \n // Computes the size of the data part of an enum.\n pub fn static_size_of_enum(cx: @crate_ctxt, t: ty::t) -> uint {\n-    if cx.enum_sizes.contains_key(t) { return cx.enum_sizes.get(t); }\n+    if cx.enum_sizes.contains_key_ref(&t) { return cx.enum_sizes.get(t); }\n     match ty::get(t).sty {\n       ty::ty_enum(tid, ref substs) => {\n         // Compute max(variant sizes)."}, {"sha": "f488c32437c73d0f8618a6f20198961feec4535d", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -33,7 +33,7 @@ use middle::typeck;\n use util::ppaux::{ty_to_str, tys_to_str};\n \n use core::libc::c_uint;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast_map::{path, path_mod, path_name, node_id_to_str};\n use syntax::ast_util::local_def;\n use syntax::print::pprust::expr_to_str;\n@@ -871,7 +871,7 @@ pub fn trans_trait_cast(bcx: block,\n     match vstore {\n         ty::vstore_slice(*) | ty::vstore_box => {\n             let mut llboxdest = GEPi(bcx, lldest, [0u, 1u]);\n-            if bcx.tcx().legacy_boxed_traits.contains_key(id) {\n+            if bcx.tcx().legacy_boxed_traits.contains_key_ref(&id) {\n                 // Allocate an @ box and store the value into it\n                 let {bcx: new_bcx, box: llbox, body: body} =\n                     malloc_boxed(bcx, v_ty);"}, {"sha": "02e07e8484abd79f5fa59ceeb08438935569098f", "filename": "src/librustc/middle/trans/reachable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -22,7 +22,7 @@ use middle::ty;\n use middle::typeck;\n \n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::*;\n use syntax::ast_util::def_id_of_def;\n use syntax::attr;\n@@ -95,7 +95,7 @@ fn traverse_public_mod(cx: ctx, mod_id: node_id, m: _mod) {\n }\n \n fn traverse_public_item(cx: ctx, item: @item) {\n-    if cx.rmap.contains_key(item.id) { return; }\n+    if cx.rmap.contains_key_ref(&item.id) { return; }\n     cx.rmap.insert(item.id, ());\n     match /*bad*/copy item.node {\n       item_mod(m) => traverse_public_mod(cx, item.id, m),\n@@ -145,7 +145,7 @@ fn mk_ty_visitor() -> visit::vt<ctx> {\n }\n \n fn traverse_ty(ty: @Ty, cx: ctx, v: visit::vt<ctx>) {\n-    if cx.rmap.contains_key(ty.id) { return; }\n+    if cx.rmap.contains_key_ref(&ty.id) { return; }\n     cx.rmap.insert(ty.id, ());\n \n     match ty.node {"}, {"sha": "b9a055ad8ab23e02ed57702c110bedb47743b449", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -24,7 +24,7 @@ use middle::trans::meth;\n use middle::trans::type_of::*;\n use util::ppaux::ty_to_str;\n \n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::def_id;\n use syntax::ast;\n \n@@ -316,7 +316,7 @@ pub fn emit_calls_to_trait_visit_ty(bcx: block,\n                                  -> block {\n     use syntax::parse::token::special_idents::tydesc;\n     let final = sub_block(bcx, ~\"final\");\n-    assert bcx.ccx().tcx.intrinsic_defs.contains_key(tydesc);\n+    assert bcx.ccx().tcx.intrinsic_defs.contains_key_ref(&tydesc);\n     let (_, tydesc_ty) = bcx.ccx().tcx.intrinsic_defs.get(tydesc);\n     let tydesc_ty = type_of::type_of(bcx.ccx(), tydesc_ty);\n     let r = reflector({"}, {"sha": "4f0e59b723ec4507d172e0e4958abb6635573b51", "filename": "src/librustc/middle/trans/shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -26,7 +26,7 @@ use util::ppaux::ty_to_str;\n use core::dvec::DVec;\n use core::option::is_some;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast;\n use syntax::codemap::dummy_sp;\n use syntax::codemap::span;"}, {"sha": "72efab0c371c4eecfdbecbbfb0d4d5c3b0558f23", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -17,7 +17,7 @@ use middle::trans::expr;\n use middle::trans::machine;\n use util::ppaux;\n \n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast;\n \n pub fn type_of_explicit_arg(ccx: @crate_ctxt, arg: ty::arg) -> TypeRef {\n@@ -87,7 +87,7 @@ pub fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n     debug!(\"type_of %?: %?\", t, ty::get(t));\n \n     // Check the cache.\n-    if cx.lltypes.contains_key(t) { return cx.lltypes.get(t); }\n+    if cx.lltypes.contains_key_ref(&t) { return cx.lltypes.get(t); }\n \n     // Replace any typedef'd types with their equivalent non-typedef\n     // type. This ensures that all LLVM nominal types that contain"}, {"sha": "350b1393c33336b90291ab222dfbfff38cb7de12", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -38,7 +38,7 @@ use core::uint;\n use core::vec;\n use std::list::{List, Cons, Nil};\n use std::list;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::*;\n use syntax::ast_map;\n use syntax::ast_util;"}, {"sha": "4a0448c0b244920ba32934ec200cf8868e0c4279", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -41,8 +41,8 @@ use core::result;\n use core::to_bytes;\n use core::uint;\n use core::vec;\n-use std::map::HashMap;\n-use std::{map, oldsmallintmap};\n+use std::oldmap::HashMap;\n+use std::{oldmap, oldsmallintmap};\n use syntax::ast::*;\n use syntax::ast_util::{is_local, local_def};\n use syntax::ast_util;\n@@ -790,11 +790,11 @@ pub type node_type_table = @oldsmallintmap::SmallIntMap<t>;\n \n fn mk_rcache() -> creader_cache {\n     type val = {cnum: int, pos: uint, len: uint};\n-    return map::HashMap();\n+    return oldmap::HashMap();\n }\n \n-pub fn new_ty_hash<V: Copy>() -> map::HashMap<t, V> {\n-    map::HashMap()\n+pub fn new_ty_hash<V: Copy>() -> oldmap::HashMap<t, V> {\n+    oldmap::HashMap()\n }\n \n pub fn mk_ctxt(s: session::Session,\n@@ -822,7 +822,7 @@ pub fn mk_ctxt(s: session::Session,\n         }\n     }\n \n-    let interner = map::HashMap();\n+    let interner = oldmap::HashMap();\n     let vecs_implicitly_copyable =\n         get_lint_level(s.lint_settings.default_settings,\n                        lint::vecs_implicitly_copyable) == allow;\n@@ -839,9 +839,9 @@ pub fn mk_ctxt(s: session::Session,\n         region_map: region_map,\n         region_paramd_items: region_paramd_items,\n         node_types: @oldsmallintmap::mk(),\n-        node_type_substs: map::HashMap(),\n+        node_type_substs: oldmap::HashMap(),\n         items: amap,\n-        intrinsic_defs: map::HashMap(),\n+        intrinsic_defs: oldmap::HashMap(),\n         freevars: freevars,\n         tcache: HashMap(),\n         rcache: mk_rcache(),\n@@ -1745,7 +1745,7 @@ pub fn type_needs_unwind_cleanup(cx: ctxt, ty: t) -> bool {\n }\n \n fn type_needs_unwind_cleanup_(cx: ctxt, ty: t,\n-                              tycache: map::HashMap<t, ()>,\n+                              tycache: oldmap::HashMap<t, ()>,\n                               encountered_box: bool) -> bool {\n \n     // Prevent infinite recursion\n@@ -2795,11 +2795,11 @@ impl sty : to_bytes::IterBytes {\n }\n \n pub fn br_hashmap<V:Copy>() -> HashMap<bound_region, V> {\n-    map::HashMap()\n+    oldmap::HashMap()\n }\n \n pub fn node_id_to_type(cx: ctxt, id: ast::node_id) -> t {\n-    //io::println(fmt!(\"%?/%?\", id, cx.node_types.size()));\n+    //io::println(fmt!(\"%?/%?\", id, cx.node_types.len()));\n     match oldsmallintmap::find(*cx.node_types, id as uint) {\n        Some(t) => t,\n        None => cx.sess.bug(\n@@ -2817,7 +2817,7 @@ pub fn node_id_to_type_params(cx: ctxt, id: ast::node_id) -> ~[t] {\n }\n \n fn node_id_has_type_params(cx: ctxt, id: ast::node_id) -> bool {\n-    return cx.node_type_substs.contains_key(id);\n+    return cx.node_type_substs.contains_key_ref(&id);\n }\n \n // Type accessors for substructures of types\n@@ -3114,7 +3114,7 @@ pub enum ExprKind {\n pub fn expr_kind(tcx: ctxt,\n                  method_map: typeck::method_map,\n                  expr: @ast::expr) -> ExprKind {\n-    if method_map.contains_key(expr.id) {\n+    if method_map.contains_key_ref(&expr.id) {\n         // Overloaded operations are generally calls, and hence they are\n         // generated via DPS.  However, assign_op (e.g., `x += y`) is an\n         // exception, as its result is always unit.\n@@ -4359,7 +4359,7 @@ pub fn iter_bound_traits_and_supertraits(tcx: ctxt,\n         if f(trait_ty) {\n             // Add all the supertraits to the hash map,\n             // executing <f> on each of them\n-            while i < supertrait_map.size() && !fin {\n+            while i < supertrait_map.len() && !fin {\n                 let init_trait_id = seen_def_ids[i];\n                 i += 1;\n                  // Add supertraits to supertrait_map\n@@ -4368,7 +4368,7 @@ pub fn iter_bound_traits_and_supertraits(tcx: ctxt,\n                     let super_t = supertrait.tpt.ty;\n                     let d_id = ty_to_def_id(super_t).expect(\"supertrait \\\n                         should be a trait ty\");\n-                    if !supertrait_map.contains_key(d_id) {\n+                    if !supertrait_map.contains_key_ref(&d_id) {\n                         supertrait_map.insert(d_id, super_t);\n                         trait_ty = super_t;\n                         seen_def_ids.push(d_id);"}, {"sha": "3e898ce3aa676742c8887104e13c6e0987733304", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -20,7 +20,7 @@ use middle::typeck::check::{structure_of, valid_range_bounds};\n use middle::typeck::require_same_types;\n \n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast;\n use syntax::ast_util::walk_pat;\n use syntax::ast_util;\n@@ -239,7 +239,7 @@ pub fn check_struct_pat_fields(pcx: pat_ctxt,\n     // Report an error if not all the fields were specified.\n     if !etc {\n         for class_fields.eachi |i, field| {\n-            if found_fields.contains_key(i) {\n+            if found_fields.contains_key_ref(&i) {\n                 loop;\n             }\n             tcx.sess.span_err(span,"}, {"sha": "5a12f9fc3a1968e567b03928cba730c3dc4fc418", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -101,7 +101,7 @@ use core::dvec::DVec;\n use core::result;\n use core::uint;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::{def_id, sty_by_ref, sty_value, sty_region, sty_box};\n use syntax::ast::{sty_uniq, sty_static, node_id, by_copy, by_ref};\n use syntax::ast::{m_const, m_mutbl, m_imm};\n@@ -1171,11 +1171,12 @@ pub impl LookupContext {\n         match candidate.origin {\n             method_static(method_id) | method_self(method_id, _)\n                 | method_super(method_id, _) => {\n-                bad = self.tcx().destructors.contains_key(method_id);\n+                bad = self.tcx().destructors.contains_key_ref(&method_id);\n             }\n             method_param(method_param { trait_id: trait_id, _ }) |\n             method_trait(trait_id, _, _) => {\n-                bad = self.tcx().destructor_for_type.contains_key(trait_id);\n+                bad = self.tcx().destructor_for_type.contains_key_ref(\n+                    &trait_id);\n             }\n         }\n "}, {"sha": "f3abfe3282a3131a53bab4ea1e554b6e2c667895", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -115,8 +115,8 @@ use core::result;\n use core::str;\n use core::vec;\n use std::list::Nil;\n-use std::map::HashMap;\n-use std::map;\n+use std::oldmap::HashMap;\n+use std::oldmap;\n use syntax::ast::{provided, required, ty_i};\n use syntax::ast;\n use syntax::ast_map;\n@@ -209,9 +209,9 @@ pub fn blank_inherited(ccx: @crate_ctxt) -> @inherited {\n     @inherited {\n         infcx: infer::new_infer_ctxt(ccx.tcx),\n         locals: HashMap(),\n-        node_types: map::HashMap(),\n-        node_type_substs: map::HashMap(),\n-        adjustments: map::HashMap()\n+        node_types: oldmap::HashMap(),\n+        node_type_substs: oldmap::HashMap(),\n+        adjustments: oldmap::HashMap()\n     }\n }\n \n@@ -3078,8 +3078,8 @@ pub fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n       ~\"visit_tydesc\" => {\n           let tydesc_name = special_idents::tydesc;\n           let ty_visitor_name = tcx.sess.ident_of(~\"TyVisitor\");\n-          assert tcx.intrinsic_defs.contains_key(tydesc_name);\n-          assert ccx.tcx.intrinsic_defs.contains_key(ty_visitor_name);\n+          assert tcx.intrinsic_defs.contains_key_ref(&tydesc_name);\n+          assert ccx.tcx.intrinsic_defs.contains_key_ref(&ty_visitor_name);\n           let (_, tydesc_ty) = tcx.intrinsic_defs.get(tydesc_name);\n           let (_, visitor_trait) = tcx.intrinsic_defs.get(ty_visitor_name);\n           let td_ptr = ty::mk_ptr(ccx.tcx, ty::mt {ty: tydesc_ty,"}, {"sha": "9ae55d4556b15bc1b99d691de168a25e2efb160e", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -211,7 +211,7 @@ pub fn visit_expr(expr: @ast::expr, &&rcx: @rcx, v: rvt) {\n             // `constrain_auto_ref()` on all exprs.  But that causes a\n             // lot of spurious errors because of how the region\n             // hierarchy is setup.\n-            if rcx.fcx.ccx.method_map.contains_key(callee.id) {\n+            if rcx.fcx.ccx.method_map.contains_key_ref(&callee.id) {\n                 match callee.node {\n                     ast::expr_field(base, _, _) => {\n                         constrain_auto_ref(rcx, base);\n@@ -750,7 +750,7 @@ pub mod guarantor {\n         let _i = ::util::common::indenter();\n \n         let guarantor = {\n-            if rcx.fcx.ccx.method_map.contains_key(expr.id) {\n+            if rcx.fcx.ccx.method_map.contains_key_ref(&expr.id) {\n                 None\n             } else {\n                 guarantor(rcx, expr)"}, {"sha": "18a4f20d031b5be7bbe5ccd6360394287f8d4166", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -28,7 +28,7 @@ use core::result;\n use core::uint;\n use core::vec;\n use result::{Result, Ok, Err};\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::span;\n@@ -268,7 +268,7 @@ pub fn lookup_vtable(vcx: &VtableContext,\n                         // im is one specific impl of trait_ty.\n \n                         // First, ensure we haven't processed this impl yet.\n-                        if impls_seen.contains_key(im.did) {\n+                        if impls_seen.contains_key_ref(&im.did) {\n                             loop;\n                         }\n                         impls_seen.insert(im.did, ());"}, {"sha": "64ea45c8704001cf44747ddf56a35dc698c007e4", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -28,7 +28,7 @@ use util::ppaux;\n \n use core::result::{Result, Ok, Err};\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast;\n use syntax::codemap::span;\n use syntax::print::pprust::pat_to_str;\n@@ -141,7 +141,7 @@ fn maybe_resolve_type_vars_for_node(wbcx: wb_ctxt, sp: span,\n                                     id: ast::node_id)\n     -> Option<ty::t>\n {\n-    if wbcx.fcx.inh.node_types.contains_key(id) {\n+    if wbcx.fcx.inh.node_types.contains_key_ref(&id) {\n         resolve_type_vars_for_node(wbcx, sp, id)\n     } else {\n         None"}, {"sha": "5ad8fd4c8208ce311fcb37619759f493743ef2e8", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -63,7 +63,7 @@ use core::uint::range;\n use core::uint;\n use core::vec::{len, push};\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub struct UniversalQuantificationResult {\n     monotype: t,\n@@ -417,7 +417,7 @@ pub impl CoherenceChecker {\n         let coherence_info = &self.crate_context.coherence_info;\n         let extension_methods = &coherence_info.extension_methods;\n \n-        for extension_methods.each_key |trait_id| {\n+        for extension_methods.each_key_ref |&trait_id| {\n             self.check_implementation_coherence_of(trait_id);\n         }\n     }\n@@ -502,7 +502,7 @@ pub impl CoherenceChecker {\n         }\n \n         for ty::trait_methods(tcx, trait_did).each |method| {\n-            if provided_method_idents.contains_key(method.ident) {\n+            if provided_method_idents.contains_key_ref(&method.ident) {\n                 if !f(method) {\n                     break;\n                 }\n@@ -912,7 +912,7 @@ pub impl CoherenceChecker {\n         let tcx = self.crate_context.tcx;\n         let pmm = tcx.provided_methods;\n \n-        if pmm.contains_key(trait_def_id) { return; }\n+        if pmm.contains_key_ref(&trait_def_id) { return; }\n \n         debug!(\"(adding default methods for trait) processing trait\");\n "}, {"sha": "32d924891886aac8fe29d8304b0766a755883a87", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -326,7 +326,7 @@ pub fn ensure_supertraits(ccx: @crate_ctxt,\n                           rp: Option<ty::region_variance>,\n                           trait_refs: &[@ast::trait_ref]) {\n     let tcx = ccx.tcx;\n-    if tcx.supertraits.contains_key(local_def(id)) { return; }\n+    if tcx.supertraits.contains_key_ref(&local_def(id)) { return; }\n \n     let instantiated = dvec::DVec();\n     for trait_refs.each |trait_ref| {"}, {"sha": "6140390a24e127f5ea05587ebac98510a4bdb09e", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -280,7 +280,7 @@ use core::result::{Result, Ok, Err, map_vec, map_vec2, iter_vec2};\n use core::result;\n use core::vec;\n use std::list::Nil;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std::oldsmallintmap;\n use syntax::ast::{ret_style, purity};\n use syntax::ast::{m_const, m_imm, m_mutbl};"}, {"sha": "1a8e25239b34a28f40b4ccdb6ecf917ed7688e72", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -559,7 +559,7 @@ use core::uint;\n use core::vec;\n use result::Result;\n use result::{Ok, Err};\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std::cell::{Cell, empty_cell};\n use std::list::{List, Nil, Cons};\n use syntax::codemap::span;\n@@ -712,11 +712,11 @@ pub impl RegionVarBindings {\n                 assert self.var_spans.len() == *vid + 1;\n                 self.var_spans.pop();\n               }\n-              AddConstraint(constraint) => {\n+              AddConstraint(ref constraint) => {\n                 self.constraints.remove(constraint);\n               }\n               AddCombination(map, ref regions) => {\n-                map.remove((*regions));\n+                map.remove(regions);\n               }\n             }\n         }\n@@ -1226,7 +1226,7 @@ impl RegionVarBindings {\n \n     fn construct_graph(&self) -> Graph {\n         let num_vars = self.num_vars();\n-        let num_edges = self.constraints.size();\n+        let num_edges = self.constraints.len();\n \n         let nodes = vec::from_fn(num_vars, |var_idx| {\n             GraphNode {"}, {"sha": "416dcbcd30a1b9dddcb152d0c333a1b66959b19c", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -30,7 +30,7 @@ use std::getopts::groups;\n use std::getopts::{opt_present};\n use std::getopts;\n use std::getopts;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::codemap::dummy_sp;\n use syntax::parse::parse_crate_from_source_str;\n use syntax::{ast, attr, parse};"}, {"sha": "d292f04caa4066d23eb68f25b8758c85045d9415", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -67,8 +67,8 @@ use core::result;\n use core::vec;\n use std::list::{List, Nil, Cons};\n use std::list;\n-use std::map::HashMap;\n-use std::map;\n+use std::oldmap::HashMap;\n+use std::oldmap;\n use std::oldsmallintmap;\n use syntax::ast::{provided, required};\n use syntax::ast_map::node_id_to_str;\n@@ -377,8 +377,8 @@ pub fn check_crate(tcx: ty::ctxt,\n \n     let ccx = @crate_ctxt_(crate_ctxt__ {\n         trait_map: trait_map,\n-        method_map: map::HashMap(),\n-        vtable_map: map::HashMap(),\n+        method_map: oldmap::HashMap(),\n+        vtable_map: oldmap::HashMap(),\n         coherence_info: @coherence::CoherenceInfo(),\n         tcx: tcx\n     });"}, {"sha": "99203d9d6a4066b9e74887fafb28ae363f544acf", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -136,7 +136,7 @@ pub mod lib {\n use result::{Ok, Err};\n use io::ReaderUtil;\n use std::getopts;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use getopts::{opt_present};\n use getopts::groups;\n use syntax::codemap;\n@@ -177,7 +177,7 @@ Available lint options:\n \n     let lint_dict = lint::get_lint_dict();\n     let mut max_key = 0;\n-    for lint_dict.each_key |k| { max_key = uint::max(k.len(), max_key); }\n+    for lint_dict.each_key_ref |&k| { max_key = uint::max(k.len(), max_key); }\n     fn padded(max: uint, s: &str) -> ~str {\n         str::from_bytes(vec::from_elem(max - s.len(), ' ' as u8)) + s\n     }\n@@ -186,7 +186,7 @@ Available lint options:\n                      padded(max_key, ~\"name\"), ~\"default\", ~\"meaning\"));\n     io::println(fmt!(\"    %s  %7.7s  %s\\n\",\n                      padded(max_key, ~\"----\"), ~\"-------\", ~\"-------\"));\n-    for lint_dict.each |k, v| {\n+    for lint_dict.each_ref |&k, &v| {\n         let k = str::replace(k, ~\"_\", ~\"-\");\n         io::println(fmt!(\"    %s  %7.7s  %s\",\n                          padded(max_key, k),"}, {"sha": "85f4ba94e5a9bd541f3a2191b66a357140aeecb8", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -19,7 +19,7 @@ use syntax;\n use core::option;\n use core::str;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub fn indent<R>(op: fn() -> R) -> R {\n     // Use in conjunction with the log post-processor like `src/etc/indenter`"}, {"sha": "2ed2d3ea5d7fe255bfe49d4a4cc448a8bf6656b0", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -36,7 +36,7 @@ use syntax::ast_map;\n \n use core::str;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub fn note_and_explain_region(cx: ctxt,\n                                prefix: ~str,"}, {"sha": "dd6e889008f3b3bb275064be92f4f39d8b391ef5", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -32,7 +32,7 @@ use rustc::driver::session::{basic_options, options};\n use rustc::driver::session;\n use rustc::front;\n use rustc::metadata::filesearch;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::codemap;\n@@ -164,7 +164,7 @@ fn srv_should_build_ast_map() {\n     let source = ~\"fn a() { }\";\n     do from_str(source) |srv| {\n         do exec(srv) |ctxt| {\n-            assert ctxt.ast_map.size() != 0u\n+            assert !ctxt.ast_map.is_empty()\n         };\n     }\n }"}, {"sha": "0e70900520d2ceeac3083de98c4ed70513467c05", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -31,7 +31,7 @@ use core::option;\n use core::vec;\n use syntax::ast;\n use syntax::ast_map;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std::par;\n \n pub fn mk_pass() -> Pass {"}, {"sha": "f039bb74583e56a8e1cbcb6d828d4bd779b66bdd", "filename": "src/librustdoc/prune_hidden_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_hidden_pass.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -19,7 +19,7 @@ use fold;\n use pass::Pass;\n \n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub fn mk_pass() -> Pass {\n     Pass {"}, {"sha": "4ab40530cfb875ff5f8ef5c84f30b788d90597b4", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -22,7 +22,7 @@ use fold;\n use pass::Pass;\n \n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std::par;\n use syntax::ast;\n use syntax::print::pprust;"}, {"sha": "b9e3b29b152495d8c751aaaa51266efd41d67b8d", "filename": "src/libstd/json.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -1162,18 +1162,6 @@ impl <A: ToJson Copy> LinearMap<~str, A>: ToJson {\n     }\n }\n \n-/*\n-impl <A: ToJson Copy> @std::map::HashMap<~str, A>: ToJson {\n-    fn to_json() -> Json {\n-        let mut d = LinearMap::new();\n-        for self.each_ref |key, value| {\n-            d.insert(copy *key, value.to_json());\n-        }\n-        Object(~d)\n-    }\n-}\n-*/\n-\n impl <A: ToJson> Option<A>: ToJson {\n     fn to_json() -> Json {\n         match self {"}, {"sha": "d8fecda73a7bb8e9afda5ba9e3809218a91422b7", "filename": "src/libstd/oldmap.rs", "status": "renamed", "additions": 56, "deletions": 145, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibstd%2Foldmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibstd%2Foldmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foldmap.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -8,16 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! A map type\n+//! A map type - **deprecated**, use `core::hashmap` instead\n #[forbid(deprecated_mode)];\n \n+use core::container::{Container, Mutable, Map};\n use core::cmp::Eq;\n use core::hash::Hash;\n use core::io::WriterUtil;\n use core::io;\n use core::ops;\n use core::to_str::ToStr;\n-use core::mutable::Mut;\n use core::prelude::*;\n use core::to_bytes::IterBytes;\n use core::uint;\n@@ -28,84 +28,6 @@ pub type Set<K> = HashMap<K, ()>;\n \n pub type HashMap<K, V> = chained::T<K, V>;\n \n-pub trait StdMap<K:Eq IterBytes Hash Copy, V: Copy> {\n-    /// Return the number of elements in the map\n-    pure fn size() -> uint;\n-\n-    /**\n-     * Add a value to the map.\n-     *\n-     * If the map already contains a value for the specified key then the\n-     * original value is replaced.\n-     *\n-     * Returns true if the key did not already exist in the map\n-     */\n-    fn insert(key: K, value: V) -> bool;\n-\n-    /**\n-     * Add a value to the map.\n-     *\n-     * If the map contains a value for the key, use the function\n-     * to set a new value.\n-     */\n-    fn update_with_key(key: K, newval: V, ff: fn(K, V, V) -> V) -> bool;\n-\n-    /**\n-     * Add a value to the map.\n-     *\n-     * If the map contains a value for the key, use the function to\n-     * set a new value.  (Like `update_with_key`, but with a\n-     * function of only values.)\n-     */\n-    fn update(key: K, newval: V, ff: fn(V, V) -> V) -> bool;\n-\n-    /// Returns true if the map contains a value for the specified key\n-    pure fn contains_key(key: K) -> bool;\n-\n-    /// Returns true if the map contains a value for the specified\n-    /// key, taking the key by reference.\n-    pure fn contains_key_ref(key: &K) -> bool;\n-\n-    /**\n-     * Get the value for the specified key. Fails if the key does not exist in\n-     * the map.\n-     */\n-    pure fn get(key: K) -> V;\n-\n-    /**\n-     * Get the value for the specified key. If the key does not exist in\n-     * the map then returns none.\n-     */\n-    pure fn find(key: K) -> Option<V>;\n-\n-    /**\n-     * Remove and return a value from the map. Returns true if the\n-     * key was present in the map, otherwise false.\n-     */\n-    fn remove(key: K) -> bool;\n-\n-    /// Clear the map, removing all key/value pairs.\n-    fn clear();\n-\n-    /// Iterate over all the key/value pairs in the map by value\n-    pure fn each(fn(key: K, value: V) -> bool);\n-\n-    /// Iterate over all the keys in the map by value\n-    pure fn each_key(fn(key: K) -> bool);\n-\n-    /// Iterate over all the values in the map by value\n-    pure fn each_value(fn(value: V) -> bool);\n-\n-    /// Iterate over all the key/value pairs in the map by reference\n-    pure fn each_ref(fn(key: &K, value: &V) -> bool);\n-\n-    /// Iterate over all the keys in the map by reference\n-    pure fn each_key_ref(fn(key: &K) -> bool);\n-\n-    /// Iterate over all the values in the map by reference\n-    pure fn each_value_ref(fn(value: &V) -> bool);\n-}\n-\n pub mod util {\n     pub struct Rational {\n         // : int::positive(*.den);\n@@ -124,7 +46,7 @@ pub mod util {\n // FIXME (#2344): package this up and export it as a datatype usable for\n // external code that doesn't want to pay the cost of a box.\n pub mod chained {\n-    use map::{StdMap, util};\n+    use super::util;\n \n     use core::io;\n     use core::ops;\n@@ -239,14 +161,20 @@ pub mod chained {\n         }\n     }\n \n-    impl<K:Eq IterBytes Hash Copy, V: Copy> T<K, V>: StdMap<K, V> {\n-        pure fn size() -> uint { self.count }\n+    impl<K: Eq IterBytes Hash, V> T<K, V>: Container {\n+        pure fn len(&self) -> uint { self.count }\n+        pure fn is_empty(&self) -> bool { self.count == 0 }\n+    }\n \n-        pure fn contains_key(k: K) -> bool {\n-            self.contains_key_ref(&k)\n+    impl<K: Eq IterBytes Hash, V> T<K, V>: Mutable {\n+        fn clear(&mut self) {\n+            self.count = 0u;\n+            self.chains = chains(initial_capacity);\n         }\n+    }\n \n-        pure fn contains_key_ref(k: &K) -> bool {\n+    impl<K:Eq IterBytes Hash Copy, V: Copy> T<K, V> {\n+        pure fn contains_key_ref(&self, k: &K) -> bool {\n             let hash = k.hash_keyed(0,0) as uint;\n             match self.search_tbl(k, hash) {\n               NotFound => false,\n@@ -298,7 +226,7 @@ pub mod chained {\n             }\n         }\n \n-        pure fn find(k: K) -> Option<V> {\n+        pure fn find(&self, k: K) -> Option<V> {\n             unsafe {\n                 match self.search_tbl(&k, k.hash_keyed(0,0) as uint) {\n                   NotFound => None,\n@@ -363,16 +291,16 @@ pub mod chained {\n             return self.update_with_key(key, newval, |_k, v, v1| ff(v,v1));\n         }\n \n-        pure fn get(k: K) -> V {\n+        pure fn get(&self, k: K) -> V {\n             let opt_v = self.find(k);\n             if opt_v.is_none() {\n                 die!(fmt!(\"Key not found in table: %?\", k));\n             }\n             option::unwrap(move opt_v)\n         }\n \n-        fn remove(k: K) -> bool {\n-            match self.search_tbl(&k, k.hash_keyed(0,0) as uint) {\n+        fn remove(k: &K) -> bool {\n+            match self.search_tbl(k, k.hash_keyed(0,0) as uint) {\n               NotFound => false,\n               FoundFirst(idx, entry) => {\n                 self.count -= 1u;\n@@ -387,34 +315,17 @@ pub mod chained {\n             }\n         }\n \n-        fn clear() {\n-            self.count = 0u;\n-            self.chains = chains(initial_capacity);\n-        }\n-\n-        pure fn each(blk: fn(key: K, value: V) -> bool) {\n-            self.each_ref(|k, v| blk(*k, *v))\n-        }\n-\n-        pure fn each_key(blk: fn(key: K) -> bool) {\n-            self.each_key_ref(|p| blk(*p))\n-        }\n-\n-        pure fn each_value(blk: fn(value: V) -> bool) {\n-            self.each_value_ref(|p| blk(*p))\n-        }\n-\n-        pure fn each_ref(blk: fn(key: &K, value: &V) -> bool) {\n+        pure fn each_ref(&self, blk: fn(key: &K, value: &V) -> bool) {\n             for self.each_entry |entry| {\n                 if !blk(&entry.key, &entry.value) { break; }\n             }\n         }\n \n-        pure fn each_key_ref(blk: fn(key: &K) -> bool) {\n+        pure fn each_key_ref(&self, blk: fn(key: &K) -> bool) {\n             self.each_ref(|k, _v| blk(k))\n         }\n \n-        pure fn each_value_ref(blk: fn(value: &V) -> bool) {\n+        pure fn each_value_ref(&self, blk: fn(value: &V) -> bool) {\n             self.each_ref(|_k, v| blk(v))\n         }\n     }\n@@ -486,8 +397,8 @@ pub fn set_add<K:Eq IterBytes Hash Const Copy>(set: Set<K>, key: K) -> bool {\n \n /// Convert a set into a vector.\n pub pure fn vec_from_set<T:Eq IterBytes Hash Copy>(s: Set<T>) -> ~[T] {\n-    do vec::build_sized(s.size()) |push| {\n-        for s.each_key() |k| {\n+    do vec::build_sized(s.len()) |push| {\n+        for s.each_key_ref() |&k| {\n             push(k);\n         }\n     }\n@@ -509,20 +420,20 @@ pub fn hash_from_vec<K: Eq IterBytes Hash Const Copy, V: Copy>(\n \n #[cfg(test)]\n mod tests {\n-    use map;\n-\n     use core::option::None;\n     use core::option;\n     use core::uint;\n \n+    use super::*;\n+\n     #[test]\n     fn test_simple() {\n         debug!(\"*** starting test_simple\");\n         pure fn eq_uint(x: &uint, y: &uint) -> bool { *x == *y }\n         pure fn uint_id(x: &uint) -> uint { *x }\n         debug!(\"uint -> uint\");\n-        let hm_uu: map::HashMap<uint, uint> =\n-            map::HashMap::<uint, uint>();\n+        let hm_uu: HashMap<uint, uint> =\n+            HashMap::<uint, uint>();\n         assert (hm_uu.insert(10u, 12u));\n         assert (hm_uu.insert(11u, 13u));\n         assert (hm_uu.insert(12u, 14u));\n@@ -537,8 +448,8 @@ mod tests {\n         let eleven: ~str = ~\"eleven\";\n         let twelve: ~str = ~\"twelve\";\n         debug!(\"str -> uint\");\n-        let hm_su: map::HashMap<~str, uint> =\n-            map::HashMap::<~str, uint>();\n+        let hm_su: HashMap<~str, uint> =\n+            HashMap::<~str, uint>();\n         assert (hm_su.insert(~\"ten\", 12u));\n         assert (hm_su.insert(eleven, 13u));\n         assert (hm_su.insert(~\"twelve\", 14u));\n@@ -551,8 +462,8 @@ mod tests {\n         assert (!hm_su.insert(~\"twelve\", 12u));\n         assert (hm_su.get(~\"twelve\") == 12u);\n         debug!(\"uint -> str\");\n-        let hm_us: map::HashMap<uint, ~str> =\n-            map::HashMap::<uint, ~str>();\n+        let hm_us: HashMap<uint, ~str> =\n+            HashMap::<uint, ~str>();\n         assert (hm_us.insert(10u, ~\"twelve\"));\n         assert (hm_us.insert(11u, ~\"thirteen\"));\n         assert (hm_us.insert(12u, ~\"fourteen\"));\n@@ -564,8 +475,8 @@ mod tests {\n         assert (!hm_us.insert(12u, ~\"twelve\"));\n         assert hm_us.get(12u) == ~\"twelve\";\n         debug!(\"str -> str\");\n-        let hm_ss: map::HashMap<~str, ~str> =\n-            map::HashMap::<~str, ~str>();\n+        let hm_ss: HashMap<~str, ~str> =\n+            HashMap::<~str, ~str>();\n         assert (hm_ss.insert(ten, ~\"twelve\"));\n         assert (hm_ss.insert(eleven, ~\"thirteen\"));\n         assert (hm_ss.insert(twelve, ~\"fourteen\"));\n@@ -590,8 +501,8 @@ mod tests {\n         pure fn eq_uint(x: &uint, y: &uint) -> bool { *x == *y }\n         pure fn uint_id(x: &uint) -> uint { *x }\n         debug!(\"uint -> uint\");\n-        let hm_uu: map::HashMap<uint, uint> =\n-            map::HashMap::<uint, uint>();\n+        let hm_uu: HashMap<uint, uint> =\n+            HashMap::<uint, uint>();\n         let mut i: uint = 0u;\n         while i < num_to_insert {\n             assert (hm_uu.insert(i, i * i));\n@@ -615,8 +526,8 @@ mod tests {\n             i += 1u;\n         }\n         debug!(\"str -> str\");\n-        let hm_ss: map::HashMap<~str, ~str> =\n-            map::HashMap::<~str, ~str>();\n+        let hm_ss: HashMap<~str, ~str> =\n+            HashMap::<~str, ~str>();\n         i = 0u;\n         while i < num_to_insert {\n             assert hm_ss.insert(uint::to_str_radix(i, 2u),\n@@ -657,24 +568,24 @@ mod tests {\n     fn test_removal() {\n         debug!(\"*** starting test_removal\");\n         let num_to_insert: uint = 64u;\n-        let hm: map::HashMap<uint, uint> =\n-            map::HashMap::<uint, uint>();\n+        let hm: HashMap<uint, uint> =\n+            HashMap::<uint, uint>();\n         let mut i: uint = 0u;\n         while i < num_to_insert {\n             assert (hm.insert(i, i * i));\n             debug!(\"inserting %u -> %u\", i, i*i);\n             i += 1u;\n         }\n-        assert (hm.size() == num_to_insert);\n+        assert (hm.len() == num_to_insert);\n         debug!(\"-----\");\n         debug!(\"removing evens\");\n         i = 0u;\n         while i < num_to_insert {\n-            let v = hm.remove(i);\n+            let v = hm.remove(&i);\n             assert v;\n             i += 2u;\n         }\n-        assert (hm.size() == num_to_insert / 2u);\n+        assert (hm.len() == num_to_insert / 2u);\n         debug!(\"-----\");\n         i = 1u;\n         while i < num_to_insert {\n@@ -696,7 +607,7 @@ mod tests {\n             debug!(\"inserting %u -> %u\", i, i*i);\n             i += 2u;\n         }\n-        assert (hm.size() == num_to_insert);\n+        assert (hm.len() == num_to_insert);\n         debug!(\"-----\");\n         i = 0u;\n         while i < num_to_insert {\n@@ -705,7 +616,7 @@ mod tests {\n             i += 1u;\n         }\n         debug!(\"-----\");\n-        assert (hm.size() == num_to_insert);\n+        assert (hm.len() == num_to_insert);\n         i = 0u;\n         while i < num_to_insert {\n             debug!(\"get(%u) = %u\", i, hm.get(i));\n@@ -718,16 +629,16 @@ mod tests {\n     #[test]\n     fn test_contains_key() {\n         let key = ~\"k\";\n-        let map = map::HashMap::<~str, ~str>();\n-        assert (!map.contains_key(key));\n+        let map = HashMap::<~str, ~str>();\n+        assert (!map.contains_key_ref(&key));\n         map.insert(key, ~\"val\");\n-        assert (map.contains_key(key));\n+        assert (map.contains_key_ref(&key));\n     }\n \n     #[test]\n     fn test_find() {\n         let key = ~\"k\";\n-        let map = map::HashMap::<~str, ~str>();\n+        let map = HashMap::<~str, ~str>();\n         assert (option::is_none(&map.find(key)));\n         map.insert(key, ~\"val\");\n         assert (option::get(map.find(key)) == ~\"val\");\n@@ -736,31 +647,31 @@ mod tests {\n     #[test]\n     fn test_clear() {\n         let key = ~\"k\";\n-        let map = map::HashMap::<~str, ~str>();\n+        let mut map = HashMap::<~str, ~str>();\n         map.insert(key, ~\"val\");\n-        assert (map.size() == 1);\n-        assert (map.contains_key(key));\n+        assert (map.len() == 1);\n+        assert (map.contains_key_ref(&key));\n         map.clear();\n-        assert (map.size() == 0);\n-        assert (!map.contains_key(key));\n+        assert (map.len() == 0);\n+        assert (!map.contains_key_ref(&key));\n     }\n \n     #[test]\n     fn test_hash_from_vec() {\n-        let map = map::hash_from_vec(~[\n+        let map = hash_from_vec(~[\n             (~\"a\", 1),\n             (~\"b\", 2),\n             (~\"c\", 3)\n         ]);\n-        assert map.size() == 3u;\n+        assert map.len() == 3u;\n         assert map.get(~\"a\") == 1;\n         assert map.get(~\"b\") == 2;\n         assert map.get(~\"c\") == 3;\n     }\n \n     #[test]\n     fn test_update_with_key() {\n-        let map = map::HashMap::<~str, uint>();\n+        let map = HashMap::<~str, uint>();\n \n         // given a new key, initialize it with this new count, given\n         // given an existing key, add more to its count", "previous_filename": "src/libstd/map.rs"}, {"sha": "65122bea7506e5a3926d093c6b9fab0c8bffb0fd", "filename": "src/libstd/std.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -79,7 +79,7 @@ pub mod bitv;\n pub mod deque;\n pub mod fun_treemap;\n pub mod list;\n-pub mod map;\n+pub mod oldmap;\n pub mod priority_queue;\n pub mod rope;\n pub mod smallintmap;"}, {"sha": "e6a4639ad80684f732b775a4044686e4b2496d9d", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -25,8 +25,8 @@ use core::cmp;\n use core::either;\n use core::str;\n use core::vec;\n-use std::map::HashMap;\n-use std::map;\n+use std::oldmap::HashMap;\n+use std::oldmap;\n use std;\n \n pub enum path_elt {\n@@ -106,7 +106,7 @@ pub enum ast_node {\n     node_struct_ctor(@struct_def, @item, @path),\n }\n \n-pub type map = std::map::HashMap<node_id, ast_node>;\n+pub type map = std::oldmap::HashMap<node_id, ast_node>;\n pub struct ctx {\n     map: map,\n     mut path: path,\n@@ -134,7 +134,7 @@ pub fn mk_ast_map_visitor() -> vt {\n \n pub fn map_crate(diag: span_handler, c: crate) -> map {\n     let cx = ctx {\n-        map: std::map::HashMap(),\n+        map: std::oldmap::HashMap(),\n         mut path: ~[],\n         mut local_id: 0u,\n         diag: diag,"}, {"sha": "c6c79f1289c0911b83f67f52ed40eab3ae9048ae", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -24,8 +24,8 @@ use core::either::Either;\n use core::either;\n use core::option;\n use core::vec;\n-use std::map::HashMap;\n-use std::map;\n+use std::oldmap::HashMap;\n+use std::oldmap;\n use std;\n \n /* Constructors */\n@@ -358,12 +358,12 @@ pub fn find_inline_attr(attrs: &[ast::attribute]) -> inline_attr {\n \n pub fn require_unique_names(diagnostic: span_handler,\n                             metas: &[@ast::meta_item]) {\n-    let map = map::HashMap();\n+    let map = oldmap::HashMap();\n     for metas.each |meta| {\n         let name = get_meta_item_name(*meta);\n \n         // FIXME: How do I silence the warnings? --pcw (#2619)\n-        if map.contains_key(name) {\n+        if map.contains_key_ref(&name) {\n             diagnostic.span_fatal(meta.span,\n                                   fmt!(\"duplicate meta item `%s`\", name));\n         }"}, {"sha": "03aa0cde811025573ea94e8393a5249ab4d60a58", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -98,8 +98,8 @@ use ext::base::*;\n use parse;\n \n use core::vec;\n-use std::map;\n-use std::map::HashMap;\n+use std::oldmap;\n+use std::oldmap::HashMap;\n \n // Transitional reexports so qquote can find the paths it is looking for\n mod syntax {"}, {"sha": "3efae9559656b16585fc6062800dbee62d123a5e", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -20,7 +20,7 @@ use parse::{parser, token};\n \n use core::io;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n // new-style macro! tt code:\n //"}, {"sha": "227a86e0766fd3ccb19af9cc9f9a8411e9106e9f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -20,7 +20,7 @@ use parse::{parser, parse_expr_from_source_str, new_parser_from_tts};\n \n use core::option;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub fn expand_expr(exts: HashMap<~str, SyntaxExtension>, cx: ext_ctxt,\n                    e: expr_, s: span, fld: ast_fold,"}, {"sha": "9548db70b94c3e85f7d8652d07f4673517629a27", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -26,7 +26,7 @@ use core::option;\n use core::str;\n use core::uint;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n /* This is an Earley-like parser, without support for in-grammar nonterminals,\n only by calling out to the main rust parser for named nonterminals (which it\n@@ -197,7 +197,7 @@ pub fn nameize(p_s: parse_sess, ms: ~[matcher], res: ~[@named_match])\n           codemap::spanned {\n                 node: match_nonterminal(bind_name, _, idx), span: sp\n           } => {\n-            if ret_val.contains_key(bind_name) {\n+            if ret_val.contains_key_ref(&bind_name) {\n                 p_s.span_diagnostic.span_fatal(sp, ~\"Duplicated bind name: \"+\n                                                *p_s.interner.get(bind_name))\n             }"}, {"sha": "31172cbfa85275016c4baf4eb01b8ac34f439133", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -26,7 +26,7 @@ use parse::token::{FAT_ARROW, SEMI, LBRACE, RBRACE, nt_matchers, nt_tt};\n use print;\n \n use core::io;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n                          arg: ~[ast::token_tree]) -> base::MacResult {"}, {"sha": "6bf90617a6e96e0fa943135bb4baec9ca7972fb3", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -22,7 +22,7 @@ use parse::lexer::TokenAndSpan;\n use core::option;\n use core::vec;\n use std;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n enum tt_frame_up { /* to break a circularity */\n     tt_frame_up(Option<tt_frame>)\n@@ -44,7 +44,7 @@ pub type tt_reader = @{\n     interner: @ident_interner,\n     mut cur: tt_frame,\n     /* for MBE-style macro transcription */\n-    interpolations: std::map::HashMap<ident, @named_match>,\n+    interpolations: std::oldmap::HashMap<ident, @named_match>,\n     mut repeat_idx: ~[uint],\n     mut repeat_len: ~[uint],\n     /* cached: */\n@@ -56,14 +56,14 @@ pub type tt_reader = @{\n  *  `src` contains no `tt_seq`s and `tt_nonterminal`s, `interp` can (and\n  *  should) be none. */\n pub fn new_tt_reader(sp_diag: span_handler, itr: @ident_interner,\n-                     interp: Option<std::map::HashMap<ident,@named_match>>,\n+                     interp: Option<std::oldmap::HashMap<ident,@named_match>>,\n                      src: ~[ast::token_tree])\n                   -> tt_reader {\n     let r = @{sp_diag: sp_diag, interner: itr,\n               mut cur: @{readme: src, mut idx: 0u, dotdotdoted: false,\n                          sep: None, up: tt_frame_up(option::None)},\n               interpolations: match interp { /* just a convienience */\n-                None => std::map::HashMap(),\n+                None => std::oldmap::HashMap(),\n                 Some(x) => x\n               },\n               mut repeat_idx: ~[],"}, {"sha": "d82a5a1803949b037824546d2b2fb116d296fd15", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -18,7 +18,7 @@ use parse::token;\n \n use core::option::{None, Option, Some};\n use core::option;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub type seq_sep = {\n     sep: Option<token::Token>,"}, {"sha": "cdde542bb1f32381c52de8736e455a51f19fcd84", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -137,7 +137,7 @@ pub impl Parser {\n                    desc: &str) {\n         self.span_err(sp, fmt!(\"obsolete syntax: %s\", kind_str));\n \n-        if !self.obsolete_set.contains_key(kind) {\n+        if !self.obsolete_set.contains_key_ref(&kind) {\n             self.sess.span_diagnostic.handler().note(fmt!(\"%s\", desc));\n             self.obsolete_set.insert(kind, ());\n         }"}, {"sha": "3c7250112ab1f74a0128314bc0419671c1923681", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -87,7 +87,7 @@ use core::either;\n use core::result::Result;\n use core::vec::push;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n #[deriving_eq]\n enum restriction {"}, {"sha": "2770d823bf3776bfdb70be874dcd12ecf72a5e2c", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -21,7 +21,7 @@ use core::char;\n use core::cmp;\n use core::str;\n use core::task;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n #[auto_encode]\n #[auto_decode]\n@@ -454,13 +454,13 @@ pub fn mk_fake_ident_interner() -> @ident_interner {\n  */\n pub fn keyword_table() -> HashMap<~str, ()> {\n     let keywords = HashMap();\n-    for temporary_keyword_table().each_key |word| {\n+    for temporary_keyword_table().each_key_ref |&word| {\n         keywords.insert(word, ());\n     }\n-    for strict_keyword_table().each_key |word| {\n+    for strict_keyword_table().each_key_ref |&word| {\n         keywords.insert(word, ());\n     }\n-    for reserved_keyword_table().each_key |word| {\n+    for reserved_keyword_table().each_key_ref |&word| {\n         keywords.insert(word, ());\n     }\n     keywords"}, {"sha": "19b938ccd687a47e097e9992353f2144b299bb79", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -15,13 +15,13 @@\n use core::prelude::*;\n \n use core::dvec::DVec;\n-use std::map::HashMap;\n-use std::map;\n+use std::oldmap::HashMap;\n+use std::oldmap;\n \n pub type hash_interner<T> = {map: HashMap<T, uint>, vect: DVec<T>};\n \n pub fn mk<T:Eq IterBytes Hash Const Copy>() -> Interner<T> {\n-    let m = map::HashMap::<T, uint>();\n+    let m = oldmap::HashMap::<T, uint>();\n     let hi: hash_interner<T> =\n         {map: m, vect: DVec()};\n     move ((move hi) as Interner::<T>)"}, {"sha": "748c209229c29b965a9813775089d65acf8c6136", "filename": "src/test/auxiliary/issue-2631-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -14,7 +14,7 @@\n extern mod std;\n \n use core::dvec::*;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub type header_map = HashMap<~str, @DVec<@~str>>;\n "}, {"sha": "67c071da26dae6397f81f557097553090ea1a47b", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n extern mod std;\n-use std::map;\n+use std::oldmap;\n use std::treemap::TreeMap;\n use core::hashmap::linear::*;\n use core::io::WriterUtil;\n@@ -35,7 +35,7 @@ fn timed(result: &mut float,\n fn old_int_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n \n     {\n-        let map = map::HashMap();\n+        let map = oldmap::HashMap();\n         do timed(&mut results.sequential_ints) {\n             for uint::range(0, num_keys) |i| {\n                 map.insert(i, i+1);\n@@ -48,7 +48,7 @@ fn old_int_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n     }\n \n     {\n-        let map = map::HashMap();\n+        let map = oldmap::HashMap();\n         do timed(&mut results.random_ints) {\n             for uint::range(0, num_keys) |i| {\n                 map.insert(rng.next() as uint, i);\n@@ -57,22 +57,22 @@ fn old_int_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n     }\n \n     {\n-        let map = map::HashMap();\n+        let map = oldmap::HashMap();\n         for uint::range(0, num_keys) |i| {\n             map.insert(i, i);;\n         }\n \n         do timed(&mut results.delete_ints) {\n             for uint::range(0, num_keys) |i| {\n-                assert map.remove(i);\n+                assert map.remove(&i);\n             }\n         }\n     }\n }\n \n fn old_str_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n     {\n-        let map = map::HashMap();\n+        let map = oldmap::HashMap();\n         do timed(&mut results.sequential_strings) {\n             for uint::range(0, num_keys) |i| {\n                 let s = uint::to_str(i);\n@@ -87,7 +87,7 @@ fn old_str_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n     }\n \n     {\n-        let map = map::HashMap();\n+        let map = oldmap::HashMap();\n         do timed(&mut results.random_strings) {\n             for uint::range(0, num_keys) |i| {\n                 let s = uint::to_str(rng.next() as uint);\n@@ -97,13 +97,13 @@ fn old_str_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n     }\n \n     {\n-        let map = map::HashMap();\n+        let map = oldmap::HashMap();\n         for uint::range(0, num_keys) |i| {\n             map.insert(uint::to_str(i), i);\n         }\n         do timed(&mut results.delete_strings) {\n             for uint::range(0, num_keys) |i| {\n-                assert map.remove(uint::to_str(i));\n+                assert map.remove(&uint::to_str(i));\n             }\n         }\n     }\n@@ -309,7 +309,7 @@ fn main() {\n         let mut results = empty_results();\n         old_int_benchmarks(rng, num_keys, &mut results);\n         old_str_benchmarks(rng, num_keys, &mut results);\n-        write_results(\"std::map::HashMap\", &results);\n+        write_results(\"std::oldmap::HashMap\", &results);\n     }\n \n     {"}, {"sha": "32b6c49189882cb29a10cb84f57d96ecad9bbfa1", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -13,8 +13,8 @@\n extern mod std;\n \n use std::time::precise_time_s;\n-use std::map;\n-use std::map::{Map, HashMap};\n+use std::oldmap;\n+use std::oldmap::{Map, HashMap};\n \n use io::{Reader, ReaderUtil};\n \n@@ -75,12 +75,12 @@ fn read_line() {\n fn str_set() {\n     let r = rand::Rng();\n \n-    let s = map::HashMap();\n+    let s = oldmap::HashMap();\n \n     for int::range(0, 1000) |_i| {\n-        map::set_add(s, r.gen_str(10));\n+        oldmap::set_add(s, r.gen_str(10));\n     }\n-    \n+\n     let mut found = 0;\n     for int::range(0, 1000) |_i| {\n         match s.find(r.gen_str(10)) {\n@@ -93,7 +93,7 @@ fn str_set() {\n fn vec_plus() {\n     let r = rand::Rng();\n \n-    let mut v = ~[]; \n+    let mut v = ~[];\n     let mut i = 0;\n     while i < 1500 {\n         let rv = vec::from_elem(r.gen_uint_range(0, i + 1), i);"}, {"sha": "6c5a8a4377e3f8da7d08911958d2346959cce02e", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -19,9 +19,9 @@ An implementation of the Graph500 Breadth First Search problem in Rust.\n extern mod std;\n use std::arc;\n use std::time;\n-use std::map;\n-use std::map::Map;\n-use std::map::HashMap;\n+use std::oldmap;\n+use std::oldmap::Map;\n+use std::oldmap::HashMap;\n use std::deque;\n use std::deque::Deque;\n use std::par;\n@@ -41,15 +41,15 @@ fn make_edges(scale: uint, edgefactor: uint) -> ~[(node_id, node_id)] {\n         let A = 0.57;\n         let B = 0.19;\n         let C = 0.19;\n- \n+\n         if scale == 0u {\n             (i, j)\n         }\n         else {\n             let i = i * 2i64;\n             let j = j * 2i64;\n             let scale = scale - 1u;\n-            \n+\n             let x = r.gen_float();\n \n             if x < A {\n@@ -80,38 +80,38 @@ fn make_edges(scale: uint, edgefactor: uint) -> ~[(node_id, node_id)] {\n \n fn make_graph(N: uint, edges: ~[(node_id, node_id)]) -> graph {\n     let graph = do vec::from_fn(N) |_i| {\n-        map::HashMap::<node_id, ()>()\n+        oldmap::HashMap::<node_id, ()>()\n     };\n \n     do vec::each(edges) |e| {\n         match *e {\n             (i, j) => {\n-                map::set_add(graph[i], j);\n-                map::set_add(graph[j], i);\n+                oldmap::set_add(graph[i], j);\n+                oldmap::set_add(graph[j], i);\n             }\n         }\n         true\n     }\n \n     do graph.map() |v| {\n-        map::vec_from_set(*v)\n+        oldmap::vec_from_set(*v)\n     }\n }\n \n fn gen_search_keys(graph: graph, n: uint) -> ~[node_id] {\n-    let keys = map::HashMap::<node_id, ()>();\n+    let keys = oldmap::HashMap::<node_id, ()>();\n     let r = rand::Rng();\n \n-    while keys.size() < n {\n+    while keys.len() < n {\n         let k = r.gen_uint_range(0u, graph.len());\n \n         if graph[k].len() > 0u && vec::any(graph[k], |i| {\n             *i != k as node_id\n         }) {\n-            map::set_add(keys, k as node_id);\n+            oldmap::set_add(keys, k as node_id);\n         }\n     }\n-    map::vec_from_set(keys)\n+    oldmap::vec_from_set(keys)\n }\n \n /**\n@@ -120,7 +120,7 @@ fn gen_search_keys(graph: graph, n: uint) -> ~[node_id] {\n  * Nodes that are unreachable have a parent of -1.\n  */\n fn bfs(graph: graph, key: node_id) -> bfs_result {\n-    let marks : ~[mut node_id] \n+    let marks : ~[mut node_id]\n         = vec::cast_to_mut(vec::from_elem(vec::len(graph), -1i64));\n \n     let Q = deque::create();\n@@ -300,7 +300,7 @@ fn pbfs(&&graph: arc::ARC<graph>, key: node_id) -> bfs_result {\n }\n \n /// Performs at least some of the validation in the Graph500 spec.\n-fn validate(edges: ~[(node_id, node_id)], \n+fn validate(edges: ~[(node_id, node_id)],\n             root: node_id, tree: bfs_result) -> bool {\n     // There are 5 things to test. Below is code for each of them.\n \n@@ -336,7 +336,7 @@ fn validate(edges: ~[(node_id, node_id)],\n             path.len() as int\n         }\n     };\n-    \n+\n     if !status { return status }\n \n     // 2. Each tree edge connects vertices whose BFS levels differ by\n@@ -366,7 +366,7 @@ fn validate(edges: ~[(node_id, node_id)],\n         abs(level[u] - level[v]) <= 1\n     };\n \n-    if !status { return status }    \n+    if !status { return status }\n \n     // 4. The BFS tree spans an entire connected component's vertices.\n \n@@ -388,7 +388,7 @@ fn validate(edges: ~[(node_id, node_id)],\n         }\n     };\n \n-    if !status { return status }    \n+    if !status { return status }\n \n     // If we get through here, all the tests passed!\n     true\n@@ -440,44 +440,44 @@ fn main() {\n             let start = time::precise_time_s();\n             let bfs_tree = bfs(copy graph, *root);\n             let stop = time::precise_time_s();\n-            \n+\n             //total_seq += stop - start;\n \n             io::stdout().write_line(\n                 fmt!(\"Sequential BFS completed in %? seconds.\",\n                      stop - start));\n-            \n+\n             if do_validate {\n                 let start = time::precise_time_s();\n                 assert(validate(copy edges, *root, bfs_tree));\n                 let stop = time::precise_time_s();\n-                \n+\n                 io::stdout().write_line(\n                     fmt!(\"Validation completed in %? seconds.\",\n                          stop - start));\n             }\n-            \n+\n             let start = time::precise_time_s();\n             let bfs_tree = bfs2(copy graph, *root);\n             let stop = time::precise_time_s();\n-            \n+\n             total_seq += stop - start;\n-            \n+\n             io::stdout().write_line(\n                 fmt!(\"Alternate Sequential BFS completed in %? seconds.\",\n                      stop - start));\n-            \n+\n             if do_validate {\n                 let start = time::precise_time_s();\n                 assert(validate(copy edges, *root, bfs_tree));\n                 let stop = time::precise_time_s();\n-                \n+\n                 io::stdout().write_line(\n                     fmt!(\"Validation completed in %? seconds.\",\n                          stop - start));\n             }\n         }\n-        \n+\n         let start = time::precise_time_s();\n         let bfs_tree = pbfs(graph_arc, *root);\n         let stop = time::precise_time_s();\n@@ -491,7 +491,7 @@ fn main() {\n             let start = time::precise_time_s();\n             assert(validate(copy edges, *root, bfs_tree));\n             let stop = time::precise_time_s();\n-            \n+\n             io::stdout().write_line(fmt!(\"Validation completed in %? seconds.\",\n                                          stop - start));\n         }"}, {"sha": "6de8d13529a58ee04d89d11f8eff73d29fc039de", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -11,8 +11,8 @@\n // chameneos\n \n extern mod std;\n-use std::map;\n-use std::map::HashMap;\n+use std::oldmap;\n+use std::oldmap::HashMap;\n use std::sort;\n use std::cell::Cell;\n use core::pipes::*;"}, {"sha": "0f4f22196ce67554a8e74a9da190b03de8f7f91c", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -14,15 +14,15 @@\n #[legacy_modes];\n \n extern mod std;\n-use std::map;\n-use std::map::HashMap;\n+use std::oldmap;\n+use std::oldmap::HashMap;\n use std::sort;\n use io::ReaderUtil;\n use pipes::{stream, Port, Chan};\n use cmp::Ord;\n \n // given a map, print a sorted version of it\n-fn sort_and_fmt(mm: HashMap<~[u8], uint>, total: uint) -> ~str { \n+fn sort_and_fmt(mm: HashMap<~[u8], uint>, total: uint) -> ~str {\n    fn pct(xx: uint, yy: uint) -> float {\n       return (xx as float) * 100f / (yy as float);\n    }\n@@ -49,10 +49,9 @@ fn sort_and_fmt(mm: HashMap<~[u8], uint>, total: uint) -> ~str {\n    let mut pairs = ~[];\n \n    // map -> [(k,%)]\n-   mm.each(fn&(key: ~[u8], val: uint) -> bool {\n+   for mm.each_ref |&key, &val| {\n       pairs.push((key, pct(val, total)));\n-      return true;\n-   });\n+   }\n \n    let pairs_sorted = sortKV(pairs);\n \n@@ -95,13 +94,13 @@ fn windows_with_carry(bb: &[u8], nn: uint,\n       ii += 1u;\n    }\n \n-   return vec::slice(bb, len - (nn - 1u), len); \n+   return vec::slice(bb, len - (nn - 1u), len);\n }\n \n fn make_sequence_processor(sz: uint, from_parent: pipes::Port<~[u8]>,\n                            to_parent: pipes::Chan<~str>) {\n-   \n-   let freqs: HashMap<~[u8], uint> = map::HashMap();\n+\n+   let freqs: HashMap<~[u8], uint> = oldmap::HashMap();\n    let mut carry: ~[u8] = ~[];\n    let mut total: uint = 0u;\n \n@@ -118,7 +117,7 @@ fn make_sequence_processor(sz: uint, from_parent: pipes::Port<~[u8]>,\n       });\n    }\n \n-   let buffer = match sz { \n+   let buffer = match sz {\n        1u => { sort_and_fmt(freqs, total) }\n        2u => { sort_and_fmt(freqs, total) }\n        3u => { fmt!(\"%u\\t%s\", find(freqs, ~\"GGT\"), ~\"GGT\") }\n@@ -165,11 +164,11 @@ fn main() {\n         do task::spawn_with(move from_parent) |move to_parent_, from_parent| {\n             make_sequence_processor(sz, from_parent, to_parent_);\n         };\n-        \n+\n         move to_child\n     });\n-         \n-   \n+\n+\n    // latch stores true after we've started\n    // reading the sequence of interest\n    let mut proc_mode = false;"}, {"sha": "8cf57b19825935786e3adcdbe70d617eab544879", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -22,7 +22,7 @@\n \n extern mod std;\n use io::WriterUtil;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n struct cmplx {\n     re: f64,\n@@ -134,11 +134,11 @@ fn writer(path: ~str, pport: pipes::Port<Line>, size: uint)\n             done += 1_u;\n             let mut prev = done;\n             while prev <= i {\n-                if lines.contains_key(prev) {\n+                if lines.contains_key_ref(&prev) {\n                     debug!(\"WS %u\", prev);\n                     cout.write(lines.get(prev));\n                     done += 1_u;\n-                    lines.remove(prev);\n+                    lines.remove(&prev);\n                     prev += 1_u;\n                 }\n                 else {"}, {"sha": "55cbb1cbdcab165282dd9a082c0cd1249ec51de4", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -10,8 +10,8 @@\n \n //buggy.rs\n extern mod std;\n-use std::map::HashMap;\n-use std::map;\n+use std::oldmap::HashMap;\n+use std::oldmap;\n \n fn main() {\n     let buggy_map :HashMap<uint, &uint> ="}, {"sha": "3f49709420882992089ee5014650cf6a83713c43", "filename": "src/test/compile-fail/for-loop-decl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern: mismatched types\n extern mod std;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std::bitv;\n \n type fn_info = {vars: HashMap<uint, var_info>};"}, {"sha": "f829c73063765a22807f1640a5be545cd4b1e421", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -8,16 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use std::map;\n-use std::map::HashMap;\n-use std::map::StdMap;\n+use core::container::Map;\n+use core::hashmap::linear::LinearMap;\n \n // Test that trait types printed in error msgs include the type arguments.\n \n fn main() {\n-    let x: StdMap<~str,~str> = map::HashMap::<~str,~str>() as\n-        StdMap::<~str,~str>;\n-    let y: StdMap<uint,~str> = x;\n-    //~^ ERROR mismatched types: expected `@std::map::StdMap<uint,~str>`\n+    let x: Map<~str, ~str> = LinearMap::new::<~str, ~str>() as\n+        Map::<~str, ~str>;\n+    let y: Map<uint, ~str> = x;\n+    //~^ ERROR mismatched types: expected `@core::container::Map/&<uint,~str>`\n }"}, {"sha": "a504e374b95053e94cf9d1013b9a7163d2cc81cf", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -11,12 +11,12 @@\n // error-pattern:fail\n \n extern mod std;\n-use std::map;\n-use std::map::HashMap;\n+use std::oldmap;\n+use std::oldmap::HashMap;\n \n fn main() {\n     let count = @mut 0u;\n-    let map = map::HashMap();\n+    let map = oldmap::HashMap();\n     let mut arr = ~[];\n     for uint::range(0u, 10u) |i| {\n         arr += ~[@~\"key stuff\"];"}, {"sha": "4b4eb1fc774b5eeb8e4eb735857b4a40c498387d", "filename": "src/test/run-pass/class-impl-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -12,7 +12,7 @@\n // xfail-fast\n \n extern mod std;\n-use std::map::*;\n+use std::oldmap::*;\n \n class cat : map<int, bool> {\n   priv {"}, {"sha": "b7c8322316f5a717bcc78585b548b4625d4a6b5e", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 84, "deletions": 97, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -9,10 +9,8 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n-extern mod std;\n-use std::map::*;\n+use core::container::{Container, Mutable, Map};\n \n enum cat_type { tuxedo, tabby, tortoiseshell }\n \n@@ -28,121 +26,110 @@ impl cat_type : cmp::Eq {\n \n // ok: T should be in scope when resolving the trait ref for map\n struct cat<T> {\n-  // Yes, you can have negative meows\n-  priv mut meows : int,\n+    // Yes, you can have negative meows\n+    priv mut meows : int,\n \n-  mut how_hungry : int,\n-  name : T,\n+    mut how_hungry : int,\n+    name : T,\n }\n \n-impl<T: Copy> cat<T> {\n-  fn speak() { self.meow(); }\n-\n-  fn eat() -> bool {\n-    if self.how_hungry > 0 {\n-        error!(\"OM NOM NOM\");\n-        self.how_hungry -= 2;\n-        return true;\n-    }\n-    else {\n-        error!(\"Not hungry!\");\n-        return false;\n+impl<T> cat<T> {\n+    fn speak(&mut self) { self.meow(); }\n+\n+    fn eat(&mut self) -> bool {\n+        if self.how_hungry > 0 {\n+            error!(\"OM NOM NOM\");\n+            self.how_hungry -= 2;\n+            return true;\n+        } else {\n+            error!(\"Not hungry!\");\n+            return false;\n+        }\n     }\n-  }\n }\n \n-impl<T: Copy> cat<T> : StdMap<int, T> {\n-  pure fn size() -> uint { self.meows as uint }\n-  fn insert(+k: int, +_v: T) -> bool {\n-    self.meows += k;\n-    true\n-  }\n-  pure fn contains_key(+k: int) -> bool { k <= self.meows }\n-  pure fn contains_key_ref(k: &int) -> bool { self.contains_key(*k) }\n-\n-  pure fn get(+k:int) -> T { match self.find(k) {\n-      Some(v) => { v }\n-      None    => { die!(~\"epic fail\"); }\n-    }\n-  }\n-  pure fn find(+k:int) -> Option<T> { if k <= self.meows {\n-        Some(self.name)\n-     }\n-     else { None }\n-  }\n-\n-  fn update_with_key(+key: int, +val: T, ff: fn(+k: int, +v0: T, +v1: T) -> T) -> bool {\n-    match self.find(key) {\n-      None            => return self.insert(key, val),\n-      Some(copy orig) => return self.insert(key, ff(key, orig, val))\n-    }\n-  }\n+impl<T> cat<T>: Container {\n+    pure fn len(&self) -> uint { self.meows as uint }\n+    pure fn is_empty(&self) -> bool { self.meows == 0 }\n+}\n \n-  fn update(+key: int, +val: T, ff: fn(+v0: T, +v1: T) -> T) -> bool {\n-    match self.find(key) {\n-      None            => return self.insert(key, val),\n-      Some(copy orig) => return self.insert(key, ff(orig, val))\n-    }\n-  }\n+impl<T> cat<T>: Mutable {\n+    fn clear(&mut self) {}\n+}\n \n+impl<T> cat<T>: Map<int, T> {\n+    pure fn contains_key(&self, k: &int) -> bool { *k <= self.meows }\n \n-  fn remove(+k:int) -> bool {\n-    match self.find(k) {\n-      Some(x) => {\n-        self.meows -= k; true\n-      }\n-      None => { false }\n+    pure fn each(&self, f: fn(v: &int, v: &T) -> bool) {\n+        let mut n = int::abs(self.meows);\n+        while n > 0 {\n+            if !f(&n, &self.name) { break; }\n+            n -= 1;\n+        }\n     }\n-  }\n \n-  pure fn each(f: fn(+v: int, +v: T) -> bool) {\n-    let mut n = int::abs(self.meows);\n-    while n > 0 {\n-        if !f(n, self.name) { break; }\n-        n -= 1;\n+    pure fn each_key(&self, f: fn(v: &int) -> bool) {\n+        for self.each |k, _| { if !f(k) { break; } loop;};\n     }\n-  }\n \n-  pure fn each_key(&&f: fn(+v: int) -> bool) {\n-    for self.each |k, _v| { if !f(k) { break; } loop;};\n-  }\n-  pure fn each_value(&&f: fn(+v: T) -> bool) {\n-    for self.each |_k, v| { if !f(v) { break; } loop;};\n-  }\n+    pure fn each_value(&self, f: fn(v: &T) -> bool) {\n+        for self.each |_, v| { if !f(v) { break; } loop;};\n+    }\n+\n+    fn insert(&mut self, k: int, _: T) -> bool {\n+        self.meows += k;\n+        true\n+    }\n \n-  pure fn each_ref(f: fn(k: &int, v: &T) -> bool) {}\n-  pure fn each_key_ref(f: fn(k: &int) -> bool) {}\n-  pure fn each_value_ref(f: fn(k: &T) -> bool) {}\n+    pure fn find(&self, k: &int) -> Option<&self/T> {\n+        if *k <= self.meows {\n+            Some(&self.name)\n+        } else {\n+            None\n+        }\n+    }\n \n-  fn clear() { }\n+    fn remove(&mut self, k: &int) -> bool {\n+        match self.find(k) {\n+          Some(_) => {\n+              self.meows -= *k; true\n+          }\n+          None => { false }\n+        }\n+    }\n }\n \n-priv impl<T: Copy> cat<T> {\n-    fn meow() {\n-      self.meows += 1;\n-      error!(\"Meow %d\", self.meows);\n-      if self.meows % 5 == 0 {\n-          self.how_hungry += 1;\n-      }\n+impl<T> cat<T> {\n+    pure fn get(&self, k: &int) -> &self/T {\n+        match self.find(k) {\n+          Some(v) => { v }\n+          None    => { die!(~\"epic fail\"); }\n+        }\n+    }\n+\n+    static pure fn new(in_x: int, in_y: int, in_name: T) -> cat<T> {\n+        cat{meows: in_x, how_hungry: in_y, name: in_name }\n     }\n }\n \n-fn cat<T: Copy>(in_x : int, in_y : int, in_name: T) -> cat<T> {\n-    cat {\n-        meows: in_x,\n-        how_hungry: in_y,\n-        name: in_name\n+priv impl<T> cat<T> {\n+    fn meow(&mut self) {\n+        self.meows += 1;\n+        error!(\"Meow %d\", self.meows);\n+        if self.meows % 5 == 0 {\n+            self.how_hungry += 1;\n+        }\n     }\n }\n \n-pub fn main() {\n-  let nyan : cat<~str> = cat(0, 2, ~\"nyan\");\n-  for uint::range(1u, 5u) |_i| { nyan.speak(); }\n-  assert(nyan.find(1) == Some(~\"nyan\"));\n-  assert(nyan.find(10) == None);\n-  let spotty : cat<cat_type> = cat(2, 57, tuxedo);\n-  for uint::range(0u, 6u) |_i| { spotty.speak(); }\n-  assert(spotty.size() == 8u);\n-  assert(spotty.contains_key(2));\n-  assert(spotty.get(3) == tuxedo);\n+fn main() {\n+    let mut nyan: cat<~str> = cat::new(0, 2, ~\"nyan\");\n+    for uint::range(1, 5) |_| { nyan.speak(); }\n+    assert(*nyan.find(&1).unwrap() == ~\"nyan\");\n+    assert(nyan.find(&10) == None);\n+    let mut spotty: cat<cat_type> = cat::new(2, 57, tuxedo);\n+    for uint::range(0, 6) |_| { spotty.speak(); }\n+    assert(spotty.len() == 8);\n+    assert(spotty.contains_key(&2));\n+    assert(spotty.get(&3) == &tuxedo);\n }"}, {"sha": "6d2fb9843652ed140d54e6fc97bf5273da9da8eb", "filename": "src/test/run-pass/class-implements-multiple-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -11,7 +11,7 @@\n // xfail-test\n \n extern mod std;\n-use std::map::*;\n+use std::oldmap::*;\n use vec::*;\n use dvec::{dvec, extensions};\n "}, {"sha": "e3c4703432fecd979a9c7e79e7b980e824e16d1f", "filename": "src/test/run-pass/class-trait-bounded-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fclass-trait-bounded-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fclass-trait-bounded-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-trait-bounded-param.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -11,7 +11,7 @@\n // xfail-test\n \n extern mod std;\n-use std::map::{map, hashmap, int_hash};\n+use std::oldmap::{map, hashmap, int_hash};\n \n class keys<K: Copy, V: Copy, M: Copy map<K,V>>\n     : iter::base_iter<K> {"}, {"sha": "f81b33105e63eacb4d71a24b6487f00abee79c46", "filename": "src/test/run-pass/duplicate-use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fduplicate-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fduplicate-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fduplicate-use.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -11,7 +11,7 @@\n // xfail-test\n extern mod std;\n \n-use list = std::map::chained;\n+use list = std::oldmap::chained;\n use std::list;\n \n pub fn main() {"}, {"sha": "2a7843bdccd2246f250559ed16bec0d20a747779", "filename": "src/test/run-pass/extern-mod-syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -11,7 +11,7 @@\n // except according to those terms.\n \n extern mod std;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub fn main() {\n     io::println(\"Hello world!\");"}, {"sha": "43e2bee644a75c3a9a1e2470db6478efdef5ab1c", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -18,15 +18,15 @@\n \n extern mod std;\n \n-use std::map;\n-use std::map::HashMap;\n+use std::oldmap;\n+use std::oldmap::HashMap;\n use core::pipes::*;\n \n pub fn map(filename: ~str, emit: map_reduce::putter) { emit(filename, ~\"1\"); }\n \n mod map_reduce {\n-    use std::map;\n-    use std::map::HashMap;\n+    use std::oldmap;\n+    use std::oldmap::HashMap;\n     use core::pipes::*;\n \n     pub type putter = fn@(~str, ~str);\n@@ -44,9 +44,9 @@ mod map_reduce {\n     }\n \n     fn map_task(ctrl: SharedChan<ctrl_proto>, input: ~str) {\n-        let intermediates = map::HashMap();\n+        let intermediates = oldmap::HashMap();\n \n-        fn emit(im: map::HashMap<~str, int>, ctrl: SharedChan<ctrl_proto>, key: ~str,\n+        fn emit(im: oldmap::HashMap<~str, int>, ctrl: SharedChan<ctrl_proto>, key: ~str,\n                 val: ~str) {\n             let mut c;\n             match im.find(copy key) {\n@@ -75,9 +75,9 @@ mod map_reduce {\n         // This task becomes the master control task. It spawns others\n         // to do the rest.\n \n-        let mut reducers: map::HashMap<~str, int>;\n+        let mut reducers: oldmap::HashMap<~str, int>;\n \n-        reducers = map::HashMap();\n+        reducers = oldmap::HashMap();\n \n         start_mappers(ctrl_chan, copy inputs);\n "}, {"sha": "fb61e34f351e691a6753c51b62ad3f26d0710163", "filename": "src/test/run-pass/issue-1696.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1696.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -11,11 +11,10 @@\n // except according to those terms.\n \n extern mod std;\n-use std::map;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub fn main() {\n-    let m = map::HashMap();\n+    let m = HashMap();\n     m.insert(str::to_bytes(~\"foo\"), str::to_bytes(~\"bar\"));\n     log(error, m);\n }"}, {"sha": "79c884f869f3fe604424acd99de50d3f2d50f5c0", "filename": "src/test/run-pass/issue-2631-b.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -15,8 +15,8 @@ extern mod req;\n extern mod std;\n \n use req::*;\n-use std::map::*;\n-use std::map::HashMap;\n+use std::oldmap::*;\n+use std::oldmap::HashMap;\n \n pub fn main() {\n   let v = ~[@~\"hi\"];"}, {"sha": "9fe88227c4435ba4b04f3bf7517e716dbcdb2c37", "filename": "src/test/run-pass/issue-2804-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -13,9 +13,9 @@\n // Minimized version of issue-2804.rs. Both check that callee IDs don't\n // clobber the previous node ID in a macro expr\n extern mod std;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n-fn add_interfaces(managed_ip: ~str, device: std::map::HashMap<~str, int>)  {\n+fn add_interfaces(managed_ip: ~str, device: std::oldmap::HashMap<~str, int>)  {\n      error!(\"%s, %?\", managed_ip, device[~\"interfaces\"]);\n }\n "}, {"sha": "613652ec8524d5deb7dca938d79c46677c907f6b", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -12,7 +12,7 @@\n \n extern mod std;\n use io::WriterUtil;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std::json;\n \n enum object\n@@ -60,7 +60,7 @@ fn add_interface(store: int, managed_ip: ~str, data: std::json::Json) -> (~str,\n     }\n }\n \n-fn add_interfaces(store: int, managed_ip: ~str, device: std::map::HashMap<~str, std::json::Json>) -> ~[(~str, object)]\n+fn add_interfaces(store: int, managed_ip: ~str, device: std::oldmap::HashMap<~str, std::json::Json>) -> ~[(~str, object)]\n {\n     match device[~\"interfaces\"]\n     {"}, {"sha": "32f7d2ee07cee255bc081cdf8407a3a276440659", "filename": "src/test/run-pass/issue-3026.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fissue-3026.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fissue-3026.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3026.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -11,8 +11,8 @@\n // except according to those terms.\n \n extern mod std;\n-use std::map::HashMap;\n-use std::map;\n+use std::oldmap::HashMap;\n+use std::oldmap;\n \n pub fn main() {\n     let buggy_map :HashMap<uint, &uint> = HashMap::<uint, &uint>();"}, {"sha": "aff0b4fc71e589b906b1801c158dbb8ee532118d", "filename": "src/test/run-pass/issue-3559.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3559.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -14,7 +14,7 @@\n extern mod std;\n \n use core::io::{WriterUtil};\n-use std::map::*;\n+use std::oldmap::*;\n \n #[cfg(test)]\n fn check_strs(actual: &str, expected: &str) -> bool"}, {"sha": "5cfb5809feb7187ba8e7b89a04356675a18468d6", "filename": "src/test/run-pass/issue-4092.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fissue-4092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b396d17d6bfc22cbea4252337b6058a5bea6ec2/src%2Ftest%2Frun-pass%2Fissue-4092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4092.rs?ref=3b396d17d6bfc22cbea4252337b6058a5bea6ec2", "patch": "@@ -11,6 +11,6 @@\n extern mod std;\n \n pub fn main() {\n-    let x = std::map::HashMap();\n+    let x = std::oldmap::HashMap();\n     x.insert((@\"abc\", 0), 0);\n }"}]}