{"sha": "5287a2506c19b7f886556f8a73510f57dd234857", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyODdhMjUwNmMxOWI3Zjg4NjU1NmY4YTczNTEwZjU3ZGQyMzQ4NTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-02T09:18:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-02T09:18:52Z"}, "message": "More future-proof comment kind", "tree": {"sha": "70c74389382cd3c8ce72dc7739dbe5502f9f7c8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70c74389382cd3c8ce72dc7739dbe5502f9f7c8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5287a2506c19b7f886556f8a73510f57dd234857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5287a2506c19b7f886556f8a73510f57dd234857", "html_url": "https://github.com/rust-lang/rust/commit/5287a2506c19b7f886556f8a73510f57dd234857", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5287a2506c19b7f886556f8a73510f57dd234857/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d21a677715196c46b73017acbae0105ef554284d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d21a677715196c46b73017acbae0105ef554284d", "html_url": "https://github.com/rust-lang/rust/commit/d21a677715196c46b73017acbae0105ef554284d"}], "stats": {"total": 94, "additions": 58, "deletions": 36}, "files": [{"sha": "6987fcc9ec9f7182c013021b73249dbafa2d3492", "filename": "crates/ra_ide_api/src/folding_ranges.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5287a2506c19b7f886556f8a73510f57dd234857/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5287a2506c19b7f886556f8a73510f57dd234857/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs?ref=5287a2506c19b7f886556f8a73510f57dd234857", "patch": "@@ -145,7 +145,10 @@ fn contiguous_range_for_comment<'a>(\n     visited.insert(first);\n \n     // Only fold comments of the same flavor\n-    let group_flavor = first.flavor();\n+    let group_kind = first.kind();\n+    if !group_kind.shape.is_line() {\n+        return None;\n+    }\n \n     let mut last = first;\n     for element in first.syntax().siblings_with_tokens(Direction::Next) {\n@@ -158,7 +161,7 @@ fn contiguous_range_for_comment<'a>(\n                     }\n                 }\n                 if let Some(c) = ast::Comment::cast(token) {\n-                    if c.flavor() == group_flavor {\n+                    if c.kind() == group_kind {\n                         visited.insert(c);\n                         last = c;\n                         continue;"}, {"sha": "ae53bca77610ceb459bb3004a8bff398f7e74e1e", "filename": "crates/ra_ide_api/src/typing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5287a2506c19b7f886556f8a73510f57dd234857/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5287a2506c19b7f886556f8a73510f57dd234857/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs?ref=5287a2506c19b7f886556f8a73510f57dd234857", "patch": "@@ -15,7 +15,7 @@ pub(crate) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<Sour\n         .left_biased()\n         .and_then(ast::Comment::cast)?;\n \n-    if comment.flavor() == ast::CommentFlavor::Multiline {\n+    if comment.kind().shape.is_block() {\n         return None;\n     }\n "}, {"sha": "7c30ff15cb9ce99134f139e467b2c48eb1049d21", "filename": "crates/ra_syntax/src/ast/tokens.rs", "status": "modified", "additions": 51, "deletions": 32, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/5287a2506c19b7f886556f8a73510f57dd234857/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5287a2506c19b7f886556f8a73510f57dd234857/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs?ref=5287a2506c19b7f886556f8a73510f57dd234857", "patch": "@@ -21,52 +21,71 @@ impl<'a> AstToken<'a> for Comment<'a> {\n }\n \n impl<'a> Comment<'a> {\n-    pub fn flavor(&self) -> CommentFlavor {\n-        let text = self.text();\n-        if text.starts_with(\"///\") {\n-            CommentFlavor::OuterDoc\n-        } else if text.starts_with(\"//!\") {\n-            CommentFlavor::InnerDoc\n-        } else if text.starts_with(\"//\") {\n-            CommentFlavor::Line\n-        } else {\n-            CommentFlavor::Multiline\n-        }\n-    }\n-\n-    pub fn is_doc_comment(&self) -> bool {\n-        self.flavor().is_doc_comment()\n+    pub fn kind(&self) -> CommentKind {\n+        kind_by_prefix(self.text())\n     }\n \n     pub fn prefix(&self) -> &'static str {\n-        self.flavor().prefix()\n+        prefix_by_kind(self.kind())\n     }\n }\n \n-#[derive(Debug, PartialEq, Eq)]\n-pub enum CommentFlavor {\n+#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n+pub struct CommentKind {\n+    pub shape: CommentShape,\n+    pub doc: Option<CommentPlacement>,\n+}\n+\n+#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n+pub enum CommentShape {\n     Line,\n-    OuterDoc,\n-    InnerDoc,\n-    Multiline,\n+    Block,\n }\n \n-impl CommentFlavor {\n-    pub fn prefix(&self) -> &'static str {\n-        match *self {\n-            CommentFlavor::Line => \"//\",\n-            CommentFlavor::OuterDoc => \"///\",\n-            CommentFlavor::InnerDoc => \"//!\",\n-            CommentFlavor::Multiline => \"/*\",\n+impl CommentShape {\n+    pub fn is_line(self) -> bool {\n+        self == CommentShape::Line\n+    }\n+\n+    pub fn is_block(self) -> bool {\n+        self == CommentShape::Block\n+    }\n+}\n+\n+#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n+pub enum CommentPlacement {\n+    Inner,\n+    Outer,\n+}\n+\n+const COMMENT_PREFIX_TO_KIND: &[(&str, CommentKind)] = {\n+    use {CommentShape::*, CommentPlacement::*};\n+    &[\n+        (\"///\", CommentKind { shape: Line, doc: Some(Outer) }),\n+        (\"//!\", CommentKind { shape: Line, doc: Some(Inner) }),\n+        (\"/**\", CommentKind { shape: Block, doc: Some(Outer) }),\n+        (\"/**\", CommentKind { shape: Block, doc: Some(Inner) }),\n+        (\"//\", CommentKind { shape: Line, doc: None }),\n+        (\"/*\", CommentKind { shape: Block, doc: None }),\n+    ]\n+};\n+\n+fn kind_by_prefix(text: &str) -> CommentKind {\n+    for (prefix, kind) in COMMENT_PREFIX_TO_KIND.iter() {\n+        if text.starts_with(prefix) {\n+            return *kind;\n         }\n     }\n+    panic!(\"bad comment text: {:?}\", text)\n+}\n \n-    pub fn is_doc_comment(&self) -> bool {\n-        match self {\n-            CommentFlavor::OuterDoc | CommentFlavor::InnerDoc => true,\n-            _ => false,\n+fn prefix_by_kind(kind: CommentKind) -> &'static str {\n+    for (prefix, k) in COMMENT_PREFIX_TO_KIND.iter() {\n+        if *k == kind {\n+            return prefix;\n         }\n     }\n+    unreachable!()\n }\n \n pub struct Whitespace<'a>(SyntaxToken<'a>);"}, {"sha": "98aa22085abd25cae1199cd6c0a348669933f772", "filename": "crates/ra_syntax/src/ast/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5287a2506c19b7f886556f8a73510f57dd234857/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5287a2506c19b7f886556f8a73510f57dd234857/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs?ref=5287a2506c19b7f886556f8a73510f57dd234857", "patch": "@@ -111,7 +111,7 @@ pub trait DocCommentsOwner: AstNode {\n         let mut has_comments = false;\n         let docs = self\n             .doc_comments()\n-            .filter(|comment| comment.is_doc_comment())\n+            .filter(|comment| comment.kind().doc.is_some())\n             .map(|comment| {\n                 has_comments = true;\n                 let prefix_len = comment.prefix().len();"}]}