{"sha": "25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ZmQ1MDQxMmVkMTE5ZmFlMzk4YjZhMzFjNTljNmM2YTlhNWI5NGI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-09T23:01:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-09T23:01:24Z"}, "message": "Rollup merge of #77511 - JulianKnodt:st_kind_cpy, r=oli-obk\n\nAdd StatementKind::CopyNonOverlapping\n\nImplements https://github.com/rust-lang/compiler-team/issues/348\n\nr? `@nagisa`", "tree": {"sha": "445f73f258797c10265a730396a36b71d406b0e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/445f73f258797c10265a730396a36b71d406b0e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgR/5FCRBK7hj4Ov3rIwAAdHIIABHSNUvFEqd0Yu0OSquDcz3z\nTE0bPOlwrSRswJC80cZW0t8+0MUNGuNTtofo2bxfkKZP+u4gS0vPAqRL9kKkfivu\nwNP63Ee3dMMKZK9qYXy9A0YmS5IpOJs2znkvcW4C86paVQK4odNaB4Q2bE0UpArV\nWATZcLzDhrB5qWA30JZ7MCqAy/HuC0G9NdlqFr+1xAqNb3goqHAlFLumbUiDzAUw\n0ugpz8QCHOA+dUrEBPw97+eWhdcvRYl+4GmxSmZkjAtp+vLm2zr/GbwYKzJGFW/b\nSx/L1akCBSy10FNa/DT5jLsvOXMQOUKg9Wf4BGqbL1KxoqErDg6toiLz6fPvrMU=\n=If9v\n-----END PGP SIGNATURE-----\n", "payload": "tree 445f73f258797c10265a730396a36b71d406b0e9\nparent 3a5d45f68cadc8fff4fbb557780f92b403b19c19\nparent 4bceb294f419066e98cab9a953a43ddeaea5494a\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1615330884 +0900\ncommitter GitHub <noreply@github.com> 1615330884 +0900\n\nRollup merge of #77511 - JulianKnodt:st_kind_cpy, r=oli-obk\n\nAdd StatementKind::CopyNonOverlapping\n\nImplements https://github.com/rust-lang/compiler-team/issues/348\n\nr? `@nagisa`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "html_url": "https://github.com/rust-lang/rust/commit/25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a5d45f68cadc8fff4fbb557780f92b403b19c19", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5d45f68cadc8fff4fbb557780f92b403b19c19", "html_url": "https://github.com/rust-lang/rust/commit/3a5d45f68cadc8fff4fbb557780f92b403b19c19"}, {"sha": "4bceb294f419066e98cab9a953a43ddeaea5494a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bceb294f419066e98cab9a953a43ddeaea5494a", "html_url": "https://github.com/rust-lang/rust/commit/4bceb294f419066e98cab9a953a43ddeaea5494a"}], "stats": {"total": 367, "additions": 276, "deletions": 91}, "files": [{"sha": "8b5ae9e0541ade6210bfd3436f2c9b9228085328", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -832,6 +832,27 @@ fn codegen_stmt<'tcx>(\n             }\n         }\n         StatementKind::Coverage { .. } => fx.tcx.sess.fatal(\"-Zcoverage is unimplemented\"),\n+        StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n+          src,\n+          dst,\n+          count,\n+        }) => {\n+            let dst = codegen_operand(fx, dst);\n+            let pointee = dst\n+              .layout()\n+              .pointee_info_at(fx, rustc_target::abi::Size::ZERO)\n+              .expect(\"Expected pointer\");\n+            let dst = dst.load_scalar(fx);\n+            let src = codegen_operand(fx, src).load_scalar(fx);\n+            let count = codegen_operand(fx, count).load_scalar(fx);\n+            let elem_size: u64 = pointee.size.bytes();\n+            let bytes = if elem_size != 1 {\n+               fx.bcx.ins().imul_imm(count, elem_size as i64)\n+            } else {\n+               count\n+            };\n+            fx.bcx.call_memcpy(fx.cx.module.target_config(), dst, src, bytes);\n+        }\n     }\n }\n "}, {"sha": "2c2330409fd709b51bd3c0195e2353713cb76fc5", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -9,6 +9,7 @@\n #![feature(or_patterns)]\n #![feature(associated_type_bounds)]\n #![recursion_limit = \"256\"]\n+#![feature(box_syntax)]\n \n //! This crate contains codegen code that is used by all codegen backends (LLVM and others).\n //! The backend-agnostic functions of this crate use functions defined in various traits that"}, {"sha": "e148ed7ad3bcecb0697cf6bfd552a05741032478", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 60, "deletions": 54, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -641,67 +641,73 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             return;\n         }\n \n-        if intrinsic.is_some() && intrinsic != Some(sym::drop_in_place) {\n-            let intrinsic = intrinsic.unwrap();\n-            let dest = match ret_dest {\n-                _ if fn_abi.ret.is_indirect() => llargs[0],\n-                ReturnDest::Nothing => {\n-                    bx.const_undef(bx.type_ptr_to(bx.arg_memory_ty(&fn_abi.ret)))\n-                }\n-                ReturnDest::IndirectOperand(dst, _) | ReturnDest::Store(dst) => dst.llval,\n-                ReturnDest::DirectOperand(_) => {\n-                    bug!(\"Cannot use direct operand with an intrinsic call\")\n-                }\n-            };\n+        match intrinsic {\n+            None | Some(sym::drop_in_place) => {}\n+            Some(sym::copy_nonoverlapping) => unreachable!(),\n+            Some(intrinsic) => {\n+                let dest = match ret_dest {\n+                    _ if fn_abi.ret.is_indirect() => llargs[0],\n+                    ReturnDest::Nothing => {\n+                        bx.const_undef(bx.type_ptr_to(bx.arg_memory_ty(&fn_abi.ret)))\n+                    }\n+                    ReturnDest::IndirectOperand(dst, _) | ReturnDest::Store(dst) => dst.llval,\n+                    ReturnDest::DirectOperand(_) => {\n+                        bug!(\"Cannot use direct operand with an intrinsic call\")\n+                    }\n+                };\n \n-            let args: Vec<_> = args\n-                .iter()\n-                .enumerate()\n-                .map(|(i, arg)| {\n-                    // The indices passed to simd_shuffle* in the\n-                    // third argument must be constant. This is\n-                    // checked by const-qualification, which also\n-                    // promotes any complex rvalues to constants.\n-                    if i == 2 && intrinsic.as_str().starts_with(\"simd_shuffle\") {\n-                        if let mir::Operand::Constant(constant) = arg {\n-                            let c = self.eval_mir_constant(constant);\n-                            let (llval, ty) = self.simd_shuffle_indices(\n-                                &bx,\n-                                constant.span,\n-                                constant.literal.ty,\n-                                c,\n-                            );\n-                            return OperandRef { val: Immediate(llval), layout: bx.layout_of(ty) };\n-                        } else {\n-                            span_bug!(span, \"shuffle indices must be constant\");\n+                let args: Vec<_> = args\n+                    .iter()\n+                    .enumerate()\n+                    .map(|(i, arg)| {\n+                        // The indices passed to simd_shuffle* in the\n+                        // third argument must be constant. This is\n+                        // checked by const-qualification, which also\n+                        // promotes any complex rvalues to constants.\n+                        if i == 2 && intrinsic.as_str().starts_with(\"simd_shuffle\") {\n+                            if let mir::Operand::Constant(constant) = arg {\n+                                let c = self.eval_mir_constant(constant);\n+                                let (llval, ty) = self.simd_shuffle_indices(\n+                                    &bx,\n+                                    constant.span,\n+                                    constant.literal.ty,\n+                                    c,\n+                                );\n+                                return OperandRef {\n+                                    val: Immediate(llval),\n+                                    layout: bx.layout_of(ty),\n+                                };\n+                            } else {\n+                                span_bug!(span, \"shuffle indices must be constant\");\n+                            }\n                         }\n-                    }\n \n-                    self.codegen_operand(&mut bx, arg)\n-                })\n-                .collect();\n+                        self.codegen_operand(&mut bx, arg)\n+                    })\n+                    .collect();\n+\n+                Self::codegen_intrinsic_call(\n+                    &mut bx,\n+                    *instance.as_ref().unwrap(),\n+                    &fn_abi,\n+                    &args,\n+                    dest,\n+                    span,\n+                );\n \n-            Self::codegen_intrinsic_call(\n-                &mut bx,\n-                *instance.as_ref().unwrap(),\n-                &fn_abi,\n-                &args,\n-                dest,\n-                span,\n-            );\n+                if let ReturnDest::IndirectOperand(dst, _) = ret_dest {\n+                    self.store_return(&mut bx, ret_dest, &fn_abi.ret, dst.llval);\n+                }\n \n-            if let ReturnDest::IndirectOperand(dst, _) = ret_dest {\n-                self.store_return(&mut bx, ret_dest, &fn_abi.ret, dst.llval);\n-            }\n+                if let Some((_, target)) = *destination {\n+                    helper.maybe_sideeffect(self.mir, &mut bx, &[target]);\n+                    helper.funclet_br(self, &mut bx, target);\n+                } else {\n+                    bx.unreachable();\n+                }\n \n-            if let Some((_, target)) = *destination {\n-                helper.maybe_sideeffect(self.mir, &mut bx, &[target]);\n-                helper.funclet_br(self, &mut bx, target);\n-            } else {\n-                bx.unreachable();\n+                return;\n             }\n-\n-            return;\n         }\n \n         // Split the rust-call tupled arguments off."}, {"sha": "8502309b90e5a1e7bfab7d1bd54cdc16b7d229e4", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -125,19 +125,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let offset = args[1].immediate();\n                 bx.gep(ptr, &[offset])\n             }\n-\n-            sym::copy_nonoverlapping => {\n-                copy_intrinsic(\n-                    bx,\n-                    false,\n-                    false,\n-                    substs.type_at(0),\n-                    args[1].immediate(),\n-                    args[0].immediate(),\n-                    args[2].immediate(),\n-                );\n-                return;\n-            }\n             sym::copy => {\n                 copy_intrinsic(\n                     bx,"}, {"sha": "5523e5f2e8604d737f86987380b657182de113c0", "filename": "compiler/rustc_codegen_ssa/src/mir/statement.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -115,6 +115,26 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 self.codegen_coverage(&mut bx, coverage.clone());\n                 bx\n             }\n+            mir::StatementKind::CopyNonOverlapping(box mir::CopyNonOverlapping {\n+                ref src,\n+                ref dst,\n+                ref count,\n+            }) => {\n+                let dst_val = self.codegen_operand(&mut bx, dst);\n+                let src_val = self.codegen_operand(&mut bx, src);\n+                let count = self.codegen_operand(&mut bx, count).immediate();\n+                let pointee_layout = dst_val\n+                    .layout\n+                    .pointee_info_at(&mut bx, rustc_target::abi::Size::ZERO)\n+                    .expect(\"Expected pointer\");\n+                let bytes = bx.mul(count, bx.const_usize(pointee_layout.size.bytes()));\n+\n+                let align = pointee_layout.align;\n+                let dst = dst_val.immediate();\n+                let src = src_val.immediate();\n+                bx.memcpy(dst, align, src, align, bytes, crate::MemFlags::empty());\n+                bx\n+            }\n             mir::StatementKind::FakeRead(..)\n             | mir::StatementKind::Retag { .. }\n             | mir::StatementKind::AscribeUserType(..)"}, {"sha": "f6952667494db5d12f12cdea90484e84e6469dca", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -1541,6 +1541,11 @@ pub enum StatementKind<'tcx> {\n     /// counter varible at runtime, each time the code region is executed.\n     Coverage(Box<Coverage>),\n \n+    /// Denotes a call to the intrinsic function copy_overlapping, where `src_dst` denotes the\n+    /// memory being read from and written to(one field to save memory), and size\n+    /// indicates how many bytes are being copied over.\n+    CopyNonOverlapping(Box<CopyNonOverlapping<'tcx>>),\n+\n     /// No-op. Useful for deleting instructions without affecting statement indices.\n     Nop,\n }\n@@ -1659,6 +1664,13 @@ impl Debug for Statement<'_> {\n                     write!(fmt, \"Coverage::{:?}\", coverage.kind)\n                 }\n             }\n+            CopyNonOverlapping(box crate::mir::CopyNonOverlapping {\n+                ref src,\n+                ref dst,\n+                ref count,\n+            }) => {\n+                write!(fmt, \"copy_nonoverlapping(src={:?}, dst={:?}, count={:?})\", src, dst, count)\n+            }\n             Nop => write!(fmt, \"nop\"),\n         }\n     }\n@@ -1670,6 +1682,14 @@ pub struct Coverage {\n     pub code_region: Option<CodeRegion>,\n }\n \n+#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable)]\n+pub struct CopyNonOverlapping<'tcx> {\n+    pub src: Operand<'tcx>,\n+    pub dst: Operand<'tcx>,\n+    /// Number of elements to copy from src to dest, not bytes.\n+    pub count: Operand<'tcx>,\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // Places\n "}, {"sha": "4e81612c0b9dee5f76d55668cd7d51730f879905", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -436,6 +436,15 @@ macro_rules! make_mir_visitor {\n                             location\n                         )\n                     }\n+                    StatementKind::CopyNonOverlapping(box crate::mir::CopyNonOverlapping{\n+                      ref $($mutability)? src,\n+                      ref $($mutability)? dst,\n+                      ref $($mutability)? count,\n+                    }) => {\n+                      self.visit_operand(src, location);\n+                      self.visit_operand(dst, location);\n+                      self.visit_operand(count, location)\n+                    }\n                     StatementKind::Nop => {}\n                 }\n             }"}, {"sha": "17c4f3c649460226e7739494576d458c1f5832a0", "filename": "compiler/rustc_mir/src/borrow_check/invalidation.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -92,6 +92,15 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                     self.consume_operand(location, input);\n                 }\n             }\n+            StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n+                ref src,\n+                ref dst,\n+                ref count,\n+            }) => {\n+                self.consume_operand(location, src);\n+                self.consume_operand(location, dst);\n+                self.consume_operand(location, count);\n+            }\n             StatementKind::Nop\n             | StatementKind::Coverage(..)\n             | StatementKind::AscribeUserType(..)"}, {"sha": "5b8bb7257e2303ed7b41cd0e51073b0eea6f4b77", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -626,6 +626,15 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n                     self.consume_operand(location, (input, span), flow_state);\n                 }\n             }\n+\n+            StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n+                ..\n+            }) => {\n+                span_bug!(\n+                    span,\n+                    \"Unexpected CopyNonOverlapping, should only appear after lower_intrinsics\",\n+                )\n+            }\n             StatementKind::Nop\n             | StatementKind::Coverage(..)\n             | StatementKind::AscribeUserType(..)"}, {"sha": "ab7e75bf4f10c7f282d59ae2ff9fe847c97e534e", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -1520,6 +1520,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     );\n                 }\n             }\n+            StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n+                ..\n+            }) => span_bug!(\n+                stmt.source_info.span,\n+                \"Unexpected StatementKind::CopyNonOverlapping, should only appear after lowering_intrinsics\",\n+            ),\n             StatementKind::FakeRead(..)\n             | StatementKind::StorageLive(..)\n             | StatementKind::StorageDead(..)"}, {"sha": "f24d0f0266d9f835c754d1b9277c7d4c814fdc90", "filename": "compiler/rustc_mir/src/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrows.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -305,6 +305,7 @@ impl<'tcx> dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n             | mir::StatementKind::Retag { .. }\n             | mir::StatementKind::AscribeUserType(..)\n             | mir::StatementKind::Coverage(..)\n+            | mir::StatementKind::CopyNonOverlapping(..)\n             | mir::StatementKind::Nop => {}\n         }\n     }"}, {"sha": "792664597fd9aabc07b1f89dc2dea83b9111b021", "filename": "compiler/rustc_mir/src/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -149,6 +149,7 @@ impl<'mir, 'tcx> dataflow::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir,\n             | StatementKind::FakeRead(..)\n             | StatementKind::Nop\n             | StatementKind::Retag(..)\n+            | StatementKind::CopyNonOverlapping(..)\n             | StatementKind::StorageLive(..) => {}\n         }\n     }"}, {"sha": "1ddd81e779b1587211d18fb8fc90e38b47195535", "filename": "compiler/rustc_mir/src/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -318,6 +318,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             StatementKind::Retag { .. }\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n+            | StatementKind::CopyNonOverlapping(..)\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "25c3c2c632d8166f3de9c4730ac35e3ecc63b766", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -323,28 +323,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let result = Scalar::from_uint(truncated_bits, layout.size);\n                 self.write_scalar(result, dest)?;\n             }\n-            sym::copy | sym::copy_nonoverlapping => {\n-                let elem_ty = instance.substs.type_at(0);\n-                let elem_layout = self.layout_of(elem_ty)?;\n-                let count = self.read_scalar(&args[2])?.to_machine_usize(self)?;\n-                let elem_align = elem_layout.align.abi;\n-\n-                let size = elem_layout.size.checked_mul(count, self).ok_or_else(|| {\n-                    err_ub_format!(\"overflow computing total size of `{}`\", intrinsic_name)\n-                })?;\n-                let src = self.read_scalar(&args[0])?.check_init()?;\n-                let src = self.memory.check_ptr_access(src, size, elem_align)?;\n-                let dest = self.read_scalar(&args[1])?.check_init()?;\n-                let dest = self.memory.check_ptr_access(dest, size, elem_align)?;\n-\n-                if let (Some(src), Some(dest)) = (src, dest) {\n-                    self.memory.copy(\n-                        src,\n-                        dest,\n-                        size,\n-                        intrinsic_name == sym::copy_nonoverlapping,\n-                    )?;\n-                }\n+            sym::copy => {\n+                self.copy(&args[0], &args[1], &args[2], /*nonoverlapping*/ false)?;\n             }\n             sym::offset => {\n                 let ptr = self.read_scalar(&args[0])?.check_init()?;"}, {"sha": "0f365eaa41dded3249298f7d1d35770af198a063", "filename": "compiler/rustc_mir/src/interpret/step.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -2,6 +2,7 @@\n //!\n //! The main entry point is the `step` method.\n \n+use crate::interpret::OpTy;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{InterpResult, Scalar};\n use rustc_target::abi::LayoutOf;\n@@ -113,6 +114,15 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 M::retag(self, *kind, &dest)?;\n             }\n \n+            // Call CopyNonOverlapping\n+            CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping { dst, src, count }) => {\n+                let count = self.eval_operand(count, None)?;\n+\n+                let src = self.eval_operand(src, None)?;\n+                let dst = self.eval_operand(dst, None)?;\n+                self.copy(&src, &dst, &count, /* nonoverlapping */ true)?;\n+            }\n+\n             // Statements we do not track.\n             AscribeUserType(..) => {}\n \n@@ -140,6 +150,32 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(())\n     }\n \n+    pub(crate) fn copy(\n+        &mut self,\n+        src: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        dst: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        count: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        nonoverlapping: bool,\n+    ) -> InterpResult<'tcx> {\n+        let count = self.read_scalar(&count)?.to_machine_usize(self)?;\n+        let layout = self.layout_of(src.layout.ty.builtin_deref(true).unwrap().ty)?;\n+        let (size, align) = (layout.size, layout.align.abi);\n+        let src =\n+            self.memory.check_ptr_access(self.read_scalar(&src)?.check_init()?, size, align)?;\n+\n+        let dst =\n+            self.memory.check_ptr_access(self.read_scalar(&dst)?.check_init()?, size, align)?;\n+\n+        let size = size.checked_mul(count, self).ok_or_else(|| {\n+            err_ub_format!(\"overflow computing total size of `copy_nonoverlapping`\")\n+        })?;\n+\n+        if let (Some(src), Some(dst)) = (src, dst) {\n+            self.memory.copy(src, dst, size, nonoverlapping)?;\n+        }\n+        Ok(())\n+    }\n+\n     /// Evaluate an assignment statement.\n     ///\n     /// There is no separate `eval_rvalue` function. Instead, the code for handling each rvalue"}, {"sha": "1ad7b8fbbd5edde87dcb2e8cca714d6ba7e1bbe4", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -808,6 +808,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n             | StatementKind::Retag { .. }\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n+            | StatementKind::CopyNonOverlapping(..)\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "33848bc130581a60822f3849eff21cf3a348072f", "filename": "compiler/rustc_mir/src/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -123,6 +123,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 UnsafetyViolationKind::General,\n                 UnsafetyViolationDetails::UseOfInlineAssembly,\n             ),\n+            StatementKind::CopyNonOverlapping(..) => unreachable!(),\n         }\n         self.super_statement(statement, location);\n     }"}, {"sha": "e7097ce861902ab7ca565f873578642267c8cd48", "filename": "compiler/rustc_mir/src/transform/coverage/spans.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -687,6 +687,7 @@ pub(super) fn filtered_statement_span(\n \n         // Retain spans from all other statements\n         StatementKind::FakeRead(_, _) // Not including `ForGuardBinding`\n+        | StatementKind::CopyNonOverlapping(..)\n         | StatementKind::Assign(_)\n         | StatementKind::SetDiscriminant { .. }\n         | StatementKind::LlvmInlineAsm(_)"}, {"sha": "6656deac967b696edc74d2b45bae2e8db5868f06", "filename": "compiler/rustc_mir/src/transform/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -587,6 +587,7 @@ impl Conflicts<'a> {\n             | StatementKind::FakeRead(..)\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n+            | StatementKind::CopyNonOverlapping(..)\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "f299b6ecc28dc09ee56cfa2890e46795863b6b5b", "filename": "compiler/rustc_mir/src/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -1454,6 +1454,7 @@ impl Visitor<'tcx> for EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n             | StatementKind::Retag(..)\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n+            | StatementKind::CopyNonOverlapping(..)\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "d6a733606160818b6727fb1d7667dbffc8b31b05", "filename": "compiler/rustc_mir/src/transform/lower_intrinsics.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -40,6 +40,27 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                             terminator.kind = TerminatorKind::Goto { target };\n                         }\n                     }\n+                    sym::copy_nonoverlapping => {\n+                        let target = destination.unwrap().1;\n+                        let mut args = args.drain(..);\n+                        block.statements.push(Statement {\n+                            source_info: terminator.source_info,\n+                            kind: StatementKind::CopyNonOverlapping(\n+                                box rustc_middle::mir::CopyNonOverlapping {\n+                                    src: args.next().unwrap(),\n+                                    dst: args.next().unwrap(),\n+                                    count: args.next().unwrap(),\n+                                },\n+                            ),\n+                        });\n+                        assert_eq!(\n+                            args.next(),\n+                            None,\n+                            \"Extra argument for copy_non_overlapping intrinsic\"\n+                        );\n+                        drop(args);\n+                        terminator.kind = TerminatorKind::Goto { target };\n+                    }\n                     sym::wrapping_add | sym::wrapping_sub | sym::wrapping_mul => {\n                         if let Some((destination, target)) = *destination {\n                             let lhs;"}, {"sha": "5347846a4b3341a83e1d65d4fa1e1f39bf78aca3", "filename": "compiler/rustc_mir/src/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_noop_landing_pads.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -55,6 +55,7 @@ impl RemoveNoopLandingPads {\n                 StatementKind::Assign { .. }\n                 | StatementKind::SetDiscriminant { .. }\n                 | StatementKind::LlvmInlineAsm { .. }\n+                | StatementKind::CopyNonOverlapping(..)\n                 | StatementKind::Retag { .. } => {\n                     return false;\n                 }"}, {"sha": "a5764d9bf4e3dfbb6c2dc77cce3d2cc4bf5c40bd", "filename": "compiler/rustc_mir/src/transform/simplify.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -428,6 +428,7 @@ impl Visitor<'_> for UsedLocals {\n     fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n         match statement.kind {\n             StatementKind::LlvmInlineAsm(..)\n+            | StatementKind::CopyNonOverlapping(..)\n             | StatementKind::Retag(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::FakeRead(..)"}, {"sha": "d009b0b1b238425386c8c026a565ca4e8cbcb17f", "filename": "compiler/rustc_mir/src/transform/validate.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -294,7 +294,49 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n             }\n-            _ => {}\n+            StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n+                ref src,\n+                ref dst,\n+                ref count,\n+            }) => {\n+                let src_ty = src.ty(&self.body.local_decls, self.tcx);\n+                let op_src_ty = if let Some(src_deref) = src_ty.builtin_deref(true) {\n+                    src_deref.ty\n+                } else {\n+                    self.fail(\n+                        location,\n+                        format!(\"Expected src to be ptr in copy_nonoverlapping, got: {}\", src_ty),\n+                    );\n+                    return;\n+                };\n+                let dst_ty = dst.ty(&self.body.local_decls, self.tcx);\n+                let op_dst_ty = if let Some(dst_deref) = dst_ty.builtin_deref(true) {\n+                    dst_deref.ty\n+                } else {\n+                    self.fail(\n+                        location,\n+                        format!(\"Expected dst to be ptr in copy_nonoverlapping, got: {}\", dst_ty),\n+                    );\n+                    return;\n+                };\n+                // since CopyNonOverlapping is parametrized by 1 type,\n+                // we only need to check that they are equal and not keep an extra parameter.\n+                if op_src_ty != op_dst_ty {\n+                    self.fail(location, format!(\"bad arg ({:?} != {:?})\", op_src_ty, op_dst_ty));\n+                }\n+\n+                let op_cnt_ty = count.ty(&self.body.local_decls, self.tcx);\n+                if op_cnt_ty != self.tcx.types.usize {\n+                    self.fail(location, format!(\"bad arg ({:?} != usize)\", op_cnt_ty))\n+                }\n+            }\n+            StatementKind::SetDiscriminant { .. }\n+            | StatementKind::StorageLive(..)\n+            | StatementKind::StorageDead(..)\n+            | StatementKind::LlvmInlineAsm(..)\n+            | StatementKind::Retag(_, _)\n+            | StatementKind::Coverage(_)\n+            | StatementKind::Nop => {}\n         }\n \n         self.super_statement(statement, location);"}, {"sha": "a9a30e407b4b091cc972b04d0d598387ea2f5492", "filename": "compiler/rustc_mir/src/util/spanview.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Futil%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/compiler%2Frustc_mir%2Fsrc%2Futil%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fspanview.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -245,6 +245,7 @@ pub fn statement_kind_name(statement: &Statement<'_>) -> &'static str {\n         Retag(..) => \"Retag\",\n         AscribeUserType(..) => \"AscribeUserType\",\n         Coverage(..) => \"Coverage\",\n+        CopyNonOverlapping(..) => \"CopyNonOverlapping\",\n         Nop => \"Nop\",\n     }\n }"}, {"sha": "1391f7505e27cc3655ec67b9b8ad7661ce322c4d", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -210,14 +210,21 @@ fn check_statement(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, statemen\n         StatementKind::Assign(box (place, rval)) => {\n             check_place(tcx, *place, span, body)?;\n             check_rvalue(tcx, body, def_id, rval, span)\n-        },\n+        }\n \n         StatementKind::FakeRead(_, place) |\n         // just an assignment\n         StatementKind::SetDiscriminant { place, .. } => check_place(tcx, **place, span, body),\n \n         StatementKind::LlvmInlineAsm { .. } => Err((span, \"cannot use inline assembly in const fn\".into())),\n \n+        StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping{\n+          dst, src, count,\n+        }) => {\n+          check_operand(tcx, dst, span, body)?;\n+          check_operand(tcx, src, span, body)?;\n+          check_operand(tcx, count, span, body)\n+        }\n         // These are all NOPs\n         StatementKind::StorageLive(_)\n         | StatementKind::StorageDead(_)"}]}