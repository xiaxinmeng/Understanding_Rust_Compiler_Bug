{"sha": "32f9f4276271bac1b8c3bc569ceed5cfaf992f29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZjlmNDI3NjI3MWJhYzFiOGMzYmM1NjljZWVkNWNmYWY5OTJmMjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-27T14:45:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-27T14:45:43Z"}, "message": "Auto merge of #24869 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #24797, #24804, #24848, #24854, #24855, #24860, #24863, #24866, #24867, #24868\n- Failed merges:", "tree": {"sha": "ee1dacb85756e6fea3059a48f345317eb2986271", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee1dacb85756e6fea3059a48f345317eb2986271"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32f9f4276271bac1b8c3bc569ceed5cfaf992f29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32f9f4276271bac1b8c3bc569ceed5cfaf992f29", "html_url": "https://github.com/rust-lang/rust/commit/32f9f4276271bac1b8c3bc569ceed5cfaf992f29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32f9f4276271bac1b8c3bc569ceed5cfaf992f29/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b772ce6342962792620e21623997d0d3b98164b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b772ce6342962792620e21623997d0d3b98164b7", "html_url": "https://github.com/rust-lang/rust/commit/b772ce6342962792620e21623997d0d3b98164b7"}, {"sha": "03f3b45ff0875926e245b1e6975d0578fd640468", "url": "https://api.github.com/repos/rust-lang/rust/commits/03f3b45ff0875926e245b1e6975d0578fd640468", "html_url": "https://github.com/rust-lang/rust/commit/03f3b45ff0875926e245b1e6975d0578fd640468"}], "stats": {"total": 92, "additions": 61, "deletions": 31}, "files": [{"sha": "cec58d618efcc66dad0be82f476ce354fbbec660", "filename": "src/doc/reference.md", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/32f9f4276271bac1b8c3bc569ceed5cfaf992f29/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/32f9f4276271bac1b8c3bc569ceed5cfaf992f29/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=32f9f4276271bac1b8c3bc569ceed5cfaf992f29", "patch": "@@ -84,7 +84,7 @@ that does _not_ occur in the set of [keywords](#keywords).\n ## Comments\n \n Comments in Rust code follow the general C++ style of line (`//`) and\n-block-comment (`/* ... */`) forms. Nested block comments are supported.\n+block (`/* ... */`) comment forms. Nested block comments are supported.\n \n Line comments beginning with exactly _three_ slashes (`///`), and block\n comments beginning with exactly one repeated asterisk in the block-open\n@@ -192,13 +192,13 @@ which must be _escaped_ by a preceding `U+005C` character (`\\`).\n \n A _string literal_ is a sequence of any Unicode characters enclosed within two\n `U+0022` (double-quote) characters, with the exception of `U+0022` itself,\n-which must be _escaped_ by a preceding `U+005C` character (`\\`), or a _raw\n-string literal_.\n+which must be _escaped_ by a preceding `U+005C` character (`\\`).\n \n-A multi-line string literal may be defined by terminating each line with a\n-`U+005C` character (`\\`) immediately before the newline. This causes the\n-`U+005C` character, the newline, and all whitespace at the beginning of the\n-next line to be ignored.\n+Line-break characters are allowed in string literals. Normally they represent\n+themselves (i.e. no translation), but as a special exception, when a `U+005C`\n+character (`\\`) occurs immediately before the newline, the `U+005C` character,\n+the newline, and all whitespace at the beginning of the next line are ignored.\n+Thus `a` and `b` are equal:\n \n ```rust\n let a = \"foobar\";\n@@ -366,11 +366,19 @@ A _floating-point literal_ has one of two forms:\n   optionally followed by another decimal literal, with an optional _exponent_.\n * A single _decimal literal_ followed by an _exponent_.\n \n-By default, a floating-point literal has a generic type, and, like integer\n-literals, the type must be uniquely determined from the context. There are two valid\n+Like integer literals, a floating-point literal may be followed by a\n+suffix, so long as the pre-suffix part does not end with `U+002E` (`.`).\n+The suffix forcibly sets the type of the literal. There are two valid\n _floating-point suffixes_, `f32` and `f64` (the 32-bit and 64-bit floating point\n types), which explicitly determine the type of the literal.\n \n+The type of an _unsuffixed_ floating-point literal is determined by type\n+inference. If a floating-point type can be _uniquely_ determined from the\n+surrounding program context, the unsuffixed floating-point literal has that type.\n+If the program context underconstrains the type, it defaults to double-precision `f64`;\n+if the program context overconstrains the type, it is considered a static type\n+error.\n+\n Examples of floating-point literals of various forms:\n \n ```"}, {"sha": "d547451fccec2e551193a062e906c5da3de7971d", "filename": "src/doc/trpl/hello-cargo.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/32f9f4276271bac1b8c3bc569ceed5cfaf992f29/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "raw_url": "https://github.com/rust-lang/rust/raw/32f9f4276271bac1b8c3bc569ceed5cfaf992f29/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fhello-cargo.md?ref=32f9f4276271bac1b8c3bc569ceed5cfaf992f29", "patch": "@@ -32,6 +32,13 @@ $ mkdir src\n $ mv main.rs src/main.rs\n ```\n \n+Note that since we're creating an executable, we used `main.rs`. If we\n+want to make a library instead, we should use `lib.rs`.\n+Custom file locations for the entry point can be specified\n+with a [`[[lib]]` or `[[bin]]`][crates-custom] key in the TOML file described below.\n+\n+[crates-custom]: http://doc.crates.io/manifest.html#configuring-a-target\n+\n Cargo expects your source files to live inside a `src` directory. That leaves\n the top level for other things, like READMEs, license information, and anything\n not related to your code. Cargo helps us keep our projects nice and tidy. A"}, {"sha": "6170bdb86eaa3a7843dc89af9a47260395cdb778", "filename": "src/doc/trpl/vectors.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/32f9f4276271bac1b8c3bc569ceed5cfaf992f29/src%2Fdoc%2Ftrpl%2Fvectors.md", "raw_url": "https://github.com/rust-lang/rust/raw/32f9f4276271bac1b8c3bc569ceed5cfaf992f29/src%2Fdoc%2Ftrpl%2Fvectors.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fvectors.md?ref=32f9f4276271bac1b8c3bc569ceed5cfaf992f29", "patch": "@@ -1,8 +1,9 @@\n % Vectors\n \n A \u2018vector\u2019 is a dynamic or \u2018growable\u2019 array, implemented as the standard\n-library type [`Vec<T>`][vec]. That `<T>` is a [generic][generic], meaning we\n-can have vectors of any type. Vectors always allocate their data on the heap.\n+library type [`Vec<T>`][vec]. The `T` means that we can have vectors\n+of any type (see the chapter on [generics][generic] for more).\n+Vectors always allocate their data on the heap.\n You can create them with the `vec!` macro:\n \n ```rust"}, {"sha": "be6405dc85a1498fcbffba5194c8397c1754ebd9", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32f9f4276271bac1b8c3bc569ceed5cfaf992f29/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f9f4276271bac1b8c3bc569ceed5cfaf992f29/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=32f9f4276271bac1b8c3bc569ceed5cfaf992f29", "patch": "@@ -951,12 +951,13 @@ impl<'a> Deref for DerefString<'a> {\n /// # #![feature(collections)]\n /// use std::string::as_string;\n ///\n-/// fn string_consumer(s: String) {\n-///     assert_eq!(s, \"foo\".to_string());\n+/// // Let's pretend we have a function that requires `&String`\n+/// fn string_consumer(s: &String) {\n+///     assert_eq!(s, \"foo\");\n /// }\n ///\n-/// let string = as_string(\"foo\").clone();\n-/// string_consumer(string);\n+/// // Provide a `&String` from a `&str` without allocating\n+/// string_consumer(&as_string(\"foo\"));\n /// ```\n #[unstable(feature = \"collections\")]\n pub fn as_string<'a>(x: &'a str) -> DerefString<'a> {"}, {"sha": "b033c2d90e1780a2dad7185abcc7e0f1f3ef983b", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/32f9f4276271bac1b8c3bc569ceed5cfaf992f29/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f9f4276271bac1b8c3bc569ceed5cfaf992f29/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=32f9f4276271bac1b8c3bc569ceed5cfaf992f29", "patch": "@@ -536,7 +536,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Panics\n     ///\n-    /// Panics if `i` is out of bounds.\n+    /// Panics if `index` is out of bounds.\n     ///\n     /// # Examples\n     ///\n@@ -1915,6 +1915,22 @@ impl<'a, T> Drop for DerefVec<'a, T> {\n }\n \n /// Converts a slice to a wrapper type providing a `&Vec<T>` reference.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// # #![feature(collections)]\n+/// use std::vec::as_vec;\n+///\n+/// // Let's pretend we have a function that requires `&Vec<i32>`\n+/// fn vec_consumer(s: &Vec<i32>) {\n+///     assert_eq!(s, &[1, 2, 3]);\n+/// }\n+///\n+/// // Provide a `&Vec<i32>` from a `&[i32]` without allocating\n+/// let values = [1, 2, 3];\n+/// vec_consumer(&as_vec(&values));\n+/// ```\n #[unstable(feature = \"collections\")]\n pub fn as_vec<'a, T>(x: &'a [T]) -> DerefVec<'a, T> {\n     unsafe {"}, {"sha": "d3de77a9241e3f7dbab05cbe77f2b89ccba5c647", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32f9f4276271bac1b8c3bc569ceed5cfaf992f29/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f9f4276271bac1b8c3bc569ceed5cfaf992f29/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=32f9f4276271bac1b8c3bc569ceed5cfaf992f29", "patch": "@@ -83,10 +83,8 @@ pub trait Into<T>: Sized {\n /// `String` implements `From<&str>`:\n ///\n /// ```\n-/// let s = \"hello\";\n /// let string = \"hello\".to_string();\n-///\n-/// let other_string: String = From::from(s);\n+/// let other_string = String::from(\"hello\");\n ///\n /// assert_eq!(string, other_string);\n /// ```"}, {"sha": "a2cfb533c1a00ee60d2b019de64127c0b55e83c3", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32f9f4276271bac1b8c3bc569ceed5cfaf992f29/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f9f4276271bac1b8c3bc569ceed5cfaf992f29/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=32f9f4276271bac1b8c3bc569ceed5cfaf992f29", "patch": "@@ -1460,7 +1460,7 @@ impl<'a> fmt::Display for Item<'a> {\n         try!(write!(fmt, \"<span class='out-of-band'>\"));\n         try!(write!(fmt,\n         r##\"<span id='render-detail'>\n-            <a id=\"toggle-all-docs\" href=\"#\" title=\"collapse all docs\">[-]</a>\n+            <a id=\"toggle-all-docs\" href=\"#\" title=\"collapse all docs\">[&minus;]</a>\n         </span>\"##));\n \n         // Write `src` tag"}, {"sha": "b907e9e20b69867df2040215fb2b2ad68f8158cf", "filename": "src/librustdoc/html/static/main.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32f9f4276271bac1b8c3bc569ceed5cfaf992f29/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/32f9f4276271bac1b8c3bc569ceed5cfaf992f29/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css?ref=32f9f4276271bac1b8c3bc569ceed5cfaf992f29", "patch": "@@ -392,7 +392,7 @@ a {\n     text-decoration: underline;\n }\n \n-.content span.trait, .content a.trait, .block a.current.trait { color: #ed9603; }\n+.content span.trait, .content a.trait, .block a.current.trait { color: #8866ff; }\n .content span.mod, .content a.mod, block a.current.mod { color: #4d76ae; }\n .content span.enum, .content a.enum, .block a.current.enum { color: #5e9766; }\n .content span.struct, .content a.struct, .block a.current.struct { color: #e53700; }"}, {"sha": "c2a59278a86dc79dbaff558c130461602299871f", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/32f9f4276271bac1b8c3bc569ceed5cfaf992f29/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/32f9f4276271bac1b8c3bc569ceed5cfaf992f29/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=32f9f4276271bac1b8c3bc569ceed5cfaf992f29", "patch": "@@ -808,20 +808,20 @@\n \n     $(\"#toggle-all-docs\").on(\"click\", function() {\n         var toggle = $(\"#toggle-all-docs\");\n-        if (toggle.html() == \"[-]\") {\n-            toggle.html(\"[+]\");\n+        if (toggle.html() == \"[&minus;]\") {\n+            toggle.html(\"[&plus;]\");\n             toggle.attr(\"title\", \"expand all docs\");\n             $(\".docblock\").hide();\n             $(\".toggle-label\").show();\n             $(\".toggle-wrapper\").addClass(\"collapsed\");\n-            $(\".collapse-toggle\").children(\".inner\").html(\"+\");\n+            $(\".collapse-toggle\").children(\".inner\").html(\"&plus;\");\n         } else {\n-            toggle.html(\"[-]\");\n+            toggle.html(\"[&minus;]\");\n             toggle.attr(\"title\", \"collapse all docs\");\n             $(\".docblock\").show();\n             $(\".toggle-label\").hide();\n             $(\".toggle-wrapper\").removeClass(\"collapsed\");\n-            $(\".collapse-toggle\").children(\".inner\").html(\"-\");\n+            $(\".collapse-toggle\").children(\".inner\").html(\"&minus;\");\n         }\n     });\n \n@@ -835,20 +835,20 @@\n             if (relatedDoc.is(\":visible\")) {\n                 relatedDoc.slideUp({duration:'fast', easing:'linear'});\n                 toggle.parent(\".toggle-wrapper\").addClass(\"collapsed\");\n-                toggle.children(\".inner\").html(\"+\");\n+                toggle.children(\".inner\").html(\"&plus;\");\n                 toggle.children(\".toggle-label\").fadeIn();\n             } else {\n                 relatedDoc.slideDown({duration:'fast', easing:'linear'});\n                 toggle.parent(\".toggle-wrapper\").removeClass(\"collapsed\");\n-                toggle.children(\".inner\").html(\"-\");\n+                toggle.children(\".inner\").html(\"&minus;\");\n                 toggle.children(\".toggle-label\").hide();\n             }\n         }\n     });\n \n     $(function() {\n         var toggle = $(\"<a/>\", {'href': 'javascript:void(0)', 'class': 'collapse-toggle'})\n-            .html(\"[<span class='inner'>-</span>]\");\n+            .html(\"[<span class='inner'>&minus;</span>]\");\n \n         $(\".method\").each(function() {\n             if ($(this).next().is(\".docblock\") ||"}, {"sha": "383726b3e8370ecce8b839ad169807b4f3c2f206", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32f9f4276271bac1b8c3bc569ceed5cfaf992f29/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f9f4276271bac1b8c3bc569ceed5cfaf992f29/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=32f9f4276271bac1b8c3bc569ceed5cfaf992f29", "patch": "@@ -115,8 +115,7 @@\n //! ## Configuring threads\n //!\n //! A new thread can be configured before it is spawned via the `Builder` type,\n-//! which currently allows you to set the name, stack size, and writers for\n-//! `println!` and `panic!` for the child thread:\n+//! which currently allows you to set the name and stack size for the child thread:\n //!\n //! ```rust\n //! # #![allow(unused_must_use)]"}]}