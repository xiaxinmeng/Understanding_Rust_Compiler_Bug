{"sha": "73d3d6855042696c814e69570d03f70c3fd36409", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczZDNkNjg1NTA0MjY5NmM4MTRlNjk1NzBkMDNmNzBjM2ZkMzY0MDk=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-18T20:20:56Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-20T13:37:49Z"}, "message": "TRPL editing: vectors", "tree": {"sha": "1131d3c7ced300771763132f7677c0a51e977e42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1131d3c7ced300771763132f7677c0a51e977e42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73d3d6855042696c814e69570d03f70c3fd36409", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73d3d6855042696c814e69570d03f70c3fd36409", "html_url": "https://github.com/rust-lang/rust/commit/73d3d6855042696c814e69570d03f70c3fd36409", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73d3d6855042696c814e69570d03f70c3fd36409/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3a2049166436e6cabfb73de42b91d6228eef184", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3a2049166436e6cabfb73de42b91d6228eef184", "html_url": "https://github.com/rust-lang/rust/commit/a3a2049166436e6cabfb73de42b91d6228eef184"}], "stats": {"total": 63, "additions": 42, "deletions": 21}, "files": [{"sha": "965cb218c699a1ecec1a4d5a2ed3dc9b675a9b21", "filename": "src/doc/trpl/vectors.md", "status": "modified", "additions": 42, "deletions": 21, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/73d3d6855042696c814e69570d03f70c3fd36409/src%2Fdoc%2Ftrpl%2Fvectors.md", "raw_url": "https://github.com/rust-lang/rust/raw/73d3d6855042696c814e69570d03f70c3fd36409/src%2Fdoc%2Ftrpl%2Fvectors.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fvectors.md?ref=73d3d6855042696c814e69570d03f70c3fd36409", "patch": "@@ -1,37 +1,58 @@\n % Vectors\n \n-A *vector* is a dynamic or \"growable\" array, implemented as the standard\n-library type [`Vec<T>`](../std/vec/) (Where `<T>` is a [Generic](./generics.md)\n-statement). Vectors always allocate their data on the heap. Vectors are to\n-[slices][slices] what [`String`][string] is to `&str`. You can\n-create them with the `vec!` macro:\n-\n-```{rust}\n-let v = vec![1, 2, 3]; // v: Vec<i32>\n-```\n+A \u2018vector\u2019 is a dynamic or \u2018growable\u2019 array, implemented as the standard\n+library type [`Vec<T>`][vec]. That `<T>` is a [generic][generic], meaning we\n+can have vectors of any type. Vectors always allocate their data on the heap.\n+You can create them with the `vec!` macro:\n \n-[slices]: primitive-types.html#slices\n-[string]: strings.html\n+```rust\n+let v = vec![1, 2, 3, 4, 5]; // v: Vec<i32>\n+```\n \n-(Notice that unlike the `println!` macro we've used in the past, we use square\n-brackets `[]` with `vec!`. Rust allows you to use either in either situation,\n+(Notice that unlike the `println!` macro we\u2019ve used in the past, we use square\n+brackets `[]` with `vec!` macro. Rust allows you to use either in either situation,\n this is just convention.)\n \n-There's an alternate form of `vec!` for repeating an initial value:\n+There\u2019s an alternate form of `vec!` for repeating an initial value:\n \n ```\n let v = vec![0; 10]; // ten zeroes\n ```\n \n-You can get the length of, iterate over, and subscript vectors just like\n-arrays. In addition, (mutable) vectors can grow automatically:\n+## Accessing elements\n \n-```{rust}\n-let mut nums = vec![1, 2, 3]; // mut nums: Vec<i32>\n+To get the value at a particular index in the vector, we use `[]`s:\n \n-nums.push(4);\n+```rust\n+let v = vec![1, 2, 3, 4, 5];\n \n-println!(\"The length of nums is now {}\", nums.len()); // Prints 4\n+println!(\"The third element of v is {}\", v[2]);\n ```\n \n-Vectors have many more useful methods.\n+The indices count from `0`, so the third element is `v[2]`.\n+\n+## Iterating\n+\n+Once you have a vector, you can iterate through its elements with `for`. There\n+are three versions:\n+\n+```rust\n+let mut v = vec![1, 2, 3, 4, 5];\n+\n+for i in &v {\n+    println!(\"A reference to {}\", i);\n+}\n+\n+for i in &mut v {\n+    println!(\"A mutable reference to {}\", i);\n+}\n+\n+for i in v {\n+    println!(\"Take ownership of the vector and its element {}\", i);\n+}\n+```\n+\n+Vectors have many more useful methods, which you can read about in [their\n+API documentation][vec].\n+\n+[vec]: ../std/vec/index.html"}]}