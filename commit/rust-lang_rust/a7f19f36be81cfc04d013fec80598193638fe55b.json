{"sha": "a7f19f36be81cfc04d013fec80598193638fe55b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZjE5ZjM2YmU4MWNmYzA0ZDAxM2ZlYzgwNTk4MTkzNjM4ZmU1NWI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-28T06:22:34Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-01T06:21:19Z"}, "message": "rustdoc: Remove usage of fmt!", "tree": {"sha": "9ab0a1baa32f74afcd091c85ce5548060ccb0ab3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ab0a1baa32f74afcd091c85ce5548060ccb0ab3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7f19f36be81cfc04d013fec80598193638fe55b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f19f36be81cfc04d013fec80598193638fe55b", "html_url": "https://github.com/rust-lang/rust/commit/a7f19f36be81cfc04d013fec80598193638fe55b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7f19f36be81cfc04d013fec80598193638fe55b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d47601a7e7324de1dd616a535248d908a1543fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d47601a7e7324de1dd616a535248d908a1543fe", "html_url": "https://github.com/rust-lang/rust/commit/4d47601a7e7324de1dd616a535248d908a1543fe"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "b0f2ba286e6915f7c464b1824df6243e4c363131", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a7f19f36be81cfc04d013fec80598193638fe55b/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f19f36be81cfc04d013fec80598193638fe55b/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=a7f19f36be81cfc04d013fec80598193638fe55b", "patch": "@@ -71,7 +71,7 @@ impl Clean<Crate> for visit_ast::RustdocVisitor {\n         Crate {\n             name: match maybe_meta {\n                 Some(x) => x.to_owned(),\n-                None => fail!(\"rustdoc_ng requires a #[link(name=\\\"foo\\\")] crate attribute\"),\n+                None => fail2!(\"rustdoc_ng requires a \\\\#[link(name=\\\"foo\\\")] crate attribute\"),\n             },\n             module: Some(self.module.clean()),\n         }\n@@ -575,9 +575,9 @@ pub enum Type {\n impl Clean<Type> for ast::Ty {\n     fn clean(&self) -> Type {\n         use syntax::ast::*;\n-        debug!(\"cleaning type `%?`\", self);\n+        debug2!(\"cleaning type `{:?}`\", self);\n         let codemap = local_data::get(super::ctxtkey, |x| *x.unwrap()).sess.codemap;\n-        debug!(\"span corresponds to `%s`\", codemap.span_to_str(self.span));\n+        debug2!(\"span corresponds to `{}`\", codemap.span_to_str(self.span));\n         match self.node {\n             ty_nil => Unit,\n             ty_ptr(ref m) => RawPointer(m.mutbl.clean(), ~m.ty.clean()),\n@@ -595,7 +595,7 @@ impl Clean<Type> for ast::Ty {\n             ty_closure(ref c) => Closure(~c.clean()),\n             ty_bare_fn(ref barefn) => BareFunction(~barefn.clean()),\n             ty_bot => Bottom,\n-            ref x => fail!(\"Unimplemented type %?\", x),\n+            ref x => fail2!(\"Unimplemented type {:?}\", x),\n         }\n     }\n }\n@@ -873,7 +873,7 @@ pub struct Static {\n \n impl Clean<Item> for doctree::Static {\n     fn clean(&self) -> Item {\n-        debug!(\"claning static %s: %?\", self.name.clean(), self);\n+        debug2!(\"claning static {}: {:?}\", self.name.clean(), self);\n         Item {\n             name: Some(self.name.clean()),\n             attrs: self.attrs.clean(),\n@@ -1053,13 +1053,13 @@ trait ToSource {\n \n impl ToSource for syntax::codemap::Span {\n     fn to_src(&self) -> ~str {\n-        debug!(\"converting span %? to snippet\", self.clean());\n+        debug2!(\"converting span {:?} to snippet\", self.clean());\n         let cm = local_data::get(super::ctxtkey, |x| x.unwrap().clone()).sess.codemap.clone();\n         let sn = match cm.span_to_snippet(*self) {\n             Some(x) => x,\n             None    => ~\"\"\n         };\n-        debug!(\"got snippet %s\", sn);\n+        debug2!(\"got snippet {}\", sn);\n         sn\n     }\n }\n@@ -1084,17 +1084,17 @@ fn name_from_pat(p: &ast::Pat) -> ~str {\n         PatWild => ~\"_\",\n         PatIdent(_, ref p, _) => path_to_str(p),\n         PatEnum(ref p, _) => path_to_str(p),\n-        PatStruct(*) => fail!(\"tried to get argument name from pat_struct, \\\n+        PatStruct(*) => fail2!(\"tried to get argument name from pat_struct, \\\n                                 which is not allowed in function arguments\"),\n         PatTup(*) => ~\"(tuple arg NYI)\",\n         PatBox(p) => name_from_pat(p),\n         PatUniq(p) => name_from_pat(p),\n         PatRegion(p) => name_from_pat(p),\n-        PatLit(*) => fail!(\"tried to get argument name from pat_lit, \\\n+        PatLit(*) => fail2!(\"tried to get argument name from pat_lit, \\\n                             which is not allowed in function arguments\"),\n-        PatRange(*) => fail!(\"tried to get argument name from pat_range, \\\n+        PatRange(*) => fail2!(\"tried to get argument name from pat_range, \\\n                               which is not allowed in function arguments\"),\n-        PatVec(*) => fail!(\"tried to get argument name from pat_vec, \\\n+        PatVec(*) => fail2!(\"tried to get argument name from pat_vec, \\\n                              which is not allowed in function arguments\")\n     }\n }\n@@ -1117,14 +1117,14 @@ fn resolve_type(path: Path, tpbs: Option<~[TyParamBound]>,\n     use syntax::ast::*;\n \n     let dm = local_data::get(super::ctxtkey, |x| *x.unwrap()).tycx.def_map;\n-    debug!(\"searching for %? in defmap\", id);\n+    debug2!(\"searching for {:?} in defmap\", id);\n     let d = match dm.find(&id) {\n         Some(k) => k,\n         None => {\n             let ctxt = local_data::get(super::ctxtkey, |x| *x.unwrap());\n-            debug!(\"could not find %? in defmap (`%s`)\", id,\n+            debug2!(\"could not find {:?} in defmap (`{}`)\", id,\n                    syntax::ast_map::node_id_to_str(ctxt.tycx.items, id, ctxt.sess.intr()));\n-            fail!(\"Unexpected failure: unresolved id not in defmap (this is a bug!)\")\n+            fail2!(\"Unexpected failure: unresolved id not in defmap (this is a bug!)\")\n         }\n     };\n \n@@ -1133,7 +1133,7 @@ fn resolve_type(path: Path, tpbs: Option<~[TyParamBound]>,\n         DefSelf(i) | DefSelfTy(i) => return Self(i),\n         DefTy(i) => i,\n         DefTrait(i) => {\n-            debug!(\"saw DefTrait in def_to_id\");\n+            debug2!(\"saw DefTrait in def_to_id\");\n             i\n         },\n         DefPrimTy(p) => match p {\n@@ -1144,10 +1144,10 @@ fn resolve_type(path: Path, tpbs: Option<~[TyParamBound]>,\n         DefTyParam(i, _) => return Generic(i.node),\n         DefStruct(i) => i,\n         DefTyParamBinder(i) => {\n-            debug!(\"found a typaram_binder, what is it? %d\", i);\n+            debug2!(\"found a typaram_binder, what is it? {}\", i);\n             return TyParamBinder(i);\n         },\n-        x => fail!(\"resolved type maps to a weird def %?\", x),\n+        x => fail2!(\"resolved type maps to a weird def {:?}\", x),\n     };\n     ResolvedPath{ path: path, typarams: tpbs, did: def_id }\n }"}, {"sha": "7537366014e052ed9a4a55ac87ddb55aecbb3e8b", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7f19f36be81cfc04d013fec80598193638fe55b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f19f36be81cfc04d013fec80598193638fe55b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=a7f19f36be81cfc04d013fec80598193638fe55b", "patch": "@@ -62,15 +62,15 @@ fn get_ast_and_resolve(cpath: &Path, libs: ~[Path]) -> DocContext {\n     crate = phase_2_configure_and_expand(sess, cfg, crate);\n     let analysis = phase_3_run_analysis_passes(sess, &crate);\n \n-    debug!(\"crate: %?\", crate);\n+    debug2!(\"crate: {:?}\", crate);\n     DocContext { crate: crate, tycx: analysis.ty_cx, sess: sess }\n }\n \n pub fn run_core (libs: ~[Path], path: &Path) -> clean::Crate {\n     let ctxt = @get_ast_and_resolve(path, libs);\n-    debug!(\"defmap:\");\n+    debug2!(\"defmap:\");\n     for (k, v) in ctxt.tycx.def_map.iter() {\n-        debug!(\"%?: %?\", k, v);\n+        debug2!(\"{:?}: {:?}\", k, v);\n     }\n     local_data::set(super::ctxtkey, ctxt);\n "}, {"sha": "441f25f33e6afcae89ad714a98d1a688822cf149", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f19f36be81cfc04d013fec80598193638fe55b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f19f36be81cfc04d013fec80598193638fe55b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=a7f19f36be81cfc04d013fec80598193638fe55b", "patch": "@@ -205,7 +205,7 @@ fn mkdir(path: &Path) {\n     do io::io_error::cond.trap(|err| {\n         error2!(\"Couldn't create directory `{}`: {}\",\n                 path.to_str(), err.desc);\n-        fail!()\n+        fail2!()\n     }).inside {\n         if !path.is_dir() {\n             file::mkdir(path);"}, {"sha": "8f1955fb423209d71c91e7259d3aa6eb2b9b42e4", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f19f36be81cfc04d013fec80598193638fe55b/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f19f36be81cfc04d013fec80598193638fe55b/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=a7f19f36be81cfc04d013fec80598193638fe55b", "patch": "@@ -32,7 +32,7 @@ pub fn strip_hidden(crate: clean::Crate) -> plugins::PluginResult {\n                         for innerattr in l.iter() {\n                             match innerattr {\n                                 &clean::Word(ref s) if \"hidden\" == *s => {\n-                                    debug!(\"found one in strip_hidden; removing\");\n+                                    debug2!(\"found one in strip_hidden; removing\");\n                                     return None;\n                                 },\n                                 _ => (),"}, {"sha": "57aa62d313cc73442a6ab04c23518eb65bab4ab4", "filename": "src/librustdoc/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f19f36be81cfc04d013fec80598193638fe55b/src%2Flibrustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f19f36be81cfc04d013fec80598193638fe55b/src%2Flibrustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rs?ref=a7f19f36be81cfc04d013fec80598193638fe55b", "patch": "@@ -238,7 +238,7 @@ fn jsonify(crate: clean::Crate, res: ~[plugins::PluginJson], dst: Path) {\n     };\n     let crate_json = match extra::json::from_str(crate_json_str) {\n         Ok(j) => j,\n-        Err(_) => fail!(\"Rust generated JSON is invalid??\")\n+        Err(_) => fail2!(\"Rust generated JSON is invalid??\")\n     };\n \n     json.insert(~\"crate\", crate_json);"}, {"sha": "9fd4c43c2543759b3e025cfb3c4363416b353163", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7f19f36be81cfc04d013fec80598193638fe55b/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f19f36be81cfc04d013fec80598193638fe55b/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=a7f19f36be81cfc04d013fec80598193638fe55b", "patch": "@@ -37,7 +37,7 @@ impl RustdocVisitor {\n         self.attrs = crate.attrs.clone();\n         fn visit_struct_def(item: &ast::item, sd: @ast::struct_def, generics:\n                             &ast::Generics) -> Struct {\n-            debug!(\"Visiting struct\");\n+            debug2!(\"Visiting struct\");\n             let struct_type = struct_type_from_def(sd);\n             Struct {\n                 id: item.id,\n@@ -52,7 +52,7 @@ impl RustdocVisitor {\n         }\n \n         fn visit_enum_def(it: &ast::item, def: &ast::enum_def, params: &ast::Generics) -> Enum {\n-            debug!(\"Visiting enum\");\n+            debug2!(\"Visiting enum\");\n             let mut vars: ~[Variant] = ~[];\n             for x in def.variants.iter() {\n                 vars.push(Variant {\n@@ -77,7 +77,7 @@ impl RustdocVisitor {\n \n         fn visit_fn(item: &ast::item, fd: &ast::fn_decl, purity: &ast::purity,\n                      _abi: &AbiSet, gen: &ast::Generics) -> Function {\n-            debug!(\"Visiting fn\");\n+            debug2!(\"Visiting fn\");\n             Function {\n                 id: item.id,\n                 vis: item.vis,\n@@ -96,7 +96,7 @@ impl RustdocVisitor {\n             let name = match am.find(&id) {\n                 Some(m) => match m {\n                     &ast_map::node_item(ref it, _) => Some(it.ident),\n-                    _ => fail!(\"mod id mapped to non-item in the ast map\")\n+                    _ => fail2!(\"mod id mapped to non-item in the ast map\")\n                 },\n                 None => None\n             };\n@@ -113,7 +113,7 @@ impl RustdocVisitor {\n         }\n \n         fn visit_item(item: &ast::item, om: &mut Module) {\n-            debug!(\"Visiting item %?\", item);\n+            debug2!(\"Visiting item {:?}\", item);\n             match item.node {\n                 ast::item_mod(ref m) => {\n                     om.mods.push(visit_mod_contents(item.span, item.attrs.clone(),"}]}