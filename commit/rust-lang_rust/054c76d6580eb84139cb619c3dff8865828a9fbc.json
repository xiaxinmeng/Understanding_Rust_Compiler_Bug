{"sha": "054c76d6580eb84139cb619c3dff8865828a9fbc", "node_id": "C_kwDOAAsO6NoAKDA1NGM3NmQ2NTgwZWI4NDEzOWNiNjE5YzNkZmY4ODY1ODI4YTlmYmM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-20T14:56:44Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-20T14:56:44Z"}, "message": "Revert most of the custom place computation, it was unnecessary.", "tree": {"sha": "ac0450df0f2de39fb69e4a84ee69d6639fcaf609", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac0450df0f2de39fb69e4a84ee69d6639fcaf609"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/054c76d6580eb84139cb619c3dff8865828a9fbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/054c76d6580eb84139cb619c3dff8865828a9fbc", "html_url": "https://github.com/rust-lang/rust/commit/054c76d6580eb84139cb619c3dff8865828a9fbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/054c76d6580eb84139cb619c3dff8865828a9fbc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82f1e341a365d8e830ea4decdf7842f627d2b435", "url": "https://api.github.com/repos/rust-lang/rust/commits/82f1e341a365d8e830ea4decdf7842f627d2b435", "html_url": "https://github.com/rust-lang/rust/commit/82f1e341a365d8e830ea4decdf7842f627d2b435"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "f1bbdcbe39b7d562d3b0dd52f78a590b2ea46d23", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/054c76d6580eb84139cb619c3dff8865828a9fbc/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054c76d6580eb84139cb619c3dff8865828a9fbc/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=054c76d6580eb84139cb619c3dff8865828a9fbc", "patch": "@@ -538,9 +538,17 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // pointer or `dyn Trait` type, but it could be wrapped in newtypes. So recursively\n                 // unwrap those newtypes until we are there.\n                 let mut receiver = args[0].clone();\n-                let receiver = loop {\n+                let receiver_place = loop {\n                     match receiver.layout.ty.kind() {\n-                        ty::Dynamic(..) | ty::Ref(..) | ty::RawPtr(..) => break receiver,\n+                        ty::Ref(..) | ty::RawPtr(..) => break self.deref_operand(&receiver)?,\n+                        ty::Dynamic(.., ty::Dyn) => break receiver.assert_mem_place(), // no immediate unsized values\n+                        ty::Dynamic(.., ty::DynStar) => {\n+                            // Not clear how to handle this, so far we assume the receiver is always a pointer.\n+                            span_bug!(\n+                                self.cur_span(),\n+                                \"by-value calls on a `dyn*`... are those a thing?\"\n+                            );\n+                        }\n                         _ => {\n                             // Not there yet, search for the only non-ZST field.\n                             let mut non_zst_field = None;\n@@ -568,19 +576,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 };\n \n                 // Obtain the underlying trait we are working on, and the adjusted receiver argument.\n-                let recv_ty = receiver.layout.ty;\n-                let receiver_place = match recv_ty.kind() {\n-                    ty::Ref(..) | ty::RawPtr(..) => self.deref_operand(&receiver)?,\n-                    ty::Dynamic(_, _, ty::Dyn) => receiver.assert_mem_place(), // unsized (`dyn`) cannot be immediate\n-                    ty::Dynamic(_, _, ty::DynStar) => {\n-                        // Not clear how to handle this, so far we assume the receiver is always a pointer.\n-                        span_bug!(\n-                            self.cur_span(),\n-                            \"by-value calls on a `dyn*`... are those a thing?\"\n-                        );\n-                    }\n-                    _ => bug!(),\n-                };\n                 let (vptr, dyn_ty, adjusted_receiver) = if let ty::Dynamic(data, _, ty::DynStar) =\n                     receiver_place.layout.ty.kind()\n                 {"}]}