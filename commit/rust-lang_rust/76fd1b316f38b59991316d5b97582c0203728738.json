{"sha": "76fd1b316f38b59991316d5b97582c0203728738", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZmQxYjMxNmYzOGI1OTk5MTMxNmQ1Yjk3NTgyYzAyMDM3Mjg3Mzg=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-02T13:25:02Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-02T15:12:36Z"}, "message": "Remove obsolete is_new_item field on CompletionContext", "tree": {"sha": "e8572154d505e9eddde4e454ac03dfb06589b464", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8572154d505e9eddde4e454ac03dfb06589b464"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76fd1b316f38b59991316d5b97582c0203728738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76fd1b316f38b59991316d5b97582c0203728738", "html_url": "https://github.com/rust-lang/rust/commit/76fd1b316f38b59991316d5b97582c0203728738", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76fd1b316f38b59991316d5b97582c0203728738/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9271941a950026836511bd1c85e15e26a480b824", "url": "https://api.github.com/repos/rust-lang/rust/commits/9271941a950026836511bd1c85e15e26a480b824", "html_url": "https://github.com/rust-lang/rust/commit/9271941a950026836511bd1c85e15e26a480b824"}], "stats": {"total": 22, "additions": 5, "deletions": 17}, "files": [{"sha": "781b96ff185a17aa35714a02bcdab8b32d0ab0d5", "filename": "crates/ide_completion/src/completions/macro_in_item_position.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76fd1b316f38b59991316d5b97582c0203728738/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76fd1b316f38b59991316d5b97582c0203728738/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs?ref=76fd1b316f38b59991316d5b97582c0203728738", "patch": "@@ -5,7 +5,7 @@ use crate::{CompletionContext, Completions};\n // Ideally this should be removed and moved into `(un)qualified_path` respectively\n pub(crate) fn complete_macro_in_item_position(acc: &mut Completions, ctx: &CompletionContext) {\n     // Show only macros in top level.\n-    if !ctx.is_new_item {\n+    if !ctx.expects_item() {\n         return;\n     }\n "}, {"sha": "6e6a6eb92ef4dc7d7c6484aa476e73cc57db763e", "filename": "crates/ide_completion/src/completions/snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76fd1b316f38b59991316d5b97582c0203728738/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76fd1b316f38b59991316d5b97582c0203728738/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=76fd1b316f38b59991316d5b97582c0203728738", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionConte\n }\n \n pub(crate) fn complete_item_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !ctx.is_new_item {\n+    if !ctx.expects_item() {\n         return;\n     }\n     let cap = match ctx.config.snippet_cap {"}, {"sha": "6f685c02f3857514c089f09e9fc88ce8bc5f3d33", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76fd1b316f38b59991316d5b97582c0203728738/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76fd1b316f38b59991316d5b97582c0203728738/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=76fd1b316f38b59991316d5b97582c0203728738", "patch": "@@ -78,8 +78,6 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) can_be_stmt: bool,\n     /// `true` if we expect an expression at the cursor position.\n     pub(super) is_expr: bool,\n-    /// Something is typed at the \"top\" level, in module or impl/trait.\n-    pub(super) is_new_item: bool,\n     /// If this is a call (method or function) in particular, i.e. the () are already there.\n     pub(super) is_call: bool,\n     /// Like `is_call`, but for tuple patterns.\n@@ -155,7 +153,6 @@ impl<'a> CompletionContext<'a> {\n             path_qual: None,\n             can_be_stmt: false,\n             is_expr: false,\n-            is_new_item: false,\n             is_call: false,\n             is_pattern_call: false,\n             is_macro_call: false,\n@@ -552,16 +549,7 @@ impl<'a> CompletionContext<'a> {\n         self.name_ref_syntax =\n             find_node_at_offset(original_file, name_ref.syntax().text_range().start());\n \n-        let name_range = name_ref.syntax().text_range();\n-        let top_node = name_ref\n-            .syntax()\n-            .ancestors()\n-            .take_while(|it| it.text_range() == name_range)\n-            .last()\n-            .unwrap();\n-\n-        if matches!(top_node.parent().map(|it| it.kind()), Some(SOURCE_FILE) | Some(ITEM_LIST)) {\n-            self.is_new_item = true;\n+        if matches!(self.completion_location, Some(ImmediateLocation::ItemList)) {\n             return;\n         }\n "}, {"sha": "080898aef00467c550bbabefa9eeabe0fedb02ad", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76fd1b316f38b59991316d5b97582c0203728738/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76fd1b316f38b59991316d5b97582c0203728738/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=76fd1b316f38b59991316d5b97582c0203728738", "patch": "@@ -13,15 +13,15 @@ use syntax::{\n #[cfg(test)]\n use crate::test_utils::{check_pattern_is_applicable, check_pattern_is_not_applicable};\n \n-/// Direct parent container of the cursor position\n+/// Immediate previous node to what we are completing.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub(crate) enum ImmediatePrevSibling {\n     IfExpr,\n     TraitDefName,\n     ImplDefType,\n }\n \n-/// Direct parent container of the cursor position\n+/// Direct parent \"thing\" of what we are currently completing.\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub(crate) enum ImmediateLocation {\n     Use,"}]}