{"sha": "717e0c7b9d4b9fd8a1a3c7451255d30c194c7b3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxN2UwYzdiOWQ0YjlmZDhhMWEzYzc0NTEyNTVkMzBjMTk0YzdiM2U=", "commit": {"author": {"name": "Tim Diekmann", "email": "21277928+TimDiekmann@users.noreply.github.com", "date": "2020-03-26T09:02:36Z"}, "committer": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2020-03-26T16:14:23Z"}, "message": "Apply suggestions from code review\n\nCo-Authored-By: Amanieu d'Antras <amanieu@gmail.com>", "tree": {"sha": "b5623efdabf10c29ef1545bae72cc3ad2a331d20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5623efdabf10c29ef1545bae72cc3ad2a331d20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/717e0c7b9d4b9fd8a1a3c7451255d30c194c7b3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/717e0c7b9d4b9fd8a1a3c7451255d30c194c7b3e", "html_url": "https://github.com/rust-lang/rust/commit/717e0c7b9d4b9fd8a1a3c7451255d30c194c7b3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/717e0c7b9d4b9fd8a1a3c7451255d30c194c7b3e/comments", "author": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03b055b0b4dcf304cd3c5e7a1c6e68fea91584a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/03b055b0b4dcf304cd3c5e7a1c6e68fea91584a9", "html_url": "https://github.com/rust-lang/rust/commit/03b055b0b4dcf304cd3c5e7a1c6e68fea91584a9"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "d5e89f333f15f67dee2259e2be6650502136a044", "filename": "src/libcore/alloc/mod.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/717e0c7b9d4b9fd8a1a3c7451255d30c194c7b3e/src%2Flibcore%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717e0c7b9d4b9fd8a1a3c7451255d30c194c7b3e/src%2Flibcore%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc%2Fmod.rs?ref=717e0c7b9d4b9fd8a1a3c7451255d30c194c7b3e", "patch": "@@ -221,21 +221,22 @@ pub unsafe trait AllocRef {\n     /// allocation referenced by `ptr` to fit the new layout. If the [`placement`] is\n     /// [`InPlace`], the returned pointer is guaranteed to be the same as the passed `ptr`.\n     ///\n-    /// If this returns `Ok`, then ownership of the memory block referenced by `ptr` has been\n-    /// transferred to this allocator. The memory may or may not have been freed, and should be\n-    /// considered unusable (unless of course it was transferred back to the caller again via the\n+    /// If `ReallocPlacement::MayMove` is used then ownership of the memory block referenced by `ptr`\n+    /// is transferred to this allocator. The memory may or may not be freed, and should be\n+    /// considered unusable (unless of course it is transferred back to the caller again via the\n     /// return value of this method).\n     ///\n     /// If this method returns `Err`, then ownership of the memory block has not been transferred to\n     /// this allocator, and the contents of the memory block are unaltered.\n     ///\n-    /// The behavior of how the allocator tries to grow the memory is specified by [`placement`].\n-    /// After growing a memory block, the new memory can be separated into three regions:\n-    ///   1. `0..layout.size()`. This region is preserved or copied as appropriate from `ptr`.\n-    ///   2. `layout.size()..allocated_size` where `allocated_size` is the latest returned\n-    ///       size of the allocator. The new content is implementation defined. Allocators may\n-    ///       initialize it according to [`init`] or leave them as is.\n-    ///   3. `allocated_size..returned_size` is initialized according to [`init`].\n+    /// The memory block will contain the following contents after a successful call to `grow`:\n+    ///   * Bytes `0..layout.size()` are preserved from the original allocation.\n+    ///   * Bytes `layout.size()..old_size` will either be preserved or initialized according to\n+    ///     [`init`], depending on the allocator implementation. `old_size` refers to the size of\n+    ///     the `MemoryBlock` prior to the `grow` call, which may be larger than the size\n+    ///     that was originally requested when it was allocated.\n+    ///   * Bytes `old_size..new_size` are initialized according to [`init`]. `new_size` refers to\n+    ///     the size of the `MemoryBlock` returned by the `grow` call.\n     ///\n     /// [`InPlace`]: ReallocPlacement::InPlace\n     /// [`placement`]: ReallocPlacement"}]}