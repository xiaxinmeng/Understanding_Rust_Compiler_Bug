{"sha": "578960d61dbc01ff2db05ea818e41414a7acc12e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ODk2MGQ2MWRiYzAxZmYyZGIwNWVhODE4ZTQxNDE0YTdhY2MxMmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-15T16:47:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-15T16:47:06Z"}, "message": "Auto merge of #5177 - matthewjasper:own-infer, r=flip1995\n\nAvoid using regions from `TypeckTables`\n\nThese regions will all be `ReErased` soon. (rust-lang/rust#69189)\n\nchangelog: none", "tree": {"sha": "aa511ae13c66ffaeae95bb0a8e4d1bfa33e32990", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa511ae13c66ffaeae95bb0a8e4d1bfa33e32990"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/578960d61dbc01ff2db05ea818e41414a7acc12e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/578960d61dbc01ff2db05ea818e41414a7acc12e", "html_url": "https://github.com/rust-lang/rust/commit/578960d61dbc01ff2db05ea818e41414a7acc12e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/578960d61dbc01ff2db05ea818e41414a7acc12e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "779b6aeaa62d7d832bb791c7d92ed11d43f4873a", "url": "https://api.github.com/repos/rust-lang/rust/commits/779b6aeaa62d7d832bb791c7d92ed11d43f4873a", "html_url": "https://github.com/rust-lang/rust/commit/779b6aeaa62d7d832bb791c7d92ed11d43f4873a"}, {"sha": "787398aa53ef633d67433e6e89c14590b54fa4af", "url": "https://api.github.com/repos/rust-lang/rust/commits/787398aa53ef633d67433e6e89c14590b54fa4af", "html_url": "https://github.com/rust-lang/rust/commit/787398aa53ef633d67433e6e89c14590b54fa4af"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "d84948654771301ca4ea9182eab63f87f71a9958", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/578960d61dbc01ff2db05ea818e41414a7acc12e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/578960d61dbc01ff2db05ea818e41414a7acc12e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=578960d61dbc01ff2db05ea818e41414a7acc12e", "patch": "@@ -1721,14 +1721,49 @@ fn lint_expect_fun_call(\n         if match_type(cx, arg_ty, &paths::STRING) {\n             return false;\n         }\n-        if let ty::Ref(ty::ReStatic, ty, ..) = arg_ty.kind {\n-            if ty.kind == ty::Str {\n+        if let ty::Ref(_, ty, ..) = arg_ty.kind {\n+            if ty.kind == ty::Str && can_be_static_str(cx, arg) {\n                 return false;\n             }\n         };\n         true\n     }\n \n+    // Check if an expression could have type `&'static str`, knowing that it\n+    // has type `&str` for some lifetime.\n+    fn can_be_static_str(cx: &LateContext<'_, '_>, arg: &hir::Expr<'_>) -> bool {\n+        match arg.kind {\n+            hir::ExprKind::Lit(_) => true,\n+            hir::ExprKind::Call(fun, _) => {\n+                if let hir::ExprKind::Path(ref p) = fun.kind {\n+                    match cx.tables.qpath_res(p, fun.hir_id) {\n+                        hir::def::Res::Def(hir::def::DefKind::Fn, def_id)\n+                        | hir::def::Res::Def(hir::def::DefKind::Method, def_id) => matches!(\n+                            cx.tcx.fn_sig(def_id).output().skip_binder().kind,\n+                            ty::Ref(ty::ReStatic, ..)\n+                        ),\n+                        _ => false,\n+                    }\n+                } else {\n+                    false\n+                }\n+            },\n+            hir::ExprKind::MethodCall(..) => cx.tables.type_dependent_def_id(arg.hir_id).map_or(false, |method_id| {\n+                matches!(\n+                    cx.tcx.fn_sig(method_id).output().skip_binder().kind,\n+                    ty::Ref(ty::ReStatic, ..)\n+                )\n+            }),\n+            hir::ExprKind::Path(ref p) => match cx.tables.qpath_res(p, arg.hir_id) {\n+                hir::def::Res::Def(hir::def::DefKind::Const, _) | hir::def::Res::Def(hir::def::DefKind::Static, _) => {\n+                    true\n+                },\n+                _ => false,\n+            },\n+            _ => false,\n+        }\n+    }\n+\n     fn generate_format_arg_snippet(\n         cx: &LateContext<'_, '_>,\n         a: &hir::Expr<'_>,"}, {"sha": "7bf7f21dd54ea786eee8ac38b37051f39e0022e4", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/578960d61dbc01ff2db05ea818e41414a7acc12e/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/578960d61dbc01ff2db05ea818e41414a7acc12e/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=578960d61dbc01ff2db05ea818e41414a7acc12e", "patch": "@@ -7,7 +7,7 @@ use if_chain::if_chain;\n use matches::matches;\n use rustc::traits;\n use rustc::traits::misc::can_type_implement_copy;\n-use rustc::ty::{self, RegionKind, TypeFoldable};\n+use rustc::ty::{self, TypeFoldable};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir::intravisit::FnKind;\n@@ -171,7 +171,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                 (\n                     preds.iter().any(|t| t.def_id() == borrow_trait),\n                     !preds.is_empty() && {\n-                        let ty_empty_region = cx.tcx.mk_imm_ref(&RegionKind::ReEmpty(ty::UniverseIndex::ROOT), ty);\n+                        let ty_empty_region = cx.tcx.mk_imm_ref(cx.tcx.lifetimes.re_root_empty, ty);\n                         preds.iter().all(|t| {\n                             let ty_params = &t\n                                 .skip_binder()"}]}