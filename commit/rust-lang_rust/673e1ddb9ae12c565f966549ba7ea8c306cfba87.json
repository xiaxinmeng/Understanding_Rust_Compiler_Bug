{"sha": "673e1ddb9ae12c565f966549ba7ea8c306cfba87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3M2UxZGRiOWFlMTJjNTY1Zjk2NjU0OWJhN2VhOGMzMDZjZmJhODc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-02T15:50:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-02T15:50:20Z"}, "message": "Merge #6123\n\n6123: Reduce duplication in fixtures r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a1d9c304711806c393163547fe6da69289aa9f16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1d9c304711806c393163547fe6da69289aa9f16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/673e1ddb9ae12c565f966549ba7ea8c306cfba87", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfd0w8CRBK7hj4Ov3rIwAAdHIIAG7P51bfZyF10nGEPBATQq1e\n4ZmRka7nKdYto/7n2AFBVgp37/jNzWwGt4Acexl6xKf6X2EbWXdccIZBDXFDZFQN\nr5LjkFU58kGOKH9SLozM2OIZlalYiI5iY1EMPsjDd6HBiy+0uFTz3y/lBAEAIith\nbW5HzfZdle93qj/Qnm4fje9Fl7gMfd9ee08J8GJXTKJ1JSMMNZO76Puqc3SwvKKY\nB8rEXTZ26RKVcPxa+H1gpRXYipJHSGjFkhAYO5qMuPs8VU/Qw51mgKFlwyJ0Kqt9\nLlM0ws1j9Ut3b6ZNRjFFeHwxW3H18XA8dG3NY1ShkNMsn04aDsQhCP+2XL4RsaQ=\n=u0+A\n-----END PGP SIGNATURE-----\n", "payload": "tree a1d9c304711806c393163547fe6da69289aa9f16\nparent a360832c95dbfe10167ebebe4978760e9be6a4bd\nparent b06259673f9b535a63c0cabf4eeb935ff73d86d0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1601653820 +0000\ncommitter GitHub <noreply@github.com> 1601653820 +0000\n\nMerge #6123\n\n6123: Reduce duplication in fixtures r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/673e1ddb9ae12c565f966549ba7ea8c306cfba87", "html_url": "https://github.com/rust-lang/rust/commit/673e1ddb9ae12c565f966549ba7ea8c306cfba87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/673e1ddb9ae12c565f966549ba7ea8c306cfba87/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a360832c95dbfe10167ebebe4978760e9be6a4bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a360832c95dbfe10167ebebe4978760e9be6a4bd", "html_url": "https://github.com/rust-lang/rust/commit/a360832c95dbfe10167ebebe4978760e9be6a4bd"}, {"sha": "b06259673f9b535a63c0cabf4eeb935ff73d86d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b06259673f9b535a63c0cabf4eeb935ff73d86d0", "html_url": "https://github.com/rust-lang/rust/commit/b06259673f9b535a63c0cabf4eeb935ff73d86d0"}], "stats": {"total": 1239, "additions": 567, "deletions": 672}, "files": [{"sha": "043e03bba5c8b2612924c38c66538057672f4e84", "filename": "crates/base_db/src/change.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fbase_db%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fbase_db%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Fchange.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -0,0 +1,97 @@\n+//! Defines a unit of change that can applied to the database to get the next\n+//! state. Changes are transactional.\n+\n+use std::{fmt, sync::Arc};\n+\n+use rustc_hash::FxHashSet;\n+use salsa::Durability;\n+use vfs::FileId;\n+\n+use crate::{CrateGraph, SourceDatabaseExt, SourceRoot, SourceRootId};\n+\n+/// Encapsulate a bunch of raw `.set` calls on the database.\n+#[derive(Default)]\n+pub struct Change {\n+    pub roots: Option<Vec<SourceRoot>>,\n+    pub files_changed: Vec<(FileId, Option<Arc<String>>)>,\n+    pub crate_graph: Option<CrateGraph>,\n+}\n+\n+impl fmt::Debug for Change {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        let mut d = fmt.debug_struct(\"AnalysisChange\");\n+        if let Some(roots) = &self.roots {\n+            d.field(\"roots\", roots);\n+        }\n+        if !self.files_changed.is_empty() {\n+            d.field(\"files_changed\", &self.files_changed.len());\n+        }\n+        if self.crate_graph.is_some() {\n+            d.field(\"crate_graph\", &self.crate_graph);\n+        }\n+        d.finish()\n+    }\n+}\n+\n+impl Change {\n+    pub fn new() -> Change {\n+        Change::default()\n+    }\n+\n+    pub fn set_roots(&mut self, roots: Vec<SourceRoot>) {\n+        self.roots = Some(roots);\n+    }\n+\n+    pub fn change_file(&mut self, file_id: FileId, new_text: Option<Arc<String>>) {\n+        self.files_changed.push((file_id, new_text))\n+    }\n+\n+    pub fn set_crate_graph(&mut self, graph: CrateGraph) {\n+        self.crate_graph = Some(graph);\n+    }\n+\n+    pub fn apply(self, db: &mut dyn SourceDatabaseExt) {\n+        let _p = profile::span(\"RootDatabase::apply_change\");\n+        // db.request_cancellation();\n+        // log::info!(\"apply_change {:?}\", change);\n+        if let Some(roots) = self.roots {\n+            let mut local_roots = FxHashSet::default();\n+            let mut library_roots = FxHashSet::default();\n+            for (idx, root) in roots.into_iter().enumerate() {\n+                let root_id = SourceRootId(idx as u32);\n+                let durability = durability(&root);\n+                if root.is_library {\n+                    library_roots.insert(root_id);\n+                } else {\n+                    local_roots.insert(root_id);\n+                }\n+                for file_id in root.iter() {\n+                    db.set_file_source_root_with_durability(file_id, root_id, durability);\n+                }\n+                db.set_source_root_with_durability(root_id, Arc::new(root), durability);\n+            }\n+            // db.set_local_roots_with_durability(Arc::new(local_roots), Durability::HIGH);\n+            // db.set_library_roots_with_durability(Arc::new(library_roots), Durability::HIGH);\n+        }\n+\n+        for (file_id, text) in self.files_changed {\n+            let source_root_id = db.file_source_root(file_id);\n+            let source_root = db.source_root(source_root_id);\n+            let durability = durability(&source_root);\n+            // XXX: can't actually remove the file, just reset the text\n+            let text = text.unwrap_or_default();\n+            db.set_file_text_with_durability(file_id, text, durability)\n+        }\n+        if let Some(crate_graph) = self.crate_graph {\n+            db.set_crate_graph_with_durability(Arc::new(crate_graph), Durability::HIGH)\n+        }\n+    }\n+}\n+\n+fn durability(source_root: &SourceRoot) -> Durability {\n+    if source_root.is_library {\n+        Durability::HIGH\n+    } else {\n+        Durability::LOW\n+    }\n+}"}, {"sha": "b7286fc7d03d4e52a0a46e25937f192240b57ba5", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 92, "deletions": 83, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -65,24 +65,26 @@ use test_utils::{extract_range_or_offset, Fixture, RangeOrOffset, CURSOR_MARKER}\n use vfs::{file_set::FileSet, VfsPath};\n \n use crate::{\n-    input::CrateName, CrateGraph, CrateId, Edition, Env, FileId, FilePosition, SourceDatabaseExt,\n-    SourceRoot, SourceRootId,\n+    input::CrateName, Change, CrateGraph, CrateId, Edition, Env, FileId, FilePosition,\n+    SourceDatabaseExt, SourceRoot, SourceRootId,\n };\n \n pub const WORKSPACE: SourceRootId = SourceRootId(0);\n \n pub trait WithFixture: Default + SourceDatabaseExt + 'static {\n     fn with_single_file(text: &str) -> (Self, FileId) {\n+        let fixture = ChangeFixture::parse(text);\n         let mut db = Self::default();\n-        let (_, files) = with_files(&mut db, text);\n-        assert_eq!(files.len(), 1);\n-        (db, files[0])\n+        fixture.change.apply(&mut db);\n+        assert_eq!(fixture.files.len(), 1);\n+        (db, fixture.files[0])\n     }\n \n     fn with_files(ra_fixture: &str) -> Self {\n+        let fixture = ChangeFixture::parse(ra_fixture);\n         let mut db = Self::default();\n-        let (pos, _) = with_files(&mut db, ra_fixture);\n-        assert!(pos.is_none());\n+        fixture.change.apply(&mut db);\n+        assert!(fixture.file_position.is_none());\n         db\n     }\n \n@@ -96,9 +98,10 @@ pub trait WithFixture: Default + SourceDatabaseExt + 'static {\n     }\n \n     fn with_range_or_offset(ra_fixture: &str) -> (Self, FileId, RangeOrOffset) {\n+        let fixture = ChangeFixture::parse(ra_fixture);\n         let mut db = Self::default();\n-        let (pos, _) = with_files(&mut db, ra_fixture);\n-        let (file_id, range_or_offset) = pos.unwrap();\n+        fixture.change.apply(&mut db);\n+        let (file_id, range_or_offset) = fixture.file_position.unwrap();\n         (db, file_id, range_or_offset)\n     }\n \n@@ -113,89 +116,95 @@ pub trait WithFixture: Default + SourceDatabaseExt + 'static {\n \n impl<DB: SourceDatabaseExt + Default + 'static> WithFixture for DB {}\n \n-fn with_files(\n-    db: &mut dyn SourceDatabaseExt,\n-    fixture: &str,\n-) -> (Option<(FileId, RangeOrOffset)>, Vec<FileId>) {\n-    let fixture = Fixture::parse(fixture);\n-\n-    let mut files = Vec::new();\n-    let mut crate_graph = CrateGraph::default();\n-    let mut crates = FxHashMap::default();\n-    let mut crate_deps = Vec::new();\n-    let mut default_crate_root: Option<FileId> = None;\n-\n-    let mut file_set = FileSet::default();\n-    let source_root_id = WORKSPACE;\n-    let source_root_prefix = \"/\".to_string();\n-    let mut file_id = FileId(0);\n-\n-    let mut file_position = None;\n-\n-    for entry in fixture {\n-        let text = if entry.text.contains(CURSOR_MARKER) {\n-            let (range_or_offset, text) = extract_range_or_offset(&entry.text);\n-            assert!(file_position.is_none());\n-            file_position = Some((file_id, range_or_offset));\n-            text.to_string()\n-        } else {\n-            entry.text.clone()\n-        };\n+pub struct ChangeFixture {\n+    pub file_position: Option<(FileId, RangeOrOffset)>,\n+    pub files: Vec<FileId>,\n+    pub change: Change,\n+}\n \n-        let meta = FileMeta::from(entry);\n-        assert!(meta.path.starts_with(&source_root_prefix));\n+impl ChangeFixture {\n+    pub fn parse(ra_fixture: &str) -> ChangeFixture {\n+        let fixture = Fixture::parse(ra_fixture);\n+        let mut change = Change::new();\n+\n+        let mut files = Vec::new();\n+        let mut crate_graph = CrateGraph::default();\n+        let mut crates = FxHashMap::default();\n+        let mut crate_deps = Vec::new();\n+        let mut default_crate_root: Option<FileId> = None;\n+        let mut default_cfg = CfgOptions::default();\n+\n+        let mut file_set = FileSet::default();\n+        let source_root_prefix = \"/\".to_string();\n+        let mut file_id = FileId(0);\n+\n+        let mut file_position = None;\n+\n+        for entry in fixture {\n+            let text = if entry.text.contains(CURSOR_MARKER) {\n+                let (range_or_offset, text) = extract_range_or_offset(&entry.text);\n+                assert!(file_position.is_none());\n+                file_position = Some((file_id, range_or_offset));\n+                text.to_string()\n+            } else {\n+                entry.text.clone()\n+            };\n+\n+            let meta = FileMeta::from(entry);\n+            assert!(meta.path.starts_with(&source_root_prefix));\n+\n+            if let Some(krate) = meta.krate {\n+                let crate_id = crate_graph.add_crate_root(\n+                    file_id,\n+                    meta.edition,\n+                    Some(krate.clone()),\n+                    meta.cfg,\n+                    meta.env,\n+                    Default::default(),\n+                );\n+                let crate_name = CrateName::new(&krate).unwrap();\n+                let prev = crates.insert(crate_name.clone(), crate_id);\n+                assert!(prev.is_none());\n+                for dep in meta.deps {\n+                    let dep = CrateName::new(&dep).unwrap();\n+                    crate_deps.push((crate_name.clone(), dep))\n+                }\n+            } else if meta.path == \"/main.rs\" || meta.path == \"/lib.rs\" {\n+                assert!(default_crate_root.is_none());\n+                default_crate_root = Some(file_id);\n+                default_cfg = meta.cfg;\n+            }\n+\n+            change.change_file(file_id, Some(Arc::new(text)));\n+            let path = VfsPath::new_virtual_path(meta.path);\n+            file_set.insert(file_id, path.into());\n+            files.push(file_id);\n+            file_id.0 += 1;\n+        }\n \n-        if let Some(krate) = meta.krate {\n-            let crate_id = crate_graph.add_crate_root(\n-                file_id,\n-                meta.edition,\n-                Some(krate.clone()),\n-                meta.cfg,\n-                meta.env,\n+        if crates.is_empty() {\n+            let crate_root = default_crate_root.unwrap();\n+            crate_graph.add_crate_root(\n+                crate_root,\n+                Edition::Edition2018,\n+                Some(\"test\".to_string()),\n+                default_cfg,\n+                Env::default(),\n                 Default::default(),\n             );\n-            let crate_name = CrateName::new(&krate).unwrap();\n-            let prev = crates.insert(crate_name.clone(), crate_id);\n-            assert!(prev.is_none());\n-            for dep in meta.deps {\n-                let dep = CrateName::new(&dep).unwrap();\n-                crate_deps.push((crate_name.clone(), dep))\n+        } else {\n+            for (from, to) in crate_deps {\n+                let from_id = crates[&from];\n+                let to_id = crates[&to];\n+                crate_graph.add_dep(from_id, CrateName::new(&to).unwrap(), to_id).unwrap();\n             }\n-        } else if meta.path == \"/main.rs\" || meta.path == \"/lib.rs\" {\n-            assert!(default_crate_root.is_none());\n-            default_crate_root = Some(file_id);\n         }\n \n-        db.set_file_text(file_id, Arc::new(text));\n-        db.set_file_source_root(file_id, source_root_id);\n-        let path = VfsPath::new_virtual_path(meta.path);\n-        file_set.insert(file_id, path.into());\n-        files.push(file_id);\n-        file_id.0 += 1;\n-    }\n+        change.set_roots(vec![SourceRoot::new_local(file_set)]);\n+        change.set_crate_graph(crate_graph);\n \n-    if crates.is_empty() {\n-        let crate_root = default_crate_root.unwrap();\n-        crate_graph.add_crate_root(\n-            crate_root,\n-            Edition::Edition2018,\n-            None,\n-            CfgOptions::default(),\n-            Env::default(),\n-            Default::default(),\n-        );\n-    } else {\n-        for (from, to) in crate_deps {\n-            let from_id = crates[&from];\n-            let to_id = crates[&to];\n-            crate_graph.add_dep(from_id, CrateName::new(&to).unwrap(), to_id).unwrap();\n-        }\n+        ChangeFixture { file_position, files, change }\n     }\n-\n-    db.set_source_root(source_root_id, Arc::new(SourceRoot::new_local(file_set)));\n-    db.set_crate_graph(Arc::new(crate_graph));\n-\n-    (file_position, files)\n }\n \n struct FileMeta {"}, {"sha": "e38aa725751bcc381c447374d5fd514d14346b1d", "filename": "crates/base_db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fbase_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fbase_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Flib.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -1,6 +1,7 @@\n //! base_db defines basic database traits. The concrete DB is defined by ide.\n mod cancellation;\n mod input;\n+mod change;\n pub mod fixture;\n \n use std::{panic, sync::Arc};\n@@ -10,6 +11,7 @@ use syntax::{ast, Parse, SourceFile, TextRange, TextSize};\n \n pub use crate::{\n     cancellation::Canceled,\n+    change::Change,\n     input::{\n         CrateData, CrateGraph, CrateId, CrateName, Dependency, Edition, Env, FileId, ProcMacroId,\n         SourceRoot, SourceRootId,"}, {"sha": "d2cf2cc7dfae713dc2bb92a5b0cdbe61b72d8d87", "filename": "crates/ide/src/call_hierarchy.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -139,15 +139,15 @@ impl CallLocations {\n mod tests {\n     use base_db::FilePosition;\n \n-    use crate::mock_analysis::analysis_and_position;\n+    use crate::fixture;\n \n     fn check_hierarchy(\n         ra_fixture: &str,\n         expected: &str,\n         expected_incoming: &[&str],\n         expected_outgoing: &[&str],\n     ) {\n-        let (analysis, pos) = analysis_and_position(ra_fixture);\n+        let (analysis, pos) = fixture::position(ra_fixture);\n \n         let mut navs = analysis.call_hierarchy(pos).unwrap().unwrap().info;\n         assert_eq!(navs.len(), 1);\n@@ -181,8 +181,8 @@ fn caller() {\n     call<|>ee();\n }\n \"#,\n-            \"callee FN FileId(1) 0..14 3..9\",\n-            &[\"caller FN FileId(1) 15..44 18..24 : [33..39]\"],\n+            \"callee FN FileId(0) 0..14 3..9\",\n+            &[\"caller FN FileId(0) 15..44 18..24 : [33..39]\"],\n             &[],\n         );\n     }\n@@ -197,8 +197,8 @@ fn caller() {\n     callee();\n }\n \"#,\n-            \"callee FN FileId(1) 0..14 3..9\",\n-            &[\"caller FN FileId(1) 15..44 18..24 : [33..39]\"],\n+            \"callee FN FileId(0) 0..14 3..9\",\n+            &[\"caller FN FileId(0) 15..44 18..24 : [33..39]\"],\n             &[],\n         );\n     }\n@@ -214,8 +214,8 @@ fn caller() {\n     callee();\n }\n \"#,\n-            \"callee FN FileId(1) 0..14 3..9\",\n-            &[\"caller FN FileId(1) 15..58 18..24 : [33..39, 47..53]\"],\n+            \"callee FN FileId(0) 0..14 3..9\",\n+            &[\"caller FN FileId(0) 15..58 18..24 : [33..39, 47..53]\"],\n             &[],\n         );\n     }\n@@ -234,10 +234,10 @@ fn caller2() {\n     callee();\n }\n \"#,\n-            \"callee FN FileId(1) 0..14 3..9\",\n+            \"callee FN FileId(0) 0..14 3..9\",\n             &[\n-                \"caller1 FN FileId(1) 15..45 18..25 : [34..40]\",\n-                \"caller2 FN FileId(1) 47..77 50..57 : [66..72]\",\n+                \"caller1 FN FileId(0) 15..45 18..25 : [34..40]\",\n+                \"caller2 FN FileId(0) 47..77 50..57 : [66..72]\",\n             ],\n             &[],\n         );\n@@ -263,10 +263,10 @@ mod tests {\n     }\n }\n \"#,\n-            \"callee FN FileId(1) 0..14 3..9\",\n+            \"callee FN FileId(0) 0..14 3..9\",\n             &[\n-                \"caller1 FN FileId(1) 15..45 18..25 : [34..40]\",\n-                \"test_caller FN FileId(1) 95..149 110..121 : [134..140]\",\n+                \"caller1 FN FileId(0) 15..45 18..25 : [34..40]\",\n+                \"test_caller FN FileId(0) 95..149 110..121 : [134..140]\",\n             ],\n             &[],\n         );\n@@ -287,8 +287,8 @@ fn caller() {\n //- /foo/mod.rs\n pub fn callee() {}\n \"#,\n-            \"callee FN FileId(2) 0..18 7..13\",\n-            &[\"caller FN FileId(1) 27..56 30..36 : [45..51]\"],\n+            \"callee FN FileId(1) 0..18 7..13\",\n+            &[\"caller FN FileId(0) 27..56 30..36 : [45..51]\"],\n             &[],\n         );\n     }\n@@ -304,9 +304,9 @@ fn call<|>er() {\n     callee();\n }\n \"#,\n-            \"caller FN FileId(1) 15..58 18..24\",\n+            \"caller FN FileId(0) 15..58 18..24\",\n             &[],\n-            &[\"callee FN FileId(1) 0..14 3..9 : [33..39, 47..53]\"],\n+            &[\"callee FN FileId(0) 0..14 3..9 : [33..39, 47..53]\"],\n         );\n     }\n \n@@ -325,9 +325,9 @@ fn call<|>er() {\n //- /foo/mod.rs\n pub fn callee() {}\n \"#,\n-            \"caller FN FileId(1) 27..56 30..36\",\n+            \"caller FN FileId(0) 27..56 30..36\",\n             &[],\n-            &[\"callee FN FileId(2) 0..18 7..13 : [45..51]\"],\n+            &[\"callee FN FileId(1) 0..18 7..13 : [45..51]\"],\n         );\n     }\n \n@@ -348,9 +348,9 @@ fn caller3() {\n \n }\n \"#,\n-            \"caller2 FN FileId(1) 33..64 36..43\",\n-            &[\"caller1 FN FileId(1) 0..31 3..10 : [19..26]\"],\n-            &[\"caller3 FN FileId(1) 66..83 69..76 : [52..59]\"],\n+            \"caller2 FN FileId(0) 33..64 36..43\",\n+            &[\"caller1 FN FileId(0) 0..31 3..10 : [19..26]\"],\n+            &[\"caller3 FN FileId(0) 66..83 69..76 : [52..59]\"],\n         );\n     }\n \n@@ -368,9 +368,9 @@ fn main() {\n     a<|>()\n }\n \"#,\n-            \"a FN FileId(1) 0..18 3..4\",\n-            &[\"main FN FileId(1) 31..52 34..38 : [47..48]\"],\n-            &[\"b FN FileId(1) 20..29 23..24 : [13..14]\"],\n+            \"a FN FileId(0) 0..18 3..4\",\n+            &[\"main FN FileId(0) 31..52 34..38 : [47..48]\"],\n+            &[\"b FN FileId(0) 20..29 23..24 : [13..14]\"],\n         );\n \n         check_hierarchy(\n@@ -385,8 +385,8 @@ fn main() {\n     a()\n }\n \"#,\n-            \"b FN FileId(1) 20..29 23..24\",\n-            &[\"a FN FileId(1) 0..18 3..4 : [13..14]\"],\n+            \"b FN FileId(0) 20..29 23..24\",\n+            &[\"a FN FileId(0) 0..18 3..4 : [13..14]\"],\n             &[],\n         );\n     }"}, {"sha": "d7b2b926e75742453fb2019a4cb9a079482a8ccd", "filename": "crates/ide/src/call_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcall_info.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -232,10 +232,10 @@ mod tests {\n     use expect_test::{expect, Expect};\n     use test_utils::mark;\n \n-    use crate::mock_analysis::analysis_and_position;\n+    use crate::fixture;\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let (analysis, position) = analysis_and_position(ra_fixture);\n+        let (analysis, position) = fixture::position(ra_fixture);\n         let call_info = analysis.call_info(position).unwrap();\n         let actual = match call_info {\n             Some(call_info) => {"}, {"sha": "697f691b04211570d5907bfc23342e23e513004a", "filename": "crates/ide/src/completion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -133,15 +133,15 @@ pub(crate) fn completions(\n #[cfg(test)]\n mod tests {\n     use crate::completion::completion_config::CompletionConfig;\n-    use crate::mock_analysis::analysis_and_position;\n+    use crate::fixture;\n \n     struct DetailAndDocumentation<'a> {\n         detail: &'a str,\n         documentation: &'a str,\n     }\n \n     fn check_detail_and_documentation(ra_fixture: &str, expected: DetailAndDocumentation) {\n-        let (analysis, position) = analysis_and_position(ra_fixture);\n+        let (analysis, position) = fixture::position(ra_fixture);\n         let config = CompletionConfig::default();\n         let completions = analysis.completions(&config, position).unwrap().unwrap();\n         for item in completions {"}, {"sha": "e597470958e304bb9e54e047385701f7e398c124", "filename": "crates/ide/src/completion/complete_keyword.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -495,13 +495,13 @@ Some multi-line comment<|>\n     fn test_completion_await_impls_future() {\n         check(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:std\n use std::future::*;\n struct A {}\n impl Future for A {}\n fn foo(a: A) { a.<|> }\n \n-//- /std/lib.rs\n+//- /std/lib.rs crate:std\n pub mod future {\n     #[lang = \"future_trait\"]\n     pub trait Future {}\n@@ -514,14 +514,14 @@ pub mod future {\n \n         check(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:std\n use std::future::*;\n fn foo() {\n     let a = async {};\n     a.<|>\n }\n \n-//- /std/lib.rs\n+//- /std/lib.rs crate:std\n pub mod future {\n     #[lang = \"future_trait\"]\n     pub trait Future {"}, {"sha": "c7a99bdc33df41570d4d1ab6dff6d2032f47eb0c", "filename": "crates/ide/src/completion/complete_mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_mod.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -300,15 +300,15 @@ mod tests {\n     //     \"#,\n     //         expect![[r#\"\n     //             md bar;\n-    //         \"#]],\n+    //         \"#]],foo\n     //     );\n     // }\n \n     #[test]\n     fn already_declared_bin_module_completion_omitted() {\n         check(\n             r#\"\n-            //- /src/bin.rs\n+            //- /src/bin.rs crate:main\n             fn main() {}\n             //- /src/bin/foo.rs\n             mod <|>"}, {"sha": "2fafedd47c83f1ca4d4d17e0d1cbe11365c20f2d", "filename": "crates/ide/src/completion/complete_qualified_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -422,10 +422,10 @@ fn foo() { let _ = U::<|> }\n     fn completes_use_paths_across_crates() {\n         check(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:foo\n use foo::<|>;\n \n-//- /foo/lib.rs\n+//- /foo/lib.rs crate:foo\n pub mod bar { pub struct S; }\n \"#,\n             expect![[r#\""}, {"sha": "2010d9a2fdb0e45bf6a01953ee2c03278bab1dbd", "filename": "crates/ide/src/completion/complete_unqualified_path.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -271,10 +271,10 @@ fn quux() { <|> }\n     fn completes_extern_prelude() {\n         check(\n             r#\"\n-//- /lib.rs\n+//- /lib.rs crate:main deps:other_crate\n use <|>;\n \n-//- /other_crate/lib.rs\n+//- /other_crate/lib.rs crate:other_crate\n // nothing here\n \"#,\n             expect![[r#\"\n@@ -350,10 +350,10 @@ fn foo() {\n     fn completes_prelude() {\n         check(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:std\n fn foo() { let x: <|> }\n \n-//- /std/lib.rs\n+//- /std/lib.rs crate:std\n #[prelude_import]\n use prelude::*;\n \n@@ -371,16 +371,16 @@ mod prelude { struct Option; }\n     fn completes_std_prelude_if_core_is_defined() {\n         check(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:core,std\n fn foo() { let x: <|> }\n \n-//- /core/lib.rs\n+//- /core/lib.rs crate:core\n #[prelude_import]\n use prelude::*;\n \n mod prelude { struct Option; }\n \n-//- /std/lib.rs\n+//- /std/lib.rs crate:std deps:core\n #[prelude_import]\n use prelude::*;\n "}, {"sha": "a5172b87ece5d5b38c85b6ea467b3faae14835b3", "filename": "crates/ide/src/completion/presentation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -1172,9 +1172,9 @@ fn foo(xs: Vec<i128>)\n         check_edit(\n             \"frobnicate!\",\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:foo\n use foo::<|>;\n-//- /foo/lib.rs\n+//- /foo/lib.rs crate:foo\n #[macro_export]\n macro_rules frobnicate { () => () }\n \"#,"}, {"sha": "feb8cd2a6eec8b3385fa6767681b518ad6caa1d5", "filename": "crates/ide/src/completion/test_utils.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Ftest_utils.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -8,8 +8,7 @@ use test_utils::assert_eq_text;\n \n use crate::{\n     completion::{completion_item::CompletionKind, CompletionConfig},\n-    mock_analysis::analysis_and_position,\n-    CompletionItem,\n+    fixture, CompletionItem,\n };\n \n pub(crate) fn do_completion(code: &str, kind: CompletionKind) -> Vec<CompletionItem> {\n@@ -80,7 +79,7 @@ pub(crate) fn check_edit_with_config(\n     ra_fixture_after: &str,\n ) {\n     let ra_fixture_after = trim_indent(ra_fixture_after);\n-    let (analysis, position) = analysis_and_position(ra_fixture_before);\n+    let (analysis, position) = fixture::position(ra_fixture_before);\n     let completions: Vec<CompletionItem> =\n         analysis.completions(&config, position).unwrap().unwrap().into();\n     let (completion,) = completions\n@@ -94,7 +93,7 @@ pub(crate) fn check_edit_with_config(\n }\n \n pub(crate) fn check_pattern_is_applicable(code: &str, check: fn(SyntaxElement) -> bool) {\n-    let (analysis, pos) = analysis_and_position(code);\n+    let (analysis, pos) = fixture::position(code);\n     analysis\n         .with_db(|db| {\n             let sema = Semantics::new(db);\n@@ -109,6 +108,6 @@ pub(crate) fn get_all_completion_items(\n     config: CompletionConfig,\n     code: &str,\n ) -> Vec<CompletionItem> {\n-    let (analysis, position) = analysis_and_position(code);\n+    let (analysis, position) = fixture::position(code);\n     analysis.completions(&config, position).unwrap().unwrap().into()\n }"}, {"sha": "f5d627b6efb816f26571bcc8bd8cfc427d919c87", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -218,10 +218,7 @@ mod tests {\n     use stdx::trim_indent;\n     use test_utils::assert_eq_text;\n \n-    use crate::{\n-        mock_analysis::{analysis_and_position, single_file, MockAnalysis},\n-        DiagnosticsConfig,\n-    };\n+    use crate::{fixture, DiagnosticsConfig};\n \n     /// Takes a multi-file input fixture with annotated cursor positions,\n     /// and checks that:\n@@ -231,7 +228,7 @@ mod tests {\n     fn check_fix(ra_fixture_before: &str, ra_fixture_after: &str) {\n         let after = trim_indent(ra_fixture_after);\n \n-        let (analysis, file_position) = analysis_and_position(ra_fixture_before);\n+        let (analysis, file_position) = fixture::position(ra_fixture_before);\n         let diagnostic = analysis\n             .diagnostics(&DiagnosticsConfig::default(), file_position.file_id)\n             .unwrap()\n@@ -260,7 +257,7 @@ mod tests {\n     /// which has a fix that can apply to other files.\n     fn check_apply_diagnostic_fix_in_other_file(ra_fixture_before: &str, ra_fixture_after: &str) {\n         let ra_fixture_after = &trim_indent(ra_fixture_after);\n-        let (analysis, file_pos) = analysis_and_position(ra_fixture_before);\n+        let (analysis, file_pos) = fixture::position(ra_fixture_before);\n         let current_file_id = file_pos.file_id;\n         let diagnostic = analysis\n             .diagnostics(&DiagnosticsConfig::default(), current_file_id)\n@@ -282,9 +279,7 @@ mod tests {\n     /// Takes a multi-file input fixture with annotated cursor position and checks that no diagnostics\n     /// apply to the file containing the cursor.\n     fn check_no_diagnostics(ra_fixture: &str) {\n-        let mock = MockAnalysis::with_files(ra_fixture);\n-        let files = mock.files().map(|(it, _)| it).collect::<Vec<_>>();\n-        let analysis = mock.analysis();\n+        let (analysis, files) = fixture::files(ra_fixture);\n         let diagnostics = files\n             .into_iter()\n             .flat_map(|file_id| {\n@@ -295,7 +290,7 @@ mod tests {\n     }\n \n     fn check_expect(ra_fixture: &str, expect: Expect) {\n-        let (analysis, file_id) = single_file(ra_fixture);\n+        let (analysis, file_id) = fixture::file(ra_fixture);\n         let diagnostics = analysis.diagnostics(&DiagnosticsConfig::default(), file_id).unwrap();\n         expect.assert_debug_eq(&diagnostics)\n     }\n@@ -304,7 +299,7 @@ mod tests {\n     fn test_wrap_return_type() {\n         check_fix(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:core\n use core::result::Result::{self, Ok, Err};\n \n fn div(x: i32, y: i32) -> Result<i32, ()> {\n@@ -313,7 +308,7 @@ fn div(x: i32, y: i32) -> Result<i32, ()> {\n     }\n     x / y<|>\n }\n-//- /core/lib.rs\n+//- /core/lib.rs crate:core\n pub mod result {\n     pub enum Result<T, E> { Ok(T), Err(E) }\n }\n@@ -335,7 +330,7 @@ fn div(x: i32, y: i32) -> Result<i32, ()> {\n     fn test_wrap_return_type_handles_generic_functions() {\n         check_fix(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:core\n use core::result::Result::{self, Ok, Err};\n \n fn div<T>(x: T) -> Result<T, i32> {\n@@ -344,7 +339,7 @@ fn div<T>(x: T) -> Result<T, i32> {\n     }\n     <|>x\n }\n-//- /core/lib.rs\n+//- /core/lib.rs crate:core\n pub mod result {\n     pub enum Result<T, E> { Ok(T), Err(E) }\n }\n@@ -366,7 +361,7 @@ fn div<T>(x: T) -> Result<T, i32> {\n     fn test_wrap_return_type_handles_type_aliases() {\n         check_fix(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:core\n use core::result::Result::{self, Ok, Err};\n \n type MyResult<T> = Result<T, ()>;\n@@ -377,7 +372,7 @@ fn div(x: i32, y: i32) -> MyResult<i32> {\n     }\n     x <|>/ y\n }\n-//- /core/lib.rs\n+//- /core/lib.rs crate:core\n pub mod result {\n     pub enum Result<T, E> { Ok(T), Err(E) }\n }\n@@ -401,12 +396,12 @@ fn div(x: i32, y: i32) -> MyResult<i32> {\n     fn test_wrap_return_type_not_applicable_when_expr_type_does_not_match_ok_type() {\n         check_no_diagnostics(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:core\n use core::result::Result::{self, Ok, Err};\n \n fn foo() -> Result<(), i32> { 0 }\n \n-//- /core/lib.rs\n+//- /core/lib.rs crate:core\n pub mod result {\n     pub enum Result<T, E> { Ok(T), Err(E) }\n }\n@@ -418,14 +413,14 @@ pub mod result {\n     fn test_wrap_return_type_not_applicable_when_return_type_is_not_result() {\n         check_no_diagnostics(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:core\n use core::result::Result::{self, Ok, Err};\n \n enum SomeOtherEnum { Ok(i32), Err(String) }\n \n fn foo() -> SomeOtherEnum { 0 }\n \n-//- /core/lib.rs\n+//- /core/lib.rs crate:core\n pub mod result {\n     pub enum Result<T, E> { Ok(T), Err(E) }\n }\n@@ -567,7 +562,7 @@ fn test_fn() {\n                                     file_system_edits: [\n                                         CreateFile {\n                                             anchor: FileId(\n-                                                1,\n+                                                0,\n                                             ),\n                                             dst: \"foo.rs\",\n                                         },\n@@ -787,7 +782,7 @@ struct Foo {\n         let mut config = DiagnosticsConfig::default();\n         config.disabled.insert(\"unresolved-module\".into());\n \n-        let (analysis, file_id) = single_file(r#\"mod foo;\"#);\n+        let (analysis, file_id) = fixture::file(r#\"mod foo;\"#);\n \n         let diagnostics = analysis.diagnostics(&config, file_id).unwrap();\n         assert!(diagnostics.is_empty());"}, {"sha": "cf9d617dc0c30cc2f98f96980654bb0eb9ad6888", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -423,11 +423,11 @@ pub(crate) fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) ->\n mod tests {\n     use expect_test::expect;\n \n-    use crate::{mock_analysis::single_file, Query};\n+    use crate::{fixture, Query};\n \n     #[test]\n     fn test_nav_for_symbol() {\n-        let (analysis, _) = single_file(\n+        let (analysis, _) = fixture::file(\n             r#\"\n enum FooInner { }\n fn foo() { enum FooInner { } }\n@@ -439,7 +439,7 @@ fn foo() { enum FooInner { } }\n             [\n                 NavigationTarget {\n                     file_id: FileId(\n-                        1,\n+                        0,\n                     ),\n                     full_range: 0..17,\n                     focus_range: Some(\n@@ -455,7 +455,7 @@ fn foo() { enum FooInner { } }\n                 },\n                 NavigationTarget {\n                     file_id: FileId(\n-                        1,\n+                        0,\n                     ),\n                     full_range: 29..46,\n                     focus_range: Some(\n@@ -478,7 +478,7 @@ fn foo() { enum FooInner { } }\n \n     #[test]\n     fn test_world_symbols_are_case_sensitive() {\n-        let (analysis, _) = single_file(\n+        let (analysis, _) = fixture::file(\n             r#\"\n fn foo() {}\n struct Foo;"}, {"sha": "8d75e0f05c0fb1486c5373cfd889cc623737859b", "filename": "crates/ide/src/expand_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fexpand_macro.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -122,10 +122,10 @@ fn insert_whitespaces(syn: SyntaxNode) -> String {\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::mock_analysis::analysis_and_position;\n+    use crate::fixture;\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let (analysis, pos) = analysis_and_position(ra_fixture);\n+        let (analysis, pos) = fixture::position(ra_fixture);\n         let expansion = analysis.expand_macro(pos).unwrap().unwrap();\n         let actual = format!(\"{}\\n{}\", expansion.name, expansion.expansion);\n         expect.assert_eq(&actual);"}, {"sha": "3ee0af8ad430a02d89e33a410447a35d3b311e53", "filename": "crates/ide/src/extend_selection.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fextend_selection.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -315,12 +315,12 @@ fn adj_comments(comment: &ast::Comment, dir: Direction) -> ast::Comment {\n \n #[cfg(test)]\n mod tests {\n-    use crate::mock_analysis::analysis_and_position;\n+    use crate::fixture;\n \n     use super::*;\n \n     fn do_check(before: &str, afters: &[&str]) {\n-        let (analysis, position) = analysis_and_position(&before);\n+        let (analysis, position) = fixture::position(&before);\n         let before = analysis.file_text(position.file_id).unwrap();\n         let range = TextRange::empty(position.offset);\n         let mut frange = FileRange { file_id: position.file_id, range };"}, {"sha": "ed06689f0cd76700116874e2deb8537126636b63", "filename": "crates/ide/src/fixture.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffixture.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -0,0 +1,70 @@\n+//! Utilities for creating `Analysis` instances for tests.\n+use base_db::fixture::ChangeFixture;\n+use test_utils::{extract_annotations, RangeOrOffset};\n+\n+use crate::{Analysis, AnalysisHost, FileId, FilePosition, FileRange};\n+\n+/// Creates analysis for a single file.\n+pub(crate) fn file(ra_fixture: &str) -> (Analysis, FileId) {\n+    let mut host = AnalysisHost::default();\n+    let change_fixture = ChangeFixture::parse(ra_fixture);\n+    host.db.apply_change(change_fixture.change);\n+    (host.analysis(), change_fixture.files[0])\n+}\n+\n+/// Creates analysis for many files.\n+pub(crate) fn files(ra_fixture: &str) -> (Analysis, Vec<FileId>) {\n+    let mut host = AnalysisHost::default();\n+    let change_fixture = ChangeFixture::parse(ra_fixture);\n+    host.db.apply_change(change_fixture.change);\n+    (host.analysis(), change_fixture.files)\n+}\n+\n+/// Creates analysis from a multi-file fixture, returns positions marked with <|>.\n+pub(crate) fn position(ra_fixture: &str) -> (Analysis, FilePosition) {\n+    let mut host = AnalysisHost::default();\n+    let change_fixture = ChangeFixture::parse(ra_fixture);\n+    host.db.apply_change(change_fixture.change);\n+    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker (<|>)\");\n+    let offset = match range_or_offset {\n+        RangeOrOffset::Range(_) => panic!(),\n+        RangeOrOffset::Offset(it) => it,\n+    };\n+    (host.analysis(), FilePosition { file_id, offset })\n+}\n+\n+/// Creates analysis for a single file, returns range marked with a pair of <|>.\n+pub(crate) fn range(ra_fixture: &str) -> (Analysis, FileRange) {\n+    let mut host = AnalysisHost::default();\n+    let change_fixture = ChangeFixture::parse(ra_fixture);\n+    host.db.apply_change(change_fixture.change);\n+    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker (<|>)\");\n+    let range = match range_or_offset {\n+        RangeOrOffset::Range(it) => it,\n+        RangeOrOffset::Offset(_) => panic!(),\n+    };\n+    (host.analysis(), FileRange { file_id, range })\n+}\n+\n+/// Creates analysis from a multi-file fixture, returns positions marked with <|>.\n+pub(crate) fn annotations(ra_fixture: &str) -> (Analysis, FilePosition, Vec<(FileRange, String)>) {\n+    let mut host = AnalysisHost::default();\n+    let change_fixture = ChangeFixture::parse(ra_fixture);\n+    host.db.apply_change(change_fixture.change);\n+    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker (<|>)\");\n+    let offset = match range_or_offset {\n+        RangeOrOffset::Range(_) => panic!(),\n+        RangeOrOffset::Offset(it) => it,\n+    };\n+\n+    let annotations = change_fixture\n+        .files\n+        .iter()\n+        .flat_map(|&file_id| {\n+            let file_text = host.analysis().file_text(file_id).unwrap();\n+            let annotations = extract_annotations(&file_text);\n+            annotations.into_iter().map(move |(range, data)| (FileRange { file_id, range }, data))\n+        })\n+        .collect();\n+    (host.analysis(), FilePosition { file_id, offset }, annotations)\n+}"}, {"sha": "459f201ed805a60e0f746d3af7334f9bb4ec31e8", "filename": "crates/ide/src/fn_references.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Ffn_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Ffn_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffn_references.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -25,15 +25,14 @@ fn method_range(item: SyntaxNode, file_id: FileId) -> Option<FileRange> {\n \n #[cfg(test)]\n mod tests {\n-    use crate::mock_analysis::analysis_and_position;\n+    use crate::fixture;\n     use crate::{FileRange, TextSize};\n     use std::ops::RangeInclusive;\n \n     #[test]\n     fn test_find_all_methods() {\n-        let (analysis, pos) = analysis_and_position(\n+        let (analysis, pos) = fixture::position(\n             r#\"\n-            //- /lib.rs\n             fn private_fn() {<|>}\n \n             pub fn pub_fn() {}\n@@ -48,9 +47,8 @@ mod tests {\n \n     #[test]\n     fn test_find_trait_methods() {\n-        let (analysis, pos) = analysis_and_position(\n+        let (analysis, pos) = fixture::position(\n             r#\"\n-            //- /lib.rs\n             trait Foo {\n                 fn bar() {<|>}\n                 fn baz() {}\n@@ -64,7 +62,7 @@ mod tests {\n \n     #[test]\n     fn test_skip_tests() {\n-        let (analysis, pos) = analysis_and_position(\n+        let (analysis, pos) = fixture::position(\n             r#\"\n             //- /lib.rs\n             #[test]"}, {"sha": "582bf4837d53f38527d9f3f8120ec59b19e06a8f", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -103,12 +103,11 @@ mod tests {\n     use base_db::FileRange;\n     use syntax::{TextRange, TextSize};\n \n-    use crate::mock_analysis::MockAnalysis;\n+    use crate::fixture;\n \n     fn check(ra_fixture: &str) {\n-        let (mock, position) = MockAnalysis::with_files_and_position(ra_fixture);\n-        let (mut expected, data) = mock.annotation();\n-        let analysis = mock.analysis();\n+        let (analysis, position, mut annotations) = fixture::annotations(ra_fixture);\n+        let (mut expected, data) = annotations.pop().unwrap();\n         match data.as_str() {\n             \"\" => (),\n             \"file\" => {\n@@ -133,9 +132,9 @@ mod tests {\n     fn goto_def_for_extern_crate() {\n         check(\n             r#\"\n-            //- /main.rs\n+            //- /main.rs crate:main deps:std\n             extern crate std<|>;\n-            //- /std/lib.rs\n+            //- /std/lib.rs crate:std\n             // empty\n             //^ file\n             \"#,\n@@ -146,9 +145,9 @@ mod tests {\n     fn goto_def_for_renamed_extern_crate() {\n         check(\n             r#\"\n-            //- /main.rs\n+            //- /main.rs crate:main deps:std\n             extern crate std as abc<|>;\n-            //- /std/lib.rs\n+            //- /std/lib.rs crate:std\n             // empty\n             //^ file\n             \"#,\n@@ -342,10 +341,10 @@ fn bar() {\n     fn goto_def_for_use_alias() {\n         check(\n             r#\"\n-//- /lib.rs\n+//- /lib.rs crate:main deps:foo\n use foo as bar<|>;\n \n-//- /foo/lib.rs\n+//- /foo/lib.rs crate:foo\n // empty\n //^ file\n \"#,\n@@ -356,10 +355,10 @@ use foo as bar<|>;\n     fn goto_def_for_use_alias_foo_macro() {\n         check(\n             r#\"\n-//- /lib.rs\n+//- /lib.rs crate:main deps:foo\n use foo::foo as bar<|>;\n \n-//- /foo/lib.rs\n+//- /foo/lib.rs crate:foo\n #[macro_export]\n macro_rules! foo { () => { () } }\n            //^^^\n@@ -371,7 +370,6 @@ macro_rules! foo { () => { () } }\n     fn goto_def_for_methods() {\n         check(\n             r#\"\n-//- /lib.rs\n struct Foo;\n impl Foo {\n     fn frobnicate(&self) { }"}, {"sha": "6c586bbd120e1dd100f6b31df9577fd2e91536c0", "filename": "crates/ide/src/goto_implementation.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_implementation.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -76,12 +76,10 @@ fn impls_for_trait(\n mod tests {\n     use base_db::FileRange;\n \n-    use crate::mock_analysis::MockAnalysis;\n+    use crate::fixture;\n \n     fn check(ra_fixture: &str) {\n-        let (mock, position) = MockAnalysis::with_files_and_position(ra_fixture);\n-        let annotations = mock.annotations();\n-        let analysis = mock.analysis();\n+        let (analysis, position, annotations) = fixture::annotations(ra_fixture);\n \n         let navs = analysis.goto_implementation(position).unwrap().unwrap().info;\n "}, {"sha": "6d0df04dd065ec9ada30e8bd767a678743924bd7", "filename": "crates/ide/src/goto_type_definition.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -56,13 +56,12 @@ fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n mod tests {\n     use base_db::FileRange;\n \n-    use crate::mock_analysis::MockAnalysis;\n+    use crate::fixture;\n \n     fn check(ra_fixture: &str) {\n-        let (mock, position) = MockAnalysis::with_files_and_position(ra_fixture);\n-        let (expected, data) = mock.annotation();\n+        let (analysis, position, mut annotations) = fixture::annotations(ra_fixture);\n+        let (expected, data) = annotations.pop().unwrap();\n         assert!(data.is_empty());\n-        let analysis = mock.analysis();\n \n         let mut navs = analysis.goto_type_definition(position).unwrap().unwrap().info;\n         assert_eq!(navs.len(), 1);"}, {"sha": "9cf02f0a32fe829b5734a529f08a0379913ee0ef", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -377,17 +377,17 @@ mod tests {\n     use base_db::FileLoader;\n     use expect_test::{expect, Expect};\n \n-    use crate::mock_analysis::analysis_and_position;\n+    use crate::fixture;\n \n     use super::*;\n \n     fn check_hover_no_result(ra_fixture: &str) {\n-        let (analysis, position) = analysis_and_position(ra_fixture);\n+        let (analysis, position) = fixture::position(ra_fixture);\n         assert!(analysis.hover(position, true).unwrap().is_none());\n     }\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let (analysis, position) = analysis_and_position(ra_fixture);\n+        let (analysis, position) = fixture::position(ra_fixture);\n         let hover = analysis.hover(position, true).unwrap().unwrap();\n \n         let content = analysis.db.file_text(position.file_id);\n@@ -398,7 +398,7 @@ mod tests {\n     }\n \n     fn check_hover_no_links(ra_fixture: &str, expect: Expect) {\n-        let (analysis, position) = analysis_and_position(ra_fixture);\n+        let (analysis, position) = fixture::position(ra_fixture);\n         let hover = analysis.hover(position, false).unwrap().unwrap();\n \n         let content = analysis.db.file_text(position.file_id);\n@@ -409,7 +409,7 @@ mod tests {\n     }\n \n     fn check_actions(ra_fixture: &str, expect: Expect) {\n-        let (analysis, position) = analysis_and_position(ra_fixture);\n+        let (analysis, position) = fixture::position(ra_fixture);\n         let hover = analysis.hover(position, true).unwrap().unwrap();\n         expect.assert_debug_eq(&hover.info.actions)\n     }\n@@ -963,7 +963,7 @@ impl Thing {\n             \"#]],\n         )\n     } /* FIXME: revive these tests\n-              let (analysis, position) = analysis_and_position(\n+              let (analysis, position) = fixture::position(\n                   \"\n                   struct Thing { x: u32 }\n                   impl Thing {\n@@ -977,7 +977,7 @@ impl Thing {\n               let hover = analysis.hover(position).unwrap().unwrap();\n               assert_eq!(trim_markup(&hover.info.markup.as_str()), (\"Thing\"));\n \n-              let (analysis, position) = analysis_and_position(\n+              let (analysis, position) = fixture::position(\n                   \"\n                   enum Thing { A }\n                   impl Thing {\n@@ -990,7 +990,7 @@ impl Thing {\n               let hover = analysis.hover(position).unwrap().unwrap();\n               assert_eq!(trim_markup(&hover.info.markup.as_str()), (\"enum Thing\"));\n \n-              let (analysis, position) = analysis_and_position(\n+              let (analysis, position) = fixture::position(\n                   \"\n                   enum Thing { A }\n                   impl Thing {\n@@ -1275,7 +1275,7 @@ fn bar() { fo<|>o(); }\n                     Implementaion(\n                         FilePosition {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             offset: 13,\n                         },\n@@ -1289,9 +1289,9 @@ fn bar() { fo<|>o(); }\n     fn test_hover_extern_crate() {\n         check(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:std\n extern crate st<|>d;\n-//- /std/lib.rs\n+//- /std/lib.rs crate:std\n //! Standard library for this test\n //!\n //! Printed?\n@@ -1307,9 +1307,9 @@ extern crate st<|>d;\n         );\n         check(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:std\n extern crate std as ab<|>c;\n-//- /std/lib.rs\n+//- /std/lib.rs crate:std\n //! Standard library for this test\n //!\n //! Printed?\n@@ -1989,7 +1989,7 @@ fn foo() { let bar = Bar; bar.fo<|>o(); }\n                     Implementaion(\n                         FilePosition {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             offset: 6,\n                         },\n@@ -2008,7 +2008,7 @@ fn foo() { let bar = Bar; bar.fo<|>o(); }\n                     Implementaion(\n                         FilePosition {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             offset: 7,\n                         },\n@@ -2027,7 +2027,7 @@ fn foo() { let bar = Bar; bar.fo<|>o(); }\n                     Implementaion(\n                         FilePosition {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             offset: 6,\n                         },\n@@ -2046,7 +2046,7 @@ fn foo() { let bar = Bar; bar.fo<|>o(); }\n                     Implementaion(\n                         FilePosition {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             offset: 5,\n                         },\n@@ -2069,7 +2069,7 @@ fn foo_<|>test() {}\n                         Runnable {\n                             nav: NavigationTarget {\n                                 file_id: FileId(\n-                                    1,\n+                                    0,\n                                 ),\n                                 full_range: 0..24,\n                                 focus_range: Some(\n@@ -2112,7 +2112,7 @@ mod tests<|> {\n                         Runnable {\n                             nav: NavigationTarget {\n                                 file_id: FileId(\n-                                    1,\n+                                    0,\n                                 ),\n                                 full_range: 0..46,\n                                 focus_range: Some(\n@@ -2151,7 +2151,7 @@ fn main() { let s<|>t = S{ f1:0 }; }\n                                 mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..19,\n                                     focus_range: Some(\n@@ -2190,7 +2190,7 @@ fn main() { let s<|>t = S{ f1:Arg(0) }; }\n                                 mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 17..37,\n                                     focus_range: Some(\n@@ -2209,7 +2209,7 @@ fn main() { let s<|>t = S{ f1:Arg(0) }; }\n                                 mod_path: \"test::Arg\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..16,\n                                     focus_range: Some(\n@@ -2248,7 +2248,7 @@ fn main() { let s<|>t = S{ f1: S{ f1: Arg(0) } }; }\n                                 mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 17..37,\n                                     focus_range: Some(\n@@ -2267,7 +2267,7 @@ fn main() { let s<|>t = S{ f1: S{ f1: Arg(0) } }; }\n                                 mod_path: \"test::Arg\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..16,\n                                     focus_range: Some(\n@@ -2309,7 +2309,7 @@ fn main() { let s<|>t = (A(1), B(2), M::C(3) ); }\n                                 mod_path: \"test::A\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..14,\n                                     focus_range: Some(\n@@ -2328,7 +2328,7 @@ fn main() { let s<|>t = (A(1), B(2), M::C(3) ); }\n                                 mod_path: \"test::B\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 15..29,\n                                     focus_range: Some(\n@@ -2347,7 +2347,7 @@ fn main() { let s<|>t = (A(1), B(2), M::C(3) ); }\n                                 mod_path: \"test::M::C\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 42..60,\n                                     focus_range: Some(\n@@ -2386,7 +2386,7 @@ fn main() { let s<|>t = foo(); }\n                                 mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..12,\n                                     focus_range: Some(\n@@ -2426,7 +2426,7 @@ fn main() { let s<|>t = foo(); }\n                                 mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..15,\n                                     focus_range: Some(\n@@ -2445,7 +2445,7 @@ fn main() { let s<|>t = foo(); }\n                                 mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 16..25,\n                                     focus_range: Some(\n@@ -2485,7 +2485,7 @@ fn main() { let s<|>t = foo(); }\n                                 mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..12,\n                                     focus_range: Some(\n@@ -2504,7 +2504,7 @@ fn main() { let s<|>t = foo(); }\n                                 mod_path: \"test::Bar\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 13..25,\n                                     focus_range: Some(\n@@ -2547,7 +2547,7 @@ fn main() { let s<|>t = foo(); }\n                                 mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..15,\n                                     focus_range: Some(\n@@ -2566,7 +2566,7 @@ fn main() { let s<|>t = foo(); }\n                                 mod_path: \"test::Bar\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 16..31,\n                                     focus_range: Some(\n@@ -2585,7 +2585,7 @@ fn main() { let s<|>t = foo(); }\n                                 mod_path: \"test::S1\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 32..44,\n                                     focus_range: Some(\n@@ -2604,7 +2604,7 @@ fn main() { let s<|>t = foo(); }\n                                 mod_path: \"test::S2\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 45..57,\n                                     focus_range: Some(\n@@ -2641,7 +2641,7 @@ fn foo(ar<|>g: &impl Foo) {}\n                                 mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..12,\n                                     focus_range: Some(\n@@ -2681,7 +2681,7 @@ fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n                                 mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..12,\n                                     focus_range: Some(\n@@ -2700,7 +2700,7 @@ fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n                                 mod_path: \"test::Bar\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 13..28,\n                                     focus_range: Some(\n@@ -2719,7 +2719,7 @@ fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n                                 mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 29..39,\n                                     focus_range: Some(\n@@ -2764,7 +2764,7 @@ mod future {\n                                 mod_path: \"test::future::Future\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 101..163,\n                                     focus_range: Some(\n@@ -2783,7 +2783,7 @@ mod future {\n                                 mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..9,\n                                     focus_range: Some(\n@@ -2821,7 +2821,7 @@ fn foo(ar<|>g: &impl Foo<S>) {}\n                                 mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..15,\n                                     focus_range: Some(\n@@ -2840,7 +2840,7 @@ fn foo(ar<|>g: &impl Foo<S>) {}\n                                 mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 16..27,\n                                     focus_range: Some(\n@@ -2883,7 +2883,7 @@ fn main() { let s<|>t = foo(); }\n                                 mod_path: \"test::B\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 42..55,\n                                     focus_range: Some(\n@@ -2902,7 +2902,7 @@ fn main() { let s<|>t = foo(); }\n                                 mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..12,\n                                     focus_range: Some(\n@@ -2939,7 +2939,7 @@ fn foo(ar<|>g: &dyn Foo) {}\n                                 mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..12,\n                                     focus_range: Some(\n@@ -2977,7 +2977,7 @@ fn foo(ar<|>g: &dyn Foo<S>) {}\n                                 mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..15,\n                                     focus_range: Some(\n@@ -2996,7 +2996,7 @@ fn foo(ar<|>g: &dyn Foo<S>) {}\n                                 mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 16..27,\n                                     focus_range: Some(\n@@ -3037,7 +3037,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                 mod_path: \"test::ImplTrait\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..21,\n                                     focus_range: Some(\n@@ -3056,7 +3056,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                 mod_path: \"test::B\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 43..57,\n                                     focus_range: Some(\n@@ -3075,7 +3075,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                 mod_path: \"test::DynTrait\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 22..42,\n                                     focus_range: Some(\n@@ -3094,7 +3094,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                 mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 58..69,\n                                     focus_range: Some(\n@@ -3142,7 +3142,7 @@ fn main() { let s<|>t = test().get(); }\n                                 mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..62,\n                                     focus_range: Some("}, {"sha": "0afe5f8fd2dc128db8df098483c0ca4473b94701", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -339,14 +339,14 @@ mod tests {\n     use expect_test::{expect, Expect};\n     use test_utils::extract_annotations;\n \n-    use crate::{inlay_hints::InlayHintsConfig, mock_analysis::single_file};\n+    use crate::{fixture, inlay_hints::InlayHintsConfig};\n \n     fn check(ra_fixture: &str) {\n         check_with_config(InlayHintsConfig::default(), ra_fixture);\n     }\n \n     fn check_with_config(config: InlayHintsConfig, ra_fixture: &str) {\n-        let (analysis, file_id) = single_file(ra_fixture);\n+        let (analysis, file_id) = fixture::file(ra_fixture);\n         let expected = extract_annotations(&*analysis.file_text(file_id).unwrap());\n         let inlay_hints = analysis.inlay_hints(file_id, &config).unwrap();\n         let actual =\n@@ -355,7 +355,7 @@ mod tests {\n     }\n \n     fn check_expect(config: InlayHintsConfig, ra_fixture: &str, expect: Expect) {\n-        let (analysis, file_id) = single_file(ra_fixture);\n+        let (analysis, file_id) = fixture::file(ra_fixture);\n         let inlay_hints = analysis.inlay_hints(file_id, &config).unwrap();\n         expect.assert_debug_eq(&inlay_hints)\n     }"}, {"sha": "1aa673cf8a730439913c8085cb29a7072351d648", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -16,7 +16,7 @@ macro_rules! eprintln {\n }\n \n #[cfg(test)]\n-mod mock_analysis;\n+mod fixture;\n \n mod markup;\n mod prime_caches;\n@@ -87,12 +87,11 @@ pub use assists::{\n     utils::MergeBehaviour, Assist, AssistConfig, AssistId, AssistKind, ResolvedAssist,\n };\n pub use base_db::{\n-    Canceled, CrateGraph, CrateId, Edition, FileId, FilePosition, FileRange, SourceRoot,\n+    Canceled, Change, CrateGraph, CrateId, Edition, FileId, FilePosition, FileRange, SourceRoot,\n     SourceRootId,\n };\n pub use hir::{Documentation, Semantics};\n pub use ide_db::{\n-    change::AnalysisChange,\n     label::Label,\n     line_index::{LineCol, LineIndex},\n     search::SearchScope,\n@@ -141,7 +140,7 @@ impl AnalysisHost {\n \n     /// Applies changes to the current state of the world. If there are\n     /// outstanding snapshots, they will be canceled.\n-    pub fn apply_change(&mut self, change: AnalysisChange) {\n+    pub fn apply_change(&mut self, change: Change) {\n         self.db.apply_change(change)\n     }\n \n@@ -195,7 +194,7 @@ impl Analysis {\n         file_set.insert(file_id, VfsPath::new_virtual_path(\"/main.rs\".to_string()));\n         let source_root = SourceRoot::new_local(file_set);\n \n-        let mut change = AnalysisChange::new();\n+        let mut change = Change::new();\n         change.set_roots(vec![source_root]);\n         let mut crate_graph = CrateGraph::default();\n         // FIXME: cfg options"}, {"sha": "327cdf91ebf30678b9f61789cfbfcb80fcec9617", "filename": "crates/ide/src/mock_analysis.rs", "status": "removed", "additions": 0, "deletions": 176, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/a360832c95dbfe10167ebebe4978760e9be6a4bd/crates%2Fide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a360832c95dbfe10167ebebe4978760e9be6a4bd/crates%2Fide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmock_analysis.rs?ref=a360832c95dbfe10167ebebe4978760e9be6a4bd", "patch": "@@ -1,176 +0,0 @@\n-//! FIXME: write short doc here\n-use std::sync::Arc;\n-\n-use base_db::{CrateName, FileSet, SourceRoot, VfsPath};\n-use cfg::CfgOptions;\n-use test_utils::{\n-    extract_annotations, extract_range_or_offset, Fixture, RangeOrOffset, CURSOR_MARKER,\n-};\n-\n-use crate::{\n-    Analysis, AnalysisChange, AnalysisHost, CrateGraph, Edition, FileId, FilePosition, FileRange,\n-};\n-\n-/// Mock analysis is used in test to bootstrap an AnalysisHost/Analysis\n-/// from a set of in-memory files.\n-#[derive(Debug, Default)]\n-pub(crate) struct MockAnalysis {\n-    files: Vec<Fixture>,\n-}\n-\n-impl MockAnalysis {\n-    /// Creates `MockAnalysis` using a fixture data in the following format:\n-    ///\n-    /// ```not_rust\n-    /// //- /main.rs\n-    /// mod foo;\n-    /// fn main() {}\n-    ///\n-    /// //- /foo.rs\n-    /// struct Baz;\n-    /// ```\n-    pub(crate) fn with_files(ra_fixture: &str) -> MockAnalysis {\n-        let (res, pos) = MockAnalysis::with_fixture(ra_fixture);\n-        assert!(pos.is_none());\n-        res\n-    }\n-\n-    /// Same as `with_files`, but requires that a single file contains a `<|>` marker,\n-    /// whose position is also returned.\n-    pub(crate) fn with_files_and_position(fixture: &str) -> (MockAnalysis, FilePosition) {\n-        let (res, position) = MockAnalysis::with_fixture(fixture);\n-        let (file_id, range_or_offset) = position.expect(\"expected a marker (<|>)\");\n-        let offset = match range_or_offset {\n-            RangeOrOffset::Range(_) => panic!(),\n-            RangeOrOffset::Offset(it) => it,\n-        };\n-        (res, FilePosition { file_id, offset })\n-    }\n-\n-    fn with_fixture(fixture: &str) -> (MockAnalysis, Option<(FileId, RangeOrOffset)>) {\n-        let mut position = None;\n-        let mut res = MockAnalysis::default();\n-        for mut entry in Fixture::parse(fixture) {\n-            if entry.text.contains(CURSOR_MARKER) {\n-                assert!(position.is_none(), \"only one marker (<|>) per fixture is allowed\");\n-                let (range_or_offset, text) = extract_range_or_offset(&entry.text);\n-                entry.text = text;\n-                let file_id = res.add_file_fixture(entry);\n-                position = Some((file_id, range_or_offset));\n-            } else {\n-                res.add_file_fixture(entry);\n-            }\n-        }\n-        (res, position)\n-    }\n-\n-    fn add_file_fixture(&mut self, fixture: Fixture) -> FileId {\n-        let file_id = FileId((self.files.len() + 1) as u32);\n-        self.files.push(fixture);\n-        file_id\n-    }\n-\n-    pub(crate) fn id_of(&self, path: &str) -> FileId {\n-        let (file_id, _) =\n-            self.files().find(|(_, data)| path == data.path).expect(\"no file in this mock\");\n-        file_id\n-    }\n-    pub(crate) fn annotations(&self) -> Vec<(FileRange, String)> {\n-        self.files()\n-            .flat_map(|(file_id, fixture)| {\n-                let annotations = extract_annotations(&fixture.text);\n-                annotations\n-                    .into_iter()\n-                    .map(move |(range, data)| (FileRange { file_id, range }, data))\n-            })\n-            .collect()\n-    }\n-    pub(crate) fn files(&self) -> impl Iterator<Item = (FileId, &Fixture)> + '_ {\n-        self.files.iter().enumerate().map(|(idx, fixture)| (FileId(idx as u32 + 1), fixture))\n-    }\n-    pub(crate) fn annotation(&self) -> (FileRange, String) {\n-        let mut all = self.annotations();\n-        assert_eq!(all.len(), 1);\n-        all.pop().unwrap()\n-    }\n-    pub(crate) fn analysis_host(self) -> AnalysisHost {\n-        let mut host = AnalysisHost::default();\n-        let mut change = AnalysisChange::new();\n-        let mut file_set = FileSet::default();\n-        let mut crate_graph = CrateGraph::default();\n-        let mut root_crate = None;\n-        for (i, data) in self.files.into_iter().enumerate() {\n-            let path = data.path;\n-            assert!(path.starts_with('/'));\n-\n-            let mut cfg = CfgOptions::default();\n-            data.cfg_atoms.iter().for_each(|it| cfg.insert_atom(it.into()));\n-            data.cfg_key_values.iter().for_each(|(k, v)| cfg.insert_key_value(k.into(), v.into()));\n-            let edition: Edition =\n-                data.edition.and_then(|it| it.parse().ok()).unwrap_or(Edition::Edition2018);\n-\n-            let file_id = FileId(i as u32 + 1);\n-            let env = data.env.into_iter().collect();\n-            if path == \"/lib.rs\" || path == \"/main.rs\" {\n-                root_crate = Some(crate_graph.add_crate_root(\n-                    file_id,\n-                    edition,\n-                    Some(\"test\".to_string()),\n-                    cfg,\n-                    env,\n-                    Default::default(),\n-                ));\n-            } else if path.ends_with(\"/lib.rs\") {\n-                let base = &path[..path.len() - \"/lib.rs\".len()];\n-                let crate_name = &base[base.rfind('/').unwrap() + '/'.len_utf8()..];\n-                let other_crate = crate_graph.add_crate_root(\n-                    file_id,\n-                    edition,\n-                    Some(crate_name.to_string()),\n-                    cfg,\n-                    env,\n-                    Default::default(),\n-                );\n-                if let Some(root_crate) = root_crate {\n-                    crate_graph\n-                        .add_dep(root_crate, CrateName::new(crate_name).unwrap(), other_crate)\n-                        .unwrap();\n-                }\n-            }\n-            let path = VfsPath::new_virtual_path(path.to_string());\n-            file_set.insert(file_id, path);\n-            change.change_file(file_id, Some(Arc::new(data.text).to_owned()));\n-        }\n-        change.set_crate_graph(crate_graph);\n-        change.set_roots(vec![SourceRoot::new_local(file_set)]);\n-        host.apply_change(change);\n-        host\n-    }\n-    pub(crate) fn analysis(self) -> Analysis {\n-        self.analysis_host().analysis()\n-    }\n-}\n-\n-/// Creates analysis from a multi-file fixture, returns positions marked with <|>.\n-pub(crate) fn analysis_and_position(ra_fixture: &str) -> (Analysis, FilePosition) {\n-    let (mock, position) = MockAnalysis::with_files_and_position(ra_fixture);\n-    (mock.analysis(), position)\n-}\n-\n-/// Creates analysis for a single file.\n-pub(crate) fn single_file(ra_fixture: &str) -> (Analysis, FileId) {\n-    let mock = MockAnalysis::with_files(ra_fixture);\n-    let file_id = mock.id_of(\"/main.rs\");\n-    (mock.analysis(), file_id)\n-}\n-\n-/// Creates analysis for a single file, returns range marked with a pair of <|>.\n-pub(crate) fn analysis_and_range(ra_fixture: &str) -> (Analysis, FileRange) {\n-    let (res, position) = MockAnalysis::with_fixture(ra_fixture);\n-    let (file_id, range_or_offset) = position.expect(\"expected a marker (<|>)\");\n-    let range = match range_or_offset {\n-        RangeOrOffset::Range(it) => it,\n-        RangeOrOffset::Offset(_) => panic!(),\n-    };\n-    (res.analysis(), FileRange { file_id, range })\n-}"}, {"sha": "ef94acfecd9e9d0a787141cc353044b8b52aaff1", "filename": "crates/ide/src/parent_module.rs", "status": "modified", "additions": 11, "deletions": 35, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fparent_module.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -63,19 +63,13 @@ pub(crate) fn crate_for(db: &RootDatabase, file_id: FileId) -> Vec<CrateId> {\n \n #[cfg(test)]\n mod tests {\n-    use base_db::Env;\n-    use cfg::CfgOptions;\n     use test_utils::mark;\n \n-    use crate::{\n-        mock_analysis::{analysis_and_position, MockAnalysis},\n-        AnalysisChange, CrateGraph,\n-        Edition::Edition2018,\n-    };\n+    use crate::fixture::{self};\n \n     #[test]\n     fn test_resolve_parent_module() {\n-        let (analysis, pos) = analysis_and_position(\n+        let (analysis, pos) = fixture::position(\n             \"\n             //- /lib.rs\n             mod foo;\n@@ -84,13 +78,13 @@ mod tests {\n             \",\n         );\n         let nav = analysis.parent_module(pos).unwrap().pop().unwrap();\n-        nav.assert_match(\"foo MODULE FileId(1) 0..8\");\n+        nav.assert_match(\"foo MODULE FileId(0) 0..8\");\n     }\n \n     #[test]\n     fn test_resolve_parent_module_on_module_decl() {\n         mark::check!(test_resolve_parent_module_on_module_decl);\n-        let (analysis, pos) = analysis_and_position(\n+        let (analysis, pos) = fixture::position(\n             \"\n             //- /lib.rs\n             mod foo;\n@@ -103,12 +97,12 @@ mod tests {\n             \",\n         );\n         let nav = analysis.parent_module(pos).unwrap().pop().unwrap();\n-        nav.assert_match(\"foo MODULE FileId(1) 0..8\");\n+        nav.assert_match(\"foo MODULE FileId(0) 0..8\");\n     }\n \n     #[test]\n     fn test_resolve_parent_module_for_inline() {\n-        let (analysis, pos) = analysis_and_position(\n+        let (analysis, pos) = fixture::position(\n             \"\n             //- /lib.rs\n             mod foo {\n@@ -119,37 +113,19 @@ mod tests {\n             \",\n         );\n         let nav = analysis.parent_module(pos).unwrap().pop().unwrap();\n-        nav.assert_match(\"baz MODULE FileId(1) 32..44\");\n+        nav.assert_match(\"baz MODULE FileId(0) 32..44\");\n     }\n \n     #[test]\n     fn test_resolve_crate_root() {\n-        let mock = MockAnalysis::with_files(\n+        let (analysis, file_id) = fixture::file(\n             r#\"\n-//- /bar.rs\n+//- /main.rs\n mod foo;\n //- /foo.rs\n-// empty\n+<|>\n \"#,\n         );\n-        let root_file = mock.id_of(\"/bar.rs\");\n-        let mod_file = mock.id_of(\"/foo.rs\");\n-        let mut host = mock.analysis_host();\n-        assert!(host.analysis().crate_for(mod_file).unwrap().is_empty());\n-\n-        let mut crate_graph = CrateGraph::default();\n-        let crate_id = crate_graph.add_crate_root(\n-            root_file,\n-            Edition2018,\n-            None,\n-            CfgOptions::default(),\n-            Env::default(),\n-            Default::default(),\n-        );\n-        let mut change = AnalysisChange::new();\n-        change.set_crate_graph(crate_graph);\n-        host.apply_change(change);\n-\n-        assert_eq!(host.analysis().crate_for(mod_file).unwrap(), vec![crate_id]);\n+        assert_eq!(analysis.crate_for(file_id).unwrap().len(), 1);\n     }\n }"}, {"sha": "e0830eb4fc6fbcc49ca263c15dc008ea456a82c7", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 58, "deletions": 60, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -190,10 +190,11 @@ fn get_struct_def_name_for_struct_literal_search(\n \n #[cfg(test)]\n mod tests {\n+    use base_db::FileId;\n     use expect_test::{expect, Expect};\n     use stdx::format_to;\n \n-    use crate::{mock_analysis::MockAnalysis, SearchScope};\n+    use crate::{fixture, SearchScope};\n \n     #[test]\n     fn test_struct_literal_after_space() {\n@@ -211,9 +212,9 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                Foo STRUCT FileId(1) 0..26 7..10 Other\n+                Foo STRUCT FileId(0) 0..26 7..10 Other\n \n-                FileId(1) 101..104 StructLiteral\n+                FileId(0) 101..104 StructLiteral\n             \"#]],\n         );\n     }\n@@ -229,10 +230,10 @@ struct Foo<|> {}\n }\n \"#,\n             expect![[r#\"\n-                Foo STRUCT FileId(1) 0..13 7..10 Other\n+                Foo STRUCT FileId(0) 0..13 7..10 Other\n \n-                FileId(1) 41..44 Other\n-                FileId(1) 54..57 StructLiteral\n+                FileId(0) 41..44 Other\n+                FileId(0) 54..57 StructLiteral\n             \"#]],\n         );\n     }\n@@ -248,9 +249,9 @@ struct Foo<T> <|>{}\n }\n \"#,\n             expect![[r#\"\n-                Foo STRUCT FileId(1) 0..16 7..10 Other\n+                Foo STRUCT FileId(0) 0..16 7..10 Other\n \n-                FileId(1) 64..67 StructLiteral\n+                FileId(0) 64..67 StructLiteral\n             \"#]],\n         );\n     }\n@@ -267,9 +268,9 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                Foo STRUCT FileId(1) 0..16 7..10 Other\n+                Foo STRUCT FileId(0) 0..16 7..10 Other\n \n-                FileId(1) 54..57 StructLiteral\n+                FileId(0) 54..57 StructLiteral\n             \"#]],\n         );\n     }\n@@ -290,12 +291,12 @@ fn main() {\n     i = 5;\n }\"#,\n             expect![[r#\"\n-                i IDENT_PAT FileId(1) 24..25 Other Write\n+                i IDENT_PAT FileId(0) 24..25 Other Write\n \n-                FileId(1) 50..51 Other Write\n-                FileId(1) 54..55 Other Read\n-                FileId(1) 76..77 Other Write\n-                FileId(1) 94..95 Other Write\n+                FileId(0) 50..51 Other Write\n+                FileId(0) 54..55 Other Read\n+                FileId(0) 76..77 Other Write\n+                FileId(0) 94..95 Other Write\n             \"#]],\n         );\n     }\n@@ -314,10 +315,10 @@ fn bar() {\n }\n \"#,\n             expect![[r#\"\n-                spam IDENT_PAT FileId(1) 19..23 Other\n+                spam IDENT_PAT FileId(0) 19..23 Other\n \n-                FileId(1) 34..38 Other Read\n-                FileId(1) 41..45 Other Read\n+                FileId(0) 34..38 Other Read\n+                FileId(0) 41..45 Other Read\n             \"#]],\n         );\n     }\n@@ -329,9 +330,9 @@ fn bar() {\n fn foo(i : u32) -> u32 { i<|> }\n \"#,\n             expect![[r#\"\n-                i IDENT_PAT FileId(1) 7..8 Other\n+                i IDENT_PAT FileId(0) 7..8 Other\n \n-                FileId(1) 25..26 Other Read\n+                FileId(0) 25..26 Other Read\n             \"#]],\n         );\n     }\n@@ -343,9 +344,9 @@ fn foo(i : u32) -> u32 { i<|> }\n fn foo(i<|> : u32) -> u32 { i }\n \"#,\n             expect![[r#\"\n-                i IDENT_PAT FileId(1) 7..8 Other\n+                i IDENT_PAT FileId(0) 7..8 Other\n \n-                FileId(1) 25..26 Other Read\n+                FileId(0) 25..26 Other Read\n             \"#]],\n         );\n     }\n@@ -364,9 +365,9 @@ fn main(s: Foo) {\n }\n \"#,\n             expect![[r#\"\n-                spam RECORD_FIELD FileId(1) 17..30 21..25 Other\n+                spam RECORD_FIELD FileId(0) 17..30 21..25 Other\n \n-                FileId(1) 67..71 Other Read\n+                FileId(0) 67..71 Other Read\n             \"#]],\n         );\n     }\n@@ -381,7 +382,7 @@ impl Foo {\n }\n \"#,\n             expect![[r#\"\n-                f FN FileId(1) 27..43 30..31 Other\n+                f FN FileId(0) 27..43 30..31 Other\n \n             \"#]],\n         );\n@@ -398,7 +399,7 @@ enum Foo {\n }\n \"#,\n             expect![[r#\"\n-                B VARIANT FileId(1) 22..23 22..23 Other\n+                B VARIANT FileId(0) 22..23 22..23 Other\n \n             \"#]],\n         );\n@@ -439,10 +440,10 @@ fn f() {\n }\n \"#,\n             expect![[r#\"\n-                Foo STRUCT FileId(2) 17..51 28..31 Other\n+                Foo STRUCT FileId(1) 17..51 28..31 Other\n \n-                FileId(1) 53..56 StructLiteral\n-                FileId(3) 79..82 StructLiteral\n+                FileId(0) 53..56 StructLiteral\n+                FileId(2) 79..82 StructLiteral\n             \"#]],\n         );\n     }\n@@ -469,9 +470,9 @@ pub struct Foo {\n }\n \"#,\n             expect![[r#\"\n-                foo SOURCE_FILE FileId(2) 0..35 Other\n+                foo SOURCE_FILE FileId(1) 0..35 Other\n \n-                FileId(1) 14..17 Other\n+                FileId(0) 14..17 Other\n             \"#]],\n         );\n     }\n@@ -497,10 +498,10 @@ pub(super) struct Foo<|> {\n }\n \"#,\n             expect![[r#\"\n-                Foo STRUCT FileId(3) 0..41 18..21 Other\n+                Foo STRUCT FileId(2) 0..41 18..21 Other\n \n-                FileId(2) 20..23 Other\n-                FileId(2) 47..50 StructLiteral\n+                FileId(1) 20..23 Other\n+                FileId(1) 47..50 StructLiteral\n             \"#]],\n         );\n     }\n@@ -525,20 +526,20 @@ pub(super) struct Foo<|> {\n             code,\n             None,\n             expect![[r#\"\n-                quux FN FileId(1) 19..35 26..30 Other\n+                quux FN FileId(0) 19..35 26..30 Other\n \n+                FileId(1) 16..20 StructLiteral\n                 FileId(2) 16..20 StructLiteral\n-                FileId(3) 16..20 StructLiteral\n             \"#]],\n         );\n \n         check_with_scope(\n             code,\n-            Some(\"/bar.rs\"),\n+            Some(SearchScope::single_file(FileId(2))),\n             expect![[r#\"\n-                quux FN FileId(1) 19..35 26..30 Other\n+                quux FN FileId(0) 19..35 26..30 Other\n \n-                FileId(3) 16..20 StructLiteral\n+                FileId(2) 16..20 StructLiteral\n             \"#]],\n         );\n     }\n@@ -556,10 +557,10 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                m1 MACRO_CALL FileId(1) 0..46 29..31 Other\n+                m1 MACRO_CALL FileId(0) 0..46 29..31 Other\n \n-                FileId(1) 63..65 StructLiteral\n-                FileId(1) 73..75 StructLiteral\n+                FileId(0) 63..65 StructLiteral\n+                FileId(0) 73..75 StructLiteral\n             \"#]],\n         );\n     }\n@@ -574,10 +575,10 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                i IDENT_PAT FileId(1) 23..24 Other Write\n+                i IDENT_PAT FileId(0) 23..24 Other Write\n \n-                FileId(1) 34..35 Other Write\n-                FileId(1) 38..39 Other Read\n+                FileId(0) 34..35 Other Write\n+                FileId(0) 38..39 Other Read\n             \"#]],\n         );\n     }\n@@ -596,10 +597,10 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                f RECORD_FIELD FileId(1) 15..21 15..16 Other\n+                f RECORD_FIELD FileId(0) 15..21 15..16 Other\n \n-                FileId(1) 55..56 Other Read\n-                FileId(1) 68..69 Other Write\n+                FileId(0) 55..56 Other Read\n+                FileId(0) 68..69 Other Write\n             \"#]],\n         );\n     }\n@@ -614,9 +615,9 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                i IDENT_PAT FileId(1) 19..20 Other\n+                i IDENT_PAT FileId(0) 19..20 Other\n \n-                FileId(1) 26..27 Other Write\n+                FileId(0) 26..27 Other Write\n             \"#]],\n         );\n     }\n@@ -638,9 +639,9 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                new FN FileId(1) 54..81 61..64 Other\n+                new FN FileId(0) 54..81 61..64 Other\n \n-                FileId(1) 126..129 StructLiteral\n+                FileId(0) 126..129 StructLiteral\n             \"#]],\n         );\n     }\n@@ -660,10 +661,10 @@ use crate::f;\n fn g() { f(); }\n \"#,\n             expect![[r#\"\n-                f FN FileId(1) 22..31 25..26 Other\n+                f FN FileId(0) 22..31 25..26 Other\n \n-                FileId(2) 11..12 Other\n-                FileId(2) 24..25 StructLiteral\n+                FileId(1) 11..12 Other\n+                FileId(1) 24..25 StructLiteral\n             \"#]],\n         );\n     }\n@@ -672,11 +673,8 @@ fn g() { f(); }\n         check_with_scope(ra_fixture, None, expect)\n     }\n \n-    fn check_with_scope(ra_fixture: &str, search_scope: Option<&str>, expect: Expect) {\n-        let (mock_analysis, pos) = MockAnalysis::with_files_and_position(ra_fixture);\n-        let search_scope =\n-            search_scope.map(|path| SearchScope::single_file(mock_analysis.id_of(path)));\n-        let analysis = mock_analysis.analysis();\n+    fn check_with_scope(ra_fixture: &str, search_scope: Option<SearchScope>, expect: Expect) {\n+        let (analysis, pos) = fixture::position(ra_fixture);\n         let refs = analysis.find_all_refs(pos, search_scope).unwrap().unwrap();\n \n         let mut actual = String::new();"}, {"sha": "8cbe1ae5a290f01c0459e3a4c59e7d9b02d0f90d", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -275,11 +275,11 @@ mod tests {\n     use test_utils::{assert_eq_text, mark};\n     use text_edit::TextEdit;\n \n-    use crate::{mock_analysis::analysis_and_position, FileId};\n+    use crate::{fixture, FileId};\n \n     fn check(new_name: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n         let ra_fixture_after = &trim_indent(ra_fixture_after);\n-        let (analysis, position) = analysis_and_position(ra_fixture_before);\n+        let (analysis, position) = fixture::position(ra_fixture_before);\n         let source_change = analysis.rename(position, new_name).unwrap();\n         let mut text_edit_builder = TextEdit::builder();\n         let mut file_id: Option<FileId> = None;\n@@ -297,7 +297,7 @@ mod tests {\n     }\n \n     fn check_expect(new_name: &str, ra_fixture: &str, expect: Expect) {\n-        let (analysis, position) = analysis_and_position(ra_fixture);\n+        let (analysis, position) = fixture::position(ra_fixture);\n         let source_change = analysis.rename(position, new_name).unwrap().unwrap();\n         expect.assert_debug_eq(&source_change)\n     }\n@@ -314,7 +314,7 @@ mod tests {\n \n     #[test]\n     fn test_rename_to_invalid_identifier() {\n-        let (analysis, position) = analysis_and_position(r#\"fn main() { let i<|> = 1; }\"#);\n+        let (analysis, position) = fixture::position(r#\"fn main() { let i<|> = 1; }\"#);\n         let new_name = \"invalid!\";\n         let source_change = analysis.rename(position, new_name).unwrap();\n         assert!(source_change.is_none());\n@@ -602,7 +602,7 @@ mod foo<|>;\n                         source_file_edits: [\n                             SourceFileEdit {\n                                 file_id: FileId(\n-                                    2,\n+                                    1,\n                                 ),\n                                 edit: TextEdit {\n                                     indels: [\n@@ -617,10 +617,10 @@ mod foo<|>;\n                         file_system_edits: [\n                             MoveFile {\n                                 src: FileId(\n-                                    3,\n+                                    2,\n                                 ),\n                                 anchor: FileId(\n-                                    3,\n+                                    2,\n                                 ),\n                                 dst: \"foo2.rs\",\n                             },\n@@ -655,7 +655,7 @@ use crate::foo<|>::FooContent;\n                         source_file_edits: [\n                             SourceFileEdit {\n                                 file_id: FileId(\n-                                    1,\n+                                    0,\n                                 ),\n                                 edit: TextEdit {\n                                     indels: [\n@@ -668,7 +668,7 @@ use crate::foo<|>::FooContent;\n                             },\n                             SourceFileEdit {\n                                 file_id: FileId(\n-                                    3,\n+                                    2,\n                                 ),\n                                 edit: TextEdit {\n                                     indels: [\n@@ -683,10 +683,10 @@ use crate::foo<|>::FooContent;\n                         file_system_edits: [\n                             MoveFile {\n                                 src: FileId(\n-                                    2,\n+                                    1,\n                                 ),\n                                 anchor: FileId(\n-                                    2,\n+                                    1,\n                                 ),\n                                 dst: \"quux.rs\",\n                             },\n@@ -715,7 +715,7 @@ mod fo<|>o;\n                         source_file_edits: [\n                             SourceFileEdit {\n                                 file_id: FileId(\n-                                    1,\n+                                    0,\n                                 ),\n                                 edit: TextEdit {\n                                     indels: [\n@@ -730,10 +730,10 @@ mod fo<|>o;\n                         file_system_edits: [\n                             MoveFile {\n                                 src: FileId(\n-                                    2,\n+                                    1,\n                                 ),\n                                 anchor: FileId(\n-                                    2,\n+                                    1,\n                                 ),\n                                 dst: \"../foo2/mod.rs\",\n                             },\n@@ -763,7 +763,7 @@ mod outer { mod fo<|>o; }\n                         source_file_edits: [\n                             SourceFileEdit {\n                                 file_id: FileId(\n-                                    1,\n+                                    0,\n                                 ),\n                                 edit: TextEdit {\n                                     indels: [\n@@ -778,10 +778,10 @@ mod outer { mod fo<|>o; }\n                         file_system_edits: [\n                             MoveFile {\n                                 src: FileId(\n-                                    2,\n+                                    1,\n                                 ),\n                                 anchor: FileId(\n-                                    2,\n+                                    1,\n                                 ),\n                                 dst: \"bar.rs\",\n                             },\n@@ -834,7 +834,7 @@ pub mod foo<|>;\n                         source_file_edits: [\n                             SourceFileEdit {\n                                 file_id: FileId(\n-                                    2,\n+                                    1,\n                                 ),\n                                 edit: TextEdit {\n                                     indels: [\n@@ -847,7 +847,7 @@ pub mod foo<|>;\n                             },\n                             SourceFileEdit {\n                                 file_id: FileId(\n-                                    1,\n+                                    0,\n                                 ),\n                                 edit: TextEdit {\n                                     indels: [\n@@ -862,10 +862,10 @@ pub mod foo<|>;\n                         file_system_edits: [\n                             MoveFile {\n                                 src: FileId(\n-                                    3,\n+                                    2,\n                                 ),\n                                 anchor: FileId(\n-                                    3,\n+                                    2,\n                                 ),\n                                 dst: \"foo2.rs\",\n                             },"}, {"sha": "752ef2f21911f4997c9d8b9b2fe14b3db98bc23f", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -292,7 +292,7 @@ fn has_test_function_or_multiple_test_submodules(module: &ast::Module) -> bool {\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::mock_analysis::analysis_and_position;\n+    use crate::fixture;\n \n     use super::{RunnableAction, BENCH, BIN, DOCTEST, TEST};\n \n@@ -302,7 +302,7 @@ mod tests {\n         actions: &[&RunnableAction],\n         expect: Expect,\n     ) {\n-        let (analysis, position) = analysis_and_position(ra_fixture);\n+        let (analysis, position) = fixture::position(ra_fixture);\n         let runnables = analysis.runnables(position.file_id).unwrap();\n         expect.assert_debug_eq(&runnables);\n         assert_eq!(\n@@ -335,7 +335,7 @@ fn bench() {}\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 1..13,\n                             focus_range: Some(\n@@ -353,7 +353,7 @@ fn bench() {}\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 15..39,\n                             focus_range: Some(\n@@ -378,7 +378,7 @@ fn bench() {}\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 41..75,\n                             focus_range: Some(\n@@ -403,7 +403,7 @@ fn bench() {}\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 77..99,\n                             focus_range: Some(\n@@ -494,7 +494,7 @@ fn should_have_no_runnable_6() {}\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 1..13,\n                             focus_range: Some(\n@@ -512,7 +512,7 @@ fn should_have_no_runnable_6() {}\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 15..74,\n                             focus_range: None,\n@@ -532,7 +532,7 @@ fn should_have_no_runnable_6() {}\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 76..148,\n                             focus_range: None,\n@@ -552,7 +552,7 @@ fn should_have_no_runnable_6() {}\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 150..254,\n                             focus_range: None,\n@@ -596,7 +596,7 @@ impl Data {\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 1..13,\n                             focus_range: Some(\n@@ -614,7 +614,7 @@ impl Data {\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 44..98,\n                             focus_range: None,\n@@ -653,7 +653,7 @@ mod test_mod {\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 1..51,\n                             focus_range: Some(\n@@ -673,7 +673,7 @@ mod test_mod {\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 20..49,\n                             focus_range: Some(\n@@ -733,7 +733,7 @@ mod root_tests {\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 22..323,\n                             focus_range: Some(\n@@ -753,7 +753,7 @@ mod root_tests {\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 51..192,\n                             focus_range: Some(\n@@ -773,7 +773,7 @@ mod root_tests {\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 84..126,\n                             focus_range: Some(\n@@ -798,7 +798,7 @@ mod root_tests {\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 140..182,\n                             focus_range: Some(\n@@ -823,7 +823,7 @@ mod root_tests {\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 202..286,\n                             focus_range: Some(\n@@ -843,7 +843,7 @@ mod root_tests {\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 235..276,\n                             focus_range: Some(\n@@ -886,7 +886,7 @@ fn test_foo1() {}\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 1..50,\n                             focus_range: Some(\n@@ -934,7 +934,7 @@ fn test_foo1() {}\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 1..72,\n                             focus_range: Some("}, {"sha": "694c4b7fa1537d23eb370cd6a9609904475d56af", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -3,7 +3,7 @@ use std::fs;\n use expect_test::{expect_file, ExpectFile};\n use test_utils::project_dir;\n \n-use crate::{mock_analysis::single_file, FileRange, TextRange};\n+use crate::{fixture, FileRange, TextRange};\n \n #[test]\n fn test_highlighting() {\n@@ -178,7 +178,7 @@ fn accidentally_quadratic() {\n     let file = project_dir().join(\"crates/syntax/test_data/accidentally_quadratic\");\n     let src = fs::read_to_string(file).unwrap();\n \n-    let (analysis, file_id) = single_file(&src);\n+    let (analysis, file_id) = fixture::file(&src);\n \n     // let t = std::time::Instant::now();\n     let _ = analysis.highlight(file_id).unwrap();\n@@ -187,7 +187,7 @@ fn accidentally_quadratic() {\n \n #[test]\n fn test_ranges() {\n-    let (analysis, file_id) = single_file(\n+    let (analysis, file_id) = fixture::file(\n         r#\"\n #[derive(Clone, Debug)]\n struct Foo {\n@@ -228,7 +228,7 @@ fn main() {\n \n #[test]\n fn ranges_sorted() {\n-    let (analysis, file_id) = single_file(\n+    let (analysis, file_id) = fixture::file(\n         r#\"\n #[foo(bar = \"bar\")]\n macro_rules! test {}\n@@ -462,12 +462,12 @@ macro_rules! noop {\n fn test_extern_crate() {\n     check_highlighting(\n         r#\"\n-        //- /main.rs\n+        //- /main.rs crate:main deps:std,alloc\n         extern crate std;\n         extern crate alloc as abc;\n-        //- /std/lib.rs\n+        //- /std/lib.rs crate:std\n         pub struct S;\n-        //- /alloc/lib.rs\n+        //- /alloc/lib.rs crate:alloc\n         pub struct A\n         \"#,\n         expect_file![\"./test_data/highlight_extern_crate.html\"],\n@@ -479,7 +479,7 @@ fn test_extern_crate() {\n /// result as HTML, and compares it with the HTML file given as `snapshot`.\n /// Note that the `snapshot` file is overwritten by the rendered HTML.\n fn check_highlighting(ra_fixture: &str, expect: ExpectFile, rainbow: bool) {\n-    let (analysis, file_id) = single_file(ra_fixture);\n+    let (analysis, file_id) = fixture::file(ra_fixture);\n     let actual_html = &analysis.highlight_as_html(file_id, rainbow).unwrap();\n     expect.assert_eq(actual_html)\n }"}, {"sha": "0eed2dbd78adbcdb12becf6dad3d4595f8fd2727", "filename": "crates/ide/src/syntax_tree.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_tree.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -104,12 +104,12 @@ fn syntax_tree_for_token(node: &SyntaxToken, text_range: TextRange) -> Option<St\n mod tests {\n     use test_utils::assert_eq_text;\n \n-    use crate::mock_analysis::{analysis_and_range, single_file};\n+    use crate::fixture;\n \n     #[test]\n     fn test_syntax_tree_without_range() {\n         // Basic syntax\n-        let (analysis, file_id) = single_file(r#\"fn foo() {}\"#);\n+        let (analysis, file_id) = fixture::file(r#\"fn foo() {}\"#);\n         let syn = analysis.syntax_tree(file_id, None).unwrap();\n \n         assert_eq_text!(\n@@ -132,7 +132,7 @@ SOURCE_FILE@0..11\n             .trim()\n         );\n \n-        let (analysis, file_id) = single_file(\n+        let (analysis, file_id) = fixture::file(\n             r#\"\n fn test() {\n     assert!(\"\n@@ -184,7 +184,7 @@ SOURCE_FILE@0..60\n \n     #[test]\n     fn test_syntax_tree_with_range() {\n-        let (analysis, range) = analysis_and_range(r#\"<|>fn foo() {}<|>\"#.trim());\n+        let (analysis, range) = fixture::range(r#\"<|>fn foo() {}<|>\"#.trim());\n         let syn = analysis.syntax_tree(range.file_id, Some(range.range)).unwrap();\n \n         assert_eq_text!(\n@@ -206,7 +206,7 @@ FN@0..11\n             .trim()\n         );\n \n-        let (analysis, range) = analysis_and_range(\n+        let (analysis, range) = fixture::range(\n             r#\"fn test() {\n     <|>assert!(\"\n     fn foo() {\n@@ -242,7 +242,7 @@ EXPR_STMT@16..58\n \n     #[test]\n     fn test_syntax_tree_inside_string() {\n-        let (analysis, range) = analysis_and_range(\n+        let (analysis, range) = fixture::range(\n             r#\"fn test() {\n     assert!(\"\n <|>fn foo() {\n@@ -276,7 +276,7 @@ SOURCE_FILE@0..12\n         );\n \n         // With a raw string\n-        let (analysis, range) = analysis_and_range(\n+        let (analysis, range) = fixture::range(\n             r###\"fn test() {\n     assert!(r#\"\n <|>fn foo() {\n@@ -310,7 +310,7 @@ SOURCE_FILE@0..12\n         );\n \n         // With a raw string\n-        let (analysis, range) = analysis_and_range(\n+        let (analysis, range) = fixture::range(\n             r###\"fn test() {\n     assert!(r<|>#\"\n fn foo() {"}, {"sha": "a0dc4b9df6eceebead5c257951fa224c7b75aa3c", "filename": "crates/ide/src/typing/on_enter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Ftyping%2Fon_enter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide%2Fsrc%2Ftyping%2Fon_enter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping%2Fon_enter.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -109,10 +109,10 @@ mod tests {\n     use stdx::trim_indent;\n     use test_utils::{assert_eq_text, mark};\n \n-    use crate::mock_analysis::analysis_and_position;\n+    use crate::fixture;\n \n     fn apply_on_enter(before: &str) -> Option<String> {\n-        let (analysis, position) = analysis_and_position(&before);\n+        let (analysis, position) = fixture::position(&before);\n         let result = analysis.on_enter(position).unwrap()?;\n \n         let mut actual = analysis.file_text(position.file_id).unwrap().to_string();"}, {"sha": "da16fa21dc6f28f7afd8f24a23098a42243ec759", "filename": "crates/ide_db/src/apply_change.rs", "status": "renamed", "additions": 6, "deletions": 72, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide_db%2Fsrc%2Fapply_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide_db%2Fsrc%2Fapply_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fapply_change.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -1,58 +1,16 @@\n-//! Defines a unit of change that can applied to a state of IDE to get the next\n-//! state. Changes are transactional.\n+//! Applies changes to the IDE state transactionally.\n \n use std::{fmt, sync::Arc};\n \n use base_db::{\n     salsa::{Database, Durability, SweepStrategy},\n-    CrateGraph, FileId, SourceDatabase, SourceDatabaseExt, SourceRoot, SourceRootId,\n+    Change, FileId, SourceRootId,\n };\n use profile::{memory_usage, Bytes};\n use rustc_hash::FxHashSet;\n \n use crate::{symbol_index::SymbolsDatabase, RootDatabase};\n \n-#[derive(Default)]\n-pub struct AnalysisChange {\n-    roots: Option<Vec<SourceRoot>>,\n-    files_changed: Vec<(FileId, Option<Arc<String>>)>,\n-    crate_graph: Option<CrateGraph>,\n-}\n-\n-impl fmt::Debug for AnalysisChange {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        let mut d = fmt.debug_struct(\"AnalysisChange\");\n-        if let Some(roots) = &self.roots {\n-            d.field(\"roots\", roots);\n-        }\n-        if !self.files_changed.is_empty() {\n-            d.field(\"files_changed\", &self.files_changed.len());\n-        }\n-        if self.crate_graph.is_some() {\n-            d.field(\"crate_graph\", &self.crate_graph);\n-        }\n-        d.finish()\n-    }\n-}\n-\n-impl AnalysisChange {\n-    pub fn new() -> AnalysisChange {\n-        AnalysisChange::default()\n-    }\n-\n-    pub fn set_roots(&mut self, roots: Vec<SourceRoot>) {\n-        self.roots = Some(roots);\n-    }\n-\n-    pub fn change_file(&mut self, file_id: FileId, new_text: Option<Arc<String>>) {\n-        self.files_changed.push((file_id, new_text))\n-    }\n-\n-    pub fn set_crate_graph(&mut self, graph: CrateGraph) {\n-        self.crate_graph = Some(graph);\n-    }\n-}\n-\n #[derive(Debug)]\n struct AddFile {\n     file_id: FileId,\n@@ -87,41 +45,25 @@ impl RootDatabase {\n         self.salsa_runtime_mut().synthetic_write(Durability::LOW);\n     }\n \n-    pub fn apply_change(&mut self, change: AnalysisChange) {\n+    pub fn apply_change(&mut self, change: Change) {\n         let _p = profile::span(\"RootDatabase::apply_change\");\n         self.request_cancellation();\n         log::info!(\"apply_change {:?}\", change);\n-        if let Some(roots) = change.roots {\n+        if let Some(roots) = &change.roots {\n             let mut local_roots = FxHashSet::default();\n             let mut library_roots = FxHashSet::default();\n-            for (idx, root) in roots.into_iter().enumerate() {\n+            for (idx, root) in roots.iter().enumerate() {\n                 let root_id = SourceRootId(idx as u32);\n-                let durability = durability(&root);\n                 if root.is_library {\n                     library_roots.insert(root_id);\n                 } else {\n                     local_roots.insert(root_id);\n                 }\n-                for file_id in root.iter() {\n-                    self.set_file_source_root_with_durability(file_id, root_id, durability);\n-                }\n-                self.set_source_root_with_durability(root_id, Arc::new(root), durability);\n             }\n             self.set_local_roots_with_durability(Arc::new(local_roots), Durability::HIGH);\n             self.set_library_roots_with_durability(Arc::new(library_roots), Durability::HIGH);\n         }\n-\n-        for (file_id, text) in change.files_changed {\n-            let source_root_id = self.file_source_root(file_id);\n-            let source_root = self.source_root(source_root_id);\n-            let durability = durability(&source_root);\n-            // XXX: can't actually remove the file, just reset the text\n-            let text = text.unwrap_or_default();\n-            self.set_file_text_with_durability(file_id, text, durability)\n-        }\n-        if let Some(crate_graph) = change.crate_graph {\n-            self.set_crate_graph_with_durability(Arc::new(crate_graph), Durability::HIGH)\n-        }\n+        change.apply(self);\n     }\n \n     pub fn collect_garbage(&mut self) {\n@@ -295,11 +237,3 @@ impl RootDatabase {\n         acc\n     }\n }\n-\n-fn durability(source_root: &SourceRoot) -> Durability {\n-    if source_root.is_library {\n-        Durability::HIGH\n-    } else {\n-        Durability::LOW\n-    }\n-}", "previous_filename": "crates/ide_db/src/change.rs"}, {"sha": "7eff247c73eb16a8de36456c175fe5e825114285", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -2,10 +2,10 @@\n //!\n //! It is mainly a `HirDatabase` for semantic analysis, plus a `SymbolsDatabase`, for fuzzy search.\n \n+mod apply_change;\n pub mod label;\n pub mod line_index;\n pub mod symbol_index;\n-pub mod change;\n pub mod defs;\n pub mod search;\n pub mod imports_locator;"}, {"sha": "d1c095ba5cf279f8e063e4fd8aff19f9162b6cd1", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -8,8 +8,7 @@ use base_db::{\n     FileId,\n };\n use ide::{\n-    Analysis, AnalysisChange, AnalysisHost, CompletionConfig, DiagnosticsConfig, FilePosition,\n-    LineCol,\n+    Analysis, AnalysisHost, Change, CompletionConfig, DiagnosticsConfig, FilePosition, LineCol,\n };\n use vfs::AbsPathBuf;\n \n@@ -143,7 +142,7 @@ fn do_work<F: Fn(&Analysis) -> T, T>(host: &mut AnalysisHost, file_id: FileId, w\n         {\n             let mut text = host.analysis().file_text(file_id).unwrap().to_string();\n             text.push_str(\"\\n/* Hello world */\\n\");\n-            let mut change = AnalysisChange::new();\n+            let mut change = Change::new();\n             change.change_file(file_id, Some(Arc::new(text)));\n             host.apply_change(change);\n         }\n@@ -156,7 +155,7 @@ fn do_work<F: Fn(&Analysis) -> T, T>(host: &mut AnalysisHost, file_id: FileId, w\n         {\n             let mut text = host.analysis().file_text(file_id).unwrap().to_string();\n             text.push_str(\"\\npub fn _dummy() {}\\n\");\n-            let mut change = AnalysisChange::new();\n+            let mut change = Change::new();\n             change.change_file(file_id, Some(Arc::new(text)));\n             host.apply_change(change);\n         }"}, {"sha": "7ae1c905527e3f2577260a053240726e2dfbbebd", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -5,7 +5,7 @@ use std::{path::Path, sync::Arc};\n use anyhow::Result;\n use base_db::CrateGraph;\n use crossbeam_channel::{unbounded, Receiver};\n-use ide::{AnalysisChange, AnalysisHost};\n+use ide::{AnalysisHost, Change};\n use project_model::{CargoConfig, ProcMacroClient, ProjectManifest, ProjectWorkspace};\n use vfs::{loader::Handle, AbsPath, AbsPathBuf};\n \n@@ -62,7 +62,7 @@ fn load(\n ) -> AnalysisHost {\n     let lru_cap = std::env::var(\"RA_LRU_CAP\").ok().and_then(|it| it.parse::<usize>().ok());\n     let mut host = AnalysisHost::new(lru_cap);\n-    let mut analysis_change = AnalysisChange::new();\n+    let mut analysis_change = Change::new();\n \n     // wait until Vfs has loaded all roots\n     for task in receiver {"}, {"sha": "dafab6a6a7a70247cda90cc15aae42e12eb34086", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -8,7 +8,7 @@ use std::{sync::Arc, time::Instant};\n use base_db::{CrateId, VfsPath};\n use crossbeam_channel::{unbounded, Receiver, Sender};\n use flycheck::FlycheckHandle;\n-use ide::{Analysis, AnalysisChange, AnalysisHost, FileId};\n+use ide::{Analysis, AnalysisHost, Change, FileId};\n use lsp_types::{SemanticTokens, Url};\n use parking_lot::{Mutex, RwLock};\n use project_model::{CargoWorkspace, ProcMacroClient, ProjectWorkspace, Target};\n@@ -139,7 +139,7 @@ impl GlobalState {\n         let mut has_fs_changes = false;\n \n         let change = {\n-            let mut change = AnalysisChange::new();\n+            let mut change = Change::new();\n             let (vfs, line_endings_map) = &mut *self.vfs.write();\n             let changed_files = vfs.take_changes();\n             if changed_files.is_empty() {"}, {"sha": "f7215f12908e9f2bd1b729bd18dcac95bfeafba0", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673e1ddb9ae12c565f966549ba7ea8c306cfba87/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=673e1ddb9ae12c565f966549ba7ea8c306cfba87", "patch": "@@ -3,7 +3,7 @@ use std::{mem, sync::Arc};\n \n use base_db::{CrateGraph, SourceRoot, VfsPath};\n use flycheck::{FlycheckConfig, FlycheckHandle};\n-use ide::AnalysisChange;\n+use ide::Change;\n use project_model::{ProcMacroClient, ProjectWorkspace};\n use vfs::{file_set::FileSetConfig, AbsPath, AbsPathBuf, ChangeKind};\n \n@@ -171,7 +171,7 @@ impl GlobalState {\n             );\n         }\n \n-        let mut change = AnalysisChange::new();\n+        let mut change = Change::new();\n \n         let project_folders = ProjectFolders::new(&workspaces);\n "}]}