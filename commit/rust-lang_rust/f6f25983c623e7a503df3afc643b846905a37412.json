{"sha": "f6f25983c623e7a503df3afc643b846905a37412", "node_id": "C_kwDOAAsO6NoAKGY2ZjI1OTgzYzYyM2U3YTUwM2RmM2FmYzY0M2I4NDY5MDVhMzc0MTI", "commit": {"author": {"name": "Markus Everling", "email": "markuseverling@gmail.com", "date": "2022-11-25T13:47:58Z"}, "committer": {"name": "Markus Everling", "email": "markuseverling@gmail.com", "date": "2022-11-25T23:44:24Z"}, "message": "Don't use `Take` in `SpecExtend` impl", "tree": {"sha": "ba46aa317d6d9f67c433d7db8937657a5f635ab0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba46aa317d6d9f67c433d7db8937657a5f635ab0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6f25983c623e7a503df3afc643b846905a37412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6f25983c623e7a503df3afc643b846905a37412", "html_url": "https://github.com/rust-lang/rust/commit/f6f25983c623e7a503df3afc643b846905a37412", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6f25983c623e7a503df3afc643b846905a37412/comments", "author": {"login": "Sp00ph", "id": 61327188, "node_id": "MDQ6VXNlcjYxMzI3MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/61327188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sp00ph", "html_url": "https://github.com/Sp00ph", "followers_url": "https://api.github.com/users/Sp00ph/followers", "following_url": "https://api.github.com/users/Sp00ph/following{/other_user}", "gists_url": "https://api.github.com/users/Sp00ph/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sp00ph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sp00ph/subscriptions", "organizations_url": "https://api.github.com/users/Sp00ph/orgs", "repos_url": "https://api.github.com/users/Sp00ph/repos", "events_url": "https://api.github.com/users/Sp00ph/events{/privacy}", "received_events_url": "https://api.github.com/users/Sp00ph/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Sp00ph", "id": 61327188, "node_id": "MDQ6VXNlcjYxMzI3MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/61327188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sp00ph", "html_url": "https://github.com/Sp00ph", "followers_url": "https://api.github.com/users/Sp00ph/followers", "following_url": "https://api.github.com/users/Sp00ph/following{/other_user}", "gists_url": "https://api.github.com/users/Sp00ph/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sp00ph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sp00ph/subscriptions", "organizations_url": "https://api.github.com/users/Sp00ph/orgs", "repos_url": "https://api.github.com/users/Sp00ph/repos", "events_url": "https://api.github.com/users/Sp00ph/events{/privacy}", "received_events_url": "https://api.github.com/users/Sp00ph/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecca8c532850a2cce403264bd3c85961a38c8308", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecca8c532850a2cce403264bd3c85961a38c8308", "html_url": "https://github.com/rust-lang/rust/commit/ecca8c532850a2cce403264bd3c85961a38c8308"}], "stats": {"total": 44, "additions": 23, "deletions": 21}, "files": [{"sha": "dccf40ccb38aab69f0b3985120d8e9f8a168d1ca", "filename": "library/alloc/src/collections/vec_deque/spec_extend.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f6f25983c623e7a503df3afc643b846905a37412/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fspec_extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6f25983c623e7a503df3afc643b846905a37412/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fspec_extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fspec_extend.rs?ref=f6f25983c623e7a503df3afc643b846905a37412", "patch": "@@ -1,6 +1,6 @@\n use crate::alloc::Allocator;\n use crate::vec;\n-use core::iter::{ByRefSized, TrustedLen};\n+use core::iter::TrustedLen;\n use core::slice;\n \n use super::VecDeque;\n@@ -20,28 +20,30 @@ where\n         // for item in iter {\n         //     self.push_back(item);\n         // }\n-        loop {\n-            let lower_bound = iter.size_hint().0;\n-            if lower_bound != 0 {\n-                self.reserve(lower_bound);\n-            }\n \n-            match iter.next() {\n-                Some(val) => self.push_back(val),\n-                None => break,\n-            }\n+        // May only be called if `deque.len() < deque.capacity()`\n+        unsafe fn push_unchecked<T, A: Allocator>(deque: &mut VecDeque<T, A>, element: T) {\n+            // SAFETY: Because of the precondition, it's guaranteed that there is space\n+            // in the logical array after the last element.\n+            unsafe { deque.buffer_write(deque.to_physical_idx(deque.len), element) };\n+            // This can't overflow because `deque.len() < deque.capacity() <= usize::MAX`.\n+            deque.len += 1;\n+        }\n+\n+        while let Some(element) = iter.next() {\n+            let (lower, _) = iter.size_hint();\n+            self.reserve(lower.saturating_add(1));\n+\n+            // SAFETY: We just reserved space for at least one element.\n+            unsafe { push_unchecked(self, element) };\n \n-            let room = self.capacity() - self.len;\n-            unsafe {\n-                // Safety:\n-                // The iter is at most `room` items long,\n-                // and `room == self.capacity() - self.len`\n-                //   => `self.len + room <= self.capacity()`\n-                self.write_iter_wrapping(\n-                    self.to_physical_idx(self.len),\n-                    ByRefSized(&mut iter).take(room),\n-                    room,\n-                );\n+            // Inner loop to avoid repeatedly calling `reserve`.\n+            while self.len < self.capacity() {\n+                let Some(element) = iter.next() else {\n+                    return;\n+                };\n+                // SAFETY: The loop condition guarantees that `self.len() < self.capacity()`.\n+                unsafe { push_unchecked(self, element) };\n             }\n         }\n     }"}]}