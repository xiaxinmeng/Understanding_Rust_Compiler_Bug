{"sha": "4af84313d67e3062e43c0123093278b1887cac64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZjg0MzEzZDY3ZTMwNjJlNDNjMDEyMzA5MzI3OGIxODg3Y2FjNjQ=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-03T23:11:30Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-08T19:06:21Z"}, "message": "Rewrite &[T].to_owned() to allocate directly\n\nThis used to create a Vec<T> and then call .move_iter().collect() to\nconvert to a ~[T]. We can't do that anymore, so construct the ~[T] in\nplace instead. This has the added benefit of avoiding an unnecessary\nmemory copy (from the Vec<T> to the ~[T]).", "tree": {"sha": "87a8c1ff9b99216fde88627e8519f1f7be5b382d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87a8c1ff9b99216fde88627e8519f1f7be5b382d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4af84313d67e3062e43c0123093278b1887cac64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4af84313d67e3062e43c0123093278b1887cac64", "html_url": "https://github.com/rust-lang/rust/commit/4af84313d67e3062e43c0123093278b1887cac64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4af84313d67e3062e43c0123093278b1887cac64/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf1e065371f8e50f84318b45fb21a949faa9449f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf1e065371f8e50f84318b45fb21a949faa9449f", "html_url": "https://github.com/rust-lang/rust/commit/bf1e065371f8e50f84318b45fb21a949faa9449f"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "a1cc99b4905d7946a2a78afec13b64055a86ba95", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4af84313d67e3062e43c0123093278b1887cac64/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af84313d67e3062e43c0123093278b1887cac64/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=4af84313d67e3062e43c0123093278b1887cac64", "patch": "@@ -315,15 +315,23 @@ impl<'a, T: Clone> CloneableVector<T> for &'a [T] {\n     #[inline]\n     fn to_owned(&self) -> ~[T] {\n         let len = self.len();\n-        let mut result = Vec::with_capacity(len);\n-        // Unsafe code so this can be optimised to a memcpy (or something\n-        // similarly fast) when T is Copy. LLVM is easily confused, so any\n-        // extra operations during the loop can prevent this optimisation\n+        let data_size = len.checked_mul(&mem::size_of::<T>());\n+        let data_size = data_size.expect(\"overflow in to_owned()\");\n+        let size = mem::size_of::<RawVec<()>>().checked_add(&data_size);\n+        let size = size.expect(\"overflow in to_owned()\");\n+\n         unsafe {\n+            let ret = malloc_raw(size) as *mut RawVec<()>;\n+\n+            (*ret).fill = len * mem::nonzero_size_of::<T>();\n+            (*ret).alloc = len * mem::nonzero_size_of::<T>();\n+\n+            // Be careful with the following loop. We want it to be optimized\n+            // to a memcpy (or something similarly fast) when T is Copy. LLVM\n+            // is easily confused, so any extra operations during the loop can\n+            // prevent this optimization.\n             let mut i = 0;\n-            let p = result.as_mut_ptr();\n-            // Use try_finally here otherwise the write to length\n-            // inside the loop stops LLVM from optimising this.\n+            let p = &mut (*ret).data as *mut _ as *mut T;\n             try_finally(\n                 &mut i, (),\n                 |i, ()| while *i < len {\n@@ -332,9 +340,15 @@ impl<'a, T: Clone> CloneableVector<T> for &'a [T] {\n                         self.unsafe_ref(*i).clone());\n                     *i += 1;\n                 },\n-                |i| result.set_len(*i));\n+                |i| if *i < len {\n+                    // we must be failing, clean up after ourselves\n+                    for j in range(0, *i as int) {\n+                        ptr::read(&*p.offset(j));\n+                    }\n+                    exchange_free(ret as *u8);\n+                });\n+            cast::transmute(ret)\n         }\n-        result.move_iter().collect()\n     }\n \n     #[inline(always)]"}]}