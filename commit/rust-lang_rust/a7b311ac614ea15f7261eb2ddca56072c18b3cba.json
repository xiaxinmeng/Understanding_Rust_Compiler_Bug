{"sha": "a7b311ac614ea15f7261eb2ddca56072c18b3cba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YjMxMWFjNjE0ZWExNWY3MjYxZWIyZGRjYTU2MDcyYzE4YjNjYmE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-11-30T05:26:03Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-11-30T05:26:03Z"}, "message": "extra: missed a couple `@` in json", "tree": {"sha": "7746b56702623585ab10fc2a66601c1551ea57fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7746b56702623585ab10fc2a66601c1551ea57fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7b311ac614ea15f7261eb2ddca56072c18b3cba", "comment_count": 13, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7b311ac614ea15f7261eb2ddca56072c18b3cba", "html_url": "https://github.com/rust-lang/rust/commit/a7b311ac614ea15f7261eb2ddca56072c18b3cba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7b311ac614ea15f7261eb2ddca56072c18b3cba/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6818b96a66f51c8912e3d8e88fb79e7956743190", "url": "https://api.github.com/repos/rust-lang/rust/commits/6818b96a66f51c8912e3d8e88fb79e7956743190", "html_url": "https://github.com/rust-lang/rust/commit/6818b96a66f51c8912e3d8e88fb79e7956743190"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "30288a08c79df5c48f7c9370864495f6809a55ac", "filename": "src/libextra/json.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a7b311ac614ea15f7261eb2ddca56072c18b3cba/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b311ac614ea15f7261eb2ddca56072c18b3cba/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=a7b311ac614ea15f7261eb2ddca56072c18b3cba", "patch": "@@ -464,7 +464,7 @@ impl Json{\n     pub fn to_pretty_str(&self) -> ~str {\n         let mut s = MemWriter::new();\n         self.to_pretty_writer(&mut s as &mut io::Writer);\n-        str::from_utf8(s.inner_ref().as_slice())\n+        str::from_utf8_owned(s.inner())\n     }\n }\n \n@@ -847,7 +847,7 @@ impl<T : Iterator<char>> Parser<T> {\n \n /// Decodes a json value from an `&mut io::Reader`\n pub fn from_reader(rdr: &mut io::Reader) -> Result<Json, Error> {\n-    let s = str::from_utf8(rdr.read_to_end());\n+    let s = str::from_utf8_owned(rdr.read_to_end());\n     let mut parser = Parser::init(s.chars());\n     parser.parse()\n }\n@@ -1319,9 +1319,9 @@ impl<A:ToJson> ToJson for Option<A> {\n impl to_str::ToStr for Json {\n     /// Encodes a json value into a string\n     fn to_str(&self) -> ~str {\n-        let s = @mut MemWriter::new();\n-        self.to_writer(s as @mut io::Writer);\n-        str::from_utf8(s.inner_ref().as_slice())\n+        let mut s = MemWriter::new();\n+        self.to_writer(&mut s as &mut io::Writer);\n+        str::from_utf8_owned(s.inner())\n     }\n }\n \n@@ -1507,14 +1507,14 @@ mod tests {\n         assert_eq!(a.clone(), from_str(a.to_pretty_str()).unwrap());\n     }\n \n-    fn with_str_writer(f: |@mut io::Writer|) -> ~str {\n+    fn with_str_writer(f: |&mut io::Writer|) -> ~str {\n         use std::io::mem::MemWriter;\n         use std::io::Decorator;\n         use std::str;\n \n-        let m = @mut MemWriter::new();\n-        f(m as @mut io::Writer);\n-        str::from_utf8(*m.inner_ref())\n+        let mut m = MemWriter::new();\n+        f(&mut m as &mut io::Writer);\n+        str::from_utf8_owned(m.inner())\n     }\n \n     #[test]"}, {"sha": "7d6fd81c6141be77c5d8a0f41da48584c6a3ed0e", "filename": "src/libextra/test.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7b311ac614ea15f7261eb2ddca56072c18b3cba/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b311ac614ea15f7261eb2ddca56072c18b3cba/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=a7b311ac614ea15f7261eb2ddca56072c18b3cba", "patch": "@@ -945,8 +945,9 @@ impl MetricMap {\n     /// Load MetricDiff from a file.\n     pub fn load(p: &Path) -> MetricMap {\n         assert!(p.exists());\n-        let f = @mut File::open(p) as @mut io::Reader;\n-        let mut decoder = json::Decoder::init(json::from_reader(f).unwrap());\n+        let mut f = File::open(p);\n+        let value = json::from_reader(&mut f as &mut io::Reader).unwrap();\n+        let mut decoder = json::Decoder::init(value);\n         MetricMap(Decodable::decode(&mut decoder))\n     }\n "}, {"sha": "b2fb72d983b906d8354201cffa8761a51cc97d0a", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a7b311ac614ea15f7261eb2ddca56072c18b3cba/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b311ac614ea15f7261eb2ddca56072c18b3cba/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=a7b311ac614ea15f7261eb2ddca56072c18b3cba", "patch": "@@ -312,9 +312,12 @@ fn json_output(crate: clean::Crate, res: ~[plugins::PluginJson], dst: Path) {\n     // FIXME #8335: yuck, Rust -> str -> JSON round trip! No way to .encode\n     // straight to the Rust JSON representation.\n     let crate_json_str = {\n-        let w = @mut MemWriter::new();\n-        crate.encode(&mut json::Encoder::init(w as @mut io::Writer));\n-        str::from_utf8(*w.inner_ref())\n+        let mut w = MemWriter::new();\n+        {\n+            let mut encoder = json::Encoder::init(&mut w as &mut io::Writer);\n+            crate.encode(&mut encoder);\n+        }\n+        str::from_utf8_owned(w.inner())\n     };\n     let crate_json = match json::from_str(crate_json_str) {\n         Ok(j) => j,"}, {"sha": "54a3dad94959d2ae523362d5d17a963aaf91f337", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7b311ac614ea15f7261eb2ddca56072c18b3cba/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b311ac614ea15f7261eb2ddca56072c18b3cba/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=a7b311ac614ea15f7261eb2ddca56072c18b3cba", "patch": "@@ -346,7 +346,7 @@ mod test {\n         let mut writer = MemWriter::new();\n         let mut encoder = extra::json::Encoder::init(&mut writer as &mut io::Writer);\n         val.encode(&mut encoder);\n-        str::from_utf8(*writer.inner_ref())\n+        str::from_utf8_owned(writer.inner())\n     }\n \n     // produce a codemap::span"}]}