{"sha": "8807b00dd832d199c0e3b83f8311f0842545f528", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MDdiMDBkZDgzMmQxOTljMGUzYjgzZjgzMTFmMDg0MjU0NWY1Mjg=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-22T10:30:24Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-04T05:29:06Z"}, "message": "typeck/type_of: let wfcheck handle duplicate generics in opaque types' substs.", "tree": {"sha": "c6ca133b41868a1a2561835592f3fc5879aecaaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6ca133b41868a1a2561835592f3fc5879aecaaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8807b00dd832d199c0e3b83f8311f0842545f528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8807b00dd832d199c0e3b83f8311f0842545f528", "html_url": "https://github.com/rust-lang/rust/commit/8807b00dd832d199c0e3b83f8311f0842545f528", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8807b00dd832d199c0e3b83f8311f0842545f528/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e9a5d928a035a13fea5d134eaa7c1657407692d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9a5d928a035a13fea5d134eaa7c1657407692d", "html_url": "https://github.com/rust-lang/rust/commit/8e9a5d928a035a13fea5d134eaa7c1657407692d"}], "stats": {"total": 212, "additions": 93, "deletions": 119}, "files": [{"sha": "b0ff17ad56d7c5dd13cd46500cfffa50cb205e53", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 39, "deletions": 54, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/8807b00dd832d199c0e3b83f8311f0842545f528/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8807b00dd832d199c0e3b83f8311f0842545f528/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=8807b00dd832d199c0e3b83f8311f0842545f528", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::itemlikevisit::ParItemLikeVisitor;\n use rustc_hir::lang_items;\n use rustc_hir::ItemKind;\n-use rustc_middle::ty::subst::{InternalSubsts, Subst};\n+use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts, Subst};\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n use rustc_middle::ty::{\n     self, AdtKind, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n@@ -870,38 +870,17 @@ fn check_opaque_types<'fcx, 'tcx>(\n                     let opaque_hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n                     if may_define_opaque_type(tcx, fn_def_id, opaque_hir_id) {\n                         trace!(\"check_opaque_types: may define, generics={:#?}\", generics);\n-                        let mut seen: FxHashMap<_, Vec<_>> = FxHashMap::default();\n+                        let mut seen_params: FxHashMap<_, Vec<_>> = FxHashMap::default();\n                         for (i, &arg) in substs.iter().enumerate() {\n-                            match arg.unpack() {\n-                                ty::subst::GenericArgKind::Type(ty) => match ty.kind {\n-                                    ty::Param(..) => {}\n-                                    // Prevent `fn foo() -> Foo<u32>` from being defining.\n-                                    _ => {\n-                                        tcx.sess\n-                                            .struct_span_err(\n-                                                span,\n-                                                \"non-defining opaque type use \\\n-                                                 in defining scope\",\n-                                            )\n-                                            .span_note(\n-                                                tcx.def_span(generics.param_at(i, tcx).def_id),\n-                                                &format!(\n-                                                    \"used non-generic type `{}` for \\\n-                                                     generic parameter\",\n-                                                    ty,\n-                                                ),\n-                                            )\n-                                            .emit();\n-                                    }\n-                                },\n+                            let arg_is_param = match arg.unpack() {\n+                                GenericArgKind::Type(ty) => matches!(ty.kind, ty::Param(_)),\n \n-                                ty::subst::GenericArgKind::Lifetime(region) => {\n+                                GenericArgKind::Lifetime(region) => {\n                                     if let ty::ReStatic = region {\n                                         tcx.sess\n                                             .struct_span_err(\n                                                 span,\n-                                                \"non-defining opaque type use \\\n-                                                 in defining scope\",\n+                                                \"non-defining opaque type use in defining scope\",\n                                             )\n                                             .span_label(\n                                                 tcx.def_span(generics.param_at(i, tcx).def_id),\n@@ -910,46 +889,52 @@ fn check_opaque_types<'fcx, 'tcx>(\n                                                  opaque type\",\n                                             )\n                                             .emit();\n-                                    } else {\n-                                        seen.entry(region).or_default().push(i);\n+                                        continue;\n                                     }\n+\n+                                    true\n                                 }\n \n-                                ty::subst::GenericArgKind::Const(ct) => match ct.val {\n-                                    ty::ConstKind::Param(_) => {}\n-                                    _ => {\n-                                        tcx.sess\n-                                            .struct_span_err(\n-                                                span,\n-                                                \"non-defining opaque type use \\\n-                                                 in defining scope\",\n-                                            )\n-                                            .span_note(\n-                                                tcx.def_span(generics.param_at(i, tcx).def_id),\n-                                                &format!(\n-                                                    \"used non-generic const `{}` for \\\n-                                                     generic parameter\",\n-                                                    ct,\n-                                                ),\n-                                            )\n-                                            .emit();\n-                                    }\n-                                },\n-                            } // match arg\n+                                GenericArgKind::Const(ct) => {\n+                                    matches!(ct.val, ty::ConstKind::Param(_))\n+                                }\n+                            };\n+\n+                            if arg_is_param {\n+                                seen_params.entry(arg).or_default().push(i);\n+                            } else {\n+                                // Prevent `fn foo() -> Foo<u32>` from being defining.\n+                                let opaque_param = generics.param_at(i, tcx);\n+                                tcx.sess\n+                                    .struct_span_err(\n+                                        span,\n+                                        \"non-defining opaque type use in defining scope\",\n+                                    )\n+                                    .span_note(\n+                                        tcx.def_span(opaque_param.def_id),\n+                                        &format!(\n+                                            \"used non-generic {} `{}` for generic parameter\",\n+                                            opaque_param.kind.descr(),\n+                                            arg,\n+                                        ),\n+                                    )\n+                                    .emit();\n+                            }\n                         } // for (arg, param)\n-                        for (_, indices) in seen {\n+\n+                        for (_, indices) in seen_params {\n                             if indices.len() > 1 {\n+                                let descr = generics.param_at(indices[0], tcx).kind.descr();\n                                 let spans: Vec<_> = indices\n                                     .into_iter()\n                                     .map(|i| tcx.def_span(generics.param_at(i, tcx).def_id))\n                                     .collect();\n                                 tcx.sess\n                                     .struct_span_err(\n                                         span,\n-                                        \"non-defining opaque type use \\\n-                                         in defining scope\",\n+                                        \"non-defining opaque type use in defining scope\",\n                                     )\n-                                    .span_note(spans, \"lifetime used multiple times\")\n+                                    .span_note(spans, &format!(\"{} used multiple times\", descr))\n                                     .emit();\n                             }\n                         }"}, {"sha": "c2a32ffe4828f5d2b1c7f8c57a53011d0f591aa3", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8807b00dd832d199c0e3b83f8311f0842545f528/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8807b00dd832d199c0e3b83f8311f0842545f528/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=8807b00dd832d199c0e3b83f8311f0842545f528", "patch": "@@ -403,38 +403,43 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 // FIXME(oli-obk): trace the actual span from inference to improve errors.\n                 let span = self.tcx.def_span(def_id);\n \n+                // HACK(eddyb) this check shouldn't be needed, as `wfcheck`\n+                // performs the same checks, in theory, but I've kept it here\n+                // using `delay_span_bug`, just in case `wfcheck` slips up.\n                 let opaque_generics = self.tcx.generics_of(self.def_id);\n-                let mut used_params: FxHashSet<ty::ParamTy> = FxHashSet::default();\n-                let mut duplicate_params: FxHashSet<ty::ParamTy> = FxHashSet::default();\n+                let mut used_params: FxHashSet<_> = FxHashSet::default();\n                 for (i, arg) in substs.iter().enumerate() {\n-                    // FIXME(eddyb) enforce lifetime and const param 1:1 mapping.\n-                    if let GenericArgKind::Type(ty) = arg.unpack() {\n-                        if let ty::Param(p) = ty.kind {\n-                            if !used_params.insert(p) && duplicate_params.insert(p) {\n-                                // There was already an entry for `p`, meaning a generic parameter\n-                                // was used twice.\n-                                self.tcx.sess.span_err(\n-                                    span,\n-                                    &format!(\n-                                        \"defining opaque type use restricts opaque \\\n-                                         type by using the generic parameter `{}` twice\",\n-                                        p,\n-                                    ),\n-                                );\n-                            }\n-                        } else {\n-                            let param = opaque_generics.param_at(i, self.tcx);\n+                    let arg_is_param = match arg.unpack() {\n+                        GenericArgKind::Type(ty) => matches!(ty.kind, ty::Param(_)),\n+                        GenericArgKind::Lifetime(lt) => !matches!(lt, ty::ReStatic),\n+                        GenericArgKind::Const(ct) => matches!(ct.val, ty::ConstKind::Param(_)),\n+                    };\n+\n+                    if arg_is_param {\n+                        if !used_params.insert(arg) {\n+                            // There was already an entry for `arg`, meaning a generic parameter\n+                            // was used twice.\n                             self.tcx.sess.delay_span_bug(\n                                 span,\n                                 &format!(\n-                                    \"defining opaque type use does not fully define opaque type: \\\n-                                     generic parameter `{}` is specified as concrete {} `{}`\",\n-                                    param.name,\n-                                    param.kind.descr(),\n+                                    \"defining opaque type use restricts opaque \\\n+                                     type by using the generic parameter `{}` twice\",\n                                     arg,\n                                 ),\n                             );\n                         }\n+                    } else {\n+                        let param = opaque_generics.param_at(i, self.tcx);\n+                        self.tcx.sess.delay_span_bug(\n+                            span,\n+                            &format!(\n+                                \"defining opaque type use does not fully define opaque type: \\\n+                                 generic parameter `{}` is specified as concrete {} `{}`\",\n+                                param.name,\n+                                param.kind.descr(),\n+                                arg,\n+                            ),\n+                        );\n                     }\n                 }\n "}, {"sha": "26bb644f990f65d3f5032f6fe929c3dd4576a6d7", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8807b00dd832d199c0e3b83f8311f0842545f528/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8807b00dd832d199c0e3b83f8311f0842545f528/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs?ref=8807b00dd832d199c0e3b83f8311f0842545f528", "patch": "@@ -8,6 +8,6 @@ fn main() {}\n type Two<T, U> = impl Debug;\n \n fn one<T: Debug>(t: T) -> Two<T, T> {\n-//~^ ERROR defining opaque type use restricts opaque type\n+//~^ ERROR non-defining opaque type use in defining scope\n     t\n }"}, {"sha": "6275549eef7b945b98f1366e2a98ce57d5f65447", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.stderr", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8807b00dd832d199c0e3b83f8311f0842545f528/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8807b00dd832d199c0e3b83f8311f0842545f528/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr?ref=8807b00dd832d199c0e3b83f8311f0842545f528", "patch": "@@ -1,11 +1,14 @@\n-error: defining opaque type use restricts opaque type by using the generic parameter `T` twice\n-  --> $DIR/generic_duplicate_param_use.rs:10:1\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_duplicate_param_use.rs:10:27\n    |\n-LL | / fn one<T: Debug>(t: T) -> Two<T, T> {\n-LL | |\n-LL | |     t\n-LL | | }\n-   | |_^\n+LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n+   |                           ^^^^^^^^^\n+   |\n+note: type used multiple times\n+  --> $DIR/generic_duplicate_param_use.rs:8:10\n+   |\n+LL | type Two<T, U> = impl Debug;\n+   |          ^  ^\n \n error: aborting due to previous error\n "}, {"sha": "2b98d8fc63a1159fd7698160d4d2cfd18263a867", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8807b00dd832d199c0e3b83f8311f0842545f528/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8807b00dd832d199c0e3b83f8311f0842545f528/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs?ref=8807b00dd832d199c0e3b83f8311f0842545f528", "patch": "@@ -8,7 +8,6 @@ fn main() {}\n type Two<T, U> = impl Debug;\n \n fn one<T: Debug>(t: T) -> Two<T, T> {\n-//~^ ERROR defining opaque type use restricts opaque type\n     t\n }\n "}, {"sha": "8170c671f68cdaee02bf427b9d801ff8f2e90540", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8807b00dd832d199c0e3b83f8311f0842545f528/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8807b00dd832d199c0e3b83f8311f0842545f528/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr?ref=8807b00dd832d199c0e3b83f8311f0842545f528", "patch": "@@ -1,14 +1,5 @@\n-error: defining opaque type use restricts opaque type by using the generic parameter `T` twice\n-  --> $DIR/generic_duplicate_param_use2.rs:10:1\n-   |\n-LL | / fn one<T: Debug>(t: T) -> Two<T, T> {\n-LL | |\n-LL | |     t\n-LL | | }\n-   | |_^\n-\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use2.rs:15:1\n+  --> $DIR/generic_duplicate_param_use2.rs:14:1\n    |\n LL | / fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n LL | |\n@@ -20,10 +11,9 @@ note: previous use here\n   --> $DIR/generic_duplicate_param_use2.rs:10:1\n    |\n LL | / fn one<T: Debug>(t: T) -> Two<T, T> {\n-LL | |\n LL | |     t\n LL | | }\n    | |_^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "d9133fd11f7cdac57012607aa729d63ff31ebdad", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8807b00dd832d199c0e3b83f8311f0842545f528/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8807b00dd832d199c0e3b83f8311f0842545f528/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs?ref=8807b00dd832d199c0e3b83f8311f0842545f528", "patch": "@@ -8,7 +8,6 @@ fn main() {}\n type Two<T, U> = impl Debug;\n \n fn one<T: Debug>(t: T) -> Two<T, T> {\n-//~^ ERROR defining opaque type use restricts opaque type\n     t\n }\n "}, {"sha": "86dd33684005b0bd7f70ab48cee828bd0dcbf661", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8807b00dd832d199c0e3b83f8311f0842545f528/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8807b00dd832d199c0e3b83f8311f0842545f528/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr?ref=8807b00dd832d199c0e3b83f8311f0842545f528", "patch": "@@ -1,14 +1,5 @@\n-error: defining opaque type use restricts opaque type by using the generic parameter `T` twice\n-  --> $DIR/generic_duplicate_param_use3.rs:10:1\n-   |\n-LL | / fn one<T: Debug>(t: T) -> Two<T, T> {\n-LL | |\n-LL | |     t\n-LL | | }\n-   | |_^\n-\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use3.rs:15:1\n+  --> $DIR/generic_duplicate_param_use3.rs:14:1\n    |\n LL | / fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n LL | |\n@@ -20,10 +11,9 @@ note: previous use here\n   --> $DIR/generic_duplicate_param_use3.rs:10:1\n    |\n LL | / fn one<T: Debug>(t: T) -> Two<T, T> {\n-LL | |\n LL | |     t\n LL | | }\n    | |_^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "40388c3b6c88aed1bdcb0939a819422a19fbc4ca", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8807b00dd832d199c0e3b83f8311f0842545f528/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8807b00dd832d199c0e3b83f8311f0842545f528/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.rs?ref=8807b00dd832d199c0e3b83f8311f0842545f528", "patch": "@@ -8,7 +8,7 @@ fn main() {}\n type Two<T, U> = impl Debug;\n \n fn one<T: Debug>(t: T) -> Two<T, T> {\n-//~^ ERROR defining opaque type use restricts opaque type\n+//~^ ERROR non-defining opaque type use in defining scope\n     t\n }\n "}, {"sha": "fcf01f5164ae4aa770e52ada1ed7076194640d13", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use4.stderr", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8807b00dd832d199c0e3b83f8311f0842545f528/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8807b00dd832d199c0e3b83f8311f0842545f528/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.stderr?ref=8807b00dd832d199c0e3b83f8311f0842545f528", "patch": "@@ -1,11 +1,14 @@\n-error: defining opaque type use restricts opaque type by using the generic parameter `T` twice\n-  --> $DIR/generic_duplicate_param_use4.rs:10:1\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_duplicate_param_use4.rs:10:27\n    |\n-LL | / fn one<T: Debug>(t: T) -> Two<T, T> {\n-LL | |\n-LL | |     t\n-LL | | }\n-   | |_^\n+LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n+   |                           ^^^^^^^^^\n+   |\n+note: type used multiple times\n+  --> $DIR/generic_duplicate_param_use4.rs:8:10\n+   |\n+LL | type Two<T, U> = impl Debug;\n+   |          ^  ^\n \n error: aborting due to previous error\n "}]}