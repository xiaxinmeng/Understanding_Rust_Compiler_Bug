{"sha": "d45e985669d1bc532862ed3a50dce9cfdf08d7ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NWU5ODU2NjlkMWJjNTMyODYyZWQzYTUwZGNlOWNmZGYwOGQ3ZmY=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-20T23:57:30Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:26:36Z"}, "message": "Clarify FIXME.", "tree": {"sha": "7746812ad655b1f0032d1ae7c68a2ca5666c1b91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7746812ad655b1f0032d1ae7c68a2ca5666c1b91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d45e985669d1bc532862ed3a50dce9cfdf08d7ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d45e985669d1bc532862ed3a50dce9cfdf08d7ff", "html_url": "https://github.com/rust-lang/rust/commit/d45e985669d1bc532862ed3a50dce9cfdf08d7ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d45e985669d1bc532862ed3a50dce9cfdf08d7ff/comments", "author": null, "committer": null, "parents": [{"sha": "8a7dbde372388c0f4125f3aad0f697f8af138026", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a7dbde372388c0f4125f3aad0f697f8af138026", "html_url": "https://github.com/rust-lang/rust/commit/8a7dbde372388c0f4125f3aad0f697f8af138026"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "aee9b8a6f56d39dcbcc558971a5b7f780bfc178b", "filename": "src/thread.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d45e985669d1bc532862ed3a50dce9cfdf08d7ff/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45e985669d1bc532862ed3a50dce9cfdf08d7ff/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=d45e985669d1bc532862ed3a50dce9cfdf08d7ff", "patch": "@@ -357,7 +357,12 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n         if self.threads[MAIN_THREAD].state == ThreadState::Terminated {\n             // The main thread terminated; stop the program.\n             if self.threads.iter().any(|thread| thread.state != ThreadState::Terminated) {\n-                // FIXME: This check should be either configurable or just emit a warning.\n+                // FIXME: This check should be either configurable or just emit\n+                // a warning. For example, it seems normal for a program to\n+                // terminate without waiting for its detached threads to\n+                // terminate. However, this case is not trivial to support\n+                // because we also probably do not want to consider the memory\n+                // owned by these threads as leaked.\n                 throw_unsup_format!(\"the main thread terminated without waiting for other threads\");\n             }\n             return Ok(SchedulingAction::Stop);"}]}