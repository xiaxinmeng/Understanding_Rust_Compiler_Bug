{"sha": "62fededd8e9cfd85197f224123a057df43a6feab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZmVkZWRkOGU5Y2ZkODUxOTdmMjI0MTIzYTA1N2RmNDNhNmZlYWI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-08T22:56:57Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-09T11:22:44Z"}, "message": "std::rand: Make Rng.next_u32 non-default, waiting for #7771.", "tree": {"sha": "666d94d5f238e7f17b321dbf4749745d92243fee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/666d94d5f238e7f17b321dbf4749745d92243fee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62fededd8e9cfd85197f224123a057df43a6feab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62fededd8e9cfd85197f224123a057df43a6feab", "html_url": "https://github.com/rust-lang/rust/commit/62fededd8e9cfd85197f224123a057df43a6feab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62fededd8e9cfd85197f224123a057df43a6feab/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "618c6afe3232d0cc3750178d4f301352684ddde6", "url": "https://api.github.com/repos/rust-lang/rust/commits/618c6afe3232d0cc3750178d4f301352684ddde6", "html_url": "https://github.com/rust-lang/rust/commit/618c6afe3232d0cc3750178d4f301352684ddde6"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "0068b60cfa51b12a53148408d8f4774e18321b73", "filename": "src/libstd/rand/isaac.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62fededd8e9cfd85197f224123a057df43a6feab/src%2Flibstd%2Frand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62fededd8e9cfd85197f224123a057df43a6feab/src%2Flibstd%2Frand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fisaac.rs?ref=62fededd8e9cfd85197f224123a057df43a6feab", "patch": "@@ -363,6 +363,12 @@ impl Isaac64Rng {\n }\n \n impl Rng for Isaac64Rng {\n+    // FIXME #7771: having next_u32 like this should be unnecessary\n+    #[inline]\n+    fn next_u32(&mut self) -> u32 {\n+        self.next_u64() as u32\n+    }\n+\n     #[inline]\n     fn next_u64(&mut self) -> u64 {\n         if self.cnt == 0 {"}, {"sha": "a6ffbdd7b17d726c75846b3a7d3af3e820d98185", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62fededd8e9cfd85197f224123a057df43a6feab/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62fededd8e9cfd85197f224123a057df43a6feab/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=62fededd8e9cfd85197f224123a057df43a6feab", "patch": "@@ -99,12 +99,8 @@ pub trait Rng {\n     /// Return the next random u32. This rarely needs to be called\n     /// directly, prefer `r.gen()` to `r.next_u32()`.\n     ///\n-    /// By default this is implemented in terms of `next_u64`. An\n-    /// implementation of this trait must provide at least one of\n-    /// these two methods.\n-    fn next_u32(&mut self) -> u32 {\n-        self.next_u64() as u32\n-    }\n+    // FIXME #7771: Should be implemented in terms of next_u64\n+    fn next_u32(&mut self) -> u32;\n \n     /// Return the next random u64. This rarely needs to be called\n     /// directly, prefer `r.gen()` to `r.next_u64()`."}, {"sha": "aad0d4e861c58c6f5f06e72e5bf8407ed3c88015", "filename": "src/libstd/rand/rand_impls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62fededd8e9cfd85197f224123a057df43a6feab/src%2Flibstd%2Frand%2Frand_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62fededd8e9cfd85197f224123a057df43a6feab/src%2Flibstd%2Frand%2Frand_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Frand_impls.rs?ref=62fededd8e9cfd85197f224123a057df43a6feab", "patch": "@@ -209,6 +209,9 @@ mod tests {\n     use rand::Rng;\n     struct ConstantRng(u64);\n     impl Rng for ConstantRng {\n+        fn next_u32(&mut self) -> u32 {\n+            (**self) as u32\n+        }\n         fn next_u64(&mut self) -> u64 {\n             **self\n         }"}]}