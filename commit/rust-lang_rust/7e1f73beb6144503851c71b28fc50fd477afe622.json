{"sha": "7e1f73beb6144503851c71b28fc50fd477afe622", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMWY3M2JlYjYxNDQ1MDM4NTFjNzFiMjhmYzUwZmQ0NzdhZmU2MjI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-03-24T13:00:44Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-04-13T23:28:39Z"}, "message": "macros: Do not match on \"complex\" nonterminals requiring AST comparisons", "tree": {"sha": "206d47ca6c655f7d017236c3d119fa71fbee7e7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/206d47ca6c655f7d017236c3d119fa71fbee7e7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e1f73beb6144503851c71b28fc50fd477afe622", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e1f73beb6144503851c71b28fc50fd477afe622", "html_url": "https://github.com/rust-lang/rust/commit/7e1f73beb6144503851c71b28fc50fd477afe622", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e1f73beb6144503851c71b28fc50fd477afe622/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7291829268ced93054aa74072b074799e0e563e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7291829268ced93054aa74072b074799e0e563e3", "html_url": "https://github.com/rust-lang/rust/commit/7291829268ced93054aa74072b074799e0e563e3"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "35a745ccdee32f2e48ba3e2b31829226e39416f0", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7e1f73beb6144503851c71b28fc50fd477afe622/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1f73beb6144503851c71b28fc50fd477afe622/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=7e1f73beb6144503851c71b28fc50fd477afe622", "patch": "@@ -565,7 +565,7 @@ impl Token {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Eq, Hash)]\n /// For interpolation during macro expansion.\n pub enum Nonterminal {\n     NtItem(P<ast::Item>),\n@@ -591,6 +591,22 @@ pub enum Nonterminal {\n     NtArg(ast::Arg),\n }\n \n+impl PartialEq for Nonterminal {\n+    fn eq(&self, rhs: &Self) -> bool {\n+        match (self, rhs) {\n+            (NtIdent(ident_lhs, is_raw_lhs), NtIdent(ident_rhs, is_raw_rhs)) =>\n+                ident_lhs == ident_rhs && is_raw_lhs == is_raw_rhs,\n+            (NtLifetime(ident_lhs), NtLifetime(ident_rhs)) => ident_lhs == ident_rhs,\n+            (NtTT(tt_lhs), NtTT(tt_rhs)) => tt_lhs == tt_rhs,\n+            // FIXME: Assume that all \"complex\" nonterminal are not equal, we can't compare them\n+            // correctly based on data from AST. This will prevent them from matching each other\n+            // in macros. The comparison will become possible only when each nonterminal has an\n+            // attached token stream from which it was parsed.\n+            _ => false,\n+        }\n+    }\n+}\n+\n impl fmt::Debug for Nonterminal {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}, {"sha": "4dcb8afa94eab1564814c08140ac6b5855373477", "filename": "src/test/ui/macros/nonterminal-matching.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7e1f73beb6144503851c71b28fc50fd477afe622/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1f73beb6144503851c71b28fc50fd477afe622/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.rs?ref=7e1f73beb6144503851c71b28fc50fd477afe622", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we are refusing to match on complex nonterminals for which tokens are\n+// unavailable and we'd have to go through AST comparisons.\n+\n+#![feature(decl_macro, macro_lifetime_matcher)]\n+\n+macro simple_nonterminal($nt_ident: ident, $nt_lifetime: lifetime, $nt_tt: tt) {\n+    macro n(a $nt_ident b $nt_lifetime c $nt_tt d) {\n+        struct S;\n+    }\n+\n+    n!(a $nt_ident b $nt_lifetime c $nt_tt d);\n+}\n+\n+macro complex_nonterminal($nt_item: item) {\n+    macro n(a $nt_item b) {\n+        struct S;\n+    }\n+\n+    n!(a $nt_item b); //~ ERROR no rules expected the token `enum E { }`\n+}\n+\n+simple_nonterminal!(a, 'a, (x, y, z)); // OK\n+\n+complex_nonterminal!(enum E {});\n+\n+fn main() {}"}, {"sha": "bf2221d52a4920dbce37818a24f653cc120a0b1d", "filename": "src/test/ui/macros/nonterminal-matching.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7e1f73beb6144503851c71b28fc50fd477afe622/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e1f73beb6144503851c71b28fc50fd477afe622/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr?ref=7e1f73beb6144503851c71b28fc50fd477afe622", "patch": "@@ -0,0 +1,11 @@\n+error: no rules expected the token `enum E { }`\n+  --> $DIR/nonterminal-matching.rs:29:10\n+   |\n+LL |     n!(a $nt_item b); //~ ERROR no rules expected the token `enum E { }`\n+   |          ^^^^^^^^\n+...\n+LL | complex_nonterminal!(enum E {});\n+   | -------------------------------- in this macro invocation\n+\n+error: aborting due to previous error\n+"}]}