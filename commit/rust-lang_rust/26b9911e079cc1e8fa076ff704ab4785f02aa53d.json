{"sha": "26b9911e079cc1e8fa076ff704ab4785f02aa53d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2Yjk5MTFlMDc5Y2MxZThmYTA3NmZmNzA0YWI0Nzg1ZjAyYWE1M2Q=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-15T13:37:11Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-15T13:37:11Z"}, "message": "Refactor out enum and address nits", "tree": {"sha": "5b072f9dba91846c69f3eae7bcea6dac5d9ca00e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b072f9dba91846c69f3eae7bcea6dac5d9ca00e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26b9911e079cc1e8fa076ff704ab4785f02aa53d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJa01WtAAoJELb6Bqbg4mZbDBgP/R+kEsMdiqEPp5g8rWVP/Ou1\nZA7za/+GZ6enb7+DtagVL1qOZl6NGt4Jn564JEFMcI+PeiKCc2C/d2xjI52IB6gc\nhnQRe96Sgak2v9KXZWQgUsgN+/OVwJPORTPhC2yMPsFcGfC4PHQ/oYMeWTYfVQ0n\nqVLrDfDEPQIGX63binzvQzJTDP74OZaVHSbGCjpj7VM3OEvYmqrLaDgzUU8f2aUx\nsPOZd66l9EtopqikGjjBRa0ti5jptaB6kmRIUA0SPd2ZMMLOPfswntf3zh4Uzhze\nZqRRJXyYEnvvW/iHuXslSMxm3Bp3r/uwtGqmQXx9CFStHc6AHsCB/r6hAyPQhpKZ\nDv3PeEdpoKRxNqwJROddjgTDw7UrSbmX6DqXZLPsFyuHKxeelQXaY0RWj9d6OVaY\nyhjJP9drKiOdewwRR9JADcV+/XNlBoTLhoI4Cqr28lUmvrV1XZavkv809LgNeuQE\nzf/I3Yxf3t0jUyxBLOpapqvTcfyHjAlbwobfXaTfnxuwVpu/lT6tAC+WSHZ82DfY\nl3nV+tIO2dsWHOWCZZXyb+4PAon8it5U8eoUyqO+d8wxTNJ+Hh/7UinB/TdT9yvt\na4uWsBUv0/DaSP3pwzA42gBgrQ/eBd3WoBthNwXT23DCz9VFgH4L/3BmizRPdj01\nfA6iMLvH1Y4cLRfUHSKD\n=fFZi\n-----END PGP SIGNATURE-----", "payload": "tree 5b072f9dba91846c69f3eae7bcea6dac5d9ca00e\nparent 4f4e20c561b223027e47183e58c4ec17f406d809\nauthor Philipp Hansch <dev@phansch.net> 1523799431 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1523799431 +0200\n\nRefactor out enum and address nits\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26b9911e079cc1e8fa076ff704ab4785f02aa53d", "html_url": "https://github.com/rust-lang/rust/commit/26b9911e079cc1e8fa076ff704ab4785f02aa53d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26b9911e079cc1e8fa076ff704ab4785f02aa53d/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f4e20c561b223027e47183e58c4ec17f406d809", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f4e20c561b223027e47183e58c4ec17f406d809", "html_url": "https://github.com/rust-lang/rust/commit/4f4e20c561b223027e47183e58c4ec17f406d809"}], "stats": {"total": 52, "additions": 20, "deletions": 32}, "files": [{"sha": "7defccf4697c4b0840b936db8fb675ee9a68dfe9", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 20, "deletions": 32, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/26b9911e079cc1e8fa076ff704ab4785f02aa53d/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b9911e079cc1e8fa076ff704ab4785f02aa53d/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=26b9911e079cc1e8fa076ff704ab4785f02aa53d", "patch": "@@ -8,11 +8,11 @@ use utils::paths;\n #[derive(Clone)]\n pub struct Pass;\n \n-/// **What it does:** Checks for usage of `Option.map(f)` where f is a function\n+/// **What it does:** Checks for usage of `option.map(f)` where f is a function\n /// or closure that returns the unit type.\n ///\n /// **Why is this bad?** Readability, this can be written more clearly with\n-/// an if statement\n+/// an if let statement\n ///\n /// **Known problems:** None.\n ///\n@@ -38,14 +38,14 @@ pub struct Pass;\n declare_clippy_lint! {\n     pub OPTION_MAP_UNIT_FN,\n     complexity,\n-    \"using `Option.map(f)`, where f is a function or closure that returns ()\"\n+    \"using `option.map(f)`, where f is a function or closure that returns ()\"\n }\n \n-/// **What it does:** Checks for usage of `Result.map(f)` where f is a function\n+/// **What it does:** Checks for usage of `result.map(f)` where f is a function\n /// or closure that returns the unit type.\n ///\n /// **Why is this bad?** Readability, this can be written more clearly with\n-/// an if statement\n+/// an if let statement\n ///\n /// **Known problems:** None.\n ///\n@@ -71,7 +71,7 @@ declare_clippy_lint! {\n declare_clippy_lint! {\n     pub RESULT_MAP_UNIT_FN,\n     complexity,\n-    \"using `Result.map(f)`, where f is a function or closure that returns ()\"\n+    \"using `result.map(f)`, where f is a function or closure that returns ()\"\n }\n \n \n@@ -215,33 +215,21 @@ fn lint_map_unit_fn(cx: &LateContext, stmt: &hir::Stmt, expr: &hir::Expr, map_ar\n     } else if let Some((binding, closure_expr)) = unit_closure(cx, fn_arg) {\n         let msg = suggestion_msg(\"closure\", map_type);\n \n-        enum Suggestion {\n-            Full(String),\n-            Approx(String)\n-        }\n-\n-        let suggestion = if let Some(expr_span) = reduce_unit_expression(cx, closure_expr) {\n-            Suggestion::Full(\n-                format!(\"if let {0}({1}) = {2} {{ {3} }}\",\n-                        variant,\n-                        snippet(cx, binding.pat.span, \"_\"),\n-                        snippet(cx, var_arg.span, \"_\"),\n-                        snippet(cx, expr_span, \"_\"))\n-            )\n-        } else {\n-            Suggestion::Approx(\n-                format!(\"if let {0}({1}) = {2} {{ ... }}\",\n-                        variant,\n-                        snippet(cx, binding.pat.span, \"_\"),\n-                        snippet(cx, var_arg.span, \"_\"))\n-            )\n-        };\n-\n         span_lint_and_then(cx, lint, expr.span, &msg, |db| {\n-            match suggestion {\n-                Suggestion::Full(sugg) => db.span_suggestion(stmt.span, \"try this\", sugg),\n-                Suggestion::Approx(sugg) => db.span_approximate_suggestion(stmt.span, \"try this\", sugg),\n-            };\n+            if let Some(reduced_expr_span) = reduce_unit_expression(cx, closure_expr) {\n+                let suggestion = format!(\"if let {0}({1}) = {2} {{ {3} }}\",\n+                                        variant,\n+                                        snippet(cx, binding.pat.span, \"_\"),\n+                                        snippet(cx, var_arg.span, \"_\"),\n+                                        snippet(cx, reduced_expr_span, \"_\"));\n+                db.span_suggestion(stmt.span, \"try this\", suggestion);\n+            } else {\n+                let suggestion = format!(\"if let {0}({1}) = {2} {{ ... }}\",\n+                                        variant,\n+                                        snippet(cx, binding.pat.span, \"_\"),\n+                                        snippet(cx, var_arg.span, \"_\"));\n+                db.span_approximate_suggestion(stmt.span, \"try this\", suggestion);\n+            }\n         });\n     }\n }"}]}