{"sha": "87ed0b421de4fada7cf68c7a6b80c5bf918c131a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZWQwYjQyMWRlNGZhZGE3Y2Y2OGM3YTZiODBjNWJmOTE4YzEzMWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-28T01:56:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-28T01:56:44Z"}, "message": "Auto merge of #61036 - michaelwoerister:pgo-xlto-test, r=alexcrichton\n\nPGO - Add a smoketest for combining PGO with cross-language LTO.\n\nThis PR\n\n- Adds a test making sure that PGO can be combined with cross-language LTO.\n- Does a little cleanup on how the `pgo-use` flag is handled internally.\n- Makes the compiler error if the `pgo-use` file given to `rustc` doesn't actually exist. LLVM only gives a warning and then just doesn't do PGO. Clang, on the other hand, does give an error in this case.\n- Makes the build system also build `compiler-rt` when building LLDB. This way the Clang compiler that we get from building LLDB can perform PGO, which is something that the new test case wants to do. CI compile times shouldn't be affected too much.", "tree": {"sha": "0fa0c42dad268e9eec46f9bf4518f1e6525970fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fa0c42dad268e9eec46f9bf4518f1e6525970fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87ed0b421de4fada7cf68c7a6b80c5bf918c131a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87ed0b421de4fada7cf68c7a6b80c5bf918c131a", "html_url": "https://github.com/rust-lang/rust/commit/87ed0b421de4fada7cf68c7a6b80c5bf918c131a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b71117947ffdb87c7615ae846c94a4b3fbd90827", "url": "https://api.github.com/repos/rust-lang/rust/commits/b71117947ffdb87c7615ae846c94a4b3fbd90827", "html_url": "https://github.com/rust-lang/rust/commit/b71117947ffdb87c7615ae846c94a4b3fbd90827"}, {"sha": "577ea539dc4a264b480404700a2463e657c09c87", "url": "https://api.github.com/repos/rust-lang/rust/commits/577ea539dc4a264b480404700a2463e657c09c87", "html_url": "https://github.com/rust-lang/rust/commit/577ea539dc4a264b480404700a2463e657c09c87"}], "stats": {"total": 211, "additions": 182, "deletions": 29}, "files": [{"sha": "bf3601cb312fdf0519f0c1f06b7604db92afce1b", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=87ed0b421de4fada7cf68c7a6b80c5bf918c131a", "patch": "@@ -203,8 +203,16 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_BUILD_32_BITS\", \"ON\");\n         }\n \n+        let mut enabled_llvm_projects = Vec::new();\n+\n+        if util::forcing_clang_based_tests() {\n+            enabled_llvm_projects.push(\"clang\");\n+            enabled_llvm_projects.push(\"compiler-rt\");\n+        }\n+\n         if want_lldb {\n-            cfg.define(\"LLVM_ENABLE_PROJECTS\", \"clang;lldb\");\n+            enabled_llvm_projects.push(\"clang\");\n+            enabled_llvm_projects.push(\"lldb\");\n             // For the time being, disable code signing.\n             cfg.define(\"LLDB_CODESIGN_IDENTITY\", \"\");\n             cfg.define(\"LLDB_NO_DEBUGSERVER\", \"ON\");\n@@ -214,6 +222,12 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_ENABLE_LIBXML2\", \"OFF\");\n         }\n \n+        if enabled_llvm_projects.len() > 0 {\n+            enabled_llvm_projects.sort();\n+            enabled_llvm_projects.dedup();\n+            cfg.define(\"LLVM_ENABLE_PROJECTS\", enabled_llvm_projects.join(\";\"));\n+        }\n+\n         if let Some(num_linkers) = builder.config.llvm_link_jobs {\n             if num_linkers > 0 {\n                 cfg.define(\"LLVM_PARALLEL_LINK_JOBS\", num_linkers.to_string());"}, {"sha": "9d0aa09f15cfb01f674bda17b39421769c4ccad6", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=87ed0b421de4fada7cf68c7a6b80c5bf918c131a", "patch": "@@ -1143,24 +1143,9 @@ impl Step for Compiletest {\n             }\n         }\n \n-        if let Some(var) = env::var_os(\"RUSTBUILD_FORCE_CLANG_BASED_TESTS\") {\n-            match &var.to_string_lossy().to_lowercase()[..] {\n-                \"1\" | \"yes\" | \"on\" => {\n-                    assert!(builder.config.lldb_enabled,\n-                        \"RUSTBUILD_FORCE_CLANG_BASED_TESTS needs Clang/LLDB to \\\n-                         be built.\");\n-                    let clang_exe = builder.llvm_out(target).join(\"bin\").join(\"clang\");\n-                    cmd.arg(\"--run-clang-based-tests-with\").arg(clang_exe);\n-                }\n-                \"0\" | \"no\" | \"off\" => {\n-                    // Nothing to do.\n-                }\n-                other => {\n-                    // Let's make sure typos don't get unnoticed\n-                    panic!(\"Unrecognized option '{}' set in \\\n-                            RUSTBUILD_FORCE_CLANG_BASED_TESTS\", other);\n-                }\n-            }\n+        if util::forcing_clang_based_tests() {\n+            let clang_exe = builder.llvm_out(target).join(\"bin\").join(\"clang\");\n+            cmd.arg(\"--run-clang-based-tests-with\").arg(clang_exe);\n         }\n \n         // Get paths from cmd args"}, {"sha": "9f684678bb060be35fbfde61d36a04adafec9374", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=87ed0b421de4fada7cf68c7a6b80c5bf918c131a", "patch": "@@ -356,3 +356,19 @@ impl CiEnv {\n         }\n     }\n }\n+\n+pub fn forcing_clang_based_tests() -> bool {\n+    if let Some(var) = env::var_os(\"RUSTBUILD_FORCE_CLANG_BASED_TESTS\") {\n+        match &var.to_string_lossy().to_lowercase()[..] {\n+            \"1\" | \"yes\" | \"on\" => true,\n+            \"0\" | \"no\" | \"off\" => false,\n+            other => {\n+                // Let's make sure typos don't go unnoticed\n+                panic!(\"Unrecognized option '{}' set in \\\n+                        RUSTBUILD_FORCE_CLANG_BASED_TESTS\", other)\n+            }\n+        }\n+    } else {\n+        false\n+    }\n+}"}, {"sha": "44b6e03655773628d1e4b55f5e57734534fd6f7a", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=87ed0b421de4fada7cf68c7a6b80c5bf918c131a", "patch": "@@ -1381,7 +1381,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n                      \"insert profiling code\"),\n     pgo_gen: PgoGenerate = (PgoGenerate::Disabled, parse_pgo_generate, [TRACKED],\n         \"Generate PGO profile data, to a given file, or to the default location if it's empty.\"),\n-    pgo_use: String = (String::new(), parse_string, [TRACKED],\n+    pgo_use: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n         \"Use PGO profile data from the given profile file.\"),\n     disable_instrumentation_preinliner: bool = (false, parse_bool, [TRACKED],\n         \"Disable the instrumentation pre-inliner, useful for profiling / PGO.\"),\n@@ -2021,7 +2021,7 @@ pub fn build_session_options_and_crate_config(\n         }\n     }\n \n-    if debugging_opts.pgo_gen.enabled() && !debugging_opts.pgo_use.is_empty() {\n+    if debugging_opts.pgo_gen.enabled() && debugging_opts.pgo_use.is_some() {\n         early_error(\n             error_format,\n             \"options `-Z pgo-gen` and `-Z pgo-use` are exclusive\",\n@@ -3211,7 +3211,7 @@ mod tests {\n         assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n         opts = reference.clone();\n-        opts.debugging_opts.pgo_use = String::from(\"abc\");\n+        opts.debugging_opts.pgo_use = Some(PathBuf::from(\"abc\"));\n         assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n         opts = reference.clone();"}, {"sha": "3d8092f6e007073c9edb0b91063ae22eb13c145f", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=87ed0b421de4fada7cf68c7a6b80c5bf918c131a", "patch": "@@ -1272,6 +1272,15 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         sess.err(\"Linker plugin based LTO is not supported together with \\\n                   `-C prefer-dynamic` when targeting MSVC\");\n     }\n+\n+    // Make sure that any given profiling data actually exists so LLVM can't\n+    // decide to silently skip PGO.\n+    if let Some(ref path) = sess.opts.debugging_opts.pgo_use {\n+        if !path.exists() {\n+            sess.err(&format!(\"File `{}` passed to `-Zpgo-use` does not exist.\",\n+                              path.display()));\n+        }\n+    }\n }\n \n /// Hash value constructed out of all the `-C metadata` arguments passed to the"}, {"sha": "1eee9ab8c0b67cdd6f9807498a5896ce77e6acd5", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=87ed0b421de4fada7cf68c7a6b80c5bf918c131a", "patch": "@@ -721,11 +721,9 @@ pub unsafe fn with_llvm_pmb(llmod: &llvm::Module,\n         }\n     };\n \n-    let pgo_use_path = if config.pgo_use.is_empty() {\n-        None\n-    } else {\n-        Some(CString::new(config.pgo_use.as_bytes()).unwrap())\n-    };\n+    let pgo_use_path = config.pgo_use.as_ref().map(|path_buf| {\n+        CString::new(path_buf.to_string_lossy().as_bytes()).unwrap()\n+    });\n \n     llvm::LLVMRustConfigurePassManagerBuilder(\n         builder,"}, {"sha": "74c41969268e929f58fdacf495679cfdc32aa00f", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=87ed0b421de4fada7cf68c7a6b80c5bf918c131a", "patch": "@@ -57,7 +57,7 @@ pub struct ModuleConfig {\n     pub opt_size: Option<config::OptLevel>,\n \n     pub pgo_gen: PgoGenerate,\n-    pub pgo_use: String,\n+    pub pgo_use: Option<PathBuf>,\n \n     // Flags indicating which outputs to produce.\n     pub emit_pre_lto_bc: bool,\n@@ -95,7 +95,7 @@ impl ModuleConfig {\n             opt_size: None,\n \n             pgo_gen: PgoGenerate::Disabled,\n-            pgo_use: String::new(),\n+            pgo_use: None,\n \n             emit_no_opt_bc: false,\n             emit_pre_lto_bc: false,"}, {"sha": "59a7d61892ffbe0ea6631f400d6f6c40ac4275b7", "filename": "src/test/run-make-fulldeps/cross-lang-lto-pgo-smoketest/Makefile", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-pgo-smoketest%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-pgo-smoketest%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-pgo-smoketest%2FMakefile?ref=87ed0b421de4fada7cf68c7a6b80c5bf918c131a", "patch": "@@ -0,0 +1,87 @@\n+# needs-matching-clang\n+\n+# This test makes sure that cross-language inlining can be used in conjunction\n+# with profile-guided optimization. The test only tests that the whole workflow\n+# can be executed without anything crashing. It does not test whether PGO or\n+# xLTO have any specific effect on the generated code.\n+\n+-include ../tools.mk\n+\n+COMMON_FLAGS=-Copt-level=3 -Ccodegen-units=1\n+\n+# LLVM doesn't support instrumenting binaries that use SEH:\n+# https://bugs.llvm.org/show_bug.cgi?id=41279\n+#\n+# Things work fine with -Cpanic=abort though.\n+ifdef IS_MSVC\n+COMMON_FLAGS+= -Cpanic=abort\n+endif\n+\n+all: cpp-executable rust-executable\n+\n+cpp-executable:\n+\t$(RUSTC) -Clinker-plugin-lto=on \\\n+\t         -Zpgo-gen=\"$(TMPDIR)\"/cpp-profdata \\\n+\t         -o \"$(TMPDIR)\"/librustlib-xlto.a \\\n+\t         $(COMMON_FLAGS) \\\n+\t         ./rustlib.rs\n+\t$(CLANG) -flto=thin \\\n+\t         -fprofile-generate=\"$(TMPDIR)\"/cpp-profdata \\\n+\t         -fuse-ld=lld \\\n+\t         -L \"$(TMPDIR)\" \\\n+\t         -lrustlib-xlto \\\n+\t         -o \"$(TMPDIR)\"/cmain \\\n+\t         -O3 \\\n+\t         ./cmain.c\n+\t$(TMPDIR)/cmain\n+\t# Postprocess the profiling data so it can be used by the compiler\n+\t\"$(LLVM_BIN_DIR)\"/llvm-profdata merge \\\n+\t\t-o \"$(TMPDIR)\"/cpp-profdata/merged.profdata \\\n+\t\t\"$(TMPDIR)\"/cpp-profdata/default_*.profraw\n+\t$(RUSTC) -Clinker-plugin-lto=on \\\n+\t         -Zpgo-use=\"$(TMPDIR)\"/cpp-profdata/merged.profdata \\\n+\t         -o \"$(TMPDIR)\"/librustlib-xlto.a \\\n+\t         $(COMMON_FLAGS) \\\n+\t         ./rustlib.rs\n+\t$(CLANG) -flto=thin \\\n+\t         -fprofile-use=\"$(TMPDIR)\"/cpp-profdata/merged.profdata \\\n+\t         -fuse-ld=lld \\\n+\t         -L \"$(TMPDIR)\" \\\n+\t         -lrustlib-xlto \\\n+\t         -o \"$(TMPDIR)\"/cmain \\\n+\t         -O3 \\\n+\t         ./cmain.c\n+\n+rust-executable:\n+\texit\n+\t$(CLANG) ./clib.c -fprofile-generate=\"$(TMPDIR)\"/rs-profdata -flto=thin -c -o $(TMPDIR)/clib.o -O3\n+\t(cd $(TMPDIR); $(AR) crus ./libxyz.a ./clib.o)\n+\t$(RUSTC) -Clinker-plugin-lto=on \\\n+\t         -Zpgo-gen=\"$(TMPDIR)\"/rs-profdata \\\n+\t         -L$(TMPDIR) \\\n+\t         $(COMMON_FLAGS) \\\n+\t         -Clinker=$(CLANG) \\\n+\t         -Clink-arg=-fuse-ld=lld \\\n+\t         -o $(TMPDIR)/rsmain \\\n+\t         ./main.rs\n+\t$(TMPDIR)/rsmain\n+\t# Postprocess the profiling data so it can be used by the compiler\n+\t\"$(LLVM_BIN_DIR)\"/llvm-profdata merge \\\n+\t\t-o \"$(TMPDIR)\"/rs-profdata/merged.profdata \\\n+\t\t\"$(TMPDIR)\"/rs-profdata/default_*.profraw\n+\t$(CLANG) ./clib.c \\\n+\t         -fprofile-use=\"$(TMPDIR)\"/rs-profdata/merged.profdata \\\n+\t         -flto=thin \\\n+\t         -c \\\n+\t         -o $(TMPDIR)/clib.o \\\n+\t         -O3\n+\trm \"$(TMPDIR)\"/libxyz.a\n+\t(cd $(TMPDIR); $(AR) crus ./libxyz.a ./clib.o)\n+\t$(RUSTC) -Clinker-plugin-lto=on \\\n+\t         -Zpgo-use=\"$(TMPDIR)\"/rs-profdata/merged.profdata \\\n+\t         -L$(TMPDIR) \\\n+\t         $(COMMON_FLAGS) \\\n+\t         -Clinker=$(CLANG) \\\n+\t         -Clink-arg=-fuse-ld=lld \\\n+\t         -o $(TMPDIR)/rsmain \\\n+\t         ./main.rs"}, {"sha": "90f33f24dc42425b38b394c08354c4ef3ecd9d9a", "filename": "src/test/run-make-fulldeps/cross-lang-lto-pgo-smoketest/clib.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-pgo-smoketest%2Fclib.c", "raw_url": "https://github.com/rust-lang/rust/raw/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-pgo-smoketest%2Fclib.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-pgo-smoketest%2Fclib.c?ref=87ed0b421de4fada7cf68c7a6b80c5bf918c131a", "patch": "@@ -0,0 +1,9 @@\n+#include <stdint.h>\n+\n+uint32_t c_always_inlined() {\n+    return 1234;\n+}\n+\n+__attribute__((noinline)) uint32_t c_never_inlined() {\n+    return 12345;\n+}"}, {"sha": "e3f24828be371c3828bece6ed9ad0b58715be781", "filename": "src/test/run-make-fulldeps/cross-lang-lto-pgo-smoketest/cmain.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-pgo-smoketest%2Fcmain.c", "raw_url": "https://github.com/rust-lang/rust/raw/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-pgo-smoketest%2Fcmain.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-pgo-smoketest%2Fcmain.c?ref=87ed0b421de4fada7cf68c7a6b80c5bf918c131a", "patch": "@@ -0,0 +1,12 @@\n+#include <stdint.h>\n+\n+// A trivial function defined in Rust, returning a constant value. This should\n+// always be inlined.\n+uint32_t rust_always_inlined();\n+\n+\n+uint32_t rust_never_inlined();\n+\n+int main(int argc, char** argv) {\n+    return (rust_never_inlined() + rust_always_inlined()) * 0;\n+}"}, {"sha": "8129dcb85d96a0442f390f86a63154f3ff580377", "filename": "src/test/run-make-fulldeps/cross-lang-lto-pgo-smoketest/main.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-pgo-smoketest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-pgo-smoketest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-pgo-smoketest%2Fmain.rs?ref=87ed0b421de4fada7cf68c7a6b80c5bf918c131a", "patch": "@@ -0,0 +1,11 @@\n+#[link(name = \"xyz\")]\n+extern \"C\" {\n+    fn c_always_inlined() -> u32;\n+    fn c_never_inlined() -> u32;\n+}\n+\n+fn main() {\n+    unsafe {\n+        println!(\"blub: {}\", c_always_inlined() + c_never_inlined());\n+    }\n+}"}, {"sha": "8a74d74a420bd556056268d427ca26493d02f447", "filename": "src/test/run-make-fulldeps/cross-lang-lto-pgo-smoketest/rustlib.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-pgo-smoketest%2Frustlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ed0b421de4fada7cf68c7a6b80c5bf918c131a/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-pgo-smoketest%2Frustlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-pgo-smoketest%2Frustlib.rs?ref=87ed0b421de4fada7cf68c7a6b80c5bf918c131a", "patch": "@@ -0,0 +1,12 @@\n+#![crate_type=\"staticlib\"]\n+\n+#[no_mangle]\n+pub extern \"C\" fn rust_always_inlined() -> u32 {\n+    42\n+}\n+\n+#[no_mangle]\n+#[inline(never)]\n+pub extern \"C\" fn rust_never_inlined() -> u32 {\n+    421\n+}"}]}