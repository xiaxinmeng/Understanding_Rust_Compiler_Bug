{"sha": "e74b55b9da5a163e02bbcbf97e7ea24d48742943", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NGI1NWI5ZGE1YTE2M2UwMmJiY2JmOTdlN2VhMjRkNDg3NDI5NDM=", "commit": {"author": {"name": "Micha\u0142 Krasnoborski", "email": "mkrdln@gmail.com", "date": "2017-01-27T03:51:24Z"}, "committer": {"name": "Micha\u0142 Krasnoborski", "email": "mkrdln@gmail.com", "date": "2017-01-28T00:50:05Z"}, "message": "use `String::with_capacity` in `format!`", "tree": {"sha": "3119620b3d5a58f8c433f697452ddf86798c7609", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3119620b3d5a58f8c433f697452ddf86798c7609"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e74b55b9da5a163e02bbcbf97e7ea24d48742943", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e74b55b9da5a163e02bbcbf97e7ea24d48742943", "html_url": "https://github.com/rust-lang/rust/commit/e74b55b9da5a163e02bbcbf97e7ea24d48742943", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e74b55b9da5a163e02bbcbf97e7ea24d48742943/comments", "author": {"login": "krdln", "id": 3074996, "node_id": "MDQ6VXNlcjMwNzQ5OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/3074996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krdln", "html_url": "https://github.com/krdln", "followers_url": "https://api.github.com/users/krdln/followers", "following_url": "https://api.github.com/users/krdln/following{/other_user}", "gists_url": "https://api.github.com/users/krdln/gists{/gist_id}", "starred_url": "https://api.github.com/users/krdln/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krdln/subscriptions", "organizations_url": "https://api.github.com/users/krdln/orgs", "repos_url": "https://api.github.com/users/krdln/repos", "events_url": "https://api.github.com/users/krdln/events{/privacy}", "received_events_url": "https://api.github.com/users/krdln/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krdln", "id": 3074996, "node_id": "MDQ6VXNlcjMwNzQ5OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/3074996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krdln", "html_url": "https://github.com/krdln", "followers_url": "https://api.github.com/users/krdln/followers", "following_url": "https://api.github.com/users/krdln/following{/other_user}", "gists_url": "https://api.github.com/users/krdln/gists{/gist_id}", "starred_url": "https://api.github.com/users/krdln/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krdln/subscriptions", "organizations_url": "https://api.github.com/users/krdln/orgs", "repos_url": "https://api.github.com/users/krdln/repos", "events_url": "https://api.github.com/users/krdln/events{/privacy}", "received_events_url": "https://api.github.com/users/krdln/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8430042a49bbd49bbb4fbc54f457feb5fb614f56", "url": "https://api.github.com/repos/rust-lang/rust/commits/8430042a49bbd49bbb4fbc54f457feb5fb614f56", "html_url": "https://github.com/rust-lang/rust/commit/8430042a49bbd49bbb4fbc54f457feb5fb614f56"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "bd74848a01d8362f150b23701c6af47359f10f8f", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e74b55b9da5a163e02bbcbf97e7ea24d48742943/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74b55b9da5a163e02bbcbf97e7ea24d48742943/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=e74b55b9da5a163e02bbcbf97e7ea24d48742943", "patch": "@@ -539,7 +539,8 @@ use string;\n /// [format!]: ../macro.format.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn format(args: Arguments) -> string::String {\n-    let mut output = string::String::new();\n+    let capacity = args.estimated_capacity();\n+    let mut output = string::String::with_capacity(capacity);\n     let _ = output.write_fmt(args);\n     output\n }"}, {"sha": "ed9c5d3337f04dde8fc58f9e188699ba3c010b92", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e74b55b9da5a163e02bbcbf97e7ea24d48742943/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74b55b9da5a163e02bbcbf97e7ea24d48742943/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=e74b55b9da5a163e02bbcbf97e7ea24d48742943", "patch": "@@ -265,6 +265,34 @@ impl<'a> Arguments<'a> {\n             args: args\n         }\n     }\n+\n+    /// Estimates the length of the formatted text.\n+    ///\n+    /// This is intended to be used for setting initial `String` capacity\n+    /// when using `format!`. Note: this is neither the lower nor upper bound.\n+    #[doc(hidden)] #[inline]\n+    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n+               issue = \"0\")]\n+    pub fn estimated_capacity(&self) -> usize {\n+        // Using wrapping arithmetics in this function, because\n+        // wrong result is highly unlikely and doesn't cause unsafety.\n+        use ::num::Wrapping as W;\n+\n+        let pieces_length: W<usize> = self.pieces.iter()\n+            .map(|x| W(x.len())).sum();\n+\n+        // If they are any arguments to format, the string will most likely\n+        // double in size. So we're pre-doubling it here.\n+        let multiplier = if self.args.is_empty() { W(1) } else { W(2) };\n+\n+        let capacity = multiplier * pieces_length;\n+        if multiplier == W(2) && (W(1)..W(8)).contains(capacity) {\n+            // Allocations smaller than 8 don't really make sense for String.\n+            8\n+        } else {\n+            capacity.0\n+        }\n+    }\n }\n \n /// This structure represents a safely precompiled version of a format string"}, {"sha": "71b3a440f7beaf8f873f154020913aa3e8a3969f", "filename": "src/libcoretest/fmt/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e74b55b9da5a163e02bbcbf97e7ea24d48742943/src%2Flibcoretest%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74b55b9da5a163e02bbcbf97e7ea24d48742943/src%2Flibcoretest%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffmt%2Fmod.rs?ref=e74b55b9da5a163e02bbcbf97e7ea24d48742943", "patch": "@@ -28,3 +28,11 @@ fn test_pointer_formats_data_pointer() {\n     assert_eq!(format!(\"{:p}\", s), format!(\"{:p}\", s.as_ptr()));\n     assert_eq!(format!(\"{:p}\", b), format!(\"{:p}\", b.as_ptr()));\n }\n+\n+#[test]\n+fn test_estimated_capacity() {\n+    assert_eq!(format_args!(\"{}\", \"\").estimated_capacity(), 0);\n+    assert_eq!(format_args!(\"Hello\").estimated_capacity(), 5);\n+    assert_eq!(format_args!(\"Hello, {}!\", \"\").estimated_capacity(), 16);\n+    assert_eq!(format_args!(\"{}, hello!\", \"World\").estimated_capacity(), 16);\n+}"}, {"sha": "fed5b86c369e8d5985af91ff8b3b83c996122b0d", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e74b55b9da5a163e02bbcbf97e7ea24d48742943/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74b55b9da5a163e02bbcbf97e7ea24d48742943/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=e74b55b9da5a163e02bbcbf97e7ea24d48742943", "patch": "@@ -34,6 +34,7 @@\n #![feature(ordering_chaining)]\n #![feature(result_unwrap_or_default)]\n #![feature(ptr_unaligned)]\n+#![feature(fmt_internals)]\n \n extern crate core;\n extern crate test;"}]}