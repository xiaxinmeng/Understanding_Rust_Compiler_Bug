{"sha": "cbbbd4832582256820695bb73fdb4ca125f1b1f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYmJkNDgzMjU4MjI1NjgyMDY5NWJiNzNmZGI0Y2ExMjVmMWIxZjk=", "commit": {"author": {"name": "Timo Freiberg", "email": "timo.freiberg@gmail.com", "date": "2020-05-10T16:09:22Z"}, "committer": {"name": "Timo Freiberg", "email": "timo.freiberg@gmail.com", "date": "2020-05-10T16:10:15Z"}, "message": "Omit default types in HirDisplay SourceCode mode", "tree": {"sha": "1d223a7e9f995faa2188efd02115ec21cbaf3913", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d223a7e9f995faa2188efd02115ec21cbaf3913"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbbbd4832582256820695bb73fdb4ca125f1b1f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbbbd4832582256820695bb73fdb4ca125f1b1f9", "html_url": "https://github.com/rust-lang/rust/commit/cbbbd4832582256820695bb73fdb4ca125f1b1f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbbbd4832582256820695bb73fdb4ca125f1b1f9/comments", "author": {"login": "TimoFreiberg", "id": 5281645, "node_id": "MDQ6VXNlcjUyODE2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5281645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimoFreiberg", "html_url": "https://github.com/TimoFreiberg", "followers_url": "https://api.github.com/users/TimoFreiberg/followers", "following_url": "https://api.github.com/users/TimoFreiberg/following{/other_user}", "gists_url": "https://api.github.com/users/TimoFreiberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimoFreiberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimoFreiberg/subscriptions", "organizations_url": "https://api.github.com/users/TimoFreiberg/orgs", "repos_url": "https://api.github.com/users/TimoFreiberg/repos", "events_url": "https://api.github.com/users/TimoFreiberg/events{/privacy}", "received_events_url": "https://api.github.com/users/TimoFreiberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimoFreiberg", "id": 5281645, "node_id": "MDQ6VXNlcjUyODE2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5281645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimoFreiberg", "html_url": "https://github.com/TimoFreiberg", "followers_url": "https://api.github.com/users/TimoFreiberg/followers", "following_url": "https://api.github.com/users/TimoFreiberg/following{/other_user}", "gists_url": "https://api.github.com/users/TimoFreiberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimoFreiberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimoFreiberg/subscriptions", "organizations_url": "https://api.github.com/users/TimoFreiberg/orgs", "repos_url": "https://api.github.com/users/TimoFreiberg/repos", "events_url": "https://api.github.com/users/TimoFreiberg/events{/privacy}", "received_events_url": "https://api.github.com/users/TimoFreiberg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "225f353aa26329260b8c7f69305f616a9edaad70", "url": "https://api.github.com/repos/rust-lang/rust/commits/225f353aa26329260b8c7f69305f616a9edaad70", "html_url": "https://github.com/rust-lang/rust/commit/225f353aa26329260b8c7f69305f616a9edaad70"}], "stats": {"total": 92, "additions": 64, "deletions": 28}, "files": [{"sha": "7ced006266f2e7c3302e73618d8fa69c6c9ca0e7", "filename": "crates/ra_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbbbd4832582256820695bb73fdb4ca125f1b1f9/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbbd4832582256820695bb73fdb4ca125f1b1f9/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=cbbbd4832582256820695bb73fdb4ca125f1b1f9", "patch": "@@ -209,7 +209,7 @@ struct Test<K, T = u8> {\n }\n \n fn main() {\n-    let test<|>: Test<i32, u8> = Test { t: 23, k: 33 };\n+    let test<|>: Test<i32> = Test { t: 23, k: 33 };\n }\"#,\n         );\n     }"}, {"sha": "b9c4d2e89783f18a5513ffe81828c804d5004a86", "filename": "crates/ra_hir_ty/src/display.rs", "status": "modified", "additions": 36, "deletions": 27, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/cbbbd4832582256820695bb73fdb4ca125f1b1f9/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbbd4832582256820695bb73fdb4ca125f1b1f9/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs?ref=cbbbd4832582256820695bb73fdb4ca125f1b1f9", "patch": "@@ -136,6 +136,12 @@ enum DisplayTarget {\n     SourceCode { module_id: ModuleId },\n }\n \n+impl DisplayTarget {\n+    fn is_source_code(&self) -> bool {\n+        matches!(self, Self::SourceCode {..})\n+    }\n+}\n+\n #[derive(Debug)]\n pub enum DisplaySourceCodeError {\n     PathNotFound,\n@@ -303,37 +309,40 @@ impl HirDisplay for ApplicationTy {\n \n                 if self.parameters.len() > 0 {\n                     let mut non_default_parameters = Vec::with_capacity(self.parameters.len());\n-                    let parameters_to_write = if f.omit_verbose_types() {\n-                        match self\n-                            .ctor\n-                            .as_generic_def()\n-                            .map(|generic_def_id| f.db.generic_defaults(generic_def_id))\n-                            .filter(|defaults| !defaults.is_empty())\n-                        {\n-                            None => self.parameters.0.as_ref(),\n-                            Some(default_parameters) => {\n-                                for (i, parameter) in self.parameters.iter().enumerate() {\n-                                    match (parameter, default_parameters.get(i)) {\n-                                        (&Ty::Unknown, _) | (_, None) => {\n-                                            non_default_parameters.push(parameter.clone())\n-                                        }\n-                                        (_, Some(default_parameter))\n-                                            if parameter != default_parameter =>\n-                                        {\n-                                            non_default_parameters.push(parameter.clone())\n+                    let parameters_to_write =\n+                        if f.display_target.is_source_code() || f.omit_verbose_types() {\n+                            match self\n+                                .ctor\n+                                .as_generic_def()\n+                                .map(|generic_def_id| f.db.generic_defaults(generic_def_id))\n+                                .filter(|defaults| !defaults.is_empty())\n+                            {\n+                                None => self.parameters.0.as_ref(),\n+                                Some(default_parameters) => {\n+                                    for (i, parameter) in self.parameters.iter().enumerate() {\n+                                        match (parameter, default_parameters.get(i)) {\n+                                            (&Ty::Unknown, _) | (_, None) => {\n+                                                non_default_parameters.push(parameter.clone())\n+                                            }\n+                                            (_, Some(default_parameter))\n+                                                if parameter != default_parameter =>\n+                                            {\n+                                                non_default_parameters.push(parameter.clone())\n+                                            }\n+                                            _ => (),\n                                         }\n-                                        _ => (),\n                                     }\n+                                    &non_default_parameters\n                                 }\n-                                &non_default_parameters\n                             }\n-                        }\n-                    } else {\n-                        self.parameters.0.as_ref()\n-                    };\n-                    write!(f, \"<\")?;\n-                    f.write_joined(parameters_to_write, \", \")?;\n-                    write!(f, \">\")?;\n+                        } else {\n+                            self.parameters.0.as_ref()\n+                        };\n+                    if !parameters_to_write.is_empty() {\n+                        write!(f, \"<\")?;\n+                        f.write_joined(parameters_to_write, \", \")?;\n+                        write!(f, \">\")?;\n+                    }\n                 }\n             }\n             TypeCtor::AssociatedType(type_alias) => {"}, {"sha": "4088b1d22d9463bab869d349c9f8d5da62f20bcb", "filename": "crates/ra_hir_ty/src/tests/display_source_code.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cbbbd4832582256820695bb73fdb4ca125f1b1f9/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fdisplay_source_code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbbd4832582256820695bb73fdb4ca125f1b1f9/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fdisplay_source_code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fdisplay_source_code.rs?ref=cbbbd4832582256820695bb73fdb4ca125f1b1f9", "patch": "@@ -21,3 +21,30 @@ fn bar() {\n     );\n     assert_eq!(\"foo::Foo\", displayed_source_at_pos(&db, pos));\n }\n+\n+#[test]\n+fn omit_default_type_parameters() {\n+    let (db, pos) = TestDB::with_position(\n+        r\"\n+        //- /main.rs\n+        struct Foo<T = u8> { t: T }\n+        fn main() {\n+            let foo = Foo { t: 5 };\n+            foo<|>;\n+        }\n+        \",\n+    );\n+    assert_eq!(\"Foo\", displayed_source_at_pos(&db, pos));\n+\n+    let (db, pos) = TestDB::with_position(\n+        r\"\n+        //- /main.rs\n+        struct Foo<K, T = u8> { k: K, t: T }\n+        fn main() {\n+            let foo = Foo { k: 400, t: 5 };\n+            foo<|>;\n+        }\n+        \",\n+    );\n+    assert_eq!(\"Foo<i32>\", displayed_source_at_pos(&db, pos));\n+}"}]}