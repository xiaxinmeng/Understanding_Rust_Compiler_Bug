{"sha": "ceea85a148ec3426edfc00b8353a19c1d2df5dbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZWE4NWExNDhlYzM0MjZlZGZjMDBiODM1M2ExOWMxZDJkZjVkYmY=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-01-08T11:57:31Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-01-09T04:41:46Z"}, "message": "Remove ApproxEq and assert_approx_eq!\n\nThis trait seems to stray too far from the mandate of a standard library as implementations may vary between use cases.", "tree": {"sha": "34005cf06fde432a44cff41aca0a6603b12cf3a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34005cf06fde432a44cff41aca0a6603b12cf3a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceea85a148ec3426edfc00b8353a19c1d2df5dbf", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceea85a148ec3426edfc00b8353a19c1d2df5dbf", "html_url": "https://github.com/rust-lang/rust/commit/ceea85a148ec3426edfc00b8353a19c1d2df5dbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7613b15fdbbb9bf770a2c731f4135886b0ff3cf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7613b15fdbbb9bf770a2c731f4135886b0ff3cf0", "html_url": "https://github.com/rust-lang/rust/commit/7613b15fdbbb9bf770a2c731f4135886b0ff3cf0"}], "stats": {"total": 463, "additions": 164, "deletions": 299}, "files": [{"sha": "eeed3c7d9a793ebdfa1ee779c0441ad13bde0196", "filename": "doc/guide-testing.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/doc%2Fguide-testing.md", "raw_url": "https://github.com/rust-lang/rust/raw/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/doc%2Fguide-testing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fguide-testing.md?ref=ceea85a148ec3426edfc00b8353a19c1d2df5dbf", "patch": "@@ -48,8 +48,7 @@ value. To run the tests in a crate, it must be compiled with the\n the resulting executable will run all the tests in the crate. A test\n is considered successful if its function returns; if the task running\n the test fails, through a call to `fail!`, a failed `check` or\n-`assert`, or some other (`assert_eq`, `assert_approx_eq`, ...) means,\n-then the test fails.\n+`assert`, or some other (`assert_eq`, ...) means, then the test fails.\n \n When compiling a crate with the '--test' flag '--cfg test' is also\n implied, so that tests can be conditionally compiled."}, {"sha": "65e7cd061496dfd10afceb7b08c35d4e4625f4f2", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=ceea85a148ec3426edfc00b8353a19c1d2df5dbf", "patch": "@@ -71,7 +71,7 @@ syn keyword rustTrait Bool\n syn keyword rustTrait ToCStr\n syn keyword rustTrait Char\n syn keyword rustTrait Clone DeepClone\n-syn keyword rustTrait Eq ApproxEq Ord TotalEq TotalOrd Ordering Equiv\n+syn keyword rustTrait Eq Ord TotalEq TotalOrd Ordering Equiv\n syn keyword rustEnumVariant Less Equal Greater\n syn keyword rustTrait Container Mutable Map MutableMap Set MutableSet\n syn keyword rustTrait Default"}, {"sha": "b4795c7e66ba9b7fd4daa72109c1399569c07135", "filename": "src/libextra/num/complex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Flibextra%2Fnum%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Flibextra%2Fnum%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fcomplex.rs?ref=ceea85a148ec3426edfc00b8353a19c1d2df5dbf", "patch": "@@ -268,7 +268,7 @@ mod test {\n     #[test]\n     fn test_arg() {\n         fn test(c: Complex64, arg: f64) {\n-            assert!(c.arg().approx_eq(&arg))\n+            assert!((c.arg() - arg).abs() < 1.0e-6)\n         }\n         test(_1_0i, 0.0);\n         test(_1_1i, 0.25 * Real::pi());"}, {"sha": "7b2dcc53b79da667c6fd9270b58f0e05aab40e13", "filename": "src/libextra/stats.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=ceea85a148ec3426edfc00b8353a19c1d2df5dbf", "patch": "@@ -439,6 +439,14 @@ mod tests {\n     use std::io;\n     use std::str;\n \n+    macro_rules! assert_approx_eq(\n+        ($a:expr, $b:expr) => ({\n+            let (a, b) = (&$a, &$b);\n+            assert!((*a - *b).abs() < 1.0e-6,\n+                    \"{} is not approximately equal to {}\", *a, *b);\n+        })\n+    )\n+\n     fn check(samples: &[f64], summ: &Summary) {\n \n         let summ2 = Summary::new(samples);"}, {"sha": "1283aba9729b9775092a8684ef9825344852566d", "filename": "src/libstd/cmp.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=ceea85a148ec3426edfc00b8353a19c1d2df5dbf", "patch": "@@ -72,13 +72,6 @@ totaleq_impl!(uint)\n \n totaleq_impl!(char)\n \n-/// Trait for testing approximate equality\n-pub trait ApproxEq<Eps> {\n-    fn approx_epsilon() -> Eps;\n-    fn approx_eq(&self, other: &Self) -> bool;\n-    fn approx_eq_eps(&self, other: &Self, approx_epsilon: &Eps) -> bool;\n-}\n-\n #[deriving(Clone, Eq)]\n pub enum Ordering { Less = -1, Equal = 0, Greater = 1 }\n "}, {"sha": "8a4d102e7bee9e742445c083b8a67116d7ff5618", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=ceea85a148ec3426edfc00b8353a19c1d2df5dbf", "patch": "@@ -85,6 +85,7 @@ pub mod prelude;\n \n /* Primitive types */\n \n+#[path = \"num/float_macros.rs\"] mod float_macros;\n #[path = \"num/int_macros.rs\"]   mod int_macros;\n #[path = \"num/uint_macros.rs\"]  mod uint_macros;\n "}, {"sha": "b9814b0f5a12673e03576e3e4a47de99399e99f8", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=ceea85a148ec3426edfc00b8353a19c1d2df5dbf", "patch": "@@ -166,22 +166,6 @@ impl Eq for f32 {\n     fn eq(&self, other: &f32) -> bool { (*self) == (*other) }\n }\n \n-#[cfg(not(test))]\n-impl ApproxEq<f32> for f32 {\n-    #[inline]\n-    fn approx_epsilon() -> f32 { 1.0e-6 }\n-\n-    #[inline]\n-    fn approx_eq(&self, other: &f32) -> bool {\n-        self.approx_eq_eps(other, &1.0e-6)\n-    }\n-\n-    #[inline]\n-    fn approx_eq_eps(&self, other: &f32, approx_epsilon: &f32) -> bool {\n-        (*self - *other).abs() < *approx_epsilon\n-    }\n-}\n-\n #[cfg(not(test))]\n impl Ord for f32 {\n     #[inline]\n@@ -1195,15 +1179,6 @@ mod tests {\n         assert!(!NAN.is_negative());\n     }\n \n-    #[test]\n-    fn test_approx_eq() {\n-        assert!(1.0f32.approx_eq(&1f32));\n-        assert!(0.9999999f32.approx_eq(&1f32));\n-        assert!(1.000001f32.approx_eq_eps(&1f32, &1.0e-5));\n-        assert!(1.0000001f32.approx_eq_eps(&1f32, &1.0e-6));\n-        assert!(!1.0000001f32.approx_eq_eps(&1f32, &1.0e-7));\n-    }\n-\n     #[test]\n     fn test_primitive() {\n         let none: Option<f32> = None;"}, {"sha": "86259f5af5de7269afa06e855d9a156afb2700c7", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=ceea85a148ec3426edfc00b8353a19c1d2df5dbf", "patch": "@@ -189,22 +189,6 @@ impl Eq for f64 {\n     fn eq(&self, other: &f64) -> bool { (*self) == (*other) }\n }\n \n-#[cfg(not(test))]\n-impl ApproxEq<f64> for f64 {\n-    #[inline]\n-    fn approx_epsilon() -> f64 { 1.0e-6 }\n-\n-    #[inline]\n-    fn approx_eq(&self, other: &f64) -> bool {\n-        self.approx_eq_eps(other, &1.0e-6)\n-    }\n-\n-    #[inline]\n-    fn approx_eq_eps(&self, other: &f64, approx_epsilon: &f64) -> bool {\n-        (*self - *other).abs() < *approx_epsilon\n-    }\n-}\n-\n #[cfg(not(test))]\n impl Ord for f64 {\n     #[inline]\n@@ -1246,15 +1230,6 @@ mod tests {\n         assert!(!NAN.is_negative());\n     }\n \n-    #[test]\n-    fn test_approx_eq() {\n-        assert!(1.0f64.approx_eq(&1f64));\n-        assert!(0.9999999f64.approx_eq(&1f64));\n-        assert!(1.000001f64.approx_eq_eps(&1f64, &1.0e-5));\n-        assert!(1.0000001f64.approx_eq_eps(&1f64, &1.0e-6));\n-        assert!(!1.0000001f64.approx_eq_eps(&1f64, &1.0e-7));\n-    }\n-\n     #[test]\n     fn test_primitive() {\n         let none: Option<f64> = None;"}, {"sha": "7c93602af118c369b59dd1663ac7cb6386db6ca5", "filename": "src/libstd/num/float_macros.rs", "status": "renamed", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Flibstd%2Fnum%2Ffloat_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Flibstd%2Fnum%2Ffloat_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ffloat_macros.rs?ref=ceea85a148ec3426edfc00b8353a19c1d2df5dbf", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,7 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:left: 1.0000001f64 does not approximately equal right: 1f64 with epsilon: 0.0000001f64\n-pub fn main() {\n-    assert_approx_eq!(1.0000001f64, 1.0f64, 1.0e-7);\n-}\n+#[macro_escape];\n+#[doc(hidden)];\n+\n+macro_rules! assert_approx_eq(\n+    ($a:expr, $b:expr) => ({\n+        let (a, b) = (&$a, &$b);\n+        assert!((*a - *b).abs() < 1.0e-6,\n+                \"{} is not approximately equal to {}\", *a, *b);\n+    })\n+)", "previous_filename": "src/test/run-fail/assert-approx-eq-eps-macro-fail.rs"}, {"sha": "8a72f5cbd77ec1804e535dbfdb9d512f21c970f4", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 3, "deletions": 56, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=ceea85a148ec3426edfc00b8353a19c1d2df5dbf", "patch": "@@ -16,7 +16,7 @@\n #[allow(missing_doc)];\n \n use clone::{Clone, DeepClone};\n-use cmp::{Eq, ApproxEq, Ord};\n+use cmp::{Eq, Ord};\n use ops::{Add, Sub, Mul, Div, Rem, Neg};\n use ops::{Not, BitAnd, BitOr, BitXor, Shl, Shr};\n use option::{Option, Some, None};\n@@ -138,60 +138,19 @@ pub trait Integer: Num\n /// A collection of rounding operations.\n pub trait Round {\n     /// Return the largest integer less than or equal to a number.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// assert_approx_eq!(1.3f32.floor(), 1.0);\n-    /// assert_approx_eq!((-1.3f32).floor(), -2.0);\n-    /// ```\n     fn floor(&self) -> Self;\n \n     /// Return the smallest integer greater than or equal to a number.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// assert_approx_eq!(1.3f32.ceil(), 2.0);\n-    /// assert_approx_eq!((-1.3f32).ceil(), -1.0);\n-    /// ```\n     fn ceil(&self) -> Self;\n \n     /// Return the nearest integer to a number. Round half-way cases away from\n     /// `0.0`.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// assert_approx_eq!(1.3f32.round(), 1.0);\n-    /// assert_approx_eq!((-1.3f32).round(), -1.0);\n-    /// assert_approx_eq!(1.5f32.round(), 2.0);\n-    /// assert_approx_eq!((-1.5f32).round(), -2.0);\n-    /// ```\n     fn round(&self) -> Self;\n \n     /// Return the integer part of a number.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// assert_approx_eq!(1.3f32.trunc(), 1.0);\n-    /// assert_approx_eq!((-1.3f32).trunc(), -1.0);\n-    /// assert_approx_eq!(1.5f32.trunc(), 1.0);\n-    /// assert_approx_eq!((-1.5f32).trunc(), -1.0);\n-    /// ```\n     fn trunc(&self) -> Self;\n \n     /// Return the fractional part of a number.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// assert_approx_eq!(1.3f32.fract(), 0.3);\n-    /// assert_approx_eq!((-1.3f32).fract(), -0.3);\n-    /// assert_approx_eq!(1.5f32.fract(), 0.5);\n-    /// assert_approx_eq!((-1.5f32).fract(), -0.5);\n-    /// ```\n     fn fract(&self) -> Self;\n }\n \n@@ -262,18 +221,7 @@ pub trait Trigonometric {\n     fn atan(&self) -> Self;\n \n     /// Computes the four quadrant arctangent of a number, `y`, and another\n-    /// number `x`. Return value is in radians in the range [-pi, pi];\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// use std::f32;\n-    ///\n-    /// let y = 3f32.sqrt();\n-    /// let x = 1f32;\n-    /// assert_approx_eq!(y.atan2(&x), f32::consts::PI / 3f32);\n-    /// assert_approx_eq!((-y).atan2(&(-x)), - 2f32 * f32::consts::PI / 3f32);\n-    /// ```\n+    /// number `x`. Return value is in radians in the range [-pi, pi].\n     fn atan2(&self, other: &Self) -> Self;\n \n     /// Simultaneously computes the sine and cosine of the number, `x`. Returns\n@@ -505,8 +453,7 @@ pub enum FPCategory {\n /// Primitive floating point numbers\n pub trait Float: Real\n                + Signed\n-               + Primitive\n-               + ApproxEq<Self> {\n+               + Primitive {\n     // FIXME (#5527): These should be associated constants\n     fn nan() -> Self;\n     fn infinity() -> Self;"}, {"sha": "5b858c4b7158e3d84172012b9459f9c408737b4a", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=ceea85a148ec3426edfc00b8353a19c1d2df5dbf", "patch": "@@ -50,7 +50,7 @@ pub use bool::Bool;\n pub use c_str::ToCStr;\n pub use char::Char;\n pub use clone::{Clone, DeepClone};\n-pub use cmp::{Eq, ApproxEq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater, Equiv};\n+pub use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater, Equiv};\n pub use container::{Container, Mutable, Map, MutableMap, Set, MutableSet};\n pub use default::Default;\n pub use from_str::FromStr;"}, {"sha": "5d497dd541f4039157b33ae16d2205670f0f949f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=ceea85a148ec3426edfc00b8353a19c1d2df5dbf", "patch": "@@ -741,43 +741,6 @@ pub fn std_macros() -> @str {\n         )\n     )\n \n-    macro_rules! assert_approx_eq (\n-        ($given:expr , $expected:expr) => (\n-            {\n-                use std::cmp::ApproxEq;\n-\n-                let given_val = $given;\n-                let expected_val = $expected;\n-                // check both directions of equality....\n-                if !(\n-                    given_val.approx_eq(&expected_val) &&\n-                    expected_val.approx_eq(&given_val)\n-                ) {\n-                    fail!(\"left: {:?} does not approximately equal right: {:?}\",\n-                           given_val, expected_val);\n-                }\n-            }\n-        );\n-        ($given:expr , $expected:expr , $epsilon:expr) => (\n-            {\n-                use std::cmp::ApproxEq;\n-\n-                let given_val = $given;\n-                let expected_val = $expected;\n-                let epsilon_val = $epsilon;\n-                // check both directions of equality....\n-                if !(\n-                    given_val.approx_eq_eps(&expected_val, &epsilon_val) &&\n-                    expected_val.approx_eq_eps(&given_val, &epsilon_val)\n-                ) {\n-                    fail!(\"left: {:?} does not approximately equal right: \\\n-                             {:?} with epsilon: {:?}\",\n-                          given_val, expected_val, epsilon_val);\n-                }\n-            }\n-        )\n-    )\n-\n     /// A utility macro for indicating unreachable code. It will fail if\n     /// executed. This is occasionally useful to put after loops that never\n     /// terminate normally, but instead directly return from a function."}, {"sha": "60b6cb216d940f80c56a3ec27275e938c9dcc416", "filename": "src/test/run-fail/assert-approx-eq-macro-fail.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7613b15fdbbb9bf770a2c731f4135886b0ff3cf0/src%2Ftest%2Frun-fail%2Fassert-approx-eq-macro-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7613b15fdbbb9bf770a2c731f4135886b0ff3cf0/src%2Ftest%2Frun-fail%2Fassert-approx-eq-macro-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fassert-approx-eq-macro-fail.rs?ref=7613b15fdbbb9bf770a2c731f4135886b0ff3cf0", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:left: 1.00001f64 does not approximately equal right: 1f64\n-pub fn main() {\n-    assert_approx_eq!(1.00001f64, 1.0);\n-}"}, {"sha": "3ea1f896dff3125b745ba4c39e59060fbafb6fe3", "filename": "src/test/run-pass/assert-approx-eq-macro-success.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7613b15fdbbb9bf770a2c731f4135886b0ff3cf0/src%2Ftest%2Frun-pass%2Fassert-approx-eq-macro-success.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7613b15fdbbb9bf770a2c731f4135886b0ff3cf0/src%2Ftest%2Frun-pass%2Fassert-approx-eq-macro-success.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassert-approx-eq-macro-success.rs?ref=7613b15fdbbb9bf770a2c731f4135886b0ff3cf0", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub fn main() {\n-    assert_approx_eq!(1.0f64, 1.0);\n-    assert_approx_eq!(1.0000001f64, 1.0);\n-    assert_approx_eq!(1.0000001f64, 1.0, 1.0e-6);\n-    assert_approx_eq!(1.000001f64, 1.0, 1.0e-5);\n-}"}, {"sha": "d89b81370f7b8a2ef3ed0ff064faeff0dd00e4fd", "filename": "src/test/run-pass/const-binops.rs", "status": "modified", "additions": 100, "deletions": 80, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-binops.rs?ref=ceea85a148ec3426edfc00b8353a19c1d2df5dbf", "patch": "@@ -1,116 +1,136 @@\n-static a: int = -4 + 3;\n-static a2: uint = 3 + 3;\n-static b: f64 = 3.0 + 2.7;\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n \n-static c: int = 3 - 4;\n-static d: uint = 3 - 3;\n-static e: f64 = 3.0 - 2.7;\n+#[feature(macro_rules)];\n \n-static e2: int = -3 * 3;\n-static f: uint = 3 * 3;\n-static g: f64 = 3.3 * 3.3;\n+macro_rules! assert_approx_eq(\n+    ($a:expr, $b:expr) => ({\n+        let (a, b) = (&$a, &$b);\n+        assert!((*a - *b).abs() < 1.0e-6,\n+                \"{} is not approximately equal to {}\", *a, *b);\n+    })\n+)\n \n-static h: int = 3 / -1;\n-static i: uint = 3 / 3;\n-static j: f64 = 3.3 / 3.3;\n+static A: int = -4 + 3;\n+static A2: uint = 3 + 3;\n+static B: f64 = 3.0 + 2.7;\n \n-static n: bool = true && false;\n+static C: int = 3 - 4;\n+static D: uint = 3 - 3;\n+static E: f64 = 3.0 - 2.7;\n \n-static o: bool = true || false;\n+static E2: int = -3 * 3;\n+static F: uint = 3 * 3;\n+static G: f64 = 3.3 * 3.3;\n \n-static p: int = 3 & 1;\n-static q: uint = 1 & 3;\n+static H: int = 3 / -1;\n+static I: uint = 3 / 3;\n+static J: f64 = 3.3 / 3.3;\n \n-static r: int = 3 | 1;\n-static s: uint = 1 | 3;\n+static N: bool = true && false;\n \n-static t: int = 3 ^ 1;\n-static u: uint = 1 ^ 3;\n+static O: bool = true || false;\n \n-static v: int = 1 << 3;\n+static P: int = 3 & 1;\n+static Q: uint = 1 & 3;\n+\n+static R: int = 3 | 1;\n+static S: uint = 1 | 3;\n+\n+static T: int = 3 ^ 1;\n+static U: uint = 1 ^ 3;\n+\n+static V: int = 1 << 3;\n \n // NOTE: better shr coverage\n-static w: int = 1024 >> 4;\n-static x: uint = 1024 >> 4;\n+static W: int = 1024 >> 4;\n+static X: uint = 1024 >> 4;\n \n-static y: bool = 1 == 1;\n-static z: bool = 1.0 == 1.0;\n+static Y: bool = 1 == 1;\n+static Z: bool = 1.0 == 1.0;\n \n-static aa: bool = 1 <= 2;\n-static ab: bool = -1 <= 2;\n-static ac: bool = 1.0 <= 2.0;\n+static AA: bool = 1 <= 2;\n+static AB: bool = -1 <= 2;\n+static AC: bool = 1.0 <= 2.0;\n \n-static ad: bool = 1 < 2;\n-static ae: bool = -1 < 2;\n-static af: bool = 1.0 < 2.0;\n+static AD: bool = 1 < 2;\n+static AE: bool = -1 < 2;\n+static AF: bool = 1.0 < 2.0;\n \n-static ag: bool = 1 != 2;\n-static ah: bool = -1 != 2;\n-static ai: bool = 1.0 != 2.0;\n+static AG: bool = 1 != 2;\n+static AH: bool = -1 != 2;\n+static AI: bool = 1.0 != 2.0;\n \n-static aj: bool = 2 >= 1;\n-static ak: bool = 2 >= -2;\n-static al: bool = 1.0 >= -2.0;\n+static AJ: bool = 2 >= 1;\n+static AK: bool = 2 >= -2;\n+static AL: bool = 1.0 >= -2.0;\n \n-static am: bool = 2 > 1;\n-static an: bool = 2 > -2;\n-static ao: bool = 1.0 > -2.0;\n+static AM: bool = 2 > 1;\n+static AN: bool = 2 > -2;\n+static AO: bool = 1.0 > -2.0;\n \n pub fn main() {\n-    assert_eq!(a, -1);\n-    assert_eq!(a2, 6);\n-    assert_approx_eq!(b, 5.7);\n+    assert_eq!(A, -1);\n+    assert_eq!(A2, 6);\n+    assert_approx_eq!(B, 5.7);\n \n-    assert_eq!(c, -1);\n-    assert_eq!(d, 0);\n-    assert_approx_eq!(e, 0.3);\n+    assert_eq!(C, -1);\n+    assert_eq!(D, 0);\n+    assert_approx_eq!(E, 0.3);\n \n-    assert_eq!(e2, -9);\n-    assert_eq!(f, 9);\n-    assert_approx_eq!(g, 10.89);\n+    assert_eq!(E2, -9);\n+    assert_eq!(F, 9);\n+    assert_approx_eq!(G, 10.89);\n \n-    assert_eq!(h, -3);\n-    assert_eq!(i, 1);\n-    assert_approx_eq!(j, 1.0);\n+    assert_eq!(H, -3);\n+    assert_eq!(I, 1);\n+    assert_approx_eq!(J, 1.0);\n \n-    assert_eq!(n, false);\n+    assert_eq!(N, false);\n \n-    assert_eq!(o, true);\n+    assert_eq!(O, true);\n \n-    assert_eq!(p, 1);\n-    assert_eq!(q, 1);\n+    assert_eq!(P, 1);\n+    assert_eq!(Q, 1);\n \n-    assert_eq!(r, 3);\n-    assert_eq!(s, 3);\n+    assert_eq!(R, 3);\n+    assert_eq!(S, 3);\n \n-    assert_eq!(t, 2);\n-    assert_eq!(u, 2);\n+    assert_eq!(T, 2);\n+    assert_eq!(U, 2);\n \n-    assert_eq!(v, 8);\n+    assert_eq!(V, 8);\n \n-    assert_eq!(w, 64);\n-    assert_eq!(x, 64);\n+    assert_eq!(W, 64);\n+    assert_eq!(X, 64);\n \n-    assert_eq!(y, true);\n-    assert_eq!(z, true);\n+    assert_eq!(Y, true);\n+    assert_eq!(Z, true);\n \n-    assert_eq!(aa, true);\n-    assert_eq!(ab, true);\n-    assert_eq!(ac, true);\n+    assert_eq!(AA, true);\n+    assert_eq!(AB, true);\n+    assert_eq!(AC, true);\n \n-    assert_eq!(ad, true);\n-    assert_eq!(ae, true);\n-    assert_eq!(af, true);\n+    assert_eq!(AD, true);\n+    assert_eq!(AE, true);\n+    assert_eq!(AF, true);\n \n-    assert_eq!(ag, true);\n-    assert_eq!(ah, true);\n-    assert_eq!(ai, true);\n+    assert_eq!(AG, true);\n+    assert_eq!(AH, true);\n+    assert_eq!(AI, true);\n \n-    assert_eq!(aj, true);\n-    assert_eq!(ak, true);\n-    assert_eq!(al, true);\n+    assert_eq!(AJ, true);\n+    assert_eq!(AK, true);\n+    assert_eq!(AL, true);\n \n-    assert_eq!(am, true);\n-    assert_eq!(an, true);\n-    assert_eq!(ao, true);\n+    assert_eq!(AM, true);\n+    assert_eq!(AN, true);\n+    assert_eq!(AO, true);\n }"}, {"sha": "c661d25804dbe1e829545e94ea7336911a930424", "filename": "src/test/run-pass/intrinsics-math.rs", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs?ref=ceea85a148ec3426edfc00b8353a19c1d2df5dbf", "patch": "@@ -10,7 +10,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(globs)];\n+#[feature(globs, macro_rules)];\n+\n+macro_rules! assert_approx_eq(\n+    ($a:expr, $b:expr) => ({\n+        let (a, b) = (&$a, &$b);\n+        assert!((*a - *b).abs() < 1.0e-6,\n+                \"{} is not approximately equal to {}\", *a, *b);\n+    })\n+)\n \n mod rusti {\n     extern \"rust-intrinsic\" {\n@@ -54,44 +62,44 @@ pub fn main() {\n         use std::f32;\n         use std::f64;\n \n-        assert!((sqrtf32(64f32).approx_eq(&8f32)));\n-        assert!((sqrtf64(64f64).approx_eq(&8f64)));\n+        assert_approx_eq!(sqrtf32(64f32), 8f32);\n+        assert_approx_eq!(sqrtf64(64f64), 8f64);\n \n-        assert!((powif32(25f32, -2i32).approx_eq(&0.0016f32)));\n-        assert!((powif64(23.2f64, 2i32).approx_eq(&538.24f64)));\n+        assert_approx_eq!(powif32(25f32, -2i32), 0.0016f32);\n+        assert_approx_eq!(powif64(23.2f64, 2i32), 538.24f64);\n \n-        assert!((sinf32(0f32).approx_eq(&0f32)));\n-        assert!((sinf64(f64::consts::PI / 2f64).approx_eq(&1f64)));\n+        assert_approx_eq!(sinf32(0f32), 0f32);\n+        assert_approx_eq!(sinf64(f64::consts::PI / 2f64), 1f64);\n \n-        assert!((cosf32(0f32).approx_eq(&1f32)));\n-        assert!((cosf64(f64::consts::PI * 2f64).approx_eq(&1f64)));\n+        assert_approx_eq!(cosf32(0f32), 1f32);\n+        assert_approx_eq!(cosf64(f64::consts::PI * 2f64), 1f64);\n \n-        assert!((powf32(25f32, -2f32).approx_eq(&0.0016f32)));\n-        assert!((powf64(400f64, 0.5f64).approx_eq(&20f64)));\n+        assert_approx_eq!(powf32(25f32, -2f32), 0.0016f32);\n+        assert_approx_eq!(powf64(400f64, 0.5f64), 20f64);\n \n-        assert!((fabsf32(expf32(1f32) - f32::consts::E).approx_eq(&0f32)));\n-        assert!((expf64(1f64).approx_eq(&f64::consts::E)));\n+        assert_approx_eq!(fabsf32(expf32(1f32) - f32::consts::E), 0f32);\n+        assert_approx_eq!(expf64(1f64), f64::consts::E);\n \n-        assert!((exp2f32(10f32).approx_eq(&1024f32)));\n-        assert!((exp2f64(50f64).approx_eq(&1125899906842624f64)));\n+        assert_approx_eq!(exp2f32(10f32), 1024f32);\n+        assert_approx_eq!(exp2f64(50f64), 1125899906842624f64);\n \n-        assert!((fabsf32(logf32(f32::consts::E) - 1f32).approx_eq(&0f32)));\n-        assert!((logf64(1f64).approx_eq(&0f64)));\n+        assert_approx_eq!(fabsf32(logf32(f32::consts::E) - 1f32), 0f32);\n+        assert_approx_eq!(logf64(1f64), 0f64);\n \n-        assert!((log10f32(10f32).approx_eq(&1f32)));\n-        assert!((log10f64(f64::consts::E).approx_eq(&f64::consts::LOG10_E)));\n+        assert_approx_eq!(log10f32(10f32), 1f32);\n+        assert_approx_eq!(log10f64(f64::consts::E), f64::consts::LOG10_E);\n \n-        assert!((log2f32(8f32).approx_eq(&3f32)));\n-        assert!((log2f64(f64::consts::E).approx_eq(&f64::consts::LOG2_E)));\n+        assert_approx_eq!(log2f32(8f32), 3f32);\n+        assert_approx_eq!(log2f64(f64::consts::E), f64::consts::LOG2_E);\n \n-        assert!((fmaf32(1.0f32, 2.0f32, 5.0f32).approx_eq(&7.0f32)));\n-        assert!((fmaf64(0.0f64, -2.0f64, f64::consts::E).approx_eq(&f64::consts::E)));\n+        assert_approx_eq!(fmaf32(1.0f32, 2.0f32, 5.0f32), 7.0f32);\n+        assert_approx_eq!(fmaf64(0.0f64, -2.0f64, f64::consts::E), f64::consts::E);\n \n-        assert!((fabsf32(-1.0f32).approx_eq(&1.0f32)));\n-        assert!((fabsf64(34.2f64).approx_eq(&34.2f64)));\n+        assert_approx_eq!(fabsf32(-1.0f32), 1.0f32);\n+        assert_approx_eq!(fabsf64(34.2f64), 34.2f64);\n \n-        assert!((floorf32(3.8f32).approx_eq(&3.0f32)));\n-        assert!((floorf64(-1.1f64).approx_eq(&-2.0f64)));\n+        assert_approx_eq!(floorf32(3.8f32), 3.0f32);\n+        assert_approx_eq!(floorf64(-1.1f64), -2.0f64);\n \n         // Causes linker error\n         // undefined reference to llvm.ceil.f32/64"}, {"sha": "d3d3ca4265da5799afb2ca69d46752786a076158", "filename": "src/test/run-pass/trait-inheritance-num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs?ref=ceea85a148ec3426edfc00b8353a19c1d2df5dbf", "patch": "@@ -17,7 +17,7 @@ use std::num::NumCast;\n \n pub trait NumExt: Num + NumCast + Eq + Ord {}\n \n-pub trait FloatExt: NumExt + ApproxEq<Self> {}\n+pub trait FloatExt: NumExt {}\n \n fn greater_than_one<T:NumExt>(n: &T) -> bool { *n > NumCast::from(1).unwrap() }\n fn greater_than_one_float<T:FloatExt>(n: &T) -> bool { *n > NumCast::from(1).unwrap() }"}, {"sha": "eab359dc8495fd9e36d983aa08b44152c866b3e9", "filename": "src/test/run-pass/trait-inheritance-num2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceea85a148ec3426edfc00b8353a19c1d2df5dbf/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs?ref=ceea85a148ec3426edfc00b8353a19c1d2df5dbf", "patch": "@@ -89,7 +89,7 @@ impl IntegerExt for i64 {}\n impl IntegerExt for int {}\n \n \n-pub trait FloatExt: NumExt + ApproxEq<Self> {}\n+pub trait FloatExt: NumExt {}\n \n impl FloatExt for f32 {}\n impl FloatExt for f64 {}"}]}