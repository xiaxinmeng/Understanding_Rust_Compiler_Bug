{"sha": "9e0852705eb74ab5b840715d47226c707808735c", "node_id": "C_kwDOAAsO6NoAKDllMDg1MjcwNWViNzRhYjViODQwNzE1ZDQ3MjI2YzcwNzgwODczNWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-06T15:15:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-06T15:15:26Z"}, "message": "Auto merge of #8066 - rust-lang:needless_bool_parenthesize, r=camsteffen\n\nParenthesize blocks in `needless_bool` suggestion\n\nBecause the `if .. {}` statement already puts the condition in expression scope, contained blocks would be parsed as complete\nstatements, so any `&` binary expression whose left operand ended in a block would lead to a non-compiling suggestion.\n\nWe identify such expressions and add parentheses. Note that we don't make a difference between normal and unsafe blocks because the parsing problems are the same for both.\n\nThis fixes #8052.\n\n---\n\nchangelog: none", "tree": {"sha": "2af331f1117837d4c56e175874caecb46b7f5611", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2af331f1117837d4c56e175874caecb46b7f5611"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e0852705eb74ab5b840715d47226c707808735c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e0852705eb74ab5b840715d47226c707808735c", "html_url": "https://github.com/rust-lang/rust/commit/9e0852705eb74ab5b840715d47226c707808735c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e0852705eb74ab5b840715d47226c707808735c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5d597637dcb78dc73f93561ce474f23d4177c35", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5d597637dcb78dc73f93561ce474f23d4177c35", "html_url": "https://github.com/rust-lang/rust/commit/a5d597637dcb78dc73f93561ce474f23d4177c35"}, {"sha": "4a39707795862c8732aee0de07a075f5dc4e5036", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a39707795862c8732aee0de07a075f5dc4e5036", "html_url": "https://github.com/rust-lang/rust/commit/4a39707795862c8732aee0de07a075f5dc4e5036"}], "stats": {"total": 118, "additions": 106, "deletions": 12}, "files": [{"sha": "e7809436252720f8b5aee52e8f1898054f6a499b", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9e0852705eb74ab5b840715d47226c707808735c/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0852705eb74ab5b840715d47226c707808735c/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=9e0852705eb74ab5b840715d47226c707808735c", "patch": "@@ -6,10 +6,10 @@ use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n use clippy_utils::higher;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::sugg::Sugg;\n-use clippy_utils::{is_else_clause, is_expn_of};\n+use clippy_utils::{get_parent_node, is_else_clause, is_expn_of};\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Block, Expr, ExprKind, StmtKind, UnOp};\n+use rustc_hir::{BinOpKind, Block, Expr, ExprKind, HirId, Node, StmtKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n@@ -74,6 +74,36 @@ declare_clippy_lint! {\n \n declare_lint_pass!(NeedlessBool => [NEEDLESS_BOOL]);\n \n+fn condition_needs_parentheses(e: &Expr<'_>) -> bool {\n+    let mut inner = e;\n+    while let ExprKind::Binary(_, i, _)\n+    | ExprKind::Call(i, _)\n+    | ExprKind::Cast(i, _)\n+    | ExprKind::Type(i, _)\n+    | ExprKind::Index(i, _) = inner.kind\n+    {\n+        if matches!(\n+            i.kind,\n+            ExprKind::Block(..)\n+                | ExprKind::ConstBlock(..)\n+                | ExprKind::If(..)\n+                | ExprKind::Loop(..)\n+                | ExprKind::Match(..)\n+        ) {\n+            return true;\n+        }\n+        inner = i;\n+    }\n+    false\n+}\n+\n+fn is_parent_stmt(cx: &LateContext<'_>, id: HirId) -> bool {\n+    matches!(\n+        get_parent_node(cx.tcx, id),\n+        Some(Node::Stmt(..) | Node::Block(Block { stmts: &[], .. }))\n+    )\n+}\n+\n impl<'tcx> LateLintPass<'tcx> for NeedlessBool {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         use self::Expression::{Bool, RetBool};\n@@ -99,6 +129,10 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBool {\n                     snip = snip.blockify();\n                 }\n \n+                if condition_needs_parentheses(cond) && is_parent_stmt(cx, e.hir_id) {\n+                    snip = snip.maybe_par();\n+                }\n+\n                 span_lint_and_sugg(\n                     cx,\n                     NEEDLESS_BOOL,"}, {"sha": "85da1f4e10437cb6a3669e47b3dc3a35f5494913", "filename": "tests/ui/needless_bool/fixable.fixed", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9e0852705eb74ab5b840715d47226c707808735c/tests%2Fui%2Fneedless_bool%2Ffixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9e0852705eb74ab5b840715d47226c707808735c/tests%2Fui%2Fneedless_bool%2Ffixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool%2Ffixable.fixed?ref=9e0852705eb74ab5b840715d47226c707808735c", "patch": "@@ -53,6 +53,7 @@ fn main() {\n     needless_bool(x);\n     needless_bool2(x);\n     needless_bool3(x);\n+    needless_bool_condition();\n }\n \n fn bool_ret3(x: bool) -> bool {\n@@ -98,3 +99,19 @@ fn needless_bool_in_the_suggestion_wraps_the_predicate_of_if_else_statement_in_b\n         true\n     } else { !returns_bool() };\n }\n+\n+unsafe fn no(v: u8) -> u8 {\n+    v\n+}\n+\n+#[allow(clippy::unnecessary_operation)]\n+fn needless_bool_condition() -> bool {\n+    (unsafe { no(4) } & 1 != 0);\n+    let _brackets_unneeded = unsafe { no(4) } & 1 != 0;\n+    fn foo() -> bool {\n+        // parentheses are needed here\n+        (unsafe { no(4) } & 1 != 0)\n+    }\n+\n+    foo()\n+}"}, {"sha": "add606302511b89dea3099e5fd13848ab0835f70", "filename": "tests/ui/needless_bool/fixable.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9e0852705eb74ab5b840715d47226c707808735c/tests%2Fui%2Fneedless_bool%2Ffixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0852705eb74ab5b840715d47226c707808735c/tests%2Fui%2Fneedless_bool%2Ffixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool%2Ffixable.rs?ref=9e0852705eb74ab5b840715d47226c707808735c", "patch": "@@ -65,6 +65,7 @@ fn main() {\n     needless_bool(x);\n     needless_bool2(x);\n     needless_bool3(x);\n+    needless_bool_condition();\n }\n \n fn bool_ret3(x: bool) -> bool {\n@@ -130,3 +131,23 @@ fn needless_bool_in_the_suggestion_wraps_the_predicate_of_if_else_statement_in_b\n         true\n     };\n }\n+\n+unsafe fn no(v: u8) -> u8 {\n+    v\n+}\n+\n+#[allow(clippy::unnecessary_operation)]\n+fn needless_bool_condition() -> bool {\n+    if unsafe { no(4) } & 1 != 0 {\n+        true\n+    } else {\n+        false\n+    };\n+    let _brackets_unneeded = if unsafe { no(4) } & 1 != 0 { true } else { false };\n+    fn foo() -> bool {\n+        // parentheses are needed here\n+        if unsafe { no(4) } & 1 != 0 { true } else { false }\n+    }\n+\n+    foo()\n+}"}, {"sha": "22c0a7bb491c6d495d47a9b418348ff85a79c185", "filename": "tests/ui/needless_bool/fixable.stderr", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9e0852705eb74ab5b840715d47226c707808735c/tests%2Fui%2Fneedless_bool%2Ffixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e0852705eb74ab5b840715d47226c707808735c/tests%2Fui%2Fneedless_bool%2Ffixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool%2Ffixable.stderr?ref=9e0852705eb74ab5b840715d47226c707808735c", "patch": "@@ -31,7 +31,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `!(x && y)`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:71:5\n+  --> $DIR/fixable.rs:72:5\n    |\n LL | /     if x {\n LL | |         return true;\n@@ -41,7 +41,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:79:5\n+  --> $DIR/fixable.rs:80:5\n    |\n LL | /     if x {\n LL | |         return false;\n@@ -51,7 +51,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return !x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:87:5\n+  --> $DIR/fixable.rs:88:5\n    |\n LL | /     if x && y {\n LL | |         return true;\n@@ -61,7 +61,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return x && y`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:95:5\n+  --> $DIR/fixable.rs:96:5\n    |\n LL | /     if x && y {\n LL | |         return false;\n@@ -71,33 +71,33 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return !(x && y)`\n \n error: equality checks against true are unnecessary\n-  --> $DIR/fixable.rs:103:8\n+  --> $DIR/fixable.rs:104:8\n    |\n LL |     if x == true {};\n    |        ^^^^^^^^^ help: try simplifying it as shown: `x`\n    |\n    = note: `-D clippy::bool-comparison` implied by `-D warnings`\n \n error: equality checks against false can be replaced by a negation\n-  --> $DIR/fixable.rs:107:8\n+  --> $DIR/fixable.rs:108:8\n    |\n LL |     if x == false {};\n    |        ^^^^^^^^^^ help: try simplifying it as shown: `!x`\n \n error: equality checks against true are unnecessary\n-  --> $DIR/fixable.rs:117:8\n+  --> $DIR/fixable.rs:118:8\n    |\n LL |     if x == true {};\n    |        ^^^^^^^^^ help: try simplifying it as shown: `x`\n \n error: equality checks against false can be replaced by a negation\n-  --> $DIR/fixable.rs:118:8\n+  --> $DIR/fixable.rs:119:8\n    |\n LL |     if x == false {};\n    |        ^^^^^^^^^^ help: try simplifying it as shown: `!x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:127:12\n+  --> $DIR/fixable.rs:128:12\n    |\n LL |       } else if returns_bool() {\n    |  ____________^\n@@ -107,5 +107,27 @@ LL | |         true\n LL | |     };\n    | |_____^ help: you can reduce it to: `{ !returns_bool() }`\n \n-error: aborting due to 12 previous errors\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/fixable.rs:141:5\n+   |\n+LL | /     if unsafe { no(4) } & 1 != 0 {\n+LL | |         true\n+LL | |     } else {\n+LL | |         false\n+LL | |     };\n+   | |_____^ help: you can reduce it to: `(unsafe { no(4) } & 1 != 0)`\n+\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/fixable.rs:146:30\n+   |\n+LL |     let _brackets_unneeded = if unsafe { no(4) } & 1 != 0 { true } else { false };\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `unsafe { no(4) } & 1 != 0`\n+\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/fixable.rs:149:9\n+   |\n+LL |         if unsafe { no(4) } & 1 != 0 { true } else { false }\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `(unsafe { no(4) } & 1 != 0)`\n+\n+error: aborting due to 15 previous errors\n "}]}