{"sha": "584081af4a386e9ef2e03684f1f3f1466b3996d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NDA4MWFmNGEzODZlOWVmMmUwMzY4NGYxZjNmMTQ2NmIzOTk2ZDE=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-02-05T17:35:41Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-02-07T13:15:57Z"}, "message": "Calculate self-times not total times", "tree": {"sha": "6648cbac73980537b078e34f67dd549fa20c5804", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6648cbac73980537b078e34f67dd549fa20c5804"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/584081af4a386e9ef2e03684f1f3f1466b3996d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/584081af4a386e9ef2e03684f1f3f1466b3996d1", "html_url": "https://github.com/rust-lang/rust/commit/584081af4a386e9ef2e03684f1f3f1466b3996d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/584081af4a386e9ef2e03684f1f3f1466b3996d1/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a568e7e47b400d34ba598784f0367064d8e7f317", "url": "https://api.github.com/repos/rust-lang/rust/commits/a568e7e47b400d34ba598784f0367064d8e7f317", "html_url": "https://github.com/rust-lang/rust/commit/a568e7e47b400d34ba598784f0367064d8e7f317"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "f8fa01b6395008beb0abc4748f7ba6e7e8fa1d47", "filename": "src/librustc/util/profiling.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/584081af4a386e9ef2e03684f1f3f1466b3996d1/src%2Flibrustc%2Futil%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584081af4a386e9ef2e03684f1f3f1466b3996d1/src%2Flibrustc%2Futil%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fprofiling.rs?ref=584081af4a386e9ef2e03684f1f3f1466b3996d1", "patch": "@@ -243,50 +243,61 @@ impl SelfProfiler {\n \n         let mut results = CalculatedResults::new();\n \n+        //(event, child time to subtract)\n         let mut query_stack = Vec::new();\n \n         for event in events {\n             match event {\n                 QueryStart { .. } | GenericActivityStart { .. } => {\n-                    query_stack.push(event);\n+                    query_stack.push((event, 0));\n                 },\n                 QueryEnd { query_name, category, time: end_time } => {\n                     let previous_query = query_stack.pop();\n-                    if let Some(QueryStart {\n+                    if let Some((QueryStart {\n                                     query_name: p_query_name,\n                                     time: start_time,\n-                                    category: _ }) = previous_query {\n+                                    category: _ }, child_time_to_subtract)) = previous_query {\n                         assert_eq!(\n                             p_query_name,\n                             query_name,\n                             \"Saw a query end but the previous query wasn't the corresponding start\"\n                         );\n \n                         let time_ns = time_between_ns(*start_time, *end_time);\n+                        let self_time_ns = time_ns - child_time_to_subtract;\n                         let result_data = results.categories.entry(*category).or_default();\n \n-                        *result_data.query_times.entry(query_name).or_default() += time_ns;\n+                        *result_data.query_times.entry(query_name).or_default() += self_time_ns;\n+\n+                        if let Some((_, child_time_to_subtract)) = query_stack.last_mut() {\n+                            *child_time_to_subtract += time_ns;\n+                        }\n                     } else {\n                         bug!(\"Saw a query end but the previous event wasn't a query start\");\n                     }\n                 }\n                 GenericActivityEnd { category, time: end_time } => {\n                     let previous_event = query_stack.pop();\n-                    if let Some(GenericActivityStart {\n+                    if let Some((GenericActivityStart {\n                                     category: previous_category,\n-                                    time: start_time }) = previous_event {\n+                                    time: start_time }, child_time_to_subtract)) = previous_event {\n                         assert_eq!(\n                             previous_category,\n                             category,\n                             \"Saw an end but the previous event wasn't the corresponding start\"\n                         );\n \n                         let time_ns = time_between_ns(*start_time, *end_time);\n+                        let self_time_ns = time_ns - child_time_to_subtract;\n                         let result_data = results.categories.entry(*category).or_default();\n \n                         *result_data.query_times\n                             .entry(\"{time spent not running queries}\")\n-                            .or_default() += time_ns;\n+                            .or_default() += self_time_ns;\n+\n+                        if let Some((_, child_time_to_subtract)) = query_stack.last_mut() {\n+                            *child_time_to_subtract += time_ns;\n+                        }\n                     } else {\n                         bug!(\"Saw an activity end but the previous event wasn't an activity start\");\n                     }"}]}