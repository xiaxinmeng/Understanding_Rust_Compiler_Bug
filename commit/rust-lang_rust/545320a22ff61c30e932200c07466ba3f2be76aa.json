{"sha": "545320a22ff61c30e932200c07466ba3f2be76aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NTMyMGEyMmZmNjFjMzBlOTMyMjAwYzA3NDY2YmEzZjJiZTc2YWE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-22T23:03:39Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-12T18:19:07Z"}, "message": "Suggest adding super trait constraints", "tree": {"sha": "9cf4304599aa09e7ec7c054e3c875c90c474c0da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cf4304599aa09e7ec7c054e3c875c90c474c0da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/545320a22ff61c30e932200c07466ba3f2be76aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/545320a22ff61c30e932200c07466ba3f2be76aa", "html_url": "https://github.com/rust-lang/rust/commit/545320a22ff61c30e932200c07466ba3f2be76aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/545320a22ff61c30e932200c07466ba3f2be76aa/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d903a9def4c29846ec6215ccc7fa76d39428f577", "url": "https://api.github.com/repos/rust-lang/rust/commits/d903a9def4c29846ec6215ccc7fa76d39428f577", "html_url": "https://github.com/rust-lang/rust/commit/d903a9def4c29846ec6215ccc7fa76d39428f577"}], "stats": {"total": 109, "additions": 96, "deletions": 13}, "files": [{"sha": "5abae7ed68b9988df6f43da86d989d2e45678f59", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 41, "deletions": 4, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/545320a22ff61c30e932200c07466ba3f2be76aa/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545320a22ff61c30e932200c07466ba3f2be76aa/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=545320a22ff61c30e932200c07466ba3f2be76aa", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::{\n     self, suggest_constraining_type_param, AdtKind, DefIdTree, Infer, InferTy, ToPredicate, Ty,\n     TyCtxt, TypeFoldable, WithConstness,\n };\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use std::fmt;\n \n@@ -173,6 +173,7 @@ fn suggest_restriction(\n     fn_sig: Option<&hir::FnSig<'_>>,\n     projection: Option<&ty::ProjectionTy<'_>>,\n     trait_ref: ty::PolyTraitRef<'_>,\n+    super_traits: Option<(&Ident, &hir::GenericBounds<'_>)>,\n ) {\n     let span = generics.where_clause.span_for_predicates_or_empty_place();\n     if span.from_expansion() || span.desugaring_kind().is_some() {\n@@ -262,8 +263,22 @@ fn suggest_restriction(\n         );\n     } else {\n         // Trivial case: `T` needs an extra bound: `T: Bound`.\n-        let (sp, sugg) =\n-            predicate_constraint(generics, trait_ref.without_const().to_predicate().to_string());\n+        let (sp, sugg) = match super_traits {\n+            None => {\n+                predicate_constraint(generics, trait_ref.without_const().to_predicate().to_string())\n+            }\n+            Some((ident, bounds)) => match bounds {\n+                [.., bound] => (\n+                    bound.span().shrink_to_hi(),\n+                    format!(\" + {}\", trait_ref.print_only_trait_path().to_string()),\n+                ),\n+                [] => (\n+                    ident.span.shrink_to_hi(),\n+                    format!(\": {}\", trait_ref.print_only_trait_path().to_string()),\n+                ),\n+            },\n+        };\n+\n         let appl = Applicability::MachineApplicable;\n         err.span_suggestion(sp, &format!(\"consider further restricting {}\", msg), sugg, appl);\n     }\n@@ -288,13 +303,33 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let mut hir_id = body_id;\n         while let Some(node) = self.tcx.hir().find(hir_id) {\n             match node {\n+                hir::Node::Item(hir::Item {\n+                    ident,\n+                    kind: hir::ItemKind::Trait(_, _, generics, bounds, _),\n+                    ..\n+                }) if param_ty && self_ty == self.tcx.types.self_param => {\n+                    // Restricting `Self` for a single method.\n+                    suggest_restriction(\n+                        &generics,\n+                        \"`Self`\",\n+                        err,\n+                        None,\n+                        projection,\n+                        trait_ref,\n+                        Some((ident, bounds)),\n+                    );\n+                    return;\n+                }\n+\n                 hir::Node::TraitItem(hir::TraitItem {\n                     generics,\n                     kind: hir::TraitItemKind::Fn(..),\n                     ..\n                 }) if param_ty && self_ty == self.tcx.types.self_param => {\n                     // Restricting `Self` for a single method.\n-                    suggest_restriction(&generics, \"`Self`\", err, None, projection, trait_ref);\n+                    suggest_restriction(\n+                        &generics, \"`Self`\", err, None, projection, trait_ref, None,\n+                    );\n                     return;\n                 }\n \n@@ -319,6 +354,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         Some(fn_sig),\n                         projection,\n                         trait_ref,\n+                        None,\n                     );\n                     return;\n                 }\n@@ -336,6 +372,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         None,\n                         projection,\n                         trait_ref,\n+                        None,\n                     );\n                     return;\n                 }"}, {"sha": "c804bc3d833fa6382257b3e530febece8b1a04a0", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/545320a22ff61c30e932200c07466ba3f2be76aa/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/545320a22ff61c30e932200c07466ba3f2be76aa/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr?ref=545320a22ff61c30e932200c07466ba3f2be76aa", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `Self: std::marker::Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:21:18\n    |\n LL | trait UncheckedCopy: Sized {\n-   | -------------------------- required by `UncheckedCopy`\n+   | --------------------------- help: consider further restricting `Self`: `+ std::marker::Copy`\n+   | |\n+   | required by `UncheckedCopy`\n ...\n LL |     type Output: Copy\n    |                  ^^^^ the trait `std::marker::Copy` is not implemented for `Self`\n@@ -11,7 +13,9 @@ error[E0277]: cannot add-assign `&'static str` to `Self`\n   --> $DIR/defaults-unsound-62211-1.rs:25:7\n    |\n LL | trait UncheckedCopy: Sized {\n-   | -------------------------- required by `UncheckedCopy`\n+   | --------------------------- help: consider further restricting `Self`: `+ std::ops::AddAssign<&'static str>`\n+   | |\n+   | required by `UncheckedCopy`\n ...\n LL |     + AddAssign<&'static str>\n    |       ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n@@ -22,7 +26,9 @@ error[E0277]: the trait bound `Self: std::ops::Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:23:7\n    |\n LL | trait UncheckedCopy: Sized {\n-   | -------------------------- required by `UncheckedCopy`\n+   | --------------------------- help: consider further restricting `Self`: `+ std::ops::Deref`\n+   | |\n+   | required by `UncheckedCopy`\n ...\n LL |     + Deref<Target = str>\n    |       ^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `Self`\n@@ -31,7 +37,9 @@ error[E0277]: `Self` doesn't implement `std::fmt::Display`\n   --> $DIR/defaults-unsound-62211-1.rs:28:7\n    |\n LL | trait UncheckedCopy: Sized {\n-   | -------------------------- required by `UncheckedCopy`\n+   | --------------------------- help: consider further restricting `Self`: `+ std::fmt::Display`\n+   | |\n+   | required by `UncheckedCopy`\n ...\n LL |     + Display = Self;\n    |       ^^^^^^^ `Self` cannot be formatted with the default formatter"}, {"sha": "aee5e4b28ca6d15b6ac4c1ec4aa3c4ddf3c72159", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/545320a22ff61c30e932200c07466ba3f2be76aa/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/545320a22ff61c30e932200c07466ba3f2be76aa/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr?ref=545320a22ff61c30e932200c07466ba3f2be76aa", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `Self: std::marker::Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:21:18\n    |\n LL | trait UncheckedCopy: Sized {\n-   | -------------------------- required by `UncheckedCopy`\n+   | --------------------------- help: consider further restricting `Self`: `+ std::marker::Copy`\n+   | |\n+   | required by `UncheckedCopy`\n ...\n LL |     type Output: Copy\n    |                  ^^^^ the trait `std::marker::Copy` is not implemented for `Self`\n@@ -11,7 +13,9 @@ error[E0277]: cannot add-assign `&'static str` to `Self`\n   --> $DIR/defaults-unsound-62211-2.rs:25:7\n    |\n LL | trait UncheckedCopy: Sized {\n-   | -------------------------- required by `UncheckedCopy`\n+   | --------------------------- help: consider further restricting `Self`: `+ std::ops::AddAssign<&'static str>`\n+   | |\n+   | required by `UncheckedCopy`\n ...\n LL |     + AddAssign<&'static str>\n    |       ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n@@ -22,7 +26,9 @@ error[E0277]: the trait bound `Self: std::ops::Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:23:7\n    |\n LL | trait UncheckedCopy: Sized {\n-   | -------------------------- required by `UncheckedCopy`\n+   | --------------------------- help: consider further restricting `Self`: `+ std::ops::Deref`\n+   | |\n+   | required by `UncheckedCopy`\n ...\n LL |     + Deref<Target = str>\n    |       ^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `Self`\n@@ -31,7 +37,9 @@ error[E0277]: `Self` doesn't implement `std::fmt::Display`\n   --> $DIR/defaults-unsound-62211-2.rs:28:7\n    |\n LL | trait UncheckedCopy: Sized {\n-   | -------------------------- required by `UncheckedCopy`\n+   | --------------------------- help: consider further restricting `Self`: `+ std::fmt::Display`\n+   | |\n+   | required by `UncheckedCopy`\n ...\n LL |     + Display = Self;\n    |       ^^^^^^^ `Self` cannot be formatted with the default formatter"}, {"sha": "42529fd2b220e887616788e1d3f83e9aa8fef6c3", "filename": "src/test/ui/associated-types/issue-63593.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/545320a22ff61c30e932200c07466ba3f2be76aa/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/545320a22ff61c30e932200c07466ba3f2be76aa/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr?ref=545320a22ff61c30e932200c07466ba3f2be76aa", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n   --> $DIR/issue-63593.rs:9:5\n    |\n LL | trait MyTrait {\n-   | ------------- required by `MyTrait`\n+   | -------------- help: consider further restricting `Self`: `: std::marker::Sized`\n+   | |\n+   | required by `MyTrait`\n LL |     type This = Self;\n    |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |"}, {"sha": "0474bf0a33944f0a5fa1ae294eaa6490c3900262", "filename": "src/test/ui/associated-types/trait-with-supertraits-needing-sized-self.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/545320a22ff61c30e932200c07466ba3f2be76aa/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545320a22ff61c30e932200c07466ba3f2be76aa/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.rs?ref=545320a22ff61c30e932200c07466ba3f2be76aa", "patch": "@@ -0,0 +1,11 @@\n+use std::ops::{Add, Sub, Mul, Div};\n+\n+trait ArithmeticOps: Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self> + Div<Output=Self> {}\n+//~^ ERROR the size for values of type `Self` cannot be known at compilation time\n+\n+impl<T> ArithmeticOps for T where T: Add<Output=T> + Sub<Output=T> + Mul<Output=T> + Div<Output=T> {\n+    // Nothing to implement, since T already supports the other traits.\n+    // It has the functions it needs already\n+}\n+\n+fn main() {}"}, {"sha": "707bcf5e2feb76a577ee516ecafa716a63cdf7f1", "filename": "src/test/ui/associated-types/trait-with-supertraits-needing-sized-self.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/545320a22ff61c30e932200c07466ba3f2be76aa/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/545320a22ff61c30e932200c07466ba3f2be76aa/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr?ref=545320a22ff61c30e932200c07466ba3f2be76aa", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the size for values of type `Self` cannot be known at compilation time\n+  --> $DIR/trait-with-supertraits-needing-sized-self.rs:3:22\n+   |\n+LL | trait ArithmeticOps: Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self> + Div<Output=Self> {}\n+   |                      ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time               - help: consider further restricting `Self`: `+ std::marker::Sized`\n+   | \n+  ::: $SRC_DIR/libcore/ops/arith.rs:LL:COL\n+   |\n+LL | pub trait Add<Rhs = Self> {\n+   |               --- required by this bound in `std::ops::Add`\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `Self`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}