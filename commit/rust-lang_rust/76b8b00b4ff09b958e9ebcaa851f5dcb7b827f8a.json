{"sha": "76b8b00b4ff09b958e9ebcaa851f5dcb7b827f8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2YjhiMDBiNGZmMDliOTU4ZTllYmNhYTg1MWY1ZGNiN2I4MjdmOGE=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-31T08:49:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-31T08:49:28Z"}, "message": "Rollup merge of #74622 - fusion-engineering-forks:panic-box, r=KodrAus\n\nAdd std::panic::panic_any.\n\nThe discussion of #67984 lead to the conclusion that there should be a macro or function separate from `std::panic!()` for throwing arbitrary payloads, to make it possible to deprecate or disallow (in edition 2021) `std::panic!(arbitrary_payload)`.\n\nAlternative names:\n\n- `panic_with!(..)`\n- ~~`start_unwind(..)`~~ (panicking doesn't always unwind)\n- `throw!(..)`\n- `panic_throwing!(..)`\n- `panic_with_value(..)`\n- `panic_value(..)`\n- `panic_with(..)`\n- `panic_box(..)`\n- `panic(..)`\n\nThe equivalent (private, unstable) function in `libstd` is called `std::panicking::begin_panic`.\n\nI suggest `panic_any`, because it allows for any (`Any + Send`) type.\n\n_Tracking issue: #78500_", "tree": {"sha": "8c0a906e51338ebc3c57322d0a1869eefbd80497", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c0a906e51338ebc3c57322d0a1869eefbd80497"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76b8b00b4ff09b958e9ebcaa851f5dcb7b827f8a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfnSUZCRBK7hj4Ov3rIwAAdHIIAABRmFO3hsYh+X0k2TG8XYfo\nLeBN00eKzAYt4V4bUjO2qddDHmJKCQVTaQykZqIq2dt15pvsqtR+SiOlBoYdJHw+\n7TNczAuzeuCnGfhOZYfCSRI8NagpPcjXPbqHWBSb9Gr1kj9blHcKAEuJw6tboigl\nxcV08fevkwb9YFrdD97KMAjw1v9MT86Fuit5ST+XCmFk8ZBjjlEbQRCavov8uqvn\n0uwpklrlBdhDHid3yXnnTuEBO2161jZg5E5lZiapN6Q+Inz6RIpLRCGcL2Jtv2rS\nHxgLdR+oA0HClxjwTC4GSSKc0S2euOIiDWXeQdbvpZXET4JfXd2QSciEeUK8+CQ=\n=BXLh\n-----END PGP SIGNATURE-----\n", "payload": "tree 8c0a906e51338ebc3c57322d0a1869eefbd80497\nparent 3478d7c3607ffbba629af2265c01002771e48c18\nparent b48fee010c92dde304154ba45c0e41d396e60568\nauthor Mara Bos <m-ou.se@m-ou.se> 1604134168 +0100\ncommitter GitHub <noreply@github.com> 1604134168 +0100\n\nRollup merge of #74622 - fusion-engineering-forks:panic-box, r=KodrAus\n\nAdd std::panic::panic_any.\n\nThe discussion of #67984 lead to the conclusion that there should be a macro or function separate from `std::panic!()` for throwing arbitrary payloads, to make it possible to deprecate or disallow (in edition 2021) `std::panic!(arbitrary_payload)`.\n\nAlternative names:\n\n- `panic_with!(..)`\n- ~~`start_unwind(..)`~~ (panicking doesn't always unwind)\n- `throw!(..)`\n- `panic_throwing!(..)`\n- `panic_with_value(..)`\n- `panic_value(..)`\n- `panic_with(..)`\n- `panic_box(..)`\n- `panic(..)`\n\nThe equivalent (private, unstable) function in `libstd` is called `std::panicking::begin_panic`.\n\nI suggest `panic_any`, because it allows for any (`Any + Send`) type.\n\n_Tracking issue: #78500_\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76b8b00b4ff09b958e9ebcaa851f5dcb7b827f8a", "html_url": "https://github.com/rust-lang/rust/commit/76b8b00b4ff09b958e9ebcaa851f5dcb7b827f8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76b8b00b4ff09b958e9ebcaa851f5dcb7b827f8a/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3478d7c3607ffbba629af2265c01002771e48c18", "url": "https://api.github.com/repos/rust-lang/rust/commits/3478d7c3607ffbba629af2265c01002771e48c18", "html_url": "https://github.com/rust-lang/rust/commit/3478d7c3607ffbba629af2265c01002771e48c18"}, {"sha": "b48fee010c92dde304154ba45c0e41d396e60568", "url": "https://api.github.com/repos/rust-lang/rust/commits/b48fee010c92dde304154ba45c0e41d396e60568", "html_url": "https://github.com/rust-lang/rust/commit/b48fee010c92dde304154ba45c0e41d396e60568"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "d18b94b6c1aefc284e54433053c3209f4da5afd5", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76b8b00b4ff09b958e9ebcaa851f5dcb7b827f8a/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b8b00b4ff09b958e9ebcaa851f5dcb7b827f8a/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=76b8b00b4ff09b958e9ebcaa851f5dcb7b827f8a", "patch": "@@ -23,6 +23,20 @@ pub use crate::panicking::{set_hook, take_hook};\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n pub use core::panic::{Location, PanicInfo};\n \n+/// Panic the current thread with the given message as the panic payload.\n+///\n+/// The message can be of any (`Any + Send`) type, not just strings.\n+///\n+/// The message is wrapped in a `Box<'static + Any + Send>`, which can be\n+/// accessed later using [`PanicInfo::payload`].\n+///\n+/// See the [`panic!`] macro for more information about panicking.\n+#[unstable(feature = \"panic_any\", issue = \"78500\")]\n+#[inline]\n+pub fn panic_any<M: Any + Send>(msg: M) -> ! {\n+    crate::panicking::begin_panic(msg);\n+}\n+\n /// A marker trait which represents \"panic safe\" types in Rust.\n ///\n /// This trait is implemented by default for many types and behaves similarly in"}]}