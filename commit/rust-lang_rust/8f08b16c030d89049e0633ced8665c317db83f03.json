{"sha": "8f08b16c030d89049e0633ced8665c317db83f03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMDhiMTZjMDMwZDg5MDQ5ZTA2MzNjZWQ4NjY1YzMxN2RiODNmMDM=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-05-09T12:49:04Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-05-17T16:38:23Z"}, "message": "Small allocation improvement", "tree": {"sha": "3685a1144fc0bbcc213da66b02930177dcbaf72b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3685a1144fc0bbcc213da66b02930177dcbaf72b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f08b16c030d89049e0633ced8665c317db83f03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f08b16c030d89049e0633ced8665c317db83f03", "html_url": "https://github.com/rust-lang/rust/commit/8f08b16c030d89049e0633ced8665c317db83f03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f08b16c030d89049e0633ced8665c317db83f03/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59fa40a5a03e882427cb6bf527846c44afd80172", "url": "https://api.github.com/repos/rust-lang/rust/commits/59fa40a5a03e882427cb6bf527846c44afd80172", "html_url": "https://github.com/rust-lang/rust/commit/59fa40a5a03e882427cb6bf527846c44afd80172"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "c2dbe303be99fe18c9579d0acbdd722f080639f3", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8f08b16c030d89049e0633ced8665c317db83f03/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f08b16c030d89049e0633ced8665c317db83f03/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=8f08b16c030d89049e0633ced8665c317db83f03", "patch": "@@ -990,8 +990,8 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n \n     /// Construct a new `Fields` from the given patterns. You must be sure those patterns can't\n     /// contain fields that need to be filtered out. When in doubt, prefer `replace_fields`.\n-    fn from_vec_unfiltered(pats: SmallVec<[&'p Pat<'tcx>; 2]>) -> Self {\n-        Fields::Vec(pats)\n+    fn from_slice_unfiltered(pats: &'p [Pat<'tcx>]) -> Self {\n+        Fields::Slice(pats)\n     }\n \n     /// Convenience; internal use.\n@@ -2537,20 +2537,23 @@ fn specialize_one_pattern<'p, 'tcx>(\n             if ctor_wild_subpatterns.len() as u64 != n {\n                 return None;\n             }\n+\n             // Convert a constant slice/array pattern to a list of patterns.\n             let layout = cx.tcx.layout_of(cx.param_env.and(ty)).ok()?;\n             let ptr = Pointer::new(AllocId(0), offset);\n-            let pats = (0..n)\n-                .map(|i| {\n-                    let ptr = ptr.offset(layout.size * i, &cx.tcx).ok()?;\n-                    let scalar = alloc.read_scalar(&cx.tcx, ptr, layout.size).ok()?;\n-                    let scalar = scalar.not_undef().ok()?;\n-                    let value = ty::Const::from_scalar(cx.tcx, scalar, ty);\n-                    let pattern = Pat { ty, span: pat.span, kind: box PatKind::Constant { value } };\n-                    Some(&*cx.pattern_arena.alloc(pattern))\n-                })\n-                .collect::<Option<_>>()?;\n-            Some(Fields::from_vec_unfiltered(pats))\n+            let pats = cx.pattern_arena.alloc_from_iter((0..n).filter_map(|i| {\n+                let ptr = ptr.offset(layout.size * i, &cx.tcx).ok()?;\n+                let scalar = alloc.read_scalar(&cx.tcx, ptr, layout.size).ok()?;\n+                let scalar = scalar.not_undef().ok()?;\n+                let value = ty::Const::from_scalar(cx.tcx, scalar, ty);\n+                let pattern = Pat { ty, span: pat.span, kind: box PatKind::Constant { value } };\n+                Some(pattern)\n+            }));\n+            // Ensure none of the dereferences failed.\n+            if pats.len() as u64 != n {\n+                return None;\n+            }\n+            Some(Fields::from_slice_unfiltered(pats))\n         }\n \n         PatKind::Constant { .. } | PatKind::Range { .. } => {"}]}