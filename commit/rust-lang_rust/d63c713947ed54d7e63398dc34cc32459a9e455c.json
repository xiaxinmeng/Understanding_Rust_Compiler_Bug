{"sha": "d63c713947ed54d7e63398dc34cc32459a9e455c", "node_id": "C_kwDOAAsO6NoAKGQ2M2M3MTM5NDdlZDU0ZDdlNjMzOThkYzM0Y2MzMjQ1OWE5ZTQ1NWM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-07T12:36:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-07T12:36:49Z"}, "message": "Rollup merge of #97711 - Nilstrieb:rustc-arena-ub, r=wesleywiser\n\nImprove soundness of rustc_arena\n\nMake it runnable in miri by changing the loop iteration count for some tests in miri. Also fix a stacked borrows issue with box.", "tree": {"sha": "b5f505fc1b728481cf0770e86cf41e0aa578a173", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5f505fc1b728481cf0770e86cf41e0aa578a173"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d63c713947ed54d7e63398dc34cc32459a9e455c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJixtNhCRBK7hj4Ov3rIwAAZ48IADXr3UAtGmGoXSZIcI9sUnk4\nkjRjJ2UuiCY7e1YTjpG7a/ZR4gn9CMb9CC12fxdWWvpcfhKHIpuHZB2tEby0U/zC\nobYl4jiuK2rucKHEx+XjbR6Kbopg6Bg7NiaHHbQixUCml6hDWJLSD9QOjWFgG7Tu\n6H/A3DLeHt9BqYoLTttG7cYmr6y3aUxUsAUlPTq5koh3LTyg72A50DXv7MII78XO\nsMl88EAUhbMacbB3cE3MUL4jOVQSR8yLaNI47VbkPR0Wik0qr9GZUf2SjfnhMjIj\nCsSKfth5fwtM81bJl0cOqof00Ma/O4WcLB3JnoGdpxPJnUE7fXN6HJfv5iRm9oI=\n=Te07\n-----END PGP SIGNATURE-----\n", "payload": "tree b5f505fc1b728481cf0770e86cf41e0aa578a173\nparent f6bbe280bf8e446f747fc9108c7f3ff11708026c\nparent 211fb66810c978576201bb2054f1ccea0e176f10\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657197409 +0530\ncommitter GitHub <noreply@github.com> 1657197409 +0530\n\nRollup merge of #97711 - Nilstrieb:rustc-arena-ub, r=wesleywiser\n\nImprove soundness of rustc_arena\n\nMake it runnable in miri by changing the loop iteration count for some tests in miri. Also fix a stacked borrows issue with box.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d63c713947ed54d7e63398dc34cc32459a9e455c", "html_url": "https://github.com/rust-lang/rust/commit/d63c713947ed54d7e63398dc34cc32459a9e455c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d63c713947ed54d7e63398dc34cc32459a9e455c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6bbe280bf8e446f747fc9108c7f3ff11708026c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6bbe280bf8e446f747fc9108c7f3ff11708026c", "html_url": "https://github.com/rust-lang/rust/commit/f6bbe280bf8e446f747fc9108c7f3ff11708026c"}, {"sha": "211fb66810c978576201bb2054f1ccea0e176f10", "url": "https://api.github.com/repos/rust-lang/rust/commits/211fb66810c978576201bb2054f1ccea0e176f10", "html_url": "https://github.com/rust-lang/rust/commit/211fb66810c978576201bb2054f1ccea0e176f10"}], "stats": {"total": 51, "additions": 39, "deletions": 12}, "files": [{"sha": "a5f1cbc96daa7ea19a1151f27924eb067290b32e", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d63c713947ed54d7e63398dc34cc32459a9e455c/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d63c713947ed54d7e63398dc34cc32459a9e455c/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=d63c713947ed54d7e63398dc34cc32459a9e455c", "patch": "@@ -19,6 +19,7 @@\n #![feature(rustc_attrs)]\n #![cfg_attr(test, feature(test))]\n #![feature(strict_provenance)]\n+#![feature(ptr_const_cast)]\n \n use smallvec::SmallVec;\n \n@@ -27,7 +28,7 @@ use std::cell::{Cell, RefCell};\n use std::cmp;\n use std::marker::{PhantomData, Send};\n use std::mem::{self, MaybeUninit};\n-use std::ptr;\n+use std::ptr::{self, NonNull};\n use std::slice;\n \n #[inline(never)]\n@@ -55,15 +56,24 @@ pub struct TypedArena<T> {\n \n struct ArenaChunk<T = u8> {\n     /// The raw storage for the arena chunk.\n-    storage: Box<[MaybeUninit<T>]>,\n+    storage: NonNull<[MaybeUninit<T>]>,\n     /// The number of valid entries in the chunk.\n     entries: usize,\n }\n \n+unsafe impl<#[may_dangle] T> Drop for ArenaChunk<T> {\n+    fn drop(&mut self) {\n+        unsafe { Box::from_raw(self.storage.as_mut()) };\n+    }\n+}\n+\n impl<T> ArenaChunk<T> {\n     #[inline]\n     unsafe fn new(capacity: usize) -> ArenaChunk<T> {\n-        ArenaChunk { storage: Box::new_uninit_slice(capacity), entries: 0 }\n+        ArenaChunk {\n+            storage: NonNull::new(Box::into_raw(Box::new_uninit_slice(capacity))).unwrap(),\n+            entries: 0,\n+        }\n     }\n \n     /// Destroys this arena chunk.\n@@ -72,14 +82,15 @@ impl<T> ArenaChunk<T> {\n         // The branch on needs_drop() is an -O1 performance optimization.\n         // Without the branch, dropping TypedArena<u8> takes linear time.\n         if mem::needs_drop::<T>() {\n-            ptr::drop_in_place(MaybeUninit::slice_assume_init_mut(&mut self.storage[..len]));\n+            let slice = &mut *(self.storage.as_mut());\n+            ptr::drop_in_place(MaybeUninit::slice_assume_init_mut(&mut slice[..len]));\n         }\n     }\n \n     // Returns a pointer to the first allocated object.\n     #[inline]\n     fn start(&mut self) -> *mut T {\n-        MaybeUninit::slice_as_mut_ptr(&mut self.storage)\n+        self.storage.as_ptr() as *mut T\n     }\n \n     // Returns a pointer to the end of the allocated space.\n@@ -90,7 +101,7 @@ impl<T> ArenaChunk<T> {\n                 // A pointer as large as possible for zero-sized elements.\n                 ptr::invalid_mut(!0)\n             } else {\n-                self.start().add(self.storage.len())\n+                self.start().add((*self.storage.as_ptr()).len())\n             }\n         }\n     }\n@@ -274,7 +285,7 @@ impl<T> TypedArena<T> {\n                 // If the previous chunk's len is less than HUGE_PAGE\n                 // bytes, then this chunk will be least double the previous\n                 // chunk's size.\n-                new_cap = last_chunk.storage.len().min(HUGE_PAGE / elem_size / 2);\n+                new_cap = (*last_chunk.storage.as_ptr()).len().min(HUGE_PAGE / elem_size / 2);\n                 new_cap *= 2;\n             } else {\n                 new_cap = PAGE / elem_size;\n@@ -382,7 +393,7 @@ impl DroplessArena {\n                 // If the previous chunk's len is less than HUGE_PAGE\n                 // bytes, then this chunk will be least double the previous\n                 // chunk's size.\n-                new_cap = last_chunk.storage.len().min(HUGE_PAGE / 2);\n+                new_cap = (*last_chunk.storage.as_ptr()).len().min(HUGE_PAGE / 2);\n                 new_cap *= 2;\n             } else {\n                 new_cap = PAGE;"}, {"sha": "ad61464343a4a852194420160d717d19e1c6b8ac", "filename": "compiler/rustc_arena/src/tests.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d63c713947ed54d7e63398dc34cc32459a9e455c/compiler%2Frustc_arena%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d63c713947ed54d7e63398dc34cc32459a9e455c/compiler%2Frustc_arena%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Ftests.rs?ref=d63c713947ed54d7e63398dc34cc32459a9e455c", "patch": "@@ -79,7 +79,11 @@ fn test_arena_alloc_nested() {\n #[test]\n pub fn test_copy() {\n     let arena = TypedArena::default();\n-    for _ in 0..100000 {\n+    #[cfg(not(miri))]\n+    const N: usize = 100000;\n+    #[cfg(miri)]\n+    const N: usize = 1000;\n+    for _ in 0..N {\n         arena.alloc(Point { x: 1, y: 2, z: 3 });\n     }\n }\n@@ -106,15 +110,23 @@ struct Noncopy {\n #[test]\n pub fn test_noncopy() {\n     let arena = TypedArena::default();\n-    for _ in 0..100000 {\n+    #[cfg(not(miri))]\n+    const N: usize = 100000;\n+    #[cfg(miri)]\n+    const N: usize = 1000;\n+    for _ in 0..N {\n         arena.alloc(Noncopy { string: \"hello world\".to_string(), array: vec![1, 2, 3, 4, 5] });\n     }\n }\n \n #[test]\n pub fn test_typed_arena_zero_sized() {\n     let arena = TypedArena::default();\n-    for _ in 0..100000 {\n+    #[cfg(not(miri))]\n+    const N: usize = 100000;\n+    #[cfg(miri)]\n+    const N: usize = 1000;\n+    for _ in 0..N {\n         arena.alloc(());\n     }\n }\n@@ -124,7 +136,11 @@ pub fn test_typed_arena_clear() {\n     let mut arena = TypedArena::default();\n     for _ in 0..10 {\n         arena.clear();\n-        for _ in 0..10000 {\n+        #[cfg(not(miri))]\n+        const N: usize = 10000;\n+        #[cfg(miri)]\n+        const N: usize = 100;\n+        for _ in 0..N {\n             arena.alloc(Point { x: 1, y: 2, z: 3 });\n         }\n     }"}]}