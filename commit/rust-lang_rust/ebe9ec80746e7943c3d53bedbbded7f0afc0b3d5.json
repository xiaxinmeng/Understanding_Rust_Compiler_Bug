{"sha": "ebe9ec80746e7943c3d53bedbbded7f0afc0b3d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZTllYzgwNzQ2ZTc5NDNjM2Q1M2JlZGJiZGVkN2YwYWZjMGIzZDU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-19T17:01:01Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-19T17:01:01Z"}, "message": "rollup merge of #17379 : pcwalton/keywords-followed-by-double-colon", "tree": {"sha": "3cd298493383272119c1fc9e6a7ecbc38b88d80f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cd298493383272119c1fc9e6a7ecbc38b88d80f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebe9ec80746e7943c3d53bedbbded7f0afc0b3d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebe9ec80746e7943c3d53bedbbded7f0afc0b3d5", "html_url": "https://github.com/rust-lang/rust/commit/ebe9ec80746e7943c3d53bedbbded7f0afc0b3d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebe9ec80746e7943c3d53bedbbded7f0afc0b3d5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e18c0634ebc2d47a4acf217f7ad3a8b9c9306fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e18c0634ebc2d47a4acf217f7ad3a8b9c9306fc", "html_url": "https://github.com/rust-lang/rust/commit/0e18c0634ebc2d47a4acf217f7ad3a8b9c9306fc"}, {"sha": "5aa264a14fbc386c2cbb1d8f7dc0f0d7c7f1a773", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aa264a14fbc386c2cbb1d8f7dc0f0d7c7f1a773", "html_url": "https://github.com/rust-lang/rust/commit/5aa264a14fbc386c2cbb1d8f7dc0f0d7c7f1a773"}], "stats": {"total": 98, "additions": 63, "deletions": 35}, "files": [{"sha": "f71190da4301172d4a909389374e004adbad0b07", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 48, "deletions": 35, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/ebe9ec80746e7943c3d53bedbbded7f0afc0b3d5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe9ec80746e7943c3d53bedbbded7f0afc0b3d5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=ebe9ec80746e7943c3d53bedbbded7f0afc0b3d5", "patch": "@@ -431,9 +431,11 @@ macro_rules! declare_special_idents_and_keywords {(\n // If the special idents get renumbered, remember to modify these two as appropriate\n pub static SELF_KEYWORD_NAME: Name = Name(SELF_KEYWORD_NAME_NUM);\n static STATIC_KEYWORD_NAME: Name = Name(STATIC_KEYWORD_NAME_NUM);\n+static SUPER_KEYWORD_NAME: Name = Name(SUPER_KEYWORD_NAME_NUM);\n \n pub static SELF_KEYWORD_NAME_NUM: u32 = 1;\n static STATIC_KEYWORD_NAME_NUM: u32 = 2;\n+static SUPER_KEYWORD_NAME_NUM: u32 = 3;\n \n // NB: leaving holes in the ident table is bad! a different ident will get\n // interned with the id from the hole, but it will be between the min and max\n@@ -443,52 +445,53 @@ declare_special_idents_and_keywords! {\n     pub mod special_idents {\n         // These ones are statics\n         (0,                          invalid,                \"\");\n-        (super::SELF_KEYWORD_NAME_NUM,   self_,                  \"self\");\n-        (super::STATIC_KEYWORD_NAME_NUM, statik,                 \"static\");\n-        (3,                          static_lifetime,        \"'static\");\n+        (super::SELF_KEYWORD_NAME_NUM,   self_,              \"self\");\n+        (super::STATIC_KEYWORD_NAME_NUM, statik,             \"static\");\n+        (super::SUPER_KEYWORD_NAME_NUM, super_,              \"super\");\n+        (4,                          static_lifetime,        \"'static\");\n \n         // for matcher NTs\n-        (4,                          tt,                     \"tt\");\n-        (5,                          matchers,               \"matchers\");\n+        (5,                          tt,                     \"tt\");\n+        (6,                          matchers,               \"matchers\");\n \n         // outside of libsyntax\n-        (6,                          clownshoe_abi,          \"__rust_abi\");\n-        (7,                          opaque,                 \"<opaque>\");\n-        (8,                          unnamed_field,          \"<unnamed_field>\");\n-        (9,                          type_self,              \"Self\");\n-        (10,                         prelude_import,         \"prelude_import\");\n+        (7,                          clownshoe_abi,          \"__rust_abi\");\n+        (8,                          opaque,                 \"<opaque>\");\n+        (9,                          unnamed_field,          \"<unnamed_field>\");\n+        (10,                         type_self,              \"Self\");\n+        (11,                         prelude_import,         \"prelude_import\");\n     }\n \n     pub mod keywords {\n         // These ones are variants of the Keyword enum\n \n         'strict:\n-        (11,                         As,         \"as\");\n-        (12,                         Break,      \"break\");\n-        (13,                         Crate,      \"crate\");\n-        (14,                         Else,       \"else\");\n-        (15,                         Enum,       \"enum\");\n-        (16,                         Extern,     \"extern\");\n-        (17,                         False,      \"false\");\n-        (18,                         Fn,         \"fn\");\n-        (19,                         For,        \"for\");\n-        (20,                         If,         \"if\");\n-        (21,                         Impl,       \"impl\");\n-        (22,                         In,         \"in\");\n-        (23,                         Let,        \"let\");\n-        (24,                         Loop,       \"loop\");\n-        (25,                         Match,      \"match\");\n-        (26,                         Mod,        \"mod\");\n-        (27,                         Mut,        \"mut\");\n-        (28,                         Once,       \"once\");\n-        (29,                         Pub,        \"pub\");\n-        (30,                         Ref,        \"ref\");\n-        (31,                         Return,     \"return\");\n+        (12,                         As,         \"as\");\n+        (13,                         Break,      \"break\");\n+        (14,                         Crate,      \"crate\");\n+        (15,                         Else,       \"else\");\n+        (16,                         Enum,       \"enum\");\n+        (17,                         Extern,     \"extern\");\n+        (18,                         False,      \"false\");\n+        (19,                         Fn,         \"fn\");\n+        (20,                         For,        \"for\");\n+        (21,                         If,         \"if\");\n+        (22,                         Impl,       \"impl\");\n+        (23,                         In,         \"in\");\n+        (24,                         Let,        \"let\");\n+        (25,                         Loop,       \"loop\");\n+        (26,                         Match,      \"match\");\n+        (27,                         Mod,        \"mod\");\n+        (28,                         Mut,        \"mut\");\n+        (29,                         Once,       \"once\");\n+        (30,                         Pub,        \"pub\");\n+        (31,                         Ref,        \"ref\");\n+        (32,                         Return,     \"return\");\n         // Static and Self are also special idents (prefill de-dupes)\n-        (super::STATIC_KEYWORD_NAME_NUM, Static,     \"static\");\n-        (super::SELF_KEYWORD_NAME_NUM,   Self,       \"self\");\n-        (32,                         Struct,     \"struct\");\n-        (33,                         Super,      \"super\");\n+        (super::STATIC_KEYWORD_NAME_NUM, Static, \"static\");\n+        (super::SELF_KEYWORD_NAME_NUM,   Self,   \"self\");\n+        (33,                         Struct,     \"struct\");\n+        (super::SUPER_KEYWORD_NAME_NUM, Super,   \"super\");\n         (34,                         True,       \"true\");\n         (35,                         Trait,      \"trait\");\n         (36,                         Type,       \"type\");\n@@ -713,6 +716,7 @@ pub fn is_any_keyword(tok: &Token) -> bool {\n \n                n == SELF_KEYWORD_NAME\n             || n == STATIC_KEYWORD_NAME\n+            || n == SUPER_KEYWORD_NAME\n             || STRICT_KEYWORD_START <= n\n             && n <= RESERVED_KEYWORD_FINAL\n         },\n@@ -727,9 +731,18 @@ pub fn is_strict_keyword(tok: &Token) -> bool {\n \n                n == SELF_KEYWORD_NAME\n             || n == STATIC_KEYWORD_NAME\n+            || n == SUPER_KEYWORD_NAME\n             || STRICT_KEYWORD_START <= n\n             && n <= STRICT_KEYWORD_FINAL\n         },\n+        token::IDENT(sid, true) => {\n+            let n = sid.name;\n+\n+               n != SELF_KEYWORD_NAME\n+            && n != SUPER_KEYWORD_NAME\n+            && STRICT_KEYWORD_START <= n\n+            && n <= STRICT_KEYWORD_FINAL\n+        }\n         _ => false,\n     }\n }"}, {"sha": "f69b041597edfcf153eca1888cdce13cf1d1ef31", "filename": "src/test/compile-fail/keywords-followed-by-double-colon.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ebe9ec80746e7943c3d53bedbbded7f0afc0b3d5/src%2Ftest%2Fcompile-fail%2Fkeywords-followed-by-double-colon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe9ec80746e7943c3d53bedbbded7f0afc0b3d5/src%2Ftest%2Fcompile-fail%2Fkeywords-followed-by-double-colon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkeywords-followed-by-double-colon.rs?ref=ebe9ec80746e7943c3d53bedbbded7f0afc0b3d5", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    struct::foo();  //~ ERROR expected identifier\n+    mut::baz(); //~ ERROR expected identifier\n+}\n+"}]}