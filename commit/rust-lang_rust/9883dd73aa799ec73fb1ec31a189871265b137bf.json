{"sha": "9883dd73aa799ec73fb1ec31a189871265b137bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ODNkZDczYWE3OTllYzczZmIxZWMzMWExODk4NzEyNjViMTM3YmY=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-09-03T12:31:57Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-09-03T16:37:54Z"}, "message": "A few cleanups and minor improvements to save_analysis", "tree": {"sha": "f6159a15765351f7b309289d83e2719d80251a5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6159a15765351f7b309289d83e2719d80251a5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9883dd73aa799ec73fb1ec31a189871265b137bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9883dd73aa799ec73fb1ec31a189871265b137bf", "html_url": "https://github.com/rust-lang/rust/commit/9883dd73aa799ec73fb1ec31a189871265b137bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9883dd73aa799ec73fb1ec31a189871265b137bf/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2687112ea6a8701cbf36e6dd4d77d64694cf93d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2687112ea6a8701cbf36e6dd4d77d64694cf93d8", "html_url": "https://github.com/rust-lang/rust/commit/2687112ea6a8701cbf36e6dd4d77d64694cf93d8"}], "stats": {"total": 39, "additions": 16, "deletions": 23}, "files": [{"sha": "d719d257f352c6a9d61cd017a2cab3a665f24183", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9883dd73aa799ec73fb1ec31a189871265b137bf/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9883dd73aa799ec73fb1ec31a189871265b137bf/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=9883dd73aa799ec73fb1ec31a189871265b137bf", "patch": "@@ -147,9 +147,9 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         let crate_root = source_file.map(|source_file| {\n             let source_file = Path::new(source_file);\n             match source_file.file_name() {\n-                Some(_) => source_file.parent().unwrap().display().to_string(),\n-                None => source_file.display().to_string(),\n-            }\n+                Some(_) => source_file.parent().unwrap().display(),\n+                None => source_file.display(),\n+            }.to_string()\n         });\n \n         let data = CratePreludeData {\n@@ -176,8 +176,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         let segments = &path.segments[if path.is_global() { 1 } else { 0 }..];\n \n         let mut result = Vec::with_capacity(segments.len());\n+        let mut segs = Vec::with_capacity(segments.len());\n \n-        let mut segs = vec![];\n         for (i, seg) in segments.iter().enumerate() {\n             segs.push(seg.clone());\n             let sub_path = ast::Path {\n@@ -591,9 +591,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n         for variant in &enum_definition.variants {\n             let name = variant.node.ident.name.to_string();\n-            let mut qualname = enum_data.qualname.clone();\n-            qualname.push_str(\"::\");\n-            qualname.push_str(&name);\n+            let qualname = format!(\"{}::{}\", enum_data.qualname, name);\n \n             match variant.node.data {\n                 ast::VariantData::Struct(ref fields, _) => {\n@@ -973,9 +971,9 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             match self.save_ctxt.get_path_def(id) {\n                 HirDef::Local(id) => {\n                     let mut value = if immut == ast::Mutability::Immutable {\n-                        self.span.snippet(ident.span).to_string()\n+                        self.span.snippet(ident.span)\n                     } else {\n-                        \"<mutable>\".to_string()\n+                        \"<mutable>\".to_owned()\n                     };\n                     let hir_id = self.tcx.hir.node_to_hir_id(id);\n                     let typ = self.save_ctxt\n@@ -1103,10 +1101,9 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n     /// mac_uses and mac_defs sets to prevent multiples.\n     fn process_macro_use(&mut self, span: Span) {\n         let source_span = span.source_callsite();\n-        if self.macro_calls.contains(&source_span) {\n+        if !self.macro_calls.insert(source_span) {\n             return;\n         }\n-        self.macro_calls.insert(source_span);\n \n         let data = match self.save_ctxt.get_macro_use_data(span) {\n             None => return,\n@@ -1608,8 +1605,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                 }\n             }\n             ast::ExprKind::Closure(_, _, _, ref decl, ref body, _fn_decl_span) => {\n-                let mut id = String::from(\"$\");\n-                id.push_str(&ex.id.to_string());\n+                let id = format!(\"${}\", ex.id);\n \n                 // walk arg and return types\n                 for arg in &decl.inputs {"}, {"sha": "48e4d93e07b36f82fb06aba96834cdd0f82ba3e6", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9883dd73aa799ec73fb1ec31a189871265b137bf/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9883dd73aa799ec73fb1ec31a189871265b137bf/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=9883dd73aa799ec73fb1ec31a189871265b137bf", "patch": "@@ -101,7 +101,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         let end = cm.lookup_char_pos(span.hi());\n \n         SpanData {\n-            file_name: start.file.name.clone().to_string().into(),\n+            file_name: start.file.name.to_string().into(),\n             byte_start: span.lo().0,\n             byte_end: span.hi().0,\n             line_start: Row::new_one_indexed(start.line as u32),\n@@ -113,7 +113,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n \n     // List external crates used by the current crate.\n     pub fn get_external_crates(&self) -> Vec<ExternalCrateData> {\n-        let mut result = Vec::new();\n+        let mut result = Vec::with_capacity(self.tcx.crates().len());\n \n         for &n in self.tcx.crates().iter() {\n             let span = match *self.tcx.extern_crate(n.as_def_id()) {\n@@ -321,7 +321,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     decl_id: None,\n                     docs: self.docs_for_attrs(&item.attrs),\n                     sig: sig::item_signature(item, self),\n-                    attributes: lower_attributes(item.attrs.to_owned(), self),\n+                    attributes: lower_attributes(item.attrs.clone(), self),\n                 }))\n             }\n             ast::ItemKind::Impl(.., ref trait_ref, ref typ, ref impls) => {"}, {"sha": "9cf64a9d1ca81ba1b6f583e0f3263ed66d102ac4", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9883dd73aa799ec73fb1ec31a189871265b137bf/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9883dd73aa799ec73fb1ec31a189871265b137bf/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=9883dd73aa799ec73fb1ec31a189871265b137bf", "patch": "@@ -435,7 +435,7 @@ impl Sig for ast::Item {\n                     },\n                 ];\n                 text.push_str(&name);\n-                // Could be either `mod foo;` or `mod foo { ... }`, but we'll just puck one.\n+                // Could be either `mod foo;` or `mod foo { ... }`, but we'll just pick one.\n                 text.push(';');\n \n                 Ok(Signature {\n@@ -630,7 +630,7 @@ impl Sig for ast::Generics {\n \n         let mut text = \"<\".to_owned();\n \n-        let mut defs = vec![];\n+        let mut defs = Vec::with_capacity(self.params.len());\n         for param in &self.params {\n             let mut param_text = param.ident.to_string();\n             defs.push(SigElement {"}, {"sha": "2550a312c5d6de6d13856b0fc111a6fb63f51aa5", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9883dd73aa799ec73fb1ec31a189871265b137bf/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9883dd73aa799ec73fb1ec31a189871265b137bf/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=9883dd73aa799ec73fb1ec31a189871265b137bf", "patch": "@@ -263,11 +263,8 @@ impl<'a> SpanUtils<'a> {\n     /// such as references to macro internal variables.\n     pub fn filter_generated(&self, sub_span: Option<Span>, parent: Span) -> bool {\n         if !generated_code(parent) {\n-            if sub_span.is_none() {\n-                // Edge case - this occurs on generated code with incorrect expansion info.\n-                return true;\n-            }\n-            return false;\n+            // Edge case - this occurs on generated code with incorrect expansion info.\n+            return sub_span.is_none()\n         }\n         // If sub_span is none, filter out generated code.\n         let sub_span = match sub_span {"}]}