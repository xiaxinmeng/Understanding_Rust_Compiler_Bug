{"sha": "5a9b33a76d76a77d2ced1c2430a25faa0f284071", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhOWIzM2E3NmQ3NmE3N2QyY2VkMWMyNDMwYTI1ZmFhMGYyODQwNzE=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-02T21:47:38Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-20T09:08:55Z"}, "message": "Add Option::take_map{,_default}()", "tree": {"sha": "1281dae50a170e014973c8f6578c4a636988b01e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1281dae50a170e014973c8f6578c4a636988b01e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a9b33a76d76a77d2ced1c2430a25faa0f284071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a9b33a76d76a77d2ced1c2430a25faa0f284071", "html_url": "https://github.com/rust-lang/rust/commit/5a9b33a76d76a77d2ced1c2430a25faa0f284071", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a9b33a76d76a77d2ced1c2430a25faa0f284071/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96c1082f0fdbbe5258cfc1dc37f83052feff8421", "url": "https://api.github.com/repos/rust-lang/rust/commits/96c1082f0fdbbe5258cfc1dc37f83052feff8421", "html_url": "https://github.com/rust-lang/rust/commit/96c1082f0fdbbe5258cfc1dc37f83052feff8421"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "6f6f18ab85d336569542b3291bd3f2baa59e9bf4", "filename": "src/libstd/option.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5a9b33a76d76a77d2ced1c2430a25faa0f284071/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a9b33a76d76a77d2ced1c2430a25faa0f284071/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=5a9b33a76d76a77d2ced1c2430a25faa0f284071", "patch": "@@ -200,6 +200,20 @@ impl<T> Option<T> {\n         match self { None => def, Some(v) => f(v) }\n     }\n \n+    /// As `map_consume`, but swaps a None into the original option rather\n+    /// than consuming it by-value.\n+    #[inline]\n+    pub fn take_map<U>(&mut self, blk: &fn(T) -> U) -> Option<U> {\n+        util::replace(self, None).map_consume(blk)\n+    }\n+\n+    /// As `map_consume_default`, but swaps a None into the original option\n+    /// rather than consuming it by-value.\n+    #[inline]\n+    pub fn take_map_default<U> (&mut self, def: U, blk: &fn(T) -> U) -> U {\n+        util::replace(self, None).map_consume_default(def, blk)\n+    }\n+\n     /// Apply a function to the contained value or do nothing\n     pub fn mutate(&mut self, f: &fn(T) -> T) {\n         if self.is_some() {"}]}