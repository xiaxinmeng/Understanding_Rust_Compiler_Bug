{"sha": "b2b50635172254777d16d0fc6112e6d5b68b63f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYjUwNjM1MTcyMjU0Nzc3ZDE2ZDBmYzYxMTJlNmQ1YjY4YjYzZjI=", "commit": {"author": {"name": "Tobias Schaffner", "email": "tschaff@genua.de", "date": "2017-09-09T09:09:34Z"}, "committer": {"name": "Sebastian Humenda", "email": "shumenda@gmx.de", "date": "2017-09-13T08:56:41Z"}, "message": "Move default stack min size to thread implementations\n\nThe default min stack size value is smaller on l4re and therefore\nthis value has to be different depending on the platform.", "tree": {"sha": "37e3b004a9dd7ab32ba846aab3ae738962e09259", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37e3b004a9dd7ab32ba846aab3ae738962e09259"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2b50635172254777d16d0fc6112e6d5b68b63f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b50635172254777d16d0fc6112e6d5b68b63f2", "html_url": "https://github.com/rust-lang/rust/commit/b2b50635172254777d16d0fc6112e6d5b68b63f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2b50635172254777d16d0fc6112e6d5b68b63f2/comments", "author": null, "committer": {"login": "humenda", "id": 4473821, "node_id": "MDQ6VXNlcjQ0NzM4MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4473821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/humenda", "html_url": "https://github.com/humenda", "followers_url": "https://api.github.com/users/humenda/followers", "following_url": "https://api.github.com/users/humenda/following{/other_user}", "gists_url": "https://api.github.com/users/humenda/gists{/gist_id}", "starred_url": "https://api.github.com/users/humenda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/humenda/subscriptions", "organizations_url": "https://api.github.com/users/humenda/orgs", "repos_url": "https://api.github.com/users/humenda/repos", "events_url": "https://api.github.com/users/humenda/events{/privacy}", "received_events_url": "https://api.github.com/users/humenda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d1a9d7ae761cb7fd88b37bab0d55f59379462ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d1a9d7ae761cb7fd88b37bab0d55f59379462ef", "html_url": "https://github.com/rust-lang/rust/commit/5d1a9d7ae761cb7fd88b37bab0d55f59379462ef"}], "stats": {"total": 56, "additions": 31, "deletions": 25}, "files": [{"sha": "c4aad8d86f8b1f5e4b6fba452c4eb64e9476cf6d", "filename": "src/libstd/sys/redox/thread.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b50635172254777d16d0fc6112e6d5b68b63f2/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b50635172254777d16d0fc6112e6d5b68b63f2/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs?ref=b2b50635172254777d16d0fc6112e6d5b68b63f2", "patch": "@@ -16,6 +16,8 @@ use sys_common::thread::start_thread;\n use sys::{cvt, syscall};\n use time::Duration;\n \n+pub const DEFAULT_MIN_STACK_SIZE: usize = 2 * 1024 * 1024;\n+\n pub struct Thread {\n     id: usize,\n }"}, {"sha": "21218489679393a92a655bf0012caa5ad242f962", "filename": "src/libstd/sys/unix/l4re.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2b50635172254777d16d0fc6112e6d5b68b63f2/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b50635172254777d16d0fc6112e6d5b68b63f2/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs?ref=b2b50635172254777d16d0fc6112e6d5b68b63f2", "patch": "@@ -104,11 +104,11 @@ pub mod net {\n     impl AsInner<libc::c_int> for Socket {\n         fn as_inner(&self) -> &libc::c_int { self.0.as_inner() }\n     }\n-    \n+\n     impl FromInner<libc::c_int> for Socket {\n         fn from_inner(fd: libc::c_int) -> Socket { Socket(FileDesc::new(fd)) }\n     }\n-    \n+\n     impl IntoInner<libc::c_int> for Socket {\n         fn into_inner(self) -> libc::c_int { self.0.into_raw() }\n     }"}, {"sha": "6c4a332429646be75c156884d409d8c090c7bdb3", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2b50635172254777d16d0fc6112e6d5b68b63f2/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b50635172254777d16d0fc6112e6d5b68b63f2/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=b2b50635172254777d16d0fc6112e6d5b68b63f2", "patch": "@@ -20,6 +20,11 @@ use time::Duration;\n \n use sys_common::thread::*;\n \n+#[cfg(not(target_os = \"l4re\"))]\n+pub const DEFAULT_MIN_STACK_SIZE: usize = 2 * 1024 * 1024;\n+#[cfg(target_os = \"l4re\")]\n+pub const DEFAULT_MIN_STACK_SIZE: usize = 1024 * 1024;\n+\n pub struct Thread {\n     id: libc::pthread_t,\n }"}, {"sha": "6aea9d1fb560f118379fe7d0c4c8dbd7c26ece2a", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b50635172254777d16d0fc6112e6d5b68b63f2/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b50635172254777d16d0fc6112e6d5b68b63f2/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=b2b50635172254777d16d0fc6112e6d5b68b63f2", "patch": "@@ -19,6 +19,8 @@ use sys::handle::Handle;\n use sys_common::thread::*;\n use time::Duration;\n \n+pub const DEFAULT_MIN_STACK_SIZE: usize = 2 * 1024 * 1024;\n+\n pub struct Thread {\n     handle: Handle\n }"}, {"sha": "87fb34a9dec06459f95806377a451db8bbc27648", "filename": "src/libstd/sys_common/thread.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b2b50635172254777d16d0fc6112e6d5b68b63f2/src%2Flibstd%2Fsys_common%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b50635172254777d16d0fc6112e6d5b68b63f2/src%2Flibstd%2Fsys_common%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread.rs?ref=b2b50635172254777d16d0fc6112e6d5b68b63f2", "patch": "@@ -8,9 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use env;\n use alloc::boxed::FnBox;\n use libc;\n+use sync::atomic::{self, Ordering};\n use sys::stack_overflow;\n+use sys::thread as imp;\n \n pub unsafe fn start_thread(main: *mut libc::c_void) {\n     // Next, set up our stack overflow handler which may get triggered if we run\n@@ -20,3 +23,18 @@ pub unsafe fn start_thread(main: *mut libc::c_void) {\n     // Finally, let's run some code.\n     Box::from_raw(main as *mut Box<FnBox()>)()\n }\n+\n+pub fn min_stack() -> usize {\n+    static MIN: atomic::AtomicUsize = atomic::AtomicUsize::new(0);\n+    match MIN.load(Ordering::SeqCst) {\n+        0 => {}\n+        n => return n - 1,\n+    }\n+    let amt = env::var(\"RUST_MIN_STACK\").ok().and_then(|s| s.parse().ok());\n+    let amt = amt.unwrap_or(imp::DEFAULT_MIN_STACK_SIZE);\n+\n+    // 0 is our sentinel value, so ensure that we'll never see 0 after\n+    // initialization has run\n+    MIN.store(amt + 1, Ordering::SeqCst);\n+    amt\n+}"}, {"sha": "a391c7cc6ef0c959c2e25eaf0bddf175cbb59cec", "filename": "src/libstd/sys_common/util.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b2b50635172254777d16d0fc6112e6d5b68b63f2/src%2Flibstd%2Fsys_common%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b50635172254777d16d0fc6112e6d5b68b63f2/src%2Flibstd%2Fsys_common%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Futil.rs?ref=b2b50635172254777d16d0fc6112e6d5b68b63f2", "patch": "@@ -8,32 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use env;\n use fmt;\n use io::prelude::*;\n-use sync::atomic::{self, Ordering};\n use sys::stdio::Stderr;\n use thread;\n \n-pub fn min_stack() -> usize {\n-    static MIN: atomic::AtomicUsize = atomic::AtomicUsize::new(0);\n-    match MIN.load(Ordering::SeqCst) {\n-        0 => {}\n-        n => return n - 1,\n-    }\n-    let amt = env::var(\"RUST_MIN_STACK\").ok().and_then(|s| s.parse().ok());\n-    #[cfg(not(target_os = \"l4re\"))]\n-    let amt = amt.unwrap_or(2 * 1024 * 1024);\n-    // L4Re only supports a maximum of 1Mb per default.\n-    #[cfg(target_os = \"l4re\")]\n-    let amt = amt.unwrap_or(1024 * 1024);\n-\n-    // 0 is our sentinel value, so ensure that we'll never see 0 after\n-    // initialization has run\n-    MIN.store(amt + 1, Ordering::SeqCst);\n-    amt\n-}\n-\n pub fn dumb_print(args: fmt::Arguments) {\n     let _ = Stderr::new().map(|mut stderr| stderr.write_fmt(args));\n }"}, {"sha": "ca01eaefcaef4c8ac7ebb4a7b453d3e2f4390429", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2b50635172254777d16d0fc6112e6d5b68b63f2/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b50635172254777d16d0fc6112e6d5b68b63f2/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=b2b50635172254777d16d0fc6112e6d5b68b63f2", "patch": "@@ -174,7 +174,7 @@ use sync::{Mutex, Condvar, Arc};\n use sys::thread as imp;\n use sys_common::mutex;\n use sys_common::thread_info;\n-use sys_common::util;\n+use sys_common::thread;\n use sys_common::{AsInner, IntoInner};\n use time::Duration;\n \n@@ -374,7 +374,7 @@ impl Builder {\n     {\n         let Builder { name, stack_size } = self;\n \n-        let stack_size = stack_size.unwrap_or_else(util::min_stack);\n+        let stack_size = stack_size.unwrap_or_else(thread::min_stack);\n \n         let my_thread = Thread::new(name);\n         let their_thread = my_thread.clone();"}]}