{"sha": "e569ada528f8664337f700235bc771cbfecbd432", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NjlhZGE1MjhmODY2NDMzN2Y3MDAyMzViYzc3MWNiZmVjYmQ0MzI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-01T16:48:49Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-30T10:29:30Z"}, "message": "Retire hir::ptr.", "tree": {"sha": "2a64330e5e06f73314ceb6ab80841154d6858334", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a64330e5e06f73314ceb6ab80841154d6858334"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e569ada528f8664337f700235bc771cbfecbd432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e569ada528f8664337f700235bc771cbfecbd432", "html_url": "https://github.com/rust-lang/rust/commit/e569ada528f8664337f700235bc771cbfecbd432", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e569ada528f8664337f700235bc771cbfecbd432/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2c9dd7a1030ef25f6efc2831d50a0d7720b6844", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2c9dd7a1030ef25f6efc2831d50a0d7720b6844", "html_url": "https://github.com/rust-lang/rust/commit/e2c9dd7a1030ef25f6efc2831d50a0d7720b6844"}], "stats": {"total": 155, "additions": 2, "deletions": 153}, "files": [{"sha": "127b8536b1a84228ee24f60dca074f3db9512400", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e569ada528f8664337f700235bc771cbfecbd432/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e569ada528f8664337f700235bc771cbfecbd432/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e569ada528f8664337f700235bc771cbfecbd432", "patch": "@@ -37,7 +37,6 @@ use crate::dep_graph::DepGraph;\n use crate::hir::def::{DefKind, Namespace, PartialRes, PerNS, Res};\n use crate::hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n use crate::hir::map::{DefKey, DefPathData, Definitions};\n-use crate::hir::ptr::P;\n use crate::hir::{self, ParamName};\n use crate::hir::{ConstArg, GenericArg};\n use crate::lint;\n@@ -3205,7 +3204,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// `std::cell::Ref<T>`; note that implicit lifetimes in these\n     /// sorts of cases are deprecated. This may therefore report a warning or an\n     /// error, depending on the mode.\n-    fn elided_path_lifetimes(&mut self, span: Span, count: usize) -> P<[hir::Lifetime]> {\n+    fn elided_path_lifetimes(&mut self, span: Span, count: usize) -> Vec<hir::Lifetime> {\n         (0..count).map(|_| self.elided_path_lifetime(span)).collect()\n     }\n "}, {"sha": "f56c9f8e72c2d385514ec36d66c6877a8d680004", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e569ada528f8664337f700235bc771cbfecbd432/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e569ada528f8664337f700235bc771cbfecbd432/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=e569ada528f8664337f700235bc771cbfecbd432", "patch": "@@ -43,7 +43,6 @@ pub mod lowering;\n pub mod map;\n pub mod pat_util;\n pub mod print;\n-pub mod ptr;\n pub mod upvars;\n \n /// Uniquely identifies a node in the HIR of the current crate. It is"}, {"sha": "b43817c9601b305b0053125f86444a3235df6962", "filename": "src/librustc/hir/ptr.rs", "status": "removed", "additions": 0, "deletions": 128, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/e2c9dd7a1030ef25f6efc2831d50a0d7720b6844/src%2Flibrustc%2Fhir%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2c9dd7a1030ef25f6efc2831d50a0d7720b6844/src%2Flibrustc%2Fhir%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fptr.rs?ref=e2c9dd7a1030ef25f6efc2831d50a0d7720b6844", "patch": "@@ -1,128 +0,0 @@\n-// HACK(eddyb) this is a copy of `syntax::ptr`, minus the mutation (the HIR is\n-// frozen anyway). The only reason for doing this instead of replacing `P<T>`\n-// with `Box<T>` in HIR, is that `&Box<[T]>` doesn't implement `IntoIterator`.\n-\n-use std::fmt::{self, Debug, Display};\n-use std::iter::FromIterator;\n-use std::ops::Deref;\n-use std::{slice, vec};\n-\n-use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n-\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-/// An owned smart pointer.\n-#[derive(PartialEq, Eq)]\n-pub struct P<T: ?Sized> {\n-    ptr: Box<T>,\n-}\n-\n-/// Construct a `P<T>` from a `T` value.\n-#[allow(non_snake_case)]\n-pub fn P<T: 'static>(value: T) -> P<T> {\n-    P { ptr: box value }\n-}\n-\n-impl<T: ?Sized> Deref for P<T> {\n-    type Target = T;\n-\n-    fn deref(&self) -> &T {\n-        &self.ptr\n-    }\n-}\n-\n-impl<T: ?Sized + Debug> Debug for P<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        Debug::fmt(&self.ptr, f)\n-    }\n-}\n-\n-impl<T: Display> Display for P<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        Display::fmt(&**self, f)\n-    }\n-}\n-\n-impl<T: 'static + Decodable> Decodable for P<T> {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<P<T>, D::Error> {\n-        Decodable::decode(d).map(P)\n-    }\n-}\n-\n-impl<T: Encodable> Encodable for P<T> {\n-    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        (**self).encode(s)\n-    }\n-}\n-\n-impl<T> P<[T]> {\n-    pub const fn new() -> P<[T]> {\n-        // HACK(eddyb) bypass the lack of a `const fn` to create an empty `Box<[T]>`\n-        // (as trait methods, `default` in this case, can't be `const fn` yet).\n-        P {\n-            ptr: unsafe {\n-                use std::ptr::NonNull;\n-                std::mem::transmute(NonNull::<[T; 0]>::dangling() as NonNull<[T]>)\n-            },\n-        }\n-    }\n-\n-    #[inline(never)]\n-    pub fn from_vec(v: Vec<T>) -> P<[T]> {\n-        P { ptr: v.into_boxed_slice() }\n-    }\n-\n-    // HACK(eddyb) used by HIR lowering in a few places still.\n-    // NOTE: do not make this more public than `pub(super)`,\n-    // and do not make this into an `IntoIterator` impl.\n-    pub(super) fn into_iter(self) -> vec::IntoIter<T> {\n-        self.ptr.into_vec().into_iter()\n-    }\n-}\n-\n-impl<T> Default for P<[T]> {\n-    /// Creates an empty `P<[T]>`.\n-    fn default() -> P<[T]> {\n-        P::new()\n-    }\n-}\n-\n-impl<T> From<Vec<T>> for P<[T]> {\n-    fn from(v: Vec<T>) -> Self {\n-        P::from_vec(v)\n-    }\n-}\n-\n-impl<T> FromIterator<T> for P<[T]> {\n-    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> P<[T]> {\n-        P::from_vec(iter.into_iter().collect())\n-    }\n-}\n-\n-impl<'a, T> IntoIterator for &'a P<[T]> {\n-    type Item = &'a T;\n-    type IntoIter = slice::Iter<'a, T>;\n-    fn into_iter(self) -> Self::IntoIter {\n-        self.ptr.into_iter()\n-    }\n-}\n-\n-impl<T: Encodable> Encodable for P<[T]> {\n-    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        Encodable::encode(&**self, s)\n-    }\n-}\n-\n-impl<T: Decodable> Decodable for P<[T]> {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<P<[T]>, D::Error> {\n-        Ok(P::from_vec(Decodable::decode(d)?))\n-    }\n-}\n-\n-impl<CTX, T> HashStable<CTX> for P<T>\n-where\n-    T: ?Sized + HashStable<CTX>,\n-{\n-    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n-        (**self).hash_stable(hcx, hasher);\n-    }\n-}"}, {"sha": "569be6e1a55fddbafb263dc15563ff0a09769a9a", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e569ada528f8664337f700235bc771cbfecbd432/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e569ada528f8664337f700235bc771cbfecbd432/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=e569ada528f8664337f700235bc771cbfecbd432", "patch": "@@ -5,7 +5,6 @@\n use crate::hir::def::{CtorOf, DefKind, Res};\n use crate::hir::def_id::DefId;\n use crate::hir::print;\n-use crate::hir::ptr::P;\n use crate::hir::{self, ExprKind, GenericArg, GenericArgs};\n use crate::lint;\n use crate::middle::lang_items::SizedTraitLangItem;\n@@ -255,7 +254,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         seg: &hir::PathSegment<'_>,\n         is_method_call: bool,\n     ) -> bool {\n-        let empty_args = P(hir::GenericArgs { args: &[], bindings: &[], parenthesized: false });\n+        let empty_args = hir::GenericArgs::none();\n         let suppress_mismatch = Self::check_impl_trait(tcx, seg, &def);\n         Self::check_generic_arg_count(\n             tcx,"}, {"sha": "552e6a57c1d25f789796baf471fe6c1863f0045a", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e569ada528f8664337f700235bc771cbfecbd432/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e569ada528f8664337f700235bc771cbfecbd432/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=e569ada528f8664337f700235bc771cbfecbd432", "patch": "@@ -54,7 +54,6 @@ use crate::check::{FnCtxt, Needs};\n use errors::DiagnosticBuilder;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n-use rustc::hir::ptr::P;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::infer::{Coercion, InferOk, InferResult};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n@@ -1377,12 +1376,6 @@ impl AsCoercionSite for hir::Expr<'_> {\n     }\n }\n \n-impl AsCoercionSite for P<hir::Expr<'_>> {\n-    fn as_coercion_site(&self) -> &hir::Expr<'_> {\n-        self\n-    }\n-}\n-\n impl<'a, T> AsCoercionSite for &'a T\n where\n     T: AsCoercionSite,"}, {"sha": "defdeb52186cbf5bff37cef866f4f2853a04385e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e569ada528f8664337f700235bc771cbfecbd432/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e569ada528f8664337f700235bc771cbfecbd432/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e569ada528f8664337f700235bc771cbfecbd432", "patch": "@@ -12,7 +12,6 @@ pub mod utils;\n use rustc::hir;\n use rustc::hir::def::{CtorKind, DefKind, Res};\n use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n-use rustc::hir::ptr::P;\n use rustc::infer::region_constraints::{Constraint, RegionConstraintData};\n use rustc::middle::lang_items;\n use rustc::middle::resolve_lifetime as rl;\n@@ -74,12 +73,6 @@ impl<T: Clean<U>, U> Clean<U> for &T {\n     }\n }\n \n-impl<T: Clean<U>, U> Clean<U> for P<T> {\n-    fn clean(&self, cx: &DocContext<'_>) -> U {\n-        (**self).clean(cx)\n-    }\n-}\n-\n impl<T: Clean<U>, U> Clean<U> for Rc<T> {\n     fn clean(&self, cx: &DocContext<'_>) -> U {\n         (**self).clean(cx)\n@@ -101,12 +94,6 @@ where\n     }\n }\n \n-impl<T: Clean<U>, U> Clean<Vec<U>> for P<[T]> {\n-    fn clean(&self, cx: &DocContext<'_>) -> Vec<U> {\n-        self.iter().map(|x| x.clean(cx)).collect()\n-    }\n-}\n-\n impl Clean<ExternalCrate> for CrateNum {\n     fn clean(&self, cx: &DocContext<'_>) -> ExternalCrate {\n         let root = DefId { krate: *self, index: CRATE_DEF_INDEX };"}]}