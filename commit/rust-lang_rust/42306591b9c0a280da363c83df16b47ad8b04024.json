{"sha": "42306591b9c0a280da363c83df16b47ad8b04024", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMzA2NTkxYjljMGEyODBkYTM2M2M4M2RmMTZiNDdhZDhiMDQwMjQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@commure.com", "date": "2018-07-23T07:01:17Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@commure.com", "date": "2018-07-23T15:22:20Z"}, "message": "Point at incorrect named arg in format string", "tree": {"sha": "fae5b7d860f42b6a3422f8387c67d33125bd8de1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fae5b7d860f42b6a3422f8387c67d33125bd8de1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42306591b9c0a280da363c83df16b47ad8b04024", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42306591b9c0a280da363c83df16b47ad8b04024", "html_url": "https://github.com/rust-lang/rust/commit/42306591b9c0a280da363c83df16b47ad8b04024", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42306591b9c0a280da363c83df16b47ad8b04024/comments", "author": null, "committer": null, "parents": [{"sha": "38abca8c2d7de08861cd61bc439efdb7cf4de398", "url": "https://api.github.com/repos/rust-lang/rust/commits/38abca8c2d7de08861cd61bc439efdb7cf4de398", "html_url": "https://github.com/rust-lang/rust/commit/38abca8c2d7de08861cd61bc439efdb7cf4de398"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "215e4f5a8352346c19af7e078da087eb6369616b", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/42306591b9c0a280da363c83df16b47ad8b04024/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42306591b9c0a280da363c83df16b47ad8b04024/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=42306591b9c0a280da363c83df16b47ad8b04024", "patch": "@@ -111,8 +111,10 @@ struct Context<'a, 'b: 'a> {\n     /// still existed in this phase of processing.\n     /// Used only for `all_pieces_simple` tracking in `build_piece`.\n     curarg: usize,\n+    curpiece: usize,\n     /// Keep track of invalid references to positional arguments\n     invalid_refs: Vec<usize>,\n+    arg_spans: Vec<Span>,\n }\n \n /// Parses the arguments from the given list of tokens, returning None\n@@ -235,6 +237,7 @@ impl<'a, 'b> Context<'a, 'b> {\n \n                 let ty = Placeholder(arg.format.ty.to_string());\n                 self.verify_arg_type(pos, ty);\n+                self.curpiece += 1;\n             }\n         }\n     }\n@@ -347,7 +350,9 @@ impl<'a, 'b> Context<'a, 'b> {\n                     Some(e) => *e,\n                     None => {\n                         let msg = format!(\"there is no argument named `{}`\", name);\n-                        self.ecx.span_err(self.fmtsp, &msg[..]);\n+                        let sp = *self.arg_spans.get(self.curpiece).unwrap_or(&self.fmtsp);\n+                        let mut err = self.ecx.struct_span_err(sp, &msg[..]);\n+                        err.emit();\n                         return;\n                     }\n                 };\n@@ -773,6 +778,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n         arg_unique_types,\n         names,\n         curarg: 0,\n+        curpiece: 0,\n         arg_index_map: Vec::new(),\n         count_args: Vec::new(),\n         count_positions: HashMap::new(),\n@@ -785,6 +791,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n         macsp,\n         fmtsp: fmt.span,\n         invalid_refs: Vec::new(),\n+        arg_spans: Vec::new(),\n     };\n \n     let fmt_str = &*fmt.node.0.as_str();\n@@ -793,12 +800,22 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n         ast::StrStyle::Raw(raw) => Some(raw as usize),\n     };\n     let mut parser = parse::Parser::new(fmt_str, str_style);\n+    let mut unverified_pieces = vec![];\n     let mut pieces = vec![];\n \n-    while let Some(mut piece) = parser.next() {\n+    while let Some(piece) = parser.next() {\n         if !parser.errors.is_empty() {\n             break;\n         }\n+        unverified_pieces.push(piece);\n+    }\n+\n+    cx.arg_spans = parser.arg_places.iter()\n+        .map(|&(start, end)| fmt.span.from_inner_byte_pos(start, end))\n+        .collect();\n+\n+    // This needs to happen *after* the Parser has consumed all pieces to create all the spans\n+    for mut piece in unverified_pieces {\n         cx.verify_piece(&piece);\n         cx.resolve_name_inplace(&mut piece);\n         pieces.push(piece);"}, {"sha": "2d49c36c06de1f0cd5680f47cfe8be3a7adf578c", "filename": "src/test/ui/ifmt-bad-arg.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/42306591b9c0a280da363c83df16b47ad8b04024/src%2Ftest%2Fui%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42306591b9c0a280da363c83df16b47ad8b04024/src%2Ftest%2Fui%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fifmt-bad-arg.stderr?ref=42306591b9c0a280da363c83df16b47ad8b04024", "patch": "@@ -57,22 +57,22 @@ LL |     format!(\"{name} {value} {} {} {} {} {} {}\", 0, name=1, value=2);\n    = note: positional arguments are zero-based\n \n error: there is no argument named `foo`\n-  --> $DIR/ifmt-bad-arg.rs:37:13\n+  --> $DIR/ifmt-bad-arg.rs:37:17\n    |\n LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^^\n \n error: there is no argument named `bar`\n-  --> $DIR/ifmt-bad-arg.rs:37:13\n+  --> $DIR/ifmt-bad-arg.rs:37:26\n    |\n LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |                          ^^^^^\n \n error: there is no argument named `foo`\n-  --> $DIR/ifmt-bad-arg.rs:41:13\n+  --> $DIR/ifmt-bad-arg.rs:41:14\n    |\n LL |     format!(\"{foo}\");                //~ ERROR: no argument named `foo`\n-   |             ^^^^^^^\n+   |              ^^^^^\n \n error: multiple unused formatting arguments\n   --> $DIR/ifmt-bad-arg.rs:42:17\n@@ -139,10 +139,10 @@ LL |     format!(\"\", foo=1, 2);           //~ ERROR: positional arguments cannot\n    |                        ^\n \n error: there is no argument named `valueb`\n-  --> $DIR/ifmt-bad-arg.rs:55:13\n+  --> $DIR/ifmt-bad-arg.rs:55:23\n    |\n LL |     format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n-   |             ^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^^^^^^\n \n error: named argument never used\n   --> $DIR/ifmt-bad-arg.rs:55:51"}]}