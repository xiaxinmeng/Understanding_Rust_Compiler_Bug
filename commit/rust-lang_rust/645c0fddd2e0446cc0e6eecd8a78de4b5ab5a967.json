{"sha": "645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "node_id": "C_kwDOAAsO6NoAKDY0NWMwZmRkZDJlMDQ0NmNjMGU2ZWVjZDhhNzhkZTRiNWFiNWE5Njc", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-30T14:55:05Z"}, "committer": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-01-17T07:14:35Z"}, "message": "Put `noundef` on all scalars that don't allow uninit\n\nPreviously, it was only put on scalars with range validity invariants\nlike bool, was uninit was obviously invalid for those.\n\nSince then, we have normatively declared all uninit primitives to be\nundefined behavior and can therefore put `noundef` on them.\n\nThe remaining concern was the `mem::uninitialized` function, which cause\nquite a lot of UB in the older parts of the ecosystem. This function now\ndoesn't return uninit values anymore, making users of it safe from this\nchange.\n\nThe only real sources of UB where people could encounter uninit\nprimitives are `MaybeUninit::uninit().assume_init()`, which has always\nbe clear in the docs about being UB and from heap allocations (like\nreading from the spare capacity of a vec. This is hopefully rare enough\nto not break anything.", "tree": {"sha": "70751b76743a039689b4efe6184bce0b3d2c3c62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70751b76743a039689b4efe6184bce0b3d2c3c62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "html_url": "https://github.com/rust-lang/rust/commit/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "html_url": "https://github.com/rust-lang/rust/commit/4781233a77e879e49cb5ce3c98d2abba6a6ade7a"}], "stats": {"total": 352, "additions": 176, "deletions": 176}, "files": [{"sha": "5e98deae48aa2dae049de2e28fad05c4df7a256e", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -501,7 +501,7 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n             layout: TyAndLayout<'tcx>,\n             offset: Size,\n         ) {\n-            if !scalar.is_always_valid(bx) {\n+            if !scalar.is_uninit_valid() {\n                 bx.noundef_metadata(load);\n             }\n "}, {"sha": "ce50b6fb43f5019b56daecba2c35576c31d7a520", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -220,7 +220,7 @@ fn adjust_for_rust_scalar<'tcx>(\n     }\n \n     // Scalars which have invalid values cannot be undef.\n-    if !scalar.is_always_valid(&cx) {\n+    if !scalar.is_uninit_valid() {\n         attrs.set(ArgAttribute::NoUndef);\n     }\n "}, {"sha": "e84c86b9ad04c3c80003bd4bd9c45fcf4e528d62", "filename": "tests/codegen/abi-sysv64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fabi-sysv64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fabi-sysv64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fabi-sysv64.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -15,7 +15,7 @@ trait Sized {}\n trait Copy {}\n impl Copy for i64 {}\n \n-// CHECK: define x86_64_sysvcc i64 @has_sysv64_abi\n+// CHECK: define x86_64_sysvcc noundef i64 @has_sysv64_abi\n #[no_mangle]\n pub extern \"sysv64\" fn has_sysv64_abi(a: i64) -> i64 {\n     a"}, {"sha": "94df1cb9f78bada9bd1495a10e5cd28f01636696", "filename": "tests/codegen/abi-x86-interrupt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fabi-x86-interrupt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fabi-x86-interrupt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fabi-x86-interrupt.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -15,7 +15,7 @@ trait Sized {}\n trait Copy {}\n impl Copy for i64 {}\n \n-// CHECK: define x86_intrcc i64 @has_x86_interrupt_abi\n+// CHECK: define x86_intrcc noundef i64 @has_x86_interrupt_abi\n #[no_mangle]\n pub extern \"x86-interrupt\" fn has_x86_interrupt_abi(a: i64) -> i64 {\n     a"}, {"sha": "d09bdfa09d299528030b753e66cef99e8e94c259", "filename": "tests/codegen/adjustments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fadjustments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fadjustments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fadjustments.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -3,7 +3,7 @@\n #![crate_type = \"lib\"]\n \n // Hack to get the correct size for the length part in slices\n-// CHECK: @helper([[USIZE:i[0-9]+]] %_1)\n+// CHECK: @helper([[USIZE:i[0-9]+]] noundef %_1)\n #[no_mangle]\n pub fn helper(_: usize) {\n }"}, {"sha": "b0c88f76c436dc9067dad98b7ebad22902b4983a", "filename": "tests/codegen/box-maybe-uninit-llvm14.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fbox-maybe-uninit-llvm14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fbox-maybe-uninit-llvm14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fbox-maybe-uninit-llvm14.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -31,4 +31,4 @@ pub fn box_uninitialized2() -> Box<MaybeUninit<[usize; 1024 * 1024]>> {\n // Hide the LLVM 15+ `allocalign` attribute in the declaration of __rust_alloc\n // from the CHECK-NOT above. We don't check the attributes here because we can't rely\n // on all of them being set until LLVM 15.\n-// CHECK: declare noalias{{.*}} @__rust_alloc(i{{[0-9]+}}, i{{[0-9]+.*}})\n+// CHECK: declare noalias{{.*}} @__rust_alloc(i{{[0-9]+}} noundef, i{{[0-9]+.*}} noundef)"}, {"sha": "2f88966996ab2e25efb1adfcb8d03420d3cf5e5d", "filename": "tests/codegen/box-maybe-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fbox-maybe-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fbox-maybe-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fbox-maybe-uninit.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -28,6 +28,6 @@ pub fn box_uninitialized2() -> Box<MaybeUninit<[usize; 1024 * 1024]>> {\n \n // Hide the `allocalign` attribute in the declaration of __rust_alloc\n // from the CHECK-NOT above, and also verify the attributes got set reasonably.\n-// CHECK: declare noalias ptr @__rust_alloc(i{{[0-9]+}}, i{{[0-9]+}} allocalign) unnamed_addr [[RUST_ALLOC_ATTRS:#[0-9]+]]\n+// CHECK: declare noalias noundef ptr @__rust_alloc(i{{[0-9]+}} noundef, i{{[0-9]+}} allocalign noundef) unnamed_addr [[RUST_ALLOC_ATTRS:#[0-9]+]]\n \n // CHECK-DAG: attributes [[RUST_ALLOC_ATTRS]] = { {{.*}} allockind(\"alloc,uninitialized,aligned\") allocsize(0) uwtable \"alloc-family\"=\"__rust_alloc\" {{.*}} }"}, {"sha": "1f16550d3b606881d078fe84138375b6edc84f8d", "filename": "tests/codegen/c-variadic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fc-variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fc-variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fc-variadic.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -15,7 +15,7 @@ extern \"C\" {\n \n pub unsafe extern \"C\" fn use_foreign_c_variadic_0() {\n     // Ensure that we correctly call foreign C-variadic functions.\n-    // CHECK: call void (i32, ...) @foreign_c_variadic_0([[PARAM:i32( signext)?]] 0)\n+    // CHECK: call void (i32, ...) @foreign_c_variadic_0([[PARAM:i32 noundef( signext)?]] 0)\n     foreign_c_variadic_0(0);\n     // CHECK: call void (i32, ...) @foreign_c_variadic_0([[PARAM]] 0, [[PARAM]] 42)\n     foreign_c_variadic_0(0, 42i32);\n@@ -61,7 +61,7 @@ pub unsafe extern \"C\" fn c_variadic(n: i32, mut ap: ...) -> i32 {\n // Ensure that we generate the correct `call` signature when calling a Rust\n // defined C-variadic.\n pub unsafe fn test_c_variadic_call() {\n-    // CHECK: call [[RET:(signext )?i32]] (i32, ...) @c_variadic([[PARAM]] 0)\n+    // CHECK: call [[RET:noundef( signext)? i32]] (i32, ...) @c_variadic([[PARAM]] 0)\n     c_variadic(0);\n     // CHECK: call [[RET]] (i32, ...) @c_variadic([[PARAM]] 0, [[PARAM]] 42)\n     c_variadic(0, 42i32);"}, {"sha": "8e0327f84b4aca3cd3a48bc3240978c6b7225544", "filename": "tests/codegen/call-llvm-intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fcall-llvm-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fcall-llvm-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fcall-llvm-intrinsics.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -23,7 +23,7 @@ pub fn do_call() {\n \n     unsafe {\n         // Ensure that we `call` LLVM intrinsics instead of trying to `invoke` them\n-        // CHECK: call float @llvm.sqrt.f32(float 4.000000e+00\n+        // CHECK: call noundef float @llvm.sqrt.f32(float noundef 4.000000e+00\n         sqrt(4.0);\n     }\n }"}, {"sha": "683a2bd4fbb5a8abb5f68bd1cb944dc60f45c43d", "filename": "tests/codegen/comparison-operators-newtype.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fcomparison-operators-newtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fcomparison-operators-newtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fcomparison-operators-newtype.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -13,7 +13,7 @@ use std::cmp::Ordering;\n pub struct Foo(u16);\n \n // CHECK-LABEL: @check_lt\n-// CHECK-SAME: (i16 %[[A:.+]], i16 %[[B:.+]])\n+// CHECK-SAME: (i16 noundef %[[A:.+]], i16 noundef %[[B:.+]])\n #[no_mangle]\n pub fn check_lt(a: Foo, b: Foo) -> bool {\n     // CHECK: %[[R:.+]] = icmp ult i16 %[[A]], %[[B]]\n@@ -22,7 +22,7 @@ pub fn check_lt(a: Foo, b: Foo) -> bool {\n }\n \n // CHECK-LABEL: @check_le\n-// CHECK-SAME: (i16 %[[A:.+]], i16 %[[B:.+]])\n+// CHECK-SAME: (i16 noundef %[[A:.+]], i16 noundef %[[B:.+]])\n #[no_mangle]\n pub fn check_le(a: Foo, b: Foo) -> bool {\n     // CHECK: %[[R:.+]] = icmp ule i16 %[[A]], %[[B]]\n@@ -31,7 +31,7 @@ pub fn check_le(a: Foo, b: Foo) -> bool {\n }\n \n // CHECK-LABEL: @check_gt\n-// CHECK-SAME: (i16 %[[A:.+]], i16 %[[B:.+]])\n+// CHECK-SAME: (i16 noundef %[[A:.+]], i16 noundef %[[B:.+]])\n #[no_mangle]\n pub fn check_gt(a: Foo, b: Foo) -> bool {\n     // CHECK: %[[R:.+]] = icmp ugt i16 %[[A]], %[[B]]\n@@ -40,7 +40,7 @@ pub fn check_gt(a: Foo, b: Foo) -> bool {\n }\n \n // CHECK-LABEL: @check_ge\n-// CHECK-SAME: (i16 %[[A:.+]], i16 %[[B:.+]])\n+// CHECK-SAME: (i16 noundef %[[A:.+]], i16 noundef %[[B:.+]])\n #[no_mangle]\n pub fn check_ge(a: Foo, b: Foo) -> bool {\n     // CHECK: %[[R:.+]] = icmp uge i16 %[[A]], %[[B]]"}, {"sha": "5f8063a27f7ac7355927906e2756a2ea2ae96fd8", "filename": "tests/codegen/enum-match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fenum-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fenum-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fenum-match.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -11,7 +11,7 @@ pub enum Enum0 {\n     B,\n }\n \n-// CHECK: define i8 @match0{{.*}}\n+// CHECK: define noundef i8 @match0{{.*}}\n // CHECK-NEXT: start:\n // CHECK-NEXT: %1 = icmp eq i8 %0, 2\n // CHECK-NEXT: %2 = and i8 %0, 1\n@@ -32,7 +32,7 @@ pub enum Enum1 {\n     C,\n }\n \n-// CHECK: define i8 @match1{{.*}}\n+// CHECK: define noundef i8 @match1{{.*}}\n // CHECK-NEXT: start:\n // CHECK-NEXT: [[DISCR:%.*]] = {{.*}}call i8 @llvm.usub.sat.i8(i8 %0, i8 1)\n // CHECK-NEXT: switch i8 [[DISCR]], label {{.*}} [\n@@ -88,7 +88,7 @@ pub enum Enum2 {\n     E,\n }\n \n-// CHECK: define i8 @match2{{.*}}\n+// CHECK: define noundef i8 @match2{{.*}}\n // CHECK-NEXT: start:\n // CHECK-NEXT: %1 = add i8 %0, 2\n // CHECK-NEXT: %2 = zext i8 %1 to i64"}, {"sha": "02f5d545910e1f7f2e12dc2e150a71ff62bb3771", "filename": "tests/codegen/fastcall-inreg.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Ffastcall-inreg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Ffastcall-inreg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Ffastcall-inreg.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -15,27 +15,27 @@ trait Sized {}\n trait Copy {}\n \n pub mod tests {\n-    // CHECK: @f1(i32 inreg %_1, i32 inreg %_2, i32 %_3)\n+    // CHECK: @f1(i32 inreg noundef %_1, i32 inreg noundef %_2, i32 noundef %_3)\n     #[no_mangle]\n     pub extern \"fastcall\" fn f1(_: i32, _: i32, _: i32) {}\n \n-    // CHECK: @f2({{i32\\*|ptr}} inreg %_1, {{i32\\*|ptr}} inreg %_2, {{i32\\*|ptr}} %_3)\n+    // CHECK: @f2({{i32\\*|ptr}} inreg noundef %_1, {{i32\\*|ptr}} inreg noundef %_2, {{i32\\*|ptr}} noundef %_3)\n     #[no_mangle]\n     pub extern \"fastcall\" fn f2(_: *const i32, _: *const i32, _: *const i32) {}\n \n-    // CHECK: @f3(float %_1, i32 inreg %_2, i32 inreg %_3, i32 %_4)\n+    // CHECK: @f3(float noundef %_1, i32 inreg noundef %_2, i32 inreg noundef %_3, i32 noundef %_4)\n     #[no_mangle]\n     pub extern \"fastcall\" fn f3(_: f32, _: i32, _: i32, _: i32) {}\n \n-    // CHECK: @f4(i32 inreg %_1, float %_2, i32 inreg %_3, i32 %_4)\n+    // CHECK: @f4(i32 inreg noundef %_1, float noundef %_2, i32 inreg noundef %_3, i32 noundef %_4)\n     #[no_mangle]\n     pub extern \"fastcall\" fn f4(_: i32, _: f32, _: i32, _: i32) {}\n \n-    // CHECK: @f5(i64 %_1, i32 %_2)\n+    // CHECK: @f5(i64 noundef %_1, i32 noundef %_2)\n     #[no_mangle]\n     pub extern \"fastcall\" fn f5(_: i64, _: i32) {}\n \n-    // CHECK: @f6(i1 inreg noundef zeroext %_1, i32 inreg %_2, i32 %_3)\n+    // CHECK: @f6(i1 inreg noundef zeroext %_1, i32 inreg noundef %_2, i32 noundef %_3)\n     #[no_mangle]\n     pub extern \"fastcall\" fn f6(_: bool, _: i32, _: i32) {}\n }"}, {"sha": "ac8cba06b48f7616f3450e5b6e2630c2ed84bfd2", "filename": "tests/codegen/fewer-names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Ffewer-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Ffewer-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Ffewer-names.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -7,11 +7,11 @@\n \n #[no_mangle]\n pub fn sum(x: u32, y: u32) -> u32 {\n-// YES-LABEL: define{{.*}}i32 @sum(i32 %0, i32 %1)\n+// YES-LABEL: define{{.*}}i32 @sum(i32 noundef %0, i32 noundef %1)\n // YES-NEXT:    %3 = add i32 %1, %0\n // YES-NEXT:    ret i32 %3\n \n-// NO-LABEL: define{{.*}}i32 @sum(i32 %x, i32 %y)\n+// NO-LABEL: define{{.*}}i32 @sum(i32 noundef %x, i32 noundef %y)\n // NO-NEXT:  start:\n // NO-NEXT:    %z = add i32 %y, %x\n // NO-NEXT:    ret i32 %z"}, {"sha": "da7f2ec80460c97d300cf73c25c3721a1578044d", "filename": "tests/codegen/frame-pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fframe-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fframe-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fframe-pointer.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -20,7 +20,7 @@ trait Copy { }\n impl Copy for u32 {}\n \n \n-// CHECK: define i32 @peach{{.*}}[[PEACH_ATTRS:\\#[0-9]+]] {\n+// CHECK: define noundef i32 @peach{{.*}}[[PEACH_ATTRS:\\#[0-9]+]] {\n #[no_mangle]\n pub fn peach(x: u32) -> u32 {\n     x"}, {"sha": "20519978a0d1951424be5db4436355eb7ba909d4", "filename": "tests/codegen/function-arguments.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Ffunction-arguments.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -61,7 +61,7 @@ pub fn maybeuninit_char(x: MaybeUninit<char>) -> MaybeUninit<char> {\n   x\n }\n \n-// CHECK: i64 @int(i64 %x)\n+// CHECK: noundef i64 @int(i64 noundef %x)\n #[no_mangle]\n pub fn int(x: u64) -> u64 {\n   x\n@@ -73,7 +73,7 @@ pub fn nonzero_int(x: NonZeroU64) -> NonZeroU64 {\n   x\n }\n \n-// CHECK: i64 @option_nonzero_int(i64 %x)\n+// CHECK: noundef i64 @option_nonzero_int(i64 noundef %x)\n #[no_mangle]\n pub fn option_nonzero_int(x: Option<NonZeroU64>) -> Option<NonZeroU64> {\n   x\n@@ -138,7 +138,7 @@ pub fn indirect_struct(_: S) {\n pub fn borrowed_struct(_: &S) {\n }\n \n-// CHECK: @raw_struct({{%S\\*|ptr}} %_1)\n+// CHECK: @raw_struct({{%S\\*|ptr}} noundef %_1)\n #[no_mangle]\n pub fn raw_struct(_: *const S) {\n }\n@@ -160,35 +160,35 @@ pub fn struct_return() -> S {\n }\n \n // Hack to get the correct size for the length part in slices\n-// CHECK: @helper([[USIZE:i[0-9]+]] %_1)\n+// CHECK: @helper([[USIZE:i[0-9]+]] noundef %_1)\n #[no_mangle]\n pub fn helper(_: usize) {\n }\n \n-// CHECK: @slice({{\\[0 x i8\\]\\*|ptr}} noalias noundef nonnull readonly align 1 %_1.0, [[USIZE]] %_1.1)\n+// CHECK: @slice({{\\[0 x i8\\]\\*|ptr}} noalias noundef nonnull readonly align 1 %_1.0, [[USIZE]] noundef %_1.1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn slice(_: &[u8]) {\n }\n \n-// CHECK: @mutable_slice({{\\[0 x i8\\]\\*|ptr}} noalias noundef nonnull align 1 %_1.0, [[USIZE]] %_1.1)\n+// CHECK: @mutable_slice({{\\[0 x i8\\]\\*|ptr}} noalias noundef nonnull align 1 %_1.0, [[USIZE]] noundef %_1.1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn mutable_slice(_: &mut [u8]) {\n }\n \n-// CHECK: @unsafe_slice({{\\[0 x i16\\]\\*|ptr}} noundef nonnull align 2 %_1.0, [[USIZE]] %_1.1)\n+// CHECK: @unsafe_slice({{\\[0 x i16\\]\\*|ptr}} noundef nonnull align 2 %_1.0, [[USIZE]] noundef %_1.1)\n // unsafe interior means this isn't actually readonly and there may be aliases ...\n #[no_mangle]\n pub fn unsafe_slice(_: &[UnsafeInner]) {\n }\n \n-// CHECK: @raw_slice({{\\[0 x i8\\]\\*|ptr}} %_1.0, [[USIZE]] %_1.1)\n+// CHECK: @raw_slice({{\\[0 x i8\\]\\*|ptr}} noundef %_1.0, [[USIZE]] noundef %_1.1)\n #[no_mangle]\n pub fn raw_slice(_: *const [u8]) {\n }\n \n-// CHECK: @str({{\\[0 x i8\\]\\*|ptr}} noalias noundef nonnull readonly align 1 %_1.0, [[USIZE]] %_1.1)\n+// CHECK: @str({{\\[0 x i8\\]\\*|ptr}} noalias noundef nonnull readonly align 1 %_1.0, [[USIZE]] noundef %_1.1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn str(_: &[u8]) {\n@@ -197,26 +197,26 @@ pub fn str(_: &[u8]) {\n // CHECK: @trait_borrow({{\\{\\}\\*|ptr}} noundef nonnull align 1 %_1.0, {{.+}} noalias noundef readonly align {{.*}} dereferenceable({{.*}}) %_1.1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n-pub fn trait_borrow(_: &Drop) {\n+pub fn trait_borrow(_: &dyn Drop) {\n }\n \n-// CHECK: @trait_raw({{\\{\\}\\*|ptr}} %_1.0, {{.+}} noalias noundef readonly align {{.*}} dereferenceable({{.*}}) %_1.1)\n+// CHECK: @trait_raw({{\\{\\}\\*|ptr}} noundef %_1.0, {{.+}} noalias noundef readonly align {{.*}} dereferenceable({{.*}}) %_1.1)\n #[no_mangle]\n-pub fn trait_raw(_: *const Drop) {\n+pub fn trait_raw(_: *const dyn Drop) {\n }\n \n // CHECK: @trait_box({{\\{\\}\\*|ptr}} noalias noundef nonnull align 1{{( %0)?}}, {{.+}} noalias noundef readonly align {{.*}} dereferenceable({{.*}}){{( %1)?}})\n #[no_mangle]\n-pub fn trait_box(_: Box<Drop>) {\n+pub fn trait_box(_: Box<dyn Drop>) {\n }\n \n // CHECK: { {{i8\\*|ptr}}, {{i8\\*|ptr}} } @trait_option({{i8\\*|ptr}} noalias noundef align 1 %x.0, {{i8\\*|ptr}} %x.1)\n #[no_mangle]\n-pub fn trait_option(x: Option<Box<Drop>>) -> Option<Box<Drop>> {\n+pub fn trait_option(x: Option<Box<dyn Drop>>) -> Option<Box<dyn Drop>> {\n   x\n }\n \n-// CHECK: { {{\\[0 x i16\\]\\*|ptr}}, [[USIZE]] } @return_slice({{\\[0 x i16\\]\\*|ptr}} noalias noundef nonnull readonly align 2 %x.0, [[USIZE]] %x.1)\n+// CHECK: { {{\\[0 x i16\\]\\*|ptr}}, [[USIZE]] } @return_slice({{\\[0 x i16\\]\\*|ptr}} noalias noundef nonnull readonly align 2 %x.0, [[USIZE]] noundef %x.1)\n #[no_mangle]\n pub fn return_slice(x: &[u16]) -> &[u16] {\n   x"}, {"sha": "424157158f6c8388b481741ccb2124cf94cbc867", "filename": "tests/codegen/intrinsics/const_eval_select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fintrinsics%2Fconst_eval_select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fintrinsics%2Fconst_eval_select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fintrinsics%2Fconst_eval_select.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -13,6 +13,6 @@ pub fn hi(n: i32) -> i32 { n }\n \n #[no_mangle]\n pub unsafe fn hey() {\n-    // CHECK: call i32 @hi(i32\n+    // CHECK: call noundef i32 @hi(i32\n     const_eval_select((42,), foo, hi);\n }"}, {"sha": "c7a2e4ba06dd2f2716ed565c78c1a7301671fd64", "filename": "tests/codegen/intrinsics/mask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fintrinsics%2Fmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fintrinsics%2Fmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fintrinsics%2Fmask.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -2,7 +2,7 @@\n #![feature(core_intrinsics)]\n \n // CHECK-LABEL: @mask_ptr\n-// CHECK-SAME: [[WORD:i[0-9]+]] %mask\n+// CHECK-SAME: [[WORD:i[0-9]+]] noundef %mask\n #[no_mangle]\n pub fn mask_ptr(ptr: *const u16, mask: usize) -> *const u16 {\n     // CHECK: call"}, {"sha": "b181079785cf19b23bdb7f9b93ec15a365282a8f", "filename": "tests/codegen/issue-32031.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fissue-32031.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fissue-32031.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fissue-32031.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -5,7 +5,7 @@\n #[no_mangle]\n pub struct F32(f32);\n \n-// CHECK: define{{.*}}float @add_newtype_f32(float %a, float %b)\n+// CHECK: define{{.*}}float @add_newtype_f32(float noundef %a, float noundef %b)\n #[inline(never)]\n #[no_mangle]\n pub fn add_newtype_f32(a: F32, b: F32) -> F32 {\n@@ -15,7 +15,7 @@ pub fn add_newtype_f32(a: F32, b: F32) -> F32 {\n #[no_mangle]\n pub struct F64(f64);\n \n-// CHECK: define{{.*}}double @add_newtype_f64(double %a, double %b)\n+// CHECK: define{{.*}}double @add_newtype_f64(double noundef %a, double noundef %b)\n #[inline(never)]\n #[no_mangle]\n pub fn add_newtype_f64(a: F64, b: F64) -> F64 {"}, {"sha": "9349b78f962059009cd3843c21b035372fdc2dfe", "filename": "tests/codegen/issue-58881.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fissue-58881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fissue-58881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fissue-58881.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -16,6 +16,6 @@ struct Bar(u64, u64, u64);\n \n // Ensure that emit arguments of the correct type.\n pub unsafe fn test_call_variadic() {\n-    // CHECK: call void (i32, ...) @variadic_fn(i32 0, i8 {{.*}}, {{%Bar\\*|ptr}} {{.*}})\n+    // CHECK: call void (i32, ...) @variadic_fn(i32 noundef 0, i8 {{.*}}, {{%Bar\\*|ptr}} {{.*}})\n     variadic_fn(0, Foo(0), Bar(0, 0, 0))\n }"}, {"sha": "c9728197092582f02a88cdcdab5a6a6af30b81df", "filename": "tests/codegen/loads.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Floads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Floads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Floads.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -51,7 +51,7 @@ pub fn load_scalar_pair<'a>(x: &(&'a i32, &'a Align16)) -> (&'a i32, &'a Align16\n #[no_mangle]\n pub fn load_raw_pointer<'a>(x: &*const i32) -> *const i32 {\n     // loaded raw pointer should not have !nonnull, !align, or !noundef metadata\n-    // CHECK: load {{i32\\*|ptr}}, {{i32\\*\\*|ptr}} %x, align [[PTR_ALIGNMENT]]{{$}}\n+    // CHECK: load {{i32\\*|ptr}}, {{i32\\*\\*|ptr}} %x, align [[PTR_ALIGNMENT]], !noundef !2{{$}}\n     *x\n }\n \n@@ -93,7 +93,7 @@ pub fn load_maybeuninit_enum_bool(x: &MaybeUninit<MyBool>) -> MaybeUninit<MyBool\n // CHECK-LABEL: @load_int\n #[no_mangle]\n pub fn load_int(x: &u16) -> u16 {\n-    // CHECK: load i16, {{i16\\*|ptr}} %x, align 2{{$}}\n+    // CHECK: load i16, {{i16\\*|ptr}} %x, align 2, !noundef !2{{$}}\n     *x\n }\n \n@@ -107,7 +107,7 @@ pub fn load_nonzero_int(x: &NonZeroU16) -> NonZeroU16 {\n // CHECK-LABEL: @load_option_nonzero_int\n #[no_mangle]\n pub fn load_option_nonzero_int(x: &Option<NonZeroU16>) -> Option<NonZeroU16> {\n-    // CHECK: load i16, {{i16\\*|ptr}} %x, align 2{{$}}\n+    // CHECK: load i16, {{i16\\*|ptr}} %x, align 2, !noundef !2{{$}}\n     *x\n }\n "}, {"sha": "725c0a67a00602fe9bd12542e27fce275bb5f150", "filename": "tests/codegen/naked-functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fnaked-functions.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -19,7 +19,7 @@ pub unsafe extern \"C\" fn naked_empty() {\n }\n \n // CHECK: Function Attrs: naked\n-// CHECK-NEXT: define{{.*}}i{{[0-9]+}} @naked_with_args_and_return(i64 %a, i64 %b)\n+// CHECK-NEXT: define{{.*}}i{{[0-9]+}} @naked_with_args_and_return(i64 noundef %a, i64 noundef %b)\n #[no_mangle]\n #[naked]\n pub unsafe extern \"C\" fn naked_with_args_and_return(a: isize, b: isize) -> isize {"}, {"sha": "7b4f0d9bae5d104fadd23c9279fd51e07608fbd0", "filename": "tests/codegen/pic-relocation-model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fpic-relocation-model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fpic-relocation-model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fpic-relocation-model.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -2,7 +2,7 @@\n \n #![crate_type = \"rlib\"]\n \n-// CHECK: define i8 @call_foreign_fn()\n+// CHECK: define noundef i8 @call_foreign_fn()\n #[no_mangle]\n pub fn call_foreign_fn() -> u8 {\n     unsafe {\n@@ -13,7 +13,7 @@ pub fn call_foreign_fn() -> u8 {\n // (Allow but do not require `zeroext` here, because it is not worth effort to\n // spell out which targets have it and which ones do not; see rust#97800.)\n \n-// CHECK: declare{{( zeroext)?}} i8 @foreign_fn()\n+// CHECK: declare noundef{{( zeroext)?}} i8 @foreign_fn()\n extern \"C\" {fn foreign_fn() -> u8;}\n \n // CHECK: !{i32 {{[78]}}, !\"PIC Level\", i32 2}"}, {"sha": "a59216c3eee5b9af4fefd231b9a3617016e59471", "filename": "tests/codegen/pie-relocation-model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fpie-relocation-model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fpie-relocation-model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fpie-relocation-model.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -5,7 +5,7 @@\n \n // With PIE we know local functions cannot be interpositioned, we can mark them\n // as dso_local.\n-// CHECK: define dso_local i8 @call_foreign_fn()\n+// CHECK: define dso_local noundef i8 @call_foreign_fn()\n #[no_mangle]\n pub fn call_foreign_fn() -> u8 {\n     unsafe {\n@@ -15,7 +15,7 @@ pub fn call_foreign_fn() -> u8 {\n \n // External functions are still marked as non-dso_local, since we don't know if the symbol\n // is defined in the binary or in the shared library.\n-// CHECK: declare zeroext i8 @foreign_fn()\n+// CHECK: declare noundef zeroext i8 @foreign_fn()\n extern \"C\" {fn foreign_fn() -> u8;}\n \n // CHECK: !{i32 {{[78]}}, !\"PIC Level\", i32 2}"}, {"sha": "579fd901ee66ab1ea3a5527692b786a3d87e6ab5", "filename": "tests/codegen/refs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Frefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Frefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Frefs.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -3,7 +3,7 @@\n #![crate_type = \"lib\"]\n \n // Hack to get the correct size for the length part in slices\n-// CHECK: @helper([[USIZE:i[0-9]+]] %_1)\n+// CHECK: @helper([[USIZE:i[0-9]+]] noundef %_1)\n #[no_mangle]\n pub fn helper(_: usize) {\n }"}, {"sha": "311cbfbaa09372915dba17b5b1125ec36d9ae2c0", "filename": "tests/codegen/repr-transparent.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Frepr-transparent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Frepr-transparent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Frepr-transparent.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -18,36 +18,36 @@ pub struct Zst2(());\n #[repr(transparent)]\n pub struct F32(f32);\n \n-// CHECK: define{{.*}}float @test_F32(float %_1)\n+// CHECK: define{{.*}}float @test_F32(float noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_F32(_: F32) -> F32 { loop {} }\n \n #[repr(transparent)]\n pub struct Ptr(*mut u8);\n \n-// CHECK: define{{.*}}{{i8\\*|ptr}} @test_Ptr({{i8\\*|ptr}} %_1)\n+// CHECK: define{{.*}}{{i8\\*|ptr}} @test_Ptr({{i8\\*|ptr}} noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_Ptr(_: Ptr) -> Ptr { loop {} }\n \n #[repr(transparent)]\n pub struct WithZst(u64, Zst1);\n \n-// CHECK: define{{.*}}i64 @test_WithZst(i64 %_1)\n+// CHECK: define{{.*}}i64 @test_WithZst(i64 noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_WithZst(_: WithZst) -> WithZst { loop {} }\n \n #[repr(transparent)]\n pub struct WithZeroSizedArray(*const f32, [i8; 0]);\n \n // Apparently we use i32* when newtype-unwrapping f32 pointers. Whatever.\n-// CHECK: define{{.*}}{{i32\\*|ptr}} @test_WithZeroSizedArray({{i32\\*|ptr}} %_1)\n+// CHECK: define{{.*}}{{i32\\*|ptr}} @test_WithZeroSizedArray({{i32\\*|ptr}} noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_WithZeroSizedArray(_: WithZeroSizedArray) -> WithZeroSizedArray { loop {} }\n \n #[repr(transparent)]\n pub struct Generic<T>(T);\n \n-// CHECK: define{{.*}}double @test_Generic(double %_1)\n+// CHECK: define{{.*}}double @test_Generic(double noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_Generic(_: Generic<f64>) -> Generic<f64> { loop {} }\n \n@@ -64,7 +64,7 @@ pub extern \"C\" fn test_Gpz(_: GenericPlusZst<Bool>) -> GenericPlusZst<Bool> { lo\n #[repr(transparent)]\n pub struct LifetimePhantom<'a, T: 'a>(*const T, PhantomData<&'a T>);\n \n-// CHECK: define{{.*}}{{i16\\*|ptr}} @test_LifetimePhantom({{i16\\*|ptr}} %_1)\n+// CHECK: define{{.*}}{{i16\\*|ptr}} @test_LifetimePhantom({{i16\\*|ptr}} noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_LifetimePhantom(_: LifetimePhantom<i16>) -> LifetimePhantom<i16> { loop {} }\n \n@@ -74,28 +74,28 @@ pub struct UnitPhantom<T, U> { val: T, unit: PhantomData<U> }\n \n pub struct Px;\n \n-// CHECK: define{{.*}}float @test_UnitPhantom(float %_1)\n+// CHECK: define{{.*}}float @test_UnitPhantom(float noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_UnitPhantom(_: UnitPhantom<f32, Px>) -> UnitPhantom<f32, Px> { loop {} }\n \n #[repr(transparent)]\n pub struct TwoZsts(Zst1, i8, Zst2);\n \n-// CHECK: define{{( dso_local)?}}{{( signext)?}} i8 @test_TwoZsts(i8{{( signext)?}} %_1)\n+// CHECK: define{{( dso_local)?}} noundef{{( signext)?}} i8 @test_TwoZsts(i8 noundef{{( signext)?}} %_1)\n #[no_mangle]\n pub extern \"C\" fn test_TwoZsts(_: TwoZsts) -> TwoZsts { loop {} }\n \n #[repr(transparent)]\n pub struct Nested1(Zst2, Generic<f64>);\n \n-// CHECK: define{{.*}}double @test_Nested1(double %_1)\n+// CHECK: define{{.*}}double @test_Nested1(double noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_Nested1(_: Nested1) -> Nested1 { loop {} }\n \n #[repr(transparent)]\n pub struct Nested2(Nested1, Zst1);\n \n-// CHECK: define{{.*}}double @test_Nested2(double %_1)\n+// CHECK: define{{.*}}double @test_Nested2(double noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_Nested2(_: Nested2) -> Nested2 { loop {} }\n \n@@ -115,7 +115,7 @@ impl<T: ?Sized> Mirror for T { type It = Self; }\n #[repr(transparent)]\n pub struct StructWithProjection(<f32 as Mirror>::It);\n \n-// CHECK: define{{.*}}float @test_Projection(float %_1)\n+// CHECK: define{{.*}}float @test_Projection(float noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_Projection(_: StructWithProjection) -> StructWithProjection { loop {} }\n \n@@ -124,7 +124,7 @@ pub enum EnumF32 {\n     Variant(F32)\n }\n \n-// CHECK: define{{.*}}float @test_EnumF32(float %_1)\n+// CHECK: define{{.*}}float @test_EnumF32(float noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_EnumF32(_: EnumF32) -> EnumF32 { loop {} }\n \n@@ -133,7 +133,7 @@ pub enum EnumF32WithZsts {\n     Variant(Zst1, F32, Zst2)\n }\n \n-// CHECK: define{{.*}}float @test_EnumF32WithZsts(float %_1)\n+// CHECK: define{{.*}}float @test_EnumF32WithZsts(float noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_EnumF32WithZsts(_: EnumF32WithZsts) -> EnumF32WithZsts { loop {} }\n \n@@ -142,7 +142,7 @@ pub union UnionF32 {\n     field: F32,\n }\n \n-// CHECK: define{{.*}}float @test_UnionF32(float %_1)\n+// CHECK: define{{.*}} float @test_UnionF32(float %_1)\n #[no_mangle]\n pub extern \"C\" fn test_UnionF32(_: UnionF32) -> UnionF32 { loop {} }\n "}, {"sha": "045f01985a57f1e14a75a4085c382f2f3ff56c0f", "filename": "tests/codegen/riscv-abi/riscv64-lp64-lp64f-lp64d-abi.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Friscv-abi%2Friscv64-lp64-lp64f-lp64d-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Friscv-abi%2Friscv64-lp64-lp64f-lp64d-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Friscv-abi%2Friscv64-lp64-lp64f-lp64d-abi.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -29,25 +29,25 @@ pub extern \"C\" fn f_scalar_0(a: bool) -> bool {\n     a\n }\n \n-// CHECK: define signext i8 @f_scalar_1(i8 signext %x)\n+// CHECK: define noundef signext i8 @f_scalar_1(i8 noundef signext %x)\n #[no_mangle]\n pub extern \"C\" fn f_scalar_1(x: i8) -> i8 {\n     x\n }\n \n-// CHECK: define zeroext i8 @f_scalar_2(i8 zeroext %x)\n+// CHECK: define noundef zeroext i8 @f_scalar_2(i8 noundef zeroext %x)\n #[no_mangle]\n pub extern \"C\" fn f_scalar_2(x: u8) -> u8 {\n     x\n }\n \n-// CHECK: define signext i32 @f_scalar_3(i32 signext %x)\n+// CHECK: define noundef signext i32 @f_scalar_3(i32 noundef signext %x)\n #[no_mangle]\n pub extern \"C\" fn f_scalar_3(x: i32) -> u32 {\n     x as u32\n }\n \n-// CHECK: define i64 @f_scalar_4(i64 %x)\n+// CHECK: define noundef i64 @f_scalar_4(i64 noundef %x)\n #[no_mangle]\n pub extern \"C\" fn f_scalar_4(x: i64) -> i64 {\n     x\n@@ -132,13 +132,13 @@ pub struct Large {\n pub extern \"C\" fn f_agg_large(mut x: Large) {\n }\n \n-// CHECK: define void @f_agg_large_ret({{%Large\\*|ptr}} {{.*}}sret{{.*}}, i32 signext %i, i8 signext %j)\n+// CHECK: define void @f_agg_large_ret({{%Large\\*|ptr}} {{.*}}sret{{.*}}, i32 noundef signext %i, i8 noundef signext %j)\n #[no_mangle]\n pub extern \"C\" fn f_agg_large_ret(i: i32, j: i8) -> Large {\n     Large { a: 1, b: 2, c: 3, d: 4 }\n }\n \n-// CHECK: define void @f_scalar_stack_1(i64 %0, [2 x i64] %1, i128 %2, {{%Large\\*|ptr}} {{.*}}%d, i8 zeroext %e, i8 signext %f, i8 %g, i8 %h)\n+// CHECK: define void @f_scalar_stack_1(i64 %0, [2 x i64] %1, i128 %2, {{%Large\\*|ptr}} {{.*}}%d, i8 noundef zeroext %e, i8 noundef signext %f, i8 noundef %g, i8 noundef %h)\n #[no_mangle]\n pub extern \"C\" fn f_scalar_stack_1(\n     a: Tiny,\n@@ -152,7 +152,7 @@ pub extern \"C\" fn f_scalar_stack_1(\n ) {\n }\n \n-// CHECK: define void @f_scalar_stack_2({{%Large\\*|ptr}} {{.*}}sret{{.*}} %0, i64 %a, i128 %1, i128 %2, i64 %d, i8 zeroext %e, i8 %f, i8 %g)\n+// CHECK: define void @f_scalar_stack_2({{%Large\\*|ptr}} {{.*}}sret{{.*}} %0, i64 noundef %a, i128 %1, i128 %2, i64 noundef %d, i8 noundef zeroext %e, i8 noundef %f, i8 noundef %g)\n #[no_mangle]\n pub extern \"C\" fn f_scalar_stack_2(\n     a: u64,\n@@ -172,7 +172,7 @@ extern \"C\" {\n \n #[no_mangle]\n pub unsafe extern \"C\" fn f_va_caller() {\n-    // CHECK: call signext i32 (i32, ...) @f_va_callee(i32 signext 1, i32 signext 2, i64 3, double {{.*}}, double {{.*}}, i64 {{.*}}, [2 x i64] {{.*}}, i128 {{.*}}, {{%Large\\*|ptr}} {{.*}})\n+    // CHECK: call noundef signext i32 (i32, ...) @f_va_callee(i32 noundef signext 1, i32 noundef signext 2, i64 noundef 3, double {{.*}}, double {{.*}}, i64 {{.*}}, [2 x i64] {{.*}}, i128 {{.*}}, {{%Large\\*|ptr}} {{.*}})\n     f_va_callee(\n         1,\n         2i32,\n@@ -184,6 +184,6 @@ pub unsafe extern \"C\" fn f_va_caller() {\n         SmallAligned { a: 11 },\n         Large { a: 12, b: 13, c: 14, d: 15 },\n     );\n-    // CHECK: call signext i32 (i32, ...) @f_va_callee(i32 signext 1, i32 signext 2, i32 signext 3, i32 signext 4, i128 {{.*}}, i32 signext 6, i32 signext 7, i32 8, i32 9)\n+    // CHECK: call noundef signext i32 (i32, ...) @f_va_callee(i32 noundef signext 1, i32 noundef signext 2, i32 noundef signext 3, i32 noundef signext 4, i128 {{.*}}, i32 noundef signext 6, i32 noundef signext 7, i32 noundef 8, i32 noundef 9)\n     f_va_callee(1, 2i32, 3i32, 4i32, SmallAligned { a: 5 }, 6i32, 7i32, 8i32, 9i32);\n }"}, {"sha": "82334693d58ed6cc44711b6059233a188a7eaaac", "filename": "tests/codegen/sanitizer-cfi-emit-type-checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-checks.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -11,7 +11,7 @@ pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n     // CHECK:       [[TT:%.+]] = call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"{{[[:print:]]+}}\")\n     // CHECK-NEXT:  br i1 [[TT]], label %type_test.pass, label %type_test.fail\n     // CHECK:       type_test.pass:\n-    // CHECK-NEXT:  {{%.+}} = call i32 %f(i32 %arg)\n+    // CHECK-NEXT:  {{%.+}} = call noundef i32 %f(i32 noundef %arg)\n     // CHECK-NEXT:  br label %bb1\n     // CHECK:       type_test.fail:\n     // CHECK-NEXT:  call void @llvm.trap()"}, {"sha": "43e520bd6cfd804ecefdda51fbe04d86298796cb", "filename": "tests/codegen/sanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -21,21 +21,21 @@ impl Copy for i32 {}\n pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n     // CHECK-LABEL: define{{.*}}foo\n     // CHECK-SAME: {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE1:[0-9]+]]\n-    // CHECK: call i32 %f(i32 %arg){{.*}}[ \"kcfi\"(i32 -1666898348) ]\n+    // CHECK: call noundef i32 %f(i32 noundef %arg){{.*}}[ \"kcfi\"(i32 -1666898348) ]\n     f(arg)\n }\n \n pub fn bar(f: fn(i32, i32) -> i32, arg1: i32, arg2: i32) -> i32 {\n     // CHECK-LABEL: define{{.*}}bar\n     // CHECK-SAME: {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE2:[0-9]+]]\n-    // CHECK: call i32 %f(i32 %arg1, i32 %arg2){{.*}}[ \"kcfi\"(i32 -1789026986) ]\n+    // CHECK: call noundef i32 %f(i32 noundef %arg1, i32 noundef %arg2){{.*}}[ \"kcfi\"(i32 -1789026986) ]\n     f(arg1, arg2)\n }\n \n pub fn baz(f: fn(i32, i32, i32) -> i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {\n     // CHECK-LABEL: define{{.*}}baz\n     // CHECK-SAME: {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE3:[0-9]+]]\n-    // CHECK: call i32 %f(i32 %arg1, i32 %arg2, i32 %arg3){{.*}}[ \"kcfi\"(i32 1248878270) ]\n+    // CHECK: call noundef i32 %f(i32 noundef %arg1, i32 noundef %arg2, i32 noundef %arg3){{.*}}[ \"kcfi\"(i32 1248878270) ]\n     f(arg1, arg2, arg3)\n }\n "}, {"sha": "899c67be6ce5647917d5ace0eb95f3bdf546ecf7", "filename": "tests/codegen/sanitizer-recover.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fsanitizer-recover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fsanitizer-recover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-recover.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -16,27 +16,27 @@\n // MSAN-RECOVER:     @__msan_keep_going = weak_odr {{.*}}constant i32 1\n // MSAN-RECOVER-LTO: @__msan_keep_going = weak_odr {{.*}}constant i32 1\n \n-// ASAN-LABEL: define dso_local i32 @penguin(\n+// ASAN-LABEL: define dso_local noundef i32 @penguin(\n // ASAN:         call void @__asan_report_load4(i64 %0)\n // ASAN:         unreachable\n // ASAN:       }\n //\n-// ASAN-RECOVER-LABEL: define dso_local i32 @penguin(\n+// ASAN-RECOVER-LABEL: define dso_local noundef i32 @penguin(\n // ASAN-RECOVER:         call void @__asan_report_load4_noabort(\n // ASAN-RECOVER-NOT:     unreachable\n // ASAN:               }\n //\n-// MSAN-LABEL: define dso_local i32 @penguin(\n+// MSAN-LABEL: define dso_local noundef i32 @penguin(\n // MSAN:         call void @__msan_warning{{(_with_origin_noreturn\\(i32 0\\)|_noreturn\\(\\))}}\n // MSAN:         unreachable\n // MSAN:       }\n //\n-// MSAN-RECOVER-LABEL: define dso_local i32 @penguin(\n+// MSAN-RECOVER-LABEL: define dso_local noundef i32 @penguin(\n // MSAN-RECOVER:         call void @__msan_warning{{(_with_origin\\(i32 0\\)|\\(\\))}}\n // MSAN-RECOVER-NOT:     unreachable\n // MSAN-RECOVER:       }\n //\n-// MSAN-RECOVER-LTO-LABEL: define dso_local i32 @penguin(\n+// MSAN-RECOVER-LTO-LABEL: define dso_local noundef i32 @penguin(\n // MSAN-RECOVER-LTO:          call void @__msan_warning{{(_with_origin\\(i32 0\\)|\\(\\))}}\n // MSAN-RECOVER-LTO-NOT:      unreachable\n // MSAN-RECOVER-LTO:       }"}, {"sha": "8e8365b6a673b6baa8dea7a34d293bc8e420f167", "filename": "tests/codegen/scalar-pair-bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fscalar-pair-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fscalar-pair-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fscalar-pair-bool.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -8,13 +8,13 @@ pub fn pair_bool_bool(pair: (bool, bool)) -> (bool, bool) {\n     pair\n }\n \n-// CHECK: define{{.*}}{ i8, i32 } @pair_bool_i32(i1 noundef zeroext %pair.0, i32 %pair.1)\n+// CHECK: define{{.*}}{ i8, i32 } @pair_bool_i32(i1 noundef zeroext %pair.0, i32 noundef %pair.1)\n #[no_mangle]\n pub fn pair_bool_i32(pair: (bool, i32)) -> (bool, i32) {\n     pair\n }\n \n-// CHECK: define{{.*}}{ i32, i8 } @pair_i32_bool(i32 %pair.0, i1 noundef zeroext %pair.1)\n+// CHECK: define{{.*}}{ i32, i8 } @pair_i32_bool(i32 noundef %pair.0, i1 noundef zeroext %pair.1)\n #[no_mangle]\n pub fn pair_i32_bool(pair: (i32, bool)) -> (i32, bool) {\n     pair"}, {"sha": "86acbfba6a0f3db8dd670bbc35fe103d149b4f00", "filename": "tests/codegen/some-abis-do-extend-params-to-32-bits.rs", "status": "modified", "additions": 74, "deletions": 74, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fsome-abis-do-extend-params-to-32-bits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fsome-abis-do-extend-params-to-32-bits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsome-abis-do-extend-params-to-32-bits.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -31,148 +31,148 @@\n // The patterns in this file are written in the style of a table to make the\n // uniformities and distinctions more apparent.\n //\n-//                  ZERO/SIGN-EXTENDING TO 32 BITS            NON-EXTENDING\n-//                  ==============================  =======================\n-// x86_64:          void @c_arg_u8(i8 zeroext %_a)\n-// i686:            void @c_arg_u8(i8 zeroext %_a)\n-// aarch64-apple:   void @c_arg_u8(i8 zeroext %_a)\n-// aarch64-windows:                                  void @c_arg_u8(i8 %_a)\n-// aarch64-linux:                                    void @c_arg_u8(i8 %_a)\n-// arm:             void @c_arg_u8(i8 zeroext %_a)\n-// riscv:           void @c_arg_u8(i8 zeroext %_a)\n+//                  ZERO/SIGN-EXTENDING TO 32 BITS                            NON-EXTENDING\n+//                  ======================================  ===============================\n+// x86_64:          void @c_arg_u8(i8 noundef zeroext %_a)\n+// i686:            void @c_arg_u8(i8 noundef zeroext %_a)\n+// aarch64-apple:   void @c_arg_u8(i8 noundef zeroext %_a)\n+// aarch64-windows:                                         void @c_arg_u8(i8 noundef %_a)\n+// aarch64-linux:                                           void @c_arg_u8(i8 noundef %_a)\n+// arm:             void @c_arg_u8(i8 noundef zeroext %_a)\n+// riscv:           void @c_arg_u8(i8 noundef zeroext %_a)\n #[no_mangle] pub extern \"C\" fn c_arg_u8(_a: u8) { }\n \n-// x86_64:          void @c_arg_u16(i16 zeroext %_a)\n-// i686:            void @c_arg_u16(i16 zeroext %_a)\n-// aarch64-apple:   void @c_arg_u16(i16 zeroext %_a)\n-// aarch64-windows:                                 void @c_arg_u16(i16 %_a)\n-// aarch64-linux:                                   void @c_arg_u16(i16 %_a)\n-// arm:             void @c_arg_u16(i16 zeroext %_a)\n-// riscv:           void @c_arg_u16(i16 zeroext %_a)\n+// x86_64:          void @c_arg_u16(i16 noundef zeroext %_a)\n+// i686:            void @c_arg_u16(i16 noundef zeroext %_a)\n+// aarch64-apple:   void @c_arg_u16(i16 noundef zeroext %_a)\n+// aarch64-windows:                                         void @c_arg_u16(i16 noundef %_a)\n+// aarch64-linux:                                           void @c_arg_u16(i16 noundef %_a)\n+// arm:             void @c_arg_u16(i16 noundef zeroext %_a)\n+// riscv:           void @c_arg_u16(i16 noundef zeroext %_a)\n #[no_mangle] pub extern \"C\" fn c_arg_u16(_a: u16) { }\n \n-// x86_64:          void @c_arg_u32(i32 %_a)\n-// i686:            void @c_arg_u32(i32 %_a)\n-// aarch64-apple:   void @c_arg_u32(i32 %_a)\n-// aarch64-windows:                                 void @c_arg_u32(i32 %_a)\n-// aarch64-linux:                                   void @c_arg_u32(i32 %_a)\n-// arm:             void @c_arg_u32(i32 %_a)\n-// riscv:           void @c_arg_u32(i32 signext %_a)\n+// x86_64:          void @c_arg_u32(i32 noundef %_a)\n+// i686:            void @c_arg_u32(i32 noundef %_a)\n+// aarch64-apple:   void @c_arg_u32(i32 noundef %_a)\n+// aarch64-windows:                                         void @c_arg_u32(i32 noundef %_a)\n+// aarch64-linux:                                           void @c_arg_u32(i32 noundef %_a)\n+// arm:             void @c_arg_u32(i32 noundef %_a)\n+// riscv:           void @c_arg_u32(i32 noundef signext %_a)\n #[no_mangle] pub extern \"C\" fn c_arg_u32(_a: u32) { }\n \n-// x86_64:          void @c_arg_u64(i64 %_a)\n-// i686:            void @c_arg_u64(i64 %_a)\n-// aarch64-apple:   void @c_arg_u64(i64 %_a)\n-// aarch64-windows:                                 void @c_arg_u64(i64 %_a)\n-// aarch64-linux:                                   void @c_arg_u64(i64 %_a)\n-// arm:             void @c_arg_u64(i64 %_a)\n-// riscv:           void @c_arg_u64(i64 %_a)\n+// x86_64:          void @c_arg_u64(i64 noundef %_a)\n+// i686:            void @c_arg_u64(i64 noundef %_a)\n+// aarch64-apple:   void @c_arg_u64(i64 noundef %_a)\n+// aarch64-windows:                                         void @c_arg_u64(i64 noundef %_a)\n+// aarch64-linux:                                           void @c_arg_u64(i64 noundef %_a)\n+// arm:             void @c_arg_u64(i64 noundef %_a)\n+// riscv:           void @c_arg_u64(i64 noundef %_a)\n #[no_mangle] pub extern \"C\" fn c_arg_u64(_a: u64) { }\n \n-// x86_64:          void @c_arg_i8(i8 signext %_a)\n-// i686:            void @c_arg_i8(i8 signext %_a)\n-// aarch64-apple:   void @c_arg_i8(i8 signext %_a)\n-// aarch64-windows:                                  void @c_arg_i8(i8 %_a)\n-// aarch64-linux:                                    void @c_arg_i8(i8 %_a)\n-// arm:             void @c_arg_i8(i8 signext %_a)\n-// riscv:           void @c_arg_i8(i8 signext %_a)\n+// x86_64:          void @c_arg_i8(i8 noundef signext %_a)\n+// i686:            void @c_arg_i8(i8 noundef signext %_a)\n+// aarch64-apple:   void @c_arg_i8(i8 noundef signext %_a)\n+// aarch64-windows:                                         void @c_arg_i8(i8 noundef %_a)\n+// aarch64-linux:                                           void @c_arg_i8(i8 noundef %_a)\n+// arm:             void @c_arg_i8(i8 noundef signext %_a)\n+// riscv:           void @c_arg_i8(i8 noundef signext %_a)\n #[no_mangle] pub extern \"C\" fn c_arg_i8(_a: i8) { }\n \n-// x86_64:          void @c_arg_i16(i16 signext %_a)\n-// i686:            void @c_arg_i16(i16 signext %_a)\n-// aarch64-apple:   void @c_arg_i16(i16 signext %_a)\n-// aarch64-windows:                                 void @c_arg_i16(i16 %_a)\n-// aarch64-linux:                                   void @c_arg_i16(i16 %_a)\n-// arm:             void @c_arg_i16(i16 signext %_a)\n-// riscv:           void @c_arg_i16(i16 signext %_a)\n+// x86_64:          void @c_arg_i16(i16 noundef signext %_a)\n+// i686:            void @c_arg_i16(i16 noundef signext %_a)\n+// aarch64-apple:   void @c_arg_i16(i16 noundef signext %_a)\n+// aarch64-windows:                                         void @c_arg_i16(i16 noundef %_a)\n+// aarch64-linux:                                           void @c_arg_i16(i16 noundef %_a)\n+// arm:             void @c_arg_i16(i16 noundef signext %_a)\n+// riscv:           void @c_arg_i16(i16 noundef signext %_a)\n #[no_mangle] pub extern \"C\" fn c_arg_i16(_a: i16) { }\n \n-// x86_64:          void @c_arg_i32(i32 %_a)\n-// i686:            void @c_arg_i32(i32 %_a)\n-// aarch64-apple:   void @c_arg_i32(i32 %_a)\n-// aarch64-windows:                                 void @c_arg_i32(i32 %_a)\n-// aarch64-linux:                                   void @c_arg_i32(i32 %_a)\n-// arm:             void @c_arg_i32(i32 %_a)\n-// riscv:           void @c_arg_i32(i32 signext %_a)\n+// x86_64:          void @c_arg_i32(i32 noundef %_a)\n+// i686:            void @c_arg_i32(i32 noundef %_a)\n+// aarch64-apple:   void @c_arg_i32(i32 noundef %_a)\n+// aarch64-windows:                                         void @c_arg_i32(i32 noundef %_a)\n+// aarch64-linux:                                           void @c_arg_i32(i32 noundef %_a)\n+// arm:             void @c_arg_i32(i32 noundef %_a)\n+// riscv:           void @c_arg_i32(i32 noundef signext %_a)\n #[no_mangle] pub extern \"C\" fn c_arg_i32(_a: i32) { }\n \n-// x86_64:          void @c_arg_i64(i64 %_a)\n-// i686:            void @c_arg_i64(i64 %_a)\n-// aarch64-apple:   void @c_arg_i64(i64 %_a)\n-// aarch64-windows:                                 void @c_arg_i64(i64 %_a)\n-// aarch64-linux:                                   void @c_arg_i64(i64 %_a)\n-// arm:             void @c_arg_i64(i64 %_a)\n-// riscv:           void @c_arg_i64(i64 %_a)\n+// x86_64:          void @c_arg_i64(i64 noundef %_a)\n+// i686:            void @c_arg_i64(i64 noundef %_a)\n+// aarch64-apple:   void @c_arg_i64(i64 noundef %_a)\n+// aarch64-windows:                                         void @c_arg_i64(i64 noundef %_a)\n+// aarch64-linux:                                           void @c_arg_i64(i64 noundef %_a)\n+// arm:             void @c_arg_i64(i64 noundef %_a)\n+// riscv:           void @c_arg_i64(i64 noundef %_a)\n #[no_mangle] pub extern \"C\" fn c_arg_i64(_a: i64) { }\n \n // x86_64:          zeroext i8 @c_ret_u8()\n // i686:            zeroext i8 @c_ret_u8()\n // aarch64-apple:   zeroext i8 @c_ret_u8()\n-// aarch64-windows:                                 i8 @c_ret_u8()\n-// aarch64-linux:                                   i8 @c_ret_u8()\n+// aarch64-windows:                                         i8 @c_ret_u8()\n+// aarch64-linux:                                           i8 @c_ret_u8()\n // arm:             zeroext i8 @c_ret_u8()\n // riscv:           zeroext i8 @c_ret_u8()\n #[no_mangle] pub extern \"C\" fn c_ret_u8() -> u8 { 0 }\n \n // x86_64:          zeroext i16 @c_ret_u16()\n // i686:            zeroext i16 @c_ret_u16()\n // aarch64-apple:   zeroext i16 @c_ret_u16()\n-// aarch64-windows:                                 i16 @c_ret_u16()\n-// aarch64-linux:                                   i16 @c_ret_u16()\n+// aarch64-windows:                                         i16 @c_ret_u16()\n+// aarch64-linux:                                           i16 @c_ret_u16()\n // arm:             zeroext i16 @c_ret_u16()\n // riscv:           zeroext i16 @c_ret_u16()\n #[no_mangle] pub extern \"C\" fn c_ret_u16() -> u16 { 0 }\n \n // x86_64:          i32 @c_ret_u32()\n // i686:            i32 @c_ret_u32()\n // aarch64-apple:   i32 @c_ret_u32()\n-// aarch64-windows:                                 i32 @c_ret_u32()\n-// aarch64-linux:                                   i32 @c_ret_u32()\n+// aarch64-windows:                                         i32 @c_ret_u32()\n+// aarch64-linux:                                           i32 @c_ret_u32()\n // arm:             i32 @c_ret_u32()\n // riscv:           signext i32 @c_ret_u32()\n #[no_mangle] pub extern \"C\" fn c_ret_u32() -> u32 { 0 }\n \n // x86_64:          i64 @c_ret_u64()\n // i686:            i64 @c_ret_u64()\n // aarch64-apple:   i64 @c_ret_u64()\n-// aarch64-windows:                                 i64 @c_ret_u64()\n-// aarch64-linux:                                   i64 @c_ret_u64()\n+// aarch64-windows:                                         i64 @c_ret_u64()\n+// aarch64-linux:                                           i64 @c_ret_u64()\n // arm:             i64 @c_ret_u64()\n // riscv:           i64 @c_ret_u64()\n #[no_mangle] pub extern \"C\" fn c_ret_u64() -> u64 { 0 }\n \n // x86_64:          signext i8 @c_ret_i8()\n // i686:            signext i8 @c_ret_i8()\n // aarch64-apple:   signext i8 @c_ret_i8()\n-// aarch64-windows:                                 i8 @c_ret_i8()\n-// aarch64-linux:                                   i8 @c_ret_i8()\n+// aarch64-windows:                                         i8 @c_ret_i8()\n+// aarch64-linux:                                           i8 @c_ret_i8()\n // arm:             signext i8 @c_ret_i8()\n // riscv:           signext i8 @c_ret_i8()\n #[no_mangle] pub extern \"C\" fn c_ret_i8() -> i8 { 0 }\n \n // x86_64:          signext i16 @c_ret_i16()\n // i686:            signext i16 @c_ret_i16()\n // aarch64-apple:   signext i16 @c_ret_i16()\n-// aarch64-windows:                                 i16 @c_ret_i16()\n-// aarch64-linux:                                   i16 @c_ret_i16()\n+// aarch64-windows:                                         i16 @c_ret_i16()\n+// aarch64-linux:                                           i16 @c_ret_i16()\n // arm:             signext i16 @c_ret_i16()\n // riscv:           signext i16 @c_ret_i16()\n #[no_mangle] pub extern \"C\" fn c_ret_i16() -> i16 { 0 }\n \n // x86_64:          i32 @c_ret_i32()\n // i686:            i32 @c_ret_i32()\n // aarch64-apple:   i32 @c_ret_i32()\n-// aarch64-windows:                                 i32 @c_ret_i32()\n-// aarch64-linux:                                   i32 @c_ret_i32()\n+// aarch64-windows:                                         i32 @c_ret_i32()\n+// aarch64-linux:                                           i32 @c_ret_i32()\n // arm:             i32 @c_ret_i32()\n // riscv:           signext i32 @c_ret_i32()\n #[no_mangle] pub extern \"C\" fn c_ret_i32() -> i32 { 0 }\n \n // x86_64:          i64 @c_ret_i64()\n // i686:            i64 @c_ret_i64()\n // aarch64-apple:   i64 @c_ret_i64()\n-// aarch64-windows:                                 i64 @c_ret_i64()\n-// aarch64-linux:                                   i64 @c_ret_i64()\n+// aarch64-windows:                                         i64 @c_ret_i64()\n+// aarch64-linux:                                           i64 @c_ret_i64()\n // arm:             i64 @c_ret_i64()\n // riscv:           i64 @c_ret_i64()\n #[no_mangle] pub extern \"C\" fn c_ret_i64() -> i64 { 0 }"}, {"sha": "260dcbac0fc4f33919ca7d43889f3b13d901ef07", "filename": "tests/codegen/transmute-scalar.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Ftransmute-scalar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Ftransmute-scalar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Ftransmute-scalar.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -5,7 +5,7 @@\n // FIXME(eddyb) all of these tests show memory stores and loads, even after a\n // scalar `bitcast`, more special-casing is required to remove `alloca` usage.\n \n-// CHECK-LABEL: define{{.*}}i32 @f32_to_bits(float %x)\n+// CHECK-LABEL: define{{.*}}i32 @f32_to_bits(float noundef %x)\n // CHECK: store i32 %{{.*}}, {{.*}} %0\n // CHECK-NEXT: %[[RES:.*]] = load i32, {{.*}} %0\n // CHECK: ret i32 %[[RES]]\n@@ -24,7 +24,7 @@ pub fn bool_to_byte(b: bool) -> u8 {\n     unsafe { std::mem::transmute(b) }\n }\n \n-// CHECK-LABEL: define{{.*}}noundef zeroext i1 @byte_to_bool(i8 %byte)\n+// CHECK-LABEL: define{{.*}}noundef zeroext i1 @byte_to_bool(i8 noundef %byte)\n // CHECK: %1 = trunc i8 %byte to i1\n // CHECK-NEXT: %2 = zext i1 %1 to i8\n // CHECK-NEXT: store i8 %2, {{.*}} %0\n@@ -36,7 +36,7 @@ pub unsafe fn byte_to_bool(byte: u8) -> bool {\n     std::mem::transmute(byte)\n }\n \n-// CHECK-LABEL: define{{.*}}{{i8\\*|ptr}} @ptr_to_ptr({{i16\\*|ptr}} %p)\n+// CHECK-LABEL: define{{.*}}{{i8\\*|ptr}} @ptr_to_ptr({{i16\\*|ptr}} noundef %p)\n // CHECK: store {{i8\\*|ptr}} %{{.*}}, {{.*}} %0\n // CHECK-NEXT: %[[RES:.*]] = load {{i8\\*|ptr}}, {{.*}} %0\n // CHECK: ret {{i8\\*|ptr}} %[[RES]]\n@@ -52,7 +52,7 @@ pub fn ptr_to_ptr(p: *mut u16) -> *mut u8 {\n // Tests below show the non-special-cased behavior (with the possible\n // future special-cased instructions in the \"NOTE(eddyb)\" comments).\n \n-// CHECK: define{{.*}}[[USIZE:i[0-9]+]] @ptr_to_int({{i16\\*|ptr}} %p)\n+// CHECK: define{{.*}}[[USIZE:i[0-9]+]] @ptr_to_int({{i16\\*|ptr}} noundef %p)\n \n // NOTE(eddyb) see above, the following two CHECK lines should ideally be this:\n //        %2 = ptrtoint i16* %p to [[USIZE]]\n@@ -66,7 +66,7 @@ pub fn ptr_to_int(p: *mut u16) -> usize {\n     unsafe { std::mem::transmute(p) }\n }\n \n-// CHECK: define{{.*}}{{i16\\*|ptr}} @int_to_ptr([[USIZE]] %i)\n+// CHECK: define{{.*}}{{i16\\*|ptr}} @int_to_ptr([[USIZE]] noundef %i)\n \n // NOTE(eddyb) see above, the following two CHECK lines should ideally be this:\n //        %2 = inttoptr [[USIZE]] %i to i16*"}, {"sha": "ad33d6643c29654c6d00b2f2269579a4624d422a", "filename": "tests/codegen/tuple-layout-opt.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Ftuple-layout-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Ftuple-layout-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Ftuple-layout-opt.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -6,31 +6,31 @@\n #![crate_type=\"lib\"]\n \n type ScalarZstLast = (u128, ());\n-// CHECK: define i128 @test_ScalarZstLast(i128 %_1)\n+// CHECK: define noundef i128 @test_ScalarZstLast(i128 noundef %_1)\n #[no_mangle]\n pub fn test_ScalarZstLast(_: ScalarZstLast) -> ScalarZstLast { loop {} }\n \n type ScalarZstFirst = ((), u128);\n-// CHECK: define i128 @test_ScalarZstFirst(i128 %_1)\n+// CHECK: define noundef i128 @test_ScalarZstFirst(i128 noundef %_1)\n #[no_mangle]\n pub fn test_ScalarZstFirst(_: ScalarZstFirst) -> ScalarZstFirst { loop {} }\n \n type ScalarPairZstLast = (u8, u128, ());\n-// CHECK: define { i128, i8 } @test_ScalarPairZstLast(i128 %_1.0, i8 %_1.1)\n+// CHECK: define { i128, i8 } @test_ScalarPairZstLast(i128 noundef %_1.0, i8 noundef %_1.1)\n #[no_mangle]\n pub fn test_ScalarPairZstLast(_: ScalarPairZstLast) -> ScalarPairZstLast { loop {} }\n \n type ScalarPairZstFirst = ((), u8, u128);\n-// CHECK: define { i8, i128 } @test_ScalarPairZstFirst(i8 %_1.0, i128 %_1.1)\n+// CHECK: define { i8, i128 } @test_ScalarPairZstFirst(i8 noundef %_1.0, i128 noundef %_1.1)\n #[no_mangle]\n pub fn test_ScalarPairZstFirst(_: ScalarPairZstFirst) -> ScalarPairZstFirst { loop {} }\n \n type ScalarPairLotsOfZsts = ((), u8, (), u128, ());\n-// CHECK: define { i128, i8 } @test_ScalarPairLotsOfZsts(i128 %_1.0, i8 %_1.1)\n+// CHECK: define { i128, i8 } @test_ScalarPairLotsOfZsts(i128 noundef %_1.0, i8 noundef %_1.1)\n #[no_mangle]\n pub fn test_ScalarPairLotsOfZsts(_: ScalarPairLotsOfZsts) -> ScalarPairLotsOfZsts { loop {} }\n \n type ScalarPairLottaNesting = (((), ((), u8, (), u128, ())), ());\n-// CHECK: define { i128, i8 } @test_ScalarPairLottaNesting(i128 %_1.0, i8 %_1.1)\n+// CHECK: define { i128, i8 } @test_ScalarPairLottaNesting(i128 noundef %_1.0, i8 noundef %_1.1)\n #[no_mangle]\n pub fn test_ScalarPairLottaNesting(_: ScalarPairLottaNesting) -> ScalarPairLottaNesting { loop {} }"}, {"sha": "d4715efad73c0fe0855a3a22314dd662d735861d", "filename": "tests/codegen/var-names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fvar-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fvar-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fvar-names.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -2,7 +2,7 @@\n \n #![crate_type = \"lib\"]\n \n-// CHECK-LABEL: define{{.*}}i32 @test(i32 %a, i32 %b)\n+// CHECK-LABEL: define{{.*}}i32 @test(i32 noundef %a, i32 noundef %b)\n #[no_mangle]\n pub fn test(a: u32, b: u32) -> u32 {\n     let c = a + b;"}, {"sha": "27e435e9cf042c92dcd9c70feff0dc31937c9846", "filename": "tests/codegen/zst-offset.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fzst-offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967/tests%2Fcodegen%2Fzst-offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fzst-offset.rs?ref=645c0fddd2e0446cc0e6eecd8a78de4b5ab5a967", "patch": "@@ -4,7 +4,7 @@\n #![feature(repr_simd)]\n \n // Hack to get the correct size for the length part in slices\n-// CHECK: @helper([[USIZE:i[0-9]+]] %_1)\n+// CHECK: @helper([[USIZE:i[0-9]+]] noundef %_1)\n #[no_mangle]\n pub fn helper(_: usize) {\n }"}]}