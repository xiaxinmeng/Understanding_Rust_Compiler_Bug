{"sha": "6d54e0eb6be81bd1a880f44ed68a180275cfe329", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNTRlMGViNmJlODFiZDFhODgwZjQ0ZWQ2OGExODAyNzVjZmUzMjk=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-10-04T14:44:31Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-10-05T10:58:04Z"}, "message": "emit !nonnull metadata on loaded fat pointers when possible\n\ncc #36920 (in addition to LLVM PR30597, should fix the &&[i32] case)", "tree": {"sha": "ec6c332970b970270e3498c1ee8d6b0ecd0e2780", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec6c332970b970270e3498c1ee8d6b0ecd0e2780"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d54e0eb6be81bd1a880f44ed68a180275cfe329", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d54e0eb6be81bd1a880f44ed68a180275cfe329", "html_url": "https://github.com/rust-lang/rust/commit/6d54e0eb6be81bd1a880f44ed68a180275cfe329", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d54e0eb6be81bd1a880f44ed68a180275cfe329/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "506f80730fa97ebb47e5a19d8692b1fabdc1fbef", "url": "https://api.github.com/repos/rust-lang/rust/commits/506f80730fa97ebb47e5a19d8692b1fabdc1fbef", "html_url": "https://github.com/rust-lang/rust/commit/506f80730fa97ebb47e5a19d8692b1fabdc1fbef"}], "stats": {"total": 99, "additions": 60, "deletions": 39}, "files": [{"sha": "2dde81bbaa319d537b0ca8ca42732994c282ae39", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6d54e0eb6be81bd1a880f44ed68a180275cfe329/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d54e0eb6be81bd1a880f44ed68a180275cfe329/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=6d54e0eb6be81bd1a880f44ed68a180275cfe329", "patch": "@@ -183,6 +183,14 @@ pub fn get_dataptr(bcx: Block, fat_ptr: ValueRef) -> ValueRef {\n     StructGEP(bcx, fat_ptr, abi::FAT_PTR_ADDR)\n }\n \n+pub fn get_meta_builder(b: &Builder, fat_ptr: ValueRef) -> ValueRef {\n+    b.struct_gep(fat_ptr, abi::FAT_PTR_EXTRA)\n+}\n+\n+pub fn get_dataptr_builder(b: &Builder, fat_ptr: ValueRef) -> ValueRef {\n+    b.struct_gep(fat_ptr, abi::FAT_PTR_ADDR)\n+}\n+\n fn require_alloc_fn<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, info_ty: Ty<'tcx>, it: LangItem) -> DefId {\n     match bcx.tcx().lang_items.require(it) {\n         Ok(id) => id,\n@@ -708,11 +716,36 @@ pub fn store_fat_ptr<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n \n pub fn load_fat_ptr<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                                 src: ValueRef,\n-                                _ty: Ty<'tcx>)\n-                                -> (ValueRef, ValueRef) {\n-    // FIXME: emit metadata\n-    (Load(cx, get_dataptr(cx, src)),\n-     Load(cx, get_meta(cx, src)))\n+                                ty: Ty<'tcx>)\n+                                -> (ValueRef, ValueRef)\n+{\n+    if cx.unreachable.get() {\n+        // FIXME: remove me\n+        return (Load(cx, get_dataptr(cx, src)),\n+                Load(cx, get_meta(cx, src)));\n+    }\n+\n+    load_fat_ptr_builder(&B(cx), src, ty)\n+}\n+\n+pub fn load_fat_ptr_builder<'a, 'tcx>(\n+    b: &Builder<'a, 'tcx>,\n+    src: ValueRef,\n+    t: Ty<'tcx>)\n+    -> (ValueRef, ValueRef)\n+{\n+\n+    let ptr = get_dataptr_builder(b, src);\n+    let ptr = if t.is_region_ptr() || t.is_unique() {\n+        b.load_nonnull(ptr)\n+    } else {\n+        b.load(ptr)\n+    };\n+\n+    // FIXME: emit metadata on `meta`.\n+    let meta = b.load(get_meta_builder(b, src));\n+\n+    (ptr, meta)\n }\n \n pub fn from_immediate(bcx: Block, val: ValueRef) -> ValueRef {"}, {"sha": "9edb489decc735f3c361c19b00940d046e528799", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d54e0eb6be81bd1a880f44ed68a180275cfe329/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d54e0eb6be81bd1a880f44ed68a180275cfe329/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=6d54e0eb6be81bd1a880f44ed68a180275cfe329", "patch": "@@ -35,7 +35,7 @@ use syntax::parse::token;\n use super::{MirContext, LocalRef};\n use super::analyze::CleanupKind;\n use super::constant::Const;\n-use super::lvalue::{LvalueRef, load_fat_ptr};\n+use super::lvalue::{LvalueRef};\n use super::operand::OperandRef;\n use super::operand::OperandValue::*;\n \n@@ -703,7 +703,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 for (n, &ty) in arg_types.iter().enumerate() {\n                     let ptr = adt::trans_field_ptr_builder(bcx, tuple.ty, base, Disr(0), n);\n                     let val = if common::type_is_fat_ptr(bcx.tcx(), ty) {\n-                        let (lldata, llextra) = load_fat_ptr(bcx, ptr);\n+                        let (lldata, llextra) = base::load_fat_ptr_builder(bcx, ptr, ty);\n                         Pair(lldata, llextra)\n                     } else {\n                         // trans_argument will load this if it needs to"}, {"sha": "8e65eac2e80894943b86e3cfe836346c6e3008cd", "filename": "src/librustc_trans/mir/lvalue.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6d54e0eb6be81bd1a880f44ed68a180275cfe329/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d54e0eb6be81bd1a880f44ed68a180275cfe329/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Flvalue.rs?ref=6d54e0eb6be81bd1a880f44ed68a180275cfe329", "patch": "@@ -13,10 +13,8 @@ use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::mir::repr as mir;\n use rustc::mir::tcx::LvalueTy;\n use rustc_data_structures::indexed_vec::Idx;\n-use abi;\n use adt;\n use base;\n-use builder::Builder;\n use common::{self, BlockAndBuilder, CrateContext, C_uint, C_undef};\n use consts;\n use machine;\n@@ -69,18 +67,6 @@ impl<'tcx> LvalueRef<'tcx> {\n     }\n }\n \n-pub fn get_meta(b: &Builder, fat_ptr: ValueRef) -> ValueRef {\n-    b.struct_gep(fat_ptr, abi::FAT_PTR_EXTRA)\n-}\n-\n-pub fn get_dataptr(b: &Builder, fat_ptr: ValueRef) -> ValueRef {\n-    b.struct_gep(fat_ptr, abi::FAT_PTR_ADDR)\n-}\n-\n-pub fn load_fat_ptr(b: &Builder, fat_ptr: ValueRef) -> (ValueRef, ValueRef) {\n-    (b.load(get_dataptr(b, fat_ptr)), b.load(get_meta(b, fat_ptr)))\n-}\n-\n impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n     pub fn trans_lvalue(&mut self,\n                         bcx: &BlockAndBuilder<'bcx, 'tcx>,"}, {"sha": "d5828f7c56c25ec2b382145ae221e1c2be56bea0", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6d54e0eb6be81bd1a880f44ed68a180275cfe329/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d54e0eb6be81bd1a880f44ed68a180275cfe329/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=6d54e0eb6be81bd1a880f44ed68a180275cfe329", "patch": "@@ -34,7 +34,7 @@ use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n \n pub use self::constant::trans_static_initializer;\n \n-use self::lvalue::{LvalueRef, get_dataptr, get_meta};\n+use self::lvalue::{LvalueRef};\n use rustc::mir::traversal;\n \n use self::operand::{OperandRef, OperandValue};\n@@ -384,8 +384,10 @@ fn arg_local_refs<'bcx, 'tcx>(bcx: &BlockAndBuilder<'bcx, 'tcx>,\n                     // they are the two sub-fields of a single aggregate field.\n                     let meta = &fcx.fn_ty.args[idx];\n                     idx += 1;\n-                    arg.store_fn_arg(bcx, &mut llarg_idx, get_dataptr(bcx, dst));\n-                    meta.store_fn_arg(bcx, &mut llarg_idx, get_meta(bcx, dst));\n+                    arg.store_fn_arg(bcx, &mut llarg_idx,\n+                                     base::get_dataptr_builder(bcx, dst));\n+                    meta.store_fn_arg(bcx, &mut llarg_idx,\n+                                      base::get_meta_builder(bcx, dst));\n                 } else {\n                     arg.store_fn_arg(bcx, &mut llarg_idx, dst);\n                 }\n@@ -466,8 +468,10 @@ fn arg_local_refs<'bcx, 'tcx>(bcx: &BlockAndBuilder<'bcx, 'tcx>,\n                 // so make an alloca to store them in.\n                 let meta = &fcx.fn_ty.args[idx];\n                 idx += 1;\n-                arg.store_fn_arg(bcx, &mut llarg_idx, get_dataptr(bcx, lltemp));\n-                meta.store_fn_arg(bcx, &mut llarg_idx, get_meta(bcx, lltemp));\n+                arg.store_fn_arg(bcx, &mut llarg_idx,\n+                                 base::get_dataptr_builder(bcx, lltemp));\n+                meta.store_fn_arg(bcx, &mut llarg_idx,\n+                                  base::get_meta_builder(bcx, lltemp));\n             } else  {\n                 // otherwise, arg is passed by value, so make a\n                 // temporary and store it there"}, {"sha": "c9d83a3375258df830c0141cb3d38cadb886b40f", "filename": "src/librustc_trans/mir/operand.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6d54e0eb6be81bd1a880f44ed68a180275cfe329/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d54e0eb6be81bd1a880f44ed68a180275cfe329/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Foperand.rs?ref=6d54e0eb6be81bd1a880f44ed68a180275cfe329", "patch": "@@ -143,20 +143,18 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n     {\n         debug!(\"trans_load: {:?} @ {:?}\", Value(llval), ty);\n \n-        let val = if common::type_is_imm_pair(bcx.ccx(), ty) {\n+        let val = if common::type_is_fat_ptr(bcx.tcx(), ty) {\n+            let (lldata, llextra) = base::load_fat_ptr_builder(bcx, llval, ty);\n+            OperandValue::Pair(lldata, llextra)\n+        } else if common::type_is_imm_pair(bcx.ccx(), ty) {\n+            let [a_ty, b_ty] = common::type_pair_fields(bcx.ccx(), ty).unwrap();\n             let a_ptr = bcx.struct_gep(llval, 0);\n             let b_ptr = bcx.struct_gep(llval, 1);\n \n-            // This is None only for fat pointers, which don't\n-            // need any special load-time behavior anyway.\n-            let pair_fields = common::type_pair_fields(bcx.ccx(), ty);\n-            let (a, b) = if let Some([a_ty, b_ty]) = pair_fields {\n-                (base::load_ty_builder(bcx, a_ptr, a_ty),\n-                 base::load_ty_builder(bcx, b_ptr, b_ty))\n-            } else {\n-                (bcx.load(a_ptr), bcx.load(b_ptr))\n-            };\n-            OperandValue::Pair(a, b)\n+            OperandValue::Pair(\n+                base::load_ty_builder(bcx, a_ptr, a_ty),\n+                base::load_ty_builder(bcx, b_ptr, b_ty)\n+            )\n         } else if common::type_is_immediate(bcx.ccx(), ty) {\n             OperandValue::Immediate(base::load_ty_builder(bcx, llval, ty))\n         } else {"}, {"sha": "53538f9fc85fc0eeb862d1f3a2ca07ebf30d190d", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d54e0eb6be81bd1a880f44ed68a180275cfe329/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d54e0eb6be81bd1a880f44ed68a180275cfe329/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=6d54e0eb6be81bd1a880f44ed68a180275cfe329", "patch": "@@ -28,7 +28,7 @@ use Disr;\n use super::MirContext;\n use super::constant::const_scalar_checked_binop;\n use super::operand::{OperandRef, OperandValue};\n-use super::lvalue::{LvalueRef, get_dataptr};\n+use super::lvalue::{LvalueRef};\n \n impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n     pub fn trans_rvalue(&mut self,\n@@ -98,7 +98,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 let tr_elem = self.trans_operand(&bcx, elem);\n                 let size = count.value.as_u64(bcx.tcx().sess.target.uint_type);\n                 let size = C_uint(bcx.ccx(), size);\n-                let base = get_dataptr(&bcx, dest.llval);\n+                let base = base::get_dataptr_builder(&bcx, dest.llval);\n                 let bcx = bcx.map_block(|block| {\n                     tvec::slice_for_each(block, base, tr_elem.ty, size, |block, llslot| {\n                         self.store_operand_direct(block, llslot, tr_elem);"}]}