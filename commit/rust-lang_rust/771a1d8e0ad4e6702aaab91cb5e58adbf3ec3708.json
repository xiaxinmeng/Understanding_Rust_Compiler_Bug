{"sha": "771a1d8e0ad4e6702aaab91cb5e58adbf3ec3708", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MWExZDhlMGFkNGU2NzAyYWFhYjkxY2I1ZTU4YWRiZjNlYzM3MDg=", "commit": {"author": {"name": "Eduardo S\u00e1nchez Mu\u00f1oz", "email": "esm@eduardosm.net", "date": "2020-06-24T16:17:27Z"}, "committer": {"name": "Eduardo S\u00e1nchez Mu\u00f1oz", "email": "esm@eduardosm.net", "date": "2020-06-24T16:17:27Z"}, "message": "Make `std::panicking::panic_count::is_zero` inline and move the slow path into a separate cold function.", "tree": {"sha": "f0c9494c862b6c86f6ee0b0c4d59018886a3d853", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0c9494c862b6c86f6ee0b0c4d59018886a3d853"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/771a1d8e0ad4e6702aaab91cb5e58adbf3ec3708", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/771a1d8e0ad4e6702aaab91cb5e58adbf3ec3708", "html_url": "https://github.com/rust-lang/rust/commit/771a1d8e0ad4e6702aaab91cb5e58adbf3ec3708", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/771a1d8e0ad4e6702aaab91cb5e58adbf3ec3708/comments", "author": {"login": "eduardosm", "id": 761151, "node_id": "MDQ6VXNlcjc2MTE1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/761151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eduardosm", "html_url": "https://github.com/eduardosm", "followers_url": "https://api.github.com/users/eduardosm/followers", "following_url": "https://api.github.com/users/eduardosm/following{/other_user}", "gists_url": "https://api.github.com/users/eduardosm/gists{/gist_id}", "starred_url": "https://api.github.com/users/eduardosm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eduardosm/subscriptions", "organizations_url": "https://api.github.com/users/eduardosm/orgs", "repos_url": "https://api.github.com/users/eduardosm/repos", "events_url": "https://api.github.com/users/eduardosm/events{/privacy}", "received_events_url": "https://api.github.com/users/eduardosm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eduardosm", "id": 761151, "node_id": "MDQ6VXNlcjc2MTE1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/761151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eduardosm", "html_url": "https://github.com/eduardosm", "followers_url": "https://api.github.com/users/eduardosm/followers", "following_url": "https://api.github.com/users/eduardosm/following{/other_user}", "gists_url": "https://api.github.com/users/eduardosm/gists{/gist_id}", "starred_url": "https://api.github.com/users/eduardosm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eduardosm/subscriptions", "organizations_url": "https://api.github.com/users/eduardosm/orgs", "repos_url": "https://api.github.com/users/eduardosm/repos", "events_url": "https://api.github.com/users/eduardosm/events{/privacy}", "received_events_url": "https://api.github.com/users/eduardosm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f03cf9916a1932f47b788a9de9256269cc172fe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f03cf9916a1932f47b788a9de9256269cc172fe9", "html_url": "https://github.com/rust-lang/rust/commit/f03cf9916a1932f47b788a9de9256269cc172fe9"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "9a5d5e2b5ae9f2944839b09dc283211bd16bbd4e", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/771a1d8e0ad4e6702aaab91cb5e58adbf3ec3708/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/771a1d8e0ad4e6702aaab91cb5e58adbf3ec3708/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=771a1d8e0ad4e6702aaab91cb5e58adbf3ec3708", "patch": "@@ -258,16 +258,25 @@ pub mod panic_count {\n         LOCAL_PANIC_COUNT.with(|c| c.get())\n     }\n \n+    #[inline]\n     pub fn is_zero() -> bool {\n         if GLOBAL_PANIC_COUNT.load(Ordering::Relaxed) == 0 {\n             // Fast path: if `GLOBAL_PANIC_COUNT` is zero, all threads\n             // (including the current one) will have `LOCAL_PANIC_COUNT`\n             // equal to zero, so TLS access can be avoided.\n             true\n         } else {\n-            LOCAL_PANIC_COUNT.with(|c| c.get() == 0)\n+            is_zero_slow_path()\n         }\n     }\n+\n+    // Slow path is in a separate function to reduce the amount of code\n+    // inlined from `is_zero`.\n+    #[inline(never)]\n+    #[cold]\n+    fn is_zero_slow_path() -> bool {\n+        LOCAL_PANIC_COUNT.with(|c| c.get() == 0)\n+    }\n }\n \n #[cfg(test)]\n@@ -350,6 +359,7 @@ pub unsafe fn r#try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>>\n }\n \n /// Determines whether the current thread is unwinding because of panic.\n+#[inline]\n pub fn panicking() -> bool {\n     !panic_count::is_zero()\n }"}]}