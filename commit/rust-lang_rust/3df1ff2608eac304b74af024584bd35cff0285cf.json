{"sha": "3df1ff2608eac304b74af024584bd35cff0285cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZjFmZjI2MDhlYWMzMDRiNzRhZjAyNDU4NGJkMzVjZmYwMjg1Y2Y=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-01-30T00:46:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-30T00:46:45Z"}, "message": "Rollup merge of #68640 - LeSeulArtichaut:doc-from-ip, r=steveklabnik\n\nDocument remaining undocumented `From` implementations for IPs\n\nSome `From` implementations were missing documentation. I added examples, I tried to be as close to existing examples as possible.\n\nRelated to #51430 (cc @skade)\n\nr? @steveklabnik", "tree": {"sha": "ba7b76d69530a06108e2e11ee7176f4a906b1735", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba7b76d69530a06108e2e11ee7176f4a906b1735"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3df1ff2608eac304b74af024584bd35cff0285cf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeMid1CRBK7hj4Ov3rIwAAdHIIACAPxZcTaxq0XiNC0qY7oyT+\nRC7N0z7GEmOaNh1rP34cbmbmj/wK2VM4jAE0653Xow9l0oLWtoaSN37330dwX92X\nXKtQBYqLwkpDi1PttAm720c84XTGLqu5kw4gbtkC9O7J51kzSc0umsoo3lJEWWsD\ngJ3JOUOLT6WsA3FqWwb81lO+g1iUXQjSqzMscQNvO9Fd6Qcn2YuXiygeBDwMtTTW\nhaOr1PN/EX3UoPhgf7dQPiD8ZMWlg222G9C8hOYImZr3UVgHFCw4W0XxE5qfWf7F\nzW8B2ErST4UYld8wQn0O3SgtzfrG1Urhulzmb9qMpW4SVvLrLQ5jAQSIDd2J5Mo=\n=nv7A\n-----END PGP SIGNATURE-----\n", "payload": "tree ba7b76d69530a06108e2e11ee7176f4a906b1735\nparent 4af33a9c2608383fea0bac87fc0205603833bf6f\nparent ab5e29689086d5368e8e526b0295c628bd17ae92\nauthor Dylan DPC <dylan.dpc@gmail.com> 1580345205 +0100\ncommitter GitHub <noreply@github.com> 1580345205 +0100\n\nRollup merge of #68640 - LeSeulArtichaut:doc-from-ip, r=steveklabnik\n\nDocument remaining undocumented `From` implementations for IPs\n\nSome `From` implementations were missing documentation. I added examples, I tried to be as close to existing examples as possible.\n\nRelated to #51430 (cc @skade)\n\nr? @steveklabnik\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3df1ff2608eac304b74af024584bd35cff0285cf", "html_url": "https://github.com/rust-lang/rust/commit/3df1ff2608eac304b74af024584bd35cff0285cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3df1ff2608eac304b74af024584bd35cff0285cf/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4af33a9c2608383fea0bac87fc0205603833bf6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4af33a9c2608383fea0bac87fc0205603833bf6f", "html_url": "https://github.com/rust-lang/rust/commit/4af33a9c2608383fea0bac87fc0205603833bf6f"}, {"sha": "ab5e29689086d5368e8e526b0295c628bd17ae92", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab5e29689086d5368e8e526b0295c628bd17ae92", "html_url": "https://github.com/rust-lang/rust/commit/ab5e29689086d5368e8e526b0295c628bd17ae92"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "200b00b119595e7038e1890082d7e24a4b3ece19", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/3df1ff2608eac304b74af024584bd35cff0285cf/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df1ff2608eac304b74af024584bd35cff0285cf/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=3df1ff2608eac304b74af024584bd35cff0285cf", "patch": "@@ -813,13 +813,41 @@ impl fmt::Display for IpAddr {\n \n #[stable(feature = \"ip_from_ip\", since = \"1.16.0\")]\n impl From<Ipv4Addr> for IpAddr {\n+    /// Copies this address to a new `IpAddr::V4`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{IpAddr, Ipv4Addr};\n+    ///\n+    /// let addr = Ipv4Addr::new(127, 0, 0, 1);\n+    ///\n+    /// assert_eq!(\n+    ///     IpAddr::V4(addr),\n+    ///     IpAddr::from(addr)\n+    /// )\n+    /// ```\n     fn from(ipv4: Ipv4Addr) -> IpAddr {\n         IpAddr::V4(ipv4)\n     }\n }\n \n #[stable(feature = \"ip_from_ip\", since = \"1.16.0\")]\n impl From<Ipv6Addr> for IpAddr {\n+    /// Copies this address to a new `IpAddr::V6`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{IpAddr, Ipv6Addr};\n+    ///\n+    /// let addr = Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff);\n+    ///\n+    /// assert_eq!(\n+    ///     IpAddr::V6(addr),\n+    ///     IpAddr::from(addr)\n+    /// );\n+    /// ```\n     fn from(ipv6: Ipv6Addr) -> IpAddr {\n         IpAddr::V6(ipv6)\n     }\n@@ -975,6 +1003,8 @@ impl From<u32> for Ipv4Addr {\n \n #[stable(feature = \"from_slice_v4\", since = \"1.9.0\")]\n impl From<[u8; 4]> for Ipv4Addr {\n+    /// Creates an `Ipv4Addr` from a four element byte array.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1734,6 +1764,27 @@ impl From<u128> for Ipv6Addr {\n \n #[stable(feature = \"ipv6_from_octets\", since = \"1.9.0\")]\n impl From<[u8; 16]> for Ipv6Addr {\n+    /// Creates an `Ipv6Addr` from a sixteen element byte array.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// let addr = Ipv6Addr::from([\n+    ///     25u8, 24u8, 23u8, 22u8, 21u8, 20u8, 19u8, 18u8,\n+    ///     17u8, 16u8, 15u8, 14u8, 13u8, 12u8, 11u8, 10u8,\n+    /// ]);\n+    /// assert_eq!(\n+    ///     Ipv6Addr::new(\n+    ///         0x1918, 0x1716,\n+    ///         0x1514, 0x1312,\n+    ///         0x1110, 0x0f0e,\n+    ///         0x0d0c, 0x0b0a\n+    ///     ),\n+    ///     addr\n+    /// );\n+    /// ```\n     fn from(octets: [u8; 16]) -> Ipv6Addr {\n         let inner = c::in6_addr { s6_addr: octets };\n         Ipv6Addr::from_inner(inner)\n@@ -1742,6 +1793,27 @@ impl From<[u8; 16]> for Ipv6Addr {\n \n #[stable(feature = \"ipv6_from_segments\", since = \"1.16.0\")]\n impl From<[u16; 8]> for Ipv6Addr {\n+    /// Creates an `Ipv6Addr` from an eight element 16-bit array.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// let addr = Ipv6Addr::from([\n+    ///     525u16, 524u16, 523u16, 522u16,\n+    ///     521u16, 520u16, 519u16, 518u16,\n+    /// ]);\n+    /// assert_eq!(\n+    ///     Ipv6Addr::new(\n+    ///         0x20d, 0x20c,\n+    ///         0x20b, 0x20a,\n+    ///         0x209, 0x208,\n+    ///         0x207, 0x206\n+    ///     ),\n+    ///     addr\n+    /// );\n+    /// ```\n     fn from(segments: [u16; 8]) -> Ipv6Addr {\n         let [a, b, c, d, e, f, g, h] = segments;\n         Ipv6Addr::new(a, b, c, d, e, f, g, h)"}]}