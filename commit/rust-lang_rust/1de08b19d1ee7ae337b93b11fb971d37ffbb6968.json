{"sha": "1de08b19d1ee7ae337b93b11fb971d37ffbb6968", "node_id": "C_kwDOAAsO6NoAKDFkZTA4YjE5ZDFlZTdhZTMzN2I5M2IxMWZiOTcxZDM3ZmZiYjY5Njg", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-08-12T01:20:46Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-08-24T02:33:52Z"}, "message": "Get rid of some usages of `query_keys`\n\nRustdoc documents these with the name of the type alias instead of normalizing them to the underlying type.\nUse associated types instead so that the generated docs for nightly-rustc are easier to read.", "tree": {"sha": "82eade62ec63da399a40bddaba5666c6cd794206", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82eade62ec63da399a40bddaba5666c6cd794206"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1de08b19d1ee7ae337b93b11fb971d37ffbb6968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1de08b19d1ee7ae337b93b11fb971d37ffbb6968", "html_url": "https://github.com/rust-lang/rust/commit/1de08b19d1ee7ae337b93b11fb971d37ffbb6968", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1de08b19d1ee7ae337b93b11fb971d37ffbb6968/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b53761969fa7954e4de4d6bb890addc23d668608", "url": "https://api.github.com/repos/rust-lang/rust/commits/b53761969fa7954e4de4d6bb890addc23d668608", "html_url": "https://github.com/rust-lang/rust/commit/b53761969fa7954e4de4d6bb890addc23d668608"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "30ca93c72333cf1016029917cdc92de4feec9a46", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1de08b19d1ee7ae337b93b11fb971d37ffbb6968/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1de08b19d1ee7ae337b93b11fb971d37ffbb6968/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=1de08b19d1ee7ae337b93b11fb971d37ffbb6968", "patch": "@@ -246,7 +246,7 @@ macro_rules! define_queries {\n \n             // Create an eponymous constructor for each query.\n             $(#[allow(nonstandard_style)] $(#[$attr])*\n-            pub fn $name<'tcx>(tcx: QueryCtxt<'tcx>, key: query_keys::$name<'tcx>) -> QueryStackFrame {\n+            pub fn $name<'tcx>(tcx: QueryCtxt<'tcx>, key: <queries::$name<'tcx> as QueryConfig>::Key) -> QueryStackFrame {\n                 let kind = dep_graph::DepKind::$name;\n                 let name = stringify!($name);\n                 // Disable visible paths printing for performance reasons.\n@@ -348,7 +348,6 @@ macro_rules! define_queries {\n         mod query_callbacks {\n             use super::*;\n             use rustc_middle::dep_graph::DepNode;\n-            use rustc_middle::ty::query::query_keys;\n             use rustc_query_system::dep_graph::DepNodeParams;\n             use rustc_query_system::query::{force_query, QueryDescription};\n             use rustc_query_system::dep_graph::FingerprintStyle;\n@@ -410,7 +409,7 @@ macro_rules! define_queries {\n                 let is_eval_always = is_eval_always!([$($modifiers)*]);\n \n                 let fingerprint_style =\n-                    <query_keys::$name<'_> as DepNodeParams<TyCtxt<'_>>>::fingerprint_style();\n+                    <<queries::$name<'_> as QueryConfig>::Key as DepNodeParams<TyCtxt<'_>>>::fingerprint_style();\n \n                 if is_anon || !fingerprint_style.reconstructible() {\n                     return DepKindStruct {\n@@ -423,8 +422,8 @@ macro_rules! define_queries {\n                 }\n \n                 #[inline(always)]\n-                fn recover<'tcx>(tcx: TyCtxt<'tcx>, dep_node: DepNode) -> Option<query_keys::$name<'tcx>> {\n-                    <query_keys::$name<'_> as DepNodeParams<TyCtxt<'_>>>::recover(tcx, &dep_node)\n+                fn recover<'tcx>(tcx: TyCtxt<'tcx>, dep_node: DepNode) -> Option<<queries::$name<'tcx> as QueryConfig>::Key> {\n+                    <<queries::$name<'_> as QueryConfig>::Key as DepNodeParams<TyCtxt<'_>>>::recover(tcx, &dep_node)\n                 }\n \n                 fn force_from_dep_node(tcx: TyCtxt<'_>, dep_node: DepNode) -> bool {\n@@ -475,7 +474,7 @@ macro_rules! define_queries_struct {\n \n             jobs: AtomicU64,\n \n-            $($(#[$attr])*  $name: QueryState<query_keys::$name<'tcx>>,)*\n+            $($(#[$attr])*  $name: QueryState<<queries::$name<'tcx> as QueryConfig>::Key>,)*\n         }\n \n         impl<'tcx> Queries<'tcx> {\n@@ -530,7 +529,7 @@ macro_rules! define_queries_struct {\n                 &'tcx self,\n                 tcx: TyCtxt<'tcx>,\n                 span: Span,\n-                key: query_keys::$name<'tcx>,\n+                key: <queries::$name<'tcx> as QueryConfig>::Key,\n                 mode: QueryMode,\n             ) -> Option<query_stored::$name<'tcx>> {\n                 let qcx = QueryCtxt { tcx, queries: self };"}]}