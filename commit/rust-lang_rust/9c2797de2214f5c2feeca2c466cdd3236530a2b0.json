{"sha": "9c2797de2214f5c2feeca2c466cdd3236530a2b0", "node_id": "C_kwDOAAsO6NoAKDljMjc5N2RlMjIxNGY1YzJmZWVjYTJjNDY2Y2RkMzIzNjUzMGEyYjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-17T17:05:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-17T17:05:17Z"}, "message": "Auto merge of #103151 - matthiaskrgr:rollup-t3mmnsg, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #102454 (Suggest parentheses for possible range method calling)\n - #102466 (only allow `ConstEquate` with `feature(gce)`)\n - #102945 (Do not register placeholder `RegionOutlives` obligations when `considering_regions` is false)\n - #103091 (rustdoc: remove unused HTML class `sidebar-title`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5ec9c17bd6f6e53470b9c9c5db3a00310a587dd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ec9c17bd6f6e53470b9c9c5db3a00310a587dd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c2797de2214f5c2feeca2c466cdd3236530a2b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c2797de2214f5c2feeca2c466cdd3236530a2b0", "html_url": "https://github.com/rust-lang/rust/commit/9c2797de2214f5c2feeca2c466cdd3236530a2b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c2797de2214f5c2feeca2c466cdd3236530a2b0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9d1cafa878ecc04a4aa7aaa7df0414a29a2bd0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d1cafa878ecc04a4aa7aaa7df0414a29a2bd0b", "html_url": "https://github.com/rust-lang/rust/commit/a9d1cafa878ecc04a4aa7aaa7df0414a29a2bd0b"}, {"sha": "e1d72a485a716905560e567c8d2e2a2dbc705341", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d72a485a716905560e567c8d2e2a2dbc705341", "html_url": "https://github.com/rust-lang/rust/commit/e1d72a485a716905560e567c8d2e2a2dbc705341"}], "stats": {"total": 562, "additions": 496, "deletions": 66}, "files": [{"sha": "357c6900a70e547c8256518532a688217cf31801", "filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c2797de2214f5c2feeca2c466cdd3236530a2b0/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/9c2797de2214f5c2feeca2c466cdd3236530a2b0/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl?ref=9c2797de2214f5c2feeca2c466cdd3236530a2b0", "patch": "@@ -133,3 +133,7 @@ hir_analysis_extern_crate_not_idiomatic =\n     .suggestion = convert it to a `{$msg_code}`\n \n hir_analysis_expected_used_symbol = expected `used`, `used(compiler)` or `used(linker)`\n+\n+hir_analysis_missing_parentheses_in_range = can't call method `{$method_name}` on type `{$ty_str}`\n+\n+hir_analysis_add_missing_parentheses_in_range = you must surround the range in parentheses to call its `{$func_name}` function"}, {"sha": "bfa5b68168fdb37582d15529c5bb3d0caf9456ba", "filename": "compiler/rustc_hir_analysis/src/check/method/suggest.rs", "status": "modified", "additions": 87, "deletions": 2, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/9c2797de2214f5c2feeca2c466cdd3236530a2b0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2797de2214f5c2feeca2c466cdd3236530a2b0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=9c2797de2214f5c2feeca2c466cdd3236530a2b0", "patch": "@@ -2,6 +2,7 @@\n //! found or is otherwise invalid.\n \n use crate::check::FnCtxt;\n+use crate::errors;\n use rustc_ast::ast::Mutability;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{\n@@ -271,7 +272,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 };\n \n-                if self.suggest_constraining_numerical_ty(\n+                if self.suggest_wrapping_range_with_parens(\n+                    tcx, actual, source, span, item_name, &ty_str,\n+                ) || self.suggest_constraining_numerical_ty(\n                     tcx, actual, source, span, item_kind, item_name, &ty_str,\n                 ) {\n                     return None;\n@@ -1202,6 +1205,89 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         false\n     }\n \n+    /// Suggest possible range with adding parentheses, for example:\n+    /// when encountering `0..1.map(|i| i + 1)` suggest `(0..1).map(|i| i + 1)`.\n+    fn suggest_wrapping_range_with_parens(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        actual: Ty<'tcx>,\n+        source: SelfSource<'tcx>,\n+        span: Span,\n+        item_name: Ident,\n+        ty_str: &str,\n+    ) -> bool {\n+        if let SelfSource::MethodCall(expr) = source {\n+            for (_, parent) in tcx.hir().parent_iter(expr.hir_id).take(5) {\n+                if let Node::Expr(parent_expr) = parent {\n+                    let lang_item = match parent_expr.kind {\n+                        ExprKind::Struct(ref qpath, _, _) => match **qpath {\n+                            QPath::LangItem(LangItem::Range, ..) => Some(LangItem::Range),\n+                            QPath::LangItem(LangItem::RangeTo, ..) => Some(LangItem::RangeTo),\n+                            QPath::LangItem(LangItem::RangeToInclusive, ..) => {\n+                                Some(LangItem::RangeToInclusive)\n+                            }\n+                            _ => None,\n+                        },\n+                        ExprKind::Call(ref func, _) => match func.kind {\n+                            // `..=` desugars into `::std::ops::RangeInclusive::new(...)`.\n+                            ExprKind::Path(QPath::LangItem(LangItem::RangeInclusiveNew, ..)) => {\n+                                Some(LangItem::RangeInclusiveStruct)\n+                            }\n+                            _ => None,\n+                        },\n+                        _ => None,\n+                    };\n+\n+                    if lang_item.is_none() {\n+                        continue;\n+                    }\n+\n+                    let span_included = match parent_expr.kind {\n+                        hir::ExprKind::Struct(_, eps, _) => {\n+                            eps.len() > 0 && eps.last().map_or(false, |ep| ep.span.contains(span))\n+                        }\n+                        // `..=` desugars into `::std::ops::RangeInclusive::new(...)`.\n+                        hir::ExprKind::Call(ref func, ..) => func.span.contains(span),\n+                        _ => false,\n+                    };\n+\n+                    if !span_included {\n+                        continue;\n+                    }\n+\n+                    let range_def_id = self.tcx.require_lang_item(lang_item.unwrap(), None);\n+                    let range_ty =\n+                        self.tcx.bound_type_of(range_def_id).subst(self.tcx, &[actual.into()]);\n+\n+                    let pick = self.probe_for_name(\n+                        span,\n+                        Mode::MethodCall,\n+                        item_name,\n+                        IsSuggestion(true),\n+                        range_ty,\n+                        expr.hir_id,\n+                        ProbeScope::AllTraits,\n+                    );\n+                    if pick.is_ok() {\n+                        let range_span = parent_expr.span.with_hi(expr.span.hi());\n+                        tcx.sess.emit_err(errors::MissingParentheseInRange {\n+                            span,\n+                            ty_str: ty_str.to_string(),\n+                            method_name: item_name.as_str().to_string(),\n+                            add_missing_parentheses: Some(errors::AddMissingParenthesesInRange {\n+                                func_name: item_name.name.as_str().to_string(),\n+                                left: range_span.shrink_to_lo(),\n+                                right: range_span.shrink_to_hi(),\n+                            }),\n+                        });\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        false\n+    }\n+\n     fn suggest_constraining_numerical_ty(\n         &self,\n         tcx: TyCtxt<'tcx>,\n@@ -1264,7 +1350,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // If this is a floating point literal that ends with '.',\n                     // get rid of it to stop this from becoming a member access.\n                     let snippet = snippet.strip_suffix('.').unwrap_or(&snippet);\n-\n                     err.span_suggestion(\n                         lit.span,\n                         &format!("}, {"sha": "41f73323d9a9aee6f22f8a073659a61d286d2a6a", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9c2797de2214f5c2feeca2c466cdd3236530a2b0/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2797de2214f5c2feeca2c466cdd3236530a2b0/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=9c2797de2214f5c2feeca2c466cdd3236530a2b0", "patch": "@@ -346,3 +346,29 @@ pub struct ExpectedUsedSymbol {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis::missing_parentheses_in_range, code = \"E0689\")]\n+pub struct MissingParentheseInRange {\n+    #[primary_span]\n+    #[label(hir_analysis::missing_parentheses_in_range)]\n+    pub span: Span,\n+    pub ty_str: String,\n+    pub method_name: String,\n+\n+    #[subdiagnostic]\n+    pub add_missing_parentheses: Option<AddMissingParenthesesInRange>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[multipart_suggestion_verbose(\n+    hir_analysis::add_missing_parentheses_in_range,\n+    applicability = \"maybe-incorrect\"\n+)]\n+pub struct AddMissingParenthesesInRange {\n+    pub func_name: String,\n+    #[suggestion_part(code = \"(\")]\n+    pub left: Span,\n+    #[suggestion_part(code = \")\")]\n+    pub right: Span,\n+}"}, {"sha": "d4c734273861602b9deb20405d8c8431173ae47f", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9c2797de2214f5c2feeca2c466cdd3236530a2b0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2797de2214f5c2feeca2c466cdd3236530a2b0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=9c2797de2214f5c2feeca2c466cdd3236530a2b0", "patch": "@@ -355,7 +355,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 }\n \n                 ty::PredicateKind::RegionOutlives(data) => {\n-                    if infcx.considering_regions || data.has_placeholders() {\n+                    if infcx.considering_regions {\n                         infcx.region_outlives_predicate(&obligation.cause, Binder::dummy(data));\n                     }\n \n@@ -492,19 +492,20 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 }\n \n                 ty::PredicateKind::ConstEquate(c1, c2) => {\n+                    assert!(\n+                        self.selcx.tcx().features().generic_const_exprs,\n+                        \"`ConstEquate` without a feature gate: {c1:?} {c2:?}\",\n+                    );\n                     debug!(?c1, ?c2, \"equating consts\");\n-                    let tcx = self.selcx.tcx();\n-                    if tcx.features().generic_const_exprs {\n-                        // FIXME: we probably should only try to unify abstract constants\n-                        // if the constants depend on generic parameters.\n-                        //\n-                        // Let's just see where this breaks :shrug:\n-                        if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n-                            (c1.kind(), c2.kind())\n-                        {\n-                            if infcx.try_unify_abstract_consts(a, b, obligation.param_env) {\n-                                return ProcessResult::Changed(vec![]);\n-                            }\n+                    // FIXME: we probably should only try to unify abstract constants\n+                    // if the constants depend on generic parameters.\n+                    //\n+                    // Let's just see where this breaks :shrug:\n+                    if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n+                        (c1.kind(), c2.kind())\n+                    {\n+                        if infcx.try_unify_abstract_consts(a, b, obligation.param_env) {\n+                            return ProcessResult::Changed(vec![]);\n                         }\n                     }\n "}, {"sha": "9ebff48920160e6db54469f1fe6e676394cde01b", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9c2797de2214f5c2feeca2c466cdd3236530a2b0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2797de2214f5c2feeca2c466cdd3236530a2b0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=9c2797de2214f5c2feeca2c466cdd3236530a2b0", "patch": "@@ -676,19 +676,21 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n \n                 ty::PredicateKind::ConstEquate(c1, c2) => {\n+                    assert!(\n+                        self.tcx().features().generic_const_exprs,\n+                        \"`ConstEquate` without a feature gate: {c1:?} {c2:?}\",\n+                    );\n                     debug!(?c1, ?c2, \"evaluate_predicate_recursively: equating consts\");\n \n-                    if self.tcx().features().generic_const_exprs {\n-                        // FIXME: we probably should only try to unify abstract constants\n-                        // if the constants depend on generic parameters.\n-                        //\n-                        // Let's just see where this breaks :shrug:\n-                        if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n-                            (c1.kind(), c2.kind())\n-                        {\n-                            if self.infcx.try_unify_abstract_consts(a, b, obligation.param_env) {\n-                                return Ok(EvaluatedToOk);\n-                            }\n+                    // FIXME: we probably should only try to unify abstract constants\n+                    // if the constants depend on generic parameters.\n+                    //\n+                    // Let's just see where this breaks :shrug:\n+                    if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n+                        (c1.kind(), c2.kind())\n+                    {\n+                        if self.infcx.try_unify_abstract_consts(a, b, obligation.param_env) {\n+                            return Ok(EvaluatedToOk);\n                         }\n                     }\n "}, {"sha": "cd56d73e7d47b4e3151cbe842e600dd1f61ef2cb", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=9c2797de2214f5c2feeca2c466cdd3236530a2b0", "patch": "@@ -2259,13 +2259,7 @@ fn extract_for_impl_name(item: &clean::Item, cx: &Context<'_>) -> Option<(String\n }\n \n fn print_sidebar_title(buf: &mut Buffer, id: &str, title: &str) {\n-    write!(\n-        buf,\n-        \"<h3 class=\\\"sidebar-title\\\">\\\n-             <a href=\\\"#{}\\\">{}</a>\\\n-         </h3>\",\n-        id, title\n-    );\n+    write!(buf, \"<h3><a href=\\\"#{}\\\">{}</a></h3>\", id, title);\n }\n \n fn print_sidebar_block("}, {"sha": "4b3ec79273d4076a60a6aaf29f57917a173e8037", "filename": "src/test/rustdoc-gui/sidebar-mobile.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml?ref=9c2797de2214f5c2feeca2c466cdd3236530a2b0", "patch": "@@ -13,7 +13,7 @@ click: \".sidebar-menu-toggle\"\n assert-css: (\".sidebar\", {\"display\": \"block\", \"left\": \"-1000px\"})\n // Force the sidebar open by focusing a link inside it.\n // This makes it easier for keyboard users to get to it.\n-focus: \".sidebar-title a\"\n+focus: \".sidebar-elems h3 a\"\n assert-css: (\".sidebar\", {\"display\": \"block\", \"left\": \"0px\"})\n // When we tab out of the sidebar, close it.\n focus: \".search-input\""}, {"sha": "adb155bb52589e0c306195a2f3dc042c98054146", "filename": "src/test/rustdoc/associated-consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Frustdoc%2Fassociated-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Frustdoc%2Fassociated-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassociated-consts.rs?ref=9c2797de2214f5c2feeca2c466cdd3236530a2b0", "patch": "@@ -9,7 +9,7 @@ pub trait Trait {\n pub struct Bar;\n \n // @has 'foo/struct.Bar.html'\n-// @!has - '//h3[@class=\"sidebar-title\"]' 'Associated Constants'\n+// @!has - '//div[@class=\"sidebar-elems\"]//h3' 'Associated Constants'\n // @!has - '//div[@class=\"sidebar-elems\"]//a' 'FOO'\n impl Trait for Bar {\n     const FOO: u32 = 1;\n@@ -22,7 +22,7 @@ pub enum Foo {\n }\n \n // @has 'foo/enum.Foo.html'\n-// @!has - '//h3[@class=\"sidebar-title\"]' 'Associated Constants'\n+// @!has - '//div[@class=\"sidebar-elems\"]//h3' 'Associated Constants'\n // @!has - '//div[@class=\"sidebar-elems\"]//a' 'FOO'\n impl Trait for Foo {\n     const FOO: u32 = 1;\n@@ -33,7 +33,7 @@ impl Trait for Foo {\n pub struct Baz;\n \n // @has 'foo/struct.Baz.html'\n-// @has - '//h3[@class=\"sidebar-title\"]' 'Associated Constants'\n+// @has - '//div[@class=\"sidebar-elems\"]//h3' 'Associated Constants'\n // @has - '//div[@class=\"sidebar-elems\"]//a' 'FOO'\n impl Baz {\n     pub const FOO: u32 = 42;\n@@ -44,7 +44,7 @@ pub enum Quux {\n }\n \n // @has 'foo/enum.Quux.html'\n-// @has - '//h3[@class=\"sidebar-title\"]' 'Associated Constants'\n+// @has - '//div[@class=\"sidebar-elems\"]//h3' 'Associated Constants'\n // @has - '//div[@class=\"sidebar-elems\"]//a' 'FOO'\n impl Quux {\n     pub const FOO: u32 = 42;"}, {"sha": "be2b42b5ac611dbd99d3a493722dee694b86d1d4", "filename": "src/test/rustdoc/deref-recursive-pathbuf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Frustdoc%2Fderef-recursive-pathbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Frustdoc%2Fderef-recursive-pathbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fderef-recursive-pathbuf.rs?ref=9c2797de2214f5c2feeca2c466cdd3236530a2b0", "patch": "@@ -7,9 +7,9 @@\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.as_path\"]' 'pub fn as_path(&self)'\n // @has '-' '//*[@id=\"deref-methods-Path\"]' 'Methods from Deref<Target = Path>'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.exists\"]' 'pub fn exists(&self)'\n-// @has '-' '//*[@class=\"sidebar-title\"]/a[@href=\"#deref-methods-PathBuf\"]' 'Methods from Deref<Target=PathBuf>'\n+// @has '-' '//div[@class=\"sidebar-elems\"]//h3/a[@href=\"#deref-methods-PathBuf\"]' 'Methods from Deref<Target=PathBuf>'\n // @has '-' '//*[@class=\"sidebar-elems\"]//*[@class=\"block\"]//a[@href=\"#method.as_path\"]' 'as_path'\n-// @has '-' '//*[@class=\"sidebar-title\"]/a[@href=\"#deref-methods-Path\"]' 'Methods from Deref<Target=Path>'\n+// @has '-' '//div[@class=\"sidebar-elems\"]//h3/a[@href=\"#deref-methods-Path\"]' 'Methods from Deref<Target=Path>'\n // @has '-' '//*[@class=\"sidebar-elems\"]//*[@class=\"block\"]//a[@href=\"#method.exists\"]' 'exists'\n \n #![crate_name = \"foo\"]"}, {"sha": "0436f2f86f594f056e7213eda790f6145b55ef42", "filename": "src/test/rustdoc/deref-recursive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Frustdoc%2Fderef-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Frustdoc%2Fderef-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fderef-recursive.rs?ref=9c2797de2214f5c2feeca2c466cdd3236530a2b0", "patch": "@@ -7,9 +7,9 @@\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.bar\"]' 'pub fn bar(&self)'\n // @has '-' '//*[@id=\"deref-methods-Baz\"]' 'Methods from Deref<Target = Baz>'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.baz\"]' 'pub fn baz(&self)'\n-// @has '-' '//*[@class=\"sidebar-title\"]/a[@href=\"#deref-methods-Bar\"]' 'Methods from Deref<Target=Bar>'\n+// @has '-' '//div[@class=\"sidebar-elems\"]//h3/a[@href=\"#deref-methods-Bar\"]' 'Methods from Deref<Target=Bar>'\n // @has '-' '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#method.bar\"]' 'bar'\n-// @has '-' '//*[@class=\"sidebar-title\"]/a[@href=\"#deref-methods-Baz\"]' 'Methods from Deref<Target=Baz>'\n+// @has '-' '//div[@class=\"sidebar-elems\"]//h3/a[@href=\"#deref-methods-Baz\"]' 'Methods from Deref<Target=Baz>'\n // @has '-' '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#method.baz\"]' 'baz'\n \n #![crate_name = \"foo\"]"}, {"sha": "32424d13eb85509c26e56e1c057a15a893030817", "filename": "src/test/rustdoc/deref-typedef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Frustdoc%2Fderef-typedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Frustdoc%2Fderef-typedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fderef-typedef.rs?ref=9c2797de2214f5c2feeca2c466cdd3236530a2b0", "patch": "@@ -6,7 +6,7 @@\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_b\"]' 'pub fn foo_b(&self)'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_c\"]' 'pub fn foo_c(&self)'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_j\"]' 'pub fn foo_j(&self)'\n-// @has '-' '//*[@class=\"sidebar-title\"]/a[@href=\"#deref-methods-FooJ\"]' 'Methods from Deref<Target=FooJ>'\n+// @has '-' '//div[@class=\"sidebar-elems\"]//h3/a[@href=\"#deref-methods-FooJ\"]' 'Methods from Deref<Target=FooJ>'\n // @has '-' '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#method.foo_a\"]' 'foo_a'\n // @has '-' '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#method.foo_b\"]' 'foo_b'\n // @has '-' '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#method.foo_c\"]' 'foo_c'"}, {"sha": "66919d73eeb63e286c4919d86d30f18157f1aa3e", "filename": "src/test/rustdoc/escape-deref-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Frustdoc%2Fescape-deref-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Frustdoc%2Fescape-deref-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fescape-deref-methods.rs?ref=9c2797de2214f5c2feeca2c466cdd3236530a2b0", "patch": "@@ -27,7 +27,7 @@ impl Deref for TitleList {\n }\n \n // @has foo/struct.TitleList.html\n-// @has - '//*[@class=\"sidebar-title\"]' 'Methods from Deref<Target=Vec<Title>>'\n+// @has - '//div[@class=\"sidebar-elems\"]//h3' 'Methods from Deref<Target=Vec<Title>>'\n impl DerefMut for TitleList {\n     fn deref_mut(&mut self) -> &mut Self::Target {\n         &mut self.members"}, {"sha": "4af6d0084925ff4c018ca8eebe4f086f25b32075", "filename": "src/test/rustdoc/negative-impl-sidebar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Frustdoc%2Fnegative-impl-sidebar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Frustdoc%2Fnegative-impl-sidebar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fnegative-impl-sidebar.rs?ref=9c2797de2214f5c2feeca2c466cdd3236530a2b0", "patch": "@@ -4,6 +4,6 @@\n pub struct Foo;\n \n // @has foo/struct.Foo.html\n-// @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#trait-implementations\"]' 'Trait Implementations'\n+// @has - '//div[@class=\"sidebar-elems\"]//h3/a[@href=\"#trait-implementations\"]' 'Trait Implementations'\n // @has - '//*[@class=\"sidebar-elems\"]//section//a' '!Sync'\n impl !Sync for Foo {}"}, {"sha": "6f7afa59bddc7c3c8431ae5ea5876345f2bcc6bb", "filename": "src/test/rustdoc/sidebar-items.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Frustdoc%2Fsidebar-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Frustdoc%2Fsidebar-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsidebar-items.rs?ref=9c2797de2214f5c2feeca2c466cdd3236530a2b0", "patch": "@@ -2,17 +2,17 @@\n #![crate_name = \"foo\"]\n \n // @has foo/trait.Foo.html\n-// @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#required-methods\"]' 'Required Methods'\n+// @has - '//div[@class=\"sidebar-elems\"]//h3/a[@href=\"#required-methods\"]' 'Required Methods'\n // @has - '//*[@class=\"sidebar-elems\"]//section//a' 'bar'\n-// @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#provided-methods\"]' 'Provided Methods'\n+// @has - '//div[@class=\"sidebar-elems\"]//h3/a[@href=\"#provided-methods\"]' 'Provided Methods'\n // @has - '//*[@class=\"sidebar-elems\"]//section//a' 'foo'\n-// @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#required-associated-consts\"]' 'Required Associated Constants'\n+// @has - '//div[@class=\"sidebar-elems\"]//h3/a[@href=\"#required-associated-consts\"]' 'Required Associated Constants'\n // @has - '//*[@class=\"sidebar-elems\"]//section//a' 'FOO'\n-// @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#provided-associated-consts\"]' 'Provided Associated Constants'\n+// @has - '//div[@class=\"sidebar-elems\"]//h3/a[@href=\"#provided-associated-consts\"]' 'Provided Associated Constants'\n // @has - '//*[@class=\"sidebar-elems\"]//section//a' 'BAR'\n-// @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#required-associated-types\"]' 'Required Associated Types'\n+// @has - '//div[@class=\"sidebar-elems\"]//h3/a[@href=\"#required-associated-types\"]' 'Required Associated Types'\n // @has - '//*[@class=\"sidebar-elems\"]//section//a' 'Output'\n-// @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#provided-associated-types\"]' 'Provided Associated Types'\n+// @has - '//div[@class=\"sidebar-elems\"]//h3/a[@href=\"#provided-associated-types\"]' 'Provided Associated Types'\n // @has - '//*[@class=\"sidebar-elems\"]//section//a' 'Extra'\n pub trait Foo {\n     const FOO: usize;\n@@ -25,7 +25,7 @@ pub trait Foo {\n }\n \n // @has foo/struct.Bar.html\n-// @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#fields\"]' 'Fields'\n+// @has - '//div[@class=\"sidebar-elems\"]//h3/a[@href=\"#fields\"]' 'Fields'\n // @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#structfield.f\"]' 'f'\n // @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#structfield.u\"]' 'u'\n // @!has - '//*[@class=\"sidebar-elems\"]//section//a' 'waza'\n@@ -36,7 +36,7 @@ pub struct Bar {\n }\n \n // @has foo/enum.En.html\n-// @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#variants\"]' 'Variants'\n+// @has - '//div[@class=\"sidebar-elems\"]//h3/a[@href=\"#variants\"]' 'Variants'\n // @has - '//*[@class=\"sidebar-elems\"]//section//a' 'Foo'\n // @has - '//*[@class=\"sidebar-elems\"]//section//a' 'Bar'\n pub enum En {\n@@ -45,7 +45,7 @@ pub enum En {\n }\n \n // @has foo/union.MyUnion.html\n-// @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#fields\"]' 'Fields'\n+// @has - '//div[@class=\"sidebar-elems\"]//h3/a[@href=\"#fields\"]' 'Fields'\n // @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#structfield.f1\"]' 'f1'\n // @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#structfield.f2\"]' 'f2'\n // @!has - '//*[@class=\"sidebar-elems\"]//section//a' 'waza'"}, {"sha": "11e946948026dee2181bb23e7b66ac893f712431", "filename": "src/test/rustdoc/sidebar-links-to-foreign-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs?ref=9c2797de2214f5c2feeca2c466cdd3236530a2b0", "patch": "@@ -3,7 +3,7 @@\n #![crate_name = \"foo\"]\n \n // @has foo/trait.Foo.html\n-// @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#foreign-impls\"]' 'Implementations on Foreign Types'\n+// @has - '//div[@class=\"sidebar-elems\"]//h3/a[@href=\"#foreign-impls\"]' 'Implementations on Foreign Types'\n // @has - '//h2[@id=\"foreign-impls\"]' 'Implementations on Foreign Types'\n // @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#impl-Foo-for-u32\"]' 'u32'\n // @has - '//*[@id=\"impl-Foo-for-u32\"]//h3[@class=\"code-header\"]' 'impl Foo for u32'"}, {"sha": "8ab1143d1f70edb0286e7f51d80affad75d9e046", "filename": "src/test/rustdoc/tuple-struct-fields-doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Frustdoc%2Ftuple-struct-fields-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Frustdoc%2Ftuple-struct-fields-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftuple-struct-fields-doc.rs?ref=9c2797de2214f5c2feeca2c466cdd3236530a2b0", "patch": "@@ -2,7 +2,7 @@\n \n // @has foo/struct.Foo.html\n // @has - '//h2[@id=\"fields\"]' 'Tuple Fields'\n-// @has - '//h3[@class=\"sidebar-title\"]/a[@href=\"#fields\"]' 'Tuple Fields'\n+// @has - '//div[@class=\"sidebar-elems\"]//h3/a[@href=\"#fields\"]' 'Tuple Fields'\n // @has - '//*[@id=\"structfield.0\"]' '0: u32'\n // @has - '//*[@id=\"main-content\"]/div[@class=\"docblock\"]' 'hello'\n // @!has - '//*[@id=\"structfield.1\"]' ''"}, {"sha": "2db7f8a354cf58479eae15f7c81282ef25a274fc", "filename": "src/test/ui/higher-rank-trait-bounds/issue-100689.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-100689.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-100689.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-100689.rs?ref=9c2797de2214f5c2feeca2c466cdd3236530a2b0", "patch": "@@ -0,0 +1,29 @@\n+// check-pass\n+\n+struct Foo<'a> {\n+    foo: &'a mut usize,\n+}\n+\n+trait Bar<'a> {\n+    type FooRef<'b>\n+    where\n+        'a: 'b;\n+    fn uwu(foo: Foo<'a>, f: impl for<'b> FnMut(Self::FooRef<'b>));\n+}\n+impl<'a> Bar<'a> for () {\n+    type FooRef<'b>\n+    =\n+        &'b Foo<'a>\n+    where\n+        'a : 'b,\n+    ;\n+\n+    fn uwu(\n+        foo: Foo<'a>,\n+        mut f: impl for<'b> FnMut(&'b Foo<'a>), //relevant part\n+    ) {\n+        f(&foo);\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "952b81584f30d9ce0bf24ead28e785d8716d2fed", "filename": "src/test/ui/higher-rank-trait-bounds/issue-102899.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-102899.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-102899.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-102899.rs?ref=9c2797de2214f5c2feeca2c466cdd3236530a2b0", "patch": "@@ -0,0 +1,32 @@\n+// check-pass\n+\n+pub trait BufferTrait<'buffer> {\n+    type Subset<'channel>\n+    where\n+        'buffer: 'channel;\n+\n+    fn for_each_subset<F>(&self, f: F)\n+    where\n+        F: for<'channel> Fn(Self::Subset<'channel>);\n+}\n+\n+pub struct SomeBuffer<'buffer> {\n+    samples: &'buffer [()],\n+}\n+\n+impl<'buffer> BufferTrait<'buffer> for SomeBuffer<'buffer> {\n+    type Subset<'subset> = Subset<'subset> where 'buffer: 'subset;\n+\n+    fn for_each_subset<F>(&self, _f: F)\n+    where\n+        F: for<'subset> Fn(Subset<'subset>),\n+    {\n+        todo!()\n+    }\n+}\n+\n+pub struct Subset<'subset> {\n+    buffer: &'subset [()],\n+}\n+\n+fn main() {}"}, {"sha": "79cdc41959a74375248dbeb794c46084e2d5ecbc", "filename": "src/test/ui/methods/issues/issue-90315.rs", "status": "modified", "additions": 74, "deletions": 5, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.rs?ref=9c2797de2214f5c2feeca2c466cdd3236530a2b0", "patch": "@@ -1,7 +1,76 @@\n+#![allow(unused)]\n fn main() {\n-  let arr = &[0,1,2,3];\n-  for _i in 0..arr.len().rev() { //~ERROR not an iterator\n-     // The above error used to say \u201cthe method `rev` exists for type `usize`\u201d.\n-     // This regression test ensures it doesn't say that any more.\n-  }\n+    let arr = &[0, 1, 2, 3];\n+    for _i in 0..arr.len().rev() {\n+        //~^ ERROR can't call method\n+        //~| surround the range in parentheses\n+        // The above error used to say \u201cthe method `rev` exists for type `usize`\u201d.\n+        // This regression test ensures it doesn't say that any more.\n+    }\n+\n+    // Test for #102396\n+    for i in 1..11.rev() {\n+        //~^ ERROR can't call method\n+        //~| HELP surround the range in parentheses\n+    }\n+\n+    let end: usize = 10;\n+    for i in 1..end.rev() {\n+        //~^ ERROR can't call method\n+        //~| HELP surround the range in parentheses\n+    }\n+\n+    for i in 1..(end + 1).rev() {\n+        //~^ ERROR can't call method\n+        //~| HELP surround the range in parentheses\n+    }\n+\n+    if 1..(end + 1).is_empty() {\n+        //~^ ERROR can't call method\n+        //~| ERROR mismatched types [E0308]\n+        //~| HELP surround the range in parentheses\n+    }\n+\n+    if 1..(end + 1).is_sorted() {\n+        //~^ ERROR mismatched types [E0308]\n+        //~| ERROR can't call method\n+        //~| HELP surround the range in parentheses\n+    }\n+\n+    let _res: i32 = 3..6.take(2).sum();\n+    //~^ ERROR can't call method\n+    //~| ERROR mismatched types [E0308]\n+    //~| HELP surround the range in parentheses\n+\n+    let _sum: i32 = 3..6.sum();\n+    //~^ ERROR can't call method\n+    //~| ERROR mismatched types [E0308]\n+    //~| HELP surround the range in parentheses\n+\n+    let a = 1 as usize;\n+    let b = 10 as usize;\n+\n+    for _a in a..=b.rev() {\n+        //~^ ERROR can't call method\n+        //~| HELP surround the range in parentheses\n+    }\n+\n+    let _res = ..10.contains(3);\n+    //~^ ERROR can't call method\n+    //~| HELP surround the range in parentheses\n+\n+    if 1..end.error_method() {\n+        //~^ ERROR no method named `error_method`\n+        //~| ERROR mismatched types [E0308]\n+        // Won't suggest\n+    }\n+\n+    let _res = b.take(1)..a;\n+    //~^ ERROR `usize` is not an iterator\n+\n+    let _res: i32 = ..6.take(2).sum();\n+    //~^ can't call method `take` on ambiguous numeric type\n+    //~| ERROR mismatched types [E0308]\n+    //~| HELP you must specify a concrete type for this numeric value\n+    // Won't suggest because `RangeTo` dest not implemented `take`\n }"}, {"sha": "070cd3054369b686b5f2e5cdb12ccfe78d8cd5e9", "filename": "src/test/ui/methods/issues/issue-90315.stderr", "status": "modified", "additions": 193, "deletions": 5, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c2797de2214f5c2feeca2c466cdd3236530a2b0/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr?ref=9c2797de2214f5c2feeca2c466cdd3236530a2b0", "patch": "@@ -1,13 +1,201 @@\n+error[E0689]: can't call method `rev` on type `usize`\n+  --> $DIR/issue-90315.rs:4:28\n+   |\n+LL |     for _i in 0..arr.len().rev() {\n+   |                            ^^^ can't call method `rev` on type `usize`\n+   |\n+help: you must surround the range in parentheses to call its `rev` function\n+   |\n+LL |     for _i in (0..arr.len()).rev() {\n+   |               +            +\n+\n+error[E0689]: can't call method `rev` on type `{integer}`\n+  --> $DIR/issue-90315.rs:12:20\n+   |\n+LL |     for i in 1..11.rev() {\n+   |                    ^^^ can't call method `rev` on type `{integer}`\n+   |\n+help: you must surround the range in parentheses to call its `rev` function\n+   |\n+LL |     for i in (1..11).rev() {\n+   |              +     +\n+\n+error[E0689]: can't call method `rev` on type `usize`\n+  --> $DIR/issue-90315.rs:18:21\n+   |\n+LL |     for i in 1..end.rev() {\n+   |                     ^^^ can't call method `rev` on type `usize`\n+   |\n+help: you must surround the range in parentheses to call its `rev` function\n+   |\n+LL |     for i in (1..end).rev() {\n+   |              +      +\n+\n+error[E0689]: can't call method `rev` on type `usize`\n+  --> $DIR/issue-90315.rs:23:27\n+   |\n+LL |     for i in 1..(end + 1).rev() {\n+   |                           ^^^ can't call method `rev` on type `usize`\n+   |\n+help: you must surround the range in parentheses to call its `rev` function\n+   |\n+LL |     for i in (1..(end + 1)).rev() {\n+   |              +            +\n+\n+error[E0689]: can't call method `is_empty` on type `usize`\n+  --> $DIR/issue-90315.rs:28:21\n+   |\n+LL |     if 1..(end + 1).is_empty() {\n+   |                     ^^^^^^^^ can't call method `is_empty` on type `usize`\n+   |\n+help: you must surround the range in parentheses to call its `is_empty` function\n+   |\n+LL |     if (1..(end + 1)).is_empty() {\n+   |        +            +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90315.rs:28:8\n+   |\n+LL |     if 1..(end + 1).is_empty() {\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+            found struct `std::ops::Range<{integer}>`\n+\n+error[E0689]: can't call method `is_sorted` on type `usize`\n+  --> $DIR/issue-90315.rs:34:21\n+   |\n+LL |     if 1..(end + 1).is_sorted() {\n+   |                     ^^^^^^^^^ can't call method `is_sorted` on type `usize`\n+   |\n+help: you must surround the range in parentheses to call its `is_sorted` function\n+   |\n+LL |     if (1..(end + 1)).is_sorted() {\n+   |        +            +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90315.rs:34:8\n+   |\n+LL |     if 1..(end + 1).is_sorted() {\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+            found struct `std::ops::Range<{integer}>`\n+\n+error[E0689]: can't call method `take` on type `{integer}`\n+  --> $DIR/issue-90315.rs:40:26\n+   |\n+LL |     let _res: i32 = 3..6.take(2).sum();\n+   |                          ^^^^ can't call method `take` on type `{integer}`\n+   |\n+help: you must surround the range in parentheses to call its `take` function\n+   |\n+LL |     let _res: i32 = (3..6).take(2).sum();\n+   |                     +    +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90315.rs:40:21\n+   |\n+LL |     let _res: i32 = 3..6.take(2).sum();\n+   |               ---   ^^^^^^^^^^^^^^^^^^ expected `i32`, found struct `std::ops::Range`\n+   |               |\n+   |               expected due to this\n+   |\n+   = note: expected type `i32`\n+            found struct `std::ops::Range<{integer}>`\n+\n+error[E0689]: can't call method `sum` on type `{integer}`\n+  --> $DIR/issue-90315.rs:45:26\n+   |\n+LL |     let _sum: i32 = 3..6.sum();\n+   |                          ^^^ can't call method `sum` on type `{integer}`\n+   |\n+help: you must surround the range in parentheses to call its `sum` function\n+   |\n+LL |     let _sum: i32 = (3..6).sum();\n+   |                     +    +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90315.rs:45:21\n+   |\n+LL |     let _sum: i32 = 3..6.sum();\n+   |               ---   ^^^^^^^^^^ expected `i32`, found struct `std::ops::Range`\n+   |               |\n+   |               expected due to this\n+   |\n+   = note: expected type `i32`\n+            found struct `std::ops::Range<{integer}>`\n+\n+error[E0689]: can't call method `rev` on type `usize`\n+  --> $DIR/issue-90315.rs:53:21\n+   |\n+LL |     for _a in a..=b.rev() {\n+   |                     ^^^ can't call method `rev` on type `usize`\n+   |\n+help: you must surround the range in parentheses to call its `rev` function\n+   |\n+LL |     for _a in (a..=b).rev() {\n+   |               +     +\n+\n+error[E0689]: can't call method `contains` on type `{integer}`\n+  --> $DIR/issue-90315.rs:58:21\n+   |\n+LL |     let _res = ..10.contains(3);\n+   |                     ^^^^^^^^ can't call method `contains` on type `{integer}`\n+   |\n+help: you must surround the range in parentheses to call its `contains` function\n+   |\n+LL |     let _res = (..10).contains(3);\n+   |                +    +\n+\n+error[E0599]: no method named `error_method` found for type `usize` in the current scope\n+  --> $DIR/issue-90315.rs:62:15\n+   |\n+LL |     if 1..end.error_method() {\n+   |               ^^^^^^^^^^^^ method not found in `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90315.rs:62:8\n+   |\n+LL |     if 1..end.error_method() {\n+   |        ^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+            found struct `std::ops::Range<{integer}>`\n+\n error[E0599]: `usize` is not an iterator\n-  --> $DIR/issue-90315.rs:3:26\n+  --> $DIR/issue-90315.rs:68:18\n    |\n-LL |   for _i in 0..arr.len().rev() {\n-   |                          ^^^ `usize` is not an iterator\n+LL |     let _res = b.take(1)..a;\n+   |                  ^^^^ `usize` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `usize: Iterator`\n            which is required by `&mut usize: Iterator`\n \n-error: aborting due to previous error\n+error[E0689]: can't call method `take` on ambiguous numeric type `{integer}`\n+  --> $DIR/issue-90315.rs:71:25\n+   |\n+LL |     let _res: i32 = ..6.take(2).sum();\n+   |                         ^^^^\n+   |\n+help: you must specify a concrete type for this numeric value, like `i32`\n+   |\n+LL |     let _res: i32 = ..6_i32.take(2).sum();\n+   |                       ~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90315.rs:71:21\n+   |\n+LL |     let _res: i32 = ..6.take(2).sum();\n+   |               ---   ^^^^^^^^^^^^^^^^^ expected `i32`, found struct `RangeTo`\n+   |               |\n+   |               expected due to this\n+   |\n+   = note: expected type `i32`\n+            found struct `RangeTo<_>`\n+\n+error: aborting due to 19 previous errors\n \n-For more information about this error, try `rustc --explain E0599`.\n+Some errors have detailed explanations: E0308, E0599, E0689.\n+For more information about an error, try `rustc --explain E0308`."}]}