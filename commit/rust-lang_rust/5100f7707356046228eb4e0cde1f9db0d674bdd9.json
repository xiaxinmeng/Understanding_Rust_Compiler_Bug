{"sha": "5100f7707356046228eb4e0cde1f9db0d674bdd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMDBmNzcwNzM1NjA0NjIyOGViNGUwY2RlMWY5ZGIwZDY3NGJkZDk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-03T09:08:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-03T09:08:20Z"}, "message": "Merge #4723\n\n4723: Derive local roots from Workspaces r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "ba6b3e51ebb580184e2c44c90763efe12908904f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba6b3e51ebb580184e2c44c90763efe12908904f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5100f7707356046228eb4e0cde1f9db0d674bdd9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe12iECRBK7hj4Ov3rIwAAdHIIABYRegtrkwR5VNn6UmK0hsos\neSMt/pNCa/OSfynBT8hWBL1Ol4/M5+StU+EsZK7sLLb8SaDHAWuzDe9TO0xoHOfM\naM6qMMkLbPFVMECDRkGDMfFcFuz5p8j3lxj7e8+VLisxJCxuDY2g3aQWrByTyhWy\nlcnljzPt5Q6BdQbJwyVukFr2MZpm/mYUJuwX9+zGFmopLKNLuixBLPEmvreV+wA5\nO3lVCG1Si7xhGEFYKilCjP8gurzajaabTGeVXzywjjfp7uBWNz/WVnNelDupO/RC\nw026P3HrNjI1a2UFnw5D0vgShy2u0kE36XwSyZqbDbKQiMB7szFCAFGZjoPsGZo=\n=9Rj6\n-----END PGP SIGNATURE-----\n", "payload": "tree ba6b3e51ebb580184e2c44c90763efe12908904f\nparent ac4782ef11706c39117286ddffc3e44fb7e61888\nparent ee181cf6833f338869f878eff11e026abe4e984e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1591175300 +0000\ncommitter GitHub <noreply@github.com> 1591175300 +0000\n\nMerge #4723\n\n4723: Derive local roots from Workspaces r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5100f7707356046228eb4e0cde1f9db0d674bdd9", "html_url": "https://github.com/rust-lang/rust/commit/5100f7707356046228eb4e0cde1f9db0d674bdd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5100f7707356046228eb4e0cde1f9db0d674bdd9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac4782ef11706c39117286ddffc3e44fb7e61888", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac4782ef11706c39117286ddffc3e44fb7e61888", "html_url": "https://github.com/rust-lang/rust/commit/ac4782ef11706c39117286ddffc3e44fb7e61888"}, {"sha": "ee181cf6833f338869f878eff11e026abe4e984e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee181cf6833f338869f878eff11e026abe4e984e", "html_url": "https://github.com/rust-lang/rust/commit/ee181cf6833f338869f878eff11e026abe4e984e"}], "stats": {"total": 88, "additions": 21, "deletions": 67}, "files": [{"sha": "09c06fef9359ff9ea1a7e238f920954767c7e0fb", "filename": "crates/ra_project_model/src/json_project.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5100f7707356046228eb4e0cde1f9db0d674bdd9/crates%2Fra_project_model%2Fsrc%2Fjson_project.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5100f7707356046228eb4e0cde1f9db0d674bdd9/crates%2Fra_project_model%2Fsrc%2Fjson_project.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fjson_project.rs?ref=5100f7707356046228eb4e0cde1f9db0d674bdd9", "patch": "@@ -5,6 +5,13 @@ use std::path::PathBuf;\n use rustc_hash::{FxHashMap, FxHashSet};\n use serde::Deserialize;\n \n+/// Roots and crates that compose this Rust project.\n+#[derive(Clone, Debug, Deserialize)]\n+pub struct JsonProject {\n+    pub(crate) roots: Vec<Root>,\n+    pub(crate) crates: Vec<Crate>,\n+}\n+\n /// A root points to the directory which contains Rust crates. rust-analyzer watches all files in\n /// all roots. Roots might be nested.\n #[derive(Clone, Debug, Deserialize)]\n@@ -57,13 +64,6 @@ pub struct Dep {\n     pub(crate) name: String,\n }\n \n-/// Roots and crates that compose this Rust project.\n-#[derive(Clone, Debug, Deserialize)]\n-pub struct JsonProject {\n-    pub(crate) roots: Vec<Root>,\n-    pub(crate) crates: Vec<Crate>,\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "2e5499485f293eedd8a322b5029021282ea0d976", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5100f7707356046228eb4e0cde1f9db0d674bdd9/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5100f7707356046228eb4e0cde1f9db0d674bdd9/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=5100f7707356046228eb4e0cde1f9db0d674bdd9", "patch": "@@ -164,7 +164,6 @@ pub fn main_loop(ws_roots: Vec<PathBuf>, config: Config, connection: Connection)\n         }\n \n         WorldState::new(\n-            ws_roots,\n             workspaces,\n             config.lru_capacity,\n             &globs,"}, {"sha": "c1010e86aac502828145240744b46f1309209108", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5100f7707356046228eb4e0cde1f9db0d674bdd9/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5100f7707356046228eb4e0cde1f9db0d674bdd9/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=5100f7707356046228eb4e0cde1f9db0d674bdd9", "patch": "@@ -58,7 +58,7 @@ fn create_flycheck(workspaces: &[ProjectWorkspace], config: &FlycheckConfig) ->\n #[derive(Debug)]\n pub struct WorldState {\n     pub config: Config,\n-    pub roots: Vec<PathBuf>,\n+    pub local_roots: Vec<PathBuf>,\n     pub workspaces: Arc<Vec<ProjectWorkspace>>,\n     pub analysis_host: AnalysisHost,\n     pub vfs: Arc<RwLock<Vfs>>,\n@@ -81,7 +81,6 @@ pub struct WorldSnapshot {\n \n impl WorldState {\n     pub fn new(\n-        folder_roots: Vec<PathBuf>,\n         workspaces: Vec<ProjectWorkspace>,\n         lru_capacity: Option<usize>,\n         exclude_globs: &[Glob],\n@@ -93,19 +92,24 @@ impl WorldState {\n         let extern_dirs: FxHashSet<_> =\n             workspaces.iter().flat_map(ProjectWorkspace::out_dirs).collect();\n \n+        let mut local_roots = Vec::new();\n         let roots: Vec<_> = {\n             let create_filter = |is_member| {\n                 RustPackageFilterBuilder::default()\n                     .set_member(is_member)\n                     .exclude(exclude_globs.iter().cloned())\n                     .into_vfs_filter()\n             };\n-            folder_roots\n+            workspaces\n                 .iter()\n-                .map(|path| RootEntry::new(path.clone(), create_filter(true)))\n-                .chain(workspaces.iter().flat_map(ProjectWorkspace::to_roots).map(|pkg_root| {\n-                    RootEntry::new(pkg_root.path().to_owned(), create_filter(pkg_root.is_member()))\n-                }))\n+                .flat_map(ProjectWorkspace::to_roots)\n+                .map(|pkg_root| {\n+                    let path = pkg_root.path().to_owned();\n+                    if pkg_root.is_member() {\n+                        local_roots.push(path.clone());\n+                    }\n+                    RootEntry::new(path, create_filter(pkg_root.is_member()))\n+                })\n                 .chain(\n                     extern_dirs\n                         .iter()\n@@ -121,7 +125,7 @@ impl WorldState {\n         let mut extern_source_roots = FxHashMap::default();\n         for r in vfs_roots {\n             let vfs_root_path = vfs.root2path(r);\n-            let is_local = folder_roots.iter().any(|it| vfs_root_path.starts_with(it));\n+            let is_local = local_roots.iter().any(|it| vfs_root_path.starts_with(it));\n             change.add_root(SourceRootId(r.0), is_local);\n             change.set_debug_root_path(SourceRootId(r.0), vfs_root_path.display().to_string());\n \n@@ -178,7 +182,7 @@ impl WorldState {\n         analysis_host.apply_change(change);\n         WorldState {\n             config,\n-            roots: folder_roots,\n+            local_roots,\n             workspaces: Arc::new(workspaces),\n             analysis_host,\n             vfs: Arc::new(RwLock::new(vfs)),\n@@ -216,7 +220,7 @@ impl WorldState {\n             match c {\n                 VfsChange::AddRoot { root, files } => {\n                     let root_path = self.vfs.read().root2path(root);\n-                    let is_local = self.roots.iter().any(|r| root_path.starts_with(r));\n+                    let is_local = self.local_roots.iter().any(|r| root_path.starts_with(r));\n                     if is_local {\n                         *roots_scanned += 1;\n                         for (file, path, text) in files {"}, {"sha": "69dc719c54a5ba6f78c0d1c7ec586a16356f7411", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5100f7707356046228eb4e0cde1f9db0d674bdd9/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5100f7707356046228eb4e0cde1f9db0d674bdd9/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=5100f7707356046228eb4e0cde1f9db0d674bdd9", "patch": "@@ -58,55 +58,6 @@ use std::collections::Spam;\n     eprintln!(\"completion took {:?}\", completion_start.elapsed());\n }\n \n-#[test]\n-fn test_runnables_no_project() {\n-    if skip_slow_tests() {\n-        return;\n-    }\n-\n-    let server = project(\n-        r\"\n-//- lib.rs\n-#[test]\n-fn foo() {\n-}\n-\",\n-    );\n-    server.wait_until_workspace_is_loaded();\n-    server.request::<Runnables>(\n-        RunnablesParams { text_document: server.doc_id(\"lib.rs\"), position: None },\n-        json!([\n-            {\n-              \"args\": {\n-                \"cargoArgs\": [\"test\"],\n-                \"executableArgs\": [\"foo\", \"--nocapture\"],\n-              },\n-              \"kind\": \"cargo\",\n-              \"label\": \"test foo\",\n-              \"location\": {\n-                \"targetRange\": {\n-                  \"end\": { \"character\": 1, \"line\": 2 },\n-                  \"start\": { \"character\": 0, \"line\": 0 }\n-                },\n-                \"targetSelectionRange\": {\n-                  \"end\": { \"character\": 6, \"line\": 1 },\n-                  \"start\": { \"character\": 3, \"line\": 1 }\n-                },\n-                \"targetUri\": \"file:///[..]/lib.rs\"\n-              }\n-            },\n-            {\n-              \"args\": {\n-                \"cargoArgs\": [\"check\", \"--workspace\"],\n-                \"executableArgs\": [],\n-              },\n-              \"kind\": \"cargo\",\n-              \"label\": \"cargo check --workspace\"\n-            }\n-        ]),\n-    );\n-}\n-\n #[test]\n fn test_runnables_project() {\n     if skip_slow_tests() {"}]}