{"sha": "b3074819f615758da44a667bf3cb98c59227e2f9", "node_id": "C_kwDOAAsO6NoAKGIzMDc0ODE5ZjYxNTc1OGRhNDRhNjY3YmYzY2I5OGM1OTIyN2UyZjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-08T05:13:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-08T05:13:41Z"}, "message": "Auto merge of #90680 - calebcartwright:rustfmt-sync, r=calebcartwright\n\nsync rustfmt subtree", "tree": {"sha": "a7c40e1398fd9b50e1095681baaa9d49d885f7e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7c40e1398fd9b50e1095681baaa9d49d885f7e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3074819f615758da44a667bf3cb98c59227e2f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3074819f615758da44a667bf3cb98c59227e2f9", "html_url": "https://github.com/rust-lang/rust/commit/b3074819f615758da44a667bf3cb98c59227e2f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3074819f615758da44a667bf3cb98c59227e2f9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43192ca3d72ed0ca42ba913137585219ba0a691f", "url": "https://api.github.com/repos/rust-lang/rust/commits/43192ca3d72ed0ca42ba913137585219ba0a691f", "html_url": "https://github.com/rust-lang/rust/commit/43192ca3d72ed0ca42ba913137585219ba0a691f"}, {"sha": "30fb1246b40b729462c39736bfab995204a487b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/30fb1246b40b729462c39736bfab995204a487b6", "html_url": "https://github.com/rust-lang/rust/commit/30fb1246b40b729462c39736bfab995204a487b6"}], "stats": {"total": 1042, "additions": 670, "deletions": 372}, "files": [{"sha": "ca96d30f58639c5029f4d9aed05ee38eb0dbc3fd", "filename": "src/tools/rustfmt/.github/workflows/rustdoc_check.yml", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2F.github%2Fworkflows%2Frustdoc_check.yml", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2F.github%2Fworkflows%2Frustdoc_check.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2F.github%2Fworkflows%2Frustdoc_check.yml?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -0,0 +1,25 @@\n+name: rustdoc check\n+on:\n+  push:\n+    branches:\n+      - master\n+  pull_request:\n+\n+jobs:\n+  rustdoc_check:\n+    runs-on: ubuntu-latest\n+    name: rustdoc check\n+    steps:\n+    - name: checkout\n+      uses: actions/checkout@v2\n+\n+    - name: install rustup\n+      run: |\n+        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup-init.sh\n+        sh rustup-init.sh -y --default-toolchain none\n+        rustup target add x86_64-unknown-linux-gnu\n+\n+    - name: document rustfmt\n+      env:\n+        RUSTDOCFLAGS: --document-private-items --enable-index-page --show-type-layout --generate-link-to-definition -Zunstable-options -Dwarnings\n+      run: cargo doc -Zskip-rustdoc-fingerprint --no-deps -p rustfmt-nightly -p rustfmt-config_proc_macro"}, {"sha": "13826883d2f4bdf537df1df2a687be215adbaf97", "filename": "src/tools/rustfmt/Configurations.md", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2FConfigurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2FConfigurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2FConfigurations.md?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -2062,7 +2062,7 @@ use sit;\n Controls the strategy for how imports are grouped together.\n \n - **Default value**: `Preserve`\n-- **Possible values**: `Preserve`, `StdExternalCrate`\n+- **Possible values**: `Preserve`, `StdExternalCrate`, `One`\n - **Stable**: No\n \n #### `Preserve` (default):\n@@ -2108,6 +2108,23 @@ use super::update::convert_publish_payload;\n use crate::models::Event;\n ```\n \n+#### `One`:\n+\n+Discard existing import groups, and create a single group for everything\n+\n+```rust\n+use super::schema::{Context, Payload};\n+use super::update::convert_publish_payload;\n+use crate::models::Event;\n+use alloc::alloc::Layout;\n+use broker::database::PooledConnection;\n+use chrono::Utc;\n+use core::f32;\n+use juniper::{FieldError, FieldResult};\n+use std::sync::Arc;\n+use uuid::Uuid;\n+```\n+\n ## `reorder_modules`\n \n Reorder `mod` declarations alphabetically in group."}, {"sha": "3073996019ee26be58d1ec8aaa233545ee8803d9", "filename": "src/tools/rustfmt/Contributing.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2FContributing.md", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2FContributing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2FContributing.md?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -59,7 +59,7 @@ example, the `issue-1111.rs` test file is configured by the file\n ## Debugging\n \n Some `rewrite_*` methods use the `debug!` macro for printing useful information.\n-These messages can be printed by using the environment variable `RUST_LOG=rustfmt=DEBUG`.\n+These messages can be printed by using the environment variable `RUSTFMT_LOG=rustfmt=DEBUG`.\n These traces can be helpful in understanding which part of the code was used\n and get a better grasp on the execution flow.\n "}, {"sha": "b3d21e6fb87c79ffa3957b20a4cc405f2787f051", "filename": "src/tools/rustfmt/README.md", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2FREADME.md?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -47,7 +47,7 @@ cargo +nightly fmt\n \n ## Limitations\n \n-Rustfmt tries to work on as much Rust code as possible, sometimes, the code\n+Rustfmt tries to work on as much Rust code as possible. Sometimes, the code\n doesn't even need to compile! As we approach a 1.0 release we are also looking\n to limit areas of instability; in particular, post-1.0, the formatting of most\n code should not change as Rustfmt improves. However, there are some things that\n@@ -102,6 +102,25 @@ read data from stdin. Alternatively, you can use `cargo fmt` to format all\n binary and library targets of your crate.\n \n You can run `rustfmt --help` for information about available arguments.\n+The easiest way to run rustfmt against a project is with `cargo fmt`. `cargo fmt` works on both\n+single-crate projects and [cargo workspaces](https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html).\n+Please see `cargo fmt --help` for usage information.\n+\n+You can specify the path to your own `rustfmt` binary for cargo to use by setting the`RUSTFMT` \n+environment variable. This was added in v1.4.22, so you must have this version or newer to leverage this feature (`cargo fmt --version`)\n+\n+### Running `rustfmt` directly\n+\n+To format individual files or arbitrary codes from stdin, the `rustfmt` binary should be used. Some\n+examples follow:\n+\n+- `rustfmt lib.rs main.rs` will format \"lib.rs\" and \"main.rs\" in place\n+- `rustfmt` will read a code from stdin and write formatting to stdout\n+  - `echo \"fn     main() {}\" | rustfmt` would emit \"fn main() {}\".\n+\n+For more information, including arguments and emit options, see `rustfmt --help`.\n+\n+### Verifying code is formatted\n \n When running with `--check`, Rustfmt will exit with `0` if Rustfmt would not\n make any formatting changes to the input, and `1` if Rustfmt would make changes.\n@@ -129,7 +148,7 @@ rustfmt to exit with an error code if the input is not formatted correctly.\n It will also print any found differences. (Older versions of Rustfmt don't\n support `--check`, use `--write-mode diff`).\n \n-A minimal Travis setup could look like this (requires Rust 1.24.0 or greater):\n+A minimal Travis setup could look like this (requires Rust 1.31.0 or greater):\n \n ```yaml\n language: rust"}, {"sha": "b3dda091e0a9607e75c79e3551c1ae59f85c60df", "filename": "src/tools/rustfmt/appveyor.yml", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43192ca3d72ed0ca42ba913137585219ba0a691f/src%2Ftools%2Frustfmt%2Fappveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/43192ca3d72ed0ca42ba913137585219ba0a691f/src%2Ftools%2Frustfmt%2Fappveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fappveyor.yml?ref=43192ca3d72ed0ca42ba913137585219ba0a691f", "patch": "@@ -1,8 +0,0 @@\n-environment:\n-  global:\n-    PROJECT_NAME: rustfmt\n-\n-build: false\n-\n-test_script:\n-  - echo Why does no one have access to delete me?"}, {"sha": "6a711c0171aebb99078b65ccb5a70629e7338629", "filename": "src/tools/rustfmt/intellij.md", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fintellij.md", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fintellij.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fintellij.md?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -3,19 +3,28 @@\n ## Installation\n \n - Install [CLion](https://www.jetbrains.com/clion/), [IntelliJ Ultimate or CE](https://www.jetbrains.com/idea/) through the direct download link or using the [JetBrains Toolbox](https://www.jetbrains.com/toolbox/).\n-  CLion provides a built-in debugger interface but its not free like IntelliJ CE - which does not provide the debugger interface. (IntelliJ seems to lack the toolchain for that, see this discussion [intellij-rust/issues/535](https://github.com/intellij-rust/intellij-rust/issues/535))\n-  \n-- Install the [Rust Plugin](https://intellij-rust.github.io/) by navigating to File -> Settings -> Plugins and press \"Install JetBrains Plugin\"\n-  ![plugins](https://user-images.githubusercontent.com/1133787/47240861-f40af680-d3e9-11e8-9b82-cdd5c8d5f5b8.png)\n+  CLion and IntelliJ Ultimate [provide a built-in debugger interface](https://github.com/intellij-rust/intellij-rust#compatible-ides) but they are not free like IntelliJ CE.\n+\n+- Install the [Rust Plugin](https://intellij-rust.github.io/) by navigating to File \u2192 Settings \u2192 Plugins and searching the plugin in the Marketplace\n+  ![plugins](https://user-images.githubusercontent.com/6505554/83944518-6f1e5c00-a81d-11ea-9c35-e16948811ba8.png)\n \n-- Press \"Install\" on the rust plugin\n-  ![install rust](https://user-images.githubusercontent.com/1133787/47240803-c0c86780-d3e9-11e8-9265-22f735e4d7ed.png)\n+- Press \"Install\" on the Rust plugin\n+  ![install rust](https://user-images.githubusercontent.com/6505554/83944533-82c9c280-a81d-11ea-86b3-ee2e31bc7d12.png)\n   \n - Restart CLion/IntelliJ\n \n ## Configuration\n \n-- Open the settings window (File -> Settings) and search for \"reformat\"\n+### Run Rustfmt on save\n+\n+- Open Rustfmt settings (File \u2192 Settings \u2192 Languages & Frameworks \u2192 Rust \u2192 Rustfmt) and enable \"Run rustfmt on Save\"\n+  ![run_rustfmt_on_save](https://user-images.githubusercontent.com/6505554/83944610-3468f380-a81e-11ea-9c34-0cbd18dd4969.png)\n+\n+- IntellJ uses autosave, so now your files will always be formatted according to rustfmt. Alternatively you can use Ctrl+S to reformat file manually\n+\n+### Bind shortcut to \"Reformat File with Rustfmt\" action\n+\n+- Open the settings window (File \u2192 Settings) and search for \"reformat\"\n   ![keymap](https://user-images.githubusercontent.com/1133787/47240922-2ae10c80-d3ea-11e8-9d8f-c798d9749240.png)\n - Right-click on \"Reformat File with Rustfmt\" and assign a keyboard shortcut\n "}, {"sha": "f976fa68e4c7de6d0afe45caeed50bede6a78022", "filename": "src/tools/rustfmt/legacy-rustfmt.toml", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43192ca3d72ed0ca42ba913137585219ba0a691f/src%2Ftools%2Frustfmt%2Flegacy-rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/43192ca3d72ed0ca42ba913137585219ba0a691f/src%2Ftools%2Frustfmt%2Flegacy-rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Flegacy-rustfmt.toml?ref=43192ca3d72ed0ca42ba913137585219ba0a691f", "patch": "@@ -1,2 +0,0 @@\n-indent_style = \"Visual\"\n-combine_control_expr = false"}, {"sha": "1d2cad6675117d567194ef4e77cb521abdac7946", "filename": "src/tools/rustfmt/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Frust-toolchain?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-10-20\"\n+channel = \"nightly-2021-11-08\"\n components = [\"rustc-dev\"]"}, {"sha": "76b66e9da80980ea30f24aa585ac64caea4ef71c", "filename": "src/tools/rustfmt/src/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -451,7 +451,7 @@ impl Rewrite for [ast::Attribute] {\n                         if next.is_doc_comment() {\n                             let snippet = context.snippet(missing_span);\n                             let (_, mlb) = has_newlines_before_after_comment(snippet);\n-                            result.push_str(&mlb);\n+                            result.push_str(mlb);\n                         }\n                     }\n                     result.push('\\n');\n@@ -484,7 +484,7 @@ impl Rewrite for [ast::Attribute] {\n                     if next.is_doc_comment() {\n                         let snippet = context.snippet(missing_span);\n                         let (_, mlb) = has_newlines_before_after_comment(snippet);\n-                        result.push_str(&mlb);\n+                        result.push_str(mlb);\n                     }\n                 }\n                 result.push('\\n');"}, {"sha": "f653a12a8afeb95fb22d3c42475c14ca8da3947e", "filename": "src/tools/rustfmt/src/attr/doc_comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fattr%2Fdoc_comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fattr%2Fdoc_comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fattr%2Fdoc_comment.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -77,7 +77,7 @@ mod tests {\n     ) {\n         assert_eq!(\n             expected_comment,\n-            format!(\"{}\", DocCommentFormatter::new(&literal, style))\n+            format!(\"{}\", DocCommentFormatter::new(literal, style))\n         );\n     }\n }"}, {"sha": "9d2e97c9479fc2dda6c063467b4cbde52a934b4b", "filename": "src/tools/rustfmt/src/bin/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fbin%2Fmain.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -20,7 +20,7 @@ use crate::rustfmt::{\n };\n \n fn main() {\n-    env_logger::init();\n+    env_logger::Builder::from_env(\"RUSTFMT_LOG\").init();\n     let opts = make_opts();\n \n     let exit_code = match execute(&opts) {"}, {"sha": "759b21218c353e70787f853a6c09725bf7132b10", "filename": "src/tools/rustfmt/src/cargo-fmt/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fcargo-fmt%2Fmain.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -401,12 +401,12 @@ fn get_targets_root_only(\n \n fn get_targets_recursive(\n     manifest_path: Option<&Path>,\n-    mut targets: &mut BTreeSet<Target>,\n+    targets: &mut BTreeSet<Target>,\n     visited: &mut BTreeSet<String>,\n ) -> Result<(), io::Error> {\n     let metadata = get_cargo_metadata(manifest_path)?;\n     for package in &metadata.packages {\n-        add_targets(&package.targets, &mut targets);\n+        add_targets(&package.targets, targets);\n \n         // Look for local dependencies using information available since cargo v1.51\n         // It's theoretically possible someone could use a newer version of rustfmt with\n@@ -427,7 +427,7 @@ fn get_targets_recursive(\n                     .any(|p| p.manifest_path.eq(&manifest_path))\n             {\n                 visited.insert(dependency.name.to_owned());\n-                get_targets_recursive(Some(&manifest_path), &mut targets, visited)?;\n+                get_targets_recursive(Some(&manifest_path), targets, visited)?;\n             }\n         }\n     }"}, {"sha": "e26e24ec55ad6c40fe495ddc41c57cba89e218c5", "filename": "src/tools/rustfmt/src/chains.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fchains.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -568,7 +568,7 @@ impl<'a> ChainFormatterShared<'a> {\n         } else {\n             self.rewrites\n                 .iter()\n-                .map(|rw| utils::unicode_str_width(&rw))\n+                .map(|rw| utils::unicode_str_width(rw))\n                 .sum()\n         } + last.tries;\n         let one_line_budget = if self.child_count == 1 {\n@@ -673,7 +673,7 @@ impl<'a> ChainFormatterShared<'a> {\n                 ChainItemKind::Comment(_, CommentPosition::Top) => result.push_str(&connector),\n                 _ => result.push_str(&connector),\n             }\n-            result.push_str(&rewrite);\n+            result.push_str(rewrite);\n         }\n \n         Some(result)"}, {"sha": "7b76c232937dc7cea63d7df07716777730cbeef2", "filename": "src/tools/rustfmt/src/comment.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fcomment.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -405,7 +405,7 @@ impl CodeBlockAttribute {\n     /// attributes are valid rust attributes\n     /// See <https://doc.rust-lang.org/rustdoc/print.html#attributes>\n     fn new(attributes: &str) -> CodeBlockAttribute {\n-        for attribute in attributes.split(\",\") {\n+        for attribute in attributes.split(',') {\n             match attribute.trim() {\n                 \"\" | \"rust\" | \"should_panic\" | \"no_run\" | \"edition2015\" | \"edition2018\"\n                 | \"edition2021\" => (),\n@@ -563,7 +563,7 @@ impl<'a> CommentRewrite<'a> {\n             result.push_str(line);\n             result.push_str(match iter.peek() {\n                 Some(next_line) if next_line.is_empty() => sep.trim_end(),\n-                Some(..) => &sep,\n+                Some(..) => sep,\n                 None => \"\",\n             });\n         }\n@@ -622,7 +622,7 @@ impl<'a> CommentRewrite<'a> {\n         let is_last = i == count_newlines(orig);\n \n         if let Some(ref mut ib) = self.item_block {\n-            if ib.add_line(&line) {\n+            if ib.add_line(line) {\n                 return false;\n             }\n             self.is_prev_line_multi_line = false;\n@@ -684,8 +684,8 @@ impl<'a> CommentRewrite<'a> {\n         self.item_block = None;\n         if let Some(stripped) = line.strip_prefix(\"```\") {\n             self.code_block_attr = Some(CodeBlockAttribute::new(stripped))\n-        } else if self.fmt.config.wrap_comments() && ItemizedBlock::is_itemized_line(&line) {\n-            let ib = ItemizedBlock::new(&line);\n+        } else if self.fmt.config.wrap_comments() && ItemizedBlock::is_itemized_line(line) {\n+            let ib = ItemizedBlock::new(line);\n             self.item_block = Some(ib);\n             return false;\n         }\n@@ -941,7 +941,7 @@ fn left_trim_comment_line<'a>(line: &'a str, style: &CommentStyle<'_>) -> (&'a s\n     {\n         (&line[4..], true)\n     } else if let CommentStyle::Custom(opener) = *style {\n-        if let Some(ref stripped) = line.strip_prefix(opener) {\n+        if let Some(stripped) = line.strip_prefix(opener) {\n             (stripped, true)\n         } else {\n             (&line[opener.trim_end().len()..], false)\n@@ -1384,7 +1384,7 @@ impl<'a> Iterator for LineClasses<'a> {\n             None => unreachable!(),\n         };\n \n-        while let Some((kind, c)) = self.base.next() {\n+        for (kind, c) in self.base.by_ref() {\n             // needed to set the kind of the ending character on the last line\n             self.kind = kind;\n             if c == '\\n' {\n@@ -1570,7 +1570,7 @@ pub(crate) fn recover_comment_removed(\n                 context.parse_sess.span_to_filename(span),\n                 vec![FormattingError::from_span(\n                     span,\n-                    &context.parse_sess,\n+                    context.parse_sess,\n                     ErrorKind::LostComment,\n                 )],\n             );\n@@ -1675,7 +1675,7 @@ impl<'a> Iterator for CommentReducer<'a> {\n fn remove_comment_header(comment: &str) -> &str {\n     if comment.starts_with(\"///\") || comment.starts_with(\"//!\") {\n         &comment[3..]\n-    } else if let Some(ref stripped) = comment.strip_prefix(\"//\") {\n+    } else if let Some(stripped) = comment.strip_prefix(\"//\") {\n         stripped\n     } else if (comment.starts_with(\"/**\") && !comment.starts_with(\"/**/\"))\n         || comment.starts_with(\"/*!\")"}, {"sha": "bce9e5d07f267a67a8c39917609d4fa38cfbf115", "filename": "src/tools/rustfmt/src/config/options.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fconfig%2Foptions.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -20,7 +20,7 @@ pub enum NewlineStyle {\n     Windows,\n     /// Force CR (`\\n).\n     Unix,\n-    /// `\\r\\n` in Windows, `\\n`` on other platforms.\n+    /// `\\r\\n` in Windows, `\\n` on other platforms.\n     Native,\n }\n \n@@ -112,6 +112,8 @@ pub enum GroupImportsTactic {\n     ///  2. other imports\n     ///  3. `self` / `crate` / `super` imports\n     StdExternalCrate,\n+    /// Discard existing groups, and create a single group for everything\n+    One,\n }\n \n #[config_type]"}, {"sha": "76f2527db3dad1d69c78d8b54c7eeea4244b4469", "filename": "src/tools/rustfmt/src/emitter/checkstyle.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Femitter%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Femitter%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Femitter%2Fcheckstyle.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -121,15 +121,15 @@ mod tests {\n             format!(r#\"<file name=\"{}\">\"#, bin_file),\n             format!(\n                 r#\"<error line=\"2\" severity=\"warning\" message=\"Should be `{}`\" />\"#,\n-                XmlEscaped(&r#\"    println!(\"Hello, world!\");\"#),\n+                XmlEscaped(r#\"    println!(\"Hello, world!\");\"#),\n             ),\n             String::from(\"</file>\"),\n         ];\n         let exp_lib_xml = vec![\n             format!(r#\"<file name=\"{}\">\"#, lib_file),\n             format!(\n                 r#\"<error line=\"2\" severity=\"warning\" message=\"Should be `{}`\" />\"#,\n-                XmlEscaped(&r#\"    println!(\"Greetings!\");\"#),\n+                XmlEscaped(r#\"    println!(\"Greetings!\");\"#),\n             ),\n             String::from(\"</file>\"),\n         ];"}, {"sha": "7264ad8bbf365baaf0f2d7e74ff3fb8e61bd5e7d", "filename": "src/tools/rustfmt/src/emitter/diff.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Femitter%2Fdiff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Femitter%2Fdiff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Femitter%2Fdiff.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -23,7 +23,7 @@ impl Emitter for DiffEmitter {\n         }: FormattedFile<'_>,\n     ) -> Result<EmitterResult, io::Error> {\n         const CONTEXT_SIZE: usize = 3;\n-        let mismatch = make_diff(&original_text, formatted_text, CONTEXT_SIZE);\n+        let mismatch = make_diff(original_text, formatted_text, CONTEXT_SIZE);\n         let has_diff = !mismatch.is_empty();\n \n         if has_diff {"}, {"sha": "58942e442de05ba39ef3472bbb6b51850711ebfc", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -257,7 +257,7 @@ pub(crate) fn format_expr(\n                         }\n                         _ => false,\n                     },\n-                    ast::ExprKind::Unary(_, ref expr) => needs_space_before_range(context, &expr),\n+                    ast::ExprKind::Unary(_, ref expr) => needs_space_before_range(context, expr),\n                     _ => false,\n                 }\n             }\n@@ -423,7 +423,7 @@ fn rewrite_empty_block(\n     prefix: &str,\n     shape: Shape,\n ) -> Option<String> {\n-    if block_has_statements(&block) {\n+    if block_has_statements(block) {\n         return None;\n     }\n \n@@ -1148,7 +1148,7 @@ pub(crate) fn is_empty_block(\n     block: &ast::Block,\n     attrs: Option<&[ast::Attribute]>,\n ) -> bool {\n-    !block_has_statements(&block)\n+    !block_has_statements(block)\n         && !block_contains_comment(context, block)\n         && attrs.map_or(true, |a| inner_attributes(a).is_empty())\n }\n@@ -1207,11 +1207,11 @@ fn rewrite_int_lit(context: &RewriteContext<'_>, lit: &ast::Lit, shape: Shape) -\n     let span = lit.span;\n     let symbol = lit.token.symbol.as_str();\n \n-    if symbol.starts_with(\"0x\") {\n+    if let Some(symbol_stripped) = symbol.strip_prefix(\"0x\") {\n         let hex_lit = match context.config.hex_literal_case() {\n             HexLiteralCase::Preserve => None,\n-            HexLiteralCase::Upper => Some(symbol[2..].to_ascii_uppercase()),\n-            HexLiteralCase::Lower => Some(symbol[2..].to_ascii_lowercase()),\n+            HexLiteralCase::Upper => Some(symbol_stripped.to_ascii_uppercase()),\n+            HexLiteralCase::Lower => Some(symbol_stripped.to_ascii_lowercase()),\n         };\n         if let Some(hex_lit) = hex_lit {\n             return wrap_str(\n@@ -1621,7 +1621,7 @@ fn rewrite_struct_lit<'a>(\n     };\n \n     let fields_str =\n-        wrap_struct_field(context, &attrs, &fields_str, shape, v_shape, one_line_width)?;\n+        wrap_struct_field(context, attrs, &fields_str, shape, v_shape, one_line_width)?;\n     Some(format!(\"{} {{{}}}\", path_str, fields_str))\n \n     // FIXME if context.config.indent_style() == Visual, but we run out\n@@ -1888,7 +1888,7 @@ pub(crate) fn rewrite_assign_rhs_expr<R: Rewrite>(\n     shape: Shape,\n     rhs_tactics: RhsTactics,\n ) -> Option<String> {\n-    let last_line_width = last_line_width(&lhs).saturating_sub(if lhs.contains('\\n') {\n+    let last_line_width = last_line_width(lhs).saturating_sub(if lhs.contains('\\n') {\n         shape.indent.width()\n     } else {\n         0\n@@ -1947,7 +1947,7 @@ pub(crate) fn rewrite_assign_rhs_with_comments<S: Into<String>, R: Rewrite>(\n \n     if contains_comment {\n         let rhs = rhs.trim_start();\n-        combine_strs_with_missing_comments(context, &lhs, &rhs, between_span, shape, allow_extend)\n+        combine_strs_with_missing_comments(context, &lhs, rhs, between_span, shape, allow_extend)\n     } else {\n         Some(lhs + &rhs)\n     }\n@@ -1962,6 +1962,9 @@ fn choose_rhs<R: Rewrite>(\n     has_rhs_comment: bool,\n ) -> Option<String> {\n     match orig_rhs {\n+        Some(ref new_str) if new_str.is_empty() => {\n+            return Some(String::new());\n+        }\n         Some(ref new_str)\n             if !new_str.contains('\\n') && unicode_str_width(new_str) <= shape.width =>\n         {"}, {"sha": "655aeda42bf28daab91e885b1fae84f37e355b14", "filename": "src/tools/rustfmt/src/format-diff/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fformat-diff%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fformat-diff%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fformat-diff%2Fmain.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -64,7 +64,7 @@ pub struct Opts {\n }\n \n fn main() {\n-    env_logger::init();\n+    env_logger::Builder::from_env(\"RUSTFMT_LOG\").init();\n     let opts = Opts::from_args();\n     if let Err(e) = run(opts) {\n         println!(\"{}\", e);"}, {"sha": "7d0facb8f12cf683b93fe7e17f630ce488190652", "filename": "src/tools/rustfmt/src/formatting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fformatting.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -155,7 +155,7 @@ impl<'a, T: FormatHandler + 'a> FormatContext<'a, T> {\n         let snippet_provider = self.parse_session.snippet_provider(module.span);\n         let mut visitor = FmtVisitor::from_parse_sess(\n             &self.parse_session,\n-            &self.config,\n+            self.config,\n             &snippet_provider,\n             self.report.clone(),\n         );\n@@ -180,7 +180,7 @@ impl<'a, T: FormatHandler + 'a> FormatContext<'a, T> {\n             &mut visitor.buffer,\n             &path,\n             &visitor.skipped_range.borrow(),\n-            &self.config,\n+            self.config,\n             &self.report,\n         );\n "}, {"sha": "579778edbe742704519998bd1aba4d1fd1bdf95d", "filename": "src/tools/rustfmt/src/git-rustfmt/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fgit-rustfmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fgit-rustfmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fgit-rustfmt%2Fmain.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -170,7 +170,7 @@ impl Config {\n }\n \n fn main() {\n-    env_logger::init();\n+    env_logger::Builder::from_env(\"RUSTFMT_LOG\").init();\n \n     let opts = make_opts();\n     let matches = opts"}, {"sha": "40e0d06f99df8d14b7279dabb7bf503c747a6fcc", "filename": "src/tools/rustfmt/src/imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fimports.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -275,7 +275,7 @@ impl UseTree {\n         shape: Shape,\n     ) -> Option<String> {\n         let vis = self.visibility.as_ref().map_or(Cow::from(\"\"), |vis| {\n-            crate::utils::format_visibility(context, &vis)\n+            crate::utils::format_visibility(context, vis)\n         });\n         let use_str = self\n             .rewrite(context, shape.offset_left(vis.len())?)\n@@ -929,7 +929,7 @@ impl Rewrite for UseTree {\n     fn rewrite(&self, context: &RewriteContext<'_>, mut shape: Shape) -> Option<String> {\n         let mut result = String::with_capacity(256);\n         let mut iter = self.path.iter().peekable();\n-        while let Some(ref segment) = iter.next() {\n+        while let Some(segment) = iter.next() {\n             let segment_str = segment.rewrite(context, shape)?;\n             result.push_str(&segment_str);\n             if iter.peek().is_some() {"}, {"sha": "50121a8b6b50e7d506d07e9a14ed645579e2d094", "filename": "src/tools/rustfmt/src/items.rs", "status": "modified", "additions": 100, "deletions": 108, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -226,7 +226,7 @@ impl<'a> FnSig<'a> {\n     fn to_str(&self, context: &RewriteContext<'_>) -> String {\n         let mut result = String::with_capacity(128);\n         // Vis defaultness constness unsafety abi.\n-        result.push_str(&*format_visibility(context, &self.visibility));\n+        result.push_str(&*format_visibility(context, self.visibility));\n         result.push_str(format_defaultness(self.defaultness));\n         result.push_str(format_constness(self.constness));\n         result.push_str(format_async(&self.is_async));\n@@ -1127,12 +1127,24 @@ pub(crate) fn format_trait(\n             }\n         }\n \n+        let block_span = mk_sp(generics.where_clause.span.hi(), item.span.hi());\n+        let snippet = context.snippet(block_span);\n+        let open_pos = snippet.find_uncommented(\"{\")? + 1;\n+\n         match context.config.brace_style() {\n             _ if last_line_contains_single_line_comment(&result)\n                 || last_line_width(&result) + 2 > context.budget(offset.width()) =>\n             {\n                 result.push_str(&offset.to_string_with_newline(context.config));\n             }\n+            _ if context.config.empty_item_single_line()\n+                && items.is_empty()\n+                && !result.contains('\\n')\n+                && !contains_comment(&snippet[open_pos..]) =>\n+            {\n+                result.push_str(\" {}\");\n+                return Some(result);\n+            }\n             BraceStyle::AlwaysNextLine => {\n                 result.push_str(&offset.to_string_with_newline(context.config));\n             }\n@@ -1149,9 +1161,6 @@ pub(crate) fn format_trait(\n         }\n         result.push('{');\n \n-        let block_span = mk_sp(generics.where_clause.span.hi(), item.span.hi());\n-        let snippet = context.snippet(block_span);\n-        let open_pos = snippet.find_uncommented(\"{\")? + 1;\n         let outer_indent_str = offset.block_only().to_string_with_newline(context.config);\n \n         if !items.is_empty() || contains_comment(&snippet[open_pos..]) {\n@@ -1181,18 +1190,6 @@ pub(crate) fn format_trait(\n     }\n }\n \n-struct OpaqueTypeBounds<'a> {\n-    generic_bounds: &'a ast::GenericBounds,\n-}\n-\n-impl<'a> Rewrite for OpaqueTypeBounds<'a> {\n-    fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n-        self.generic_bounds\n-            .rewrite(context, shape)\n-            .map(|s| format!(\"impl {}\", s))\n-    }\n-}\n-\n pub(crate) struct TraitAliasBounds<'a> {\n     generic_bounds: &'a ast::GenericBounds,\n     generics: &'a ast::Generics,\n@@ -1225,7 +1222,7 @@ impl<'a> Rewrite for TraitAliasBounds<'a> {\n         } else if fits_single_line {\n             Cow::from(\" \")\n         } else {\n-            shape.indent.to_string_with_newline(&context.config)\n+            shape.indent.to_string_with_newline(context.config)\n         };\n \n         Some(format!(\"{}{}{}\", generic_bounds_str, space, where_str))\n@@ -1243,7 +1240,7 @@ pub(crate) fn format_trait_alias(\n     let alias = rewrite_ident(context, ident);\n     // 6 = \"trait \", 2 = \" =\"\n     let g_shape = shape.offset_left(6)?.sub_width(2)?;\n-    let generics_str = rewrite_generics(context, &alias, generics, g_shape)?;\n+    let generics_str = rewrite_generics(context, alias, generics, g_shape)?;\n     let vis_str = format_visibility(context, vis);\n     let lhs = format!(\"{}trait {} =\", vis_str, generics_str);\n     // 1 = \";\"\n@@ -1391,7 +1388,7 @@ fn format_empty_struct_or_tuple(\n     closer: &str,\n ) {\n     // 3 = \" {}\" or \"();\"\n-    let used_width = last_line_used_width(&result, offset.width()) + 3;\n+    let used_width = last_line_used_width(result, offset.width()) + 3;\n     if used_width > context.config.max_width() {\n         result.push_str(&offset.to_string_with_newline(context.config))\n     }\n@@ -1514,17 +1511,84 @@ fn format_tuple_struct(\n     Some(result)\n }\n \n-pub(crate) fn rewrite_type<R: Rewrite>(\n-    context: &RewriteContext<'_>,\n+pub(crate) enum ItemVisitorKind<'a> {\n+    Item(&'a ast::Item),\n+    AssocTraitItem(&'a ast::AssocItem),\n+    AssocImplItem(&'a ast::AssocItem),\n+    ForeignItem(&'a ast::ForeignItem),\n+}\n+\n+struct TyAliasRewriteInfo<'c, 'g>(\n+    &'c RewriteContext<'c>,\n+    Indent,\n+    &'g ast::Generics,\n+    symbol::Ident,\n+    Span,\n+);\n+\n+pub(crate) fn rewrite_type_alias<'a, 'b>(\n+    ty_alias_kind: &ast::TyAlias,\n+    context: &RewriteContext<'a>,\n     indent: Indent,\n-    ident: symbol::Ident,\n-    vis: &ast::Visibility,\n-    generics: &ast::Generics,\n+    visitor_kind: &ItemVisitorKind<'b>,\n+    span: Span,\n+) -> Option<String> {\n+    use ItemVisitorKind::*;\n+\n+    let ast::TyAlias {\n+        defaultness,\n+        ref generics,\n+        ref bounds,\n+        ref ty,\n+    } = *ty_alias_kind;\n+    let ty_opt = ty.as_ref().map(|t| &**t);\n+    let (ident, vis) = match visitor_kind {\n+        Item(i) => (i.ident, &i.vis),\n+        AssocTraitItem(i) | AssocImplItem(i) => (i.ident, &i.vis),\n+        ForeignItem(i) => (i.ident, &i.vis),\n+    };\n+    let rw_info = &TyAliasRewriteInfo(context, indent, generics, ident, span);\n+\n+    // Type Aliases are formatted slightly differently depending on the context\n+    // in which they appear, whether they are opaque, and whether they are associated.\n+    // https://rustc-dev-guide.rust-lang.org/opaque-types-type-alias-impl-trait.html\n+    // https://github.com/rust-dev-tools/fmt-rfcs/blob/master/guide/items.md#type-aliases\n+    match (visitor_kind, ty_opt) {\n+        (Item(_), None) => {\n+            let op_ty = OpaqueType { bounds };\n+            rewrite_ty(rw_info, Some(bounds), Some(&op_ty), vis)\n+        }\n+        (Item(_), Some(ty)) => rewrite_ty(rw_info, Some(bounds), Some(&*ty), vis),\n+        (AssocImplItem(_), _) => {\n+            let result = if let Some(ast::Ty {\n+                kind: ast::TyKind::ImplTrait(_, ref bounds),\n+                ..\n+            }) = ty_opt\n+            {\n+                let op_ty = OpaqueType { bounds };\n+                rewrite_ty(rw_info, None, Some(&op_ty), &DEFAULT_VISIBILITY)\n+            } else {\n+                rewrite_ty(rw_info, None, ty.as_ref(), vis)\n+            }?;\n+            match defaultness {\n+                ast::Defaultness::Default(..) => Some(format!(\"default {}\", result)),\n+                _ => Some(result),\n+            }\n+        }\n+        (AssocTraitItem(_), _) | (ForeignItem(_), _) => {\n+            rewrite_ty(rw_info, Some(bounds), ty.as_ref(), vis)\n+        }\n+    }\n+}\n+\n+fn rewrite_ty<R: Rewrite>(\n+    rw_info: &TyAliasRewriteInfo<'_, '_>,\n     generic_bounds_opt: Option<&ast::GenericBounds>,\n     rhs: Option<&R>,\n-    span: Span,\n+    vis: &ast::Visibility,\n ) -> Option<String> {\n     let mut result = String::with_capacity(128);\n+    let TyAliasRewriteInfo(context, indent, generics, ident, span) = *rw_info;\n     result.push_str(&format!(\"{}type \", format_visibility(context, vis)));\n     let ident_str = rewrite_ident(context, ident);\n \n@@ -1612,28 +1676,6 @@ pub(crate) fn rewrite_type<R: Rewrite>(\n     }\n }\n \n-pub(crate) fn rewrite_opaque_type(\n-    context: &RewriteContext<'_>,\n-    indent: Indent,\n-    ident: symbol::Ident,\n-    generic_bounds: &ast::GenericBounds,\n-    generics: &ast::Generics,\n-    vis: &ast::Visibility,\n-    span: Span,\n-) -> Option<String> {\n-    let opaque_type_bounds = OpaqueTypeBounds { generic_bounds };\n-    rewrite_type(\n-        context,\n-        indent,\n-        ident,\n-        vis,\n-        generics,\n-        Some(generic_bounds),\n-        Some(&opaque_type_bounds),\n-        span,\n-    )\n-}\n-\n fn type_annotation_spacing(config: &Config) -> (&str, &str) {\n     (\n         if config.space_before_colon() { \" \" } else { \"\" },\n@@ -1871,42 +1913,6 @@ impl<'a> Rewrite for OpaqueType<'a> {\n     }\n }\n \n-pub(crate) fn rewrite_impl_type(\n-    ident: symbol::Ident,\n-    vis: &ast::Visibility,\n-    defaultness: ast::Defaultness,\n-    ty_opt: Option<&ptr::P<ast::Ty>>,\n-    generics: &ast::Generics,\n-    context: &RewriteContext<'_>,\n-    indent: Indent,\n-    span: Span,\n-) -> Option<String> {\n-    // Opaque type\n-    let result = if let Some(rustc_ast::ast::Ty {\n-        kind: ast::TyKind::ImplTrait(_, ref bounds),\n-        ..\n-    }) = ty_opt.map(|t| &**t)\n-    {\n-        rewrite_type(\n-            context,\n-            indent,\n-            ident,\n-            &DEFAULT_VISIBILITY,\n-            generics,\n-            None,\n-            Some(&OpaqueType { bounds }),\n-            span,\n-        )\n-    } else {\n-        rewrite_type(context, indent, ident, vis, generics, None, ty_opt, span)\n-    }?;\n-\n-    match defaultness {\n-        ast::Defaultness::Default(..) => Some(format!(\"default {}\", result)),\n-        _ => Some(result),\n-    }\n-}\n-\n impl Rewrite for ast::FnRetTy {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         match *self {\n@@ -2071,7 +2077,7 @@ fn rewrite_explicit_self(\n                     )?;\n                     Some(combine_strs_with_missing_comments(\n                         context,\n-                        &param_attrs,\n+                        param_attrs,\n                         &format!(\"&{} {}self\", lifetime_str, mut_str),\n                         span,\n                         shape,\n@@ -2080,7 +2086,7 @@ fn rewrite_explicit_self(\n                 }\n                 None => Some(combine_strs_with_missing_comments(\n                     context,\n-                    &param_attrs,\n+                    param_attrs,\n                     &format!(\"&{}self\", mut_str),\n                     span,\n                     shape,\n@@ -2096,7 +2102,7 @@ fn rewrite_explicit_self(\n \n             Some(combine_strs_with_missing_comments(\n                 context,\n-                &param_attrs,\n+                param_attrs,\n                 &format!(\"{}self: {}\", format_mutability(mutability), type_str),\n                 span,\n                 shape,\n@@ -2105,7 +2111,7 @@ fn rewrite_explicit_self(\n         }\n         ast::SelfKind::Value(mutability) => Some(combine_strs_with_missing_comments(\n             context,\n-            &param_attrs,\n+            param_attrs,\n             &format!(\"{}self\", format_mutability(mutability)),\n             span,\n             shape,\n@@ -2231,7 +2237,7 @@ fn rewrite_fn_base(\n     }\n \n     // Skip `pub(crate)`.\n-    let lo_after_visibility = get_bytepos_after_visibility(&fn_sig.visibility, span);\n+    let lo_after_visibility = get_bytepos_after_visibility(fn_sig.visibility, span);\n     // A conservative estimation, the goal is to be over all parens in generics\n     let params_start = fn_sig\n         .generics\n@@ -2989,7 +2995,7 @@ fn format_header(\n     let mut result = String::with_capacity(128);\n     let shape = Shape::indented(offset, context.config);\n \n-    result.push_str(&format_visibility(context, vis).trim());\n+    result.push_str(format_visibility(context, vis).trim());\n \n     // Check for a missing comment between the visibility and the item name.\n     let after_vis = vis.span.hi();\n@@ -3010,7 +3016,7 @@ fn format_header(\n         }\n     }\n \n-    result.push_str(&rewrite_ident(context, ident));\n+    result.push_str(rewrite_ident(context, ident));\n \n     result\n }\n@@ -3177,23 +3183,9 @@ impl Rewrite for ast::ForeignItem {\n                 // 1 = ;\n                 rewrite_assign_rhs(context, prefix, &**ty, shape.sub_width(1)?).map(|s| s + \";\")\n             }\n-            ast::ForeignItemKind::TyAlias(ref ty_alias_kind) => {\n-                let ast::TyAlias {\n-                    ref generics,\n-                    ref bounds,\n-                    ref ty,\n-                    ..\n-                } = **ty_alias_kind;\n-                rewrite_type(\n-                    &context,\n-                    shape.indent,\n-                    self.ident,\n-                    &self.vis,\n-                    generics,\n-                    Some(bounds),\n-                    ty.as_ref(),\n-                    self.span,\n-                )\n+            ast::ForeignItemKind::TyAlias(ref ty_alias) => {\n+                let (kind, span) = (&ItemVisitorKind::ForeignItem(&self), self.span);\n+                rewrite_type_alias(ty_alias, context, shape.indent, kind, span)\n             }\n             ast::ForeignItemKind::MacCall(ref mac) => {\n                 rewrite_macro(mac, None, context, shape, MacroPosition::Item)\n@@ -3243,7 +3235,7 @@ fn rewrite_attrs(\n     combine_strs_with_missing_comments(\n         context,\n         &attrs_str,\n-        &item_str,\n+        item_str,\n         missed_span,\n         shape,\n         allow_extend,"}, {"sha": "792a1080f0e92189e276168cc0344ef8ba423eba", "filename": "src/tools/rustfmt/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Flib.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -283,7 +283,7 @@ impl FormatReport {\n         writeln!(\n             t,\n             \"{}\",\n-            FormatReportFormatterBuilder::new(&self)\n+            FormatReportFormatterBuilder::new(self)\n                 .enable_colors(true)\n                 .build()\n         )?;\n@@ -297,7 +297,7 @@ impl FormatReport {\n impl fmt::Display for FormatReport {\n     // Prints all the formatting errors.\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n-        write!(fmt, \"{}\", FormatReportFormatterBuilder::new(&self).build())?;\n+        write!(fmt, \"{}\", FormatReportFormatterBuilder::new(self).build())?;\n         Ok(())\n     }\n }"}, {"sha": "d341ec8e6b0e7d15f428cc3e91527635129f9687", "filename": "src/tools/rustfmt/src/lists.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Flists.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -386,7 +386,7 @@ where\n                         result.push('\\n');\n                         result.push_str(indent_str);\n                         // This is the width of the item (without comments).\n-                        line_len = item.item.as_ref().map_or(0, |s| unicode_str_width(&s));\n+                        line_len = item.item.as_ref().map_or(0, |s| unicode_str_width(s));\n                     }\n                 } else {\n                     result.push(' ')\n@@ -820,7 +820,7 @@ where\n pub(crate) fn total_item_width(item: &ListItem) -> usize {\n     comment_len(item.pre_comment.as_ref().map(|x| &(*x)[..]))\n         + comment_len(item.post_comment.as_ref().map(|x| &(*x)[..]))\n-        + item.item.as_ref().map_or(0, |s| unicode_str_width(&s))\n+        + item.item.as_ref().map_or(0, |s| unicode_str_width(s))\n }\n \n fn comment_len(comment: Option<&str>) -> usize {"}, {"sha": "ef747638e33ec83459e4b9f9fe02d052e41c4812", "filename": "src/tools/rustfmt/src/macros.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -186,7 +186,7 @@ fn return_macro_parse_failure_fallback(\n         })\n         .unwrap_or(false);\n     if is_like_block_indent_style {\n-        return trim_left_preserve_layout(context.snippet(span), indent, &context.config);\n+        return trim_left_preserve_layout(context.snippet(span), indent, context.config);\n     }\n \n     context.skipped_range.borrow_mut().push((\n@@ -437,7 +437,7 @@ fn rewrite_macro_inner(\n             // the `macro_name!` and `{ /* macro_body */ }` but skip modifying\n             // anything in between the braces (for now).\n             let snippet = context.snippet(mac.span()).trim_start_matches(|c| c != '{');\n-            match trim_left_preserve_layout(snippet, shape.indent, &context.config) {\n+            match trim_left_preserve_layout(snippet, shape.indent, context.config) {\n                 Some(macro_body) => Some(format!(\"{} {}\", macro_name, macro_body)),\n                 None => Some(format!(\"{} {}\", macro_name, snippet)),\n             }\n@@ -901,7 +901,7 @@ impl MacroArgParser {\n                     break;\n                 }\n                 TokenTree::Token(ref t) => {\n-                    buffer.push_str(&pprust::token_to_string(&t));\n+                    buffer.push_str(&pprust::token_to_string(t));\n                 }\n                 _ => return None,\n             }\n@@ -1045,7 +1045,7 @@ fn wrap_macro_args_inner(\n     let mut iter = args.iter().peekable();\n     let indent_str = shape.indent.to_string_with_newline(context.config);\n \n-    while let Some(ref arg) = iter.next() {\n+    while let Some(arg) = iter.next() {\n         result.push_str(&arg.rewrite(context, shape, use_multiple_lines)?);\n \n         if use_multiple_lines\n@@ -1055,7 +1055,7 @@ fn wrap_macro_args_inner(\n                 result.pop();\n             }\n             result.push_str(&indent_str);\n-        } else if let Some(ref next_arg) = iter.peek() {\n+        } else if let Some(next_arg) = iter.peek() {\n             let space_before_dollar =\n                 !arg.kind.ends_with_space() && next_arg.kind.starts_with_dollar();\n             let space_before_brace = next_arg.kind.starts_with_brace();\n@@ -1370,7 +1370,7 @@ impl MacroBranch {\n                     {\n                         s += &indent_str;\n                     }\n-                    (s + l + \"\\n\", indent_next_line(kind, &l, &config))\n+                    (s + l + \"\\n\", indent_next_line(kind, l, &config))\n                 },\n             )\n             .0;\n@@ -1514,11 +1514,11 @@ fn rewrite_macro_with_items(\n             MacroArg::Item(item) => item,\n             _ => return None,\n         };\n-        visitor.visit_item(&item);\n+        visitor.visit_item(item);\n     }\n \n     let mut result = String::with_capacity(256);\n-    result.push_str(&macro_name);\n+    result.push_str(macro_name);\n     result.push_str(opener);\n     result.push_str(&visitor.block_indent.to_string_with_newline(context.config));\n     result.push_str(visitor.buffer.trim());"}, {"sha": "22d23fc1cdba49bc3f1f68fc4247f5f521ceeabd", "filename": "src/tools/rustfmt/src/matches.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmatches.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -168,7 +168,7 @@ fn collect_beginning_verts(\n         .map(|a| {\n             context\n                 .snippet(a.pat.span)\n-                .starts_with(\"|\")\n+                .starts_with('|')\n                 .then(|| a.pat.span().lo())\n         })\n         .collect()\n@@ -319,7 +319,7 @@ fn flatten_arm_body<'a>(\n     let can_extend =\n         |expr| !context.config.force_multiline_blocks() && can_flatten_block_around_this(expr);\n \n-    if let Some(ref block) = block_can_be_flattened(context, body) {\n+    if let Some(block) = block_can_be_flattened(context, body) {\n         if let ast::StmtKind::Expr(ref expr) = block.stmts[0].kind {\n             if let ast::ExprKind::Block(..) = expr.kind {\n                 flatten_arm_body(context, expr, None)\n@@ -393,7 +393,7 @@ fn rewrite_match_body(\n         if comment_str.is_empty() {\n             String::new()\n         } else {\n-            rewrite_comment(comment_str, false, shape, &context.config)?\n+            rewrite_comment(comment_str, false, shape, context.config)?\n         }\n     };\n \n@@ -408,8 +408,8 @@ fn rewrite_match_body(\n                 result.push_str(&arrow_comment);\n             }\n             result.push_str(&nested_indent_str);\n-            result.push_str(&body_str);\n-            result.push_str(&comma);\n+            result.push_str(body_str);\n+            result.push_str(comma);\n             return Some(result);\n         }\n \n@@ -451,7 +451,7 @@ fn rewrite_match_body(\n             result.push_str(&arrow_comment);\n         }\n         result.push_str(&block_sep);\n-        result.push_str(&body_str);\n+        result.push_str(body_str);\n         result.push_str(&body_suffix);\n         Some(result)\n     };"}, {"sha": "b1f229d9daaf5f411082f260aa68e358de077dc9", "filename": "src/tools/rustfmt/src/modules.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -16,7 +16,7 @@ use crate::syntux::parser::{\n     Directory, DirectoryOwnership, ModError, ModulePathSuccess, Parser, ParserError,\n };\n use crate::syntux::session::ParseSess;\n-use crate::utils::contains_skip;\n+use crate::utils::{contains_skip, mk_sp};\n \n mod visitor;\n \n@@ -135,10 +135,12 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n             self.visit_mod_from_ast(&krate.items)?;\n         }\n \n+        let snippet_provider = self.parse_sess.snippet_provider(krate.span);\n+\n         self.file_map.insert(\n             root_filename,\n             Module::new(\n-                krate.span,\n+                mk_sp(snippet_provider.start_pos(), snippet_provider.end_pos()),\n                 None,\n                 Cow::Borrowed(&krate.items),\n                 Cow::Borrowed(&krate.attrs),\n@@ -197,7 +199,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n     /// Visit modules from AST.\n     fn visit_mod_from_ast(\n         &mut self,\n-        items: &'ast Vec<rustc_ast::ptr::P<ast::Item>>,\n+        items: &'ast [rustc_ast::ptr::P<ast::Item>],\n     ) -> Result<(), ModuleResolutionError> {\n         for item in items {\n             if is_cfg_if(item) {\n@@ -290,7 +292,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                 };\n                 self.visit_sub_mod_after_directory_update(sub_mod, Some(directory))\n             }\n-            SubModKind::Internal(ref item) => {\n+            SubModKind::Internal(item) => {\n                 self.push_inline_mod_directory(item.ident, &item.attrs);\n                 self.visit_sub_mod_after_directory_update(sub_mod, None)\n             }\n@@ -317,9 +319,11 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n         }\n         match (sub_mod.ast_mod_kind, sub_mod.items) {\n             (Some(Cow::Borrowed(ast::ModKind::Loaded(items, _, _))), _) => {\n-                self.visit_mod_from_ast(&items)\n+                self.visit_mod_from_ast(items)\n+            }\n+            (Some(Cow::Owned(ast::ModKind::Loaded(items, _, _))), _) | (_, Cow::Owned(items)) => {\n+                self.visit_mod_outside_ast(items)\n             }\n-            (Some(Cow::Owned(..)), Cow::Owned(items)) => self.visit_mod_outside_ast(items),\n             (_, _) => Ok(()),\n         }\n     }"}, {"sha": "3475f5c378cd2fbde554e4a79d0c191bf99d0a97", "filename": "src/tools/rustfmt/src/overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Foverflow.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -394,7 +394,7 @@ impl<'a> Context<'a> {\n     ) -> Option<String> {\n         let last_item = self.last_item()?;\n         let rewrite = match last_item {\n-            OverflowableItem::Expr(ref expr) => {\n+            OverflowableItem::Expr(expr) => {\n                 match expr.kind {\n                     // When overflowing the closure which consists of a single control flow\n                     // expression, force to use block if its condition uses multi line."}, {"sha": "d1c75126ea4a7fce24a8eede42ecd677df916d3e", "filename": "src/tools/rustfmt/src/pairs.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fpairs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fpairs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fpairs.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -55,11 +55,11 @@ fn rewrite_pairs_one_line<T: Rewrite>(\n \n     for ((_, rewrite), s) in list.list.iter().zip(list.separators.iter()) {\n         if let Some(rewrite) = rewrite {\n-            if !is_single_line(&rewrite) || result.len() > shape.width {\n+            if !is_single_line(rewrite) || result.len() > shape.width {\n                 return None;\n             }\n \n-            result.push_str(&rewrite);\n+            result.push_str(rewrite);\n             result.push(' ');\n             result.push_str(s);\n             result.push(' ');\n@@ -94,18 +94,18 @@ fn rewrite_pairs_multiline<T: Rewrite>(\n     shape: Shape,\n     context: &RewriteContext<'_>,\n ) -> Option<String> {\n-    let rhs_offset = shape.rhs_overhead(&context.config);\n+    let rhs_offset = shape.rhs_overhead(context.config);\n     let nested_shape = (match context.config.indent_style() {\n         IndentStyle::Visual => shape.visual_indent(0),\n         IndentStyle::Block => shape.block_indent(context.config.tab_spaces()),\n     })\n-    .with_max_width(&context.config)\n+    .with_max_width(context.config)\n     .sub_width(rhs_offset)?;\n \n     let indent_str = nested_shape.indent.to_string_with_newline(context.config);\n     let mut result = String::new();\n \n-    result.push_str(&list.list[0].1.as_ref()?);\n+    result.push_str(list.list[0].1.as_ref()?);\n \n     for ((e, default_rw), s) in list.list[1..].iter().zip(list.separators.iter()) {\n         // The following test checks if we should keep two subexprs on the same\n@@ -144,7 +144,7 @@ fn rewrite_pairs_multiline<T: Rewrite>(\n             }\n         }\n \n-        result.push_str(&default_rw.as_ref()?);\n+        result.push_str(default_rw.as_ref()?);\n     }\n     Some(result)\n }\n@@ -264,12 +264,12 @@ impl FlattenPair for ast::Expr {\n                 return node.rewrite(context, shape);\n             }\n             let nested_overhead = sep + 1;\n-            let rhs_offset = shape.rhs_overhead(&context.config);\n+            let rhs_offset = shape.rhs_overhead(context.config);\n             let nested_shape = (match context.config.indent_style() {\n                 IndentStyle::Visual => shape.visual_indent(0),\n                 IndentStyle::Block => shape.block_indent(context.config.tab_spaces()),\n             })\n-            .with_max_width(&context.config)\n+            .with_max_width(context.config)\n             .sub_width(rhs_offset)?;\n             let default_shape = match context.config.binop_separator() {\n                 SeparatorPlace::Back => nested_shape.sub_width(nested_overhead)?,"}, {"sha": "a80d63201f982902a385d4a192273810fef1edce", "filename": "src/tools/rustfmt/src/patterns.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fpatterns.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -456,11 +456,11 @@ fn rewrite_tuple_pat(\n     context: &RewriteContext<'_>,\n     shape: Shape,\n ) -> Option<String> {\n-    let mut pat_vec: Vec<_> = pats.iter().map(|x| TuplePatField::Pat(x)).collect();\n-\n-    if pat_vec.is_empty() {\n+    if pats.is_empty() {\n         return Some(format!(\"{}()\", path_str.unwrap_or_default()));\n     }\n+    let mut pat_vec: Vec<_> = pats.iter().map(TuplePatField::Pat).collect();\n+\n     let wildcard_suffix_len = count_wildcard_suffix_len(context, &pat_vec, span, shape);\n     let (pat_vec, span) = if context.config.condense_wildcard_suffixes() && wildcard_suffix_len >= 2\n     {\n@@ -482,7 +482,7 @@ fn rewrite_tuple_pat(\n     let path_str = path_str.unwrap_or_default();\n \n     overflow::rewrite_with_parens(\n-        &context,\n+        context,\n         &path_str,\n         pat_vec.iter(),\n         shape,"}, {"sha": "0732c8ee70059ca372ff28c0d2445a2394c586e8", "filename": "src/tools/rustfmt/src/reorder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Freorder.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -118,7 +118,9 @@ fn rewrite_reorderable_or_regroupable_items(\n             };\n \n             let mut regrouped_items = match context.config.group_imports() {\n-                GroupImportsTactic::Preserve => vec![normalized_items],\n+                GroupImportsTactic::Preserve | GroupImportsTactic::One => {\n+                    vec![normalized_items]\n+                }\n                 GroupImportsTactic::StdExternalCrate => group_imports(normalized_items),\n             };\n "}, {"sha": "d1bb2f80004aa08461ddf0306bf2285130f80e35", "filename": "src/tools/rustfmt/src/syntux/parser.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fsyntux%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fsyntux%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fsyntux%2Fparser.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -112,7 +112,7 @@ impl<'a> Parser<'a> {\n         span: Span,\n     ) -> Result<(Vec<ast::Attribute>, Vec<ptr::P<ast::Item>>, Span), ParserError> {\n         let result = catch_unwind(AssertUnwindSafe(|| {\n-            let mut parser = new_parser_from_file(sess.inner(), &path, Some(span));\n+            let mut parser = new_parser_from_file(sess.inner(), path, Some(span));\n             match parser.parse_mod(&TokenKind::Eof) {\n                 Ok(result) => Some(result),\n                 Err(mut e) => {\n@@ -125,18 +125,12 @@ impl<'a> Parser<'a> {\n             }\n         }));\n         match result {\n-            Ok(Some(m)) => {\n-                if !sess.has_errors() {\n-                    return Ok(m);\n-                }\n-\n-                if sess.can_reset_errors() {\n-                    sess.reset_errors();\n-                    return Ok(m);\n-                }\n-                Err(ParserError::ParseError)\n+            Ok(Some(m)) if !sess.has_errors() => Ok(m),\n+            Ok(Some(m)) if sess.can_reset_errors() => {\n+                sess.reset_errors();\n+                Ok(m)\n             }\n-            Ok(None) => Err(ParserError::ParseError),\n+            Ok(_) => Err(ParserError::ParseError),\n             Err(..) if path.exists() => Err(ParserError::ParseError),\n             Err(_) => Err(ParserError::ParsePanicError),\n         }"}, {"sha": "cdb4893d443b9b381cde8e4c1d284aee5154ddd4", "filename": "src/tools/rustfmt/src/syntux/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fsyntux%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fsyntux%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fsyntux%2Fsession.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -164,7 +164,7 @@ impl ParseSess {\n     }\n \n     pub(crate) fn ignore_file(&self, path: &FileName) -> bool {\n-        self.ignore_path_set.as_ref().is_match(&path)\n+        self.ignore_path_set.as_ref().is_match(path)\n     }\n \n     pub(crate) fn set_silent_emitter(&mut self) {"}, {"sha": "e2620508c340bad91699e8ebd90b36f2a80f6049", "filename": "src/tools/rustfmt/src/test/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftest%2Fmod.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -535,9 +535,9 @@ fn check_files(files: Vec<PathBuf>, opt_config: &Option<PathBuf>) -> (Vec<Format\n \n         debug!(\"Testing '{}'...\", file_name.display());\n \n-        match idempotent_check(&file_name, &opt_config) {\n+        match idempotent_check(&file_name, opt_config) {\n             Ok(ref report) if report.has_warnings() => {\n-                print!(\"{}\", FormatReportFormatterBuilder::new(&report).build());\n+                print!(\"{}\", FormatReportFormatterBuilder::new(report).build());\n                 fails += 1;\n             }\n             Ok(report) => reports.push(report),"}, {"sha": "ae4a0d0fccb191003dd5bdc04d2378c1b6707228", "filename": "src/tools/rustfmt/src/test/mod_resolver.rs", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Ftest%2Fmod_resolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Ftest%2Fmod_resolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftest%2Fmod_resolver.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -5,21 +5,39 @@ use super::read_config;\n \n use crate::{FileName, Input, Session};\n \n-#[test]\n-fn nested_out_of_line_mods_loaded() {\n-    // See also https://github.com/rust-lang/rustfmt/issues/4874\n-    let filename = \"tests/mod-resolver/issue-4874/main.rs\";\n-    let input_file = PathBuf::from(filename);\n+fn verify_mod_resolution(input_file_name: &str, exp_misformatted_files: &[&str]) {\n+    let input_file = PathBuf::from(input_file_name);\n     let config = read_config(&input_file);\n     let mut session = Session::<io::Stdout>::new(config, None);\n     let report = session\n-        .format(Input::File(filename.into()))\n+        .format(Input::File(input_file_name.into()))\n         .expect(\"Should not have had any execution errors\");\n     let errors_by_file = &report.internal.borrow().0;\n-    assert!(errors_by_file.contains_key(&FileName::Real(PathBuf::from(\n-        \"tests/mod-resolver/issue-4874/bar/baz.rs\",\n-    ))));\n-    assert!(errors_by_file.contains_key(&FileName::Real(PathBuf::from(\n-        \"tests/mod-resolver/issue-4874/foo/qux.rs\",\n-    ))));\n+    for exp_file in exp_misformatted_files {\n+        assert!(errors_by_file.contains_key(&FileName::Real(PathBuf::from(exp_file))));\n+    }\n+}\n+\n+#[test]\n+fn nested_out_of_line_mods_loaded() {\n+    // See also https://github.com/rust-lang/rustfmt/issues/4874\n+    verify_mod_resolution(\n+        \"tests/mod-resolver/issue-4874/main.rs\",\n+        &[\n+            \"tests/mod-resolver/issue-4874/bar/baz.rs\",\n+            \"tests/mod-resolver/issue-4874/foo/qux.rs\",\n+        ],\n+    );\n+}\n+\n+#[test]\n+fn out_of_line_nested_inline_within_out_of_line() {\n+    // See also https://github.com/rust-lang/rustfmt/issues/5063\n+    verify_mod_resolution(\n+        \"tests/mod-resolver/issue-5063/main.rs\",\n+        &[\n+            \"tests/mod-resolver/issue-5063/foo/bar/baz.rs\",\n+            \"tests/mod-resolver/issue-5063/foo.rs\",\n+        ],\n+    );\n }"}, {"sha": "9ea90c5e46dd87104522dd220558e7127ade7cdb", "filename": "src/tools/rustfmt/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -728,7 +728,7 @@ impl Rewrite for ast::Ty {\n                     result = combine_strs_with_missing_comments(\n                         context,\n                         result.trim_end(),\n-                        &mt.ty.rewrite(&context, shape)?,\n+                        &mt.ty.rewrite(context, shape)?,\n                         before_ty_span,\n                         shape,\n                         true,\n@@ -738,7 +738,7 @@ impl Rewrite for ast::Ty {\n                     let budget = shape.width.checked_sub(used_width)?;\n                     let ty_str = mt\n                         .ty\n-                        .rewrite(&context, Shape::legacy(budget, shape.indent + used_width))?;\n+                        .rewrite(context, Shape::legacy(budget, shape.indent + used_width))?;\n                     result.push_str(&ty_str);\n                 }\n "}, {"sha": "3a8713c5bdb01d678f41892a2a149ee8946e8575", "filename": "src/tools/rustfmt/src/utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -42,7 +42,7 @@ pub(crate) fn is_same_visibility(a: &Visibility, b: &Visibility) -> bool {\n         (\n             VisibilityKind::Restricted { path: p, .. },\n             VisibilityKind::Restricted { path: q, .. },\n-        ) => pprust::path_to_string(&p) == pprust::path_to_string(&q),\n+        ) => pprust::path_to_string(p) == pprust::path_to_string(q),\n         (VisibilityKind::Public, VisibilityKind::Public)\n         | (VisibilityKind::Inherited, VisibilityKind::Inherited)\n         | (\n@@ -689,7 +689,7 @@ mod test {\n     #[test]\n     fn test_remove_trailing_white_spaces() {\n         let s = \"    r#\\\"\\n        test\\n    \\\"#\";\n-        assert_eq!(remove_trailing_white_spaces(&s), s);\n+        assert_eq!(remove_trailing_white_spaces(s), s);\n     }\n \n     #[test]\n@@ -698,7 +698,7 @@ mod test {\n         let config = Config::default();\n         let indent = Indent::new(4, 0);\n         assert_eq!(\n-            trim_left_preserve_layout(&s, indent, &config),\n+            trim_left_preserve_layout(s, indent, &config),\n             Some(\"aaa\\n    bbb\\n    ccc\".to_string())\n         );\n     }"}, {"sha": "527042d098a1c61f7d6252438ea4b97ba741c5d7", "filename": "src/tools/rustfmt/src/visitor.rs", "status": "modified", "additions": 62, "deletions": 135, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -12,8 +12,7 @@ use crate::config::{BraceStyle, Config};\n use crate::coverage::transform_missing_snippet;\n use crate::items::{\n     format_impl, format_trait, format_trait_alias, is_mod_decl, is_use_item, rewrite_extern_crate,\n-    rewrite_impl_type, rewrite_opaque_type, rewrite_type, FnBraceStyle, FnSig, StaticParts,\n-    StructParts,\n+    rewrite_type_alias, FnBraceStyle, FnSig, ItemVisitorKind, StaticParts, StructParts,\n };\n use crate::macros::{macro_style, rewrite_macro, rewrite_macro_def, MacroPosition};\n use crate::modules::Module;\n@@ -164,7 +163,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     );\n                 } else {\n                     let shape = self.shape();\n-                    let rewrite = self.with_context(|ctx| stmt.rewrite(&ctx, shape));\n+                    let rewrite = self.with_context(|ctx| stmt.rewrite(ctx, shape));\n                     self.push_rewrite(stmt.span(), rewrite)\n                 }\n             }\n@@ -273,9 +272,9 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n \n         let comment_snippet = self.snippet(span);\n \n-        let align_to_right = if unindent_comment && contains_comment(&comment_snippet) {\n+        let align_to_right = if unindent_comment && contains_comment(comment_snippet) {\n             let first_lines = comment_snippet.splitn(2, '/').next().unwrap_or(\"\");\n-            last_line_width(first_lines) > last_line_width(&comment_snippet)\n+            last_line_width(first_lines) > last_line_width(comment_snippet)\n         } else {\n             false\n         };\n@@ -439,7 +438,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         let filtered_attrs;\n         let mut attrs = &item.attrs;\n         let skip_context_saved = self.skip_context.clone();\n-        self.skip_context.update_with_attrs(&attrs);\n+        self.skip_context.update_with_attrs(attrs);\n \n         let should_visit_node_again = match item.kind {\n             // For use/extern crate items, skip rewriting attributes but check for a skip attribute.\n@@ -488,12 +487,12 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 ast::ItemKind::Use(ref tree) => self.format_import(item, tree),\n                 ast::ItemKind::Impl { .. } => {\n                     let block_indent = self.block_indent;\n-                    let rw = self.with_context(|ctx| format_impl(&ctx, item, block_indent));\n+                    let rw = self.with_context(|ctx| format_impl(ctx, item, block_indent));\n                     self.push_rewrite(item.span, rw);\n                 }\n                 ast::ItemKind::Trait(..) => {\n                     let block_indent = self.block_indent;\n-                    let rw = self.with_context(|ctx| format_trait(&ctx, item, block_indent));\n+                    let rw = self.with_context(|ctx| format_trait(ctx, item, block_indent));\n                     self.push_rewrite(item.span, rw);\n                 }\n                 ast::ItemKind::TraitAlias(ref generics, ref generic_bounds) => {\n@@ -568,40 +567,9 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                         self.push_rewrite(item.span, rewrite);\n                     }\n                 }\n-                ast::ItemKind::TyAlias(ref alias_kind) => {\n-                    let ast::TyAlias {\n-                        ref generics,\n-                        ref bounds,\n-                        ref ty,\n-                        ..\n-                    } = **alias_kind;\n-                    match ty {\n-                        Some(ty) => {\n-                            let rewrite = rewrite_type(\n-                                &self.get_context(),\n-                                self.block_indent,\n-                                item.ident,\n-                                &item.vis,\n-                                generics,\n-                                Some(bounds),\n-                                Some(&*ty),\n-                                item.span,\n-                            );\n-                            self.push_rewrite(item.span, rewrite);\n-                        }\n-                        None => {\n-                            let rewrite = rewrite_opaque_type(\n-                                &self.get_context(),\n-                                self.block_indent,\n-                                item.ident,\n-                                bounds,\n-                                generics,\n-                                &item.vis,\n-                                item.span,\n-                            );\n-                            self.push_rewrite(item.span, rewrite);\n-                        }\n-                    }\n+                ast::ItemKind::TyAlias(ref ty_alias) => {\n+                    use ItemVisitorKind::Item;\n+                    self.visit_ty_alias_kind(ty_alias, &Item(&item), item.span);\n                 }\n                 ast::ItemKind::GlobalAsm(..) => {\n                     let snippet = Some(self.snippet(item.span).to_owned());\n@@ -624,127 +592,86 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         self.skip_context = skip_context_saved;\n     }\n \n-    pub(crate) fn visit_trait_item(&mut self, ti: &ast::AssocItem) {\n-        skip_out_of_file_lines_range_visitor!(self, ti.span);\n+    fn visit_ty_alias_kind(\n+        &mut self,\n+        ty_kind: &ast::TyAlias,\n+        visitor_kind: &ItemVisitorKind<'_>,\n+        span: Span,\n+    ) {\n+        let rewrite = rewrite_type_alias(\n+            ty_kind,\n+            &self.get_context(),\n+            self.block_indent,\n+            visitor_kind,\n+            span,\n+        );\n+        self.push_rewrite(span, rewrite);\n+    }\n+\n+    fn visit_assoc_item(&mut self, visitor_kind: &ItemVisitorKind<'_>) {\n+        use ItemVisitorKind::*;\n+        // TODO(calebcartwright): Not sure the skip spans are correct\n+        let (ai, skip_span, assoc_ctxt) = match visitor_kind {\n+            AssocTraitItem(ai) => (*ai, ai.span(), visit::AssocCtxt::Trait),\n+            AssocImplItem(ai) => (*ai, ai.span, visit::AssocCtxt::Impl),\n+            _ => unreachable!(),\n+        };\n+        skip_out_of_file_lines_range_visitor!(self, ai.span);\n \n-        if self.visit_attrs(&ti.attrs, ast::AttrStyle::Outer) {\n-            self.push_skipped_with_span(ti.attrs.as_slice(), ti.span(), ti.span());\n+        if self.visit_attrs(&ai.attrs, ast::AttrStyle::Outer) {\n+            self.push_skipped_with_span(&ai.attrs.as_slice(), skip_span, skip_span);\n             return;\n         }\n \n         // TODO(calebcartwright): consider enabling box_patterns feature gate\n-        match ti.kind {\n-            ast::AssocItemKind::Const(..) => self.visit_static(&StaticParts::from_trait_item(ti)),\n-            ast::AssocItemKind::Fn(ref fn_kind) => {\n+        match (&ai.kind, visitor_kind) {\n+            (ast::AssocItemKind::Const(..), AssocTraitItem(_)) => {\n+                self.visit_static(&StaticParts::from_trait_item(&ai))\n+            }\n+            (ast::AssocItemKind::Const(..), AssocImplItem(_)) => {\n+                self.visit_static(&StaticParts::from_impl_item(&ai))\n+            }\n+            (ast::AssocItemKind::Fn(ref fn_kind), _) => {\n                 let ast::Fn {\n                     defaultness,\n                     ref sig,\n                     ref generics,\n                     ref body,\n                 } = **fn_kind;\n                 if let Some(ref body) = body {\n-                    let inner_attrs = inner_attributes(&ti.attrs);\n-                    let fn_ctxt = visit::FnCtxt::Assoc(visit::AssocCtxt::Trait);\n+                    let inner_attrs = inner_attributes(&ai.attrs);\n+                    let fn_ctxt = visit::FnCtxt::Assoc(assoc_ctxt);\n                     self.visit_fn(\n-                        visit::FnKind::Fn(fn_ctxt, ti.ident, sig, &ti.vis, Some(body)),\n+                        visit::FnKind::Fn(fn_ctxt, ai.ident, sig, &ai.vis, Some(body)),\n                         generics,\n                         &sig.decl,\n-                        ti.span,\n+                        ai.span,\n                         defaultness,\n                         Some(&inner_attrs),\n                     );\n                 } else {\n                     let indent = self.block_indent;\n                     let rewrite =\n-                        self.rewrite_required_fn(indent, ti.ident, sig, &ti.vis, generics, ti.span);\n-                    self.push_rewrite(ti.span, rewrite);\n+                        self.rewrite_required_fn(indent, ai.ident, sig, &ai.vis, generics, ai.span);\n+                    self.push_rewrite(ai.span, rewrite);\n                 }\n             }\n-            ast::AssocItemKind::TyAlias(ref ty_alias_kind) => {\n-                let ast::TyAlias {\n-                    ref generics,\n-                    ref bounds,\n-                    ref ty,\n-                    ..\n-                } = **ty_alias_kind;\n-                let rewrite = rewrite_type(\n-                    &self.get_context(),\n-                    self.block_indent,\n-                    ti.ident,\n-                    &ti.vis,\n-                    generics,\n-                    Some(bounds),\n-                    ty.as_ref(),\n-                    ti.span,\n-                );\n-                self.push_rewrite(ti.span, rewrite);\n+            (ast::AssocItemKind::TyAlias(ref ty_alias), _) => {\n+                self.visit_ty_alias_kind(ty_alias, visitor_kind, ai.span);\n             }\n-            ast::AssocItemKind::MacCall(ref mac) => {\n-                self.visit_mac(mac, Some(ti.ident), MacroPosition::Item);\n+            (ast::AssocItemKind::MacCall(ref mac), _) => {\n+                self.visit_mac(mac, Some(ai.ident), MacroPosition::Item);\n             }\n+            _ => unreachable!(),\n         }\n     }\n \n-    pub(crate) fn visit_impl_item(&mut self, ii: &ast::AssocItem) {\n-        skip_out_of_file_lines_range_visitor!(self, ii.span);\n-\n-        if self.visit_attrs(&ii.attrs, ast::AttrStyle::Outer) {\n-            self.push_skipped_with_span(ii.attrs.as_slice(), ii.span, ii.span);\n-            return;\n-        }\n+    pub(crate) fn visit_trait_item(&mut self, ti: &ast::AssocItem) {\n+        self.visit_assoc_item(&ItemVisitorKind::AssocTraitItem(ti));\n+    }\n \n-        match ii.kind {\n-            ast::AssocItemKind::Fn(ref fn_kind) => {\n-                let ast::Fn {\n-                    defaultness,\n-                    ref sig,\n-                    ref generics,\n-                    ref body,\n-                } = **fn_kind;\n-                if let Some(ref body) = body {\n-                    let inner_attrs = inner_attributes(&ii.attrs);\n-                    let fn_ctxt = visit::FnCtxt::Assoc(visit::AssocCtxt::Impl);\n-                    self.visit_fn(\n-                        visit::FnKind::Fn(fn_ctxt, ii.ident, sig, &ii.vis, Some(body)),\n-                        generics,\n-                        &sig.decl,\n-                        ii.span,\n-                        defaultness,\n-                        Some(&inner_attrs),\n-                    );\n-                } else {\n-                    let indent = self.block_indent;\n-                    let rewrite =\n-                        self.rewrite_required_fn(indent, ii.ident, sig, &ii.vis, generics, ii.span);\n-                    self.push_rewrite(ii.span, rewrite);\n-                }\n-            }\n-            ast::AssocItemKind::Const(..) => self.visit_static(&StaticParts::from_impl_item(ii)),\n-            ast::AssocItemKind::TyAlias(ref ty_alias_kind) => {\n-                let ast::TyAlias {\n-                    defaultness,\n-                    ref generics,\n-                    ref ty,\n-                    ..\n-                } = **ty_alias_kind;\n-                self.push_rewrite(\n-                    ii.span,\n-                    rewrite_impl_type(\n-                        ii.ident,\n-                        &ii.vis,\n-                        defaultness,\n-                        ty.as_ref(),\n-                        &generics,\n-                        &self.get_context(),\n-                        self.block_indent,\n-                        ii.span,\n-                    ),\n-                );\n-            }\n-            ast::AssocItemKind::MacCall(ref mac) => {\n-                self.visit_mac(mac, Some(ii.ident), MacroPosition::Item);\n-            }\n-        }\n+    pub(crate) fn visit_impl_item(&mut self, ii: &ast::AssocItem) {\n+        self.visit_assoc_item(&ItemVisitorKind::AssocImplItem(ii));\n     }\n \n     fn visit_mac(&mut self, mac: &ast::MacCall, ident: Option<symbol::Ident>, pos: MacroPosition) {\n@@ -921,7 +848,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n     }\n \n     fn walk_mod_items(&mut self, items: &[rustc_ast::ptr::P<ast::Item>]) {\n-        self.visit_items_with_reordering(&ptr_vec_to_ref_vec(&items));\n+        self.visit_items_with_reordering(&ptr_vec_to_ref_vec(items));\n     }\n \n     fn walk_stmts(&mut self, stmts: &[Stmt<'_>], include_current_empty_semi: bool) {"}, {"sha": "d56974773fb9f6c2d0aecb95b24345d9b7544380", "filename": "src/tools/rustfmt/tests/mod-resolver/issue-5063/foo.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5063%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5063%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5063%2Ffoo.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -0,0 +1,2 @@\n+mod bar {\n+        mod baz;}\n\\ No newline at end of file"}, {"sha": "3519b0ee59c88f71c373633ef2abd085d3e1ea16", "filename": "src/tools/rustfmt/tests/mod-resolver/issue-5063/foo/bar/baz.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5063%2Ffoo%2Fbar%2Fbaz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5063%2Ffoo%2Fbar%2Fbaz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5063%2Ffoo%2Fbar%2Fbaz.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -0,0 +1 @@\n+fn    baz()    {       }\n\\ No newline at end of file"}, {"sha": "41c81c7bb433c69962cd1be3655de15d3e3325d5", "filename": "src/tools/rustfmt/tests/mod-resolver/issue-5063/main.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5063%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5063%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5063%2Fmain.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+\n+mod foo;\n\\ No newline at end of file"}, {"sha": "157d3857908a481154260a675327fcb4d0bf2c80", "filename": "src/tools/rustfmt/tests/source/configs/group_imports/One-merge_imports.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fgroup_imports%2FOne-merge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fgroup_imports%2FOne-merge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fgroup_imports%2FOne-merge_imports.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -0,0 +1,17 @@\n+// rustfmt-group_imports: One\n+// rustfmt-imports_granularity: Crate\n+use chrono::Utc;\n+use super::update::convert_publish_payload;\n+\n+use juniper::{FieldError, FieldResult};\n+use uuid::Uuid;\n+use alloc::alloc::Layout;\n+\n+use std::sync::Arc;\n+use alloc::vec::Vec;\n+\n+use broker::database::PooledConnection;\n+\n+use super::schema::{Context, Payload};\n+use core::f32;\n+use crate::models::Event;"}, {"sha": "109bd07e1ee29278e5cec6ba66a6bc0d7198e670", "filename": "src/tools/rustfmt/tests/source/configs/group_imports/One-nested.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fgroup_imports%2FOne-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fgroup_imports%2FOne-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fgroup_imports%2FOne-nested.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-group_imports: One\n+mod test {\n+    use crate::foo::bar;\n+\n+    use std::path;\n+    use crate::foo::bar2;\n+}"}, {"sha": "f82f62c7f5b2cd0f5f4a0e287643ee6a2e37474e", "filename": "src/tools/rustfmt/tests/source/configs/group_imports/One-no_reorder.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fgroup_imports%2FOne-no_reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fgroup_imports%2FOne-no_reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fgroup_imports%2FOne-no_reorder.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -0,0 +1,16 @@\n+// rustfmt-group_imports: One\n+// rustfmt-reorder_imports: false\n+use chrono::Utc;\n+use super::update::convert_publish_payload;\n+\n+use juniper::{FieldError, FieldResult};\n+use uuid::Uuid;\n+use alloc::alloc::Layout;\n+\n+use std::sync::Arc;\n+\n+use broker::database::PooledConnection;\n+\n+use super::schema::{Context, Payload};\n+use core::f32;\n+use crate::models::Event;"}, {"sha": "5ab7a950805b18791e227ef07b8cf499aace9f47", "filename": "src/tools/rustfmt/tests/source/configs/group_imports/One.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fgroup_imports%2FOne.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fgroup_imports%2FOne.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fgroup_imports%2FOne.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -0,0 +1,15 @@\n+// rustfmt-group_imports: One\n+use chrono::Utc;\n+use super::update::convert_publish_payload;\n+\n+use juniper::{FieldError, FieldResult};\n+use uuid::Uuid;\n+use alloc::alloc::Layout;\n+\n+use std::sync::Arc;\n+\n+use broker::database::PooledConnection;\n+\n+use super::schema::{Context, Payload};\n+use core::f32;\n+use crate::models::Event;"}, {"sha": "20c5bc83b466a0fe3b64130c219d657cae76fe33", "filename": "src/tools/rustfmt/tests/source/empty-item-single-line-false.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fempty-item-single-line-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fempty-item-single-line-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fempty-item-single-line-false.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -0,0 +1,46 @@\n+// rustfmt-brace_style: AlwaysNextLine\n+// rustfmt-empty_item_single_line: false\n+\n+fn function()\n+{\n+\n+}\n+\n+struct Struct\n+{\n+\n+}\n+\n+enum Enum\n+{\n+\n+}\n+\n+trait Trait\n+{\n+\n+}\n+\n+impl<T> Trait for T\n+{\n+\n+}\n+\n+trait Trait2<T>\n+where\n+    T: Copy + Display + Write + Read + FromStr, {}\n+\n+trait Trait3<T>\n+where\n+    T: Something\n+        + SomethingElse\n+        + Sync\n+        + Send\n+        + Display\n+        + Debug\n+        + Copy\n+        + Hash\n+        + Debug\n+        + Display\n+        + Write\n+        + Read, {}"}, {"sha": "0fb6405120aa7c5d7205c3bd6b126383ac36d1c2", "filename": "src/tools/rustfmt/tests/source/item-brace-style-always-next-line.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fitem-brace-style-always-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fitem-brace-style-always-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fitem-brace-style-always-next-line.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -27,3 +27,38 @@ mod M {\n \n     struct D<T> where T: Copy {}\n }\n+\n+\n+fn function()\n+{\n+\n+}\n+\n+trait Trait\n+{\n+\n+}\n+\n+impl<T> Trait for T\n+{\n+\n+}\n+\n+trait Trait2<T>\n+where\n+    T: Copy + Display + Write + Read + FromStr, {}\n+\n+trait Trait3<T>\n+where\n+    T: Something\n+        + SomethingElse\n+        + Sync\n+        + Send\n+        + Display\n+        + Debug\n+        + Copy\n+        + Hash\n+        + Debug\n+        + Display\n+        + Write\n+        + Read, {}"}, {"sha": "52e0e1c5ac215a9346ec9bed29c5be36db82da33", "filename": "src/tools/rustfmt/tests/target/configs/group_imports/One-merge_imports.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fgroup_imports%2FOne-merge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fgroup_imports%2FOne-merge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fgroup_imports%2FOne-merge_imports.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -0,0 +1,14 @@\n+// rustfmt-group_imports: One\n+// rustfmt-imports_granularity: Crate\n+use super::{\n+    schema::{Context, Payload},\n+    update::convert_publish_payload,\n+};\n+use crate::models::Event;\n+use alloc::{alloc::Layout, vec::Vec};\n+use broker::database::PooledConnection;\n+use chrono::Utc;\n+use core::f32;\n+use juniper::{FieldError, FieldResult};\n+use std::sync::Arc;\n+use uuid::Uuid;"}, {"sha": "5b648548260f8b758781c3a89f1a76901b1c78c1", "filename": "src/tools/rustfmt/tests/target/configs/group_imports/One-nested.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fgroup_imports%2FOne-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fgroup_imports%2FOne-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fgroup_imports%2FOne-nested.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-group_imports: One\n+mod test {\n+    use crate::foo::bar;\n+    use crate::foo::bar2;\n+    use std::path;\n+}"}, {"sha": "015e841d01486e46ee6a5868a713e1229f7b03e3", "filename": "src/tools/rustfmt/tests/target/configs/group_imports/One-no_reorder.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fgroup_imports%2FOne-no_reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fgroup_imports%2FOne-no_reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fgroup_imports%2FOne-no_reorder.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -0,0 +1,12 @@\n+// rustfmt-group_imports: One\n+// rustfmt-reorder_imports: false\n+use chrono::Utc;\n+use super::update::convert_publish_payload;\n+use juniper::{FieldError, FieldResult};\n+use uuid::Uuid;\n+use alloc::alloc::Layout;\n+use std::sync::Arc;\n+use broker::database::PooledConnection;\n+use super::schema::{Context, Payload};\n+use core::f32;\n+use crate::models::Event;"}, {"sha": "3094c7ae11572e2d4df0a5a3004496d79bfb8093", "filename": "src/tools/rustfmt/tests/target/configs/group_imports/One.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fgroup_imports%2FOne.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fgroup_imports%2FOne.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fgroup_imports%2FOne.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-group_imports: One\n+use super::schema::{Context, Payload};\n+use super::update::convert_publish_payload;\n+use crate::models::Event;\n+use alloc::alloc::Layout;\n+use broker::database::PooledConnection;\n+use chrono::Utc;\n+use core::f32;\n+use juniper::{FieldError, FieldResult};\n+use std::sync::Arc;\n+use uuid::Uuid;"}, {"sha": "bf7f70e7c4321793cf27127efb91892eb67fbb36", "filename": "src/tools/rustfmt/tests/target/empty-item-single-line-false.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fempty-item-single-line-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fempty-item-single-line-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fempty-item-single-line-false.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -0,0 +1,41 @@\n+// rustfmt-brace_style: AlwaysNextLine\n+// rustfmt-empty_item_single_line: false\n+\n+fn function()\n+{\n+}\n+\n+struct Struct {}\n+\n+enum Enum {}\n+\n+trait Trait\n+{\n+}\n+\n+impl<T> Trait for T\n+{\n+}\n+\n+trait Trait2<T>\n+where\n+    T: Copy + Display + Write + Read + FromStr,\n+{\n+}\n+\n+trait Trait3<T>\n+where\n+    T: Something\n+        + SomethingElse\n+        + Sync\n+        + Send\n+        + Display\n+        + Debug\n+        + Copy\n+        + Hash\n+        + Debug\n+        + Display\n+        + Write\n+        + Read,\n+{\n+}"}, {"sha": "ff9c40fbbd8d24ac9e5c1985e1b7c28b2274326c", "filename": "src/tools/rustfmt/tests/target/issue-5012/trailing_comma_always.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5012%2Ftrailing_comma_always.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5012%2Ftrailing_comma_always.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5012%2Ftrailing_comma_always.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -0,0 +1,8 @@\n+// rustfmt-trailing_comma: Always\n+\n+pub struct Matrix<T, const R: usize, const C: usize,>\n+where\n+    [T; R * C]:,\n+{\n+    contents: [T; R * C],\n+}"}, {"sha": "2fac8eae52b86e5ee65042e407cfb6c46765172a", "filename": "src/tools/rustfmt/tests/target/issue-5012/trailing_comma_never.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5012%2Ftrailing_comma_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5012%2Ftrailing_comma_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5012%2Ftrailing_comma_never.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -0,0 +1,8 @@\n+// rustfmt-trailing_comma: Never\n+\n+pub struct Matrix<T, const R: usize, const C: usize>\n+where\n+    [T; R * C]:\n+{\n+    contents: [T; R * C]\n+}"}, {"sha": "0e7df41deb2d90a7f81cd15b78f5c7c444bf0ee3", "filename": "src/tools/rustfmt/tests/target/issue-5033/minimum_example.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5033%2Fminimum_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5033%2Fminimum_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5033%2Fminimum_example.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -0,0 +1,8 @@\n+// leading comment\n+\n+#![rustfmt::skip]\n+fn main() {\n+    println!(\"main\"); // commented\n+}\n+\n+// post comment"}, {"sha": "7a11133b60bb1975afa4c4d92eb2bc87999a0737", "filename": "src/tools/rustfmt/tests/target/issue-5033/nested_modules.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5033%2Fnested_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5033%2Fnested_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5033%2Fnested_modules.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -0,0 +1,11 @@\n+#![rustfmt::skip]\n+\n+mod a {\n+    mod b {\n+\n+    }\n+\n+    // trailing comment b\n+}\n+\n+// trailing comment a"}, {"sha": "7d4da9022fe4bdcda215d4404c1fd61a6c7cbd95", "filename": "src/tools/rustfmt/tests/target/issue_4850.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_4850.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_4850.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_4850.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -0,0 +1,4 @@\n+impl ThisIsALongStructNameToPushTheWhereToWrapLolololol where\n+    [(); this_is_a_long_const_function_name()]:\n+{\n+}"}, {"sha": "4935fac04f1111cec322b7443c9f7b58c2677eef", "filename": "src/tools/rustfmt/tests/target/item-brace-style-always-next-line.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fitem-brace-style-always-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3074819f615758da44a667bf3cb98c59227e2f9/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fitem-brace-style-always-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fitem-brace-style-always-next-line.rs?ref=b3074819f615758da44a667bf3cb98c59227e2f9", "patch": "@@ -40,3 +40,32 @@ mod M\n     where\n         T: Copy, {}\n }\n+\n+fn function() {}\n+\n+trait Trait {}\n+\n+impl<T> Trait for T {}\n+\n+trait Trait2<T>\n+where\n+    T: Copy + Display + Write + Read + FromStr,\n+{\n+}\n+\n+trait Trait3<T>\n+where\n+    T: Something\n+        + SomethingElse\n+        + Sync\n+        + Send\n+        + Display\n+        + Debug\n+        + Copy\n+        + Hash\n+        + Debug\n+        + Display\n+        + Write\n+        + Read,\n+{\n+}"}]}