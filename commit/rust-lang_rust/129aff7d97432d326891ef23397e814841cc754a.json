{"sha": "129aff7d97432d326891ef23397e814841cc754a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyOWFmZjdkOTc0MzJkMzI2ODkxZWYyMzM5N2U4MTQ4NDFjYzc1NGE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-19T17:00:19Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-19T17:00:19Z"}, "message": "rollup merge of #17306 : scialex/fix-zsh", "tree": {"sha": "7c431ccbff6ca655296c6dc255df0772ba7e4084", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c431ccbff6ca655296c6dc255df0772ba7e4084"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/129aff7d97432d326891ef23397e814841cc754a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/129aff7d97432d326891ef23397e814841cc754a", "html_url": "https://github.com/rust-lang/rust/commit/129aff7d97432d326891ef23397e814841cc754a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/129aff7d97432d326891ef23397e814841cc754a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64b27e995e793d78ac873057393991c0dda9a178", "url": "https://api.github.com/repos/rust-lang/rust/commits/64b27e995e793d78ac873057393991c0dda9a178", "html_url": "https://github.com/rust-lang/rust/commit/64b27e995e793d78ac873057393991c0dda9a178"}, {"sha": "01472435acc2714dde0dfb64e08aa0dd59679826", "url": "https://api.github.com/repos/rust-lang/rust/commits/01472435acc2714dde0dfb64e08aa0dd59679826", "html_url": "https://github.com/rust-lang/rust/commit/01472435acc2714dde0dfb64e08aa0dd59679826"}], "stats": {"total": 199, "additions": 131, "deletions": 68}, "files": [{"sha": "f4e8f6f7873c9baa0bc64f59eb11530dd753e017", "filename": "src/etc/zsh/_rust", "status": "modified", "additions": 131, "deletions": 68, "changes": 199, "blob_url": "https://github.com/rust-lang/rust/blob/129aff7d97432d326891ef23397e814841cc754a/src%2Fetc%2Fzsh%2F_rust", "raw_url": "https://github.com/rust-lang/rust/raw/129aff7d97432d326891ef23397e814841cc754a/src%2Fetc%2Fzsh%2F_rust", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fzsh%2F_rust?ref=129aff7d97432d326891ef23397e814841cc754a", "patch": "@@ -4,109 +4,166 @@ local -a _rustc_opts_switches _rustc_opts_lint _rustc_opts_debug\n \n typeset -A opt_args\n \n+_rustc_debuginfo_levels=(\n+    \"0[no debug info]\"\n+    \"1[line-tables only (for stacktraces and breakpoints)]\"\n+    \"2[full debug info with variable and type information (same as -g)]\"\n+)\n+\n+_rustc_crate_types=(\n+    'bin'\n+    'lib'\n+    'rlib'\n+    'dylib'\n+    'staticlib'\n+)\n+\n+_rustc_emit_types=(\n+    'asm'\n+    'bc'\n+    'ir'\n+    'obj'\n+    'link'\n+)\n+_rustc_pretty_types=(\n+    'normal[un-annotated source]'\n+    'expanded[crates expanded]'\n+    'typed[crates  expanded,  with  type  annotations]'\n+    'identified[fully parenthesized, AST nodes and blocks with IDs]'\n+    'flowgraph=[graphviz formatted flowgraph for node]:NODEID:'\n+)\n+_rustc_color_types=(\n+    'auto[colorize, if output goes to a tty (default)]'\n+    'always[always colorize output]'\n+    'never[never colorize output]'\n+)\n+\n+_rustc_opts_vals=(\n+    --crate-name='[Specify the name of the crate being built]'\n+    --crate-type='[Comma separated list of types of crates for the compiler to emit]:TYPES:_values -s \",\" \"Crate types\"  \"$_rustc_crate_types[@]\"'\n+    --emit='[Comma separated list of types of output for the compiler to emit]:TYPES:_values -s \",\" \"Emit Targets\" \"$_rustc_emit_types[@]\"'\n+    --debuginfo='[Emit DWARF debug info to the objects created]:LEVEL:_values \"Debug Levels\" \"$_rustc_debuginfo_levels[@]\"'\n+    --dep-info='[Output dependency info to <filename> after compiling]::FILE:_files -/'\n+    --sysroot='[Override the system root]:PATH:_files -/'\n+    --cfg='[Configure the compilation environment]:SPEC:'\n+    --out-dir='[Write output to compiler-chosen filename in <dir>.  Ignored  if  -o  is  specified. (default the current directory)]:DIR:_files -/'\n+    -o'[Write output to <filename>. Ignored if more than one --emit is specified.]:FILENAME:_files'\n+    --opt-level='[Optimize with possible levels 0-3]:LEVEL:(0 1 2 3)'\n+    --pretty='[Pretty-print the input instead of compiling]::TYPE:_values \"TYPES\" \"$_rustc_pretty_types[@]\"'\n+    -L'[Add a directory to the library search path]:DIR:_files -/'\n+    --target='[Target triple cpu-manufacturer-kernel\\[-os\\] to compile]:TRIPLE:'\n+    --color='[Configure coloring of output]:CONF:_values \"COLORS\" \"$_rustc_color_types[@]\"'\n+    {-v,--version}'[Print version info and exit]::VERBOSE:(verbose)'\n+    --explain='[Provide a detailed explanation of an error message]:OPT:'\n+    --extern'[Specify where an external rust library is located]:ARG:'\n+)\n+\n _rustc_opts_switches=(\n-    --ar'[Program to use for managing archives instead of the default.]'\n-    -c'[Compile and assemble, but do not link]'\n-    --cfg'[Configure the compilation environment]'\n-    --crate-id'[Output the crate id and exit]'\n-    --crate-file-name'[deprecated in favor of --print-file-name]'\n-    --crate-name'[Specify the name of the crate being built]'\n-    --crate-type'[Specify the type of crate to crate]'\n-    --debuginfo'[Emit DWARF debug info to the objects created: 0 = no debug info, 1 = line-tables only (for stacktraces and breakpoints), 2 = full debug info with variable and type information (same as -g)]'\n-    --dep-info'[Output dependency info to <filename> after compiling]'\n     -g'[Equivalent to --debuginfo=2]'\n     {-h,--help}'[Display this message]'\n-    -L'[Add a directory to the library search path]'\n-    --linker'[Program to use for linking instead of the default.]'\n-    --link-args'[FLAGS is a space-separated list of flags passed to the linker]'\n-    --llvm-args'[A list of arguments to pass to llvm, comma separated]'\n-    --ls'[List the symbols defined by a library crate]'\n     --no-analysis'[Parse and expand the output, but run no analysis or produce output]'\n-    --no-rpath'[Disables setting the rpath in libs/exes]'\n     --no-trans'[Run all passes except translation; no output]'\n     -O'[Equivalent to --opt-level=2]'\n-    -o'[Write output to <filename>]'\n-    --opt-level'[Optimize with possible levels 0-3]'\n-    --out-dir'[Write output to compiler-chosen filename in <dir>]'\n     --parse-only'[Parse only; do not compile, assemble, or link]'\n-    --passes'[Comma or space separated list of pass names to use]'\n-    --pretty'[Pretty-print the input instead of compiling]'\n     --print-crate-name'[Output the crate name and exit]'\n     --print-file-name'[Output the file(s) that would be written if compilation continued and exit]'\n-    --save-temps'[Write intermediate files (.bc, .opt.bc, .o) in addition to normal output]'\n-    --sysroot'[Override the system root]'\n     --test'[Build a test harness]'\n-    --target'[Target triple cpu-manufacturer-kernel\\[-os\\] to compile]'\n-    --target-cpu'[Select target processor (llc -mcpu=help for details)]'\n-    --target-feature'[Target specific attributes (llc -mattr=help for details)]'\n-    --relocation-model'[Relocation model (llc --help for details)]'\n-    {-v,--version}'[Print version info and exit]'\n )\n+_rustc_opts_codegen=(\n+    'ar=[Path to the archive utility to use when assembling archives.]:BIN:_path_files'\n+    'linker=[Path to the linker utility to use when linking libraries, executables, and objects.]:BIN:_path_files'\n+    'link-args=[A space-separated list of extra arguments to pass to the linker when the linker is invoked.]:ARGS:'\n+    'target-cpu=[Selects a target processor. If the value is \"help\", then a list of  available  CPUs is printed.]:CPU:'\n+    'target-feature=[A space-separated list of features to enable or disable for the target. A preceding \"+\" enables a feature while a preceding \"-\" disables it. Available features can be discovered through target-cpu=help.]:FEATURE:'\n+    'passes=[A space-separated list of extra LLVM passes to run. A value of \"list\" will cause rustc to print all known passes and exit. The passes specified are appended at the end of the normal pass manager.]:LIST:'\n+    'llvm-args=[A space-separated list of arguments to pass through to LLVM.]:ARGS:'\n+    'save-temps[If specified, the compiler will save more files (.bc, .o, .no-opt.bc) generated throughout compilation in the output directory.]'\n+    'rpath[If specified, then the rpath value for dynamic libraries will be set in either dynamic library or executable outputs.]'\n+    'no-prepopulate-passes[Suppresses pre-population of the LLVM pass manager that is run over the module.]'\n+    'no-vectorize-loops[Suppresses running the loop vectorization LLVM pass, regardless of optimization level.]'\n+    'no-vectorize-slp[Suppresses running the LLVM SLP vectorization pass, regardless of optimization level.]'\n+    'soft-float[Generates software floating point library calls instead of hardware instructions.]'\n+    'prefer-dynamic[Prefers dynamic linking to static linking.]'\n+    \"no-integrated-as[Force usage of an external assembler rather than LLVM's integrated one.]\"\n+    'no-redzone[disable the use of the redzone]'\n+    'relocation-model=[The relocation model to use. (default: pic)]:MODEL:(pic static dynamic-no-pic)'\n+    'code-model=[choose the code model to use (llc -code-model for details)]:MODEL:'\n+    'metadata=[metadata to mangle symbol names with]:VAL:'\n+    'extra-filenames=[extra data to put in each output filename]:VAL:'\n+    'codegen-units=[divide crate into N units to optimize in parallel]:N:'\n+    'help[Show all codegen options]'\n+)\n+\n _rustc_opts_lint=(\n-    'attribute-usage[detects bad use of attributes]'\n-    'ctypes[proper use of libc types in foreign modules]'\n-    'dead-assignment[detect assignments that will never be read]'\n-    'dead-code[detect piece of code that will never be used]'\n-    'default-type-param-usage[prevents explicitly setting a type parameter with a default]'\n-    'deprecated[detects use of #\\[deprecated\\] items]'\n+    'help[Show a list of all lints]'\n     'experimental[detects use of #\\[experimental\\] items]'\n-    'heap-memory[use of any (~ type or @ type) heap memory]'\n+    'heap-memory[use of any (Box type or @ type) heap memory]'\n     'managed-heap-memory[use of managed (@ type) heap memory]'\n     'missing-doc[detects missing documentation for public members]'\n-    'non-camel-case-types[types, variants and traits should have camel case names]'\n-    'non-uppercase-pattern-statics[static constants in match patterns should be all caps]'\n     'non-uppercase-statics[static constants should have uppercase identifiers]'\n     'owned-heap-memory[use of owned (~ type) heap memory]'\n+    'unnecessary-qualification[detects unnecessarily qualified names]'\n+    'unsafe-block[usage of an `unsafe` block]'\n+    'unstable[detects use of #\\[unstable\\] items (incl. items with no stability attribute)]'\n+    'unused-result[unused result of an expression in a statement]'\n+    'variant-size-difference[detects enums with widely varying variant sizes]'\n+    'ctypes[proper use of libc types in foreign modules]'\n+    'dead-assignment[detect assignments that will never be read]'\n+    'dead-code[detect piece of code that will never be used]'\n+    'deprecated[detects use of #\\[deprecated\\] items]'\n+    'non-camel-case-types[types, variants and traits should have camel case names]'\n+    'non-snake-case[methods, functions, lifetime parameters and modules should have snake case names]'\n     'path-statement[path statements with no effect]'\n+    'raw-pointer-deriving[uses of #\\[deriving\\] with raw pointers are rarely correct]'\n     'type-limits[comparisons made useless by limits of the types involved]'\n     'type-overflow[literal out of range for its type]'\n-    'unknown-crate-type[unknown crate type found in #\\[crate_type\\] directive]'\n-    'unknown-features[unknown features found in crate-level #\\[feature\\] directives]'\n     'unnecessary-allocation[detects unnecessary allocations that can be eliminated]'\n     'unnecessary-parens[`if`, `match`, `while` and `return` do not need parentheses]'\n-    'unnecessary-qualification[detects unnecessarily qualified names]'\n-    'unnecessary-typecast[detects unnecessary type casts, that can be removed]'\n     'unreachable-code[detects unreachable code]'\n     'unrecognized-lint[unrecognized lint attribute]'\n-    'unsafe-block[usage of an `unsafe` block]'\n-    'unstable[detects use of #\\[unstable\\] items (incl. items with no stability attribute)]'\n+    'unsigned-negate[using an unary minus operator on unsigned type]'\n+    'unused-attribute[detects attributes that were not used by the compiler]'\n     'unused-imports[imports that are never used]'\n     'unused-must-use[unused result of a type flagged as #\\[must_use\\]]'\n     \"unused-mut[detect mut variables which don't need to be mutable]\"\n-    'unused-result[unused result of an expression in a statement]'\n     'unused-unsafe[unnecessary use of an `unsafe` block]'\n     'unused-variable[detect variables which are not used in any way]'\n+    'visible-private-types[detect use of private types in exported type signatures]'\n     'warnings[mass-change the level for lints which produce warnings]'\n     'while-true[suggest using `loop { }` instead of `while true { }`]'\n+    'unknown-crate-type[unknown crate type found in #\\[crate_type\\] directive]'\n+    'unknown-features[unknown features found in crate-level #\\[feature\\] directives]'\n+    'bad-style[group of non_camel_case_types, non_snake_case, non_uppercase_statics]'\n+    'unused[group of unused_imports, unused_variable, dead_assignment, dead_code, unused_mut, unreachable_code]'\n )\n \n _rustc_opts_debug=(\n+    'verbose[in general, enable more debug printouts]'\n+    'time-passes[measure time of each rustc pass]'\n+    'count-llvm-insns[count where LLVM instrs originate]'\n+    'time-llvm-passes[measure time of each LLVM pass]'\n+    'trans-stats[gather trans statistics]'\n     'asm-comments[generate comments into the assembly (may change behavior)]'\n+    'no-verify[skip LLVM verification]'\n     'borrowck-stats[gather borrowck statistics]'\n-    'count-llvm-insns[count where LLVM instrs originate]'\n-    'count-type-sizes[count the sizes of aggregate types]'\n-    'debug-info[Produce debug info (experimental)]'\n+    'no-landing-pads[omit landing pads for unwinding]'\n     'debug-llvm[enable debug output from LLVM]'\n-    'extra-debug-info[Extra debugging info (experimental)]'\n-    'gc[Garbage collect shared data (experimental)]'\n-    'gen-crate-map[Force generation of a toplevel crate map]'\n-    'lto[Perform LLVM link-time optimizations]'\n+    'show-span[show spans for compiler debugging]'\n+    'count-type-sizes[count the sizes of aggregate types]'\n     'meta-stats[gather metadata statistics]'\n-    \"no-integrated-as[Use external assembler rather than LLVM's integrated one]\"\n-    'no-landing-pads[omit landing pads for unwinding]'\n     'no-opt[do not optimize, even if -O is passed]'\n-    \"no-prepopulate-passes[Don't pre-populate the pass managers with a list of passes, only use the passes from --passes]\"\n-    \"no-vectorize-loops[Don't run the loop vectorization optimization passes]\"\n-    \"no-vectorize-slp[Don't run LLVM's SLP vectorization passes]\"\n-    'no-verify[skip LLVM verification]'\n-    'prefer-dynamic[Prefer dynamic linking to static linking]'\n     'print-link-args[Print the arguments passed to the linker]'\n+    'gc[Garbage collect shared data (experimental)]'\n     'print-llvm-passes[Prints the llvm optimization passes being run]'\n-    'soft-float[Generate software floating point library calls]'\n-    'time-llvm-passes[measure time of each LLVM pass]'\n-    'time-passes[measure time of each rustc pass]'\n-    'trans-stats[gather trans statistics]'\n-    'verbose[in general, enable more debug printouts]'\n+    'lto[Perform LLVM link-time optimizations]'\n+    'ast-json[Print the AST as JSON and halt]'\n+    'ast-json-noexpand[Print the pre-expansion AST as JSON and halt]'\n+    'ls[List the symbols defined by a library crate]'\n+    'save-analysis[Write syntax and type analysis information in addition to normal output]'\n+    'flowgraph-print-loans[Include loan analysis data in --pretty flowgraph output]'\n+    'flowgraph-print-moves[Include move analysis data in --pretty flowgraph output]'\n+    'flowgraph-print-assigns[Include assignment analysis data in --pretty flowgraph output]'\n+    'flowgraph-print-all[Include all dataflow analysis data in --pretty flowgraph output]'\n )\n \n _rustc_opts_fun_lint(){\n@@ -115,14 +172,20 @@ _rustc_opts_fun_lint(){\n }\n \n _rustc_opts_fun_debug(){\n-    _describe 'options' _rustc_opts_debug\n+    _values 'options' \"$_rustc_opts_debug[@]\"\n+}\n+\n+_rustc_opts_fun_codegen(){\n+    _values 'options' \"$_rustc_opts_codegen[@]\"\n }\n \n _arguments -s :  \\\n-    '(-W --warn)'{-W,--warn}'[Set lint warnings]:lint options:_rustc_opts_fun_lint' \\\n-    '(-A --allow)'{-A,--allow}'[Set lint allowed]:lint options:_rustc_opts_fun_lint' \\\n-    '(-D --deny)'{-D,--deny}'[Set lint denied]:lint options:_rustc_opts_fun_lint' \\\n-    '(-F --forbid)'{-F,--forbid}'[Set lint forbidden]:lint options:_rustc_opts_fun_lint' \\\n+    '(-W --warn)'{-W,--warn=}'[Set lint warnings]:lint options:_rustc_opts_fun_lint' \\\n+    '(-A --allow)'{-A,--allow=}'[Set lint allowed]:lint options:_rustc_opts_fun_lint' \\\n+    '(-D --deny)'{-D,--deny=}'[Set lint denied]:lint options:_rustc_opts_fun_lint' \\\n+    '(-F --forbid)'{-F,--forbid=}'[Set lint forbidden]:lint options:_rustc_opts_fun_lint' \\\n     '*-Z[Set internal debugging options]:debug options:_rustc_opts_fun_debug' \\\n+    '*-C[Set internal Codegen options]:codegen options:_rustc_opts_fun_codegen' \\\n     \"$_rustc_opts_switches[@]\" \\\n-    '*::files:_files -g \"*.rs\"'\n+    \"$_rustc_opts_vals[@]\" \\\n+    '::files:_files -g \"*.rs\"'"}]}