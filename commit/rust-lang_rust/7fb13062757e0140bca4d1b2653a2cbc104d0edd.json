{"sha": "7fb13062757e0140bca4d1b2653a2cbc104d0edd", "node_id": "C_kwDOAAsO6NoAKDdmYjEzMDYyNzU3ZTAxNDBiY2E0ZDFiMjY1M2EyY2JjMTA0ZDBlZGQ", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-22T03:03:11Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-22T20:07:43Z"}, "message": "Remove unused impl of `GetDefId` for `Option<T>`", "tree": {"sha": "d124ca6e90cb5a3d96cee3ae4cd221b4bcc2390b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d124ca6e90cb5a3d96cee3ae4cd221b4bcc2390b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fb13062757e0140bca4d1b2653a2cbc104d0edd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fb13062757e0140bca4d1b2653a2cbc104d0edd", "html_url": "https://github.com/rust-lang/rust/commit/7fb13062757e0140bca4d1b2653a2cbc104d0edd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fb13062757e0140bca4d1b2653a2cbc104d0edd/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d82ee839d105c5fe6a142aabbbc7e48f55ee195", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d82ee839d105c5fe6a142aabbbc7e48f55ee195", "html_url": "https://github.com/rust-lang/rust/commit/6d82ee839d105c5fe6a142aabbbc7e48f55ee195"}], "stats": {"total": 10, "additions": 0, "deletions": 10}, "files": [{"sha": "a3c6482bae7a4e0faa7ccf6f9b653232ed3a9491", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7fb13062757e0140bca4d1b2653a2cbc104d0edd/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fb13062757e0140bca4d1b2653a2cbc104d0edd/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=7fb13062757e0140bca4d1b2653a2cbc104d0edd", "patch": "@@ -1469,16 +1469,6 @@ crate trait GetDefId {\n     fn def_id_full(&self, cache: &Cache) -> Option<DefId>;\n }\n \n-impl<T: GetDefId> GetDefId for Option<T> {\n-    fn def_id(&self) -> Option<DefId> {\n-        self.as_ref().and_then(|d| d.def_id())\n-    }\n-\n-    fn def_id_full(&self, cache: &Cache) -> Option<DefId> {\n-        self.as_ref().and_then(|d| d.def_id_full(cache))\n-    }\n-}\n-\n impl Type {\n     crate fn primitive_type(&self) -> Option<PrimitiveType> {\n         match *self {"}]}