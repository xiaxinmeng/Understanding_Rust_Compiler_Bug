{"sha": "f49e47348d0d6644063ab8f3e3e2b06ac0339def", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0OWU0NzM0OGQwZDY2NDQwNjNhYjhmM2UzZTJiMDZhYzAzMzlkZWY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-07T00:35:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-07T00:35:23Z"}, "message": "Rollup merge of #75190 - GuillaumeGomez:cleanup-e0746, r=Dylan-DPC\n\nClean up E0746 explanation\n\nr? @Dylan-DPC", "tree": {"sha": "654f8c179a7d54f6a9403e2bb071ce6f32b05752", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/654f8c179a7d54f6a9403e2bb071ce6f32b05752"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f49e47348d0d6644063ab8f3e3e2b06ac0339def", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfLKHLCRBK7hj4Ov3rIwAAdHIIADO1SzmMFM2CHdPNGvB8VsKD\nvh9Iwp0R12ZOvuH0lF/muk4m21LUZjr2qXROL6p6w8/1dPOe1YyfO6kMpTMAiK0b\nbse6Oh0K/IYupmcBnCptk+PsIknNR4ixw3FBQXSOOcasHsBHgGHIaYN6PrakIdzl\np+WANvKL28FuRS6O8lmd+8geA5eCpbKYYUpStAsHs40+zJ6w52XA9fGUQNuFB2EU\n9fLg6R7GkJssSZ0V5Y5QxcEQ+/+H7G5iRxGLHNn/CaCl7x55mC58G49BDgFrP21U\n+l3hdMyxR77hV8fNNDpRlZciP76TupoFcNfm8pWfQIejgpFLqgbPQQNp1nEOVR0=\n=bRk2\n-----END PGP SIGNATURE-----\n", "payload": "tree 654f8c179a7d54f6a9403e2bb071ce6f32b05752\nparent 665138c977842c47c022e0a7a8eaf09d74148ada\nparent cd4633917d4dd446f9f37efbf750bbd4ed2b46d6\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1596760523 +0900\ncommitter GitHub <noreply@github.com> 1596760523 +0900\n\nRollup merge of #75190 - GuillaumeGomez:cleanup-e0746, r=Dylan-DPC\n\nClean up E0746 explanation\n\nr? @Dylan-DPC\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f49e47348d0d6644063ab8f3e3e2b06ac0339def", "html_url": "https://github.com/rust-lang/rust/commit/f49e47348d0d6644063ab8f3e3e2b06ac0339def", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f49e47348d0d6644063ab8f3e3e2b06ac0339def/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "665138c977842c47c022e0a7a8eaf09d74148ada", "url": "https://api.github.com/repos/rust-lang/rust/commits/665138c977842c47c022e0a7a8eaf09d74148ada", "html_url": "https://github.com/rust-lang/rust/commit/665138c977842c47c022e0a7a8eaf09d74148ada"}, {"sha": "cd4633917d4dd446f9f37efbf750bbd4ed2b46d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd4633917d4dd446f9f37efbf750bbd4ed2b46d6", "html_url": "https://github.com/rust-lang/rust/commit/cd4633917d4dd446f9f37efbf750bbd4ed2b46d6"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "90755d47f67901188c93af03764be6c1985ab6f7", "filename": "src/librustc_error_codes/error_codes/E0746.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f49e47348d0d6644063ab8f3e3e2b06ac0339def/src%2Flibrustc_error_codes%2Ferror_codes%2FE0746.md", "raw_url": "https://github.com/rust-lang/rust/raw/f49e47348d0d6644063ab8f3e3e2b06ac0339def/src%2Flibrustc_error_codes%2Ferror_codes%2FE0746.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0746.md?ref=f49e47348d0d6644063ab8f3e3e2b06ac0339def", "patch": "@@ -1,4 +1,4 @@\n-Return types cannot be `dyn Trait`s as they must be `Sized`.\n+An unboxed trait object was used as a return value.\n \n Erroneous code example:\n \n@@ -13,11 +13,13 @@ impl T for S {\n \n // Having the trait `T` as return type is invalid because\n // unboxed trait objects do not have a statically known size:\n-fn foo() -> dyn T {\n+fn foo() -> dyn T { // error!\n     S(42)\n }\n ```\n \n+Return types cannot be `dyn Trait`s as they must be `Sized`.\n+\n To avoid the error there are a couple of options.\n \n If there is a single type involved, you can use [`impl Trait`]:\n@@ -32,7 +34,7 @@ If there is a single type involved, you can use [`impl Trait`]:\n # }\n // The compiler will select `S(usize)` as the materialized return type of this\n // function, but callers will only know that the return type implements `T`.\n-fn foo() -> impl T {\n+fn foo() -> impl T { // ok!\n     S(42)\n }\n ```\n@@ -57,7 +59,7 @@ impl T for O {\n \n // This now returns a \"trait object\" and callers are only be able to access\n // associated items from `T`.\n-fn foo(x: bool) -> Box<dyn T> {\n+fn foo(x: bool) -> Box<dyn T> { // ok!\n     if x {\n         Box::new(S(42))\n     } else {"}]}