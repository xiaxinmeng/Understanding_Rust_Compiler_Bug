{"sha": "413703201c59f25a5a2fded13d7ee4b4be4e8545", "node_id": "C_kwDOAAsO6NoAKDQxMzcwMzIwMWM1OWYyNWE1YTJmZGVkMTNkN2VlNGI0YmU0ZTg1NDU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-12T09:51:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-12T09:51:29Z"}, "message": "Rollup merge of #100293 - yanchen4791:add-inline-llvm-option, r=nnethercote\n\nAdd inline-llvm option for disabling/enabling LLVM inlining\n\nIn this PR, a new -Z option `inline-llvm` is added in order to be able to turn on/off LLVM inlining.\n\nThe capability of turning on/off inlining in LLVM backend is needed for testing performance implications of using recently enabled inlining in rustc's frontend (with -Z inline-mir=yes option, #91743). It would be interesting to see the performance effect using rustc's frontend inlining only without LLVM inlining enabled. Currently LLVM is still doing inlining no mater what value inline-mir is set to. With the option `inline-llvm` being added in this PR, user can turn off LLVM inlining by using `-Z inline-llvm=no` option (the default of inline-llvm is 'yes', LLVM inlining enabled).", "tree": {"sha": "cee719a745ed231d59c282c754a9d5628b3cc383", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cee719a745ed231d59c282c754a9d5628b3cc383"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/413703201c59f25a5a2fded13d7ee4b4be4e8545", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjHwEhCRBK7hj4Ov3rIwAAFqIIACJqmPXIHQ4z3cCXe3ZkBQXz\nU5lIovUwYDuS7HNnGytMfWp9rnTuvJMu6dGO8zHB3TGFllpvBSXBP078xomBXZjE\nDYiTb1DmMMLW4Snp3vG/rrRLDKh0+1EYtYLibD94wPpPnMvOhqDKMkv/K8qtMcpN\n80So/pPOr7b6s0VFJOJ/5NARsXUNwPgqSGbDwF5+R0rUcqBJiNAUQuLiCN0yNM1f\nc0VH+XPuhS4Ywnig7gQ/X3DmNOhXel+hEbO/Cj8bIBySbAjrJqhkj0WmxU5bA1Pd\n86gU5XAyDrpVyMa0jiV9BQ9s3e34fWlUMDRXatR9xBPFA2s1K3g+m0JR0Ldlo+8=\n=2i7K\n-----END PGP SIGNATURE-----\n", "payload": "tree cee719a745ed231d59c282c754a9d5628b3cc383\nparent 56e7678ca97e9740f7d09206f767d5bb676917f7\nparent 052887e4b4c86426423ecd6f244e3e25cd71dd49\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1662976289 +0530\ncommitter GitHub <noreply@github.com> 1662976289 +0530\n\nRollup merge of #100293 - yanchen4791:add-inline-llvm-option, r=nnethercote\n\nAdd inline-llvm option for disabling/enabling LLVM inlining\n\nIn this PR, a new -Z option `inline-llvm` is added in order to be able to turn on/off LLVM inlining.\n\nThe capability of turning on/off inlining in LLVM backend is needed for testing performance implications of using recently enabled inlining in rustc's frontend (with -Z inline-mir=yes option, #91743). It would be interesting to see the performance effect using rustc's frontend inlining only without LLVM inlining enabled. Currently LLVM is still doing inlining no mater what value inline-mir is set to. With the option `inline-llvm` being added in this PR, user can turn off LLVM inlining by using `-Z inline-llvm=no` option (the default of inline-llvm is 'yes', LLVM inlining enabled).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/413703201c59f25a5a2fded13d7ee4b4be4e8545", "html_url": "https://github.com/rust-lang/rust/commit/413703201c59f25a5a2fded13d7ee4b4be4e8545", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/413703201c59f25a5a2fded13d7ee4b4be4e8545/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56e7678ca97e9740f7d09206f767d5bb676917f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/56e7678ca97e9740f7d09206f767d5bb676917f7", "html_url": "https://github.com/rust-lang/rust/commit/56e7678ca97e9740f7d09206f767d5bb676917f7"}, {"sha": "052887e4b4c86426423ecd6f244e3e25cd71dd49", "url": "https://api.github.com/repos/rust-lang/rust/commits/052887e4b4c86426423ecd6f244e3e25cd71dd49", "html_url": "https://github.com/rust-lang/rust/commit/052887e4b4c86426423ecd6f244e3e25cd71dd49"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "eff2436d41cac65adbe930d1cd7a3e845ebafa65", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413703201c59f25a5a2fded13d7ee4b4be4e8545/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413703201c59f25a5a2fded13d7ee4b4be4e8545/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=413703201c59f25a5a2fded13d7ee4b4be4e8545", "patch": "@@ -35,6 +35,10 @@ pub fn apply_to_callsite(callsite: &Value, idx: AttributePlace, attrs: &[&Attrib\n /// Get LLVM attribute for the provided inline heuristic.\n #[inline]\n fn inline_attr<'ll>(cx: &CodegenCx<'ll, '_>, inline: InlineAttr) -> Option<&'ll Attribute> {\n+    if !cx.tcx.sess.opts.unstable_opts.inline_llvm {\n+        // disable LLVM inlining\n+        return Some(AttributeKind::NoInline.create_attr(cx.llcx));\n+    }\n     match inline {\n         InlineAttr::Hint => Some(AttributeKind::InlineHint.create_attr(cx.llcx)),\n         InlineAttr::Always => Some(AttributeKind::AlwaysInline.create_attr(cx.llcx)),"}, {"sha": "a25e3362a0c33ed1966af5451c32265ba513e36d", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413703201c59f25a5a2fded13d7ee4b4be4e8545/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413703201c59f25a5a2fded13d7ee4b4be4e8545/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=413703201c59f25a5a2fded13d7ee4b4be4e8545", "patch": "@@ -1345,6 +1345,8 @@ options! {\n         \"hash spans relative to their parent item for incr. comp. (default: no)\"),\n     incremental_verify_ich: bool = (false, parse_bool, [UNTRACKED],\n         \"verify incr. comp. hashes of green query instances (default: no)\"),\n+    inline_llvm: bool = (true, parse_bool, [TRACKED],\n+        \"enable LLVM inlining (default: yes)\"),\n     inline_mir: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"enable MIR inlining (default: no)\"),\n     inline_mir_threshold: Option<usize> = (None, parse_opt_number, [TRACKED],"}, {"sha": "73aa0a577c4d572cc5a287af87d125bda68a9b30", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/413703201c59f25a5a2fded13d7ee4b4be4e8545/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/413703201c59f25a5a2fded13d7ee4b4be4e8545/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=413703201c59f25a5a2fded13d7ee4b4be4e8545", "patch": "@@ -54,6 +54,7 @@\n     -Z                        incremental-info=val -- print high-level information about incremental reuse (or the lack thereof) (default: no)\n     -Z              incremental-relative-spans=val -- hash spans relative to their parent item for incr. comp. (default: no)\n     -Z                  incremental-verify-ich=val -- verify incr. comp. hashes of green query instances (default: no)\n+    -Z                             inline-llvm=val -- enable LLVM inlining (default: yes)\n     -Z                              inline-mir=val -- enable MIR inlining (default: no)\n     -Z                    inline-mir-threshold=val -- a default MIR inlining threshold (default: 50)\n     -Z               inline-mir-hint-threshold=val -- inlining threshold for functions with inline hint (default: 100)"}]}