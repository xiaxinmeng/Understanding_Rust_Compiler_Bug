{"sha": "9ee373fd945511669775b8fd2c00990373ded8c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZTM3M2ZkOTQ1NTExNjY5Nzc1YjhmZDJjMDA5OTAzNzNkZWQ4Yzc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-31T13:59:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-31T13:59:40Z"}, "message": "Rollup merge of #69784 - benesch:fast-strip-prefix-suffix, r=kennytm\n\nOptimize strip_prefix and strip_suffix with str patterns\n\nAs mentioned in https://github.com/rust-lang/rust/issues/67302#issuecomment-585639226.\nI'm not sure whether adding these methods to `Pattern` is desirable\u2014but they have default implementations so the change is backwards compatible. Plus it seems like they're slated for wholesale replacement soon anyway? #56345\n\n----\n\nConstructing a Searcher in strip_prefix and strip_suffix is\nunnecessarily slow when the pattern is a fixed-length string. Add\nstrip_prefix and strip_suffix methods to the Pattern trait, and add\noptimized implementations of these methods in the str implementation.\nThe old implementation is retained as the default for these methods.", "tree": {"sha": "94dac3a31698ebc67d10a704750a98ed75d366ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94dac3a31698ebc67d10a704750a98ed75d366ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ee373fd945511669775b8fd2c00990373ded8c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeg0zMCRBK7hj4Ov3rIwAAdHIIAJTmeuvQfvpyTViUDwRcmyqn\n6wiVxqEfWH2HvIea+0033/bOYzxG6gR6wDncyOossp1lYc3BKTO3MNT231sBqpsh\nqPvyf+UfSFkNDom7/AoYADr6XwOWIFjCuStYSgv8CqUf16vLXIIBUIZ4vu6m/5Gm\nkQtya4wRRjllMb2HA+cWR+j7DclN8A4YJN65dT+1XDWRYcjtn7v45SGT2+WsxrP6\nXcHU3QuO1ex0sNsaNpZilTPyijEpWOXfxv9HuBJTlhtx+WEIbg75DvQ3wHSZF3gA\ne/YxwvVE69hFQsNac55yf79tfK+xtPEzUj4oy8zM6AyRcwKmzNhXtdPpJelfhqk=\n=fiqz\n-----END PGP SIGNATURE-----\n", "payload": "tree 94dac3a31698ebc67d10a704750a98ed75d366ea\nparent 2113659479a82ea69633b23ef710b58ab127755e\nparent ac478f2f610bd93c25c82491526ea153ad103ac0\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585663180 +0200\ncommitter GitHub <noreply@github.com> 1585663180 +0200\n\nRollup merge of #69784 - benesch:fast-strip-prefix-suffix, r=kennytm\n\nOptimize strip_prefix and strip_suffix with str patterns\n\nAs mentioned in https://github.com/rust-lang/rust/issues/67302#issuecomment-585639226.\nI'm not sure whether adding these methods to `Pattern` is desirable\u2014but they have default implementations so the change is backwards compatible. Plus it seems like they're slated for wholesale replacement soon anyway? #56345\n\n----\n\nConstructing a Searcher in strip_prefix and strip_suffix is\nunnecessarily slow when the pattern is a fixed-length string. Add\nstrip_prefix and strip_suffix methods to the Pattern trait, and add\noptimized implementations of these methods in the str implementation.\nThe old implementation is retained as the default for these methods.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ee373fd945511669775b8fd2c00990373ded8c7", "html_url": "https://github.com/rust-lang/rust/commit/9ee373fd945511669775b8fd2c00990373ded8c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ee373fd945511669775b8fd2c00990373ded8c7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2113659479a82ea69633b23ef710b58ab127755e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2113659479a82ea69633b23ef710b58ab127755e", "html_url": "https://github.com/rust-lang/rust/commit/2113659479a82ea69633b23ef710b58ab127755e"}, {"sha": "ac478f2f610bd93c25c82491526ea153ad103ac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac478f2f610bd93c25c82491526ea153ad103ac0", "html_url": "https://github.com/rust-lang/rust/commit/ac478f2f610bd93c25c82491526ea153ad103ac0"}], "stats": {"total": 137, "additions": 107, "deletions": 30}, "files": [{"sha": "1e5fe125c550d3c5724471b229ae5697163fc705", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9ee373fd945511669775b8fd2c00990373ded8c7/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee373fd945511669775b8fd2c00990373ded8c7/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=9ee373fd945511669775b8fd2c00990373ded8c7", "patch": "@@ -1849,6 +1849,21 @@ impl<'a, 'b> Pattern<'a> for &'b String {\n     fn is_prefix_of(self, haystack: &'a str) -> bool {\n         self[..].is_prefix_of(haystack)\n     }\n+\n+    #[inline]\n+    fn strip_prefix_of(self, haystack: &'a str) -> Option<&'a str> {\n+        self[..].strip_prefix_of(haystack)\n+    }\n+\n+    #[inline]\n+    fn is_suffix_of(self, haystack: &'a str) -> bool {\n+        self[..].is_suffix_of(haystack)\n+    }\n+\n+    #[inline]\n+    fn strip_suffix_of(self, haystack: &'a str) -> Option<&'a str> {\n+        self[..].strip_suffix_of(haystack)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "681dfda4ad5174bc49ba187466e1ec2ce20f99ca", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9ee373fd945511669775b8fd2c00990373ded8c7/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee373fd945511669775b8fd2c00990373ded8c7/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=9ee373fd945511669775b8fd2c00990373ded8c7", "patch": "@@ -9,7 +9,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use self::pattern::Pattern;\n-use self::pattern::{DoubleEndedSearcher, ReverseSearcher, SearchStep, Searcher};\n+use self::pattern::{DoubleEndedSearcher, ReverseSearcher, Searcher};\n \n use crate::char;\n use crate::fmt::{self, Write};\n@@ -3986,26 +3986,15 @@ impl str {\n     /// ```\n     /// #![feature(str_strip)]\n     ///\n-    /// assert_eq!(\"foobar\".strip_prefix(\"foo\"), Some(\"bar\"));\n-    /// assert_eq!(\"foobar\".strip_prefix(\"bar\"), None);\n+    /// assert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\n+    /// assert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\n     /// assert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n     /// ```\n     #[must_use = \"this returns the remaining substring as a new slice, \\\n                   without modifying the original\"]\n     #[unstable(feature = \"str_strip\", reason = \"newly added\", issue = \"67302\")]\n     pub fn strip_prefix<'a, P: Pattern<'a>>(&'a self, prefix: P) -> Option<&'a str> {\n-        let mut matcher = prefix.into_searcher(self);\n-        if let SearchStep::Match(start, len) = matcher.next() {\n-            debug_assert_eq!(\n-                start, 0,\n-                \"The first search step from Searcher \\\n-                 must include the first character\"\n-            );\n-            // SAFETY: `Searcher` is known to return valid indices.\n-            unsafe { Some(self.get_unchecked(len..)) }\n-        } else {\n-            None\n-        }\n+        prefix.strip_prefix_of(self)\n     }\n \n     /// Returns a string slice with the suffix removed.\n@@ -4020,8 +4009,8 @@ impl str {\n     ///\n     /// ```\n     /// #![feature(str_strip)]\n-    /// assert_eq!(\"barfoo\".strip_suffix(\"foo\"), Some(\"bar\"));\n-    /// assert_eq!(\"barfoo\".strip_suffix(\"bar\"), None);\n+    /// assert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\n+    /// assert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\n     /// assert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n     /// ```\n     #[must_use = \"this returns the remaining substring as a new slice, \\\n@@ -4032,19 +4021,7 @@ impl str {\n         P: Pattern<'a>,\n         <P as Pattern<'a>>::Searcher: ReverseSearcher<'a>,\n     {\n-        let mut matcher = suffix.into_searcher(self);\n-        if let SearchStep::Match(start, end) = matcher.next_back() {\n-            debug_assert_eq!(\n-                end,\n-                self.len(),\n-                \"The first search step from ReverseSearcher \\\n-                 must include the last character\"\n-            );\n-            // SAFETY: `Searcher` is known to return valid indices.\n-            unsafe { Some(self.get_unchecked(..start)) }\n-        } else {\n-            None\n-        }\n+        suffix.strip_suffix_of(self)\n     }\n \n     /// Returns a string slice with all suffixes that match a pattern"}, {"sha": "30fd55f7b7f646f35fcb31aba5d0e4f5035f7f80", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/9ee373fd945511669775b8fd2c00990373ded8c7/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee373fd945511669775b8fd2c00990373ded8c7/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=9ee373fd945511669775b8fd2c00990373ded8c7", "patch": "@@ -47,6 +47,22 @@ pub trait Pattern<'a>: Sized {\n         matches!(self.into_searcher(haystack).next(), SearchStep::Match(0, _))\n     }\n \n+    /// Removes the pattern from the front of haystack, if it matches.\n+    #[inline]\n+    fn strip_prefix_of(self, haystack: &'a str) -> Option<&'a str> {\n+        if let SearchStep::Match(start, len) = self.into_searcher(haystack).next() {\n+            debug_assert_eq!(\n+                start, 0,\n+                \"The first search step from Searcher \\\n+                 must include the first character\"\n+            );\n+            // SAFETY: `Searcher` is known to return valid indices.\n+            unsafe { Some(haystack.get_unchecked(len..)) }\n+        } else {\n+            None\n+        }\n+    }\n+\n     /// Checks whether the pattern matches at the back of the haystack\n     #[inline]\n     fn is_suffix_of(self, haystack: &'a str) -> bool\n@@ -55,6 +71,26 @@ pub trait Pattern<'a>: Sized {\n     {\n         matches!(self.into_searcher(haystack).next_back(), SearchStep::Match(_, j) if haystack.len() == j)\n     }\n+\n+    /// Removes the pattern from the back of haystack, if it matches.\n+    #[inline]\n+    fn strip_suffix_of(self, haystack: &'a str) -> Option<&'a str>\n+    where\n+        Self::Searcher: ReverseSearcher<'a>,\n+    {\n+        if let SearchStep::Match(start, end) = self.into_searcher(haystack).next_back() {\n+            debug_assert_eq!(\n+                end,\n+                haystack.len(),\n+                \"The first search step from ReverseSearcher \\\n+                 must include the last character\"\n+            );\n+            // SAFETY: `Searcher` is known to return valid indices.\n+            unsafe { Some(haystack.get_unchecked(..start)) }\n+        } else {\n+            None\n+        }\n+    }\n }\n \n // Searcher\n@@ -448,13 +484,26 @@ impl<'a> Pattern<'a> for char {\n         self.encode_utf8(&mut [0u8; 4]).is_prefix_of(haystack)\n     }\n \n+    #[inline]\n+    fn strip_prefix_of(self, haystack: &'a str) -> Option<&'a str> {\n+        self.encode_utf8(&mut [0u8; 4]).strip_prefix_of(haystack)\n+    }\n+\n     #[inline]\n     fn is_suffix_of(self, haystack: &'a str) -> bool\n     where\n         Self::Searcher: ReverseSearcher<'a>,\n     {\n         self.encode_utf8(&mut [0u8; 4]).is_suffix_of(haystack)\n     }\n+\n+    #[inline]\n+    fn strip_suffix_of(self, haystack: &'a str) -> Option<&'a str>\n+    where\n+        Self::Searcher: ReverseSearcher<'a>,\n+    {\n+        self.encode_utf8(&mut [0u8; 4]).strip_suffix_of(haystack)\n+    }\n }\n \n /////////////////////////////////////////////////////////////////////////////\n@@ -569,13 +618,26 @@ macro_rules! pattern_methods {\n             ($pmap)(self).is_prefix_of(haystack)\n         }\n \n+        #[inline]\n+        fn strip_prefix_of(self, haystack: &'a str) -> Option<&'a str> {\n+            ($pmap)(self).strip_prefix_of(haystack)\n+        }\n+\n         #[inline]\n         fn is_suffix_of(self, haystack: &'a str) -> bool\n         where\n             $t: ReverseSearcher<'a>,\n         {\n             ($pmap)(self).is_suffix_of(haystack)\n         }\n+\n+        #[inline]\n+        fn strip_suffix_of(self, haystack: &'a str) -> Option<&'a str>\n+        where\n+            $t: ReverseSearcher<'a>,\n+        {\n+            ($pmap)(self).strip_suffix_of(haystack)\n+        }\n     };\n }\n \n@@ -715,11 +777,34 @@ impl<'a, 'b> Pattern<'a> for &'b str {\n         haystack.as_bytes().starts_with(self.as_bytes())\n     }\n \n+    /// Removes the pattern from the front of haystack, if it matches.\n+    #[inline]\n+    fn strip_prefix_of(self, haystack: &'a str) -> Option<&'a str> {\n+        if self.is_prefix_of(haystack) {\n+            // SAFETY: prefix was just verified to exist.\n+            unsafe { Some(haystack.get_unchecked(self.as_bytes().len()..)) }\n+        } else {\n+            None\n+        }\n+    }\n+\n     /// Checks whether the pattern matches at the back of the haystack\n     #[inline]\n     fn is_suffix_of(self, haystack: &'a str) -> bool {\n         haystack.as_bytes().ends_with(self.as_bytes())\n     }\n+\n+    /// Removes the pattern from the back of haystack, if it matches.\n+    #[inline]\n+    fn strip_suffix_of(self, haystack: &'a str) -> Option<&'a str> {\n+        if self.is_suffix_of(haystack) {\n+            let i = haystack.len() - self.as_bytes().len();\n+            // SAFETY: suffix was just verified to exist.\n+            unsafe { Some(haystack.get_unchecked(..i)) }\n+        } else {\n+            None\n+        }\n+    }\n }\n \n /////////////////////////////////////////////////////////////////////////////"}]}