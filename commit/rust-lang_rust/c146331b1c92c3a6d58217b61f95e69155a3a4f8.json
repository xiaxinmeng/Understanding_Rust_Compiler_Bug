{"sha": "c146331b1c92c3a6d58217b61f95e69155a3a4f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNDYzMzFiMWM5MmMzYTZkNTgyMTdiNjFmOTVlNjkxNTVhM2E0Zjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-13T15:36:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-13T15:36:16Z"}, "message": "rename", "tree": {"sha": "eb8c37068ed82ac04abde7bc021a6e44fd53b1a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb8c37068ed82ac04abde7bc021a6e44fd53b1a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c146331b1c92c3a6d58217b61f95e69155a3a4f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c146331b1c92c3a6d58217b61f95e69155a3a4f8", "html_url": "https://github.com/rust-lang/rust/commit/c146331b1c92c3a6d58217b61f95e69155a3a4f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c146331b1c92c3a6d58217b61f95e69155a3a4f8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d95f34e9a1b2b7cebf44e38238b50a693d3394b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d95f34e9a1b2b7cebf44e38238b50a693d3394b", "html_url": "https://github.com/rust-lang/rust/commit/1d95f34e9a1b2b7cebf44e38238b50a693d3394b"}], "stats": {"total": 120, "additions": 60, "deletions": 60}, "files": [{"sha": "f1d5222f4304baccf9d845f4a5ea616d0ce03130", "filename": "crates/libeditor/src/symbols.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c146331b1c92c3a6d58217b61f95e69155a3a4f8/crates%2Flibeditor%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c146331b1c92c3a6d58217b61f95e69155a3a4f8/crates%2Flibeditor%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fsymbols.rs?ref=c146331b1c92c3a6d58217b61f95e69155a3a4f8", "patch": "@@ -59,13 +59,13 @@ fn to_symbol(node: SyntaxNodeRef) -> Option<FileSymbol> {\n     }\n \n     visitor()\n-        .visit(decl::<ast::Function<_>>)\n-        .visit(decl::<ast::Struct<_>>)\n-        .visit(decl::<ast::Enum<_>>)\n-        .visit(decl::<ast::Trait<_>>)\n+        .visit(decl::<ast::FnDef<_>>)\n+        .visit(decl::<ast::StructDef<_>>)\n+        .visit(decl::<ast::EnumDef<_>>)\n+        .visit(decl::<ast::TraitDef<_>>)\n         .visit(decl::<ast::Module<_>>)\n-        .visit(decl::<ast::TypeItem<_>>)\n-        .visit(decl::<ast::ConstItem<_>>)\n-        .visit(decl::<ast::StaticItem<_>>)\n+        .visit(decl::<ast::TypeDef<_>>)\n+        .visit(decl::<ast::ConstDef<_>>)\n+        .visit(decl::<ast::StaticDef<_>>)\n         .accept(node)?\n }"}, {"sha": "b347a05b47e2a022cc19e22d932f2e21525d6b9b", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/c146331b1c92c3a6d58217b61f95e69155a3a4f8/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c146331b1c92c3a6d58217b61f95e69155a3a4f8/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=c146331b1c92c3a6d58217b61f95e69155a3a4f8", "patch": "@@ -5,43 +5,43 @@ use {\n     SyntaxKind::*,\n };\n \n-// ConstItem\n+// ConstDef\n #[derive(Debug, Clone, Copy)]\n-pub struct ConstItem<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct ConstDef<R: TreeRoot = Arc<SyntaxRoot>> {\n     syntax: SyntaxNode<R>,\n }\n \n-impl<R: TreeRoot> AstNode<R> for ConstItem<R> {\n+impl<R: TreeRoot> AstNode<R> for ConstDef<R> {\n     fn cast(syntax: SyntaxNode<R>) -> Option<Self> {\n         match syntax.kind() {\n-            CONST_DEF => Some(ConstItem { syntax }),\n+            CONST_DEF => Some(ConstDef { syntax }),\n             _ => None,\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n }\n \n-impl<R: TreeRoot> ast::NameOwner<R> for ConstItem<R> {}\n-impl<R: TreeRoot> ConstItem<R> {}\n+impl<R: TreeRoot> ast::NameOwner<R> for ConstDef<R> {}\n+impl<R: TreeRoot> ConstDef<R> {}\n \n-// Enum\n+// EnumDef\n #[derive(Debug, Clone, Copy)]\n-pub struct Enum<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct EnumDef<R: TreeRoot = Arc<SyntaxRoot>> {\n     syntax: SyntaxNode<R>,\n }\n \n-impl<R: TreeRoot> AstNode<R> for Enum<R> {\n+impl<R: TreeRoot> AstNode<R> for EnumDef<R> {\n     fn cast(syntax: SyntaxNode<R>) -> Option<Self> {\n         match syntax.kind() {\n-            ENUM_DEF => Some(Enum { syntax }),\n+            ENUM_DEF => Some(EnumDef { syntax }),\n             _ => None,\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n }\n \n-impl<R: TreeRoot> ast::NameOwner<R> for Enum<R> {}\n-impl<R: TreeRoot> Enum<R> {}\n+impl<R: TreeRoot> ast::NameOwner<R> for EnumDef<R> {}\n+impl<R: TreeRoot> EnumDef<R> {}\n \n // File\n #[derive(Debug, Clone, Copy)]\n@@ -60,31 +60,31 @@ impl<R: TreeRoot> AstNode<R> for File<R> {\n }\n \n impl<R: TreeRoot> File<R> {\n-    pub fn functions<'a>(&'a self) -> impl Iterator<Item = Function<R>> + 'a {\n+    pub fn functions<'a>(&'a self) -> impl Iterator<Item = FnDef<R>> + 'a {\n         self.syntax()\n             .children()\n-            .filter_map(Function::cast)\n+            .filter_map(FnDef::cast)\n     }\n }\n \n-// Function\n+// FnDef\n #[derive(Debug, Clone, Copy)]\n-pub struct Function<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct FnDef<R: TreeRoot = Arc<SyntaxRoot>> {\n     syntax: SyntaxNode<R>,\n }\n \n-impl<R: TreeRoot> AstNode<R> for Function<R> {\n+impl<R: TreeRoot> AstNode<R> for FnDef<R> {\n     fn cast(syntax: SyntaxNode<R>) -> Option<Self> {\n         match syntax.kind() {\n-            FN_DEF => Some(Function { syntax }),\n+            FN_DEF => Some(FnDef { syntax }),\n             _ => None,\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n }\n \n-impl<R: TreeRoot> ast::NameOwner<R> for Function<R> {}\n-impl<R: TreeRoot> Function<R> {}\n+impl<R: TreeRoot> ast::NameOwner<R> for FnDef<R> {}\n+impl<R: TreeRoot> FnDef<R> {}\n \n // Module\n #[derive(Debug, Clone, Copy)]\n@@ -141,79 +141,79 @@ impl<R: TreeRoot> AstNode<R> for NameRef<R> {\n \n impl<R: TreeRoot> NameRef<R> {}\n \n-// StaticItem\n+// StaticDef\n #[derive(Debug, Clone, Copy)]\n-pub struct StaticItem<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct StaticDef<R: TreeRoot = Arc<SyntaxRoot>> {\n     syntax: SyntaxNode<R>,\n }\n \n-impl<R: TreeRoot> AstNode<R> for StaticItem<R> {\n+impl<R: TreeRoot> AstNode<R> for StaticDef<R> {\n     fn cast(syntax: SyntaxNode<R>) -> Option<Self> {\n         match syntax.kind() {\n-            STATIC_DEF => Some(StaticItem { syntax }),\n+            STATIC_DEF => Some(StaticDef { syntax }),\n             _ => None,\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n }\n \n-impl<R: TreeRoot> ast::NameOwner<R> for StaticItem<R> {}\n-impl<R: TreeRoot> StaticItem<R> {}\n+impl<R: TreeRoot> ast::NameOwner<R> for StaticDef<R> {}\n+impl<R: TreeRoot> StaticDef<R> {}\n \n-// Struct\n+// StructDef\n #[derive(Debug, Clone, Copy)]\n-pub struct Struct<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct StructDef<R: TreeRoot = Arc<SyntaxRoot>> {\n     syntax: SyntaxNode<R>,\n }\n \n-impl<R: TreeRoot> AstNode<R> for Struct<R> {\n+impl<R: TreeRoot> AstNode<R> for StructDef<R> {\n     fn cast(syntax: SyntaxNode<R>) -> Option<Self> {\n         match syntax.kind() {\n-            STRUCT_DEF => Some(Struct { syntax }),\n+            STRUCT_DEF => Some(StructDef { syntax }),\n             _ => None,\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n }\n \n-impl<R: TreeRoot> ast::NameOwner<R> for Struct<R> {}\n-impl<R: TreeRoot> Struct<R> {}\n+impl<R: TreeRoot> ast::NameOwner<R> for StructDef<R> {}\n+impl<R: TreeRoot> StructDef<R> {}\n \n-// Trait\n+// TraitDef\n #[derive(Debug, Clone, Copy)]\n-pub struct Trait<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct TraitDef<R: TreeRoot = Arc<SyntaxRoot>> {\n     syntax: SyntaxNode<R>,\n }\n \n-impl<R: TreeRoot> AstNode<R> for Trait<R> {\n+impl<R: TreeRoot> AstNode<R> for TraitDef<R> {\n     fn cast(syntax: SyntaxNode<R>) -> Option<Self> {\n         match syntax.kind() {\n-            TRAIT_DEF => Some(Trait { syntax }),\n+            TRAIT_DEF => Some(TraitDef { syntax }),\n             _ => None,\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n }\n \n-impl<R: TreeRoot> ast::NameOwner<R> for Trait<R> {}\n-impl<R: TreeRoot> Trait<R> {}\n+impl<R: TreeRoot> ast::NameOwner<R> for TraitDef<R> {}\n+impl<R: TreeRoot> TraitDef<R> {}\n \n-// TypeItem\n+// TypeDef\n #[derive(Debug, Clone, Copy)]\n-pub struct TypeItem<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct TypeDef<R: TreeRoot = Arc<SyntaxRoot>> {\n     syntax: SyntaxNode<R>,\n }\n \n-impl<R: TreeRoot> AstNode<R> for TypeItem<R> {\n+impl<R: TreeRoot> AstNode<R> for TypeDef<R> {\n     fn cast(syntax: SyntaxNode<R>) -> Option<Self> {\n         match syntax.kind() {\n-            TYPE_DEF => Some(TypeItem { syntax }),\n+            TYPE_DEF => Some(TypeDef { syntax }),\n             _ => None,\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n }\n \n-impl<R: TreeRoot> ast::NameOwner<R> for TypeItem<R> {}\n-impl<R: TreeRoot> TypeItem<R> {}\n+impl<R: TreeRoot> ast::NameOwner<R> for TypeDef<R> {}\n+impl<R: TreeRoot> TypeDef<R> {}\n "}, {"sha": "18a9f5d17d6036c557ec01b43a796e8b46fb0e45", "filename": "crates/libsyntax2/src/ast/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c146331b1c92c3a6d58217b61f95e69155a3a4f8/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c146331b1c92c3a6d58217b61f95e69155a3a4f8/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs?ref=c146331b1c92c3a6d58217b61f95e69155a3a4f8", "patch": "@@ -36,7 +36,7 @@ impl<R: TreeRoot> File<R> {\n     }\n }\n \n-impl<R: TreeRoot> Function<R> {\n+impl<R: TreeRoot> FnDef<R> {\n     pub fn has_atom_attr(&self, atom: &str) -> bool {\n         self.syntax()\n             .children()"}, {"sha": "ef56761fda84c67ed997fdb8b59d010f4d564d2d", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c146331b1c92c3a6d58217b61f95e69155a3a4f8/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/c146331b1c92c3a6d58217b61f95e69155a3a4f8/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=c146331b1c92c3a6d58217b61f95e69155a3a4f8", "patch": "@@ -218,17 +218,17 @@ Grammar(\n     ast: {\n         \"File\": (\n             collections: [\n-                [\"functions\", \"Function\"]\n+                [\"functions\", \"FnDef\"]\n             ]\n         ),\n-        \"Function\": ( traits: [\"NameOwner\"] ),\n-        \"Struct\": ( traits: [\"NameOwner\"] ),\n-        \"Enum\": ( traits: [\"NameOwner\"] ),\n-        \"Trait\": ( traits: [\"NameOwner\"] ),\n+        \"FnDef\": ( traits: [\"NameOwner\"] ),\n+        \"StructDef\": ( traits: [\"NameOwner\"] ),\n+        \"EnumDef\": ( traits: [\"NameOwner\"] ),\n+        \"TraitDef\": ( traits: [\"NameOwner\"] ),\n         \"Module\": ( traits: [\"NameOwner\"] ),\n-        \"ConstItem\": ( traits: [\"NameOwner\"] ),\n-        \"StaticItem\": ( traits: [\"NameOwner\"] ),\n-        \"TypeItem\": ( traits: [\"NameOwner\"] ),\n+        \"ConstDef\": ( traits: [\"NameOwner\"] ),\n+        \"StaticDef\": ( traits: [\"NameOwner\"] ),\n+        \"TypeDef\": ( traits: [\"NameOwner\"] ),\n         \"Name\": (),\n         \"NameRef\": (),\n     },"}]}