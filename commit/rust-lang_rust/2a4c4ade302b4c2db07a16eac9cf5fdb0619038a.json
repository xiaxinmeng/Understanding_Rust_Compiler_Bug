{"sha": "2a4c4ade302b4c2db07a16eac9cf5fdb0619038a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNGM0YWRlMzAyYjRjMmRiMDdhMTZlYWM5Y2Y1ZmRiMDYxOTAzOGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-30T21:19:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-30T21:19:56Z"}, "message": "Auto merge of #809 - RalfJung:intptrcast, r=RalfJung\n\nuse intptrcast for heap_allocator test; then it should work on Windows", "tree": {"sha": "20d14787a2f5d135ccf2776023b0322a6317ca45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20d14787a2f5d135ccf2776023b0322a6317ca45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a4c4ade302b4c2db07a16eac9cf5fdb0619038a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a4c4ade302b4c2db07a16eac9cf5fdb0619038a", "html_url": "https://github.com/rust-lang/rust/commit/2a4c4ade302b4c2db07a16eac9cf5fdb0619038a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a4c4ade302b4c2db07a16eac9cf5fdb0619038a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72b2e1045d642c517347c421b1db92e34c22a70d", "url": "https://api.github.com/repos/rust-lang/rust/commits/72b2e1045d642c517347c421b1db92e34c22a70d", "html_url": "https://github.com/rust-lang/rust/commit/72b2e1045d642c517347c421b1db92e34c22a70d"}, {"sha": "cb6d4f0c9ab95125af236abea72661efd094f699", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb6d4f0c9ab95125af236abea72661efd094f699", "html_url": "https://github.com/rust-lang/rust/commit/cb6d4f0c9ab95125af236abea72661efd094f699"}], "stats": {"total": 107, "additions": 70, "deletions": 37}, "files": [{"sha": "4e8b8cd4b898b88233486e8005690d681f7c5ead", "filename": ".appveyor.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a4c4ade302b4c2db07a16eac9cf5fdb0619038a/.appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/2a4c4ade302b4c2db07a16eac9cf5fdb0619038a/.appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.appveyor.yml?ref=2a4c4ade302b4c2db07a16eac9cf5fdb0619038a", "patch": "@@ -29,8 +29,6 @@ install:\n     - rustc --version\n \n build_script:\n-    - set RUST_TEST_NOCAPTURE=1\n-    - set RUST_BACKTRACE=1\n     - set RUSTFLAGS=-C debug-assertions\n     # Build and install miri\n     - cargo build --release --all-features --all-targets\n@@ -40,6 +38,8 @@ build_script:\n     - set MIRI_SYSROOT=%USERPROFILE%\\AppData\\Local\\rust-lang\\miri\\cache\\HOST\n \n test_script:\n+    - set RUST_TEST_NOCAPTURE=1\n+    - set RUST_BACKTRACE=1\n     # Test miri\n     - cargo test --release --all-features\n     # Test cargo integration"}, {"sha": "be104ed0b2ba3b6335965b149be67d075a139893", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a4c4ade302b4c2db07a16eac9cf5fdb0619038a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/2a4c4ade302b4c2db07a16eac9cf5fdb0619038a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=2a4c4ade302b4c2db07a16eac9cf5fdb0619038a", "patch": "@@ -333,6 +333,7 @@ Definite bugs found:\n * [Futures turning a shared reference into a mutable one](https://github.com/rust-lang/rust/pull/56319)\n * [`str` turning a shared reference into a mutable one](https://github.com/rust-lang/rust/pull/58200)\n * [`rand` performing unaligned reads](https://github.com/rust-random/rand/issues/779)\n+* [The Unix allocator calling `posix_memalign` in an invalid way](https://github.com/rust-lang/rust/issues/62251)\n \n Violations of Stacked Borrows found that are likely bugs (but Stacked Borrows is currently just an experiment):\n "}, {"sha": "5480700005075d14b51ce3be601a18c85c33109f", "filename": "src/intptrcast.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a4c4ade302b4c2db07a16eac9cf5fdb0619038a/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4c4ade302b4c2db07a16eac9cf5fdb0619038a/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=2a4c4ade302b4c2db07a16eac9cf5fdb0619038a", "patch": "@@ -90,6 +90,10 @@ impl<'mir, 'tcx> GlobalState {\n                 // From next_base_addr + slack, round up to adjust for alignment.\n                 let base_addr = Self::align_addr(global_state.next_base_addr + slack, align.bytes());\n                 entry.insert(base_addr);\n+                trace!(\n+                    \"Assigning base address {:#x} to allocation {:?} (slack: {}, align: {})\",\n+                    base_addr, ptr.alloc_id, slack, align.bytes(),\n+                );\n \n                 // Remember next base address.  If this allocation is zero-sized, leave a gap\n                 // of at least 1 to avoid two allocations having the same base address."}, {"sha": "1a39df9cce15f996dda922c9a2ea5461d0050d04", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a4c4ade302b4c2db07a16eac9cf5fdb0619038a/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4c4ade302b4c2db07a16eac9cf5fdb0619038a/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=2a4c4ade302b4c2db07a16eac9cf5fdb0619038a", "patch": "@@ -51,6 +51,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(Some(this.load_mir(instance.def)?))\n     }\n \n+    /// Returns the minimum alignment for the target architecture.\n+    fn min_align(&self) -> Align {\n+        let this = self.eval_context_ref();\n+        // List taken from `libstd/sys_common/alloc.rs`.\n+        let min_align = match this.tcx.tcx.sess.target.target.arch.as_str() {\n+            \"x86\" | \"arm\" | \"mips\" | \"powerpc\" | \"powerpc64\" | \"asmjs\" | \"wasm32\" => 8,\n+            \"x86_64\" | \"aarch64\" | \"mips64\" | \"s390x\" | \"sparc64\" => 16,\n+            arch => bug!(\"Unsupported target architecture: {}\", arch),\n+        };\n+        Align::from_bytes(min_align).unwrap()\n+    }\n+\n     fn malloc(\n         &mut self,\n         size: u64,\n@@ -61,7 +73,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if size == 0 {\n             Scalar::from_int(0, this.pointer_size())\n         } else {\n-            let align = this.tcx.data_layout.pointer_align.abi;\n+            let align = this.min_align();\n             let ptr = this.memory_mut().allocate(Size::from_bytes(size), align, MiriMemoryKind::C.into());\n             if zero_init {\n                 // We just allocated this, the access cannot fail\n@@ -94,7 +106,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         new_size: u64,\n     ) -> InterpResult<'tcx, Scalar<Tag>> {\n         let this = self.eval_context_mut();\n-        let align = this.tcx.data_layout.pointer_align.abi;\n+        let align = this.min_align();\n         if old_ptr.is_null_ptr(this) {\n             if new_size == 0 {\n                 Ok(Scalar::from_int(0, this.pointer_size()))\n@@ -191,12 +203,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 if !align.is_power_of_two() {\n                     return err!(HeapAllocNonPowerOfTwoAlignment(align));\n                 }\n+                /*\n+                FIXME: This check is disabled because rustc violates it.\n+                See <https://github.com/rust-lang/rust/issues/62251>.\n                 if align < this.pointer_size().bytes() {\n                     return err!(MachineError(format!(\n                         \"posix_memalign: alignment must be at least the size of a pointer, but is {}\",\n                         align,\n                     )));\n                 }\n+                */\n                 if size == 0 {\n                     this.write_null(ret.into())?;\n                 } else {"}, {"sha": "2f3a48f535ddd186c5aa8134a6212da9dcc9eb5b", "filename": "tests/run-pass/heap_allocator.rs", "status": "modified", "additions": 45, "deletions": 33, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/2a4c4ade302b4c2db07a16eac9cf5fdb0619038a/tests%2Frun-pass%2Fheap_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4c4ade302b4c2db07a16eac9cf5fdb0619038a/tests%2Frun-pass%2Fheap_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fheap_allocator.rs?ref=2a4c4ade302b4c2db07a16eac9cf5fdb0619038a", "patch": "@@ -1,51 +1,64 @@\n+// compile-flags: -Zmiri-seed=\n #![feature(allocator_api)]\n \n use std::ptr::NonNull;\n use std::alloc::{Global, Alloc, Layout, System};\n use std::slice;\n \n fn check_alloc<T: Alloc>(mut allocator: T) { unsafe {\n-    let layout = Layout::from_size_align(20, 4).unwrap();\n-    let a = allocator.alloc(layout).unwrap();\n-    allocator.dealloc(a, layout);\n+    for &align in &[4, 8, 16, 32] {\n+        let layout = Layout::from_size_align(20, align).unwrap();\n \n-    let p1 = allocator.alloc_zeroed(layout).unwrap();\n+        for _ in 0..32 {\n+            let a = allocator.alloc(layout).unwrap();\n+            assert_eq!(a.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n+            allocator.dealloc(a, layout);\n+        }\n+\n+        let p1 = allocator.alloc_zeroed(layout).unwrap();\n+        assert_eq!(p1.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n \n-    let p2 = allocator.realloc(p1, Layout::from_size_align(20, 4).unwrap(), 40).unwrap();\n-    let slice = slice::from_raw_parts(p2.as_ptr(), 20);\n-    assert_eq!(&slice, &[0_u8; 20]);\n+        let p2 = allocator.realloc(p1, layout, 40).unwrap();\n+        let layout = Layout::from_size_align(40, align).unwrap();\n+        assert_eq!(p2.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n+        let slice = slice::from_raw_parts(p2.as_ptr(), 20);\n+        assert_eq!(&slice, &[0_u8; 20]);\n \n-    // old size == new size\n-    let p3 = allocator.realloc(p2, Layout::from_size_align(40, 4).unwrap(), 40).unwrap();\n-    let slice = slice::from_raw_parts(p3.as_ptr(), 20);\n-    assert_eq!(&slice, &[0_u8; 20]);\n+        // old size == new size\n+        let p3 = allocator.realloc(p2, layout, 40).unwrap();\n+        assert_eq!(p3.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n+        let slice = slice::from_raw_parts(p3.as_ptr(), 20);\n+        assert_eq!(&slice, &[0_u8; 20]);\n \n-    // old size > new size\n-    let p4 = allocator.realloc(p3, Layout::from_size_align(40, 4).unwrap(), 10).unwrap();\n-    let slice = slice::from_raw_parts(p4.as_ptr(), 10);\n-    assert_eq!(&slice, &[0_u8; 10]);\n+        // old size > new size\n+        let p4 = allocator.realloc(p3, layout, 10).unwrap();\n+        let layout = Layout::from_size_align(10, align).unwrap();\n+        assert_eq!(p4.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n+        let slice = slice::from_raw_parts(p4.as_ptr(), 10);\n+        assert_eq!(&slice, &[0_u8; 10]);\n \n-    allocator.dealloc(p4, Layout::from_size_align(10, 4).unwrap());\n+        allocator.dealloc(p4, layout);\n+    }\n } }\n \n fn check_overalign_requests<T: Alloc>(mut allocator: T) {\n-    let size = 8;\n-    // Greater than `size`.\n-    let align = 16;\n-    // Miri is deterministic; no need to try many times.\n-    let iterations = 1;\n-    unsafe {\n-        let pointers: Vec<_> = (0..iterations).map(|_| {\n-            allocator.alloc(Layout::from_size_align(size, align).unwrap()).unwrap()\n-        }).collect();\n-        for &ptr in &pointers {\n-            assert_eq!((ptr.as_ptr() as usize) % align, 0,\n-                       \"Got a pointer less aligned than requested\")\n-        }\n+    for &size in &[2, 8, 64] { // size less than and bigger than alignment\n+        for &align in &[4, 8, 16, 32] { // Be sure to cover less than and bigger than `MIN_ALIGN` for all architectures\n+            let iterations = 32;\n+            unsafe {\n+                let pointers: Vec<_> = (0..iterations).map(|_| {\n+                    allocator.alloc(Layout::from_size_align(size, align).unwrap()).unwrap()\n+                }).collect();\n+                for &ptr in &pointers {\n+                    assert_eq!((ptr.as_ptr() as usize) % align, 0,\n+                            \"Got a pointer less aligned than requested\")\n+                }\n \n-        // Clean up.\n-        for &ptr in &pointers {\n-            allocator.dealloc(ptr, Layout::from_size_align(size, align).unwrap())\n+                // Clean up.\n+                for &ptr in &pointers {\n+                    allocator.dealloc(ptr, Layout::from_size_align(size, align).unwrap())\n+                }\n+            }\n         }\n     }\n }\n@@ -75,7 +88,6 @@ fn box_to_global() {\n fn main() {\n     check_alloc(System);\n     check_alloc(Global);\n-    #[cfg(not(target_os = \"windows\"))] // TODO: Inspects allocation base address on Windows; needs intptrcast model\n     check_overalign_requests(System);\n     check_overalign_requests(Global);\n     global_to_box();"}]}