{"sha": "940fa9251e3c538a4c9d35d84dcaa09065e45687", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MGZhOTI1MWUzYzUzOGE0YzlkMzVkODRkY2FhMDkwNjVlNDU2ODc=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-04-30T18:15:22Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-10T18:18:22Z"}, "message": "Rename decode to data_untracked.", "tree": {"sha": "86ad3e37e3fca726eb62a2ec30cfc9ddb954b1a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86ad3e37e3fca726eb62a2ec30cfc9ddb954b1a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/940fa9251e3c538a4c9d35d84dcaa09065e45687", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/940fa9251e3c538a4c9d35d84dcaa09065e45687", "html_url": "https://github.com/rust-lang/rust/commit/940fa9251e3c538a4c9d35d84dcaa09065e45687", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/940fa9251e3c538a4c9d35d84dcaa09065e45687/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b19ae20aada117a589ec238f97c97a98b483f97d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b19ae20aada117a589ec238f97c97a98b483f97d", "html_url": "https://github.com/rust-lang/rust/commit/b19ae20aada117a589ec238f97c97a98b483f97d"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "a54d1556b3eba20e871456b2e05c47db94f05f4d", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/940fa9251e3c538a4c9d35d84dcaa09065e45687/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/940fa9251e3c538a4c9d35d84dcaa09065e45687/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=940fa9251e3c538a4c9d35d84dcaa09065e45687", "patch": "@@ -840,7 +840,8 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for Span {\n             let dlo = u32::decode(decoder)?;\n             let dto = u32::decode(decoder)?;\n \n-            let enclosing = decoder.tcx.definitions_untracked().def_span(parent.unwrap()).decode();\n+            let enclosing =\n+                decoder.tcx.definitions_untracked().def_span(parent.unwrap()).data_untracked();\n             let span = Span::new(\n                 enclosing.lo + BytePos::from_u32(dlo),\n                 enclosing.lo + BytePos::from_u32(dto),\n@@ -1022,7 +1023,7 @@ where\n     E: 'a + OpaqueEncoder,\n {\n     fn encode(&self, s: &mut CacheEncoder<'a, 'tcx, E>) -> Result<(), E::Error> {\n-        let span_data = self.decode();\n+        let span_data = self.data_untracked();\n         span_data.ctxt.encode(s)?;\n         span_data.parent.encode(s)?;\n \n@@ -1031,7 +1032,7 @@ where\n         }\n \n         if let Some(parent) = span_data.parent {\n-            let enclosing = s.tcx.definitions_untracked().def_span(parent).decode();\n+            let enclosing = s.tcx.definitions_untracked().def_span(parent).data_untracked();\n             if enclosing.contains(span_data) {\n                 TAG_RELATIVE_SPAN.encode(s)?;\n                 (span_data.lo - enclosing.lo).to_u32().encode(s)?;"}, {"sha": "4f69a59ab93a5c9d8bcf79ebdd918f2f27626b60", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/940fa9251e3c538a4c9d35d84dcaa09065e45687/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/940fa9251e3c538a4c9d35d84dcaa09065e45687/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=940fa9251e3c538a4c9d35d84dcaa09065e45687", "patch": "@@ -2032,7 +2032,7 @@ where\n             return;\n         }\n \n-        let span = self.decode();\n+        let span = self.data_untracked();\n         span.ctxt.hash_stable(ctx, hasher);\n         span.parent.hash_stable(ctx, hasher);\n \n@@ -2042,7 +2042,7 @@ where\n         }\n \n         if let Some(parent) = span.parent {\n-            let def_span = ctx.def_span(parent).decode();\n+            let def_span = ctx.def_span(parent).data_untracked();\n             if def_span.contains(span) {\n                 // This span is enclosed in a definition: only hash the relative position.\n                 Hash::hash(&TAG_RELATIVE_SPAN, hasher);"}, {"sha": "e9120b98aabc6e2e9bae1e71c8ce89418e874b7b", "filename": "compiler/rustc_span/src/span_encoding.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/940fa9251e3c538a4c9d35d84dcaa09065e45687/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/940fa9251e3c538a4c9d35d84dcaa09065e45687/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs?ref=940fa9251e3c538a4c9d35d84dcaa09065e45687", "patch": "@@ -101,7 +101,7 @@ impl Span {\n \n     #[inline]\n     pub fn data(self) -> SpanData {\n-        let data = self.decode();\n+        let data = self.data_untracked();\n         if let Some(parent) = data.parent {\n             (*SPAN_TRACK)(parent);\n         }\n@@ -111,7 +111,7 @@ impl Span {\n     /// Internal function to translate between an encoded span and the expanded representation.\n     /// This function must not be used outside the incremental engine.\n     #[inline]\n-    pub fn decode(self) -> SpanData {\n+    pub fn data_untracked(self) -> SpanData {\n         if self.len_or_tag != LEN_TAG {\n             // Inline format.\n             debug_assert!(self.len_or_tag as u32 <= MAX_LEN);"}]}