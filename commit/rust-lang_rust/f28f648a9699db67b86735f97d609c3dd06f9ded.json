{"sha": "f28f648a9699db67b86735f97d609c3dd06f9ded", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyOGY2NDhhOTY5OWRiNjdiODY3MzVmOTdkNjA5YzNkZDA2ZjlkZWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-19T21:03:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-19T21:03:12Z"}, "message": "Auto merge of #53316 - tristanburgess:52895_existential_type_ICE, r=oli-obk\n\n52985: cause cycle err on inf trait normalization\n\nIssue: #52985\n - If an existential type is defined, but no user code infers the\nconcrete type behind the existential type, normalization would\ninfinitely recurse on this existential type which is only defined in\nterms of itself.\n  - Instead of raising an inf recurse error, we cause a cycle error to\nhelp highlight that the issue is that the type is only defined in terms\nof itself.\n  - Three known potential improvements:\n    - If type folding itself was exposed as a query, used by\nnormalization and other mechanisms, cases that would cause infinite recursion would\nautomatically cause a cycle error.\n    - The span for the cycle error should be improved to point to user\ncode that fails to allow inference of the concrete type of the existential type,\nassuming that this error occurs because no user code can allow inference the\nconcrete type.\n    - A mechanism to extend the cycle error with a helpful note would be nice. Currently,\nthe error is built and maintained by src/librustc/ty/query/plumbing,\nwith no known way to extend the information that the error gets built\nwith.\n\nr? @oli-obk", "tree": {"sha": "a561c965a0e6d3303a21517e51979892b2067b0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a561c965a0e6d3303a21517e51979892b2067b0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f28f648a9699db67b86735f97d609c3dd06f9ded", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f28f648a9699db67b86735f97d609c3dd06f9ded", "html_url": "https://github.com/rust-lang/rust/commit/f28f648a9699db67b86735f97d609c3dd06f9ded", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f28f648a9699db67b86735f97d609c3dd06f9ded/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ac79c718475fd29b8be34dde667b683390c2aee", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ac79c718475fd29b8be34dde667b683390c2aee", "html_url": "https://github.com/rust-lang/rust/commit/3ac79c718475fd29b8be34dde667b683390c2aee"}, {"sha": "8895e3bcb091fb94ae49a199358da4951a5665c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8895e3bcb091fb94ae49a199358da4951a5665c6", "html_url": "https://github.com/rust-lang/rust/commit/8895e3bcb091fb94ae49a199358da4951a5665c6"}], "stats": {"total": 79, "additions": 70, "deletions": 9}, "files": [{"sha": "fab7289409c4f74d69962fab0611a63e8785dd11", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f28f648a9699db67b86735f97d609c3dd06f9ded/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28f648a9699db67b86735f97d609c3dd06f9ded/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=f28f648a9699db67b86735f97d609c3dd06f9ded", "patch": "@@ -12,15 +12,15 @@\n //! which folds deeply, invoking the underlying\n //! `normalize_projection_ty` query when it encounters projections.\n \n-use infer::{InferCtxt, InferOk};\n use infer::at::At;\n-use mir::interpret::{GlobalId, ConstValue};\n+use infer::{InferCtxt, InferOk};\n+use mir::interpret::{ConstValue, GlobalId};\n use rustc_data_structures::small_vec::SmallVec;\n-use traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n use traits::project::Normalized;\n-use ty::{self, Ty, TyCtxt};\n+use traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n use ty::fold::{TypeFoldable, TypeFolder};\n use ty::subst::{Subst, Substs};\n+use ty::{self, Ty, TyCtxt};\n \n use super::NoSolution;\n \n@@ -121,9 +121,36 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for QueryNormalizer<'cx, 'gcx, 'tcx\n                         let concrete_ty = generic_ty.subst(self.tcx(), substs);\n                         self.anon_depth += 1;\n                         if concrete_ty == ty {\n-                            bug!(\"infinite recursion generic_ty: {:#?}, substs: {:#?}, \\\n-                                  concrete_ty: {:#?}, ty: {:#?}\", generic_ty, substs, concrete_ty,\n-                                  ty);\n+                            // The type in question can only be inferred in terms of itself. This\n+                            // is likely a user code issue, not a compiler issue. Thus, we will\n+                            // induce a cycle error by calling the parent query again on the type.\n+                            //\n+                            // FIXME: Perhaps a better solution would be to have fold_ty()\n+                            // itself be a query. Then, a type fold cycle would be detected\n+                            // and reported more naturally as part of the query system, rather\n+                            // than forcing it here.\n+                            //\n+                            // FIXME: Need a better span than just one pointing to the type def.\n+                            // Should point to a defining use of the type that results in this\n+                            // un-normalizable state.\n+                            if let Some(param_env_lifted) =\n+                                self.tcx().lift_to_global(&self.param_env)\n+                            {\n+                                if let Some(ty_lifted) = self.tcx().lift_to_global(&concrete_ty) {\n+                                    let span = self.tcx().def_span(def_id);\n+                                    self.tcx()\n+                                        .global_tcx()\n+                                        .at(span)\n+                                        .normalize_ty_after_erasing_regions(\n+                                            param_env_lifted.and(ty_lifted),\n+                                        );\n+                                    self.tcx().sess.abort_if_errors();\n+                                }\n+                            }\n+                            // If a cycle error can't be emitted, indicate a NoSolution error\n+                            // and let the caller handle it.\n+                            self.error = true;\n+                            return concrete_ty;\n                         }\n                         let folded_ty = self.fold_ty(concrete_ty);\n                         self.anon_depth -= 1;\n@@ -149,8 +176,8 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for QueryNormalizer<'cx, 'gcx, 'tcx\n                 let gcx = self.infcx.tcx.global_tcx();\n \n                 let mut orig_values = SmallVec::new();\n-                let c_data =\n-                    self.infcx.canonicalize_query(&self.param_env.and(*data), &mut orig_values);\n+                let c_data = self.infcx\n+                    .canonicalize_query(&self.param_env.and(*data), &mut orig_values);\n                 debug!(\"QueryNormalizer: c_data = {:#?}\", c_data);\n                 debug!(\"QueryNormalizer: orig_values = {:#?}\", orig_values);\n                 match gcx.normalize_projection_ty(c_data) {"}, {"sha": "d236503561903a24f022575700fabb01fa4a6607", "filename": "src/test/ui/existential_types/no_inferrable_concrete_type.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f28f648a9699db67b86735f97d609c3dd06f9ded/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28f648a9699db67b86735f97d609c3dd06f9ded/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.rs?ref=f28f648a9699db67b86735f97d609c3dd06f9ded", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue 52985: Cause cycle error if user code provides no use case that allows an existential type\n+// to be inferred to a concrete type. This results in an infinite cycle during type normalization.\n+\n+#![feature(existential_type)]\n+\n+existential type Foo: Copy; //~ cycle detected\n+\n+// make compiler happy about using 'Foo'\n+fn bar(x: Foo) -> Foo { x }\n+\n+fn main() {\n+    let _: Foo = std::mem::transmute(0u8);\n+}"}, {"sha": "ffb4f4cc1440070449b8a48929f498451e3a5d10", "filename": "src/test/ui/existential_types/no_inferrable_concrete_type.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f28f648a9699db67b86735f97d609c3dd06f9ded/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f28f648a9699db67b86735f97d609c3dd06f9ded/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.stderr?ref=f28f648a9699db67b86735f97d609c3dd06f9ded", "patch": "@@ -0,0 +1,11 @@\n+error[E0391]: cycle detected when normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All }, value: Foo }`\n+  --> $DIR/no_inferrable_concrete_type.rs:16:1\n+   |\n+LL | existential type Foo: Copy; //~ cycle detected\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: ...which again requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All }, value: Foo }`, completing the cycle\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0391`."}]}