{"sha": "681ac6294ada917b8c5fbba60f9ba1c82da338aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MWFjNjI5NGFkYTkxN2I4YzVmYmJhNjBmOWJhMWM4MmRhMzM4YWE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-09-11T12:48:56Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-09-11T12:48:56Z"}, "message": "Report better errors in project.json/sysroot", "tree": {"sha": "cc663cb5aefb149c0a0bdb666d60b2d46c8cb265", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc663cb5aefb149c0a0bdb666d60b2d46c8cb265"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/681ac6294ada917b8c5fbba60f9ba1c82da338aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/681ac6294ada917b8c5fbba60f9ba1c82da338aa", "html_url": "https://github.com/rust-lang/rust/commit/681ac6294ada917b8c5fbba60f9ba1c82da338aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/681ac6294ada917b8c5fbba60f9ba1c82da338aa/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f1167d8ddac9d392f034341e6bc032b51014918", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f1167d8ddac9d392f034341e6bc032b51014918", "html_url": "https://github.com/rust-lang/rust/commit/4f1167d8ddac9d392f034341e6bc032b51014918"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "288c39e49478b2fd23b8420e91c6f8fd55487816", "filename": "crates/project_model/src/lib.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/681ac6294ada917b8c5fbba60f9ba1c82da338aa/crates%2Fproject_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681ac6294ada917b8c5fbba60f9ba1c82da338aa/crates%2Fproject_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Flib.rs?ref=681ac6294ada917b8c5fbba60f9ba1c82da338aa", "patch": "@@ -33,7 +33,7 @@ pub enum ProjectWorkspace {\n     /// Project workspace was discovered by running `cargo metadata` and `rustc --print sysroot`.\n     Cargo { cargo: CargoWorkspace, sysroot: Sysroot },\n     /// Project workspace was manually specified using a `rust-project.json` file.\n-    Json { project: ProjectJson },\n+    Json { project: ProjectJson, sysroot: Option<Sysroot> },\n }\n \n impl fmt::Debug for ProjectWorkspace {\n@@ -44,10 +44,10 @@ impl fmt::Debug for ProjectWorkspace {\n                 .field(\"n_packages\", &cargo.packages().len())\n                 .field(\"n_sysroot_crates\", &sysroot.crates().len())\n                 .finish(),\n-            ProjectWorkspace::Json { project } => {\n+            ProjectWorkspace::Json { project, sysroot } => {\n                 let mut debug_struct = f.debug_struct(\"Json\");\n                 debug_struct.field(\"n_crates\", &project.n_crates());\n-                if let Some(sysroot) = &project.sysroot {\n+                if let Some(sysroot) = sysroot {\n                     debug_struct.field(\"n_sysroot_crates\", &sysroot.crates().len());\n                 }\n                 debug_struct.finish()\n@@ -169,7 +169,11 @@ impl ProjectWorkspace {\n                 })?;\n                 let project_location = project_json.parent().unwrap().to_path_buf();\n                 let project = ProjectJson::new(&project_location, data);\n-                ProjectWorkspace::Json { project }\n+                let sysroot = match &project.sysroot_src {\n+                    Some(path) => Some(Sysroot::load(path)?),\n+                    None => None,\n+                };\n+                ProjectWorkspace::Json { project, sysroot }\n             }\n             ProjectManifest::CargoToml(cargo_toml) => {\n                 let cargo_version = utf8_stdout({\n@@ -203,12 +207,21 @@ impl ProjectWorkspace {\n         Ok(res)\n     }\n \n+    pub fn load_inline(project_json: ProjectJson) -> Result<ProjectWorkspace> {\n+        let sysroot = match &project_json.sysroot_src {\n+            Some(path) => Some(Sysroot::load(path)?),\n+            None => None,\n+        };\n+\n+        Ok(ProjectWorkspace::Json { project: project_json, sysroot })\n+    }\n+\n     /// Returns the roots for the current `ProjectWorkspace`\n     /// The return type contains the path and whether or not\n     /// the root is a member of the current workspace\n     pub fn to_roots(&self) -> Vec<PackageRoot> {\n         match self {\n-            ProjectWorkspace::Json { project } => project\n+            ProjectWorkspace::Json { project, sysroot } => project\n                 .crates()\n                 .map(|(_, krate)| PackageRoot {\n                     is_member: krate.is_workspace_member,\n@@ -217,7 +230,7 @@ impl ProjectWorkspace {\n                 })\n                 .collect::<FxHashSet<_>>()\n                 .into_iter()\n-                .chain(project.sysroot.as_ref().into_iter().flat_map(|sysroot| {\n+                .chain(sysroot.as_ref().into_iter().flat_map(|sysroot| {\n                     sysroot.crates().map(move |krate| PackageRoot {\n                         is_member: false,\n                         include: vec![sysroot[krate].root_dir().to_path_buf()],\n@@ -255,7 +268,7 @@ impl ProjectWorkspace {\n \n     pub fn proc_macro_dylib_paths(&self) -> Vec<AbsPathBuf> {\n         match self {\n-            ProjectWorkspace::Json { project } => project\n+            ProjectWorkspace::Json { project, sysroot: _ } => project\n                 .crates()\n                 .filter_map(|(_, krate)| krate.proc_macro_dylib_path.as_ref())\n                 .cloned()\n@@ -285,9 +298,8 @@ impl ProjectWorkspace {\n     ) -> CrateGraph {\n         let mut crate_graph = CrateGraph::default();\n         match self {\n-            ProjectWorkspace::Json { project } => {\n-                let sysroot_dps = project\n-                    .sysroot\n+            ProjectWorkspace::Json { project, sysroot } => {\n+                let sysroot_dps = sysroot\n                     .as_ref()\n                     .map(|sysroot| sysroot_to_crate_graph(&mut crate_graph, sysroot, target, load));\n "}, {"sha": "979e9005839069e386ea46590b24f8f0fd81b7e0", "filename": "crates/project_model/src/project_json.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/681ac6294ada917b8c5fbba60f9ba1c82da338aa/crates%2Fproject_model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681ac6294ada917b8c5fbba60f9ba1c82da338aa/crates%2Fproject_model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fproject_json.rs?ref=681ac6294ada917b8c5fbba60f9ba1c82da338aa", "patch": "@@ -7,12 +7,12 @@ use paths::{AbsPath, AbsPathBuf};\n use rustc_hash::FxHashMap;\n use serde::{de, Deserialize};\n \n-use crate::{cfg_flag::CfgFlag, Sysroot};\n+use crate::cfg_flag::CfgFlag;\n \n /// Roots and crates that compose this Rust project.\n #[derive(Clone, Debug, Eq, PartialEq)]\n pub struct ProjectJson {\n-    pub(crate) sysroot: Option<Sysroot>,\n+    pub(crate) sysroot_src: Option<AbsPathBuf>,\n     crates: Vec<Crate>,\n }\n \n@@ -35,7 +35,7 @@ pub struct Crate {\n impl ProjectJson {\n     pub fn new(base: &AbsPath, data: ProjectJsonData) -> ProjectJson {\n         ProjectJson {\n-            sysroot: data.sysroot_src.map(|it| base.join(it)).map(|it| Sysroot::load(&it)),\n+            sysroot_src: data.sysroot_src.map(|it| base.join(it)),\n             crates: data\n                 .crates\n                 .into_iter()"}, {"sha": "871808d89e5d1e536ec3e2dc6953d5e721fdff64", "filename": "crates/project_model/src/sysroot.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/681ac6294ada917b8c5fbba60f9ba1c82da338aa/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681ac6294ada917b8c5fbba60f9ba1c82da338aa/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fsysroot.rs?ref=681ac6294ada917b8c5fbba60f9ba1c82da338aa", "patch": "@@ -51,11 +51,11 @@ impl Sysroot {\n     pub fn discover(cargo_toml: &AbsPath) -> Result<Sysroot> {\n         let current_dir = cargo_toml.parent().unwrap();\n         let sysroot_src_dir = discover_sysroot_src_dir(current_dir)?;\n-        let res = Sysroot::load(&sysroot_src_dir);\n+        let res = Sysroot::load(&sysroot_src_dir)?;\n         Ok(res)\n     }\n \n-    pub fn load(sysroot_src_dir: &AbsPath) -> Sysroot {\n+    pub fn load(sysroot_src_dir: &AbsPath) -> Result<Sysroot> {\n         let mut sysroot = Sysroot { crates: Arena::default() };\n \n         for name in SYSROOT_CRATES.trim().lines() {\n@@ -89,7 +89,14 @@ impl Sysroot {\n             }\n         }\n \n-        sysroot\n+        if sysroot.by_name(\"core\").is_none() {\n+            anyhow::bail!(\n+                \"could not find libcore in sysroot path `{}`\",\n+                sysroot_src_dir.as_ref().display()\n+            );\n+        }\n+\n+        Ok(sysroot)\n     }\n \n     fn by_name(&self, name: &str) -> Option<SysrootCrate> {"}, {"sha": "bab6f8a71bbbc3ae6c24512f60782c9d0a4ce6be", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681ac6294ada917b8c5fbba60f9ba1c82da338aa/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681ac6294ada917b8c5fbba60f9ba1c82da338aa/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=681ac6294ada917b8c5fbba60f9ba1c82da338aa", "patch": "@@ -109,7 +109,7 @@ impl GlobalState {\n                             )\n                         }\n                         LinkedProject::InlineJsonProject(it) => {\n-                            Ok(project_model::ProjectWorkspace::Json { project: it.clone() })\n+                            project_model::ProjectWorkspace::load_inline(it.clone())\n                         }\n                     })\n                     .collect::<Vec<_>>();"}]}