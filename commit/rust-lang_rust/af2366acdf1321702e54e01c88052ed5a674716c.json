{"sha": "af2366acdf1321702e54e01c88052ed5a674716c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMjM2NmFjZGYxMzIxNzAyZTU0ZTAxYzg4MDUyZWQ1YTY3NDcxNmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-15T12:02:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-15T12:12:39Z"}, "message": "Goto definition works for `S { a: }` case\n\nWhat happens here is that we lower `: ` to a missing expression, and\nthen correctly record that the corresponding field expression resolves\nto a specific field. Where we fail is in the mapping of syntax to this\nmissing expression. Doing it via `ast_field.expr()` fails, as that\nexpression is `None`. Instead, we go in the opposite direcition and ask\neach lowered field about its source.\n\nThis works, but has wrong complexity `O(N)` and, really, the\nimplementation is just too complex. We need some better management of\ndata here.", "tree": {"sha": "5a9d98a215a2adf82dbd2d3c9b74602e0c7debf8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a9d98a215a2adf82dbd2d3c9b74602e0c7debf8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af2366acdf1321702e54e01c88052ed5a674716c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af2366acdf1321702e54e01c88052ed5a674716c", "html_url": "https://github.com/rust-lang/rust/commit/af2366acdf1321702e54e01c88052ed5a674716c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af2366acdf1321702e54e01c88052ed5a674716c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5138baf2ac742de601f29d22fc64e386da56c4c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5138baf2ac742de601f29d22fc64e386da56c4c2", "html_url": "https://github.com/rust-lang/rust/commit/5138baf2ac742de601f29d22fc64e386da56c4c2"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "055a3e5d0c7c30808d575905edbf20529a4aa5e5", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/af2366acdf1321702e54e01c88052ed5a674716c/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2366acdf1321702e54e01c88052ed5a674716c/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=af2366acdf1321702e54e01c88052ed5a674716c", "patch": "@@ -24,7 +24,7 @@ use hir_ty::{\n };\n use syntax::{\n     ast::{self, AstNode},\n-    SyntaxNode, TextRange, TextSize,\n+    AstPtr, SyntaxNode, TextRange, TextSize,\n };\n \n use crate::{\n@@ -161,8 +161,27 @@ impl SourceAnalyzer {\n         db: &dyn HirDatabase,\n         field: &ast::RecordExprField,\n     ) -> Option<(Field, Option<Local>)> {\n-        let expr = field.expr()?;\n-        let expr_id = self.expr_id(db, &expr)?;\n+        let expr_id = {\n+            let record_lit = field.parent_record_lit();\n+            let record_lit_expr = self.expr_id(db, &ast::Expr::from(record_lit))?;\n+            let body = self.body.as_ref()?;\n+            let body_source_map = self.body_source_map.as_ref()?;\n+            match &body[record_lit_expr] {\n+                hir_def::expr::Expr::RecordLit { fields, .. } => {\n+                    let field_ptr = InFile::new(self.file_id, AstPtr::new(field));\n+                    fields.iter().enumerate().find_map(|(i, f)| {\n+                        let ptr = body_source_map.field_syntax(record_lit_expr, i);\n+                        if ptr == field_ptr {\n+                            Some(f.expr)\n+                        } else {\n+                            None\n+                        }\n+                    })?\n+                }\n+                _ => return None,\n+            }\n+        };\n+\n         let local = if field.name_ref().is_some() {\n             None\n         } else {"}, {"sha": "e8f31e4b1be5b751ed02bf53def591f5e1c51e0c", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/af2366acdf1321702e54e01c88052ed5a674716c/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2366acdf1321702e54e01c88052ed5a674716c/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=af2366acdf1321702e54e01c88052ed5a674716c", "patch": "@@ -1158,6 +1158,17 @@ struct S;\n \n //- /m.rs\n //! [`super::S$0`]\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn goto_incomplete_field() {\n+        check(\n+            r#\"\n+struct A { a: u32 }\n+         //^\n+fn foo() { A { a$0: }; }\n \"#,\n         )\n     }"}]}