{"sha": "d1949b1ab01dbd482008f64af54161cc43bb0991", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxOTQ5YjFhYjAxZGJkNDgyMDA4ZjY0YWY1NDE2MWNjNDNiYjA5OTE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-06T17:25:34Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-10T21:12:08Z"}, "message": "expand: Do not overwrite existing `ExpnInfo` when injecting derive markers\n\nCreate a fresh expansion for them instead - this is the usual way to allow unstable features for generated/desugared code.\nFixes https://github.com/rust-lang/rust/issues/52363", "tree": {"sha": "6f96c59b462eb2dcbb935be4eaa967996e7be44f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f96c59b462eb2dcbb935be4eaa967996e7be44f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1949b1ab01dbd482008f64af54161cc43bb0991", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1949b1ab01dbd482008f64af54161cc43bb0991", "html_url": "https://github.com/rust-lang/rust/commit/d1949b1ab01dbd482008f64af54161cc43bb0991", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1949b1ab01dbd482008f64af54161cc43bb0991/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ec6ea7333a8918a96f40110e014f2bbbd72281f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ec6ea7333a8918a96f40110e014f2bbbd72281f", "html_url": "https://github.com/rust-lang/rust/commit/0ec6ea7333a8918a96f40110e014f2bbbd72281f"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "11c1fceb7e752876b172ef44bbd2e50d5ee7d2b4", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d1949b1ab01dbd482008f64af54161cc43bb0991/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1949b1ab01dbd482008f64af54161cc43bb0991/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=d1949b1ab01dbd482008f64af54161cc43bb0991", "patch": "@@ -8,7 +8,7 @@ use crate::symbol::{Symbol, sym};\n use crate::errors::Applicability;\n \n use syntax_pos::Span;\n-\n+use syntax_pos::hygiene::{Mark, SyntaxContext};\n use rustc_data_structures::fx::FxHashSet;\n \n pub fn collect_derives(cx: &mut ExtCtxt<'_>, attrs: &mut Vec<ast::Attribute>) -> Vec<ast::Path> {\n@@ -55,12 +55,13 @@ pub fn add_derived_markers<T>(cx: &mut ExtCtxt<'_>, span: Span, traits: &[ast::P\n         names.insert(unwrap_or!(path.segments.get(0), continue).ident.name);\n     }\n \n-    cx.current_expansion.mark.set_expn_info(ExpnInfo::with_unstable(\n+    let mark = Mark::fresh(cx.current_expansion.mark);\n+    mark.set_expn_info(ExpnInfo::with_unstable(\n         ExpnKind::Macro(MacroKind::Derive, Symbol::intern(&pretty_name)), span,\n         cx.parse_sess.edition, &[sym::rustc_attrs, sym::structural_match],\n     ));\n \n-    let span = span.with_ctxt(cx.backtrace());\n+    let span = span.with_ctxt(SyntaxContext::empty().apply_mark(mark));\n     item.visit_attrs(|attrs| {\n         if names.contains(&sym::Eq) && names.contains(&sym::PartialEq) {\n             let meta = cx.meta_word(span, sym::structural_match);"}, {"sha": "ba2b2b7a2dd1138fb86310fdb41ced36bf261b3d", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1949b1ab01dbd482008f64af54161cc43bb0991/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1949b1ab01dbd482008f64af54161cc43bb0991/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=d1949b1ab01dbd482008f64af54161cc43bb0991", "patch": "@@ -117,7 +117,11 @@ impl Mark {\n \n     #[inline]\n     pub fn set_expn_info(self, info: ExpnInfo) {\n-        HygieneData::with(|data| data.marks[self.0 as usize].expn_info = Some(info))\n+        HygieneData::with(|data| {\n+            let old_info = &mut data.marks[self.0 as usize].expn_info;\n+            assert!(old_info.is_none(), \"expansion info is reset for a mark\");\n+            *old_info = Some(info);\n+        })\n     }\n \n     pub fn is_descendant_of(self, ancestor: Mark) -> bool {"}]}