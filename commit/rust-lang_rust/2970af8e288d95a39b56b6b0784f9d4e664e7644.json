{"sha": "2970af8e288d95a39b56b6b0784f9d4e664e7644", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NzBhZjhlMjg4ZDk1YTM5YjU2YjZiMDc4NGY5ZDRlNjY0ZTc2NDQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-06T07:26:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-06T07:26:09Z"}, "message": "Rollup merge of #77559 - camelid:fix-rustdoc-warnings-invalid-rust-syntax, r=lcnr\n\nFix rustdoc warnings about invalid Rust syntax", "tree": {"sha": "0a70cadbacd0213f849344f0e95e5b282e67cf32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a70cadbacd0213f849344f0e95e5b282e67cf32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2970af8e288d95a39b56b6b0784f9d4e664e7644", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJffBwRCRBK7hj4Ov3rIwAAdHIIAAY7vd1Lm5rFCxfU6BeIR1/H\n4rS6sutf97MmDFavwO7BwTNsFWL0w0io0vw2sx9aL2QXu/h4vMRNDSYKFh1G82ok\n86BTf6bYjnU74Bvh+gQWPCK7KH1r8dfPxjDTY3/9Y42I5nyfqh/V9WVk82WwH/7Q\nJ9Zxe2i5yUECVeRQmQkzlODK3I58fRtEeL+ElU7ktcIaHmjovb841AL4WAfRdPr3\noJfIRU4yxmE98f4pIp8vxXGNaMwZVxp259/Sxc4CFjYN2cfqOg9f2QYqM0zYxa/1\nH0/OO6lCJKgPPwBFX9JYMdzaJXDTM2gYCKbU/ZdJfGVA/Cc7DiimS5tQNtzjFJU=\n=DVqF\n-----END PGP SIGNATURE-----\n", "payload": "tree 0a70cadbacd0213f849344f0e95e5b282e67cf32\nparent 54d72d73e9784126a718132edb0bd971c9b5900c\nparent c8d25af6985c2c6be388fc198c2c7d50eb553fc4\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1601969169 +0900\ncommitter GitHub <noreply@github.com> 1601969169 +0900\n\nRollup merge of #77559 - camelid:fix-rustdoc-warnings-invalid-rust-syntax, r=lcnr\n\nFix rustdoc warnings about invalid Rust syntax\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2970af8e288d95a39b56b6b0784f9d4e664e7644", "html_url": "https://github.com/rust-lang/rust/commit/2970af8e288d95a39b56b6b0784f9d4e664e7644", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2970af8e288d95a39b56b6b0784f9d4e664e7644/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54d72d73e9784126a718132edb0bd971c9b5900c", "url": "https://api.github.com/repos/rust-lang/rust/commits/54d72d73e9784126a718132edb0bd971c9b5900c", "html_url": "https://github.com/rust-lang/rust/commit/54d72d73e9784126a718132edb0bd971c9b5900c"}, {"sha": "c8d25af6985c2c6be388fc198c2c7d50eb553fc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8d25af6985c2c6be388fc198c2c7d50eb553fc4", "html_url": "https://github.com/rust-lang/rust/commit/c8d25af6985c2c6be388fc198c2c7d50eb553fc4"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "47726632727d02ab3a95bcc04f989aba10ff5a6c", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2970af8e288d95a39b56b6b0784f9d4e664e7644/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2970af8e288d95a39b56b6b0784f9d4e664e7644/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=2970af8e288d95a39b56b6b0784f9d4e664e7644", "patch": "@@ -1225,7 +1225,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// it. However, it works pretty well in practice. In particular,\n     /// this is needed to deal with projection outlives bounds like\n     ///\n-    ///     <T as Foo<'0>>::Item: '1\n+    /// ```ignore (internal compiler representation so lifetime syntax is invalid)\n+    /// <T as Foo<'0>>::Item: '1\n+    /// ```\n     ///\n     /// In particular, this routine winds up being important when\n     /// there are bounds like `where <T as Foo<'a>>::Item: 'b` in the"}, {"sha": "bd7c25bf25043469df03d7c6c627a49b2dee2418", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2970af8e288d95a39b56b6b0784f9d4e664e7644/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2970af8e288d95a39b56b6b0784f9d4e664e7644/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=2970af8e288d95a39b56b6b0784f9d4e664e7644", "patch": "@@ -671,7 +671,8 @@ pub fn write_allocations<'tcx>(\n /// Dumps the size and metadata and content of an allocation to the given writer.\n /// The expectation is that the caller first prints other relevant metadata, so the exact\n /// format of this function is (*without* leading or trailing newline):\n-/// ```\n+///\n+/// ```text\n /// size: {}, align: {}) {\n ///     <bytes>\n /// }"}, {"sha": "618f3e045e7125c8f448b54a03540523dbb80601", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2970af8e288d95a39b56b6b0784f9d4e664e7644/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2970af8e288d95a39b56b6b0784f9d4e664e7644/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=2970af8e288d95a39b56b6b0784f9d4e664e7644", "patch": "@@ -38,13 +38,13 @@ pub struct OpaqueTypeDecl<'tcx> {\n     /// then `substs` would be `['a, T]`.\n     pub substs: SubstsRef<'tcx>,\n \n-    /// The span of this particular definition of the opaque type.  So\n+    /// The span of this particular definition of the opaque type. So\n     /// for example:\n     ///\n-    /// ```\n+    /// ```ignore (incomplete snippet)\n     /// type Foo = impl Baz;\n     /// fn bar() -> Foo {\n-    ///             ^^^ This is the span we are looking for!\n+    /// //          ^^^ This is the span we are looking for!\n     /// ```\n     ///\n     /// In cases where the fn returns `(impl Trait, impl Trait)` or"}, {"sha": "179e383be2e2bb9cfcf638a74493f04cd06de30e", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2970af8e288d95a39b56b6b0784f9d4e664e7644/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2970af8e288d95a39b56b6b0784f9d4e664e7644/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=2970af8e288d95a39b56b6b0784f9d4e664e7644", "patch": "@@ -1275,7 +1275,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Report an error for a struct field expression when there are fields which aren't provided.\n     ///\n-    /// ```ignore (diagnostic)\n+    /// ```text\n     /// error: missing field `you_can_use_this_field` in initializer of `foo::Foo`\n     ///  --> src/main.rs:8:5\n     ///   |\n@@ -1327,7 +1327,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Report an error for a struct field expression when there are no visible fields.\n     ///\n-    /// ```ignore (diagnostic)\n+    /// ```text\n     /// error: cannot construct `Foo` with struct literal syntax due to inaccessible fields\n     ///  --> src/main.rs:8:5\n     ///   |"}, {"sha": "53bc2069b76ce34e08b0f192c5a306a3596f4f85", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2970af8e288d95a39b56b6b0784f9d4e664e7644/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2970af8e288d95a39b56b6b0784f9d4e664e7644/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=2970af8e288d95a39b56b6b0784f9d4e664e7644", "patch": "@@ -1381,7 +1381,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Returns a diagnostic reporting a struct pattern which is missing an `..` due to\n     /// inaccessible fields.\n     ///\n-    /// ```ignore (diagnostic)\n+    /// ```text\n     /// error: pattern requires `..` due to inaccessible fields\n     ///   --> src/main.rs:10:9\n     ///    |\n@@ -1431,7 +1431,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Returns a diagnostic reporting a struct pattern which does not mention some fields.\n     ///\n-    /// ```ignore (diagnostic)\n+    /// ```text\n     /// error[E0027]: pattern does not mention field `you_cant_use_this_field`\n     ///   --> src/main.rs:15:9\n     ///    |"}]}