{"sha": "9a83842849f2aaf055c0bde21006bc8f09589b9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhODM4NDI4NDlmMmFhZjA1NWMwYmRlMjEwMDZiYzhmMDk1ODliOWY=", "commit": {"author": {"name": "Diggory Blake", "email": "diggsey@googlemail.com", "date": "2015-09-04T22:17:16Z"}, "committer": {"name": "Diggory Blake", "email": "diggsey@googlemail.com", "date": "2015-09-04T23:56:53Z"}, "message": "Add line numbers to MSVC backtrace\nAdd comments", "tree": {"sha": "52e3b09a13f170e015101fdaab5528915a751b54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52e3b09a13f170e015101fdaab5528915a751b54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a83842849f2aaf055c0bde21006bc8f09589b9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a83842849f2aaf055c0bde21006bc8f09589b9f", "html_url": "https://github.com/rust-lang/rust/commit/9a83842849f2aaf055c0bde21006bc8f09589b9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a83842849f2aaf055c0bde21006bc8f09589b9f/comments", "author": {"login": "Diggsey", "id": 451321, "node_id": "MDQ6VXNlcjQ1MTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/451321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Diggsey", "html_url": "https://github.com/Diggsey", "followers_url": "https://api.github.com/users/Diggsey/followers", "following_url": "https://api.github.com/users/Diggsey/following{/other_user}", "gists_url": "https://api.github.com/users/Diggsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Diggsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Diggsey/subscriptions", "organizations_url": "https://api.github.com/users/Diggsey/orgs", "repos_url": "https://api.github.com/users/Diggsey/repos", "events_url": "https://api.github.com/users/Diggsey/events{/privacy}", "received_events_url": "https://api.github.com/users/Diggsey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Diggsey", "id": 451321, "node_id": "MDQ6VXNlcjQ1MTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/451321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Diggsey", "html_url": "https://github.com/Diggsey", "followers_url": "https://api.github.com/users/Diggsey/followers", "following_url": "https://api.github.com/users/Diggsey/following{/other_user}", "gists_url": "https://api.github.com/users/Diggsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Diggsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Diggsey/subscriptions", "organizations_url": "https://api.github.com/users/Diggsey/orgs", "repos_url": "https://api.github.com/users/Diggsey/repos", "events_url": "https://api.github.com/users/Diggsey/events{/privacy}", "received_events_url": "https://api.github.com/users/Diggsey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4de424e4175eefb4fda6e3ed634acfab3ec0daf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4de424e4175eefb4fda6e3ed634acfab3ec0daf", "html_url": "https://github.com/rust-lang/rust/commit/b4de424e4175eefb4fda6e3ed634acfab3ec0daf"}], "stats": {"total": 60, "additions": 50, "deletions": 10}, "files": [{"sha": "9534a107d1616417e3da22849ebff4979fedd7a3", "filename": "src/libstd/sys/windows/backtrace.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9a83842849f2aaf055c0bde21006bc8f09589b9f/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a83842849f2aaf055c0bde21006bc8f09589b9f/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs?ref=9a83842849f2aaf055c0bde21006bc8f09589b9f", "patch": "@@ -60,6 +60,9 @@ extern \"system\" {\n type SymFromAddrFn =\n     extern \"system\" fn(libc::HANDLE, u64, *mut u64,\n                        *mut SYMBOL_INFO) -> libc::BOOL;\n+type SymGetLineFromAddr64Fn =\n+    extern \"system\" fn(libc::HANDLE, u64, *mut u32,\n+                       *mut IMAGEHLP_LINE64) -> libc::BOOL;\n type SymInitializeFn =\n     extern \"system\" fn(libc::HANDLE, *mut libc::c_void,\n                        libc::BOOL) -> libc::BOOL;\n@@ -99,6 +102,14 @@ struct SYMBOL_INFO {\n     Name: [libc::c_char; MAX_SYM_NAME],\n }\n \n+#[repr(C)]\n+struct IMAGEHLP_LINE64 {\n+    SizeOfStruct: u32,\n+    Key: *const libc::c_void,\n+    LineNumber: u32,\n+    Filename: *const libc::c_char,\n+    Address: u64,\n+}\n \n #[repr(C)]\n enum ADDRESS_MODE {"}, {"sha": "81d19374fea2d06db7b07911109ae48dc4c5e2c8", "filename": "src/libstd/sys/windows/printing/msvc.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9a83842849f2aaf055c0bde21006bc8f09589b9f/src%2Flibstd%2Fsys%2Fwindows%2Fprinting%2Fmsvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a83842849f2aaf055c0bde21006bc8f09589b9f/src%2Flibstd%2Fsys%2Fwindows%2Fprinting%2Fmsvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprinting%2Fmsvc.rs?ref=9a83842849f2aaf055c0bde21006bc8f09589b9f", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use sys_common::backtrace::output;\n+use sys_common::backtrace::{output, output_fileline};\n use ffi::CStr;\n use dynamic_lib::DynamicLibrary;\n-use super::{SymFromAddrFn, SYMBOL_INFO, MAX_SYM_NAME};\n+use super::{SymFromAddrFn, SymGetLineFromAddr64Fn, SYMBOL_INFO, MAX_SYM_NAME, IMAGEHLP_LINE64};\n use io;\n use io::prelude::*;\n use intrinsics;\n@@ -20,6 +20,7 @@ use libc;\n pub fn print(w: &mut Write, i: isize, addr: u64, dbghelp: &DynamicLibrary, process: libc::HANDLE)\n         -> io::Result<()> {\n     let SymFromAddr = sym!(dbghelp, \"SymFromAddr\", SymFromAddrFn);\n+    let SymGetLineFromAddr64 = sym!(dbghelp, \"SymGetLineFromAddr64\", SymGetLineFromAddr64Fn);\n \n     let mut info: SYMBOL_INFO = unsafe { intrinsics::init() };\n     info.MaxNameLen = MAX_SYM_NAME as libc::c_ulong;\n@@ -29,7 +30,7 @@ pub fn print(w: &mut Write, i: isize, addr: u64, dbghelp: &DynamicLibrary, proce\n     info.SizeOfStruct = 88;\n \n     let mut displacement = 0u64;\n-    let ret = SymFromAddr(process, addr as u64, &mut displacement, &mut info);\n+    let ret = SymFromAddr(process, addr, &mut displacement, &mut info);\n \n     let name = if ret == libc::TRUE {\n         let ptr = info.Name.as_ptr() as *const libc::c_char;\n@@ -38,5 +39,20 @@ pub fn print(w: &mut Write, i: isize, addr: u64, dbghelp: &DynamicLibrary, proce\n         None\n     };\n \n-    output(w, i, addr as usize as *mut libc::c_void, name)\n+    try!(output(w, i, addr as usize as *mut libc::c_void, name));\n+\n+    // Now find out the filename and line number\n+    let mut line: IMAGEHLP_LINE64 = unsafe { intrinsics::init() };\n+    line.SizeOfStruct = ::mem::size_of::<IMAGEHLP_LINE64>() as u32;\n+\n+    let mut displacement = 0u32;\n+    let ret = SymGetLineFromAddr64(process, addr, &mut displacement, &mut line);\n+    if ret == libc::TRUE {\n+        output_fileline(w,\n+                        unsafe { CStr::from_ptr(line.Filename).to_bytes() },\n+                        line.LineNumber as libc::c_int,\n+                        false)\n+    } else {\n+        Ok(())\n+    }\n }"}, {"sha": "48df600214ad0813863e490db07492724ab79867", "filename": "src/test/run-pass/backtrace-debuginfo-aux.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a83842849f2aaf055c0bde21006bc8f09589b9f/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a83842849f2aaf055c0bde21006bc8f09589b9f/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo-aux.rs?ref=9a83842849f2aaf055c0bde21006bc8f09589b9f", "patch": "@@ -15,7 +15,11 @@ pub fn callback<F>(f: F) where F: FnOnce((&'static str, u32)) {\n     f((file!(), line!()))\n }\n \n-#[inline(always)]\n+// LLVM does not yet output the required debug info to support showing inlined\n+// function calls in backtraces when targetting MSVC, so disable inlining in\n+// this case.\n+#[cfg_attr(not(target_env = \"msvc\"), inline(always))]\n+#[cfg_attr(target_env = \"msvc\", inline(never))]\n pub fn callback_inlined<F>(f: F) where F: FnOnce((&'static str, u32)) {\n     f((file!(), line!()))\n }"}, {"sha": "b6400c68f536739a068b52c4fbd5902d5f53d6e6", "filename": "src/test/run-pass/backtrace-debuginfo.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9a83842849f2aaf055c0bde21006bc8f09589b9f/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a83842849f2aaf055c0bde21006bc8f09589b9f/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs?ref=9a83842849f2aaf055c0bde21006bc8f09589b9f", "patch": "@@ -32,7 +32,7 @@ macro_rules! pos {\n               not(target_os = \"ios\"),\n               not(target_os = \"android\"),\n               not(all(target_os = \"linux\", target_arch = \"arm\"))),\n-          all(windows, target_env = \"gnu\", not(target_arch = \"x86\"))))]\n+          all(windows, not(target_arch = \"x86\"))))]\n macro_rules! dump_and_die {\n     ($($pos:expr),*) => ({\n         // FIXME(#18285): we cannot include the current position because\n@@ -48,7 +48,7 @@ macro_rules! dump_and_die {\n               not(target_os = \"ios\"),\n               not(target_os = \"android\"),\n               not(all(target_os = \"linux\", target_arch = \"arm\"))),\n-          all(windows, target_env = \"gnu\", not(target_arch = \"x86\")))))]\n+          all(windows, not(target_arch = \"x86\")))))]\n macro_rules! dump_and_die {\n     ($($pos:expr),*) => ({ let _ = [$($pos),*]; })\n }\n@@ -69,7 +69,10 @@ type Pos = (&'static str, u32);\n // this goes to stdout and each line has to be occurred\n // in the following backtrace to stderr with a correct order.\n fn dump_filelines(filelines: &[Pos]) {\n-    for &(file, line) in filelines.iter().rev() {\n+    // Skip top frame for MSVC, because it sees the macro rather than\n+    // the containing function.\n+    let skip = if cfg!(target_env = \"msvc\") {1} else {0};\n+    for &(file, line) in filelines.iter().rev().skip(skip) {\n         // extract a basename\n         let basename = file.split(&['/', '\\\\'][..]).last().unwrap();\n         println!(\"{}:{}\", basename, line);\n@@ -88,12 +91,18 @@ fn inner(counter: &mut i32, main_pos: Pos, outer_pos: Pos) {\n     });\n }\n \n-#[inline(always)]\n+// LLVM does not yet output the required debug info to support showing inlined\n+// function calls in backtraces when targetting MSVC, so disable inlining in\n+// this case.\n+#[cfg_attr(not(target_env = \"msvc\"), inline(always))]\n+#[cfg_attr(target_env = \"msvc\", inline(never))]\n fn inner_inlined(counter: &mut i32, main_pos: Pos, outer_pos: Pos) {\n     check!(counter; main_pos, outer_pos);\n     check!(counter; main_pos, outer_pos);\n \n-    #[inline(always)]\n+    // Again, disable inlining for MSVC.\n+    #[cfg_attr(not(target_env = \"msvc\"), inline(always))]\n+    #[cfg_attr(target_env = \"msvc\", inline(never))]\n     fn inner_further_inlined(counter: &mut i32, main_pos: Pos, outer_pos: Pos, inner_pos: Pos) {\n         check!(counter; main_pos, outer_pos, inner_pos);\n     }"}]}