{"sha": "e9cb96a56ab6dc883703928825ec7587db74dc1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5Y2I5NmE1NmFiNmRjODgzNzAzOTI4ODI1ZWM3NTg3ZGI3NGRjMWU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-08T19:20:16Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-08T21:44:14Z"}, "message": "rustdoc: Don't inline all impls all at once\n\nRight now whenever rustdoc inlines a struct or enum from another crate it ends\nup inlining *all* `impl` items found in the other crate at the same time. The\nrationale for this was to discover all trait impls which are otherwise not\nprobed for. This unfortunately picks up a lot of impls of public traits for\nprivate types, causing lots of broken links.\n\nThis commit instead hoards all of those inlined impls into a temporary storage\nlocation which is then selectively drawn from whenever we inline a new type.\nThis should ensure that we still inline all relevant impls while avoiding all\nprivate ones.", "tree": {"sha": "a6406534f13b1d090dd759c4a6eb511850e941ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6406534f13b1d090dd759c4a6eb511850e941ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9cb96a56ab6dc883703928825ec7587db74dc1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9cb96a56ab6dc883703928825ec7587db74dc1e", "html_url": "https://github.com/rust-lang/rust/commit/e9cb96a56ab6dc883703928825ec7587db74dc1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9cb96a56ab6dc883703928825ec7587db74dc1e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aa268e731aa201e086675f38e4337702c63f104", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa268e731aa201e086675f38e4337702c63f104", "html_url": "https://github.com/rust-lang/rust/commit/8aa268e731aa201e086675f38e4337702c63f104"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "1a281a3a8bb85629f25acdd5bab5a27a1d3c473d", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e9cb96a56ab6dc883703928825ec7587db74dc1e/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cb96a56ab6dc883703928825ec7587db74dc1e/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=e9cb96a56ab6dc883703928825ec7587db74dc1e", "patch": "@@ -222,7 +222,8 @@ fn build_type(cx: &DocContext, tcx: &TyCtxt, did: DefId) -> clean::ItemEnum {\n     }, false)\n }\n \n-pub fn build_impls(cx: &DocContext, tcx: &TyCtxt,\n+pub fn build_impls(cx: &DocContext,\n+                   tcx: &TyCtxt,\n                    did: DefId) -> Vec<clean::Item> {\n     tcx.populate_inherent_implementations_for_type_if_necessary(did);\n     let mut impls = Vec::new();\n@@ -241,10 +242,12 @@ pub fn build_impls(cx: &DocContext, tcx: &TyCtxt,\n     // Primarily, the impls will be used to populate the documentation for this\n     // type being inlined, but impls can also be used when generating\n     // documentation for primitives (no way to find those specifically).\n-    if cx.populated_crate_impls.borrow_mut().insert(did.krate) {\n+    if !cx.all_crate_impls.borrow_mut().contains_key(&did.krate) {\n+        let mut impls = Vec::new();\n         for item in tcx.sess.cstore.crate_top_level_items(did.krate) {\n             populate_impls(cx, tcx, item.def, &mut impls);\n         }\n+        cx.all_crate_impls.borrow_mut().insert(did.krate, impls);\n \n         fn populate_impls(cx: &DocContext, tcx: &TyCtxt,\n                           def: cstore::DefLike,\n@@ -266,6 +269,20 @@ pub fn build_impls(cx: &DocContext, tcx: &TyCtxt,\n         }\n     }\n \n+    let mut candidates = cx.all_crate_impls.borrow_mut();\n+    let candidates = candidates.get_mut(&did.krate).unwrap();\n+    for i in (0..candidates.len()).rev() {\n+        let remove = match candidates[i].inner {\n+            clean::ImplItem(ref i) => {\n+                i.for_.def_id() == Some(did) || i.for_.primitive_type().is_some()\n+            }\n+            _ => continue,\n+        };\n+        if remove {\n+            impls.push(candidates.swap_remove(i));\n+        }\n+    }\n+\n     return impls;\n }\n "}, {"sha": "231829a8ed3535dc05907ec797d07c35b341e615", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e9cb96a56ab6dc883703928825ec7587db74dc1e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cb96a56ab6dc883703928825ec7587db74dc1e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e9cb96a56ab6dc883703928825ec7587db74dc1e", "patch": "@@ -1499,6 +1499,13 @@ impl Type {\n             _ => None,\n         }\n     }\n+\n+    fn def_id(&self) -> Option<DefId> {\n+        match *self {\n+            ResolvedPath { did, .. } => Some(did),\n+            _ => None,\n+        }\n+    }\n }\n \n impl PrimitiveType {"}, {"sha": "c889a5f87b067d8f6a904db1500d819c53809f49", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9cb96a56ab6dc883703928825ec7587db74dc1e/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cb96a56ab6dc883703928825ec7587db74dc1e/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=e9cb96a56ab6dc883703928825ec7587db74dc1e", "patch": "@@ -56,7 +56,7 @@ pub struct DocContext<'a, 'tcx: 'a> {\n     pub external_traits: RefCell<Option<HashMap<DefId, clean::Trait>>>,\n     pub external_typarams: RefCell<Option<HashMap<DefId, String>>>,\n     pub inlined: RefCell<Option<HashSet<DefId>>>,\n-    pub populated_crate_impls: RefCell<HashSet<ast::CrateNum>>,\n+    pub all_crate_impls: RefCell<HashMap<ast::CrateNum, Vec<clean::Item>>>,\n     pub deref_trait_did: Cell<Option<DefId>>,\n }\n \n@@ -179,7 +179,7 @@ pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n             external_typarams: RefCell::new(Some(HashMap::new())),\n             external_paths: RefCell::new(Some(HashMap::new())),\n             inlined: RefCell::new(Some(HashSet::new())),\n-            populated_crate_impls: RefCell::new(HashSet::new()),\n+            all_crate_impls: RefCell::new(HashMap::new()),\n             deref_trait_did: Cell::new(None),\n         };\n         debug!(\"crate: {:?}\", ctxt.map.krate());"}, {"sha": "8cb3653008a6a51bb710d3b47219efee572d32ee", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9cb96a56ab6dc883703928825ec7587db74dc1e/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cb96a56ab6dc883703928825ec7587db74dc1e/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=e9cb96a56ab6dc883703928825ec7587db74dc1e", "patch": "@@ -11,7 +11,7 @@\n #![allow(deprecated)]\n \n use std::cell::{RefCell, Cell};\n-use std::collections::{HashSet, HashMap};\n+use std::collections::HashMap;\n use std::dynamic_lib::DynamicLibrary;\n use std::env;\n use std::ffi::OsString;\n@@ -114,7 +114,7 @@ pub fn run(input: &str,\n         external_traits: RefCell::new(None),\n         external_typarams: RefCell::new(None),\n         inlined: RefCell::new(None),\n-        populated_crate_impls: RefCell::new(HashSet::new()),\n+        all_crate_impls: RefCell::new(HashMap::new()),\n         deref_trait_did: Cell::new(None),\n     };\n "}]}