{"sha": "3a017aaa52fc41316b5dd2cd90b5171ca869697a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMDE3YWFhNTJmYzQxMzE2YjVkZDJjZDkwYjUxNzFjYTg2OTY5N2E=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-04T08:40:45Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-04T08:40:45Z"}, "message": "dont change readonly files", "tree": {"sha": "5017726e5ff94bfdb769bb31ff7ec5a7b8270f57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5017726e5ff94bfdb769bb31ff7ec5a7b8270f57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a017aaa52fc41316b5dd2cd90b5171ca869697a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a017aaa52fc41316b5dd2cd90b5171ca869697a", "html_url": "https://github.com/rust-lang/rust/commit/3a017aaa52fc41316b5dd2cd90b5171ca869697a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a017aaa52fc41316b5dd2cd90b5171ca869697a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a668f703fa5361f59a170d40be667c7e59a4a3e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a668f703fa5361f59a170d40be667c7e59a4a3e5", "html_url": "https://github.com/rust-lang/rust/commit/a668f703fa5361f59a170d40be667c7e59a4a3e5"}], "stats": {"total": 56, "additions": 34, "deletions": 22}, "files": [{"sha": "de904e9dbfefd3ad550f2e0e1166fbeac67db663", "filename": "crates/server/src/path_map.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3a017aaa52fc41316b5dd2cd90b5171ca869697a/crates%2Fserver%2Fsrc%2Fpath_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a017aaa52fc41316b5dd2cd90b5171ca869697a/crates%2Fserver%2Fsrc%2Fpath_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fpath_map.rs?ref=3a017aaa52fc41316b5dd2cd90b5171ca869697a", "patch": "@@ -3,41 +3,47 @@ use im;\n use relative_path::RelativePath;\n use libanalysis::{FileId, FileResolver};\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n+pub enum Root {\n+    Workspace, Lib\n+}\n+\n #[derive(Debug, Default, Clone)]\n pub struct PathMap {\n     next_id: u32,\n     path2id: im::HashMap<PathBuf, FileId>,\n     id2path: im::HashMap<FileId, PathBuf>,\n+    id2root: im::HashMap<FileId, Root>,\n }\n \n impl PathMap {\n     pub fn new() -> PathMap {\n         Default::default()\n     }\n-\n-    pub fn get_or_insert(&mut self, path: PathBuf) -> FileId {\n+    pub fn get_or_insert(&mut self, path: PathBuf, root: Root) -> FileId {\n         self.path2id.get(path.as_path())\n             .map(|&id| id)\n             .unwrap_or_else(|| {\n                 let id = self.new_file_id();\n-                self.insert(path, id);\n+                self.insert(path, id, root);\n                 id\n             })\n     }\n-\n     pub fn get_id(&self, path: &Path) -> Option<FileId> {\n         self.path2id.get(path).map(|&id| id)\n     }\n-\n-    pub fn get_path(&self, id: FileId) -> &Path {\n-        self.id2path.get(&id)\n+    pub fn get_path(&self, file_id: FileId) -> &Path {\n+        self.id2path.get(&file_id)\n             .unwrap()\n             .as_path()\n     }\n-\n-    fn insert(&mut self, path: PathBuf, id: FileId) {\n-        self.path2id.insert(path.clone(), id);\n-        self.id2path.insert(id, path.clone());\n+    pub fn get_root(&self, file_id: FileId) -> Root {\n+        self.id2root[&file_id]\n+    }\n+    fn insert(&mut self, path: PathBuf, file_id: FileId, root: Root) {\n+        self.path2id.insert(path.clone(), file_id);\n+        self.id2path.insert(file_id, path.clone());\n+        self.id2root.insert(file_id, root);\n     }\n \n     fn new_file_id(&mut self) -> FileId {\n@@ -48,12 +54,12 @@ impl PathMap {\n }\n \n impl FileResolver for PathMap {\n-    fn file_stem(&self, id: FileId) -> String {\n-        self.get_path(id).file_stem().unwrap().to_str().unwrap().to_string()\n+    fn file_stem(&self, file_id: FileId) -> String {\n+        self.get_path(file_id).file_stem().unwrap().to_str().unwrap().to_string()\n     }\n \n-    fn resolve(&self, id: FileId, path: &RelativePath) -> Option<FileId> {\n-        let path = path.to_path(&self.get_path(id));\n+    fn resolve(&self, file_id: FileId, path: &RelativePath) -> Option<FileId> {\n+        let path = path.to_path(&self.get_path(file_id));\n         let path = normalize(&path);\n         self.get_id(&path)\n     }"}, {"sha": "8ceec594f8ab203ce3bffb768cf834e9503d87cd", "filename": "crates/server/src/server_world.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3a017aaa52fc41316b5dd2cd90b5171ca869697a/crates%2Fserver%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a017aaa52fc41316b5dd2cd90b5171ca869697a/crates%2Fserver%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fserver_world.rs?ref=3a017aaa52fc41316b5dd2cd90b5171ca869697a", "patch": "@@ -10,7 +10,7 @@ use libanalysis::{FileId, AnalysisHost, Analysis, CrateGraph, CrateId, LibraryDa\n \n use {\n     Result,\n-    path_map::PathMap,\n+    path_map::{PathMap, Root},\n     vfs::{FileEvent, FileEventKind},\n     project_model::CargoWorkspace,\n };\n@@ -51,7 +51,7 @@ impl ServerWorldState {\n                 (event.path, text)\n             })\n             .map(|(path, text)| {\n-                (pm.get_or_insert(path), text)\n+                (pm.get_or_insert(path, Root::Workspace), text)\n             })\n             .filter_map(|(id, text)| {\n                 if mm.contains_key(&id) {\n@@ -73,25 +73,29 @@ impl ServerWorldState {\n                 };\n                 (event.path, text)\n             })\n-            .map(|(path, text)| (pm.get_or_insert(path), text))\n+            .map(|(path, text)| (pm.get_or_insert(path, Root::Lib), text))\n             .collect()\n     }\n     pub fn add_lib(&mut self, data: LibraryData) {\n         self.analysis_host.add_library(data);\n     }\n \n     pub fn add_mem_file(&mut self, path: PathBuf, text: String) -> FileId {\n-        let file_id = self.path_map.get_or_insert(path);\n+        let file_id = self.path_map.get_or_insert(path, Root::Workspace);\n         self.mem_map.insert(file_id, None);\n-        self.analysis_host.change_file(file_id, Some(text));\n+        if self.path_map.get_root(file_id) != Root::Lib {\n+            self.analysis_host.change_file(file_id, Some(text));\n+        }\n         file_id\n     }\n \n     pub fn change_mem_file(&mut self, path: &Path, text: String) -> Result<()> {\n         let file_id = self.path_map.get_id(path).ok_or_else(|| {\n             format_err!(\"change to unknown file: {}\", path.display())\n         })?;\n-        self.analysis_host.change_file(file_id, Some(text));\n+        if self.path_map.get_root(file_id) != Root::Lib {\n+            self.analysis_host.change_file(file_id, Some(text));\n+        }\n         Ok(())\n     }\n \n@@ -105,7 +109,9 @@ impl ServerWorldState {\n         };\n         // Do this via file watcher ideally.\n         let text = fs::read_to_string(path).ok();\n-        self.analysis_host.change_file(file_id, text);\n+        if self.path_map.get_root(file_id) != Root::Lib {\n+            self.analysis_host.change_file(file_id, text);\n+        }\n         Ok(file_id)\n     }\n     pub fn set_workspaces(&mut self, ws: Vec<CargoWorkspace>) {"}]}