{"sha": "ca72f9ed7065a601bd2b1ec80889ec7bad177598", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNzJmOWVkNzA2NWE2MDFiZDJiMWVjODA4ODllYzdiYWQxNzc1OTg=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-22T18:46:52Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-23T16:42:15Z"}, "message": "Calculate self-profile strings in `Compiler::enter` instead in codegen\n\nThis avoids each tool having to separately find and call\n`self_profile_alloc_strings`.\n\n- Don't compute the global context if it hasn't yet been computed\n\n  This avoids giving extraneous errors about unresolved names if an error\n  occurs during parsing.", "tree": {"sha": "a4e69fcf28f766c3a4dcd4fec5be1008d9b68bb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4e69fcf28f766c3a4dcd4fec5be1008d9b68bb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca72f9ed7065a601bd2b1ec80889ec7bad177598", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca72f9ed7065a601bd2b1ec80889ec7bad177598", "html_url": "https://github.com/rust-lang/rust/commit/ca72f9ed7065a601bd2b1ec80889ec7bad177598", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca72f9ed7065a601bd2b1ec80889ec7bad177598/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d1010f1af1747f9fa8fbade19d9eed2260c96f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d1010f1af1747f9fa8fbade19d9eed2260c96f1", "html_url": "https://github.com/rust-lang/rust/commit/1d1010f1af1747f9fa8fbade19d9eed2260c96f1"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "7031234e1089d15fb3c93514cac93b1115f89bc0", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca72f9ed7065a601bd2b1ec80889ec7bad177598/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca72f9ed7065a601bd2b1ec80889ec7bad177598/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=ca72f9ed7065a601bd2b1ec80889ec7bad177598", "patch": "@@ -1017,13 +1017,6 @@ pub fn start_codegen<'tcx>(\n     tcx.sess.time(\"assert_dep_graph\", || rustc_incremental::assert_dep_graph(tcx));\n     tcx.sess.time(\"serialize_dep_graph\", || rustc_incremental::save_dep_graph(tcx));\n \n-    // We assume that no queries are run past here. If there are new queries\n-    // after this point, they'll show up as \"<unknown>\" in self-profiling data.\n-    {\n-        let _prof_timer = tcx.prof.generic_activity(\"self_profile_alloc_query_strings\");\n-        tcx.alloc_self_profile_query_strings();\n-    }\n-\n     info!(\"Post-codegen\\n{:?}\", tcx.debug_stats());\n \n     if tcx.sess.opts.output_types.contains_key(&OutputType::Mir) {"}, {"sha": "ac6b6d0311545a45f9087471eb6a7b8aca5f56f1", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ca72f9ed7065a601bd2b1ec80889ec7bad177598/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca72f9ed7065a601bd2b1ec80889ec7bad177598/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=ca72f9ed7065a601bd2b1ec80889ec7bad177598", "patch": "@@ -417,9 +417,19 @@ impl Compiler {\n         let queries = Queries::new(&self);\n         let ret = f(&queries);\n \n-        if self.session().opts.debugging_opts.query_stats {\n-            if let Ok(gcx) = queries.global_ctxt() {\n-                gcx.peek_mut().print_stats();\n+        // NOTE: intentionally does not compute the global context if it hasn't been built yet,\n+        // since that likely means there was a parse error.\n+        if let Some(Ok(gcx)) = &mut *queries.global_ctxt.result.borrow_mut() {\n+            // We assume that no queries are run past here. If there are new queries\n+            // after this point, they'll show up as \"<unknown>\" in self-profiling data.\n+            {\n+                let _prof_timer =\n+                    queries.session().prof.generic_activity(\"self_profile_alloc_query_strings\");\n+                gcx.enter(|tcx| tcx.alloc_self_profile_query_strings());\n+            }\n+\n+            if self.session().opts.debugging_opts.query_stats {\n+                gcx.print_stats();\n             }\n         }\n "}, {"sha": "780a3b509c726b563999ed86ab9423fff22d388c", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ca72f9ed7065a601bd2b1ec80889ec7bad177598/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca72f9ed7065a601bd2b1ec80889ec7bad177598/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=ca72f9ed7065a601bd2b1ec80889ec7bad177598", "patch": "@@ -539,7 +539,7 @@ fn main_options(options: config::Options) -> MainResult {\n                 sess.fatal(\"Compilation failed, aborting rustdoc\");\n             }\n \n-            let mut global_ctxt = abort_on_err(queries.global_ctxt(), sess).take();\n+            let mut global_ctxt = abort_on_err(queries.global_ctxt(), sess).peek_mut();\n \n             global_ctxt.enter(|tcx| {\n                 let (mut krate, render_info, render_opts) = sess.time(\"run_global_ctxt\", || {\n@@ -568,7 +568,7 @@ fn main_options(options: config::Options) -> MainResult {\n                 info!(\"going to format\");\n                 let (error_format, edition, debugging_options) = diag_opts;\n                 let diag = core::new_handler(error_format, None, &debugging_options);\n-                let main_result = match output_format {\n+                match output_format {\n                     None | Some(config::OutputFormat::Html) => sess.time(\"render_html\", || {\n                         run_renderer::<html::render::Context<'_>>(\n                             krate,\n@@ -589,10 +589,7 @@ fn main_options(options: config::Options) -> MainResult {\n                             tcx,\n                         )\n                     }),\n-                };\n-                // NOTE: this is normally called in codegen, but rustdoc never goes to codegen.\n-                tcx.alloc_self_profile_query_strings();\n-                main_result\n+                }\n             })\n         })\n     })"}]}