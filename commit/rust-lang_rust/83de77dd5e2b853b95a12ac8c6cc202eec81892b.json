{"sha": "83de77dd5e2b853b95a12ac8c6cc202eec81892b", "node_id": "C_kwDOAAsO6NoAKDgzZGU3N2RkNWUyYjg1M2I5NWExMmFjOGM2Y2MyMDJlZWM4MTg5MmI", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-01-08T04:20:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-08T04:20:55Z"}, "message": "Rollup merge of #84640 - ids1024:u8_from_char, r=m-ou-se\n\nImplement `TryFrom<char>` for `u8`\n\nPreviously suggested in https://github.com/rust-lang/rfcs/issues/2854.\n\nIt makes sense to have this since `char` implements `From<u8>`. Likewise `u32`, `u64`, and `u128` (since #79502) implement `From<char>`.", "tree": {"sha": "57928649c0153e1430b43c8321f382440156a168", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57928649c0153e1430b43c8321f382440156a168"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83de77dd5e2b853b95a12ac8c6cc202eec81892b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh2REnCRBK7hj4Ov3rIwAAse8IACYmoRosi0bcoAKDvRatjUQF\nOvBbcMPIQkKoqrJvyQyevR/HZ5zi/8G59XbnDJ0GGh6VsNLDWgiIm9iCE7/1Dnr/\nqOV1bxuvFU+Deg6gBQ84uFbLcAxa+SWZDxEpErhNwhXC77lHFfT52c8ThFgiDHIa\nur51TzxQe35RIkYKmKtKo57ROm65bPVSASkD3BnlU5fd+AvSZd+wANO7TPkDGcUr\nyujKpDh86ul7lkXwie4L3oSlLU5l66Q3Ud0fYJKNY7AuLoTaIXan/73sj1C6+xd3\n+pij46lHEu4bbDMyShZA5k82iIYjnkwtABNBKt+GF15boQ2VdhZeW8i/j4i9p7U=\n=DShv\n-----END PGP SIGNATURE-----\n", "payload": "tree 57928649c0153e1430b43c8321f382440156a168\nparent e012a191d768adeda1ee36a99ef8b92d51920154\nparent a02639dc09fa0cde2cec73e6260d6702e165b8ce\nauthor Eric Huss <eric@huss.org> 1641615655 -0800\ncommitter GitHub <noreply@github.com> 1641615655 -0800\n\nRollup merge of #84640 - ids1024:u8_from_char, r=m-ou-se\n\nImplement `TryFrom<char>` for `u8`\n\nPreviously suggested in https://github.com/rust-lang/rfcs/issues/2854.\n\nIt makes sense to have this since `char` implements `From<u8>`. Likewise `u32`, `u64`, and `u128` (since #79502) implement `From<char>`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83de77dd5e2b853b95a12ac8c6cc202eec81892b", "html_url": "https://github.com/rust-lang/rust/commit/83de77dd5e2b853b95a12ac8c6cc202eec81892b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83de77dd5e2b853b95a12ac8c6cc202eec81892b/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e012a191d768adeda1ee36a99ef8b92d51920154", "url": "https://api.github.com/repos/rust-lang/rust/commits/e012a191d768adeda1ee36a99ef8b92d51920154", "html_url": "https://github.com/rust-lang/rust/commit/e012a191d768adeda1ee36a99ef8b92d51920154"}, {"sha": "a02639dc09fa0cde2cec73e6260d6702e165b8ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/a02639dc09fa0cde2cec73e6260d6702e165b8ce", "html_url": "https://github.com/rust-lang/rust/commit/a02639dc09fa0cde2cec73e6260d6702e165b8ce"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "1774ddd7cbb2cde9e61ff732a8f25860b798c0f9", "filename": "library/core/src/char/convert.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/83de77dd5e2b853b95a12ac8c6cc202eec81892b/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83de77dd5e2b853b95a12ac8c6cc202eec81892b/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs?ref=83de77dd5e2b853b95a12ac8c6cc202eec81892b", "patch": "@@ -1,5 +1,6 @@\n //! Character conversions.\n \n+use crate::char::TryFromCharError;\n use crate::convert::TryFrom;\n use crate::fmt;\n use crate::mem::transmute;\n@@ -166,6 +167,20 @@ impl const From<char> for u128 {\n     }\n }\n \n+/// Map `char` with code point in U+0000..=U+00FF to byte in 0x00..=0xFF with same value, failing\n+/// if the code point is greater than U+00FF.\n+///\n+/// See [`impl From<u8> for char`](char#impl-From<u8>) for details on the encoding.\n+#[stable(feature = \"u8_from_char\", since = \"1.59.0\")]\n+impl TryFrom<char> for u8 {\n+    type Error = TryFromCharError;\n+\n+    #[inline]\n+    fn try_from(c: char) -> Result<u8, Self::Error> {\n+        u8::try_from(u32::from(c)).map_err(|_| TryFromCharError(()))\n+    }\n+}\n+\n /// Maps a byte in 0x00..=0xFF to a `char` whose code point has the same value, in U+0000..=U+00FF.\n ///\n /// Unicode is designed such that this effectively decodes bytes"}, {"sha": "f65f84e93aebe6a369fa9c7d27d6d405ba49903e", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/83de77dd5e2b853b95a12ac8c6cc202eec81892b/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83de77dd5e2b853b95a12ac8c6cc202eec81892b/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=83de77dd5e2b853b95a12ac8c6cc202eec81892b", "patch": "@@ -544,3 +544,15 @@ impl fmt::Display for ToUppercase {\n         fmt::Display::fmt(&self.0, f)\n     }\n }\n+\n+/// The error type returned when a checked char conversion fails.\n+#[stable(feature = \"u8_from_char\", since = \"1.59.0\")]\n+#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n+pub struct TryFromCharError(pub(crate) ());\n+\n+#[stable(feature = \"u8_from_char\", since = \"1.59.0\")]\n+impl fmt::Display for TryFromCharError {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        \"unicode code point out of range\".fmt(fmt)\n+    }\n+}"}, {"sha": "ea0c230fa42db7438021169ccac9a0dfe6d366d2", "filename": "library/std/src/error.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/83de77dd5e2b853b95a12ac8c6cc202eec81892b/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83de77dd5e2b853b95a12ac8c6cc202eec81892b/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=83de77dd5e2b853b95a12ac8c6cc202eec81892b", "patch": "@@ -478,6 +478,9 @@ impl Error for char::DecodeUtf16Error {\n     }\n }\n \n+#[stable(feature = \"u8_from_char\", since = \"1.59.0\")]\n+impl Error for char::TryFromCharError {}\n+\n #[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n impl<'a, K: Debug + Ord, V: Debug> Error\n     for crate::collections::btree_map::OccupiedError<'a, K, V>"}]}