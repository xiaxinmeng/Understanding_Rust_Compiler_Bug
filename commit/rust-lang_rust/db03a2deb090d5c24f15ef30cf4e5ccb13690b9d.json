{"sha": "db03a2deb090d5c24f15ef30cf4e5ccb13690b9d", "node_id": "C_kwDOAAsO6NoAKGRiMDNhMmRlYjA5MGQ1YzI0ZjE1ZWYzMGNmNGU1Y2NiMTM2OTBiOWQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-29T21:50:01Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-10T11:08:36Z"}, "message": "Avoid accessing HIR from MIR queries.", "tree": {"sha": "0658d8e510c686e9554992b8013f977d71ce8c3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0658d8e510c686e9554992b8013f977d71ce8c3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d", "html_url": "https://github.com/rust-lang/rust/commit/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "341883d051ebbfaa6daa456b198d557fa0272b71", "url": "https://api.github.com/repos/rust-lang/rust/commits/341883d051ebbfaa6daa456b198d557fa0272b71", "html_url": "https://github.com/rust-lang/rust/commit/341883d051ebbfaa6daa456b198d557fa0272b71"}], "stats": {"total": 76, "additions": 35, "deletions": 41}, "files": [{"sha": "0a1eae39d75ce59b3dbad6dea9f4fca259523a2e", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=db03a2deb090d5c24f15ef30cf4e5ccb13690b9d", "patch": "@@ -23,7 +23,6 @@ use rustc_data_structures::graph::dominators::Dominators;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_hir::Node;\n use rustc_index::bit_set::ChunkedBitSet;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n@@ -288,14 +287,16 @@ fn do_mir_borrowck<'a, 'tcx>(\n         .pass_name(\"borrowck\")\n         .iterate_to_fixpoint();\n \n-    let def_hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n-    let movable_generator = !matches!(\n-        tcx.hir().get(def_hir_id),\n-        Node::Expr(&hir::Expr {\n-            kind: hir::ExprKind::Closure(.., Some(hir::Movability::Static)),\n-            ..\n-        })\n-    );\n+    let movable_generator =\n+        // The first argument is the generator type passed by value\n+        if let Some(local) = body.local_decls.raw.get(1)\n+        // Get the interior types and substs which typeck computed\n+        && let ty::Generator(_, _, hir::Movability::Static) = local.ty.kind()\n+    {\n+        false\n+    } else {\n+        true\n+    };\n \n     for (idx, move_data_results) in promoted_errors {\n         let promoted_body = &promoted[idx];\n@@ -385,7 +386,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         let scope = mbcx.body.source_info(location).scope;\n         let lint_root = match &mbcx.body.source_scopes[scope].local_data {\n             ClearCrossCrate::Set(data) => data.lint_root,\n-            _ => def_hir_id,\n+            _ => tcx.hir().local_def_id_to_hir_id(def.did),\n         };\n \n         // Span and message don't matter; we overwrite them below anyway"}, {"sha": "28a566ca40861cc32fb722d24055b3c61d21cafe", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=db03a2deb090d5c24f15ef30cf4e5ccb13690b9d", "patch": "@@ -829,12 +829,12 @@ fn for_each_late_bound_region_defined_on<'tcx>(\n ) {\n     if let Some((owner, late_bounds)) = tcx.is_late_bound_map(fn_def_id.expect_local()) {\n         for &late_bound in late_bounds.iter() {\n-            let hir_id = HirId { owner, local_id: late_bound };\n-            let name = tcx.hir().name(hir_id);\n-            let region_def_id = tcx.hir().local_def_id(hir_id);\n+            let region_def_id =\n+                tcx.hir().local_def_id(HirId { owner, local_id: late_bound }).to_def_id();\n+            let name = tcx.item_name(region_def_id);\n             let liberated_region = tcx.mk_region(ty::ReFree(ty::FreeRegion {\n                 scope: owner.to_def_id(),\n-                bound_region: ty::BoundRegionKind::BrNamed(region_def_id.to_def_id(), name),\n+                bound_region: ty::BoundRegionKind::BrNamed(region_def_id, name),\n             }));\n             f(liberated_region);\n         }"}, {"sha": "625f57b872bf7ecf6fc3a39a5663994b05847175", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=db03a2deb090d5c24f15ef30cf4e5ccb13690b9d", "patch": "@@ -222,7 +222,7 @@ impl<'mir, 'tcx> Checker<'mir, 'tcx> {\n \n         // `async` functions cannot be `const fn`. This is checked during AST lowering, so there's\n         // no need to emit duplicate errors here.\n-        if is_async_fn(self.ccx) || body.generator.is_some() {\n+        if self.ccx.is_async() || body.generator.is_some() {\n             tcx.sess.delay_span_bug(body.span, \"`async` functions cannot be `const fn`\");\n             return;\n         }\n@@ -1056,12 +1056,8 @@ fn is_int_bool_or_char(ty: Ty<'_>) -> bool {\n     ty.is_bool() || ty.is_integral() || ty.is_char()\n }\n \n-fn is_async_fn(ccx: &ConstCx<'_, '_>) -> bool {\n-    ccx.fn_sig().map_or(false, |sig| sig.header.asyncness == hir::IsAsync::Async)\n-}\n-\n fn emit_unstable_in_stable_error(ccx: &ConstCx<'_, '_>, span: Span, gate: Symbol) {\n-    let attr_span = ccx.fn_sig().map_or(ccx.body.span, |sig| sig.span.shrink_to_lo());\n+    let attr_span = ccx.tcx.def_span(ccx.def_id()).shrink_to_lo();\n \n     ccx.tcx\n         .sess"}, {"sha": "25ba97ee60567d0ba3f882256925f77d89db5781", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=db03a2deb090d5c24f15ef30cf4e5ccb13690b9d", "patch": "@@ -61,14 +61,8 @@ impl<'mir, 'tcx> ConstCx<'mir, 'tcx> {\n             && is_const_stable_const_fn(self.tcx, self.def_id().to_def_id())\n     }\n \n-    /// Returns the function signature of the item being const-checked if it is a `fn` or `const fn`.\n-    pub fn fn_sig(&self) -> Option<&'tcx hir::FnSig<'tcx>> {\n-        // Get this from the HIR map instead of a query to avoid cycle errors.\n-        //\n-        // FIXME: Is this still an issue?\n-        let hir_map = self.tcx.hir();\n-        let hir_id = hir_map.local_def_id_to_hir_id(self.def_id());\n-        hir_map.fn_sig_by_hir_id(hir_id)\n+    fn is_async(&self) -> bool {\n+        self.tcx.asyncness(self.def_id()) == hir::IsAsync::Async\n     }\n }\n "}, {"sha": "53d60d280c001dcf3179d0488facd869e828a5dc", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=db03a2deb090d5c24f15ef30cf4e5ccb13690b9d", "patch": "@@ -223,6 +223,14 @@ impl DefKind {\n             | DefKind::Impl => None,\n         }\n     }\n+\n+    #[inline]\n+    pub fn is_fn_like(self) -> bool {\n+        match self {\n+            DefKind::Fn | DefKind::AssocFn | DefKind::Closure | DefKind::Generator => true,\n+            _ => false,\n+        }\n+    }\n }\n \n /// The resolution of a path or export."}, {"sha": "aa47630a26ac046cfd19dc84824a47bf7e89c7a0", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=db03a2deb090d5c24f15ef30cf4e5ccb13690b9d", "patch": "@@ -71,8 +71,9 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n         }\n \n         let def_id = body.source.def_id().expect_local();\n-        let is_fn_like = tcx.hir().get_by_def_id(def_id).fn_kind().is_some();\n-        let is_assoc_const = tcx.def_kind(def_id) == DefKind::AssocConst;\n+        let def_kind = tcx.def_kind(def_id);\n+        let is_fn_like = def_kind.is_fn_like();\n+        let is_assoc_const = def_kind == DefKind::AssocConst;\n \n         // Only run const prop on functions, methods, closures and associated constants\n         if !is_fn_like && !is_assoc_const {"}, {"sha": "50400cdeac978a876bb6dd01d95efe5502924ef9", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=db03a2deb090d5c24f15ef30cf4e5ccb13690b9d", "patch": "@@ -67,7 +67,7 @@ impl<'tcx> MirLint<'tcx> for ConstProp {\n         }\n \n         let def_id = body.source.def_id().expect_local();\n-        let is_fn_like = tcx.hir().get_by_def_id(def_id).fn_kind().is_some();\n+        let is_fn_like = tcx.def_kind(def_id).is_fn_like();\n         let is_assoc_const = tcx.def_kind(def_id) == DefKind::AssocConst;\n \n         // Only run const prop on functions, methods, closures and associated constants"}, {"sha": "d395ccd3819336640da691dd9f6628c72b4845d5", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=db03a2deb090d5c24f15ef30cf4e5ccb13690b9d", "patch": "@@ -366,7 +366,7 @@ fn mir_drops_elaborated_and_const_checked<'tcx>(\n \n     let mir_borrowck = tcx.mir_borrowck_opt_const_arg(def);\n \n-    let is_fn_like = tcx.hir().get_by_def_id(def.did).fn_kind().is_some();\n+    let is_fn_like = tcx.def_kind(def.did).is_fn_like();\n     if is_fn_like {\n         let did = def.did.to_def_id();\n         let def = ty::WithOptConstParam::unknown(did);"}, {"sha": "d10cac2ac7635f03d0c3668d9da12108a79179cd", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=db03a2deb090d5c24f15ef30cf4e5ccb13690b9d", "patch": "@@ -725,9 +725,6 @@ fn build_call_shim<'tcx>(\n pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> Body<'_> {\n     debug_assert!(tcx.is_constructor(ctor_id));\n \n-    let span =\n-        tcx.hir().span_if_local(ctor_id).unwrap_or_else(|| bug!(\"no span for ctor {:?}\", ctor_id));\n-\n     let param_env = tcx.param_env(ctor_id);\n \n     // Normalize the sig.\n@@ -740,6 +737,8 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> Body<'_> {\n \n     debug!(\"build_ctor: ctor_id={:?} sig={:?}\", ctor_id, sig);\n \n+    let span = tcx.def_span(ctor_id);\n+\n     let local_decls = local_decls_for_sig(&sig, span);\n \n     let source_info = SourceInfo::outermost(span);"}, {"sha": "6ad71bdb48169bfdf5eb29751804f7b5d3b7186f", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=db03a2deb090d5c24f15ef30cf4e5ccb13690b9d", "patch": "@@ -414,12 +414,7 @@ fn issue33140_self_ty(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Ty<'_>> {\n /// Check if a function is async.\n fn asyncness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::IsAsync {\n     let node = tcx.hir().get_by_def_id(def_id.expect_local());\n-\n-    let fn_kind = node.fn_kind().unwrap_or_else(|| {\n-        bug!(\"asyncness: expected fn-like node but got `{:?}`\", def_id);\n-    });\n-\n-    fn_kind.asyncness()\n+    if let Some(fn_kind) = node.fn_kind() { fn_kind.asyncness() } else { hir::IsAsync::NotAsync }\n }\n \n /// Don't call this directly: use ``tcx.conservative_is_privately_uninhabited`` instead."}]}