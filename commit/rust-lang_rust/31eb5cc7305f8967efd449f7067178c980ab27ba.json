{"sha": "31eb5cc7305f8967efd449f7067178c980ab27ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZWI1Y2M3MzA1Zjg5NjdlZmQ0NDlmNzA2NzE3OGM5ODBhYjI3YmE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-30T00:14:31Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-30T00:14:31Z"}, "message": "Account for const fns to avoid incorrect suggestions", "tree": {"sha": "c2afe8245b0b16dde1ecc1f59d66f2da74b73f85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2afe8245b0b16dde1ecc1f59d66f2da74b73f85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31eb5cc7305f8967efd449f7067178c980ab27ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31eb5cc7305f8967efd449f7067178c980ab27ba", "html_url": "https://github.com/rust-lang/rust/commit/31eb5cc7305f8967efd449f7067178c980ab27ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31eb5cc7305f8967efd449f7067178c980ab27ba/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e84b619f4618a11e9be62379a60aebc7455a547", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e84b619f4618a11e9be62379a60aebc7455a547", "html_url": "https://github.com/rust-lang/rust/commit/4e84b619f4618a11e9be62379a60aebc7455a547"}], "stats": {"total": 89, "additions": 81, "deletions": 8}, "files": [{"sha": "826ae836a906e77e8bb4817ca056ddd4e1140da5", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31eb5cc7305f8967efd449f7067178c980ab27ba/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31eb5cc7305f8967efd449f7067178c980ab27ba/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=31eb5cc7305f8967efd449f7067178c980ab27ba", "patch": "@@ -734,6 +734,14 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    pub fn is_const_scope(&self, hir_id: HirId) -> bool {\n+        self.walk_parent_nodes(hir_id, |node| match *node {\n+            Node::Item(Item { node: ItemKind::Const(_, _), .. }) => true,\n+            Node::Item(Item { node: ItemKind::Fn(_, header, _, _), .. }) => header.is_const(),\n+            _ => false,\n+        }, |_| false).map(|id| id != CRATE_HIR_ID).unwrap_or(false)\n+    }\n+\n     /// If there is some error when walking the parents (e.g., a node does not\n     /// have a parent in the map or a node can't be found), then we return the\n     /// last good `NodeId` we found. Note that reaching the crate root (`id == 0`),"}, {"sha": "8418658ab6878ecc843c064721d9f6077d883388", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/31eb5cc7305f8967efd449f7067178c980ab27ba/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31eb5cc7305f8967efd449f7067178c980ab27ba/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=31eb5cc7305f8967efd449f7067178c980ab27ba", "patch": "@@ -2288,6 +2288,15 @@ pub struct FnHeader {\n     pub abi: Abi,\n }\n \n+impl FnHeader {\n+    pub fn is_const(&self) -> bool {\n+        match &self.constness {\n+            Constness::Const => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub enum ItemKind {\n     /// An `extern crate` item, with optional *original* crate name if the crate was renamed."}, {"sha": "689996ccb25a9304049c9cb27065078a9232eaca", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/31eb5cc7305f8967efd449f7067178c980ab27ba/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31eb5cc7305f8967efd449f7067178c980ab27ba/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=31eb5cc7305f8967efd449f7067178c980ab27ba", "patch": "@@ -7,7 +7,7 @@ use syntax_pos::Span;\n use rustc::hir;\n use rustc::hir::def::Def;\n use rustc::hir::Node;\n-use rustc::hir::{Item, ItemKind, print};\n+use rustc::hir::print;\n use rustc::ty::{self, Ty, AssociatedItem};\n use rustc::ty::adjustment::AllowTwoPhase;\n use errors::{Applicability, DiagnosticBuilder};\n@@ -550,14 +550,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         checked_ty: Ty<'tcx>,\n         expected_ty: Ty<'tcx>,\n     ) -> bool {\n-        let parent_id = self.tcx.hir().get_parent_node_by_hir_id(expr.hir_id);\n-        if let Some(parent) = self.tcx.hir().find_by_hir_id(parent_id) {\n+        if self.tcx.hir().is_const_scope(expr.hir_id) {\n             // Shouldn't suggest `.into()` on `const`s.\n-            if let Node::Item(Item { node: ItemKind::Const(_, _), .. }) = parent {\n-                // FIXME(estebank): modify once we decide to suggest `as` casts\n-                return false;\n-            }\n-        };\n+            // FIXME(estebank): modify once we decide to suggest `as` casts\n+            return false;\n+        }\n \n         // If casting this expression to a given numeric type would be appropriate in case of a type\n         // mismatch."}, {"sha": "053599a9bb9f1415a06a82893507e3570d199645", "filename": "src/test/ui/numeric/const-scope.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31eb5cc7305f8967efd449f7067178c980ab27ba/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31eb5cc7305f8967efd449f7067178c980ab27ba/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.rs?ref=31eb5cc7305f8967efd449f7067178c980ab27ba", "patch": "@@ -0,0 +1,12 @@\n+const C: i32 = 1i8; //~ ERROR mismatched types\n+const D: i8 = C; //~ ERROR mismatched types\n+\n+const fn foo() {\n+    let c: i32 = 1i8; //~ ERROR mismatched types\n+    let d: i8 = c; //~ ERROR mismatched types\n+}\n+\n+fn main() {\n+    let c: i32 = 1i8; //~ ERROR mismatched types\n+    let d: i8 = c; //~ ERROR mismatched types\n+}"}, {"sha": "ead3a79da027080abb9b4001730d35739cc08872", "filename": "src/test/ui/numeric/const-scope.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/31eb5cc7305f8967efd449f7067178c980ab27ba/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31eb5cc7305f8967efd449f7067178c980ab27ba/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr?ref=31eb5cc7305f8967efd449f7067178c980ab27ba", "patch": "@@ -0,0 +1,47 @@\n+error[E0308]: mismatched types\n+  --> $DIR/const-scope.rs:1:16\n+   |\n+LL | const C: i32 = 1i8;\n+   |                ^^^ expected i32, found i8\n+\n+error[E0308]: mismatched types\n+  --> $DIR/const-scope.rs:2:15\n+   |\n+LL | const D: i8 = C;\n+   |               ^ expected i8, found i32\n+\n+error[E0308]: mismatched types\n+  --> $DIR/const-scope.rs:5:18\n+   |\n+LL |     let c: i32 = 1i8;\n+   |                  ^^^ expected i32, found i8\n+\n+error[E0308]: mismatched types\n+  --> $DIR/const-scope.rs:6:17\n+   |\n+LL |     let d: i8 = c;\n+   |                 ^ expected i8, found i32\n+\n+error[E0308]: mismatched types\n+  --> $DIR/const-scope.rs:10:18\n+   |\n+LL |     let c: i32 = 1i8;\n+   |                  ^^^ expected i32, found i8\n+help: change the type of the numeric literal from `i8` to `i32`\n+   |\n+LL |     let c: i32 = 1i32;\n+   |                  ^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/const-scope.rs:11:17\n+   |\n+LL |     let d: i8 = c;\n+   |                 ^ expected i8, found i32\n+help: you can convert an `i32` to `i8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     let d: i8 = c.try_into().unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}