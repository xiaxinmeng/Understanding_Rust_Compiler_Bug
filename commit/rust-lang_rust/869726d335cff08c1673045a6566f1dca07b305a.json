{"sha": "869726d335cff08c1673045a6566f1dca07b305a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2OTcyNmQzMzVjZmYwOGMxNjczMDQ1YTY1NjZmMWRjYTA3YjMwNWE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-04T17:19:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-04T17:19:59Z"}, "message": "Rollup merge of #81619 - SkiFire13:resultshunt-inplace, r=the8472\n\nImplement `SourceIterator` and `InPlaceIterable` for `ResultShunt`", "tree": {"sha": "9d265e3ca475f1a35da5976f5906a69f68b184f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d265e3ca475f1a35da5976f5906a69f68b184f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/869726d335cff08c1673045a6566f1dca07b305a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgafU/CRBK7hj4Ov3rIwAAdHIIAESrmhH0l41FcbgXmzMtqlQC\nQhEhGftB7F3XKvqyp/z6NhB9Hbbtu/GvLdSslDVhsK8YJrwjcURSFBNW/G1Li0b8\nAw7qYCZzIKat4n3z5RQVKw1WL8v9Bor8wpNxMXz66LUV+icKcstqleipaitEsnqQ\n90ppowQzRnoR2COQ7PslaMAt4LMt8v+Bhl7ouYdEpwfnoRNFufVEZKx23zU1TXZ0\n1LUBIKfiqEXsKWmsoEc9oG4xWtry3uzv1H+XnAMm9KgbfWDUvXBICidY8//bw8fe\nX4Be5l59rkg18EtqV5pa8YVC8Wo9gDi8UFYmsF210kqTswbjFlNSv8lFfbcbEKs=\n=zFgr\n-----END PGP SIGNATURE-----\n", "payload": "tree 9d265e3ca475f1a35da5976f5906a69f68b184f7\nparent a1c34493d4d733fedf2a8609d7426a425eb7cf84\nparent 2fb56cc123cc1111cff2803ab7df26a0f0941fae\nauthor Dylan DPC <dylan.dpc@gmail.com> 1617556799 +0200\ncommitter GitHub <noreply@github.com> 1617556799 +0200\n\nRollup merge of #81619 - SkiFire13:resultshunt-inplace, r=the8472\n\nImplement `SourceIterator` and `InPlaceIterable` for `ResultShunt`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/869726d335cff08c1673045a6566f1dca07b305a", "html_url": "https://github.com/rust-lang/rust/commit/869726d335cff08c1673045a6566f1dca07b305a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/869726d335cff08c1673045a6566f1dca07b305a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1c34493d4d733fedf2a8609d7426a425eb7cf84", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c34493d4d733fedf2a8609d7426a425eb7cf84", "html_url": "https://github.com/rust-lang/rust/commit/a1c34493d4d733fedf2a8609d7426a425eb7cf84"}, {"sha": "2fb56cc123cc1111cff2803ab7df26a0f0941fae", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb56cc123cc1111cff2803ab7df26a0f0941fae", "html_url": "https://github.com/rust-lang/rust/commit/2fb56cc123cc1111cff2803ab7df26a0f0941fae"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "d208bd8ce5814f968485d7df9c96ea914744595e", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/869726d335cff08c1673045a6566f1dca07b305a/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/869726d335cff08c1673045a6566f1dca07b305a/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=869726d335cff08c1673045a6566f1dca07b305a", "patch": "@@ -1004,9 +1004,9 @@ fn test_from_iter_specialization_with_iterator_adapters() {\n         .map_while(Option::Some)\n         .peekable()\n         .skip(1)\n-        .map(|e| std::num::NonZeroUsize::new(e));\n+        .map(|e| if e != usize::MAX { Ok(std::num::NonZeroUsize::new(e)) } else { Err(()) });\n     assert_in_place_trait(&iter);\n-    let sink = iter.collect::<Vec<_>>();\n+    let sink = iter.collect::<Result<Vec<_>, _>>().unwrap();\n     let sinkptr = sink.as_ptr();\n     assert_eq!(srcptr, sinkptr as *const usize);\n }"}, {"sha": "61d8351d59f09bce9a536f80d73a5e5a95de04e0", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/869726d335cff08c1673045a6566f1dca07b305a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/869726d335cff08c1673045a6566f1dca07b305a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=869726d335cff08c1673045a6566f1dca07b305a", "patch": "@@ -194,3 +194,26 @@ where\n         self.try_fold(init, ok(fold)).unwrap()\n     }\n }\n+\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+unsafe impl<S: Iterator, I, E> SourceIter for ResultShunt<'_, I, E>\n+where\n+    I: SourceIter<Source = S>,\n+{\n+    type Source = S;\n+\n+    #[inline]\n+    unsafe fn as_inner(&mut self) -> &mut S {\n+        // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n+        unsafe { SourceIter::as_inner(&mut self.iter) }\n+    }\n+}\n+\n+// SAFETY: ResultShunt::next calls I::find, which has to advance `iter` in order to\n+// return `Some(_)`. Since `iter` has type `I: InPlaceIterable` it's guaranteed that\n+// at least one item will be moved out from the underlying source.\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+unsafe impl<I, T, E> InPlaceIterable for ResultShunt<'_, I, E> where\n+    I: Iterator<Item = Result<T, E>> + InPlaceIterable\n+{\n+}"}]}