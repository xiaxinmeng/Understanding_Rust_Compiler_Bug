{"sha": "631ac9c472322077304d9acc4de21220c54c56db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMWFjOWM0NzIzMjIwNzczMDRkOWFjYzRkZTIxMjIwYzU0YzU2ZGI=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-26T21:13:18Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-02T13:02:36Z"}, "message": "update tests", "tree": {"sha": "0a9335f06d750bb62d29a238fe04062ff89643df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a9335f06d750bb62d29a238fe04062ff89643df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/631ac9c472322077304d9acc4de21220c54c56db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/631ac9c472322077304d9acc4de21220c54c56db", "html_url": "https://github.com/rust-lang/rust/commit/631ac9c472322077304d9acc4de21220c54c56db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/631ac9c472322077304d9acc4de21220c54c56db/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef4d2c10430c941619ccc517e709f093a4ea9689", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef4d2c10430c941619ccc517e709f093a4ea9689", "html_url": "https://github.com/rust-lang/rust/commit/ef4d2c10430c941619ccc517e709f093a4ea9689"}], "stats": {"total": 48, "additions": 37, "deletions": 11}, "files": [{"sha": "5024392a0f98df03a686517f602beba2079009dc", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/631ac9c472322077304d9acc4de21220c54c56db/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/631ac9c472322077304d9acc4de21220c54c56db/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=631ac9c472322077304d9acc4de21220c54c56db", "patch": "@@ -398,7 +398,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                             // These variants are trivially WF, so nothing to do here.\n                         }\n                         ty::ConstKind::Value(..) => {\n-                            // FIXME: Enforce that values are structually-matchable.\n+                            // FIXME: Enforce that values are structurally-matchable.\n                         }\n                     }\n                     continue;\n@@ -434,6 +434,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n \n                 ty::Array(subty, _) => {\n                     self.require_sized(subty, traits::SliceOrArrayElem);\n+                    // Note that we handle the len is implicitly checked while walking `arg`.\n                 }\n \n                 ty::Tuple(ref tys) => {\n@@ -445,11 +446,11 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                 }\n \n                 ty::RawPtr(_) => {\n-                    // simple cases that are WF if their type args are WF\n+                    // Simple cases that are WF if their type args are WF.\n                 }\n \n                 ty::Projection(data) => {\n-                    walker.skip_current_subtree(); // subtree handled by compute_projection\n+                    walker.skip_current_subtree(); // Subtree handled by compute_projection.\n                     self.compute_projection(data);\n                 }\n "}, {"sha": "ba4bca8cd9981cfe85fca2ad5f10705299ccba4f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/631ac9c472322077304d9acc4de21220c54c56db/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/631ac9c472322077304d9acc4de21220c54c56db/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=631ac9c472322077304d9acc4de21220c54c56db", "patch": "@@ -3389,8 +3389,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    /// Registers an obligation for checking later, during regionck, that the type `ty` must\n-    /// outlive the region `r`.\n+    /// Registers an obligation for checking later, during regionck, that `arg` is well-formed.\n     pub fn register_wf_obligation(\n         &self,\n         arg: subst::GenericArg<'tcx>,"}, {"sha": "0d42ff1895cdb109f47329284c4870fe8455e904", "filename": "src/test/ui/const-generics/issues/issue-61935.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/631ac9c472322077304d9acc4de21220c54c56db/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/631ac9c472322077304d9acc4de21220c54c56db/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs?ref=631ac9c472322077304d9acc4de21220c54c56db", "patch": "@@ -1,5 +1,3 @@\n-// check-pass\n-\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n \n@@ -8,6 +6,7 @@ trait Foo {}\n impl<const N: usize> Foo for [(); N]\n     where\n         Self:FooImpl<{N==0}>\n+//~^ERROR constant expression depends on a generic parameter\n {}\n \n trait FooImpl<const IS_ZERO: bool>{}"}, {"sha": "a785af5f008ea739876541dea982df9a1336acd8", "filename": "src/test/ui/const-generics/issues/issue-61935.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/631ac9c472322077304d9acc4de21220c54c56db/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/631ac9c472322077304d9acc4de21220c54c56db/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.stderr?ref=631ac9c472322077304d9acc4de21220c54c56db", "patch": "@@ -1,11 +1,19 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-61935.rs:3:12\n+  --> $DIR/issue-61935.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-warning: 1 warning emitted\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-61935.rs:8:14\n+   |\n+LL |         Self:FooImpl<{N==0}>\n+   |              ^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "0d392ddcaedcc4f4a109d0b035e34830e605ed5e", "filename": "src/test/ui/const-generics/lazy-normalization/issue-71922.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/631ac9c472322077304d9acc4de21220c54c56db/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Fissue-71922.rs", "raw_url": "https://github.com/rust-lang/rust/raw/631ac9c472322077304d9acc4de21220c54c56db/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Fissue-71922.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Fissue-71922.rs?ref=631ac9c472322077304d9acc4de21220c54c56db", "patch": "@@ -1,9 +1,9 @@\n-// run-pass\n #![feature(const_generics)]\n-#![allow(incomplete_features)]\n+//~^ WARN the feature `const_generics` is incomplete\n trait Foo {}\n \n impl<const N: usize> Foo for [(); N] where Self: FooImpl<{ N == 0 }> {}\n+//~^ ERROR constant expression depends on a generic parameter\n \n trait FooImpl<const IS_ZERO: bool> {}\n "}, {"sha": "00917571e716d8bf1bc21c84da6ab89c21f9e37c", "filename": "src/test/ui/const-generics/lazy-normalization/issue-71922.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/631ac9c472322077304d9acc4de21220c54c56db/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Fissue-71922.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/631ac9c472322077304d9acc4de21220c54c56db/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Fissue-71922.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Fissue-71922.stderr?ref=631ac9c472322077304d9acc4de21220c54c56db", "patch": "@@ -0,0 +1,19 @@\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-71922.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-71922.rs:5:50\n+   |\n+LL | impl<const N: usize> Foo for [(); N] where Self: FooImpl<{ N == 0 }> {}\n+   |                                                  ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}]}