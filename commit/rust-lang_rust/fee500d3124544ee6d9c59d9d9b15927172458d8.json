{"sha": "fee500d3124544ee6d9c59d9d9b15927172458d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZTUwMGQzMTI0NTQ0ZWU2ZDljNTlkOWQ5YjE1OTI3MTcyNDU4ZDg=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-04T00:46:51Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:45Z"}, "message": "libregex: fix fallout", "tree": {"sha": "e4e982f2c6e550e9fae1fbdd288c0be25bd4c05f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4e982f2c6e550e9fae1fbdd288c0be25bd4c05f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fee500d3124544ee6d9c59d9d9b15927172458d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fee500d3124544ee6d9c59d9d9b15927172458d8", "html_url": "https://github.com/rust-lang/rust/commit/fee500d3124544ee6d9c59d9d9b15927172458d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fee500d3124544ee6d9c59d9d9b15927172458d8/comments", "author": null, "committer": null, "parents": [{"sha": "5e9ca5b25530ab58f9d0b09662884928b054f271", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e9ca5b25530ab58f9d0b09662884928b054f271", "html_url": "https://github.com/rust-lang/rust/commit/5e9ca5b25530ab58f9d0b09662884928b054f271"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "05f853a851ea7aa226358eb4d7743dbb4c4fc8b7", "filename": "src/libregex/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fee500d3124544ee6d9c59d9d9b15927172458d8/src%2Flibregex%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee500d3124544ee6d9c59d9d9b15927172458d8/src%2Flibregex%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Flib.rs?ref=fee500d3124544ee6d9c59d9d9b15927172458d8", "patch": "@@ -370,6 +370,7 @@\n \n #![allow(unknown_features)]\n #![feature(macro_rules, phase, slicing_syntax, globs)]\n+#![feature(unboxed_closures)]\n #![deny(missing_docs)]\n \n #[cfg(test)]"}, {"sha": "f7ea83a8a383590bf5354e6d410cbcce6c8da290", "filename": "src/libregex/parse.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fee500d3124544ee6d9c59d9d9b15927172458d8/src%2Flibregex%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee500d3124544ee6d9c59d9d9b15927172458d8/src%2Flibregex%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse.rs?ref=fee500d3124544ee6d9c59d9d9b15927172458d8", "patch": "@@ -838,8 +838,9 @@ impl<'a> Parser<'a> {\n     // Otherwise, an error will be returned.\n     // Generally, `allow_start` is only true when you're *not* expecting an\n     // opening parenthesis.\n-    fn pos_last(&self, allow_start: bool, pred: |&BuildAst| -> bool)\n-               -> Result<uint, Error> {\n+    fn pos_last<P>(&self, allow_start: bool, pred: P) -> Result<uint, Error> where\n+        P: FnMut(&BuildAst) -> bool,\n+   {\n         let from = match self.stack.iter().rev().position(pred) {\n             Some(i) => i,\n             None => {"}]}