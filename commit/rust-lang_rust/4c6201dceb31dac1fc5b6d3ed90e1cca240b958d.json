{"sha": "4c6201dceb31dac1fc5b6d3ed90e1cca240b958d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNjIwMWRjZWIzMWRhYzFmYzViNmQzZWQ5MGUxY2NhMjQwYjk1OGQ=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-24T21:17:43Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-24T21:17:43Z"}, "message": "Merge #3312\n\n3312: OUT_OF_BOUNDS_INDEXING false negative r=phansch a=JoshMcguigan\n\nfixes #3102\n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>", "tree": {"sha": "30ad080a4e68273747d47fdbb6ec565cf186e2dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30ad080a4e68273747d47fdbb6ec565cf186e2dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c6201dceb31dac1fc5b6d3ed90e1cca240b958d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c6201dceb31dac1fc5b6d3ed90e1cca240b958d", "html_url": "https://github.com/rust-lang/rust/commit/4c6201dceb31dac1fc5b6d3ed90e1cca240b958d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c6201dceb31dac1fc5b6d3ed90e1cca240b958d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "44fb29a35674f6b7a18dcad8e613813e7838f24f", "url": "https://api.github.com/repos/rust-lang/rust/commits/44fb29a35674f6b7a18dcad8e613813e7838f24f", "html_url": "https://github.com/rust-lang/rust/commit/44fb29a35674f6b7a18dcad8e613813e7838f24f"}, {"sha": "66d3672b2696918a074d193813af1f74d1c48be9", "url": "https://api.github.com/repos/rust-lang/rust/commits/66d3672b2696918a074d193813af1f74d1c48be9", "html_url": "https://github.com/rust-lang/rust/commit/66d3672b2696918a074d193813af1f74d1c48be9"}], "stats": {"total": 130, "additions": 84, "deletions": 46}, "files": [{"sha": "f960ab5958ce59e581e832c31a6a248be83985b3", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 36, "deletions": 15, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4c6201dceb31dac1fc5b6d3ed90e1cca240b958d/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6201dceb31dac1fc5b6d3ed90e1cca240b958d/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=4c6201dceb31dac1fc5b6d3ed90e1cca240b958d", "patch": "@@ -108,19 +108,40 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicing {\n         if let ExprKind::Index(ref array, ref index) = &expr.node {\n             let ty = cx.tables.expr_ty(array);\n             if let Some(range) = higher::range(cx, index) {\n+\n                 // Ranged indexes, i.e. &x[n..m], &x[n..], &x[..n] and &x[..]\n                 if let ty::Array(_, s) = ty.sty {\n                     let size: u128 = s.assert_usize(cx.tcx).unwrap().into();\n-                    // Index is a constant range.\n-                    if let Some((start, end)) = to_const_range(cx, range, size) {\n-                        if start > size || end > size {\n+\n+                    let const_range = to_const_range(cx, range, size);\n+\n+                    if let (Some(start), _) = const_range {\n+                        if start > size {\n                             utils::span_lint(\n                                 cx,\n                                 OUT_OF_BOUNDS_INDEXING,\n-                                expr.span,\n+                                range.start.map_or(expr.span, |start| start.span),\n                                 \"range is out of bounds\",\n                             );\n+                            return;\n                         }\n+                    }\n+\n+                    if let (_, Some(end)) = const_range {\n+                        if end > size {\n+                            utils::span_lint(\n+                                cx,\n+                                OUT_OF_BOUNDS_INDEXING,\n+                                range.end.map_or(expr.span, |end| end.span),\n+                                \"range is out of bounds\",\n+                            );\n+                            return;\n+                        }\n+                    }\n+\n+                    if let (Some(_), Some(_)) = const_range {\n+                        // early return because both start and end are constants\n+                        // and we have proven above that they are in bounds\n                         return;\n                     }\n                 }\n@@ -161,34 +182,34 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicing {\n     }\n }\n \n-/// Returns an option containing a tuple with the start and end (exclusive) of\n-/// the range.\n+/// Returns a tuple of options with the start and end (exclusive) values of\n+/// the range. If the start or end is not constant, None is returned.\n fn to_const_range<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     range: Range<'_>,\n     array_size: u128,\n-) -> Option<(u128, u128)> {\n+) -> (Option<u128>, Option<u128>) {\n     let s = range\n         .start\n         .map(|expr| constant(cx, cx.tables, expr).map(|(c, _)| c));\n     let start = match s {\n-        Some(Some(Constant::Int(x))) => x,\n-        Some(_) => return None,\n-        None => 0,\n+        Some(Some(Constant::Int(x))) => Some(x),\n+        Some(_) => None,\n+        None => Some(0),\n     };\n \n     let e = range\n         .end\n         .map(|expr| constant(cx, cx.tables, expr).map(|(c, _)| c));\n     let end = match e {\n         Some(Some(Constant::Int(x))) => if range.limits == RangeLimits::Closed {\n-            x + 1\n+            Some(x + 1)\n         } else {\n-            x\n+            Some(x)\n         },\n-        Some(_) => return None,\n-        None => array_size,\n+        Some(_) => None,\n+        None => Some(array_size),\n     };\n \n-    Some((start, end))\n+    (start, end)\n }"}, {"sha": "ff154091bb82a674e14e1dfb93b7b5d9dd3b1e97", "filename": "tests/ui/indexing_slicing.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c6201dceb31dac1fc5b6d3ed90e1cca240b958d/tests%2Fui%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6201dceb31dac1fc5b6d3ed90e1cca240b958d/tests%2Fui%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.rs?ref=4c6201dceb31dac1fc5b6d3ed90e1cca240b958d", "patch": "@@ -91,4 +91,9 @@ fn main() {\n     x[M]; // Ok, should not produce stderr.\n     v[N];\n     v[M];\n+\n+    // issue 3102\n+    let num = 1;\n+    &x[num..10]; // should trigger out of bounds error\n+    &x[10..num]; // should trigger out of bounds error\n }"}, {"sha": "fafcb1bc4853f13d8655bf8b1e7b91d11980e961", "filename": "tests/ui/indexing_slicing.stderr", "status": "modified", "additions": 43, "deletions": 31, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/4c6201dceb31dac1fc5b6d3ed90e1cca240b958d/tests%2Fui%2Findexing_slicing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6201dceb31dac1fc5b6d3ed90e1cca240b958d/tests%2Fui%2Findexing_slicing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.stderr?ref=4c6201dceb31dac1fc5b6d3ed90e1cca240b958d", "patch": "@@ -48,18 +48,18 @@ error: slicing may panic.\n    = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:30:6\n+  --> $DIR/indexing_slicing.rs:30:11\n    |\n 30 |     &x[..=4];\n-   |      ^^^^^^^\n+   |           ^\n    |\n    = note: `-D clippy::out-of-bounds-indexing` implied by `-D warnings`\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:31:6\n+  --> $DIR/indexing_slicing.rs:31:11\n    |\n 31 |     &x[1..5];\n-   |      ^^^^^^^\n+   |           ^\n \n error: slicing may panic.\n   --> $DIR/indexing_slicing.rs:32:6\n@@ -70,34 +70,34 @@ error: slicing may panic.\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:32:6\n+  --> $DIR/indexing_slicing.rs:32:8\n    |\n 32 |     &x[5..][..10]; // Two lint reports, one for [5..] and another for [..10].\n-   |      ^^^^^^\n+   |        ^\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:33:6\n+  --> $DIR/indexing_slicing.rs:33:8\n    |\n 33 |     &x[5..];\n-   |      ^^^^^^\n+   |        ^\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:34:6\n+  --> $DIR/indexing_slicing.rs:34:10\n    |\n 34 |     &x[..5];\n-   |      ^^^^^^\n+   |          ^\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:35:6\n+  --> $DIR/indexing_slicing.rs:35:8\n    |\n 35 |     &x[5..].iter().map(|x| 2 * x).collect::<Vec<i32>>();\n-   |      ^^^^^^\n+   |        ^\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:36:6\n+  --> $DIR/indexing_slicing.rs:36:12\n    |\n 36 |     &x[0..=4];\n-   |      ^^^^^^^^\n+   |            ^\n \n error: slicing may panic.\n   --> $DIR/indexing_slicing.rs:37:6\n@@ -148,46 +148,46 @@ error: slicing may panic.\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:60:6\n+  --> $DIR/indexing_slicing.rs:60:12\n    |\n 60 |     &empty[1..5];\n-   |      ^^^^^^^^^^^\n+   |            ^\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:61:6\n+  --> $DIR/indexing_slicing.rs:61:16\n    |\n 61 |     &empty[0..=4];\n-   |      ^^^^^^^^^^^^\n+   |                ^\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:62:6\n+  --> $DIR/indexing_slicing.rs:62:15\n    |\n 62 |     &empty[..=4];\n-   |      ^^^^^^^^^^^\n+   |               ^\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:63:6\n+  --> $DIR/indexing_slicing.rs:63:12\n    |\n 63 |     &empty[1..];\n-   |      ^^^^^^^^^^\n+   |            ^\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:64:6\n+  --> $DIR/indexing_slicing.rs:64:14\n    |\n 64 |     &empty[..4];\n-   |      ^^^^^^^^^^\n+   |              ^\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:65:6\n+  --> $DIR/indexing_slicing.rs:65:16\n    |\n 65 |     &empty[0..=0];\n-   |      ^^^^^^^^^^^^\n+   |                ^\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:66:6\n+  --> $DIR/indexing_slicing.rs:66:15\n    |\n 66 |     &empty[..=0];\n-   |      ^^^^^^^^^^^\n+   |               ^\n \n error: indexing may panic.\n   --> $DIR/indexing_slicing.rs:74:5\n@@ -230,10 +230,10 @@ error: slicing may panic.\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:78:6\n+  --> $DIR/indexing_slicing.rs:78:8\n    |\n 78 |     &x[10..][..100]; // Two lint reports, one for [10..] and another for [..100].\n-   |      ^^^^^^^\n+   |        ^^\n \n error: slicing may panic.\n   --> $DIR/indexing_slicing.rs:79:6\n@@ -267,5 +267,17 @@ error: indexing may panic.\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n-error: aborting due to 37 previous errors\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:97:13\n+   |\n+97 |     &x[num..10]; // should trigger out of bounds error\n+   |             ^^\n+\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:98:8\n+   |\n+98 |     &x[10..num]; // should trigger out of bounds error\n+   |        ^^\n+\n+error: aborting due to 39 previous errors\n "}]}