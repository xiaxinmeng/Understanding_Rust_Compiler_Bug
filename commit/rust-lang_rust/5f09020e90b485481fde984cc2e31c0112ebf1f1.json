{"sha": "5f09020e90b485481fde984cc2e31c0112ebf1f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMDkwMjBlOTBiNDg1NDgxZmRlOTg0Y2MyZTMxYzAxMTJlYmYxZjE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2016-09-01T07:07:37Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2016-09-01T07:07:37Z"}, "message": "Added a lint_without_lint_pass lint.\n\nFour lints were missing from LintPass, making them unavailable unless the\n`clippy` lint group is explicitly enabled:\n\n* `for_loop_over_result`\n* `for_loop_over_option`\n* `match_overlapping_arm`\n* `filter_next`", "tree": {"sha": "da73b69b64f181ec84b95d6f4773037f22e3afcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da73b69b64f181ec84b95d6f4773037f22e3afcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f09020e90b485481fde984cc2e31c0112ebf1f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f09020e90b485481fde984cc2e31c0112ebf1f1", "html_url": "https://github.com/rust-lang/rust/commit/5f09020e90b485481fde984cc2e31c0112ebf1f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f09020e90b485481fde984cc2e31c0112ebf1f1/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7684a2ed6597449e0c05d156cd61437a949d9617", "url": "https://api.github.com/repos/rust-lang/rust/commits/7684a2ed6597449e0c05d156cd61437a949d9617", "html_url": "https://github.com/rust-lang/rust/commit/7684a2ed6597449e0c05d156cd61437a949d9617"}], "stats": {"total": 167, "additions": 162, "deletions": 5}, "files": [{"sha": "36d466ed9c9562871ae53d66b8c3f512832c0768", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f09020e90b485481fde984cc2e31c0112ebf1f1/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f09020e90b485481fde984cc2e31c0112ebf1f1/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5f09020e90b485481fde984cc2e31c0112ebf1f1", "patch": "@@ -172,6 +172,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n \n     reg.register_late_lint_pass(box serde::Serde);\n     reg.register_early_lint_pass(box utils::internal_lints::Clippy);\n+    reg.register_late_lint_pass(box utils::internal_lints::LintWithoutLintPass::default());\n     reg.register_late_lint_pass(box types::TypePass);\n     reg.register_late_lint_pass(box booleans::NonminimalBool);\n     reg.register_early_lint_pass(box module_inception::Pass);\n@@ -297,6 +298,11 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         unicode::UNICODE_NOT_NFC,\n     ]);\n \n+    reg.register_lint_group(\"clippy_internal\", vec![\n+        utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n+        utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n+    ]);\n+\n     reg.register_lint_group(\"clippy\", vec![\n         approx_const::APPROX_CONSTANT,\n         array_indexing::OUT_OF_BOUNDS_INDEXING,"}, {"sha": "8707d3be153b14515ba59bf84e8b888d5dc4476f", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f09020e90b485481fde984cc2e31c0112ebf1f1/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f09020e90b485481fde984cc2e31c0112ebf1f1/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=5f09020e90b485481fde984cc2e31c0112ebf1f1", "patch": "@@ -276,6 +276,8 @@ impl LintPass for Pass {\n         lint_array!(NEEDLESS_RANGE_LOOP,\n                     EXPLICIT_ITER_LOOP,\n                     ITER_NEXT_LOOP,\n+                    FOR_LOOP_OVER_RESULT,\n+                    FOR_LOOP_OVER_OPTION,\n                     WHILE_LET_LOOP,\n                     UNUSED_COLLECT,\n                     REVERSE_RANGE_LOOP,"}, {"sha": "55f9e7ec06d8baf6d08447ebe8159d69261db062", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f09020e90b485481fde984cc2e31c0112ebf1f1/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f09020e90b485481fde984cc2e31c0112ebf1f1/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=5f09020e90b485481fde984cc2e31c0112ebf1f1", "patch": "@@ -125,7 +125,7 @@ pub struct MatchPass;\n \n impl LintPass for MatchPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(SINGLE_MATCH, MATCH_REF_PATS, MATCH_BOOL, SINGLE_MATCH_ELSE)\n+        lint_array!(SINGLE_MATCH, MATCH_REF_PATS, MATCH_BOOL, SINGLE_MATCH_ELSE, MATCH_OVERLAPPING_ARM)\n     }\n }\n "}, {"sha": "ecb19495c20d0a75c825e9b5f91a9e7ea32e352f", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f09020e90b485481fde984cc2e31c0112ebf1f1/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f09020e90b485481fde984cc2e31c0112ebf1f1/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=5f09020e90b485481fde984cc2e31c0112ebf1f1", "patch": "@@ -461,6 +461,7 @@ impl LintPass for Pass {\n                     SINGLE_CHAR_PATTERN,\n                     SEARCH_IS_SOME,\n                     TEMPORARY_CSTRING_AS_PTR,\n+                    FILTER_NEXT,\n                     FILTER_MAP,\n                     ITER_NTH)\n     }"}, {"sha": "964774562e2a204148df31214cb3a233e516480f", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 122, "deletions": 3, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/5f09020e90b485481fde984cc2e31c0112ebf1f1/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f09020e90b485481fde984cc2e31c0112ebf1f1/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=5f09020e90b485481fde984cc2e31c0112ebf1f1", "patch": "@@ -1,7 +1,12 @@\n use rustc::lint::*;\n-use utils::span_lint;\n+use rustc::hir::*;\n+use rustc::hir::intravisit::{Visitor, walk_expr};\n+use utils::{paths, match_path, span_lint};\n use syntax::parse::token::InternedString;\n-use syntax::ast::*;\n+use syntax::ast::{Name, NodeId, ItemKind, Crate as AstCrate};\n+use syntax::codemap::Span;\n+use std::collections::{HashSet, HashMap};\n+\n \n /// **What it does:** Checks for various things we like to keep tidy in clippy.\n ///\n@@ -17,6 +22,36 @@ declare_lint! {\n }\n \n \n+/// **What it does:** Ensures every lint is associated to a `LintPass`.\n+///\n+/// **Why is this bad?** The compiler only knows lints via a `LintPass`. Without\n+/// putting a lint to a `LintPass::get_lints()`'s return, the compiler will not\n+/// know the name of the lint.\n+///\n+/// **Known problems:** Only checks for lints associated using the `lint_array!`\n+/// macro.\n+///\n+/// **Example:**\n+/// ```rust\n+/// declare_lint! { pub LINT_1, ... }\n+/// declare_lint! { pub LINT_2, ... }\n+/// declare_lint! { pub FORGOTTEN_LINT, ... }\n+/// // ...\n+/// pub struct Pass;\n+/// impl LintPass for Pass {\n+///     fn get_lints(&self) -> LintArray {\n+///         lint_array![LINT_1, LINT_2]\n+///         // missing FORGOTTEN_LINT\n+///     }\n+/// }\n+/// ```\n+declare_lint! {\n+    pub LINT_WITHOUT_LINT_PASS,\n+    Warn,\n+    \"declaring a lint without associating it in a LintPass\"\n+}\n+\n+\n #[derive(Copy, Clone)]\n pub struct Clippy;\n \n@@ -27,7 +62,7 @@ impl LintPass for Clippy {\n }\n \n impl EarlyLintPass for Clippy {\n-    fn check_crate(&mut self, cx: &EarlyContext, krate: &Crate) {\n+    fn check_crate(&mut self, cx: &EarlyContext, krate: &AstCrate) {\n         if let Some(utils) = krate.module.items.iter().find(|item| item.ident.name.as_str() == \"utils\") {\n             if let ItemKind::Mod(ref utils_mod) = utils.node {\n                 if let Some(paths) = utils_mod.items.iter().find(|item| item.ident.name.as_str() == \"paths\") {\n@@ -52,3 +87,87 @@ impl EarlyLintPass for Clippy {\n         }\n     }\n }\n+\n+\n+\n+#[derive(Clone, Debug, Default)]\n+pub struct LintWithoutLintPass {\n+    declared_lints: HashMap<Name, Span>,\n+    registered_lints: HashSet<Name>,\n+}\n+\n+\n+impl LintPass for LintWithoutLintPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(LINT_WITHOUT_LINT_PASS)\n+    }\n+}\n+\n+\n+impl LateLintPass for LintWithoutLintPass {\n+    fn check_item(&mut self, _: &LateContext, item: &Item) {\n+        if let ItemStatic(ref ty, MutImmutable, ref expr) = item.node {\n+            if is_lint_ref_type(ty) {\n+                self.declared_lints.insert(item.name, item.span);\n+            } else if is_lint_array_type(ty) && item.vis == Visibility::Inherited && item.name.as_str() == \"ARRAY\" {\n+                let mut collector = LintCollector { output: &mut self.registered_lints };\n+                collector.visit_expr(expr);\n+            }\n+        }\n+    }\n+\n+    fn check_crate_post(&mut self, cx: &LateContext, _: &Crate) {\n+        for (lint_name, &lint_span) in &self.declared_lints {\n+            // When using the `declare_lint!` macro, the original `lint_span`'s\n+            // file points to \"<rustc macros>\".\n+            // `compiletest-rs` thinks that's an error in a different file and\n+            // just ignores it. This causes the test in compile-fail/lint_pass\n+            // not able to capture the error.\n+            // Therefore, we need to climb the macro expansion tree and find the\n+            // actual span that invoked `declare_lint!`:\n+            let lint_span = cx.sess().codemap().source_callsite(lint_span);\n+\n+            if !self.registered_lints.contains(lint_name) {\n+                span_lint(cx,\n+                          LINT_WITHOUT_LINT_PASS,\n+                          lint_span,\n+                          &format!(\"the lint `{}` is not added to any `LintPass`\", lint_name));\n+            }\n+        }\n+    }\n+}\n+\n+\n+fn is_lint_ref_type(ty: &Ty) -> bool {\n+    if let TyRptr(Some(_), MutTy { ty: ref inner, mutbl: MutImmutable }) = ty.node {\n+        if let TyPath(None, ref path) = inner.node {\n+            return match_path(path, &paths::LINT);\n+        }\n+    }\n+    false\n+}\n+\n+\n+fn is_lint_array_type(ty: &Ty) -> bool {\n+    if let TyPath(None, ref path) = ty.node {\n+        match_path(path, &paths::LINT_ARRAY)\n+    } else {\n+        false\n+    }\n+}\n+\n+struct LintCollector<'a> {\n+    output: &'a mut HashSet<Name>,\n+}\n+\n+impl<'v, 'a: 'v> Visitor<'v> for LintCollector<'a> {\n+    fn visit_expr(&mut self, expr: &'v Expr) {\n+        walk_expr(self, expr);\n+    }\n+\n+    fn visit_path(&mut self, path: &'v Path, _: NodeId) {\n+        if path.segments.len() == 1 {\n+            self.output.insert(path.segments[0].name);\n+        }\n+    }\n+}"}, {"sha": "cd9b7c83eda6d76a30f4586cee5a6aad2578d713", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f09020e90b485481fde984cc2e31c0112ebf1f1/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f09020e90b485481fde984cc2e31c0112ebf1f1/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=5f09020e90b485481fde984cc2e31c0112ebf1f1", "patch": "@@ -26,6 +26,8 @@ pub const HASHSET: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"set\", \"Ha\n pub const IO_PRINT: [&'static str; 3] = [\"std\", \"io\", \"_print\"];\n pub const ITERATOR: [&'static str; 4] = [\"core\", \"iter\", \"iterator\", \"Iterator\"];\n pub const LINKED_LIST: [&'static str; 3] = [\"collections\", \"linked_list\", \"LinkedList\"];\n+pub const LINT: [&'static str; 3] = [\"rustc\", \"lint\", \"Lint\"];\n+pub const LINT_ARRAY: [&'static str; 3] = [\"rustc\", \"lint\", \"LintArray\"];\n pub const MEM_FORGET: [&'static str; 3] = [\"core\", \"mem\", \"forget\"];\n pub const MUTEX: [&'static str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n pub const OPEN_OPTIONS: [&'static str; 3] = [\"std\", \"fs\", \"OpenOptions\"];"}, {"sha": "980ae5cb7a11f0242411cc617da31b90ba47dcb2", "filename": "tests/compile-fail/lint_pass.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5f09020e90b485481fde984cc2e31c0112ebf1f1/tests%2Fcompile-fail%2Flint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f09020e90b485481fde984cc2e31c0112ebf1f1/tests%2Fcompile-fail%2Flint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flint_pass.rs?ref=5f09020e90b485481fde984cc2e31c0112ebf1f1", "patch": "@@ -0,0 +1,27 @@\n+#![feature(plugin)]\n+#![feature(rustc_private)]\n+#![plugin(clippy)]\n+\n+#![deny(lint_without_lint_pass)]\n+\n+#[macro_use] extern crate rustc;\n+\n+use rustc::lint::{LintPass, LintArray};\n+\n+declare_lint! { GOOD_LINT, Warn, \"good lint\" }\n+declare_lint! { MISSING_LINT, Warn, \"missing lint\" }\n+//~^ ERROR: the lint `MISSING_LINT` is not added to any `LintPass`\n+\n+pub struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![GOOD_LINT]\n+    }\n+}\n+\n+fn main() {\n+    let _ = MISSING_LINT;\n+}\n+\n+"}, {"sha": "540040a5ed5a70bfcff3dfff8f2f92b4dcb360fd", "filename": "tests/dogfood.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f09020e90b485481fde984cc2e31c0112ebf1f1/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f09020e90b485481fde984cc2e31c0112ebf1f1/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=5f09020e90b485481fde984cc2e31c0112ebf1f1", "patch": "@@ -24,7 +24,7 @@ fn dogfood() {\n     let mut s = String::new();\n     s.push_str(\" -L target/debug/\");\n     s.push_str(\" -L target/debug/deps\");\n-    s.push_str(\" -Zextra-plugins=clippy -Ltarget_recur/debug -Dclippy_pedantic -Dclippy -Dclippy_lints_internal\");\n+    s.push_str(\" -Zextra-plugins=clippy -Ltarget_recur/debug -Dclippy_pedantic -Dclippy -Dclippy_internal\");\n     config.target_rustcflags = Some(s);\n     if let Ok(name) = var(\"TESTNAME\") {\n         config.filter = Some(name.to_owned())"}]}