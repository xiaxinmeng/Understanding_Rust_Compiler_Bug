{"sha": "fb99831cb044e5fbf171bdd950a7486a01ce0d51", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiOTk4MzFjYjA0NGU1ZmJmMTcxYmRkOTUwYTc0ODZhMDFjZTBkNTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-09T13:30:27Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-09T13:30:27Z"}, "message": "Slightly simpler API for groups", "tree": {"sha": "2eff0a61ec7cc32347bafcd62f9b5827794f416d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2eff0a61ec7cc32347bafcd62f9b5827794f416d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb99831cb044e5fbf171bdd950a7486a01ce0d51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb99831cb044e5fbf171bdd950a7486a01ce0d51", "html_url": "https://github.com/rust-lang/rust/commit/fb99831cb044e5fbf171bdd950a7486a01ce0d51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb99831cb044e5fbf171bdd950a7486a01ce0d51/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa5f80aed1464881575fe635557c3965313a7ecf", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa5f80aed1464881575fe635557c3965313a7ecf", "html_url": "https://github.com/rust-lang/rust/commit/aa5f80aed1464881575fe635557c3965313a7ecf"}], "stats": {"total": 125, "additions": 77, "deletions": 48}, "files": [{"sha": "5924a3fd5a5db5ba577055a0c357594dc25e68c0", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 63, "deletions": 29, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/fb99831cb044e5fbf171bdd950a7486a01ce0d51/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb99831cb044e5fbf171bdd950a7486a01ce0d51/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=fb99831cb044e5fbf171bdd950a7486a01ce0d51", "patch": "@@ -98,30 +98,8 @@ impl<'a> AssistCtx<'a> {\n         Some(assist)\n     }\n \n-    pub(crate) fn add_assist_group(\n-        self,\n-        id: AssistId,\n-        label: impl Into<String>,\n-        f: impl FnOnce() -> Vec<ActionBuilder>,\n-    ) -> Option<Assist> {\n-        let label = AssistLabel::new(label.into(), id);\n-        let assist = if self.should_compute_edit {\n-            let actions = f();\n-            assert!(!actions.is_empty(), \"Assist cannot have no\");\n-\n-            Assist::Resolved {\n-                assist: ResolvedAssist {\n-                    label,\n-                    action_data: Either::Right(\n-                        actions.into_iter().map(ActionBuilder::build).collect(),\n-                    ),\n-                },\n-            }\n-        } else {\n-            Assist::Unresolved { label }\n-        };\n-\n-        Some(assist)\n+    pub(crate) fn add_assist_group(self, group_name: impl Into<String>) -> AssistGroup<'a> {\n+        AssistGroup { ctx: self, group_name: group_name.into(), assists: Vec::new() }\n     }\n \n     pub(crate) fn token_at_offset(&self) -> TokenAtOffset<SyntaxToken> {\n@@ -155,6 +133,67 @@ impl<'a> AssistCtx<'a> {\n     }\n }\n \n+pub(crate) struct AssistGroup<'a> {\n+    ctx: AssistCtx<'a>,\n+    group_name: String,\n+    assists: Vec<Assist>,\n+}\n+\n+impl<'a> AssistGroup<'a> {\n+    pub(crate) fn add_assist(\n+        &mut self,\n+        id: AssistId,\n+        label: impl Into<String>,\n+        f: impl FnOnce(&mut ActionBuilder),\n+    ) {\n+        let label = AssistLabel::new(label.into(), id);\n+\n+        let assist = if self.ctx.should_compute_edit {\n+            let action = {\n+                let mut edit = ActionBuilder::default();\n+                f(&mut edit);\n+                edit.build()\n+            };\n+            Assist::Resolved { assist: ResolvedAssist { label, action_data: Either::Left(action) } }\n+        } else {\n+            Assist::Unresolved { label }\n+        };\n+\n+        self.assists.push(assist)\n+    }\n+\n+    pub(crate) fn finish(self) -> Option<Assist> {\n+        assert!(!self.assists.is_empty());\n+        let mut label = match &self.assists[0] {\n+            Assist::Unresolved { label } => label.clone(),\n+            Assist::Resolved { assist } => assist.label.clone(),\n+        };\n+        label.label = self.group_name;\n+        let assist = if self.ctx.should_compute_edit {\n+            Assist::Resolved {\n+                assist: ResolvedAssist {\n+                    label,\n+                    action_data: Either::Right(\n+                        self.assists\n+                            .into_iter()\n+                            .map(|assist| match assist {\n+                                Assist::Resolved {\n+                                    assist:\n+                                        ResolvedAssist { label: _, action_data: Either::Left(it) },\n+                                } => it,\n+                                _ => unreachable!(),\n+                            })\n+                            .collect(),\n+                    ),\n+                },\n+            }\n+        } else {\n+            Assist::Unresolved { label }\n+        };\n+        Some(assist)\n+    }\n+}\n+\n #[derive(Default)]\n pub(crate) struct ActionBuilder {\n     edit: TextEditBuilder,\n@@ -164,11 +203,6 @@ pub(crate) struct ActionBuilder {\n }\n \n impl ActionBuilder {\n-    /// Adds a custom label to the action, if it needs to be different from the assist label\n-    pub(crate) fn label(&mut self, label: impl Into<String>) {\n-        self.label = Some(label.into())\n-    }\n-\n     /// Replaces specified `range` of text with a given string.\n     pub(crate) fn replace(&mut self, range: TextRange, replace_with: impl Into<String>) {\n         self.edit.replace(range, replace_with.into())"}, {"sha": "d13332f377b7092f8c3b5d7b47d636a419faea98", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fb99831cb044e5fbf171bdd950a7486a01ce0d51/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb99831cb044e5fbf171bdd950a7486a01ce0d51/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=fb99831cb044e5fbf171bdd950a7486a01ce0d51", "patch": "@@ -1,12 +1,8 @@\n-use hir::ModPath;\n use ra_ide_db::imports_locator::ImportsLocator;\n-use ra_syntax::{\n-    ast::{self, AstNode},\n-    SyntaxNode,\n-};\n+use ra_syntax::ast::{self, AstNode};\n \n use crate::{\n-    assist_ctx::{ActionBuilder, Assist, AssistCtx},\n+    assist_ctx::{Assist, AssistCtx},\n     insert_use_statement, AssistId,\n };\n use std::collections::BTreeSet;\n@@ -67,19 +63,18 @@ pub(crate) fn auto_import(ctx: AssistCtx) -> Option<Assist> {\n         return None;\n     }\n \n-    ctx.add_assist_group(AssistId(\"auto_import\"), format!(\"Import {}\", name_to_import), || {\n-        proposed_imports\n-            .into_iter()\n-            .map(|import| import_to_action(import, &position, &path_to_import_syntax))\n-            .collect()\n-    })\n-}\n-\n-fn import_to_action(import: ModPath, position: &SyntaxNode, anchor: &SyntaxNode) -> ActionBuilder {\n-    let mut action_builder = ActionBuilder::default();\n-    action_builder.label(format!(\"Import `{}`\", &import));\n-    insert_use_statement(position, anchor, &import, action_builder.text_edit_builder());\n-    action_builder\n+    let mut group = ctx.add_assist_group(format!(\"Import {}\", name_to_import));\n+    for import in proposed_imports {\n+        group.add_assist(AssistId(\"auto_import\"), format!(\"Import `{}`\", &import), |edit| {\n+            insert_use_statement(\n+                &position,\n+                path_to_import_syntax,\n+                &import,\n+                edit.text_edit_builder(),\n+            );\n+        });\n+    }\n+    group.finish()\n }\n \n #[cfg(test)]"}]}