{"sha": "58b33ad70cdd11f9ce7b5874c6effab9627e51aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YjMzYWQ3MGNkZDExZjljZTdiNTg3NGM2ZWZmYWI5NjI3ZTUxYWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-10T03:27:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-10T03:27:36Z"}, "message": "Auto merge of #41659 - bluss:clone-split-whitespace, r=aturon\n\nimpl Clone for .split_whitespace()\n\nUse custom closure structs for the predicates so that the iterator's\nclone can simply be derived. This should also reduce virtual call\noverhead by not using function pointers.\n\nFixes #41655", "tree": {"sha": "47ef239ec314ea983a951ce63e5639195f2ff181", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47ef239ec314ea983a951ce63e5639195f2ff181"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58b33ad70cdd11f9ce7b5874c6effab9627e51aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58b33ad70cdd11f9ce7b5874c6effab9627e51aa", "html_url": "https://github.com/rust-lang/rust/commit/58b33ad70cdd11f9ce7b5874c6effab9627e51aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58b33ad70cdd11f9ce7b5874c6effab9627e51aa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db1c9eb2bd8d179e5a7547bd0f13f6a5586d6ac7", "url": "https://api.github.com/repos/rust-lang/rust/commits/db1c9eb2bd8d179e5a7547bd0f13f6a5586d6ac7", "html_url": "https://github.com/rust-lang/rust/commit/db1c9eb2bd8d179e5a7547bd0f13f6a5586d6ac7"}, {"sha": "41aeb9d4ec26c4b6fb118483d2d1375e04b2c62f", "url": "https://api.github.com/repos/rust-lang/rust/commits/41aeb9d4ec26c4b6fb118483d2d1375e04b2c62f", "html_url": "https://github.com/rust-lang/rust/commit/41aeb9d4ec26c4b6fb118483d2d1375e04b2c62f"}], "stats": {"total": 56, "additions": 44, "deletions": 12}, "files": [{"sha": "d63878a7a7c2442916ca6563937ea414e3180450", "filename": "src/libstd_unicode/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58b33ad70cdd11f9ce7b5874c6effab9627e51aa/src%2Flibstd_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b33ad70cdd11f9ce7b5874c6effab9627e51aa/src%2Flibstd_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Flib.rs?ref=58b33ad70cdd11f9ce7b5874c6effab9627e51aa", "patch": "@@ -36,9 +36,11 @@\n #![feature(core_char_ext)]\n #![feature(decode_utf8)]\n #![feature(fused)]\n+#![feature(fn_traits)]\n #![feature(lang_items)]\n #![feature(staged_api)]\n #![feature(try_from)]\n+#![feature(unboxed_closures)]\n \n mod tables;\n mod u_str;"}, {"sha": "1454168d2d5cc76419a6dd20bdb27f553a705d07", "filename": "src/libstd_unicode/u_str.rs", "status": "modified", "additions": 42, "deletions": 12, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/58b33ad70cdd11f9ce7b5874c6effab9627e51aa/src%2Flibstd_unicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b33ad70cdd11f9ce7b5874c6effab9627e51aa/src%2Flibstd_unicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fu_str.rs?ref=58b33ad70cdd11f9ce7b5874c6effab9627e51aa", "patch": "@@ -26,8 +26,9 @@ use core::str::Split;\n /// [`split_whitespace`]: ../../std/primitive.str.html#method.split_whitespace\n /// [`str`]: ../../std/primitive.str.html\n #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n+#[derive(Clone)]\n pub struct SplitWhitespace<'a> {\n-    inner: Filter<Split<'a, fn(char) -> bool>, fn(&&str) -> bool>,\n+    inner: Filter<Split<'a, IsWhitespace>, IsNotEmpty>,\n }\n \n /// Methods for Unicode string slices\n@@ -44,17 +45,7 @@ pub trait UnicodeStr {\n impl UnicodeStr for str {\n     #[inline]\n     fn split_whitespace(&self) -> SplitWhitespace {\n-        fn is_not_empty(s: &&str) -> bool {\n-            !s.is_empty()\n-        }\n-        let is_not_empty: fn(&&str) -> bool = is_not_empty; // coerce to fn pointer\n-\n-        fn is_whitespace(c: char) -> bool {\n-            c.is_whitespace()\n-        }\n-        let is_whitespace: fn(char) -> bool = is_whitespace; // coerce to fn pointer\n-\n-        SplitWhitespace { inner: self.split(is_whitespace).filter(is_not_empty) }\n+        SplitWhitespace { inner: self.split(IsWhitespace).filter(IsNotEmpty) }\n     }\n \n     #[inline]\n@@ -139,6 +130,45 @@ impl<I> Iterator for Utf16Encoder<I>\n impl<I> FusedIterator for Utf16Encoder<I>\n     where I: FusedIterator<Item = char> {}\n \n+#[derive(Clone)]\n+struct IsWhitespace;\n+\n+impl FnOnce<(char, )> for IsWhitespace {\n+    type Output = bool;\n+\n+    #[inline]\n+    extern \"rust-call\" fn call_once(mut self, arg: (char, )) -> bool {\n+        self.call_mut(arg)\n+    }\n+}\n+\n+impl FnMut<(char, )> for IsWhitespace {\n+    #[inline]\n+    extern \"rust-call\" fn call_mut(&mut self, arg: (char, )) -> bool {\n+        arg.0.is_whitespace()\n+    }\n+}\n+\n+#[derive(Clone)]\n+struct IsNotEmpty;\n+\n+impl<'a, 'b> FnOnce<(&'a &'b str, )> for IsNotEmpty {\n+    type Output = bool;\n+\n+    #[inline]\n+    extern \"rust-call\" fn call_once(mut self, arg: (&&str, )) -> bool {\n+        self.call_mut(arg)\n+    }\n+}\n+\n+impl<'a, 'b> FnMut<(&'a &'b str, )> for IsNotEmpty {\n+    #[inline]\n+    extern \"rust-call\" fn call_mut(&mut self, arg: (&&str, )) -> bool {\n+        !arg.0.is_empty()\n+    }\n+}\n+\n+\n #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n impl<'a> Iterator for SplitWhitespace<'a> {\n     type Item = &'a str;"}]}