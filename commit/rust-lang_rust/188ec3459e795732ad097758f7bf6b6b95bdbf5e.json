{"sha": "188ec3459e795732ad097758f7bf6b6b95bdbf5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4OGVjMzQ1OWU3OTU3MzJhZDA5Nzc1OGY3YmY2YjZiOTViZGJmNWU=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-08-11T14:13:40Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-08-11T14:13:40Z"}, "message": "Simplify fix structure", "tree": {"sha": "b24e4118f73f9828616fa97f16a499fc78bae656", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b24e4118f73f9828616fa97f16a499fc78bae656"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/188ec3459e795732ad097758f7bf6b6b95bdbf5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/188ec3459e795732ad097758f7bf6b6b95bdbf5e", "html_url": "https://github.com/rust-lang/rust/commit/188ec3459e795732ad097758f7bf6b6b95bdbf5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/188ec3459e795732ad097758f7bf6b6b95bdbf5e/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37aa68f050fae0079db7b6ebd81bacea4441fb7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/37aa68f050fae0079db7b6ebd81bacea4441fb7e", "html_url": "https://github.com/rust-lang/rust/commit/37aa68f050fae0079db7b6ebd81bacea4441fb7e"}], "stats": {"total": 188, "additions": 92, "deletions": 96}, "files": [{"sha": "757b76fd40f097487f41ca8f642e0533eb18da2b", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 30, "deletions": 38, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/188ec3459e795732ad097758f7bf6b6b95bdbf5e/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188ec3459e795732ad097758f7bf6b6b95bdbf5e/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=188ec3459e795732ad097758f7bf6b6b95bdbf5e", "patch": "@@ -6,10 +6,7 @@\n \n use std::cell::RefCell;\n \n-use hir::{\n-    diagnostics::{Diagnostic as HirDiagnostics, DiagnosticSinkBuilder},\n-    Semantics,\n-};\n+use hir::{diagnostics::DiagnosticSinkBuilder, Semantics};\n use itertools::Itertools;\n use ra_db::SourceDatabase;\n use ra_ide_db::RootDatabase;\n@@ -73,7 +70,7 @@ pub(crate) fn diagnostics(\n         .build(|d| {\n             res.borrow_mut().push(Diagnostic {\n                 message: d.message(),\n-                range: sema.diagnostics_presentation_range(d).range,\n+                range: sema.diagnostics_display_range(d).range,\n                 severity: Severity::Error,\n                 fix: None,\n             })\n@@ -86,12 +83,9 @@ pub(crate) fn diagnostics(\n     res.into_inner()\n }\n \n-fn diagnostic_with_fix<D: HirDiagnostics + DiagnosticWithFix>(\n-    d: &D,\n-    sema: &Semantics<RootDatabase>,\n-) -> Diagnostic {\n+fn diagnostic_with_fix<D: DiagnosticWithFix>(d: &D, sema: &Semantics<RootDatabase>) -> Diagnostic {\n     Diagnostic {\n-        range: sema.diagnostics_presentation_range(d).range,\n+        range: sema.diagnostics_display_range(d).range,\n         message: d.message(),\n         severity: Severity::Error,\n         fix: d.fix(&sema),\n@@ -120,8 +114,9 @@ fn check_unnecessary_braces_in_use_statement(\n             range: use_range,\n             message: \"Unnecessary braces in use statement\".to_string(),\n             severity: Severity::WeakWarning,\n-            fix: Some((\n-                Fix::new(\"Remove unnecessary braces\", SourceFileEdit { file_id, edit }.into()),\n+            fix: Some(Fix::new(\n+                \"Remove unnecessary braces\",\n+                SourceFileEdit { file_id, edit }.into(),\n                 use_range,\n             )),\n         });\n@@ -165,11 +160,9 @@ fn check_struct_shorthand_initialization(\n                     range: field_range,\n                     message: \"Shorthand struct initialization\".to_string(),\n                     severity: Severity::WeakWarning,\n-                    fix: Some((\n-                        Fix::new(\n-                            \"Use struct shorthand initialization\",\n-                            SourceFileEdit { file_id, edit }.into(),\n-                        ),\n+                    fix: Some(Fix::new(\n+                        \"Use struct shorthand initialization\",\n+                        SourceFileEdit { file_id, edit }.into(),\n                         field_range,\n                     )),\n                 });\n@@ -197,7 +190,7 @@ mod tests {\n \n         let (analysis, file_position) = analysis_and_position(ra_fixture_before);\n         let diagnostic = analysis.diagnostics(file_position.file_id, true).unwrap().pop().unwrap();\n-        let (mut fix, fix_range) = diagnostic.fix.unwrap();\n+        let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_change.source_file_edits.pop().unwrap().edit;\n         let target_file_contents = analysis.file_text(file_position.file_id).unwrap();\n         let actual = {\n@@ -208,9 +201,10 @@ mod tests {\n \n         assert_eq_text!(&after, &actual);\n         assert!(\n-            fix_range.start() <= file_position.offset && fix_range.end() >= file_position.offset,\n+            fix.fix_trigger_range.start() <= file_position.offset\n+                && fix.fix_trigger_range.end() >= file_position.offset,\n             \"diagnostic fix range {:?} does not touch cursor position {:?}\",\n-            fix_range,\n+            fix.fix_trigger_range,\n             file_position.offset\n         );\n     }\n@@ -222,7 +216,7 @@ mod tests {\n         let (analysis, file_pos) = analysis_and_position(ra_fixture_before);\n         let current_file_id = file_pos.file_id;\n         let diagnostic = analysis.diagnostics(current_file_id, true).unwrap().pop().unwrap();\n-        let mut fix = diagnostic.fix.unwrap().0;\n+        let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_change.source_file_edits.pop().unwrap();\n         let changed_file_id = edit.file_id;\n         let before = analysis.file_text(changed_file_id).unwrap();\n@@ -513,24 +507,22 @@ fn test_fn() {\n                         range: 0..8,\n                         severity: Error,\n                         fix: Some(\n-                            (\n-                                Fix {\n-                                    label: \"Create module\",\n-                                    source_change: SourceChange {\n-                                        source_file_edits: [],\n-                                        file_system_edits: [\n-                                            CreateFile {\n-                                                anchor: FileId(\n-                                                    1,\n-                                                ),\n-                                                dst: \"foo.rs\",\n-                                            },\n-                                        ],\n-                                        is_snippet: false,\n-                                    },\n+                            Fix {\n+                                label: \"Create module\",\n+                                source_change: SourceChange {\n+                                    source_file_edits: [],\n+                                    file_system_edits: [\n+                                        CreateFile {\n+                                            anchor: FileId(\n+                                                1,\n+                                            ),\n+                                            dst: \"foo.rs\",\n+                                        },\n+                                    ],\n+                                    is_snippet: false,\n                                 },\n-                                0..8,\n-                            ),\n+                                fix_trigger_range: 0..8,\n+                            },\n                         ),\n                     },\n                 ]"}, {"sha": "57b54a61edb4fd4ae9e841bd3f42829caf37eeec", "filename": "crates/ra_ide/src/diagnostics/diagnostics_with_fix.rs", "status": "modified", "additions": 50, "deletions": 51, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/188ec3459e795732ad097758f7bf6b6b95bdbf5e/crates%2Fra_ide%2Fsrc%2Fdiagnostics%2Fdiagnostics_with_fix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188ec3459e795732ad097758f7bf6b6b95bdbf5e/crates%2Fra_ide%2Fsrc%2Fdiagnostics%2Fdiagnostics_with_fix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics%2Fdiagnostics_with_fix.rs?ref=188ec3459e795732ad097758f7bf6b6b95bdbf5e", "patch": "@@ -1,104 +1,100 @@\n-//! Provides a way to derive fixes based on the diagnostic data.\n+//! Provides a way to attach fix actions to the\n use crate::Fix;\n use ast::{edit::IndentLevel, make};\n use hir::{\n     db::AstDatabase,\n-    diagnostics::{MissingFields, MissingOkInTailExpr, NoSuchField, UnresolvedModule},\n+    diagnostics::{Diagnostic, MissingFields, MissingOkInTailExpr, NoSuchField, UnresolvedModule},\n     HasSource, HirDisplay, Semantics, VariantDef,\n };\n use ra_db::FileId;\n use ra_ide_db::{\n     source_change::{FileSystemEdit, SourceFileEdit},\n     RootDatabase,\n };\n-use ra_syntax::{algo, ast, AstNode, TextRange};\n+use ra_syntax::{algo, ast, AstNode};\n use ra_text_edit::{TextEdit, TextEditBuilder};\n \n-/// A trait to implement fot the Diagnostic that has a fix available.\n-pub trait DiagnosticWithFix {\n-    /// Provides a fix with the fix range, if applicable in the current semantics.\n-    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<(Fix, TextRange)>;\n+/// A [Diagnostic] that potentially has a fix available.\n+///\n+/// [Diagnostic]: hir::diagnostics::Diagnostic\n+pub trait DiagnosticWithFix: Diagnostic {\n+    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Fix>;\n }\n \n impl DiagnosticWithFix for UnresolvedModule {\n-    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<(Fix, TextRange)> {\n-        let fix = Fix::new(\n+    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Fix> {\n+        let root = sema.db.parse_or_expand(self.file)?;\n+        let unresolved_module = self.decl.to_node(&root);\n+        Some(Fix::new(\n             \"Create module\",\n             FileSystemEdit::CreateFile {\n                 anchor: self.file.original_file(sema.db),\n                 dst: self.candidate.clone(),\n             }\n             .into(),\n-        );\n-\n-        let root = sema.db.parse_or_expand(self.file)?;\n-        let unresolved_module = self.decl.to_node(&root);\n-        Some((fix, unresolved_module.syntax().text_range()))\n+            unresolved_module.syntax().text_range(),\n+        ))\n     }\n }\n \n impl DiagnosticWithFix for NoSuchField {\n-    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<(Fix, TextRange)> {\n+    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Fix> {\n         let root = sema.db.parse_or_expand(self.file)?;\n-        let record_expr_field = self.field.to_node(&root);\n-        let fix =\n-            missing_struct_field_fix(&sema, self.file.original_file(sema.db), &record_expr_field)?;\n-        Some((fix, record_expr_field.syntax().text_range()))\n+        missing_record_expr_field_fix(\n+            &sema,\n+            self.file.original_file(sema.db),\n+            &self.field.to_node(&root),\n+        )\n     }\n }\n \n impl DiagnosticWithFix for MissingFields {\n-    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<(Fix, TextRange)> {\n+    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Fix> {\n         // Note that although we could add a diagnostics to\n         // fill the missing tuple field, e.g :\n         // `struct A(usize);`\n         // `let a = A { 0: () }`\n         // but it is uncommon usage and it should not be encouraged.\n         if self.missed_fields.iter().any(|it| it.as_tuple_index().is_some()) {\n-            None\n-        } else {\n-            let root = sema.db.parse_or_expand(self.file)?;\n-            let old_field_list = self.field_list_parent.to_node(&root).record_expr_field_list()?;\n-            let mut new_field_list = old_field_list.clone();\n-            for f in self.missed_fields.iter() {\n-                let field = make::record_expr_field(\n-                    make::name_ref(&f.to_string()),\n-                    Some(make::expr_unit()),\n-                );\n-                new_field_list = new_field_list.append_field(&field);\n-            }\n+            return None;\n+        }\n \n-            let edit = {\n-                let mut builder = TextEditBuilder::default();\n-                algo::diff(&old_field_list.syntax(), &new_field_list.syntax())\n-                    .into_text_edit(&mut builder);\n-                builder.finish()\n-            };\n-            Some((\n-                Fix::new(\n-                    \"Fill struct fields\",\n-                    SourceFileEdit { file_id: self.file.original_file(sema.db), edit }.into(),\n-                ),\n-                sema.original_range(&old_field_list.syntax()).range,\n-                // old_field_list.syntax().text_range(),\n-            ))\n+        let root = sema.db.parse_or_expand(self.file)?;\n+        let old_field_list = self.field_list_parent.to_node(&root).record_expr_field_list()?;\n+        let mut new_field_list = old_field_list.clone();\n+        for f in self.missed_fields.iter() {\n+            let field =\n+                make::record_expr_field(make::name_ref(&f.to_string()), Some(make::expr_unit()));\n+            new_field_list = new_field_list.append_field(&field);\n         }\n+\n+        let edit = {\n+            let mut builder = TextEditBuilder::default();\n+            algo::diff(&old_field_list.syntax(), &new_field_list.syntax())\n+                .into_text_edit(&mut builder);\n+            builder.finish()\n+        };\n+        Some(Fix::new(\n+            \"Fill struct fields\",\n+            SourceFileEdit { file_id: self.file.original_file(sema.db), edit }.into(),\n+            sema.original_range(&old_field_list.syntax()).range,\n+        ))\n     }\n }\n \n impl DiagnosticWithFix for MissingOkInTailExpr {\n-    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<(Fix, TextRange)> {\n+    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Fix> {\n         let root = sema.db.parse_or_expand(self.file)?;\n         let tail_expr = self.expr.to_node(&root);\n         let tail_expr_range = tail_expr.syntax().text_range();\n         let edit = TextEdit::replace(tail_expr_range, format!(\"Ok({})\", tail_expr.syntax()));\n         let source_change =\n             SourceFileEdit { file_id: self.file.original_file(sema.db), edit }.into();\n-        Some((Fix::new(\"Wrap with ok\", source_change), tail_expr_range))\n+        Some(Fix::new(\"Wrap with ok\", source_change, tail_expr_range))\n     }\n }\n \n-fn missing_struct_field_fix(\n+fn missing_record_expr_field_fix(\n     sema: &Semantics<RootDatabase>,\n     usage_file_id: FileId,\n     record_expr_field: &ast::RecordExprField,\n@@ -159,8 +155,11 @@ fn missing_struct_field_fix(\n         file_id: def_file_id,\n         edit: TextEdit::insert(last_field_syntax.text_range().end(), new_field),\n     };\n-    let fix = Fix::new(\"Create field\", source_change.into());\n-    return Some(fix);\n+    return Some(Fix::new(\n+        \"Create field\",\n+        source_change.into(),\n+        record_expr_field.syntax().text_range(),\n+    ));\n \n     fn record_field_list(field_def_list: ast::FieldList) -> Option<ast::RecordFieldList> {\n         match field_def_list {"}, {"sha": "89fcb6f178f79de6a40f1daaec77f5d3044e21e2", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/188ec3459e795732ad097758f7bf6b6b95bdbf5e/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188ec3459e795732ad097758f7bf6b6b95bdbf5e/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=188ec3459e795732ad097758f7bf6b6b95bdbf5e", "patch": "@@ -105,20 +105,26 @@ pub struct Diagnostic {\n     pub message: String,\n     pub range: TextRange,\n     pub severity: Severity,\n-    pub fix: Option<(Fix, TextRange)>,\n+    pub fix: Option<Fix>,\n }\n \n #[derive(Debug)]\n pub struct Fix {\n     pub label: String,\n     pub source_change: SourceChange,\n+    /// Allows to trigger the fix only when the caret is in the range given\n+    pub fix_trigger_range: TextRange,\n }\n \n impl Fix {\n-    pub fn new(label: impl Into<String>, source_change: SourceChange) -> Self {\n+    pub fn new(\n+        label: impl Into<String>,\n+        source_change: SourceChange,\n+        fix_trigger_range: TextRange,\n+    ) -> Self {\n         let label = label.into();\n         assert!(label.starts_with(char::is_uppercase) && !label.ends_with('.'));\n-        Self { label, source_change }\n+        Self { label, source_change, fix_trigger_range }\n     }\n }\n "}, {"sha": "785dd2a2678a38c31b20f7f1141f65a83b35b9bb", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/188ec3459e795732ad097758f7bf6b6b95bdbf5e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188ec3459e795732ad097758f7bf6b6b95bdbf5e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=188ec3459e795732ad097758f7bf6b6b95bdbf5e", "patch": "@@ -773,12 +773,11 @@ fn handle_fixes(\n \n     let diagnostics = snap.analysis.diagnostics(file_id, snap.config.experimental_diagnostics)?;\n \n-    let fixes_from_diagnostics = diagnostics\n+    for fix in diagnostics\n         .into_iter()\n         .filter_map(|d| d.fix)\n-        .filter(|(_fix, fix_range)| fix_range.intersect(range).is_some())\n-        .map(|(fix, _range)| fix);\n-    for fix in fixes_from_diagnostics {\n+        .filter(|fix| fix.fix_trigger_range.intersect(range).is_some())\n+    {\n         let title = fix.label;\n         let edit = to_proto::snippet_workspace_edit(&snap, fix.source_change)?;\n         let action = lsp_ext::CodeAction {"}]}