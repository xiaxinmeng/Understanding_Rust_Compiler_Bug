{"sha": "5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "node_id": "C_kwDOAAsO6NoAKDU0NjJkYTUyYmE5ZWRjNzdjMmE3ZTRmYzc3YWFmM2I5NzdkNDFhZDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-24T23:51:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-24T23:51:06Z"}, "message": "Auto merge of #99946 - tmiasko:elide-storage-makers, r=oli-obk\n\nElide superfluous storage markers\n\nFollow the existing strategy of omitting the storage markers for temporaries\nintroduced for internal usage when elaborating derefs and deref projections.\n\nThose temporaries are simple scalars which are used immediately after being\ndefined and never have their address taken. There is no benefit from storage\nmarkers from either liveness analysis or code generation perspective.", "tree": {"sha": "fa50eb25d05bce6e5d352091e1151d7321df925d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa50eb25d05bce6e5d352091e1151d7321df925d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "html_url": "https://github.com/rust-lang/rust/commit/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "addacb5878b9970ebc1665768a05cb601e7aea15", "url": "https://api.github.com/repos/rust-lang/rust/commits/addacb5878b9970ebc1665768a05cb601e7aea15", "html_url": "https://github.com/rust-lang/rust/commit/addacb5878b9970ebc1665768a05cb601e7aea15"}, {"sha": "f8ca6aad83ff815579a85b26c7e617138b488681", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ca6aad83ff815579a85b26c7e617138b488681", "html_url": "https://github.com/rust-lang/rust/commit/f8ca6aad83ff815579a85b26c7e617138b488681"}], "stats": {"total": 246, "additions": 48, "deletions": 198}, "files": [{"sha": "8aa761aae8d9017ee7fd67ef699a9612a7829a6f", "filename": "compiler/rustc_middle/src/mir/patch.rs", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs?ref=5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "patch": "@@ -68,22 +68,25 @@ impl<'tcx> MirPatch<'tcx> {\n         Location { block: bb, statement_index: offset }\n     }\n \n-    pub fn new_local_with_info(\n+    pub fn new_internal_with_info(\n         &mut self,\n         ty: Ty<'tcx>,\n         span: Span,\n         local_info: Option<Box<LocalInfo<'tcx>>>,\n     ) -> Local {\n         let index = self.next_local;\n         self.next_local += 1;\n-        let mut new_decl = LocalDecl::new(ty, span);\n+        let mut new_decl = LocalDecl::new(ty, span).internal();\n         new_decl.local_info = local_info;\n         self.new_locals.push(new_decl);\n         Local::new(index as usize)\n     }\n \n     pub fn new_temp(&mut self, ty: Ty<'tcx>, span: Span) -> Local {\n-        self.new_local_with_info(ty, span, None)\n+        let index = self.next_local;\n+        self.next_local += 1;\n+        self.new_locals.push(LocalDecl::new(ty, span));\n+        Local::new(index as usize)\n     }\n \n     pub fn new_internal(&mut self, ty: Ty<'tcx>, span: Span) -> Local {\n@@ -147,7 +150,6 @@ impl<'tcx> MirPatch<'tcx> {\n \n         let mut delta = 0;\n         let mut last_bb = START_BLOCK;\n-        let mut stmts_and_targets: Vec<(Statement<'_>, BasicBlock)> = Vec::new();\n         for (mut loc, stmt) in new_statements {\n             if loc.block != last_bb {\n                 delta = 0;\n@@ -156,27 +158,11 @@ impl<'tcx> MirPatch<'tcx> {\n             debug!(\"MirPatch: adding statement {:?} at loc {:?}+{}\", stmt, loc, delta);\n             loc.statement_index += delta;\n             let source_info = Self::source_info_for_index(&body[loc.block], loc);\n-\n-            // For mir-opt `Derefer` to work in all cases we need to\n-            // get terminator's targets and apply the statement to all of them.\n-            if loc.statement_index > body[loc.block].statements.len() {\n-                let term = body[loc.block].terminator();\n-                for i in term.successors() {\n-                    stmts_and_targets.push((Statement { source_info, kind: stmt.clone() }, i));\n-                }\n-                delta += 1;\n-                continue;\n-            }\n-\n             body[loc.block]\n                 .statements\n                 .insert(loc.statement_index, Statement { source_info, kind: stmt });\n             delta += 1;\n         }\n-\n-        for (stmt, target) in stmts_and_targets.into_iter().rev() {\n-            body[target].statements.insert(0, stmt);\n-        }\n     }\n \n     pub fn source_info_for_index(data: &BasicBlockData<'_>, loc: Location) -> SourceInfo {"}, {"sha": "8869f3f92af29218eaa081410920fae8a528d439", "filename": "compiler/rustc_mir_transform/src/deref_separator.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs?ref=5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "patch": "@@ -28,8 +28,6 @@ impl<'tcx> MutVisitor<'tcx> for DerefChecker<'tcx> {\n             let mut last_len = 0;\n             let mut last_deref_idx = 0;\n \n-            let mut prev_temp: Option<Local> = None;\n-\n             for (idx, elem) in place.projection[0..].iter().enumerate() {\n                 if *elem == ProjectionElem::Deref {\n                     last_deref_idx = idx;\n@@ -39,14 +37,12 @@ impl<'tcx> MutVisitor<'tcx> for DerefChecker<'tcx> {\n             for (idx, (p_ref, p_elem)) in place.iter_projections().enumerate() {\n                 if !p_ref.projection.is_empty() && p_elem == ProjectionElem::Deref {\n                     let ty = p_ref.ty(&self.local_decls, self.tcx).ty;\n-                    let temp = self.patcher.new_local_with_info(\n+                    let temp = self.patcher.new_internal_with_info(\n                         ty,\n                         self.local_decls[p_ref.local].source_info.span,\n                         Some(Box::new(LocalInfo::DerefTemp)),\n                     );\n \n-                    self.patcher.add_statement(loc, StatementKind::StorageLive(temp));\n-\n                     // We are adding current p_ref's projections to our\n                     // temp value, excluding projections we already covered.\n                     let deref_place = Place::from(place_local)\n@@ -66,22 +62,8 @@ impl<'tcx> MutVisitor<'tcx> for DerefChecker<'tcx> {\n                             Place::from(temp).project_deeper(&place.projection[idx..], self.tcx);\n                         *place = temp_place;\n                     }\n-\n-                    // We are destroying the previous temp since it's no longer used.\n-                    if let Some(prev_temp) = prev_temp {\n-                        self.patcher.add_statement(loc, StatementKind::StorageDead(prev_temp));\n-                    }\n-\n-                    prev_temp = Some(temp);\n                 }\n             }\n-\n-            // Since we won't be able to reach final temp, we destroy it outside the loop.\n-            if let Some(prev_temp) = prev_temp {\n-                let last_loc =\n-                    Location { block: loc.block, statement_index: loc.statement_index + 1 };\n-                self.patcher.add_statement(last_loc, StatementKind::StorageDead(prev_temp));\n-            }\n         }\n     }\n }"}, {"sha": "e04094153dfc01ba9e6482edb37a31665704acba", "filename": "compiler/rustc_mir_transform/src/elaborate_box_derefs.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs?ref=5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "patch": "@@ -69,9 +69,7 @@ impl<'tcx, 'a> MutVisitor<'tcx> for ElaborateBoxDerefVisitor<'tcx, 'a> {\n             let (unique_ty, nonnull_ty, ptr_ty) =\n                 build_ptr_tys(tcx, base_ty.boxed_ty(), self.unique_did, self.nonnull_did);\n \n-            let ptr_local = self.patch.new_temp(ptr_ty, source_info.span);\n-\n-            self.patch.add_statement(location, StatementKind::StorageLive(ptr_local));\n+            let ptr_local = self.patch.new_internal(ptr_ty, source_info.span);\n \n             self.patch.add_assign(\n                 location,\n@@ -83,11 +81,6 @@ impl<'tcx, 'a> MutVisitor<'tcx> for ElaborateBoxDerefVisitor<'tcx, 'a> {\n             );\n \n             place.local = ptr_local;\n-\n-            self.patch.add_statement(\n-                Location { block: location.block, statement_index: location.statement_index + 1 },\n-                StatementKind::StorageDead(ptr_local),\n-            );\n         }\n \n         self.super_place(place, context, location);"}, {"sha": "c478c17be76c6bbffcc5ef2b5b49627a1c49cf46", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "patch": "@@ -616,7 +616,9 @@ impl<'tcx> Inliner<'tcx> {\n                 // If there are any locals without storage markers, give them storage only for the\n                 // duration of the call.\n                 for local in callee_body.vars_and_temps_iter() {\n-                    if integrator.always_live_locals.contains(local) {\n+                    if !callee_body.local_decls[local].internal\n+                        && integrator.always_live_locals.contains(local)\n+                    {\n                         let new_local = integrator.map_local(local);\n                         caller_body[callsite.block].statements.push(Statement {\n                             source_info: callsite.source_info,\n@@ -629,7 +631,9 @@ impl<'tcx> Inliner<'tcx> {\n                     // the slice once.\n                     let mut n = 0;\n                     for local in callee_body.vars_and_temps_iter().rev() {\n-                        if integrator.always_live_locals.contains(local) {\n+                        if !callee_body.local_decls[local].internal\n+                            && integrator.always_live_locals.contains(local)\n+                        {\n                             let new_local = integrator.map_local(local);\n                             caller_body[block].statements.push(Statement {\n                                 source_info: callsite.source_info,"}, {"sha": "5ec421eb2edd98f729afbdf1db9f3fcf3e00f7c7", "filename": "src/test/mir-opt/const_prop/boxes.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff?ref=5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "patch": "@@ -35,16 +35,12 @@\n       bb1: {\n           StorageLive(_7);                 // scope 0 at $DIR/boxes.rs:+1:14: +1:22\n           _7 = ShallowInitBox(move _6, i32); // scope 0 at $DIR/boxes.rs:+1:14: +1:22\n-          StorageLive(_8);                 // scope 0 at $DIR/boxes.rs:+1:19: +1:21\n           _8 = (((_7.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at $DIR/boxes.rs:+1:19: +1:21\n           (*_8) = const 42_i32;            // scope 0 at $DIR/boxes.rs:+1:19: +1:21\n-          StorageDead(_8);                 // scope 0 at $DIR/boxes.rs:+1:14: +1:22\n           _3 = move _7;                    // scope 0 at $DIR/boxes.rs:+1:14: +1:22\n           StorageDead(_7);                 // scope 0 at $DIR/boxes.rs:+1:21: +1:22\n-          StorageLive(_9);                 // scope 0 at $DIR/boxes.rs:+1:13: +1:22\n           _9 = (((_3.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at $DIR/boxes.rs:+1:13: +1:22\n           _2 = (*_9);                      // scope 0 at $DIR/boxes.rs:+1:13: +1:22\n-          StorageDead(_9);                 // scope 0 at $DIR/boxes.rs:+1:13: +1:26\n           _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/boxes.rs:+1:13: +1:26\n           StorageDead(_2);                 // scope 0 at $DIR/boxes.rs:+1:25: +1:26\n           drop(_3) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/boxes.rs:+1:26: +1:27"}, {"sha": "297836798cbcc982f3d3e204e80cd06d4b694338", "filename": "src/test/mir-opt/derefer_complex_case.main.Derefer.diff", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff?ref=5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "patch": "@@ -68,10 +68,8 @@\n       bb4: {\n           StorageLive(_12);                // scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n -         _12 = (*((_7 as Some).0: &i32)); // scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n-+         StorageLive(_15);                // scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n +         _15 = deref_copy ((_7 as Some).0: &i32); // scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n +         _12 = (*_15);                    // scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n-+         StorageDead(_15);                // scope 2 at $DIR/derefer_complex_case.rs:+1:34: +1:37\n           StorageLive(_13);                // scope 2 at $DIR/derefer_complex_case.rs:+1:34: +1:37\n           _13 = _12;                       // scope 2 at $DIR/derefer_complex_case.rs:+1:34: +1:37\n           _6 = std::mem::drop::<i32>(move _13) -> bb7; // scope 2 at $DIR/derefer_complex_case.rs:+1:29: +1:38"}, {"sha": "60f7b9d5607b0ae646c83e0b6a652b3711b75f80", "filename": "src/test/mir-opt/derefer_terminator_test.main.Derefer.diff", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.diff?ref=5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "patch": "@@ -55,25 +55,18 @@\n           _5 = &_6;                        // scope 2 at $DIR/derefer_terminator_test.rs:+3:17: +3:21\n           _4 = &_5;                        // scope 2 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n -         switchInt((*(*(*(*_4))))) -> [false: bb3, otherwise: bb4]; // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n-+         StorageLive(_10);                // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n +         _10 = deref_copy (*_4);          // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n-+         StorageLive(_11);                // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n +         _11 = deref_copy (*_10);         // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n-+         StorageDead(_10);                // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n-+         StorageLive(_12);                // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n +         _12 = deref_copy (*_11);         // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n-+         StorageDead(_11);                // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n +         switchInt((*_12)) -> [false: bb3, otherwise: bb4]; // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n       }\n   \n       bb3: {\n-+         StorageDead(_12);                // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n           _3 = const ();                   // scope 2 at $DIR/derefer_terminator_test.rs:+5:18: +5:20\n           goto -> bb5;                     // scope 2 at $DIR/derefer_terminator_test.rs:+5:18: +5:20\n       }\n   \n       bb4: {\n-+         StorageDead(_12);                // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n           StorageLive(_8);                 // scope 2 at $DIR/derefer_terminator_test.rs:+4:22: +4:23\n           _8 = const 5_i32;                // scope 2 at $DIR/derefer_terminator_test.rs:+4:26: +4:27\n           _3 = const ();                   // scope 2 at $DIR/derefer_terminator_test.rs:+4:17: +4:29"}, {"sha": "87306d818ff912b8b066b25976d1c3cba62394a6", "filename": "src/test/mir-opt/derefer_test.main.Derefer.diff", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff?ref=5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "patch": "@@ -33,16 +33,12 @@\n           StorageDead(_3);                 // scope 1 at $DIR/derefer_test.rs:+2:28: +2:29\n           StorageLive(_4);                 // scope 2 at $DIR/derefer_test.rs:+3:9: +3:10\n -         _4 = &mut ((*(_2.1: &mut (i32, i32))).0: i32); // scope 2 at $DIR/derefer_test.rs:+3:13: +3:26\n-+         StorageLive(_6);                 // scope 2 at $DIR/derefer_test.rs:+3:13: +3:26\n +         _6 = deref_copy (_2.1: &mut (i32, i32)); // scope 2 at $DIR/derefer_test.rs:+3:13: +3:26\n +         _4 = &mut ((*_6).0: i32);        // scope 2 at $DIR/derefer_test.rs:+3:13: +3:26\n-+         StorageDead(_6);                 // scope 3 at $DIR/derefer_test.rs:+4:9: +4:10\n           StorageLive(_5);                 // scope 3 at $DIR/derefer_test.rs:+4:9: +4:10\n -         _5 = &mut ((*(_2.1: &mut (i32, i32))).1: i32); // scope 3 at $DIR/derefer_test.rs:+4:13: +4:26\n-+         StorageLive(_7);                 // scope 3 at $DIR/derefer_test.rs:+4:13: +4:26\n +         _7 = deref_copy (_2.1: &mut (i32, i32)); // scope 3 at $DIR/derefer_test.rs:+4:13: +4:26\n +         _5 = &mut ((*_7).1: i32);        // scope 3 at $DIR/derefer_test.rs:+4:13: +4:26\n-+         StorageDead(_7);                 // scope 0 at $DIR/derefer_test.rs:+0:11: +5:2\n           _0 = const ();                   // scope 0 at $DIR/derefer_test.rs:+0:11: +5:2\n           StorageDead(_5);                 // scope 3 at $DIR/derefer_test.rs:+5:1: +5:2\n           StorageDead(_4);                 // scope 2 at $DIR/derefer_test.rs:+5:1: +5:2"}, {"sha": "3e40db11865238aae0cf7dbf8ddeedd2f0ab38db", "filename": "src/test/mir-opt/derefer_test_multiple.main.Derefer.diff", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.main.Derefer.diff?ref=5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "patch": "@@ -57,28 +57,16 @@\n           StorageDead(_7);                 // scope 3 at $DIR/derefer_test_multiple.rs:+4:28: +4:29\n           StorageLive(_8);                 // scope 4 at $DIR/derefer_test_multiple.rs:+5:9: +5:10\n -         _8 = &mut ((*((*((*(_6.1: &mut (i32, &mut (i32, &mut (i32, i32))))).1: &mut (i32, &mut (i32, i32)))).1: &mut (i32, i32))).1: i32); // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n-+         StorageLive(_10);                // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n +         _10 = deref_copy (_6.1: &mut (i32, &mut (i32, &mut (i32, i32)))); // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n-+         StorageLive(_11);                // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n +         _11 = deref_copy ((*_10).1: &mut (i32, &mut (i32, i32))); // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n-+         StorageDead(_10);                // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n-+         StorageLive(_12);                // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n +         _12 = deref_copy ((*_11).1: &mut (i32, i32)); // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n-+         StorageDead(_11);                // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n +         _8 = &mut ((*_12).1: i32);       // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n-+         StorageDead(_12);                // scope 5 at $DIR/derefer_test_multiple.rs:+6:9: +6:10\n           StorageLive(_9);                 // scope 5 at $DIR/derefer_test_multiple.rs:+6:9: +6:10\n -         _9 = &mut ((*((*((*(_6.1: &mut (i32, &mut (i32, &mut (i32, i32))))).1: &mut (i32, &mut (i32, i32)))).1: &mut (i32, i32))).1: i32); // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n-+         StorageLive(_13);                // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n +         _13 = deref_copy (_6.1: &mut (i32, &mut (i32, &mut (i32, i32)))); // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n-+         StorageLive(_14);                // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n +         _14 = deref_copy ((*_13).1: &mut (i32, &mut (i32, i32))); // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n-+         StorageDead(_13);                // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n-+         StorageLive(_15);                // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n +         _15 = deref_copy ((*_14).1: &mut (i32, i32)); // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n-+         StorageDead(_14);                // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n +         _9 = &mut ((*_15).1: i32);       // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n-+         StorageDead(_15);                // scope 0 at $DIR/derefer_test_multiple.rs:+0:12: +7:2\n           _0 = const ();                   // scope 0 at $DIR/derefer_test_multiple.rs:+0:12: +7:2\n           StorageDead(_9);                 // scope 5 at $DIR/derefer_test_multiple.rs:+7:1: +7:2\n           StorageDead(_8);                 // scope 4 at $DIR/derefer_test_multiple.rs:+7:1: +7:2"}, {"sha": "8b37fb79f411b853ab29b4726cf6b380d2187b00", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "status": "modified", "additions": 13, "deletions": 35, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff?ref=5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "patch": "@@ -92,18 +92,14 @@\n           StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:23: +5:24\n -         StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:23: +5:24\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:23: +5:24\n-          StorageLive(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _34 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _11 = discriminant((*_34));      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          StorageDead(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n-          switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n+          switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb11]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb1: {\n-          StorageLive(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _35 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _7 = discriminant((*_35));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n           switchInt(move _7) -> [0_isize: bb6, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n@@ -122,44 +118,33 @@\n       }\n   \n       bb3: {\n-          StorageLive(_36);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _36 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _8 = discriminant((*_36));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          StorageDead(_36);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n           switchInt(move _8) -> [1_isize: bb7, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb4: {\n-          StorageLive(_37);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _37 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _9 = discriminant((*_37));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          StorageDead(_37);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n           switchInt(move _9) -> [2_isize: bb8, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb5: {\n-          StorageLive(_38);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _38 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _10 = discriminant((*_38));      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          StorageDead(_38);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n           switchInt(move _10) -> [3_isize: bb9, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb6: {\n -         StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n-          StorageLive(_39);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n           _39 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n -         _12 = (((*_39) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n-+         _15 = (((*_39) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n-          StorageDead(_39);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n -         StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n++         _15 = (((*_39) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n-          StorageLive(_40);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n           _40 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n -         _13 = (((*_40) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n-+         _16 = (((*_40) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n-          StorageDead(_40);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:49\n -         StorageLive(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:49\n -         StorageLive(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:41\n -         _15 = _12;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:41\n@@ -174,6 +159,7 @@\n -         StorageDead(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n -         StorageDead(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n -         StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n++         _16 = (((*_40) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n +         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:49\n +         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:41\n +         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:41\n@@ -194,18 +180,13 @@\n       bb7: {\n -         StorageLive(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n-          StorageLive(_41);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n           _41 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n -         _17 = (((*_41) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n-+         _20 = (((*_41) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n-          StorageDead(_41);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n -         StorageLive(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n++         _20 = (((*_41) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n-          StorageLive(_42);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n           _42 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n -         _18 = (((*_42) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n-+         _21 = (((*_42) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n-          StorageDead(_42);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:49\n -         StorageLive(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:49\n -         StorageLive(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:41\n -         _20 = _17;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:41\n@@ -220,6 +201,7 @@\n -         StorageDead(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n -         StorageDead(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n -         StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n++         _21 = (((*_42) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n +         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:49\n +         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:41\n +         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:41\n@@ -240,18 +222,13 @@\n       bb8: {\n -         StorageLive(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n-          StorageLive(_43);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n           _43 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n -         _22 = (((*_43) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n-+         _25 = (((*_43) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n-          StorageDead(_43);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n -         StorageLive(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n++         _25 = (((*_43) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n-          StorageLive(_44);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n           _44 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n -         _23 = (((*_44) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n-+         _26 = (((*_44) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n-          StorageDead(_44);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:55\n -         StorageLive(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:55\n -         StorageLive(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:47\n -         _25 = _22;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:47\n@@ -266,6 +243,7 @@\n -         StorageDead(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n -         StorageDead(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n -         StorageDead(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n++         _26 = (((*_44) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n +         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:55\n +         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:47\n +         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:47\n@@ -286,18 +264,13 @@\n       bb9: {\n -         StorageLive(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n-          StorageLive(_45);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n           _45 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n -         _27 = (((*_45) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n-+         _30 = (((*_45) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n-          StorageDead(_45);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n -         StorageLive(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n++         _30 = (((*_45) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n-          StorageLive(_46);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n           _46 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n -         _28 = (((*_46) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n-+         _31 = (((*_46) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n-          StorageDead(_46);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:55\n -         StorageLive(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:55\n -         StorageLive(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:47\n -         _30 = _27;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:47\n@@ -312,6 +285,7 @@\n -         StorageDead(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n -         StorageDead(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n -         StorageDead(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n++         _31 = (((*_46) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n +         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:55\n +         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:47\n +         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:47\n@@ -340,5 +314,9 @@\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:1: +12:2\n           return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:2: +12:2\n       }\n+  \n+      bb11: {\n+          unreachable;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:2: +12:2\n+      }\n   }\n   "}, {"sha": "50a58d4792a8d19ed25fafc1a2da11e30eac2592", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff?ref=5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "patch": "@@ -78,18 +78,14 @@\n           (_4.1: &ViewportPercentageLength) = move _6; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:23: +5:24\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:23: +5:24\n-          StorageLive(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _34 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _11 = discriminant((*_34));      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          StorageDead(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n-          switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n+          switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb11]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb1: {\n-          StorageLive(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _35 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _7 = discriminant((*_35));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n           switchInt(move _7) -> [0_isize: bb6, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n@@ -106,40 +102,30 @@\n       }\n   \n       bb3: {\n-          StorageLive(_36);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _36 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _8 = discriminant((*_36));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          StorageDead(_36);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n           switchInt(move _8) -> [1_isize: bb7, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb4: {\n-          StorageLive(_37);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _37 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _9 = discriminant((*_37));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          StorageDead(_37);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n           switchInt(move _9) -> [2_isize: bb8, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb5: {\n-          StorageLive(_38);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _38 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _10 = discriminant((*_38));      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          StorageDead(_38);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n           switchInt(move _10) -> [3_isize: bb9, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb6: {\n           StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n-          StorageLive(_39);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n           _39 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n           _12 = (((*_39) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n-          StorageDead(_39);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n           StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n-          StorageLive(_40);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n           _40 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n           _13 = (((*_40) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n-          StorageDead(_40);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:49\n           StorageLive(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:49\n           StorageLive(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:41\n           _15 = _12;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:41\n@@ -159,15 +145,11 @@\n   \n       bb7: {\n           StorageLive(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n-          StorageLive(_41);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n           _41 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n           _17 = (((*_41) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n-          StorageDead(_41);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n           StorageLive(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n-          StorageLive(_42);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n           _42 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n           _18 = (((*_42) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n-          StorageDead(_42);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:49\n           StorageLive(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:49\n           StorageLive(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:41\n           _20 = _17;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:41\n@@ -187,15 +169,11 @@\n   \n       bb8: {\n           StorageLive(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n-          StorageLive(_43);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n           _43 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n           _22 = (((*_43) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n-          StorageDead(_43);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n           StorageLive(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n-          StorageLive(_44);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n           _44 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n           _23 = (((*_44) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n-          StorageDead(_44);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:55\n           StorageLive(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:55\n           StorageLive(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:47\n           _25 = _22;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:47\n@@ -215,15 +193,11 @@\n   \n       bb9: {\n           StorageLive(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n-          StorageLive(_45);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n           _45 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n           _27 = (((*_45) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n-          StorageDead(_45);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n           StorageLive(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n-          StorageLive(_46);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n           _46 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n           _28 = (((*_46) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n-          StorageDead(_46);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:55\n           StorageLive(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:55\n           StorageLive(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:47\n           _30 = _27;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:47\n@@ -249,5 +223,9 @@\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:1: +12:2\n           return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:2: +12:2\n       }\n+  \n+      bb11: {\n+          unreachable;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:2: +12:2\n+      }\n   }\n   "}, {"sha": "9e089b01b0f34b36ad7a2ffe94ccae709452352a", "filename": "src/test/mir-opt/early_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff?ref=5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "patch": "@@ -16,10 +16,8 @@\n       }\n   \n       bb1: {\n-          StorageLive(_4);                 // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n           _4 = deref_copy (((*_1) as Some).0: &E); // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n           _2 = discriminant((*_4));        // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n-          StorageDead(_4);                 // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n           switchInt(move _2) -> [1_isize: bb2, otherwise: bb3]; // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n       }\n   "}, {"sha": "4b075a8163bf16f93947ae7d67cba7a8528fb4ad", "filename": "src/test/mir-opt/inline/inline_closure_captures.foo.Inline.after.mir", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir?ref=5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "patch": "@@ -45,15 +45,11 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n         StorageLive(_9);                 // scope 1 at $DIR/inline-closure-captures.rs:+2:5: +2:9\n         _9 = move (_7.0: i32);           // scope 1 at $DIR/inline-closure-captures.rs:+2:5: +2:9\n         StorageLive(_10);                // scope 2 at $DIR/inline-closure-captures.rs:+1:19: +1:20\n-        StorageLive(_12);                // scope 2 at $DIR/inline-closure-captures.rs:+1:19: +1:20\n         _12 = deref_copy ((*_6).0: &i32); // scope 2 at $DIR/inline-closure-captures.rs:+1:19: +1:20\n         _10 = (*_12);                    // scope 2 at $DIR/inline-closure-captures.rs:+1:19: +1:20\n-        StorageDead(_12);                // scope 2 at $DIR/inline-closure-captures.rs:+1:22: +1:23\n         StorageLive(_11);                // scope 2 at $DIR/inline-closure-captures.rs:+1:22: +1:23\n-        StorageLive(_13);                // scope 2 at $DIR/inline-closure-captures.rs:+1:22: +1:23\n         _13 = deref_copy ((*_6).1: &T);  // scope 2 at $DIR/inline-closure-captures.rs:+1:22: +1:23\n         _11 = (*_13);                    // scope 2 at $DIR/inline-closure-captures.rs:+1:22: +1:23\n-        StorageDead(_13);                // scope 2 at $DIR/inline-closure-captures.rs:+1:18: +1:24\n         Deinit(_0);                      // scope 2 at $DIR/inline-closure-captures.rs:+1:18: +1:24\n         (_0.0: i32) = move _10;          // scope 2 at $DIR/inline-closure-captures.rs:+1:18: +1:24\n         (_0.1: T) = move _11;            // scope 2 at $DIR/inline-closure-captures.rs:+1:18: +1:24"}, {"sha": "669a787ae58fef777eb9bcd7f257b1b73ad9509f", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "patch": "@@ -75,17 +75,13 @@\n +         _7 = const false;                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n +         StorageLive(_10);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n +         StorageLive(_11);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n-+         StorageLive(_12);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n-+         StorageLive(_13);                // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n +         _13 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n +         _12 = discriminant((*_13));      // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         StorageDead(_13);                // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n +         switchInt(move _12) -> [0_u32: bb3, 1_u32: bb8, 3_u32: bb7, otherwise: bb9]; // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n       }\n   \n -     bb3: {\n +     bb1: {\n-+         StorageDead(_12);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n +         StorageDead(_11);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n +         StorageDead(_10);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n +         StorageDead(_7);                 // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n@@ -124,10 +120,8 @@\n +         Deinit(_1);                      // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n +         ((_1 as Yielded).0: i32) = move _8; // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n +         discriminant(_1) = 0;            // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n-+         StorageLive(_14);                // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n +         _14 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n +         discriminant((*_14)) = 3;        // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n-+         StorageDead(_14);                // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n +         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:11: 15:39\n +     }\n + \n@@ -138,10 +132,8 @@\n +         Deinit(_1);                      // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n +         ((_1 as Complete).0: bool) = move _10; // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n +         discriminant(_1) = 1;            // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n-+         StorageLive(_15);                // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n +         _15 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n +         discriminant((*_15)) = 1;        // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n-+         StorageDead(_15);                // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n +         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:8: 15:8\n +     }\n + "}, {"sha": "7017413ad38a6440b1634cc7372ee207fbde8e65", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.32bit.diff", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff?ref=5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "patch": "@@ -33,9 +33,8 @@\n       bb1: {\n           StorageLive(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n           _5 = ShallowInitBox(move _4, std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-          StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n           _7 = (((_5.0: std::ptr::Unique<std::vec::Vec<u32>>).0: std::ptr::NonNull<std::vec::Vec<u32>>).0: *const std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n--         (*_7) = Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n+-         (*_7) = Vec::<u32>::new() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n +         StorageLive(_8);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n +         _8 = &mut (*_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n +         StorageLive(_9);                 // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n@@ -55,11 +54,10 @@\n +         ((*_8).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         StorageDead(_9);                 // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         StorageDead(_8);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-          StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n           _1 = move _5;                    // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n           StorageDead(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n           _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:+0:11: +2:2\n--         drop(_1) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n+-         drop(_1) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n +         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n       }\n   \n@@ -70,16 +68,15 @@\n       }\n   \n -     bb4 (cleanup): {\n--         StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n--         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb5; // scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n--                                          // mir::Constant\n--                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n--                                          // + literal: Const { ty: unsafe fn(Unique<Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>}, val: Value(<ZST>) }\n++     bb3 (cleanup): {\n+          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:+0:1: +2:2\n -     }\n - \n -     bb5 (cleanup): {\n-+     bb3 (cleanup): {\n-          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:+0:1: +2:2\n+-         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb4; // scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n+-                                          // + literal: Const { ty: unsafe fn(Unique<Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>}, val: Value(<ZST>) }\n       }\n   }\n   "}, {"sha": "7017413ad38a6440b1634cc7372ee207fbde8e65", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "patch": "@@ -33,9 +33,8 @@\n       bb1: {\n           StorageLive(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n           _5 = ShallowInitBox(move _4, std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-          StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n           _7 = (((_5.0: std::ptr::Unique<std::vec::Vec<u32>>).0: std::ptr::NonNull<std::vec::Vec<u32>>).0: *const std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n--         (*_7) = Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n+-         (*_7) = Vec::<u32>::new() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n +         StorageLive(_8);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n +         _8 = &mut (*_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n +         StorageLive(_9);                 // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n@@ -55,11 +54,10 @@\n +         ((*_8).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         StorageDead(_9);                 // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         StorageDead(_8);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-          StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n           _1 = move _5;                    // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n           StorageDead(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n           _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:+0:11: +2:2\n--         drop(_1) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n+-         drop(_1) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n +         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n       }\n   \n@@ -70,16 +68,15 @@\n       }\n   \n -     bb4 (cleanup): {\n--         StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n--         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb5; // scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n--                                          // mir::Constant\n--                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n--                                          // + literal: Const { ty: unsafe fn(Unique<Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>}, val: Value(<ZST>) }\n++     bb3 (cleanup): {\n+          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:+0:1: +2:2\n -     }\n - \n -     bb5 (cleanup): {\n-+     bb3 (cleanup): {\n-          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:+0:1: +2:2\n+-         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb4; // scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n+-                                          // + literal: Const { ty: unsafe fn(Unique<Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>}, val: Value(<ZST>) }\n       }\n   }\n   "}, {"sha": "06d442ae88b96603e56db796ccdf3477628f32c2", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir?ref=5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "patch": "@@ -21,13 +21,9 @@ fn b(_1: &mut Box<T>) -> &mut T {\n         _4 = &mut (*_1);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n         StorageLive(_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         StorageLive(_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        StorageLive(_7);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _7 = deref_copy (*_4);           // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        StorageLive(_8);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _8 = (((_7.0: std::ptr::Unique<T>).0: std::ptr::NonNull<T>).0: *const T); // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _6 = &mut (*_8);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        StorageDead(_8);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        StorageDead(_7);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _5 = &mut (*_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _3 = &mut (*_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         StorageDead(_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL"}, {"sha": "d5f06c54a57c0c25a7379ee17f340c4356c59588", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir?ref=5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "patch": "@@ -15,13 +15,9 @@ fn d(_1: &Box<T>) -> &T {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n         StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n         _3 = &(*_1);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-        StorageLive(_4);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _4 = deref_copy (*_3);           // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        StorageLive(_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _5 = (((_4.0: std::ptr::Unique<T>).0: std::ptr::NonNull<T>).0: *const T); // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _2 = &(*_5);                     // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        StorageDead(_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        StorageDead(_4);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _0 = &(*_2);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n         StorageDead(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:14: +1:15\n         StorageDead(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+2:1: +2:2"}, {"sha": "f46c10711f6886e67e725a61ea546ff55963c225", "filename": "src/test/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "patch": "@@ -55,7 +55,6 @@ fn num_to_digit(_1: char) -> u32 {\n \n     bb2: {\n         StorageDead(_4);                 // scope 0 at $DIR/issue-59352.rs:+2:40: +2:41\n-        StorageLive(_10);                // scope 0 at $DIR/issue-59352.rs:+2:26: +2:50\n         _10 = discriminant(_3);          // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n         switchInt(move _10) -> [0_isize: bb6, 1_isize: bb8, otherwise: bb7]; // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n     }\n@@ -73,11 +72,9 @@ fn num_to_digit(_1: char) -> u32 {\n     bb5: {\n         _6 = &_7;                        // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageDead(_8);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        StorageLive(_9);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         _9 = discriminant((*_6));        // scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n         StorageLive(_12);                // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _12 = move _9;                   // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        StorageDead(_9);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageDead(_6);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageDead(_7);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageDead(_5);                 // scope 0 at $DIR/issue-59352.rs:+2:8: +2:23\n@@ -102,7 +99,6 @@ fn num_to_digit(_1: char) -> u32 {\n \n     bb8: {\n         _0 = move ((_3 as Some).0: u32); // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n-        StorageDead(_10);                // scope 0 at $DIR/issue-59352.rs:+2:26: +2:50\n         StorageDead(_3);                 // scope 0 at $DIR/issue-59352.rs:+2:49: +2:50\n         goto -> bb4;                     // scope 0 at $DIR/issue-59352.rs:+2:5: +2:63\n     }"}, {"sha": "28536dc28a722fde154d3cffb445a3e73d3fd62c", "filename": "src/test/mir-opt/separate_const_switch.identity.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff?ref=5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "patch": "@@ -55,7 +55,6 @@\n           StorageLive(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n           _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n-          StorageLive(_10);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           _10 = discriminant(_4);          // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           switchInt(move _10) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n@@ -116,7 +115,6 @@\n           discriminant(_3) = 1;            // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n -         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n -         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n@@ -138,7 +136,6 @@\n           discriminant(_3) = 0;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n -         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n -         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10"}, {"sha": "df20f0ed36b6045d90742d06a0aac4db9bd1aba9", "filename": "src/test/mir-opt/separate_const_switch.identity.PreCodegen.after.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir?ref=5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "patch": "@@ -52,7 +52,6 @@ fn identity(_1: Result<i32, i32>) -> Result<i32, i32> {\n         StorageLive(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n         StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n         _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n-        StorageLive(_8);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n         _8 = discriminant(_4);           // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n         switchInt(move _8) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n     }\n@@ -72,7 +71,6 @@ fn identity(_1: Result<i32, i32>) -> Result<i32, i32> {\n         discriminant(_3) = 1;            // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n         StorageDead(_12);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n         StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_8);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n         StorageLive(_5);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n         _5 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n@@ -111,7 +109,6 @@ fn identity(_1: Result<i32, i32>) -> Result<i32, i32> {\n         discriminant(_3) = 0;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n         StorageDead(_10);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n         StorageDead(_9);                 // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_8);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n         StorageLive(_7);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n         _7 = ((_3 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10"}, {"sha": "b8c554d3ea6b02818cb2b26c179b21531e089f07", "filename": "src/test/mir-opt/separate_const_switch.identity.SeparateConstSwitch.diff", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff?ref=5462da52ba9edc77c2a7e4fc77aaf3b977d41ad1", "patch": "@@ -55,14 +55,12 @@\n           StorageLive(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n           _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n-          StorageLive(_10);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           _10 = discriminant(_4);          // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n -         switchInt(move _10) -> [0_isize: bb7, 1_isize: bb5, otherwise: bb6]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n +         switchInt(move _10) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   \n       bb1: {\n--         StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n -         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n -         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n -         switchInt(move _5) -> [0_isize: bb2, 1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n@@ -128,7 +126,6 @@\n           StorageDead(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n -         goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n +         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n +         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n +         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n@@ -151,7 +148,6 @@\n           StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n -         goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n +         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n +         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n +         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10"}]}