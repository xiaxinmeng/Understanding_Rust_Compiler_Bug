{"sha": "ec0f1d70c955643a77e89d67eb2469ff5d7d6eba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMGYxZDcwYzk1NTY0M2E3N2U4OWQ2N2ViMjQ2OWZmNWQ3ZDZlYmE=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-12-13T16:47:46Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-12-13T16:47:46Z"}, "message": "Refactor test_lang_string_parse to make it clearer", "tree": {"sha": "658b3a5a2dc823b9c85b101f21d3ce7d4d6d16e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/658b3a5a2dc823b9c85b101f21d3ce7d4d6d16e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec0f1d70c955643a77e89d67eb2469ff5d7d6eba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec0f1d70c955643a77e89d67eb2469ff5d7d6eba", "html_url": "https://github.com/rust-lang/rust/commit/ec0f1d70c955643a77e89d67eb2469ff5d7d6eba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec0f1d70c955643a77e89d67eb2469ff5d7d6eba/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "057937bddac3f43a46dfc07ee2d9fa59de7b7ca9", "url": "https://api.github.com/repos/rust-lang/rust/commits/057937bddac3f43a46dfc07ee2d9fa59de7b7ca9", "html_url": "https://github.com/rust-lang/rust/commit/057937bddac3f43a46dfc07ee2d9fa59de7b7ca9"}], "stats": {"total": 143, "additions": 69, "deletions": 74}, "files": [{"sha": "75ff3c5af2fd2ba83927e9d1ada6e82d04b622d8", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 69, "deletions": 74, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/ec0f1d70c955643a77e89d67eb2469ff5d7d6eba/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec0f1d70c955643a77e89d67eb2469ff5d7d6eba/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=ec0f1d70c955643a77e89d67eb2469ff5d7d6eba", "patch": "@@ -51,82 +51,77 @@ fn test_unique_id() {\n \n #[test]\n fn test_lang_string_parse() {\n-    fn t(\n-        s: &str,\n-        should_panic: bool,\n-        no_run: bool,\n-        ignore: Ignore,\n-        rust: bool,\n-        test_harness: bool,\n-        compile_fail: bool,\n-        allow_fail: bool,\n-        error_codes: Vec<String>,\n-        edition: Option<Edition>,\n-    ) {\n-        assert_eq!(\n-            LangString::parse(s, ErrorCodes::Yes, true, None),\n-            LangString {\n-                should_panic,\n-                no_run,\n-                ignore,\n-                rust,\n-                test_harness,\n-                compile_fail,\n-                error_codes,\n-                original: s.to_owned(),\n-                allow_fail,\n-                edition,\n-            }\n-        )\n+    fn t(lg: LangString) {\n+        let s = &lg.original;\n+        assert_eq!(LangString::parse(s, ErrorCodes::Yes, true, None), lg)\n     }\n-    let ignore_foo = Ignore::Some(vec![\"foo\".to_string()]);\n \n-    fn v() -> Vec<String> {\n-        Vec::new()\n-    }\n-\n-    // marker                | should_panic | no_run | ignore | rust | test_harness\n-    //                       | compile_fail | allow_fail | error_codes | edition\n-    t(\"\", false, false, Ignore::None, true, false, false, false, v(), None);\n-    t(\"rust\", false, false, Ignore::None, true, false, false, false, v(), None);\n-    t(\"sh\", false, false, Ignore::None, false, false, false, false, v(), None);\n-    t(\"ignore\", false, false, Ignore::All, true, false, false, false, v(), None);\n-    t(\"ignore-foo\", false, false, ignore_foo, true, false, false, false, v(), None);\n-    t(\"should_panic\", true, false, Ignore::None, true, false, false, false, v(), None);\n-    t(\"no_run\", false, true, Ignore::None, true, false, false, false, v(), None);\n-    t(\"test_harness\", false, false, Ignore::None, true, true, false, false, v(), None);\n-    t(\"compile_fail\", false, true, Ignore::None, true, false, true, false, v(), None);\n-    t(\"allow_fail\", false, false, Ignore::None, true, false, false, true, v(), None);\n-    t(\"{.no_run .example}\", false, true, Ignore::None, true, false, false, false, v(), None);\n-    t(\"{.sh .should_panic}\", true, false, Ignore::None, false, false, false, false, v(), None);\n-    t(\"{.example .rust}\", false, false, Ignore::None, true, false, false, false, v(), None);\n-    t(\"{.test_harness .rust}\", false, false, Ignore::None, true, true, false, false, v(), None);\n-    t(\"text, no_run\", false, true, Ignore::None, false, false, false, false, v(), None);\n-    t(\"text,no_run\", false, true, Ignore::None, false, false, false, false, v(), None);\n-    t(\n-        \"edition2015\",\n-        false,\n-        false,\n-        Ignore::None,\n-        true,\n-        false,\n-        false,\n-        false,\n-        v(),\n-        Some(Edition::Edition2015),\n-    );\n-    t(\n-        \"edition2018\",\n-        false,\n-        false,\n-        Ignore::None,\n-        true,\n-        false,\n-        false,\n-        false,\n-        v(),\n-        Some(Edition::Edition2018),\n-    );\n+    t(LangString::all_false());\n+    t(LangString { original: \"rust\".into(), ..LangString::all_false() });\n+    t(LangString { original: \"sh\".into(), rust: false, ..LangString::all_false() });\n+    t(LangString { original: \"ignore\".into(), ignore: Ignore::All, ..LangString::all_false() });\n+    t(LangString {\n+        original: \"ignore-foo\".into(),\n+        ignore: Ignore::Some(vec![\"foo\".to_string()]),\n+        ..LangString::all_false()\n+    });\n+    t(LangString {\n+        original: \"should_panic\".into(),\n+        should_panic: true,\n+        ..LangString::all_false()\n+    });\n+    t(LangString { original: \"no_run\".into(), no_run: true, ..LangString::all_false() });\n+    t(LangString {\n+        original: \"test_harness\".into(),\n+        test_harness: true,\n+        ..LangString::all_false()\n+    });\n+    t(LangString {\n+        original: \"compile_fail\".into(),\n+        no_run: true,\n+        compile_fail: true,\n+        ..LangString::all_false()\n+    });\n+    t(LangString { original: \"allow_fail\".into(), allow_fail: true, ..LangString::all_false() });\n+    t(LangString {\n+        original: \"{.no_run .example}\".into(),\n+        no_run: true,\n+        ..LangString::all_false()\n+    });\n+    t(LangString {\n+        original: \"{.sh .should_panic}\".into(),\n+        should_panic: true,\n+        rust: false,\n+        ..LangString::all_false()\n+    });\n+    t(LangString { original: \"{.example .rust}\".into(), ..LangString::all_false() });\n+    t(LangString {\n+        original: \"{.test_harness .rust}\".into(),\n+        test_harness: true,\n+        ..LangString::all_false()\n+    });\n+    t(LangString {\n+        original: \"text, no_run\".into(),\n+        no_run: true,\n+        rust: false,\n+        ..LangString::all_false()\n+    });\n+    t(LangString {\n+        original: \"text,no_run\".into(),\n+        no_run: true,\n+        rust: false,\n+        ..LangString::all_false()\n+    });\n+    t(LangString {\n+        original: \"edition2015\".into(),\n+        edition: Some(Edition::Edition2015),\n+        ..LangString::all_false()\n+    });\n+    t(LangString {\n+        original: \"edition2018\".into(),\n+        edition: Some(Edition::Edition2018),\n+        ..LangString::all_false()\n+    });\n }\n \n #[test]"}]}