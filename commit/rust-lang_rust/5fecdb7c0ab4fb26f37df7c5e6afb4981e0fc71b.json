{"sha": "5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "node_id": "C_kwDOAAsO6NoAKDVmZWNkYjdjMGFiNGZiMjZmMzdkZjdjNWU2YWZiNDk4MWUwZmM3MWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-04T02:59:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-04T02:59:45Z"}, "message": "Auto merge of #101396 - matthiaskrgr:rollup-9n0257m, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #100302 (Suggest associated method on deref types when path syntax method fails)\n - #100647 ( Make trait bound not satisfied specify kind)\n - #101349 (rustdoc: remove `.impl-items { flex-basis }` CSS, not in flex container)\n - #101369 (Fix `global_asm` macro pretty printing)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b25dc752c766fdd89b5f95c7c559053d157fa849", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b25dc752c766fdd89b5f95c7c559053d157fa849"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "html_url": "https://github.com/rust-lang/rust/commit/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84f0c3f79a85329dd79a54694ff8a7f427c842e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/84f0c3f79a85329dd79a54694ff8a7f427c842e9", "html_url": "https://github.com/rust-lang/rust/commit/84f0c3f79a85329dd79a54694ff8a7f427c842e9"}, {"sha": "a3dda514389a688ac04de3bd4535fe1362983706", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3dda514389a688ac04de3bd4535fe1362983706", "html_url": "https://github.com/rust-lang/rust/commit/a3dda514389a688ac04de3bd4535fe1362983706"}], "stats": {"total": 250, "additions": 205, "deletions": 45}, "files": [{"sha": "54bac29a6cee0fd7fe05a7445367f920e910c42d", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -218,6 +218,8 @@ impl<'a> State<'a> {\n             ast::ItemKind::GlobalAsm(ref asm) => {\n                 self.head(visibility_qualified(&item.vis, \"global_asm!\"));\n                 self.print_inline_asm(asm);\n+                self.word(\";\");\n+                self.end();\n                 self.end();\n             }\n             ast::ItemKind::TyAlias(box ast::TyAlias {"}, {"sha": "8151d2b365ddd680d720b23f459fe499c20d223a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -450,12 +450,27 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         {\n                             \"consider using `()`, or a `Result`\".to_owned()\n                         } else {\n-                            format!(\n-                                \"{}the trait `{}` is not implemented for `{}`\",\n-                                pre_message,\n-                                trait_predicate.print_modifiers_and_trait_path(),\n-                                trait_ref.skip_binder().self_ty(),\n-                            )\n+                            let ty_desc = match trait_ref.skip_binder().self_ty().kind() {\n+                                ty::FnDef(_, _) => Some(\"fn item\"),\n+                                ty::Closure(_, _) => Some(\"closure\"),\n+                                _ => None,\n+                            };\n+\n+                            match ty_desc {\n+                                Some(desc) => format!(\n+                                    \"{}the trait `{}` is not implemented for {} `{}`\",\n+                                    pre_message,\n+                                    trait_predicate.print_modifiers_and_trait_path(),\n+                                    desc,\n+                                    trait_ref.skip_binder().self_ty(),\n+                                ),\n+                                None => format!(\n+                                    \"{}the trait `{}` is not implemented for `{}`\",\n+                                    pre_message,\n+                                    trait_predicate.print_modifiers_and_trait_path(),\n+                                    trait_ref.skip_binder().self_ty(),\n+                                ),\n+                            }\n                         };\n \n                         if self.suggest_add_reference_to_arg(\n@@ -1805,13 +1820,21 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 return false;\n             }\n             if candidates.len() == 1 {\n+                let ty_desc = match candidates[0].self_ty().kind() {\n+                    ty::FnPtr(_) => Some(\"fn pointer\"),\n+                    _ => None,\n+                };\n+                let the_desc = match ty_desc {\n+                    Some(desc) => format!(\" implemented for {} `\", desc),\n+                    None => \" implemented for `\".to_string(),\n+                };\n                 err.highlighted_help(vec![\n                     (\n                         format!(\"the trait `{}` \", candidates[0].print_only_trait_path()),\n                         Style::NoStyle,\n                     ),\n                     (\"is\".to_string(), Style::Highlight),\n-                    (\" implemented for `\".to_string(), Style::NoStyle),\n+                    (the_desc, Style::NoStyle),\n                     (candidates[0].self_ty().to_string(), Style::Highlight),\n                     (\"`\".to_string(), Style::NoStyle),\n                 ]);"}, {"sha": "998405bcbe1cc702629dcefc8bc89b0742a49d84", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 60, "deletions": 2, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -16,8 +16,8 @@ use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKi\n use rustc_middle::traits::util::supertraits;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::print::with_crate_prefix;\n-use rustc_middle::ty::ToPolyTraitRef;\n use rustc_middle::ty::{self, DefIdTree, ToPredicate, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{IsSuggestable, ToPolyTraitRef};\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Symbol;\n use rustc_span::{lev_distance, source_map, ExpnKind, FileName, MacroKind, Span};\n@@ -30,7 +30,7 @@ use rustc_trait_selection::traits::{\n use std::cmp::Ordering;\n use std::iter;\n \n-use super::probe::{Mode, ProbeScope};\n+use super::probe::{IsSuggestion, Mode, ProbeScope};\n use super::{CandidateSource, MethodError, NoMatchData};\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -1069,6 +1069,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n \n+                self.check_for_deref_method(&mut err, source, rcvr_ty, item_name);\n+\n                 return Some(err);\n             }\n \n@@ -1651,6 +1653,62 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn check_for_deref_method(\n+        &self,\n+        err: &mut Diagnostic,\n+        self_source: SelfSource<'tcx>,\n+        rcvr_ty: Ty<'tcx>,\n+        item_name: Ident,\n+    ) {\n+        let SelfSource::QPath(ty) = self_source else { return; };\n+        for (deref_ty, _) in self.autoderef(rustc_span::DUMMY_SP, rcvr_ty).skip(1) {\n+            if let Ok(pick) = self.probe_for_name(\n+                ty.span,\n+                Mode::Path,\n+                item_name,\n+                IsSuggestion(true),\n+                deref_ty,\n+                ty.hir_id,\n+                ProbeScope::TraitsInScope,\n+            ) {\n+                if deref_ty.is_suggestable(self.tcx, true)\n+                    // If this method receives `&self`, then the provided\n+                    // argument _should_ coerce, so it's valid to suggest\n+                    // just changing the path.\n+                    && pick.item.fn_has_self_parameter\n+                    && let Some(self_ty) =\n+                        self.tcx.fn_sig(pick.item.def_id).inputs().skip_binder().get(0)\n+                    && self_ty.is_ref()\n+                {\n+                    let suggested_path = match deref_ty.kind() {\n+                        ty::Bool\n+                        | ty::Char\n+                        | ty::Int(_)\n+                        | ty::Uint(_)\n+                        | ty::Float(_)\n+                        | ty::Adt(_, _)\n+                        | ty::Str\n+                        | ty::Projection(_)\n+                        | ty::Param(_) => format!(\"{deref_ty}\"),\n+                        _ => format!(\"<{deref_ty}>\"),\n+                    };\n+                    err.span_suggestion_verbose(\n+                        ty.span,\n+                        format!(\"the function `{item_name}` is implemented on `{deref_ty}`\"),\n+                        suggested_path,\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                } else {\n+                    err.span_note(\n+                        ty.span,\n+                        format!(\"the function `{item_name}` is implemented on `{deref_ty}`\"),\n+                    );\n+                }\n+                return;\n+            }\n+        }\n+    }\n+\n     /// Print out the type for use in value namespace.\n     fn ty_to_value_string(&self, ty: Ty<'tcx>) -> String {\n         match ty.kind() {"}, {"sha": "fddff771f1cf016d3bf6d710e7c9d0429c2babe3", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -778,10 +778,6 @@ pre, .rustdoc.source .example-wrap {\n \tmargin-bottom: .6em;\n }\n \n-.impl-items {\n-\tflex-basis: 100%;\n-}\n-\n #main-content > .item-info {\n \tmargin-top: 0;\n \tmargin-left: 0;"}, {"sha": "6128f49b89a34b2c987206d169f35efa835b4c19", "filename": "src/test/ui/asm/unpretty-expanded.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fasm%2Funpretty-expanded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fasm%2Funpretty-expanded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Funpretty-expanded.rs?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -0,0 +1,3 @@\n+// check-pass\n+// compile-flags: -Zunpretty=expanded\n+core::arch::global_asm!(\"x: .byte 42\");"}, {"sha": "15b60d1559c6564f519ab9e7a72273634ff47e8d", "filename": "src/test/ui/asm/unpretty-expanded.stdout", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fasm%2Funpretty-expanded.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fasm%2Funpretty-expanded.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Funpretty-expanded.stdout?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -0,0 +1,9 @@\n+#![feature(prelude_import)]\n+#![no_std]\n+#[prelude_import]\n+use ::std::prelude::rust_2015::*;\n+#[macro_use]\n+extern crate std;\n+// check-pass\n+// compile-flags: -Zunpretty=expanded\n+global_asm! (\"x: .byte 42\");"}, {"sha": "0e323443ae8b3f0870b7e4be6e7cfaa75be7f9ef", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -30,7 +30,7 @@ error[E0277]: `[closure@$DIR/issue-62009-1.rs:12:6: 12:9]` is not a future\n LL |     (|_| 2333).await;\n    |               ^^^^^^ `[closure@$DIR/issue-62009-1.rs:12:6: 12:9]` is not a future\n    |\n-   = help: the trait `Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:6: 12:9]`\n+   = help: the trait `Future` is not implemented for closure `[closure@$DIR/issue-62009-1.rs:12:6: 12:9]`\n    = note: [closure@$DIR/issue-62009-1.rs:12:6: 12:9] must be a future or must implement `IntoFuture` to be awaited\n    = note: required for `[closure@$DIR/issue-62009-1.rs:12:6: 12:9]` to implement `IntoFuture`\n help: remove the `.await`"}, {"sha": "097a14f26f868eb35538ca95c72e3c356a505988", "filename": "src/test/ui/binop/issue-77910-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -18,7 +18,7 @@ LL | fn foo(s: &i32) -> &i32 {\n LL |     assert_eq!(foo, y);\n    |     ^^^^^^^^^^^^^^^^^^ `for<'r> fn(&'r i32) -> &'r i32 {foo}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = help: the trait `Debug` is not implemented for `for<'r> fn(&'r i32) -> &'r i32 {foo}`\n+   = help: the trait `Debug` is not implemented for fn item `for<'r> fn(&'r i32) -> &'r i32 {foo}`\n    = help: use parentheses to call the function: `foo(s)`\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "6ce63e829b314f5faa831247a4021492c5b04ef6", "filename": "src/test/ui/closures/coerce-unsafe-to-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -6,7 +6,7 @@ LL |     let x: Option<&[u8]> = Some(\"foo\").map(std::mem::transmute);\n    |                                        |\n    |                                        required by a bound introduced by this call\n    |\n-   = help: the trait `FnOnce<(&str,)>` is not implemented for `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}`\n+   = help: the trait `FnOnce<(&str,)>` is not implemented for fn item `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}`\n    = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `Option::<T>::map`\n   --> $SRC_DIR/core/src/option.rs:LL:COL"}, {"sha": "ff2934a2ba88301bc512e415641606bcb205f5ea", "filename": "src/test/ui/extern/extern-wrong-value-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -6,7 +6,7 @@ LL |     is_fn(f);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `Fn<()>` is not implemented for `extern \"C\" fn() {f}`\n+   = help: the trait `Fn<()>` is not implemented for fn item `extern \"C\" fn() {f}`\n    = note: wrap the `extern \"C\" fn() {f}` in a closure with no arguments: `|| { /* code */ }`\n note: required by a bound in `is_fn`\n   --> $DIR/extern-wrong-value-type.rs:4:28"}, {"sha": "904e83624b3f2ff532b444e5d2747a9428a42f54", "filename": "src/test/ui/intrinsics/const-eval-select-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -6,7 +6,7 @@ LL |     const_eval_select((), || {}, || {});\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `~const FnOnce<()>` is not implemented for `[closure@$DIR/const-eval-select-bad.rs:7:27: 7:29]`\n+   = help: the trait `~const FnOnce<()>` is not implemented for closure `[closure@$DIR/const-eval-select-bad.rs:7:27: 7:29]`\n note: the trait `FnOnce<()>` is implemented for `[closure@$DIR/const-eval-select-bad.rs:7:27: 7:29]`, but that implementation is not `const`\n   --> $DIR/const-eval-select-bad.rs:7:27\n    |"}, {"sha": "08fe0b35eb7d86db51ba4c8c269019d789a77c8b", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -89,7 +89,7 @@ error[E0277]: `fn(usize) -> Foo {Foo::Bar}` doesn't implement `Debug`\n LL |     assert_eq!(Foo::Bar, i);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ `fn(usize) -> Foo {Foo::Bar}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = help: the trait `Debug` is not implemented for `fn(usize) -> Foo {Foo::Bar}`\n+   = help: the trait `Debug` is not implemented for fn item `fn(usize) -> Foo {Foo::Bar}`\n    = help: the following other types implement trait `Debug`:\n              extern \"C\" fn() -> Ret\n              extern \"C\" fn(A, B) -> Ret\n@@ -108,7 +108,7 @@ error[E0277]: `fn(usize) -> Foo {Foo::Bar}` doesn't implement `Debug`\n LL |     assert_eq!(Foo::Bar, i);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ `fn(usize) -> Foo {Foo::Bar}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = help: the trait `Debug` is not implemented for `fn(usize) -> Foo {Foo::Bar}`\n+   = help: the trait `Debug` is not implemented for fn item `fn(usize) -> Foo {Foo::Bar}`\n    = help: the following other types implement trait `Debug`:\n              extern \"C\" fn() -> Ret\n              extern \"C\" fn(A, B) -> Ret"}, {"sha": "7f29709ce50958bf9d72f716b73e8c3c6d8e4fa7", "filename": "src/test/ui/issues/issue-70724-add_type_neq_err_label-unwrap.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -28,7 +28,7 @@ LL | fn a() -> i32 {\n LL |     assert_eq!(a, 0);\n    |     ^^^^^^^^^^^^^^^^ `fn() -> i32 {a}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = help: the trait `Debug` is not implemented for `fn() -> i32 {a}`\n+   = help: the trait `Debug` is not implemented for fn item `fn() -> i32 {a}`\n    = help: use parentheses to call the function: `a()`\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "cf73fd8d31fbbca83353df292b81db2da6449cd7", "filename": "src/test/ui/issues/issue-99875.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fissues%2Fissue-99875.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fissues%2Fissue-99875.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-99875.rs?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -0,0 +1,16 @@\n+struct Argument;\n+struct Return;\n+\n+fn function(_: Argument) -> Return { todo!() }\n+\n+trait Trait {}\n+impl Trait for fn(Argument) -> Return {}\n+\n+fn takes(_: impl Trait) {}\n+\n+fn main() {\n+    takes(function);\n+    //~^ ERROR the trait bound\n+    takes(|_: Argument| -> Return { todo!() });\n+    //~^ ERROR the trait bound\n+}"}, {"sha": "3ff8f12f1b8ce8688378ef9ab7699d54a24edc24", "filename": "src/test/ui/issues/issue-99875.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fissues%2Fissue-99875.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fissues%2Fissue-99875.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-99875.stderr?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -0,0 +1,33 @@\n+error[E0277]: the trait bound `fn(Argument) -> Return {function}: Trait` is not satisfied\n+  --> $DIR/issue-99875.rs:12:11\n+   |\n+LL |     takes(function);\n+   |     ----- ^^^^^^^^ the trait `Trait` is not implemented for fn item `fn(Argument) -> Return {function}`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Trait` is implemented for fn pointer `fn(Argument) -> Return`\n+note: required by a bound in `takes`\n+  --> $DIR/issue-99875.rs:9:18\n+   |\n+LL | fn takes(_: impl Trait) {}\n+   |                  ^^^^^ required by this bound in `takes`\n+\n+error[E0277]: the trait bound `[closure@$DIR/issue-99875.rs:14:11: 14:34]: Trait` is not satisfied\n+  --> $DIR/issue-99875.rs:14:11\n+   |\n+LL |     takes(|_: Argument| -> Return { todo!() });\n+   |     ----- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for closure `[closure@$DIR/issue-99875.rs:14:11: 14:34]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Trait` is implemented for fn pointer `fn(Argument) -> Return`\n+note: required by a bound in `takes`\n+  --> $DIR/issue-99875.rs:9:18\n+   |\n+LL | fn takes(_: impl Trait) {}\n+   |                  ^^^^^ required by this bound in `takes`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c07914df7273a0dc06e3e36d57e8fae34f43309d", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -218,7 +218,7 @@ error[E0277]: the trait bound `fn() -> c::TS {c::TS}: Impossible` is not satisfi\n   --> $DIR/namespace-mix.rs:56:11\n    |\n LL |     check(m3::TS);\n-   |     ----- ^^^^^^ the trait `Impossible` is not implemented for `fn() -> c::TS {c::TS}`\n+   |     ----- ^^^^^^ the trait `Impossible` is not implemented for fn item `fn() -> c::TS {c::TS}`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -274,7 +274,7 @@ error[E0277]: the trait bound `fn() -> namespace_mix::c::TS {namespace_mix::c::T\n   --> $DIR/namespace-mix.rs:62:11\n    |\n LL |     check(xm3::TS);\n-   |     ----- ^^^^^^^ the trait `Impossible` is not implemented for `fn() -> namespace_mix::c::TS {namespace_mix::c::TS}`\n+   |     ----- ^^^^^^^ the trait `Impossible` is not implemented for fn item `fn() -> namespace_mix::c::TS {namespace_mix::c::TS}`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -526,7 +526,7 @@ error[E0277]: the trait bound `fn() -> c::E {c::E::TV}: Impossible` is not satis\n   --> $DIR/namespace-mix.rs:122:11\n    |\n LL |     check(m9::TV);\n-   |     ----- ^^^^^^ the trait `Impossible` is not implemented for `fn() -> c::E {c::E::TV}`\n+   |     ----- ^^^^^^ the trait `Impossible` is not implemented for fn item `fn() -> c::E {c::E::TV}`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -582,7 +582,7 @@ error[E0277]: the trait bound `fn() -> namespace_mix::c::E {namespace_mix::xm7::\n   --> $DIR/namespace-mix.rs:128:11\n    |\n LL |     check(xm9::TV);\n-   |     ----- ^^^^^^^ the trait `Impossible` is not implemented for `fn() -> namespace_mix::c::E {namespace_mix::xm7::TV}`\n+   |     ----- ^^^^^^^ the trait `Impossible` is not implemented for fn item `fn() -> namespace_mix::c::E {namespace_mix::xm7::TV}`\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "59b3e44c74a52270e2e87b2d9f205072e2fd4b59", "filename": "src/test/ui/proc-macro/signature.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -10,7 +10,7 @@ LL | | }\n    | |_call the function in a closure: `|| unsafe { /* code */ }`\n    |   required by a bound introduced by this call\n    |\n-   = help: the trait `Fn<(proc_macro::TokenStream,)>` is not implemented for `unsafe extern \"C\" fn(i32, u32) -> u32 {foo}`\n+   = help: the trait `Fn<(proc_macro::TokenStream,)>` is not implemented for fn item `unsafe extern \"C\" fn(i32, u32) -> u32 {foo}`\n    = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `ProcMacro::custom_derive`\n   --> $SRC_DIR/proc_macro/src/bridge/client.rs:LL:COL"}, {"sha": "fc7bf22775dd715188c1f287f14c96737a96b791", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/fn-traits.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -6,7 +6,7 @@ LL |     call(foo);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `Fn<()>` is not implemented for `fn() {foo}`\n+   = help: the trait `Fn<()>` is not implemented for fn item `fn() {foo}`\n    = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n note: required by a bound in `call`\n@@ -23,7 +23,7 @@ LL |     call_mut(foo);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `FnMut<()>` is not implemented for `fn() {foo}`\n+   = help: the trait `FnMut<()>` is not implemented for fn item `fn() {foo}`\n    = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n note: required by a bound in `call_mut`\n@@ -40,7 +40,7 @@ LL |     call_once(foo);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `FnOnce<()>` is not implemented for `fn() {foo}`\n+   = help: the trait `FnOnce<()>` is not implemented for fn item `fn() {foo}`\n    = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n note: required by a bound in `call_once`\n@@ -57,7 +57,7 @@ LL |     call(foo_unsafe);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `Fn<()>` is not implemented for `unsafe fn() {foo_unsafe}`\n+   = help: the trait `Fn<()>` is not implemented for fn item `unsafe fn() {foo_unsafe}`\n    = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n note: required by a bound in `call`\n@@ -74,7 +74,7 @@ LL |     call_mut(foo_unsafe);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `FnMut<()>` is not implemented for `unsafe fn() {foo_unsafe}`\n+   = help: the trait `FnMut<()>` is not implemented for fn item `unsafe fn() {foo_unsafe}`\n    = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n note: required by a bound in `call_mut`\n@@ -91,7 +91,7 @@ LL |     call_once(foo_unsafe);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `FnOnce<()>` is not implemented for `unsafe fn() {foo_unsafe}`\n+   = help: the trait `FnOnce<()>` is not implemented for fn item `unsafe fn() {foo_unsafe}`\n    = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n note: required by a bound in `call_once`"}, {"sha": "bfd506c9f6e0cc06370b9d3f3da2f35af10ea927", "filename": "src/test/ui/suggestions/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -9,7 +9,7 @@ LL |     bar(foo);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `Future` is not implemented for `fn() -> impl Future<Output = ()> {foo}`\n+   = help: the trait `Future` is not implemented for fn item `fn() -> impl Future<Output = ()> {foo}`\n    = note: fn() -> impl Future<Output = ()> {foo} must be a future or must implement `IntoFuture` to be awaited\n note: required by a bound in `bar`\n   --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:7:16\n@@ -31,7 +31,7 @@ LL |     bar(async_closure);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `Future` is not implemented for `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:33]`\n+   = help: the trait `Future` is not implemented for closure `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:33]`\n    = note: [closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:33] must be a future or must implement `IntoFuture` to be awaited\n note: required by a bound in `bar`\n   --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:7:16"}, {"sha": "0281cdb6b37cfda0f2522fff50858379196c1d99", "filename": "src/test/ui/suggestions/deref-path-method.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fsuggestions%2Fderef-path-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fsuggestions%2Fderef-path-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fderef-path-method.rs?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let vec = Vec::new();\n+    Vec::contains(&vec, &0);\n+    //~^ ERROR no function or associated item named `contains` found for struct `Vec<_, _>` in the current scope\n+    //~| HELP the function `contains` is implemented on `[_]`\n+}"}, {"sha": "1cc37d61151ca11addc35701d679ce0906243a9d", "filename": "src/test/ui/suggestions/deref-path-method.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fsuggestions%2Fderef-path-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fsuggestions%2Fderef-path-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fderef-path-method.stderr?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -0,0 +1,14 @@\n+error[E0599]: no function or associated item named `contains` found for struct `Vec<_, _>` in the current scope\n+  --> $DIR/deref-path-method.rs:3:10\n+   |\n+LL |     Vec::contains(&vec, &0);\n+   |          ^^^^^^^^ function or associated item not found in `Vec<_, _>`\n+   |\n+help: the function `contains` is implemented on `[_]`\n+   |\n+LL |     <[_]>::contains(&vec, &0);\n+   |     ~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "fe603b67575d33c7f6242b45e294bf7e22d1d936", "filename": "src/test/ui/suggestions/fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -5,7 +5,7 @@ LL | fn foo() -> impl T<O=()> { S }\n    |    --- consider calling this function\n ...\n LL |     bar(foo);\n-   |     --- ^^^ the trait `T` is not implemented for `fn() -> impl T<O = ()> {foo}`\n+   |     --- ^^^ the trait `T` is not implemented for fn item `fn() -> impl T<O = ()> {foo}`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -25,7 +25,7 @@ error[E0277]: the trait bound `[closure@$DIR/fn-ctor-passed-as-arg-where-it-shou\n LL |     let closure = || S;\n    |                   -- consider calling this closure\n LL |     bar(closure);\n-   |     --- ^^^^^^^ the trait `T` is not implemented for `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:21]`\n+   |     --- ^^^^^^^ the trait `T` is not implemented for closure `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:21]`\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "9833304c636b1b0b36c9642915d1b78ddf6c274f", "filename": "src/test/ui/unboxed-closures/unboxed-closures-unsafe-extern-fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -6,7 +6,7 @@ LL |     let x = call_it(&square, 22);\n    |             |\n    |             required by a bound introduced by this call\n    |\n-   = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for fn item `for<'r> unsafe fn(&'r isize) -> isize {square}`\n    = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:9:15\n@@ -22,7 +22,7 @@ LL |     let y = call_it_mut(&mut square, 22);\n    |             |\n    |             required by a bound introduced by this call\n    |\n-   = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for fn item `for<'r> unsafe fn(&'r isize) -> isize {square}`\n    = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_mut`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:12:19\n@@ -38,7 +38,7 @@ LL |     let z = call_it_once(square, 22);\n    |             |\n    |             required by a bound introduced by this call\n    |\n-   = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for fn item `for<'r> unsafe fn(&'r isize) -> isize {square}`\n    = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_once`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:15:20"}, {"sha": "54c92e0cd040cad8f592f9b442cf3bdb8c13e1f8", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-abi.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -6,7 +6,7 @@ LL |     let x = call_it(&square, 22);\n    |             |\n    |             required by a bound introduced by this call\n    |\n-   = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for fn item `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n note: required by a bound in `call_it`\n   --> $DIR/unboxed-closures-wrong-abi.rs:9:15\n    |\n@@ -21,7 +21,7 @@ LL |     let y = call_it_mut(&mut square, 22);\n    |             |\n    |             required by a bound introduced by this call\n    |\n-   = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for fn item `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n note: required by a bound in `call_it_mut`\n   --> $DIR/unboxed-closures-wrong-abi.rs:12:19\n    |\n@@ -36,7 +36,7 @@ LL |     let z = call_it_once(square, 22);\n    |             |\n    |             required by a bound introduced by this call\n    |\n-   = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for fn item `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n note: required by a bound in `call_it_once`\n   --> $DIR/unboxed-closures-wrong-abi.rs:15:20\n    |"}, {"sha": "2fedb5b92c2896a4afc2a364bb8e53ccc2b5678c", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-arg-type-extern-fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr?ref=5fecdb7c0ab4fb26f37df7c5e6afb4981e0fc71b", "patch": "@@ -6,7 +6,7 @@ LL |     let x = call_it(&square, 22);\n    |             |\n    |             required by a bound introduced by this call\n    |\n-   = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+   = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for fn item `unsafe fn(isize) -> isize {square}`\n    = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:10:15\n@@ -22,7 +22,7 @@ LL |     let y = call_it_mut(&mut square, 22);\n    |             |\n    |             required by a bound introduced by this call\n    |\n-   = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+   = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for fn item `unsafe fn(isize) -> isize {square}`\n    = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_mut`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:13:19\n@@ -38,7 +38,7 @@ LL |     let z = call_it_once(square, 22);\n    |             |\n    |             required by a bound introduced by this call\n    |\n-   = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+   = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for fn item `unsafe fn(isize) -> isize {square}`\n    = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_once`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:16:20"}]}