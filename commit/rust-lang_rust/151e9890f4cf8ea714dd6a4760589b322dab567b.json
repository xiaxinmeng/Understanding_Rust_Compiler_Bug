{"sha": "151e9890f4cf8ea714dd6a4760589b322dab567b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1MWU5ODkwZjRjZjhlYTcxNGRkNmE0NzYwNTg5YjMyMmRhYjU2N2I=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-04T09:16:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-04T09:16:16Z"}, "message": "also explain how to resolve MethodCall", "tree": {"sha": "89968e8d4a76750a51c6f81b908d9071ca6ca0c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89968e8d4a76750a51c6f81b908d9071ca6ca0c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/151e9890f4cf8ea714dd6a4760589b322dab567b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/151e9890f4cf8ea714dd6a4760589b322dab567b", "html_url": "https://github.com/rust-lang/rust/commit/151e9890f4cf8ea714dd6a4760589b322dab567b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/151e9890f4cf8ea714dd6a4760589b322dab567b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65153710e1cc46a33b65f90cd92732bc9c77cee5", "url": "https://api.github.com/repos/rust-lang/rust/commits/65153710e1cc46a33b65f90cd92732bc9c77cee5", "html_url": "https://github.com/rust-lang/rust/commit/65153710e1cc46a33b65f90cd92732bc9c77cee5"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "cbbf808bece066c7cb34c23959e0a306c0127a12", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/151e9890f4cf8ea714dd6a4760589b322dab567b/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151e9890f4cf8ea714dd6a4760589b322dab567b/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=151e9890f4cf8ea714dd6a4760589b322dab567b", "patch": "@@ -1616,6 +1616,11 @@ pub enum ExprKind {\n     /// and the remaining elements are the rest of the arguments.\n     /// Thus, `x.foo::<Bar, Baz>(a, b, c, d)` is represented as\n     /// `ExprKind::MethodCall(PathSegment { foo, [Bar, Baz] }, [x, a, b, c, d])`.\n+    ///\n+    /// To resolve the called method to a `DefId`, call [`type_dependent_def_id`] with\n+    /// the `hir_id` of the `MethodCall` node itself.\n+    ///\n+    /// [`qpath_res`]: ../ty/struct.TypeckTables.html#method.type_dependent_def_id\n     MethodCall(P<PathSegment>, Span, HirVec<Expr>),\n     /// A tuple (e.g., `(a, b, c, d)`).\n     Tup(HirVec<Expr>),\n@@ -1701,7 +1706,7 @@ pub enum ExprKind {\n ///\n /// To resolve the path to a `DefId`, call [`qpath_res`].\n ///\n-/// [`qpath_res`]: ty/struct.TypeckTables.html#method.qpath_res\n+/// [`qpath_res`]: ../ty/struct.TypeckTables.html#method.qpath_res\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub enum QPath {\n     /// Path to a definition, optionally \"fully-qualified\" with a `Self`"}]}