{"sha": "98cd96ce96c8be7248e3d375053938354c82878a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4Y2Q5NmNlOTZjOGJlNzI0OGUzZDM3NTA1MzkzODM1NGM4Mjg3OGE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-05T21:19:02Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-05T22:44:15Z"}, "message": "test: Add more tests for stack growth", "tree": {"sha": "5030128464a4ec1726efafc6a7685d1812b92899", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5030128464a4ec1726efafc6a7685d1812b92899"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98cd96ce96c8be7248e3d375053938354c82878a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98cd96ce96c8be7248e3d375053938354c82878a", "html_url": "https://github.com/rust-lang/rust/commit/98cd96ce96c8be7248e3d375053938354c82878a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98cd96ce96c8be7248e3d375053938354c82878a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1720bc2e81c274b463d84bec7484dbc5da87333f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1720bc2e81c274b463d84bec7484dbc5da87333f", "html_url": "https://github.com/rust-lang/rust/commit/1720bc2e81c274b463d84bec7484dbc5da87333f"}], "stats": {"total": 140, "additions": 137, "deletions": 3}, "files": [{"sha": "e6e89c62cc09656ea52c108537f2fa13b730acf6", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/98cd96ce96c8be7248e3d375053938354c82878a/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/98cd96ce96c8be7248e3d375053938354c82878a/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=98cd96ce96c8be7248e3d375053938354c82878a", "patch": "@@ -209,14 +209,22 @@ upcall_dynastack_free(void *ptr) {\n     return rust_scheduler::get_task()->dynastack.free(ptr);\n }\n \n+extern \"C\" void record_sp(void *limit);\n+\n /**\n- * Allocates |nbytes| bytes in the C stack and returns a pointer to the start\n- * of the allocated space.\n+ * Switch to the C stack and call the given function, passing a single pointer\n+ * argument.\n  */\n extern \"C\" CDECL void\n upcall_call_shim_on_c_stack(void *args, void *fn_ptr) {\n-    rust_scheduler *sched = rust_scheduler::get_task()->sched;\n+    // FIXME (1226) - The shim functions generated by rustc contain the\n+    // morestack prologue, so we need to let them know they have enough\n+    // stack.\n+    record_sp(0);\n+    rust_task *task = rust_scheduler::get_task();\n+    rust_scheduler *sched = task->sched;\n     sched->c_context.call_shim_on_c_stack(args, fn_ptr);\n+    task->record_stack_limit();\n }\n \n struct rust_new_stack2_args {"}, {"sha": "cdba6dd766ea42c47acce497c2b6221d9ed3d6d9", "filename": "src/test/run-pass/morestack4.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/98cd96ce96c8be7248e3d375053938354c82878a/src%2Ftest%2Frun-pass%2Fmorestack4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cd96ce96c8be7248e3d375053938354c82878a/src%2Ftest%2Frun-pass%2Fmorestack4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack4.rs?ref=98cd96ce96c8be7248e3d375053938354c82878a", "patch": "@@ -0,0 +1,100 @@\n+// xfail-test\n+// compile-flags:--stack-growth\n+\n+// This is testing for stack frames greater than 256 bytes,\n+// for which function prologues are generated differently\n+\n+type biggy = {\n+    a00: u64,\n+    a01: u64,\n+    a02: u64,\n+    a03: u64,\n+    a04: u64,\n+    a05: u64,\n+    a06: u64,\n+    a07: u64,\n+    a08: u64,\n+    a09: u64,\n+    a10: u64,\n+    a11: u64,\n+    a12: u64,\n+    a13: u64,\n+    a14: u64,\n+    a15: u64,\n+    a16: u64,\n+    a17: u64,\n+    a18: u64,\n+    a19: u64,\n+    a20: u64,\n+    a21: u64,\n+    a22: u64,\n+    a23: u64,\n+    a24: u64,\n+    a25: u64,\n+    a26: u64,\n+    a27: u64,\n+    a28: u64,\n+    a29: u64,\n+    a30: u64,\n+    a31: u64,\n+    a32: u64,\n+    a33: u64,\n+    a34: u64,\n+    a35: u64,\n+    a36: u64,\n+    a37: u64,\n+    a38: u64,\n+    a39: u64,\n+};\n+\n+\n+fn getbig(i: biggy) {\n+    if i.a00 != 0u64 {\n+        getbig({a00: i.a00 - 1u64 with i});\n+    }\n+}\n+\n+fn main() {\n+    getbig({\n+        a00: 100000u64,\n+        a01: 100000u64,\n+        a02: 100000u64,\n+        a03: 100000u64,\n+        a04: 100000u64,\n+        a05: 100000u64,\n+        a06: 100000u64,\n+        a07: 100000u64,\n+        a08: 100000u64,\n+        a09: 100000u64,\n+        a10: 100000u64,\n+        a11: 100000u64,\n+        a12: 100000u64,\n+        a13: 100000u64,\n+        a14: 100000u64,\n+        a15: 100000u64,\n+        a16: 100000u64,\n+        a17: 100000u64,\n+        a18: 100000u64,\n+        a19: 100000u64,\n+        a20: 100000u64,\n+        a21: 100000u64,\n+        a22: 100000u64,\n+        a23: 100000u64,\n+        a24: 100000u64,\n+        a25: 100000u64,\n+        a26: 100000u64,\n+        a27: 100000u64,\n+        a28: 100000u64,\n+        a29: 100000u64,\n+        a30: 100000u64,\n+        a31: 100000u64,\n+        a32: 100000u64,\n+        a33: 100000u64,\n+        a34: 100000u64,\n+        a35: 100000u64,\n+        a36: 100000u64,\n+        a37: 100000u64,\n+        a38: 100000u64,\n+        a39: 100000u64,\n+    });\n+}\n\\ No newline at end of file"}, {"sha": "bedf3f47ee96910fcdc69e24d14468007c53f45f", "filename": "src/test/run-pass/morestack5.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/98cd96ce96c8be7248e3d375053938354c82878a/src%2Ftest%2Frun-pass%2Fmorestack5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cd96ce96c8be7248e3d375053938354c82878a/src%2Ftest%2Frun-pass%2Fmorestack5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack5.rs?ref=98cd96ce96c8be7248e3d375053938354c82878a", "patch": "@@ -0,0 +1,26 @@\n+// xfail-test\n+// compile-flags:--stack-growth\n+\n+// This test will call __morestack with various minimum stack sizes\n+\n+use std;\n+import std::task;\n+\n+native mod rustrt {\n+    fn set_min_stack(size: uint);\n+}\n+\n+fn getbig(&&i: int) {\n+    if i != 0 {\n+        getbig(i - 1);\n+    }\n+}\n+\n+fn main() {\n+    let sz = 400u;\n+    while sz < 500u {\n+        rustrt::set_min_stack(sz);\n+        task::join(task::spawn_joinable(200, getbig));\n+        sz += 1u;\n+    }\n+}\n\\ No newline at end of file"}]}