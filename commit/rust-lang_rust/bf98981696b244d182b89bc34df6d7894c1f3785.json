{"sha": "bf98981696b244d182b89bc34df6d7894c1f3785", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmOTg5ODE2OTZiMjQ0ZDE4MmI4OWJjMzRkZjZkNzg5NGMxZjM3ODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-05T06:47:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-05T06:47:00Z"}, "message": "auto merge of #10270 : alexcrichton/rust/no-super-buffer, r=brson\n\nRight now if you're running a program with its output piped to some location and\r\nthe program decides to go awry, when you kill the program via some signal none\r\nof the program's last 4K of output will get printed to the screen. In theory the\r\nsolution to this would be to register a signal handler as part of the runtime\r\nwhich then flushes the output stream.\r\n\r\nI believe that the current behavior is far enough from what's expected that we\r\nshouldn't be providing this sort of \"super buffering\" by default when stdout\r\nisn't attached to a tty.", "tree": {"sha": "4d9cbc87dd9bbb8dab499797215bb0bc3c39e450", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d9cbc87dd9bbb8dab499797215bb0bc3c39e450"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf98981696b244d182b89bc34df6d7894c1f3785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf98981696b244d182b89bc34df6d7894c1f3785", "html_url": "https://github.com/rust-lang/rust/commit/bf98981696b244d182b89bc34df6d7894c1f3785", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf98981696b244d182b89bc34df6d7894c1f3785/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c56652640c6f376cf454c63c7dd80eabe28ed5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c56652640c6f376cf454c63c7dd80eabe28ed5e", "html_url": "https://github.com/rust-lang/rust/commit/1c56652640c6f376cf454c63c7dd80eabe28ed5e"}, {"sha": "615444d26306ddaf62388c73ae1dc17e48b3b2e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/615444d26306ddaf62388c73ae1dc17e48b3b2e3", "html_url": "https://github.com/rust-lang/rust/commit/615444d26306ddaf62388c73ae1dc17e48b3b2e3"}], "stats": {"total": 18, "additions": 5, "deletions": 13}, "files": [{"sha": "d33821a34b1eedca1c21800f576975b1dd47cb0b", "filename": "src/libstd/rt/io/stdio.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bf98981696b244d182b89bc34df6d7894c1f3785/src%2Flibstd%2Frt%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf98981696b244d182b89bc34df6d7894c1f3785/src%2Flibstd%2Frt%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fstdio.rs?ref=bf98981696b244d182b89bc34df6d7894c1f3785", "patch": "@@ -30,7 +30,7 @@ use fmt;\n use libc;\n use option::{Option, Some, None};\n use result::{Ok, Err};\n-use rt::io::buffered::{LineBufferedWriter, BufferedWriter};\n+use rt::io::buffered::LineBufferedWriter;\n use rt::rtio::{IoFactory, RtioTTY, RtioFileStream, with_local_io,\n                CloseAsynchronously};\n use super::{Reader, Writer, io_error, IoError, OtherIoError};\n@@ -135,14 +135,7 @@ fn with_task_stdout(f: &fn(&mut Writer)) {\n             Some(ref mut handle) => f(*handle),\n             None => {\n                 let handle = stdout();\n-                let mut handle = if handle.isatty() {\n-                    ~LineBufferedWriter::new(handle) as ~Writer\n-                } else {\n-                    // The default capacity is very large, 64k, but this is just\n-                    // a stdout stream, and possibly per task, so let's not make\n-                    // this too expensive.\n-                    ~BufferedWriter::with_capacity(4096, handle) as ~Writer\n-                };\n+                let mut handle = ~LineBufferedWriter::new(handle) as ~Writer;\n                 f(handle);\n                 (*task).stdout_handle = Some(handle);\n             }\n@@ -152,10 +145,9 @@ fn with_task_stdout(f: &fn(&mut Writer)) {\n \n /// Flushes the local task's stdout handle.\n ///\n-/// By default, this stream is a buffering stream, flushing may be necessary to\n-/// ensure output is on the terminal screen. The buffering used is\n-/// line-buffering when stdout is attached to a terminal, and a fixed sized\n-/// buffer if it is not attached to a terminal.\n+/// By default, this stream is a line-buffering stream, so flushing may be\n+/// necessary to ensure that all output is printed to the screen (if there are\n+/// no newlines printed).\n ///\n /// Note that logging macros do not use this stream. Using the logging macros\n /// will emit output to stderr, and while they are line buffered the log"}]}