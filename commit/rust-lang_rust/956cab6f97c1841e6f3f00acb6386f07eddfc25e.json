{"sha": "956cab6f97c1841e6f3f00acb6386f07eddfc25e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NmNhYjZmOTdjMTg0MWU2ZjNmMDBhY2I2Mzg2ZjA3ZWRkZmMyNWU=", "commit": {"author": {"name": "ville-h", "email": "ville3.14159@gmail.com", "date": "2015-01-04T09:45:31Z"}, "committer": {"name": "ville-h", "email": "ville3.14159@gmail.com", "date": "2015-01-04T09:45:31Z"}, "message": "fix code referencing RwLockReadGuard", "tree": {"sha": "c4c203647ea752c1f180d348b08726030d788c13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4c203647ea752c1f180d348b08726030d788c13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/956cab6f97c1841e6f3f00acb6386f07eddfc25e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/956cab6f97c1841e6f3f00acb6386f07eddfc25e", "html_url": "https://github.com/rust-lang/rust/commit/956cab6f97c1841e6f3f00acb6386f07eddfc25e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/956cab6f97c1841e6f3f00acb6386f07eddfc25e/comments", "author": {"login": "ville-h", "id": 8824715, "node_id": "MDQ6VXNlcjg4MjQ3MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8824715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ville-h", "html_url": "https://github.com/ville-h", "followers_url": "https://api.github.com/users/ville-h/followers", "following_url": "https://api.github.com/users/ville-h/following{/other_user}", "gists_url": "https://api.github.com/users/ville-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/ville-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ville-h/subscriptions", "organizations_url": "https://api.github.com/users/ville-h/orgs", "repos_url": "https://api.github.com/users/ville-h/repos", "events_url": "https://api.github.com/users/ville-h/events{/privacy}", "received_events_url": "https://api.github.com/users/ville-h/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ville-h", "id": 8824715, "node_id": "MDQ6VXNlcjg4MjQ3MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8824715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ville-h", "html_url": "https://github.com/ville-h", "followers_url": "https://api.github.com/users/ville-h/followers", "following_url": "https://api.github.com/users/ville-h/following{/other_user}", "gists_url": "https://api.github.com/users/ville-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/ville-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ville-h/subscriptions", "organizations_url": "https://api.github.com/users/ville-h/orgs", "repos_url": "https://api.github.com/users/ville-h/repos", "events_url": "https://api.github.com/users/ville-h/events{/privacy}", "received_events_url": "https://api.github.com/users/ville-h/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dcbdc1edac50af0f1a2796b1dfe2dd082f8190c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dcbdc1edac50af0f1a2796b1dfe2dd082f8190c", "html_url": "https://github.com/rust-lang/rust/commit/2dcbdc1edac50af0f1a2796b1dfe2dd082f8190c"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "71ff3c7d17221efdf1cea146c829145e66f60612", "filename": "src/libstd/sync/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/956cab6f97c1841e6f3f00acb6386f07eddfc25e/src%2Flibstd%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/956cab6f97c1841e6f3f00acb6386f07eddfc25e/src%2Flibstd%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmod.rs?ref=956cab6f97c1841e6f3f00acb6386f07eddfc25e", "patch": "@@ -22,7 +22,7 @@ pub use alloc::arc::{Arc, Weak};\n pub use self::mutex::{Mutex, MutexGuard, StaticMutex};\n pub use self::mutex::MUTEX_INIT;\n pub use self::rwlock::{RwLock, StaticRwLock, RW_LOCK_INIT};\n-pub use self::rwlock::{RWLockReadGuard, RWLockWriteGuard};\n+pub use self::rwlock::{RwLockReadGuard, RWLockWriteGuard};\n pub use self::condvar::{Condvar, StaticCondvar, CONDVAR_INIT};\n pub use self::once::{Once, ONCE_INIT};\n pub use self::semaphore::{Semaphore, SemaphoreGuard};"}, {"sha": "0a8bf6f0aa79e649fc9434b7b4b5829192208aec", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/956cab6f97c1841e6f3f00acb6386f07eddfc25e/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/956cab6f97c1841e6f3f00acb6386f07eddfc25e/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=956cab6f97c1841e6f3f00acb6386f07eddfc25e", "patch": "@@ -153,9 +153,9 @@ impl<T: Send + Sync> RwLock<T> {\n     /// The failure will occur immediately after the lock has been acquired.\n     #[inline]\n     #[stable]\n-    pub fn read(&self) -> LockResult<RWLockReadGuard<T>> {\n+    pub fn read(&self) -> LockResult<RwLockReadGuard<T>> {\n         unsafe { self.inner.lock.read() }\n-        RWLockReadGuard::new(&*self.inner, &self.data)\n+        RwLockReadGuard::new(&*self.inner, &self.data)\n     }\n \n     /// Attempt to acquire this lock with shared read access.\n@@ -175,9 +175,9 @@ impl<T: Send + Sync> RwLock<T> {\n     /// acquired.\n     #[inline]\n     #[stable]\n-    pub fn try_read(&self) -> TryLockResult<RWLockReadGuard<T>> {\n+    pub fn try_read(&self) -> TryLockResult<RwLockReadGuard<T>> {\n         if unsafe { self.inner.lock.try_read() } {\n-            Ok(try!(RWLockReadGuard::new(&*self.inner, &self.data)))\n+            Ok(try!(RwLockReadGuard::new(&*self.inner, &self.data)))\n         } else {\n             Err(TryLockError::WouldBlock)\n         }\n@@ -245,9 +245,9 @@ impl StaticRwLock {\n     /// See `RwLock::read`.\n     #[inline]\n     #[unstable = \"may be merged with RwLock in the future\"]\n-    pub fn read(&'static self) -> LockResult<RWLockReadGuard<'static, ()>> {\n+    pub fn read(&'static self) -> LockResult<RwLockReadGuard<'static, ()>> {\n         unsafe { self.lock.read() }\n-        RWLockReadGuard::new(self, &DUMMY.0)\n+        RwLockReadGuard::new(self, &DUMMY.0)\n     }\n \n     /// Attempt to acquire this lock with shared read access.\n@@ -256,9 +256,9 @@ impl StaticRwLock {\n     #[inline]\n     #[unstable = \"may be merged with RwLock in the future\"]\n     pub fn try_read(&'static self)\n-                    -> TryLockResult<RWLockReadGuard<'static, ()>> {\n+                    -> TryLockResult<RwLockReadGuard<'static, ()>> {\n         if unsafe { self.lock.try_read() } {\n-            Ok(try!(RWLockReadGuard::new(self, &DUMMY.0)))\n+            Ok(try!(RwLockReadGuard::new(self, &DUMMY.0)))\n         } else {\n             Err(TryLockError::WouldBlock)\n         }"}]}