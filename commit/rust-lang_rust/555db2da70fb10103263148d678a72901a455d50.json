{"sha": "555db2da70fb10103263148d678a72901a455d50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NWRiMmRhNzBmYjEwMTAzMjYzMTQ4ZDY3OGE3MjkwMWE0NTVkNTA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-18T15:57:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-18T15:57:42Z"}, "message": "Rollup merge of #82248 - nhwn:optimize-counting-digits, r=varkor\n\nOptimize counting digits in line numbers during error reporting\n\nReplaces `.to_string().len()` with simple loop and integer division, which avoids an unnecessary allocation.\n\nAlthough I couldn't figure out how to directly profile `rustc`'s error reporting, I ran a microbenchmark on my machine (2.9 GHz Dual-Core Intel Core i5) on the two strategies for `0..100_000`, and the results seem promising:\n```\ntest to_string_len ... bench:  12,124,792 ns/iter (+/- 700,652)\ntest while_loop    ... bench:      30,333 ns/iter (+/- 562)\n```\nThe x86_64 disassembly reduces integer division to a multiplication + shift, so I don't think there's any problems with using integer division.\n\nFor more (micro)optimization, it would be nice if we could avoid the initial check to see if the line number is nonzero, but I don't think `self.get_max_line_num(span, children)` _guarantees_ a nonzero line number.", "tree": {"sha": "30e5343315e620910a5318cff531e095348a5d2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30e5343315e620910a5318cff531e095348a5d2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/555db2da70fb10103263148d678a72901a455d50", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgLo52CRBK7hj4Ov3rIwAAdHIIAI/ZF10q2DvZPvO6eyc0g+m9\naZJ0e7NS2haqHn6fjyk9XHyhd9YvQic3uKyo8w56z1oSagAqI7gCHV1oOfTsPXbI\n0LArIY80eT5Fm2XrToIpPiFsCJY2SA5wGNdO8i2jtTVPBCU6oBz6fCk7LGEzwdoh\nuoMxiUbYgFYKfEDeviTW+qbNX3yFFv42F3YG1u4NxzGlyo7L/kaqZkbBfd+9UVYA\nFOtXrkxKjMEQfdtCjBPWevS6aH0/apZ9hyeoEAtlEp2OToRHm8lVafxFcj7czRla\nI2XH4T0yveA0ehkZe/UBsZ2aZRo7oLV8kMIhhNALs6P1DahmkFM0KdARQTSOPXE=\n=l6Ys\n-----END PGP SIGNATURE-----\n", "payload": "tree 30e5343315e620910a5318cff531e095348a5d2b\nparent 5ca94cd00a0d571b6aeb092a7da4798124acfde2\nparent 8a5c5681da3695e1c2e3f23bee43a7ebfdce6161\nauthor Dylan DPC <dylan.dpc@gmail.com> 1613663862 +0100\ncommitter GitHub <noreply@github.com> 1613663862 +0100\n\nRollup merge of #82248 - nhwn:optimize-counting-digits, r=varkor\n\nOptimize counting digits in line numbers during error reporting\n\nReplaces `.to_string().len()` with simple loop and integer division, which avoids an unnecessary allocation.\n\nAlthough I couldn't figure out how to directly profile `rustc`'s error reporting, I ran a microbenchmark on my machine (2.9 GHz Dual-Core Intel Core i5) on the two strategies for `0..100_000`, and the results seem promising:\n```\ntest to_string_len ... bench:  12,124,792 ns/iter (+/- 700,652)\ntest while_loop    ... bench:      30,333 ns/iter (+/- 562)\n```\nThe x86_64 disassembly reduces integer division to a multiplication + shift, so I don't think there's any problems with using integer division.\n\nFor more (micro)optimization, it would be nice if we could avoid the initial check to see if the line number is nonzero, but I don't think `self.get_max_line_num(span, children)` _guarantees_ a nonzero line number.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/555db2da70fb10103263148d678a72901a455d50", "html_url": "https://github.com/rust-lang/rust/commit/555db2da70fb10103263148d678a72901a455d50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/555db2da70fb10103263148d678a72901a455d50/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ca94cd00a0d571b6aeb092a7da4798124acfde2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ca94cd00a0d571b6aeb092a7da4798124acfde2", "html_url": "https://github.com/rust-lang/rust/commit/5ca94cd00a0d571b6aeb092a7da4798124acfde2"}, {"sha": "8a5c5681da3695e1c2e3f23bee43a7ebfdce6161", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a5c5681da3695e1c2e3f23bee43a7ebfdce6161", "html_url": "https://github.com/rust-lang/rust/commit/8a5c5681da3695e1c2e3f23bee43a7ebfdce6161"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "42c3d5e48fe86f040e041389c932e83504234c59", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/555db2da70fb10103263148d678a72901a455d50/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555db2da70fb10103263148d678a72901a455d50/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=555db2da70fb10103263148d678a72901a455d50", "patch": "@@ -1713,7 +1713,18 @@ impl EmitterWriter {\n         let max_line_num_len = if self.ui_testing {\n             ANONYMIZED_LINE_NUM.len()\n         } else {\n-            self.get_max_line_num(span, children).to_string().len()\n+            // Instead of using .to_string().len(), we iteratively count the\n+            // number of digits to avoid allocation. This strategy has sizable\n+            // performance gains over the old string strategy.\n+            let mut n = self.get_max_line_num(span, children);\n+            let mut num_digits = 0;\n+            loop {\n+                num_digits += 1;\n+                n /= 10;\n+                if n == 0 {\n+                    break num_digits;\n+                }\n+            }\n         };\n \n         match self.emit_message_default(span, message, code, level, max_line_num_len, false) {"}]}