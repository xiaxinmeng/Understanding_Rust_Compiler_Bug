{"sha": "f58a362d188a0051063fda0cb4f2cb7e56e66119", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1OGEzNjJkMTg4YTAwNTEwNjNmZGEwY2I0ZjJjYjdlNTZlNjYxMTk=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-05-03T01:25:57Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-05-06T19:20:31Z"}, "message": "Update coverage docs and command line help", "tree": {"sha": "aaecb975e8b2fc5b5ff1ac6a9340bef1512a97b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaecb975e8b2fc5b5ff1ac6a9340bef1512a97b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f58a362d188a0051063fda0cb4f2cb7e56e66119", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f58a362d188a0051063fda0cb4f2cb7e56e66119", "html_url": "https://github.com/rust-lang/rust/commit/f58a362d188a0051063fda0cb4f2cb7e56e66119", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f58a362d188a0051063fda0cb4f2cb7e56e66119/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "603a42ec5458c547b51173cfa48c23ad37b03c3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/603a42ec5458c547b51173cfa48c23ad37b03c3f", "html_url": "https://github.com/rust-lang/rust/commit/603a42ec5458c547b51173cfa48c23ad37b03c3f"}], "stats": {"total": 213, "additions": 131, "deletions": 82}, "files": [{"sha": "d19fda50bf6c039c8b09c6210ed667b9b8a03978", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f58a362d188a0051063fda0cb4f2cb7e56e66119/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f58a362d188a0051063fda0cb4f2cb7e56e66119/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=f58a362d188a0051063fda0cb4f2cb7e56e66119", "patch": "@@ -249,7 +249,7 @@ fn save_function_record(\n ///\n /// We can find the unused functions (including generic functions) by the set difference of all MIR\n /// `DefId`s (`tcx` query `mir_keys`) minus the codegenned `DefId`s (`tcx` query\n-/// `collect_and_partition_mono_items`).\n+/// `codegened_and_inlined_items`).\n ///\n /// *HOWEVER* the codegenned `DefId`s are partitioned across multiple `CodegenUnit`s (CGUs), and\n /// this function is processing a `function_coverage_map` for the functions (`Instance`/`DefId`)"}, {"sha": "b8718bb8df16acf78e751b0e9a7fd5a15d8a4280", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f58a362d188a0051063fda0cb4f2cb7e56e66119/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f58a362d188a0051063fda0cb4f2cb7e56e66119/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=f58a362d188a0051063fda0cb4f2cb7e56e66119", "patch": "@@ -1056,12 +1056,12 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"gather statistics about the input (default: no)\"),\n     instrument_coverage: Option<InstrumentCoverage> = (None, parse_instrument_coverage, [TRACKED],\n         \"instrument the generated code to support LLVM source-based code coverage \\\n-        reports (note, the compiler build config must include `profiler = true`, \\\n-        and is mutually exclusive with `-C profile-generate`/`-C profile-use`); \\\n-        implies `-Z symbol-mangling-version=v0`; disables/overrides some Rust \\\n-        optimizations. Optional values are: `=all` (default coverage), \\\n-        `=except-unused-generics`, `=except-unused-functions`, or `=off` \\\n-        (default: instrument-coverage=off)\"),\n+        reports (note, the compiler build config must include `profiler = true`); \\\n+        implies `-Z symbol-mangling-version=v0`. Optional values are:\n+        `=all` (implicit value)\n+        `=except-unused-generics`\n+        `=except-unused-functions`\n+        `=off` (default)\"),\n     instrument_mcount: bool = (false, parse_bool, [TRACKED],\n         \"insert function instrument code for mcount-based tracing (default: no)\"),\n     keep_hygiene_data: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "f7c2a26f01817016048f95d961878a64eb50effa", "filename": "src/doc/unstable-book/src/compiler-flags/source-based-code-coverage.md", "status": "modified", "additions": 94, "deletions": 75, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/f58a362d188a0051063fda0cb4f2cb7e56e66119/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md", "raw_url": "https://github.com/rust-lang/rust/raw/f58a362d188a0051063fda0cb4f2cb7e56e66119/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md?ref=f58a362d188a0051063fda0cb4f2cb7e56e66119", "patch": "@@ -1,42 +1,49 @@\n-# `source-based-code-coverage`\n+# `instrument-coverage`\n \n The tracking issue for this feature is: [#79121].\n \n-------------------------\n+[#79121]: https://github.com/rust-lang/rust/issues/79121\n+\n+---\n \n ## Introduction\n \n The Rust compiler includes two code coverage implementations:\n \n-* A GCC-compatible, gcov-based coverage implementation, enabled with [`-Zprofile`], which operates on DebugInfo.\n-* A source-based code coverage implementation, enabled with `-Zinstrument-coverage`, which uses LLVM's native coverage instrumentation to generate very precise coverage data.\n+-   A GCC-compatible, gcov-based coverage implementation, enabled with `-Z profile`, which derives coverage data based on DebugInfo.\n+-   A source-based code coverage implementation, enabled with `-Z instrument-coverage`, which uses LLVM's native, efficient coverage instrumentation to generate very precise coverage data.\n \n-This document describes how to enable and use the LLVM instrumentation-based coverage, via the `-Zinstrument-coverage` compiler flag.\n+This document describes how to enable and use the LLVM instrumentation-based coverage, via the `-Z instrument-coverage` compiler flag.\n \n ## How it works\n \n-When `-Zinstrument-coverage` is enabled, the Rust compiler enhances rust-based libraries and binaries by:\n+When `-Z instrument-coverage` is enabled, the Rust compiler enhances rust-based libraries and binaries by:\n \n-* Automatically injecting calls to an LLVM intrinsic ([`llvm.instrprof.increment`]), at functions and branches in compiled code, to increment counters when conditional sections of code are executed.\n-* Embedding additional information in the data section of each library and binary (using the [LLVM Code Coverage Mapping Format] _Version 4_, supported _only_ in LLVM 11 and up), to define the code regions (start and end positions in the source code) being counted.\n+-   Automatically injecting calls to an LLVM intrinsic ([`llvm.instrprof.increment`]), at functions and branches in compiled code, to increment counters when conditional sections of code are executed.\n+-   Embedding additional information in the data section of each library and binary (using the [LLVM Code Coverage Mapping Format] _Version 4_, supported _only_ in LLVM 11 and up), to define the code regions (start and end positions in the source code) being counted.\n \n When running a coverage-instrumented program, the counter values are written to a `profraw` file at program termination. LLVM bundles tools that read the counter results, combine those results with the coverage map (embedded in the program binary), and generate coverage reports in multiple formats.\n \n-## Enable coverage profiling in the Rust compiler\n+[`llvm.instrprof.increment`]: https://llvm.org/docs/LangRef.html#llvm-instrprof-increment-intrinsic\n+[llvm code coverage mapping format]: https://llvm.org/docs/CoverageMappingFormat.html\n \n-Rust's source-based code coverage requires the Rust \"profiler runtime\". Without it, compiling with `-Zinstrument-coverage` generates an error that the profiler runtime is missing.\n+> **Note**: `-Z instrument-coverage` also automatically enables `-Z symbol-mangling-version=v0` (tracking issue [#60705]). The `v0` symbol mangler is strongly recommended, but be aware that this demangler is also experimental. The `v0` demangler can be overridden by explicitly adding `-Z symbol-mangling-version=legacy`.\n \n-The Rust `nightly` distribution channel should include the profiler runtime, by default.\n+[#60705]: https://github.com/rust-lang/rust/issues/60705\n \n-*IMPORTANT:* If you are building the Rust compiler from the source distribution, the profiler runtime is *not* enabled in the default `config.toml.example`. Edit your `config.toml` file and ensure the `profiler` feature is set it to `true`:\n+## Enable coverage profiling in the Rust compiler\n \n-```toml\n-# Build the profiler runtime (required when compiling with options that depend\n-# on this runtime, such as `-C profile-generate` or `-Z instrument-coverage`).\n-profiler = true\n-```\n+Rust's source-based code coverage requires the Rust \"profiler runtime\". Without it, compiling with `-Z instrument-coverage` generates an error that the profiler runtime is missing.\n \n-If changed, rebuild the Rust compiler (see [rustc-dev-guide-how-to-build-and-run]).\n+The Rust `nightly` distribution channel includes the profiler runtime, by default.\n+\n+> **Important**: If you are building the Rust compiler from the source distribution, the profiler runtime is _not_ enabled in the default `config.toml.example`. Edit your `config.toml` file and ensure the `profiler` feature is set it to `true` (either under the `[build]` section, or under the settings for an individual `[target.<triple>]`):\n+>\n+> ```toml\n+> # Build the profiler runtime (required when compiling with options that depend\n+> # on this runtime, such as `-C profile-generate` or `-Z  instrument-coverage`).\n+> profiler = true\n+> ```\n \n ### Building the demangler\n \n@@ -54,29 +61,33 @@ Another option, if you are building from the Rust compiler source distribution,\n $ ./x.py build rust-demangler\n ```\n \n+[`rustfilt`]: https://crates.io/crates/rustfilt\n+\n ## Compiling with coverage enabled\n \n-Set the `-Zinstrument-coverage` compiler flag in order to enable LLVM source-based code coverage profiling.\n+Set the `-Z instrument-coverage` compiler flag in order to enable LLVM source-based code coverage profiling.\n+\n+The default option generates coverage for all functions, including unused (never called) functions and generics. The compiler flag supports an optional value to tailor this behavior. (See [`-Z instrument-coverage=<options>`](#-z-instrument-coverageoptions), below.)\n \n-With `cargo`, you can instrument your program binary *and* dependencies at the same time.\n+With `cargo`, you can instrument your program binary _and_ dependencies at the same time.\n \n For example (if your project's Cargo.toml builds a binary by default):\n \n ```shell\n $ cd your-project\n $ cargo clean\n-$ RUSTFLAGS=\"-Zinstrument-coverage\" cargo build\n+$ RUSTFLAGS=\"-Z instrument-coverage\" cargo build\n ```\n \n If `cargo` is not configured to use your `profiler`-enabled version of `rustc`, set the path explicitly via the `RUSTC` environment variable. Here is another example, using a `stage1` build of `rustc` to compile an `example` binary (from the [`json5format`] crate):\n \n ```shell\n $ RUSTC=$HOME/rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc \\\n-    RUSTFLAGS=\"-Zinstrument-coverage\" \\\n+    RUSTFLAGS=\"-Z instrument-coverage\" \\\n     cargo build --example formatjson5\n ```\n \n-Note that some compiler options, combined with `-Zinstrument-coverage`, can produce LLVM IR and/or linked binaries that are incompatible with LLVM coverage maps. For example, coverage requires references to actual functions in LLVM IR. If any covered function is optimized out, the coverage tools may not be able to process the coverage results. If you need to pass additional options, with coverage enabled, test them early, to confirm you will get the coverage results you expect.\n+> **Note**: that some compiler options, combined with `-Z instrument-coverage`, can produce LLVM IR and/or linked binaries that are incompatible with LLVM coverage maps. For example, coverage requires references to actual functions in LLVM IR. If any covered function is optimized out, the coverage tools may not be able to process the coverage results. If you need to pass additional options, with coverage enabled, test them early, to confirm you will get the coverage results you expect.\n \n ## Running the instrumented binary to generate raw coverage profiling data\n \n@@ -85,15 +96,15 @@ In the previous example, `cargo` generated the coverage-instrumented binary `for\n ```shell\n $ echo \"{some: 'thing'}\" | target/debug/examples/formatjson5 -\n ```\n+\n ```json5\n {\n-    some: 'thing',\n+    some: \"thing\",\n }\n ```\n \n After running this program, a new file, `default.profraw`, should be in the current working directory. It's often preferable to set a specific file name or path. You can change the output file using the environment variable `LLVM_PROFILE_FILE`:\n \n-\n ```shell\n $ echo \"{some: 'thing'}\" \\\n     | LLVM_PROFILE_FILE=\"formatjson5.profraw\" target/debug/examples/formatjson5 -\n@@ -104,19 +115,19 @@ formatjson5.profraw\n \n If `LLVM_PROFILE_FILE` contains a path to a non-existent directory, the missing directory structure will be created. Additionally, the following special pattern strings are rewritten:\n \n-* `%p` - The process ID.\n-* `%h` - The hostname of the machine running the program.\n-* `%t` - The value of the TMPDIR environment variable.\n-* `%Nm` - the instrumented binary\u2019s signature: The runtime creates a pool of N raw profiles, used for on-line profile merging. The runtime takes care of selecting a raw profile from the pool, locking it, and updating it before the program exits. `N` must be between `1` and `9`, and defaults to `1` if omitted (with simply `%m`).\n-* `%c` - Does not add anything to the filename, but enables a mode (on some platforms, including Darwin) in which profile counter updates are continuously synced to a file. This means that if the instrumented program crashes, or is killed by a signal, perfect coverage information can still be recovered.\n+-   `%p` - The process ID.\n+-   `%h` - The hostname of the machine running the program.\n+-   `%t` - The value of the TMPDIR environment variable.\n+-   `%Nm` - the instrumented binary\u2019s signature: The runtime creates a pool of N raw profiles, used for on-line profile merging. The runtime takes care of selecting a raw profile from the pool, locking it, and updating it before the program exits. `N` must be between `1` and `9`, and defaults to `1` if omitted (with simply `%m`).\n+-   `%c` - Does not add anything to the filename, but enables a mode (on some platforms, including Darwin) in which profile counter updates are continuously synced to a file. This means that if the instrumented program crashes, or is killed by a signal, perfect coverage information can still be recovered.\n \n ## Installing LLVM coverage tools\n \n LLVM's supplies two tools\u2014`llvm-profdata` and `llvm-cov`\u2014that process coverage data and generate reports. There are several ways to find and/or install these tools, but note that the coverage mapping data generated by the Rust compiler requires LLVM version 11 or higher. (`llvm-cov --version` typically shows the tool's LLVM version number.):\n \n-* The LLVM tools may be installed (or installable) directly to your OS (such as via `apt-get`, for Linux).\n-* If you are building the Rust compiler from source, you can optionally use the bundled LLVM tools, built from source. Those tool binaries can typically be found in your build platform directory at something like: `rust/build/x86_64-unknown-linux-gnu/llvm/bin/llvm-*`.\n-* You can install compatible versions of these tools via `rustup`.\n+-   The LLVM tools may be installed (or installable) directly to your OS (such as via `apt-get`, for Linux).\n+-   If you are building the Rust compiler from source, you can optionally use the bundled LLVM tools, built from source. Those tool binaries can typically be found in your build platform directory at something like: `rust/build/x86_64-unknown-linux-gnu/llvm/bin/llvm-*`.\n+-   You can install compatible versions of these tools via `rustup`.\n \n The `rustup` option is guaranteed to install a compatible version of the LLVM tools, but they can be hard to find. We recommend [`cargo-binutils`], which installs Rust-specific wrappers around these and other LLVM tools, so you can invoke them via `cargo` commands!\n \n@@ -126,6 +137,8 @@ $ cargo install cargo-binutils\n $ cargo profdata -- --help  # note the additional \"--\" preceding the tool-specific arguments\n ```\n \n+[`cargo-binutils`]: https://crates.io/crates/cargo-binutils\n+\n ## Creating coverage reports\n \n Raw profiles have to be indexed before they can be used to generate coverage reports. This is done using [`llvm-profdata merge`] (or `cargo profdata -- merge`), which can combine multiple raw profiles and index them at the same time:\n@@ -152,19 +165,27 @@ $ llvm-cov show -Xdemangler=rustfilt target/debug/examples/formatjson5 \\\n \n Some of the more notable options in this example include:\n \n-* `--Xdemangler=rustfilt` - the command name or path used to demangle Rust symbols (`rustfilt` in the example, but this could also be a path to the `rust-demangler` tool)\n-* `target/debug/examples/formatjson5` - the instrumented binary (from which to extract the coverage map)\n-* `--instr-profile=<path-to-file>.profdata` - the location of the `.profdata` file created by `llvm-profdata merge` (from the `.profraw` file generated by the instrumented binary)\n-* `--name=<exact-function-name>` - to show coverage for a specific function (or, consider using another filter option, such as `--name-regex=<pattern>`)\n+-   `--Xdemangler=rustfilt` - the command name or path used to demangle Rust symbols (`rustfilt` in the example, but this could also be a path to the `rust-demangler` tool)\n+-   `target/debug/examples/formatjson5` - the instrumented binary (from which to extract the coverage map)\n+-   `--instr-profile=<path-to-file>.profdata` - the location of the `.profdata` file created by `llvm-profdata merge` (from the `.profraw` file generated by the instrumented binary)\n+-   `--name=<exact-function-name>` - to show coverage for a specific function (or, consider using another filter option, such as `--name-regex=<pattern>`)\n+\n+[`llvm-profdata merge`]: https://llvm.org/docs/CommandGuide/llvm-profdata.html#profdata-merge\n+[`llvm-cov report`]: https://llvm.org/docs/CommandGuide/llvm-cov.html#llvm-cov-report\n+[`llvm-cov show`]: https://llvm.org/docs/CommandGuide/llvm-cov.html#llvm-cov-show\n+\n+> **Note**: Coverage can also be disabled on an individual function by annotating the function with the [`no_coverage` attribute] (which requires the feature flag `#![feature(no_coverage)]`).\n+\n+[`no_coverage` attribute]: ../language-features/no-coverage.md\n \n ## Interpreting reports\n \n There are four statistics tracked in a coverage summary:\n \n-* Function coverage is the percentage of functions that have been executed at least once. A function is considered to be executed if any of its instantiations are executed.\n-* Instantiation coverage is the percentage of function instantiations that have been executed at least once. Generic functions and functions generated from macros are two kinds of functions that may have multiple instantiations.\n-* Line coverage is the percentage of code lines that have been executed at least once. Only executable lines within function bodies are considered to be code lines.\n-* Region coverage is the percentage of code regions that have been executed at least once. A code region may span multiple lines: for example, in a large function body with no control flow. In other cases, a single line can contain multiple code regions: `return x || (y && z)` has countable code regions for `x` (which may resolve the expression, if `x` is `true`), `|| (y && z)` (executed only if `x` was `false`), and `return` (executed in either situation).\n+-   Function coverage is the percentage of functions that have been executed at least once. A function is considered to be executed if any of its instantiations are executed.\n+-   Instantiation coverage is the percentage of function instantiations that have been executed at least once. Generic functions and functions generated from macros are two kinds of functions that may have multiple instantiations.\n+-   Line coverage is the percentage of code lines that have been executed at least once. Only executable lines within function bodies are considered to be code lines.\n+-   Region coverage is the percentage of code regions that have been executed at least once. A code region may span multiple lines: for example, in a large function body with no control flow. In other cases, a single line can contain multiple code regions: `return x || (y && z)` has countable code regions for `x` (which may resolve the expression, if `x` is `true`), `|| (y && z)` (executed only if `x` was `false`), and `return` (executed in either situation).\n \n Of these four statistics, function coverage is usually the least granular while region coverage is the most granular. The project-wide totals for each statistic are listed in the summary.\n \n@@ -174,10 +195,10 @@ A typical use case for coverage analysis is test coverage. Rust's source-based c\n \n The following example (using the [`json5format`] crate, for demonstration purposes) show how to generate and analyze coverage results for all tests in a crate.\n \n-Since `cargo test` both builds and runs the tests, we set both the additional `RUSTFLAGS`, to add the `-Zinstrument-coverage` flag, and `LLVM_PROFILE_FILE`, to set a custom filename for the raw profiling data generated during the test runs. Since there may be more than one test binary, apply `%m` in the filename pattern. This generates unique names for each test binary. (Otherwise, each executed test binary would overwrite the coverage results from the previous binary.)\n+Since `cargo test` both builds and runs the tests, we set both the additional `RUSTFLAGS`, to add the `-Z instrument-coverage` flag, and `LLVM_PROFILE_FILE`, to set a custom filename for the raw profiling data generated during the test runs. Since there may be more than one test binary, apply `%m` in the filename pattern. This generates unique names for each test binary. (Otherwise, each executed test binary would overwrite the coverage results from the previous binary.)\n \n ```shell\n-$ RUSTFLAGS=\"-Zinstrument-coverage\" \\\n+$ RUSTFLAGS=\"-Z instrument-coverage\" \\\n     LLVM_PROFILE_FILE=\"json5format-%m.profraw\" \\\n     cargo test --tests\n ```\n@@ -224,7 +245,7 @@ $ cargo cov -- show \\\n     --Xdemangler=rustfilt | less -R\n ```\n \n-_Note the command line option `--ignore-filename-regex=/.cargo/registry`, which excludes the sources for dependencies from the coverage results._\n+> **Note**: The command line option `--ignore-filename-regex=/.cargo/registry`, which excludes the sources for dependencies from the coverage results.\\_\n \n ### Tips for listing the binaries automatically\n \n@@ -235,7 +256,7 @@ $ cargo cov -- report \\\n     $( \\\n       for file in \\\n         $( \\\n-          RUSTFLAGS=\"-Zinstrument-coverage\" \\\n+          RUSTFLAGS=\"-Z instrument-coverage\" \\\n             cargo test --tests --no-run --message-format=json \\\n               | jq -r \"select(.profile.test == true) | .filenames[]\" \\\n               | grep -v dSYM - \\\n@@ -259,28 +280,28 @@ for each listed test binary.\n The previous examples run `cargo test` with `--tests`, which excludes doc tests.[^79417]\n \n To include doc tests in the coverage results, drop the `--tests` flag, and apply the\n-`-Zinstrument-coverage` flag, and some doc-test-specific options in the\n+`-Z instrument-coverage` flag, and some doc-test-specific options in the\n `RUSTDOCFLAGS` environment variable. (The `cargo profdata` command does not change.)\n \n ```bash\n-$ RUSTFLAGS=\"-Zinstrument-coverage\" \\\n-  RUSTDOCFLAGS=\"-Zinstrument-coverage -Zunstable-options --persist-doctests target/debug/doctestbins\" \\\n+$ RUSTFLAGS=\"-Z instrument-coverage\" \\\n+  RUSTDOCFLAGS=\"-Z instrument-coverage -Z unstable-options --persist-doctests target/debug/doctestbins\" \\\n   LLVM_PROFILE_FILE=\"json5format-%m.profraw\" \\\n     cargo test\n $ cargo profdata -- merge \\\n     -sparse json5format-*.profraw -o json5format.profdata\n ```\n \n-The `-Zunstable-options --persist-doctests` flag is required, to save the test binaries\n+The `-Z unstable-options --persist-doctests` flag is required, to save the test binaries\n (with their coverage maps) for `llvm-cov`.\n \n ```bash\n $ cargo cov -- report \\\n     $( \\\n       for file in \\\n         $( \\\n-          RUSTFLAGS=\"-Zinstrument-coverage\" \\\n-          RUSTDOCFLAGS=\"-Zinstrument-coverage -Zunstable-options --persist-doctests target/debug/doctestbins\" \\\n+          RUSTFLAGS=\"-Z instrument-coverage\" \\\n+          RUSTDOCFLAGS=\"-Z instrument-coverage -Z unstable-options --persist-doctests target/debug/doctestbins\" \\\n             cargo test --no-run --message-format=json \\\n               | jq -r \"select(.profile.test == true) | .filenames[]\" \\\n               | grep -v dSYM - \\\n@@ -293,35 +314,33 @@ $ cargo cov -- report \\\n   --instr-profile=json5format.profdata --summary-only # and/or other options\n ```\n \n-Note, the differences in this `cargo cov` command, compared with the version without\n-doc tests, include:\n+> **Note**: The differences in this `cargo cov` command, compared with the version without\n+> doc tests, include:\n+\n+-   The `cargo test ... --no-run` command is updated with the same environment variables\n+    and flags used to _build_ the tests, _including_ the doc tests. (`LLVM_PROFILE_FILE`\n+    is only used when _running_ the tests.)\n+-   The file glob pattern `target/debug/doctestbins/*/rust_out` adds the `rust_out`\n+    binaries generated for doc tests (note, however, that some `rust_out` files may not\n+    be executable binaries).\n+-   `[[ -x $file ]] &&` filters the files passed on to the `printf`, to include only\n+    executable binaries.\n+\n+[^79417]:\n+    There is ongoing work to resolve a known issue\n+    [(#79417)](https://github.com/rust-lang/rust/issues/79417) that doc test coverage\n+    generates incorrect source line numbers in `llvm-cov show` results.\n \n-* The `cargo test ... --no-run` command is updated with the same environment variables\n-  and flags used to _build_ the tests, _including_ the doc tests. (`LLVM_PROFILE_FILE`\n-  is only used when _running_ the tests.)\n-* The file glob pattern `target/debug/doctestbins/*/rust_out` adds the `rust_out`\n-  binaries generated for doc tests (note, however, that some `rust_out` files may not\n-  be executable binaries).\n-* `[[ -x $file ]] &&` filters the files passed on to the `printf`, to include only\n-  executable binaries.\n+## `-Z instrument-coverage=<options>`\n \n-[^79417]: There is ongoing work to resolve a known issue\n-[(#79417)](https://github.com/rust-lang/rust/issues/79417) that doc test coverage\n-generates incorrect source line numbers in `llvm-cov show` results.\n+-   `-Z instrument-coverage=all`: Instrument all functions, including unused functions and unused generics. (This is the same as `-Z instrument-coverage`, with no value.)\n+-   `-Z instrument-coverage=except-unused-generics`: Instrument all functions except unused generics.\n+-   `-Z instrument-coverage=except-unused-functions`: Instrument only used (called) functions and instantiated generic functions.\n+-   `-Z instrument-coverage=off`: Do not instrument any functions. (This is the same as simply not including the `-Z instrument-coverage` option.)\n \n ## Other references\n \n Rust's implementation and workflow for source-based code coverage is based on the same library and tools used to implement [source-based code coverage in Clang]. (This document is partially based on the Clang guide.)\n \n-[#79121]: https://github.com/rust-lang/rust/issues/79121\n-[`-Zprofile`]: profile.md\n-[`llvm.instrprof.increment`]: https://llvm.org/docs/LangRef.html#llvm-instrprof-increment-intrinsic\n-[LLVM Code Coverage Mapping Format]: https://llvm.org/docs/CoverageMappingFormat.html\n-[rustc-dev-guide-how-to-build-and-run]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html\n-[`rustfilt`]: https://crates.io/crates/rustfilt\n+[source-based code coverage in clang]: https://clang.llvm.org/docs/SourceBasedCodeCoverage.html\n [`json5format`]: https://crates.io/crates/json5format\n-[`cargo-binutils`]: https://crates.io/crates/cargo-binutils\n-[`llvm-profdata merge`]: https://llvm.org/docs/CommandGuide/llvm-profdata.html#profdata-merge\n-[`llvm-cov report`]: https://llvm.org/docs/CommandGuide/llvm-cov.html#llvm-cov-report\n-[`llvm-cov show`]: https://llvm.org/docs/CommandGuide/llvm-cov.html#llvm-cov-show\n-[source-based code coverage in Clang]: https://clang.llvm.org/docs/SourceBasedCodeCoverage.html"}, {"sha": "327cdb39791a29880a6c8c62ce9c4eb85c59f7a6", "filename": "src/doc/unstable-book/src/language-features/no-coverage.md", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f58a362d188a0051063fda0cb4f2cb7e56e66119/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fno-coverage.md", "raw_url": "https://github.com/rust-lang/rust/raw/f58a362d188a0051063fda0cb4f2cb7e56e66119/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fno-coverage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fno-coverage.md?ref=f58a362d188a0051063fda0cb4f2cb7e56e66119", "patch": "@@ -0,0 +1,30 @@\n+# `no_coverage`\n+\n+The tracking issue for this feature is: [#84605]\n+\n+[#84605]: https://github.com/rust-lang/rust/issues/84605\n+\n+---\n+\n+The `no_coverage` attribute can be used to selectively disable coverage\n+instrumentation in an annotated function. This might be useful to:\n+\n+-   Avoid instrumentation overhead in a performance critical function\n+-   Avoid generating coverage for a function that is not meant to be executed,\n+    but still target 100% coverage for the rest of the program.\n+\n+## Example\n+\n+```rust\n+#![feature(no_coverage)]\n+\n+// `foo()` will get coverage instrumentation (by default)\n+fn foo() {\n+  // ...\n+}\n+\n+#[no_coverage]\n+fn bar() {\n+  // ...\n+}\n+```"}]}