{"sha": "937467c35820031f3803962675b3a5304d0f5c48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNzQ2N2MzNTgyMDAzMWYzODAzOTYyNjc1YjNhNTMwNGQwZjVjNDg=", "commit": {"author": {"name": "Markus Westerlind", "email": "marwes91@gmail.com", "date": "2015-11-27T08:25:31Z"}, "committer": {"name": "Markus Westerlind", "email": "marwes91@gmail.com", "date": "2015-11-27T08:27:41Z"}, "message": "Fix where clauses not taking the width of the line into account\n\nFixes #630", "tree": {"sha": "1193ab0b2b277855b64dcfb96230bdf55547541d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1193ab0b2b277855b64dcfb96230bdf55547541d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/937467c35820031f3803962675b3a5304d0f5c48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/937467c35820031f3803962675b3a5304d0f5c48", "html_url": "https://github.com/rust-lang/rust/commit/937467c35820031f3803962675b3a5304d0f5c48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/937467c35820031f3803962675b3a5304d0f5c48/comments", "author": {"login": "Marwes", "id": 957312, "node_id": "MDQ6VXNlcjk1NzMxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/957312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Marwes", "html_url": "https://github.com/Marwes", "followers_url": "https://api.github.com/users/Marwes/followers", "following_url": "https://api.github.com/users/Marwes/following{/other_user}", "gists_url": "https://api.github.com/users/Marwes/gists{/gist_id}", "starred_url": "https://api.github.com/users/Marwes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Marwes/subscriptions", "organizations_url": "https://api.github.com/users/Marwes/orgs", "repos_url": "https://api.github.com/users/Marwes/repos", "events_url": "https://api.github.com/users/Marwes/events{/privacy}", "received_events_url": "https://api.github.com/users/Marwes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Marwes", "id": 957312, "node_id": "MDQ6VXNlcjk1NzMxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/957312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Marwes", "html_url": "https://github.com/Marwes", "followers_url": "https://api.github.com/users/Marwes/followers", "following_url": "https://api.github.com/users/Marwes/following{/other_user}", "gists_url": "https://api.github.com/users/Marwes/gists{/gist_id}", "starred_url": "https://api.github.com/users/Marwes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Marwes/subscriptions", "organizations_url": "https://api.github.com/users/Marwes/orgs", "repos_url": "https://api.github.com/users/Marwes/repos", "events_url": "https://api.github.com/users/Marwes/events{/privacy}", "received_events_url": "https://api.github.com/users/Marwes/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28922f37dd3f4734d63140de2902c651ab110c30", "url": "https://api.github.com/repos/rust-lang/rust/commits/28922f37dd3f4734d63140de2902c651ab110c30", "html_url": "https://github.com/rust-lang/rust/commit/28922f37dd3f4734d63140de2902c651ab110c30"}], "stats": {"total": 66, "additions": 60, "deletions": 6}, "files": [{"sha": "f1be0ed76a1111124ae73112dcce3f00b1d1871a", "filename": "src/items.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/937467c35820031f3803962675b3a5304d0f5c48/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/937467c35820031f3803962675b3a5304d0f5c48/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=937467c35820031f3803962675b3a5304d0f5c48", "patch": "@@ -476,10 +476,12 @@ pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -\n         let indent = offset + result.len();\n         result.push_str(&*try_opt!(self_ty.rewrite(context, budget, indent)));\n \n+        let where_budget = try_opt!(context.config.max_width.checked_sub(last_line_width(&result)));\n         let where_clause_str = try_opt!(rewrite_where_clause(context,\n                                                              &generics.where_clause,\n                                                              context.config,\n                                                              context.block_indent,\n+                                                             where_budget,\n                                                              context.config.where_density,\n                                                              \"{\",\n                                                              None));\n@@ -678,27 +680,31 @@ fn format_tuple_struct(context: &RewriteContext,\n \n     let body_lo = fields[0].span.lo;\n \n-    let (generics_str, where_clause_str) = match generics {\n+    let where_clause_str = match generics {\n         Some(ref generics) => {\n             let generics_str = try_opt!(rewrite_generics(context,\n                                                          generics,\n                                                          offset,\n                                                          offset + header_str.len(),\n                                                          mk_sp(span.lo, body_lo)));\n+            result.push_str(&generics_str);\n \n+            let where_budget = try_opt!(context.config\n+                                               .max_width\n+                                               .checked_sub(last_line_width(&result)));\n             let where_clause_str = try_opt!(rewrite_where_clause(context,\n                                                                  &generics.where_clause,\n                                                                  context.config,\n                                                                  context.block_indent,\n+                                                                 where_budget,\n                                                                  Density::Compressed,\n                                                                  \";\",\n                                                                  None));\n \n-            (generics_str, where_clause_str)\n+            where_clause_str\n         }\n-        None => (\"\".to_owned(), \"\".to_owned()),\n+        None => \"\".to_owned(),\n     };\n-    result.push_str(&generics_str);\n     result.push('(');\n \n     let item_indent = context.block_indent + result.len();\n@@ -1168,10 +1174,12 @@ fn rewrite_fn_base(context: &RewriteContext,\n     };\n \n     // Where clause.\n+    let where_budget = try_opt!(context.config.max_width.checked_sub(last_line_width(&result)));\n     let where_clause_str = try_opt!(rewrite_where_clause(context,\n                                                          where_clause,\n                                                          context.config,\n                                                          indent,\n+                                                         where_budget,\n                                                          where_density,\n                                                          \"{\",\n                                                          Some(span.hi)));\n@@ -1409,6 +1417,7 @@ fn rewrite_where_clause(context: &RewriteContext,\n                         where_clause: &ast::WhereClause,\n                         config: &Config,\n                         indent: Indent,\n+                        width: usize,\n                         density: Density,\n                         terminator: &str,\n                         span_end: Option<BytePos>)\n@@ -1462,9 +1471,15 @@ fn rewrite_where_clause(context: &RewriteContext,\n     };\n     let preds_str = try_opt!(write_list(&item_vec, &fmt));\n \n-    // 9 = \" where \".len() + \" {\".len()\n+    // When '{' is the terminator just assume that it is put on the next line for single line where\n+    // clauses\n+    let end_length = if terminator == \";\" {\n+        1\n+    } else {\n+        0\n+    };\n     if density == Density::Tall || preds_str.contains('\\n') ||\n-       indent.width() + 9 + preds_str.len() > context.config.max_width {\n+       indent.width() + \" where \".len() + preds_str.len() + end_length > width {\n         Some(format!(\"\\n{}where {}\",\n                      (indent + extra_indent).to_string(context.config),\n                      preds_str))\n@@ -1490,10 +1505,12 @@ fn format_generics(context: &RewriteContext,\n     let mut result = try_opt!(rewrite_generics(context, generics, offset, generics_offset, span));\n \n     if !generics.where_clause.predicates.is_empty() || result.contains('\\n') {\n+        let budget = try_opt!(context.config.max_width.checked_sub(last_line_width(&result)));\n         let where_clause_str = try_opt!(rewrite_where_clause(context,\n                                                              &generics.where_clause,\n                                                              context.config,\n                                                              context.block_indent,\n+                                                             budget,\n                                                              Density::Tall,\n                                                              terminator,\n                                                              Some(span.hi)));"}, {"sha": "9e4a2f656988be497dab08a009589f98dc1eeca3", "filename": "tests/source/where-clause.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/937467c35820031f3803962675b3a5304d0f5c48/tests%2Fsource%2Fwhere-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/937467c35820031f3803962675b3a5304d0f5c48/tests%2Fsource%2Fwhere-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fwhere-clause.rs?ref=937467c35820031f3803962675b3a5304d0f5c48", "patch": "@@ -0,0 +1,16 @@\n+pub trait Test {\n+    fn very_long_method_name<F>(self, f: F) -> MyVeryLongReturnType where F: FnMut(Self::Item) -> bool;\n+    fn exactly_100_chars1<F>(self, f: F) -> MyVeryLongReturnType where F: FnMut(Self::Item) -> bool;\n+}\n+\n+fn very_long_function_name<F>(very_long_argument: F) -> MyVeryLongReturnType where F: FnMut(Self::Item) -> bool { }\n+\n+struct VeryLongTupleStructName<A, B, C, D, E>(LongLongTypename, LongLongTypename, i32, i32) where A: LongTrait;\n+\n+struct Exactly100CharsToSemicolon<A, B, C, D, E>\n+    (LongLongTypename, i32, i32)\n+    where A: LongTrait1234;\n+\n+struct AlwaysOnNextLine<LongLongTypename, LongTypename, A, B, C, D, E, F> where A: LongTrait {\n+    x: i32\n+}"}, {"sha": "cf225cab3503d41e62ed94acc2fef2a102f4d0db", "filename": "tests/target/where-clause.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/937467c35820031f3803962675b3a5304d0f5c48/tests%2Ftarget%2Fwhere-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/937467c35820031f3803962675b3a5304d0f5c48/tests%2Ftarget%2Fwhere-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fwhere-clause.rs?ref=937467c35820031f3803962675b3a5304d0f5c48", "patch": "@@ -0,0 +1,21 @@\n+pub trait Test {\n+    fn very_long_method_name<F>(self, f: F) -> MyVeryLongReturnType\n+        where F: FnMut(Self::Item) -> bool;\n+    fn exactly_100_chars1<F>(self, f: F) -> MyVeryLongReturnType where F: FnMut(Self::Item) -> bool;\n+}\n+\n+fn very_long_function_name<F>(very_long_argument: F) -> MyVeryLongReturnType\n+    where F: FnMut(Self::Item) -> bool\n+{\n+}\n+\n+struct VeryLongTupleStructName<A, B, C, D, E>(LongLongTypename, LongLongTypename, i32, i32)\n+    where A: LongTrait;\n+\n+struct Exactly100CharsToSemicolon<A, B, C, D, E>(LongLongTypename, i32, i32) where A: LongTrait1234;\n+\n+struct AlwaysOnNextLine<LongLongTypename, LongTypename, A, B, C, D, E, F>\n+    where A: LongTrait\n+{\n+    x: i32,\n+}"}]}