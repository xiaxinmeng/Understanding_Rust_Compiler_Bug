{"sha": "2742ac074877c4ce811dc40724abb4b39803797e", "node_id": "C_kwDOAAsO6NoAKDI3NDJhYzA3NDg3N2M0Y2U4MTFkYzQwNzI0YWJiNGIzOTgwMzc5N2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-27T17:12:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-27T17:12:43Z"}, "message": "Auto merge of #10399 - samueltardieu:issue-10396, r=Manishearth\n\nDo not suggest to derive `Default` on generics with implicit arguments\n\nFixes #10396\n\nchangelog: FP: [`derivable_impls`]: do not suggest to derive `Default` on generics with implicit arguments", "tree": {"sha": "b79313e9052847f42093c859e1f7b64969c40a75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b79313e9052847f42093c859e1f7b64969c40a75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2742ac074877c4ce811dc40724abb4b39803797e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2742ac074877c4ce811dc40724abb4b39803797e", "html_url": "https://github.com/rust-lang/rust/commit/2742ac074877c4ce811dc40724abb4b39803797e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2742ac074877c4ce811dc40724abb4b39803797e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba7fd68e87cd13ece77baa83684396c8b9cbc633", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba7fd68e87cd13ece77baa83684396c8b9cbc633", "html_url": "https://github.com/rust-lang/rust/commit/ba7fd68e87cd13ece77baa83684396c8b9cbc633"}, {"sha": "c82ff00539c4441eddecd12151f54c30d1b03430", "url": "https://api.github.com/repos/rust-lang/rust/commits/c82ff00539c4441eddecd12151f54c30d1b03430", "html_url": "https://github.com/rust-lang/rust/commit/c82ff00539c4441eddecd12151f54c30d1b03430"}], "stats": {"total": 95, "additions": 87, "deletions": 8}, "files": [{"sha": "549ef2d24cac8cda346e037a0d04a71081713128", "filename": "clippy_lints/src/derivable_impls.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2742ac074877c4ce811dc40724abb4b39803797e/clippy_lints%2Fsrc%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2742ac074877c4ce811dc40724abb4b39803797e/clippy_lints%2Fsrc%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderivable_impls.rs?ref=2742ac074877c4ce811dc40724abb4b39803797e", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::{\n     Body, Expr, ExprKind, GenericArg, Impl, ImplItemKind, Item, ItemKind, Node, PathSegment, QPath, Ty, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{AdtDef, DefIdTree};\n+use rustc_middle::ty::{Adt, AdtDef, DefIdTree, SubstsRef};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::sym;\n \n@@ -81,13 +81,18 @@ fn check_struct<'tcx>(\n     self_ty: &Ty<'_>,\n     func_expr: &Expr<'_>,\n     adt_def: AdtDef<'_>,\n+    substs: SubstsRef<'_>,\n ) {\n     if let TyKind::Path(QPath::Resolved(_, p)) = self_ty.kind {\n-        if let Some(PathSegment { args: Some(a), .. }) = p.segments.last() {\n-            for arg in a.args {\n-                if !matches!(arg, GenericArg::Lifetime(_)) {\n-                    return;\n-                }\n+        if let Some(PathSegment { args, .. }) = p.segments.last() {\n+            let args = args.map(|a| a.args).unwrap_or(&[]);\n+\n+            // substs contains the generic parameters of the type declaration, while args contains the arguments\n+            // used at instantiation time. If both len are not equal, it means that some parameters were not\n+            // provided (which means that the default values were used); in this case we will not risk\n+            // suggesting too broad a rewrite. We won't either if any argument is a type or a const.\n+            if substs.len() != args.len() || args.iter().any(|arg| !matches!(arg, GenericArg::Lifetime(_))) {\n+                return;\n             }\n         }\n     }\n@@ -184,15 +189,15 @@ impl<'tcx> LateLintPass<'tcx> for DerivableImpls {\n             if let Some(Node::ImplItem(impl_item)) = cx.tcx.hir().find(impl_item_hir);\n             if let ImplItemKind::Fn(_, b) = &impl_item.kind;\n             if let Body { value: func_expr, .. } = cx.tcx.hir().body(*b);\n-            if let Some(adt_def) = cx.tcx.type_of(item.owner_id).subst_identity().ty_adt_def();\n+            if let &Adt(adt_def, substs) = cx.tcx.type_of(item.owner_id).subst_identity().kind();\n             if let attrs = cx.tcx.hir().attrs(item.hir_id());\n             if !attrs.iter().any(|attr| attr.doc_str().is_some());\n             if let child_attrs = cx.tcx.hir().attrs(impl_item_hir);\n             if !child_attrs.iter().any(|attr| attr.doc_str().is_some());\n \n             then {\n                 if adt_def.is_struct() {\n-                    check_struct(cx, item, self_ty, func_expr, adt_def);\n+                    check_struct(cx, item, self_ty, func_expr, adt_def, substs);\n                 } else if adt_def.is_enum() && self.msrv.meets(msrvs::DEFAULT_ENUM_ATTRIBUTE) {\n                     check_enum(cx, item, func_expr, adt_def);\n                 }"}, {"sha": "89ec33a0d8f7007f35d81b6a6ed0bad166f90a0a", "filename": "tests/ui/derivable_impls.fixed", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2742ac074877c4ce811dc40724abb4b39803797e/tests%2Fui%2Fderivable_impls.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2742ac074877c4ce811dc40724abb4b39803797e/tests%2Fui%2Fderivable_impls.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderivable_impls.fixed?ref=2742ac074877c4ce811dc40724abb4b39803797e", "patch": "@@ -231,4 +231,41 @@ impl Default for NonExhaustiveEnum {\n     }\n }\n \n+// https://github.com/rust-lang/rust-clippy/issues/10396\n+\n+#[derive(Default)]\n+struct DefaultType;\n+\n+struct GenericType<T = DefaultType> {\n+    t: T,\n+}\n+\n+impl Default for GenericType {\n+    fn default() -> Self {\n+        Self { t: Default::default() }\n+    }\n+}\n+\n+struct InnerGenericType<T> {\n+    t: T,\n+}\n+\n+impl Default for InnerGenericType<DefaultType> {\n+    fn default() -> Self {\n+        Self { t: Default::default() }\n+    }\n+}\n+\n+struct OtherGenericType<T = DefaultType> {\n+    inner: InnerGenericType<T>,\n+}\n+\n+impl Default for OtherGenericType {\n+    fn default() -> Self {\n+        Self {\n+            inner: Default::default(),\n+        }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "def6e41162f1b451ccb82b062fa1c53fca754c31", "filename": "tests/ui/derivable_impls.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2742ac074877c4ce811dc40724abb4b39803797e/tests%2Fui%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2742ac074877c4ce811dc40724abb4b39803797e/tests%2Fui%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderivable_impls.rs?ref=2742ac074877c4ce811dc40724abb4b39803797e", "patch": "@@ -267,4 +267,41 @@ impl Default for NonExhaustiveEnum {\n     }\n }\n \n+// https://github.com/rust-lang/rust-clippy/issues/10396\n+\n+#[derive(Default)]\n+struct DefaultType;\n+\n+struct GenericType<T = DefaultType> {\n+    t: T,\n+}\n+\n+impl Default for GenericType {\n+    fn default() -> Self {\n+        Self { t: Default::default() }\n+    }\n+}\n+\n+struct InnerGenericType<T> {\n+    t: T,\n+}\n+\n+impl Default for InnerGenericType<DefaultType> {\n+    fn default() -> Self {\n+        Self { t: Default::default() }\n+    }\n+}\n+\n+struct OtherGenericType<T = DefaultType> {\n+    inner: InnerGenericType<T>,\n+}\n+\n+impl Default for OtherGenericType {\n+    fn default() -> Self {\n+        Self {\n+            inner: Default::default(),\n+        }\n+    }\n+}\n+\n fn main() {}"}]}