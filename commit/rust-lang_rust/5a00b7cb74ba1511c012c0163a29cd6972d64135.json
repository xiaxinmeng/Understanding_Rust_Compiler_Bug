{"sha": "5a00b7cb74ba1511c012c0163a29cd6972d64135", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMDBiN2NiNzRiYTE1MTFjMDEyYzAxNjNhMjljZDY5NzJkNjQxMzU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-11-08T22:46:15Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-11-30T13:18:25Z"}, "message": "make coercions to `!` in unreachable code a hard error\n\nThis was added to cover up a lazy extra semicolon in #35849, but does\nnot actually make sense. This is removed as a part of the stabilization\nof `never_type`.", "tree": {"sha": "ae79023e34f3451eb2273faf04fae0bca75b8e05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae79023e34f3451eb2273faf04fae0bca75b8e05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a00b7cb74ba1511c012c0163a29cd6972d64135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a00b7cb74ba1511c012c0163a29cd6972d64135", "html_url": "https://github.com/rust-lang/rust/commit/5a00b7cb74ba1511c012c0163a29cd6972d64135", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a00b7cb74ba1511c012c0163a29cd6972d64135/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7745a7a8177259cd2ea0b48eaf35dd943eec2896", "url": "https://api.github.com/repos/rust-lang/rust/commits/7745a7a8177259cd2ea0b48eaf35dd943eec2896", "html_url": "https://github.com/rust-lang/rust/commit/7745a7a8177259cd2ea0b48eaf35dd943eec2896"}], "stats": {"total": 75, "additions": 63, "deletions": 12}, "files": [{"sha": "1008da1e937a5243d9a5ddbc98b01c76589aad43", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a00b7cb74ba1511c012c0163a29cd6972d64135/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a00b7cb74ba1511c012c0163a29cd6972d64135/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=5a00b7cb74ba1511c012c0163a29cd6972d64135", "patch": "@@ -222,6 +222,12 @@ declare_lint! {\n     \"detect mut variables which don't need to be mutable\"\n }\n \n+declare_lint! {\n+    pub COERCE_NEVER,\n+    Deny,\n+    \"detect coercion to !\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -263,7 +269,8 @@ impl LintPass for HardwiredLints {\n             LATE_BOUND_LIFETIME_ARGUMENTS,\n             DEPRECATED,\n             UNUSED_UNSAFE,\n-            UNUSED_MUT\n+            UNUSED_MUT,\n+            COERCE_NEVER\n         )\n     }\n }"}, {"sha": "fc05f8f0dc24503beda7a78fe6880497d3a460ad", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a00b7cb74ba1511c012c0163a29cd6972d64135/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a00b7cb74ba1511c012c0163a29cd6972d64135/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=5a00b7cb74ba1511c012c0163a29cd6972d64135", "patch": "@@ -247,6 +247,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(SAFE_PACKED_BORROWS),\n             reference: \"issue #46043 <https://github.com/rust-lang/rust/issues/46043>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(COERCE_NEVER),\n+            reference: \"issue #46325 <https://github.com/rust-lang/rust/issues/46325>\",\n+        },\n \n         ]);\n "}, {"sha": "3e725d7ef415c553ee6f82c7468acc1ebe9a3d92", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5a00b7cb74ba1511c012c0163a29cd6972d64135/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a00b7cb74ba1511c012c0163a29cd6972d64135/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=5a00b7cb74ba1511c012c0163a29cd6972d64135", "patch": "@@ -66,6 +66,7 @@ use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::infer::{Coercion, InferResult, InferOk};\n use rustc::infer::type_variable::TypeVariableOrigin;\n+use rustc::lint;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow};\n use rustc::ty::{self, LvaluePreference, TypeAndMut,\n@@ -754,7 +755,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // type, but only if the source expression diverges.\n         if target.is_never() && expr_diverges.always() {\n             debug!(\"permit coercion to `!` because expr diverges\");\n-            return Ok(target);\n+            if self.can_eq(self.param_env, source, target).is_err() {\n+                self.tcx.lint_node(\n+                    lint::builtin::COERCE_NEVER,\n+                    expr.id,\n+                    expr.span,\n+                    &format!(\"cannot coerce `{}` to !\", source)\n+                );\n+                return Ok(target);\n+            }\n         }\n \n         let cause = self.cause(expr.span, ObligationCauseCode::ExprAssignable);"}, {"sha": "0d5bf6cd68cb80cd96693f6017987f521ff7b6af", "filename": "src/test/compile-fail/coerce-to-bang-cast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a00b7cb74ba1511c012c0163a29cd6972d64135/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a00b7cb74ba1511c012c0163a29cd6972d64135/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs?ref=5a00b7cb74ba1511c012c0163a29cd6972d64135", "patch": "@@ -12,8 +12,11 @@\n \n fn foo(x: usize, y: !, z: usize) { }\n \n+#[deny(coerce_never)]\n fn cast_a() {\n     let y = {return; 22} as !;\n+    //~^ ERROR cannot coerce `i32` to !\n+    //~| hard error\n }\n \n fn cast_b() {"}, {"sha": "2cf568777d47534415734321af13126bc733e88e", "filename": "src/test/compile-fail/coerce-to-bang.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a00b7cb74ba1511c012c0163a29cd6972d64135/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a00b7cb74ba1511c012c0163a29cd6972d64135/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs?ref=5a00b7cb74ba1511c012c0163a29cd6972d64135", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(never_type)]\n+#![deny(coerce_never)]\n \n fn foo(x: usize, y: !, z: usize) { }\n \n@@ -17,6 +18,8 @@ fn call_foo_a() {\n     // the coercion to `!`, but within same expression. Not clear that\n     // these are the rules we want.\n     foo(return, 22, 44);\n+    //~^ ERROR cannot coerce `{integer}` to !\n+    //~| hard error\n }\n \n fn call_foo_b() {\n@@ -36,6 +39,8 @@ fn call_foo_d() {\n     let b = 22;\n     let c = 44;\n     foo(a, b, c); // ... and hence a reference to `a` is expected to diverge.\n+    //~^ ERROR cannot coerce `{integer}` to !\n+    //~| hard error\n }\n \n fn call_foo_e() {\n@@ -75,6 +80,8 @@ fn tuple_a() {\n fn tuple_b() {\n     // Divergence happens before coercion: OK\n     let x: (usize, !, usize) = (return, 44, 66);\n+    //~^ ERROR cannot coerce `{integer}` to !\n+    //~| hard error\n }\n \n fn tuple_c() {"}, {"sha": "a91c000bbf712c4c4883cb4632186dbba5e6b0ea", "filename": "src/test/compile-fail/diverging-fn-tail-35849.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a00b7cb74ba1511c012c0163a29cd6972d64135/src%2Ftest%2Fcompile-fail%2Fdiverging-fn-tail-35849.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a00b7cb74ba1511c012c0163a29cd6972d64135/src%2Ftest%2Fcompile-fail%2Fdiverging-fn-tail-35849.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdiverging-fn-tail-35849.rs?ref=5a00b7cb74ba1511c012c0163a29cd6972d64135", "patch": "@@ -8,9 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn _converge() -> ! {\n-    42 //~ ERROR mismatched types\n+#[deny(coerce_never)]\n+fn assert_sizeof() -> ! {\n+    unsafe {\n+        ::std::mem::transmute::<f64, [u8; 8]>(panic!())\n+            //~^ ERROR cannot coerce `[u8; 8]` to !\n+            //~| hard error\n+    }\n }\n \n fn main() { }\n-"}, {"sha": "dfd99bcc9fb47978777a0c021b32b9915c099a97", "filename": "src/test/run-pass/diverging-fn-tail-35849.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a00b7cb74ba1511c012c0163a29cd6972d64135/src%2Ftest%2Frun-pass%2Fdiverging-fn-tail-35849.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a00b7cb74ba1511c012c0163a29cd6972d64135/src%2Ftest%2Frun-pass%2Fdiverging-fn-tail-35849.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdiverging-fn-tail-35849.rs?ref=5a00b7cb74ba1511c012c0163a29cd6972d64135", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(coerce_never)]\n fn assert_sizeof() -> ! {\n     unsafe {\n         ::std::mem::transmute::<f64, [u8; 8]>(panic!())\n     }\n }\n \n fn main() { }\n-"}, {"sha": "ad12cb876fe9b9a070ee59ba22d6c17ed46f799d", "filename": "src/test/ui/reachable/expr_unary.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a00b7cb74ba1511c012c0163a29cd6972d64135/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a00b7cb74ba1511c012c0163a29cd6972d64135/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs?ref=5a00b7cb74ba1511c012c0163a29cd6972d64135", "patch": "@@ -12,11 +12,14 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n+#![deny(coerce_never)]\n #![feature(never_type)]\n \n fn foo() {\n     let x: ! = ! { return; 22 }; //~ ERROR unreachable\n-    //~^ ERROR cannot apply unary operator `!` to type `!`\n+    //~^ ERROR cannot coerce\n+    //~| hard error\n+    //~| ERROR cannot apply unary operator `!` to type `!`\n }\n \n fn main() { }"}, {"sha": "39120f0bdf980a87fc69830d7a6534e55a9bf81d", "filename": "src/test/ui/reachable/expr_unary.stderr", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5a00b7cb74ba1511c012c0163a29cd6972d64135/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a00b7cb74ba1511c012c0163a29cd6972d64135/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr?ref=5a00b7cb74ba1511c012c0163a29cd6972d64135", "patch": "@@ -1,7 +1,7 @@\n error: unreachable expression\n-  --> $DIR/expr_unary.rs:18:28\n+  --> $DIR/expr_unary.rs:19:28\n    |\n-18 |     let x: ! = ! { return; 22 }; //~ ERROR unreachable\n+19 |     let x: ! = ! { return; 22 }; //~ ERROR unreachable\n    |                            ^^\n    |\n note: lint level defined here\n@@ -10,11 +10,25 @@ note: lint level defined here\n 14 | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n+error: cannot coerce `{integer}` to !\n+  --> $DIR/expr_unary.rs:19:28\n+   |\n+19 |     let x: ! = ! { return; 22 }; //~ ERROR unreachable\n+   |                            ^^\n+   |\n+note: lint level defined here\n+  --> $DIR/expr_unary.rs:15:9\n+   |\n+15 | #![deny(coerce_never)]\n+   |         ^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46325 <https://github.com/rust-lang/rust/issues/46325>\n+\n error[E0600]: cannot apply unary operator `!` to type `!`\n-  --> $DIR/expr_unary.rs:18:16\n+  --> $DIR/expr_unary.rs:19:16\n    |\n-18 |     let x: ! = ! { return; 22 }; //~ ERROR unreachable\n+19 |     let x: ! = ! { return; 22 }; //~ ERROR unreachable\n    |                ^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}]}