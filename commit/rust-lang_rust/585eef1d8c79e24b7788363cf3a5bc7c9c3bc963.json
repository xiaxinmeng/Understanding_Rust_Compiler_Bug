{"sha": "585eef1d8c79e24b7788363cf3a5bc7c9c3bc963", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NWVlZjFkOGM3OWUyNGI3Nzg4MzYzY2YzYTViYzdjOWMzYmM5NjM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-17T23:01:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-17T23:01:54Z"}, "message": "Merge #3206\n\n3206: Install rust-src when it is not found r=SomeoneToIgnore a=SomeoneToIgnore\n\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/2858\r\n\r\nLooks like there's no RUSTUP env variable, so it adds one more thing to solve in https://github.com/rust-analyzer/rust-analyzer/issues/3154\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "1f011539525108a10f36fdcde151d294c78db1c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f011539525108a10f36fdcde151d294c78db1c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/585eef1d8c79e24b7788363cf3a5bc7c9c3bc963", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeSxtiCRBK7hj4Ov3rIwAAdHIIADzvMpEtsYjFBbp7SBZmP6pn\n4UraBOKaCD1qLC/YOIb2S62LNYymZWndddnmgKvKhoXan1zB4s7U4AWygl10Jb+E\nUUwxzcK++weooik+HHP7mbsooY21cbc+tKUNPY4UHokUgkNhMICgwDrM0l0Y1qD0\nmUL7u8K6rywkY5B9TxozgLdFEU/TU0sEFY+fWHbF/kcd794tVV9dLZj35fm3VLC/\nvlfY5ySmHXvZhHOSNvsOgjwyUmdS2vTW2FMxGjFfoaZjnR+XTUEVWGi2+sMdpd9k\nx6xfumGGJoyZfyRWSoxOoA9tRHebWvQCdP1Ub5dHCyBJtD+aJj9nZoW6/83SbCQ=\n=R8Eo\n-----END PGP SIGNATURE-----\n", "payload": "tree 1f011539525108a10f36fdcde151d294c78db1c0\nparent 326556b09078a398e641dd221ab870ee0fe47f68\nparent e29dbdb139fb3a35902b4b3d11a92d45861d210b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581980514 +0000\ncommitter GitHub <noreply@github.com> 1581980514 +0000\n\nMerge #3206\n\n3206: Install rust-src when it is not found r=SomeoneToIgnore a=SomeoneToIgnore\n\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/2858\r\n\r\nLooks like there's no RUSTUP env variable, so it adds one more thing to solve in https://github.com/rust-analyzer/rust-analyzer/issues/3154\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/585eef1d8c79e24b7788363cf3a5bc7c9c3bc963", "html_url": "https://github.com/rust-lang/rust/commit/585eef1d8c79e24b7788363cf3a5bc7c9c3bc963", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/585eef1d8c79e24b7788363cf3a5bc7c9c3bc963/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "326556b09078a398e641dd221ab870ee0fe47f68", "url": "https://api.github.com/repos/rust-lang/rust/commits/326556b09078a398e641dd221ab870ee0fe47f68", "html_url": "https://github.com/rust-lang/rust/commit/326556b09078a398e641dd221ab870ee0fe47f68"}, {"sha": "e29dbdb139fb3a35902b4b3d11a92d45861d210b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e29dbdb139fb3a35902b4b3d11a92d45861d210b", "html_url": "https://github.com/rust-lang/rust/commit/e29dbdb139fb3a35902b4b3d11a92d45861d210b"}], "stats": {"total": 76, "additions": 47, "deletions": 29}, "files": [{"sha": "db779a2d26a211a977ff2a6e2012ec7906397e79", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 44, "deletions": 28, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/585eef1d8c79e24b7788363cf3a5bc7c9c3bc963/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585eef1d8c79e24b7788363cf3a5bc7c9c3bc963/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=585eef1d8c79e24b7788363cf3a5bc7c9c3bc963", "patch": "@@ -1,10 +1,10 @@\n //! FIXME: write short doc here\n \n-use anyhow::{anyhow, bail, Context, Result};\n+use anyhow::{bail, Context, Result};\n use std::{\n     env,\n     path::{Path, PathBuf},\n-    process::Command,\n+    process::{Command, Output},\n };\n \n use ra_arena::{impl_arena_id, Arena, RawId};\n@@ -47,18 +47,7 @@ impl Sysroot {\n     }\n \n     pub fn discover(cargo_toml: &Path) -> Result<Sysroot> {\n-        let src = try_find_src_path(cargo_toml)?;\n-\n-        if !src.exists() {\n-            Err(anyhow!(\n-                \"can't load standard library from sysroot\\n\\\n-                 {}\\n\\\n-                 (discovered via `rustc --print sysroot`)\\n\\\n-                 try running `rustup component add rust-src` or set `RUST_SRC_PATH`\",\n-                src.display(),\n-            ))?;\n-        }\n-\n+        let src = get_or_install_rust_src(cargo_toml)?;\n         let mut sysroot = Sysroot { crates: Arena::default() };\n         for name in SYSROOT_CRATES.trim().lines() {\n             let root = src.join(format!(\"lib{}\", name)).join(\"lib.rs\");\n@@ -90,27 +79,54 @@ impl Sysroot {\n     }\n }\n \n-fn try_find_src_path(cargo_toml: &Path) -> Result<PathBuf> {\n-    if let Ok(path) = env::var(\"RUST_SRC_PATH\") {\n-        return Ok(path.into());\n-    }\n+fn create_command_text(program: &str, args: &[&str]) -> String {\n+    format!(\"{} {}\", program, args.join(\" \"))\n+}\n \n-    let rustc_output = Command::new(\"rustc\")\n+fn run_command_in_cargo_dir(cargo_toml: &Path, program: &str, args: &[&str]) -> Result<Output> {\n+    let output = Command::new(program)\n         .current_dir(cargo_toml.parent().unwrap())\n-        .args(&[\"--print\", \"sysroot\"])\n+        .args(args)\n         .output()\n-        .context(\"rustc --print sysroot failed\")?;\n-    if !rustc_output.status.success() {\n-        match rustc_output.status.code() {\n-            Some(code) => {\n-                bail!(\"failed to locate sysroot: rustc --print sysroot exited with code {}\", code)\n-            }\n-            None => bail!(\"failed to locate sysroot: rustc --print sysroot terminated by signal\"),\n+        .context(format!(\"{} failed\", create_command_text(program, args)))?;\n+    if !output.status.success() {\n+        match output.status.code() {\n+            Some(code) => bail!(\n+                \"failed to run the command: '{}' exited with code {}\",\n+                create_command_text(program, args),\n+                code\n+            ),\n+            None => bail!(\n+                \"failed to run the command: '{}' terminated by signal\",\n+                create_command_text(program, args)\n+            ),\n         };\n     }\n+    Ok(output)\n+}\n+\n+fn get_or_install_rust_src(cargo_toml: &Path) -> Result<PathBuf> {\n+    if let Ok(path) = env::var(\"RUST_SRC_PATH\") {\n+        return Ok(path.into());\n+    }\n+    let rustc_output = run_command_in_cargo_dir(cargo_toml, \"rustc\", &[\"--print\", \"sysroot\"])?;\n     let stdout = String::from_utf8(rustc_output.stdout)?;\n     let sysroot_path = Path::new(stdout.trim());\n-    Ok(sysroot_path.join(\"lib/rustlib/src/rust/src\"))\n+    let src_path = sysroot_path.join(\"lib/rustlib/src/rust/src\");\n+\n+    if !src_path.exists() {\n+        run_command_in_cargo_dir(cargo_toml, \"rustup\", &[\"component\", \"add\", \"rust-src\"])?;\n+    }\n+    if !src_path.exists() {\n+        bail!(\n+            \"can't load standard library from sysroot\\n\\\n+            {}\\n\\\n+            (discovered via `rustc --print sysroot`)\\n\\\n+            try running `rustup component add rust-src` or set `RUST_SRC_PATH`\",\n+            src_path.display(),\n+        )\n+    }\n+    Ok(src_path)\n }\n \n impl SysrootCrate {"}, {"sha": "8780a2995d17b7f3a1347ec59b7771798c17450b", "filename": "docs/user/readme.adoc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/585eef1d8c79e24b7788363cf3a5bc7c9c3bc963/docs%2Fuser%2Freadme.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/585eef1d8c79e24b7788363cf3a5bc7c9c3bc963/docs%2Fuser%2Freadme.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Freadme.adoc?ref=585eef1d8c79e24b7788363cf3a5bc7c9c3bc963", "patch": "@@ -20,7 +20,9 @@ In theory, one should be able to just install the server binary and have it auto\n We are not there yet, so some editor specific setup is required.\n \n Additionally, rust-analyzer needs sources of the standard library.\n-This commands adds them:\n+If the source code is not present, rust-analyzer will attempt to install it automatically.\n+\n+To add the sources manually, run the following command:\n \n ```bash\n $ rustup component add rust-src"}]}