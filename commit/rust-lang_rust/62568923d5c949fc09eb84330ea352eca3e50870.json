{"sha": "62568923d5c949fc09eb84330ea352eca3e50870", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNTY4OTIzZDVjOTQ5ZmMwOWViODQzMzBlYTM1MmVjYTNlNTA4NzA=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-02T11:30:03Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-02T11:30:03Z"}, "message": "Merge #3402\n\n3402: clippy: fix pedantic warnings and run clippy::pedantic lints on the codebase r=oli-obk a=matthiaskrgr\n\nTurn on pedantic lints in dogfood and base tests.\r\n\r\nneedless_bool: fix clippy::items-after-statements\r\nredundant_pattern_matching: fix clippy::similar-names\r\nmods.rs: fix clippy::explicit-iter-loop\r\nreturns.rs: allow clippy::cast-possible-wrap\r\n\r\nFixes #3172\n\nCo-authored-by: Matthias Kr\u00fcger <matthias.krueger@famsik.de>", "tree": {"sha": "ef851274b02b4611639fb408ca8261a52f41eeb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef851274b02b4611639fb408ca8261a52f41eeb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62568923d5c949fc09eb84330ea352eca3e50870", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62568923d5c949fc09eb84330ea352eca3e50870", "html_url": "https://github.com/rust-lang/rust/commit/62568923d5c949fc09eb84330ea352eca3e50870", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62568923d5c949fc09eb84330ea352eca3e50870/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "7c86a9c05c576211932da47c1c3d89ccc925b3da", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c86a9c05c576211932da47c1c3d89ccc925b3da", "html_url": "https://github.com/rust-lang/rust/commit/7c86a9c05c576211932da47c1c3d89ccc925b3da"}, {"sha": "df7cff31dc3288d168ce307c2127edb4e3160616", "url": "https://api.github.com/repos/rust-lang/rust/commits/df7cff31dc3288d168ce307c2127edb4e3160616", "html_url": "https://github.com/rust-lang/rust/commit/df7cff31dc3288d168ce307c2127edb4e3160616"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "f46c558f24da2bbc90481e3b4ac2fa4db155323f", "filename": "ci/base-tests.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62568923d5c949fc09eb84330ea352eca3e50870/ci%2Fbase-tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/62568923d5c949fc09eb84330ea352eca3e50870/ci%2Fbase-tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fbase-tests.sh?ref=62568923d5c949fc09eb84330ea352eca3e50870", "patch": "@@ -27,12 +27,12 @@ cd rustc_tools_util && cargo test && cd ..\n \n CLIPPY=\"`pwd`/target/debug/cargo-clippy clippy\"\n # run clippy on its own codebase...\n-${CLIPPY} --all-targets --all-features -- -D clippy::all -D clippy::internal\n+${CLIPPY} --all-targets --all-features -- -D clippy::all -D clippy::internal -Dclippy::pedantic\n # ... and some test directories\n for dir in clippy_workspace_tests clippy_workspace_tests/src clippy_workspace_tests/subcrate clippy_workspace_tests/subcrate/src clippy_dev rustc_tools_util\n do\n     cd ${dir}\n-    ${CLIPPY} -- -D clippy::all\n+    ${CLIPPY} -- -D clippy::all -D clippy::pedantic\n     cd -\n done\n "}, {"sha": "370b8cf630a180baaeab20d735961879f4f52fe3", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62568923d5c949fc09eb84330ea352eca3e50870/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62568923d5c949fc09eb84330ea352eca3e50870/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=62568923d5c949fc09eb84330ea352eca3e50870", "patch": "@@ -8,7 +8,6 @@\n // except according to those terms.\n \n \n-\n #![allow(clippy::default_hash_types)]\n \n use itertools::Itertools;"}, {"sha": "31982706497d8f965377c17729b73ea65eb9402b", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62568923d5c949fc09eb84330ea352eca3e50870/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62568923d5c949fc09eb84330ea352eca3e50870/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=62568923d5c949fc09eb84330ea352eca3e50870", "patch": "@@ -931,7 +931,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             if let TyKind::Opaque(def_id, _) = ret_ty.sty {\n \n                 // one of the associated types must be Self\n-                for predicate in cx.tcx.predicates_of(def_id).predicates.iter() {\n+                for predicate in &cx.tcx.predicates_of(def_id).predicates {\n                     match predicate {\n                         (Predicate::Projection(poly_projection_predicate), _) => {\n                             let binder = poly_projection_predicate.ty();"}, {"sha": "0019380a34c260a6473d76a16e4bb4595b03330e", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62568923d5c949fc09eb84330ea352eca3e50870/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62568923d5c949fc09eb84330ea352eca3e50870/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=62568923d5c949fc09eb84330ea352eca3e50870", "patch": "@@ -133,10 +133,12 @@ impl LintPass for BoolComparison {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+        use self::Expression::*;\n+\n         if in_macro(e.span) {\n             return;\n         }\n-        use self::Expression::*;\n+\n         if let ExprKind::Binary(Spanned { node: BinOpKind::Eq, .. }, ref left_side, ref right_side) = e.node {\n             match (fetch_bool_expr(left_side), fetch_bool_expr(right_side)) {\n                 (Bool(true), Other) => {"}, {"sha": "7c888b36503a405c8b917795858092883388dbd9", "filename": "clippy_lints/src/redundant_pattern_matching.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/62568923d5c949fc09eb84330ea352eca3e50870/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62568923d5c949fc09eb84330ea352eca3e50870/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs?ref=62568923d5c949fc09eb84330ea352eca3e50870", "patch": "@@ -83,8 +83,8 @@ fn find_sugg_for_if_let<'a, 'tcx>(\n ) {\n     if arms[0].pats.len() == 1 {\n         let good_method = match arms[0].pats[0].node {\n-            PatKind::TupleStruct(ref path, ref pats, _) if pats.len() == 1 => {\n-                if let PatKind::Wild = pats[0].node {\n+            PatKind::TupleStruct(ref path, ref patterns, _) if patterns.len() == 1 => {\n+                if let PatKind::Wild = patterns[0].node {\n                     if match_qpath(path, &paths::RESULT_OK) {\n                         \"is_ok()\"\n                     } else if match_qpath(path, &paths::RESULT_ERR) {\n@@ -135,10 +135,10 @@ fn find_sugg_for_match<'a, 'tcx>(\n \n         let found_good_method = match node_pair {\n             (\n-                PatKind::TupleStruct(ref path_left, ref pats_left, _),\n-                PatKind::TupleStruct(ref path_right, ref pats_right, _)\n-            ) if pats_left.len() == 1 && pats_right.len() == 1 => {\n-                if let (PatKind::Wild, PatKind::Wild) = (&pats_left[0].node, &pats_right[0].node) {\n+                PatKind::TupleStruct(ref path_left, ref patterns_left, _),\n+                PatKind::TupleStruct(ref path_right, ref patterns_right, _)\n+            ) if patterns_left.len() == 1 && patterns_right.len() == 1 => {\n+                if let (PatKind::Wild, PatKind::Wild) = (&patterns_left[0].node, &patterns_right[0].node) {\n                     find_good_method_for_match(\n                         arms,\n                         path_left,\n@@ -153,13 +153,13 @@ fn find_sugg_for_match<'a, 'tcx>(\n                 }\n             },\n             (\n-                PatKind::TupleStruct(ref path_left, ref pats, _),\n+                PatKind::TupleStruct(ref path_left, ref patterns, _),\n                 PatKind::Path(ref path_right)\n             ) | (\n                 PatKind::Path(ref path_left),\n-                PatKind::TupleStruct(ref path_right, ref pats, _)\n-            ) if pats.len() == 1 => {\n-                if let PatKind::Wild = pats[0].node {\n+                PatKind::TupleStruct(ref path_right, ref patterns, _)\n+            ) if patterns.len() == 1 => {\n+                if let PatKind::Wild = patterns[0].node {\n                     find_good_method_for_match(\n                         arms,\n                         path_left,"}, {"sha": "93a0353b2d18e4d4ffe361a02daf4f742df8c0a7", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62568923d5c949fc09eb84330ea352eca3e50870/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62568923d5c949fc09eb84330ea352eca3e50870/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=62568923d5c949fc09eb84330ea352eca3e50870", "patch": "@@ -200,6 +200,7 @@ impl EarlyLintPass for ReturnPass {\n                         cx.sess().source_map()\n                                  .span_to_snippet(span.with_hi(ty.span.hi())) {\n                     if let Some(rpos) = fn_source.rfind(\"->\") {\n+                        #[allow(clippy::cast_possible_truncation)]\n                         (ty.span.with_lo(BytePos(span.lo().0 + rpos as u32)),\n                             Applicability::MachineApplicable)\n                     } else {"}, {"sha": "dcbfa90e6112aadc1c926dee5943505e49251fa6", "filename": "tests/dogfood.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62568923d5c949fc09eb84330ea352eca3e50870/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62568923d5c949fc09eb84330ea352eca3e50870/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=62568923d5c949fc09eb84330ea352eca3e50870", "patch": "@@ -23,7 +23,7 @@ fn dogfood() {\n             .arg(\"--all-features\")\n             .arg(\"--manifest-path\")\n             .arg(root_dir.join(\"Cargo.toml\"))\n-            .args(&[\"--\", \"-W clippy::internal\"])\n+            .args(&[\"--\", \"-W clippy::internal -W clippy::pedantic\"])\n             .env(\"CLIPPY_DOGFOOD\", \"true\")\n             .output()\n             .unwrap();"}]}