{"sha": "78857cc9d39dda9b584647d09787f616bd101c05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ODU3Y2M5ZDM5ZGRhOWI1ODQ2NDdkMDk3ODdmNjE2YmQxMDFjMDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-16T17:30:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-16T17:30:12Z"}, "message": "Auto merge of #5907 - wiomoc:feature/useless-vec-max-size, r=flip1995\n\nappreciative too_large_for_stack in useless `vec!`\n\nFixes: #5847\nchangelog: Add `too_large_for_stack ` configuration option for `USELESS_VEC`", "tree": {"sha": "d8274b8fc3a636d407466753e21ca8ce7792df36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8274b8fc3a636d407466753e21ca8ce7792df36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78857cc9d39dda9b584647d09787f616bd101c05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78857cc9d39dda9b584647d09787f616bd101c05", "html_url": "https://github.com/rust-lang/rust/commit/78857cc9d39dda9b584647d09787f616bd101c05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78857cc9d39dda9b584647d09787f616bd101c05/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dff7e74b27f8b450c7a084f04ec54a198c0f016f", "url": "https://api.github.com/repos/rust-lang/rust/commits/dff7e74b27f8b450c7a084f04ec54a198c0f016f", "html_url": "https://github.com/rust-lang/rust/commit/dff7e74b27f8b450c7a084f04ec54a198c0f016f"}, {"sha": "8514b8407ac83dc02532c82c9188c49967d9a5d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8514b8407ac83dc02532c82c9188c49967d9a5d6", "html_url": "https://github.com/rust-lang/rust/commit/8514b8407ac83dc02532c82c9188c49967d9a5d6"}], "stats": {"total": 115, "additions": 76, "deletions": 39}, "files": [{"sha": "986e9d9bee4d95037fa62ce8c7be28a7de78b081", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78857cc9d39dda9b584647d09787f616bd101c05/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78857cc9d39dda9b584647d09787f616bd101c05/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=78857cc9d39dda9b584647d09787f616bd101c05", "patch": "@@ -933,11 +933,11 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box cognitive_complexity::CognitiveComplexity::new(cognitive_complexity_threshold));\n     let too_large_for_stack = conf.too_large_for_stack;\n     store.register_late_pass(move || box escape::BoxedLocal{too_large_for_stack});\n+    store.register_late_pass(move || box vec::UselessVec{too_large_for_stack});\n     store.register_late_pass(|| box panic_unimplemented::PanicUnimplemented);\n     store.register_late_pass(|| box strings::StringLitAsBytes);\n     store.register_late_pass(|| box derive::Derive);\n     store.register_late_pass(|| box types::CharLitAsU8);\n-    store.register_late_pass(|| box vec::UselessVec);\n     store.register_late_pass(|| box drop_bounds::DropBounds);\n     store.register_late_pass(|| box get_last_with_len::GetLastWithLen);\n     store.register_late_pass(|| box drop_forget_ref::DropForgetRef);"}, {"sha": "292dbd7ad6b480babd426aae3dadc51060b419ac", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78857cc9d39dda9b584647d09787f616bd101c05/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78857cc9d39dda9b584647d09787f616bd101c05/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=78857cc9d39dda9b584647d09787f616bd101c05", "patch": "@@ -138,7 +138,7 @@ define_Conf! {\n     (type_complexity_threshold, \"type_complexity_threshold\": u64, 250),\n     /// Lint: MANY_SINGLE_CHAR_NAMES. The maximum number of single char bindings a scope may have\n     (single_char_binding_names_threshold, \"single_char_binding_names_threshold\": u64, 4),\n-    /// Lint: BOXED_LOCAL. The maximum size of objects (in bytes) that will be linted. Larger objects are ok on the heap\n+    /// Lint: BOXED_LOCAL, USELESS_VEC. The maximum size of objects (in bytes) that will be linted. Larger objects are ok on the heap\n     (too_large_for_stack, \"too_large_for_stack\": u64, 200),\n     /// Lint: ENUM_VARIANT_NAMES. The minimum number of enum variants for the lints about variant names to trigger\n     (enum_variant_name_threshold, \"enum_variant_name_threshold\": u64, 3),"}, {"sha": "84e907d7125de8951f291dc201a4c453d417c74d", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 60, "deletions": 37, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/78857cc9d39dda9b584647d09787f616bd101c05/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78857cc9d39dda9b584647d09787f616bd101c05/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=78857cc9d39dda9b584647d09787f616bd101c05", "patch": "@@ -1,13 +1,20 @@\n-use crate::consts::constant;\n+use crate::consts::{constant, Constant};\n+use crate::rustc_target::abi::LayoutOf;\n use crate::utils::{higher, is_copy, snippet_with_applicability, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, Ty};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n \n+#[allow(clippy::module_name_repetitions)]\n+#[derive(Copy, Clone)]\n+pub struct UselessVec {\n+    pub too_large_for_stack: u64,\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `&vec![..]` when using `&[..]` would\n     /// be possible.\n@@ -31,7 +38,7 @@ declare_clippy_lint! {\n     \"useless `vec!`\"\n }\n \n-declare_lint_pass!(UselessVec => [USELESS_VEC]);\n+impl_lint_pass!(UselessVec => [USELESS_VEC]);\n \n impl<'tcx> LateLintPass<'tcx> for UselessVec {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n@@ -42,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessVec {\n             if let ExprKind::AddrOf(BorrowKind::Ref, _, ref addressee) = expr.kind;\n             if let Some(vec_args) = higher::vec_macro(cx, addressee);\n             then {\n-                check_vec_macro(cx, &vec_args, expr.span);\n+                self.check_vec_macro(cx, &vec_args, expr.span);\n             }\n         }\n \n@@ -60,46 +67,62 @@ impl<'tcx> LateLintPass<'tcx> for UselessVec {\n                     .ctxt()\n                     .outer_expn_data()\n                     .call_site;\n-                check_vec_macro(cx, &vec_args, span);\n+                self.check_vec_macro(cx, &vec_args, span);\n             }\n         }\n     }\n }\n \n-fn check_vec_macro<'tcx>(cx: &LateContext<'tcx>, vec_args: &higher::VecArgs<'tcx>, span: Span) {\n-    let mut applicability = Applicability::MachineApplicable;\n-    let snippet = match *vec_args {\n-        higher::VecArgs::Repeat(elem, len) => {\n-            if constant(cx, cx.typeck_results(), len).is_some() {\n-                format!(\n-                    \"&[{}; {}]\",\n-                    snippet_with_applicability(cx, elem.span, \"elem\", &mut applicability),\n-                    snippet_with_applicability(cx, len.span, \"len\", &mut applicability)\n-                )\n-            } else {\n-                return;\n-            }\n-        },\n-        higher::VecArgs::Vec(args) => {\n-            if let Some(last) = args.iter().last() {\n-                let span = args[0].span.to(last.span);\n+impl UselessVec {\n+    fn check_vec_macro<'tcx>(self, cx: &LateContext<'tcx>, vec_args: &higher::VecArgs<'tcx>, span: Span) {\n+        let mut applicability = Applicability::MachineApplicable;\n+        let snippet = match *vec_args {\n+            higher::VecArgs::Repeat(elem, len) => {\n+                if let Some((Constant::Int(len_constant), _)) = constant(cx, cx.typeck_results(), len) {\n+                    #[allow(clippy::cast_possible_truncation)]\n+                    if len_constant as u64 * size_of(cx, elem) > self.too_large_for_stack {\n+                        return;\n+                    }\n \n-                format!(\"&[{}]\", snippet_with_applicability(cx, span, \"..\", &mut applicability))\n-            } else {\n-                \"&[]\".into()\n-            }\n-        },\n-    };\n+                    format!(\n+                        \"&[{}; {}]\",\n+                        snippet_with_applicability(cx, elem.span, \"elem\", &mut applicability),\n+                        snippet_with_applicability(cx, len.span, \"len\", &mut applicability)\n+                    )\n+                } else {\n+                    return;\n+                }\n+            },\n+            higher::VecArgs::Vec(args) => {\n+                if let Some(last) = args.iter().last() {\n+                    #[allow(clippy::cast_possible_truncation)]\n+                    if args.len() as u64 * size_of(cx, last) > self.too_large_for_stack {\n+                        return;\n+                    }\n+                    let span = args[0].span.to(last.span);\n+\n+                    format!(\"&[{}]\", snippet_with_applicability(cx, span, \"..\", &mut applicability))\n+                } else {\n+                    \"&[]\".into()\n+                }\n+            },\n+        };\n+\n+        span_lint_and_sugg(\n+            cx,\n+            USELESS_VEC,\n+            span,\n+            \"useless use of `vec!`\",\n+            \"you can use a slice directly\",\n+            snippet,\n+            applicability,\n+        );\n+    }\n+}\n \n-    span_lint_and_sugg(\n-        cx,\n-        USELESS_VEC,\n-        span,\n-        \"useless use of `vec!`\",\n-        \"you can use a slice directly\",\n-        snippet,\n-        applicability,\n-    );\n+fn size_of(cx: &LateContext<'_>, expr: &Expr<'_>) -> u64 {\n+    let ty = cx.typeck_results().expr_ty_adjusted(expr);\n+    cx.layout_of(ty).map_or(0, |l| l.size.bytes())\n }\n \n /// Returns the item type of the vector (i.e., the `T` in `Vec<T>`)."}, {"sha": "856771596202efb47f1c755759ccf60040133d00", "filename": "tests/ui/vec.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/78857cc9d39dda9b584647d09787f616bd101c05/tests%2Fui%2Fvec.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/78857cc9d39dda9b584647d09787f616bd101c05/tests%2Fui%2Fvec.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec.fixed?ref=78857cc9d39dda9b584647d09787f616bd101c05", "patch": "@@ -52,4 +52,11 @@ fn main() {\n     for a in vec![NonCopy, NonCopy] {\n         println!(\"{:?}\", a);\n     }\n+\n+    on_vec(&vec![1; 201]); // Ok, size of `vec` higher than `too_large_for_stack`\n+\n+    // Ok\n+    for a in vec![1; 201] {\n+        println!(\"{:?}\", a);\n+    }\n }"}, {"sha": "03b8ee816658ccefbebb278a89e278cc36945691", "filename": "tests/ui/vec.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/78857cc9d39dda9b584647d09787f616bd101c05/tests%2Fui%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78857cc9d39dda9b584647d09787f616bd101c05/tests%2Fui%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec.rs?ref=78857cc9d39dda9b584647d09787f616bd101c05", "patch": "@@ -52,4 +52,11 @@ fn main() {\n     for a in vec![NonCopy, NonCopy] {\n         println!(\"{:?}\", a);\n     }\n+\n+    on_vec(&vec![1; 201]); // Ok, size of `vec` higher than `too_large_for_stack`\n+\n+    // Ok\n+    for a in vec![1; 201] {\n+        println!(\"{:?}\", a);\n+    }\n }"}]}