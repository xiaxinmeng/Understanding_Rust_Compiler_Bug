{"sha": "49cc6d1f843749dab51aa71925f4afd4fad9c419", "node_id": "C_kwDOAAsO6NoAKDQ5Y2M2ZDFmODQzNzQ5ZGFiNTFhYTcxOTI1ZjRhZmQ0ZmFkOWM0MTk", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-04-02T21:27:33Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-04-18T19:50:56Z"}, "message": "Add `SymbolExportInfo`\n\nThis is currently a wrapper to `SymbolExportLevel` but it allows\nlater addition of extra information.", "tree": {"sha": "5f45a62c25bb7147eb66b89111572592500c17a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f45a62c25bb7147eb66b89111572592500c17a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49cc6d1f843749dab51aa71925f4afd4fad9c419", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49cc6d1f843749dab51aa71925f4afd4fad9c419", "html_url": "https://github.com/rust-lang/rust/commit/49cc6d1f843749dab51aa71925f4afd4fad9c419", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49cc6d1f843749dab51aa71925f4afd4fad9c419/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "419e3ba97bea3444a0de987fde85efb37385dba4", "url": "https://api.github.com/repos/rust-lang/rust/commits/419e3ba97bea3444a0de987fde85efb37385dba4", "html_url": "https://github.com/rust-lang/rust/commit/419e3ba97bea3444a0de987fde85efb37385dba4"}], "stats": {"total": 113, "additions": 75, "deletions": 38}, "files": [{"sha": "6bc242b46e043ea932d9c8df162843881aa8fb12", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=49cc6d1f843749dab51aa71925f4afd4fad9c419", "patch": "@@ -16,7 +16,7 @@ use rustc_errors::{FatalError, Handler};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::bug;\n use rustc_middle::dep_graph::WorkProduct;\n-use rustc_middle::middle::exported_symbols::SymbolExportLevel;\n+use rustc_middle::middle::exported_symbols::{SymbolExportInfo, SymbolExportLevel};\n use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc_session::config::{self, CrateType, Lto};\n use tracing::{debug, info};\n@@ -55,8 +55,8 @@ fn prepare_lto(\n         Lto::No => panic!(\"didn't request LTO but we're doing LTO\"),\n     };\n \n-    let symbol_filter = &|&(ref name, level): &(String, SymbolExportLevel)| {\n-        if level.is_below_threshold(export_threshold) {\n+    let symbol_filter = &|&(ref name, info): &(String, SymbolExportInfo)| {\n+        if info.level.is_below_threshold(export_threshold) {\n             Some(CString::new(name.as_str()).unwrap())\n         } else {\n             None"}, {"sha": "a90b8a62c623a473560f1942fe304b1941de3315", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=49cc6d1f843749dab51aa71925f4afd4fad9c419", "patch": "@@ -1526,8 +1526,8 @@ pub(crate) fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<St\n     let mut symbols = Vec::new();\n \n     let export_threshold = symbol_export::crates_export_threshold(&[crate_type]);\n-    for &(symbol, level) in tcx.exported_symbols(LOCAL_CRATE).iter() {\n-        if level.is_below_threshold(export_threshold) {\n+    for &(symbol, info) in tcx.exported_symbols(LOCAL_CRATE).iter() {\n+        if info.level.is_below_threshold(export_threshold) {\n             symbols.push(symbol_export::symbol_name_for_instance_in_crate(\n                 tcx,\n                 symbol,\n@@ -1544,8 +1544,8 @@ pub(crate) fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<St\n         // For each dependency that we are linking to statically ...\n         if *dep_format == Linkage::Static {\n             // ... we add its symbol list to our export list.\n-            for &(symbol, level) in tcx.exported_symbols(cnum).iter() {\n-                if !level.is_below_threshold(export_threshold) {\n+            for &(symbol, info) in tcx.exported_symbols(cnum).iter() {\n+                if !info.level.is_below_threshold(export_threshold) {\n                     continue;\n                 }\n "}, {"sha": "e14ebe3ae48f937c6901d9e936cb5bcc9ab3b597", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 45, "deletions": 15, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=49cc6d1f843749dab51aa71925f4afd4fad9c419", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::Node;\n use rustc_index::vec::IndexVec;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::middle::exported_symbols::{\n-    metadata_symbol_name, ExportedSymbol, SymbolExportLevel,\n+    metadata_symbol_name, ExportedSymbol, SymbolExportInfo, SymbolExportLevel,\n };\n use rustc_middle::ty::query::{ExternProviders, Providers};\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n@@ -42,7 +42,7 @@ pub fn crates_export_threshold(crate_types: &[CrateType]) -> SymbolExportLevel {\n     }\n }\n \n-fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<SymbolExportLevel> {\n+fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<SymbolExportInfo> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     if !tcx.sess.opts.output_types.should_codegen() {\n@@ -129,12 +129,17 @@ fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<\n                 tcx.symbol_name(Instance::mono(tcx, def_id.to_def_id())),\n                 export_level\n             );\n-            (def_id.to_def_id(), export_level)\n+            (def_id.to_def_id(), SymbolExportInfo {\n+                level: export_level,\n+            })\n         })\n         .collect();\n \n     if let Some(id) = tcx.proc_macro_decls_static(()) {\n-        reachable_non_generics.insert(id.to_def_id(), SymbolExportLevel::C);\n+        reachable_non_generics.insert(\n+            id.to_def_id(),\n+            SymbolExportInfo { level: SymbolExportLevel::C },\n+        );\n     }\n \n     reachable_non_generics\n@@ -143,8 +148,8 @@ fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<\n fn is_reachable_non_generic_provider_local(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     let export_threshold = threshold(tcx);\n \n-    if let Some(&level) = tcx.reachable_non_generics(def_id.krate).get(&def_id) {\n-        level.is_below_threshold(export_threshold)\n+    if let Some(&info) = tcx.reachable_non_generics(def_id.krate).get(&def_id) {\n+        info.level.is_below_threshold(export_threshold)\n     } else {\n         false\n     }\n@@ -157,7 +162,7 @@ fn is_reachable_non_generic_provider_extern(tcx: TyCtxt<'_>, def_id: DefId) -> b\n fn exported_symbols_provider_local<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     cnum: CrateNum,\n-) -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportLevel)] {\n+) -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportInfo)] {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     if !tcx.sess.opts.output_types.should_codegen() {\n@@ -167,21 +172,27 @@ fn exported_symbols_provider_local<'tcx>(\n     let mut symbols: Vec<_> = tcx\n         .reachable_non_generics(LOCAL_CRATE)\n         .iter()\n-        .map(|(&def_id, &level)| (ExportedSymbol::NonGeneric(def_id), level))\n+        .map(|(&def_id, &info)| (ExportedSymbol::NonGeneric(def_id), info))\n         .collect();\n \n     if tcx.entry_fn(()).is_some() {\n         let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, \"main\"));\n \n-        symbols.push((exported_symbol, SymbolExportLevel::C));\n+        symbols.push((\n+            exported_symbol,\n+            SymbolExportInfo { level: SymbolExportLevel::C },\n+        ));\n     }\n \n     if tcx.allocator_kind(()).is_some() {\n         for method in ALLOCATOR_METHODS {\n             let symbol_name = format!(\"__rust_{}\", method.name);\n             let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, &symbol_name));\n \n-            symbols.push((exported_symbol, SymbolExportLevel::Rust));\n+            symbols.push((\n+                exported_symbol,\n+                SymbolExportInfo { level: SymbolExportLevel::Rust },\n+            ));\n         }\n     }\n \n@@ -194,7 +205,10 @@ fn exported_symbols_provider_local<'tcx>(\n \n         symbols.extend(PROFILER_WEAK_SYMBOLS.iter().map(|sym| {\n             let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, sym));\n-            (exported_symbol, SymbolExportLevel::C)\n+            (\n+                exported_symbol,\n+                SymbolExportInfo { level: SymbolExportLevel::C },\n+            )\n         }));\n     }\n \n@@ -204,15 +218,21 @@ fn exported_symbols_provider_local<'tcx>(\n \n         symbols.extend(MSAN_WEAK_SYMBOLS.iter().map(|sym| {\n             let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, sym));\n-            (exported_symbol, SymbolExportLevel::C)\n+            (\n+                exported_symbol,\n+                SymbolExportInfo { level: SymbolExportLevel::C },\n+            )\n         }));\n     }\n \n     if tcx.sess.crate_types().contains(&CrateType::Dylib) {\n         let symbol_name = metadata_symbol_name(tcx);\n         let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, &symbol_name));\n \n-        symbols.push((exported_symbol, SymbolExportLevel::Rust));\n+        symbols.push((\n+            exported_symbol,\n+            SymbolExportInfo { level: SymbolExportLevel::Rust },\n+        ));\n     }\n \n     if tcx.sess.opts.share_generics() && tcx.local_crate_exports_generics() {\n@@ -245,7 +265,12 @@ fn exported_symbols_provider_local<'tcx>(\n                 MonoItem::Fn(Instance { def: InstanceDef::Item(def), substs }) => {\n                     if substs.non_erasable_generics().next().is_some() {\n                         let symbol = ExportedSymbol::Generic(def.did, substs);\n-                        symbols.push((symbol, SymbolExportLevel::Rust));\n+                        symbols.push((\n+                            symbol,\n+                            SymbolExportInfo {\n+                                level: SymbolExportLevel::Rust,\n+                            },\n+                        ));\n                     }\n                 }\n                 MonoItem::Fn(Instance { def: InstanceDef::DropGlue(_, Some(ty)), substs }) => {\n@@ -254,7 +279,12 @@ fn exported_symbols_provider_local<'tcx>(\n                         substs.non_erasable_generics().next(),\n                         Some(GenericArgKind::Type(ty))\n                     );\n-                    symbols.push((ExportedSymbol::DropGlue(ty), SymbolExportLevel::Rust));\n+                    symbols.push((\n+                        ExportedSymbol::DropGlue(ty),\n+                        SymbolExportInfo {\n+                            level: SymbolExportLevel::Rust,\n+                        },\n+                    ));\n                 }\n                 _ => {\n                     // Any other symbols don't qualify for sharing"}, {"sha": "7a6e9bfd2b7c60f3c5a50db12134aa6549417992", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=49cc6d1f843749dab51aa71925f4afd4fad9c419", "patch": "@@ -23,7 +23,7 @@ use rustc_incremental::{\n };\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n-use rustc_middle::middle::exported_symbols::SymbolExportLevel;\n+use rustc_middle::middle::exported_symbols::SymbolExportInfo;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::cgu_reuse_tracker::CguReuseTracker;\n use rustc_session::config::{self, CrateType, Lto, OutputFilenames, OutputType};\n@@ -304,7 +304,7 @@ pub type TargetMachineFactoryFn<B> = Arc<\n         + Sync,\n >;\n \n-pub type ExportedSymbols = FxHashMap<CrateNum, Arc<Vec<(String, SymbolExportLevel)>>>;\n+pub type ExportedSymbols = FxHashMap<CrateNum, Arc<Vec<(String, SymbolExportInfo)>>>;\n \n /// Additional resources used by optimize_and_codegen (not module specific)\n #[derive(Clone)]"}, {"sha": "d7a4547bcc60647ba39ccb54a9a81cc80497b200", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=49cc6d1f843749dab51aa71925f4afd4fad9c419", "patch": "@@ -22,7 +22,7 @@ use rustc_hir::lang_items;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::arena::ArenaAllocatable;\n use rustc_middle::metadata::ModChild;\n-use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n+use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo};\n use rustc_middle::middle::stability::DeprecationEntry;\n use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_middle::thir;\n@@ -1405,7 +1405,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     fn exported_symbols(\n         self,\n         tcx: TyCtxt<'tcx>,\n-    ) -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportLevel)] {\n+    ) -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportInfo)] {\n         tcx.arena.alloc_from_iter(self.root.exported_symbols.decode((self, tcx)))\n     }\n "}, {"sha": "1a7c458b6a267ba53fca97ace79291d49388c1d0", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=49cc6d1f843749dab51aa71925f4afd4fad9c419", "patch": "@@ -188,9 +188,9 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         let reachable_non_generics = tcx\n             .exported_symbols(cdata.cnum)\n             .iter()\n-            .filter_map(|&(exported_symbol, export_level)| {\n+            .filter_map(|&(exported_symbol, export_info)| {\n                 if let ExportedSymbol::NonGeneric(def_id) = exported_symbol {\n-                    Some((def_id, export_level))\n+                    Some((def_id, export_info))\n                 } else {\n                     None\n                 }"}, {"sha": "9c94dca9ecde2dee7383fc87c35dc919039b9199", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=49cc6d1f843749dab51aa71925f4afd4fad9c419", "patch": "@@ -21,7 +21,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_middle::middle::exported_symbols::{\n-    metadata_symbol_name, ExportedSymbol, SymbolExportLevel,\n+    metadata_symbol_name, ExportedSymbol, SymbolExportInfo,\n };\n use rustc_middle::mir::interpret;\n use rustc_middle::thir;\n@@ -1844,8 +1844,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     // definition (as that's not defined in this crate).\n     fn encode_exported_symbols(\n         &mut self,\n-        exported_symbols: &[(ExportedSymbol<'tcx>, SymbolExportLevel)],\n-    ) -> Lazy<[(ExportedSymbol<'tcx>, SymbolExportLevel)]> {\n+        exported_symbols: &[(ExportedSymbol<'tcx>, SymbolExportInfo)],\n+    ) -> Lazy<[(ExportedSymbol<'tcx>, SymbolExportInfo)]> {\n         empty_proc_macro!(self);\n         // The metadata symbol name is special. It should not show up in\n         // downstream crates."}, {"sha": "c0b7a787b80e0e968f4f0d32398aef31e71e9c16", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=49cc6d1f843749dab51aa71925f4afd4fad9c419", "patch": "@@ -13,7 +13,7 @@ use rustc_hir::definitions::DefKey;\n use rustc_hir::lang_items;\n use rustc_index::{bit_set::FiniteBitSet, vec::IndexVec};\n use rustc_middle::metadata::ModChild;\n-use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n+use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo};\n use rustc_middle::mir;\n use rustc_middle::thir;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n@@ -218,7 +218,7 @@ crate struct CrateRoot<'tcx> {\n \n     tables: LazyTables<'tcx>,\n \n-    exported_symbols: Lazy!([(ExportedSymbol<'tcx>, SymbolExportLevel)]),\n+    exported_symbols: Lazy!([(ExportedSymbol<'tcx>, SymbolExportInfo)]),\n \n     syntax_contexts: SyntaxContextTable,\n     expn_data: ExpnDataTable,"}, {"sha": "a605e6dfdc1d3f59747d599e34af58a74d97da18", "filename": "compiler/rustc_middle/src/middle/exported_symbols.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs?ref=49cc6d1f843749dab51aa71925f4afd4fad9c419", "patch": "@@ -21,6 +21,13 @@ impl SymbolExportLevel {\n     }\n }\n \n+/// The `SymbolExportInfo` of a symbols specifies symbol-related information\n+/// that is relevant to code generation and linking.\n+#[derive(Eq, PartialEq, Debug, Copy, Clone, TyEncodable, TyDecodable, HashStable)]\n+pub struct SymbolExportInfo {\n+    pub level: SymbolExportLevel,\n+}\n+\n #[derive(Eq, PartialEq, Debug, Copy, Clone, TyEncodable, TyDecodable, HashStable)]\n pub enum ExportedSymbol<'tcx> {\n     NonGeneric(DefId),"}, {"sha": "97f1d96404b5ed6ab9617cc08563294849d89078", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=49cc6d1f843749dab51aa71925f4afd4fad9c419", "patch": "@@ -1355,7 +1355,7 @@ rustc_queries! {\n     // Does not include external symbols that don't have a corresponding DefId,\n     // like the compiler-generated `main` function and so on.\n     query reachable_non_generics(_: CrateNum)\n-        -> DefIdMap<SymbolExportLevel> {\n+        -> DefIdMap<SymbolExportInfo> {\n         storage(ArenaCacheSelector<'tcx>)\n         desc { \"looking up the exported symbols of a crate\" }\n         separate_provide_extern\n@@ -1672,7 +1672,7 @@ rustc_queries! {\n     ///   correspond to a publicly visible symbol in `cnum` machine code.\n     /// - The `exported_symbols` sets of different crates do not intersect.\n     query exported_symbols(_: CrateNum)\n-        -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportLevel)] {\n+        -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportInfo)] {\n         desc { \"exported_symbols\" }\n         separate_provide_extern\n     }"}, {"sha": "6ff061a820ebfc8bf379e71928460b34c5cd8638", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=49cc6d1f843749dab51aa71925f4afd4fad9c419", "patch": "@@ -3,7 +3,7 @@ use crate::infer::canonical::{self, Canonical};\n use crate::lint::LintLevelMap;\n use crate::metadata::ModChild;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n-use crate::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n+use crate::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo};\n use crate::middle::lib_features::LibFeatures;\n use crate::middle::privacy::AccessLevels;\n use crate::middle::region;"}, {"sha": "02f3efa695c345daeb2a333bb08164ff139ec759", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49cc6d1f843749dab51aa71925f4afd4fad9c419/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=49cc6d1f843749dab51aa71925f4afd4fad9c419", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathDataName;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n-use rustc_middle::middle::exported_symbols::SymbolExportLevel;\n+use rustc_middle::middle::exported_symbols::{SymbolExportInfo, SymbolExportLevel};\n use rustc_middle::mir::mono::{CodegenUnit, CodegenUnitNameBuilder, Linkage, Visibility};\n use rustc_middle::mir::mono::{InstantiationMode, MonoItem};\n use rustc_middle::ty::print::characteristic_def_id_of_type;\n@@ -554,7 +554,7 @@ fn default_visibility(tcx: TyCtxt<'_>, id: DefId, is_generic: bool) -> Visibilit\n     // C-export level items remain at `Default`, all other internal\n     // items become `Hidden`.\n     match tcx.reachable_non_generics(id.krate).get(&id) {\n-        Some(SymbolExportLevel::C) => Visibility::Default,\n+        Some(SymbolExportInfo { level: SymbolExportLevel::C, .. }) => Visibility::Default,\n         _ => Visibility::Hidden,\n     }\n }"}]}