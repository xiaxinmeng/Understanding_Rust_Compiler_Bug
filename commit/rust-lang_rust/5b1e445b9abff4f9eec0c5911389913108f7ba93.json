{"sha": "5b1e445b9abff4f9eec0c5911389913108f7ba93", "node_id": "C_kwDOAAsO6NoAKDViMWU0NDViOWFiZmY0ZjllZWMwYzU5MTEzODk5MTMxMDhmN2JhOTM", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-11-07T19:08:40Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-11-07T19:39:45Z"}, "message": "Don't lint `explicit_auto_deref` when the target type is a projection containing a generic argument", "tree": {"sha": "eb067e7144a943dc6262591f80ed03d232ab4e99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb067e7144a943dc6262591f80ed03d232ab4e99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b1e445b9abff4f9eec0c5911389913108f7ba93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b1e445b9abff4f9eec0c5911389913108f7ba93", "html_url": "https://github.com/rust-lang/rust/commit/5b1e445b9abff4f9eec0c5911389913108f7ba93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b1e445b9abff4f9eec0c5911389913108f7ba93/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "213003b8874016aadc61195f049fc2d7e773ccad", "url": "https://api.github.com/repos/rust-lang/rust/commits/213003b8874016aadc61195f049fc2d7e773ccad", "html_url": "https://github.com/rust-lang/rust/commit/213003b8874016aadc61195f049fc2d7e773ccad"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "e2624ee80c0fa8ea0c6037c12afc8240009bbb99", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b1e445b9abff4f9eec0c5911389913108f7ba93/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b1e445b9abff4f9eec0c5911389913108f7ba93/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=5b1e445b9abff4f9eec0c5911389913108f7ba93", "patch": "@@ -1362,6 +1362,7 @@ fn ty_auto_deref_stability<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, precedenc\n                 continue;\n             },\n             ty::Param(_) => TyPosition::new_deref_stable_for_result(precedence, ty),\n+            ty::Projection(_) if ty.has_non_region_param() => TyPosition::new_deref_stable_for_result(precedence, ty),\n             ty::Infer(_) | ty::Error(_) | ty::Bound(..) | ty::Opaque(..) | ty::Placeholder(_) | ty::Dynamic(..) => {\n                 Position::ReborrowStable(precedence).into()\n             },"}, {"sha": "59ff5e4040a3d6b67443d71ea52f6f8b1eb13ba4", "filename": "tests/ui/explicit_auto_deref.fixed", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b1e445b9abff4f9eec0c5911389913108f7ba93/tests%2Fui%2Fexplicit_auto_deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5b1e445b9abff4f9eec0c5911389913108f7ba93/tests%2Fui%2Fexplicit_auto_deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.fixed?ref=5b1e445b9abff4f9eec0c5911389913108f7ba93", "patch": "@@ -266,4 +266,15 @@ fn main() {\n         }\n         x\n     };\n+\n+    trait WithAssoc {\n+        type Assoc: ?Sized;\n+    }\n+    impl WithAssoc for String {\n+        type Assoc = str;\n+    }\n+    fn takes_assoc<T: WithAssoc>(_: &T::Assoc) -> T {\n+        unimplemented!()\n+    }\n+    let _: String = takes_assoc(&*String::new());\n }"}, {"sha": "bcfb60c32788642fafe8e4acedbf326e2ee19c06", "filename": "tests/ui/explicit_auto_deref.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b1e445b9abff4f9eec0c5911389913108f7ba93/tests%2Fui%2Fexplicit_auto_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b1e445b9abff4f9eec0c5911389913108f7ba93/tests%2Fui%2Fexplicit_auto_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.rs?ref=5b1e445b9abff4f9eec0c5911389913108f7ba93", "patch": "@@ -266,4 +266,15 @@ fn main() {\n         }\n         *x\n     };\n+\n+    trait WithAssoc {\n+        type Assoc: ?Sized;\n+    }\n+    impl WithAssoc for String {\n+        type Assoc = str;\n+    }\n+    fn takes_assoc<T: WithAssoc>(_: &T::Assoc) -> T {\n+        unimplemented!()\n+    }\n+    let _: String = takes_assoc(&*String::new());\n }"}]}