{"sha": "0be4b9b9c50db962a134944ada672ace1c69ec7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZTRiOWI5YzUwZGI5NjJhMTM0OTQ0YWRhNjcyYWNlMWM2OWVjN2Q=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-15T22:11:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-15T22:11:44Z"}, "message": "rollup merge of #21088: aochagavia/obsolete\n\nOnly the most recent changes (since November 2014) get a special error.\n\nFixes #20599", "tree": {"sha": "5970e1fcdb2fd50f0223821aec438c506dc4cf79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5970e1fcdb2fd50f0223821aec438c506dc4cf79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0be4b9b9c50db962a134944ada672ace1c69ec7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0be4b9b9c50db962a134944ada672ace1c69ec7d", "html_url": "https://github.com/rust-lang/rust/commit/0be4b9b9c50db962a134944ada672ace1c69ec7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0be4b9b9c50db962a134944ada672ace1c69ec7d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2eacd5739136d6b9b921c6b23f49ad5f8b90db3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2eacd5739136d6b9b921c6b23f49ad5f8b90db3", "html_url": "https://github.com/rust-lang/rust/commit/e2eacd5739136d6b9b921c6b23f49ad5f8b90db3"}, {"sha": "b23289e961eb6678e637d8e6f5dbf7158a5aef71", "url": "https://api.github.com/repos/rust-lang/rust/commits/b23289e961eb6678e637d8e6f5dbf7158a5aef71", "html_url": "https://github.com/rust-lang/rust/commit/b23289e961eb6678e637d8e6f5dbf7158a5aef71"}], "stats": {"total": 230, "additions": 4, "deletions": 226}, "files": [{"sha": "9d03ec73af8b127f0f0fa4e606d9510d23fb89e7", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0be4b9b9c50db962a134944ada672ace1c69ec7d/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be4b9b9c50db962a134944ada672ace1c69ec7d/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=0be4b9b9c50db962a134944ada672ace1c69ec7d", "patch": "@@ -24,14 +24,6 @@ use ptr::P;\n pub enum ObsoleteSyntax {\n     Sized,\n     ForSized,\n-    OwnedType,\n-    OwnedExpr,\n-    OwnedPattern,\n-    OwnedVector,\n-    OwnedSelf,\n-    ImportRenaming,\n-    SubsliceMatch,\n-    ExternCrateRenaming,\n     ProcType,\n     ProcExpr,\n     ClosureType,\n@@ -69,38 +61,6 @@ impl<'a> ParserObsoleteMethods for parser::Parser<'a> {\n                 \"`proc` expression\",\n                 \"use a `move ||` expression instead\",\n             ),\n-            ObsoleteSyntax::OwnedType => (\n-                \"`~` notation for owned pointers\",\n-                \"use `Box<T>` in `std::owned` instead\"\n-            ),\n-            ObsoleteSyntax::OwnedExpr => (\n-                \"`~` notation for owned pointer allocation\",\n-                \"use the `box` operator instead of `~`\"\n-            ),\n-            ObsoleteSyntax::OwnedPattern => (\n-                \"`~` notation for owned pointer patterns\",\n-                \"use the `box` operator instead of `~`\"\n-            ),\n-            ObsoleteSyntax::OwnedVector => (\n-                \"`~[T]` is no longer a type\",\n-                \"use the `Vec` type instead\"\n-            ),\n-            ObsoleteSyntax::OwnedSelf => (\n-                \"`~self` is no longer supported\",\n-                \"write `self: Box<Self>` instead\"\n-            ),\n-            ObsoleteSyntax::ImportRenaming => (\n-                \"`use foo = bar` syntax\",\n-                \"write `use bar as foo` instead\"\n-            ),\n-            ObsoleteSyntax::SubsliceMatch => (\n-                \"subslice match syntax\",\n-                \"instead of `..xs`, write `xs..` in a pattern\"\n-            ),\n-            ObsoleteSyntax::ExternCrateRenaming => (\n-                \"`extern crate foo = bar` syntax\",\n-                \"write `extern crate bar as foo` instead\"\n-            ),\n             ObsoleteSyntax::ClosureType => (\n                 \"`|uint| -> bool` closure type syntax\",\n                 \"use unboxed closures instead, no type annotation needed\""}, {"sha": "2813f94a8459a2da4c5d11ab23afe3accdc067eb", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 128, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/0be4b9b9c50db962a134944ada672ace1c69ec7d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be4b9b9c50db962a134944ada672ace1c69ec7d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0be4b9b9c50db962a134944ada672ace1c69ec7d", "patch": "@@ -71,7 +71,7 @@ use parse::attr::ParserAttr;\n use parse::classify;\n use parse::common::{SeqSep, seq_sep_none, seq_sep_trailing_allowed};\n use parse::lexer::{Reader, TokenAndSpan};\n-use parse::obsolete::*;\n+use parse::obsolete::{ParserObsoleteMethods, ObsoleteSyntax};\n use parse::token::{self, MatchNt, SubstNt, SpecialVarNt, InternedString};\n use parse::token::{keywords, special_idents, SpecialMacroVar};\n use parse::{new_sub_parser_from_file, ParseSess};\n@@ -1404,22 +1404,6 @@ impl<'a> Parser<'a> {\n         MutTy { ty: t, mutbl: mutbl }\n     }\n \n-    /// Parse [mut/const/imm] ID : TY\n-    /// now used only by obsolete record syntax parser...\n-    pub fn parse_ty_field(&mut self) -> TypeField {\n-        let lo = self.span.lo;\n-        let mutbl = self.parse_mutability();\n-        let id = self.parse_ident();\n-        self.expect(&token::Colon);\n-        let ty = self.parse_ty_sum();\n-        let hi = ty.span.hi;\n-        ast::TypeField {\n-            ident: id,\n-            mt: MutTy { ty: ty, mutbl: mutbl },\n-            span: mk_sp(lo, hi),\n-        }\n-    }\n-\n     /// Parse optional return type [ -> TY ] in function decl\n     pub fn parse_ret_ty(&mut self) -> FunctionRetTy {\n         if self.eat(&token::RArrow) {\n@@ -1506,17 +1490,6 @@ impl<'a> Parser<'a> {\n             } else {\n                 TyTup(ts)\n             }\n-        } else if self.token == token::Tilde {\n-            // OWNED POINTER\n-            self.bump();\n-            let last_span = self.last_span;\n-            match self.token {\n-                token::OpenDelim(token::Bracket) => {\n-                    self.obsolete(last_span, ObsoleteSyntax::OwnedVector)\n-                }\n-                _ => self.obsolete(last_span, ObsoleteSyntax::OwnedType)\n-            }\n-            TyTup(vec![self.parse_ty()])\n         } else if self.check(&token::BinOp(token::Star)) {\n             // STAR POINTER (bare pointer?)\n             self.bump();\n@@ -2830,20 +2803,6 @@ impl<'a> Parser<'a> {\n             hi = e.span.hi;\n             ex = ExprAddrOf(m, e);\n           }\n-          token::Tilde => {\n-            self.bump();\n-            let last_span = self.last_span;\n-            match self.token {\n-                token::OpenDelim(token::Bracket) => {\n-                    self.obsolete(last_span, ObsoleteSyntax::OwnedVector)\n-                },\n-                _ => self.obsolete(last_span, ObsoleteSyntax::OwnedExpr)\n-            }\n-\n-            let e = self.parse_prefix_expr();\n-            hi = e.span.hi;\n-            ex = self.mk_unary(UnUniq, e);\n-          }\n           token::DotDot if !self.restrictions.contains(RESTRICTION_NO_DOTS) => {\n             // A range, closed above: `..expr`.\n             self.bump();\n@@ -3249,10 +3208,6 @@ impl<'a> Parser<'a> {\n                             span: self.span,\n                         }));\n                         before_slice = false;\n-                    } else {\n-                        let _ = self.parse_pat();\n-                        let span = self.span;\n-                        self.obsolete(span, ObsoleteSyntax::SubsliceMatch);\n                     }\n                     continue\n                 }\n@@ -3361,20 +3316,6 @@ impl<'a> Parser<'a> {\n                 span: mk_sp(lo, hi)\n             })\n           }\n-          token::Tilde => {\n-            // parse ~pat\n-            self.bump();\n-            let sub = self.parse_pat();\n-            pat = PatBox(sub);\n-            let last_span = self.last_span;\n-            hi = last_span.hi;\n-            self.obsolete(last_span, ObsoleteSyntax::OwnedPattern);\n-            return P(ast::Pat {\n-                id: ast::DUMMY_NODE_ID,\n-                node: pat,\n-                span: mk_sp(lo, hi)\n-            })\n-          }\n           token::BinOp(token::And) | token::AndAnd => {\n             // parse &pat and &mut pat\n             let lo = self.span.lo;\n@@ -4483,16 +4424,6 @@ impl<'a> Parser<'a> {\n                 self_ident_hi = self.last_span.hi;\n                 eself\n             }\n-            token::Tilde => {\n-                // We need to make sure it isn't a type\n-                if self.look_ahead(1, |t| t.is_keyword(keywords::Self)) {\n-                    self.bump();\n-                    drop(self.expect_self_ident());\n-                    let last_span = self.last_span;\n-                    self.obsolete(last_span, ObsoleteSyntax::OwnedSelf)\n-                }\n-                SelfStatic\n-            }\n             token::BinOp(token::Star) => {\n                 // Possibly \"*self\" or \"*mut self\" -- not supported. Try to avoid\n                 // emitting cryptic \"unexpected token\" errors.\n@@ -4533,15 +4464,6 @@ impl<'a> Parser<'a> {\n                     } else {\n                         SelfValue(self_ident)\n                     }\n-                } else if self.token.is_mutability() &&\n-                        self.look_ahead(1, |t| *t == token::Tilde) &&\n-                        self.look_ahead(2, |t| t.is_keyword(keywords::Self)) {\n-                    mutbl_self = self.parse_mutability();\n-                    self.bump();\n-                    drop(self.expect_self_ident());\n-                    let last_span = self.last_span;\n-                    self.obsolete(last_span, ObsoleteSyntax::OwnedSelf);\n-                    SelfStatic\n                 } else {\n                     SelfStatic\n                 }\n@@ -5422,13 +5344,7 @@ impl<'a> Parser<'a> {\n         let (maybe_path, ident) = match self.token {\n             token::Ident(..) => {\n                 let the_ident = self.parse_ident();\n-                let path = if self.token == token::Eq {\n-                    self.bump();\n-                    let path = self.parse_str();\n-                    let span = self.span;\n-                    self.obsolete(span, ObsoleteSyntax::ExternCrateRenaming);\n-                    Some(path)\n-                } else if self.eat_keyword(keywords::As) {\n+                let path = if self.eat_keyword(keywords::As) {\n                     // skip the ident if there is one\n                     if self.token.is_ident() { self.bump(); }\n \n@@ -5698,17 +5614,7 @@ impl<'a> Parser<'a> {\n         }\n         // either a view item or an item:\n         if self.eat_keyword(keywords::Extern) {\n-            let next_is_mod = self.eat_keyword(keywords::Mod);\n-\n-            if next_is_mod || self.eat_keyword(keywords::Crate) {\n-                if next_is_mod {\n-                    let last_span = self.last_span;\n-                    self.span_err(mk_sp(lo, last_span.hi),\n-                                 &format!(\"`extern mod` is obsolete, use \\\n-                                          `extern crate` instead \\\n-                                          to refer to external \\\n-                                          crates.\")[])\n-                }\n+            if self.eat_keyword(keywords::Crate) {\n                 return self.parse_item_extern_crate(lo, visibility, attrs);\n             }\n \n@@ -6075,35 +5981,7 @@ impl<'a> Parser<'a> {\n \n         let first_ident = self.parse_ident();\n         let mut path = vec!(first_ident);\n-        match self.token {\n-          token::Eq => {\n-            // x = foo::bar\n-            self.bump();\n-            let path_lo = self.span.lo;\n-            path = vec!(self.parse_ident());\n-            while self.check(&token::ModSep) {\n-                self.bump();\n-                let id = self.parse_ident();\n-                path.push(id);\n-            }\n-            let span = mk_sp(path_lo, self.span.hi);\n-            self.obsolete(span, ObsoleteSyntax::ImportRenaming);\n-            let path = ast::Path {\n-                span: span,\n-                global: false,\n-                segments: path.into_iter().map(|identifier| {\n-                    ast::PathSegment {\n-                        identifier: identifier,\n-                        parameters: ast::PathParameters::none(),\n-                    }\n-                }).collect()\n-            };\n-            return P(spanned(lo, self.span.hi,\n-                             ViewPathSimple(first_ident, path,\n-                                           ast::DUMMY_NODE_ID)));\n-          }\n-\n-          token::ModSep => {\n+        if let token::ModSep = self.token {\n             // foo::bar or foo::{a,b,c} or foo::*\n             while self.check(&token::ModSep) {\n                 self.bump();\n@@ -6156,8 +6034,6 @@ impl<'a> Parser<'a> {\n                   _ => break\n                 }\n             }\n-          }\n-          _ => ()\n         }\n         let mut rename_to = path[path.len() - 1u];\n         let path = ast::Path {"}, {"sha": "d290d5536a4a27a3ce8f421707e648d5f75a2c60", "filename": "src/test/compile-fail/obsolete-tilde.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e2eacd5739136d6b9b921c6b23f49ad5f8b90db3/src%2Ftest%2Fcompile-fail%2Fobsolete-tilde.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2eacd5739136d6b9b921c6b23f49ad5f8b90db3/src%2Ftest%2Fcompile-fail%2Fobsolete-tilde.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobsolete-tilde.rs?ref=e2eacd5739136d6b9b921c6b23f49ad5f8b90db3", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that ~ pointers give an obsolescence message.\n-\n-fn foo(x: ~isize) {} //~ ERROR obsolete syntax: `~` notation for owned pointers\n-fn bar(x: ~str) {} //~ ERROR obsolete syntax: `~` notation for owned pointers\n-fn baz(x: ~[isize]) {} //~ ERROR obsolete syntax: `~[T]` is no longer a type\n-\n-fn main() {\n-    let x = ~4is; //~ ERROR obsolete syntax: `~` notation for owned pointer allocation\n-    let y = ~\"hello\"; //~ ERROR obsolete syntax: `~` notation for owned pointer allocation\n-    let z = ~[1is, 2, 3]; //~ ERROR obsolete syntax: `~[T]` is no longer a type\n-}"}, {"sha": "ad5fac3e21e88fd34b603899eab1f792f7eb0775", "filename": "src/test/compile-fail/obsolete-tuple-struct-deref.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e2eacd5739136d6b9b921c6b23f49ad5f8b90db3/src%2Ftest%2Fcompile-fail%2Fobsolete-tuple-struct-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2eacd5739136d6b9b921c6b23f49ad5f8b90db3/src%2Ftest%2Fcompile-fail%2Fobsolete-tuple-struct-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobsolete-tuple-struct-deref.rs?ref=e2eacd5739136d6b9b921c6b23f49ad5f8b90db3", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    struct S(isize);\n-    let s = S(0);\n-    let x = *s; //~ ERROR single-field tuple-structs can no longer be dereferenced\n-}"}, {"sha": "2715b31d1960edeb448cf4cdb2095d08c7b8d6f5", "filename": "src/test/compile-fail/vec-matching-obsolete-syntax.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e2eacd5739136d6b9b921c6b23f49ad5f8b90db3/src%2Ftest%2Fcompile-fail%2Fvec-matching-obsolete-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2eacd5739136d6b9b921c6b23f49ad5f8b90db3/src%2Ftest%2Fcompile-fail%2Fvec-matching-obsolete-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-matching-obsolete-syntax.rs?ref=e2eacd5739136d6b9b921c6b23f49ad5f8b90db3", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    let x = [1is, 2, 3];\n-    match x {\n-        [a, b, ..c] => {    //~ ERROR obsolete syntax\n-            assert_eq!(a, 1);\n-            assert_eq!(b, 2);\n-            let expected: &[_] = &[3];\n-            assert_eq!(c, expected);\n-        }\n-    }\n-}\n-"}]}