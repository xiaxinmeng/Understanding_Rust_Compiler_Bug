{"sha": "4967b811dda4eae3910514ea8788f0fab256ad8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NjdiODExZGRhNGVhZTM5MTA1MTRlYTg3ODhmMGZhYjI1NmFkOGM=", "commit": {"author": {"name": "Jess Balint", "email": "jbalint@gmail.com", "date": "2020-05-23T00:09:37Z"}, "committer": {"name": "Jess Balint", "email": "jbalint@gmail.com", "date": "2020-05-23T00:09:37Z"}, "message": "tweak syntax", "tree": {"sha": "058b97f958ccfbecce06cad49df6f59d0c9f9fd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/058b97f958ccfbecce06cad49df6f59d0c9f9fd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4967b811dda4eae3910514ea8788f0fab256ad8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4967b811dda4eae3910514ea8788f0fab256ad8c", "html_url": "https://github.com/rust-lang/rust/commit/4967b811dda4eae3910514ea8788f0fab256ad8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4967b811dda4eae3910514ea8788f0fab256ad8c/comments", "author": {"login": "jbalint", "id": 99260, "node_id": "MDQ6VXNlcjk5MjYw", "avatar_url": "https://avatars.githubusercontent.com/u/99260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbalint", "html_url": "https://github.com/jbalint", "followers_url": "https://api.github.com/users/jbalint/followers", "following_url": "https://api.github.com/users/jbalint/following{/other_user}", "gists_url": "https://api.github.com/users/jbalint/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbalint/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbalint/subscriptions", "organizations_url": "https://api.github.com/users/jbalint/orgs", "repos_url": "https://api.github.com/users/jbalint/repos", "events_url": "https://api.github.com/users/jbalint/events{/privacy}", "received_events_url": "https://api.github.com/users/jbalint/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbalint", "id": 99260, "node_id": "MDQ6VXNlcjk5MjYw", "avatar_url": "https://avatars.githubusercontent.com/u/99260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbalint", "html_url": "https://github.com/jbalint", "followers_url": "https://api.github.com/users/jbalint/followers", "following_url": "https://api.github.com/users/jbalint/following{/other_user}", "gists_url": "https://api.github.com/users/jbalint/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbalint/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbalint/subscriptions", "organizations_url": "https://api.github.com/users/jbalint/orgs", "repos_url": "https://api.github.com/users/jbalint/repos", "events_url": "https://api.github.com/users/jbalint/events{/privacy}", "received_events_url": "https://api.github.com/users/jbalint/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d42fd8efb6019c08371007df68ef3a38c2e86a45", "url": "https://api.github.com/repos/rust-lang/rust/commits/d42fd8efb6019c08371007df68ef3a38c2e86a45", "html_url": "https://github.com/rust-lang/rust/commit/d42fd8efb6019c08371007df68ef3a38c2e86a45"}], "stats": {"total": 89, "additions": 40, "deletions": 49}, "files": [{"sha": "922213607051cbcfa2696b8156ce341407c614b4", "filename": "crates/ra_assists/src/handlers/change_lifetime_anon_to_named.rs", "status": "modified", "additions": 40, "deletions": 49, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/4967b811dda4eae3910514ea8788f0fab256ad8c/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_lifetime_anon_to_named.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4967b811dda4eae3910514ea8788f0fab256ad8c/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_lifetime_anon_to_named.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_lifetime_anon_to_named.rs?ref=4967b811dda4eae3910514ea8788f0fab256ad8c", "patch": "@@ -37,57 +37,48 @@ pub(crate) fn change_lifetime_anon_to_named(acc: &mut Assists, ctx: &AssistConte\n         // only allow naming the last anonymous lifetime\n         return None;\n     }\n-    match lifetime_arg.syntax().ancestors().find_map(ast::ImplDef::cast) {\n-        Some(impl_def) => {\n-            // get the `impl` keyword so we know where to add the lifetime argument\n-            let impl_kw = impl_def.syntax().first_child_or_token()?.into_token()?;\n-            if impl_kw.kind() != SyntaxKind::IMPL_KW {\n-                return None;\n-            }\n-            let new_lifetime_param = match impl_def.type_param_list() {\n+    let impl_def = lifetime_arg.syntax().ancestors().find_map(ast::ImplDef::cast)?;\n+    // get the `impl` keyword so we know where to add the lifetime argument\n+    let impl_kw = impl_def.syntax().first_child_or_token()?.into_token()?;\n+    if impl_kw.kind() != SyntaxKind::IMPL_KW {\n+        return None;\n+    }\n+    let new_lifetime_param = match impl_def.type_param_list() {\n+        Some(type_params) => {\n+            let used_lifetime_params: HashSet<_> = type_params\n+                .lifetime_params()\n+                .map(|p| {\n+                    let mut param_name = p.syntax().text().to_string();\n+                    param_name.remove(0);\n+                    param_name\n+                })\n+                .collect();\n+            (b'a'..=b'z')\n+                .map(char::from)\n+                .find(|c| !used_lifetime_params.contains(&c.to_string()))?\n+        }\n+        None => 'a',\n+    };\n+    acc.add(\n+        AssistId(\"change_lifetime_anon_to_named\"),\n+        \"Give anonymous lifetime a name\",\n+        lifetime_arg.syntax().text_range(),\n+        |builder| {\n+            match impl_def.type_param_list() {\n                 Some(type_params) => {\n-                    let used_lifetime_params: HashSet<_> = type_params\n-                        .lifetime_params()\n-                        .map(|p| {\n-                            let mut param_name = p.syntax().text().to_string();\n-                            param_name.remove(0);\n-                            param_name\n-                        })\n-                        .collect();\n-                    (b'a'..=b'z')\n-                        .map(char::from)\n-                        .find(|c| !used_lifetime_params.contains(&c.to_string()))?\n-                }\n-                None => 'a',\n-            };\n-            acc.add(\n-                AssistId(\"change_lifetime_anon_to_named\"),\n-                \"Give anonymous lifetime a name\",\n-                lifetime_arg.syntax().text_range(),\n-                |builder| {\n-                    match impl_def.type_param_list() {\n-                        Some(type_params) => {\n-                            builder.insert(\n-                                (u32::from(type_params.syntax().text_range().end()) - 1).into(),\n-                                format!(\", '{}\", new_lifetime_param),\n-                            );\n-                        }\n-                        None => {\n-                            builder.insert(\n-                                impl_kw.text_range().end(),\n-                                format!(\"<'{}>\", new_lifetime_param),\n-                            );\n-                        }\n-                    }\n-                    builder.replace(\n-                        lifetime_arg.syntax().text_range(),\n-                        format!(\"'{}\", new_lifetime_param),\n+                    builder.insert(\n+                        (u32::from(type_params.syntax().text_range().end()) - 1).into(),\n+                        format!(\", '{}\", new_lifetime_param),\n                     );\n-                },\n-            )\n-        }\n-        _ => None,\n-    }\n+                }\n+                None => {\n+                    builder\n+                        .insert(impl_kw.text_range().end(), format!(\"<'{}>\", new_lifetime_param));\n+                }\n+            }\n+            builder.replace(lifetime_arg.syntax().text_range(), format!(\"'{}\", new_lifetime_param));\n+        },\n+    )\n }\n \n #[cfg(test)]"}]}