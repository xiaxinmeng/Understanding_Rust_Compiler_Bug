{"sha": "379c934f3f0c1266e2a4112a4babe7ec0a6368ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3OWM5MzRmM2YwYzEyNjZlMmE0MTEyYTRiYWJlN2VjMGE2MzY4Y2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-12T19:17:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-12T19:17:09Z"}, "message": "Auto merge of #3535 - sinkuu:fixes, r=phansch\n\nFix some problems\n\nFixes #2892, #3199, #2841, #3476", "tree": {"sha": "46af71a8ba1951e11bbd606672e20994f4646259", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46af71a8ba1951e11bbd606672e20994f4646259"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/379c934f3f0c1266e2a4112a4babe7ec0a6368ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/379c934f3f0c1266e2a4112a4babe7ec0a6368ce", "html_url": "https://github.com/rust-lang/rust/commit/379c934f3f0c1266e2a4112a4babe7ec0a6368ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/379c934f3f0c1266e2a4112a4babe7ec0a6368ce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "777c9099e73626a6e536b156ccf2aafc3df506f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/777c9099e73626a6e536b156ccf2aafc3df506f6", "html_url": "https://github.com/rust-lang/rust/commit/777c9099e73626a6e536b156ccf2aafc3df506f6"}, {"sha": "eba44e1c67cd08148c7e67ce6255889b7c581b98", "url": "https://api.github.com/repos/rust-lang/rust/commits/eba44e1c67cd08148c7e67ce6255889b7c581b98", "html_url": "https://github.com/rust-lang/rust/commit/eba44e1c67cd08148c7e67ce6255889b7c581b98"}], "stats": {"total": 145, "additions": 123, "deletions": 22}, "files": [{"sha": "86c345b025ca16cfba9ed7944ca37f07f73dc7cc", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/379c934f3f0c1266e2a4112a4babe7ec0a6368ce/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/379c934f3f0c1266e2a4112a4babe7ec0a6368ce/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=379c934f3f0c1266e2a4112a4babe7ec0a6368ce", "patch": "@@ -17,7 +17,7 @@ use crate::rustc_errors::Applicability;\n use crate::syntax::source_map::Span;\n use crate::utils::paths;\n use crate::utils::sugg::DiagnosticBuilderExt;\n-use crate::utils::{get_trait_def_id, implements_trait, return_ty, same_tys, span_lint_and_then};\n+use crate::utils::{get_trait_def_id, implements_trait, return_ty, same_tys, span_lint_node_and_then};\n use if_chain::if_chain;\n \n /// **What it does:** Checks for types with a `fn new() -> Self` method and no\n@@ -165,9 +165,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                                     }\n \n                                     if let Some(sp) = can_derive_default(self_ty, cx, default_trait_id) {\n-                                        span_lint_and_then(\n+                                        span_lint_node_and_then(\n                                             cx,\n                                             NEW_WITHOUT_DEFAULT_DERIVE,\n+                                            id,\n                                             impl_item.span,\n                                             &format!(\n                                                 \"you should consider deriving a `Default` implementation for `{}`\",\n@@ -183,9 +184,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                                                 );\n                                             });\n                                     } else {\n-                                        span_lint_and_then(\n+                                        span_lint_node_and_then(\n                                             cx,\n                                             NEW_WITHOUT_DEFAULT,\n+                                            id,\n                                             impl_item.span,\n                                             &format!(\n                                                 \"you should consider adding a `Default` implementation for `{}`\","}, {"sha": "02935cf773d271d5346f60a5b0228e0912c92721", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/379c934f3f0c1266e2a4112a4babe7ec0a6368ce/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/379c934f3f0c1266e2a4112a4babe7ec0a6368ce/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=379c934f3f0c1266e2a4112a4babe7ec0a6368ce", "patch": "@@ -10,7 +10,7 @@\n use crate::rustc::hir::*;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::utils::{is_automatically_derived, span_lint};\n+use crate::utils::{is_automatically_derived, span_lint_node};\n use if_chain::if_chain;\n \n /// **What it does:** Checks for manual re-implementations of `PartialEq::ne`.\n@@ -56,10 +56,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             then {\n                 for impl_item in impl_items {\n                     if impl_item.ident.name == \"ne\" {\n-                        span_lint(cx,\n-                                  PARTIALEQ_NE_IMPL,\n-                                  impl_item.span,\n-                                  \"re-implementing `PartialEq::ne` is unnecessary\")\n+                        span_lint_node(\n+                            cx,\n+                            PARTIALEQ_NE_IMPL,\n+                            impl_item.id.node_id,\n+                            impl_item.span,\n+                            \"re-implementing `PartialEq::ne` is unnecessary\",\n+                        );\n                     }\n                 }\n             }"}, {"sha": "057b4850e4f4ad0d7c082348c0480d5da5cd51a5", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/379c934f3f0c1266e2a4112a4babe7ec0a6368ce/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/379c934f3f0c1266e2a4112a4babe7ec0a6368ce/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=379c934f3f0c1266e2a4112a4babe7ec0a6368ce", "patch": "@@ -17,7 +17,7 @@ use if_chain::if_chain;\n \n use crate::rustc_errors::Applicability;\n use crate::utils::paths::*;\n-use crate::utils::{match_def_path, match_type, span_lint_and_then};\n+use crate::utils::{match_def_path, match_type, span_lint_and_then, SpanlessEq};\n \n /// **What it does:** Checks for expressions that could be replaced by the question mark operator\n ///\n@@ -64,14 +64,40 @@ impl Pass {\n     /// If it matches, it will suggest to use the question mark operator instead\n     fn check_is_none_and_early_return_none(cx: &LateContext<'_, '_>, expr: &Expr) {\n         if_chain! {\n-            if let ExprKind::If(ref if_expr, ref body, _) = expr.node;\n-            if let ExprKind::MethodCall(ref segment, _, ref args) = if_expr.node;\n+            if let ExprKind::If(if_expr, body, else_) = &expr.node;\n+            if let ExprKind::MethodCall(segment, _, args) = &if_expr.node;\n             if segment.ident.name == \"is_none\";\n             if Self::expression_returns_none(cx, body);\n             if let Some(subject) = args.get(0);\n             if Self::is_option(cx, subject);\n \n             then {\n+                if let Some(else_) = else_ {\n+                    if_chain! {\n+                        if let ExprKind::Block(block, None) = &else_.node;\n+                        if block.stmts.len() == 0;\n+                        if let Some(block_expr) = &block.expr;\n+                        if SpanlessEq::new(cx).ignore_fn().eq_expr(subject, block_expr);\n+                        then {\n+                            span_lint_and_then(\n+                                cx,\n+                                QUESTION_MARK,\n+                                expr.span,\n+                                \"this block may be rewritten with the `?` operator\",\n+                                |db| {\n+                                    db.span_suggestion_with_applicability(\n+                                        expr.span,\n+                                        \"replace_it_with\",\n+                                        format!(\"Some({}?)\", Sugg::hir(cx, subject, \"..\")),\n+                                        Applicability::MaybeIncorrect, // snippet\n+                                    );\n+                                }\n+                            )\n+                        }\n+                    }\n+                    return;\n+                }\n+\n                 span_lint_and_then(\n                     cx,\n                     QUESTION_MARK,\n@@ -84,7 +110,7 @@ impl Pass {\n                             expr.span,\n                             \"replace_it_with\",\n                             format!(\"{}?;\", receiver_str),\n-                            Applicability::MachineApplicable, // snippet\n+                            Applicability::MaybeIncorrect, // snippet\n                         );\n                     }\n                 )\n@@ -133,9 +159,13 @@ impl Pass {\n             }\n         }\n \n-        // Check if the block has an implicit return expression\n-        if let Some(ref ret_expr) = block.expr {\n-            return Some(ret_expr.clone());\n+        // Check for `return` without a semicolon.\n+        if_chain! {\n+            if block.stmts.len() == 0;\n+            if let Some(ExprKind::Ret(Some(ret_expr))) = block.expr.as_ref().map(|e| &e.node);\n+            then {\n+                return Some(ret_expr.clone());\n+            }\n         }\n \n         None"}, {"sha": "d8d80f2d128f70e251a8d33304a1340c95ebf4f1", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/379c934f3f0c1266e2a4112a4babe7ec0a6368ce/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/379c934f3f0c1266e2a4112a4babe7ec0a6368ce/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=379c934f3f0c1266e2a4112a4babe7ec0a6368ce", "patch": "@@ -57,7 +57,10 @@ impl EarlyLintPass for RedundantFieldNames {\n                     continue;\n                 }\n                 if let ExprKind::Path(None, path) = &field.expr.node {\n-                    if path.segments.len() == 1 && path.segments[0].ident == field.ident {\n+                    if path.segments.len() == 1\n+                        && path.segments[0].ident == field.ident\n+                        && path.segments[0].args.is_none()\n+                    {\n                         span_lint_and_sugg(\n                             cx,\n                             REDUNDANT_FIELD_NAMES,"}, {"sha": "2e715a6f8ba8631c03f7f5b09ea45224e814dfbd", "filename": "tests/ui/new_without_default.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/379c934f3f0c1266e2a4112a4babe7ec0a6368ce/tests%2Fui%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/379c934f3f0c1266e2a4112a4babe7ec0a6368ce/tests%2Fui%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.rs?ref=379c934f3f0c1266e2a4112a4babe7ec0a6368ce", "patch": "@@ -139,4 +139,18 @@ impl<'a, T: 'a> OptionRefWrapper<'a, T> {\n     }\n }\n \n+pub struct Allow(Foo);\n+\n+impl Allow {\n+    #[allow(clippy::new_without_default)]\n+    pub fn new() -> Self { unimplemented!() }\n+}\n+\n+pub struct AllowDerive;\n+\n+impl AllowDerive {\n+    #[allow(clippy::new_without_default_derive)]\n+    pub fn new() -> Self { unimplemented!() }\n+}\n+\n fn main() {}"}, {"sha": "fabeee24b305e083716a297458fec3e5155f87d1", "filename": "tests/ui/partialeq_ne_impl.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/379c934f3f0c1266e2a4112a4babe7ec0a6368ce/tests%2Fui%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/379c934f3f0c1266e2a4112a4babe7ec0a6368ce/tests%2Fui%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpartialeq_ne_impl.rs?ref=379c934f3f0c1266e2a4112a4babe7ec0a6368ce", "patch": "@@ -20,4 +20,12 @@ impl PartialEq for Foo {\n     }\n }\n \n+struct Bar;\n+\n+impl PartialEq for Bar {\n+    fn eq(&self, _: &Bar) -> bool { true }\n+    #[allow(clippy::partialeq_ne_impl)]\n+    fn ne(&self, _: &Bar) -> bool { false }\n+}\n+\n fn main() {}"}, {"sha": "b1edec32eeeb0740c18485661304f6bcad90c036", "filename": "tests/ui/question_mark.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/379c934f3f0c1266e2a4112a4babe7ec0a6368ce/tests%2Fui%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/379c934f3f0c1266e2a4112a4babe7ec0a6368ce/tests%2Fui%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.rs?ref=379c934f3f0c1266e2a4112a4babe7ec0a6368ce", "patch": "@@ -42,11 +42,22 @@ pub struct SomeStruct {\n }\n \n impl SomeStruct {\n+    #[rustfmt::skip]\n     pub fn func(&self) -> Option<u32> {\n         if (self.opt).is_none() {\n             return None;\n         }\n \n+        if self.opt.is_none() {\n+            return None\n+        }\n+\n+        let _ = if self.opt.is_none() {\n+            return None;\n+        } else {\n+            self.opt\n+        };\n+\n         self.opt\n     }\n }"}, {"sha": "c9d5538f36f458b736ab755cf13629dcb267f4a7", "filename": "tests/ui/question_mark.stderr", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/379c934f3f0c1266e2a4112a4babe7ec0a6368ce/tests%2Fui%2Fquestion_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/379c934f3f0c1266e2a4112a4babe7ec0a6368ce/tests%2Fui%2Fquestion_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.stderr?ref=379c934f3f0c1266e2a4112a4babe7ec0a6368ce", "patch": "@@ -9,12 +9,31 @@ error: this block may be rewritten with the `?` operator\n    = note: `-D clippy::question-mark` implied by `-D warnings`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:46:9\n+  --> $DIR/question_mark.rs:47:9\n    |\n-46 | /         if (self.opt).is_none() {\n-47 | |             return None;\n-48 | |         }\n+47 | /         if (self.opt).is_none() {\n+48 | |             return None;\n+49 | |         }\n    | |_________^ help: replace_it_with: `(self.opt)?;`\n \n-error: aborting due to 2 previous errors\n+error: this block may be rewritten with the `?` operator\n+  --> $DIR/question_mark.rs:51:9\n+   |\n+51 | /         if self.opt.is_none() {\n+52 | |             return None\n+53 | |         }\n+   | |_________^ help: replace_it_with: `self.opt?;`\n+\n+error: this block may be rewritten with the `?` operator\n+  --> $DIR/question_mark.rs:55:17\n+   |\n+55 |           let _ = if self.opt.is_none() {\n+   |  _________________^\n+56 | |             return None;\n+57 | |         } else {\n+58 | |             self.opt\n+59 | |         };\n+   | |_________^ help: replace_it_with: `Some(self.opt?)`\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "3d727ee6e6a1195cca7c6698ca106a4b8accba7b", "filename": "tests/ui/redundant_field_names.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/379c934f3f0c1266e2a4112a4babe7ec0a6368ce/tests%2Fui%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/379c934f3f0c1266e2a4112a4babe7ec0a6368ce/tests%2Fui%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.rs?ref=379c934f3f0c1266e2a4112a4babe7ec0a6368ce", "patch": "@@ -68,3 +68,14 @@ fn main() {\n     let _ = RangeInclusive::new(start, end);\n     let _ = RangeToInclusive { end: end };\n }\n+\n+fn issue_3476() {\n+    fn foo<T>() {\n+    }\n+\n+    struct S {\n+        foo: fn(),\n+    }\n+\n+    S { foo: foo::<i32> };\n+}"}, {"sha": "0ec8ce57ad7f8fdd4c889400c376d19ddd27f12b", "filename": "tests/ui/unused_io_amount.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/379c934f3f0c1266e2a4112a4babe7ec0a6368ce/tests%2Fui%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/379c934f3f0c1266e2a4112a4babe7ec0a6368ce/tests%2Fui%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_io_amount.rs?ref=379c934f3f0c1266e2a4112a4babe7ec0a6368ce", "patch": "@@ -12,7 +12,7 @@\n \n use std::io;\n \n-// FIXME: compiletest doesn't understand errors from macro invocation span\n+\n fn try_macro<T: io::Read + io::Write>(s: &mut T) -> io::Result<()> {\n     try!(s.write(b\"test\"));\n     let mut buf = [0u8; 4];"}]}