{"sha": "79269ea06412d67670b6b2d92522e4fe875b3247", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5MjY5ZWEwNjQxMmQ2NzY3MGI2YjJkOTI1MjJlNGZlODc1YjMyNDc=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-04-02T23:17:10Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-06T22:35:50Z"}, "message": "fixing some libuv stuff that leaked through the rebase", "tree": {"sha": "ae873430a4dcf70e193ec27095dc7a368a2e1078", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae873430a4dcf70e193ec27095dc7a368a2e1078"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79269ea06412d67670b6b2d92522e4fe875b3247", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79269ea06412d67670b6b2d92522e4fe875b3247", "html_url": "https://github.com/rust-lang/rust/commit/79269ea06412d67670b6b2d92522e4fe875b3247", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79269ea06412d67670b6b2d92522e4fe875b3247/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b39a43cd5c12808c615e4f65366a04687317daa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b39a43cd5c12808c615e4f65366a04687317daa1", "html_url": "https://github.com/rust-lang/rust/commit/b39a43cd5c12808c615e4f65366a04687317daa1"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "542ade068f2a31613bf5292484ceaa0e87565a5f", "filename": "src/libstd/uv.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/79269ea06412d67670b6b2d92522e4fe875b3247/src%2Flibstd%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79269ea06412d67670b6b2d92522e4fe875b3247/src%2Flibstd%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv.rs?ref=79269ea06412d67670b6b2d92522e4fe875b3247", "patch": "@@ -65,36 +65,37 @@ native mod rustrt {\n     fn rust_uv_free(ptr: *libc::c_void);\n     fn rust_uv_tcp_init(\n         loop_handle: *libc::c_void,\n-        handle_ptr: *uv_tcp_t) -> libc::c_int;\n+        handle_ptr: *ll::uv_tcp_t) -> libc::c_int;\n     fn rust_uv_buf_init(base: *u8, len: libc::size_t)\n-        -> uv_buf_t;\n-    fn rust_uv_last_error(loop_handle: *libc::c_void) -> uv_err_t;\n+        -> ll::uv_buf_t;\n+    fn rust_uv_last_error(loop_handle: *libc::c_void) ->\n+        ll::uv_err_t;\n     // FIXME ref #2064\n-    fn rust_uv_strerror(err: *uv_err_t) -> *libc::c_char;\n+    fn rust_uv_strerror(err: *ll::uv_err_t) -> *libc::c_char;\n     // FIXME ref #2064\n-    fn rust_uv_err_name(err: *uv_err_t) -> *libc::c_char;\n+    fn rust_uv_err_name(err: *ll::uv_err_t) -> *libc::c_char;\n     fn rust_uv_ip4_addr(ip: *u8, port: libc::c_int)\n-        -> sockaddr_in;\n+        -> ll::sockaddr_in;\n     // FIXME ref #2064\n-    fn rust_uv_tcp_connect(connect_ptr: *uv_connect_t,\n-                           tcp_handle_ptr: *uv_tcp_t,\n+    fn rust_uv_tcp_connect(connect_ptr: *ll::uv_connect_t,\n+                           tcp_handle_ptr: *ll::uv_tcp_t,\n                            ++after_cb: *u8,\n-                           ++addr: *sockaddr_in) -> libc::c_int;\n+                           ++addr: *ll::sockaddr_in) -> libc::c_int;\n     // FIXME ref 2064\n-    fn rust_uv_tcp_bind(tcp_server: *uv_tcp_t,\n-                        ++addr: *sockaddr_in) -> libc::c_int;\n+    fn rust_uv_tcp_bind(tcp_server: *ll::uv_tcp_t,\n+                        ++addr: *ll::sockaddr_in) -> libc::c_int;\n     fn rust_uv_listen(stream: *libc::c_void, backlog: libc::c_int,\n                       cb: *u8) -> libc::c_int;\n     fn rust_uv_accept(server: *libc::c_void, client: *libc::c_void)\n         -> libc::c_int;\n     fn rust_uv_write(req: *libc::c_void, stream: *libc::c_void,\n-             ++buf_in: *uv_buf_t, buf_cnt: libc::c_int,\n+             ++buf_in: *ll::uv_buf_t, buf_cnt: libc::c_int,\n              cb: *u8) -> libc::c_int;\n     fn rust_uv_read_start(stream: *libc::c_void, on_alloc: *u8,\n                           on_read: *u8) -> libc::c_int;\n     fn rust_uv_read_stop(stream: *libc::c_void) -> libc::c_int;\n     fn rust_uv_malloc_buf_base_of(sug_size: libc::size_t) -> *u8;\n-    fn rust_uv_free_base_of_buf(++buf: uv_buf_t);\n+    fn rust_uv_free_base_of_buf(++buf: ll::uv_buf_t);\n \n     // sizeof testing helpers\n     fn rust_uv_helper_uv_tcp_t_size() -> libc::c_uint;"}, {"sha": "910ad9d7e812080a1439e64341c2c4ec81640b68", "filename": "src/libstd/uv_hl.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/79269ea06412d67670b6b2d92522e4fe875b3247/src%2Flibstd%2Fuv_hl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79269ea06412d67670b6b2d92522e4fe875b3247/src%2Flibstd%2Fuv_hl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_hl.rs?ref=79269ea06412d67670b6b2d92522e4fe875b3247", "patch": "@@ -71,6 +71,7 @@ immediately after using `uv::ll::loop_new()`\n A `high_level_loop` record that can be used to interact with the\n loop (after you use `uv::ll::run()` on the `uv_loop_t*`, of course\n \"]\n+#[cfg(target_archsdfsdf=\"bleh\")]\n unsafe fn prepare_loop(loop_ptr: *libc::c_void)\n     -> high_level_loop {\n     // will probably need to stake out a data record\n@@ -80,12 +81,18 @@ unsafe fn prepare_loop(loop_ptr: *libc::c_void)\n     // move this into a malloc\n     let async = ll::async_t();\n     let async_ptr = ptr::addr_of(async);\n+    let op_port = comm::port::<fn~(*libc::c_void)>();\n     let async_result = ll::async_init(loop_ptr,\n                                       async_ptr,\n-                                      interact_ptr);\n+                                      interact_poke);\n     if (async_result != 0i32) {\n         fail ll::get_last_err_info(loop_ptr);\n     }\n+    // need to store the port and async_ptr in the top-level\n+    // of the provided loop ..\n+    ret { async_handle: async_ptr,\n+         op_chan: comm::chan::<fn~(*libc::c_void)>(op_port)\n+        };\n }\n \n // this will be invoked by a called to uv::hl::interact(), so"}]}