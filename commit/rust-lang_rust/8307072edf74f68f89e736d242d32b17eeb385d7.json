{"sha": "8307072edf74f68f89e736d242d32b17eeb385d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMDcwNzJlZGY3NGY2OGY4OWU3MzZkMjQyZDMyYjE3ZWViMzg1ZDc=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-07-27T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-07-29T11:28:04Z"}, "message": "Remove redundant option around compression caches\n\nCompression caches are always present. Remove unnecessary option.", "tree": {"sha": "d40e616db41eb87d7cf6dbb0c4a8a87ecc6bfa55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d40e616db41eb87d7cf6dbb0c4a8a87ecc6bfa55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8307072edf74f68f89e736d242d32b17eeb385d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8307072edf74f68f89e736d242d32b17eeb385d7", "html_url": "https://github.com/rust-lang/rust/commit/8307072edf74f68f89e736d242d32b17eeb385d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8307072edf74f68f89e736d242d32b17eeb385d7/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e0a8bf7901a3fe2e073b1e702e80f58b76d5087", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087", "html_url": "https://github.com/rust-lang/rust/commit/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087"}], "stats": {"total": 26, "additions": 10, "deletions": 16}, "files": [{"sha": "8359bba3079e52d95a92f21eb7b29b89fc15f64f", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8307072edf74f68f89e736d242d32b17eeb385d7/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307072edf74f68f89e736d242d32b17eeb385d7/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=8307072edf74f68f89e736d242d32b17eeb385d7", "patch": "@@ -25,13 +25,13 @@ pub(super) fn mangle(\n     let prefix = \"_R\";\n     let mut cx = SymbolMangler {\n         tcx,\n-        compress: Some(Box::new(CompressionCaches {\n+        compress: Box::new(CompressionCaches {\n             start_offset: prefix.len(),\n \n             paths: FxHashMap::default(),\n             types: FxHashMap::default(),\n             consts: FxHashMap::default(),\n-        })),\n+        }),\n         binders: vec![],\n         out: String::from(prefix),\n     };\n@@ -81,7 +81,7 @@ struct BinderLevel {\n \n struct SymbolMangler<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    compress: Option<Box<CompressionCaches<'tcx>>>,\n+    compress: Box<CompressionCaches<'tcx>>,\n     binders: Vec<BinderLevel>,\n     out: String,\n }\n@@ -177,7 +177,7 @@ impl SymbolMangler<'tcx> {\n \n     fn print_backref(mut self, i: usize) -> Result<Self, !> {\n         self.push(\"B\");\n-        self.push_integer_62((i - self.compress.as_ref().unwrap().start_offset) as u64);\n+        self.push_integer_62((i - self.compress.start_offset) as u64);\n         Ok(self)\n     }\n \n@@ -236,7 +236,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         def_id: DefId,\n         substs: &'tcx [GenericArg<'tcx>],\n     ) -> Result<Self::Path, Self::Error> {\n-        if let Some(&i) = self.compress.as_ref().and_then(|c| c.paths.get(&(def_id, substs))) {\n+        if let Some(&i) = self.compress.paths.get(&(def_id, substs)) {\n             return self.print_backref(i);\n         }\n         let start = self.out.len();\n@@ -246,9 +246,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         // Only cache paths that do not refer to an enclosing\n         // binder (which would change depending on context).\n         if !substs.iter().any(|k| k.has_escaping_bound_vars()) {\n-            if let Some(c) = &mut self.compress {\n-                c.paths.insert((def_id, substs), start);\n-            }\n+            self.compress.paths.insert((def_id, substs), start);\n         }\n         Ok(self)\n     }\n@@ -367,7 +365,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n             return Ok(self);\n         }\n \n-        if let Some(&i) = self.compress.as_ref().and_then(|c| c.types.get(&ty)) {\n+        if let Some(&i) = self.compress.types.get(&ty) {\n             return self.print_backref(i);\n         }\n         let start = self.out.len();\n@@ -476,9 +474,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         // Only cache types that do not refer to an enclosing\n         // binder (which would change depending on context).\n         if !ty.has_escaping_bound_vars() {\n-            if let Some(c) = &mut self.compress {\n-                c.types.insert(ty, start);\n-            }\n+            self.compress.types.insert(ty, start);\n         }\n         Ok(self)\n     }\n@@ -545,7 +541,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n     }\n \n     fn print_const(mut self, ct: &'tcx ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n-        if let Some(&i) = self.compress.as_ref().and_then(|c| c.consts.get(&ct)) {\n+        if let Some(&i) = self.compress.consts.get(&ct) {\n             return self.print_backref(i);\n         }\n         let start = self.out.len();\n@@ -583,9 +579,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         // Only cache consts that do not refer to an enclosing\n         // binder (which would change depending on context).\n         if !ct.has_escaping_bound_vars() {\n-            if let Some(c) = &mut self.compress {\n-                c.consts.insert(ct, start);\n-            }\n+            self.compress.consts.insert(ct, start);\n         }\n         Ok(self)\n     }"}]}