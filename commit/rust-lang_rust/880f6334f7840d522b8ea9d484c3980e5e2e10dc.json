{"sha": "880f6334f7840d522b8ea9d484c3980e5e2e10dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MGY2MzM0Zjc4NDBkNTIyYjhlYTlkNDg0YzM5ODBlNWUyZTEwZGM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-31T01:10:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-31T01:10:50Z"}, "message": "Rollup merge of #58000 - oli-obk:fixes_and_cleanups, r=RalfJung\n\nFixes and cleanups\n\nAddress the points raised in https://github.com/rust-lang/rust/pull/57677/files by @eddyb and @RalfJung", "tree": {"sha": "7de2a3c3a14f88b846a06541edb5db9de88f738a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7de2a3c3a14f88b846a06541edb5db9de88f738a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/880f6334f7840d522b8ea9d484c3980e5e2e10dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcUksaCRBK7hj4Ov3rIwAAdHIIADLwb8rO5o+znBI2y59G6fOx\nXyax3zvdFnHl97cwNlHaKTzE6Ussyjq9hJcORR4aziHy5NOWoMW2yUxWpEESw4l8\nS3VxgyJqv7oX0LQCRGrC9b5/NWyqBi7Y2lt6qhukVtrNEJE8LauV+8ucUu9XiwbH\nK3FcRHe2FgqyEV71ooy8MCTNLNtGijQG1ArHU1T3gvECopYPkM0MtQIiw3AWdF3u\n4Z8ur9mvrZo2Rzri8qT8jzUx6kw+xrEPNc8Xp6bO4Vb23wYDwYlE57QZyz80Wozw\nheXzOxsFe6+6eaK+LqSpqqs3K1hldIde7QE2hdIqTqno14JsuEwBBk+dIfKvKes=\n=dZV8\n-----END PGP SIGNATURE-----\n", "payload": "tree 7de2a3c3a14f88b846a06541edb5db9de88f738a\nparent bb91a192c0b3b56d1cf88a1db13b767aa3c890d0\nparent 8c26c590b4b22066f4ae5ac245dfa7c2e5ae4044\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1548897050 +0100\ncommitter GitHub <noreply@github.com> 1548897050 +0100\n\nRollup merge of #58000 - oli-obk:fixes_and_cleanups, r=RalfJung\n\nFixes and cleanups\n\nAddress the points raised in https://github.com/rust-lang/rust/pull/57677/files by @eddyb and @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/880f6334f7840d522b8ea9d484c3980e5e2e10dc", "html_url": "https://github.com/rust-lang/rust/commit/880f6334f7840d522b8ea9d484c3980e5e2e10dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/880f6334f7840d522b8ea9d484c3980e5e2e10dc/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb91a192c0b3b56d1cf88a1db13b767aa3c890d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb91a192c0b3b56d1cf88a1db13b767aa3c890d0", "html_url": "https://github.com/rust-lang/rust/commit/bb91a192c0b3b56d1cf88a1db13b767aa3c890d0"}, {"sha": "8c26c590b4b22066f4ae5ac245dfa7c2e5ae4044", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c26c590b4b22066f4ae5ac245dfa7c2e5ae4044", "html_url": "https://github.com/rust-lang/rust/commit/8c26c590b4b22066f4ae5ac245dfa7c2e5ae4044"}], "stats": {"total": 122, "additions": 77, "deletions": 45}, "files": [{"sha": "1328a1aeeab962ec0a49597efe216d81e20e53e2", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/880f6334f7840d522b8ea9d484c3980e5e2e10dc/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880f6334f7840d522b8ea9d484c3980e5e2e10dc/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=880f6334f7840d522b8ea9d484c3980e5e2e10dc", "patch": "@@ -14,7 +14,7 @@ pub struct RawConst<'tcx> {\n }\n \n /// Represents a constant value in Rust. Scalar and ScalarPair are optimizations which\n-/// matches the LocalValue optimizations for easy conversions between Value and ConstValue.\n+/// matches the LocalState optimizations for easy conversions between Value and ConstValue.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash)]\n pub enum ConstValue<'tcx> {\n     /// Used only for types with layout::abi::Scalar ABI and ZSTs"}, {"sha": "1b976d822ebff1a6d19a2a36afed9b7cc59471ce", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 44, "deletions": 28, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/880f6334f7840d522b8ea9d484c3980e5e2e10dc/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880f6334f7840d522b8ea9d484c3980e5e2e10dc/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=880f6334f7840d522b8ea9d484c3980e5e2e10dc", "patch": "@@ -76,8 +76,7 @@ pub struct Frame<'mir, 'tcx: 'mir, Tag=(), Extra=()> {\n     /// The locals are stored as `Option<Value>`s.\n     /// `None` represents a local that is currently dead, while a live local\n     /// can either directly contain `Scalar` or refer to some part of an `Allocation`.\n-    pub locals: IndexVec<mir::Local, LocalValue<Tag>>,\n-    pub local_layouts: IndexVec<mir::Local, Cell<Option<TyLayout<'tcx>>>>,\n+    pub locals: IndexVec<mir::Local, LocalState<'tcx, Tag>>,\n \n     ////////////////////////////////////////////////////////////////////////////////\n     // Current position within the function\n@@ -106,7 +105,15 @@ pub enum StackPopCleanup {\n     None { cleanup: bool },\n }\n \n-// State of a local variable\n+/// State of a local variable including a memoized layout\n+#[derive(Clone, PartialEq, Eq)]\n+pub struct LocalState<'tcx, Tag=(), Id=AllocId> {\n+    pub state: LocalValue<Tag, Id>,\n+    /// Don't modify if `Some`, this is only used to prevent computing the layout twice\n+    pub layout: Cell<Option<TyLayout<'tcx>>>,\n+}\n+\n+/// State of a local variable\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n pub enum LocalValue<Tag=(), Id=AllocId> {\n     Dead,\n@@ -117,16 +124,16 @@ pub enum LocalValue<Tag=(), Id=AllocId> {\n     Live(Operand<Tag, Id>),\n }\n \n-impl<'tcx, Tag> LocalValue<Tag> {\n+impl<'tcx, Tag> LocalState<'tcx, Tag> {\n     pub fn access(&self) -> EvalResult<'tcx, &Operand<Tag>> {\n-        match self {\n+        match self.state {\n             LocalValue::Dead => err!(DeadLocal),\n             LocalValue::Live(ref val) => Ok(val),\n         }\n     }\n \n     pub fn access_mut(&mut self) -> EvalResult<'tcx, &mut Operand<Tag>> {\n-        match self {\n+        match self.state {\n             LocalValue::Dead => err!(DeadLocal),\n             LocalValue::Live(ref mut val) => Ok(val),\n         }\n@@ -310,17 +317,21 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n     pub fn layout_of_local(\n         &self,\n         frame: &Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>,\n-        local: mir::Local\n+        local: mir::Local,\n+        layout: Option<TyLayout<'tcx>>,\n     ) -> EvalResult<'tcx, TyLayout<'tcx>> {\n-        let cell = &frame.local_layouts[local];\n-        if cell.get().is_none() {\n-            let local_ty = frame.mir.local_decls[local].ty;\n-            let local_ty = self.monomorphize_with_substs(local_ty, frame.instance.substs);\n-            let layout = self.layout_of(local_ty)?;\n-            cell.set(Some(layout));\n+        match frame.locals[local].layout.get() {\n+            None => {\n+                let layout = ::interpret::operand::from_known_layout(layout, || {\n+                    let local_ty = frame.mir.local_decls[local].ty;\n+                    let local_ty = self.monomorphize_with_substs(local_ty, frame.instance.substs);\n+                    self.layout_of(local_ty)\n+                })?;\n+                frame.locals[local].layout.set(Some(layout));\n+                Ok(layout)\n+            }\n+            Some(layout) => Ok(layout),\n         }\n-\n-        Ok(cell.get().unwrap())\n     }\n \n     pub fn str_to_immediate(&mut self, s: &str) -> EvalResult<'tcx, Immediate<M::PointerTag>> {\n@@ -454,7 +465,6 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n             // empty local array, we fill it in below, after we are inside the stack frame and\n             // all methods actually know about the frame\n             locals: IndexVec::new(),\n-            local_layouts: IndexVec::from_elem_n(Default::default(), mir.local_decls.len()),\n             span,\n             instance,\n             stmt: 0,\n@@ -466,12 +476,16 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n             // We put some marker immediate into the locals that we later want to initialize.\n             // This can be anything except for LocalValue::Dead -- because *that* is the\n             // value we use for things that we know are initially dead.\n-            let dummy =\n-                LocalValue::Live(Operand::Immediate(Immediate::Scalar(ScalarMaybeUndef::Undef)));\n+            let dummy = LocalState {\n+                state: LocalValue::Live(Operand::Immediate(Immediate::Scalar(\n+                    ScalarMaybeUndef::Undef,\n+                ))),\n+                layout: Cell::new(None),\n+            };\n             let mut locals = IndexVec::from_elem(dummy, &mir.local_decls);\n             // Return place is handled specially by the `eval_place` functions, and the\n             // entry in `locals` should never be used. Make it dead, to be sure.\n-            locals[mir::RETURN_PLACE] = LocalValue::Dead;\n+            locals[mir::RETURN_PLACE].state = LocalValue::Dead;\n             // Now mark those locals as dead that we do not want to initialize\n             match self.tcx.describe_def(instance.def_id()) {\n                 // statics and constants don't have `Storage*` statements, no need to look for them\n@@ -484,7 +498,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n                             match stmt.kind {\n                                 StorageLive(local) |\n                                 StorageDead(local) => {\n-                                    locals[local] = LocalValue::Dead;\n+                                    locals[local].state = LocalValue::Dead;\n                                 }\n                                 _ => {}\n                             }\n@@ -494,11 +508,13 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n             }\n             // Finally, properly initialize all those that still have the dummy value\n             for (idx, local) in locals.iter_enumerated_mut() {\n-                match *local {\n+                match local.state {\n                     LocalValue::Live(_) => {\n-                        // This needs to be peoperly initialized.\n-                        let layout = self.layout_of_local(self.frame(), idx)?;\n-                        *local = LocalValue::Live(self.uninit_operand(layout)?);\n+                        // This needs to be properly initialized.\n+                        let ty = self.monomorphize(mir.local_decls[idx].ty)?;\n+                        let layout = self.layout_of(ty)?;\n+                        local.state = LocalValue::Live(self.uninit_operand(layout)?);\n+                        local.layout = Cell::new(Some(layout));\n                     }\n                     LocalValue::Dead => {\n                         // Nothing to do\n@@ -543,7 +559,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         }\n         // Deallocate all locals that are backed by an allocation.\n         for local in frame.locals {\n-            self.deallocate_local(local)?;\n+            self.deallocate_local(local.state)?;\n         }\n         // Validate the return value. Do this after deallocating so that we catch dangling\n         // references.\n@@ -591,10 +607,10 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         assert!(local != mir::RETURN_PLACE, \"Cannot make return place live\");\n         trace!(\"{:?} is now live\", local);\n \n-        let layout = self.layout_of_local(self.frame(), local)?;\n+        let layout = self.layout_of_local(self.frame(), local, None)?;\n         let init = LocalValue::Live(self.uninit_operand(layout)?);\n         // StorageLive *always* kills the value that's currently stored\n-        Ok(mem::replace(&mut self.frame_mut().locals[local], init))\n+        Ok(mem::replace(&mut self.frame_mut().locals[local].state, init))\n     }\n \n     /// Returns the old value of the local.\n@@ -603,7 +619,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         assert!(local != mir::RETURN_PLACE, \"Cannot make return place dead\");\n         trace!(\"{:?} is now dead\", local);\n \n-        mem::replace(&mut self.frame_mut().locals[local], LocalValue::Dead)\n+        mem::replace(&mut self.frame_mut().locals[local].state, LocalValue::Dead)\n     }\n \n     pub(super) fn deallocate_local("}, {"sha": "d2ab3fcb7a30a13ea8a402d53858867258d4e337", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/880f6334f7840d522b8ea9d484c3980e5e2e10dc/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880f6334f7840d522b8ea9d484c3980e5e2e10dc/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=880f6334f7840d522b8ea9d484c3980e5e2e10dc", "patch": "@@ -18,7 +18,7 @@ mod visitor;\n pub use rustc::mir::interpret::*; // have all the `interpret` symbols in one place: here\n \n pub use self::eval_context::{\n-    EvalContext, Frame, StackPopCleanup, LocalValue,\n+    EvalContext, Frame, StackPopCleanup, LocalState, LocalValue,\n };\n \n pub use self::place::{Place, PlaceTy, MemPlace, MPlaceTy};"}, {"sha": "37e421c2e7339fb9e6909ecdc212e1032c0e8d10", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/880f6334f7840d522b8ea9d484c3980e5e2e10dc/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880f6334f7840d522b8ea9d484c3980e5e2e10dc/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=880f6334f7840d522b8ea9d484c3980e5e2e10dc", "patch": "@@ -227,7 +227,7 @@ impl<'tcx, Tag> OpTy<'tcx, Tag>\n // Use the existing layout if given (but sanity check in debug mode),\n // or compute the layout.\n #[inline(always)]\n-fn from_known_layout<'tcx>(\n+pub(super) fn from_known_layout<'tcx>(\n     layout: Option<TyLayout<'tcx>>,\n     compute: impl FnOnce() -> EvalResult<'tcx, TyLayout<'tcx>>\n ) -> EvalResult<'tcx, TyLayout<'tcx>> {\n@@ -457,14 +457,15 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n     }\n \n     /// This is used by [priroda](https://github.com/oli-obk/priroda) to get an OpTy from a local\n-    fn access_local(\n+    pub fn access_local(\n         &self,\n         frame: &super::Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>,\n         local: mir::Local,\n+        layout: Option<TyLayout<'tcx>>,\n     ) -> EvalResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         assert_ne!(local, mir::RETURN_PLACE);\n         let op = *frame.locals[local].access()?;\n-        let layout = self.layout_of_local(frame, local)?;\n+        let layout = self.layout_of_local(frame, local, layout)?;\n         Ok(OpTy { op, layout })\n     }\n \n@@ -473,14 +474,15 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n     fn eval_place_to_op(\n         &self,\n         mir_place: &mir::Place<'tcx>,\n+        layout: Option<TyLayout<'tcx>>,\n     ) -> EvalResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         use rustc::mir::Place::*;\n         let op = match *mir_place {\n             Local(mir::RETURN_PLACE) => return err!(ReadFromReturnPointer),\n-            Local(local) => self.access_local(self.frame(), local)?,\n+            Local(local) => self.access_local(self.frame(), local, layout)?,\n \n             Projection(ref proj) => {\n-                let op = self.eval_place_to_op(&proj.base)?;\n+                let op = self.eval_place_to_op(&proj.base, None)?;\n                 self.operand_projection(op, &proj.elem)?\n             }\n \n@@ -504,7 +506,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             // FIXME: do some more logic on `move` to invalidate the old location\n             Copy(ref place) |\n             Move(ref place) =>\n-                self.eval_place_to_op(place)?,\n+                self.eval_place_to_op(place, layout)?,\n \n             Constant(ref constant) => {\n                 let layout = from_known_layout(layout, || {"}, {"sha": "9ca7f9d8e27ff43214f0dd1817dd7339891e3b7d", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/880f6334f7840d522b8ea9d484c3980e5e2e10dc/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880f6334f7840d522b8ea9d484c3980e5e2e10dc/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=880f6334f7840d522b8ea9d484c3980e5e2e10dc", "patch": "@@ -624,7 +624,7 @@ where\n                     // their layout on return.\n                     PlaceTy {\n                         place: *return_place,\n-                        layout: self.layout_of_local(self.frame(), mir::RETURN_PLACE)?,\n+                        layout: self.layout_of(self.monomorphize(self.frame().mir.return_ty())?)?,\n                     },\n                 None => return err!(InvalidNullPointerUsage),\n             },\n@@ -633,7 +633,7 @@ where\n                     frame: self.cur_frame(),\n                     local,\n                 },\n-                layout: self.layout_of_local(self.frame(), local)?,\n+                layout: self.layout_of_local(self.frame(), local, None)?,\n             },\n \n             Projection(ref proj) => {\n@@ -901,7 +901,7 @@ where\n                         // We need the layout of the local.  We can NOT use the layout we got,\n                         // that might e.g., be an inner field of a struct with `Scalar` layout,\n                         // that has different alignment than the outer field.\n-                        let local_layout = self.layout_of_local(&self.stack[frame], local)?;\n+                        let local_layout = self.layout_of_local(&self.stack[frame], local, None)?;\n                         let ptr = self.allocate(local_layout, MemoryKind::Stack);\n                         // We don't have to validate as we can assume the local\n                         // was already valid for its type."}, {"sha": "5fae461bdc2033e42821b67944eb2e0e3b2104f2", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/880f6334f7840d522b8ea9d484c3980e5e2e10dc/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880f6334f7840d522b8ea9d484c3980e5e2e10dc/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=880f6334f7840d522b8ea9d484c3980e5e2e10dc", "patch": "@@ -23,8 +23,8 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use syntax::ast::Mutability;\n use syntax::source_map::Span;\n \n-use super::eval_context::{LocalValue, StackPopCleanup};\n-use super::{Frame, Memory, Operand, MemPlace, Place, Immediate, ScalarMaybeUndef};\n+use super::eval_context::{LocalState, StackPopCleanup};\n+use super::{Frame, Memory, Operand, MemPlace, Place, Immediate, ScalarMaybeUndef, LocalValue};\n use const_eval::CompileTimeInterpreter;\n \n #[derive(Default)]\n@@ -321,7 +321,6 @@ impl_stable_hash_for!(impl<'mir, 'tcx: 'mir> for struct Frame<'mir, 'tcx> {\n     return_to_block,\n     return_place -> (return_place.as_ref().map(|r| &**r)),\n     locals,\n-    local_layouts -> _,\n     block,\n     stmt,\n     extra,\n@@ -340,7 +339,6 @@ impl<'a, 'mir, 'tcx, Ctx> Snapshot<'a, Ctx> for &'a Frame<'mir, 'tcx>\n             return_to_block,\n             return_place,\n             locals,\n-            local_layouts: _,\n             block,\n             stmt,\n             extra: _,\n@@ -358,6 +356,22 @@ impl<'a, 'mir, 'tcx, Ctx> Snapshot<'a, Ctx> for &'a Frame<'mir, 'tcx>\n     }\n }\n \n+impl<'a, 'tcx, Ctx> Snapshot<'a, Ctx> for &'a LocalState<'tcx>\n+    where Ctx: SnapshotContext<'a>,\n+{\n+    type Item = LocalValue<(), AllocIdSnapshot<'a>>;\n+\n+    fn snapshot(&self, ctx: &'a Ctx) -> Self::Item {\n+        let LocalState { state, layout: _ } = self;\n+        state.snapshot(ctx)\n+    }\n+}\n+\n+impl_stable_hash_for!(struct LocalState<'tcx> {\n+    state,\n+    layout -> _,\n+});\n+\n impl<'a, 'b, 'mir, 'tcx: 'a+'mir> SnapshotContext<'b>\n     for Memory<'a, 'mir, 'tcx, CompileTimeInterpreter<'a, 'mir, 'tcx>>\n {"}, {"sha": "7e823524c180c81de4c638401347fe3502b7fdc5", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/880f6334f7840d522b8ea9d484c3980e5e2e10dc/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880f6334f7840d522b8ea9d484c3980e5e2e10dc/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=880f6334f7840d522b8ea9d484c3980e5e2e10dc", "patch": "@@ -309,7 +309,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                         mir.spread_arg,\n                         mir.args_iter()\n                             .map(|local|\n-                                (local, self.layout_of_local(self.frame(), local).unwrap().ty)\n+                                (local, self.layout_of_local(self.frame(), local, None).unwrap().ty)\n                             )\n                             .collect::<Vec<_>>()\n                     );\n@@ -383,7 +383,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                         }\n                     } else {\n                         let callee_layout =\n-                            self.layout_of_local(self.frame(), mir::RETURN_PLACE)?;\n+                            self.layout_of_local(self.frame(), mir::RETURN_PLACE, None)?;\n                         if !callee_layout.abi.is_uninhabited() {\n                             return err!(FunctionRetMismatch(\n                                 self.tcx.types.never, callee_layout.ty"}]}