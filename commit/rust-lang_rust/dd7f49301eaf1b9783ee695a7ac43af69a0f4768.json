{"sha": "dd7f49301eaf1b9783ee695a7ac43af69a0f4768", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkN2Y0OTMwMWVhZjFiOTc4M2VlNjk1YTdhYzQzYWY2OWEwZjQ3Njg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-22T19:53:30Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-23T12:11:10Z"}, "message": "is_range_literal: fix fallout", "tree": {"sha": "a9850c46a7b5ff56c86859d08ac6c8dac8921738", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9850c46a7b5ff56c86859d08ac6c8dac8921738"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd7f49301eaf1b9783ee695a7ac43af69a0f4768", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd7f49301eaf1b9783ee695a7ac43af69a0f4768", "html_url": "https://github.com/rust-lang/rust/commit/dd7f49301eaf1b9783ee695a7ac43af69a0f4768", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd7f49301eaf1b9783ee695a7ac43af69a0f4768/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45acee30903f6a84d22a5afa29df965265ca486b", "url": "https://api.github.com/repos/rust-lang/rust/commits/45acee30903f6a84d22a5afa29df965265ca486b", "html_url": "https://github.com/rust-lang/rust/commit/45acee30903f6a84d22a5afa29df965265ca486b"}], "stats": {"total": 34, "additions": 14, "deletions": 20}, "files": [{"sha": "b4c51cca4d24d1de53e4ae3a1a316231876fc433", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dd7f49301eaf1b9783ee695a7ac43af69a0f4768/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd7f49301eaf1b9783ee695a7ac43af69a0f4768/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=dd7f49301eaf1b9783ee695a7ac43af69a0f4768", "patch": "@@ -29,10 +29,10 @@ use syntax::ast::{AttrVec, Attribute, FloatTy, IntTy, Label, LitKind, StrStyle,\n pub use syntax::ast::{BorrowKind, ImplPolarity, IsAuto};\n pub use syntax::ast::{CaptureBy, Constness, Movability, Mutability, Unsafety};\n use syntax::attr::{InlineAttr, OptimizeAttr};\n-use syntax::source_map::Spanned;\n-use syntax::symbol::{kw, Symbol};\n use syntax::tokenstream::TokenStream;\n use syntax::util::parser::ExprPrecedence;\n+use syntax_pos::source_map::{SourceMap, Spanned};\n+use syntax_pos::symbol::{kw, sym, Symbol};\n use syntax_pos::{MultiSpan, Span, DUMMY_SP};\n \n /// HIR doesn't commit to a concrete storage type and has its own alias for a vector.\n@@ -1566,9 +1566,7 @@ impl fmt::Debug for Expr {\n \n /// Checks if the specified expression is a built-in range literal.\n /// (See: `LoweringContext::lower_expr()`).\n-pub fn is_range_literal(sess: &Session, expr: &hir::Expr) -> bool {\n-    use hir::{Path, QPath, ExprKind, TyKind};\n-\n+pub fn is_range_literal(sm: &SourceMap, expr: &Expr) -> bool {\n     // Returns whether the given path represents a (desugared) range,\n     // either in std or core, i.e. has either a `::std::ops::Range` or\n     // `::core::ops::Range` prefix.\n@@ -1586,11 +1584,10 @@ pub fn is_range_literal(sess: &Session, expr: &hir::Expr) -> bool {\n \n     // Check whether a span corresponding to a range expression is a\n     // range literal, rather than an explicit struct or `new()` call.\n-    fn is_lit(sess: &Session, span: &Span) -> bool {\n-        let source_map = sess.source_map();\n-        let end_point = source_map.end_point(*span);\n+    fn is_lit(sm: &SourceMap, span: &Span) -> bool {\n+        let end_point = sm.end_point(*span);\n \n-        if let Ok(end_string) = source_map.span_to_snippet(end_point) {\n+        if let Ok(end_string) = sm.span_to_snippet(end_point) {\n             !(end_string.ends_with(\"}\") || end_string.ends_with(\")\"))\n         } else {\n             false\n@@ -1601,21 +1598,21 @@ pub fn is_range_literal(sess: &Session, expr: &hir::Expr) -> bool {\n         // All built-in range literals but `..=` and `..` desugar to `Struct`s.\n         ExprKind::Struct(ref qpath, _, _) => {\n             if let QPath::Resolved(None, ref path) = **qpath {\n-                return is_range_path(&path) && is_lit(sess, &expr.span);\n+                return is_range_path(&path) && is_lit(sm, &expr.span);\n             }\n         }\n \n         // `..` desugars to its struct path.\n         ExprKind::Path(QPath::Resolved(None, ref path)) => {\n-            return is_range_path(&path) && is_lit(sess, &expr.span);\n+            return is_range_path(&path) && is_lit(sm, &expr.span);\n         }\n \n         // `..=` desugars into `::std::ops::RangeInclusive::new(...)`.\n         ExprKind::Call(ref func, _) => {\n             if let ExprKind::Path(QPath::TypeRelative(ref ty, ref segment)) = func.kind {\n                 if let TyKind::Path(QPath::Resolved(None, ref path)) = ty.kind {\n                     let new_call = segment.ident.name == sym::new;\n-                    return is_range_path(&path) && is_lit(sess, &expr.span) && new_call;\n+                    return is_range_path(&path) && is_lit(sm, &expr.span) && new_call;\n                 }\n             }\n         }"}, {"sha": "45b8666c42b45d111aa081b3b1c8c4f00601991a", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dd7f49301eaf1b9783ee695a7ac43af69a0f4768/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd7f49301eaf1b9783ee695a7ac43af69a0f4768/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=dd7f49301eaf1b9783ee695a7ac43af69a0f4768", "patch": "@@ -3,8 +3,7 @@\n use crate::hir::def_id::DefId;\n use lint::{LateContext, LintArray, LintContext};\n use lint::{LateLintPass, LintPass};\n-use rustc::hir::lowering::is_range_literal;\n-use rustc::hir::{ExprKind, Node};\n+use rustc::hir::{is_range_literal, ExprKind, Node};\n use rustc::ty::layout::{self, IntegerExt, LayoutOf, SizeSkeleton, VariantIdx};\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n@@ -266,7 +265,7 @@ fn lint_int_literal<'a, 'tcx>(\n         let par_id = cx.tcx.hir().get_parent_node(e.hir_id);\n         if let Node::Expr(par_e) = cx.tcx.hir().get(par_id) {\n             if let hir::ExprKind::Struct(..) = par_e.kind {\n-                if is_range_literal(cx.sess(), par_e)\n+                if is_range_literal(cx.sess().source_map(), par_e)\n                     && lint_overflowing_range_endpoint(cx, lit, v, max, e, par_e, t.name_str())\n                 {\n                     // The overflowing literal lint was overridden.\n@@ -318,7 +317,7 @@ fn lint_uint_literal<'a, 'tcx>(\n                         return;\n                     }\n                 }\n-                hir::ExprKind::Struct(..) if is_range_literal(cx.sess(), par_e) => {\n+                hir::ExprKind::Struct(..) if is_range_literal(cx.sess().source_map(), par_e) => {\n                     let t = t.name_str();\n                     if lint_overflowing_range_endpoint(cx, lit, lit_val, max, e, par_e, t) {\n                         // The overflowing literal lint was overridden."}, {"sha": "3a25786365b483d26dcee63c93ac7bbde45171a8", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd7f49301eaf1b9783ee695a7ac43af69a0f4768/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd7f49301eaf1b9783ee695a7ac43af69a0f4768/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=dd7f49301eaf1b9783ee695a7ac43af69a0f4768", "patch": "@@ -3,9 +3,7 @@ use rustc::infer::InferOk;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n \n use errors::{Applicability, DiagnosticBuilder};\n-use rustc::hir;\n-use rustc::hir::Node;\n-use rustc::hir::{lowering::is_range_literal, print};\n+use rustc::hir::{self, is_range_literal, print, Node};\n use rustc::ty::adjustment::AllowTwoPhase;\n use rustc::ty::{self, AssocItem, Ty};\n use syntax::symbol::sym;\n@@ -478,7 +476,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             // parenthesize if needed (Issue #46756)\n                             hir::ExprKind::Cast(_, _) | hir::ExprKind::Binary(_, _, _) => true,\n                             // parenthesize borrows of range literals (Issue #54505)\n-                            _ if is_range_literal(self.tcx.sess, expr) => true,\n+                            _ if is_range_literal(self.tcx.sess.source_map(), expr) => true,\n                             _ => false,\n                         };\n                         let sugg_expr = if needs_parens { format!(\"({})\", src) } else { src };"}]}