{"sha": "5767f31cbfb8adf7586a5e101be9f9f9a21c1480", "node_id": "C_kwDOAAsO6NoAKDU3NjdmMzFjYmZiOGFkZjc1ODZhNWUxMDFiZTlmOWY5YTIxYzE0ODA", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-25T11:55:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-25T11:55:42Z"}, "message": "minor: align code with code-style", "tree": {"sha": "ee51ce9e1019b636b23db6e2d9fd7e9292adc1fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee51ce9e1019b636b23db6e2d9fd7e9292adc1fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5767f31cbfb8adf7586a5e101be9f9f9a21c1480", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5767f31cbfb8adf7586a5e101be9f9f9a21c1480", "html_url": "https://github.com/rust-lang/rust/commit/5767f31cbfb8adf7586a5e101be9f9f9a21c1480", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5767f31cbfb8adf7586a5e101be9f9f9a21c1480/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33c5204809e677139ca1fe193e1b01b8f20db633", "url": "https://api.github.com/repos/rust-lang/rust/commits/33c5204809e677139ca1fe193e1b01b8f20db633", "html_url": "https://github.com/rust-lang/rust/commit/33c5204809e677139ca1fe193e1b01b8f20db633"}], "stats": {"total": 68, "additions": 35, "deletions": 33}, "files": [{"sha": "745419f0741d5ebbcd2678ccbb69b518f6b99d0a", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 35, "deletions": 33, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/5767f31cbfb8adf7586a5e101be9f9f9a21c1480/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5767f31cbfb8adf7586a5e101be9f9f9a21c1480/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=5767f31cbfb8adf7586a5e101be9f9f9a21c1480", "patch": "@@ -4,18 +4,48 @@\n \n mod block;\n \n+use std::convert::TryFrom;\n+\n+use rowan::Direction;\n+use rustc_lexer::unescape::{\n+    self, unescape_byte, unescape_byte_literal, unescape_char, unescape_literal, Mode,\n+};\n+\n use crate::{\n     algo,\n     ast::{self, VisibilityOwner},\n     match_ast, AstNode, SyntaxError,\n     SyntaxKind::{CONST, FN, INT_NUMBER, TYPE_ALIAS},\n     SyntaxNode, SyntaxToken, TextSize, T,\n };\n-use rowan::Direction;\n-use rustc_lexer::unescape::{\n-    self, unescape_byte, unescape_byte_literal, unescape_char, unescape_literal, Mode,\n-};\n-use std::convert::TryFrom;\n+\n+pub(crate) fn validate(root: &SyntaxNode) -> Vec<SyntaxError> {\n+    // FIXME:\n+    // * Add unescape validation of raw string literals and raw byte string literals\n+    // * Add validation of doc comments are being attached to nodes\n+\n+    let mut errors = Vec::new();\n+    for node in root.descendants() {\n+        match_ast! {\n+            match node {\n+                ast::Literal(it) => validate_literal(it, &mut errors),\n+                ast::Const(it) => validate_const(it, &mut errors),\n+                ast::BlockExpr(it) => block::validate_block_expr(it, &mut errors),\n+                ast::FieldExpr(it) => validate_numeric_name(it.name_ref(), &mut errors),\n+                ast::RecordExprField(it) => validate_numeric_name(it.name_ref(), &mut errors),\n+                ast::Visibility(it) => validate_visibility(it, &mut errors),\n+                ast::RangeExpr(it) => validate_range_expr(it, &mut errors),\n+                ast::PathSegment(it) => validate_path_keywords(it, &mut errors),\n+                ast::RefType(it) => validate_trait_object_ref_ty(it, &mut errors),\n+                ast::PtrType(it) => validate_trait_object_ptr_ty(it, &mut errors),\n+                ast::FnPtrType(it) => validate_trait_object_fn_ptr_ret_ty(it, &mut errors),\n+                ast::MacroRules(it) => validate_macro_rules(it, &mut errors),\n+                _ => (),\n+            }\n+        }\n+    }\n+    errors\n+}\n \n fn rustc_unescape_error_to_string(err: unescape::EscapeError) -> &'static str {\n     use unescape::EscapeError as EE;\n@@ -84,34 +114,6 @@ fn rustc_unescape_error_to_string(err: unescape::EscapeError) -> &'static str {\n     err_message\n }\n \n-pub(crate) fn validate(root: &SyntaxNode) -> Vec<SyntaxError> {\n-    // FIXME:\n-    // * Add unescape validation of raw string literals and raw byte string literals\n-    // * Add validation of doc comments are being attached to nodes\n-\n-    let mut errors = Vec::new();\n-    for node in root.descendants() {\n-        match_ast! {\n-            match node {\n-                ast::Literal(it) => validate_literal(it, &mut errors),\n-                ast::Const(it) => validate_const(it, &mut errors),\n-                ast::BlockExpr(it) => block::validate_block_expr(it, &mut errors),\n-                ast::FieldExpr(it) => validate_numeric_name(it.name_ref(), &mut errors),\n-                ast::RecordExprField(it) => validate_numeric_name(it.name_ref(), &mut errors),\n-                ast::Visibility(it) => validate_visibility(it, &mut errors),\n-                ast::RangeExpr(it) => validate_range_expr(it, &mut errors),\n-                ast::PathSegment(it) => validate_path_keywords(it, &mut errors),\n-                ast::RefType(it) => validate_trait_object_ref_ty(it, &mut errors),\n-                ast::PtrType(it) => validate_trait_object_ptr_ty(it, &mut errors),\n-                ast::FnPtrType(it) => validate_trait_object_fn_ptr_ret_ty(it, &mut errors),\n-                ast::MacroRules(it) => validate_macro_rules(it, &mut errors),\n-                _ => (),\n-            }\n-        }\n-    }\n-    errors\n-}\n-\n fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n     // FIXME: move this function to outer scope (https://github.com/rust-analyzer/rust-analyzer/pull/2834#discussion_r366196658)\n     fn unquote(text: &str, prefix_len: usize, end_delimiter: char) -> Option<&str> {"}]}