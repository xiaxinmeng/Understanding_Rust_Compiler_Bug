{"sha": "4a957b320dce39a044a05d3ad33ce4b20134c263", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhOTU3YjMyMGRjZTM5YTA0NGEwNWQzYWQzM2NlNGIyMDEzNGMyNjM=", "commit": {"author": {"name": "Vardhan Thigle", "email": "vardhan.thigle@fortanix.com", "date": "2018-12-26T07:02:45Z"}, "committer": {"name": "Vardhan Thigle", "email": "vardhan.thigle@fortanix.com", "date": "2019-01-13T07:37:45Z"}, "message": "Adding Build automation for x86_64-fortanix-unknown-sgx", "tree": {"sha": "f8494c86ce3fffdc7a98b3980be2f30a2bbd7341", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8494c86ce3fffdc7a98b3980be2f30a2bbd7341"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a957b320dce39a044a05d3ad33ce4b20134c263", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a957b320dce39a044a05d3ad33ce4b20134c263", "html_url": "https://github.com/rust-lang/rust/commit/4a957b320dce39a044a05d3ad33ce4b20134c263", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a957b320dce39a044a05d3ad33ce4b20134c263/comments", "author": null, "committer": null, "parents": [{"sha": "75a369c5b11459baa6bf7734eeb6135998a0a7de", "url": "https://api.github.com/repos/rust-lang/rust/commits/75a369c5b11459baa6bf7734eeb6135998a0a7de", "html_url": "https://github.com/rust-lang/rust/commit/75a369c5b11459baa6bf7734eeb6135998a0a7de"}], "stats": {"total": 145, "additions": 125, "deletions": 20}, "files": [{"sha": "b581271663e7ed27d4afc02d1f2d07283263dd01", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/4a957b320dce39a044a05d3ad33ce4b20134c263/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a957b320dce39a044a05d3ad33ce4b20134c263/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=4a957b320dce39a044a05d3ad33ce4b20134c263", "patch": "@@ -78,11 +78,8 @@ impl Step for Std {\n             builder.info(&format!(\"Uplifting stage1 std ({} -> {})\", from.host, target));\n \n             // Even if we're not building std this stage, the new sysroot must\n-            // still contain the musl startup objects.\n-            if target.contains(\"musl\") {\n-                let libdir = builder.sysroot_libdir(compiler, target);\n-                copy_musl_third_party_objects(builder, target, &libdir);\n-            }\n+            // still contain the third party objects needed by various targets.\n+            copy_third_party_objects(builder, &compiler, target);\n \n             builder.ensure(StdLink {\n                 compiler: from,\n@@ -92,10 +89,7 @@ impl Step for Std {\n             return;\n         }\n \n-        if target.contains(\"musl\") {\n-            let libdir = builder.sysroot_libdir(compiler, target);\n-            copy_musl_third_party_objects(builder, target, &libdir);\n-        }\n+        copy_third_party_objects(builder, &compiler, target);\n \n         let mut cargo = builder.cargo(compiler, Mode::Std, target, \"build\");\n         std_cargo(builder, &compiler, target, &mut cargo);\n@@ -116,17 +110,36 @@ impl Step for Std {\n     }\n }\n \n-/// Copies the crt(1,i,n).o startup objects\n-///\n-/// Since musl supports fully static linking, we can cross link for it even\n-/// with a glibc-targeting toolchain, given we have the appropriate startup\n-/// files. As those shipped with glibc won't work, copy the ones provided by\n-/// musl so we have them on linux-gnu hosts.\n-fn copy_musl_third_party_objects(builder: &Builder,\n-                                 target: Interned<String>,\n-                                 into: &Path) {\n-    for &obj in &[\"crt1.o\", \"crti.o\", \"crtn.o\"] {\n-        builder.copy(&builder.musl_root(target).unwrap().join(\"lib\").join(obj), &into.join(obj));\n+/// Copies third pary objects needed by various targets.\n+fn copy_third_party_objects(builder: &Builder, compiler: &Compiler, target: Interned<String>) {\n+    let libdir = builder.sysroot_libdir(*compiler, target);\n+\n+    // Copies the crt(1,i,n).o startup objects\n+    //\n+    // Since musl supports fully static linking, we can cross link for it even\n+    // with a glibc-targeting toolchain, given we have the appropriate startup\n+    // files. As those shipped with glibc won't work, copy the ones provided by\n+    // musl so we have them on linux-gnu hosts.\n+    if target.contains(\"musl\") {\n+        for &obj in &[\"crt1.o\", \"crti.o\", \"crtn.o\"] {\n+            builder.copy(\n+                &builder.musl_root(target).unwrap().join(\"lib\").join(obj),\n+                &libdir.join(obj),\n+            );\n+        }\n+    }\n+\n+    // Copies libunwind.a compiled to be linked wit x86_64-fortanix-unknown-sgx.\n+    //\n+    // This target needs to be linked to Fortanix's port of llvm's libunwind.\n+    // libunwind requires support for rwlock and printing to stderr,\n+    // which is provided by std for this target.\n+    if target == \"x86_64-fortanix-unknown-sgx\" {\n+        let src_path_env = \"X86_FORTANIX_SGX_LIBS\";\n+        let obj = \"libunwind.a\";\n+        let src = env::var(src_path_env).expect(&format!(\"{} not found in env\", src_path_env));\n+        let src = Path::new(&src).join(obj);\n+        builder.copy(&src, &libdir.join(obj));\n     }\n }\n "}, {"sha": "906255533ad29355dfc44cb6fb624dbee123a546", "filename": "src/ci/docker/dist-various-2/Dockerfile", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a957b320dce39a044a05d3ad33ce4b20134c263/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/4a957b320dce39a044a05d3ad33ce4b20134c263/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile?ref=4a957b320dce39a044a05d3ad33ce4b20134c263", "patch": "@@ -29,6 +29,10 @@ RUN /tmp/build-fuchsia-toolchain.sh\n COPY dist-various-2/build-solaris-toolchain.sh /tmp/\n RUN /tmp/build-solaris-toolchain.sh x86_64  amd64   solaris-i386\n RUN /tmp/build-solaris-toolchain.sh sparcv9 sparcv9 solaris-sparc\n+COPY dist-various-2/build-x86_64-fortanix-unknown-sgx-toolchain.sh /tmp/\n+# We pass the commit id of the port of LLVM's libunwind to the build script.\n+# Any update to the commit id here, should cause the container image to be re-built from this point on.\n+RUN /tmp/build-x86_64-fortanix-unknown-sgx-toolchain.sh \"bbe23902411be88d7388f381becefadd6e3ef819\"\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n@@ -65,6 +69,9 @@ ENV TARGETS=$TARGETS,wasm32-unknown-unknown\n ENV TARGETS=$TARGETS,x86_64-sun-solaris\n ENV TARGETS=$TARGETS,x86_64-unknown-linux-gnux32\n ENV TARGETS=$TARGETS,x86_64-unknown-cloudabi\n+ENV TARGETS=$TARGETS,x86_64-fortanix-unknown-sgx\n+\n+ENV X86_FORTANIX_SGX_LIBS=\"/x86_64-fortanix-unknown-sgx/lib/\"\n \n ENV RUST_CONFIGURE_ARGS --enable-extended --enable-lld --disable-docs\n ENV SCRIPT python2.7 ../x.py dist --target $TARGETS"}, {"sha": "76921316df2cc625c0d6e193f694bffde09ea100", "filename": "src/ci/docker/dist-various-2/build-x86_64-fortanix-unknown-sgx-toolchain.sh", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4a957b320dce39a044a05d3ad33ce4b20134c263/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-x86_64-fortanix-unknown-sgx-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4a957b320dce39a044a05d3ad33ce4b20134c263/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-x86_64-fortanix-unknown-sgx-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-x86_64-fortanix-unknown-sgx-toolchain.sh?ref=4a957b320dce39a044a05d3ad33ce4b20134c263", "patch": "@@ -0,0 +1,57 @@\n+#!/bin/bash\n+\n+set -eu\n+source shared.sh\n+\n+if [ -z \"$1\" ]; then\n+    echo \"Usage: ${0} <commit_id>\"\n+    exit -1\n+fi\n+\n+target=\"x86_64-fortanix-unknown-sgx\"\n+url=\"https://github.com/fortanix/llvm-project/archive/${1}.tar.gz\"\n+repo_name=\"llvm-project\"\n+\n+install_prereq()\n+{\n+    apt-get update\n+    apt-get install -y --no-install-recommends \\\n+            build-essential \\\n+            ca-certificates \\\n+            cmake \\\n+            git\n+}\n+\n+# Clone Fortanix's port of llvm-project to build libunwind that would link with this target.\n+# The below method to download a single commit from llvm-project is based on fetch_submodule\n+# from init_repo.sh\n+fetch_llvm_commit()\n+{\n+    cached=\"download-${repo_name}.tar.gz\"\n+    curl -f -sSL -o ${cached} ${url}\n+    tar -xvzf ${cached}\n+    mkdir \"./${repo_name}\" && tar -xf ${cached} -C ${repo_name} --strip-components 1\n+}\n+\n+build_unwind()\n+{\n+    dir_name=\"${target}_temp\"\n+    rm -rf \"./${dir_name}\"\n+    mkdir -p ${dir_name}\n+    cd ${dir_name}\n+\n+    retry fetch_llvm_commit\n+    cd \"${repo_name}/libunwind\"\n+\n+    # Build libunwind\n+    mkdir -p build\n+    cd build\n+    cmake -DCMAKE_BUILD_TYPE=\"RELEASE\" -DRUST_SGX=1 -G \"Unix Makefiles\" -DLLVM_PATH=../../llvm/ ../\n+    make unwind_static\n+    install -D \"lib/libunwind.a\" \"/${target}/lib/libunwind.a\"\n+    rm -rf ${dir_name}\n+}\n+\n+set -x\n+hide_output install_prereq\n+hide_output build_unwind"}, {"sha": "fb917b0510e40261f28ac8ad3e7efa5a71694700", "filename": "src/ci/docker/dist-various-2/shared.sh", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a957b320dce39a044a05d3ad33ce4b20134c263/src%2Fci%2Fdocker%2Fdist-various-2%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4a957b320dce39a044a05d3ad33ce4b20134c263/src%2Fci%2Fdocker%2Fdist-various-2%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2Fshared.sh?ref=4a957b320dce39a044a05d3ad33ce4b20134c263", "patch": "@@ -13,3 +13,21 @@ exit 1\n   kill $PING_LOOP_PID\n   set -x\n }\n+\n+function retry {\n+  echo \"Attempting with retry:\" \"$@\"\n+  local n=1\n+  local max=5\n+  while true; do\n+    \"$@\" && break || {\n+      if [[ $n -lt $max ]]; then\n+        sleep $n  # don't retry immediately\n+        ((n++))\n+        echo \"Command failed. Attempt $n/$max:\"\n+      else\n+        echo \"The command has failed after $n attempts.\"\n+        return 1\n+      fi\n+    }\n+  done\n+}"}, {"sha": "ac7f95d4eae80fc587edbc548a21f18a66707f04", "filename": "src/libstd/sys/sgx/abi/entry.S", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a957b320dce39a044a05d3ad33ce4b20134c263/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S", "raw_url": "https://github.com/rust-lang/rust/raw/4a957b320dce39a044a05d3ad33ce4b20134c263/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S?ref=4a957b320dce39a044a05d3ad33ce4b20134c263", "patch": "@@ -4,6 +4,16 @@\n .global IMAGE_BASE\n IMAGE_BASE:\n \n+.section \".note.x86_64-fortanix-unknown-sgx\", \"\", @note\n+    .align 4\n+    .long 1f - 0f              /* name length (not including padding) */\n+    .long 3f - 2f              /* desc length (not including padding) */\n+    .long 1                    /* type = NT_VERSION */\n+0:  .asciz \"toolchain-version\" /* name */\n+1:  .align 4\n+2:  .long 0                    /* desc - toolchain version number, 32-bit LE */\n+3:  .align 4\n+\n .section .rodata\n /*  The XSAVE area needs to be a large chunk of readable memory, but since we are */\n /*  going to restore everything to its initial state (XSTATE_BV=0), only certain */"}]}