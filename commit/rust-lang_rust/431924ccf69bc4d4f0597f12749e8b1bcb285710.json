{"sha": "431924ccf69bc4d4f0597f12749e8b1bcb285710", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMTkyNGNjZjY5YmM0ZDRmMDU5N2YxMjc0OWU4YjFiY2IyODU3MTA=", "commit": {"author": {"name": "Ryan1729", "email": "Ryan1729@gmail.com", "date": "2020-07-27T05:15:36Z"}, "committer": {"name": "Ryan1729", "email": "Ryan1729@gmail.com", "date": "2020-07-27T05:15:36Z"}, "message": "add description for derive_ord_xor_partial_ord", "tree": {"sha": "27a47a4d49737cb073ca2cde8f0d67d0da46dd3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27a47a4d49737cb073ca2cde8f0d67d0da46dd3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/431924ccf69bc4d4f0597f12749e8b1bcb285710", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/431924ccf69bc4d4f0597f12749e8b1bcb285710", "html_url": "https://github.com/rust-lang/rust/commit/431924ccf69bc4d4f0597f12749e8b1bcb285710", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/431924ccf69bc4d4f0597f12749e8b1bcb285710/comments", "author": {"login": "Ryan1729", "id": 2133026, "node_id": "MDQ6VXNlcjIxMzMwMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2133026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryan1729", "html_url": "https://github.com/Ryan1729", "followers_url": "https://api.github.com/users/Ryan1729/followers", "following_url": "https://api.github.com/users/Ryan1729/following{/other_user}", "gists_url": "https://api.github.com/users/Ryan1729/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryan1729/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryan1729/subscriptions", "organizations_url": "https://api.github.com/users/Ryan1729/orgs", "repos_url": "https://api.github.com/users/Ryan1729/repos", "events_url": "https://api.github.com/users/Ryan1729/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryan1729/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryan1729", "id": 2133026, "node_id": "MDQ6VXNlcjIxMzMwMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2133026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryan1729", "html_url": "https://github.com/Ryan1729", "followers_url": "https://api.github.com/users/Ryan1729/followers", "following_url": "https://api.github.com/users/Ryan1729/following{/other_user}", "gists_url": "https://api.github.com/users/Ryan1729/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryan1729/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryan1729/subscriptions", "organizations_url": "https://api.github.com/users/Ryan1729/orgs", "repos_url": "https://api.github.com/users/Ryan1729/repos", "events_url": "https://api.github.com/users/Ryan1729/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryan1729/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dc974815ec8736f026dc10a070137e0d4601d52", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dc974815ec8736f026dc10a070137e0d4601d52", "html_url": "https://github.com/rust-lang/rust/commit/7dc974815ec8736f026dc10a070137e0d4601d52"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "84566252abd714b23c59ed72b9116a17d77a74da", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/431924ccf69bc4d4f0597f12749e8b1bcb285710/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431924ccf69bc4d4f0597f12749e8b1bcb285710/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=431924ccf69bc4d4f0597f12749e8b1bcb285710", "patch": "@@ -44,20 +44,50 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:**\n+    /// **What it does:** Checks for deriving `Ord` but implementing `PartialOrd`\n+    /// explicitly or vice versa.\n+    ///\n+    /// **Why is this bad?** The implementation of these traits must agree (for\n+    /// example for use with `sort`) so it\u2019s probably a bad idea to use a\n+    /// default-generated `Ord` implementation with an explicitly defined\n+    /// `PartialOrd`. In particular, the following must hold for any type\n+    /// implementing `Ord`:\n     ///\n-    /// **Why is this bad?**\n+    /// ```text\n+    /// k1.cmp(&k2) == k1.partial_cmp(&k2).unwrap()\n+    /// ```\n     ///\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n     ///\n-    /// ```rust\n-    /// // example code where clippy issues a warning\n+    /// ```rust,ignore\n+    /// #[derive(Ord, PartialEq, Eq)]\n+    /// struct Foo;\n+    ///\n+    /// impl PartialOrd for Foo {\n+    ///     ...\n+    /// }\n     /// ```\n     /// Use instead:\n-    /// ```rust\n-    /// // example code which does not raise clippy warning\n+    /// ```rust,ignore\n+    /// #[derive(PartialEq, Eq)]\n+    /// struct Foo;\n+    ///\n+    /// impl PartialOrd for Foo {\n+    ///     fn partial_cmp(&self, other: &Foo) -> Option<Ordering> {\n+    ///        Some(self.cmp(other))\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Ord for Foo {\n+    ///     ...\n+    /// }\n+    /// ```\n+    /// or, if you don't need a custom ordering:\n+    /// ```rust,ignore\n+    /// #[derive(Ord, PartialOrd, PartialEq, Eq)]\n+    /// struct Foo;\n     /// ```\n     pub DERIVE_ORD_XOR_PARTIAL_ORD,\n     correctness,"}]}