{"sha": "e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMGNiYzMzYzFmZDJmY2Q0NDZjYWI1Y2RjYzU3MzMyZDE1NDcyMWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-02T15:01:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-02T15:01:52Z"}, "message": "Auto merge of #84822 - Dylan-DPC:rollup-wego8d6, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #84358 (Update closure capture error logging for disjoint captures for disjoint captures)\n - #84392 (Make AssertKind::fmt_assert_args public)\n - #84752 (Fix debuginfo for generators)\n - #84763 (shrink doctree::Module)\n - #84821 (Fix nit in rustc_session::options)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "24eb51118a6c26a7589e45d250cee373f6edb524", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24eb51118a6c26a7589e45d250cee373f6edb524"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "html_url": "https://github.com/rust-lang/rust/commit/e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89ebad52a8b5a6d89d66a158d377cd7505ec4b48", "url": "https://api.github.com/repos/rust-lang/rust/commits/89ebad52a8b5a6d89d66a158d377cd7505ec4b48", "html_url": "https://github.com/rust-lang/rust/commit/89ebad52a8b5a6d89d66a158d377cd7505ec4b48"}, {"sha": "0bc9727e292e7eee0ef4685daeff125dce78ac1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bc9727e292e7eee0ef4685daeff125dce78ac1f", "html_url": "https://github.com/rust-lang/rust/commit/0bc9727e292e7eee0ef4685daeff125dce78ac1f"}], "stats": {"total": 913, "additions": 664, "deletions": 249}, "files": [{"sha": "280d9a4d3702179a4cef60afa2c4781602293d9a", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 34, "deletions": 30, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -309,6 +309,7 @@ impl RecursiveTypeDescription<'ll, 'tcx> {\n                     unfinished_type,\n                     member_holding_stub,\n                     member_descriptions,\n+                    None,\n                 );\n                 MetadataCreationResult::new(metadata_stub, true)\n             }\n@@ -1459,6 +1460,7 @@ struct EnumMemberDescriptionFactory<'ll, 'tcx> {\n     layout: TyAndLayout<'tcx>,\n     tag_type_metadata: Option<&'ll DIType>,\n     containing_scope: &'ll DIScope,\n+    common_members: Vec<Option<&'ll DIType>>,\n     span: Span,\n }\n \n@@ -1493,10 +1495,6 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n         } else {\n             type_metadata(cx, self.enum_type, self.span)\n         };\n-        let flags = match self.enum_type.kind() {\n-            ty::Generator(..) => DIFlags::FlagArtificial,\n-            _ => DIFlags::FlagZero,\n-        };\n \n         match self.layout.variants {\n             Variants::Single { index } => {\n@@ -1523,14 +1521,15 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     self.enum_type,\n                     variant_type_metadata,\n                     member_descriptions,\n+                    Some(&self.common_members),\n                 );\n                 vec![MemberDescription {\n                     name: if fallback { String::new() } else { variant_info.variant_name() },\n                     type_metadata: variant_type_metadata,\n                     offset: Size::ZERO,\n                     size: self.layout.size,\n                     align: self.layout.align.abi,\n-                    flags,\n+                    flags: DIFlags::FlagZero,\n                     discriminant: None,\n                     source_info: variant_info.source_info(cx),\n                 }]\n@@ -1572,6 +1571,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                             self.enum_type,\n                             variant_type_metadata,\n                             member_descriptions,\n+                            Some(&self.common_members),\n                         );\n \n                         MemberDescription {\n@@ -1584,7 +1584,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                             offset: Size::ZERO,\n                             size: self.layout.size,\n                             align: self.layout.align.abi,\n-                            flags,\n+                            flags: DIFlags::FlagZero,\n                             discriminant: Some(\n                                 self.layout.ty.discriminant_for_variant(cx.tcx, i).unwrap().val\n                                     as u64,\n@@ -1621,6 +1621,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         self.enum_type,\n                         variant_type_metadata,\n                         variant_member_descriptions,\n+                        Some(&self.common_members),\n                     );\n \n                     // Encode the information about the null variant in the union\n@@ -1667,7 +1668,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         offset: Size::ZERO,\n                         size: variant.size,\n                         align: variant.align.abi,\n-                        flags,\n+                        flags: DIFlags::FlagZero,\n                         discriminant: None,\n                         source_info: variant_info.source_info(cx),\n                     }]\n@@ -1695,6 +1696,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                                 self.enum_type,\n                                 variant_type_metadata,\n                                 member_descriptions,\n+                                Some(&self.common_members),\n                             );\n \n                             let niche_value = if i == dataful_variant {\n@@ -1717,7 +1719,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                                 offset: Size::ZERO,\n                                 size: self.layout.size,\n                                 align: self.layout.align.abi,\n-                                flags,\n+                                flags: DIFlags::FlagZero,\n                                 discriminant: niche_value,\n                                 source_info: variant_info.source_info(cx),\n                             }\n@@ -1849,13 +1851,6 @@ impl<'tcx> VariantInfo<'_, 'tcx> {\n         }\n         None\n     }\n-\n-    fn is_artificial(&self) -> bool {\n-        match self {\n-            VariantInfo::Generator { .. } => true,\n-            VariantInfo::Adt(..) => false,\n-        }\n-    }\n }\n \n /// Returns a tuple of (1) `type_metadata_stub` of the variant, (2) a\n@@ -1881,8 +1876,7 @@ fn describe_enum_variant(\n             &variant_name,\n             unique_type_id,\n             Some(containing_scope),\n-            // FIXME(tmandry): This doesn't seem to have any effect.\n-            if variant.is_artificial() { DIFlags::FlagArtificial } else { DIFlags::FlagZero },\n+            DIFlags::FlagZero,\n         )\n     });\n \n@@ -1945,11 +1939,6 @@ fn prepare_enum_metadata(\n ) -> RecursiveTypeDescription<'ll, 'tcx> {\n     let tcx = cx.tcx;\n     let enum_name = compute_debuginfo_type_name(tcx, enum_type, false);\n-    // FIXME(tmandry): This doesn't seem to have any effect.\n-    let enum_flags = match enum_type.kind() {\n-        ty::Generator(..) => DIFlags::FlagArtificial,\n-        _ => DIFlags::FlagZero,\n-    };\n \n     let containing_scope = get_namespace_for_item(cx, enum_def_id);\n     // FIXME: This should emit actual file metadata for the enum, but we\n@@ -2082,7 +2071,7 @@ fn prepare_enum_metadata(\n                     UNKNOWN_LINE_NUMBER,\n                     layout.size.bits(),\n                     layout.align.abi.bits() as u32,\n-                    enum_flags,\n+                    DIFlags::FlagZero,\n                     None,\n                     0, // RuntimeLang\n                     unique_type_id_str.as_ptr().cast(),\n@@ -2102,6 +2091,7 @@ fn prepare_enum_metadata(\n                 layout,\n                 tag_type_metadata: discriminant_type_metadata,\n                 containing_scope,\n+                common_members: vec![],\n                 span,\n             }),\n         );\n@@ -2171,7 +2161,7 @@ fn prepare_enum_metadata(\n         }\n     };\n \n-    let mut outer_fields = match layout.variants {\n+    let outer_fields = match layout.variants {\n         Variants::Single { .. } => vec![],\n         Variants::Multiple { .. } => {\n             let tuple_mdf = TupleMemberDescriptionFactory {\n@@ -2203,18 +2193,21 @@ fn prepare_enum_metadata(\n             UNKNOWN_LINE_NUMBER,\n             layout.size.bits(),\n             layout.align.abi.bits() as u32,\n-            enum_flags,\n+            DIFlags::FlagZero,\n             discriminator_metadata,\n             empty_array,\n             variant_part_unique_type_id_str.as_ptr().cast(),\n             variant_part_unique_type_id_str.len(),\n         )\n     };\n-    outer_fields.push(Some(variant_part));\n \n     let struct_wrapper = {\n         // The variant part must be wrapped in a struct according to DWARF.\n-        let type_array = create_DIArray(DIB(cx), &outer_fields);\n+        // All fields except the discriminant (including `outer_fields`)\n+        // should be put into structures inside the variant part, which gives\n+        // an equivalent layout but offers us much better integration with\n+        // debuggers.\n+        let type_array = create_DIArray(DIB(cx), &[Some(variant_part)]);\n \n         let type_map = debug_context(cx).type_map.borrow();\n         let unique_type_id_str = type_map.get_unique_type_id_as_string(unique_type_id);\n@@ -2229,7 +2222,7 @@ fn prepare_enum_metadata(\n                 UNKNOWN_LINE_NUMBER,\n                 layout.size.bits(),\n                 layout.align.abi.bits() as u32,\n-                enum_flags,\n+                DIFlags::FlagZero,\n                 None,\n                 type_array,\n                 0,\n@@ -2251,6 +2244,7 @@ fn prepare_enum_metadata(\n             layout,\n             tag_type_metadata: None,\n             containing_scope,\n+            common_members: outer_fields,\n             span,\n         }),\n     )\n@@ -2283,7 +2277,13 @@ fn composite_type_metadata(\n         DIFlags::FlagZero,\n     );\n     // ... and immediately create and add the member descriptions.\n-    set_members_of_composite_type(cx, composite_type, composite_type_metadata, member_descriptions);\n+    set_members_of_composite_type(\n+        cx,\n+        composite_type,\n+        composite_type_metadata,\n+        member_descriptions,\n+        None,\n+    );\n \n     composite_type_metadata\n }\n@@ -2293,6 +2293,7 @@ fn set_members_of_composite_type(\n     composite_type: Ty<'tcx>,\n     composite_type_metadata: &'ll DICompositeType,\n     member_descriptions: Vec<MemberDescription<'ll>>,\n+    common_members: Option<&Vec<Option<&'ll DIType>>>,\n ) {\n     // In some rare cases LLVM metadata uniquing would lead to an existing type\n     // description being used instead of a new one created in\n@@ -2311,10 +2312,13 @@ fn set_members_of_composite_type(\n         }\n     }\n \n-    let member_metadata: Vec<_> = member_descriptions\n+    let mut member_metadata: Vec<_> = member_descriptions\n         .into_iter()\n         .map(|desc| Some(desc.into_metadata(cx, composite_type_metadata)))\n         .collect();\n+    if let Some(other_members) = common_members {\n+        member_metadata.extend(other_members.iter());\n+    }\n \n     let type_params = compute_type_parameters(cx, composite_type);\n     unsafe {"}, {"sha": "252b5fc70de9a4028ced2afefeb57c22295ac1bb", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -683,6 +683,15 @@ impl BorrowKind {\n             BorrowKind::Mut { allow_two_phase_borrow } => allow_two_phase_borrow,\n         }\n     }\n+\n+    pub fn describe_mutability(&self) -> String {\n+        match *self {\n+            BorrowKind::Shared | BorrowKind::Shallow | BorrowKind::Unique => {\n+                \"immutable\".to_string()\n+            }\n+            BorrowKind::Mut { .. } => \"mutable\".to_string(),\n+        }\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -1340,7 +1349,7 @@ impl<O> AssertKind<O> {\n     }\n \n     /// Format the message arguments for the `assert(cond, msg..)` terminator in MIR printing.\n-    fn fmt_assert_args<W: Write>(&self, f: &mut W) -> fmt::Result\n+    pub fn fmt_assert_args<W: Write>(&self, f: &mut W) -> fmt::Result\n     where\n         O: Debug,\n     {\n@@ -2369,6 +2378,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                             };\n                             let mut struct_fmt = fmt.debug_struct(&name);\n \n+                            // FIXME(project-rfc-2229#48): This should be a list of capture names/places\n                             if let Some(upvars) = tcx.upvars_mentioned(def_id) {\n                                 for (&var_id, place) in iter::zip(upvars.keys(), places) {\n                                     let var_name = tcx.hir().name(var_id);\n@@ -2388,6 +2398,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                             let name = format!(\"[generator@{:?}]\", tcx.hir().span(hir_id));\n                             let mut struct_fmt = fmt.debug_struct(&name);\n \n+                            // FIXME(project-rfc-2229#48): This should be a list of capture names/places\n                             if let Some(upvars) = tcx.upvars_mentioned(def_id) {\n                                 for (&var_id, place) in iter::zip(upvars.keys(), places) {\n                                     let var_name = tcx.hir().name(var_id);"}, {"sha": "7790369af7fef9fdb7d17727868a318a9e8d347d", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -151,6 +151,10 @@ pub struct CapturedPlace<'tcx> {\n }\n \n impl CapturedPlace<'tcx> {\n+    pub fn to_string(&self, tcx: TyCtxt<'tcx>) -> String {\n+        place_to_string_for_capture(tcx, &self.place)\n+    }\n+\n     /// Returns the hir-id of the root variable for the captured place.\n     /// e.g., if `a.b.c` was captured, would return the hir-id for `a`.\n     pub fn get_root_variable(&self) -> hir::HirId {\n@@ -168,6 +172,22 @@ impl CapturedPlace<'tcx> {\n         }\n     }\n \n+    /// Return span pointing to use that resulted in selecting the captured path\n+    pub fn get_path_span(&self, tcx: TyCtxt<'tcx>) -> Span {\n+        if let Some(path_expr_id) = self.info.path_expr_id {\n+            tcx.hir().span(path_expr_id)\n+        } else if let Some(capture_kind_expr_id) = self.info.capture_kind_expr_id {\n+            tcx.hir().span(capture_kind_expr_id)\n+        } else {\n+            // Fallback on upvars mentioned if neither path or capture expr id is captured\n+\n+            // Safe to unwrap since we know this place is captured by the closure, therefore the closure must have upvars.\n+            tcx.upvars_mentioned(self.get_closure_local_def_id()).unwrap()\n+                [&self.get_root_variable()]\n+                .span\n+        }\n+    }\n+\n     /// Return span pointing to use that resulted in selecting the current capture kind\n     pub fn get_capture_kind_span(&self, tcx: TyCtxt<'tcx>) -> Span {\n         if let Some(capture_kind_expr_id) = self.info.capture_kind_expr_id {"}, {"sha": "30e0b293ffb2f0840acce9f6f8ad7d879a4b4104", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -99,7 +99,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             );\n             err.span_label(span, format!(\"use of possibly-uninitialized {}\", item_msg));\n \n-            use_spans.var_span_label(\n+            use_spans.var_span_label_path_only(\n                 &mut err,\n                 format!(\"{} occurs due to use{}\", desired_action.as_noun(), use_spans.describe()),\n             );\n@@ -255,6 +255,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 partially_str,\n                                 move_spans.describe()\n                             ),\n+                            \"moved\",\n                         );\n                     }\n                 }\n@@ -304,7 +305,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 }\n             }\n \n-            use_spans.var_span_label(\n+            use_spans.var_span_label_path_only(\n                 &mut err,\n                 format!(\"{} occurs due to use{}\", desired_action.as_noun(), use_spans.describe()),\n             );\n@@ -434,13 +435,16 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         err.span_label(borrow_span, format!(\"borrow of {} occurs here\", borrow_msg));\n         err.span_label(span, format!(\"move out of {} occurs here\", value_msg));\n \n-        borrow_spans.var_span_label(\n+        borrow_spans.var_span_label_path_only(\n             &mut err,\n             format!(\"borrow occurs due to use{}\", borrow_spans.describe()),\n         );\n \n-        move_spans\n-            .var_span_label(&mut err, format!(\"move occurs due to use{}\", move_spans.describe()));\n+        move_spans.var_span_label(\n+            &mut err,\n+            format!(\"move occurs due to use{}\", move_spans.describe()),\n+            \"moved\",\n+        );\n \n         self.explain_why_borrow_contains_point(location, borrow, None)\n             .add_explanation_to_diagnostic(\n@@ -468,18 +472,24 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let use_spans = self.move_spans(place.as_ref(), location);\n         let span = use_spans.var_or_use();\n \n+        // If the attempted use is in a closure then we do not care about the path span of the place we are currently trying to use\n+        // we call `var_span_label` on `borrow_spans` to annotate if the existing borrow was in a closure\n         let mut err = self.cannot_use_when_mutably_borrowed(\n             span,\n             &self.describe_any_place(place.as_ref()),\n             borrow_span,\n             &self.describe_any_place(borrow.borrowed_place.as_ref()),\n         );\n \n-        borrow_spans.var_span_label(&mut err, {\n-            let place = &borrow.borrowed_place;\n-            let desc_place = self.describe_any_place(place.as_ref());\n-            format!(\"borrow occurs due to use of {}{}\", desc_place, borrow_spans.describe())\n-        });\n+        borrow_spans.var_span_label(\n+            &mut err,\n+            {\n+                let place = &borrow.borrowed_place;\n+                let desc_place = self.describe_any_place(place.as_ref());\n+                format!(\"borrow occurs due to use of {}{}\", desc_place, borrow_spans.describe())\n+            },\n+            \"mutable\",\n+        );\n \n         self.explain_why_borrow_contains_point(location, borrow, None)\n             .add_explanation_to_diagnostic(\n@@ -591,6 +601,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             desc_place,\n                             borrow_spans.describe(),\n                         ),\n+                        \"immutable\",\n                     );\n \n                     return err;\n@@ -667,7 +678,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         if issued_spans == borrow_spans {\n             borrow_spans.var_span_label(\n                 &mut err,\n-                format!(\"borrows occur due to use of {}{}\", desc_place, borrow_spans.describe()),\n+                format!(\"borrows occur due to use of {}{}\", desc_place, borrow_spans.describe(),),\n+                gen_borrow_kind.describe_mutability(),\n             );\n         } else {\n             let borrow_place = &issued_borrow.borrowed_place;\n@@ -679,6 +691,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     borrow_place_desc,\n                     issued_spans.describe(),\n                 ),\n+                issued_borrow.kind.describe_mutability(),\n             );\n \n             borrow_spans.var_span_label(\n@@ -688,6 +701,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     desc_place,\n                     borrow_spans.describe(),\n                 ),\n+                gen_borrow_kind.describe_mutability(),\n             );\n         }\n \n@@ -847,7 +861,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             self.prefixes(borrow.borrowed_place.as_ref(), PrefixSet::All).last().unwrap();\n \n         let borrow_spans = self.retrieve_borrow_spans(borrow);\n-        let borrow_span = borrow_spans.var_or_use();\n+        let borrow_span = borrow_spans.var_or_use_path_span();\n \n         assert!(root_place.projection.is_empty());\n         let proper_span = self.body.local_decls[root_place.local].source_info.span;\n@@ -987,7 +1001,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             location, name, borrow, drop_span, borrow_spans\n         );\n \n-        let borrow_span = borrow_spans.var_or_use();\n+        let borrow_span = borrow_spans.var_or_use_path_span();\n         if let BorrowExplanation::MustBeValidFor {\n             category,\n             span,\n@@ -1575,6 +1589,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 loan_spans.var_span_label(\n                     &mut err,\n                     format!(\"borrow occurs due to use{}\", loan_spans.describe()),\n+                    loan.kind.describe_mutability(),\n                 );\n \n                 err.buffer(&mut self.errors_buffer);\n@@ -1585,8 +1600,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         let mut err = self.cannot_assign_to_borrowed(span, loan_span, &descr_place);\n \n-        loan_spans\n-            .var_span_label(&mut err, format!(\"borrow occurs due to use{}\", loan_spans.describe()));\n+        loan_spans.var_span_label(\n+            &mut err,\n+            format!(\"borrow occurs due to use{}\", loan_spans.describe()),\n+            loan.kind.describe_mutability(),\n+        );\n \n         self.explain_why_borrow_contains_point(location, loan, None).add_explanation_to_diagnostic(\n             self.infcx.tcx,"}, {"sha": "1b0cae51d585df974fcad6604a62dd800596ab75", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/explain_borrow.rs", "status": "modified", "additions": 54, "deletions": 17, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -24,8 +24,8 @@ use super::{find_use, RegionName, UseSpans};\n \n #[derive(Debug)]\n pub(in crate::borrow_check) enum BorrowExplanation {\n-    UsedLater(LaterUseKind, Span),\n-    UsedLaterInLoop(LaterUseKind, Span),\n+    UsedLater(LaterUseKind, Span, Option<Span>),\n+    UsedLaterInLoop(LaterUseKind, Span, Option<Span>),\n     UsedLaterWhenDropped {\n         drop_loc: Location,\n         dropped_local: Local,\n@@ -67,22 +67,39 @@ impl BorrowExplanation {\n         borrow_span: Option<Span>,\n     ) {\n         match *self {\n-            BorrowExplanation::UsedLater(later_use_kind, var_or_use_span) => {\n+            BorrowExplanation::UsedLater(later_use_kind, var_or_use_span, path_span) => {\n                 let message = match later_use_kind {\n                     LaterUseKind::TraitCapture => \"captured here by trait object\",\n                     LaterUseKind::ClosureCapture => \"captured here by closure\",\n                     LaterUseKind::Call => \"used by call\",\n                     LaterUseKind::FakeLetRead => \"stored here\",\n                     LaterUseKind::Other => \"used here\",\n                 };\n-                if !borrow_span.map_or(false, |sp| sp.overlaps(var_or_use_span)) {\n-                    err.span_label(\n-                        var_or_use_span,\n-                        format!(\"{}borrow later {}\", borrow_desc, message),\n-                    );\n+                // We can use `var_or_use_span` if either `path_span` is not present, or both spans are the same\n+                if path_span.map(|path_span| path_span == var_or_use_span).unwrap_or(true) {\n+                    if borrow_span.map(|sp| !sp.overlaps(var_or_use_span)).unwrap_or(true) {\n+                        err.span_label(\n+                            var_or_use_span,\n+                            format!(\"{}borrow later {}\", borrow_desc, message),\n+                        );\n+                    }\n+                } else {\n+                    // path_span must be `Some` as otherwise the if condition is true\n+                    let path_span = path_span.unwrap();\n+                    // path_span is only present in the case of closure capture\n+                    assert!(matches!(later_use_kind, LaterUseKind::ClosureCapture));\n+                    if !borrow_span.map_or(false, |sp| sp.overlaps(var_or_use_span)) {\n+                        let path_label = \"used here by closure\";\n+                        let capture_kind_label = message;\n+                        err.span_label(\n+                            var_or_use_span,\n+                            format!(\"{}borrow later {}\", borrow_desc, capture_kind_label),\n+                        );\n+                        err.span_label(path_span, path_label);\n+                    }\n                 }\n             }\n-            BorrowExplanation::UsedLaterInLoop(later_use_kind, var_or_use_span) => {\n+            BorrowExplanation::UsedLaterInLoop(later_use_kind, var_or_use_span, path_span) => {\n                 let message = match later_use_kind {\n                     LaterUseKind::TraitCapture => {\n                         \"borrow captured here by trait object, in later iteration of loop\"\n@@ -94,7 +111,24 @@ impl BorrowExplanation {\n                     LaterUseKind::FakeLetRead => \"borrow later stored here\",\n                     LaterUseKind::Other => \"borrow used here, in later iteration of loop\",\n                 };\n-                err.span_label(var_or_use_span, format!(\"{}{}\", borrow_desc, message));\n+                // We can use `var_or_use_span` if either `path_span` is not present, or both spans are the same\n+                if path_span.map(|path_span| path_span == var_or_use_span).unwrap_or(true) {\n+                    err.span_label(var_or_use_span, format!(\"{}{}\", borrow_desc, message));\n+                } else {\n+                    // path_span must be `Some` as otherwise the if condition is true\n+                    let path_span = path_span.unwrap();\n+                    // path_span is only present in the case of closure capture\n+                    assert!(matches!(later_use_kind, LaterUseKind::ClosureCapture));\n+                    if borrow_span.map(|sp| !sp.overlaps(var_or_use_span)).unwrap_or(true) {\n+                        let path_label = \"used here by closure\";\n+                        let capture_kind_label = message;\n+                        err.span_label(\n+                            var_or_use_span,\n+                            format!(\"{}borrow later {}\", borrow_desc, capture_kind_label),\n+                        );\n+                        err.span_label(path_span, path_label);\n+                    }\n+                }\n             }\n             BorrowExplanation::UsedLaterWhenDropped {\n                 drop_loc,\n@@ -311,13 +345,13 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 let borrow_location = location;\n                 if self.is_use_in_later_iteration_of_loop(borrow_location, location) {\n                     let later_use = self.later_use_kind(borrow, spans, location);\n-                    BorrowExplanation::UsedLaterInLoop(later_use.0, later_use.1)\n+                    BorrowExplanation::UsedLaterInLoop(later_use.0, later_use.1, later_use.2)\n                 } else {\n                     // Check if the location represents a `FakeRead`, and adapt the error\n                     // message to the `FakeReadCause` it is from: in particular,\n                     // the ones inserted in optimized `let var = <expr>` patterns.\n                     let later_use = self.later_use_kind(borrow, spans, location);\n-                    BorrowExplanation::UsedLater(later_use.0, later_use.1)\n+                    BorrowExplanation::UsedLater(later_use.0, later_use.1, later_use.2)\n                 }\n             }\n \n@@ -498,16 +532,19 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     }\n \n     /// Determine how the borrow was later used.\n+    /// First span returned points to the location of the conflicting use\n+    /// Second span if `Some` is returned in the case of closures and points\n+    /// to the use of the path\n     fn later_use_kind(\n         &self,\n         borrow: &BorrowData<'tcx>,\n         use_spans: UseSpans<'tcx>,\n         location: Location,\n-    ) -> (LaterUseKind, Span) {\n+    ) -> (LaterUseKind, Span, Option<Span>) {\n         match use_spans {\n-            UseSpans::ClosureUse { var_span, .. } => {\n+            UseSpans::ClosureUse { capture_kind_span, path_span, .. } => {\n                 // Used in a closure.\n-                (LaterUseKind::ClosureCapture, var_span)\n+                (LaterUseKind::ClosureCapture, capture_kind_span, Some(path_span))\n             }\n             UseSpans::PatUse(span)\n             | UseSpans::OtherUse(span)\n@@ -542,15 +579,15 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 }\n                             }\n                         };\n-                        return (LaterUseKind::Call, function_span);\n+                        return (LaterUseKind::Call, function_span, None);\n                     } else {\n                         LaterUseKind::Other\n                     }\n                 } else {\n                     LaterUseKind::Other\n                 };\n \n-                (kind, span)\n+                (kind, span, None)\n             }\n         }\n     }"}, {"sha": "1bb8c7ebe5afd177473d556837f58f48da7eeece", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 79, "deletions": 36, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -18,7 +18,6 @@ use rustc_span::{\n     Span,\n };\n use rustc_target::abi::VariantIdx;\n-use std::iter;\n \n use super::borrow_set::BorrowData;\n use super::MirBorrowckCtxt;\n@@ -216,11 +215,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             PlaceRef { local, projection: [proj_base @ .., elem] } => {\n                 match elem {\n                     ProjectionElem::Deref => {\n-                        // FIXME(project-rfc_2229#36): print capture precisely here.\n                         let upvar_field_projection = self.is_upvar_field_projection(place);\n                         if let Some(field) = upvar_field_projection {\n                             let var_index = field.index();\n-                            let name = self.upvars[var_index].name.to_string();\n+                            let name = self.upvars[var_index].place.to_string(self.infcx.tcx);\n                             if self.upvars[var_index].by_ref {\n                                 buf.push_str(&name);\n                             } else {\n@@ -265,7 +263,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         let upvar_field_projection = self.is_upvar_field_projection(place);\n                         if let Some(field) = upvar_field_projection {\n                             let var_index = field.index();\n-                            let name = self.upvars[var_index].name.to_string();\n+                            let name = self.upvars[var_index].place.to_string(self.infcx.tcx);\n                             buf.push_str(&name);\n                         } else {\n                             let field_name = self\n@@ -550,8 +548,12 @@ pub(super) enum UseSpans<'tcx> {\n         /// The span of the args of the closure, including the `move` keyword if\n         /// it's present.\n         args_span: Span,\n-        /// The span of the first use of the captured variable inside the closure.\n-        var_span: Span,\n+        /// The span of the use resulting in capture kind\n+        /// Check `ty::CaptureInfo` for more details\n+        capture_kind_span: Span,\n+        /// The span of the use resulting in the captured path\n+        /// Check `ty::CaptureInfo` for more details\n+        path_span: Span,\n     },\n     /// The access is caused by using a variable as the receiver of a method\n     /// that takes 'self'\n@@ -606,9 +608,23 @@ impl UseSpans<'_> {\n         }\n     }\n \n+    /// Returns the span of `self`, in the case of a `ClosureUse` returns the `path_span`\n+    pub(super) fn var_or_use_path_span(self) -> Span {\n+        match self {\n+            UseSpans::ClosureUse { path_span: span, .. }\n+            | UseSpans::PatUse(span)\n+            | UseSpans::OtherUse(span) => span,\n+            UseSpans::FnSelfUse {\n+                fn_call_span, kind: FnSelfUseKind::DerefCoercion { .. }, ..\n+            } => fn_call_span,\n+            UseSpans::FnSelfUse { var_span, .. } => var_span,\n+        }\n+    }\n+\n+    /// Returns the span of `self`, in the case of a `ClosureUse` returns the `capture_kind_span`\n     pub(super) fn var_or_use(self) -> Span {\n         match self {\n-            UseSpans::ClosureUse { var_span: span, .. }\n+            UseSpans::ClosureUse { capture_kind_span: span, .. }\n             | UseSpans::PatUse(span)\n             | UseSpans::OtherUse(span) => span,\n             UseSpans::FnSelfUse {\n@@ -636,14 +652,35 @@ impl UseSpans<'_> {\n         }\n     }\n \n+    // Add a span label to the use of the captured variable, if it exists.\n+    // only adds label to the `path_span`\n+    pub(super) fn var_span_label_path_only(\n+        self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        message: impl Into<String>,\n+    ) {\n+        if let UseSpans::ClosureUse { path_span, .. } = self {\n+            err.span_label(path_span, message);\n+        }\n+    }\n+\n     // Add a span label to the use of the captured variable, if it exists.\n     pub(super) fn var_span_label(\n         self,\n         err: &mut DiagnosticBuilder<'_>,\n         message: impl Into<String>,\n+        kind_desc: impl Into<String>,\n     ) {\n-        if let UseSpans::ClosureUse { var_span, .. } = self {\n-            err.span_label(var_span, message);\n+        if let UseSpans::ClosureUse { capture_kind_span, path_span, .. } = self {\n+            if capture_kind_span == path_span {\n+                err.span_label(capture_kind_span, message);\n+            } else {\n+                let capture_kind_label =\n+                    format!(\"capture is {} because of use here\", kind_desc.into());\n+                let path_label = message;\n+                err.span_label(capture_kind_span, capture_kind_label);\n+                err.span_label(path_span, path_label);\n+            }\n         }\n     }\n \n@@ -791,10 +828,15 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 box AggregateKind::Closure(def_id, _)\n                 | box AggregateKind::Generator(def_id, _, _) => {\n                     debug!(\"move_spans: def_id={:?} places={:?}\", def_id, places);\n-                    if let Some((args_span, generator_kind, var_span)) =\n+                    if let Some((args_span, generator_kind, capture_kind_span, path_span)) =\n                         self.closure_span(*def_id, moved_place, places)\n                     {\n-                        return ClosureUse { generator_kind, args_span, var_span };\n+                        return ClosureUse {\n+                            generator_kind,\n+                            args_span,\n+                            capture_kind_span,\n+                            path_span,\n+                        };\n                     }\n                 }\n                 _ => {}\n@@ -809,10 +851,15 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 | FakeReadCause::ForLet(Some(closure_def_id)) => {\n                     debug!(\"move_spans: def_id={:?} place={:?}\", closure_def_id, place);\n                     let places = &[Operand::Move(*place)];\n-                    if let Some((args_span, generator_kind, var_span)) =\n+                    if let Some((args_span, generator_kind, capture_kind_span, path_span)) =\n                         self.closure_span(closure_def_id, moved_place, places)\n                     {\n-                        return ClosureUse { generator_kind, args_span, var_span };\n+                        return ClosureUse {\n+                            generator_kind,\n+                            args_span,\n+                            capture_kind_span,\n+                            path_span,\n+                        };\n                     }\n                 }\n                 _ => {}\n@@ -972,10 +1019,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     \"borrow_spans: def_id={:?} is_generator={:?} places={:?}\",\n                     def_id, is_generator, places\n                 );\n-                if let Some((args_span, generator_kind, var_span)) =\n+                if let Some((args_span, generator_kind, capture_kind_span, path_span)) =\n                     self.closure_span(*def_id, Place::from(target).as_ref(), places)\n                 {\n-                    return ClosureUse { generator_kind, args_span, var_span };\n+                    return ClosureUse { generator_kind, args_span, capture_kind_span, path_span };\n                 } else {\n                     return OtherUse(use_span);\n                 }\n@@ -989,13 +1036,15 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         OtherUse(use_span)\n     }\n \n-    /// Finds the span of a captured variable within a closure or generator.\n+    /// Finds the spans of a captured place within a closure or generator.\n+    /// The first span is the location of the use resulting in the capture kind of the capture\n+    /// The second span is the location the use resulting in the captured path of the capture\n     fn closure_span(\n         &self,\n         def_id: DefId,\n         target_place: PlaceRef<'tcx>,\n         places: &[Operand<'tcx>],\n-    ) -> Option<(Span, Option<GeneratorKind>, Span)> {\n+    ) -> Option<(Span, Option<GeneratorKind>, Span, Span)> {\n         debug!(\n             \"closure_span: def_id={:?} target_place={:?} places={:?}\",\n             def_id, target_place, places\n@@ -1005,13 +1054,13 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let expr = &self.infcx.tcx.hir().expect_expr(hir_id).kind;\n         debug!(\"closure_span: hir_id={:?} expr={:?}\", hir_id, expr);\n         if let hir::ExprKind::Closure(.., body_id, args_span, _) = expr {\n-            for (captured_place, place) in iter::zip(\n-                self.infcx.tcx.typeck(def_id.expect_local()).closure_min_captures_flattened(def_id),\n-                places,\n-            ) {\n-                let upvar_hir_id = captured_place.get_root_variable();\n-                //FIXME(project-rfc-2229#8): Use better span from captured_place\n-                let span = self.infcx.tcx.upvars_mentioned(local_did)?[&upvar_hir_id].span;\n+            for (captured_place, place) in self\n+                .infcx\n+                .tcx\n+                .typeck(def_id.expect_local())\n+                .closure_min_captures_flattened(def_id)\n+                .zip(places)\n+            {\n                 match place {\n                     Operand::Copy(place) | Operand::Move(place)\n                         if target_place == place.as_ref() =>\n@@ -1020,18 +1069,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         let body = self.infcx.tcx.hir().body(*body_id);\n                         let generator_kind = body.generator_kind();\n \n-                        // If we have a more specific span available, point to that.\n-                        // We do this even though this span might be part of a borrow error\n-                        // message rather than a move error message. Our goal is to point\n-                        // to a span that shows why the upvar is used in the closure,\n-                        // so a move-related span is as good as any (and potentially better,\n-                        // if the overall error is due to a move of the upvar).\n-\n-                        let usage_span = match captured_place.info.capture_kind {\n-                            ty::UpvarCapture::ByValue(Some(span)) => span,\n-                            _ => span,\n-                        };\n-                        return Some((*args_span, generator_kind, usage_span));\n+                        return Some((\n+                            *args_span,\n+                            generator_kind,\n+                            captured_place.get_capture_kind_span(self.infcx.tcx),\n+                            captured_place.get_path_span(self.infcx.tcx),\n+                        ));\n                     }\n                     _ => {}\n                 }"}, {"sha": "3f87d9c7ac94811ebb95ba53e97bed6b7e8bfcea", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -345,10 +345,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 };\n \n                 let upvar = &self.upvars[upvar_field.unwrap().index()];\n-                // FIXME(project-rfc-2229#8): Improve borrow-check diagnostics in case of precise\n-                //                            capture.\n                 let upvar_hir_id = upvar.place.get_root_variable();\n-                let upvar_name = upvar.name;\n+                let upvar_name = upvar.place.to_string(self.infcx.tcx);\n                 let upvar_span = self.infcx.tcx.hir().span(upvar_hir_id);\n \n                 let place_name = self.describe_any_place(move_place.as_ref());\n@@ -478,8 +476,11 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 self.note_type_does_not_implement_copy(err, &place_desc, place_ty, Some(span), \"\");\n \n                 use_spans.args_span_label(err, format!(\"move out of {} occurs here\", place_desc));\n-                use_spans\n-                    .var_span_label(err, format!(\"move occurs due to use{}\", use_spans.describe()));\n+                use_spans.var_span_label(\n+                    err,\n+                    format!(\"move occurs due to use{}\", use_spans.describe()),\n+                    \"moved\",\n+                );\n             }\n         }\n     }"}, {"sha": "88122777d2e67e2d32e9e939594b855f0d488dba", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -85,7 +85,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     if self.is_upvar_field_projection(access_place.as_ref()).is_some() {\n                         reason = \", as it is not declared as mutable\".to_string();\n                     } else {\n-                        let name = self.upvars[upvar_index.index()].name;\n+                        let name = self.upvars[upvar_index.index()].place.to_string(self.infcx.tcx);\n                         reason = format!(\", as `{}` is not declared as mutable\", name);\n                     }\n                 }\n@@ -195,6 +195,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         \"mutable borrow occurs due to use of {} in closure\",\n                         self.describe_any_place(access_place.as_ref()),\n                     ),\n+                    \"mutable\",\n                 );\n                 borrow_span\n             }"}, {"sha": "8665ef06126a1b395c80fc8d71cbbc4e13b5352e", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -385,6 +385,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n         diag.span_label(*span, message);\n \n+        // FIXME(project-rfc-2229#48): This should store a captured_place not a hir id\n         if let ReturnConstraint::ClosureUpvar(upvar) = kind {\n             let def_id = match self.regioncx.universal_regions().defining_ty {\n                 DefiningTy::Closure(def_id, _) => def_id,"}, {"sha": "4c35be39a3d3389215fc9f005052a2ca7c98e069", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -74,9 +74,6 @@ crate use region_infer::RegionInferenceContext;\n // FIXME(eddyb) perhaps move this somewhere more centrally.\n #[derive(Debug)]\n crate struct Upvar<'tcx> {\n-    // FIXME(project-rfc_2229#36): print capture precisely here.\n-    name: Symbol,\n-\n     place: CapturedPlace<'tcx>,\n \n     /// If true, the capture is behind a reference.\n@@ -159,13 +156,12 @@ fn do_mir_borrowck<'a, 'tcx>(\n     let upvars: Vec<_> = tables\n         .closure_min_captures_flattened(def.did.to_def_id())\n         .map(|captured_place| {\n-            let var_hir_id = captured_place.get_root_variable();\n             let capture = captured_place.info.capture_kind;\n             let by_ref = match capture {\n                 ty::UpvarCapture::ByValue(_) => false,\n                 ty::UpvarCapture::ByRef(..) => true,\n             };\n-            Upvar { name: tcx.hir().name(var_hir_id), place: captured_place.clone(), by_ref }\n+            Upvar { place: captured_place.clone(), by_ref }\n         })\n         .collect();\n "}, {"sha": "cd28517bfbc3aadac8ba2b03984b668cfc5e2a99", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -286,7 +286,7 @@ macro_rules! options {\n \n     pub type $setter_name = fn(&mut $struct_name, v: Option<&str>) -> bool;\n     pub const $stat: &[(&str, $setter_name, &str, &str)] =\n-        &[ $( (stringify!($opt), crate::options::parse::$opt, $crate::options::desc::$parse, $desc) ),* ];\n+        &[ $( (stringify!($opt), $crate::options::parse::$opt, $crate::options::desc::$parse, $desc) ),* ];\n \n     // Sometimes different options need to build a common structure.\n     // That structure can kept in one of the options' fields, the others become dummy."}, {"sha": "f17494127948414f1c363abde40bf5878701c439", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -763,7 +763,9 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                         PlaceBase::Local(*var_hir_id)\n                     };\n                     let place_with_id = PlaceWithHirId::new(\n-                        capture_info.path_expr_id.unwrap_or(closure_expr.hir_id),\n+                        capture_info.path_expr_id.unwrap_or(\n+                            capture_info.capture_kind_expr_id.unwrap_or(closure_expr.hir_id),\n+                        ),\n                         place.base_ty,\n                         place_base,\n                         place.projections.clone(),"}, {"sha": "78b76b05018dc8402e9dcf8efdb33271f12abc47", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -100,12 +100,13 @@ impl Clean<Item> for doctree::Module<'_> {\n         // determine if we should display the inner contents or\n         // the outer `mod` item for the source code.\n         let span = Span::from_rustc_span({\n+            let where_outer = self.where_outer(cx.tcx);\n             let sm = cx.sess().source_map();\n-            let outer = sm.lookup_char_pos(self.where_outer.lo());\n+            let outer = sm.lookup_char_pos(where_outer.lo());\n             let inner = sm.lookup_char_pos(self.where_inner.lo());\n             if outer.file.start_pos == inner.file.start_pos {\n                 // mod foo { ... }\n-                self.where_outer\n+                where_outer\n             } else {\n                 // mod foo; (and a separate SourceFile for the contents)\n                 self.where_inner"}, {"sha": "eadac89f79ef22e0abcb25e6ae19d3d57cd37d14", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -1,12 +1,12 @@\n //! This module is used to store stuff from Rust's AST in a more convenient\n //! manner (and with prettier names) before cleaning.\n+use rustc_middle::ty::TyCtxt;\n use rustc_span::{self, Span, Symbol};\n \n use rustc_hir as hir;\n \n crate struct Module<'hir> {\n     crate name: Symbol,\n-    crate where_outer: Span,\n     crate where_inner: Span,\n     crate mods: Vec<Module<'hir>>,\n     crate id: hir::HirId,\n@@ -17,16 +17,19 @@ crate struct Module<'hir> {\n }\n \n impl Module<'hir> {\n-    crate fn new(name: Symbol) -> Module<'hir> {\n+    crate fn new(name: Symbol, id: hir::HirId, where_inner: Span) -> Module<'hir> {\n         Module {\n             name,\n-            id: hir::CRATE_HIR_ID,\n-            where_outer: rustc_span::DUMMY_SP,\n-            where_inner: rustc_span::DUMMY_SP,\n+            id,\n+            where_inner,\n             mods: Vec::new(),\n             items: Vec::new(),\n             foreigns: Vec::new(),\n             macros: Vec::new(),\n         }\n     }\n+\n+    crate fn where_outer(&self, tcx: TyCtxt<'_>) -> Span {\n+        tcx.hir().span(self.id)\n+    }\n }"}, {"sha": "ab9a112380ec49afc5bbc7011ea06ad1260b5cd6", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -8,9 +8,9 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::Node;\n use rustc_middle::middle::privacy::AccessLevel;\n use rustc_middle::ty::TyCtxt;\n+use rustc_span;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Symbol};\n-use rustc_span::{self, Span};\n \n use std::mem;\n \n@@ -73,7 +73,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     crate fn visit(mut self, krate: &'tcx hir::Crate<'_>) -> Module<'tcx> {\n         let span = krate.item.inner;\n         let mut top_level_module = self.visit_mod_contents(\n-            span,\n             &Spanned { span, node: hir::VisibilityKind::Public },\n             hir::CRATE_HIR_ID,\n             &krate.item,\n@@ -129,16 +128,12 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     fn visit_mod_contents(\n         &mut self,\n-        span: Span,\n         vis: &hir::Visibility<'_>,\n         id: hir::HirId,\n         m: &'tcx hir::Mod<'tcx>,\n         name: Symbol,\n     ) -> Module<'tcx> {\n-        let mut om = Module::new(name);\n-        om.where_outer = span;\n-        om.where_inner = m.inner;\n-        om.id = id;\n+        let mut om = Module::new(name, id, m.inner);\n         // Keep track of if there were any private modules in the path.\n         let orig_inside_public_path = self.inside_public_path;\n         self.inside_public_path &= vis.node.is_pub();\n@@ -312,7 +307,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 om.items.push((item, renamed))\n             }\n             hir::ItemKind::Mod(ref m) => {\n-                om.mods.push(self.visit_mod_contents(item.span, &item.vis, item.hir_id(), m, name));\n+                om.mods.push(self.visit_mod_contents(&item.vis, item.hir_id(), m, name));\n             }\n             hir::ItemKind::Fn(..)\n             | hir::ItemKind::ExternCrate(..)"}, {"sha": "f2641404aae21b91eaa6674587bd20db7940c14e", "filename": "src/test/codegen/async-fn-debug-msvc.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -1,7 +1,7 @@\n // Verify debuginfo for generators:\n //  - Each variant points to the file and line of its yield point\n-//  - The generator types and variants are marked artificial\n-//  - Captured vars from the source are not marked artificial\n+//  - The discriminants are marked artificial\n+//  - Other fields are not marked artificial\n //\n //\n // compile-flags: -C debuginfo=2 --edition=2018\n@@ -17,26 +17,32 @@ async fn async_fn_test() {\n // FIXME: No way to reliably check the filename.\n \n // CHECK-DAG:  [[ASYNC_FN:!.*]] = !DINamespace(name: \"async_fn_test\"\n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator-0\", scope: [[ASYNC_FN]], {{.*}}flags: DIFlagArtificial\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator-0\", scope: [[ASYNC_FN]]\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // For brevity, we only check the struct name and members of the last variant.\n // CHECK-SAME: file: [[FILE:![0-9]*]], line: 11,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 15,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 15,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 12,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 14,\n // CHECK-SAME: baseType: [[VARIANT:![0-9]*]]\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[ASYNC_FN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"RUST$ENUM$DISR\", scope: [[S1]],\n // CHECK-SAME: flags: DIFlagArtificial\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]"}, {"sha": "7de115f7e9194d7d062c3346f2d76fd64e3e579a", "filename": "src/test/codegen/async-fn-debug.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -1,7 +1,7 @@\n // Verify debuginfo for async fn:\n //  - Each variant points to the file and line of its yield point\n-//  - The generator types and variants are marked artificial\n-//  - Captured vars from the source are not marked artificial\n+//  - The discriminants are marked artificial\n+//  - Other fields are not marked artificial\n //\n //\n // compile-flags: -C debuginfo=2 --edition=2018\n@@ -17,29 +17,36 @@ async fn async_fn_test() {\n // FIXME: No way to reliably check the filename.\n \n // CHECK-DAG:  [[ASYNC_FN:!.*]] = !DINamespace(name: \"async_fn_test\"\n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"generator-0\", scope: [[ASYNC_FN]], {{.*}}flags: DIFlagArtificial\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"generator-0\", scope: [[ASYNC_FN]]\n // CHECK:      [[VARIANT:!.*]] = !DICompositeType(tag: DW_TAG_variant_part, scope: [[ASYNC_FN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: discriminator: [[DISC:![0-9]*]]\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"0\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE:![0-9]*]], line: 11,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DICompositeType(tag: DW_TAG_structure_type, name: \"Unresumed\", scope: [[GEN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"1\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 15,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"2\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 15,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"3\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 12,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"4\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 14,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[GEN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]\n // CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: )"}, {"sha": "44be71f3b9b8056ce99d538ff8bc57ed949cdb41", "filename": "src/test/codegen/generator-debug-msvc.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -1,7 +1,7 @@\n // Verify debuginfo for generators:\n //  - Each variant points to the file and line of its yield point\n-//  - The generator types and variants are marked artificial\n-//  - Captured vars from the source are not marked artificial\n+//  - The discriminants are marked artificial\n+//  - Other fields are not marked artificial\n //\n //\n // compile-flags: -C debuginfo=2\n@@ -21,26 +21,32 @@ fn generator_test() -> impl Generator<Yield = i32, Return = ()> {\n // FIXME: No way to reliably check the filename.\n \n // CHECK-DAG:  [[GEN_FN:!.*]] = !DINamespace(name: \"generator_test\"\n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator-0\", scope: [[GEN_FN]], {{.*}}flags: DIFlagArtificial\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator-0\", scope: [[GEN_FN]]\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // For brevity, we only check the struct name and members of the last variant.\n // CHECK-SAME: file: [[FILE:![0-9]*]], line: 14,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 18,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 18,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 15,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 17,\n // CHECK-SAME: baseType: [[VARIANT:![0-9]*]]\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[GEN_FN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"RUST$ENUM$DISR\", scope: [[S1]],\n // CHECK-SAME: flags: DIFlagArtificial\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]"}, {"sha": "8b87a2f0646044af947a3639e32637aaeec6e82f", "filename": "src/test/codegen/generator-debug.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -1,7 +1,7 @@\n // Verify debuginfo for generators:\n //  - Each variant points to the file and line of its yield point\n-//  - The generator types and variants are marked artificial\n-//  - Captured vars from the source are not marked artificial\n+//  - The discriminants are marked artificial\n+//  - Other fields are not marked artificial\n //\n //\n // compile-flags: -C debuginfo=2 --edition=2018\n@@ -21,29 +21,36 @@ fn generator_test() -> impl Generator<Yield = i32, Return = ()> {\n // FIXME: No way to reliably check the filename.\n \n // CHECK-DAG:  [[GEN_FN:!.*]] = !DINamespace(name: \"generator_test\"\n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"generator-0\", scope: [[GEN_FN]], {{.*}}flags: DIFlagArtificial\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"generator-0\", scope: [[GEN_FN]]\n // CHECK:      [[VARIANT:!.*]] = !DICompositeType(tag: DW_TAG_variant_part, scope: [[GEN_FN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: discriminator: [[DISC:![0-9]*]]\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"0\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE:![0-9]*]], line: 14,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DICompositeType(tag: DW_TAG_structure_type, name: \"Unresumed\", scope: [[GEN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"1\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 18,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"2\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 18,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"3\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 15,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"4\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 17,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[GEN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]\n // CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: )"}, {"sha": "1beed1c835d977d566d388f019057a1d6722eb25", "filename": "src/test/debuginfo/generator-objects.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -1,37 +1,41 @@\n // Require a gdb that can read DW_TAG_variant_part.\n // min-gdb-version: 8.2\n \n+// LLDB without native Rust support cannot read DW_TAG_variant_part,\n+// so it prints nothing for generators. But those tests are kept to\n+// ensure that LLDB won't crash at least (like #57822).\n+\n // compile-flags:-g\n \n // === GDB TESTS ===================================================================================\n \n // gdb-command:run\n // gdb-command:print b\n-// gdb-check:$1 = generator_objects::main::generator-0 {__0: 0x[...], <<variant>>: {__state: 0, 0: generator_objects::main::generator-0::Unresumed, 1: generator_objects::main::generator-0::Returned, 2: generator_objects::main::generator-0::Panicked, 3: generator_objects::main::generator-0::Suspend0 {[...]}, 4: generator_objects::main::generator-0::Suspend1 {[...]}}}\n+// gdb-check:$1 = generator_objects::main::generator-0::Unresumed(0x[...])\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$2 = generator_objects::main::generator-0 {__0: 0x[...], <<variant>>: {__state: 3, 0: generator_objects::main::generator-0::Unresumed, 1: generator_objects::main::generator-0::Returned, 2: generator_objects::main::generator-0::Panicked, 3: generator_objects::main::generator-0::Suspend0 {c: 6, d: 7}, 4: generator_objects::main::generator-0::Suspend1 {[...]}}}\n+// gdb-check:$2 = generator_objects::main::generator-0::Suspend0{c: 6, d: 7, __0: 0x[...]}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$3 = generator_objects::main::generator-0 {__0: 0x[...], <<variant>>: {__state: 4, 0: generator_objects::main::generator-0::Unresumed, 1: generator_objects::main::generator-0::Returned, 2: generator_objects::main::generator-0::Panicked, 3: generator_objects::main::generator-0::Suspend0 {[...]}, 4: generator_objects::main::generator-0::Suspend1 {c: 7, d: 8}}}\n+// gdb-check:$3 = generator_objects::main::generator-0::Suspend1{c: 7, d: 8, __0: 0x[...]}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$4 = generator_objects::main::generator-0 {__0: 0x[...], <<variant>>: {__state: 1, 0: generator_objects::main::generator-0::Unresumed, 1: generator_objects::main::generator-0::Returned, 2: generator_objects::main::generator-0::Panicked, 3: generator_objects::main::generator-0::Suspend0 {[...]}, 4: generator_objects::main::generator-0::Suspend1 {[...]}}}\n+// gdb-check:$4 = generator_objects::main::generator-0::Returned(0x[...])\n \n // === LLDB TESTS ==================================================================================\n \n // lldb-command:run\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::generator-0) $0 = { 0 = 0x[...] }\n+// lldbg-check:(generator_objects::main::generator-0) $0 =\n // lldb-command:continue\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::generator-0) $1 = { 0 = 0x[...] }\n+// lldbg-check:(generator_objects::main::generator-0) $1 =\n // lldb-command:continue\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::generator-0) $2 = { 0 = 0x[...] }\n+// lldbg-check:(generator_objects::main::generator-0) $2 =\n // lldb-command:continue\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::generator-0) $3 = { 0 = 0x[...] }\n+// lldbg-check:(generator_objects::main::generator-0) $3 =\n \n #![feature(omit_gdb_pretty_printer_section, generators, generator_trait)]\n #![omit_gdb_pretty_printer_section]"}, {"sha": "6b2b12edda5d7a710c48862caaed0560b263be0c", "filename": "src/test/debuginfo/issue-57822.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -14,7 +14,7 @@\n // gdb-check:$1 = issue_57822::main::closure-1 (issue_57822::main::closure-0 (1))\n \n // gdb-command:print b\n-// gdb-check:$2 = issue_57822::main::generator-3 {__0: issue_57822::main::generator-2 {__0: 2, <<variant>>: {[...]}}, <<variant>>: {[...]}}\n+// gdb-check:$2 = issue_57822::main::generator-3::Unresumed(issue_57822::main::generator-2::Unresumed(2))\n \n // === LLDB TESTS ==================================================================================\n \n@@ -24,7 +24,7 @@\n // lldbg-check:(issue_57822::main::closure-1) $0 = { 0 = { 0 = 1 } }\n \n // lldb-command:print b\n-// lldbg-check:(issue_57822::main::generator-3) $1 = { 0 = { 0 = 2 } }\n+// lldbg-check:(issue_57822::main::generator-3) $1 =\n \n #![feature(omit_gdb_pretty_printer_section, generators, generator_trait)]\n #![omit_gdb_pretty_printer_section]"}, {"sha": "599d0e135579090cbed9568ec2044dc373c6855f", "filename": "src/test/ui/async-await/async-borrowck-escaping-block-error.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -21,9 +21,9 @@ error[E0373]: async block may outlive the current function, but it borrows `x`,\n   --> $DIR/async-borrowck-escaping-block-error.rs:11:11\n    |\n LL |     async { *x }\n-   |           ^^^-^^\n-   |           |  |\n-   |           |  `x` is borrowed here\n+   |           ^^--^^\n+   |           | |\n+   |           | `x` is borrowed here\n    |           may outlive borrowed value `x`\n    |\n note: async block is returned here"}, {"sha": "fadcd11a592aa7444c98852e6d9ce31b28f1a35a", "filename": "src/test/ui/borrowck/borrowck-closures-mut-and-imm.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -73,7 +73,7 @@ error[E0506]: cannot assign to `*x` because it is borrowed\n   --> $DIR/borrowck-closures-mut-and-imm.rs:57:5\n    |\n LL |     let c1 = || get(&*x);\n-   |              --       - borrow occurs due to use in closure\n+   |              --      -- borrow occurs due to use in closure\n    |              |\n    |              borrow of `*x` occurs here\n LL |     *x = 5;\n@@ -86,7 +86,7 @@ error[E0506]: cannot assign to `*x.f` because it is borrowed\n   --> $DIR/borrowck-closures-mut-and-imm.rs:69:5\n    |\n LL |     let c1 = || get(&*x.f);\n-   |              --       - borrow occurs due to use in closure\n+   |              --      ---- borrow occurs due to use in closure\n    |              |\n    |              borrow of `*x.f` occurs here\n LL |     *x.f = 5;\n@@ -99,11 +99,11 @@ error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immuta\n   --> $DIR/borrowck-closures-mut-and-imm.rs:81:14\n    |\n LL |     let c1 = || get(&*x.f);\n-   |              --       - first borrow occurs due to use of `x` in closure\n+   |              --      ---- first borrow occurs due to use of `x` in closure\n    |              |\n    |              immutable borrow occurs here\n LL |     let c2 = || *x.f = 5;\n-   |              ^^  - second borrow occurs due to use of `x` in closure\n+   |              ^^ ---- second borrow occurs due to use of `x` in closure\n    |              |\n    |              mutable borrow occurs here\n LL |"}, {"sha": "537ec9895e106eb203b5e3cf94d6549ff07c94f3", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-imm.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -14,12 +14,12 @@ error[E0524]: two closures require unique access to `x` at the same time\n   --> $DIR/borrowck-closures-mut-of-imm.rs:11:18\n    |\n LL |     let mut c1 = || set(&mut *x);\n-   |                  --           - first borrow occurs due to use of `x` in closure\n+   |                  --          -- first borrow occurs due to use of `x` in closure\n    |                  |\n    |                  first closure is constructed here\n LL |\n LL |     let mut c2 = || set(&mut *x);\n-   |                  ^^           - second borrow occurs due to use of `x` in closure\n+   |                  ^^          -- second borrow occurs due to use of `x` in closure\n    |                  |\n    |                  second closure is constructed here\n ..."}, {"sha": "e5ee5a401050a35049c9eaaa7fcfd2f3e24eb33e", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -2,11 +2,11 @@ error[E0524]: two closures require unique access to `x` at the same time\n   --> $DIR/borrowck-closures-mut-of-mut.rs:14:18\n    |\n LL |     let mut c1 = || set(&mut *x);\n-   |                  --           - first borrow occurs due to use of `x` in closure\n+   |                  --          -- first borrow occurs due to use of `x` in closure\n    |                  |\n    |                  first closure is constructed here\n LL |     let mut c2 = || set(&mut *x);\n-   |                  ^^           - second borrow occurs due to use of `x` in closure\n+   |                  ^^          -- second borrow occurs due to use of `x` in closure\n    |                  |\n    |                  second closure is constructed here\n LL |"}, {"sha": "411d85b8e0562c7d1c18c17c13cd3c4d064bb986", "filename": "src/test/ui/borrowck/borrowck-closures-slice-patterns.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -45,7 +45,7 @@ error[E0502]: cannot borrow `*x` as mutable because it is also borrowed as immut\n LL |     let f = || {\n    |             -- immutable borrow occurs here\n LL |         let [ref y, ref z @ ..] = *x;\n-   |                                    - first borrow occurs due to use of `x` in closure\n+   |                                   -- first borrow occurs due to use of `x` in closure\n LL |     };\n LL |     let r = &mut *x;\n    |             ^^^^^^^ mutable borrow occurs here\n@@ -59,7 +59,7 @@ error[E0501]: cannot borrow `x` as immutable because previous closure requires u\n LL |     let mut f = || {\n    |                 -- closure construction occurs here\n LL |         let [ref mut y, ref mut z @ ..] = *x;\n-   |                                            - first borrow occurs due to use of `x` in closure\n+   |                                           -- first borrow occurs due to use of `x` in closure\n LL |     };\n LL |     let r = &x;\n    |             ^^ second borrow occurs here\n@@ -86,7 +86,7 @@ error[E0502]: cannot borrow `*x` as mutable because it is also borrowed as immut\n LL |     let f = || {\n    |             -- immutable borrow occurs here\n LL |         if let [ref y, ref z @ ..] = *x {}\n-   |                                       - first borrow occurs due to use of `x` in closure\n+   |                                      -- first borrow occurs due to use of `x` in closure\n LL |     };\n LL |     let r = &mut *x;\n    |             ^^^^^^^ mutable borrow occurs here\n@@ -100,7 +100,7 @@ error[E0501]: cannot borrow `x` as immutable because previous closure requires u\n LL |     let mut f = || {\n    |                 -- closure construction occurs here\n LL |         if let [ref mut y, ref mut z @ ..] = *x {}\n-   |                                               - first borrow occurs due to use of `x` in closure\n+   |                                              -- first borrow occurs due to use of `x` in closure\n LL |     };\n LL |     let r = &x;\n    |             ^^ second borrow occurs here"}, {"sha": "fe8e7a29e2486fba8f9a0491113561a3a558cd29", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -59,11 +59,11 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-closures-two-mut-fail.rs:53:24\n    |\n LL |     let c1 = to_fn_mut(|| set(&mut *x.f));\n-   |                        --           - first borrow occurs due to use of `x` in closure\n+   |                        --          ---- first borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n LL |     let c2 = to_fn_mut(|| set(&mut *x.f));\n-   |                        ^^           - second borrow occurs due to use of `x` in closure\n+   |                        ^^          ---- second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n LL |"}, {"sha": "21e329f432939fabb7a1e4ec44279a7d4b25286b", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -59,11 +59,11 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-closures-two-mut.rs:49:24\n    |\n LL |     let c1 = to_fn_mut(|| set(&mut *x.f));\n-   |                        --           - first borrow occurs due to use of `x` in closure\n+   |                        --          ---- first borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n LL |     let c2 = to_fn_mut(|| set(&mut *x.f));\n-   |                        ^^           - second borrow occurs due to use of `x` in closure\n+   |                        ^^          ---- second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n LL |"}, {"sha": "23d3cc0e76ff71dccb83d7d359942df2e7b11fd9", "filename": "src/test/ui/borrowck/borrowck-closures-unique.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -20,7 +20,7 @@ LL |     let c1 = || get(x);\n    |              |\n    |              borrow occurs here\n LL |     let c2 = || { get(x); set(x); };\n-   |              ^^       - second borrow occurs due to use of `x` in closure\n+   |              ^^               - second borrow occurs due to use of `x` in closure\n    |              |\n    |              closure construction occurs here\n LL |     c1;"}, {"sha": "a6dbcf36077a728b704effd7ccff75c735edcb37", "filename": "src/test/ui/borrowck/borrowck-closures-use-after-free.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -4,7 +4,7 @@ error[E0502]: cannot borrow `*ptr` as immutable because it is also borrowed as m\n LL |   let mut test = |foo: &Foo| {\n    |                  ----------- mutable borrow occurs here\n LL |     ptr = box Foo { x: ptr.x + 1 };\n-   |                        --- first borrow occurs due to use of `ptr` in closure\n+   |     --- first borrow occurs due to use of `ptr` in closure\n LL |   };\n LL |   test(&*ptr);\n    |   ---- ^^^^^ immutable borrow occurs here"}, {"sha": "a1ac45795fae2e4206d2adba477bc50e81b78d20", "filename": "src/test/ui/borrowck/borrowck-insert-during-each.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -9,7 +9,7 @@ LL | |\n LL | |         |a| {\n    | |         --- closure construction occurs here\n LL | |             f.n.insert(*a);\n-   | |             - first borrow occurs due to use of `f` in closure\n+   | |             --- first borrow occurs due to use of `f` in closure\n LL | |         })\n    | |__________^ second borrow occurs here\n \n@@ -24,7 +24,7 @@ LL |\n LL |         |a| {\n    |         ^^^ closure construction occurs here\n LL |             f.n.insert(*a);\n-   |             - second borrow occurs due to use of `f` in closure\n+   |             --- second borrow occurs due to use of `f` in closure\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ac25502ad053c052f96705f5b5223ce170da10e3", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-move-cc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -7,7 +7,7 @@ LL |     thread::spawn(move|| {\n    |                   ^^^^^^ move out of `v` occurs here\n LL |\n LL |         println!(\"v={}\", *v);\n-   |                           - move occurs due to use in closure\n+   |                          -- move occurs due to use in closure\n LL |     });\n LL |     w.use_ref();\n    |     - borrow later used here\n@@ -21,7 +21,7 @@ LL |     thread::spawn(move|| {\n    |                   ^^^^^^ move out of `v` occurs here\n LL |\n LL |         println!(\"v={}\", *v);\n-   |                           - move occurs due to use in closure\n+   |                          -- move occurs due to use in closure\n LL |     });\n LL |     w.use_ref();\n    |     - borrow later used here"}, {"sha": "489ec7d04ed1d1791e227932db4b760e029e100c", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -7,7 +7,7 @@ LL |     p.blockm(|| {\n    |     | immutable borrow later used by call\n    |     immutable borrow occurs here\n LL |         p.x = 10;\n-   |         - second borrow occurs due to use of `p` in closure\n+   |         --- second borrow occurs due to use of `p` in closure\n \n error[E0502]: cannot borrow `p` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-loan-rcvr.rs:34:5"}, {"sha": "628f206e0a89616cf7629b0ce1f6d5269c124820", "filename": "src/test/ui/borrowck/borrowck-move-by-capture.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -5,10 +5,10 @@ LL |     let bar: Box<_> = box 3;\n    |         --- captured outer variable\n LL |     let _g = to_fn_mut(|| {\n LL |         let _h = to_fn_once(move || -> isize { *bar });\n-   |                             ^^^^^^^^^^^^^^^^    ---\n-   |                             |                   |\n-   |                             |                   move occurs because `bar` has type `Box<isize>`, which does not implement the `Copy` trait\n-   |                             |                   move occurs due to use in closure\n+   |                             ^^^^^^^^^^^^^^^^   ----\n+   |                             |                  |\n+   |                             |                  move occurs because `bar` has type `Box<isize>`, which does not implement the `Copy` trait\n+   |                             |                  move occurs due to use in closure\n    |                             move out of `bar` occurs here\n \n error: aborting due to previous error"}, {"sha": "1ac4999e6e11d8d78144fbfa8f79eb2ddca652b9", "filename": "src/test/ui/borrowck/borrowck-move-moved-value-into-closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -5,11 +5,11 @@ LL |     let t: Box<_> = box 3;\n    |         - move occurs because `t` has type `Box<isize>`, which does not implement the `Copy` trait\n LL | \n LL |     call_f(move|| { *t + 1 });\n-   |            ------    - variable moved due to use in closure\n+   |            ------   -- variable moved due to use in closure\n    |            |\n    |            value moved into closure here\n LL |     call_f(move|| { *t + 1 });\n-   |            ^^^^^^    - use occurs due to use in closure\n+   |            ^^^^^^   -- use occurs due to use in closure\n    |            |\n    |            value used here after move\n "}, {"sha": "dd46308d140045cf48328185d283b5d2c4243e6e", "filename": "src/test/ui/borrowck/issue-27282-mutate-before-diverging-arm-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fissue-27282-mutate-before-diverging-arm-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fissue-27282-mutate-before-diverging-arm-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-27282-mutate-before-diverging-arm-2.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -5,7 +5,7 @@ LL |     match x {\n    |           - value is immutable in match guard\n ...\n LL |                 (|| { *x = None; drop(force_fn_once); })();\n-   |                  ^^    - borrow occurs due to use of `x` in closure\n+   |                  ^^   -- borrow occurs due to use of `x` in closure\n    |                  |\n    |                  cannot mutably borrow\n "}, {"sha": "48433432de1bd7ccccf307f0230a603257778528", "filename": "src/test/ui/borrowck/issue-27282-reborrow-ref-mut-in-guard.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fissue-27282-reborrow-ref-mut-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fborrowck%2Fissue-27282-reborrow-ref-mut-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-27282-reborrow-ref-mut-in-guard.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow `r` as mutable, as it is immutable for the pattern g\n   --> $DIR/issue-27282-reborrow-ref-mut-in-guard.rs:12:25\n    |\n LL |         ref mut r if { (|| { let bar = &mut *r; **bar = false; })();\n-   |                         ^^                   - mutable borrow occurs due to use of `r` in closure\n+   |                         ^^                  -- mutable borrow occurs due to use of `r` in closure\n    |                         |\n    |                         cannot borrow as mutable\n    |"}, {"sha": "2f3358dcd8db71d3d8749dffd35348aa0ad9bdb6", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-1.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-1.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -0,0 +1,20 @@\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+\n+#[derive(Debug)]\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+fn main() {\n+    let mut p = Point {x: 1, y: 2 };\n+\n+    let y = &mut p.y;\n+    let mut c = || {\n+    //~^ ERROR cannot borrow `p` as mutable more than once at a time\n+       let x = &mut p.x;\n+       println!(\"{:?}\", p);\n+    };\n+    c();\n+    *y+=1;\n+}"}, {"sha": "e15067b264d63af8e850c67b9dc122c9ddb4dfbc", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-1.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-1.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -0,0 +1,28 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/borrowck-1.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error[E0499]: cannot borrow `p` as mutable more than once at a time\n+  --> $DIR/borrowck-1.rs:13:17\n+   |\n+LL |     let y = &mut p.y;\n+   |             -------- first mutable borrow occurs here\n+LL |     let mut c = || {\n+   |                 ^^ second mutable borrow occurs here\n+LL |\n+LL |        let x = &mut p.x;\n+   |                     --- capture is mutable because of use here\n+LL |        println!(\"{:?}\", p);\n+   |                         - second borrow occurs due to use of `p` in closure\n+...\n+LL |     *y+=1;\n+   |     ----- first borrow later used here\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "06c6a87eb105dd0170001930a8e9b6ec688fd43b", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-2.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -0,0 +1,20 @@\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+\n+#[derive(Debug)]\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+fn main() {\n+    let mut p = Point {x: 1, y: 2 };\n+\n+    let y = &p.y;\n+    let mut c = || {\n+    //~^ ERROR cannot borrow `p` as mutable because it is also borrowed as immutable\n+       println!(\"{:?}\", p);\n+       let x = &mut p.x;\n+    };\n+    c();\n+    println!(\"{}\", y);\n+}"}, {"sha": "a195b981eaadd416aaaa4497f3a5d45911dd1199", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-2.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-2.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -0,0 +1,28 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/borrowck-2.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-2.rs:13:17\n+   |\n+LL |     let y = &p.y;\n+   |             ---- immutable borrow occurs here\n+LL |     let mut c = || {\n+   |                 ^^ mutable borrow occurs here\n+LL |\n+LL |        println!(\"{:?}\", p);\n+   |                         - second borrow occurs due to use of `p` in closure\n+LL |        let x = &mut p.x;\n+   |                     --- capture is mutable because of use here\n+...\n+LL |     println!(\"{}\", y);\n+   |                    - immutable borrow later used here\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "ba998f78c87acb68f7ce3383b61879198d349454", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-3.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-3.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -0,0 +1,19 @@\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+\n+#[derive(Debug)]\n+struct Point {\n+    x: String,\n+    y: String,\n+}\n+fn main() {\n+    let mut c = {\n+        let mut p = Point {x: \"1\".to_string(), y: \"2\".to_string() };\n+        || {\n+           let x = &mut p.x;\n+           println!(\"{:?}\", p);\n+            //~^ ERROR `p` does not live long enough\n+        }\n+    };\n+    c();\n+}"}, {"sha": "b54c729a307c0c61b19c46a99bbe1c2d8438a3cf", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-3.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-3.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -0,0 +1,27 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/borrowck-3.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error[E0597]: `p` does not live long enough\n+  --> $DIR/borrowck-3.rs:14:29\n+   |\n+LL |     let mut c = {\n+   |         ----- borrow later stored here\n+LL |         let mut p = Point {x: \"1\".to_string(), y: \"2\".to_string() };\n+LL |         || {\n+   |         -- value captured here\n+LL |            let x = &mut p.x;\n+LL |            println!(\"{:?}\", p);\n+   |                             ^ borrowed value does not live long enough\n+...\n+LL |     };\n+   |     - `p` dropped here while still borrowed\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "4fab0189c27f8df4de52b4f9866184bd9299dbe2", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-4.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-4.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -0,0 +1,21 @@\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+\n+#[derive(Debug)]\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+fn foo () -> impl FnMut()->() {\n+    let mut p = Point {x: 1, y: 2 };\n+    let mut c = || {\n+    //~^ ERROR closure may outlive the current function, but it borrows `p`\n+       p.x+=5;\n+       println!(\"{:?}\", p);\n+    };\n+    c\n+}\n+fn main() {\n+    let c = foo();\n+    c();\n+}"}, {"sha": "905fa3475edd86644f148570208ad6ca2f159dee", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-4.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-4.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -0,0 +1,31 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/borrowck-4.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error[E0373]: closure may outlive the current function, but it borrows `p`, which is owned by the current function\n+  --> $DIR/borrowck-4.rs:11:17\n+   |\n+LL |     let mut c = || {\n+   |                 ^^ may outlive borrowed value `p`\n+...\n+LL |        println!(\"{:?}\", p);\n+   |                         - `p` is borrowed here\n+   |\n+note: closure is returned here\n+  --> $DIR/borrowck-4.rs:9:14\n+   |\n+LL | fn foo () -> impl FnMut()->() {\n+   |              ^^^^^^^^^^^^^^^^\n+help: to force the closure to take ownership of `p` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |     let mut c = move || {\n+   |                 ^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0373`."}, {"sha": "b23947ad5d1bff38b74c1f3cdc473f9e39de3a83", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-closures-mut-and-imm.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-closures-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-closures-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-closures-mut-and-imm.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -0,0 +1,26 @@\n+// Tests that two closures cannot simultaneously have mutable\n+// and immutable access to the variable. Issue #6801.\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+#![feature(box_syntax)]\n+\n+#[derive(Debug)]\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+\n+fn a() {\n+    let mut p = Point {x: 3, y:4};\n+    let c2 = || p.y * 5;\n+    let c1 = || {\n+    //~^ ERROR cannot borrow `p` as mutable because it is also borrowed as immutable\n+        dbg!(&p);\n+        p.x = 4;\n+    };\n+    drop(c2);\n+}\n+\n+fn main() {\n+}"}, {"sha": "58975c6f46fe49fa8671c901312862bfd1b700ef", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-closures-mut-and-imm.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-closures-mut-and-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-closures-mut-and-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-closures-mut-and-imm.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -0,0 +1,30 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/borrowck-closures-mut-and-imm.rs:4:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-closures-mut-and-imm.rs:17:14\n+   |\n+LL |     let c2 = || p.y * 5;\n+   |              -- --- first borrow occurs due to use of `p.y` in closure\n+   |              |\n+   |              immutable borrow occurs here\n+LL |     let c1 = || {\n+   |              ^^ mutable borrow occurs here\n+LL |\n+LL |         dbg!(&p);\n+   |               - second borrow occurs due to use of `p` in closure\n+LL |         p.x = 4;\n+   |         --- capture is mutable because of use here\n+LL |     };\n+LL |     drop(c2);\n+   |          -- immutable borrow later used here\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "174faa33c49ab53b2cf8d3f8b16620b7548a4d20", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/box.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -13,7 +13,7 @@ error[E0506]: cannot assign to `e.0.0.m.x` because it is borrowed\n LL |     let mut c = || {\n    |                 -- borrow of `e.0.0.m.x` occurs here\n LL |         e.0.0.m.x = format!(\"not-x\");\n-   |         - borrow occurs due to use in closure\n+   |         --------- borrow occurs due to use in closure\n ...\n LL |     e.0.0.m.x = format!(\"not-x\");\n    |     ^^^^^^^^^ assignment to borrowed `e.0.0.m.x` occurs here\n@@ -27,7 +27,7 @@ error[E0502]: cannot borrow `e.0.0.m.x` as immutable because it is also borrowed\n LL |     let mut c = || {\n    |                 -- mutable borrow occurs here\n LL |         e.0.0.m.x = format!(\"not-x\");\n-   |         - first borrow occurs due to use of `e.0.0.m.x` in closure\n+   |         --------- first borrow occurs due to use of `e.0.0.m.x` in closure\n ...\n LL |     println!(\"{}\", e.0.0.m.x);\n    |                    ^^^^^^^^^ immutable borrow occurs here\n@@ -41,7 +41,7 @@ error[E0506]: cannot assign to `e.0.0.m.x` because it is borrowed\n LL |     let c = || {\n    |             -- borrow of `e.0.0.m.x` occurs here\n LL |         println!(\"{}\", e.0.0.m.x);\n-   |                        - borrow occurs due to use in closure\n+   |                        --------- borrow occurs due to use in closure\n ...\n LL |     e.0.0.m.x = format!(\"not-x\");\n    |     ^^^^^^^^^ assignment to borrowed `e.0.0.m.x` occurs here"}, {"sha": "39a11fb332725881392d25e0e4a4306a72bb2d2a", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/cant-mutate-imm-borrow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm-borrow.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -14,7 +14,7 @@ LL |     let mut c = || {\n    |                 ^^ cannot borrow as mutable\n LL |\n LL |         z.0.0.0 = format!(\"X1\");\n-   |         - mutable borrow occurs due to use of `z.0.0.0` in closure\n+   |         ------- mutable borrow occurs due to use of `z.0.0.0` in closure\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "928c866726f71db5085b60093332ab695ad9a2bd", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/cant-mutate-imm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm.rs?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -11,7 +11,7 @@ fn mut_error_struct() {\n \n     let mut c = || {\n         z.0.0.0 = 20;\n-        //~^ ERROR: cannot assign to `z`, as it is not declared as mutable\n+        //~^ ERROR: cannot assign to `z.0.0.0`, as it is not declared as mutable\n     };\n \n     c();\n@@ -23,7 +23,7 @@ fn mut_error_box() {\n \n     let mut c = || {\n         bx.0 = 20;\n-        //~^ ERROR: cannot assign to `bx`, as it is not declared as mutable\n+        //~^ ERROR: cannot assign to `*bx.0`, as it is not declared as mutable\n     };\n \n     c();"}, {"sha": "9fb8dd4a1c36e350bc414eebbf730262a51db7e2", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/cant-mutate-imm.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -7,7 +7,7 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error[E0594]: cannot assign to `z`, as it is not declared as mutable\n+error[E0594]: cannot assign to `z.0.0.0`, as it is not declared as mutable\n   --> $DIR/cant-mutate-imm.rs:13:9\n    |\n LL |     let z = (y, 10);\n@@ -16,7 +16,7 @@ LL |     let z = (y, 10);\n LL |         z.0.0.0 = 20;\n    |         ^^^^^^^^^^^^ cannot assign\n \n-error[E0594]: cannot assign to `bx`, as it is not declared as mutable\n+error[E0594]: cannot assign to `*bx.0`, as it is not declared as mutable\n   --> $DIR/cant-mutate-imm.rs:25:9\n    |\n LL |     let bx = Box::new(x);"}, {"sha": "a3d1f550557affc7c7721d9a80f4b3d926e08097", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/multilevel-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmultilevel-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmultilevel-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmultilevel-path.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -13,7 +13,7 @@ error[E0499]: cannot borrow `w.p.x` as mutable more than once at a time\n LL |     let mut c = || {\n    |                 -- first mutable borrow occurs here\n LL |         w.p.x += 20;\n-   |         - first borrow occurs due to use of `w.p.x` in closure\n+   |         ----- first borrow occurs due to use of `w.p.x` in closure\n ...\n LL |     let py = &mut w.p.x;\n    |              ^^^^^^^^^^ second mutable borrow occurs here"}, {"sha": "831e486db82af60e5c01d39d943641b8ee3675b2", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/mut_ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -17,7 +17,7 @@ LL |     let c = || {\n    |             ^^ `ref_mref_x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n LL |\n LL |         **ref_mref_x = y;\n-   |           ---------- mutable borrow occurs due to use of `**ref_mref_x` in closure\n+   |         ------------ mutable borrow occurs due to use of `**ref_mref_x` in closure\n \n error[E0596]: cannot borrow `**mref_ref_x` as mutable, as it is behind a `&` reference\n   --> $DIR/mut_ref.rs:27:13\n@@ -26,7 +26,7 @@ LL |     let c = || {\n    |             ^^ cannot borrow as mutable\n LL |\n LL |         **mref_ref_x = y;\n-   |           ---------- mutable borrow occurs due to use of `**mref_ref_x` in closure\n+   |         ------------ mutable borrow occurs due to use of `**mref_ref_x` in closure\n \n error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "f1748fda151c51a5ed52c81e0e78e1fc4ccd3ab8", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/simple-struct-min-capture.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -13,7 +13,9 @@ error[E0502]: cannot borrow `p` as immutable because it is also borrowed as muta\n LL |     let mut c = || {\n    |                 -- mutable borrow occurs here\n LL |         p.x += 10;\n-   |         - first borrow occurs due to use of `p` in closure\n+   |         --- capture is mutable because of use here\n+LL |         println!(\"{:?}\", p);\n+   |                          - first borrow occurs due to use of `p` in closure\n ...\n LL |     println!(\"{:?}\", p);\n    |                      ^ immutable borrow occurs here"}, {"sha": "04811721aa521e6ceb82be56595e152b1d372290", "filename": "src/test/ui/error-codes/E0504.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Ferror-codes%2FE0504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Ferror-codes%2FE0504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0504.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -7,7 +7,7 @@ LL |\n LL |     let x = move || {\n    |             ^^^^^^^ move out of `fancy_num` occurs here\n LL |         println!(\"child function: {}\", fancy_num.num);\n-   |                                        --------- move occurs due to use in closure\n+   |                                        ------------- move occurs due to use in closure\n ...\n LL |     println!(\"main function: {}\", fancy_ref.num);\n    |                                   ------------- borrow later used here"}, {"sha": "68d785efcfe5d5620fa1e6c89604c92a74fd8d9f", "filename": "src/test/ui/generator/yield-while-ref-reborrowed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -4,7 +4,7 @@ error[E0501]: cannot borrow `x` as immutable because previous closure requires u\n LL |     let mut b = || {\n    |                 -- generator construction occurs here\n LL |         let a = &mut *x;\n-   |                       - first borrow occurs due to use of `x` in generator\n+   |                      -- first borrow occurs due to use of `x` in generator\n ...\n LL |     println!(\"{}\", x);\n    |                    ^ second borrow occurs here"}, {"sha": "2a9d913171c3eed222679f0fd42f7de0919c80d0", "filename": "src/test/ui/issues/issue-11192.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fissues%2Fissue-11192.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fissues%2Fissue-11192.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11192.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -5,7 +5,7 @@ LL |     let mut test = |foo: &Foo| {\n    |                    ----------- mutable borrow occurs here\n LL |         println!(\"access {}\", foo.x);\n LL |         ptr = box Foo { x: ptr.x + 1 };\n-   |                            --- first borrow occurs due to use of `ptr` in closure\n+   |         --- first borrow occurs due to use of `ptr` in closure\n ...\n LL |     test(&*ptr);\n    |     ---- ^^^^^ immutable borrow occurs here"}, {"sha": "a1f973e0fdf5a292d54ce23bc2b8b52f8d4a71bc", "filename": "src/test/ui/issues/issue-27282-mutate-before-diverging-arm-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-1.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -5,7 +5,7 @@ LL |     match x {\n    |           - value is immutable in match guard\n ...\n LL |             (|| { *x = None; drop(force_fn_once); })();\n-   |              ^^    - borrow occurs due to use of `x` in closure\n+   |              ^^   -- borrow occurs due to use of `x` in closure\n    |              |\n    |              cannot mutably borrow\n "}, {"sha": "4a4a25790b985f516a1a658b86bbb37f31683c77", "filename": "src/test/ui/issues/issue-27282-mutate-before-diverging-arm-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-3.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -5,7 +5,7 @@ LL |     match **x {\n    |           --- value is immutable in match guard\n ...\n LL |             (|| { *x = &None; drop(force_fn_once); })();\n-   |              ^^    - borrow occurs due to use of `x` in closure\n+   |              ^^   -- borrow occurs due to use of `x` in closure\n    |              |\n    |              cannot mutably borrow\n "}, {"sha": "901c75981768e63481afacd505435e4f9890c2fd", "filename": "src/test/ui/issues/issue-61623.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fissues%2Fissue-61623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fissues%2Fissue-61623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61623.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -10,7 +10,7 @@ error[E0502]: cannot borrow `*x.1` as mutable because it is also borrowed as imm\n   --> $DIR/issue-61623.rs:6:19\n    |\n LL |     f2(|| x.0, f1(x.1))\n-   |     -- -- -       ^^^ mutable borrow occurs here\n+   |     -- -- ---     ^^^ mutable borrow occurs here\n    |     |  |  |\n    |     |  |  first borrow occurs due to use of `x` in closure\n    |     |  immutable borrow occurs here"}, {"sha": "48c6acd1f49e44a7e6447df407ce4be6fede7816", "filename": "src/test/ui/issues/issue-6801.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fissues%2Fissue-6801.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fissues%2Fissue-6801.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6801.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -2,7 +2,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/issue-6801.rs:19:13\n    |\n LL |       let sq =  || { *x * *x };\n-   |                 --    - borrow occurs due to use in closure\n+   |                 --   -- borrow occurs due to use in closure\n    |                 |\n    |                 borrow of `x` occurs here\n LL | "}, {"sha": "8eded8f28572e1fe3c322fd494a56fc36becc00f", "filename": "src/test/ui/nll/closure-access-spans.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -28,7 +28,7 @@ error[E0500]: closure requires unique access to `x` but it is already borrowed\n LL |     let r = &mut x;\n    |             ------ borrow occurs here\n LL |     || *x = 2;\n-   |     ^^  - second borrow occurs due to use of `x` in closure\n+   |     ^^ -- second borrow occurs due to use of `x` in closure\n    |     |\n    |     closure construction occurs here\n LL |     r.use_mut();\n@@ -88,7 +88,7 @@ LL | fn closure_unique_capture_moved(x: &mut String) {\n LL |     let r = x;\n    |             - value moved here\n LL |     || *x = String::new();\n-   |     ^^  - borrow occurs due to use in closure\n+   |     ^^ -- borrow occurs due to use in closure\n    |     |\n    |     value borrowed here after move\n "}, {"sha": "fffbee4d4a8e1218dc501721d182f4e06188cbb6", "filename": "src/test/ui/nll/closure-borrow-spans.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -110,7 +110,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/closure-borrow-spans.rs:65:13\n    |\n LL |     let f = || *x = 0;\n-   |             --  - borrow occurs due to use in closure\n+   |             -- -- borrow occurs due to use in closure\n    |             |\n    |             borrow of `x` occurs here\n LL |     let y = x;\n@@ -122,7 +122,7 @@ error[E0501]: cannot borrow `x` as immutable because previous closure requires u\n   --> $DIR/closure-borrow-spans.rs:71:13\n    |\n LL |     let f = || *x = 0;\n-   |             --  - first borrow occurs due to use of `x` in closure\n+   |             -- -- first borrow occurs due to use of `x` in closure\n    |             |\n    |             closure construction occurs here\n LL |     let y = &x;\n@@ -134,7 +134,7 @@ error[E0501]: cannot borrow `x` as mutable because previous closure requires uni\n   --> $DIR/closure-borrow-spans.rs:77:13\n    |\n LL |     let f = || *x = 0;\n-   |             --  - first borrow occurs due to use of `x` in closure\n+   |             -- -- first borrow occurs due to use of `x` in closure\n    |             |\n    |             closure construction occurs here\n LL |     let y = &mut x;\n@@ -143,10 +143,10 @@ LL |     f.use_ref();\n    |     - first borrow later used here\n \n error[E0597]: `x` does not live long enough\n-  --> $DIR/closure-borrow-spans.rs:86:17\n+  --> $DIR/closure-borrow-spans.rs:86:16\n    |\n LL |         f = || *x = 0;\n-   |             --  ^ borrowed value does not live long enough\n+   |             -- ^^ borrowed value does not live long enough\n    |             |\n    |             value captured here\n LL |     }\n@@ -158,7 +158,7 @@ error[E0506]: cannot assign to `*x` because it is borrowed\n   --> $DIR/closure-borrow-spans.rs:93:5\n    |\n LL |     let f = || *x = 0;\n-   |             --  - borrow occurs due to use in closure\n+   |             -- -- borrow occurs due to use in closure\n    |             |\n    |             borrow of `*x` occurs here\n LL |     *x = 1;"}, {"sha": "a59e553315ae68f2be162c465120c804091d7ab6", "filename": "src/test/ui/nll/closure-captures.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -133,9 +133,9 @@ LL |       fn_ref(|| {\n LL | |         ||\n    | |         ^^ cannot borrow as mutable\n LL | |         *x = 1;});\n-   | |__________-_____- in this closure\n-   |            |\n-   |            mutable borrow occurs due to use of `x` in closure\n+   | |_________--_____- in this closure\n+   |           |\n+   |           mutable borrow occurs due to use of `x` in closure\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/closure-captures.rs:51:9\n@@ -150,9 +150,9 @@ LL |       fn_ref(move || {\n LL | |         ||\n    | |         ^^ cannot borrow as mutable\n LL | |         *x = 1;});\n-   | |__________-_____- in this closure\n-   |            |\n-   |            mutable borrow occurs due to use of `x` in closure\n+   | |_________--_____- in this closure\n+   |           |\n+   |           mutable borrow occurs due to use of `x` in closure\n \n error: aborting due to 12 previous errors\n "}, {"sha": "87162904ba6cd9c171756563d40a916ccf4dfa6a", "filename": "src/test/ui/nll/closure-use-spans.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -6,7 +6,7 @@ LL |     let y = &x;\n LL |     x = 0;\n    |     ^^^^^ assignment to borrowed `x` occurs here\n LL |     || *y;\n-   |         - borrow later captured here by closure\n+   |        -- borrow later captured here by closure\n \n error[E0506]: cannot assign to `x` because it is borrowed\n   --> $DIR/closure-use-spans.rs:11:5\n@@ -16,7 +16,7 @@ LL |     let y = &mut x;\n LL |     x = 0;\n    |     ^^^^^ assignment to borrowed `x` occurs here\n LL |     || *y = 1;\n-   |         - borrow later captured here by closure\n+   |        -- borrow later captured here by closure\n \n error[E0506]: cannot assign to `x` because it is borrowed\n   --> $DIR/closure-use-spans.rs:17:5"}, {"sha": "2be0460df1fc67eaae9b4c1b1c4c758c058c4772", "filename": "src/test/ui/nll/closures-in-loops.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -21,7 +21,7 @@ error[E0524]: two closures require unique access to `x` at the same time\n   --> $DIR/closures-in-loops.rs:20:16\n    |\n LL |         v.push(|| *x = String::new());\n-   |                ^^  - borrows occur due to use of `x` in closure\n+   |                ^^ -- borrows occur due to use of `x` in closure\n    |                |\n    |                closures are constructed here in different iterations of loop\n "}, {"sha": "0483bda6379fd5ad332818e66f342128a060cc80", "filename": "src/test/ui/nll/issue-51268.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fnll%2Fissue-51268.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fnll%2Fissue-51268.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51268.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -8,7 +8,7 @@ LL |           self.thing.bar(|| {\n    | |\n LL | |\n LL | |             &self.number;\n-   | |              ---- first borrow occurs due to use of `self` in closure\n+   | |              ----------- first borrow occurs due to use of `self` in closure\n LL | |         });\n    | |__________^ mutable borrow occurs here\n "}, {"sha": "c16a6f8585b692098134b4d1e7ea392cdcb4b6b1", "filename": "src/test/ui/regions/regions-addr-of-upvar-self.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e10cbc33c1fd2fcd446cab5cdcc57332d154721c/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr?ref=e10cbc33c1fd2fcd446cab5cdcc57332d154721c", "patch": "@@ -23,7 +23,7 @@ error[E0597]: `self` does not live long enough\n LL |         let _f = || {\n    |                  -- value captured here\n LL |             let p: &'static mut usize = &mut self.food;\n-   |                    ------------------        ^^^^ borrowed value does not live long enough\n+   |                    ------------------        ^^^^^^^^^ borrowed value does not live long enough\n    |                    |\n    |                    type annotation requires that `self` is borrowed for `'static`\n ..."}]}