{"sha": "10419b3f2fc625bb9d746c16d768e433a894484d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNDE5YjNmMmZjNjI1YmI5ZDc0NmMxNmQ3NjhlNDMzYTg5NDQ4NGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-11T10:10:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-11T10:10:29Z"}, "message": "Auto merge of #1407 - RalfJung:appveyor, r=RalfJung\n\nShare CI code between Travis and AppVeyor", "tree": {"sha": "29c0aa3e0b6ad88571634fd5697b93611c612e95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29c0aa3e0b6ad88571634fd5697b93611c612e95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10419b3f2fc625bb9d746c16d768e433a894484d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10419b3f2fc625bb9d746c16d768e433a894484d", "html_url": "https://github.com/rust-lang/rust/commit/10419b3f2fc625bb9d746c16d768e433a894484d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10419b3f2fc625bb9d746c16d768e433a894484d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a85f0611535ca76c79703457f333d4a2361cfca9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a85f0611535ca76c79703457f333d4a2361cfca9", "html_url": "https://github.com/rust-lang/rust/commit/a85f0611535ca76c79703457f333d4a2361cfca9"}, {"sha": "131bdf88a759e3737d1eb28801e7816340f236b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/131bdf88a759e3737d1eb28801e7816340f236b5", "html_url": "https://github.com/rust-lang/rust/commit/131bdf88a759e3737d1eb28801e7816340f236b5"}], "stats": {"total": 188, "additions": 75, "deletions": 113}, "files": [{"sha": "34887459f6d9336e49fd97089e5bb31fece098ee", "filename": ".appveyor.yml", "status": "modified", "additions": 35, "deletions": 70, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/10419b3f2fc625bb9d746c16d768e433a894484d/.appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/10419b3f2fc625bb9d746c16d768e433a894484d/.appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.appveyor.yml?ref=10419b3f2fc625bb9d746c16d768e433a894484d", "patch": "@@ -1,84 +1,49 @@\n+build: off # No Visual Studio auto-build.\n environment:\n-    global:\n-        PROJECT_NAME: miri\n-    matrix:\n-        - TARGET: i686-pc-windows-msvc\n+  global:\n+    PROJECT_NAME: miri\n+  matrix:\n+    - TARGET: i686-pc-windows-msvc\n+matrix:\n+  fast_finish: true # Immediately finish build once one of the jobs fails.\n+cache:\n+- '%USERPROFILE%\\.cargo'\n+- '%USERPROFILE%\\.rustup'\n \n # branches to build\n branches:\n   # whitelist\n   only:\n-    - auto\n-    - try\n-\n-matrix:\n-  fast_finish: true     # set this flag to immediately finish build once one of the jobs fails.\n-\n-cache:\n-    - '%USERPROFILE%\\.cargo'\n-    - '%USERPROFILE%\\.rustup'\n+  - auto\n+  - try\n \n install:\n-    # Compute the rust version we use\n-    - set /p RUSTC_HASH=<rust-version\n-    # Install Rust\n-    - curl -sSf --retry 3 -o rustup-init.exe https://win.rustup.rs/\n-    - rustup-init.exe -y --default-host %TARGET% --default-toolchain stable --profile minimal\n-    - set PATH=%USERPROFILE%\\.cargo\\bin;%PATH%\n-    - rustup default stable\n-    - rustup toolchain uninstall beta\n-    - rustup update\n-    # Install \"master\" toolchain\n-    - cargo install rustup-toolchain-install-master\n-    # We need to install cargo here as well or else the DLL search path inside `cargo run`\n-    # will be for the wrong toolchain. (On Unix, `./miri` takes care of this, but not here.)\n-    - rustup-toolchain-install-master -f -n master %RUSTC_HASH% -c rust-src -c rustc-dev -c cargo\n-    - rustup default master\n-    - rustc --version\n-    - cargo --version\n-\n-build_script:\n-    - set RUSTFLAGS=-C debug-assertions\n-    # Build and install miri\n-    - cargo build --release --all-features --all-targets --locked\n-    - cargo install --all-features --force --path . --locked --offline\n+# Compute the Rust version we use.\n+- set /p RUSTC_HASH=<rust-version\n+# Install Rust. We use the \"stable\" toolchain for better caching, it is just used to build `rustup-toolchain-install-master`.\n+# But we also need to take into account that the build cache might have a different, outdated default.\n+- curl -sSf --retry 3 -o rustup-init.exe https://win.rustup.rs/\n+- rustup-init.exe -y --default-host %TARGET% --default-toolchain none --profile minimal\n+- set PATH=%USERPROFILE%\\.cargo\\bin;%PATH%\n+- rustup default stable\n+- rustup toolchain uninstall beta nightly\n+- rustup update\n+# Install \"master\" toolchain.\n+- cargo install rustup-toolchain-install-master\n+- rustup-toolchain-install-master -f -n master %RUSTC_HASH% -c rust-src -c rustc-dev\n+- rustup default master\n+- rustc --version\n+- cargo --version\n \n test_script:\n-    - set RUST_TEST_NOCAPTURE=1\n-    - set RUST_BACKTRACE=1\n-    - set CARGO_INCREMENTAL=0\n-    # Test host miri: 32bit Windows\n-    - cargo miri setup\n-    - set MIRI_SYSROOT=%USERPROFILE%\\AppData\\Local\\rust-lang\\miri\\cache\\HOST\n-    - cargo test --release --all-features --locked\n-    - cd test-cargo-miri\n-    - '\"C:\\msys64\\mingw64\\bin\\python3.exe\" run-test.py'\n-    - cd ..\n-    - ps: $env:MIRI_SYSROOT = \"\"\n-    # Test foreign miri: 64bit Linux\n-    - cargo miri setup --target x86_64-unknown-linux-gnu\n-    - set MIRI_SYSROOT=%USERPROFILE%\\AppData\\Local\\rust-lang\\miri\\cache\n-    - set MIRI_TEST_TARGET=x86_64-unknown-linux-gnu\n-    - cargo test --release --all-features --locked\n-    - cd test-cargo-miri\n-    - '\"C:\\msys64\\mingw64\\bin\\python3.exe\" run-test.py'\n-    - cd ..\n-    - ps: $env:MIRI_SYSROOT = \"\"\n-    # Test foreign miri: 64bit macOS\n-    - cargo miri setup --target x86_64-apple-darwin\n-    - set MIRI_SYSROOT=%USERPROFILE%\\AppData\\Local\\rust-lang\\miri\\cache\n-    - set MIRI_TEST_TARGET=x86_64-apple-darwin\n-    - cargo test --release --all-features --locked\n-    - cd test-cargo-miri\n-    - '\"C:\\msys64\\mingw64\\bin\\python3.exe\" run-test.py'\n-    - cd ..\n-    - ps: $env:MIRI_SYSROOT = \"\"\n+- set PYTHON=C:\\msys64\\mingw64\\bin\\python3.exe\n+- bash ci.sh\n \n after_test:\n-    # Don't cache \"master\" toolchain, it's a waste\n-    - rustup default stable\n-    - rustup toolchain uninstall master\n+# Don't cache \"master\" toolchain, it's a waste.\n+- rustup default stable\n+- rustup toolchain uninstall master\n \n notifications:\n-    - provider: Email\n-      on_build_success: false\n+- provider: Email\n+  on_build_success: false"}, {"sha": "1605737a7b09cc5f4ed56487b3b69eba005f6554", "filename": ".travis.yml", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/10419b3f2fc625bb9d746c16d768e433a894484d/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/10419b3f2fc625bb9d746c16d768e433a894484d/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=10419b3f2fc625bb9d746c16d768e433a894484d", "patch": "@@ -1,63 +1,57 @@\n language: generic\n+os:\n+- linux\n+- osx\n+dist: xenial\n cache:\n   # Cache the global cargo directory, but NOT the local `target` directory which\n   # we cannot reuse anyway when the nightly changes (and it grows quite large\n   # over time).\n   directories:\n-    - $HOME/.cargo\n-    - $HOME/.rustup\n-\n-os:\n-- linux\n-- osx\n-dist: xenial\n+  - $HOME/.cargo\n+  - $HOME/.rustup\n \n # Run in PRs and for bors, but not on master.\n+branches:\n+  only:\n+  - master\n+  - auto\n+  - try\n if: branch = auto OR branch = try OR type = pull_request OR type = cron\n \n-env:\n-  global:\n-  - RUST_TEST_NOCAPTURE=1\n-  - RUST_BACKTRACE=1\n-  - CARGO_INCREMENTAL=0\n-\n before_script:\n-# Compute the rust version we use. We do not use \"language: rust\" to have more control here.\n+# Compute the Rust version we use. We do not use \"language: rust\" to have more control here.\n - |\n   if [[ \"$TRAVIS_EVENT_TYPE\" == cron ]]; then\n     RUSTC_HASH=$(git ls-remote https://github.com/rust-lang/rust.git master | awk '{print $1}')\n   else\n     RUSTC_HASH=$(cat rust-version)\n   fi\n-# Install Rust (\"stable\" toolchain for better caching, it is just used to build rustup-toolchain-install-master)\n-- curl https://build.travis-ci.org/files/rustup-init.sh -sSf | sh -s -- -y --default-toolchain stable --profile minimal\n+# Install Rust. We use the \"stable\" toolchain for better caching, it is just used to build `rustup-toolchain-install-master`.\n+# But we also need to take into account that the build cache might have a different, outdated default.\n+- curl https://build.travis-ci.org/files/rustup-init.sh -sSf | sh -s -- -y --default-toolchain none --profile minimal\n - export PATH=$HOME/.cargo/bin:$PATH\n - rustup default stable\n-- rustup toolchain uninstall beta\n+- rustup toolchain uninstall beta nightly\n - rustup update\n-# Install \"master\" toolchain\n+# Install \"master\" toolchain.\n - cargo install rustup-toolchain-install-master\n - travis_retry rustup-toolchain-install-master -f -n master $RUSTC_HASH -c rust-src -c rustc-dev\n - rustup default master\n - rustc --version\n - cargo --version\n \n script:\n-- ./travis.sh\n+- ./ci.sh\n \n before_cache:\n-# Don't cache \"master\" toolchain, it's a waste\n+# Don't cache \"master\" toolchain, it's a waste.\n - rustup default stable\n - rustup toolchain uninstall master\n \n notifications:\n   email:\n     on_success: never\n     recipients:\n-      - post+travis@ralfj.de\n-      - travis-miri@oli-obk.de\n-branches:\n-  only:\n-  - master\n-  - auto\n-  - try\n+    - post+travis@ralfj.de\n+    - travis-miri@oli-obk.de"}, {"sha": "a7254f2958a0ae0c80a1088ba67ca362610b08fb", "filename": "ci.sh", "status": "renamed", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/10419b3f2fc625bb9d746c16d768e433a894484d/ci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/10419b3f2fc625bb9d746c16d768e433a894484d/ci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci.sh?ref=10419b3f2fc625bb9d746c16d768e433a894484d", "patch": "@@ -2,8 +2,11 @@\n set -euo pipefail\n \n # Determine configuration\n-export CARGO_EXTRA_FLAGS=\"--all-features\"\n+export RUST_TEST_NOCAPTURE=1\n+export RUST_BACKTRACE=1\n export RUSTC_EXTRA_FLAGS=\"-D warnings\"\n+export CARGO_INCREMENTAL=0\n+export CARGO_EXTRA_FLAGS=\"--all-features\"\n \n # Prepare\n echo \"Build and install miri\"\n@@ -22,28 +25,26 @@ function run_tests {\n   ./miri test --locked\n   if ! [ -n \"${MIRI_TEST_TARGET+exists}\" ]; then\n     # Only for host architecture: tests with MIR optimizations\n-    MIRI_TEST_FLAGS=\"-Z mir-opt-level=3\" ./miri test\n+    MIRI_TEST_FLAGS=\"-Z mir-opt-level=3\" ./miri test --locked\n   fi\n   # \"miri test\" has built the sysroot for us, now this should pass without\n   # any interactive questions.\n-  test-cargo-miri/run-test.py\n+  ${PYTHON:-python3} test-cargo-miri/run-test.py\n \n   echo\n }\n \n # host\n run_tests\n-# cross-test 32bit Linux from everywhere\n-MIRI_TEST_TARGET=i686-unknown-linux-gnu run_tests\n \n-if [ \"$TRAVIS_OS_NAME\" == linux ]; then\n-  # cross-test 64bit macOS from Linux\n+if [ \"${TRAVIS_OS_NAME:-}\" == linux ]; then\n+  MIRI_TEST_TARGET=i686-unknown-linux-gnu run_tests\n   MIRI_TEST_TARGET=x86_64-apple-darwin run_tests\n-  # cross-test 32bit Windows from Linux\n   MIRI_TEST_TARGET=i686-pc-windows-msvc run_tests\n-elif [ \"$TRAVIS_OS_NAME\" == osx ]; then\n-  # cross-test 64bit Windows from macOS\n+elif [ \"${TRAVIS_OS_NAME:-}\" == osx ]; then\n   MIRI_TEST_TARGET=x86_64-pc-windows-msvc run_tests\n-  # cross-test 32bit GNU Windows from macOS\n   MIRI_TEST_TARGET=i686-pc-windows-gnu run_tests\n+elif [ \"${CI_WINDOWS:-}\" == True ]; then\n+  MIRI_TEST_TARGET=x86_64-unknown-linux-gnu run_tests\n+  MIRI_TEST_TARGET=x86_64-apple-darwin run_tests\n fi", "previous_filename": "travis.sh"}, {"sha": "8613f6bb0994e730c1fc0b2bc3465840f43d430f", "filename": "src/shims/fs.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10419b3f2fc625bb9d746c16d768e433a894484d/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10419b3f2fc625bb9d746c16d768e433a894484d/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=10419b3f2fc625bb9d746c16d768e433a894484d", "patch": "@@ -549,12 +549,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         target_op: OpTy<'tcx, Tag>,\n         linkpath_op: OpTy<'tcx, Tag>\n     ) -> InterpResult<'tcx, i32> {\n-        #[cfg(target_family = \"unix\")]\n+        #[cfg(unix)]\n         fn create_link(src: &Path, dst: &Path) -> std::io::Result<()> {\n             std::os::unix::fs::symlink(src, dst)\n         }\n \n-        #[cfg(target_family = \"windows\")]\n+        #[cfg(windows)]\n         fn create_link(src: &Path, dst: &Path) -> std::io::Result<()> {\n             use std::os::windows::fs;\n             if src.is_dir() {\n@@ -816,22 +816,24 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"mkdir\")?;\n \n-        let _mode = if this.tcx.sess.target.target.target_os == \"macos\" {\n+        #[cfg_attr(not(unix), allow(unused_variables))]\n+        let mode = if this.tcx.sess.target.target.target_os == \"macos\" {\n             u32::from(this.read_scalar(mode_op)?.not_undef()?.to_u16()?)\n         } else {\n             this.read_scalar(mode_op)?.to_u32()?\n         };\n \n         let path = this.read_path_from_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n \n+        #[cfg_attr(not(unix), allow(unused_mut))]\n         let mut builder = DirBuilder::new();\n \n         // If the host supports it, forward on the mode of the directory\n         // (i.e. permission bits and the sticky bit)\n-        #[cfg(target_family = \"unix\")]\n+        #[cfg(unix)]\n         {\n             use std::os::unix::fs::DirBuilderExt;\n-            builder.mode(_mode.into());\n+            builder.mode(mode.into());\n         }\n \n         let result = builder.create(path).map(|_| 0i32);"}]}