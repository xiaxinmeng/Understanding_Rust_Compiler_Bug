{"sha": "293cdf7ac5d14811debdec3408afde104935caef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5M2NkZjdhYzVkMTQ4MTFkZWJkZWMzNDA4YWZkZTEwNDkzNWNhZWY=", "commit": {"author": {"name": "Charles Gleason", "email": "charles_gleason@alumni.brown.edu", "date": "2019-11-22T03:09:10Z"}, "committer": {"name": "Charles Gleason", "email": "charles_gleason@alumni.brown.edu", "date": "2019-12-23T16:03:30Z"}, "message": "Make RangeMut::next_unchecked() output a mutable key reference", "tree": {"sha": "c1182eb78323f9aa18fa54a78d333c441397bde7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1182eb78323f9aa18fa54a78d333c441397bde7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/293cdf7ac5d14811debdec3408afde104935caef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/293cdf7ac5d14811debdec3408afde104935caef", "html_url": "https://github.com/rust-lang/rust/commit/293cdf7ac5d14811debdec3408afde104935caef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/293cdf7ac5d14811debdec3408afde104935caef/comments", "author": {"login": "crgl", "id": 36055314, "node_id": "MDQ6VXNlcjM2MDU1MzE0", "avatar_url": "https://avatars.githubusercontent.com/u/36055314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crgl", "html_url": "https://github.com/crgl", "followers_url": "https://api.github.com/users/crgl/followers", "following_url": "https://api.github.com/users/crgl/following{/other_user}", "gists_url": "https://api.github.com/users/crgl/gists{/gist_id}", "starred_url": "https://api.github.com/users/crgl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crgl/subscriptions", "organizations_url": "https://api.github.com/users/crgl/orgs", "repos_url": "https://api.github.com/users/crgl/repos", "events_url": "https://api.github.com/users/crgl/events{/privacy}", "received_events_url": "https://api.github.com/users/crgl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crgl", "id": 36055314, "node_id": "MDQ6VXNlcjM2MDU1MzE0", "avatar_url": "https://avatars.githubusercontent.com/u/36055314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crgl", "html_url": "https://github.com/crgl", "followers_url": "https://api.github.com/users/crgl/followers", "following_url": "https://api.github.com/users/crgl/following{/other_user}", "gists_url": "https://api.github.com/users/crgl/gists{/gist_id}", "starred_url": "https://api.github.com/users/crgl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crgl/subscriptions", "organizations_url": "https://api.github.com/users/crgl/orgs", "repos_url": "https://api.github.com/users/crgl/repos", "events_url": "https://api.github.com/users/crgl/events{/privacy}", "received_events_url": "https://api.github.com/users/crgl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a916ac22b9f7f1f0f7aba0a41a789b3ecd765018", "url": "https://api.github.com/repos/rust-lang/rust/commits/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018", "html_url": "https://github.com/rust-lang/rust/commit/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "e25a5e0773ec6a5825c945e5794e3f6748f0da56", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/293cdf7ac5d14811debdec3408afde104935caef/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/293cdf7ac5d14811debdec3408afde104935caef/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=293cdf7ac5d14811debdec3408afde104935caef", "patch": "@@ -1328,7 +1328,10 @@ impl<'a, K: 'a, V: 'a> Iterator for IterMut<'a, K, V> {\n             None\n         } else {\n             self.length -= 1;\n-            unsafe { Some(self.range.next_unchecked()) }\n+            unsafe {\n+                let (k, v) = self.range.next_unchecked();\n+                Some((k, v)) // coerce k from `&mut K` to `&K`\n+            }\n         }\n     }\n \n@@ -1707,7 +1710,14 @@ impl<'a, K, V> Iterator for RangeMut<'a, K, V> {\n     type Item = (&'a K, &'a mut V);\n \n     fn next(&mut self) -> Option<(&'a K, &'a mut V)> {\n-        if self.front == self.back { None } else { unsafe { Some(self.next_unchecked()) } }\n+        if self.front == self.back {\n+            None\n+        } else {\n+            unsafe {\n+                let (k, v) = self.next_unchecked();\n+                Some((k, v)) // coerce k from `&mut K` to `&K`\n+            }\n+        }\n     }\n \n     fn last(mut self) -> Option<(&'a K, &'a mut V)> {\n@@ -1716,16 +1726,15 @@ impl<'a, K, V> Iterator for RangeMut<'a, K, V> {\n }\n \n impl<'a, K, V> RangeMut<'a, K, V> {\n-    unsafe fn next_unchecked(&mut self) -> (&'a K, &'a mut V) {\n+    unsafe fn next_unchecked(&mut self) -> (&'a mut K, &'a mut V) {\n         let handle = ptr::read(&self.front);\n \n         let mut cur_handle = match handle.right_kv() {\n             Ok(kv) => {\n                 self.front = ptr::read(&kv).right_edge();\n                 // Doing the descend invalidates the references returned by `into_kv_mut`,\n                 // so we have to do this last.\n-                let (k, v) = kv.into_kv_mut();\n-                return (k, v); // coerce k from `&mut K` to `&K`\n+                return kv.into_kv_mut();\n             }\n             Err(last_edge) => {\n                 let next_level = last_edge.into_node().ascend().ok();\n@@ -1739,8 +1748,7 @@ impl<'a, K, V> RangeMut<'a, K, V> {\n                     self.front = first_leaf_edge(ptr::read(&kv).right_edge().descend());\n                     // Doing the descend invalidates the references returned by `into_kv_mut`,\n                     // so we have to do this last.\n-                    let (k, v) = kv.into_kv_mut();\n-                    return (k, v); // coerce k from `&mut K` to `&K`\n+                    return kv.into_kv_mut();\n                 }\n                 Err(last_edge) => {\n                     let next_level = last_edge.into_node().ascend().ok();"}]}