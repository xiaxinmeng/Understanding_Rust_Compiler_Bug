{"sha": "e4ab0f665b92e895985f233c97ec31a55662e19f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0YWIwZjY2NWI5MmU4OTU5ODVmMjMzYzk3ZWMzMWE1NTY2MmUxOWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-07-27T22:08:56Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-07-27T22:49:03Z"}, "message": "change send_map tests to use ~linear_map, much more natural", "tree": {"sha": "3ede7ca1e786ae37bbc797a188c550adc6dd70db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ede7ca1e786ae37bbc797a188c550adc6dd70db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4ab0f665b92e895985f233c97ec31a55662e19f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ab0f665b92e895985f233c97ec31a55662e19f", "html_url": "https://github.com/rust-lang/rust/commit/e4ab0f665b92e895985f233c97ec31a55662e19f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4ab0f665b92e895985f233c97ec31a55662e19f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd106ba7631e07445f374339dcb8a3bbf0fa8e18", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd106ba7631e07445f374339dcb8a3bbf0fa8e18", "html_url": "https://github.com/rust-lang/rust/commit/dd106ba7631e07445f374339dcb8a3bbf0fa8e18"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "2c485077ea9f10bd9b6fc3467af9f1ab2de6dea1", "filename": "src/libstd/send_map.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e4ab0f665b92e895985f233c97ec31a55662e19f/src%2Flibstd%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ab0f665b92e895985f233c97ec31a55662e19f/src%2Flibstd%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsend_map.rs?ref=e4ab0f665b92e895985f233c97ec31a55662e19f", "patch": "@@ -305,41 +305,41 @@ mod test {\n \n     #[test]\n     fn inserts() {\n-        let mut m = int_linear_map();\n-        assert (&mut m).insert(1, 2);\n-        assert (&mut m).insert(2, 4);\n-        assert (&m).get(&1) == 2;\n-        assert (&m).get(&2) == 4;\n+        let mut m = ~int_linear_map();\n+        assert m.insert(1, 2);\n+        assert m.insert(2, 4);\n+        assert m.get(&1) == 2;\n+        assert m.get(&2) == 4;\n     }\n \n     #[test]\n     fn overwrite() {\n-        let mut m = int_linear_map();\n-        assert (&mut m).insert(1, 2);\n-        assert (&m).get(&1) == 2;\n-        assert !(&mut m).insert(1, 3);\n-        assert (&m).get(&1) == 3;\n+        let mut m = ~int_linear_map();\n+        assert m.insert(1, 2);\n+        assert m.get(&1) == 2;\n+        assert !m.insert(1, 3);\n+        assert m.get(&1) == 3;\n     }\n \n     #[test]\n     fn conflicts() {\n-        let mut m = linear::linear_map_with_capacity(uint_hash, uint_eq, 4);\n-        assert (&mut m).insert(1, 2);\n-        assert (&mut m).insert(5, 3);\n-        assert (&mut m).insert(9, 4);\n-        assert (&m).get(&9) == 4;\n-        assert (&m).get(&5) == 3;\n-        assert (&m).get(&1) == 2;\n+        let mut m = ~linear::linear_map_with_capacity(uint_hash, uint_eq, 4);\n+        assert m.insert(1, 2);\n+        assert m.insert(5, 3);\n+        assert m.insert(9, 4);\n+        assert m.get(&9) == 4;\n+        assert m.get(&5) == 3;\n+        assert m.get(&1) == 2;\n     }\n \n     #[test]\n     fn conflict_remove() {\n-        let mut m = linear::linear_map_with_capacity(uint_hash, uint_eq, 4);\n-        assert (&mut m).insert(1, 2);\n-        assert (&mut m).insert(5, 3);\n-        assert (&mut m).insert(9, 4);\n-        assert (&mut m).remove(&1);\n-        assert (&m).get(&9) == 4;\n-        assert (&m).get(&5) == 3;\n+        let mut m = ~linear::linear_map_with_capacity(uint_hash, uint_eq, 4);\n+        assert m.insert(1, 2);\n+        assert m.insert(5, 3);\n+        assert m.insert(9, 4);\n+        assert m.remove(&1);\n+        assert m.get(&9) == 4;\n+        assert m.get(&5) == 3;\n     }\n }\n\\ No newline at end of file"}]}