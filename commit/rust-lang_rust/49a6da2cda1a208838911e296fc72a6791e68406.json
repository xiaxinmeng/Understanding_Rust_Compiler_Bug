{"sha": "49a6da2cda1a208838911e296fc72a6791e68406", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5YTZkYTJjZGExYTIwODgzODkxMWUyOTZmYzcyYTY3OTFlNjg0MDY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-03-23T01:36:30Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-03-29T10:03:35Z"}, "message": "Support non-exhaustive enum variants in rustdoc.\n\nThis commit adds support for non-exhaustive enum variants in rustdoc,\nextending the existing support for non-exhaustive enums and structs.", "tree": {"sha": "ddccdb032fd71f600e948b9082cf9734f6f473be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddccdb032fd71f600e948b9082cf9734f6f473be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49a6da2cda1a208838911e296fc72a6791e68406", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlyd7XcACgkQAXYLT59T\n8VQyCA//Z1VwDGcvXQz3GWjSYKpFgqwCahWk8XWl3PLcgzr0jkiYkH1xZspYrA/c\n2Tz96cNWVMLkQCjUVT8y22STXLKVUmmPsQdefvXKmUyzbdVXT5Cg4cclO302HD9H\nX1ueC2zsHeYbGu8aOkir/KQgfYTCxntyKEBAQCPsNgMUyBQGz6Q86FHg4Os+iu2b\nRVHqbEx0ttAWcMtbp9owSMcGrBwY+Npa/dDZPow7HDEFefYjiz4jyY1dek3Ubigl\nbB58ugclxZ+LHLbyA96BZKvQ/ds8KR3vpmsPqBVDAawqaXxwAJtLW2RQ5wo3ttlR\nau3TTcQBJoL7KYXvq0fQFe7aJtTNUvfX560HBGQcAEFqDKIGhH/i/N8FHQSO7ZHV\ne0A93/NF3hXoHzFPaNiZ+eNidw/4b+PXiL/lz+Oou5Ggao9wjvsf8vxwwZfpIlEW\nUgFN7PIuZusDEV8JXJM03iROtekBzEj9Rn3uE1XXXN59/T908knKd0BsY6gaciFb\nUxydLOvd2oip+26w37veGQWiMRNDPMW4T653XZbfN6qx2EBIJORdHR6AEj80xW50\no4BkAiy9kgHR5dGdpjjGLg/sEa5UU7CHzpra+GwInT1SbG9CbqlF1oXJQrecEKWk\nuFGwoCKxDN4m4GJgAYrKyIbDY/E4fQ+gO1dWlG/v05G/E9T0gQU=\n=d9mI\n-----END PGP SIGNATURE-----", "payload": "tree ddccdb032fd71f600e948b9082cf9734f6f473be\nparent 18938416e4d34d7f7d64d11decd87ce47036bb75\nauthor David Wood <david@davidtw.co> 1553304990 +0100\ncommitter David Wood <david@davidtw.co> 1553853815 +0100\n\nSupport non-exhaustive enum variants in rustdoc.\n\nThis commit adds support for non-exhaustive enum variants in rustdoc,\nextending the existing support for non-exhaustive enums and structs.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49a6da2cda1a208838911e296fc72a6791e68406", "html_url": "https://github.com/rust-lang/rust/commit/49a6da2cda1a208838911e296fc72a6791e68406", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49a6da2cda1a208838911e296fc72a6791e68406/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18938416e4d34d7f7d64d11decd87ce47036bb75", "url": "https://api.github.com/repos/rust-lang/rust/commits/18938416e4d34d7f7d64d11decd87ce47036bb75", "html_url": "https://github.com/rust-lang/rust/commit/18938416e4d34d7f7d64d11decd87ce47036bb75"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "114294cde4ee21f3a5a15c4fda90afb0b68765f9", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/49a6da2cda1a208838911e296fc72a6791e68406/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a6da2cda1a208838911e296fc72a6791e68406/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=49a6da2cda1a208838911e296fc72a6791e68406", "patch": "@@ -421,6 +421,9 @@ impl Item {\n     pub fn is_enum(&self) -> bool {\n         self.type_() == ItemType::Enum\n     }\n+    pub fn is_variant(&self) -> bool {\n+        self.type_() == ItemType::Variant\n+    }\n     pub fn is_associated_type(&self) -> bool {\n         self.type_() == ItemType::AssociatedType\n     }"}, {"sha": "982c033be99fdf11e3f9c0c9396174903ef687da", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/49a6da2cda1a208838911e296fc72a6791e68406/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a6da2cda1a208838911e296fc72a6791e68406/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=49a6da2cda1a208838911e296fc72a6791e68406", "patch": "@@ -2596,7 +2596,15 @@ fn document_non_exhaustive_header(item: &clean::Item) -> &str {\n fn document_non_exhaustive(w: &mut fmt::Formatter<'_>, item: &clean::Item) -> fmt::Result {\n     if item.is_non_exhaustive() {\n         write!(w, \"<div class='docblock non-exhaustive non-exhaustive-{}'>\", {\n-            if item.is_struct() { \"struct\" } else if item.is_enum() { \"enum\" } else { \"type\" }\n+            if item.is_struct() {\n+                \"struct\"\n+            } else if item.is_enum() {\n+                \"enum\"\n+            } else if item.is_variant() {\n+                \"variant\"\n+            } else {\n+                \"type\"\n+            }\n         })?;\n \n         if item.is_struct() {\n@@ -2609,6 +2617,10 @@ fn document_non_exhaustive(w: &mut fmt::Formatter<'_>, item: &clean::Item) -> fm\n             write!(w, \"Non-exhaustive enums could have additional variants added in future. \\\n                        Therefore, when matching against variants of non-exhaustive enums, an \\\n                        extra wildcard arm must be added to account for any future variants.\")?;\n+        } else if item.is_variant() {\n+            write!(w, \"Non-exhaustive enum variants could have additional fields added in future. \\\n+                       Therefore, non-exhaustive enum variants cannot be constructed in external \\\n+                       crates and cannot be matched against.\")?;\n         } else {\n             write!(w, \"This type will require a wildcard arm in any match statements or \\\n                        constructors.\")?;\n@@ -3671,6 +3683,7 @@ fn item_enum(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n             }\n             write!(w, \"</code></span>\")?;\n             document(w, cx, variant)?;\n+            document_non_exhaustive(w, variant)?;\n \n             use crate::clean::{Variant, VariantKind};\n             if let clean::VariantItem(Variant {"}, {"sha": "85dc4d57337c81c3dbd7ac5d06ead1376662c069", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/49a6da2cda1a208838911e296fc72a6791e68406/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/49a6da2cda1a208838911e296fc72a6791e68406/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=49a6da2cda1a208838911e296fc72a6791e68406", "patch": "@@ -2247,6 +2247,8 @@ if (!DOMTokenList.prototype.remove) {\n                     otherMessage += \"struct\";\n                 } else if (hasClass(e, \"non-exhaustive-enum\")) {\n                     otherMessage += \"enum\";\n+                } else if (hasClass(e, \"non-exhaustive-variant\")) {\n+                    otherMessage += \"enum variant\";\n                 } else if (hasClass(e, \"non-exhaustive-type\")) {\n                     otherMessage += \"type\";\n                 }\n@@ -2264,6 +2266,9 @@ if (!DOMTokenList.prototype.remove) {\n             if (hasClass(e, \"type-decl\") === true && showItemDeclarations === true) {\n                 collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n             }\n+            if (hasClass(e, \"non-exhaustive\") === true) {\n+                collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n+            }\n         }\n     }\n "}]}