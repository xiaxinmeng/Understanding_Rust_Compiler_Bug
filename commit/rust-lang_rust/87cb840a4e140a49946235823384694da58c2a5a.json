{"sha": "87cb840a4e140a49946235823384694da58c2a5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3Y2I4NDBhNGUxNDBhNDk5NDYyMzU4MjMzODQ2OTRkYTU4YzJhNWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-06T11:51:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-06T11:51:15Z"}, "message": "Merge #6124\n\n6124: Better normalized crate name usage r=jonas-schievink a=SomeoneToIgnore\n\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/5343 \r\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/5932\r\n\r\nUses normalized name for code snippets (to be able to test the fix), hover messages and documentation rewrite links (are there any tests for those?).\r\nAlso renamed the field to better resemble the semantics.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "4e6ce0749103bdf8e373b3d12472866bdc10d4c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e6ce0749103bdf8e373b3d12472866bdc10d4c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87cb840a4e140a49946235823384694da58c2a5a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJffFozCRBK7hj4Ov3rIwAAdHIIAA99yPhrjpVfJCUfOjjWj9e3\nVUSKD8SUXQIr3ulasvPZeYtDa48bIC5YoMN1b1ohQcwdKZ+2hIqsUhERzGHtPD64\nikaqIP3ph3eSFcJIKCoyL8HdrXSxodcRBo15wBYnq+eyAGxGRdYp5Azh05urWy2b\nutjk1CrngPA+KPE2ekf8zso2RDcy5i1FRcj3awaPToKg3evOLC4kaZ0fL8IobDS0\nlqmpP+uZxE2f14bStkLKXKuphZFThLdhJ9BXgVYxzF2t8uPhAXzzpuoBgiYNbTHM\nhY8zMLJy7XLXhI3XxeJZtnDulYkbz4gUhcYJrMGTCQ/aOCvre3ixA45fwR0/9HA=\n=2F0N\n-----END PGP SIGNATURE-----\n", "payload": "tree 4e6ce0749103bdf8e373b3d12472866bdc10d4c8\nparent af0e54a566ab8c8be9b39a628aaa4992f161695c\nparent 9d19e5b962f77259dd1334b9edb4da4de54f0987\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1601985075 +0000\ncommitter GitHub <noreply@github.com> 1601985075 +0000\n\nMerge #6124\n\n6124: Better normalized crate name usage r=jonas-schievink a=SomeoneToIgnore\n\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/5343 \r\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/5932\r\n\r\nUses normalized name for code snippets (to be able to test the fix), hover messages and documentation rewrite links (are there any tests for those?).\r\nAlso renamed the field to better resemble the semantics.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87cb840a4e140a49946235823384694da58c2a5a", "html_url": "https://github.com/rust-lang/rust/commit/87cb840a4e140a49946235823384694da58c2a5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87cb840a4e140a49946235823384694da58c2a5a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af0e54a566ab8c8be9b39a628aaa4992f161695c", "url": "https://api.github.com/repos/rust-lang/rust/commits/af0e54a566ab8c8be9b39a628aaa4992f161695c", "html_url": "https://github.com/rust-lang/rust/commit/af0e54a566ab8c8be9b39a628aaa4992f161695c"}, {"sha": "9d19e5b962f77259dd1334b9edb4da4de54f0987", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d19e5b962f77259dd1334b9edb4da4de54f0987", "html_url": "https://github.com/rust-lang/rust/commit/9d19e5b962f77259dd1334b9edb4da4de54f0987"}], "stats": {"total": 95, "additions": 64, "deletions": 31}, "files": [{"sha": "72f1fd6678253d12c8f66ef5d80cab49b6ebad5b", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87cb840a4e140a49946235823384694da58c2a5a/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87cb840a4e140a49946235823384694da58c2a5a/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=87cb840a4e140a49946235823384694da58c2a5a", "patch": "@@ -154,19 +154,19 @@ impl ChangeFixture {\n             assert!(meta.path.starts_with(&source_root_prefix));\n \n             if let Some(krate) = meta.krate {\n+                let crate_name = CrateName::normalize_dashes(&krate);\n                 let crate_id = crate_graph.add_crate_root(\n                     file_id,\n                     meta.edition,\n-                    Some(krate.clone()),\n+                    Some(crate_name.clone()),\n                     meta.cfg,\n                     meta.env,\n                     Default::default(),\n                 );\n-                let crate_name = CrateName::new(&krate).unwrap();\n                 let prev = crates.insert(crate_name.clone(), crate_id);\n                 assert!(prev.is_none());\n                 for dep in meta.deps {\n-                    let dep = CrateName::new(&dep).unwrap();\n+                    let dep = CrateName::normalize_dashes(&dep);\n                     crate_deps.push((crate_name.clone(), dep))\n                 }\n             } else if meta.path == \"/main.rs\" || meta.path == \"/lib.rs\" {\n@@ -187,7 +187,7 @@ impl ChangeFixture {\n             crate_graph.add_crate_root(\n                 crate_root,\n                 Edition::Edition2018,\n-                Some(\"test\".to_string()),\n+                Some(CrateName::new(\"test\").unwrap()),\n                 default_cfg,\n                 Env::default(),\n                 Default::default(),"}, {"sha": "c330314d44235de6bb994b24392c8ca773a66321", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/87cb840a4e140a49946235823384694da58c2a5a/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87cb840a4e140a49946235823384694da58c2a5a/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=87cb840a4e140a49946235823384694da58c2a5a", "patch": "@@ -127,10 +127,11 @@ impl PartialEq for ProcMacro {\n pub struct CrateData {\n     pub root_file_id: FileId,\n     pub edition: Edition,\n-    /// The name to display to the end user.\n-    /// This actual crate name can be different in a particular dependent crate\n-    /// or may even be missing for some cases, such as a dummy crate for the code snippet.\n-    pub display_name: Option<String>,\n+    /// A name used in the package's project declaration: for Cargo projects, it's [package].name,\n+    /// can be different for other project types or even absent (a dummy crate for the code snippet, for example).\n+    /// NOTE: The crate can be referenced as a dependency under a different name,\n+    /// this one should be used when working with crate hierarchies.\n+    pub declaration_name: Option<CrateName>,\n     pub cfg_options: CfgOptions,\n     pub env: Env,\n     pub dependencies: Vec<Dependency>,\n@@ -159,7 +160,7 @@ impl CrateGraph {\n         &mut self,\n         file_id: FileId,\n         edition: Edition,\n-        display_name: Option<String>,\n+        declaration_name: Option<CrateName>,\n         cfg_options: CfgOptions,\n         env: Env,\n         proc_macro: Vec<(SmolStr, Arc<dyn tt::TokenExpander>)>,\n@@ -170,7 +171,7 @@ impl CrateGraph {\n         let data = CrateData {\n             root_file_id: file_id,\n             edition,\n-            display_name,\n+            declaration_name,\n             cfg_options,\n             env,\n             proc_macro,"}, {"sha": "c75d46bffbc427f34ee701072b3b5e370de4c966", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87cb840a4e140a49946235823384694da58c2a5a/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87cb840a4e140a49946235823384694da58c2a5a/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=87cb840a4e140a49946235823384694da58c2a5a", "patch": "@@ -2,7 +2,7 @@\n use std::{iter, sync::Arc};\n \n use arrayvec::ArrayVec;\n-use base_db::{CrateId, Edition, FileId};\n+use base_db::{CrateId, CrateName, Edition, FileId};\n use either::Either;\n use hir_def::find_path::PrefixKind;\n use hir_def::{\n@@ -99,8 +99,8 @@ impl Crate {\n         db.crate_graph()[self.id].edition\n     }\n \n-    pub fn display_name(self, db: &dyn HirDatabase) -> Option<String> {\n-        db.crate_graph()[self.id].display_name.clone()\n+    pub fn declaration_name(self, db: &dyn HirDatabase) -> Option<CrateName> {\n+        db.crate_graph()[self.id].declaration_name.clone()\n     }\n \n     pub fn query_external_importables("}, {"sha": "44bfe15934aa0dcc3b2d36fc148a3baaa7826c7a", "filename": "crates/hir_def/src/import_map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87cb840a4e140a49946235823384694da58c2a5a/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87cb840a4e140a49946235823384694da58c2a5a/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fimport_map.rs?ref=87cb840a4e140a49946235823384694da58c2a5a", "patch": "@@ -334,14 +334,14 @@ mod tests {\n \n     use super::*;\n \n-    fn check_search(ra_fixture: &str, krate_name: &str, query: Query, expect: Expect) {\n+    fn check_search(ra_fixture: &str, crate_name: &str, query: Query, expect: Expect) {\n         let db = TestDB::with_files(ra_fixture);\n         let crate_graph = db.crate_graph();\n         let krate = crate_graph\n             .iter()\n             .find(|krate| {\n-                crate_graph[*krate].display_name.as_ref().map(|n| n.to_string())\n-                    == Some(krate_name.to_string())\n+                crate_graph[*krate].declaration_name.as_ref().map(|n| n.to_string())\n+                    == Some(crate_name.to_string())\n             })\n             .unwrap();\n \n@@ -359,7 +359,7 @@ mod tests {\n                     let path = map.path_of(item).unwrap();\n                     format!(\n                         \"{}::{} ({})\\n\",\n-                        crate_graph[krate].display_name.as_ref().unwrap(),\n+                        crate_graph[krate].declaration_name.as_ref().unwrap(),\n                         path,\n                         mark\n                     )\n@@ -400,7 +400,7 @@ mod tests {\n             .iter()\n             .filter_map(|krate| {\n                 let cdata = &crate_graph[krate];\n-                let name = cdata.display_name.as_ref()?;\n+                let name = cdata.declaration_name.as_ref()?;\n \n                 let map = db.import_map(krate);\n "}, {"sha": "464ffef2120fe54ec0b8acc1c27f80976daef182", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87cb840a4e140a49946235823384694da58c2a5a/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87cb840a4e140a49946235823384694da58c2a5a/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=87cb840a4e140a49946235823384694da58c2a5a", "patch": "@@ -173,7 +173,7 @@ impl CrateDefMap {\n     pub(crate) fn crate_def_map_query(db: &dyn DefDatabase, krate: CrateId) -> Arc<CrateDefMap> {\n         let _p = profile::span(\"crate_def_map_query\").detail(|| {\n             db.crate_graph()[krate]\n-                .display_name\n+                .declaration_name\n                 .as_ref()\n                 .map(ToString::to_string)\n                 .unwrap_or_default()"}, {"sha": "4521d72ccea31f5c95df3024d6dc4a3da6bb912e", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/87cb840a4e140a49946235823384694da58c2a5a/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87cb840a4e140a49946235823384694da58c2a5a/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=87cb840a4e140a49946235823384694da58c2a5a", "patch": "@@ -289,7 +289,7 @@ fn definition_owner_name(db: &RootDatabase, def: &Definition) -> Option<String>\n \n fn render_path(db: &RootDatabase, module: Module, item_name: Option<String>) -> String {\n     let crate_name =\n-        db.crate_graph()[module.krate().into()].display_name.as_ref().map(ToString::to_string);\n+        db.crate_graph()[module.krate().into()].declaration_name.as_ref().map(ToString::to_string);\n     let module_path = module\n         .path_to_root(db)\n         .into_iter()\n@@ -3163,4 +3163,34 @@ fn main() { let s<|>t = test().get(); }\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn hover_displays_normalized_crate_names() {\n+        check(\n+            r#\"\n+//- /lib.rs crate:name-with-dashes\n+pub mod wrapper {\n+    pub struct Thing { x: u32 }\n+\n+    impl Thing {\n+        pub fn new() -> Thing { Thing { x: 0 } }\n+    }\n+}\n+\n+//- /main.rs crate:main deps:name-with-dashes\n+fn main() { let foo_test = name_with_dashes::wrapper::Thing::new<|>(); }\n+\"#,\n+            expect![[r#\"\n+            *new*\n+\n+            ```rust\n+            name_with_dashes::wrapper::Thing\n+            ```\n+\n+            ```rust\n+            pub fn new() -> Thing\n+            ```\n+            \"#]],\n+        )\n+    }\n }"}, {"sha": "c317a2379b4fddcf4036b5e65300a918646efe4b", "filename": "crates/ide/src/link_rewrite.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87cb840a4e140a49946235823384694da58c2a5a/crates%2Fide%2Fsrc%2Flink_rewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87cb840a4e140a49946235823384694da58c2a5a/crates%2Fide%2Fsrc%2Flink_rewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flink_rewrite.rs?ref=87cb840a4e140a49946235823384694da58c2a5a", "patch": "@@ -107,7 +107,7 @@ fn rewrite_intra_doc_link(\n     let krate = resolved.module(db)?.krate();\n     let canonical_path = resolved.canonical_path(db)?;\n     let new_target = get_doc_url(db, &krate)?\n-        .join(&format!(\"{}/\", krate.display_name(db)?))\n+        .join(&format!(\"{}/\", krate.declaration_name(db)?))\n         .ok()?\n         .join(&canonical_path.replace(\"::\", \"/\"))\n         .ok()?\n@@ -127,7 +127,7 @@ fn rewrite_url_link(db: &RootDatabase, def: ModuleDef, target: &str) -> Option<S\n     let module = def.module(db)?;\n     let krate = module.krate();\n     let canonical_path = def.canonical_path(db)?;\n-    let base = format!(\"{}/{}\", krate.display_name(db)?, canonical_path.replace(\"::\", \"/\"));\n+    let base = format!(\"{}/{}\", krate.declaration_name(db)?, canonical_path.replace(\"::\", \"/\"));\n \n     get_doc_url(db, &krate)\n         .and_then(|url| url.join(&base).ok())\n@@ -248,7 +248,7 @@ fn get_doc_url(db: &RootDatabase, krate: &Crate) -> Option<Url> {\n             //\n             // FIXME: clicking on the link should just open the file in the editor,\n             // instead of falling back to external urls.\n-            Some(format!(\"https://docs.rs/{}/*/\", krate.display_name(db)?))\n+            Some(format!(\"https://docs.rs/{}/*/\", krate.declaration_name(db)?))\n         })\n         .and_then(|s| Url::parse(&s).ok())\n }"}, {"sha": "f67f10491dfb1046a12caa4b71b920d55d7c736d", "filename": "crates/ide/src/status.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87cb840a4e140a49946235823384694da58c2a5a/crates%2Fide%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87cb840a4e140a49946235823384694da58c2a5a/crates%2Fide%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatus.rs?ref=87cb840a4e140a49946235823384694da58c2a5a", "patch": "@@ -45,7 +45,7 @@ pub(crate) fn status(db: &RootDatabase, file_id: Option<FileId>) -> String {\n         match krate {\n             Some(krate) => {\n                 let crate_graph = db.crate_graph();\n-                let display_crate = |krate: CrateId| match &crate_graph[krate].display_name {\n+                let display_crate = |krate: CrateId| match &crate_graph[krate].declaration_name {\n                     Some(it) => format!(\"{}({:?})\", it, krate),\n                     None => format!(\"{:?}\", krate),\n                 };"}, {"sha": "d1e7602fc51e5b63dcf638bed04b7662b8d371bf", "filename": "crates/project_model/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/87cb840a4e140a49946235823384694da58c2a5a/crates%2Fproject_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87cb840a4e140a49946235823384694da58c2a5a/crates%2Fproject_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Flib.rs?ref=87cb840a4e140a49946235823384694da58c2a5a", "patch": "@@ -411,7 +411,7 @@ impl ProjectWorkspace {\n                             let crate_id = crate_graph.add_crate_root(\n                                 file_id,\n                                 edition,\n-                                Some(cargo[pkg].name.clone()),\n+                                Some(CrateName::normalize_dashes(&cargo[pkg].name)),\n                                 cfg_options,\n                                 env,\n                                 proc_macro.clone(),\n@@ -546,7 +546,8 @@ fn sysroot_to_crate_graph(\n \n             let env = Env::default();\n             let proc_macro = vec![];\n-            let name = sysroot[krate].name.clone();\n+            let name = CrateName::new(&sysroot[krate].name)\n+                .expect(\"Sysroot crates' names do not contain dashes\");\n             let crate_id = crate_graph.add_crate_root(\n                 file_id,\n                 Edition::Edition2018,"}, {"sha": "d1d3b12f81687fd2127e54c10882f9394dc33c31", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/87cb840a4e140a49946235823384694da58c2a5a/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87cb840a4e140a49946235823384694da58c2a5a/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=87cb840a4e140a49946235823384694da58c2a5a", "patch": "@@ -36,11 +36,12 @@ pub fn diagnostics(path: &Path, load_output_dirs: bool, with_proc_macro: bool) -\n     for module in work {\n         let file_id = module.definition_source(db).file_id.original_file(db);\n         if !visited_files.contains(&file_id) {\n-            let crate_name = if let Some(name) = module.krate().display_name(db) {\n-                format!(\"{}\", name)\n-            } else {\n-                String::from(\"unknown\")\n-            };\n+            let crate_name = module\n+                .krate()\n+                .declaration_name(db)\n+                .as_ref()\n+                .map(ToString::to_string)\n+                .unwrap_or_else(|| \"unknown\".to_string());\n             println!(\"processing crate: {}, module: {}\", crate_name, _vfs.file_path(file_id));\n             for diagnostic in analysis.diagnostics(&DiagnosticsConfig::default(), file_id).unwrap()\n             {"}]}