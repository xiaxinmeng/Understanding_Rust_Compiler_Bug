{"sha": "43dabbf485b2aa2bd644580fefcae8a689d2836d", "node_id": "C_kwDOAAsO6NoAKDQzZGFiYmY0ODViMmFhMmJkNjQ0NTgwZmVmY2FlOGE2ODlkMjgzNmQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-05-12T14:41:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-12T14:41:01Z"}, "message": "Rollup merge of #95896 - nagisa:nvptx-contacts, r=Mark-Simulacrum\n\nNote the contacts for the nvptx64 target(s)\n\ncc `@RDambrosio016` `@kjetilkjeka`", "tree": {"sha": "552eb11902dcf6d16263f82a64889385e10044a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/552eb11902dcf6d16263f82a64889385e10044a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43dabbf485b2aa2bd644580fefcae8a689d2836d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJifRx9CRBK7hj4Ov3rIwAAgs0IAGDxX8TZFc9n6RRxKSFa1lCv\nDo24J29yaiBoFJVrG+9OKXV0f0jjMMlD4NzrmNjlvXT3zOp6FwM8mFfsmFJ6s0Wk\nZbFISXZ3Vg9DpGX9fF25gcB9nKmclp7ye9/BCHLrI+7Mv8LFSIVRms9zO4pmxjp9\nBGU6xdKVKN8YjNhaIOWxUclnoA577d4lcTDMNBiRpJ1nzrrGvCn/9tTR5fK8Jazn\nGasA19vIEzUOvWZw9clVbu0ljYS0NlpiXQ5J9WPr/hVUxtnOYvVBWwazDdFoLW1t\n7oaW48H7aqRRhyn9mT3PxV/CvSi7iGZGVPlB88bg6PNd3iKM333tBYmhFrVQitw=\n=sYhL\n-----END PGP SIGNATURE-----\n", "payload": "tree 552eb11902dcf6d16263f82a64889385e10044a9\nparent 18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb\nparent ab4675583f58572478fa6abf42557c8aab9a358b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1652366461 +0200\ncommitter GitHub <noreply@github.com> 1652366461 +0200\n\nRollup merge of #95896 - nagisa:nvptx-contacts, r=Mark-Simulacrum\n\nNote the contacts for the nvptx64 target(s)\n\ncc `@RDambrosio016` `@kjetilkjeka`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43dabbf485b2aa2bd644580fefcae8a689d2836d", "html_url": "https://github.com/rust-lang/rust/commit/43dabbf485b2aa2bd644580fefcae8a689d2836d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43dabbf485b2aa2bd644580fefcae8a689d2836d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb", "url": "https://api.github.com/repos/rust-lang/rust/commits/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb", "html_url": "https://github.com/rust-lang/rust/commit/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb"}, {"sha": "ab4675583f58572478fa6abf42557c8aab9a358b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab4675583f58572478fa6abf42557c8aab9a358b", "html_url": "https://github.com/rust-lang/rust/commit/ab4675583f58572478fa6abf42557c8aab9a358b"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "1af1410d4bb60ae54d9ecbdd320d27bf16478ba5", "filename": "src/doc/rustc/src/platform-support/nvptx64-nvidia-cuda.md", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/43dabbf485b2aa2bd644580fefcae8a689d2836d/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fnvptx64-nvidia-cuda.md", "raw_url": "https://github.com/rust-lang/rust/raw/43dabbf485b2aa2bd644580fefcae8a689d2836d/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fnvptx64-nvidia-cuda.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fnvptx64-nvidia-cuda.md?ref=43dabbf485b2aa2bd644580fefcae8a689d2836d", "patch": "@@ -0,0 +1,58 @@\n+# `nvptx64-nvidia-cuda`\n+\n+**Tier: 2**\n+\n+This is the target meant for deploying code for Nvidia\u00ae accelerators based on their CUDA\n+platform.\n+\n+## Target maintainers\n+\n+- Riccardo D'Ambrosio, https://github.com/RDambrosio016\n+- Kjetil Kjeka, https://github.com/kjetilkjeka\n+\n+<!-- FIXME: fill this out\n+\n+## Requirements\n+\n+Does the target support host tools, or only cross-compilation? Does the target\n+support std, or alloc (either with a default allocator, or if the user supplies\n+an allocator)?\n+\n+Document the expectations of binaries built for the target. Do they assume\n+specific minimum features beyond the baseline of the CPU/environment/etc? What\n+version of the OS or environment do they expect?\n+\n+Are there notable `#[target_feature(...)]` or `-C target-feature=` values that\n+programs may wish to use?\n+\n+What calling convention does `extern \"C\"` use on the target?\n+\n+What format do binaries use by default? ELF, PE, something else?\n+\n+## Building the target\n+\n+If Rust doesn't build the target by default, how can users build it? Can users\n+just add it to the `target` list in `config.toml`?\n+\n+## Building Rust programs\n+\n+Rust does not yet ship pre-compiled artifacts for this target. To compile for\n+this target, you will either need to build Rust with the target enabled (see\n+\"Building the target\" above), or build your own copy of `core` by using\n+`build-std` or similar.\n+\n+## Testing\n+\n+Does the target support running binaries, or do binaries have varying\n+expectations that prevent having a standard way to run them? If users can run\n+binaries, can they do so in some common emulator, or do they need native\n+hardware? Does the target support running the Rust testsuite?\n+\n+## Cross-compilation toolchains and C code\n+\n+Does the target support C code? If so, what toolchain target should users use\n+to build compatible C code? (This may match the target triple, or it may be a\n+toolchain for a different target triple, potentially with specific options or\n+caveats.)\n+\n+-->"}]}