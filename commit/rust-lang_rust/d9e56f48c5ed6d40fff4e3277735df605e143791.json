{"sha": "d9e56f48c5ed6d40fff4e3277735df605e143791", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZTU2ZjQ4YzVlZDZkNDBmZmY0ZTMyNzc3MzVkZjYwNWUxNDM3OTE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-29T00:17:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-29T00:17:20Z"}, "message": "Rollup merge of #79570 - alexcrichton:split-debuginfo, r=bjorn3\n\nrustc: Stabilize `-Zrun-dsymutil` as `-Csplit-debuginfo`\n\nThis commit adds a new stable codegen option to rustc,\n`-Csplit-debuginfo`. The old `-Zrun-dsymutil` flag is deleted and now\nsubsumed by this stable flag. Additionally `-Zsplit-dwarf` is also\nsubsumed by this flag but still requires `-Zunstable-options` to\nactually activate. The `-Csplit-debuginfo` flag takes one of\nthree values:\n\n* `off` - This indicates that split-debuginfo from the final artifact is\n  not desired. This is not supported on Windows and is the default on\n  Unix platforms except macOS. On macOS this means that `dsymutil` is\n  not executed.\n\n* `packed` - This means that debuginfo is desired in one location\n  separate from the main executable. This is the default on Windows\n  (`*.pdb`) and macOS (`*.dSYM`). On other Unix platforms this subsumes\n  `-Zsplit-dwarf=single` and produces a `*.dwp` file.\n\n* `unpacked` - This means that debuginfo will be roughly equivalent to\n  object files, meaning that it's throughout the build directory\n  rather than in one location (often the fastest for local development).\n  This is not the default on any platform and is not supported on Windows.\n\nEach target can indicate its own default preference for how debuginfo is\nhandled. Almost all platforms default to `off` except for Windows and\nmacOS which default to `packed` for historical reasons.\n\nSome equivalencies for previous unstable flags with the new flags are:\n\n* `-Zrun-dsymutil=yes` -> `-Csplit-debuginfo=packed`\n* `-Zrun-dsymutil=no` -> `-Csplit-debuginfo=unpacked`\n* `-Zsplit-dwarf=single` -> `-Csplit-debuginfo=packed`\n* `-Zsplit-dwarf=split` -> `-Csplit-debuginfo=unpacked`\n\nNote that `-Csplit-debuginfo` still requires `-Zunstable-options` for\nnon-macOS platforms since split-dwarf support was *just* implemented in\nrustc.\n\nThere's some more rationale listed on #79361, but the main gist of the\nmotivation for this commit is that `dsymutil` can take quite a long time\nto execute in debug builds and provides little benefit. This means that\nincremental compile times appear that much worse on macOS because the\ncompiler is constantly running `dsymutil` over every single binary it\nproduces during `cargo build` (even build scripts!). Ideally rustc would\nswitch to not running `dsymutil` by default, but that's a problem left\nto get tackled another day.\n\nCloses #79361", "tree": {"sha": "78998a3d58ffac6d7b306c08f0658e45b3ddd342", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78998a3d58ffac6d7b306c08f0658e45b3ddd342"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9e56f48c5ed6d40fff4e3277735df605e143791", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgE1QQCRBK7hj4Ov3rIwAAdHIIAG60qVPymXWyXnAGKz5YzdgJ\nIRU79iHBh9siQVM5r4zx7W+zmWRXr14GgYA428FWksLwoK71T8Jv0d4G/TVfYNM1\n9VvNtJmUffauH2BF3V6hOt4oWqKg+WNpGTc+++lz8tTx5/DMOc54NZG1U16dbTpc\n8+VRUsatVUe93TMG6erjuxcBRkUZdvOm7/FG4wc1cmhUyFu/vVMPWDhyDIOks45D\nwDFgLNG8Cm3Uwvb7f4XhEv9YG3eLv3dcMdHEIEtC+Yz418Ahcc36bce5ZfzoBLca\nXqL3/1RnV5E/T3TB/j7gGLlwo+Aw8ALznjQpBtTXGJxl9J4ub4Oh20cmUA0YERs=\n=l1vg\n-----END PGP SIGNATURE-----\n", "payload": "tree 78998a3d58ffac6d7b306c08f0658e45b3ddd342\nparent c0b64d97beebb09325b5587abed39f4f1621026f\nparent a124043fb019d46621c8b4b87dafb75d07cf78be\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1611879440 +0900\ncommitter GitHub <noreply@github.com> 1611879440 +0900\n\nRollup merge of #79570 - alexcrichton:split-debuginfo, r=bjorn3\n\nrustc: Stabilize `-Zrun-dsymutil` as `-Csplit-debuginfo`\n\nThis commit adds a new stable codegen option to rustc,\n`-Csplit-debuginfo`. The old `-Zrun-dsymutil` flag is deleted and now\nsubsumed by this stable flag. Additionally `-Zsplit-dwarf` is also\nsubsumed by this flag but still requires `-Zunstable-options` to\nactually activate. The `-Csplit-debuginfo` flag takes one of\nthree values:\n\n* `off` - This indicates that split-debuginfo from the final artifact is\n  not desired. This is not supported on Windows and is the default on\n  Unix platforms except macOS. On macOS this means that `dsymutil` is\n  not executed.\n\n* `packed` - This means that debuginfo is desired in one location\n  separate from the main executable. This is the default on Windows\n  (`*.pdb`) and macOS (`*.dSYM`). On other Unix platforms this subsumes\n  `-Zsplit-dwarf=single` and produces a `*.dwp` file.\n\n* `unpacked` - This means that debuginfo will be roughly equivalent to\n  object files, meaning that it's throughout the build directory\n  rather than in one location (often the fastest for local development).\n  This is not the default on any platform and is not supported on Windows.\n\nEach target can indicate its own default preference for how debuginfo is\nhandled. Almost all platforms default to `off` except for Windows and\nmacOS which default to `packed` for historical reasons.\n\nSome equivalencies for previous unstable flags with the new flags are:\n\n* `-Zrun-dsymutil=yes` -> `-Csplit-debuginfo=packed`\n* `-Zrun-dsymutil=no` -> `-Csplit-debuginfo=unpacked`\n* `-Zsplit-dwarf=single` -> `-Csplit-debuginfo=packed`\n* `-Zsplit-dwarf=split` -> `-Csplit-debuginfo=unpacked`\n\nNote that `-Csplit-debuginfo` still requires `-Zunstable-options` for\nnon-macOS platforms since split-dwarf support was *just* implemented in\nrustc.\n\nThere's some more rationale listed on #79361, but the main gist of the\nmotivation for this commit is that `dsymutil` can take quite a long time\nto execute in debug builds and provides little benefit. This means that\nincremental compile times appear that much worse on macOS because the\ncompiler is constantly running `dsymutil` over every single binary it\nproduces during `cargo build` (even build scripts!). Ideally rustc would\nswitch to not running `dsymutil` by default, but that's a problem left\nto get tackled another day.\n\nCloses #79361\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9e56f48c5ed6d40fff4e3277735df605e143791", "html_url": "https://github.com/rust-lang/rust/commit/d9e56f48c5ed6d40fff4e3277735df605e143791", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9e56f48c5ed6d40fff4e3277735df605e143791/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0b64d97beebb09325b5587abed39f4f1621026f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0b64d97beebb09325b5587abed39f4f1621026f", "html_url": "https://github.com/rust-lang/rust/commit/c0b64d97beebb09325b5587abed39f4f1621026f"}, {"sha": "a124043fb019d46621c8b4b87dafb75d07cf78be", "url": "https://api.github.com/repos/rust-lang/rust/commits/a124043fb019d46621c8b4b87dafb75d07cf78be", "html_url": "https://github.com/rust-lang/rust/commit/a124043fb019d46621c8b4b87dafb75d07cf78be"}], "stats": {"total": 486, "additions": 352, "deletions": 134}, "files": [{"sha": "5effe687528082ce2e9634c9b4390e811e1f96d4", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=d9e56f48c5ed6d40fff4e3277735df605e143791", "patch": "@@ -732,10 +732,7 @@ pub unsafe fn optimize_thin_module(\n     let diag_handler = cgcx.create_diag_handler();\n \n     let module_name = &thin_module.shared.module_names[thin_module.idx];\n-    let split_dwarf_file = cgcx\n-        .output_filenames\n-        .split_dwarf_filename(cgcx.split_dwarf_kind, Some(module_name.to_str().unwrap()));\n-    let tm_factory_config = TargetMachineFactoryConfig { split_dwarf_file };\n+    let tm_factory_config = TargetMachineFactoryConfig::new(cgcx, module_name.to_str().unwrap());\n     let tm =\n         (cgcx.tm_factory)(tm_factory_config).map_err(|e| write::llvm_err(&diag_handler, &e))?;\n "}, {"sha": "326ae354ccf485db1cd8b782eb8271d17e72d338", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=d9e56f48c5ed6d40fff4e3277735df605e143791", "patch": "@@ -23,13 +23,11 @@ use rustc_fs_util::{link_or_copy, path_to_c_string};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::{\n-    self, Lto, OutputType, Passes, SanitizerSet, SplitDwarfKind, SwitchWithOptPath,\n-};\n+use rustc_session::config::{self, Lto, OutputType, Passes, SanitizerSet, SwitchWithOptPath};\n use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::InnerSpan;\n-use rustc_target::spec::{CodeModel, RelocModel};\n+use rustc_target::spec::{CodeModel, RelocModel, SplitDebuginfo};\n use tracing::debug;\n \n use libc::{c_char, c_int, c_uint, c_void, size_t};\n@@ -93,9 +91,12 @@ pub fn create_informational_target_machine(sess: &Session) -> &'static mut llvm:\n }\n \n pub fn create_target_machine(tcx: TyCtxt<'_>, mod_name: &str) -> &'static mut llvm::TargetMachine {\n-    let split_dwarf_file = tcx\n-        .output_filenames(LOCAL_CRATE)\n-        .split_dwarf_filename(tcx.sess.opts.debugging_opts.split_dwarf, Some(mod_name));\n+    let split_dwarf_file = if tcx.sess.target_can_use_split_dwarf() {\n+        tcx.output_filenames(LOCAL_CRATE)\n+            .split_dwarf_filename(tcx.sess.split_debuginfo(), Some(mod_name))\n+    } else {\n+        None\n+    };\n     let config = TargetMachineFactoryConfig { split_dwarf_file };\n     target_machine_factory(&tcx.sess, tcx.backend_optimization_level(LOCAL_CRATE))(config)\n         .unwrap_or_else(|err| llvm_err(tcx.sess.diagnostic(), &err).raise())\n@@ -838,11 +839,17 @@ pub(crate) unsafe fn codegen(\n                     .generic_activity_with_arg(\"LLVM_module_codegen_emit_obj\", &module.name[..]);\n \n                 let dwo_out = cgcx.output_filenames.temp_path_dwo(module_name);\n-                let dwo_out = match cgcx.split_dwarf_kind {\n+                let dwo_out = match cgcx.split_debuginfo {\n                     // Don't change how DWARF is emitted in single mode (or when disabled).\n-                    SplitDwarfKind::None | SplitDwarfKind::Single => None,\n+                    SplitDebuginfo::Off | SplitDebuginfo::Packed => None,\n                     // Emit (a subset of the) DWARF into a separate file in split mode.\n-                    SplitDwarfKind::Split => Some(dwo_out.as_path()),\n+                    SplitDebuginfo::Unpacked => {\n+                        if cgcx.target_can_use_split_dwarf {\n+                            Some(dwo_out.as_path())\n+                        } else {\n+                            None\n+                        }\n+                    }\n                 };\n \n                 with_codegen(tm, llmod, config.no_builtins, |cpm| {\n@@ -880,7 +887,7 @@ pub(crate) unsafe fn codegen(\n \n     Ok(module.into_compiled_module(\n         config.emit_obj != EmitObj::None,\n-        cgcx.split_dwarf_kind == SplitDwarfKind::Split,\n+        cgcx.target_can_use_split_dwarf && cgcx.split_debuginfo == SplitDebuginfo::Unpacked,\n         config.emit_bc,\n         &cgcx.output_filenames,\n     ))"}, {"sha": "6e7c0b3e3478abb14d94413c215b4f7ffa960519", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=d9e56f48c5ed6d40fff4e3277735df605e143791", "patch": "@@ -995,10 +995,13 @@ pub fn compile_unit_metadata(\n     let flags = \"\\0\";\n \n     let out_dir = &tcx.output_filenames(LOCAL_CRATE).out_directory;\n-    let split_name = tcx\n-        .output_filenames(LOCAL_CRATE)\n-        .split_dwarf_filename(tcx.sess.opts.debugging_opts.split_dwarf, Some(codegen_unit_name))\n-        .unwrap_or_default();\n+    let split_name = if tcx.sess.target_can_use_split_dwarf() {\n+        tcx.output_filenames(LOCAL_CRATE)\n+            .split_dwarf_filename(tcx.sess.split_debuginfo(), Some(codegen_unit_name))\n+    } else {\n+        None\n+    }\n+    .unwrap_or_default();\n     let out_dir = out_dir.to_str().unwrap();\n     let split_name = split_name.to_str().unwrap();\n "}, {"sha": "d11c1592f99d125604ff5e44da95268b24cfcac0", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=d9e56f48c5ed6d40fff4e3277735df605e143791", "patch": "@@ -351,12 +351,7 @@ impl ModuleLlvm {\n         unsafe {\n             let llcx = llvm::LLVMRustContextCreate(cgcx.fewer_names);\n             let llmod_raw = back::lto::parse_module(llcx, name, buffer, handler)?;\n-\n-            let split_dwarf_file = cgcx\n-                .output_filenames\n-                .split_dwarf_filename(cgcx.split_dwarf_kind, Some(name.to_str().unwrap()));\n-            let tm_factory_config = TargetMachineFactoryConfig { split_dwarf_file };\n-\n+            let tm_factory_config = TargetMachineFactoryConfig::new(&cgcx, name.to_str().unwrap());\n             let tm = match (cgcx.tm_factory)(tm_factory_config) {\n                 Ok(m) => m,\n                 Err(e) => {"}, {"sha": "0738b2df71e0c267113b132634016d54c24d4e2d", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 38, "deletions": 46, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=d9e56f48c5ed6d40fff4e3277735df605e143791", "patch": "@@ -14,7 +14,7 @@ use rustc_session::utils::NativeLibKind;\n use rustc_session::{filesearch, Session};\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::crt_objects::{CrtObjects, CrtObjectsFallback};\n-use rustc_target::spec::{LinkOutputKind, LinkerFlavor, LldFlavor};\n+use rustc_target::spec::{LinkOutputKind, LinkerFlavor, LldFlavor, SplitDebuginfo};\n use rustc_target::spec::{PanicStrategy, RelocModel, RelroLevel, Target};\n \n use super::archive::ArchiveBuilder;\n@@ -99,9 +99,6 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n                         path.as_ref(),\n                         target_cpu,\n                     );\n-                    if sess.opts.debugging_opts.split_dwarf == config::SplitDwarfKind::Split {\n-                        link_dwarf_object(sess, &out_filename);\n-                    }\n                 }\n             }\n             if sess.opts.json_artifact_notifications {\n@@ -828,29 +825,43 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n         }\n     }\n \n-    // On macOS, debuggers need this utility to get run to do some munging of\n-    // the symbols. Note, though, that if the object files are being preserved\n-    // for their debug information there's no need for us to run dsymutil.\n-    if sess.target.is_like_osx\n-        && sess.opts.debuginfo != DebugInfo::None\n-        && !preserve_objects_for_their_debuginfo(sess)\n-    {\n-        let prog = Command::new(\"dsymutil\").arg(out_filename).output();\n-        match prog {\n-            Ok(prog) => {\n-                if !prog.status.success() {\n-                    let mut output = prog.stderr.clone();\n-                    output.extend_from_slice(&prog.stdout);\n-                    sess.struct_warn(&format!(\n-                        \"processing debug info with `dsymutil` failed: {}\",\n-                        prog.status\n-                    ))\n-                    .note(&escape_string(&output))\n-                    .emit();\n+    match sess.split_debuginfo() {\n+        // If split debug information is disabled or located in individual files\n+        // there's nothing to do here.\n+        SplitDebuginfo::Off | SplitDebuginfo::Unpacked => {}\n+\n+        // If packed split-debuginfo is requested, but the final compilation\n+        // doesn't actually have any debug information, then we skip this step.\n+        SplitDebuginfo::Packed if sess.opts.debuginfo == DebugInfo::None => {}\n+\n+        // On macOS the external `dsymutil` tool is used to create the packed\n+        // debug information. Note that this will read debug information from\n+        // the objects on the filesystem which we'll clean up later.\n+        SplitDebuginfo::Packed if sess.target.is_like_osx => {\n+            let prog = Command::new(\"dsymutil\").arg(out_filename).output();\n+            match prog {\n+                Ok(prog) => {\n+                    if !prog.status.success() {\n+                        let mut output = prog.stderr.clone();\n+                        output.extend_from_slice(&prog.stdout);\n+                        sess.struct_warn(&format!(\n+                            \"processing debug info with `dsymutil` failed: {}\",\n+                            prog.status\n+                        ))\n+                        .note(&escape_string(&output))\n+                        .emit();\n+                    }\n                 }\n+                Err(e) => sess.fatal(&format!(\"unable to run `dsymutil`: {}\", e)),\n             }\n-            Err(e) => sess.fatal(&format!(\"unable to run `dsymutil`: {}\", e)),\n         }\n+\n+        // On MSVC packed debug information is produced by the linker itself so\n+        // there's no need to do anything else here.\n+        SplitDebuginfo::Packed if sess.target.is_like_msvc => {}\n+\n+        // ... and otherwise we're processing a `*.dwp` packed dwarf file.\n+        SplitDebuginfo::Packed => link_dwarf_object(sess, &out_filename),\n     }\n }\n \n@@ -1050,28 +1061,9 @@ fn preserve_objects_for_their_debuginfo(sess: &Session) -> bool {\n         return false;\n     }\n \n-    // Single mode keeps debuginfo in the same object file, but in such a way that it it skipped\n-    // by the linker - so it's expected that when codegen units are linked together that this\n-    // debuginfo would be lost without keeping around the temps.\n-    if sess.opts.debugging_opts.split_dwarf == config::SplitDwarfKind::Single {\n-        return true;\n-    }\n-\n-    // If we're on OSX then the equivalent of split dwarf is turned on by\n-    // default. The final executable won't actually have any debug information\n-    // except it'll have pointers to elsewhere. Historically we've always run\n-    // `dsymutil` to \"link all the dwarf together\" but this is actually sort of\n-    // a bummer for incremental compilation! (the whole point of split dwarf is\n-    // that you don't do this sort of dwarf link).\n-    //\n-    // Basically as a result this just means that if we're on OSX and we're\n-    // *not* running dsymutil then the object files are the only source of truth\n-    // for debug information, so we must preserve them.\n-    if sess.target.is_like_osx {\n-        return !sess.opts.debugging_opts.run_dsymutil;\n-    }\n-\n-    false\n+    // \"unpacked\" split debuginfo means that we leave object files as the\n+    // debuginfo is found in the original object files themselves\n+    sess.split_debuginfo() == SplitDebuginfo::Unpacked\n }\n \n pub fn archive_search_paths(sess: &Session) -> Vec<PathBuf> {"}, {"sha": "6aef5cb535a1f47d11e81129cef37bec77f17863", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=d9e56f48c5ed6d40fff4e3277735df605e143791", "patch": "@@ -282,6 +282,20 @@ pub struct TargetMachineFactoryConfig {\n     pub split_dwarf_file: Option<PathBuf>,\n }\n \n+impl TargetMachineFactoryConfig {\n+    pub fn new(\n+        cgcx: &CodegenContext<impl WriteBackendMethods>,\n+        module_name: &str,\n+    ) -> TargetMachineFactoryConfig {\n+        let split_dwarf_file = if cgcx.target_can_use_split_dwarf {\n+            cgcx.output_filenames.split_dwarf_filename(cgcx.split_debuginfo, Some(module_name))\n+        } else {\n+            None\n+        };\n+        TargetMachineFactoryConfig { split_dwarf_file }\n+    }\n+}\n+\n pub type TargetMachineFactoryFn<B> = Arc<\n     dyn Fn(TargetMachineFactoryConfig) -> Result<<B as WriteBackendMethods>::TargetMachine, String>\n         + Send\n@@ -311,10 +325,11 @@ pub struct CodegenContext<B: WriteBackendMethods> {\n     pub tm_factory: TargetMachineFactoryFn<B>,\n     pub msvc_imps_needed: bool,\n     pub is_pe_coff: bool,\n+    pub target_can_use_split_dwarf: bool,\n     pub target_pointer_width: u32,\n     pub target_arch: String,\n     pub debuginfo: config::DebugInfo,\n-    pub split_dwarf_kind: config::SplitDwarfKind,\n+    pub split_debuginfo: rustc_target::spec::SplitDebuginfo,\n \n     // Number of cgus excluding the allocator/metadata modules\n     pub total_cgus: usize,\n@@ -1035,10 +1050,11 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         total_cgus,\n         msvc_imps_needed: msvc_imps_needed(tcx),\n         is_pe_coff: tcx.sess.target.is_like_windows,\n+        target_can_use_split_dwarf: tcx.sess.target_can_use_split_dwarf(),\n         target_pointer_width: tcx.sess.target.pointer_width,\n         target_arch: tcx.sess.target.arch.clone(),\n         debuginfo: tcx.sess.opts.debuginfo,\n-        split_dwarf_kind: tcx.sess.opts.debugging_opts.split_dwarf,\n+        split_debuginfo: tcx.sess.split_debuginfo(),\n     };\n \n     // This is the \"main loop\" of parallel work happening for parallel codegen."}, {"sha": "305ae23669bbf2d79b3dc2635d00fac38fc3a81c", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=d9e56f48c5ed6d40fff4e3277735df605e143791", "patch": "@@ -17,7 +17,7 @@ use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::symbol::sym;\n use rustc_span::SourceFileHashAlgorithm;\n use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy};\n-use rustc_target::spec::{RelocModel, RelroLevel, TlsModel};\n+use rustc_target::spec::{RelocModel, RelroLevel, SplitDebuginfo, TlsModel};\n use std::collections::{BTreeMap, BTreeSet};\n use std::iter::FromIterator;\n use std::path::PathBuf;\n@@ -446,6 +446,7 @@ fn test_codegen_options_tracking_hash() {\n     tracked!(profile_use, Some(PathBuf::from(\"abc\")));\n     tracked!(relocation_model, Some(RelocModel::Pic));\n     tracked!(soft_float, true);\n+    tracked!(split_debuginfo, Some(SplitDebuginfo::Packed));\n     tracked!(target_cpu, Some(String::from(\"abc\")));\n     tracked!(target_feature, String::from(\"all the features, all of them\"));\n }\n@@ -579,7 +580,6 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(relax_elf_relocations, Some(true));\n     tracked!(relro_level, Some(RelroLevel::Full));\n     tracked!(report_delayed_bugs, true);\n-    tracked!(run_dsymutil, false);\n     tracked!(sanitizer, SanitizerSet::ADDRESS);\n     tracked!(sanitizer_memory_track_origins, 2);\n     tracked!(sanitizer_recover, SanitizerSet::ADDRESS);"}, {"sha": "f9e40919149d97d89e394a55d5aef4193f58c557", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 19, "deletions": 26, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=d9e56f48c5ed6d40fff4e3277735df605e143791", "patch": "@@ -13,7 +13,7 @@ use rustc_data_structures::impl_stable_hash_via_hash;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n \n use rustc_target::abi::{Align, TargetDataLayout};\n-use rustc_target::spec::{Target, TargetTriple};\n+use rustc_target::spec::{SplitDebuginfo, Target, TargetTriple};\n \n use crate::parse::CrateConfig;\n use rustc_feature::UnstableFeatures;\n@@ -221,23 +221,6 @@ pub enum DebugInfo {\n     Full,\n }\n \n-/// Some debuginfo requires link-time relocation and some does not. LLVM can partition the debuginfo\n-/// into sections depending on whether or not it requires link-time relocation. Split DWARF\n-/// provides a mechanism which allows the linker to skip the sections which don't require link-time\n-/// relocation - either by putting those sections into DWARF object files, or keeping them in the\n-/// object file in such a way that the linker will skip them.\n-#[derive(Clone, Copy, Debug, PartialEq, Hash)]\n-pub enum SplitDwarfKind {\n-    /// Disabled.\n-    None,\n-    /// Sections which do not require relocation are written into the object file but ignored\n-    /// by the linker.\n-    Single,\n-    /// Sections which do not require relocation are written into a DWARF object (`.dwo`) file,\n-    /// which is skipped by the linker by virtue of being a different file.\n-    Split,\n-}\n-\n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, PartialOrd, Ord)]\n #[derive(Encodable, Decodable)]\n pub enum OutputType {\n@@ -635,30 +618,30 @@ impl OutputFilenames {\n     /// mode is being used, which is the logic that this function is intended to encapsulate.\n     pub fn split_dwarf_filename(\n         &self,\n-        split_dwarf_kind: SplitDwarfKind,\n+        split_debuginfo_kind: SplitDebuginfo,\n         cgu_name: Option<&str>,\n     ) -> Option<PathBuf> {\n-        self.split_dwarf_path(split_dwarf_kind, cgu_name)\n+        self.split_dwarf_path(split_debuginfo_kind, cgu_name)\n             .map(|path| path.strip_prefix(&self.out_directory).unwrap_or(&path).to_path_buf())\n     }\n \n     /// Returns the path for the Split DWARF file - this can differ depending on which Split DWARF\n     /// mode is being used, which is the logic that this function is intended to encapsulate.\n     pub fn split_dwarf_path(\n         &self,\n-        split_dwarf_kind: SplitDwarfKind,\n+        split_debuginfo_kind: SplitDebuginfo,\n         cgu_name: Option<&str>,\n     ) -> Option<PathBuf> {\n         let obj_out = self.temp_path(OutputType::Object, cgu_name);\n         let dwo_out = self.temp_path_dwo(cgu_name);\n-        match split_dwarf_kind {\n-            SplitDwarfKind::None => None,\n+        match split_debuginfo_kind {\n+            SplitDebuginfo::Off => None,\n             // Single mode doesn't change how DWARF is emitted, but does add Split DWARF attributes\n             // (pointing at the path which is being determined here). Use the path to the current\n             // object file.\n-            SplitDwarfKind::Single => Some(obj_out),\n+            SplitDebuginfo::Packed => Some(obj_out),\n             // Split mode emits the DWARF into a different file, use that path.\n-            SplitDwarfKind::Split => Some(dwo_out),\n+            SplitDebuginfo::Unpacked => Some(dwo_out),\n         }\n     }\n }\n@@ -1910,6 +1893,15 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let pretty = parse_pretty(matches, &debugging_opts, error_format);\n \n+    if !debugging_opts.unstable_options\n+        && !target_triple.triple().contains(\"apple\")\n+        && cg.split_debuginfo.is_some()\n+    {\n+        {\n+            early_error(error_format, \"`-Csplit-debuginfo` is unstable on this platform\");\n+        }\n+    }\n+\n     Options {\n         crate_types,\n         optimize: opt_level,\n@@ -2191,7 +2183,7 @@ crate mod dep_tracking {\n     use rustc_feature::UnstableFeatures;\n     use rustc_span::edition::Edition;\n     use rustc_target::spec::{CodeModel, MergeFunctions, PanicStrategy, RelocModel};\n-    use rustc_target::spec::{RelroLevel, TargetTriple, TlsModel};\n+    use rustc_target::spec::{RelroLevel, SplitDebuginfo, TargetTriple, TlsModel};\n     use std::collections::hash_map::DefaultHasher;\n     use std::collections::BTreeMap;\n     use std::hash::Hash;\n@@ -2263,6 +2255,7 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(TargetTriple);\n     impl_dep_tracking_hash_via_hash!(Edition);\n     impl_dep_tracking_hash_via_hash!(LinkerPluginLto);\n+    impl_dep_tracking_hash_via_hash!(Option<SplitDebuginfo>);\n     impl_dep_tracking_hash_via_hash!(SwitchWithOptPath);\n     impl_dep_tracking_hash_via_hash!(Option<SymbolManglingVersion>);\n     impl_dep_tracking_hash_via_hash!(Option<SourceFileHashAlgorithm>);"}, {"sha": "2aaab84585d073614d76f6fccafed8ad17ae54cb", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=d9e56f48c5ed6d40fff4e3277735df605e143791", "patch": "@@ -6,7 +6,7 @@ use crate::search_paths::SearchPath;\n use crate::utils::NativeLibKind;\n \n use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy};\n-use rustc_target::spec::{RelocModel, RelroLevel, TargetTriple, TlsModel};\n+use rustc_target::spec::{RelocModel, RelroLevel, SplitDebuginfo, TargetTriple, TlsModel};\n \n use rustc_feature::UnstableFeatures;\n use rustc_span::edition::Edition;\n@@ -269,7 +269,6 @@ macro_rules! options {\n         pub const parse_switch_with_opt_path: &str =\n             \"an optional path to the profiling data output directory\";\n         pub const parse_merge_functions: &str = \"one of: `disabled`, `trampolines`, or `aliases`\";\n-        pub const parse_split_dwarf_kind: &str = \"one of: `none`, `single` or `split`\";\n         pub const parse_symbol_mangling_version: &str = \"either `legacy` or `v0` (RFC 2603)\";\n         pub const parse_src_file_hash: &str = \"either `md5` or `sha1`\";\n         pub const parse_relocation_model: &str =\n@@ -280,6 +279,8 @@ macro_rules! options {\n             \"one of supported TLS models (`rustc --print tls-models`)\";\n         pub const parse_target_feature: &str = parse_string;\n         pub const parse_wasi_exec_model: &str = \"either `command` or `reactor`\";\n+        pub const parse_split_debuginfo: &str =\n+            \"one of supported split-debuginfo modes (`off` or `dsymutil`)\";\n     }\n \n     #[allow(dead_code)]\n@@ -678,19 +679,6 @@ macro_rules! options {\n             true\n         }\n \n-        fn parse_split_dwarf_kind(\n-            slot: &mut SplitDwarfKind,\n-            v: Option<&str>,\n-        ) -> bool {\n-            *slot = match v {\n-                Some(\"none\") => SplitDwarfKind::None,\n-                Some(\"split\") => SplitDwarfKind::Split,\n-                Some(\"single\") => SplitDwarfKind::Single,\n-                _ => return false,\n-            };\n-            true\n-        }\n-\n         fn parse_symbol_mangling_version(\n             slot: &mut Option<SymbolManglingVersion>,\n             v: Option<&str>,\n@@ -732,6 +720,14 @@ macro_rules! options {\n             }\n             true\n         }\n+\n+        fn parse_split_debuginfo(slot: &mut Option<SplitDebuginfo>, v: Option<&str>) -> bool {\n+            match v.and_then(|s| SplitDebuginfo::from_str(s).ok()) {\n+                Some(e) => *slot = Some(e),\n+                _ => return false,\n+            }\n+            true\n+        }\n     }\n ) }\n \n@@ -830,6 +826,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"save all temporary output files during compilation (default: no)\"),\n     soft_float: bool = (false, parse_bool, [TRACKED],\n         \"use soft float ABI (*eabihf targets only) (default: no)\"),\n+    split_debuginfo: Option<SplitDebuginfo> = (None, parse_split_debuginfo, [TRACKED],\n+        \"how to handle split-debuginfo, a platform-specific option\"),\n     target_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"select target processor (`rustc --print target-cpus` for details)\"),\n     target_feature: String = (String::new(), parse_target_feature, [TRACKED],\n@@ -1073,11 +1071,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"choose which RELRO level to use\"),\n     report_delayed_bugs: bool = (false, parse_bool, [TRACKED],\n         \"immediately print bugs registered with `delay_span_bug` (default: no)\"),\n-    // The default historical behavior was to always run dsymutil, so we're\n-    // preserving that temporarily, but we're likely to switch the default\n-    // soon.\n-    run_dsymutil: bool = (true, parse_bool, [TRACKED],\n-        \"if on Mac, run `dsymutil` and delete intermediate object files (default: yes)\"),\n     sanitizer: SanitizerSet = (SanitizerSet::empty(), parse_sanitizers, [TRACKED],\n         \"use a sanitizer\"),\n     sanitizer_memory_track_origins: usize = (0, parse_sanitizer_memory_track_origins, [TRACKED],\n@@ -1112,8 +1105,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"hash algorithm of source files in debug info (`md5`, `sha1`, or `sha256`)\"),\n     strip: Strip = (Strip::None, parse_strip, [UNTRACKED],\n         \"tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)\"),\n-    split_dwarf: SplitDwarfKind = (SplitDwarfKind::None, parse_split_dwarf_kind, [UNTRACKED],\n-        \"enable generation of split dwarf\"),\n     split_dwarf_inlining: bool = (true, parse_bool, [UNTRACKED],\n         \"provide minimal debug info in the object/executable to facilitate online \\\n          symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\"),"}, {"sha": "dad21e59502de2ca7f239b96d323af377992457e", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=d9e56f48c5ed6d40fff4e3277735df605e143791", "patch": "@@ -28,7 +28,7 @@ use rustc_span::source_map::{FileLoader, MultiSpan, RealFileLoader, SourceMap, S\n use rustc_span::{sym, SourceFileHashAlgorithm, Symbol};\n use rustc_target::asm::InlineAsmArch;\n use rustc_target::spec::{CodeModel, PanicStrategy, RelocModel, RelroLevel};\n-use rustc_target::spec::{Target, TargetTriple, TlsModel};\n+use rustc_target::spec::{SplitDebuginfo, Target, TargetTriple, TlsModel};\n \n use std::cell::{self, RefCell};\n use std::env;\n@@ -804,6 +804,14 @@ impl Session {\n             )\n     }\n \n+    pub fn split_debuginfo(&self) -> SplitDebuginfo {\n+        self.opts.cg.split_debuginfo.unwrap_or(self.target.split_debuginfo)\n+    }\n+\n+    pub fn target_can_use_split_dwarf(&self) -> bool {\n+        !self.target.is_like_windows && !self.target.is_like_osx\n+    }\n+\n     pub fn must_not_eliminate_frame_pointers(&self) -> bool {\n         // \"mcount\" function relies on stack pointer.\n         // See <https://sourceware.org/binutils/docs/gprof/Implementation.html>."}, {"sha": "3b458962b3d07f47d69dc10eaec9224585c2ae87", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=d9e56f48c5ed6d40fff4e3277735df605e143791", "patch": "@@ -1,6 +1,6 @@\n use std::env;\n \n-use crate::spec::{LinkArgs, TargetOptions};\n+use crate::spec::{LinkArgs, SplitDebuginfo, TargetOptions};\n \n pub fn opts(os: &str) -> TargetOptions {\n     // ELF TLS is only available in macOS 10.7+. If you try to compile for 10.6\n@@ -36,6 +36,10 @@ pub fn opts(os: &str) -> TargetOptions {\n         emit_debug_gdb_scripts: false,\n         eh_frame_header: false,\n \n+        // The historical default for macOS targets is to run `dsymutil` which\n+        // generates a packed version of debuginfo split from the main file.\n+        split_debuginfo: SplitDebuginfo::Packed,\n+\n         // This environment variable is pretty magical but is intended for\n         // producing deterministic builds. This was first discovered to be used\n         // by the `ar` tool as a way to control whether or not mtime entries in"}, {"sha": "0227febd294a0c3cdbd04f50a582c9794acc7f23", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=d9e56f48c5ed6d40fff4e3277735df605e143791", "patch": "@@ -448,6 +448,69 @@ impl fmt::Display for LinkOutputKind {\n \n pub type LinkArgs = BTreeMap<LinkerFlavor, Vec<String>>;\n \n+#[derive(Clone, Copy, Hash, Debug, PartialEq, Eq)]\n+pub enum SplitDebuginfo {\n+    /// Split debug-information is disabled, meaning that on supported platforms\n+    /// you can find all debug information in the executable itself. This is\n+    /// only supported for ELF effectively.\n+    ///\n+    /// * Windows - not supported\n+    /// * macOS - don't run `dsymutil`\n+    /// * ELF - `.dwarf_*` sections\n+    Off,\n+\n+    /// Split debug-information can be found in a \"packed\" location separate\n+    /// from the final artifact. This is supported on all platforms.\n+    ///\n+    /// * Windows - `*.pdb`\n+    /// * macOS - `*.dSYM` (run `dsymutil`)\n+    /// * ELF - `*.dwp` (run `rust-llvm-dwp`)\n+    Packed,\n+\n+    /// Split debug-information can be found in individual object files on the\n+    /// filesystem. The main executable may point to the object files.\n+    ///\n+    /// * Windows - not supported\n+    /// * macOS - supported, scattered object files\n+    /// * ELF - supported, scattered `*.dwo` files\n+    Unpacked,\n+}\n+\n+impl SplitDebuginfo {\n+    fn as_str(&self) -> &'static str {\n+        match self {\n+            SplitDebuginfo::Off => \"off\",\n+            SplitDebuginfo::Packed => \"packed\",\n+            SplitDebuginfo::Unpacked => \"unpacked\",\n+        }\n+    }\n+}\n+\n+impl FromStr for SplitDebuginfo {\n+    type Err = ();\n+\n+    fn from_str(s: &str) -> Result<SplitDebuginfo, ()> {\n+        Ok(match s {\n+            \"off\" => SplitDebuginfo::Off,\n+            \"unpacked\" => SplitDebuginfo::Unpacked,\n+            \"packed\" => SplitDebuginfo::Packed,\n+            _ => return Err(()),\n+        })\n+    }\n+}\n+\n+impl ToJson for SplitDebuginfo {\n+    fn to_json(&self) -> Json {\n+        self.as_str().to_json()\n+    }\n+}\n+\n+impl fmt::Display for SplitDebuginfo {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.write_str(self.as_str())\n+    }\n+}\n+\n macro_rules! supported_targets {\n     ( $(($( $triple:literal, )+ $module:ident ),)+ ) => {\n         $(mod $module;)+\n@@ -1085,6 +1148,10 @@ pub struct TargetOptions {\n     /// Is true if the target is an ARM architecture using thumb v1 which allows for\n     /// thumb and arm interworking.\n     pub has_thumb_interworking: bool,\n+\n+    /// How to handle split debug information, if at all. Specifying `None` has\n+    /// target-specific meaning.\n+    pub split_debuginfo: SplitDebuginfo,\n }\n \n impl Default for TargetOptions {\n@@ -1184,6 +1251,7 @@ impl Default for TargetOptions {\n             use_ctors_section: false,\n             eh_frame_header: true,\n             has_thumb_interworking: false,\n+            split_debuginfo: SplitDebuginfo::Off,\n         }\n     }\n }\n@@ -1382,6 +1450,18 @@ impl Target {\n                     Some(Ok(()))\n                 })).unwrap_or(Ok(()))\n             } );\n+            ($key_name:ident, SplitDebuginfo) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                    match s.parse::<SplitDebuginfo>() {\n+                        Ok(level) => base.$key_name = level,\n+                        _ => return Some(Err(format!(\"'{}' is not a valid value for \\\n+                                                      split-debuginfo. Use 'off' or 'dsymutil'.\",\n+                                                      s))),\n+                    }\n+                    Some(Ok(()))\n+                })).unwrap_or(Ok(()))\n+            } );\n             ($key_name:ident, list) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(v) = obj.find(&name).and_then(Json::as_array) {\n@@ -1627,6 +1707,7 @@ impl Target {\n         key!(use_ctors_section, bool);\n         key!(eh_frame_header, bool);\n         key!(has_thumb_interworking, bool);\n+        key!(split_debuginfo, SplitDebuginfo)?;\n \n         // NB: The old name is deprecated, but support for it is retained for\n         // compatibility.\n@@ -1862,6 +1943,7 @@ impl ToJson for Target {\n         target_option_val!(use_ctors_section);\n         target_option_val!(eh_frame_header);\n         target_option_val!(has_thumb_interworking);\n+        target_option_val!(split_debuginfo);\n \n         if default.unsupported_abis != self.unsupported_abis {\n             d.insert("}, {"sha": "39c0d5f0bb4ff324af35da9b6329f499f7fa57cf", "filename": "compiler/rustc_target/src/spec/msvc_base.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e56f48c5ed6d40fff4e3277735df605e143791/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs?ref=d9e56f48c5ed6d40fff4e3277735df605e143791", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n+use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, SplitDebuginfo, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let pre_link_args_msvc = vec![\n@@ -27,6 +27,10 @@ pub fn opts() -> TargetOptions {\n         abi_return_struct_as_int: true,\n         emit_debug_gdb_scripts: false,\n \n+        // Currently this is the only supported method of debuginfo on MSVC\n+        // where `*.pdb` files show up next to the final artifact.\n+        split_debuginfo: SplitDebuginfo::Packed,\n+\n         ..Default::default()\n     }\n }"}, {"sha": "2f655e3b396f16175906d59180ed811983ccc7e7", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d9e56f48c5ed6d40fff4e3277735df605e143791/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e56f48c5ed6d40fff4e3277735df605e143791/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=d9e56f48c5ed6d40fff4e3277735df605e143791", "patch": "@@ -1139,10 +1139,18 @@ impl<'a> Builder<'a> {\n         // itself, we skip it by default since we know it's safe to do so in that case.\n         // See https://github.com/rust-lang/rust/issues/79361 for more info on this flag.\n         if target.contains(\"apple\") {\n-            if self.config.rust_run_dsymutil {\n-                rustflags.arg(\"-Zrun-dsymutil=yes\");\n+            if stage == 0 {\n+                if self.config.rust_run_dsymutil {\n+                    rustflags.arg(\"-Zrun-dsymutil=yes\");\n+                } else {\n+                    rustflags.arg(\"-Zrun-dsymutil=no\");\n+                }\n             } else {\n-                rustflags.arg(\"-Zrun-dsymutil=no\");\n+                if self.config.rust_run_dsymutil {\n+                    rustflags.arg(\"-Csplit-debuginfo=packed\");\n+                } else {\n+                    rustflags.arg(\"-Csplit-debuginfo=unpacked\");\n+                }\n             }\n         }\n "}, {"sha": "51e7d987d9d82c36c1cfc45faa6d14a60cd4fd82", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d9e56f48c5ed6d40fff4e3277735df605e143791/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/d9e56f48c5ed6d40fff4e3277735df605e143791/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=d9e56f48c5ed6d40fff4e3277735df605e143791", "patch": "@@ -492,14 +492,42 @@ point instructions in software. It takes one of the following values:\n * `y`, `yes`, `on`, or no value: use soft floats.\n * `n`, `no`, or `off`: use hardware floats (the default).\n \n+## split-debuginfo\n+\n+This option controls the emission of \"split debuginfo\" for debug information\n+that `rustc` generates. The default behavior of this option is\n+platform-specific, and not all possible values for this option work on all\n+platform. Possible values are:\n+\n+* `off` - This is the default for platforms with ELF binaries and windows-gnu\n+  (not Windows MSVC and not macOS). This typically means that dwarf debug\n+  information can be found in the final artifact in sections of the executable.\n+  This option is not supported on Windows MSVC. On macOS this options prevents\n+  the final execution of `dsymutil` to generate debuginfo.\n+\n+* `packed` - This is the default for Windows MSVC and macOS platforms. The term\n+  \"packed\" here means that all the debug information is packed into a separate\n+  file from the main executable. On Windows MSVC this is a `*.pdb` file, on\n+  macOS this is a `*.dSYM` folder, and on other platforms this is a `*.dwp`\n+  files.\n+\n+* `unpacked` - This means that debug information will be found in separate\n+  files for each compilation unit (object file). This is not supported on\n+  Windows MSVC. On macOS this means the original object files will contain\n+  debug information. On other Unix platforms this means that `*.dwo` files will\n+  contain debug information.\n+\n+Note that `packed` and `unpacked` gated behind `-Zunstable-options` on\n+non-macOS platforms at this time.\n+\n ## target-cpu\n \n This instructs `rustc` to generate code specifically for a particular processor.\n \n You can run `rustc --print target-cpus` to see the valid options to pass\n here. Each target has a default base CPU. Special values include:\n \n-* `native` can be passed to use the processor of the host machine. \n+* `native` can be passed to use the processor of the host machine.\n * `generic` refers to an LLVM target with minimal features but modern tuning.\n \n ## target-feature"}, {"sha": "e8e62efe01c140de3ddc5c462469aa06859ac20d", "filename": "src/test/run-make-fulldeps/split-debuginfo/Makefile", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d9e56f48c5ed6d40fff4e3277735df605e143791/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d9e56f48c5ed6d40fff4e3277735df605e143791/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2FMakefile?ref=d9e56f48c5ed6d40fff4e3277735df605e143791", "patch": "@@ -0,0 +1,59 @@\n+-include ../tools.mk\n+\n+all: off packed unpacked\n+\n+ifeq ($(UNAME),Darwin)\n+# If disabled, don't run dsymutil\n+off:\n+\trm -rf $(TMPDIR)/*.dSYM\n+\t$(RUSTC) foo.rs -g -C split-debuginfo=off\n+\t[ ! -d $(TMPDIR)/foo.dSYM ]\n+\n+# Packed by default, but only if debuginfo is requested\n+packed:\n+\trm -rf $(TMPDIR)/*.dSYM\n+\t$(RUSTC) foo.rs\n+\t[ ! -d $(TMPDIR)/foo.dSYM ]\n+\trm -rf $(TMPDIR)/*.dSYM\n+\t$(RUSTC) foo.rs -g\n+\t[ -d $(TMPDIR)/foo.dSYM ]\n+\trm -rf $(TMPDIR)/*.dSYM\n+\t$(RUSTC) foo.rs -g -C split-debuginfo=packed\n+\t[ -d $(TMPDIR)/foo.dSYM ]\n+\trm -rf $(TMPDIR)/*.dSYM\n+\n+# Object files are preserved with unpacked and `dsymutil` isn't run\n+unpacked:\n+\t$(RUSTC) foo.rs -g -C split-debuginfo=unpacked\n+\tls $(TMPDIR)/*.o\n+\t[ ! -d $(TMPDIR)/foo.dSYM ]\n+else\n+ifdef IS_WINDOWS\n+# Windows only supports =off\n+off:\n+packed:\n+unpacked:\n+else\n+# If disabled, don't run dsymutil\n+off:\n+\t$(RUSTC) foo.rs -g -C split-debuginfo=off -Z unstable-options\n+\t[ ! -f $(TMPDIR)/*.dwp ]\n+\t[ ! -f $(TMPDIR)/*.dwo ]\n+\n+\t$(RUSTC) foo.rs -g\n+\t[ ! -f $(TMPDIR)/*.dwp ]\n+\t[ ! -f $(TMPDIR)/*.dwo ]\n+\n+packed:\n+\t$(RUSTC) foo.rs -g -C split-debuginfo=packed -Z unstable-options\n+\tls $(TMPDIR)/*.dwp\n+\tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n+\trm -rf $(TMPDIR)/*.dwp\n+\n+unpacked:\n+\t$(RUSTC) foo.rs -g -C split-debuginfo=unpacked -Z unstable-options\n+\tls $(TMPDIR)/*.dwp && exit 1 || exit 0\n+\tls $(TMPDIR)/*.dwo\n+\trm -rf $(TMPDIR)/*.dwo\n+endif\n+endif"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "src/test/run-make-fulldeps/split-debuginfo/foo.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9e56f48c5ed6d40fff4e3277735df605e143791/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e56f48c5ed6d40fff4e3277735df605e143791/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2Ffoo.rs?ref=d9e56f48c5ed6d40fff4e3277735df605e143791", "patch": "@@ -0,0 +1 @@\n+fn main() {}"}, {"sha": "93dfc8e76a961b5080a6feaf0b6112d3de4d86c1", "filename": "src/test/run-make-fulldeps/split-dwarf/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9e56f48c5ed6d40fff4e3277735df605e143791/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d9e56f48c5ed6d40fff4e3277735df605e143791/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile?ref=d9e56f48c5ed6d40fff4e3277735df605e143791", "patch": "@@ -3,6 +3,6 @@\n # only-linux\n \n all:\n-\t$(RUSTC) -Z split-dwarf=split foo.rs\n+\t$(RUSTC) -Z unstable-options -C split-debuginfo=packed foo.rs -g\n \trm $(TMPDIR)/foo.dwp\n \trm $(TMPDIR)/$(call BIN,foo)"}, {"sha": "492ff6356bcaf1f207934228432846cb20a385b1", "filename": "src/test/ui/backtrace-apple-no-dsymutil.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d9e56f48c5ed6d40fff4e3277735df605e143791/src%2Ftest%2Fui%2Fbacktrace-apple-no-dsymutil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e56f48c5ed6d40fff4e3277735df605e143791/src%2Ftest%2Fui%2Fbacktrace-apple-no-dsymutil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbacktrace-apple-no-dsymutil.rs?ref=d9e56f48c5ed6d40fff4e3277735df605e143791", "patch": "@@ -0,0 +1,30 @@\n+// run-pass\n+\n+// compile-flags:-g -Csplit-debuginfo=unpacked\n+// only-macos\n+\n+#![feature(backtrace)]\n+\n+use std::process::Command;\n+use std::str;\n+\n+#[inline(never)]\n+fn main() {\n+    let args: Vec<String> = std::env::args().collect();\n+    if args.len() >= 2 {\n+        println!(\"{}\", std::backtrace::Backtrace::force_capture());\n+        return;\n+    }\n+    let out = Command::new(&args[0]).env(\"RUST_BACKTRACE\", \"1\").arg(\"foo\").output().unwrap();\n+    let output = format!(\n+        \"{}\\n{}\",\n+        str::from_utf8(&out.stdout).unwrap(),\n+        str::from_utf8(&out.stderr).unwrap(),\n+    );\n+    if out.status.success() && output.contains(file!()) {\n+        return;\n+    }\n+    println!(\"status: {}\", out.status);\n+    println!(\"child output:\\n\\t{}\", output.replace(\"\\n\", \"\\n\\t\"));\n+    panic!(\"failed to find {:?} in output\", file!());\n+}"}, {"sha": "52aed57fc76afc4431b73afc01ec59a283e97489", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9e56f48c5ed6d40fff4e3277735df605e143791/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e56f48c5ed6d40fff4e3277735df605e143791/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=d9e56f48c5ed6d40fff4e3277735df605e143791", "patch": "@@ -2015,10 +2015,10 @@ impl<'test> TestCx<'test> {\n                 rustc.args(&[\"-Zchalk\"]);\n             }\n             Some(CompareMode::SplitDwarf) => {\n-                rustc.args(&[\"-Zsplit-dwarf=split\"]);\n+                rustc.args(&[\"-Csplit-debuginfo=unpacked\", \"-Zunstable-options\"]);\n             }\n             Some(CompareMode::SplitDwarfSingle) => {\n-                rustc.args(&[\"-Zsplit-dwarf=single\"]);\n+                rustc.args(&[\"-Csplit-debuginfo=packed\", \"-Zunstable-options\"]);\n             }\n             None => {}\n         }"}, {"sha": "21d05226fb42c5d6a7124f93c51db5b8c666a6c8", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9e56f48c5ed6d40fff4e3277735df605e143791/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e56f48c5ed6d40fff4e3277735df605e143791/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=d9e56f48c5ed6d40fff4e3277735df605e143791", "patch": "@@ -7,7 +7,7 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 1458;\n+const ROOT_ENTRY_LIMIT: usize = 1459;\n const ISSUES_ENTRY_LIMIT: usize = 2669;\n \n fn check_entries(path: &Path, bad: &mut bool) {"}]}