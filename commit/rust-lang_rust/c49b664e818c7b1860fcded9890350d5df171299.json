{"sha": "c49b664e818c7b1860fcded9890350d5df171299", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0OWI2NjRlODE4YzdiMTg2MGZjZGVkOTg5MDM1MGQ1ZGYxNzEyOTk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-06-25T17:17:45Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-07-02T13:48:35Z"}, "message": "rustc_driver/pretty: avoid using TypeckTables::empty for TypedAnnotation.", "tree": {"sha": "d14e6b2770c932c1ab43a44ea4d3c20d0a436bf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d14e6b2770c932c1ab43a44ea4d3c20d0a436bf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c49b664e818c7b1860fcded9890350d5df171299", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c49b664e818c7b1860fcded9890350d5df171299", "html_url": "https://github.com/rust-lang/rust/commit/c49b664e818c7b1860fcded9890350d5df171299", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c49b664e818c7b1860fcded9890350d5df171299/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9491f18c5de3ff1c4bf9c3fdacf52d9859e26f7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9491f18c5de3ff1c4bf9c3fdacf52d9859e26f7c", "html_url": "https://github.com/rust-lang/rust/commit/9491f18c5de3ff1c4bf9c3fdacf52d9859e26f7c"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "c2c19b6b4056b50e3e5398f8445bdd3a4bc605ca", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c49b664e818c7b1860fcded9890350d5df171299/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c49b664e818c7b1860fcded9890350d5df171299/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=c49b664e818c7b1860fcded9890350d5df171299", "patch": "@@ -6,6 +6,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(nll)]\n+#![cfg_attr(bootstrap, feature(track_caller))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "6a34a310f735ad2651452db7b1e3841b597da25a", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c49b664e818c7b1860fcded9890350d5df171299/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c49b664e818c7b1860fcded9890350d5df171299/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=c49b664e818c7b1860fcded9890350d5df171299", "patch": "@@ -80,8 +80,7 @@ where\n         PpmTyped => {\n             abort_on_err(tcx.analysis(LOCAL_CRATE), tcx.sess);\n \n-            let empty_tables = ty::TypeckTables::empty(None);\n-            let annotation = TypedAnnotation { tcx, tables: Cell::new(&empty_tables) };\n+            let annotation = TypedAnnotation { tcx, maybe_typeck_tables: Cell::new(None) };\n             tcx.dep_graph.with_ignore(|| f(&annotation, tcx.hir().krate()))\n         }\n         _ => panic!(\"Should use call_with_pp_support\"),\n@@ -304,12 +303,22 @@ impl<'a> pprust::PpAnn for HygieneAnnotation<'a> {\n     }\n }\n \n-struct TypedAnnotation<'a, 'tcx> {\n+struct TypedAnnotation<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    tables: Cell<&'a ty::TypeckTables<'tcx>>,\n+    maybe_typeck_tables: Cell<Option<&'tcx ty::TypeckTables<'tcx>>>,\n }\n \n-impl<'b, 'tcx> HirPrinterSupport<'tcx> for TypedAnnotation<'b, 'tcx> {\n+impl<'tcx> TypedAnnotation<'tcx> {\n+    /// Gets the type-checking side-tables for the current body.\n+    /// As this will ICE if called outside bodies, only call when working with\n+    /// `Expr` or `Pat` nodes (they are guaranteed to be found only in bodies).\n+    #[track_caller]\n+    fn tables(&self) -> &'tcx ty::TypeckTables<'tcx> {\n+        self.maybe_typeck_tables.get().expect(\"`TypedAnnotation::tables` called outside of body\")\n+    }\n+}\n+\n+impl<'tcx> HirPrinterSupport<'tcx> for TypedAnnotation<'tcx> {\n     fn sess(&self) -> &Session {\n         &self.tcx.sess\n     }\n@@ -327,15 +336,15 @@ impl<'b, 'tcx> HirPrinterSupport<'tcx> for TypedAnnotation<'b, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> pprust_hir::PpAnn for TypedAnnotation<'a, 'tcx> {\n+impl<'tcx> pprust_hir::PpAnn for TypedAnnotation<'tcx> {\n     fn nested(&self, state: &mut pprust_hir::State<'_>, nested: pprust_hir::Nested) {\n-        let old_tables = self.tables.get();\n+        let old_maybe_typeck_tables = self.maybe_typeck_tables.get();\n         if let pprust_hir::Nested::Body(id) = nested {\n-            self.tables.set(self.tcx.body_tables(id));\n+            self.maybe_typeck_tables.set(Some(self.tcx.body_tables(id)));\n         }\n         let pp_ann = &(&self.tcx.hir() as &dyn hir::intravisit::Map<'_>);\n         pprust_hir::PpAnn::nested(pp_ann, state, nested);\n-        self.tables.set(old_tables);\n+        self.maybe_typeck_tables.set(old_maybe_typeck_tables);\n     }\n     fn pre(&self, s: &mut pprust_hir::State<'_>, node: pprust_hir::AnnNode<'_>) {\n         if let pprust_hir::AnnNode::Expr(_) = node {\n@@ -347,7 +356,7 @@ impl<'a, 'tcx> pprust_hir::PpAnn for TypedAnnotation<'a, 'tcx> {\n             s.s.space();\n             s.s.word(\"as\");\n             s.s.space();\n-            s.s.word(self.tables.get().expr_ty(expr).to_string());\n+            s.s.word(self.tables().expr_ty(expr).to_string());\n             s.pclose();\n         }\n     }"}]}