{"sha": "3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNzQ3MmY3NmM3MGMzYjBhMzFiYjcyZjZmMzE4YzFhYTFhYmE4M2Q=", "commit": {"author": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-05-27T23:25:32Z"}, "committer": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-06-22T23:40:04Z"}, "message": "Add `public` semantic token modifier for public items", "tree": {"sha": "fc99fe5bc5ff7d6826303d166cb911b63125f33d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc99fe5bc5ff7d6826303d166cb911b63125f33d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqQsXYYwP2wJc1ykb94j36ZATYAMFAmDSdNQACgkQ94j36ZAT\nYANhNhAAnLNc7BEqKPdBT4d35SKRReDURIktBMCKAwqll+YQ5GSIocmVVAeLIIvF\nqKUse1iC/bQjw6DfnGdRds3ysEuQDF7YLRl+LpnLSQ4rIY986tkO4dndzoSHIvS6\n0yb5J5R6CxdZ3mDne9pVox9pBNuPFbhZ/UKm/WGXu1pyFDTqYVnecJJ35sVXZryX\nt0KAgXa8vBtAgPTZBV7YB3JJmFIsN9jLLEy6ulCvjJWN2Fnmv8GGyahyguR7wZqP\nQ72pK8uXkrexVLwqLSS9jvFB6yL8ZBhQBcAohmOzrfzRp4SZEyxtUczQflPaHHfD\nh2K9v0WZXS1WXRVUM29kluIBEOKbhxvJGbwRcQZZLSsL7H1mLV7nydzyQ7nJ654G\n0WrValgz0s3ZAc5pVIpM7CEjHqOE3u8fq+bhe+C3fX0+tTDT7oXREfzln7CxDCc+\nDl9Q9FR0XNjg0z62SoG7ZcNsLrTjBb11nez+7A64u3STIwLqMjThGti7nxPKd9wd\nHn9bOj7iyusEgASxioA5HS5jrcF1EnhVxhjUrZSSd3Qf2iqAeKQxulhvFaHIbR+V\niIaIsp69P+UhbIvLsOubIE0qYtUk1PWuk2TuTUM43uLdMosTBjZuqrdj5GfiIZM/\nc8G/LTHCZw6wYkh1MOtCuJ6IPu8iqDc86F57JNx7hn2EfRcHCLA=\n=s/gz\n-----END PGP SIGNATURE-----", "payload": "tree fc99fe5bc5ff7d6826303d166cb911b63125f33d\nparent 3762cb4535dce9eaf7c3dbd4aa9c33bf6dd30c87\nauthor Aramis Razzaghipour <aramisnoah@gmail.com> 1622157932 +1000\ncommitter Aramis Razzaghipour <aramisnoah@gmail.com> 1624405204 +1000\n\nAdd `public` semantic token modifier for public items\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d", "html_url": "https://github.com/rust-lang/rust/commit/3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d/comments", "author": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3762cb4535dce9eaf7c3dbd4aa9c33bf6dd30c87", "url": "https://api.github.com/repos/rust-lang/rust/commits/3762cb4535dce9eaf7c3dbd4aa9c33bf6dd30c87", "html_url": "https://github.com/rust-lang/rust/commit/3762cb4535dce9eaf7c3dbd4aa9c33bf6dd30c87"}], "stats": {"total": 102, "additions": 67, "deletions": 35}, "files": [{"sha": "5259d86d2521335bad974e39968eed79254feda9", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d", "patch": "@@ -137,6 +137,7 @@ pub struct HlRange {\n // injected:: Emitted for doc-string injected highlighting like rust source blocks in documentation.\n // intraDocLink:: Emitted for intra doc links in doc-strings.\n // library:: Emitted for items that are defined outside of the current crate.\n+// public:: Emitted for items that are from the current crate and are `pub`.\n // mutable:: Emitted for mutable locals and statics.\n // static:: Emitted for \"static\" functions, also known as functions that do not take a `self` param, as well as statics and consts.\n // trait:: Emitted for associated trait items."}, {"sha": "82e16a51b5f8aaf8cf4534abf3bd9f347842ba28", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d", "patch": "@@ -1,6 +1,6 @@\n //! Computes color for a single element.\n \n-use hir::{AsAssocItem, Semantics};\n+use hir::{AsAssocItem, HasVisibility, Semantics};\n use ide_db::{\n     defs::{Definition, NameClass, NameRefClass},\n     RootDatabase, SymbolKind,\n@@ -439,9 +439,12 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n \n     let is_from_other_crate = def.module(db).map(hir::Module::krate) != krate;\n     let is_builtin_type = matches!(def, Definition::ModuleDef(hir::ModuleDef::BuiltinType(_)));\n+    let is_public = def.visibility(db) == Some(hir::Visibility::Public);\n \n-    if is_from_other_crate && !is_builtin_type {\n-        h |= HlMod::Library;\n+    match (is_from_other_crate, is_builtin_type, is_public) {\n+        (true, false, _) => h |= HlMod::Library,\n+        (false, _, true) => h |= HlMod::Public,\n+        _ => {}\n     }\n \n     h\n@@ -475,8 +478,14 @@ fn highlight_method_call(\n     if func.as_assoc_item(sema.db).and_then(|it| it.containing_trait(sema.db)).is_some() {\n         h |= HlMod::Trait;\n     }\n-    if Some(func.module(sema.db).krate()) != krate {\n+\n+    let is_from_other_crate = Some(func.module(sema.db).krate()) != krate;\n+    let is_public = func.visibility(sema.db) == hir::Visibility::Public;\n+\n+    if is_from_other_crate {\n         h |= HlMod::Library;\n+    } else if is_public {\n+        h |= HlMod::Public;\n     }\n \n     if let Some(self_param) = func.self_param(sema.db) {"}, {"sha": "b4d59d00b1179499de58143c16db9b457972c83a", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d", "patch": "@@ -71,6 +71,8 @@ pub enum HlMod {\n     Async,\n     /// Used for items from other crates.\n     Library,\n+    /// Used for public items.\n+    Public,\n     // Keep this last!\n     /// Used for unsafe functions, unsafe traits, mutable statics, union accesses and unsafe operations.\n     Unsafe,\n@@ -194,6 +196,7 @@ impl HlMod {\n         HlMod::Trait,\n         HlMod::Async,\n         HlMod::Library,\n+        HlMod::Public,\n         HlMod::Unsafe,\n     ];\n \n@@ -213,6 +216,7 @@ impl HlMod {\n             HlMod::Trait => \"trait\",\n             HlMod::Async => \"async\",\n             HlMod::Library => \"library\",\n+            HlMod::Public => \"public\",\n             HlMod::Unsafe => \"unsafe\",\n         }\n     }"}, {"sha": "9326d9d4532aa381a0b27225448e28ea4d262a0a", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_assoc_functions.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "raw_url": "https://github.com/rust-lang/rust/raw/3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html?ref=3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d", "patch": "@@ -43,8 +43,8 @@\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">foo</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">foo</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration static\">is_static</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration\">is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration static public\">is_static</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration public\">is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">trait</span> <span class=\"trait declaration\">t</span> <span class=\"brace\">{</span>\n@@ -53,7 +53,7 @@\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"trait\">t</span> <span class=\"keyword\">for</span> <span class=\"struct\">foo</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration static trait\">is_static</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration trait\">is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration static trait public\">is_static</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration trait public\">is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n         </code></pre>\n\\ No newline at end of file"}, {"sha": "1f2f83a08d0cf442857436bb257191b8232a9bc2", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d", "patch": "@@ -63,7 +63,7 @@\n     <span class=\"comment\">//    KILLER WHALE</span>\n     <span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">    Ishmael.\"</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"constant associated declaration\">bar</span><span class=\"colon\">:</span> <span class=\"builtin_type\">bool</span> <span class=\"operator\">=</span> <span class=\"bool_literal\">true</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"constant associated declaration public\">bar</span><span class=\"colon\">:</span> <span class=\"builtin_type\">bool</span> <span class=\"operator\">=</span> <span class=\"bool_literal\">true</span><span class=\"semicolon\">;</span>\n \n     <span class=\"comment documentation\">/// Constructs a new `Foo`.</span>\n     <span class=\"comment documentation\">///</span>\n@@ -73,7 +73,7 @@\n     <span class=\"comment documentation\">/// #</span><span class=\"none injected\"> </span><span class=\"attribute attribute injected\">#</span><span class=\"attribute attribute injected\">!</span><span class=\"attribute attribute injected\">[</span><span class=\"function attribute injected\">allow</span><span class=\"parenthesis attribute injected\">(</span><span class=\"attribute attribute injected\">unused_mut</span><span class=\"parenthesis attribute injected\">)</span><span class=\"attribute attribute injected\">]</span>\n     <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"keyword injected\">mut</span><span class=\"none injected\"> </span><span class=\"variable declaration injected mutable\">foo</span><span class=\"colon injected\">:</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"parenthesis injected\">(</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration static\">new</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration static public\">new</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span>\n         <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">bar</span><span class=\"colon\">:</span> <span class=\"bool_literal\">true</span> <span class=\"brace\">}</span>\n     <span class=\"brace\">}</span>\n \n@@ -107,7 +107,7 @@\n     <span class=\"comment documentation\">/// ```sh</span>\n     <span class=\"comment documentation\">/// echo 1</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration\">foo</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">bool</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration public\">foo</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">bool</span> <span class=\"brace\">{</span>\n         <span class=\"bool_literal\">true</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n@@ -119,10 +119,10 @@\n <span class=\"comment documentation\">///</span>\n <span class=\"comment documentation\">/// [`Item`]: module::Item</span>\n <span class=\"comment documentation\">/// [mix_and_match]: ThisShouldntResolve</span>\n-<span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">all_the_links</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+<span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration public\">all_the_links</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n-<span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration\">module</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"struct declaration\">Item</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration public\">module</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"struct declaration public\">Item</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span>\n \n <span class=\"comment documentation\">/// ```</span>\n@@ -148,7 +148,7 @@\n <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"attribute attribute\">not</span><span class=\"parenthesis attribute\">(</span><span class=\"attribute attribute\">feature </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"alloc\"</span><span class=\"parenthesis attribute\">)</span><span class=\"comma attribute\">,</span><span class=\"attribute attribute\"> doc </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"```ignore\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"function injected\">example</span><span class=\"parenthesis injected\">(</span><span class=\"operator injected\">&</span><span class=\"none injected\">alloc::</span><span class=\"macro injected\">vec!</span><span class=\"bracket injected\">[</span><span class=\"numeric_literal injected\">1</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">2</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">3</span><span class=\"bracket injected\">]</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n <span class=\"comment documentation\">/// ```</span>\n-<span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">mix_and_match</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+<span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration public\">mix_and_match</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"comment documentation\">/**\n It is beyond me why you'd use these when you got ///\n@@ -157,7 +157,7 @@\n ```\n </span><span class=\"function documentation injected intra_doc_link\">[`block_comments2`]</span><span class=\"comment documentation\"> tests these with indentation\n  */</span>\n-<span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">block_comments</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+<span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration public\">block_comments</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"comment documentation\">/**\n     Really, I don't get it\n@@ -166,4 +166,4 @@\n     ```\n     </span><span class=\"function documentation injected intra_doc_link\">[`block_comments`]</span><span class=\"comment documentation\"> tests these without indentation\n */</span>\n-<span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">block_comments2</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file\n+<span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration public\">block_comments2</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "63daf25c6f71b19a8eee77313fc71f285fa56018", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d", "patch": "@@ -45,26 +45,26 @@\n <span class=\"keyword\">macro</span> <span class=\"macro declaration\">Copy</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"comment\">// Needed for function consuming vs normal</span>\n-<span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration\">marker</span> <span class=\"brace\">{</span>\n+<span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration public\">marker</span> <span class=\"brace\">{</span>\n     <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">lang</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"copy\"</span><span class=\"attribute attribute\">]</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Copy</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">Copy</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration\">ops</span> <span class=\"brace\">{</span>\n+<span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration public\">ops</span> <span class=\"brace\">{</span>\n     <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">lang</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"fn_once\"</span><span class=\"attribute attribute\">]</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration\">FnOnce</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">FnOnce</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n     <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">lang</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"fn_mut\"</span><span class=\"attribute attribute\">]</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration\">FnMut</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span><span class=\"colon\">:</span> <span class=\"trait\">FnOnce</span><span class=\"angle\">&lt;</span><span class=\"type_param\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">FnMut</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span><span class=\"colon\">:</span> <span class=\"trait public\">FnOnce</span><span class=\"angle\">&lt;</span><span class=\"type_param\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n     <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">lang</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"fn\"</span><span class=\"attribute attribute\">]</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Fn</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span><span class=\"colon\">:</span> <span class=\"trait\">FnMut</span><span class=\"angle\">&lt;</span><span class=\"type_param\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">Fn</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span><span class=\"colon\">:</span> <span class=\"trait public\">FnMut</span><span class=\"angle\">&lt;</span><span class=\"type_param\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n \n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">pub</span> <span class=\"field declaration\">x</span><span class=\"colon\">:</span> <span class=\"builtin_type\">i32</span><span class=\"comma\">,</span>\n-    <span class=\"keyword\">pub</span> <span class=\"field declaration\">y</span><span class=\"colon\">:</span> <span class=\"builtin_type\">i32</span><span class=\"comma\">,</span>\n+    <span class=\"keyword\">pub</span> <span class=\"field declaration public\">x</span><span class=\"colon\">:</span> <span class=\"builtin_type\">i32</span><span class=\"comma\">,</span>\n+    <span class=\"keyword\">pub</span> <span class=\"field declaration public\">y</span><span class=\"colon\">:</span> <span class=\"builtin_type\">i32</span><span class=\"comma\">,</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Bar</span> <span class=\"keyword\">where</span> <span class=\"type_param\">Self</span><span class=\"colon\">:</span> <span class=\"brace\">{</span>\n@@ -73,7 +73,7 @@\n \n <span class=\"keyword\">impl</span> <span class=\"trait\">Bar</span> <span class=\"keyword\">for</span> <span class=\"struct\">Foo</span> <span class=\"keyword\">where</span> <span class=\"self_type\">Self</span><span class=\"colon\">:</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">fn</span> <span class=\"function associated declaration trait\">bar</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n-        <span class=\"self_keyword\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n+        <span class=\"self_keyword\">self</span><span class=\"operator\">.</span><span class=\"field public\">x</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n@@ -83,11 +83,11 @@\n     <span class=\"brace\">}</span>\n \n     <span class=\"keyword\">fn</span> <span class=\"function associated declaration mutable\">qux</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword declaration mutable\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-        <span class=\"self_keyword mutable\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"semicolon\">;</span>\n+        <span class=\"self_keyword mutable\">self</span><span class=\"operator\">.</span><span class=\"field public\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span>\n \n     <span class=\"keyword\">fn</span> <span class=\"function associated declaration\">quop</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n-        <span class=\"self_keyword\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n+        <span class=\"self_keyword\">self</span><span class=\"operator\">.</span><span class=\"field public\">x</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n@@ -128,8 +128,8 @@\n     <span class=\"const_param\">FOO</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"keyword\">use</span> <span class=\"module\">ops</span><span class=\"operator\">::</span><span class=\"trait\">Fn</span><span class=\"semicolon\">;</span>\n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">baz</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">F</span><span class=\"colon\">:</span> <span class=\"trait\">Fn</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">(</span><span class=\"value_param callable declaration\">f</span><span class=\"colon\">:</span> <span class=\"type_param\">F</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+<span class=\"keyword\">use</span> <span class=\"module public\">ops</span><span class=\"operator\">::</span><span class=\"trait public\">Fn</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">baz</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">F</span><span class=\"colon\">:</span> <span class=\"trait public\">Fn</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">(</span><span class=\"value_param callable declaration\">f</span><span class=\"colon\">:</span> <span class=\"type_param\">F</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n     <span class=\"value_param callable\">f</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span>\n <span class=\"brace\">}</span>\n \n@@ -181,7 +181,7 @@\n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">vec</span> <span class=\"operator\">=</span> <span class=\"unresolved_reference\">Vec</span><span class=\"operator\">::</span><span class=\"unresolved_reference\">new</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"keyword control\">if</span> <span class=\"bool_literal\">true</span> <span class=\"brace\">{</span>\n         <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"semicolon\">;</span>\n-        <span class=\"variable mutable\">vec</span><span class=\"operator\">.</span><span class=\"unresolved_reference\">push</span><span class=\"parenthesis\">(</span><span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"field\">y</span><span class=\"colon\">:</span> <span class=\"numeric_literal\">1</span> <span class=\"brace\">}</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+        <span class=\"variable mutable\">vec</span><span class=\"operator\">.</span><span class=\"unresolved_reference\">push</span><span class=\"parenthesis\">(</span><span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"field public\">y</span><span class=\"colon\">:</span> <span class=\"numeric_literal\">1</span> <span class=\"brace\">}</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span>\n     <span class=\"keyword unsafe\">unsafe</span> <span class=\"brace\">{</span>\n         <span class=\"variable mutable\">vec</span><span class=\"operator\">.</span><span class=\"unresolved_reference\">set_len</span><span class=\"parenthesis\">(</span><span class=\"numeric_literal\">0</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n@@ -198,12 +198,12 @@\n     <span class=\"keyword\">let</span> <span class=\"variable declaration mutable\">y</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span><span class=\"semicolon\">;</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">z</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"variable mutable\">y</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"keyword\">let</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"colon\">:</span> <span class=\"variable declaration\">z</span><span class=\"comma\">,</span> <span class=\"field\">y</span> <span class=\"brace\">}</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"colon\">:</span> <span class=\"variable\">z</span><span class=\"comma\">,</span> <span class=\"field\">y</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field public\">x</span><span class=\"colon\">:</span> <span class=\"variable declaration\">z</span><span class=\"comma\">,</span> <span class=\"field\">y</span> <span class=\"brace\">}</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field public\">x</span><span class=\"colon\">:</span> <span class=\"variable\">z</span><span class=\"comma\">,</span> <span class=\"field\">y</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n \n     <span class=\"variable\">y</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">foo</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"field\">y</span><span class=\"colon\">:</span> <span class=\"variable mutable\">x</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\">foo2</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"field\">y</span><span class=\"colon\">:</span> <span class=\"variable mutable\">x</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">foo</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"field public\">y</span><span class=\"colon\">:</span> <span class=\"variable mutable\">x</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">foo2</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"field public\">y</span><span class=\"colon\">:</span> <span class=\"variable mutable\">x</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n     <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function associated\">quop</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function associated mutable\">qux</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function associated consuming\">baz</span><span class=\"parenthesis\">(</span><span class=\"variable consuming\">foo2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n@@ -269,5 +269,13 @@\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n+<span class=\"keyword\">pub</span> <span class=\"keyword\">enum</span> <span class=\"enum declaration public\">Bool</span> <span class=\"brace\">{</span> <span class=\"enum_variant declaration public\">True</span><span class=\"comma\">,</span> <span class=\"enum_variant declaration public\">False</span> <span class=\"brace\">}</span>\n+\n+<span class=\"keyword\">impl</span> <span class=\"enum public\">Bool</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration public\">to_primitive</span><span class=\"parenthesis\">(</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">bool</span> <span class=\"brace\">{</span>\n+        <span class=\"macro\">matches!</span><span class=\"parenthesis\">(</span>self<span class=\"comma\">,</span> Self<span class=\"colon\">:</span><span class=\"colon\">:</span>True<span class=\"parenthesis\">)</span>\n+    <span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n+<span class=\"keyword\">const</span> <span class=\"constant declaration\">USAGE_OF_BOOL</span><span class=\"colon\">:</span><span class=\"builtin_type\">bool</span> <span class=\"operator\">=</span> <span class=\"enum public\">Bool</span><span class=\"operator\">::</span><span class=\"enum_variant public\">True</span><span class=\"operator\">.</span><span class=\"function associated consuming public\">to_primitive</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n \n </code></pre>\n\\ No newline at end of file"}, {"sha": "502a88af258142030f54620ebe6b1cfe364a0b3b", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d", "patch": "@@ -242,6 +242,14 @@ fn use_foo_items() {\n     }\n }\n \n+pub enum Bool { True, False }\n+\n+impl Bool {\n+    pub const fn to_primitive(self) -> bool {\n+        matches!(self, Self::True)\n+    }\n+}\n+const USAGE_OF_BOOL:bool = Bool::True.to_primitive();\n \n //- /foo.rs crate:foo\n pub struct Person {\n@@ -390,7 +398,7 @@ struct Foo {\n         .highlight_range(FileRange { file_id, range: TextRange::at(45.into(), 1.into()) })\n         .unwrap();\n \n-    assert_eq!(&highlights[0].highlight.to_string(), \"field.declaration\");\n+    assert_eq!(&highlights[0].highlight.to_string(), \"field.declaration.public\");\n }\n \n #[test]"}, {"sha": "3f6c52e910ffe4c705ac02ba96cd6ca31ef93058", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d", "patch": "@@ -93,6 +93,7 @@ define_semantic_token_modifiers![\n     (CONSUMING, \"consuming\"),\n     (ASYNC, \"async\"),\n     (LIBRARY, \"library\"),\n+    (PUBLIC, \"public\"),\n     (UNSAFE, \"unsafe\"),\n     (ATTRIBUTE_MODIFIER, \"attribute\"),\n     (TRAIT_MODIFIER, \"trait\"),"}, {"sha": "f9497f76f396fd70636968834901f6a9cec189a1", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=3e7472f76c70c3b0a31bb72f6f318c1aa1aba83d", "patch": "@@ -505,6 +505,7 @@ fn semantic_token_type_and_modifiers(\n             HlMod::Consuming => semantic_tokens::CONSUMING,\n             HlMod::Async => semantic_tokens::ASYNC,\n             HlMod::Library => semantic_tokens::LIBRARY,\n+            HlMod::Public => semantic_tokens::PUBLIC,\n             HlMod::Unsafe => semantic_tokens::UNSAFE,\n             HlMod::Callable => semantic_tokens::CALLABLE,\n             HlMod::Static => lsp_types::SemanticTokenModifier::STATIC,"}]}