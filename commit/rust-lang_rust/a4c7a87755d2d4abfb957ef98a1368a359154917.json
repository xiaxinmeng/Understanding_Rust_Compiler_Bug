{"sha": "a4c7a87755d2d4abfb957ef98a1368a359154917", "node_id": "C_kwDOAAsO6NoAKGE0YzdhODc3NTVkMmQ0YWJmYjk1N2VmOThhMTM2OGEzNTkxNTQ5MTc", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-03T16:24:11Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-25T08:57:25Z"}, "message": "Handle dev-dependency cycles", "tree": {"sha": "710a1a8c437de1ddd58ed8861c52b785640dd7c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/710a1a8c437de1ddd58ed8861c52b785640dd7c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4c7a87755d2d4abfb957ef98a1368a359154917", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4c7a87755d2d4abfb957ef98a1368a359154917", "html_url": "https://github.com/rust-lang/rust/commit/a4c7a87755d2d4abfb957ef98a1368a359154917", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4c7a87755d2d4abfb957ef98a1368a359154917/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "980c75bc91c1d7648498f28e4ba89be520eb6a52", "url": "https://api.github.com/repos/rust-lang/rust/commits/980c75bc91c1d7648498f28e4ba89be520eb6a52", "html_url": "https://github.com/rust-lang/rust/commit/980c75bc91c1d7648498f28e4ba89be520eb6a52"}], "stats": {"total": 1287, "additions": 752, "deletions": 535}, "files": [{"sha": "a153e7f36cdda5a82159a8d60d5cc070c623ac40", "filename": "crates/base-db/src/input.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a4c7a87755d2d4abfb957ef98a1368a359154917/crates%2Fbase-db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4c7a87755d2d4abfb957ef98a1368a359154917/crates%2Fbase-db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Finput.rs?ref=a4c7a87755d2d4abfb957ef98a1368a359154917", "patch": "@@ -417,6 +417,11 @@ impl CrateGraph {\n         Ok(())\n     }\n \n+    pub fn duplicate(&mut self, id: CrateId) -> CrateId {\n+        let data = self[id].clone();\n+        self.arena.alloc(data)\n+    }\n+\n     pub fn add_dep(\n         &mut self,\n         from: CrateId,\n@@ -612,6 +617,12 @@ impl ops::Index<CrateId> for CrateGraph {\n     }\n }\n \n+impl ops::IndexMut<CrateId> for CrateGraph {\n+    fn index_mut(&mut self, crate_id: CrateId) -> &mut CrateData {\n+        &mut self.arena[crate_id]\n+    }\n+}\n+\n impl CrateData {\n     fn add_dep(&mut self, dep: Dependency) {\n         self.dependencies.push(dep)"}, {"sha": "a0b185a3a592309af26cefccfce67abe9312c9dc", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 119, "deletions": 36, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/a4c7a87755d2d4abfb957ef98a1368a359154917/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4c7a87755d2d4abfb957ef98a1368a359154917/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=a4c7a87755d2d4abfb957ef98a1368a359154917", "patch": "@@ -2,7 +2,12 @@\n //! metadata` or `rust-project.json`) into representation stored in the salsa\n //! database -- `CrateGraph`.\n \n-use std::{collections::VecDeque, fmt, fs, process::Command, sync::Arc};\n+use std::{\n+    collections::{hash_map::Entry, VecDeque},\n+    fmt, fs,\n+    process::Command,\n+    sync::Arc,\n+};\n \n use anyhow::{format_err, Context, Result};\n use base_db::{\n@@ -844,12 +849,12 @@ fn cargo_to_crate_graph(\n         None => (SysrootPublicDeps::default(), None),\n     };\n \n-    let cfg_options = {\n+    let cfg_options = forced_cfg.clone().unwrap_or_else(|| {\n         let mut cfg_options = CfgOptions::default();\n         cfg_options.extend(rustc_cfg);\n         cfg_options.insert_atom(\"debug_assertions\".into());\n         cfg_options\n-    };\n+    });\n \n     // Mapping of a package to its library target\n     let mut pkg_to_lib_crate = FxHashMap::default();\n@@ -861,32 +866,6 @@ fn cargo_to_crate_graph(\n     for pkg in cargo.packages() {\n         has_private |= cargo[pkg].metadata.rustc_private;\n \n-        let cfg_options = forced_cfg.clone().unwrap_or_else(|| {\n-            let mut cfg_options = cfg_options.clone();\n-\n-            // Add test cfg for local crates\n-            if cargo[pkg].is_local {\n-                cfg_options.insert_atom(\"test\".into());\n-            }\n-\n-            let overrides = match override_cfg {\n-                CfgOverrides::Wildcard(cfg_diff) => Some(cfg_diff),\n-                CfgOverrides::Selective(cfg_overrides) => cfg_overrides.get(&cargo[pkg].name),\n-            };\n-\n-            if let Some(overrides) = overrides {\n-                // FIXME: this is sort of a hack to deal with #![cfg(not(test))] vanishing such as seen\n-                // in ed25519_dalek (#7243), and libcore (#9203) (although you only hit that one while\n-                // working on rust-lang/rust as that's the only time it appears outside sysroot).\n-                //\n-                // A more ideal solution might be to reanalyze crates based on where the cursor is and\n-                // figure out the set of cfgs that would have to apply to make it active.\n-\n-                cfg_options.apply_diff(overrides.clone());\n-            };\n-            cfg_options\n-        });\n-\n         let mut lib_tgt = None;\n         for &tgt in cargo[pkg].targets.iter() {\n             if cargo[tgt].kind != TargetKind::Lib && !cargo[pkg].is_member {\n@@ -897,7 +876,7 @@ fn cargo_to_crate_graph(\n                 // https://github.com/rust-lang/rust-analyzer/issues/11300\n                 continue;\n             }\n-            let Some(file_id) =  load(&cargo[tgt].root) else { continue };\n+            let Some(file_id) = load(&cargo[tgt].root) else { continue };\n \n             let crate_id = add_target_crate_root(\n                 crate_graph,\n@@ -925,15 +904,19 @@ fn cargo_to_crate_graph(\n             pkg_crates.entry(pkg).or_insert_with(Vec::new).push((crate_id, cargo[tgt].kind));\n         }\n \n+        let Some(targets) = pkg_crates.get(&pkg) else { continue };\n         // Set deps to the core, std and to the lib target of the current package\n-        for &(from, kind) in pkg_crates.get(&pkg).into_iter().flatten() {\n+        for &(from, kind) in targets {\n             // Add sysroot deps first so that a lib target named `core` etc. can overwrite them.\n             public_deps.add_to_crate_graph(crate_graph, from);\n \n             // Add dep edge of all targets to the package's lib target\n             if let Some((to, name)) = lib_tgt.clone() {\n-                if to != from && kind != TargetKind::BuildScript {\n-                    // (build script can not depend on its library target)\n+                if to != from {\n+                    if kind == TargetKind::BuildScript {\n+                        // build script can not depend on its library target\n+                        continue;\n+                    }\n \n                     // For root projects with dashes in their name,\n                     // cargo metadata does not do any normalization,\n@@ -945,6 +928,43 @@ fn cargo_to_crate_graph(\n         }\n     }\n \n+    // We now need to duplicate workspace members that are used as dev-dependencies to prevent\n+    // cycles from forming.\n+\n+    // Map from crate id to it's dev-dependency clone id\n+    let mut test_dupes = FxHashMap::default();\n+    let mut work = vec![];\n+\n+    // Get all dependencies of the workspace members that are used as dev-dependencies\n+    for pkg in cargo.packages() {\n+        for dep in &cargo[pkg].dependencies {\n+            if dep.kind == DepKind::Dev {\n+                work.push(dep.pkg);\n+            }\n+        }\n+    }\n+    while let Some(pkg) = work.pop() {\n+        let Some(&to) = pkg_to_lib_crate.get(&pkg) else { continue };\n+        match test_dupes.entry(to) {\n+            Entry::Occupied(_) => continue,\n+            Entry::Vacant(v) => {\n+                for dep in &cargo[pkg].dependencies {\n+                    if dep.kind == DepKind::Normal && cargo[dep.pkg].is_member {\n+                        work.push(dep.pkg);\n+                    }\n+                }\n+                v.insert({\n+                    let duped = crate_graph.duplicate(to);\n+                    if let Some(proc_macro) = proc_macros.get(&to).cloned() {\n+                        proc_macros.insert(duped, proc_macro);\n+                    }\n+                    crate_graph[duped].cfg_options.insert_atom(\"test\".into());\n+                    duped\n+                });\n+            }\n+        }\n+    }\n+\n     // Now add a dep edge from all targets of upstream to the lib\n     // target of downstream.\n     for pkg in cargo.packages() {\n@@ -958,12 +978,66 @@ fn cargo_to_crate_graph(\n                 if (dep.kind == DepKind::Build) != (kind == TargetKind::BuildScript) {\n                     continue;\n                 }\n+                add_dep(\n+                    crate_graph,\n+                    from,\n+                    name.clone(),\n+                    if dep.kind == DepKind::Dev {\n+                        // point to the test enabled duplicate for dev-dependencies\n+                        test_dupes.get(&to).copied().unwrap_or(to)\n+                    } else {\n+                        to\n+                    },\n+                );\n \n-                add_dep(crate_graph, from, name.clone(), to)\n+                if dep.kind == DepKind::Normal && cargo[dep.pkg].is_member {\n+                    // Also apply the dependency as a test enabled dependency to the test duplicate\n+                    if let Some(&dupe) = test_dupes.get(&from) {\n+                        let to = test_dupes.get(&to).copied().unwrap_or_else(|| {\n+                            panic!(\n+                                \"dependency of a dev dependency did not get duplicated! {:?} {:?}\",\n+                                crate_graph[to].display_name, crate_graph[from].display_name,\n+                            )\n+                        });\n+                        add_dep(crate_graph, dupe, name.clone(), to);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    for (&pkg, targets) in &pkg_crates {\n+        for &(krate, _) in targets {\n+            if test_dupes.get(&krate).is_some() {\n+                // if the crate got duped as a dev-dep the dupe already has test set\n+                continue;\n+            }\n+            let cfg_options = &mut crate_graph[krate].cfg_options;\n+\n+            // Add test cfg for local crates\n+            if cargo[pkg].is_local {\n+                cfg_options.insert_atom(\"test\".into());\n             }\n+\n+            let overrides = match override_cfg {\n+                CfgOverrides::Wildcard(cfg_diff) => Some(cfg_diff),\n+                CfgOverrides::Selective(cfg_overrides) => cfg_overrides.get(&cargo[pkg].name),\n+            };\n+\n+            if let Some(overrides) = overrides {\n+                // FIXME: this is sort of a hack to deal with #![cfg(not(test))] vanishing such as seen\n+                // in ed25519_dalek (#7243), and libcore (#9203) (although you only hit that one while\n+                // working on rust-lang/rust as that's the only time it appears outside sysroot).\n+                //\n+                // A more ideal solution might be to reanalyze crates based on where the cursor is and\n+                // figure out the set of cfgs that would have to apply to make it active.\n+\n+                cfg_options.apply_diff(overrides.clone());\n+            };\n         }\n     }\n \n+    // FIXME: Handle rustc private crates properly when used as dev-dependencies\n     if has_private {\n         // If the user provided a path to rustc sources, we add all the rustc_private crates\n         // and create dependencies on them for the crates which opt-in to that\n@@ -1087,7 +1161,9 @@ fn handle_rustc_crates(\n                 continue;\n             }\n             for dep in &rustc_workspace[pkg].dependencies {\n-                queue.push_back(dep.pkg);\n+                if dep.kind == DepKind::Normal {\n+                    queue.push_back(dep.pkg);\n+                }\n             }\n \n             let mut cfg_options = cfg_options.clone();\n@@ -1397,10 +1473,12 @@ fn handle_hack_cargo_workspace(\n         .collect()\n }\n \n+#[track_caller]\n fn add_dep(graph: &mut CrateGraph, from: CrateId, name: CrateName, to: CrateId) {\n     add_dep_inner(graph, from, Dependency::new(name, to))\n }\n \n+#[track_caller]\n fn add_dep_with_prelude(\n     graph: &mut CrateGraph,\n     from: CrateId,\n@@ -1411,13 +1489,18 @@ fn add_dep_with_prelude(\n     add_dep_inner(graph, from, Dependency::with_prelude(name, to, prelude))\n }\n \n+#[track_caller]\n fn add_proc_macro_dep(crate_graph: &mut CrateGraph, from: CrateId, to: CrateId, prelude: bool) {\n     add_dep_with_prelude(crate_graph, from, CrateName::new(\"proc_macro\").unwrap(), to, prelude);\n }\n \n+#[track_caller]\n fn add_dep_inner(graph: &mut CrateGraph, from: CrateId, dep: Dependency) {\n     if let Err(err) = graph.add_dep(from, dep) {\n-        tracing::error!(\"{}\", err)\n+        if cfg!(test) {\n+            panic!(\"{}\", err);\n+        }\n+        tracing::error!(\"{}\", err);\n     }\n }\n "}, {"sha": "2dba4efa923d6d1bf3c7689b377bf2bf22dbc5fb", "filename": "crates/project-model/test_data/cargo_dev_dependencies-crate-graph.txt", "status": "modified", "additions": 622, "deletions": 499, "changes": 1121, "blob_url": "https://github.com/rust-lang/rust/blob/a4c7a87755d2d4abfb957ef98a1368a359154917/crates%2Fproject-model%2Ftest_data%2Fcargo_dev_dependencies-crate-graph.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a4c7a87755d2d4abfb957ef98a1368a359154917/crates%2Fproject-model%2Ftest_data%2Fcargo_dev_dependencies-crate-graph.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Ftest_data%2Fcargo_dev_dependencies-crate-graph.txt?ref=a4c7a87755d2d4abfb957ef98a1368a359154917", "patch": "@@ -1,402 +1,405 @@\n-CrateGraph {\n-    arena: {\n-        CrateId(\n-            0,\n-        ): CrateData {\n-            root_file_id: FileId(\n-                1,\n-            ),\n-            edition: Edition2018,\n-            version: Some(\n-                \"0.7.20\",\n-            ),\n-            display_name: Some(\n-                CrateDisplayName {\n-                    crate_name: CrateName(\n-                        \"aho_corasick\",\n-                    ),\n-                    canonical_name: \"aho_corasick\",\n-                },\n-            ),\n-            cfg_options: CfgOptions(\n+{\n+    0: CrateData {\n+        root_file_id: FileId(\n+            1,\n+        ),\n+        edition: Edition2018,\n+        version: Some(\n+            \"0.7.20\",\n+        ),\n+        display_name: Some(\n+            CrateDisplayName {\n+                crate_name: CrateName(\n+                    \"aho_corasick\",\n+                ),\n+                canonical_name: \"aho_corasick\",\n+            },\n+        ),\n+        cfg_options: CfgOptions(\n+            [\n+                \"debug_assertions\",\n+                \"feature=default\",\n+                \"feature=std\",\n+            ],\n+        ),\n+        potential_cfg_options: Some(\n+            CfgOptions(\n                 [\n                     \"debug_assertions\",\n                     \"feature=default\",\n                     \"feature=std\",\n                 ],\n             ),\n-            potential_cfg_options: Some(\n-                CfgOptions(\n-                    [\n-                        \"debug_assertions\",\n-                        \"feature=default\",\n-                        \"feature=std\",\n-                    ],\n-                ),\n-            ),\n-            env: Env {\n-                entries: {\n-                    \"CARGO_PKG_LICENSE\": \"\",\n-                    \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n-                    \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/aho-corasick-0.7.20\",\n-                    \"CARGO_PKG_VERSION\": \"0.7.20\",\n-                    \"CARGO_PKG_AUTHORS\": \"\",\n-                    \"CARGO_CRATE_NAME\": \"aho_corasick\",\n-                    \"CARGO_PKG_LICENSE_FILE\": \"\",\n-                    \"CARGO_PKG_HOMEPAGE\": \"\",\n-                    \"CARGO_PKG_DESCRIPTION\": \"\",\n-                    \"CARGO_PKG_NAME\": \"aho-corasick\",\n-                    \"CARGO_PKG_VERSION_PATCH\": \"20\",\n-                    \"CARGO\": \"cargo\",\n-                    \"CARGO_PKG_REPOSITORY\": \"\",\n-                    \"CARGO_PKG_VERSION_MINOR\": \"7\",\n-                    \"CARGO_PKG_VERSION_PRE\": \"\",\n-                },\n+        ),\n+        env: Env {\n+            entries: {\n+                \"CARGO_PKG_LICENSE\": \"\",\n+                \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n+                \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/aho-corasick-0.7.20\",\n+                \"CARGO_PKG_VERSION\": \"0.7.20\",\n+                \"CARGO_PKG_AUTHORS\": \"\",\n+                \"CARGO_CRATE_NAME\": \"aho_corasick\",\n+                \"CARGO_PKG_LICENSE_FILE\": \"\",\n+                \"CARGO_PKG_HOMEPAGE\": \"\",\n+                \"CARGO_PKG_DESCRIPTION\": \"\",\n+                \"CARGO_PKG_NAME\": \"aho-corasick\",\n+                \"CARGO_PKG_VERSION_PATCH\": \"20\",\n+                \"CARGO\": \"cargo\",\n+                \"CARGO_PKG_REPOSITORY\": \"\",\n+                \"CARGO_PKG_VERSION_MINOR\": \"7\",\n+                \"CARGO_PKG_VERSION_PRE\": \"\",\n             },\n-            dependencies: [\n-                Dependency {\n-                    crate_id: CrateId(\n-                        2,\n-                    ),\n-                    name: CrateName(\n-                        \"memchr\",\n-                    ),\n-                    prelude: true,\n-                },\n-            ],\n-            origin: Library {\n-                repo: Some(\n-                    \"https://github.com/BurntSushi/aho-corasick\",\n+        },\n+        dependencies: [\n+            Dependency {\n+                crate_id: Idx::<CrateData>(2),\n+                name: CrateName(\n+                    \"memchr\",\n                 ),\n-                name: \"aho-corasick\",\n+                prelude: true,\n             },\n-            is_proc_macro: false,\n-            target_layout: Err(\n-                \"target_data_layout not loaded\",\n+        ],\n+        origin: Library {\n+            repo: Some(\n+                \"https://github.com/BurntSushi/aho-corasick\",\n             ),\n-            channel: None,\n+            name: \"aho-corasick\",\n         },\n-        CrateId(\n-            1,\n-        ): CrateData {\n-            root_file_id: FileId(\n-                2,\n-            ),\n-            edition: Edition2021,\n-            version: Some(\n-                \"0.3.0\",\n-            ),\n-            display_name: Some(\n-                CrateDisplayName {\n-                    crate_name: CrateName(\n-                        \"la_arena\",\n-                    ),\n-                    canonical_name: \"la-arena\",\n-                },\n-            ),\n-            cfg_options: CfgOptions(\n-                [\n-                    \"debug_assertions\",\n-                ],\n-            ),\n-            potential_cfg_options: None,\n-            env: Env {\n-                entries: {\n-                    \"CARGO_PKG_LICENSE\": \"\",\n-                    \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n-                    \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/la-arena-0.3.0\",\n-                    \"CARGO_PKG_VERSION\": \"0.3.0\",\n-                    \"CARGO_PKG_AUTHORS\": \"\",\n-                    \"CARGO_CRATE_NAME\": \"la_arena\",\n-                    \"CARGO_PKG_LICENSE_FILE\": \"\",\n-                    \"CARGO_PKG_HOMEPAGE\": \"\",\n-                    \"CARGO_PKG_DESCRIPTION\": \"\",\n-                    \"CARGO_PKG_NAME\": \"la-arena\",\n-                    \"CARGO_PKG_VERSION_PATCH\": \"0\",\n-                    \"CARGO\": \"cargo\",\n-                    \"CARGO_PKG_REPOSITORY\": \"\",\n-                    \"CARGO_PKG_VERSION_MINOR\": \"3\",\n-                    \"CARGO_PKG_VERSION_PRE\": \"\",\n-                },\n-            },\n-            dependencies: [],\n-            origin: Library {\n-                repo: Some(\n-                    \"https://github.com/rust-lang/rust-analyzer/tree/master/lib/la-arena\",\n+        is_proc_macro: false,\n+        target_layout: Err(\n+            \"target_data_layout not loaded\",\n+        ),\n+        channel: None,\n+    },\n+    1: CrateData {\n+        root_file_id: FileId(\n+            2,\n+        ),\n+        edition: Edition2021,\n+        version: Some(\n+            \"0.3.0\",\n+        ),\n+        display_name: Some(\n+            CrateDisplayName {\n+                crate_name: CrateName(\n+                    \"la_arena\",\n                 ),\n-                name: \"la-arena\",\n+                canonical_name: \"la-arena\",\n+            },\n+        ),\n+        cfg_options: CfgOptions(\n+            [\n+                \"debug_assertions\",\n+            ],\n+        ),\n+        potential_cfg_options: None,\n+        env: Env {\n+            entries: {\n+                \"CARGO_PKG_LICENSE\": \"\",\n+                \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n+                \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/la-arena-0.3.0\",\n+                \"CARGO_PKG_VERSION\": \"0.3.0\",\n+                \"CARGO_PKG_AUTHORS\": \"\",\n+                \"CARGO_CRATE_NAME\": \"la_arena\",\n+                \"CARGO_PKG_LICENSE_FILE\": \"\",\n+                \"CARGO_PKG_HOMEPAGE\": \"\",\n+                \"CARGO_PKG_DESCRIPTION\": \"\",\n+                \"CARGO_PKG_NAME\": \"la-arena\",\n+                \"CARGO_PKG_VERSION_PATCH\": \"0\",\n+                \"CARGO\": \"cargo\",\n+                \"CARGO_PKG_REPOSITORY\": \"\",\n+                \"CARGO_PKG_VERSION_MINOR\": \"3\",\n+                \"CARGO_PKG_VERSION_PRE\": \"\",\n             },\n-            is_proc_macro: false,\n-            target_layout: Err(\n-                \"target_data_layout not loaded\",\n-            ),\n-            channel: None,\n         },\n-        CrateId(\n-            2,\n-        ): CrateData {\n-            root_file_id: FileId(\n-                3,\n+        dependencies: [],\n+        origin: Library {\n+            repo: Some(\n+                \"https://github.com/rust-lang/rust-analyzer/tree/master/lib/la-arena\",\n             ),\n-            edition: Edition2018,\n-            version: Some(\n-                \"2.5.0\",\n-            ),\n-            display_name: Some(\n-                CrateDisplayName {\n-                    crate_name: CrateName(\n-                        \"memchr\",\n-                    ),\n-                    canonical_name: \"memchr\",\n-                },\n-            ),\n-            cfg_options: CfgOptions(\n+            name: \"la-arena\",\n+        },\n+        is_proc_macro: false,\n+        target_layout: Err(\n+            \"target_data_layout not loaded\",\n+        ),\n+        channel: None,\n+    },\n+    2: CrateData {\n+        root_file_id: FileId(\n+            3,\n+        ),\n+        edition: Edition2018,\n+        version: Some(\n+            \"2.5.0\",\n+        ),\n+        display_name: Some(\n+            CrateDisplayName {\n+                crate_name: CrateName(\n+                    \"memchr\",\n+                ),\n+                canonical_name: \"memchr\",\n+            },\n+        ),\n+        cfg_options: CfgOptions(\n+            [\n+                \"debug_assertions\",\n+                \"feature=default\",\n+                \"feature=std\",\n+            ],\n+        ),\n+        potential_cfg_options: Some(\n+            CfgOptions(\n                 [\n                     \"debug_assertions\",\n+                    \"feature=compiler_builtins\",\n+                    \"feature=core\",\n                     \"feature=default\",\n+                    \"feature=libc\",\n+                    \"feature=rustc-dep-of-std\",\n                     \"feature=std\",\n+                    \"feature=use_std\",\n                 ],\n             ),\n-            potential_cfg_options: Some(\n-                CfgOptions(\n-                    [\n-                        \"debug_assertions\",\n-                        \"feature=compiler_builtins\",\n-                        \"feature=core\",\n-                        \"feature=default\",\n-                        \"feature=libc\",\n-                        \"feature=rustc-dep-of-std\",\n-                        \"feature=std\",\n-                        \"feature=use_std\",\n-                    ],\n-                ),\n-            ),\n-            env: Env {\n-                entries: {\n-                    \"CARGO_PKG_LICENSE\": \"\",\n-                    \"CARGO_PKG_VERSION_MAJOR\": \"2\",\n-                    \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.5.0\",\n-                    \"CARGO_PKG_VERSION\": \"2.5.0\",\n-                    \"CARGO_PKG_AUTHORS\": \"\",\n-                    \"CARGO_CRATE_NAME\": \"memchr\",\n-                    \"CARGO_PKG_LICENSE_FILE\": \"\",\n-                    \"CARGO_PKG_HOMEPAGE\": \"\",\n-                    \"CARGO_PKG_DESCRIPTION\": \"\",\n-                    \"CARGO_PKG_NAME\": \"memchr\",\n-                    \"CARGO_PKG_VERSION_PATCH\": \"0\",\n-                    \"CARGO\": \"cargo\",\n-                    \"CARGO_PKG_REPOSITORY\": \"\",\n-                    \"CARGO_PKG_VERSION_MINOR\": \"5\",\n-                    \"CARGO_PKG_VERSION_PRE\": \"\",\n-                },\n+        ),\n+        env: Env {\n+            entries: {\n+                \"CARGO_PKG_LICENSE\": \"\",\n+                \"CARGO_PKG_VERSION_MAJOR\": \"2\",\n+                \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.5.0\",\n+                \"CARGO_PKG_VERSION\": \"2.5.0\",\n+                \"CARGO_PKG_AUTHORS\": \"\",\n+                \"CARGO_CRATE_NAME\": \"memchr\",\n+                \"CARGO_PKG_LICENSE_FILE\": \"\",\n+                \"CARGO_PKG_HOMEPAGE\": \"\",\n+                \"CARGO_PKG_DESCRIPTION\": \"\",\n+                \"CARGO_PKG_NAME\": \"memchr\",\n+                \"CARGO_PKG_VERSION_PATCH\": \"0\",\n+                \"CARGO\": \"cargo\",\n+                \"CARGO_PKG_REPOSITORY\": \"\",\n+                \"CARGO_PKG_VERSION_MINOR\": \"5\",\n+                \"CARGO_PKG_VERSION_PRE\": \"\",\n             },\n-            dependencies: [],\n-            origin: Library {\n-                repo: Some(\n-                    \"https://github.com/BurntSushi/memchr\",\n-                ),\n-                name: \"memchr\",\n-            },\n-            is_proc_macro: false,\n-            target_layout: Err(\n-                \"target_data_layout not loaded\",\n-            ),\n-            channel: None,\n         },\n-        CrateId(\n-            3,\n-        ): CrateData {\n-            root_file_id: FileId(\n-                4,\n-            ),\n-            edition: Edition2021,\n-            version: Some(\n-                \"0.1.0\",\n+        dependencies: [],\n+        origin: Library {\n+            repo: Some(\n+                \"https://github.com/BurntSushi/memchr\",\n             ),\n-            display_name: Some(\n-                CrateDisplayName {\n-                    crate_name: CrateName(\n-                        \"ra_playground\",\n-                    ),\n-                    canonical_name: \"ra-playground\",\n-                },\n-            ),\n-            cfg_options: CfgOptions(\n-                [\n-                    \"debug_assertions\",\n-                    \"test\",\n-                ],\n-            ),\n-            potential_cfg_options: None,\n-            env: Env {\n-                entries: {\n-                    \"CARGO_PKG_LICENSE\": \"\",\n-                    \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n-                    \"CARGO_MANIFEST_DIR\": \"$ROOT$ra-playground\",\n-                    \"CARGO_PKG_VERSION\": \"0.1.0\",\n-                    \"CARGO_PKG_AUTHORS\": \"\",\n-                    \"CARGO_CRATE_NAME\": \"ra_playground\",\n-                    \"CARGO_PKG_LICENSE_FILE\": \"\",\n-                    \"CARGO_PKG_HOMEPAGE\": \"\",\n-                    \"CARGO_PKG_DESCRIPTION\": \"\",\n-                    \"CARGO_PKG_NAME\": \"ra-playground\",\n-                    \"CARGO_PKG_VERSION_PATCH\": \"0\",\n-                    \"CARGO\": \"cargo\",\n-                    \"CARGO_PKG_REPOSITORY\": \"\",\n-                    \"CARGO_PKG_VERSION_MINOR\": \"1\",\n-                    \"CARGO_PKG_VERSION_PRE\": \"\",\n-                },\n+            name: \"memchr\",\n+        },\n+        is_proc_macro: false,\n+        target_layout: Err(\n+            \"target_data_layout not loaded\",\n+        ),\n+        channel: None,\n+    },\n+    3: CrateData {\n+        root_file_id: FileId(\n+            4,\n+        ),\n+        edition: Edition2021,\n+        version: Some(\n+            \"0.1.0\",\n+        ),\n+        display_name: Some(\n+            CrateDisplayName {\n+                crate_name: CrateName(\n+                    \"ra_playground\",\n+                ),\n+                canonical_name: \"ra-playground\",\n             },\n-            dependencies: [\n-                Dependency {\n-                    crate_id: CrateId(\n-                        1,\n-                    ),\n-                    name: CrateName(\n-                        \"la_arena\",\n-                    ),\n-                    prelude: true,\n-                },\n-                Dependency {\n-                    crate_id: CrateId(\n-                        5,\n-                    ),\n-                    name: CrateName(\n-                        \"regex\",\n-                    ),\n-                    prelude: true,\n-                },\n+        ),\n+        cfg_options: CfgOptions(\n+            [\n+                \"debug_assertions\",\n             ],\n-            origin: Local {\n-                repo: None,\n-                name: Some(\n-                    \"ra-playground\",\n+        ),\n+        potential_cfg_options: None,\n+        env: Env {\n+            entries: {\n+                \"CARGO_PKG_LICENSE\": \"\",\n+                \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n+                \"CARGO_MANIFEST_DIR\": \"$ROOT$ra-playground\",\n+                \"CARGO_PKG_VERSION\": \"0.1.0\",\n+                \"CARGO_PKG_AUTHORS\": \"\",\n+                \"CARGO_CRATE_NAME\": \"ra_playground\",\n+                \"CARGO_PKG_LICENSE_FILE\": \"\",\n+                \"CARGO_PKG_HOMEPAGE\": \"\",\n+                \"CARGO_PKG_DESCRIPTION\": \"\",\n+                \"CARGO_PKG_NAME\": \"ra-playground\",\n+                \"CARGO_PKG_VERSION_PATCH\": \"0\",\n+                \"CARGO\": \"cargo\",\n+                \"CARGO_PKG_REPOSITORY\": \"\",\n+                \"CARGO_PKG_VERSION_MINOR\": \"1\",\n+                \"CARGO_PKG_VERSION_PRE\": \"\",\n+            },\n+        },\n+        dependencies: [\n+            Dependency {\n+                crate_id: Idx::<CrateData>(1),\n+                name: CrateName(\n+                    \"la_arena\",\n+                ),\n+                prelude: true,\n+            },\n+            Dependency {\n+                crate_id: Idx::<CrateData>(8),\n+                name: CrateName(\n+                    \"ra_playground\",\n+                ),\n+                prelude: true,\n+            },\n+            Dependency {\n+                crate_id: Idx::<CrateData>(7),\n+                name: CrateName(\n+                    \"regex\",\n                 ),\n+                prelude: true,\n             },\n-            is_proc_macro: false,\n-            target_layout: Err(\n-                \"target_data_layout not loaded\",\n+        ],\n+        origin: Local {\n+            repo: None,\n+            name: Some(\n+                \"ra-playground\",\n             ),\n-            channel: None,\n         },\n-        CrateId(\n-            4,\n-        ): CrateData {\n-            root_file_id: FileId(\n-                5,\n-            ),\n-            edition: Edition2021,\n-            version: Some(\n-                \"0.1.0\",\n-            ),\n-            display_name: Some(\n-                CrateDisplayName {\n-                    crate_name: CrateName(\n-                        \"ra_playground\",\n-                    ),\n-                    canonical_name: \"ra-playground\",\n-                },\n-            ),\n-            cfg_options: CfgOptions(\n-                [\n-                    \"debug_assertions\",\n-                    \"test\",\n-                ],\n-            ),\n-            potential_cfg_options: None,\n-            env: Env {\n-                entries: {\n-                    \"CARGO_PKG_LICENSE\": \"\",\n-                    \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n-                    \"CARGO_MANIFEST_DIR\": \"$ROOT$ra-playground\",\n-                    \"CARGO_PKG_VERSION\": \"0.1.0\",\n-                    \"CARGO_PKG_AUTHORS\": \"\",\n-                    \"CARGO_CRATE_NAME\": \"ra_playground\",\n-                    \"CARGO_PKG_LICENSE_FILE\": \"\",\n-                    \"CARGO_PKG_HOMEPAGE\": \"\",\n-                    \"CARGO_PKG_DESCRIPTION\": \"\",\n-                    \"CARGO_PKG_NAME\": \"ra-playground\",\n-                    \"CARGO_PKG_VERSION_PATCH\": \"0\",\n-                    \"CARGO\": \"cargo\",\n-                    \"CARGO_PKG_REPOSITORY\": \"\",\n-                    \"CARGO_PKG_VERSION_MINOR\": \"1\",\n-                    \"CARGO_PKG_VERSION_PRE\": \"\",\n-                },\n+        is_proc_macro: false,\n+        target_layout: Err(\n+            \"target_data_layout not loaded\",\n+        ),\n+        channel: None,\n+    },\n+    4: CrateData {\n+        root_file_id: FileId(\n+            5,\n+        ),\n+        edition: Edition2021,\n+        version: Some(\n+            \"0.1.0\",\n+        ),\n+        display_name: Some(\n+            CrateDisplayName {\n+                crate_name: CrateName(\n+                    \"ra_playground\",\n+                ),\n+                canonical_name: \"ra-playground\",\n             },\n-            dependencies: [\n-                Dependency {\n-                    crate_id: CrateId(\n-                        3,\n-                    ),\n-                    name: CrateName(\n-                        \"ra_playground\",\n-                    ),\n-                    prelude: true,\n-                },\n-                Dependency {\n-                    crate_id: CrateId(\n-                        1,\n-                    ),\n-                    name: CrateName(\n-                        \"la_arena\",\n-                    ),\n-                    prelude: true,\n-                },\n-                Dependency {\n-                    crate_id: CrateId(\n-                        3,\n-                    ),\n-                    name: CrateName(\n-                        \"ra_playground\",\n-                    ),\n-                    prelude: true,\n-                },\n-                Dependency {\n-                    crate_id: CrateId(\n-                        5,\n-                    ),\n-                    name: CrateName(\n-                        \"regex\",\n-                    ),\n-                    prelude: true,\n-                },\n+        ),\n+        cfg_options: CfgOptions(\n+            [\n+                \"debug_assertions\",\n+                \"test\",\n             ],\n-            origin: Local {\n-                repo: None,\n-                name: Some(\n-                    \"ra-playground\",\n+        ),\n+        potential_cfg_options: None,\n+        env: Env {\n+            entries: {\n+                \"CARGO_PKG_LICENSE\": \"\",\n+                \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n+                \"CARGO_MANIFEST_DIR\": \"$ROOT$ra-playground\",\n+                \"CARGO_PKG_VERSION\": \"0.1.0\",\n+                \"CARGO_PKG_AUTHORS\": \"\",\n+                \"CARGO_CRATE_NAME\": \"ra_playground\",\n+                \"CARGO_PKG_LICENSE_FILE\": \"\",\n+                \"CARGO_PKG_HOMEPAGE\": \"\",\n+                \"CARGO_PKG_DESCRIPTION\": \"\",\n+                \"CARGO_PKG_NAME\": \"ra-playground\",\n+                \"CARGO_PKG_VERSION_PATCH\": \"0\",\n+                \"CARGO\": \"cargo\",\n+                \"CARGO_PKG_REPOSITORY\": \"\",\n+                \"CARGO_PKG_VERSION_MINOR\": \"1\",\n+                \"CARGO_PKG_VERSION_PRE\": \"\",\n+            },\n+        },\n+        dependencies: [\n+            Dependency {\n+                crate_id: Idx::<CrateData>(3),\n+                name: CrateName(\n+                    \"ra_playground\",\n                 ),\n+                prelude: true,\n             },\n-            is_proc_macro: false,\n-            target_layout: Err(\n-                \"target_data_layout not loaded\",\n+            Dependency {\n+                crate_id: Idx::<CrateData>(1),\n+                name: CrateName(\n+                    \"la_arena\",\n+                ),\n+                prelude: true,\n+            },\n+            Dependency {\n+                crate_id: Idx::<CrateData>(8),\n+                name: CrateName(\n+                    \"ra_playground\",\n+                ),\n+                prelude: true,\n+            },\n+            Dependency {\n+                crate_id: Idx::<CrateData>(7),\n+                name: CrateName(\n+                    \"regex\",\n+                ),\n+                prelude: true,\n+            },\n+        ],\n+        origin: Local {\n+            repo: None,\n+            name: Some(\n+                \"ra-playground\",\n             ),\n-            channel: None,\n         },\n-        CrateId(\n-            5,\n-        ): CrateData {\n-            root_file_id: FileId(\n-                6,\n-            ),\n-            edition: Edition2018,\n-            version: Some(\n-                \"1.7.3\",\n-            ),\n-            display_name: Some(\n-                CrateDisplayName {\n-                    crate_name: CrateName(\n-                        \"regex\",\n-                    ),\n-                    canonical_name: \"regex\",\n-                },\n-            ),\n-            cfg_options: CfgOptions(\n+        is_proc_macro: false,\n+        target_layout: Err(\n+            \"target_data_layout not loaded\",\n+        ),\n+        channel: None,\n+    },\n+    5: CrateData {\n+        root_file_id: FileId(\n+            6,\n+        ),\n+        edition: Edition2018,\n+        version: Some(\n+            \"1.7.3\",\n+        ),\n+        display_name: Some(\n+            CrateDisplayName {\n+                crate_name: CrateName(\n+                    \"regex\",\n+                ),\n+                canonical_name: \"regex\",\n+            },\n+        ),\n+        cfg_options: CfgOptions(\n+            [\n+                \"debug_assertions\",\n+                \"feature=aho-corasick\",\n+                \"feature=default\",\n+                \"feature=memchr\",\n+                \"feature=perf\",\n+                \"feature=perf-cache\",\n+                \"feature=perf-dfa\",\n+                \"feature=perf-inline\",\n+                \"feature=perf-literal\",\n+                \"feature=std\",\n+                \"feature=unicode\",\n+                \"feature=unicode-age\",\n+                \"feature=unicode-bool\",\n+                \"feature=unicode-case\",\n+                \"feature=unicode-gencat\",\n+                \"feature=unicode-perl\",\n+                \"feature=unicode-script\",\n+                \"feature=unicode-segment\",\n+            ],\n+        ),\n+        potential_cfg_options: Some(\n+            CfgOptions(\n                 [\n                     \"debug_assertions\",\n                     \"feature=aho-corasick\",\n                     \"feature=default\",\n                     \"feature=memchr\",\n+                    \"feature=pattern\",\n                     \"feature=perf\",\n                     \"feature=perf-cache\",\n                     \"feature=perf-dfa\",\n@@ -411,114 +414,97 @@ CrateGraph {\n                     \"feature=unicode-perl\",\n                     \"feature=unicode-script\",\n                     \"feature=unicode-segment\",\n+                    \"feature=unstable\",\n+                    \"feature=use_std\",\n                 ],\n             ),\n-            potential_cfg_options: Some(\n-                CfgOptions(\n-                    [\n-                        \"debug_assertions\",\n-                        \"feature=aho-corasick\",\n-                        \"feature=default\",\n-                        \"feature=memchr\",\n-                        \"feature=pattern\",\n-                        \"feature=perf\",\n-                        \"feature=perf-cache\",\n-                        \"feature=perf-dfa\",\n-                        \"feature=perf-inline\",\n-                        \"feature=perf-literal\",\n-                        \"feature=std\",\n-                        \"feature=unicode\",\n-                        \"feature=unicode-age\",\n-                        \"feature=unicode-bool\",\n-                        \"feature=unicode-case\",\n-                        \"feature=unicode-gencat\",\n-                        \"feature=unicode-perl\",\n-                        \"feature=unicode-script\",\n-                        \"feature=unicode-segment\",\n-                        \"feature=unstable\",\n-                        \"feature=use_std\",\n-                    ],\n+        ),\n+        env: Env {\n+            entries: {\n+                \"CARGO_PKG_LICENSE\": \"\",\n+                \"CARGO_PKG_VERSION_MAJOR\": \"1\",\n+                \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.3\",\n+                \"CARGO_PKG_VERSION\": \"1.7.3\",\n+                \"CARGO_PKG_AUTHORS\": \"\",\n+                \"CARGO_CRATE_NAME\": \"regex\",\n+                \"CARGO_PKG_LICENSE_FILE\": \"\",\n+                \"CARGO_PKG_HOMEPAGE\": \"\",\n+                \"CARGO_PKG_DESCRIPTION\": \"\",\n+                \"CARGO_PKG_NAME\": \"regex\",\n+                \"CARGO_PKG_VERSION_PATCH\": \"3\",\n+                \"CARGO\": \"cargo\",\n+                \"CARGO_PKG_REPOSITORY\": \"\",\n+                \"CARGO_PKG_VERSION_MINOR\": \"7\",\n+                \"CARGO_PKG_VERSION_PRE\": \"\",\n+            },\n+        },\n+        dependencies: [\n+            Dependency {\n+                crate_id: Idx::<CrateData>(0),\n+                name: CrateName(\n+                    \"aho_corasick\",\n                 ),\n-            ),\n-            env: Env {\n-                entries: {\n-                    \"CARGO_PKG_LICENSE\": \"\",\n-                    \"CARGO_PKG_VERSION_MAJOR\": \"1\",\n-                    \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.3\",\n-                    \"CARGO_PKG_VERSION\": \"1.7.3\",\n-                    \"CARGO_PKG_AUTHORS\": \"\",\n-                    \"CARGO_CRATE_NAME\": \"regex\",\n-                    \"CARGO_PKG_LICENSE_FILE\": \"\",\n-                    \"CARGO_PKG_HOMEPAGE\": \"\",\n-                    \"CARGO_PKG_DESCRIPTION\": \"\",\n-                    \"CARGO_PKG_NAME\": \"regex\",\n-                    \"CARGO_PKG_VERSION_PATCH\": \"3\",\n-                    \"CARGO\": \"cargo\",\n-                    \"CARGO_PKG_REPOSITORY\": \"\",\n-                    \"CARGO_PKG_VERSION_MINOR\": \"7\",\n-                    \"CARGO_PKG_VERSION_PRE\": \"\",\n-                },\n+                prelude: true,\n             },\n-            dependencies: [\n-                Dependency {\n-                    crate_id: CrateId(\n-                        0,\n-                    ),\n-                    name: CrateName(\n-                        \"aho_corasick\",\n-                    ),\n-                    prelude: true,\n-                },\n-                Dependency {\n-                    crate_id: CrateId(\n-                        2,\n-                    ),\n-                    name: CrateName(\n-                        \"memchr\",\n-                    ),\n-                    prelude: true,\n-                },\n-                Dependency {\n-                    crate_id: CrateId(\n-                        6,\n-                    ),\n-                    name: CrateName(\n-                        \"regex_syntax\",\n-                    ),\n-                    prelude: true,\n-                },\n-            ],\n-            origin: Library {\n-                repo: Some(\n-                    \"https://github.com/rust-lang/regex\",\n+            Dependency {\n+                crate_id: Idx::<CrateData>(2),\n+                name: CrateName(\n+                    \"memchr\",\n                 ),\n-                name: \"regex\",\n+                prelude: true,\n             },\n-            is_proc_macro: false,\n-            target_layout: Err(\n-                \"target_data_layout not loaded\",\n+            Dependency {\n+                crate_id: Idx::<CrateData>(6),\n+                name: CrateName(\n+                    \"regex_syntax\",\n+                ),\n+                prelude: true,\n+            },\n+        ],\n+        origin: Library {\n+            repo: Some(\n+                \"https://github.com/rust-lang/regex\",\n             ),\n-            channel: None,\n+            name: \"regex\",\n         },\n-        CrateId(\n-            6,\n-        ): CrateData {\n-            root_file_id: FileId(\n-                7,\n-            ),\n-            edition: Edition2018,\n-            version: Some(\n-                \"0.6.29\",\n-            ),\n-            display_name: Some(\n-                CrateDisplayName {\n-                    crate_name: CrateName(\n-                        \"regex_syntax\",\n-                    ),\n-                    canonical_name: \"regex-syntax\",\n-                },\n-            ),\n-            cfg_options: CfgOptions(\n+        is_proc_macro: false,\n+        target_layout: Err(\n+            \"target_data_layout not loaded\",\n+        ),\n+        channel: None,\n+    },\n+    6: CrateData {\n+        root_file_id: FileId(\n+            7,\n+        ),\n+        edition: Edition2018,\n+        version: Some(\n+            \"0.6.29\",\n+        ),\n+        display_name: Some(\n+            CrateDisplayName {\n+                crate_name: CrateName(\n+                    \"regex_syntax\",\n+                ),\n+                canonical_name: \"regex-syntax\",\n+            },\n+        ),\n+        cfg_options: CfgOptions(\n+            [\n+                \"debug_assertions\",\n+                \"feature=default\",\n+                \"feature=unicode\",\n+                \"feature=unicode-age\",\n+                \"feature=unicode-bool\",\n+                \"feature=unicode-case\",\n+                \"feature=unicode-gencat\",\n+                \"feature=unicode-perl\",\n+                \"feature=unicode-script\",\n+                \"feature=unicode-segment\",\n+            ],\n+        ),\n+        potential_cfg_options: Some(\n+            CfgOptions(\n                 [\n                     \"debug_assertions\",\n                     \"feature=default\",\n@@ -532,53 +518,190 @@ CrateGraph {\n                     \"feature=unicode-segment\",\n                 ],\n             ),\n-            potential_cfg_options: Some(\n-                CfgOptions(\n-                    [\n-                        \"debug_assertions\",\n-                        \"feature=default\",\n-                        \"feature=unicode\",\n-                        \"feature=unicode-age\",\n-                        \"feature=unicode-bool\",\n-                        \"feature=unicode-case\",\n-                        \"feature=unicode-gencat\",\n-                        \"feature=unicode-perl\",\n-                        \"feature=unicode-script\",\n-                        \"feature=unicode-segment\",\n-                    ],\n+        ),\n+        env: Env {\n+            entries: {\n+                \"CARGO_PKG_LICENSE\": \"\",\n+                \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n+                \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.29\",\n+                \"CARGO_PKG_VERSION\": \"0.6.29\",\n+                \"CARGO_PKG_AUTHORS\": \"\",\n+                \"CARGO_CRATE_NAME\": \"regex_syntax\",\n+                \"CARGO_PKG_LICENSE_FILE\": \"\",\n+                \"CARGO_PKG_HOMEPAGE\": \"\",\n+                \"CARGO_PKG_DESCRIPTION\": \"\",\n+                \"CARGO_PKG_NAME\": \"regex-syntax\",\n+                \"CARGO_PKG_VERSION_PATCH\": \"29\",\n+                \"CARGO\": \"cargo\",\n+                \"CARGO_PKG_REPOSITORY\": \"\",\n+                \"CARGO_PKG_VERSION_MINOR\": \"6\",\n+                \"CARGO_PKG_VERSION_PRE\": \"\",\n+            },\n+        },\n+        dependencies: [],\n+        origin: Library {\n+            repo: Some(\n+                \"https://github.com/rust-lang/regex\",\n+            ),\n+            name: \"regex-syntax\",\n+        },\n+        is_proc_macro: false,\n+        target_layout: Err(\n+            \"target_data_layout not loaded\",\n+        ),\n+        channel: None,\n+    },\n+    7: CrateData {\n+        root_file_id: FileId(\n+            6,\n+        ),\n+        edition: Edition2018,\n+        version: Some(\n+            \"1.7.3\",\n+        ),\n+        display_name: Some(\n+            CrateDisplayName {\n+                crate_name: CrateName(\n+                    \"regex\",\n                 ),\n+                canonical_name: \"regex\",\n+            },\n+        ),\n+        cfg_options: CfgOptions(\n+            [\n+                \"debug_assertions\",\n+                \"feature=aho-corasick\",\n+                \"feature=default\",\n+                \"feature=memchr\",\n+                \"feature=perf\",\n+                \"feature=perf-cache\",\n+                \"feature=perf-dfa\",\n+                \"feature=perf-inline\",\n+                \"feature=perf-literal\",\n+                \"feature=std\",\n+                \"feature=unicode\",\n+                \"feature=unicode-age\",\n+                \"feature=unicode-bool\",\n+                \"feature=unicode-case\",\n+                \"feature=unicode-gencat\",\n+                \"feature=unicode-perl\",\n+                \"feature=unicode-script\",\n+                \"feature=unicode-segment\",\n+                \"test\",\n+            ],\n+        ),\n+        potential_cfg_options: Some(\n+            CfgOptions(\n+                [\n+                    \"debug_assertions\",\n+                    \"feature=aho-corasick\",\n+                    \"feature=default\",\n+                    \"feature=memchr\",\n+                    \"feature=pattern\",\n+                    \"feature=perf\",\n+                    \"feature=perf-cache\",\n+                    \"feature=perf-dfa\",\n+                    \"feature=perf-inline\",\n+                    \"feature=perf-literal\",\n+                    \"feature=std\",\n+                    \"feature=unicode\",\n+                    \"feature=unicode-age\",\n+                    \"feature=unicode-bool\",\n+                    \"feature=unicode-case\",\n+                    \"feature=unicode-gencat\",\n+                    \"feature=unicode-perl\",\n+                    \"feature=unicode-script\",\n+                    \"feature=unicode-segment\",\n+                    \"feature=unstable\",\n+                    \"feature=use_std\",\n+                ],\n             ),\n-            env: Env {\n-                entries: {\n-                    \"CARGO_PKG_LICENSE\": \"\",\n-                    \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n-                    \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.29\",\n-                    \"CARGO_PKG_VERSION\": \"0.6.29\",\n-                    \"CARGO_PKG_AUTHORS\": \"\",\n-                    \"CARGO_CRATE_NAME\": \"regex_syntax\",\n-                    \"CARGO_PKG_LICENSE_FILE\": \"\",\n-                    \"CARGO_PKG_HOMEPAGE\": \"\",\n-                    \"CARGO_PKG_DESCRIPTION\": \"\",\n-                    \"CARGO_PKG_NAME\": \"regex-syntax\",\n-                    \"CARGO_PKG_VERSION_PATCH\": \"29\",\n-                    \"CARGO\": \"cargo\",\n-                    \"CARGO_PKG_REPOSITORY\": \"\",\n-                    \"CARGO_PKG_VERSION_MINOR\": \"6\",\n-                    \"CARGO_PKG_VERSION_PRE\": \"\",\n-                },\n+        ),\n+        env: Env {\n+            entries: {\n+                \"CARGO_PKG_LICENSE\": \"\",\n+                \"CARGO_PKG_VERSION_MAJOR\": \"1\",\n+                \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.3\",\n+                \"CARGO_PKG_VERSION\": \"1.7.3\",\n+                \"CARGO_PKG_AUTHORS\": \"\",\n+                \"CARGO_CRATE_NAME\": \"regex\",\n+                \"CARGO_PKG_LICENSE_FILE\": \"\",\n+                \"CARGO_PKG_HOMEPAGE\": \"\",\n+                \"CARGO_PKG_DESCRIPTION\": \"\",\n+                \"CARGO_PKG_NAME\": \"regex\",\n+                \"CARGO_PKG_VERSION_PATCH\": \"3\",\n+                \"CARGO\": \"cargo\",\n+                \"CARGO_PKG_REPOSITORY\": \"\",\n+                \"CARGO_PKG_VERSION_MINOR\": \"7\",\n+                \"CARGO_PKG_VERSION_PRE\": \"\",\n             },\n-            dependencies: [],\n-            origin: Library {\n-                repo: Some(\n-                    \"https://github.com/rust-lang/regex\",\n+        },\n+        dependencies: [],\n+        origin: Library {\n+            repo: Some(\n+                \"https://github.com/rust-lang/regex\",\n+            ),\n+            name: \"regex\",\n+        },\n+        is_proc_macro: false,\n+        target_layout: Err(\n+            \"target_data_layout not loaded\",\n+        ),\n+        channel: None,\n+    },\n+    8: CrateData {\n+        root_file_id: FileId(\n+            4,\n+        ),\n+        edition: Edition2021,\n+        version: Some(\n+            \"0.1.0\",\n+        ),\n+        display_name: Some(\n+            CrateDisplayName {\n+                crate_name: CrateName(\n+                    \"ra_playground\",\n                 ),\n-                name: \"regex-syntax\",\n+                canonical_name: \"ra-playground\",\n+            },\n+        ),\n+        cfg_options: CfgOptions(\n+            [\n+                \"debug_assertions\",\n+                \"test\",\n+            ],\n+        ),\n+        potential_cfg_options: None,\n+        env: Env {\n+            entries: {\n+                \"CARGO_PKG_LICENSE\": \"\",\n+                \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n+                \"CARGO_MANIFEST_DIR\": \"$ROOT$ra-playground\",\n+                \"CARGO_PKG_VERSION\": \"0.1.0\",\n+                \"CARGO_PKG_AUTHORS\": \"\",\n+                \"CARGO_CRATE_NAME\": \"ra_playground\",\n+                \"CARGO_PKG_LICENSE_FILE\": \"\",\n+                \"CARGO_PKG_HOMEPAGE\": \"\",\n+                \"CARGO_PKG_DESCRIPTION\": \"\",\n+                \"CARGO_PKG_NAME\": \"ra-playground\",\n+                \"CARGO_PKG_VERSION_PATCH\": \"0\",\n+                \"CARGO\": \"cargo\",\n+                \"CARGO_PKG_REPOSITORY\": \"\",\n+                \"CARGO_PKG_VERSION_MINOR\": \"1\",\n+                \"CARGO_PKG_VERSION_PRE\": \"\",\n             },\n-            is_proc_macro: false,\n-            target_layout: Err(\n-                \"target_data_layout not loaded\",\n+        },\n+        dependencies: [],\n+        origin: Local {\n+            repo: None,\n+            name: Some(\n+                \"ra-playground\",\n             ),\n-            channel: None,\n         },\n+        is_proc_macro: false,\n+        target_layout: Err(\n+            \"target_data_layout not loaded\",\n+        ),\n+        channel: None,\n     },\n }\n\\ No newline at end of file"}]}