{"sha": "ee48e6d192166be08a57dc4f5ba14256c072e9c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNDhlNmQxOTIxNjZiZTA4YTU3ZGM0ZjViYTE0MjU2YzA3MmU5YzM=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-05-01T13:34:25Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-05-01T17:51:31Z"}, "message": "collections: Implement String::drain(range) according to RFC 574\n\n`.drain(range)` is unstable and under feature(collections_drain).\n\nThis adds a safe way to remove any range of a String as efficiently as\npossible.\n\nAs noted in the code, this drain iterator has none of the memory safety\nissues of the vector version.\n\nRFC tracking issue is #23055", "tree": {"sha": "ee1c9e1b9aefe2a1ba00f426061e27ab60cb8cc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee1c9e1b9aefe2a1ba00f426061e27ab60cb8cc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee48e6d192166be08a57dc4f5ba14256c072e9c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee48e6d192166be08a57dc4f5ba14256c072e9c3", "html_url": "https://github.com/rust-lang/rust/commit/ee48e6d192166be08a57dc4f5ba14256c072e9c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee48e6d192166be08a57dc4f5ba14256c072e9c3/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42bfeec53c266fb0b08ad90d324206bd3d64df16", "url": "https://api.github.com/repos/rust-lang/rust/commits/42bfeec53c266fb0b08ad90d324206bd3d64df16", "html_url": "https://github.com/rust-lang/rust/commit/42bfeec53c266fb0b08ad90d324206bd3d64df16"}], "stats": {"total": 127, "additions": 126, "deletions": 1}, "files": [{"sha": "7177318be3b9b82afe86697244c4f68570b5847b", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 107, "deletions": 1, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/ee48e6d192166be08a57dc4f5ba14256c072e9c3/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee48e6d192166be08a57dc4f5ba14256c072e9c3/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=ee48e6d192166be08a57dc4f5ba14256c072e9c3", "patch": "@@ -26,7 +26,8 @@ use rustc_unicode::str as unicode_str;\n use rustc_unicode::str::Utf16Item;\n \n use borrow::{Cow, IntoCow};\n-use str::{self, FromStr, Utf8Error};\n+use range::RangeArgument;\n+use str::{self, FromStr, Utf8Error, Chars};\n use vec::{DerefVec, Vec, as_vec};\n \n /// A growable string stored as a UTF-8 encoded buffer.\n@@ -695,6 +696,59 @@ impl String {\n     pub fn clear(&mut self) {\n         self.vec.clear()\n     }\n+\n+    /// Create a draining iterator that removes the specified range in the string\n+    /// and yields the removed chars from start to end. The element range is\n+    /// removed even if the iterator is not consumed until the end.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if the starting point or end point are not on character boundaries,\n+    /// or if they are out of bounds.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(collections_drain)]\n+    ///\n+    /// let mut s = String::from(\"\u03b1 is alpha, \u03b2 is beta\");\n+    /// let beta_offset = s.find('\u03b2').unwrap_or(s.len());\n+    ///\n+    /// // Remove the range up until the \u03b2 from the string\n+    /// let t: String = s.drain(..beta_offset).collect();\n+    /// assert_eq!(t, \"\u03b1 is alpha, \");\n+    /// assert_eq!(s, \"\u03b2 is beta\");\n+    ///\n+    /// // A full range clears the string\n+    /// s.drain(..);\n+    /// assert_eq!(s, \"\");\n+    /// ```\n+    #[unstable(feature = \"collections_drain\",\n+               reason = \"recently added, matches RFC\")]\n+    pub fn drain<R>(&mut self, range: R) -> Drain where R: RangeArgument<usize> {\n+        // Memory safety\n+        //\n+        // The String version of Drain does not have the memory safety issues\n+        // of the vector version. The data is just plain bytes.\n+        // Because the range removal happens in Drop, if the Drain iterator is leaked,\n+        // the removal will not happen.\n+        let len = self.len();\n+        let start = *range.start().unwrap_or(&0);\n+        let end = *range.end().unwrap_or(&len);\n+\n+        // Take out two simultaneous borrows. The &mut String won't be accessed\n+        // until iteration is over, in Drop.\n+        let self_ptr = self as *mut _;\n+        // slicing does the appropriate bounds checks\n+        let chars_iter = self[start..end].chars();\n+\n+        Drain {\n+            start: start,\n+            end: end,\n+            iter: chars_iter,\n+            string: self_ptr,\n+        }\n+    }\n }\n \n impl FromUtf8Error {\n@@ -1072,3 +1126,55 @@ impl fmt::Write for String {\n         Ok(())\n     }\n }\n+\n+/// A draining iterator for `String`.\n+#[unstable(feature = \"collections_drain\", reason = \"recently added\")]\n+pub struct Drain<'a> {\n+    /// Will be used as &'a mut String in the destructor\n+    string: *mut String,\n+    /// Start of part to remove\n+    start: usize,\n+    /// End of part to remove\n+    end: usize,\n+    /// Current remaining range to remove\n+    iter: Chars<'a>,\n+}\n+\n+unsafe impl<'a> Sync for Drain<'a> {}\n+unsafe impl<'a> Send for Drain<'a> {}\n+\n+#[unstable(feature = \"collections_drain\", reason = \"recently added\")]\n+impl<'a> Drop for Drain<'a> {\n+    fn drop(&mut self) {\n+        unsafe {\n+            // Use Vec::drain. \"Reaffirm\" the bounds checks to avoid\n+            // panic code being inserted again.\n+            let self_vec = (*self.string).as_mut_vec();\n+            if self.start <= self.end && self.end <= self_vec.len() {\n+                self_vec.drain(self.start..self.end);\n+            }\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"collections_drain\", reason = \"recently added\")]\n+impl<'a> Iterator for Drain<'a> {\n+    type Item = char;\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<char> {\n+        self.iter.next()\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.iter.size_hint()\n+    }\n+}\n+\n+#[unstable(feature = \"collections_drain\", reason = \"recently added\")]\n+impl<'a> DoubleEndedIterator for Drain<'a> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<char> {\n+        self.iter.next_back()\n+    }\n+}"}, {"sha": "d4e2ebf4fd137e31a49fb1caa967bae1347f1d8c", "filename": "src/libcollectionstest/string.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ee48e6d192166be08a57dc4f5ba14256c072e9c3/src%2Flibcollectionstest%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee48e6d192166be08a57dc4f5ba14256c072e9c3/src%2Flibcollectionstest%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstring.rs?ref=ee48e6d192166be08a57dc4f5ba14256c072e9c3", "patch": "@@ -348,6 +348,23 @@ fn test_from_iterator() {\n     assert_eq!(s, d);\n }\n \n+#[test]\n+fn test_drain() {\n+    let mut s = String::from(\"\u03b1\u03b2\u03b3\");\n+    assert_eq!(s.drain(2..4).collect::<String>(), \"\u03b2\");\n+    assert_eq!(s, \"\u03b1\u03b3\");\n+\n+    let mut t = String::from(\"abcd\");\n+    t.drain(..0);\n+    assert_eq!(t, \"abcd\");\n+    t.drain(..1);\n+    assert_eq!(t, \"bcd\");\n+    t.drain(3..);\n+    assert_eq!(t, \"bcd\");\n+    t.drain(..);\n+    assert_eq!(t, \"\");\n+}\n+\n #[bench]\n fn bench_with_capacity(b: &mut Bencher) {\n     b.iter(|| {"}, {"sha": "7a845788592296ac769312d585de72f28025e95e", "filename": "src/test/run-pass/sync-send-iterators-in-libcollections.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee48e6d192166be08a57dc4f5ba14256c072e9c3/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee48e6d192166be08a57dc4f5ba14256c072e9c3/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcollections.rs?ref=ee48e6d192166be08a57dc4f5ba14256c072e9c3", "patch": "@@ -21,6 +21,7 @@ use collections::{BitSet, BitVec};\n use collections::{BTreeMap, BTreeSet};\n use collections::EnumSet;\n use collections::LinkedList;\n+use collections::String;\n use collections::Vec;\n use collections::VecDeque;\n use collections::VecMap;\n@@ -99,4 +100,5 @@ fn main() {\n \n     all_sync_send!(Vec::<usize>::new(), into_iter);\n     is_sync_send!(Vec::<usize>::new(), drain(..));\n+    is_sync_send!(String::new(), drain(..));\n }"}]}