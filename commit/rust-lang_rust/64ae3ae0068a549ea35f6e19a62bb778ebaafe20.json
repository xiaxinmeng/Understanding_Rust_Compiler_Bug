{"sha": "64ae3ae0068a549ea35f6e19a62bb778ebaafe20", "node_id": "C_kwDOAAsO6NoAKDY0YWUzYWUwMDY4YTU0OWVhMzVmNmUxOWE2MmJiNzc4ZWJhYWZlMjA", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-02-02T03:24:45Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-02-15T05:19:59Z"}, "message": "Overhaul `Const`.\n\nSpecifically, rename the `Const` struct as `ConstS` and re-introduce `Const` as\nthis:\n```\npub struct Const<'tcx>(&'tcx Interned<ConstS>);\n```\nThis now matches `Ty` and `Predicate` more closely, including using\npointer-based `eq` and `hash`.\n\nNotable changes:\n- `mk_const` now takes a `ConstS`.\n- `Const` was copy, despite being 48 bytes. Now `ConstS` is not, so need a\n  we need separate arena for it, because we can't use the `Dropless` one any\n  more.\n- Many `&'tcx Const<'tcx>`/`&Const<'tcx>` to `Const<'tcx>` changes\n- Many `ct.ty` to `ct.ty()` and `ct.val` to `ct.val()` changes.\n- Lots of tedious sigil fiddling.", "tree": {"sha": "602ce5146d25440d3b39a1e847c7f2bbd73c76bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/602ce5146d25440d3b39a1e847c7f2bbd73c76bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64ae3ae0068a549ea35f6e19a62bb778ebaafe20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64ae3ae0068a549ea35f6e19a62bb778ebaafe20", "html_url": "https://github.com/rust-lang/rust/commit/64ae3ae0068a549ea35f6e19a62bb778ebaafe20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64ae3ae0068a549ea35f6e19a62bb778ebaafe20/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d071ce1d5774a6bd93a623df1a3cabf940b12b46", "url": "https://api.github.com/repos/rust-lang/rust/commits/d071ce1d5774a6bd93a623df1a3cabf940b12b46", "html_url": "https://github.com/rust-lang/rust/commit/d071ce1d5774a6bd93a623df1a3cabf940b12b46"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "27db6388136139e1789e570826078a7ddaeba901", "filename": "clippy_lints/src/large_const_arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64ae3ae0068a549ea35f6e19a62bb778ebaafe20/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ae3ae0068a549ea35f6e19a62bb778ebaafe20/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=64ae3ae0068a549ea35f6e19a62bb778ebaafe20", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeConstArrays {\n             if let ItemKind::Const(hir_ty, _) = &item.kind;\n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n             if let ty::Array(element_type, cst) = ty.kind();\n-            if let ConstKind::Value(ConstValue::Scalar(element_count)) = cst.val;\n+            if let ConstKind::Value(ConstValue::Scalar(element_count)) = cst.val();\n             if let Ok(element_count) = element_count.to_machine_usize(&cx.tcx);\n             if let Ok(element_size) = cx.layout_of(*element_type).map(|l| l.size.bytes());\n             if self.maximum_allowed_size < element_count * element_size;"}, {"sha": "57b0d709acd4de9dcc4efef8062a037ddac23396", "filename": "clippy_lints/src/large_stack_arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64ae3ae0068a549ea35f6e19a62bb778ebaafe20/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ae3ae0068a549ea35f6e19a62bb778ebaafe20/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=64ae3ae0068a549ea35f6e19a62bb778ebaafe20", "patch": "@@ -43,7 +43,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeStackArrays {\n         if_chain! {\n             if let ExprKind::Repeat(_, _) = expr.kind;\n             if let ty::Array(element_type, cst) = cx.typeck_results().expr_ty(expr).kind();\n-            if let ConstKind::Value(ConstValue::Scalar(element_count)) = cst.val;\n+            if let ConstKind::Value(ConstValue::Scalar(element_count)) = cst.val();\n             if let Ok(element_count) = element_count.to_machine_usize(&cx.tcx);\n             if let Ok(element_size) = cx.layout_of(*element_type).map(|l| l.size.bytes());\n             if self.maximum_allowed_size < element_count * element_size;"}, {"sha": "3ba99403f06d005645138f6511fd9e1c3d5418e9", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64ae3ae0068a549ea35f6e19a62bb778ebaafe20/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ae3ae0068a549ea35f6e19a62bb778ebaafe20/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=64ae3ae0068a549ea35f6e19a62bb778ebaafe20", "patch": "@@ -136,14 +136,14 @@ fn is_value_unfrozen_raw<'tcx>(\n     result: Result<ConstValue<'tcx>, ErrorHandled>,\n     ty: Ty<'tcx>,\n ) -> bool {\n-    fn inner<'tcx>(cx: &LateContext<'tcx>, val: &'tcx Const<'tcx>) -> bool {\n-        match val.ty.kind() {\n+    fn inner<'tcx>(cx: &LateContext<'tcx>, val: Const<'tcx>) -> bool {\n+        match val.ty().kind() {\n             // the fact that we have to dig into every structs to search enums\n             // leads us to the point checking `UnsafeCell` directly is the only option.\n             ty::Adt(ty_def, ..) if Some(ty_def.did) == cx.tcx.lang_items().unsafe_cell_type() => true,\n             ty::Array(..) | ty::Adt(..) | ty::Tuple(..) => {\n                 let val = cx.tcx.destructure_const(cx.param_env.and(val));\n-                val.fields.iter().any(|field| inner(cx, field))\n+                val.fields.iter().any(|field| inner(cx, *field))\n             },\n             _ => false,\n         }"}, {"sha": "d40583c47dd7074a8c069c0656652fdcf4652509", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/64ae3ae0068a549ea35f6e19a62bb778ebaafe20/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ae3ae0068a549ea35f6e19a62bb778ebaafe20/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=64ae3ae0068a549ea35f6e19a62bb778ebaafe20", "patch": "@@ -567,11 +567,11 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n     }\n }\n \n-pub fn miri_to_const(result: &ty::Const<'_>) -> Option<Constant> {\n+pub fn miri_to_const(result: ty::Const<'_>) -> Option<Constant> {\n     use rustc_middle::mir::interpret::ConstValue;\n-    match result.val {\n+    match result.val() {\n         ty::ConstKind::Value(ConstValue::Scalar(Scalar::Int(int))) => {\n-            match result.ty.kind() {\n+            match result.ty().kind() {\n                 ty::Bool => Some(Constant::Bool(int == ScalarInt::TRUE)),\n                 ty::Uint(_) | ty::Int(_) => Some(Constant::Int(int.assert_bits(int.size()))),\n                 ty::Float(FloatTy::F32) => Some(Constant::F32(f32::from_bits(\n@@ -590,7 +590,7 @@ pub fn miri_to_const(result: &ty::Const<'_>) -> Option<Constant> {\n                 _ => None,\n             }\n         },\n-        ty::ConstKind::Value(ConstValue::Slice { data, start, end }) => match result.ty.kind() {\n+        ty::ConstKind::Value(ConstValue::Slice { data, start, end }) => match result.ty().kind() {\n             ty::Ref(_, tam, _) => match tam.kind() {\n                 ty::Str => String::from_utf8(\n                     data.inspect_with_uninit_and_ptr_outside_interpreter(start..end)\n@@ -602,9 +602,9 @@ pub fn miri_to_const(result: &ty::Const<'_>) -> Option<Constant> {\n             },\n             _ => None,\n         },\n-        ty::ConstKind::Value(ConstValue::ByRef { alloc, offset: _ }) => match result.ty.kind() {\n+        ty::ConstKind::Value(ConstValue::ByRef { alloc, offset: _ }) => match result.ty().kind() {\n             ty::Array(sub_type, len) => match sub_type.kind() {\n-                ty::Float(FloatTy::F32) => match miri_to_const(len) {\n+                ty::Float(FloatTy::F32) => match miri_to_const(*len) {\n                     Some(Constant::Int(len)) => alloc\n                         .inspect_with_uninit_and_ptr_outside_interpreter(0..(4 * len as usize))\n                         .to_owned()\n@@ -618,7 +618,7 @@ pub fn miri_to_const(result: &ty::Const<'_>) -> Option<Constant> {\n                         .map(Constant::Vec),\n                     _ => None,\n                 },\n-                ty::Float(FloatTy::F64) => match miri_to_const(len) {\n+                ty::Float(FloatTy::F64) => match miri_to_const(*len) {\n                     Some(Constant::Int(len)) => alloc\n                         .inspect_with_uninit_and_ptr_outside_interpreter(0..(8 * len as usize))\n                         .to_owned()"}]}