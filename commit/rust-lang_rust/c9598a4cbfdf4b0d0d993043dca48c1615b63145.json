{"sha": "c9598a4cbfdf4b0d0d993043dca48c1615b63145", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NTk4YTRjYmZkZjRiMGQwZDk5MzA0M2RjYTQ4YzE2MTViNjMxNDU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-29T15:19:49Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-29T15:19:49Z"}, "message": "Add some lint completion tests", "tree": {"sha": "b889e39b10c90f253bb23aeb2fdde8c8da8e55e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b889e39b10c90f253bb23aeb2fdde8c8da8e55e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9598a4cbfdf4b0d0d993043dca48c1615b63145", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9598a4cbfdf4b0d0d993043dca48c1615b63145", "html_url": "https://github.com/rust-lang/rust/commit/c9598a4cbfdf4b0d0d993043dca48c1615b63145", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9598a4cbfdf4b0d0d993043dca48c1615b63145/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "247faf271b9098624cb0b09dd4914da66497dd5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/247faf271b9098624cb0b09dd4914da66497dd5a", "html_url": "https://github.com/rust-lang/rust/commit/247faf271b9098624cb0b09dd4914da66497dd5a"}], "stats": {"total": 97, "additions": 67, "deletions": 30}, "files": [{"sha": "13d5b90c99ec82080c5bc0d397f650e3380c5970", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c9598a4cbfdf4b0d0d993043dca48c1615b63145/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9598a4cbfdf4b0d0d993043dca48c1615b63145/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=c9598a4cbfdf4b0d0d993043dca48c1615b63145", "patch": "@@ -3,8 +3,6 @@\n //! This module uses a bit of static metadata to provide completions\n //! for built-in attributes.\n \n-use std::mem;\n-\n use once_cell::sync::Lazy;\n use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::{ast, AstNode, NodeOrToken, SyntaxKind, T};\n@@ -272,27 +270,27 @@ const ATTRIBUTES: &[AttrCompletion] = &[\n fn parse_comma_sep_input(derive_input: ast::TokenTree) -> Option<FxHashSet<String>> {\n     let (l_paren, r_paren) = derive_input.l_paren_token().zip(derive_input.r_paren_token())?;\n     let mut input_derives = FxHashSet::default();\n-    let mut current_derive = String::new();\n-    for token in derive_input\n+    let mut tokens = derive_input\n         .syntax()\n         .children_with_tokens()\n         .filter_map(NodeOrToken::into_token)\n         .skip_while(|token| token != &l_paren)\n         .skip(1)\n         .take_while(|token| token != &r_paren)\n-    {\n-        if token.kind() == T![,] {\n-            if !current_derive.is_empty() {\n-                input_derives.insert(mem::take(&mut current_derive));\n-            }\n-        } else {\n-            current_derive.push_str(token.text().trim());\n+        .peekable();\n+    let mut input = String::new();\n+    while tokens.peek().is_some() {\n+        for token in tokens.by_ref().take_while(|t| t.kind() != T![,]) {\n+            input.push_str(token.text());\n         }\n-    }\n \n-    if !current_derive.is_empty() {\n-        input_derives.insert(current_derive);\n+        if !input.is_empty() {\n+            input_derives.insert(input.trim().to_owned());\n+        }\n+\n+        input.clear();\n     }\n+\n     Some(input_derives)\n }\n "}, {"sha": "634c0cb00d948bc440ca253caef9182baab61091", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c9598a4cbfdf4b0d0d993043dca48c1615b63145/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9598a4cbfdf4b0d0d993043dca48c1615b63145/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=c9598a4cbfdf4b0d0d993043dca48c1615b63145", "patch": "@@ -45,6 +45,7 @@ pub(super) fn complete_derive(\n         }\n     }\n }\n+\n fn get_derive_names_in_scope(ctx: &CompletionContext) -> FxHashSet<String> {\n     let mut result = FxHashSet::default();\n     ctx.scope.process_all_names(&mut |name, scope_def| {\n@@ -89,12 +90,14 @@ mod tests {\n     }\n \n     #[test]\n-    fn empty_derive_completion() {\n+    fn no_completion_for_incorrect_derive() {\n+        check(r#\"#[derive{$0)] struct Test;\"#, expect![[]])\n+    }\n+\n+    #[test]\n+    fn empty_derive() {\n         check(\n-            r#\"\n-#[derive($0)]\n-struct Test {}\n-        \"#,\n+            r#\"#[derive($0)] struct Test;\"#,\n             expect![[r#\"\n                 at Clone\n                 at Clone, Copy\n@@ -110,23 +113,26 @@ struct Test {}\n     }\n \n     #[test]\n-    fn no_completion_for_incorrect_derive() {\n+    fn derive_with_input() {\n         check(\n-            r#\"\n-#[derive{$0)]\n-struct Test {}\n-\"#,\n-            expect![[r#\"\"#]],\n+            r#\"#[derive(serde::Serialize, PartialEq, $0)] struct Test;\"#,\n+            expect![[r#\"\n+                at Clone\n+                at Clone, Copy\n+                at Debug\n+                at Default\n+                at Hash\n+                at Eq\n+                at PartialOrd\n+                at Eq, PartialOrd, Ord\n+            \"#]],\n         )\n     }\n \n     #[test]\n-    fn derive_with_input_completion() {\n+    fn derive_with_input2() {\n         check(\n-            r#\"\n-#[derive(serde::Serialize, PartialEq, $0)]\n-struct Test {}\n-\"#,\n+            r#\"#[derive($0 serde::Serialize, PartialEq)] struct Test;\"#,\n             expect![[r#\"\n                 at Clone\n                 at Clone, Copy"}, {"sha": "403630dce46a8c235fcaa90323ad6a73c6c026d1", "filename": "crates/ide_completion/src/completions/attribute/lint.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c9598a4cbfdf4b0d0d993043dca48c1615b63145/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9598a4cbfdf4b0d0d993043dca48c1615b63145/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs?ref=c9598a4cbfdf4b0d0d993043dca48c1615b63145", "patch": "@@ -152,3 +152,36 @@ pub(super) const DEFAULT_LINT_COMPLETIONS: &[LintCompletion] = &[\n     LintCompletion { label: \"unconditional_panic\", description: r#\"operation will cause a panic at runtime\"# },\n     LintCompletion { label: \"unknown_crate_types\", description: r#\"unknown crate type found in `#[crate_type]` directive\"# },\n ];\n+\n+#[cfg(test)]\n+mod tests {\n+\n+    use crate::test_utils::check_edit;\n+\n+    #[test]\n+    fn check_empty() {\n+        check_edit(\n+            \"deprecated\",\n+            r#\"#[allow($0)] struct Test;\"#,\n+            r#\"#[allow(deprecated)] struct Test;\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn check_with_existing() {\n+        check_edit(\n+            \"deprecated\",\n+            r#\"#[allow(keyword_idents, $0)] struct Test;\"#,\n+            r#\"#[allow(keyword_idents, deprecated)] struct Test;\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn check_qualified() {\n+        check_edit(\n+            \"deprecated\",\n+            r#\"#[allow(keyword_idents, $0)] struct Test;\"#,\n+            r#\"#[allow(keyword_idents, deprecated)] struct Test;\"#,\n+        )\n+    }\n+}"}]}