{"sha": "ca328e1bb4629f7a3ef26c23b759781c4b90588c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMzI4ZTFiYjQ2MjlmN2EzZWYyNmMyM2I3NTk3ODFjNGI5MDU4OGM=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-01-02T21:47:15Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-01-04T18:38:11Z"}, "message": "Simplify code further", "tree": {"sha": "7a7f04b2250cad44c90156beac7eaa27594c0271", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a7f04b2250cad44c90156beac7eaa27594c0271"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca328e1bb4629f7a3ef26c23b759781c4b90588c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca328e1bb4629f7a3ef26c23b759781c4b90588c", "html_url": "https://github.com/rust-lang/rust/commit/ca328e1bb4629f7a3ef26c23b759781c4b90588c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca328e1bb4629f7a3ef26c23b759781c4b90588c/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3fe2590f583e4bb36fd39b7ce32924f696b5081", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3fe2590f583e4bb36fd39b7ce32924f696b5081", "html_url": "https://github.com/rust-lang/rust/commit/c3fe2590f583e4bb36fd39b7ce32924f696b5081"}], "stats": {"total": 37, "additions": 11, "deletions": 26}, "files": [{"sha": "b9e58f79a5141029471342e9e9af86a94223bc34", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ca328e1bb4629f7a3ef26c23b759781c4b90588c/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca328e1bb4629f7a3ef26c23b759781c4b90588c/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=ca328e1bb4629f7a3ef26c23b759781c4b90588c", "patch": "@@ -242,20 +242,14 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                     return;\n                 }\n \n-                let lvalue = self.trans_lvalue(&bcx, location);\n+                let mut lvalue = self.trans_lvalue(&bcx, location);\n                 let drop_fn = glue::get_drop_glue(bcx.ccx, ty);\n                 let drop_ty = glue::get_drop_glue_type(bcx.ccx.shared(), ty);\n-                let ptr = if bcx.ccx.shared().type_is_sized(ty) {\n-                    let value = if drop_ty != ty {\n-                        bcx.pointercast(lvalue.llval, type_of::type_of(bcx.ccx, drop_ty).ptr_to())\n-                    } else {\n-                        lvalue.llval\n-                    };\n-                    LvalueRef::new_sized_ty(value, ty)\n-                } else {\n-                    LvalueRef::new_unsized_ty(lvalue.llval, lvalue.llextra, ty)\n-                };\n-                let args = &[ptr.llval, ptr.llextra][..1 + ptr.has_extra() as usize];\n+                if bcx.ccx.shared().type_is_sized(ty) && drop_ty != ty {\n+                    lvalue.llval = bcx.pointercast(\n+                        lvalue.llval, type_of::type_of(bcx.ccx, drop_ty).ptr_to());\n+                }\n+                let args = &[lvalue.llval, lvalue.llextra][..1 + lvalue.has_extra() as usize];\n                 if let Some(unwind) = unwind {\n                     bcx.invoke(\n                         drop_fn,"}, {"sha": "bd6e70639bba540e4396742fdd5187ea5fc0bedf", "filename": "src/librustc_trans/mir/lvalue.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ca328e1bb4629f7a3ef26c23b759781c4b90588c/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca328e1bb4629f7a3ef26c23b759781c4b90588c/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Flvalue.rs?ref=ca328e1bb4629f7a3ef26c23b759781c4b90588c", "patch": "@@ -50,13 +50,6 @@ impl<'a, 'tcx> LvalueRef<'tcx> {\n         LvalueRef::new_sized(llval, LvalueTy::from_ty(ty))\n     }\n \n-    pub fn new_unsized(llval: ValueRef, llextra: ValueRef, ty: LvalueTy<'tcx>) -> LvalueRef<'tcx> {\n-        LvalueRef {\n-            llval: llval,\n-            llextra: llextra,\n-            ty: ty,\n-        }\n-    }\n     pub fn new_unsized_ty(llval: ValueRef, llextra: ValueRef, ty: Ty<'tcx>) -> LvalueRef<'tcx> {\n         LvalueRef {\n             llval: llval,\n@@ -81,7 +74,7 @@ impl<'a, 'tcx> LvalueRef<'tcx> {\n         !self.llextra.is_null()\n     }\n \n-    pub fn struct_field_ptr(\n+    fn struct_field_ptr(\n         self,\n         bcx: &Builder<'a, 'tcx>,\n         st: &layout::Struct,\n@@ -298,14 +291,12 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                 let (llprojected, llextra) = match projection.elem {\n                     mir::ProjectionElem::Deref => bug!(),\n                     mir::ProjectionElem::Field(ref field, _) => {\n-                        let is_sized = self.ccx.shared().type_is_sized(projected_ty.to_ty(tcx));\n-                        let base = if is_sized {\n-                            LvalueRef::new_sized(tr_base.llval, tr_base.ty)\n+                        let llextra = if self.ccx.shared().type_is_sized(projected_ty.to_ty(tcx)) {\n+                            ptr::null_mut()\n                         } else {\n-                            LvalueRef::new_unsized(tr_base.llval, tr_base.llextra, tr_base.ty)\n+                            tr_base.llextra\n                         };\n-                        let llprojected = base.trans_field_ptr(bcx, field.index());\n-                        (llprojected, base.llextra)\n+                        (tr_base.trans_field_ptr(bcx, field.index()), llextra)\n                     }\n                     mir::ProjectionElem::Index(ref index) => {\n                         let index = self.trans_operand(bcx, index);"}]}