{"sha": "0de9485038a5a068644efbfa397feec6d02e05ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZTk0ODUwMzhhNWEwNjg2NDRlZmJmYTM5N2ZlZWM2ZDAyZTA1ZWE=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-06-07T17:22:42Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-09-17T14:31:55Z"}, "message": "Get rid of special const intrinsic query in favour of `const_eval`", "tree": {"sha": "7fe630e4c2870bbb78245e0e91f01ee0e1e072f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fe630e4c2870bbb78245e0e91f01ee0e1e072f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0de9485038a5a068644efbfa397feec6d02e05ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0de9485038a5a068644efbfa397feec6d02e05ea", "html_url": "https://github.com/rust-lang/rust/commit/0de9485038a5a068644efbfa397feec6d02e05ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0de9485038a5a068644efbfa397feec6d02e05ea/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5670d048c0f88af9976b5505c7853b23dd06770d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5670d048c0f88af9976b5505c7853b23dd06770d", "html_url": "https://github.com/rust-lang/rust/commit/5670d048c0f88af9976b5505c7853b23dd06770d"}], "stats": {"total": 247, "additions": 117, "deletions": 130}, "files": [{"sha": "67b3ce0e63fb0d24c5acc75ad5084f994ce6b797", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=0de9485038a5a068644efbfa397feec6d02e05ea", "patch": "@@ -213,6 +213,15 @@ fn print_backtrace(backtrace: &mut Backtrace) {\n     eprintln!(\"\\n\\nAn error occurred in miri:\\n{:?}\", backtrace);\n }\n \n+impl From<ErrorHandled> for InterpErrorInfo<'tcx> {\n+    fn from(err: ErrorHandled) -> Self {\n+        match err {\n+            ErrorHandled::Reported => err_inval!(ReferencedConstant),\n+            ErrorHandled::TooGeneric => err_inval!(TooGeneric),\n+        }.into()\n+    }\n+}\n+\n impl<'tcx> From<InterpError<'tcx>> for InterpErrorInfo<'tcx> {\n     fn from(kind: InterpError<'tcx>) -> Self {\n         let backtrace = match env::var(\"RUSTC_CTFE_BACKTRACE\") {"}, {"sha": "c7260945295a6e4c294dd48809ae030d64ffa945", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=0de9485038a5a068644efbfa397feec6d02e05ea", "patch": "@@ -462,15 +462,6 @@ rustc_queries! {\n             no_force\n             desc { \"extract field of const\" }\n         }\n-\n-        /// Produces an absolute path representation of the given type. See also the documentation\n-        /// on `std::any::type_name`.\n-        query type_name(key: Ty<'tcx>) -> &'tcx ty::Const<'tcx> {\n-            eval_always\n-            no_force\n-            desc { \"get absolute path of type\" }\n-        }\n-\n     }\n \n     TypeChecking {"}, {"sha": "3f3c5ac1460a315d17bc8ced0c0fd1ce271c5652", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=0de9485038a5a068644efbfa397feec6d02e05ea", "patch": "@@ -15,6 +15,7 @@ use rustc_codegen_ssa::glue;\n use rustc_codegen_ssa::base::{to_immediate, wants_msvc_seh, compare_simd_types};\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::{self, LayoutOf, HasTyCtxt, Primitive};\n+use rustc::mir::interpret::GlobalId;\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind};\n use rustc::hir;\n use syntax::ast::{self, FloatTy};\n@@ -81,13 +82,14 @@ fn get_simple_intrinsic(cx: &CodegenCx<'ll, '_>, name: &str) -> Option<&'ll Valu\n impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n     fn codegen_intrinsic_call(\n         &mut self,\n-        callee_ty: Ty<'tcx>,\n+        instance: ty::Instance<'tcx>,\n         fn_ty: &FnType<'tcx, Ty<'tcx>>,\n         args: &[OperandRef<'tcx, &'ll Value>],\n         llresult: &'ll Value,\n         span: Span,\n     ) {\n         let tcx = self.tcx;\n+        let callee_ty = instance.ty(tcx);\n \n         let (def_id, substs) = match callee_ty.sty {\n             ty::FnDef(def_id, substs) => (def_id, substs),\n@@ -133,10 +135,6 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 let llfn = self.get_intrinsic(&(\"llvm.debugtrap\"));\n                 self.call(llfn, &[], None)\n             }\n-            \"size_of\" => {\n-                let tp_ty = substs.type_at(0);\n-                self.const_usize(self.size_of(tp_ty).bytes())\n-            }\n             \"va_start\" => {\n                 self.va_start(args[0].immediate())\n             }\n@@ -188,10 +186,6 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                     self.const_usize(self.size_of(tp_ty).bytes())\n                 }\n             }\n-            \"min_align_of\" => {\n-                let tp_ty = substs.type_at(0);\n-                self.const_usize(self.align_of(tp_ty).bytes())\n-            }\n             \"min_align_of_val\" => {\n                 let tp_ty = substs.type_at(0);\n                 if let OperandValue::Pair(_, meta) = args[0].val {\n@@ -201,18 +195,19 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                     self.const_usize(self.align_of(tp_ty).bytes())\n                 }\n             }\n-            \"pref_align_of\" => {\n-                let tp_ty = substs.type_at(0);\n-                self.const_usize(self.layout_of(tp_ty).align.pref.bytes())\n-            }\n+            \"size_of\" |\n+            \"pref_align_of\" |\n+            \"min_align_of\" |\n+            \"needs_drop\" |\n+            \"type_id\" |\n             \"type_name\" => {\n-                let tp_ty = substs.type_at(0);\n-                let ty_name = self.tcx.type_name(tp_ty);\n+                let gid = GlobalId {\n+                    instance,\n+                    promoted: None,\n+                };\n+                let ty_name = self.tcx.const_eval(ty::ParamEnv::reveal_all().and(gid)).unwrap();\n                 OperandRef::from_const(self, ty_name).immediate_or_packed_pair(self)\n             }\n-            \"type_id\" => {\n-                self.const_u64(self.tcx.type_id_hash(substs.type_at(0)))\n-            }\n             \"init\" => {\n                 let ty = substs.type_at(0);\n                 if !self.layout_of(ty).is_zst() {\n@@ -235,11 +230,6 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             \"uninit\" | \"forget\" => {\n                 return;\n             }\n-            \"needs_drop\" => {\n-                let tp_ty = substs.type_at(0);\n-\n-                self.const_bool(self.type_needs_drop(tp_ty))\n-            }\n             \"offset\" => {\n                 let ptr = args[0].immediate();\n                 let offset = args[1].immediate();"}, {"sha": "1bb0ea5dae44b4c21676fee9955281a6e7490725", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=0de9485038a5a068644efbfa397feec6d02e05ea", "patch": "@@ -667,8 +667,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }).collect();\n \n \n-            let callee_ty = instance.as_ref().unwrap().ty(bx.tcx());\n-            bx.codegen_intrinsic_call(callee_ty, &fn_ty, &args, dest,\n+            bx.codegen_intrinsic_call(*instance.as_ref().unwrap(), &fn_ty, &args, dest,\n                                       terminator.source_info.span);\n \n             if let ReturnDest::IndirectOperand(dst, _) = ret_dest {"}, {"sha": "7c79cd6021031d7691328453e672272ffdb657b6", "filename": "src/librustc_codegen_ssa/traits/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Flibrustc_codegen_ssa%2Ftraits%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Flibrustc_codegen_ssa%2Ftraits%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fintrinsic.rs?ref=0de9485038a5a068644efbfa397feec6d02e05ea", "patch": "@@ -1,6 +1,6 @@\n use super::BackendTypes;\n use crate::mir::operand::OperandRef;\n-use rustc::ty::Ty;\n+use rustc::ty::{self, Ty};\n use rustc_target::abi::call::FnType;\n use syntax_pos::Span;\n \n@@ -10,7 +10,7 @@ pub trait IntrinsicCallMethods<'tcx>: BackendTypes {\n     /// add them to librustc_codegen_llvm/context.rs\n     fn codegen_intrinsic_call(\n         &mut self,\n-        callee_ty: Ty<'tcx>,\n+        instance: ty::Instance<'tcx>,\n         fn_ty: &FnType<'tcx, Ty<'tcx>>,\n         args: &[OperandRef<'tcx, Self::Value>],\n         llresult: Self::Value,"}, {"sha": "435159827e6c30d419b0e3ecc008ccf8adedfb82", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=0de9485038a5a068644efbfa397feec6d02e05ea", "patch": "@@ -15,6 +15,7 @@ use rustc::ty::{self, Ty, TyCtxt, subst::Subst};\n use rustc::ty::layout::{self, LayoutOf, VariantIdx};\n use rustc::traits::Reveal;\n use rustc_data_structures::fx::FxHashMap;\n+use crate::interpret::eval_nullary_intrinsic;\n \n use syntax::source_map::{Span, DUMMY_SP};\n \n@@ -602,6 +603,23 @@ pub fn const_eval_provider<'tcx>(\n             other => return other,\n         }\n     }\n+\n+    // We call `const_eval` for zero arg intrinsics, too, in order to cache their value.\n+    // Catch such calls and evaluate them instead of trying to load a constant's MIR.\n+    if let ty::InstanceDef::Intrinsic(def_id) = key.value.instance.def {\n+        let ty = key.value.instance.ty(tcx);\n+        let substs = match ty.sty {\n+            ty::FnDef(_, substs) => substs,\n+            _ => bug!(\"intrinsic with type {:?}\", ty),\n+        };\n+        return eval_nullary_intrinsic(tcx, key.param_env, def_id, substs)\n+            .map_err(|error| {\n+                let span = tcx.def_span(def_id);\n+                let error = ConstEvalErr { error: error.kind, stacktrace: vec![], span };\n+                error.report_as_error(tcx.at(span), \"could not evaluate nullary intrinsic\")\n+            })\n+    }\n+\n     tcx.const_eval_raw(key).and_then(|val| {\n         validate_and_turn_into_const(tcx, val, key)\n     })"}, {"sha": "78996ed6939d8148a19624b7cc4ec4dc6b7e8ebb", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=0de9485038a5a068644efbfa397feec6d02e05ea", "patch": "@@ -14,7 +14,6 @@ use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::query::TyCtxtAt;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::mir::interpret::{\n-    ErrorHandled,\n     GlobalId, Scalar, Pointer, FrameInfo, AllocId,\n     InterpResult, truncate, sign_extend,\n };\n@@ -672,14 +671,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Our result will later be validated anyway, and there seems no good reason\n         // to have to fail early here.  This is also more consistent with\n         // `Memory::get_static_alloc` which has to use `const_eval_raw` to avoid cycles.\n-        let val = self.tcx.const_eval_raw(param_env.and(gid)).map_err(|err| {\n-            match err {\n-                ErrorHandled::Reported =>\n-                    err_inval!(ReferencedConstant),\n-                ErrorHandled::TooGeneric =>\n-                    err_inval!(TooGeneric),\n-            }\n-        })?;\n+        let val = self.tcx.const_eval_raw(param_env.and(gid))?;\n         self.raw_const_to_mplace(val)\n     }\n "}, {"sha": "ec09e69ec853741e1b24964925e91334263434e6", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 61, "deletions": 38, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=0de9485038a5a068644efbfa397feec6d02e05ea", "patch": "@@ -5,17 +5,18 @@\n use syntax::symbol::Symbol;\n use rustc::ty;\n use rustc::ty::layout::{LayoutOf, Primitive, Size};\n+use rustc::ty::subst::SubstsRef;\n+use rustc::hir::def_id::DefId;\n+use rustc::ty::TyCtxt;\n use rustc::mir::BinOp;\n-use rustc::mir::interpret::{InterpResult, Scalar};\n+use rustc::mir::interpret::{InterpResult, Scalar, GlobalId, ConstValue};\n \n use super::{\n-    Machine, PlaceTy, OpTy, InterpCx, Immediate,\n+    Machine, PlaceTy, OpTy, InterpCx,\n };\n \n mod type_name;\n \n-pub use type_name::*;\n-\n fn numeric_intrinsic<'tcx, Tag>(\n     name: &str,\n     bits: u128,\n@@ -37,6 +38,50 @@ fn numeric_intrinsic<'tcx, Tag>(\n     Ok(Scalar::from_uint(bits_out, size))\n }\n \n+/// The logic for all nullary intrinsics is implemented here. These intrinsics don't get evaluated\n+/// inside an `InterpCx` and instead have their value computed directly from rustc internal info.\n+crate fn eval_nullary_intrinsic<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    def_id: DefId,\n+    substs: SubstsRef<'tcx>,\n+) -> InterpResult<'tcx, &'tcx ty::Const<'tcx>> {\n+    let tp_ty = substs.type_at(0);\n+    let name = &*tcx.item_name(def_id).as_str();\n+    Ok(match name {\n+        \"type_name\" => {\n+            let alloc = type_name::alloc_type_name(tcx, tp_ty);\n+            tcx.mk_const(ty::Const {\n+                val: ConstValue::Slice {\n+                    data: alloc,\n+                    start: 0,\n+                    end: alloc.len(),\n+                },\n+                ty: tcx.mk_static_str(),\n+            })\n+        },\n+        \"needs_drop\" => ty::Const::from_bool(tcx, tp_ty.needs_drop(tcx, param_env)),\n+        \"size_of\" |\n+        \"min_align_of\" |\n+        \"pref_align_of\" => {\n+            let layout = tcx.layout_of(param_env.and(tp_ty)).map_err(|e| err_inval!(Layout(e)))?;\n+            let n = match name {\n+                \"pref_align_of\" => layout.align.pref.bytes(),\n+                \"min_align_of\" => layout.align.abi.bytes(),\n+                \"size_of\" => layout.size.bytes(),\n+                _ => bug!(),\n+            };\n+            ty::Const::from_usize(tcx, n)\n+        },\n+        \"type_id\" => ty::Const::from_bits(\n+            tcx,\n+            tcx.type_id_hash(tp_ty).into(),\n+            param_env.and(tcx.types.u64),\n+        ),\n+        other => bug!(\"`{}` is not a zero arg intrinsic\", other),\n+    })\n+}\n+\n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Returns `true` if emulation happened.\n     pub fn emulate_intrinsic(\n@@ -49,41 +94,19 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         let intrinsic_name = &self.tcx.item_name(instance.def_id()).as_str()[..];\n         match intrinsic_name {\n-            \"min_align_of\" => {\n-                let elem_ty = substs.type_at(0);\n-                let elem_align = self.layout_of(elem_ty)?.align.abi.bytes();\n-                let align_val = Scalar::from_uint(elem_align, dest.layout.size);\n-                self.write_scalar(align_val, dest)?;\n-            }\n-\n-            \"needs_drop\" => {\n-                let ty = substs.type_at(0);\n-                let ty_needs_drop = ty.needs_drop(self.tcx.tcx, self.param_env);\n-                let val = Scalar::from_bool(ty_needs_drop);\n-                self.write_scalar(val, dest)?;\n-            }\n-\n-            \"size_of\" => {\n-                let ty = substs.type_at(0);\n-                let size = self.layout_of(ty)?.size.bytes() as u128;\n-                let size_val = Scalar::from_uint(size, dest.layout.size);\n-                self.write_scalar(size_val, dest)?;\n-            }\n-\n-            \"type_id\" => {\n-                let ty = substs.type_at(0);\n-                let type_id = self.tcx.type_id_hash(ty) as u128;\n-                let id_val = Scalar::from_uint(type_id, dest.layout.size);\n-                self.write_scalar(id_val, dest)?;\n-            }\n-\n+            \"min_align_of\" |\n+            \"pref_align_of\" |\n+            \"needs_drop\" |\n+            \"size_of\" |\n+            \"type_id\" |\n             \"type_name\" => {\n-                let alloc = alloc_type_name(self.tcx.tcx, substs.type_at(0));\n-                let name_id = self.tcx.alloc_map.lock().create_memory_alloc(alloc);\n-                let id_ptr = self.memory.tag_static_base_pointer(name_id.into());\n-                let alloc_len = alloc.size.bytes();\n-                let name_val = Immediate::new_slice(Scalar::Ptr(id_ptr), alloc_len, self);\n-                self.write_immediate(name_val, dest)?;\n+                let gid = GlobalId {\n+                    instance,\n+                    promoted: None,\n+                };\n+                let val = self.tcx.const_eval(self.param_env.and(gid))?;\n+                let val = self.eval_const_to_op(val, None)?;\n+                self.copy_op(val, dest)?;\n             }\n \n             | \"ctpop\""}, {"sha": "1e765a4ed982c7c56c19d1df26803088da0352cb", "filename": "src/librustc_mir/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=0de9485038a5a068644efbfa397feec6d02e05ea", "patch": "@@ -7,7 +7,7 @@ use rustc::ty::{\n use rustc::hir::map::{DefPathData, DisambiguatedDefPathData};\n use rustc::hir::def_id::CrateNum;\n use std::fmt::Write;\n-use rustc::mir::interpret::{Allocation, ConstValue};\n+use rustc::mir::interpret::Allocation;\n \n struct AbsolutePathPrinter<'tcx> {\n     tcx: TyCtxt<'tcx>,\n@@ -213,22 +213,11 @@ impl Write for AbsolutePathPrinter<'_> {\n     }\n }\n \n-/// Produces an absolute path representation of the given type. See also the documentation on\n-/// `std::any::type_name`\n-pub fn type_name<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> &'tcx ty::Const<'tcx> {\n-    let alloc = alloc_type_name(tcx, ty);\n-    tcx.mk_const(ty::Const {\n-        val: ConstValue::Slice {\n-            data: alloc,\n-            start: 0,\n-            end: alloc.len(),\n-        },\n-        ty: tcx.mk_static_str(),\n-    })\n-}\n-\n /// Directly returns an `Allocation` containing an absolute path representation of the given type.\n-pub(super) fn alloc_type_name<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> &'tcx Allocation {\n+crate fn alloc_type_name<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    ty: Ty<'tcx>\n+) -> &'tcx Allocation {\n     let path = AbsolutePathPrinter { tcx, path: String::new() }.print_type(ty).unwrap().path;\n     let alloc = Allocation::from_byte_aligned_bytes(path.into_bytes());\n     tcx.intern_const_alloc(alloc)"}, {"sha": "0c61be283dfd0d8469db45343145e7e5f7332a6a", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=0de9485038a5a068644efbfa397feec6d02e05ea", "patch": "@@ -34,6 +34,6 @@ pub use self::visitor::{ValueVisitor, MutValueVisitor};\n \n pub use self::validity::RefTracking;\n \n-pub(super) use self::intrinsics::type_name;\n-\n pub use self::intern::intern_const_alloc_recursive;\n+\n+crate use self::intrinsics::eval_nullary_intrinsic;"}, {"sha": "034ad5b01d346f2736de87a2859eed2efbf1a7bc", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=0de9485038a5a068644efbfa397feec6d02e05ea", "patch": "@@ -59,5 +59,4 @@ pub fn provide(providers: &mut Providers<'_>) {\n         let (param_env, (value, field)) = param_env_and_value.into_parts();\n         const_eval::const_field(tcx, param_env, None, field, value)\n     };\n-    providers.type_name = interpret::type_name;\n }"}, {"sha": "763f85748736e315a3210f342874e1d09cf926bf", "filename": "src/test/compile-fail/issue-44415.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Ftest%2Fcompile-fail%2Fissue-44415.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Ftest%2Fcompile-fail%2Fissue-44415.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-44415.rs?ref=0de9485038a5a068644efbfa397feec6d02e05ea", "previous_filename": "src/test/ui/issues/issue-44415.rs"}, {"sha": "1ae39e7563a824b2c78b8e6243e1a93d35a69c3b", "filename": "src/test/ui/consts/const-size_of-cycle.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0de9485038a5a068644efbfa397feec6d02e05ea/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr?ref=0de9485038a5a068644efbfa397feec6d02e05ea", "patch": "@@ -14,6 +14,11 @@ note: ...which requires const-evaluating `Foo::bytes::{{constant}}#0`...\n    |\n LL |     intrinsics::size_of::<T>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires const-evaluating + checking `std::intrinsics::size_of`...\n+  --> $SRC_DIR/libcore/intrinsics.rs:LL:COL\n+   |\n+LL |     pub fn size_of<T>() -> usize;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing layout of `Foo`...\n    = note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All, def_id: None }, value: [u8; _] }`...\n    = note: ...which again requires const-evaluating + checking `Foo::bytes::{{constant}}#0`, completing the cycle"}, {"sha": "8008e53f65f4d3150ec23628386aba06b088b0d2", "filename": "src/test/ui/issues/issue-44415.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5670d048c0f88af9976b5505c7853b23dd06770d/src%2Ftest%2Fui%2Fissues%2Fissue-44415.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5670d048c0f88af9976b5505c7853b23dd06770d/src%2Ftest%2Fui%2Fissues%2Fissue-44415.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44415.stderr?ref=5670d048c0f88af9976b5505c7853b23dd06770d", "patch": "@@ -1,28 +0,0 @@\n-error[E0391]: cycle detected when const-evaluating + checking `Foo::bytes::{{constant}}#0`\n-  --> $DIR/issue-44415.rs:6:17\n-   |\n-LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n-   |                 ^^^^^^\n-   |\n-note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}#0`...\n-  --> $DIR/issue-44415.rs:6:17\n-   |\n-LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n-   |                 ^^^^^^\n-note: ...which requires const-evaluating `Foo::bytes::{{constant}}#0`...\n-  --> $DIR/issue-44415.rs:6:26\n-   |\n-LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which requires computing layout of `Foo`...\n-   = note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All, def_id: None }, value: [u8; _] }`...\n-   = note: ...which again requires const-evaluating + checking `Foo::bytes::{{constant}}#0`, completing the cycle\n-note: cycle used when processing `Foo`\n-  --> $DIR/issue-44415.rs:5:1\n-   |\n-LL | struct Foo {\n-   | ^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0391`."}]}