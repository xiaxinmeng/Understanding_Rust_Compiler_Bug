{"sha": "9155f672bf98c49ea7f31cc052488640eb3eb00e", "node_id": "C_kwDOAAsO6NoAKDkxNTVmNjcyYmY5OGM0OWVhN2YzMWNjMDUyNDg4NjQwZWIzZWIwMGU", "commit": {"author": {"name": "Ben Reeves", "email": "benwolverine2019@gmail.com", "date": "2021-11-28T05:10:18Z"}, "committer": {"name": "Ben Reeves", "email": "benwolverine2019@gmail.com", "date": "2021-11-28T05:59:08Z"}, "message": "typeck: Ensure proper bound vars passed to `add_bounds`.\n\nFixes the ICE in #88586.", "tree": {"sha": "8c35b1dd59a8778631f4b3bd3cce4b98db622327", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c35b1dd59a8778631f4b3bd3cce4b98db622327"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9155f672bf98c49ea7f31cc052488640eb3eb00e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9155f672bf98c49ea7f31cc052488640eb3eb00e", "html_url": "https://github.com/rust-lang/rust/commit/9155f672bf98c49ea7f31cc052488640eb3eb00e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9155f672bf98c49ea7f31cc052488640eb3eb00e/comments", "author": {"login": "BGR360", "id": 13339928, "node_id": "MDQ6VXNlcjEzMzM5OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/13339928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BGR360", "html_url": "https://github.com/BGR360", "followers_url": "https://api.github.com/users/BGR360/followers", "following_url": "https://api.github.com/users/BGR360/following{/other_user}", "gists_url": "https://api.github.com/users/BGR360/gists{/gist_id}", "starred_url": "https://api.github.com/users/BGR360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BGR360/subscriptions", "organizations_url": "https://api.github.com/users/BGR360/orgs", "repos_url": "https://api.github.com/users/BGR360/repos", "events_url": "https://api.github.com/users/BGR360/events{/privacy}", "received_events_url": "https://api.github.com/users/BGR360/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BGR360", "id": 13339928, "node_id": "MDQ6VXNlcjEzMzM5OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/13339928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BGR360", "html_url": "https://github.com/BGR360", "followers_url": "https://api.github.com/users/BGR360/followers", "following_url": "https://api.github.com/users/BGR360/following{/other_user}", "gists_url": "https://api.github.com/users/BGR360/gists{/gist_id}", "starred_url": "https://api.github.com/users/BGR360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BGR360/subscriptions", "organizations_url": "https://api.github.com/users/BGR360/orgs", "repos_url": "https://api.github.com/users/BGR360/repos", "events_url": "https://api.github.com/users/BGR360/events{/privacy}", "received_events_url": "https://api.github.com/users/BGR360/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4919988fe1765e51232558647f2260fff3544658", "url": "https://api.github.com/repos/rust-lang/rust/commits/4919988fe1765e51232558647f2260fff3544658", "html_url": "https://github.com/rust-lang/rust/commit/4919988fe1765e51232558647f2260fff3544658"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "856c4972700b858bc77cee058c1474d36b5992c3", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9155f672bf98c49ea7f31cc052488640eb3eb00e/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9155f672bf98c49ea7f31cc052488640eb3eb00e/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=9155f672bf98c49ea7f31cc052488640eb3eb00e", "patch": "@@ -666,7 +666,7 @@ impl ItemCtxt<'tcx> {\n                 Some(assoc_name) => self.bound_defines_assoc_item(b, assoc_name),\n                 None => true,\n             })\n-            .flat_map(|b| predicates_from_bound(self, ty, b));\n+            .flat_map(|b| predicates_from_bound(self, ty, b, ty::List::empty()));\n \n         let param_def_id = self.tcx.hir().local_def_id(param_id).to_def_id();\n         let from_where_clauses = ast_generics\n@@ -685,15 +685,17 @@ impl ItemCtxt<'tcx> {\n                 } else {\n                     None\n                 };\n+                let bvars = self.tcx.late_bound_vars(bp.bounded_ty.hir_id);\n+\n                 bp.bounds\n                     .iter()\n                     .filter(|b| match assoc_name {\n                         Some(assoc_name) => self.bound_defines_assoc_item(b, assoc_name),\n                         None => true,\n                     })\n-                    .filter_map(move |b| bt.map(|bt| (bt, b)))\n+                    .filter_map(move |b| bt.map(|bt| (bt, b, bvars)))\n             })\n-            .flat_map(|(bt, b)| predicates_from_bound(self, bt, b));\n+            .flat_map(|(bt, b, bvars)| predicates_from_bound(self, bt, b, bvars));\n \n         from_ty_params.chain(from_where_clauses).collect()\n     }\n@@ -2433,14 +2435,10 @@ fn predicates_from_bound<'tcx>(\n     astconv: &dyn AstConv<'tcx>,\n     param_ty: Ty<'tcx>,\n     bound: &'tcx hir::GenericBound<'tcx>,\n+    bound_vars: &'tcx ty::List<ty::BoundVariableKind>,\n ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n     let mut bounds = Bounds::default();\n-    astconv.add_bounds(\n-        param_ty,\n-        std::array::IntoIter::new([bound]),\n-        &mut bounds,\n-        ty::List::empty(),\n-    );\n+    astconv.add_bounds(param_ty, std::array::IntoIter::new([bound]), &mut bounds, bound_vars);\n     bounds.predicates(astconv.tcx(), param_ty)\n }\n "}, {"sha": "3f5202827ad5e309ea08fa393f9602d1b7d45972", "filename": "src/test/ui/higher-rank-trait-bounds/issue-88586-hr-self-outlives-in-trait-def.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9155f672bf98c49ea7f31cc052488640eb3eb00e/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-88586-hr-self-outlives-in-trait-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9155f672bf98c49ea7f31cc052488640eb3eb00e/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-88586-hr-self-outlives-in-trait-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-88586-hr-self-outlives-in-trait-def.rs?ref=9155f672bf98c49ea7f31cc052488640eb3eb00e", "patch": "@@ -0,0 +1,11 @@\n+// Regression test for #88586: a higher-ranked outlives bound on Self in a trait\n+// definition caused an ICE when debug_assertions were enabled.\n+//\n+// The error output is incidentally unhelpful; this should be improved.\n+\n+trait A where for<'a> Self: 'a\n+//~^ ERROR the parameter type `Self` may not live long enough\n+{\n+}\n+\n+fn main() {}"}, {"sha": "18618ffcc86dc84098cab2debd2ad05d604dc2ce", "filename": "src/test/ui/higher-rank-trait-bounds/issue-88586-hr-self-outlives-in-trait-def.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9155f672bf98c49ea7f31cc052488640eb3eb00e/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-88586-hr-self-outlives-in-trait-def.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9155f672bf98c49ea7f31cc052488640eb3eb00e/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-88586-hr-self-outlives-in-trait-def.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-88586-hr-self-outlives-in-trait-def.stderr?ref=9155f672bf98c49ea7f31cc052488640eb3eb00e", "patch": "@@ -0,0 +1,19 @@\n+error[E0311]: the parameter type `Self` may not live long enough\n+  --> $DIR/issue-88586-hr-self-outlives-in-trait-def.rs:6:1\n+   |\n+LL | / trait A where for<'a> Self: 'a\n+LL | |\n+LL | | {\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider adding an explicit lifetime bound `Self: 'a`...\n+   = note: ...so that the type `Self` will meet its required lifetime bounds...\n+note: ...that is required by this bound\n+  --> $DIR/issue-88586-hr-self-outlives-in-trait-def.rs:6:29\n+   |\n+LL | trait A where for<'a> Self: 'a\n+   |                             ^^\n+\n+error: aborting due to previous error\n+"}]}