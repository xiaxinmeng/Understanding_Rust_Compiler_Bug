{"sha": "1f822c8e518132b01d7eda665f6bf7bc254780a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmODIyYzhlNTE4MTMyYjAxZDdlZGE2NjVmNmJmN2JjMjU0NzgwYTc=", "commit": {"author": {"name": "Seivan Heidari", "email": "seivan.heidari@icloud.com", "date": "2019-10-31T09:36:54Z"}, "committer": {"name": "Seivan Heidari", "email": "seivan.heidari@icloud.com", "date": "2019-10-31T09:36:54Z"}, "message": "Adding better debugging for testing themes missing tags and which scopes didn't map.\nSince this file is no longer being pushed upstream, double down on monads.", "tree": {"sha": "fd36b1b6d88548ae630562febca9ad1426dbf42e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd36b1b6d88548ae630562febca9ad1426dbf42e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f822c8e518132b01d7eda665f6bf7bc254780a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f822c8e518132b01d7eda665f6bf7bc254780a7", "html_url": "https://github.com/rust-lang/rust/commit/1f822c8e518132b01d7eda665f6bf7bc254780a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f822c8e518132b01d7eda665f6bf7bc254780a7/comments", "author": {"login": "seivan", "id": 55424, "node_id": "MDQ6VXNlcjU1NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/55424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seivan", "html_url": "https://github.com/seivan", "followers_url": "https://api.github.com/users/seivan/followers", "following_url": "https://api.github.com/users/seivan/following{/other_user}", "gists_url": "https://api.github.com/users/seivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/seivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seivan/subscriptions", "organizations_url": "https://api.github.com/users/seivan/orgs", "repos_url": "https://api.github.com/users/seivan/repos", "events_url": "https://api.github.com/users/seivan/events{/privacy}", "received_events_url": "https://api.github.com/users/seivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "seivan", "id": 55424, "node_id": "MDQ6VXNlcjU1NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/55424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seivan", "html_url": "https://github.com/seivan", "followers_url": "https://api.github.com/users/seivan/followers", "following_url": "https://api.github.com/users/seivan/following{/other_user}", "gists_url": "https://api.github.com/users/seivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/seivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seivan/subscriptions", "organizations_url": "https://api.github.com/users/seivan/orgs", "repos_url": "https://api.github.com/users/seivan/repos", "events_url": "https://api.github.com/users/seivan/events{/privacy}", "received_events_url": "https://api.github.com/users/seivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8edda0e7b164009d6c03bb3d4be603fb38ad2e2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8edda0e7b164009d6c03bb3d4be603fb38ad2e2a", "html_url": "https://github.com/rust-lang/rust/commit/8edda0e7b164009d6c03bb3d4be603fb38ad2e2a"}], "stats": {"total": 103, "additions": 58, "deletions": 45}, "files": [{"sha": "dad99254ebfdbbf554c440ae4e3e11bed1e7bf1c", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f822c8e518132b01d7eda665f6bf7bc254780a7/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1f822c8e518132b01d7eda665f6bf7bc254780a7/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=1f822c8e518132b01d7eda665f6bf7bc254780a7", "patch": "@@ -73,7 +73,10 @@ export class Highlighter {\n                 return [tag, decor];\n             }\n             else {\n-                console.log('Missing theme for: ' + tag);\n+                console.log(' ');\n+                console.log('Missing theme for: <\"' + tag + '\"> for following mapped scopes:')\n+                console.log(scopesMapper.find(tag))\n+                console.log(' ');\n                 const color = new vscode.ThemeColor('ralsp.' + tag);\n                 const decor = vscode.window.createTextEditorDecorationType({\n                     color,"}, {"sha": "76cbbd84e33fb36d2010ae8fc178c2a8c72e2b68", "filename": "editors/code/src/scopes.ts", "status": "modified", "additions": 47, "deletions": 40, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/1f822c8e518132b01d7eda665f6bf7bc254780a7/editors%2Fcode%2Fsrc%2Fscopes.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1f822c8e518132b01d7eda665f6bf7bc254780a7/editors%2Fcode%2Fsrc%2Fscopes.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fscopes.ts?ref=1f822c8e518132b01d7eda665f6bf7bc254780a7", "patch": "@@ -41,61 +41,72 @@ export function load() {\n     }\n }\n \n+function filterThemeExtensions(extension: vscode.Extension<any>): boolean {\n+    return extension.extensionKind === vscode.ExtensionKind.UI &&\n+        extension.packageJSON.contributes &&\n+        extension.packageJSON.contributes.themes\n+}\n+\n+\n+\n // Find current theme on disk\n function loadThemeNamed(themeName: string) {\n \n     const themePaths = vscode.extensions.all\n-        .filter(extension => extension.extensionKind === vscode.ExtensionKind.UI)\n-        .filter(extension => extension.packageJSON.contributes)\n-        .filter(extension => extension.packageJSON.contributes.themes)\n+        .filter(filterThemeExtensions)\n         .reduce((list, extension) => {\n             const paths = extension.packageJSON.contributes.themes\n                 .filter((element: any) => (element.id || element.label) === themeName)\n                 .map((element: any) => path.join(extension.extensionPath, element.path))\n             return list.concat(paths)\n-        }, Array<string>());\n+        }, Array<string>())\n \n \n-    themePaths.forEach(loadThemeFile);\n+    themePaths.forEach(loadThemeFile)\n \n-    const customization: any = vscode.workspace.getConfiguration('editor').get('tokenColorCustomizations');\n-    if (customization && customization.textMateRules) {\n-        loadColors(customization.textMateRules)\n-    }\n-}\n+    const tokenColorCustomizations: [any] = [vscode.workspace.getConfiguration('editor').get('tokenColorCustomizations')]\n \n-function loadThemeFile(themePath: string) {\n+    tokenColorCustomizations\n+        .filter(custom => custom && custom.textMateRules)\n+        .map(custom => custom.textMateRules)\n+        .forEach(loadColors)\n \n-    if (checkFileExists(themePath)) {\n-        const themeContentText: string = readFileText(themePath)\n+}\n \n-        const themeContent: any = JSON.parse(themeContentText)\n \n-        if (themeContent && themeContent.tokenColors) {\n-            loadColors(themeContent.tokenColors)\n-            if (themeContent.include) {\n-                // parse included theme file\n-                const includedThemePath: string = path.join(path.dirname(themePath), themeContent.include)\n-                loadThemeFile(includedThemePath)\n-            }\n-        }\n-    }\n+function loadThemeFile(themePath: string) {\n+    const themeContent = [themePath]\n+        .filter(isFile)\n+        .map(readFileText)\n+        .map(parseJSON)\n+        .filter(theme => theme)\n+\n+    themeContent\n+        .filter(theme => theme.tokenColors)\n+        .map(theme => theme.tokenColors)\n+        .forEach(loadColors)\n+\n+    themeContent\n+        .filter(theme => theme.include)\n+        .map(theme => path.join(path.dirname(themePath), theme.include))\n+        .forEach(loadThemeFile)\n }\n+\n function mergeRuleSettings(defaultSetting: TextMateRuleSettings, override: TextMateRuleSettings): TextMateRuleSettings {\n-    const mergedRule = defaultSetting;\n+    const mergedRule = defaultSetting\n \n     mergedRule.background = override.background || defaultSetting.background\n     mergedRule.foreground = override.foreground || defaultSetting.foreground\n-    mergedRule.fontStyle = override.fontStyle || defaultSetting.foreground;\n+    mergedRule.fontStyle = override.fontStyle || defaultSetting.foreground\n \n-    return mergedRule;\n+    return mergedRule\n }\n \n function loadColors(textMateRules: TextMateRule[]): void {\n     for (const rule of textMateRules) {\n \n         if (typeof rule.scope === 'string') {\n-            const existingRule = rules.get(rule.scope);\n+            const existingRule = rules.get(rule.scope)\n             if (existingRule) {\n                 rules.set(rule.scope, mergeRuleSettings(existingRule, rule.settings))\n             }\n@@ -104,7 +115,7 @@ function loadColors(textMateRules: TextMateRule[]): void {\n             }\n         } else if (rule.scope instanceof Array) {\n             for (const scope of rule.scope) {\n-                const existingRule = rules.get(scope);\n+                const existingRule = rules.get(scope)\n                 if (existingRule) {\n                     rules.set(scope, mergeRuleSettings(existingRule, rule.settings))\n                 }\n@@ -116,19 +127,15 @@ function loadColors(textMateRules: TextMateRule[]): void {\n     }\n }\n \n-function checkFileExists(filePath: string): boolean {\n-\n-    const stats = fs.statSync(filePath);\n-    if (stats && stats.isFile()) {\n-        return true;\n-    } else {\n-        // console.warn('no such file', filePath)\n-        return false;\n-    }\n-\n+function isFile(filePath: string): boolean {\n+    return [filePath].map(fs.statSync).every(stat => stat.isFile())\n+}\n \n+function readFileText(filePath: string): string {\n+    return fs.readFileSync(filePath, 'utf8')\n }\n \n-function readFileText(filePath: string, encoding: string = 'utf8'): string {\n-    return fs.readFileSync(filePath, encoding);\n+// Might need to replace with JSONC if a theme contains comments. \n+function parseJSON(content: string): any {\n+    return JSON.parse(content)\n }\n\\ No newline at end of file"}, {"sha": "19a4213d451c7b30c4ffd9d9d4f147f81acd2403", "filename": "editors/code/src/scopes_mapper.ts", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f822c8e518132b01d7eda665f6bf7bc254780a7/editors%2Fcode%2Fsrc%2Fscopes_mapper.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1f822c8e518132b01d7eda665f6bf7bc254780a7/editors%2Fcode%2Fsrc%2Fscopes_mapper.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fscopes_mapper.ts?ref=1f822c8e518132b01d7eda665f6bf7bc254780a7", "patch": "@@ -28,21 +28,24 @@ const defaultMapping = new Map<string, string[]>([\n     ['module', ['entity.name.section', 'entity.other']]\n ]\n )\n-function find(scope: string): string[] {\n+\n+// Temporary exported for debugging for now. \n+export function find(scope: string): string[] {\n     return mappings.get(scope) || []\n }\n \n export function toRule(scope: string, intoRule: (scope: string) => TextMateRuleSettings | undefined): TextMateRuleSettings | undefined {\n-    return find(scope).map(intoRule).filter(rule => rule !== undefined)[0];\n+    return find(scope).map(intoRule).filter(rule => rule !== undefined)[0]\n }\n \n \n export function load() {\n     const configuration = vscode.workspace\n         .getConfiguration('rust-analyzer')\n-        .get('scopeMappings') as Map<string, string[]> | undefined || new Map()\n+        .get('scopeMappings') as Map<string, string[]> | undefined\n+        || new Map()\n \n-    mappings = new Map([...Array.from(defaultMapping.entries()), ...Array.from(configuration.entries())]);\n+    mappings = new Map([...Array.from(defaultMapping.entries()), ...Array.from(configuration.entries())])\n \n \n }\n\\ No newline at end of file"}]}