{"sha": "9b6dfb85782a6ec50c39292626acf2c74b0ae754", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNmRmYjg1NzgyYTZlYzUwYzM5MjkyNjI2YWNmMmM3NGIwYWU3NTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-27T17:37:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-27T17:37:36Z"}, "message": "auto merge of #7414 : gifnksm/rust/max_by, r=catamorphism\n\n`max_by` method returns the element that gives the maximum value from the specfied function.\r\n`max_by`/`min_by` are convenient when you want to get the value which has greatest/smallest scores.\r\n\r\nInspired by [ruby's Enumerable module](http://ruby-doc.org/core-2.0/Enumerable.html).", "tree": {"sha": "e76a0445582cae4f4e001cfa5f9e77bae38a10ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e76a0445582cae4f4e001cfa5f9e77bae38a10ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b6dfb85782a6ec50c39292626acf2c74b0ae754", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b6dfb85782a6ec50c39292626acf2c74b0ae754", "html_url": "https://github.com/rust-lang/rust/commit/9b6dfb85782a6ec50c39292626acf2c74b0ae754", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b6dfb85782a6ec50c39292626acf2c74b0ae754/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36527360a66024d0e3f971c0732efc52368afc8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/36527360a66024d0e3f971c0732efc52368afc8b", "html_url": "https://github.com/rust-lang/rust/commit/36527360a66024d0e3f971c0732efc52368afc8b"}, {"sha": "8edb8f6d39498476f1124ce1bb5bb4e094bde43f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8edb8f6d39498476f1124ce1bb5bb4e094bde43f", "html_url": "https://github.com/rust-lang/rust/commit/8edb8f6d39498476f1124ce1bb5bb4e094bde43f"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "9e434272198afcd6409929386148f44112ae58a8", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9b6dfb85782a6ec50c39292626acf2c74b0ae754/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6dfb85782a6ec50c39292626acf2c74b0ae754/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=9b6dfb85782a6ec50c39292626acf2c74b0ae754", "patch": "@@ -351,6 +351,26 @@ pub trait IteratorUtil<A> {\n \n     /// Count the number of elements satisfying the specified predicate\n     fn count(&mut self, predicate: &fn(A) -> bool) -> uint;\n+\n+    /// Return the element that gives the maximum value from the specfied function\n+    ///\n+    /// # Example\n+    ///\n+    /// --- {.rust}\n+    /// let xs = [-3, 0, 1, 5, -10];\n+    /// assert_eq!(*xs.iter().max_by(|x| x.abs()).unwrap(), -10);\n+    /// ---\n+    fn max_by<B: Ord>(&mut self, f: &fn(&A) -> B) -> Option<A>;\n+\n+    /// Return the element that gives the minimum value from the specfied function\n+    ///\n+    /// # Example\n+    ///\n+    /// --- {.rust}\n+    /// let xs = [-3, 0, 1, 5, -10];\n+    /// assert_eq!(*xs.iter().min_by(|x| x.abs()).unwrap(), 0);\n+    /// ---\n+    fn min_by<B: Ord>(&mut self, f: &fn(&A) -> B) -> Option<A>;\n }\n \n /// Iterator adaptors provided for every `Iterator` implementation. The adaptor objects are also\n@@ -519,6 +539,36 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n         }\n         i\n     }\n+\n+    #[inline]\n+    fn max_by<B: Ord>(&mut self, f: &fn(&A) -> B) -> Option<A> {\n+        self.fold(None, |max: Option<(A, B)>, x| {\n+            let x_val = f(&x);\n+            match max {\n+                None             => Some((x, x_val)),\n+                Some((y, y_val)) => if x_val > y_val {\n+                    Some((x, x_val))\n+                } else {\n+                    Some((y, y_val))\n+                }\n+            }\n+        }).map_consume(|(x, _)| x)\n+    }\n+\n+    #[inline]\n+    fn min_by<B: Ord>(&mut self, f: &fn(&A) -> B) -> Option<A> {\n+        self.fold(None, |min: Option<(A, B)>, x| {\n+            let x_val = f(&x);\n+            match min {\n+                None             => Some((x, x_val)),\n+                Some((y, y_val)) => if x_val < y_val {\n+                    Some((x, x_val))\n+                } else {\n+                    Some((y, y_val))\n+                }\n+            }\n+        }).map_consume(|(x, _)| x)\n+    }\n }\n \n /// A trait for iterators over elements which can be added together\n@@ -1237,4 +1287,16 @@ mod tests {\n         assert_eq!(xs.iter().count(|x| *x == 5), 1);\n         assert_eq!(xs.iter().count(|x| *x == 95), 0);\n     }\n+\n+    #[test]\n+    fn test_max_by() {\n+        let xs = [-3, 0, 1, 5, -10];\n+        assert_eq!(*xs.iter().max_by(|x| x.abs()).unwrap(), -10);\n+    }\n+\n+    #[test]\n+    fn test_min_by() {\n+        let xs = [-3, 0, 1, 5, -10];\n+        assert_eq!(*xs.iter().min_by(|x| x.abs()).unwrap(), 0);\n+    }\n }"}]}