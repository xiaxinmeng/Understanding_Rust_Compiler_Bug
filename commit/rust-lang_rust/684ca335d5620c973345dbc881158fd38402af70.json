{"sha": "684ca335d5620c973345dbc881158fd38402af70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NGNhMzM1ZDU2MjBjOTczMzQ1ZGJjODgxMTU4ZmQzODQwMmFmNzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-15T22:56:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-15T22:56:41Z"}, "message": "Auto merge of #85406 - VillSnow:integrate_binary_search, r=JohnTitor\n\nIntegrate binary search codes of binary_search_by and partition_point\n\nFor now partition_point has own binary search code piece.\nIt is because binary_search_by had called the comparer more times and the author (=me) wanted to avoid it.\n\nHowever, now binary_search_by uses the comparer minimum times. (#74024)\nSo it's time to integrate them.\n\nThe appearance of the codes are a bit different but both use completely same logic.", "tree": {"sha": "6b0833563af6bc3c51db28a5cd82868738ca9aba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b0833563af6bc3c51db28a5cd82868738ca9aba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/684ca335d5620c973345dbc881158fd38402af70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/684ca335d5620c973345dbc881158fd38402af70", "html_url": "https://github.com/rust-lang/rust/commit/684ca335d5620c973345dbc881158fd38402af70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/684ca335d5620c973345dbc881158fd38402af70/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "607d6b00d4e0e0475b8de9d0c870b7126fdcdf6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/607d6b00d4e0e0475b8de9d0c870b7126fdcdf6b", "html_url": "https://github.com/rust-lang/rust/commit/607d6b00d4e0e0475b8de9d0c870b7126fdcdf6b"}, {"sha": "5db13c529c58948437535865eb6e3957e4b7bf58", "url": "https://api.github.com/repos/rust-lang/rust/commits/5db13c529c58948437535865eb6e3957e4b7bf58", "html_url": "https://github.com/rust-lang/rust/commit/5db13c529c58948437535865eb6e3957e4b7bf58"}], "stats": {"total": 22, "additions": 1, "deletions": 21}, "files": [{"sha": "9611c83e2c245f00439d8c3baf534f53327c661c", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/684ca335d5620c973345dbc881158fd38402af70/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684ca335d5620c973345dbc881158fd38402af70/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=684ca335d5620c973345dbc881158fd38402af70", "patch": "@@ -3468,27 +3468,7 @@ impl<T> [T] {\n     where\n         P: FnMut(&T) -> bool,\n     {\n-        let mut left = 0;\n-        let mut right = self.len();\n-\n-        while left != right {\n-            let mid = left + (right - left) / 2;\n-            // SAFETY: When `left < right`, `left <= mid < right`.\n-            // Therefore `left` always increases and `right` always decreases,\n-            // and either of them is selected. In both cases `left <= right` is\n-            // satisfied. Therefore if `left < right` in a step, `left <= right`\n-            // is satisfied in the next step. Therefore as long as `left != right`,\n-            // `0 <= left < right <= len` is satisfied and if this case\n-            // `0 <= mid < len` is satisfied too.\n-            let value = unsafe { self.get_unchecked(mid) };\n-            if pred(value) {\n-                left = mid + 1;\n-            } else {\n-                right = mid;\n-            }\n-        }\n-\n-        left\n+        self.binary_search_by(|x| if pred(x) { Less } else { Greater }).unwrap_or_else(|i| i)\n     }\n }\n "}]}