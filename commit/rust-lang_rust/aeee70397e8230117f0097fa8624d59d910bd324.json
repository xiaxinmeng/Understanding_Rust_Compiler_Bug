{"sha": "aeee70397e8230117f0097fa8624d59d910bd324", "node_id": "C_kwDOAAsO6NoAKGFlZWU3MDM5N2U4MjMwMTE3ZjAwOTdmYTg2MjRkNTlkOTEwYmQzMjQ", "commit": {"author": {"name": "k-nasa", "email": "htilcs1115@gmail.com", "date": "2021-10-09T04:19:21Z"}, "committer": {"name": "k-nasa", "email": "htilcs1115@gmail.com", "date": "2021-10-09T04:19:21Z"}, "message": "Apply make_else_arm to general case", "tree": {"sha": "7ef1ce51b2f178f5e7fb5117bec29f66381f18b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ef1ce51b2f178f5e7fb5117bec29f66381f18b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aeee70397e8230117f0097fa8624d59d910bd324", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aeee70397e8230117f0097fa8624d59d910bd324", "html_url": "https://github.com/rust-lang/rust/commit/aeee70397e8230117f0097fa8624d59d910bd324", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aeee70397e8230117f0097fa8624d59d910bd324/comments", "author": {"login": "k-nasa", "id": 23740172, "node_id": "MDQ6VXNlcjIzNzQwMTcy", "avatar_url": "https://avatars.githubusercontent.com/u/23740172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k-nasa", "html_url": "https://github.com/k-nasa", "followers_url": "https://api.github.com/users/k-nasa/followers", "following_url": "https://api.github.com/users/k-nasa/following{/other_user}", "gists_url": "https://api.github.com/users/k-nasa/gists{/gist_id}", "starred_url": "https://api.github.com/users/k-nasa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k-nasa/subscriptions", "organizations_url": "https://api.github.com/users/k-nasa/orgs", "repos_url": "https://api.github.com/users/k-nasa/repos", "events_url": "https://api.github.com/users/k-nasa/events{/privacy}", "received_events_url": "https://api.github.com/users/k-nasa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "k-nasa", "id": 23740172, "node_id": "MDQ6VXNlcjIzNzQwMTcy", "avatar_url": "https://avatars.githubusercontent.com/u/23740172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k-nasa", "html_url": "https://github.com/k-nasa", "followers_url": "https://api.github.com/users/k-nasa/followers", "following_url": "https://api.github.com/users/k-nasa/following{/other_user}", "gists_url": "https://api.github.com/users/k-nasa/gists{/gist_id}", "starred_url": "https://api.github.com/users/k-nasa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k-nasa/subscriptions", "organizations_url": "https://api.github.com/users/k-nasa/orgs", "repos_url": "https://api.github.com/users/k-nasa/repos", "events_url": "https://api.github.com/users/k-nasa/events{/privacy}", "received_events_url": "https://api.github.com/users/k-nasa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "388525fa0dc4e38dfd927413b0f694467a7ca492", "url": "https://api.github.com/repos/rust-lang/rust/commits/388525fa0dc4e38dfd927413b0f694467a7ca492", "html_url": "https://github.com/rust-lang/rust/commit/388525fa0dc4e38dfd927413b0f694467a7ca492"}], "stats": {"total": 88, "additions": 34, "deletions": 54}, "files": [{"sha": "5b766ecbeae2e2c3ba95a6ee16704017e42b6d15", "filename": "crates/ide_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 34, "deletions": 54, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/aeee70397e8230117f0097fa8624d59d910bd324/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeee70397e8230117f0097fa8624d59d910bd324/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=aeee70397e8230117f0097fa8624d59d910bd324", "patch": "@@ -93,7 +93,7 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n         available_range,\n         move |edit| {\n             let match_expr = {\n-                let else_arm = make_else_arm(ctx, else_block, &cond_bodies);\n+                let else_arm = make_else_arm(else_block);\n                 let make_match_arm = |(pat, body): (_, ast::BlockExpr)| {\n                     let body = body.reset_indent().indent(IndentLevel(1));\n                     match pat {\n@@ -125,30 +125,9 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n     )\n }\n \n-fn make_else_arm(\n-    ctx: &AssistContext,\n-    else_block: Option<ast::BlockExpr>,\n-    conditionals: &[(Either<ast::Pat, ast::Expr>, ast::BlockExpr)],\n-) -> ast::MatchArm {\n+fn make_else_arm(else_block: Option<ast::BlockExpr>) -> ast::MatchArm {\n     if let Some(else_block) = else_block {\n-        let pattern = if let [(Either::Left(pat), _)] = conditionals {\n-            ctx.sema\n-                .type_of_pat(pat)\n-                .and_then(|ty| TryEnum::from_ty(&ctx.sema, &ty.adjusted()))\n-                .zip(Some(pat))\n-        } else {\n-            None\n-        };\n-        let pattern = match pattern {\n-            Some((it, pat)) => {\n-                if does_pat_match_variant(pat, &it.sad_pattern()) {\n-                    it.happy_pattern_wildcard()\n-                } else {\n-                    it.sad_pattern()\n-                }\n-            }\n-            None => make::wildcard_pat().into(),\n-        };\n+        let pattern = make::wildcard_pat().into();\n         make::match_arm(iter::once(pattern), None, unwrap_trivial_block(else_block))\n     } else {\n         make::match_arm(iter::once(make::wildcard_pat().into()), None, make::expr_unit())\n@@ -460,7 +439,7 @@ fn foo(x: Option<i32>) {\n fn foo(x: Option<i32>) {\n     match x {\n         Some(x) => println!(\"{}\", x),\n-        None => println!(\"none\"),\n+        _ => println!(\"none\"),\n     }\n }\n \"#,\n@@ -485,7 +464,7 @@ fn foo(x: Option<i32>) {\n fn foo(x: Option<i32>) {\n     match x {\n         None => println!(\"none\"),\n-        Some(_) => println!(\"some\"),\n+        _ => println!(\"some\"),\n     }\n }\n \"#,\n@@ -510,7 +489,7 @@ fn foo(x: Result<i32, ()>) {\n fn foo(x: Result<i32, ()>) {\n     match x {\n         Ok(x) => println!(\"{}\", x),\n-        Err(_) => println!(\"none\"),\n+        _ => println!(\"none\"),\n     }\n }\n \"#,\n@@ -535,7 +514,7 @@ fn foo(x: Result<i32, ()>) {\n fn foo(x: Result<i32, ()>) {\n     match x {\n         Err(x) => println!(\"{}\", x),\n-        Ok(_) => println!(\"ok\"),\n+        _ => println!(\"ok\"),\n     }\n }\n \"#,\n@@ -574,6 +553,33 @@ fn main() {\n         )\n     }\n \n+    #[test]\n+    fn replace_if_let_with_match_nested_type() {\n+        check_assist(\n+            replace_if_let_with_match,\n+            r#\"\n+//- minicore: result\n+fn foo(x: Result<i32, ()>) {\n+    let bar: Result<_, ()> = Ok(Some(1));\n+    $0if let Ok(Some(_)) = bar {\n+        ()\n+    } else {\n+        ()\n+    }\n+}\n+\"#,\n+            r#\"\n+fn foo(x: Result<i32, ()>) {\n+    let bar: Result<_, ()> = Ok(Some(1));\n+    match bar {\n+        Ok(Some(_)) => (),\n+        _ => (),\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_replace_match_with_if_let_unwraps_simple_expressions() {\n         check_assist(\n@@ -885,32 +891,6 @@ fn foo() {\n         Bar(bar) => println!(\"bar {}\", bar),\n     }\n }\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn nested_type() {\n-        check_assist(\n-            replace_if_let_with_match,\n-            r#\"\n-//- minicore: result\n-fn foo(x: Result<i32, ()>) {\n-    let bar: Result<_, ()> = Ok(Some(1));\n-    $0if let Ok(Some(_)) = bar {\n-        ()\n-    } else {\n-        ()\n-    }\n-}\n-\"#,\n-            r#\"\n-fn foo(x: Result<i32, ()>) {\n-    let bar: Result<_, ()> = Ok(Some(1));\n-    match bar {\n-        Ok(Some(_)) => (),\n-        _ => (),\n-    }\n \"#,\n         );\n     }"}]}