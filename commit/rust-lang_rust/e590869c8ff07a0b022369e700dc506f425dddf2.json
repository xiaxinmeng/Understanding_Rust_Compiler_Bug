{"sha": "e590869c8ff07a0b022369e700dc506f425dddf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1OTA4NjljOGZmMDdhMGIwMjIzNjllNzAwZGM1MDZmNDI1ZGRkZjI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-10-18T04:15:50Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-24T23:06:16Z"}, "message": "update vec libs to use c-stack-cdecl calling convention", "tree": {"sha": "1c445986aca6c74550fbc2851b00ef92f0ee8233", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c445986aca6c74550fbc2851b00ef92f0ee8233"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e590869c8ff07a0b022369e700dc506f425dddf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e590869c8ff07a0b022369e700dc506f425dddf2", "html_url": "https://github.com/rust-lang/rust/commit/e590869c8ff07a0b022369e700dc506f425dddf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e590869c8ff07a0b022369e700dc506f425dddf2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "548c92df9c83ea7e523a235830ca95b53fb3c54e", "url": "https://api.github.com/repos/rust-lang/rust/commits/548c92df9c83ea7e523a235830ca95b53fb3c54e", "html_url": "https://github.com/rust-lang/rust/commit/548c92df9c83ea7e523a235830ca95b53fb3c54e"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "979b29fee9a2f912ab035e68ec00d31b35f9d475", "filename": "src/lib/sys.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e590869c8ff07a0b022369e700dc506f425dddf2/src%2Flib%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e590869c8ff07a0b022369e700dc506f425dddf2/src%2Flib%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fsys.rs?ref=e590869c8ff07a0b022369e700dc506f425dddf2", "patch": "@@ -2,6 +2,10 @@\n //export rustrt;\n //export size_of;\n \n+tag type_desc {\n+    type_desc(@type_desc);\n+}\n+\n native \"rust\" mod rustrt {\n     // Explicitly re-export native stuff we want to be made\n     // available outside this crate. Otherwise it's\n@@ -12,6 +16,11 @@ native \"rust\" mod rustrt {\n     fn refcount<T>(t: @T) -> uint;\n     fn do_gc();\n     fn unsupervise();\n+    fn get_type_desc<T>() -> *type_desc;\n+}\n+\n+fn get_type_desc<T>() -> *type_desc {\n+    ret rustrt::get_type_desc::<T>();\n }\n \n fn last_os_error() -> str {"}, {"sha": "d98f4376d16eca11c8b5410391c44626061a917d", "filename": "src/lib/vec.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e590869c8ff07a0b022369e700dc506f425dddf2/src%2Flib%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e590869c8ff07a0b022369e700dc506f425dddf2/src%2Flib%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fvec.rs?ref=e590869c8ff07a0b022369e700dc506f425dddf2", "patch": "@@ -2,20 +2,27 @@\n \n import option::{some, none};\n import uint::next_power_of_two;\n-import ptr::addr_of;\n+import ptr::{addr_of, null};\n \n native \"rust-intrinsic\" mod rusti {\n     fn vec_len<T>(&&v: [mutable? T]) -> uint;\n }\n \n-native \"rust\" mod rustrt {\n-    fn vec_reserve_shared<T>(&v: [mutable? T], n: uint);\n-    fn vec_from_buf_shared<T>(ptr: *T, count: uint) -> [T];\n+native \"c-stack-cdecl\" mod rustrt {\n+    fn vec_reserve_shared<T>(dummy: *util::void,\n+                             t: *sys::type_desc,\n+                             &v: [mutable? T],\n+                             n: uint);\n+    fn vec_from_buf_shared<T>(dummy: *util::void,\n+                              t: *sys::type_desc,\n+                              ptr: *T,\n+                              count: uint) -> [T];\n }\n \n /// Reserves space for `n` elements in the given vector.\n fn reserve<@T>(&v: [mutable? T], n: uint) {\n-    rustrt::vec_reserve_shared(v, n);\n+    log_err(\"reserve: v=\", ptr::addr_of(v), \" n=\", n);\n+    rustrt::vec_reserve_shared(null(), sys::get_type_desc::<T>(), v, n);\n }\n \n pure fn len<T>(v: [mutable? T]) -> uint { unchecked { rusti::vec_len(v) } }\n@@ -352,7 +359,8 @@ mod unsafe {\n     type vec_repr = {mutable fill: uint, mutable alloc: uint, data: u8};\n \n     unsafe fn from_buf<@T>(ptr: *T, elts: uint) -> [T] {\n-        ret rustrt::vec_from_buf_shared(ptr, elts);\n+        ret rustrt::vec_from_buf_shared(null(), sys::get_type_desc::<T>(),\n+                                        ptr, elts);\n     }\n \n     unsafe fn set_len<@T>(&v: [T], new_len: uint) {"}]}