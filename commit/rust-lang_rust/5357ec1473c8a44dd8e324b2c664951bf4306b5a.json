{"sha": "5357ec1473c8a44dd8e324b2c664951bf4306b5a", "node_id": "C_kwDOAAsO6NoAKDUzNTdlYzE0NzNjOGE0NGRkOGUzMjRiMmM2NjQ5NTFiZjQzMDZiNWE", "commit": {"author": {"name": "George Bateman", "email": "george.bateman16@gmail.com", "date": "2022-01-31T23:49:16Z"}, "committer": {"name": "George Bateman", "email": "george.bateman16@gmail.com", "date": "2022-01-31T23:49:16Z"}, "message": "(#93493) Add items from code review", "tree": {"sha": "beb12d945bbea4b9429f427403d59399a55514ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/beb12d945bbea4b9429f427403d59399a55514ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5357ec1473c8a44dd8e324b2c664951bf4306b5a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEhCkfJ9Js3nBacaLYxBeqnEA5788FAmH4dYQACgkQxBeqnEA5\n789UEwgAutPlYIUWVdtMxMkEctekPFU4AxTRAInMHZ1V52ACfeod6R9hBi0eGlrE\nSP1yoSn+To+jTg2399xUC/EGL8uwcLh+u3zCeFBUaBL321eeQJ5FUV/qenAUjdlb\n8RyY3o/y9GaNCelv2CtuvKBeWy7dcaKrXzVP0f1HE+tM0Gjd8qhu02hVZ6wicSPy\nvlq0LM03Ay2dvs2UjKVEFrcDgfOIlCKxKBsbSvLn8plkzUsQA9FcZprR8ucL3UuI\nsha8oUVom7NME5Xu5VPXNz7NLJtm/57Ibj9B6m0Ynv/LVu0SMd7aevqL1KWoLGng\nKsc4YSa52qib2CHqmOg3TcYFIqm6/A==\n=tZfy\n-----END PGP SIGNATURE-----", "payload": "tree beb12d945bbea4b9429f427403d59399a55514ea\nparent 4d4ec97e0a11eae5878ae6715536875c5689f074\nauthor George Bateman <george.bateman16@gmail.com> 1643672956 +0000\ncommitter George Bateman <george.bateman16@gmail.com> 1643672956 +0000\n\n(#93493) Add items from code review\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5357ec1473c8a44dd8e324b2c664951bf4306b5a", "html_url": "https://github.com/rust-lang/rust/commit/5357ec1473c8a44dd8e324b2c664951bf4306b5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5357ec1473c8a44dd8e324b2c664951bf4306b5a/comments", "author": {"login": "GKFX", "id": 5357642, "node_id": "MDQ6VXNlcjUzNTc2NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5357642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GKFX", "html_url": "https://github.com/GKFX", "followers_url": "https://api.github.com/users/GKFX/followers", "following_url": "https://api.github.com/users/GKFX/following{/other_user}", "gists_url": "https://api.github.com/users/GKFX/gists{/gist_id}", "starred_url": "https://api.github.com/users/GKFX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GKFX/subscriptions", "organizations_url": "https://api.github.com/users/GKFX/orgs", "repos_url": "https://api.github.com/users/GKFX/repos", "events_url": "https://api.github.com/users/GKFX/events{/privacy}", "received_events_url": "https://api.github.com/users/GKFX/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GKFX", "id": 5357642, "node_id": "MDQ6VXNlcjUzNTc2NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5357642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GKFX", "html_url": "https://github.com/GKFX", "followers_url": "https://api.github.com/users/GKFX/followers", "following_url": "https://api.github.com/users/GKFX/following{/other_user}", "gists_url": "https://api.github.com/users/GKFX/gists{/gist_id}", "starred_url": "https://api.github.com/users/GKFX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GKFX/subscriptions", "organizations_url": "https://api.github.com/users/GKFX/orgs", "repos_url": "https://api.github.com/users/GKFX/repos", "events_url": "https://api.github.com/users/GKFX/events{/privacy}", "received_events_url": "https://api.github.com/users/GKFX/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d4ec97e0a11eae5878ae6715536875c5689f074", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d4ec97e0a11eae5878ae6715536875c5689f074", "html_url": "https://github.com/rust-lang/rust/commit/4d4ec97e0a11eae5878ae6715536875c5689f074"}], "stats": {"total": 100, "additions": 70, "deletions": 30}, "files": [{"sha": "b9d71178921f78becac1c5e04747e4759e9df874", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 35, "deletions": 15, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5357ec1473c8a44dd8e324b2c664951bf4306b5a/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5357ec1473c8a44dd8e324b2c664951bf4306b5a/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=5357ec1473c8a44dd8e324b2c664951bf4306b5a", "patch": "@@ -289,32 +289,52 @@ mod prim_never {}\n ///\n /// A `char` is a '[Unicode scalar value]', which is any '[Unicode code point]'\n /// other than a [surrogate code point]. This has a fixed numerical definition:\n-/// code points are in the range `'\\0'` to `char::MAX` (`'\\u{10FFFF}'`), inclusive.\n-/// Surrogate code points, used by UTF-16, are in the range U+D800 to U+DFFF.\n+/// code points are in the range 0 to 0x10FFFF, inclusive.\n+/// Surrogate code points, used by UTF-16, are in the range 0xD800 to 0xDFFF.\n ///\n /// No `char` may be constructed, whether as a literal or at runtime, that is not a\n /// Unicode scalar value:\n ///\n /// ```text\n-/// let forbidden_chars = [\n-///     // Each of these is a compiler error\n-///     '\\u{D800}', '\\u{DFFF}', '\\u{110000}',\n+/// // Each of these is a compiler error\n+/// ['\\u{D800}', '\\u{DFFF}', '\\u{110000}'];\n+/// ```\n ///\n-///     // Panics; from_u32 returns None.\n-///     char::from_u32(0xDE01).unwrap(),\n+/// ```should_panic\n+/// // Panics; from_u32 returns None.\n+/// char::from_u32(0xDE01).unwrap();\n+/// ```\n ///\n-///     // Undefined behaviour\n-///     unsafe { char::from_u32_unchecked(0x110000) },\n-/// ];\n+/// ```\n+/// // Undefined behaviour\n+/// unsafe { char::from_u32_unchecked(0x110000) };\n /// ```\n ///\n-/// Unicode is regularly updated. Many USVs are not currently assigned to a\n-/// character, but may be in the future (\"reserved\"); some will never be a character\n-/// (\"noncharacters\"); and some may be given different meanings by different users\n-/// (\"private use\").\n+/// USVs are also the exact set of values that may be encoded in UTF-8. Because\n+/// `char` values are USVs and `str` values are valid UTF-8, it is safe to store\n+/// any `char` in a `str` or read any character from a `str` as a `char`.\n+///\n+/// The gap in valid `char` values is understood by the compiler, so in the\n+/// below example the two ranges are understood to cover the whole range of\n+/// possible `char` values and there is no error for a [non-exhaustive match].\n+///\n+/// ```\n+/// let c: char = 'a';\n+/// match c {\n+///     '\\0' ..= '\\u{D7FF}' => false,\n+///     '\\u{E000}' ..= '\\u{10FFFF}' => true,\n+/// };\n+/// ```\n+///\n+/// All USVs are valid `char` values, but not all of them represent a real\n+/// character. Many USVs are not currently assigned to a character, but may be\n+/// in the future (\"reserved\"); some will never be a character\n+/// (\"noncharacters\"); and some may be given different meanings by different\n+/// users (\"private use\").\n ///\n-/// [Unicode scalar value]: https://www.unicode.org/glossary/#unicode_scalar_value\n /// [Unicode code point]: https://www.unicode.org/glossary/#code_point\n+/// [Unicode scalar value]: https://www.unicode.org/glossary/#unicode_scalar_value\n+/// [non-exhaustive match]: ../book/ch06-02-match.html#matches-are-exhaustive\n /// [surrogate code point]: https://www.unicode.org/glossary/#surrogate_code_point\n ///\n /// # Representation"}, {"sha": "b9d71178921f78becac1c5e04747e4759e9df874", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 35, "deletions": 15, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5357ec1473c8a44dd8e324b2c664951bf4306b5a/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5357ec1473c8a44dd8e324b2c664951bf4306b5a/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=5357ec1473c8a44dd8e324b2c664951bf4306b5a", "patch": "@@ -289,32 +289,52 @@ mod prim_never {}\n ///\n /// A `char` is a '[Unicode scalar value]', which is any '[Unicode code point]'\n /// other than a [surrogate code point]. This has a fixed numerical definition:\n-/// code points are in the range `'\\0'` to `char::MAX` (`'\\u{10FFFF}'`), inclusive.\n-/// Surrogate code points, used by UTF-16, are in the range U+D800 to U+DFFF.\n+/// code points are in the range 0 to 0x10FFFF, inclusive.\n+/// Surrogate code points, used by UTF-16, are in the range 0xD800 to 0xDFFF.\n ///\n /// No `char` may be constructed, whether as a literal or at runtime, that is not a\n /// Unicode scalar value:\n ///\n /// ```text\n-/// let forbidden_chars = [\n-///     // Each of these is a compiler error\n-///     '\\u{D800}', '\\u{DFFF}', '\\u{110000}',\n+/// // Each of these is a compiler error\n+/// ['\\u{D800}', '\\u{DFFF}', '\\u{110000}'];\n+/// ```\n ///\n-///     // Panics; from_u32 returns None.\n-///     char::from_u32(0xDE01).unwrap(),\n+/// ```should_panic\n+/// // Panics; from_u32 returns None.\n+/// char::from_u32(0xDE01).unwrap();\n+/// ```\n ///\n-///     // Undefined behaviour\n-///     unsafe { char::from_u32_unchecked(0x110000) },\n-/// ];\n+/// ```\n+/// // Undefined behaviour\n+/// unsafe { char::from_u32_unchecked(0x110000) };\n /// ```\n ///\n-/// Unicode is regularly updated. Many USVs are not currently assigned to a\n-/// character, but may be in the future (\"reserved\"); some will never be a character\n-/// (\"noncharacters\"); and some may be given different meanings by different users\n-/// (\"private use\").\n+/// USVs are also the exact set of values that may be encoded in UTF-8. Because\n+/// `char` values are USVs and `str` values are valid UTF-8, it is safe to store\n+/// any `char` in a `str` or read any character from a `str` as a `char`.\n+///\n+/// The gap in valid `char` values is understood by the compiler, so in the\n+/// below example the two ranges are understood to cover the whole range of\n+/// possible `char` values and there is no error for a [non-exhaustive match].\n+///\n+/// ```\n+/// let c: char = 'a';\n+/// match c {\n+///     '\\0' ..= '\\u{D7FF}' => false,\n+///     '\\u{E000}' ..= '\\u{10FFFF}' => true,\n+/// };\n+/// ```\n+///\n+/// All USVs are valid `char` values, but not all of them represent a real\n+/// character. Many USVs are not currently assigned to a character, but may be\n+/// in the future (\"reserved\"); some will never be a character\n+/// (\"noncharacters\"); and some may be given different meanings by different\n+/// users (\"private use\").\n ///\n-/// [Unicode scalar value]: https://www.unicode.org/glossary/#unicode_scalar_value\n /// [Unicode code point]: https://www.unicode.org/glossary/#code_point\n+/// [Unicode scalar value]: https://www.unicode.org/glossary/#unicode_scalar_value\n+/// [non-exhaustive match]: ../book/ch06-02-match.html#matches-are-exhaustive\n /// [surrogate code point]: https://www.unicode.org/glossary/#surrogate_code_point\n ///\n /// # Representation"}]}