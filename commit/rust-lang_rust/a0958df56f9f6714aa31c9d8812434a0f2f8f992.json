{"sha": "a0958df56f9f6714aa31c9d8812434a0f2f8f992", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwOTU4ZGY1NmY5ZjY3MTRhYTMxYzlkODgxMjQzNGEwZjJmOGY5OTI=", "commit": {"author": {"name": "Max Wase", "email": "max.vvase@gmail.com", "date": "2021-05-27T15:02:21Z"}, "committer": {"name": "Max Wase", "email": "max.vvase@gmail.com", "date": "2021-05-27T15:02:21Z"}, "message": "Review fixes + doc-features", "tree": {"sha": "b0665c99e608d618c2580cd4081ff5141a93b8cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0665c99e608d618c2580cd4081ff5141a93b8cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0958df56f9f6714aa31c9d8812434a0f2f8f992", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0958df56f9f6714aa31c9d8812434a0f2f8f992", "html_url": "https://github.com/rust-lang/rust/commit/a0958df56f9f6714aa31c9d8812434a0f2f8f992", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0958df56f9f6714aa31c9d8812434a0f2f8f992/comments", "author": {"login": "maxwase", "id": 23321756, "node_id": "MDQ6VXNlcjIzMzIxNzU2", "avatar_url": "https://avatars.githubusercontent.com/u/23321756?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maxwase", "html_url": "https://github.com/maxwase", "followers_url": "https://api.github.com/users/maxwase/followers", "following_url": "https://api.github.com/users/maxwase/following{/other_user}", "gists_url": "https://api.github.com/users/maxwase/gists{/gist_id}", "starred_url": "https://api.github.com/users/maxwase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maxwase/subscriptions", "organizations_url": "https://api.github.com/users/maxwase/orgs", "repos_url": "https://api.github.com/users/maxwase/repos", "events_url": "https://api.github.com/users/maxwase/events{/privacy}", "received_events_url": "https://api.github.com/users/maxwase/received_events", "type": "User", "site_admin": false}, "committer": {"login": "maxwase", "id": 23321756, "node_id": "MDQ6VXNlcjIzMzIxNzU2", "avatar_url": "https://avatars.githubusercontent.com/u/23321756?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maxwase", "html_url": "https://github.com/maxwase", "followers_url": "https://api.github.com/users/maxwase/followers", "following_url": "https://api.github.com/users/maxwase/following{/other_user}", "gists_url": "https://api.github.com/users/maxwase/gists{/gist_id}", "starred_url": "https://api.github.com/users/maxwase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maxwase/subscriptions", "organizations_url": "https://api.github.com/users/maxwase/orgs", "repos_url": "https://api.github.com/users/maxwase/repos", "events_url": "https://api.github.com/users/maxwase/events{/privacy}", "received_events_url": "https://api.github.com/users/maxwase/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d88c52ab7173f82db4e309661fb06ebdf55b3a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d88c52ab7173f82db4e309661fb06ebdf55b3a6", "html_url": "https://github.com/rust-lang/rust/commit/2d88c52ab7173f82db4e309661fb06ebdf55b3a6"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "521693d7f2c300db738f391289c3636c3a666f6a", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a0958df56f9f6714aa31c9d8812434a0f2f8f992/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958df56f9f6714aa31c9d8812434a0f2f8f992/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=a0958df56f9f6714aa31c9d8812434a0f2f8f992", "patch": "@@ -1007,17 +1007,18 @@ impl Metadata {\n         self.file_type().is_file()\n     }\n \n-    /// Returns `true` if this metadata is for a symbolic link file.\n+    /// Returns `true` if this metadata is for a symbolic link.\n     ///\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// #![feature(is_symlink)]\n     /// use std::fs;\n     /// use std::path::Path;\n     /// use std::os::unix::fs::symlink;\n     ///\n     /// fn main() -> std::io::Result<()> {\n-    ///     let link_path = Path::new(\"/link\");\n+    ///     let link_path = Path::new(\"link\");\n     ///     symlink(\"/origin_does_not_exists/\", link_path)?;\n     ///\n     ///     let metadata = fs::symlink_metadata(link_path)?;"}, {"sha": "9afeb173f2049b5f5b5c0dd2afc9908d911f3515", "filename": "library/std/src/path.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a0958df56f9f6714aa31c9d8812434a0f2f8f992/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0958df56f9f6714aa31c9d8812434a0f2f8f992/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=a0958df56f9f6714aa31c9d8812434a0f2f8f992", "patch": "@@ -2568,23 +2568,24 @@ impl Path {\n         fs::metadata(self).map(|m| m.is_dir()).unwrap_or(false)\n     }\n \n-    /// Returns true if the path exists on disk and is pointing at a symbolic link file.\n+    /// Returns true if the path exists on disk and is pointing at a symbolic link.\n     /// This method can alse be used to check whether symlink exists.\n     ///\n     /// This function will not traverse symbolic links.\n-    /// In case of broken symbolic links this will also return true.\n+    /// In case of a broken symbolic link this will also return true.\n     ///\n     /// If you cannot access the directory containing the file, e.g., because of a\n     /// permission error, this will return false.\n     ///\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// #![feature(is_symlink)]\n     /// use std::path::Path;\n     /// use std::os::unix::fs::symlink;\n     ///\n-    /// let link_path = Path::new(\"/link\");\n-    /// symlink(\"/origin_does_not_exists/\", link_path)?;\n+    /// let link_path = Path::new(\"link\");\n+    /// symlink(\"/origin_does_not_exists/\", link_path).unwrap();\n     /// assert_eq!(link_path.is_symlink(), true);\n     /// assert_eq!(link_path.exists(), false);\n     /// ```"}]}