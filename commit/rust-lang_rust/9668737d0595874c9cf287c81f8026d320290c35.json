{"sha": "9668737d0595874c9cf287c81f8026d320290c35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2Njg3MzdkMDU5NTg3NGM5Y2YyODdjODFmODAyNmQzMjAyOTBjMzU=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-06-25T11:57:42Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-06-25T11:57:42Z"}, "message": "Add comment", "tree": {"sha": "df5e601fe4b82de37c849522a06453925e457d7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df5e601fe4b82de37c849522a06453925e457d7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9668737d0595874c9cf287c81f8026d320290c35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9668737d0595874c9cf287c81f8026d320290c35", "html_url": "https://github.com/rust-lang/rust/commit/9668737d0595874c9cf287c81f8026d320290c35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9668737d0595874c9cf287c81f8026d320290c35/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e7a6bd66e308da6856d7f7f1eae51c45f786d86", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e7a6bd66e308da6856d7f7f1eae51c45f786d86", "html_url": "https://github.com/rust-lang/rust/commit/9e7a6bd66e308da6856d7f7f1eae51c45f786d86"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "e023ff25a2dbdaa1f701a1ede86387d6b25790c1", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9668737d0595874c9cf287c81f8026d320290c35/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9668737d0595874c9cf287c81f8026d320290c35/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=9668737d0595874c9cf287c81f8026d320290c35", "patch": "@@ -115,6 +115,8 @@ impl CrateImplBlocks {\n }\n \n fn def_crates(db: &impl HirDatabase, cur_crate: Crate, ty: &Ty) -> Option<ArrayVec<[Crate; 2]>> {\n+    // Types like slice can have inherent impls in several crates, (core and alloc).\n+    // The correspoinding impls are marked with lang items, so we can use them to find the required crates.\n     macro_rules! lang_item_crate {\n         ($db:expr, $cur_crate:expr, $($name:expr),+ $(,)?) => {{\n             let mut v = ArrayVec::<[Crate; 2]>::new();\n@@ -128,16 +130,16 @@ fn def_crates(db: &impl HirDatabase, cur_crate: Crate, ty: &Ty) -> Option<ArrayV\n     match ty {\n         Ty::Apply(a_ty) => match a_ty.ctor {\n             TypeCtor::Adt(def_id) => Some(std::iter::once(def_id.krate(db)?).collect()),\n-            TypeCtor::Bool => lang_item_crate![db, cur_crate, \"bool\"],\n-            TypeCtor::Char => lang_item_crate![db, cur_crate, \"char\"],\n+            TypeCtor::Bool => lang_item_crate!(db, cur_crate, \"bool\"),\n+            TypeCtor::Char => lang_item_crate!(db, cur_crate, \"char\"),\n             TypeCtor::Float(UncertainFloatTy::Known(f)) => {\n-                lang_item_crate![db, cur_crate, f.ty_to_string()]\n+                lang_item_crate!(db, cur_crate, f.ty_to_string())\n             }\n             TypeCtor::Int(UncertainIntTy::Known(i)) => {\n-                lang_item_crate![db, cur_crate, i.ty_to_string()]\n+                lang_item_crate!(db, cur_crate, i.ty_to_string())\n             }\n-            TypeCtor::Str => lang_item_crate![db, cur_crate, \"str\"],\n-            TypeCtor::Slice => lang_item_crate![db, cur_crate, \"slice_alloc\", \"slice\"],\n+            TypeCtor::Str => lang_item_crate!(db, cur_crate, \"str\"),\n+            TypeCtor::Slice => lang_item_crate!(db, cur_crate, \"slice_alloc\", \"slice\"),\n             _ => None,\n         },\n         _ => None,"}]}