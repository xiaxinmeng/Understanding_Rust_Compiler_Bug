{"sha": "e4ce68baa841af3077fa3ef82fac0a33f0e61d20", "node_id": "C_kwDOAAsO6NoAKGU0Y2U2OGJhYTg0MWFmMzA3N2ZhM2VmODJmYWMwYTMzZjBlNjFkMjA", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-29T03:25:09Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-02T22:57:57Z"}, "message": "Update `clean::Type` docs\n\nThey've barely been updated since this version of `rustdoc` (originally\ncalled `rustdoc_ng`) was checked into the tree!\n\nNote that the formatting of a couple `Type` variants changed; rustfmt\nseems to change formatting based on whether all variants have docs.", "tree": {"sha": "65dba7ee20d4f0e528b316201bcea5a7b1606df1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65dba7ee20d4f0e528b316201bcea5a7b1606df1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4ce68baa841af3077fa3ef82fac0a33f0e61d20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ce68baa841af3077fa3ef82fac0a33f0e61d20", "html_url": "https://github.com/rust-lang/rust/commit/e4ce68baa841af3077fa3ef82fac0a33f0e61d20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4ce68baa841af3077fa3ef82fac0a33f0e61d20/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4675aad5c5ff63b43e59618f8ab01236ae4f98a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4675aad5c5ff63b43e59618f8ab01236ae4f98a", "html_url": "https://github.com/rust-lang/rust/commit/d4675aad5c5ff63b43e59618f8ab01236ae4f98a"}], "stats": {"total": 54, "additions": 29, "deletions": 25}, "files": [{"sha": "3373cee917229badb9056aefcf933168378f27e7", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e4ce68baa841af3077fa3ef82fac0a33f0e61d20/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ce68baa841af3077fa3ef82fac0a33f0e61d20/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=e4ce68baa841af3077fa3ef82fac0a33f0e61d20", "patch": "@@ -1372,49 +1372,49 @@ crate struct PolyTrait {\n     crate generic_params: Vec<GenericParamDef>,\n }\n \n-/// A representation of a type suitable for hyperlinking purposes. Ideally, one can get the original\n-/// type out of the AST/`TyCtxt` given one of these, if more information is needed. Most\n-/// importantly, it does not preserve mutability or boxes.\n+/// Rustdoc's representation of types, mostly based on the [`hir::Ty`].\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n crate enum Type {\n-    /// Structs/enums/traits (most that would be an `hir::TyKind::Path`).\n-    ResolvedPath {\n-        path: Path,\n-        did: DefId,\n-    },\n-    /// `dyn for<'a> Trait<'a> + Send + 'static`\n+    /// A named type, which could be a trait.\n+    ///\n+    /// This is mostly Rustdoc's version of [`hir::Path`].\n+    ResolvedPath { path: Path, did: DefId },\n+    /// A `dyn Trait` object: `dyn for<'a> Trait<'a> + Send + 'static`\n     DynTrait(Vec<PolyTrait>, Option<Lifetime>),\n-    /// For parameterized types, so the consumer of the JSON don't go\n-    /// looking for types which don't exist anywhere.\n+    /// A type parameter.\n     Generic(Symbol),\n-    /// Primitives are the fixed-size numeric types (plus int/usize/float), char,\n-    /// arrays, slices, and tuples.\n+    /// A primitive (aka, builtin) type.\n     Primitive(PrimitiveType),\n-    /// `extern \"ABI\" fn`\n+    /// A function pointer: `extern \"ABI\" fn(...) -> ...`\n     BareFunction(Box<BareFunctionDecl>),\n+    /// A tuple type: `(i32, &str)`.\n     Tuple(Vec<Type>),\n+    /// A slice type (does *not* include the `&`): `[i32]`\n     Slice(Box<Type>),\n-    /// The `String` field is about the size or the constant representing the array's length.\n+    /// An array type.\n+    ///\n+    /// The `String` field is a stringified version of the array's length parameter.\n     Array(Box<Type>, String),\n+    /// A raw pointer type: `*const i32`, `*mut i32`\n     RawPointer(Mutability, Box<Type>),\n-    BorrowedRef {\n-        lifetime: Option<Lifetime>,\n-        mutability: Mutability,\n-        type_: Box<Type>,\n-    },\n+    /// A reference type: `&i32`, `&'a mut Foo`\n+    BorrowedRef { lifetime: Option<Lifetime>, mutability: Mutability, type_: Box<Type> },\n \n-    // `<Type as Trait>::Name`\n+    /// A qualified path to an associated item: `<Type as Trait>::Name`\n     QPath {\n         name: Symbol,\n         self_type: Box<Type>,\n+        /// FIXME: This is a hack that should be removed; see [this discussion][1].\n+        ///\n+        /// [1]: https://github.com/rust-lang/rust/pull/85479#discussion_r635729093\n         self_def_id: Option<DefId>,\n         trait_: Path,\n     },\n \n-    // `_`\n+    /// A type that is inferred: `_`\n     Infer,\n \n-    // `impl TraitA + TraitB + ...`\n+    /// An `impl Trait`: `impl TraitA + TraitB + ...`\n     ImplTrait(Vec<GenericBound>),\n }\n \n@@ -1538,8 +1538,12 @@ impl GetDefId for Type {\n     }\n }\n \n-/// N.B. this has to be different from `hir::PrimTy` because it also includes types that aren't\n-/// paths, like `Unit`.\n+/// A primitive (aka, builtin) type.\n+///\n+/// This represents things like `i32`, `str`, etc.\n+///\n+/// N.B. This has to be different from [`hir::PrimTy`] because it also includes types that aren't\n+/// paths, like [`Self::Unit`].\n #[derive(Clone, PartialEq, Eq, Hash, Copy, Debug)]\n crate enum PrimitiveType {\n     Isize,"}]}