{"sha": "02241db72006ba2426fd50663bfa48b3dd88b9ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMjQxZGI3MjAwNmJhMjQyNmZkNTA2NjNiZmE0OGIzZGQ4OGI5YWU=", "commit": {"author": {"name": "Cameron Taggart", "email": "cameron.taggart@gmail.com", "date": "2020-04-22T15:12:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-22T15:12:44Z"}, "message": "suggested rearrangement of the cfg if statements\n\nCo-Authored-By: ecstatic-morse <ecstaticmorse@gmail.com>", "tree": {"sha": "330f016ae23bba4081e03cf0ffda281e0b8eec8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/330f016ae23bba4081e03cf0ffda281e0b8eec8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02241db72006ba2426fd50663bfa48b3dd88b9ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeoF7sCRBK7hj4Ov3rIwAAdHIIAByRGE822E+tZwknSQkiaOaL\nwLXQTfO+XbnPG/WZ2/FhXzRCf+8nLHIY+OZHq9QFH91KtVcMM75+SnLSFn1nHkLc\nG+73XubKqe+toN2z3hVDvMkDbnW5pwpE1ROFkLafj9pCsSMx1WwBF40Gxd5iC8K/\n3oCQAGRYKEvictGhV8opInDkWgdCtK3cgE6fRv5J6y1sAaCn4lCfQyV0WAPx9Jdb\ng+qEgRtb5W95OiyaX42Q3A48ZrExbRcBLVogKC8/ZRzf7+UeKEoQ7cbi3NC11u8o\nGHwtoD1mOCcujm6VupU0lXOySYTDmN9sDpwsiUMTcvNs/G3r9kRjWoLFvIcATQI=\n=YVzF\n-----END PGP SIGNATURE-----\n", "payload": "tree 330f016ae23bba4081e03cf0ffda281e0b8eec8a\nparent d5963ed0c42c4556904c630727e265972f93e9a5\nauthor Cameron Taggart <cameron.taggart@gmail.com> 1587568364 -0600\ncommitter GitHub <noreply@github.com> 1587568364 -0600\n\nsuggested rearrangement of the cfg if statements\n\nCo-Authored-By: ecstatic-morse <ecstaticmorse@gmail.com>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02241db72006ba2426fd50663bfa48b3dd88b9ae", "html_url": "https://github.com/rust-lang/rust/commit/02241db72006ba2426fd50663bfa48b3dd88b9ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02241db72006ba2426fd50663bfa48b3dd88b9ae/comments", "author": {"login": "ctaggart", "id": 80104, "node_id": "MDQ6VXNlcjgwMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/80104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ctaggart", "html_url": "https://github.com/ctaggart", "followers_url": "https://api.github.com/users/ctaggart/followers", "following_url": "https://api.github.com/users/ctaggart/following{/other_user}", "gists_url": "https://api.github.com/users/ctaggart/gists{/gist_id}", "starred_url": "https://api.github.com/users/ctaggart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ctaggart/subscriptions", "organizations_url": "https://api.github.com/users/ctaggart/orgs", "repos_url": "https://api.github.com/users/ctaggart/repos", "events_url": "https://api.github.com/users/ctaggart/events{/privacy}", "received_events_url": "https://api.github.com/users/ctaggart/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5963ed0c42c4556904c630727e265972f93e9a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5963ed0c42c4556904c630727e265972f93e9a5", "html_url": "https://github.com/rust-lang/rust/commit/d5963ed0c42c4556904c630727e265972f93e9a5"}], "stats": {"total": 62, "additions": 30, "deletions": 32}, "files": [{"sha": "e2a1ba3a24b105de81f17df4523246cbd6f33bbd", "filename": "src/librustc_data_structures/profiling.rs", "status": "modified", "additions": 30, "deletions": 32, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/02241db72006ba2426fd50663bfa48b3dd88b9ae/src%2Flibrustc_data_structures%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02241db72006ba2426fd50663bfa48b3dd88b9ae/src%2Flibrustc_data_structures%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fprofiling.rs?ref=02241db72006ba2426fd50663bfa48b3dd88b9ae", "patch": "@@ -607,41 +607,39 @@ pub fn duration_to_secs_str(dur: std::time::Duration) -> String {\n }\n \n // Memory reporting\n-cfg_if! {\n-    if #[cfg(target_arch = \"wasm32\")] {\n-        fn get_resident() -> Option<usize> {\n-            None\n-        }\n-    } else {\n-        cfg_if! {\n-            if #[cfg(windows)] {\n-                fn get_resident() -> Option<usize> {\n-                    use std::mem::{self, MaybeUninit};\n-                    use winapi::shared::minwindef::DWORD;\n-                    use winapi::um::processthreadsapi::GetCurrentProcess;\n-                    use winapi::um::psapi::{GetProcessMemoryInfo, PROCESS_MEMORY_COUNTERS};\n-\n-                    let mut pmc = MaybeUninit::<PROCESS_MEMORY_COUNTERS>::uninit();\n-                    match unsafe {\n-                        GetProcessMemoryInfo(GetCurrentProcess(), pmc.as_mut_ptr(), mem::size_of_val(&pmc) as DWORD)\n-                    } {\n-                        0 => None,\n-                        _ => {\n-                            let pmc = unsafe { pmc.assume_init() };\n-                            Some(pmc.WorkingSetSize as usize)\n-                        }\n+    cfg_if! {\n+        if #[cfg(windows)] {\n+            fn get_resident() -> Option<usize> {\n+                use std::mem::{self, MaybeUninit};\n+                use winapi::shared::minwindef::DWORD;\n+                use winapi::um::processthreadsapi::GetCurrentProcess;\n+                use winapi::um::psapi::{GetProcessMemoryInfo, PROCESS_MEMORY_COUNTERS};\n+\n+                let mut pmc = MaybeUninit::<PROCESS_MEMORY_COUNTERS>::uninit();\n+                match unsafe {\n+                    GetProcessMemoryInfo(GetCurrentProcess(), pmc.as_mut_ptr(), mem::size_of_val(&pmc) as DWORD)\n+                } {\n+                    0 => None,\n+                    _ => {\n+                        let pmc = unsafe { pmc.assume_init() };\n+                        Some(pmc.WorkingSetSize as usize)\n                     }\n                 }\n-            } else {\n-                fn get_resident() -> Option<usize> {\n-                    let field = 1;\n-                    let contents = fs::read(\"/proc/self/statm\").ok()?;\n-                    let contents = String::from_utf8(contents).ok()?;\n-                    let s = contents.split_whitespace().nth(field)?;\n-                    let npages = s.parse::<usize>().ok()?;\n-                    Some(npages * 4096)\n-                }\n             }\n+        } else if #[cfg(unix)] {\n+            fn get_resident() -> Option<usize> {\n+                let field = 1;\n+                let contents = fs::read(\"/proc/self/statm\").ok()?;\n+                let contents = String::from_utf8(contents).ok()?;\n+                let s = contents.split_whitespace().nth(field)?;\n+                let npages = s.parse::<usize>().ok()?;\n+                Some(npages * 4096)\n+            }\n+        } else {\n+            fn get_resident() -> Option<usize> {\n+                None\n+            }\n+        }\n         }\n     }\n }"}]}