{"sha": "bce5eb0c08b33cf4338020a933f28cd87bbd89d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZTVlYjBjMDhiMzNjZjQzMzgwMjBhOTMzZjI4Y2Q4N2JiZDg5ZDE=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-11T22:04:49Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-13T06:59:57Z"}, "message": "Update w/ comments from oli\n\nThis also updates a check to ensure that this is only applied to bools", "tree": {"sha": "08fdcf8fbd85545160e2c0c7712a45cfe191764d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08fdcf8fbd85545160e2c0c7712a45cfe191764d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bce5eb0c08b33cf4338020a933f28cd87bbd89d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bce5eb0c08b33cf4338020a933f28cd87bbd89d1", "html_url": "https://github.com/rust-lang/rust/commit/bce5eb0c08b33cf4338020a933f28cd87bbd89d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bce5eb0c08b33cf4338020a933f28cd87bbd89d1/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c0f2a9446f8858e7b0f5725c6487be3edb3b87e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c0f2a9446f8858e7b0f5725c6487be3edb3b87e", "html_url": "https://github.com/rust-lang/rust/commit/6c0f2a9446f8858e7b0f5725c6487be3edb3b87e"}], "stats": {"total": 97, "additions": 40, "deletions": 57}, "files": [{"sha": "063246f79fe362ff41c69a637fcca09d3e32260d", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bce5eb0c08b33cf4338020a933f28cd87bbd89d1/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bce5eb0c08b33cf4338020a933f28cd87bbd89d1/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=bce5eb0c08b33cf4338020a933f28cd87bbd89d1", "patch": "@@ -827,7 +827,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 ty::GenericParamDefKind::Type { has_default, .. } => {\n                     Some((param.def_id, has_default))\n                 }\n-                ty::GenericParamDefKind::Const { .. } => None, // FIXME(const_generics:defaults)\n+                ty::GenericParamDefKind::Const => None, // FIXME(const_generics:defaults)\n             })\n             .peekable();\n         let has_default = {"}, {"sha": "5fab46f029ff0ec8145968f3eecd4dbdca94bd3b", "filename": "src/librustc_mir/transform/match_branches.rs", "status": "modified", "additions": 38, "deletions": 55, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/bce5eb0c08b33cf4338020a933f28cd87bbd89d1/src%2Flibrustc_mir%2Ftransform%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bce5eb0c08b33cf4338020a933f28cd87bbd89d1/src%2Flibrustc_mir%2Ftransform%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmatch_branches.rs?ref=bce5eb0c08b33cf4338020a933f28cd87bbd89d1", "patch": "@@ -1,4 +1,4 @@\n-use crate::transform::{simplify, MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n \n@@ -12,71 +12,63 @@ pub struct MatchBranchSimplification;\n impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let param_env = tcx.param_env(src.def_id());\n-        let mut did_remove_blocks = false;\n         let bbs = body.basic_blocks_mut();\n         'outer: for bb_idx in bbs.indices() {\n-            let (discr, val, switch_ty, targets) = match bbs[bb_idx].terminator().kind {\n+            let (discr, val, switch_ty, first, second) = match bbs[bb_idx].terminator().kind {\n                 TerminatorKind::SwitchInt {\n                     discr: Operand::Move(ref place),\n                     switch_ty,\n                     ref targets,\n                     ref values,\n                     ..\n                 } if targets.len() == 2 && values.len() == 1 => {\n-                    (place.clone(), values[0], switch_ty, targets)\n+                    (place, values[0], switch_ty, targets[0], targets[1])\n                 }\n+                // Only optimize switch int statements\n                 _ => continue,\n             };\n-            let (first, rest) = if let ([first], rest) = targets.split_at(1) {\n-                (*first, rest)\n-            } else {\n-                unreachable!();\n-            };\n-            let first_dest = bbs[first].terminator().kind.clone();\n-            let same_destinations = rest\n-                .iter()\n-                .map(|target| &bbs[*target].terminator().kind)\n-                .all(|t_kind| t_kind == &first_dest);\n-            if !same_destinations {\n+\n+            // Check that destinations are identical, and if not, then don't optimize this block\n+            if &bbs[first].terminator().kind != &bbs[second].terminator().kind {\n                 continue;\n             }\n+\n+            // Check that blocks are assignments of consts to the same place or same statement,\n+            // and match up 1-1, if not don't optimize this block.\n             let first_stmts = &bbs[first].statements;\n-            for s in first_stmts.iter() {\n-                match &s.kind {\n-                    StatementKind::Assign(box (_, rhs)) => {\n-                        if let Rvalue::Use(Operand::Constant(_)) = rhs {\n-                        } else {\n-                            continue 'outer;\n-                        }\n-                    }\n-                    _ => continue 'outer,\n-                }\n+            let scnd_stmts = &bbs[second].statements;\n+            if first_stmts.len() != scnd_stmts.len() {\n+                continue;\n             }\n-            for target in rest.iter() {\n-                for s in bbs[*target].statements.iter() {\n-                    if let StatementKind::Assign(box (ref lhs, rhs)) = &s.kind {\n-                        if let Rvalue::Use(Operand::Constant(_)) = rhs {\n-                            let has_matching_assn = first_stmts\n-                                .iter()\n-                                .find(|s| {\n-                                    if let StatementKind::Assign(box (lhs_f, _)) = &s.kind {\n-                                        lhs_f == lhs\n-                                    } else {\n-                                        false\n-                                    }\n-                                })\n-                                .is_some();\n-                            if has_matching_assn {\n-                                continue;\n+            for (f, s) in first_stmts.iter().zip(scnd_stmts.iter()) {\n+                match (&f.kind, &s.kind) {\n+                    // If two statements are exactly the same just ignore them.\n+                    (f_s, s_s) if f_s == s_s => (),\n+\n+                    (\n+                        StatementKind::Assign(box (lhs_f, Rvalue::Use(Operand::Constant(f_c)))),\n+                        StatementKind::Assign(box (lhs_s, Rvalue::Use(Operand::Constant(s_c)))),\n+                    ) if lhs_f == lhs_s => {\n+                        if let Some(f_c) = f_c.literal.try_eval_bool(tcx, param_env) {\n+                            // This should also be a bool because it's writing to the same place\n+                            let s_c = s_c.literal.try_eval_bool(tcx, param_env).unwrap();\n+                            // Check that only const assignments of opposite bool values are\n+                            // permitted.\n+                            if f_c != s_c {\n+                              continue\n                             }\n                         }\n+                        continue 'outer;\n                     }\n-\n-                    continue 'outer;\n+                    // If there are not exclusively assignments, then ignore this\n+                    _ => continue 'outer,\n                 }\n             }\n-            let (first_block, to_add) = bbs.pick2_mut(first, bb_idx);\n-            let new_stmts = first_block.statements.iter().cloned().map(|mut s| {\n+            // Take owenership of items now that we know we can optimize.\n+            let discr = discr.clone();\n+\n+            bbs[bb_idx].terminator_mut().kind = TerminatorKind::Goto { target: first };\n+            for s in bbs[first].statements.iter_mut() {\n                 if let StatementKind::Assign(box (_, ref mut rhs)) = s.kind {\n                     let size = tcx.layout_of(param_env.and(switch_ty)).unwrap().size;\n                     let const_cmp = Operand::const_from_scalar(\n@@ -86,17 +78,8 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n                         rustc_span::DUMMY_SP,\n                     );\n                     *rhs = Rvalue::BinaryOp(BinOp::Eq, Operand::Move(discr), const_cmp);\n-                } else {\n-                    unreachable!()\n                 }\n-                s\n-            });\n-            to_add.statements.extend(new_stmts);\n-            to_add.terminator_mut().kind = first_dest;\n-            did_remove_blocks = true;\n-        }\n-        if did_remove_blocks {\n-            simplify::remove_dead_blocks(body);\n+            }\n         }\n     }\n }"}, {"sha": "4f26f3bb45973b178c36fc8821c9bc24025221b8", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bce5eb0c08b33cf4338020a933f28cd87bbd89d1/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bce5eb0c08b33cf4338020a933f28cd87bbd89d1/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=bce5eb0c08b33cf4338020a933f28cd87bbd89d1", "patch": "@@ -441,6 +441,7 @@ fn run_optimization_passes<'tcx>(\n         // with async primitives.\n         &generator::StateTransform,\n         &instcombine::InstCombine,\n+        &match_branches::MatchBranchSimplification,\n         &const_prop::ConstProp,\n         &simplify_branches::SimplifyBranches::new(\"after-const-prop\"),\n         &simplify_try::SimplifyArmIdentity,\n@@ -452,7 +453,6 @@ fn run_optimization_passes<'tcx>(\n         &simplify::SimplifyCfg::new(\"final\"),\n         &nrvo::RenameReturnPlace,\n         &simplify::SimplifyLocals,\n-        &match_branches::MatchBranchSimplification,\n     ];\n \n     let no_optimizations: &[&dyn MirPass<'tcx>] = &["}]}