{"sha": "8dc935e42c6efbc026a0b89080376684ec8e03fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkYzkzNWU0MmM2ZWZiYzAyNmEwYjg5MDgwMzc2Njg0ZWM4ZTAzZmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-16T21:31:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-16T21:31:32Z"}, "message": "auto merge of #13432 : ruediger/rust/rustmode, r=nikomatsakis\n\n* Use `setq-local` instead of `(set (make-local-variable 'var) value)`.  Provides a version for older Emacsen.\r\n* Remove use of `cl.el`.\r\n* Use \\' in file regexp instead of line end match $.\r\n* Use type for `defcustom` and add parent group.", "tree": {"sha": "d66593b1872fe64fbe5a6c8e971d95ad1f8e48a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d66593b1872fe64fbe5a6c8e971d95ad1f8e48a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dc935e42c6efbc026a0b89080376684ec8e03fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dc935e42c6efbc026a0b89080376684ec8e03fc", "html_url": "https://github.com/rust-lang/rust/commit/8dc935e42c6efbc026a0b89080376684ec8e03fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dc935e42c6efbc026a0b89080376684ec8e03fc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8d62147aa9152d05cbffa840bf6a91e7b5a94f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8d62147aa9152d05cbffa840bf6a91e7b5a94f2", "html_url": "https://github.com/rust-lang/rust/commit/b8d62147aa9152d05cbffa840bf6a91e7b5a94f2"}, {"sha": "3a709761a59fcbc6b279b4368d7a2bb3ab7226dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a709761a59fcbc6b279b4368d7a2bb3ab7226dc", "html_url": "https://github.com/rust-lang/rust/commit/3a709761a59fcbc6b279b4368d7a2bb3ab7226dc"}], "stats": {"total": 109, "additions": 58, "deletions": 51}, "files": [{"sha": "f436bcb27ce36665c5b8190acfed94425a82733d", "filename": "src/etc/emacs/rust-mode.el", "status": "modified", "additions": 58, "deletions": 51, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/8dc935e42c6efbc026a0b89080376684ec8e03fc/src%2Fetc%2Femacs%2Frust-mode.el", "raw_url": "https://github.com/rust-lang/rust/raw/8dc935e42c6efbc026a0b89080376684ec8e03fc/src%2Fetc%2Femacs%2Frust-mode.el", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Femacs%2Frust-mode.el?ref=8dc935e42c6efbc026a0b89080376684ec8e03fc", "patch": "@@ -3,17 +3,29 @@\n ;; Version: 0.2.0\n ;; Author: Mozilla\n ;; Url: https://github.com/mozilla/rust\n+;; Keywords: languages\n+\n+;;; Commentary:\n+;;\n+\n+;;; Code:\n \n-(eval-when-compile (require 'cl))\n (eval-when-compile (require 'misc))\n \n+;; for GNU Emacs < 24.3\n+(eval-when-compile\n+  (unless (fboundp 'setq-local)\n+    (defmacro setq-local (var val)\n+      \"Set variable VAR to value VAL in current buffer.\"\n+      (list 'set (list 'make-local-variable (list 'quote var)) val))))\n+\n ;; Syntax definitions and helpers\n (defvar rust-mode-syntax-table\n   (let ((table (make-syntax-table)))\n \n     ;; Operators\n-    (loop for i in '(?+ ?- ?* ?/ ?& ?| ?^ ?! ?< ?> ?~ ?@)\n-          do (modify-syntax-entry i \".\" table))\n+    (dolist (i '(?+ ?- ?* ?/ ?& ?| ?^ ?! ?< ?> ?~ ?@))\n+      (modify-syntax-entry i \".\" table))\n \n     ;; Strings\n     (modify-syntax-entry ?\\\" \"\\\"\" table)\n@@ -30,10 +42,14 @@\n \n     table))\n \n-(defgroup rust-mode nil \"Support for Rust code.\")\n+(defgroup rust-mode nil\n+  \"Support for Rust code.\"\n+  :link '(url-link \"http://www.rust-lang.org/\")\n+  :group 'languages)\n \n (defcustom rust-indent-offset 4\n-  \"*Indent Rust code by this number of spaces.\"\n+  \"Indent Rust code by this number of spaces.\"\n+  :type 'integer\n   :group 'rust-mode)\n \n (defun rust-paren-level () (nth 0 (syntax-ppss)))\n@@ -226,17 +242,16 @@\n      )\n \n    ;; Item definitions\n-   (loop for (item . face) in\n-\n-         '((\"enum\" . font-lock-type-face)\n-           (\"struct\" . font-lock-type-face)\n-           (\"type\" . font-lock-type-face)\n-           (\"mod\" . font-lock-type-face)\n-           (\"use\" . font-lock-type-face)\n-           (\"fn\" . font-lock-function-name-face)\n-           (\"static\" . font-lock-constant-face))\n-\n-         collect `(,(rust-re-item-def item) 1 ,face))))\n+   (mapcar #'(lambda (x)\n+               (list (rust-re-item-def (car x))\n+                     1 (cdr x)))\n+           '((\"enum\" . font-lock-type-face)\n+             (\"struct\" . font-lock-type-face)\n+             (\"type\" . font-lock-type-face)\n+             (\"mod\" . font-lock-type-face)\n+             (\"use\" . font-lock-type-face)\n+             (\"fn\" . font-lock-function-name-face)\n+             (\"static\" . font-lock-constant-face)))))\n \n (defun rust-fill-prefix-for-comment-start (line-start)\n   \"Determine what to use for `fill-prefix' based on what is at the beginning of a line.\"\n@@ -350,17 +365,17 @@\n \n ;;; Imenu support\n (defvar rust-imenu-generic-expression\n-  (append (loop for item in\n-                '(\"enum\" \"struct\" \"type\" \"mod\" \"fn\" \"trait\")\n-                collect `(nil ,(rust-re-item-def item) 1))\n+  (append (mapcar #'(lambda (x)\n+                      (list nil (rust-re-item-def x) 1))\n+                  '(\"enum\" \"struct\" \"type\" \"mod\" \"fn\" \"trait\"))\n           `((\"Impl\" ,(rust-re-item-def \"impl\") 1)))\n   \"Value for `imenu-generic-expression' in Rust mode.\n \n Create a flat index of the item definitions in a Rust file.\n \n Imenu will show all the enums, structs, etc. at the same level.\n-Implementations will be shown under the `Impl` subheading.\n-Use idomenu (imenu with ido-mode) for best mileage.\")\n+Implementations will be shown under the `Impl` subheading.  Use\n+idomenu (imenu with `ido-mode') for best mileage.\")\n \n ;;; Defun Motions\n \n@@ -369,8 +384,7 @@ Use idomenu (imenu with ido-mode) for best mileage.\")\n       (concat \"^\\\\s-*\\\\(?:priv\\\\|pub\\\\)?\\\\s-*\"\n               (regexp-opt\n                '(\"enum\" \"struct\" \"type\" \"mod\" \"use\" \"fn\" \"static\" \"impl\"\n-                 \"extern\" \"impl\" \"static\" \"trait\"\n-                 ))))\n+                 \"extern\" \"impl\" \"static\" \"trait\"))))\n \n (defun rust-beginning-of-defun (&optional arg)\n   \"Move backward to the beginning of the current defun.\n@@ -411,52 +425,43 @@ This is written mainly to be used as `end-of-defun-function' for Rust.\"\n (define-derived-mode rust-mode rust-parent-mode \"Rust\"\n   \"Major mode for Rust code.\"\n   :group 'rust-mode\n-\n-  ;; Basic syntax\n-  (set-syntax-table rust-mode-syntax-table)\n+  :syntax-table rust-mode-syntax-table\n \n   ;; Indentation\n-  (set (make-local-variable 'indent-line-function)\n-       'rust-mode-indent-line)\n+  (setq-local indent-line-function 'rust-mode-indent-line)\n \n   ;; Fonts\n-  (set (make-local-variable 'font-lock-defaults)\n-       '(rust-mode-font-lock-keywords nil nil nil nil))\n+  (setq-local font-lock-defaults '(rust-mode-font-lock-keywords nil nil nil nil))\n \n   ;; Misc\n-  (set (make-local-variable 'comment-start) \"// \")\n-  (set (make-local-variable 'comment-end)   \"\")\n-  (set (make-local-variable 'indent-tabs-mode) nil)\n+  (setq-local comment-start \"// \")\n+  (setq-local comment-end   \"\")\n+  (setq-local indent-tabs-mode nil)\n \n   ;; Allow paragraph fills for comments\n-  (set (make-local-variable 'comment-start-skip)\n-       \"\\\\(?://[/!]*\\\\|/\\\\*[*!]?\\\\)[[:space:]]*\")\n-  (set (make-local-variable 'paragraph-start)\n+  (setq-local comment-start-skip \"\\\\(?://[/!]*\\\\|/\\\\*[*!]?\\\\)[[:space:]]*\")\n+  (setq-local paragraph-start\n        (concat \"[[:space:]]*\\\\(?:\" comment-start-skip \"\\\\|\\\\*/?[[:space:]]*\\\\|\\\\)$\"))\n-  (set (make-local-variable 'paragraph-separate) paragraph-start)\n-  (set (make-local-variable 'normal-auto-fill-function) 'rust-do-auto-fill)\n-  (set (make-local-variable 'fill-paragraph-function) 'rust-fill-paragraph)\n-  (set (make-local-variable 'fill-forward-paragraph-function) 'rust-fill-forward-paragraph)\n-  (set (make-local-variable 'adaptive-fill-function) 'rust-find-fill-prefix)\n-  (set (make-local-variable 'comment-multi-line) t)\n-  (set (make-local-variable 'comment-line-break-function) 'rust-comment-indent-new-line)\n-  (set (make-local-variable 'imenu-generic-expression) rust-imenu-generic-expression)\n-  (set (make-local-variable 'beginning-of-defun-function) 'rust-beginning-of-defun)\n-  (set (make-local-variable 'end-of-defun-function) 'rust-end-of-defun)\n-  )\n-\n+  (setq-local paragraph-separate paragraph-start)\n+  (setq-local normal-auto-fill-function 'rust-do-auto-fill)\n+  (setq-local fill-paragraph-function 'rust-fill-paragraph)\n+  (setq-local fill-forward-paragraph-function 'rust-fill-forward-paragraph)\n+  (setq-local adaptive-fill-function 'rust-find-fill-prefix)\n+  (setq-local comment-multi-line t)\n+  (setq-local comment-line-break-function 'rust-comment-indent-new-line)\n+  (setq-local imenu-generic-expression rust-imenu-generic-expression)\n+  (setq-local beginning-of-defun-function 'rust-beginning-of-defun)\n+  (setq-local end-of-defun-function 'rust-end-of-defun))\n \n ;;;###autoload\n-(add-to-list 'auto-mode-alist '(\"\\\\.rs$\" . rust-mode))\n+(add-to-list 'auto-mode-alist '(\"\\\\.rs\\\\'\" . rust-mode))\n \n (defun rust-mode-reload ()\n   (interactive)\n   (unload-feature 'rust-mode)\n   (require 'rust-mode)\n   (rust-mode))\n \n-(provide 'rust-mode)\n-\n ;; Issue #6887: Rather than inheriting the 'gnu compilation error\n ;; regexp (which is broken on a few edge cases), add our own 'rust\n ;; compilation error regexp and use it instead.\n@@ -480,4 +485,6 @@ See `compilation-error-regexp-alist for help on their format.\")\n                   (cons 'rustc rustc-compilation-regexps))\n      (add-to-list 'compilation-error-regexp-alist 'rustc)))\n \n+(provide 'rust-mode)\n+\n ;;; rust-mode.el ends here"}]}