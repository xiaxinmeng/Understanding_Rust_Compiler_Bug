{"sha": "1331cd4a8c7655875de6b94119f80f26c631925d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMzFjZDRhOGM3NjU1ODc1ZGU2Yjk0MTE5ZjgwZjI2YzYzMTkyNWQ=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-02-23T20:54:18Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-03-22T21:11:00Z"}, "message": "Killing UserAssertTy in CleanupPostBorrowck pass.", "tree": {"sha": "62735cae9477182dc65fb6f185170d6caa8f4b95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62735cae9477182dc65fb6f185170d6caa8f4b95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1331cd4a8c7655875de6b94119f80f26c631925d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlq0G+QACgkQAXYLT59T\n8VSe7w/9FlYwBBoqsEnQrzczamprv+2gCI94SgyaN5015m8SkBTUheKhRe7IUneH\np8vDy9F3ZxW4bOG5pXURDzNQr/z9O94y1ZOHTr/LIfOI1PiM0uJbdi2sg1D8/gXG\nokSLbTXQWtu8z2v720MAL3SMpQBxsBo9z22a0MkVDCvbW5NKVBOMMmfKXp/z9R79\nA/7JnxR4mq6IsrbluQoteHnz6k7IQCL+i2HPd08wF0JJQevPTrf01m2z9R/6oJVf\ncBdVzFieOo4f9UTPZ4+cmmveGmO3t42UzsqC+Jxnl5v8nTuerYKHGH1szGr1bi/r\n/qLpI6au3WEDYWo5wol3+IgcgPIRxpohIQxCjK2aX+G2uqQXeNvbJVc+R6wsQBQP\nywEa/GII7OIQlIcOHE0LOBi3Q50QV7OTuI7xLgEw/zJL9X6ck+U+Kd5mWlwobFiP\nBxg4KgV+pCodblPcTeMLEzBpAYuyIjUnCvIB5f8HFW/R9qWScUvE9ZnQHLkDBZwT\nlo0jScXqN5XFVUAmcfMDOJWHgR+Rcbuh1aIQyMQZDBO2HGkECwLsZtVRNNXop7e3\ndHXlfISnLhNwXoVMJzsqq0aZ2E9dO/tjdl0LXVPpt67gJevuBE/DdMTaaBD4hDSX\np+kDvFZVCbNljZE71JjaDVraJLsJtAXbBvIgbqtAljm2bzhWdeQ=\n=DE7m\n-----END PGP SIGNATURE-----", "payload": "tree 62735cae9477182dc65fb6f185170d6caa8f4b95\nparent 17b285d2036f13f4aa06871ebfa7eb92d1bd1db3\nauthor David Wood <david@davidtw.co> 1519419258 +0000\ncommitter David Wood <david@davidtw.co> 1521753060 +0000\n\nKilling UserAssertTy in CleanupPostBorrowck pass.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1331cd4a8c7655875de6b94119f80f26c631925d", "html_url": "https://github.com/rust-lang/rust/commit/1331cd4a8c7655875de6b94119f80f26c631925d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1331cd4a8c7655875de6b94119f80f26c631925d/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "url": "https://api.github.com/repos/rust-lang/rust/commits/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "html_url": "https://github.com/rust-lang/rust/commit/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3"}], "stats": {"total": 63, "additions": 46, "deletions": 17}, "files": [{"sha": "5fdadc32a76747729555d84dfc3d10af19d7cdf7", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "renamed", "additions": 42, "deletions": 14, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1331cd4a8c7655875de6b94119f80f26c631925d/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1331cd4a8c7655875de6b94119f80f26c631925d/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=1331cd4a8c7655875de6b94119f80f26c631925d", "patch": "@@ -8,16 +8,27 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! This module provides one pass, `CleanEndRegions`, that reduces the\n-//! set of `EndRegion` statements in the MIR.\n+//! This module provides two passes:\n //!\n-//! The \"pass\" is actually implemented as two traversals (aka visits)\n-//! of the input MIR. The first traversal, `GatherBorrowedRegions`,\n-//! finds all of the regions in the MIR that are involved in a borrow.\n+//!   - `CleanEndRegions`, that reduces the set of `EndRegion` statements\n+//!     in the MIR.\n+//!   - `CleanUserAssertTy`, that replaces all `UserAssertTy` statements\n+//!     with `Nop`.\n+//!\n+//! The `CleanEndRegions` \"pass\" is actually implemented as two\n+//! traversals (aka visits) of the input MIR. The first traversal,\n+//! `GatherBorrowedRegions`, finds all of the regions in the MIR\n+//! that are involved in a borrow.\n //!\n //! The second traversal, `DeleteTrivialEndRegions`, walks over the\n //! MIR and removes any `EndRegion` that is applied to a region that\n //! was not seen in the previous pass.\n+//!\n+//! The `CleanUserAssertTy` pass runs at a distinct time from the\n+//! `CleanEndRegions` pass. It is important that the `CleanUserAssertTy`\n+//! pass runs after the MIR borrowck so that the NLL type checker can\n+//! perform the type assertion when it encounters the `UserAssertTy`\n+//! statements.\n \n use rustc_data_structures::fx::FxHashSet;\n \n@@ -27,7 +38,7 @@ use rustc::mir::visit::{MutVisitor, Visitor, TyContext};\n use rustc::ty::{Ty, RegionKind, TyCtxt};\n use transform::{MirPass, MirSource};\n \n-pub struct CleanEndRegions;\n+pub struct CleanupPostBorrowck;\n \n struct GatherBorrowedRegions {\n     seen_regions: FxHashSet<region::Scope>,\n@@ -37,19 +48,24 @@ struct DeleteTrivialEndRegions<'a> {\n     seen_regions: &'a FxHashSet<region::Scope>,\n }\n \n-impl MirPass for CleanEndRegions {\n+pub struct DeleteUserAssertTy;\n+\n+impl MirPass for CleanupPostBorrowck {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _source: MirSource,\n                           mir: &mut Mir<'tcx>) {\n-        if !tcx.emit_end_regions() { return; }\n+        if tcx.emit_end_regions() {\n+            let mut gather = GatherBorrowedRegions {\n+                seen_regions: FxHashSet()\n+            };\n+            gather.visit_mir(mir);\n \n-        let mut gather = GatherBorrowedRegions {\n-            seen_regions: FxHashSet()\n-        };\n-        gather.visit_mir(mir);\n+            let mut delete = DeleteTrivialEndRegions { seen_regions: &mut gather.seen_regions };\n+            delete.visit_mir(mir);\n+        }\n \n-        let mut delete = DeleteTrivialEndRegions { seen_regions: &mut gather.seen_regions };\n+        let mut delete = DeleteUserAssertTy;\n         delete.visit_mir(mir);\n     }\n }\n@@ -93,7 +109,19 @@ impl<'a, 'tcx> MutVisitor<'tcx> for DeleteTrivialEndRegions<'a> {\n         }\n \n         if delete_it {\n-            statement.kind = StatementKind::Nop;\n+            statement.make_nop();\n+        }\n+        self.super_statement(block, statement, location);\n+    }\n+}\n+\n+impl<'tcx> MutVisitor<'tcx> for DeleteUserAssertTy {\n+    fn visit_statement(&mut self,\n+                       block: BasicBlock,\n+                       statement: &mut Statement<'tcx>,\n+                       location: Location) {\n+        if let StatementKind::UserAssertTy(..) = statement.kind {\n+            statement.make_nop();\n         }\n         self.super_statement(block, statement, location);\n     }", "previous_filename": "src/librustc_mir/transform/clean_end_regions.rs"}, {"sha": "427528c4f6d92adbfa64275fec48ce0d46f6f1d3", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1331cd4a8c7655875de6b94119f80f26c631925d/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1331cd4a8c7655875de6b94119f80f26c631925d/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=1331cd4a8c7655875de6b94119f80f26c631925d", "patch": "@@ -25,7 +25,7 @@ use syntax_pos::Span;\n \n pub mod add_validation;\n pub mod add_moves_for_packed_drops;\n-pub mod clean_end_regions;\n+pub mod cleanup_post_borrowck;\n pub mod check_unsafety;\n pub mod simplify_branches;\n pub mod simplify;\n@@ -192,8 +192,9 @@ fn mir_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Stea\n \n     let mut mir = tcx.mir_built(def_id).steal();\n     run_passes![tcx, mir, def_id, 0;\n-        // Remove all `EndRegion` statements that are not involved in borrows.\n-        clean_end_regions::CleanEndRegions,\n+        // Remove all `UserAssertTy` statements and all `EndRegion` statements that are not\n+        // involved in borrows.\n+        cleanup_post_borrowck::CleanupPostBorrowck,\n \n         // What we need to do constant evaluation.\n         simplify::SimplifyCfg::new(\"initial\"),"}]}