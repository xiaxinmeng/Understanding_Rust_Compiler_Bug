{"sha": "57d273f65e7dee2fb9a643a55d9337d2f75ee662", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZDI3M2Y2NWU3ZGVlMmZiOWE2NDNhNTVkOTMzN2QyZjc1ZWU2NjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-17T11:26:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-17T11:26:51Z"}, "message": "auto merge of #12284 : brson/rust/install, r=alexcrichton\n\nWork toward #9876.\r\n\r\nThis adds `prepare.mk`, which is simply a more heavily-parameterized `install.mk`, then uses `prepare` to implement both `install` and the windows installer (`dist`). Smoke tested on both Linux and Windows.", "tree": {"sha": "d02f45db2243f978386fda275d43d893aeef1c3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d02f45db2243f978386fda275d43d893aeef1c3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57d273f65e7dee2fb9a643a55d9337d2f75ee662", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57d273f65e7dee2fb9a643a55d9337d2f75ee662", "html_url": "https://github.com/rust-lang/rust/commit/57d273f65e7dee2fb9a643a55d9337d2f75ee662", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57d273f65e7dee2fb9a643a55d9337d2f75ee662/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8489069b43191c5298f17430933b3b88fb79c3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8489069b43191c5298f17430933b3b88fb79c3c", "html_url": "https://github.com/rust-lang/rust/commit/c8489069b43191c5298f17430933b3b88fb79c3c"}, {"sha": "2b64cb294c7ceae003694e663458025a79f11da4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b64cb294c7ceae003694e663458025a79f11da4", "html_url": "https://github.com/rust-lang/rust/commit/2b64cb294c7ceae003694e663458025a79f11da4"}], "stats": {"total": 413, "additions": 256, "deletions": 157}, "files": [{"sha": "5e6e8f310c7814e1a5078163d6299a80e5f87802", "filename": "Makefile.in", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/57d273f65e7dee2fb9a643a55d9337d2f75ee662/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/57d273f65e7dee2fb9a643a55d9337d2f75ee662/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=57d273f65e7dee2fb9a643a55d9337d2f75ee662", "patch": "@@ -198,16 +198,6 @@ include $(CFG_SRC_DIR)mk/llvm.mk\n # Secondary makefiles, conditionalized for speed\n ######################################################################\n \n-# Source and binary distribution artifacts\n-ifneq ($(strip $(findstring dist,$(MAKECMDGOALS))   \\\n-               $(findstring check,$(MAKECMDGOALS))  \\\n-               $(findstring test,$(MAKECMDGOALS))   \\\n-               $(findstring tidy,$(MAKECMDGOALS))   \\\n-               $(findstring clean,$(MAKECMDGOALS))),)\n-  CFG_INFO := $(info cfg: including dist rules)\n-  include $(CFG_SRC_DIR)mk/dist.mk\n-endif\n-\n # Binary snapshots\n ifneq ($(strip $(findstring snap,$(MAKECMDGOALS))   \\\n                $(findstring clean,$(MAKECMDGOALS))),)\n@@ -230,18 +220,33 @@ ifneq ($(findstring perf,$(MAKECMDGOALS)),)\n   include $(CFG_SRC_DIR)mk/perf.mk\n endif\n \n-# Cleaning\n-ifneq ($(findstring clean,$(MAKECMDGOALS)),)\n-  CFG_INFO := $(info cfg: including clean rules)\n-  include $(CFG_SRC_DIR)mk/clean.mk\n+# Copy all the distributables to another directory for binary install\n+ifneq ($(strip $(findstring prepare,$(MAKECMDGOALS)) \\\n+               $(findstring dist,$(MAKECMDGOALS)) \\\n+               $(findstring install,$(MAKECMDGOALS))),)\n+  CFG_INFO := $(info cfg: including prepare rules)\n+  include $(CFG_SRC_DIR)mk/prepare.mk\n endif\n \n-# Installation from the build directory\n+# (Unix) Installation from the build directory\n ifneq ($(findstring install,$(MAKECMDGOALS)),)\n   CFG_INFO := $(info cfg: including install rules)\n   include $(CFG_SRC_DIR)mk/install.mk\n endif\n \n+# Source and binary distribution artifacts\n+ifneq ($(strip $(findstring dist,$(MAKECMDGOALS)) \\\n+               $(findstring clean,$(MAKECMDGOALS))),)\n+  CFG_INFO := $(info cfg: including dist rules)\n+  include $(CFG_SRC_DIR)mk/dist.mk\n+endif\n+\n+# Cleaning\n+ifneq ($(findstring clean,$(MAKECMDGOALS)),)\n+  CFG_INFO := $(info cfg: including clean rules)\n+  include $(CFG_SRC_DIR)mk/clean.mk\n+endif\n+\n # CTAGS building\n ifneq ($(strip $(findstring TAGS.emacs,$(MAKECMDGOALS)) \\\n                $(findstring TAGS.vi,$(MAKECMDGOALS))),)"}, {"sha": "1a4d7a278437fb6d8791682d8866820c200b855e", "filename": "mk/dist.mk", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/57d273f65e7dee2fb9a643a55d9337d2f75ee662/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/57d273f65e7dee2fb9a643a55d9337d2f75ee662/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=57d273f65e7dee2fb9a643a55d9337d2f75ee662", "patch": "@@ -24,10 +24,10 @@ PKG_FILES := \\\n     $(S)RELEASES.txt                           \\\n     $(S)configure $(S)Makefile.in              \\\n     $(S)man                                    \\\n-    $(S)doc                                    \\\n     $(addprefix $(S)src/,                      \\\n       README.md                                \\\n       compiletest                              \\\n+      doc                                      \\\n       driver                                   \\\n       etc                                      \\\n       $(foreach crate,$(CRATES),lib$(crate))   \\\n@@ -52,12 +52,24 @@ LICENSE.txt: $(S)COPYRIGHT $(S)LICENSE-APACHE $(S)LICENSE-MIT\n \tcp $< $@\n \n $(PKG_EXE): rust.iss modpath.iss LICENSE.txt rust-logo.ico \\\n-            $(PKG_FILES) $(CSREQ3_T_$(CFG_BUILD)_H_$(CFG_BUILD))\n-\t$(CFG_PYTHON) $(S)src/etc/copy-runtime-deps.py i686-pc-mingw32/stage3/bin\n+            $(PKG_FILES) $(CSREQ3_T_$(CFG_BUILD)_H_$(CFG_BUILD)) \\\n+            dist-prepare-win\n+\t$(CFG_PYTHON) $(S)src/etc/copy-runtime-deps.py tmp/dist/win/bin\n \t@$(call E, ISCC: $@)\n \t$(Q)\"$(CFG_ISCC)\" $<\n-endif\n \n+dist-prepare-win: PREPARE_HOST=$(CFG_BUILD)\n+dist-prepare-win: PREPARE_TARGETS=$(CFG_BUILD)\n+dist-prepare-win: PREPARE_DEST_DIR=tmp/dist/win\n+# On windows we're using stage3, unlike Unix...\n+dist-prepare-win: PREPARE_STAGE=3\n+dist-prepare-win: PREPARE_DIR_CMD=$(DEFAULT_PREPARE_DIR_CMD)\n+dist-prepare-win: PREPARE_BIN_CMD=$(DEFAULT_PREPARE_BIN_CMD)\n+dist-prepare-win: PREPARE_LIB_CMD=$(DEFAULT_PREPARE_LIB_CMD)\n+dist-prepare-win: PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n+dist-prepare-win: prepare-base\n+\n+endif\n \n $(PKG_TAR): $(PKG_FILES)\n \t@$(call E, making dist dir)"}, {"sha": "dbb349fcf3a739abe597d91ce62ea895b0dbf0d7", "filename": "mk/install.mk", "status": "modified", "additions": 24, "deletions": 137, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/57d273f65e7dee2fb9a643a55d9337d2f75ee662/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/57d273f65e7dee2fb9a643a55d9337d2f75ee662/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=57d273f65e7dee2fb9a643a55d9337d2f75ee662", "patch": "@@ -12,117 +12,33 @@\n # For consistency it might be desirable for stageN to be an exact\n # mirror of the installation directory structure.\n \n-# Installation macros.\n-# For INSTALL,\n-# $(1) is the source dirctory\n-# $(2) is the destination directory\n-# $(3) is the filename/libname-glob\n-ifdef VERBOSE\n- INSTALL = install -m755 $(1)/$(3) $(DESTDIR)$(2)/$(3)\n-else\n- INSTALL = $(Q)$(call E, install: $(DESTDIR)$(2)/$(3)) && install -m755 $(1)/$(3) $(DESTDIR)$(2)/$(3)\n-endif\n-\n-# For MK_INSTALL_DIR\n-# $(1) is the directory to create\n-MK_INSTALL_DIR = (umask 022 && mkdir -p $(DESTDIR)$(1))\n-\n-# For INSTALL_LIB,\n-# Target-specific $(LIB_SOURCE_DIR) is the source directory\n-# Target-specific $(LIB_DESTIN_DIR) is the destination directory\n-# $(1) is the filename/libname-glob\n-ifdef VERBOSE\n- DO_INSTALL_LIB = install -m644 `ls -drt1 $(LIB_SOURCE_DIR)/$(1) | tail -1` $(DESTDIR)$(LIB_DESTIN_DIR)/\n-else\n- DO_INSTALL_LIB = $(Q)$(call E, install_lib: $(DESTDIR)$(LIB_DESTIN_DIR)/$(1)) &&                    \\\n-\t       install -m644 `ls -drt1 $(LIB_SOURCE_DIR)/$(1) | tail -1` $(DESTDIR)$(LIB_DESTIN_DIR)/\n-endif\n-\n-# Target-specific $(LIB_SOURCE_DIR) is the source directory\n-# Target-specific $(LIB_DESTIN_DIR) is the destination directory\n-# $(1) is the filename/libname-glob\n-define INSTALL_LIB\n-  $(if $(filter-out 1,$(words $(wildcard $(LIB_SOURCE_DIR)/$(1)))),        \\\n-       $(error Aborting install because more than one library matching     \\\n-               $(1) is present in build tree $(LIB_SOURCE_DIR):            \\\n-               $(wildcard $(LIB_SOURCE_DIR)/$(1))))\n-  $(Q)LIB_NAME=\"$(notdir $(lastword $(wildcard $(LIB_SOURCE_DIR)/$(1))))\"; \\\n-  MATCHES=\"$(filter-out %$(notdir $(lastword $(wildcard $(LIB_SOURCE_DIR)/$(1)))),\\\n-                        $(wildcard $(LIB_DESTIN_DIR)/$(1)))\";              \\\n-  if [ -n \"$$MATCHES\" ]; then                                              \\\n-    echo \"warning: one or libraries matching Rust library '$(1)'\" &&       \\\n-    echo \"  (other than '$$LIB_NAME' itself) already present\"     &&       \\\n-    echo \"  at destination $(LIB_DESTIN_DIR):\"                    &&       \\\n-    echo $$MATCHES ;                                                       \\\n-  fi\n-  $(call DO_INSTALL_LIB,$(1))\n-endef\n-\n # The stage we install from\n ISTAGE = 2\n \n+install: PREPARE_HOST=$(CFG_BUILD)\n+install: PREPARE_TARGETS=$(CFG_TARGET)\n+install: PREPARE_STAGE=$(ISTAGE)\n+install: PREPARE_DIR_CMD=$(DEFAULT_PREPARE_DIR_CMD)\n+install: PREPARE_BIN_CMD=$(DEFAULT_PREPARE_BIN_CMD)\n+install: PREPARE_LIB_CMD=$(DEFAULT_PREPARE_LIB_CMD)\n+install: PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n+install: PREPARE_SOURCE_DIR=$(PREPARE_HOST)/stage$(PREPARE_STAGE)\n+install: PREPARE_SOURCE_BIN_DIR=$(PREPARE_SOURCE_DIR)/bin\n+install: PREPARE_SOURCE_LIB_DIR=$(PREPARE_SOURCE_DIR)/$(CFG_LIBDIR_RELATIVE)\n+install: PREPARE_SOURCE_MAN_DIR=$(S)/man\n+install: PREPARE_DEST_BIN_DIR=$(DESTDIR)$(CFG_PREFIX)/bin\n+install: PREPARE_DEST_LIB_DIR=$(DESTDIR)$(CFG_LIBDIR)\n+install: PREPARE_DEST_MAN_DIR=$(DESTDIR)$(CFG_MANDIR)/man1\n+install: prepare-everything\n+\n+\n+# Uninstall code\n+\n PREFIX_ROOT = $(CFG_PREFIX)\n PREFIX_BIN = $(PREFIX_ROOT)/bin\n PREFIX_LIB = $(CFG_LIBDIR)\n \n-INSTALL_TOOLS := $(filter-out compiletest, $(TOOLS))\n-\n-define INSTALL_PREPARE_N\n-  # $(1) is the target triple\n-  # $(2) is the host triple\n-\n-# T{B,L} == Target {Bin, Lib} for stage ${ISTAGE}\n-TB$(1)$(2) = $$(TBIN$$(ISTAGE)_T_$(1)_H_$(2))\n-TL$(1)$(2) = $$(TLIB$$(ISTAGE)_T_$(1)_H_$(2))\n-\n-# PT{R,B,L} == Prefix Target {Root, Bin, Lib}\n-PTR$(1)$(2) = $$(PREFIX_LIB)/$(CFG_RUSTLIBDIR)/$(1)\n-PTB$(1)$(2) = $$(PTR$(1)$(2))/bin\n-PTL$(1)$(2) = $$(PTR$(1)$(2))/lib\n-\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n- $(eval $(call INSTALL_PREPARE_N,$(target),$(CFG_BUILD))))\n-\n-define INSTALL_TARGET_N\n-install-target-$(1)-host-$(2): LIB_SOURCE_DIR=$$(TL$(1)$(2))\n-install-target-$(1)-host-$(2): LIB_DESTIN_DIR=$$(PTL$(1)$(2))\n-install-target-$(1)-host-$(2):\t\t\t\t\t\t\\\n-\t    $$(TSREQ$$(ISTAGE)_T_$(1)_H_$(2))\t\t\t\t\\\n-\t    $$(SREQ$$(ISTAGE)_T_$(1)_H_$(2))\n-\t$$(Q)$$(call MK_INSTALL_DIR,$$(PTL$(1)$(2)))\n-\t$$(Q)$$(foreach crate,$$(TARGET_CRATES),\\\n-\t\t$$(call INSTALL_LIB,$$(call CFG_LIB_GLOB_$(1),$$(crate)));\\\n-\t\t$$(call INSTALL_LIB,$$(call CFG_RLIB_GLOB,$$(crate)));)\n-\t$$(Q)$$(call INSTALL_LIB,libmorestack.a)\n-\t$$(Q)$$(call INSTALL_LIB,libcompiler-rt.a)\n-\n-endef\n-\n-define INSTALL_HOST_N\n-\n-install-target-$(1)-host-$(2): LIB_SOURCE_DIR=$$(TL$(1)$(2))\n-install-target-$(1)-host-$(2): LIB_DESTIN_DIR=$$(PTL$(1)$(2))\n-install-target-$(1)-host-$(2): $$(CSREQ$$(ISTAGE)_T_$(1)_H_$(2))\n-\t$$(Q)$$(call MK_INSTALL_DIR,$$(PTL$(1)$(2)))\n-\t$$(Q)$$(foreach crate,$$(CRATES),\\\n-\t    $$(call INSTALL_LIB,$$(call CFG_LIB_GLOB_$(1),$$(crate)));)\n-\t$$(Q)$$(foreach crate,$$(TARGET_CRATES),\\\n-\t    $$(call INSTALL_LIB,$$(call CFG_RLIB_GLOB,$$(crate)));)\n-\t$$(Q)$$(call INSTALL_LIB,libmorestack.a)\n-\t$$(Q)$$(call INSTALL_LIB,libcompiler-rt.a)\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n- $(if $(findstring $(target), $(CFG_BUILD)), \\\n-  $(eval $(call INSTALL_HOST_N,$(target),$(CFG_BUILD))), \\\n-  $(eval $(call INSTALL_TARGET_N,$(target),$(CFG_BUILD)))))\n-\n-INSTALL_TARGET_RULES = $(foreach target,$(CFG_TARGET), \\\n- install-target-$(target)-host-$(CFG_BUILD))\n-\n-install: all install-host install-targets\n+INSTALL_TOOLS := $(PREPARE_TOOLS)\n \n # Shorthand for build/stageN/bin\n HB = $(HBIN$(ISTAGE)_H_$(CFG_BUILD))\n@@ -134,39 +50,6 @@ PHB = $(PREFIX_BIN)\n # Shorthand for the prefix bin directory\n PHL = $(PREFIX_LIB)\n \n-install-host%: LIB_SOURCE_DIR=$(HL)\n-install-host%: LIB_DESTIN_DIR=$(PHL)\n-install-host:\t\t\t\t\t\t\t\t    \\\n-\t    install-host-prep\t\t\t\t\t\t    \\\n-\t    $(foreach tool,$(INSTALL_TOOLS),install-host-tool-$(tool))\n-\n-install-host-prep: $(CSREQ$(ISTAGE)_T_$(CFG_BUILD)_H_$(CFG_BUILD))\n-\t$(Q)$(call MK_INSTALL_DIR,$(PREFIX_BIN))\n-\t$(Q)$(call MK_INSTALL_DIR,$(PREFIX_LIB))\n-\t$(Q)$(call MK_INSTALL_DIR,$(CFG_MANDIR)/man1)\n-\n-define INSTALL_HOST_TOOL\n-install-host-tool-$(1):\t\t\t\t\t\t\t    \\\n-\t    $$(foreach dep,$$(TOOL_DEPS_$(1)),install-host-lib-$$(dep))\t    \\\n-\t    $$(CSREQ$$(ISTAGE)_T_$$(CFG_BUILD)_H_$$(CFG_BUILD))\n-\t$$(Q)$$(call INSTALL,$$(HB2),$$(PHB),$(1)$$(X_$$(CFG_BUILD)))\n-\t$$(Q)$$(call INSTALL,$$(S)/man,$$(CFG_MANDIR)/man1,$(1).1)\n-endef\n-\n-$(foreach tool,$(INSTALL_TOOLS),$(eval $(call INSTALL_HOST_TOOL,$(tool))))\n-\n-define INSTALL_HOST_LIB\n-install-host-lib-$(1):\t\t\t\t\t\t\t    \\\n-\t    $$(foreach dep,$$(RUST_DEPS_$(1)),install-host-lib-$$(dep))\t    \\\n-\t    $$(CSREQ$$(ISTAGE)_T_$$(CFG_BUILD)_H_$$(CFG_BUILD))\n-\t$$(Q)$$(call INSTALL_LIB,$$(call CFG_LIB_GLOB_$$(CFG_BUILD),$(1)))\n-endef\n-\n-$(foreach lib,$(CRATES),$(eval $(call INSTALL_HOST_LIB,$(lib))))\n-\n-install-targets: $(INSTALL_TARGET_RULES)\n-\n-\n HOST_LIB_FROM_HL_GLOB = \\\n   $(patsubst $(HL)/%,$(PHL)/%,$(wildcard $(HL)/$(1)))\n \n@@ -188,6 +71,10 @@ endef\n \n $(foreach lib,$(CRATES),$(eval $(call UNINSTALL_LIB,$(lib))))\n \n+\n+# Android runtime setup\n+# FIXME: This probably belongs somewhere else\n+\n # target platform specific variables\n # for arm-linux-androidabi\n define DEF_ADB_DEVICE_STATUS"}, {"sha": "361b9c7ea9b453eaff5528d77bdcea424cf9a5ae", "filename": "mk/prepare.mk", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/57d273f65e7dee2fb9a643a55d9337d2f75ee662/mk%2Fprepare.mk", "raw_url": "https://github.com/rust-lang/rust/raw/57d273f65e7dee2fb9a643a55d9337d2f75ee662/mk%2Fprepare.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fprepare.mk?ref=57d273f65e7dee2fb9a643a55d9337d2f75ee662", "patch": "@@ -0,0 +1,194 @@\n+# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+# Basic support for producing installation images.\n+#\n+# The 'prepare' build target copies all release artifacts from the build\n+# directory to some other location, placing all binaries, libraries, and\n+# docs in their final locations relative to each other.\n+#\n+# It requires the following variables to be set:\n+#\n+#   PREPARE_HOST - the host triple \n+#   PREPARE_TARGETS - the target triples, space separated\n+#   PREPARE_DEST_DIR - the directory to put the image\n+\n+prepare: PREPARE_STAGE=2\n+prepare: PREPARE_DIR_CMD=$(DEFAULT_PREPARE_DIR_CMD)\n+prepare: PREPARE_BIN_CMD=$(DEFAULT_PREPARE_BIN_CMD)\n+prepare: PREPARE_LIB_CMD=$(DEFAULT_PREPARE_LIB_CMD)\n+prepare: PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n+prepare: prepare-base\n+\n+prepare-base: PREPARE_SOURCE_DIR=$(PREPARE_HOST)/stage$(PREPARE_STAGE)\n+prepare-base: PREPARE_SOURCE_BIN_DIR=$(PREPARE_SOURCE_DIR)/bin\n+prepare-base: PREPARE_SOURCE_LIB_DIR=$(PREPARE_SOURCE_DIR)/$(CFG_LIBDIR_RELATIVE)\n+prepare-base: PREPARE_SOURCE_MAN_DIR=$(S)/man\n+prepare-base: PREPARE_DEST_BIN_DIR=$(PREPARE_DEST_DIR)/bin\n+prepare-base: PREPARE_DEST_LIB_DIR=$(PREPARE_DEST_DIR)/$(CFG_LIBDIR_RELATIVE)\n+prepare-base: PREPARE_DEST_MAN_DIR=$(PREPARE_DEST_DIR)/man1\n+prepare-base: prepare-host prepare-targets\n+\n+prepare-everything: prepare-host prepare-targets\n+\n+DEFAULT_PREPARE_DIR_CMD = umask 022 && mkdir -p\n+DEFAULT_PREPARE_BIN_CMD = install -m755\n+DEFAULT_PREPARE_LIB_CMD = install -m644\n+DEFAULT_PREPARE_MAN_CMD = install -m755\n+\n+# On windows we install from stage3, but on unix only stage2\n+# Because of the way these rules are organized, preparing from any\n+# stage requires all these stages to be built\n+ifdef CFG_WINDOWSY_$(CFG_BUILD)\n+PREPARE_STAGES=3\n+else\n+PREPARE_STAGES=2\n+endif\n+\n+# Create a directory\n+# $(1) is the directory\n+define PREPARE_DIR\n+\t@$(Q)$(call E, install: $(1))\n+\t$(Q)$(PREPARE_DIR_CMD) $(1)\n+endef\n+\n+# Copy an executable\n+# $(1) is the filename/libname-glob\n+define PREPARE_BIN\n+\t@$(call E, install: $(PREPARE_DEST_BIN_DIR)/$(1))\n+\t$(Q)$(PREPARE_BIN_CMD) $(PREPARE_SOURCE_BIN_DIR)/$(1) $(PREPARE_DEST_BIN_DIR)/$(1)\n+endef\n+\n+# Copy a dylib or rlib\n+# $(1) is the filename/libname-glob\n+#\n+# XXX: Don't remove the $(nop) command below!\n+# Yeah, that's right, it's voodoo. Something in the way this macro is being expanded\n+# causes it to parse incorrectly. Throwing in that empty command seems to fix the\n+# problem. I'm sorry, just don't remove the $(nop), alright?\n+define PREPARE_LIB\n+\t$(nop)\n+\t@$(call E, install: $(PREPARE_WORKING_DEST_LIB_DIR)/$(1))\n+\t$(Q)LIB_NAME=\"$(notdir $(lastword $(wildcard $(PREPARE_WORKING_SOURCE_LIB_DIR)/$(1))))\"; \\\n+\tMATCHES=\"$(filter-out %$(notdir $(lastword $(wildcard $(PREPARE_WORKING_SOURCE_LIB_DIR)/$(1)))),\\\n+                        $(wildcard $(PREPARE_WORKING_DEST_LIB_DIR)/$(1)))\"; \\\n+\tif [ -n \"$$MATCHES\" ]; then                                              \\\n+\t  echo \"warning: one or libraries matching Rust library '$(1)'\" &&       \\\n+\t  echo \"  (other than '$$LIB_NAME' itself) already present\"     &&       \\\n+\t  echo \"  at destination $(PREPARE_WORKING_DEST_LIB_DIR):\"                    &&       \\\n+\t  echo $$MATCHES ;                                                       \\\n+\tfi\n+\t$(Q)$(PREPARE_LIB_CMD) `ls -drt1 $(PREPARE_WORKING_SOURCE_LIB_DIR)/$(1) | tail -1` $(PREPARE_WORKING_DEST_LIB_DIR)/\n+endef\n+\n+# Copy a man page\n+# $(1) - source dir\n+define PREPARE_MAN\n+\t@$(call E, install: $(PREPARE_DEST_MAN_DIR)/$(1))\n+\t$(Q)$(PREPARE_MAN_CMD) $(PREPARE_SOURCE_MAN_DIR)/$(1) $(PREPARE_DEST_MAN_DIR)/$(1)\n+endef\n+\n+\n+PREPARE_TOOLS = $(filter-out compiletest, $(TOOLS))\n+\n+prepare-host: prepare-host-tools\n+\n+prepare-host-tools: \\\n+        $(foreach tool, $(PREPARE_TOOLS),\\\n+          $(foreach stage,$(PREPARE_STAGES),\\\n+            $(foreach host,$(CFG_HOST),\\\n+              prepare-host-tool-$(tool)-$(stage)-$(host))))\n+\n+prepare-host-dirs:\n+\t$(call PREPARE_DIR,$(PREPARE_DEST_BIN_DIR))\n+\t$(call PREPARE_DIR,$(PREPARE_DEST_LIB_DIR))\n+\t$(call PREPARE_DIR,$(PREPARE_DEST_MAN_DIR))\n+\n+# $(1) is tool\n+# $(2) is stage\n+# $(3) is host\n+define DEF_PREPARE_HOST_TOOL\n+prepare-host-tool-$(1)-$(2)-$(3): $$(foreach dep,$$(TOOL_DEPS_$(1)),prepare-host-lib-$$(dep)-$(2)-$(3)) \\\n+                                  $$(HBIN$(2)_H_$(3))/$(1)$$(X_$(3)) \\\n+                                  prepare-host-dirs\n+\t$$(if $$(findstring $(2), $$(PREPARE_STAGE)),\\\n+      $$(if $$(findstring $(3), $$(PREPARE_HOST)),\\\n+        $$(call PREPARE_BIN,$(1)$$(X_$$(PREPARE_HOST))),),)\n+\t$$(if $$(findstring $(2), $$(PREPARE_STAGE)),\\\n+      $$(if $$(findstring $(3), $$(PREPARE_HOST)),\\\n+        $$(call PREPARE_MAN,$(1).1),),)\n+endef\n+\n+$(foreach tool,$(PREPARE_TOOLS),\\\n+  $(foreach stage,$(PREPARE_STAGES),\\\n+    $(foreach host,$(CFG_HOST),\\\n+        $(eval $(call DEF_PREPARE_HOST_TOOL,$(tool),$(stage),$(host))))))\n+\n+# For host libraries only install dylibs, not rlibs since the host libs are only\n+# used to support rustc and rustc uses dynamic linking\n+#\n+# $(1) is tool\n+# $(2) is stage\n+# $(3) is host\n+define DEF_PREPARE_HOST_LIB\n+prepare-host-lib-$(1)-$(2)-$(3): PREPARE_WORKING_SOURCE_LIB_DIR=$$(PREPARE_SOURCE_LIB_DIR)\n+prepare-host-lib-$(1)-$(2)-$(3): PREPARE_WORKING_DEST_LIB_DIR=$$(PREPARE_DEST_LIB_DIR)\n+prepare-host-lib-$(1)-$(2)-$(3): $$(foreach dep,$$(RUST_DEPS_$(1)),prepare-host-lib-$$(dep)-$(2)-$(3))\\\n+                                 $$(HLIB$(2)_H_$(3))/stamp.$(1) \\\n+                                 prepare-host-dirs\n+\t$$(if $$(findstring $(2), $$(PREPARE_STAGE)),\\\n+      $$(if $$(findstring $(3), $$(PREPARE_HOST)),\\\n+        $$(call PREPARE_LIB,$$(call CFG_LIB_GLOB_$$(PREPARE_HOST),$(1))),),)\n+endef\n+\n+$(foreach lib,$(CRATES),\\\n+  $(foreach stage,$(PREPARE_STAGES),\\\n+    $(foreach host,$(CFG_HOST),\\\n+      $(eval $(call DEF_PREPARE_HOST_LIB,$(lib),$(stage),$(host))))))\n+\n+prepare-targets:\\\n+        $(foreach host,$(CFG_HOST),\\\n+           $(foreach target,$(CFG_TARGET),\\\n+             $(foreach stage,$(PREPARE_STAGES),\\\n+               prepare-target-$(target)-host-$(host)-$(stage))))\n+\n+# $(1) is stage\n+# $(2) is target\n+# $(3) is host\n+define DEF_PREPARE_TARGET_N\n+# Rebind PREPARE_*_LIB_DIR to point to rustlib, then install the libs for the targets\n+prepare-target-$(2)-host-$(3)-$(1): PREPARE_WORKING_SOURCE_LIB_DIR=$$(PREPARE_SOURCE_LIB_DIR)/$$(CFG_RUSTLIBDIR)/$(2)/lib\n+prepare-target-$(2)-host-$(3)-$(1): PREPARE_WORKING_DEST_LIB_DIR=$$(PREPARE_DEST_LIB_DIR)/$$(CFG_RUSTLIBDIR)/$(2)/lib\n+prepare-target-$(2)-host-$(3)-$(1): \\\n+        $$(foreach crate,$$(TARGET_CRATES), \\\n+          $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(crate)) \\\n+        $$(if $$(findstring $(2),$$(CFG_HOST)), \\\n+          $$(foreach crate,$$(HOST_CRATES), \\\n+            $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(crate)),)\n+# Only install if this host and target combo is being prepared\n+\t$$(if $$(findstring $(1), $$(PREPARE_STAGE)),\\\n+      $$(if $$(findstring $(2), $$(PREPARE_TARGETS)),\\\n+        $$(if $$(findstring $(3), $$(PREPARE_HOST)),\\\n+          $$(call PREPARE_DIR,$$(PREPARE_WORKING_DEST_LIB_DIR))\\\n+          $$(foreach crate,$$(TARGET_CRATES),\\\n+            $$(call PREPARE_LIB,$$(call CFG_LIB_GLOB_$(2),$$(crate)))\\\n+            $$(call PREPARE_LIB,$$(call CFG_RLIB_GLOB,$$(crate))))\\\n+          $$(if $$(findstring $(2),$$(CFG_HOST)),\\\n+            $$(foreach crate,$$(HOST_CRATES),\\\n+              $$(call PREPARE_LIB,$$(call CFG_LIB_GLOB_$(2),$$(crate)))\\\n+              $$(call PREPARE_LIB,$$(call CFG_RLIB_GLOB,$$(crate)))),)\\\n+          $$(call PREPARE_LIB,libmorestack.a) \\\n+          $$(call PREPARE_LIB,libcompiler-rt.a),),),)\n+endef\n+\n+$(foreach host,$(CFG_HOST),\\\n+  $(foreach target,$(CFG_TARGET), \\\n+    $(foreach stage,$(PREPARE_STAGES),\\\n+      $(eval $(call DEF_PREPARE_TARGET_N,$(stage),$(target),$(host))))))"}, {"sha": "559ed0e860f42985eaed0487a2f0254552dcd5b4", "filename": "src/etc/pkg/rust.iss", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57d273f65e7dee2fb9a643a55d9337d2f75ee662/src%2Fetc%2Fpkg%2Frust.iss", "raw_url": "https://github.com/rust-lang/rust/raw/57d273f65e7dee2fb9a643a55d9337d2f75ee662/src%2Fetc%2Fpkg%2Frust.iss", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fpkg%2Frust.iss?ref=57d273f65e7dee2fb9a643a55d9337d2f75ee662", "patch": "@@ -36,7 +36,7 @@ Uninstallable=yes\n Name: modifypath; Description: &Add {app}\\bin to your PATH (recommended)\n \n [Files]\n-Source: \"i686-pc-mingw32/stage3/*.*\" ; DestDir: \"{app}\"; Flags: ignoreversion recursesubdirs\n+Source: \"tmp/dist/win/*.*\" ; DestDir: \"{app}\"; Flags: ignoreversion recursesubdirs\n \n [Code]\n const"}, {"sha": "2c4d553a39f6477fa26243dcd75436a9a02075f5", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57d273f65e7dee2fb9a643a55d9337d2f75ee662/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57d273f65e7dee2fb9a643a55d9337d2f75ee662/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=57d273f65e7dee2fb9a643a55d9337d2f75ee662", "patch": "@@ -12,6 +12,7 @@\n #[desc = \"rustdoc, the Rust documentation extractor\"];\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"dylib\"];\n+#[crate_type = \"rlib\"];\n \n #[feature(globs, struct_variant, managed_boxes)];\n "}]}