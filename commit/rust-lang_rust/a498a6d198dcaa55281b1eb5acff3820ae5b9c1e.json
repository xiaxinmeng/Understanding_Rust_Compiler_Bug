{"sha": "a498a6d198dcaa55281b1eb5acff3820ae5b9c1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0OThhNmQxOThkY2FhNTUyODFiMWViNWFjZmYzODIwYWU1YjljMWU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-12-03T10:07:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-03T10:07:18Z"}, "message": "Rollup merge of #56433 - yui-knk:update_comment_of_parse_visibility, r=petrochenkov\n\nAdd description about `crate` for parse_visibility's comment\n\nThis rule was introduced by https://github.com/rust-lang/rust/pull/45401.", "tree": {"sha": "2d9f0b12ca5d81249795c887e6fd704e418fda63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d9f0b12ca5d81249795c887e6fd704e418fda63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a498a6d198dcaa55281b1eb5acff3820ae5b9c1e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcBQBWCRBK7hj4Ov3rIwAAdHIIAJ++jpQ/P6VtMlLNG0+jAhp+\nIJ10Jq4k2oZuy6o0LpDFyItpfi5nDi4kGcEvRc+vxFtqMDtI86M0GWuQeWbBJgAD\nmyD/x0aMcWfcmv1oFTSMsmb0thAdxqCKT0WkgvZ87934fffYHtvATSKPwL4MHTTE\n2zjplAQmTNdJk/iDpbiwMbRBB9snAAILORdb1EBNHMtAeUHkIZTK+FPiCthXlGTL\ncYrbJfW0DPKe84lYMhk8QCH/bzyTOIFNmxgJgBcyUM/5uXplzn5RZ1VO+TfBZQ8u\nrlfFBDz+5MSviaKB0Fqzq0j0oicn6rzYEJ2c4P6gQiFgm8VwWoBNd6L+/HlkCgU=\n=JAUe\n-----END PGP SIGNATURE-----\n", "payload": "tree 2d9f0b12ca5d81249795c887e6fd704e418fda63\nparent 52a4fc81300bef1d6c4a133a01aacfa91f736908\nparent 172ec724af5013e9e9b2cf8f3bc12eda2db52876\nauthor kennytm <kennytm@gmail.com> 1543831638 +0800\ncommitter GitHub <noreply@github.com> 1543831638 +0800\n\nRollup merge of #56433 - yui-knk:update_comment_of_parse_visibility, r=petrochenkov\n\nAdd description about `crate` for parse_visibility's comment\n\nThis rule was introduced by https://github.com/rust-lang/rust/pull/45401.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a498a6d198dcaa55281b1eb5acff3820ae5b9c1e", "html_url": "https://github.com/rust-lang/rust/commit/a498a6d198dcaa55281b1eb5acff3820ae5b9c1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a498a6d198dcaa55281b1eb5acff3820ae5b9c1e/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52a4fc81300bef1d6c4a133a01aacfa91f736908", "url": "https://api.github.com/repos/rust-lang/rust/commits/52a4fc81300bef1d6c4a133a01aacfa91f736908", "html_url": "https://github.com/rust-lang/rust/commit/52a4fc81300bef1d6c4a133a01aacfa91f736908"}, {"sha": "172ec724af5013e9e9b2cf8f3bc12eda2db52876", "url": "https://api.github.com/repos/rust-lang/rust/commits/172ec724af5013e9e9b2cf8f3bc12eda2db52876", "html_url": "https://github.com/rust-lang/rust/commit/172ec724af5013e9e9b2cf8f3bc12eda2db52876"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "1cd5006f3304cefc7a7d0ab8374691a4a5a9825d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a498a6d198dcaa55281b1eb5acff3820ae5b9c1e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a498a6d198dcaa55281b1eb5acff3820ae5b9c1e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a498a6d198dcaa55281b1eb5acff3820ae5b9c1e", "patch": "@@ -6280,9 +6280,10 @@ impl<'a> Parser<'a> {\n         self.parse_single_struct_field(lo, vis, attrs)\n     }\n \n-    /// Parse `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `pub(self)` for `pub(in self)`\n-    /// and `pub(super)` for `pub(in super)`.  If the following element can't be a tuple (i.e. it's\n-    /// a function definition, it's not a tuple struct field) and the contents within the parens\n+    /// Parse `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,\n+    /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.\n+    /// If the following element can't be a tuple (i.e. it's a function definition,\n+    /// it's not a tuple struct field) and the contents within the parens\n     /// isn't valid, emit a proper diagnostic.\n     pub fn parse_visibility(&mut self, can_take_tuple: bool) -> PResult<'a, Visibility> {\n         maybe_whole!(self, NtVis, |x| x);"}]}