{"sha": "340a21929024efedec5dfa8d4c6a14df41640f78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MGEyMTkyOTAyNGVmZWRlYzVkZmE4ZDRjNmExNGRmNDE2NDBmNzg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-31T18:45:14Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-31T18:46:04Z"}, "message": "libsyntax: Get \"extern mod foo;\" working in .rc files", "tree": {"sha": "d32e34c4b8af73298025c164e7a744ff2727f61d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d32e34c4b8af73298025c164e7a744ff2727f61d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/340a21929024efedec5dfa8d4c6a14df41640f78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/340a21929024efedec5dfa8d4c6a14df41640f78", "html_url": "https://github.com/rust-lang/rust/commit/340a21929024efedec5dfa8d4c6a14df41640f78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/340a21929024efedec5dfa8d4c6a14df41640f78/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3fdc8c7b56fe8e786801b87f809ddc2f51eea42", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3fdc8c7b56fe8e786801b87f809ddc2f51eea42", "html_url": "https://github.com/rust-lang/rust/commit/c3fdc8c7b56fe8e786801b87f809ddc2f51eea42"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "0b18d7d9e6e30cf106c6e4b3e5063f8519be4d4a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/340a21929024efedec5dfa8d4c6a14df41640f78/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/340a21929024efedec5dfa8d4c6a14df41640f78/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=340a21929024efedec5dfa8d4c6a14df41640f78", "patch": "@@ -3423,12 +3423,19 @@ struct parser {\n     }\n \n     fn is_view_item() -> bool {\n-        let tok = if !self.is_keyword(~\"pub\") && !self.is_keyword(~\"priv\") {\n-            self.token\n-        } else { self.look_ahead(1u) };\n+        let tok, next_tok;\n+        if !self.is_keyword(~\"pub\") && !self.is_keyword(~\"priv\") {\n+            tok = self.token;\n+            next_tok = self.look_ahead(1);\n+        } else {\n+            tok = self.look_ahead(1);\n+            next_tok = self.look_ahead(2);\n+        };\n         self.token_is_keyword(~\"use\", tok)\n             || self.token_is_keyword(~\"import\", tok)\n             || self.token_is_keyword(~\"export\", tok)\n+            || (self.token_is_keyword(~\"extern\", tok) &&\n+                self.token_is_keyword(~\"mod\", next_tok))\n     }\n \n     fn parse_view_item(+attrs: ~[attribute]) -> @view_item {\n@@ -3439,7 +3446,14 @@ struct parser {\n             view_item_import(self.parse_view_paths())\n         } else if self.eat_keyword(~\"export\") {\n             view_item_export(self.parse_view_paths())\n-        } else { fail; };\n+        } else if self.eat_keyword(~\"extern\") {\n+            self.expect_keyword(~\"mod\");\n+            let ident = self.parse_ident();\n+            let metadata = self.parse_optional_meta();\n+            view_item_use(ident, metadata, self.get_id())\n+        } else {\n+            fail;\n+        };\n         self.expect(token::SEMI);\n         @{node: node, attrs: attrs,\n           vis: vis, span: mk_sp(lo, self.last_span.hi)}\n@@ -3564,7 +3578,8 @@ struct parser {\n         } else if self.is_view_item() {\n             let vi = self.parse_view_item(outer_attrs);\n             return spanned(lo, vi.span.hi, cdir_view_item(vi));\n-        } else { return self.fatal(~\"expected crate directive\"); }\n+        }\n+        return self.fatal(~\"expected crate directive\");\n     }\n \n     fn parse_crate_directives(term: token::token,"}]}