{"sha": "8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZmI4OTQ5MzE3OWU1MmI2MWE0ZjhiOWM0NWRlMWRkN2U5ZDFmM2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-08T20:41:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-08T20:41:20Z"}, "message": "Auto merge of #51247 - pnkfelix:issue-51190-report-type-moved-from-behind-borrow, r=nikomatsakis\n\nNLL: report type moved from behind borrow of array/slice\n\nWhen NLL has illegal move due to borrowed content in an array or slice, provide feedback about why the move wasn't a copy.\n\nDrive by: While comparing the resulting `.nll.stderr` files to their old borrowck variants, I noticed that the test for borrowck-vec-pattern-nesting.rs was not signaling some errors under NLL due to the test assuming lexical lifetimes. So I fixed that too.\n\nFix #51190", "tree": {"sha": "efe9c1687027bd70f7d3b74a184e1fc404e2cd2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efe9c1687027bd70f7d3b74a184e1fc404e2cd2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a", "html_url": "https://github.com/rust-lang/rust/commit/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c40275b34f8a2b6a289181d1d5f376ff7c64f0c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c40275b34f8a2b6a289181d1d5f376ff7c64f0c5", "html_url": "https://github.com/rust-lang/rust/commit/c40275b34f8a2b6a289181d1d5f376ff7c64f0c5"}, {"sha": "e5b378b18df428e296243a82e4a2c5856ef0cb75", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b378b18df428e296243a82e4a2c5856ef0cb75", "html_url": "https://github.com/rust-lang/rust/commit/e5b378b18df428e296243a82e4a2c5856ef0cb75"}], "stats": {"total": 154, "additions": 105, "deletions": 49}, "files": [{"sha": "84931907964354acdd54a91f82643373f75dbe95", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a", "patch": "@@ -147,7 +147,7 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &'a BorrowckCtxt<'a, 'tcx>,\n         }\n         Categorization::Interior(ref b, mc::InteriorElement(ik)) => {\n             bccx.cannot_move_out_of_interior_noncopy(\n-                move_from.span, b.ty, ik == Kind::Index, Origin::Ast)\n+                move_from.span, b.ty, Some(ik == Kind::Index), Origin::Ast)\n         }\n \n         Categorization::Downcast(ref b, _) |"}, {"sha": "ba0557d062f2427d8a633e8697ee2165db92c6b1", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a", "patch": "@@ -132,14 +132,21 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n                     IllegalMoveOriginKind::Static => {\n                         tcx.cannot_move_out_of(span, \"static item\", origin)\n                     }\n-                    IllegalMoveOriginKind::BorrowedContent => {\n-                        tcx.cannot_move_out_of(span, \"borrowed content\", origin)\n+                    IllegalMoveOriginKind::BorrowedContent { target_ty: ty } => {\n+                        // Inspect the type of the content behind the\n+                        // borrow to provide feedback about why this\n+                        // was a move rather than a copy.\n+                        match ty.sty {\n+                            ty::TyArray(..) | ty::TySlice(..) =>\n+                                tcx.cannot_move_out_of_interior_noncopy(span, ty, None, origin),\n+                            _ => tcx.cannot_move_out_of(span, \"borrowed content\", origin)\n+                        }\n                     }\n                     IllegalMoveOriginKind::InteriorOfTypeWithDestructor { container_ty: ty } => {\n                         tcx.cannot_move_out_of_interior_of_drop(span, ty, origin)\n                     }\n                     IllegalMoveOriginKind::InteriorOfSliceOrArray { ty, is_index } => {\n-                        tcx.cannot_move_out_of_interior_noncopy(span, ty, is_index, origin)\n+                        tcx.cannot_move_out_of_interior_noncopy(span, ty, Some(is_index), origin)\n                     }\n                 };\n                 err.emit();"}, {"sha": "590f9917015dc9bd021dd07d9333faa0ebf881b8", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a", "patch": "@@ -119,8 +119,8 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n     }\n \n     fn create_move_path(&mut self, place: &Place<'tcx>) {\n-        // This is an assignment, not a move, so this not being a valid\n-        // move path is OK.\n+        // This is an non-moving access (such as an overwrite or\n+        // drop), so this not being a valid move path is OK.\n         let _ = self.move_path_for(place);\n     }\n \n@@ -135,8 +135,9 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n         let place_ty = proj.base.ty(mir, tcx).to_ty(tcx);\n         match place_ty.sty {\n             ty::TyRef(..) | ty::TyRawPtr(..) =>\n-                return Err(MoveError::cannot_move_out_of(mir.source_info(self.loc).span,\n-                                                         BorrowedContent)),\n+                return Err(MoveError::cannot_move_out_of(\n+                    mir.source_info(self.loc).span,\n+                    BorrowedContent { target_ty: place.ty(mir, tcx).to_ty(tcx) })),\n             ty::TyAdt(adt, _) if adt.has_dtor(tcx) && !adt.is_box() =>\n                 return Err(MoveError::cannot_move_out_of(mir.source_info(self.loc).span,\n                                                          InteriorOfTypeWithDestructor {"}, {"sha": "a73e47bc16ab297b018ba41a685f52d0830d1a83", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a", "patch": "@@ -277,9 +277,23 @@ pub struct IllegalMoveOrigin<'tcx> {\n \n #[derive(Debug)]\n pub(crate) enum IllegalMoveOriginKind<'tcx> {\n+    /// Illegal move due to attempt to move from `static` variable.\n     Static,\n-    BorrowedContent,\n+\n+    /// Illegal move due to attempt to move from behind a reference.\n+    BorrowedContent {\n+        /// The content's type: if erroneous code was trying to move\n+        /// from `*x` where `x: &T`, then this will be `T`.\n+        target_ty: ty::Ty<'tcx>,\n+    },\n+\n+    /// Illegal move due to attempt to move from field of an ADT that\n+    /// implements `Drop`. Rust maintains invariant that all `Drop`\n+    /// ADT's remain fully-initialized so that user-defined destructor\n+    /// can safely read from all of the ADT's fields.\n     InteriorOfTypeWithDestructor { container_ty: ty::Ty<'tcx> },\n+\n+    /// Illegal move due to attempt to move out of a slice or array.\n     InteriorOfSliceOrArray { ty: ty::Ty<'tcx>, is_index: bool, },\n }\n "}, {"sha": "d01b90ad2628e02eb683b2396a6cc08972e51a54", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a", "patch": "@@ -312,15 +312,19 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         self.cancel_if_wrong_origin(err, o)\n     }\n \n+    /// Signal an error due to an attempt to move out of the interior\n+    /// of an array or slice. `is_index` is None when error origin\n+    /// didn't capture whether there was an indexing operation or not.\n     fn cannot_move_out_of_interior_noncopy(self,\n                                            move_from_span: Span,\n                                            ty: ty::Ty,\n-                                           is_index: bool,\n+                                           is_index: Option<bool>,\n                                            o: Origin)\n                                            -> DiagnosticBuilder<'cx>\n     {\n         let type_name = match (&ty.sty, is_index) {\n-            (&ty::TyArray(_, _), true) => \"array\",\n+            (&ty::TyArray(_, _), Some(true)) |\n+            (&ty::TyArray(_, _), None) => \"array\",\n             (&ty::TySlice(_),    _) => \"slice\",\n             _ => span_bug!(move_from_span, \"this path should not cause illegal move\"),\n         };"}, {"sha": "96b376ea7ae40ee1ed4e228276825d14f80755ac", "filename": "src/test/ui/borrowck/borrowck-move-out-of-vec-tail.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr?ref=8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a", "patch": "@@ -1,15 +1,15 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0508]: cannot move out of type `[Foo]`, a non-copy slice\n   --> $DIR/borrowck-move-out-of-vec-tail.rs:30:33\n    |\n LL |                 &[Foo { string: a },\n-   |                                 ^ cannot move out of borrowed content\n+   |                                 ^ cannot move out of here\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0508]: cannot move out of type `[Foo]`, a non-copy slice\n   --> $DIR/borrowck-move-out-of-vec-tail.rs:34:33\n    |\n LL |                   Foo { string: b }] => {\n-   |                                 ^ cannot move out of borrowed content\n+   |                                 ^ cannot move out of here\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0507`.\n+For more information about this error, try `rustc --explain E0508`."}, {"sha": "6d28a37463b92b930f421f028d3aa703d1fc5d62", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.nll.stderr", "status": "modified", "additions": 51, "deletions": 26, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr?ref=8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a", "patch": "@@ -1,51 +1,76 @@\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:42:15\n+error[E0506]: cannot assign to `vec[..]` because it is borrowed\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:20:13\n+   |\n+LL |         [box ref _a, _, _] => {\n+   |              ------ borrow of `vec[..]` occurs here\n+LL |         //~^ borrow of `vec[..]` occurs here\n+LL |             vec[0] = box 4; //~ ERROR cannot assign\n+   |             ^^^^^^ assignment to borrowed `vec[..]` occurs here\n+LL |             //~^ assignment to borrowed `vec[..]` occurs here\n+LL |             _a.use_ref();\n+   |             -- borrow later used here\n+\n+error[E0506]: cannot assign to `vec[..]` because it is borrowed\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:33:13\n+   |\n+LL |         &mut [ref _b..] => {\n+   |               ------ borrow of `vec[..]` occurs here\n+LL |         //~^ borrow of `vec[..]` occurs here\n+LL |             vec[0] = box 4; //~ ERROR cannot assign\n+   |             ^^^^^^ assignment to borrowed `vec[..]` occurs here\n+LL |             //~^ assignment to borrowed `vec[..]` occurs here\n+LL |             _b.use_ref();\n+   |             -- borrow later used here\n+\n+error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:44:15\n    |\n LL |         &mut [_a, //~ ERROR cannot move out\n-   |               ^^ cannot move out of borrowed content\n+   |               ^^ cannot move out of here\n \n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:55:13\n+error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:57:13\n    |\n LL |     let a = vec[0]; //~ ERROR cannot move out\n-   |             ^^^^^^ cannot move out of borrowed content\n+   |             ^^^^^^ cannot move out of here\n \n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:65:10\n+error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:67:10\n    |\n LL |          _b] => {}\n-   |          ^^ cannot move out of borrowed content\n+   |          ^^ cannot move out of here\n \n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:68:13\n+error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:70:13\n    |\n LL |     let a = vec[0]; //~ ERROR cannot move out\n-   |             ^^^^^^ cannot move out of borrowed content\n+   |             ^^^^^^ cannot move out of here\n \n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:76:15\n+error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:78:15\n    |\n LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n-   |               ^^ cannot move out of borrowed content\n+   |               ^^ cannot move out of here\n \n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:76:19\n+error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:78:19\n    |\n LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n-   |                   ^^ cannot move out of borrowed content\n+   |                   ^^ cannot move out of here\n \n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:76:23\n+error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:78:23\n    |\n LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n-   |                       ^^ cannot move out of borrowed content\n+   |                       ^^ cannot move out of here\n \n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:80:13\n+error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:82:13\n    |\n LL |     let a = vec[0]; //~ ERROR cannot move out\n-   |             ^^^^^^ cannot move out of borrowed content\n+   |             ^^^^^^ cannot move out of here\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 10 previous errors\n \n-For more information about this error, try `rustc --explain E0507`.\n+Some errors occurred: E0506, E0508.\n+For more information about an error, try `rustc --explain E0506`."}, {"sha": "63dac0a83004a5d4b8f9597d2942c76bafa1fa6e", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs?ref=8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a", "patch": "@@ -19,6 +19,7 @@ fn a() {\n         //~^ borrow of `vec[..]` occurs here\n             vec[0] = box 4; //~ ERROR cannot assign\n             //~^ assignment to borrowed `vec[..]` occurs here\n+            _a.use_ref();\n         }\n     }\n }\n@@ -31,6 +32,7 @@ fn b() {\n         //~^ borrow of `vec[..]` occurs here\n             vec[0] = box 4; //~ ERROR cannot assign\n             //~^ assignment to borrowed `vec[..]` occurs here\n+            _b.use_ref();\n         }\n     }\n }\n@@ -82,3 +84,6 @@ fn e() {\n }\n \n fn main() {}\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "a03e1eab7ad068254e0cec0ea26b5e1e2332f9da", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr?ref=8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a", "patch": "@@ -8,7 +8,7 @@ LL |             vec[0] = box 4; //~ ERROR cannot assign\n    |             ^^^^^^^^^^^^^^ assignment to borrowed `vec[..]` occurs here\n \n error[E0506]: cannot assign to `vec[..]` because it is borrowed\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:32:13\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:33:13\n    |\n LL |         &mut [ref _b..] => {\n    |               ------ borrow of `vec[..]` occurs here\n@@ -17,7 +17,7 @@ LL |             vec[0] = box 4; //~ ERROR cannot assign\n    |             ^^^^^^^^^^^^^^ assignment to borrowed `vec[..]` occurs here\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:42:14\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:44:14\n    |\n LL |           &mut [_a, //~ ERROR cannot move out\n    |                ^-- hint: to prevent move, use `ref _a` or `ref mut _a`\n@@ -30,7 +30,7 @@ LL | |         ] => {\n    | |_________^ cannot move out of here\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:55:13\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:57:13\n    |\n LL |     let a = vec[0]; //~ ERROR cannot move out\n    |             ^^^^^^\n@@ -39,7 +39,7 @@ LL |     let a = vec[0]; //~ ERROR cannot move out\n    |             help: consider using a reference instead: `&vec[0]`\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:63:14\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:65:14\n    |\n LL |           &mut [ //~ ERROR cannot move out\n    |  ______________^\n@@ -50,7 +50,7 @@ LL | |          _b] => {}\n    |            hint: to prevent move, use `ref _b` or `ref mut _b`\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:68:13\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:70:13\n    |\n LL |     let a = vec[0]; //~ ERROR cannot move out\n    |             ^^^^^^\n@@ -59,7 +59,7 @@ LL |     let a = vec[0]; //~ ERROR cannot move out\n    |             help: consider using a reference instead: `&vec[0]`\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:76:14\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:78:14\n    |\n LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n    |              ^--^^--^^--^\n@@ -70,7 +70,7 @@ LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n    |              cannot move out of here\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:80:13\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:82:13\n    |\n LL |     let a = vec[0]; //~ ERROR cannot move out\n    |             ^^^^^^"}]}