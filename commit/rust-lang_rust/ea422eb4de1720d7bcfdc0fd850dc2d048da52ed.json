{"sha": "ea422eb4de1720d7bcfdc0fd850dc2d048da52ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNDIyZWI0ZGUxNzIwZDdiY2ZkYzBmZDg1MGRjMmQwNDhkYTUyZWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-10T17:30:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-10T17:30:50Z"}, "message": "Auto merge of #29749 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #29420, #29688, #29708, #29715, #29729, #29731\n- Failed merges: #29544", "tree": {"sha": "d74b085de3a55d243398d65b437b79f24f08f1e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d74b085de3a55d243398d65b437b79f24f08f1e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea422eb4de1720d7bcfdc0fd850dc2d048da52ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea422eb4de1720d7bcfdc0fd850dc2d048da52ed", "html_url": "https://github.com/rust-lang/rust/commit/ea422eb4de1720d7bcfdc0fd850dc2d048da52ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea422eb4de1720d7bcfdc0fd850dc2d048da52ed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05b66b8a1c74fe1182e594b330a4f5ab502eacc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/05b66b8a1c74fe1182e594b330a4f5ab502eacc4", "html_url": "https://github.com/rust-lang/rust/commit/05b66b8a1c74fe1182e594b330a4f5ab502eacc4"}, {"sha": "4b0503f10f19aea023337ad8e82116690a238628", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b0503f10f19aea023337ad8e82116690a238628", "html_url": "https://github.com/rust-lang/rust/commit/4b0503f10f19aea023337ad8e82116690a238628"}], "stats": {"total": 87, "additions": 63, "deletions": 24}, "files": [{"sha": "8eb742f0a22fcbde7889e5b3929ab35218e1ef56", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ea422eb4de1720d7bcfdc0fd850dc2d048da52ed/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/ea422eb4de1720d7bcfdc0fd850dc2d048da52ed/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=ea422eb4de1720d7bcfdc0fd850dc2d048da52ed", "patch": "@@ -1,13 +1,9 @@\n # The Rust Programming Language\n \n-Rust is a fast systems programming language that guarantees\n-memory safety and offers painless concurrency ([no data races]).\n-It does not employ a garbage collector and has minimal runtime overhead.\n+This is the main source code repository for [Rust]. It contains the compiler, standard library,\n+and documentation.\n \n-This repo contains the code for the compiler (`rustc`), as well\n-as standard libraries, tools and documentation for Rust.\n-\n-[no data races]: http://blog.rust-lang.org/2015/04/10/Fearless-Concurrency.html\n+[Rust]: https://www.rust-lang.org\n \n ## Quick Start\n "}, {"sha": "50d758c3a108f9d400f9d9d541f0c9e55d17e17f", "filename": "src/doc/trpl/dining-philosophers.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea422eb4de1720d7bcfdc0fd850dc2d048da52ed/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md", "raw_url": "https://github.com/rust-lang/rust/raw/ea422eb4de1720d7bcfdc0fd850dc2d048da52ed/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md?ref=ea422eb4de1720d7bcfdc0fd850dc2d048da52ed", "patch": "@@ -232,7 +232,7 @@ also called a \u2018vector\u2019, and it\u2019s a growable array type. We then use a\n [`for`][for] loop to iterate through the vector, getting a reference to each\n philosopher in turn.\n \n-[for]: for-loops.html\n+[for]: loops.html#for\n \n In the body of the loop, we call `p.eat()`, which is defined above:\n "}, {"sha": "dc91c90b0fd62263494906e61a40866d936ed260", "filename": "src/doc/trpl/documentation.md", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ea422eb4de1720d7bcfdc0fd850dc2d048da52ed/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/ea422eb4de1720d7bcfdc0fd850dc2d048da52ed/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdocumentation.md?ref=ea422eb4de1720d7bcfdc0fd850dc2d048da52ed", "patch": "@@ -373,6 +373,36 @@ we can add the `#[macro_use]` attribute. Second, we\u2019ll need to add our own\n `main()` as well. Finally, a judicious use of `#` to comment out those two\n things, so they don\u2019t show up in the output.\n \n+Another case where the use of `#` is handy is when you want to ignore\n+error handling. Lets say you want the following,\n+\n+```rust,ignore\n+/// use std::io;\n+/// let mut input = String::new(); \n+/// try!(io::stdin().read_line(&mut input));\n+```\n+\n+The problem is that `try!` returns a `Result<T, E>` and test functions\n+don't return anything so this will give a mismatched types error.\n+\n+```rust,ignore\n+/// A doc test using try!\n+///\n+/// ```\n+/// use std::io;\n+/// # fn foo() -> io::Result<()> {\n+/// let mut input = String::new(); \n+/// try!(io::stdin().read_line(&mut input));\n+/// # Ok(())\n+/// # }\n+/// ```\n+# fn foo() {}\n+```\n+\n+You can get around this by wrapping the code in a function. This catches\n+and swallows the `Result<T, E>` when running tests on the docs. This\n+pattern appears regularly in the standard library.\n+\n ### Running documentation tests\n \n To run the tests, either:"}, {"sha": "c4e4059429f38b0885c1786662c2d274ce9dd2cf", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea422eb4de1720d7bcfdc0fd850dc2d048da52ed/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea422eb4de1720d7bcfdc0fd850dc2d048da52ed/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=ea422eb4de1720d7bcfdc0fd850dc2d048da52ed", "patch": "@@ -1220,8 +1220,7 @@ impl<T> FromIterator<T> for Vec<T> {\n         // expanded on this iteration in every case when the iterable is not\n         // empty, but the loop in extend_desugared() is not going to see the\n         // vector being full in the few subsequent loop iterations.\n-        // So we get better branch prediction and the possibility to\n-        // construct the vector with initial estimated capacity.\n+        // So we get better branch prediction.\n         let mut iterator = iterable.into_iter();\n         let mut vector = match iterator.next() {\n             None => return Vec::new(),"}, {"sha": "f8c6e3cfdd7dd73ae024ce2f0e64ee6740454ff8", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ea422eb4de1720d7bcfdc0fd850dc2d048da52ed/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea422eb4de1720d7bcfdc0fd850dc2d048da52ed/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=ea422eb4de1720d7bcfdc0fd850dc2d048da52ed", "patch": "@@ -371,22 +371,21 @@ pub trait Iterator {\n     ///\n     /// # Implementation notes\n     ///\n-    /// It is not enforced that an iterator implementation yields the\n-    /// declared number of elements. A buggy iterator may yield less\n-    /// than the lower bound or more than the upper bound of elements.\n+    /// It is not enforced that an iterator implementation yields the declared\n+    /// number of elements. A buggy iterator may yield less than the lower bound\n+    /// or more than the upper bound of elements.\n     ///\n-    /// `size_hint()` is primarily intended to be used for optimizations\n-    /// such as reserving space for the elements of the iterator, but\n-    /// must not be trusted to e.g. omit bounds checks in unsafe code.\n-    /// An incorrect implementation of `size_hint()` should not lead to\n-    /// memory safety violations.\n+    /// `size_hint()` is primarily intended to be used for optimizations such as\n+    /// reserving space for the elements of the iterator, but must not be\n+    /// trusted to e.g. omit bounds checks in unsafe code. An incorrect\n+    /// implementation of `size_hint()` should not lead to memory safety\n+    /// violations.\n     ///\n-    /// That said, the implementation should provide a correct\n-    /// estimation, because otherwise it would be a violation of the\n-    /// trait's protocol.\n+    /// That said, the implementation should provide a correct estimation,\n+    /// because otherwise it would be a violation of the trait's protocol.\n     ///\n-    /// The default implementation returns `(0, None)` which is correct\n-    /// for any iterator.\n+    /// The default implementation returns `(0, None)` which is correct for any\n+    /// iterator.\n     ///\n     /// # Examples\n     ///\n@@ -2750,7 +2749,7 @@ pub trait ExactSizeIterator: Iterator {\n     /// implementation, you can do so. See the [trait-level] docs for an\n     /// example.\n     ///\n-    /// This function has the same safety guarantees as [`size_hint()`]\n+    /// This function has the same safety guarantees as the [`size_hint()`]\n     /// function.\n     ///\n     /// [trait-level]: trait.ExactSizeIterator.html"}, {"sha": "6b5e16ae113b3a35e6e3492f843f0e0ed4983ca8", "filename": "src/libstd/path.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ea422eb4de1720d7bcfdc0fd850dc2d048da52ed/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea422eb4de1720d7bcfdc0fd850dc2d048da52ed/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=ea422eb4de1720d7bcfdc0fd850dc2d048da52ed", "patch": "@@ -1013,6 +1013,21 @@ impl PathBuf {\n     /// * if `path` has a root but no prefix (e.g. `\\windows`), it\n     ///   replaces everything except for the prefix (if any) of `self`.\n     /// * if `path` has a prefix but no root, it replaces `self`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::path::PathBuf;\n+    ///\n+    /// let mut path = PathBuf::new();\n+    /// path.push(\"/tmp\");\n+    /// path.push(\"file.bk\");\n+    /// assert_eq!(path, PathBuf::from(\"/tmp/file.bk\"));\n+    ///\n+    /// // Pushing an absolute path replaces the current path\n+    /// path.push(\"/etc/passwd\");\n+    /// assert_eq!(path, PathBuf::from(\"/etc/passwd\"));\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn push<P: AsRef<Path>>(&mut self, path: P) {\n         self._push(path.as_ref())"}]}