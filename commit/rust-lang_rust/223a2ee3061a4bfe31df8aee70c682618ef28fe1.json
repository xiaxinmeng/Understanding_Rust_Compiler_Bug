{"sha": "223a2ee3061a4bfe31df8aee70c682618ef28fe1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyM2EyZWUzMDYxYTRiZmUzMWRmOGFlZTcwYzY4MjYxOGVmMjhmZTE=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-01-17T20:11:51Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-14T22:40:03Z"}, "message": "Add fast path to eq_opaque_type_and_type", "tree": {"sha": "8a9609a68f4fd9cbdbb0937b9134c97ff0afd444", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a9609a68f4fd9cbdbb0937b9134c97ff0afd444"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/223a2ee3061a4bfe31df8aee70c682618ef28fe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/223a2ee3061a4bfe31df8aee70c682618ef28fe1", "html_url": "https://github.com/rust-lang/rust/commit/223a2ee3061a4bfe31df8aee70c682618ef28fe1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/223a2ee3061a4bfe31df8aee70c682618ef28fe1/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d9e270a4ddf517b008537f0d8b3768db20d5436", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d9e270a4ddf517b008537f0d8b3768db20d5436", "html_url": "https://github.com/rust-lang/rust/commit/6d9e270a4ddf517b008537f0d8b3768db20d5436"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "4546eadc6e6e13c11be294577d9a357782d0bf12", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/223a2ee3061a4bfe31df8aee70c682618ef28fe1/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223a2ee3061a4bfe31df8aee70c682618ef28fe1/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=223a2ee3061a4bfe31df8aee70c682618ef28fe1", "patch": "@@ -138,7 +138,7 @@ impl FlagComputation {\n             }\n \n             &ty::Opaque(_, substs) => {\n-                self.add_flags(TypeFlags::HAS_PROJECTION);\n+                self.add_flags(TypeFlags::HAS_PROJECTION | TypeFlags::HAS_TY_OPAQUE);\n                 self.add_substs(substs);\n             }\n "}, {"sha": "3212bc7241783df6a4f3e506b4d2ea495295b3c9", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/223a2ee3061a4bfe31df8aee70c682618ef28fe1/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223a2ee3061a4bfe31df8aee70c682618ef28fe1/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=223a2ee3061a4bfe31df8aee70c682618ef28fe1", "patch": "@@ -78,6 +78,9 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn has_projections(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_PROJECTION)\n     }\n+    fn has_opaque_types(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_TY_OPAQUE)\n+    }\n     fn references_error(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_ERR)\n     }"}, {"sha": "45ea05efd4a84cb44ebece7799584dc53a20b421", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/223a2ee3061a4bfe31df8aee70c682618ef28fe1/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223a2ee3061a4bfe31df8aee70c682618ef28fe1/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=223a2ee3061a4bfe31df8aee70c682618ef28fe1", "patch": "@@ -481,6 +481,8 @@ bitflags! {\n \n         const HAS_CT_INFER       = 1 << 14;\n         const HAS_CT_PLACEHOLDER = 1 << 15;\n+        /// Does this have any [Opaque] types.\n+        const HAS_TY_OPAQUE      = 1 << 16;\n \n         const NEEDS_SUBST        = TypeFlags::HAS_PARAMS.bits |\n                                    TypeFlags::HAS_RE_EARLY_BOUND.bits;\n@@ -503,7 +505,8 @@ bitflags! {\n                                   TypeFlags::HAS_RE_ERASED.bits |\n                                   TypeFlags::HAS_TY_PLACEHOLDER.bits |\n                                   TypeFlags::HAS_CT_INFER.bits |\n-                                  TypeFlags::HAS_CT_PLACEHOLDER.bits;\n+                                  TypeFlags::HAS_CT_PLACEHOLDER.bits |\n+                                  TypeFlags::HAS_TY_OPAQUE.bits;\n     }\n }\n "}, {"sha": "f3c3d04931ac3650f21f3ac47a775000a585626f", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/223a2ee3061a4bfe31df8aee70c682618ef28fe1/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223a2ee3061a4bfe31df8aee70c682618ef28fe1/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=223a2ee3061a4bfe31df8aee70c682618ef28fe1", "patch": "@@ -615,7 +615,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n                 if let ty::Opaque(def_id, substs) = t.kind {\n                     self.expand_opaque_ty(def_id, substs).unwrap_or(t)\n-                } else if t.has_projections() {\n+                } else if t.has_opaque_types() {\n                     t.super_fold_with(self)\n                 } else {\n                     t"}, {"sha": "88fe6d1a3a49d37f6bbd686bedfd7b76f784ca4b", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/223a2ee3061a4bfe31df8aee70c682618ef28fe1/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223a2ee3061a4bfe31df8aee70c682618ef28fe1/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=223a2ee3061a4bfe31df8aee70c682618ef28fe1", "patch": "@@ -1196,6 +1196,22 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n              anon_ty={:?})\",\n             revealed_ty, anon_ty\n         );\n+\n+        // Fast path for the common case.\n+        if !anon_ty.has_opaque_types() {\n+            if let Err(terr) = self.eq_types(anon_ty, revealed_ty, locations, category) {\n+                span_mirbug!(\n+                    self,\n+                    locations,\n+                    \"eq_opaque_type_and_type: `{:?}=={:?}` failed with `{:?}`\",\n+                    revealed_ty,\n+                    anon_ty,\n+                    terr\n+                );\n+            }\n+            return Ok(());\n+        }\n+\n         let infcx = self.infcx;\n         let tcx = infcx.tcx;\n         let param_env = self.param_env;"}]}