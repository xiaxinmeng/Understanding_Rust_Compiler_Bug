{"sha": "87e544bca5ae1bd187f11239abcab1f73c836049", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZTU0NGJjYTVhZTFiZDE4N2YxMTIzOWFiY2FiMWY3M2M4MzYwNDk=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-02-23T20:46:19Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-02-23T20:46:22Z"}, "message": "use a more conservative inhabitableness rule\n\nThis is a [breaking-change] from 1.15, because this used to compile:\n\n```Rust\nenum Void {}\nfn foo(x: &Void) {\n    match x {}\n}\n```", "tree": {"sha": "4f8a4cbb3a2417928423467c5bf0eec7ff7c64ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f8a4cbb3a2417928423467c5bf0eec7ff7c64ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87e544bca5ae1bd187f11239abcab1f73c836049", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87e544bca5ae1bd187f11239abcab1f73c836049", "html_url": "https://github.com/rust-lang/rust/commit/87e544bca5ae1bd187f11239abcab1f73c836049", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87e544bca5ae1bd187f11239abcab1f73c836049/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a84eb95a7db9460d317eeef62da106459a346f0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a84eb95a7db9460d317eeef62da106459a346f0b", "html_url": "https://github.com/rust-lang/rust/commit/a84eb95a7db9460d317eeef62da106459a346f0b"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "9b30946c0bebbc1d834cd9cdd045352dbd76be28", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/87e544bca5ae1bd187f11239abcab1f73c836049/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e544bca5ae1bd187f11239abcab1f73c836049/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=87e544bca5ae1bd187f11239abcab1f73c836049", "patch": "@@ -182,7 +182,12 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n             let pat_ty = self.tables.node_id_to_type(scrut.id);\n             let module = self.tcx.hir.local_def_id(self.tcx.hir.get_module_parent(scrut.id));\n             if inlined_arms.is_empty() {\n-                if !pat_ty.is_uninhabited_from(module, self.tcx) {\n+                let scrutinee_is_uninhabited = if self.tcx.sess.features.borrow().never_type {\n+                    pat_ty.is_uninhabited_from(module, self.tcx)\n+                } else {\n+                    self.conservative_is_uninhabited(pat_ty)\n+                };\n+                if !scrutinee_is_uninhabited {\n                     // We know the type is inhabited, so this must be wrong\n                     let mut err = create_e0004(self.tcx.sess, scrut.span,\n                                                format!(\"non-exhaustive patterns: type {} \\\n@@ -208,6 +213,15 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n         })\n     }\n \n+    fn conservative_is_uninhabited(&self, scrutinee_ty: Ty<'tcx>) -> bool {\n+        // \"rustc-1.0-style\" uncontentious uninhabitableness check\n+        match scrutinee_ty.sty {\n+            ty::TyNever => true,\n+            ty::TyAdt(def, _) => def.variants.is_empty(),\n+            _ => false\n+        }\n+    }\n+\n     fn check_irrefutable(&self, pat: &Pat, is_fn_arg: bool) {\n         let origin = if is_fn_arg {\n             \"function argument\""}, {"sha": "0c3ea53a903ae9062c03098e6ee2838a975b4a1a", "filename": "src/test/compile-fail/uninhabited-matches-feature-gated.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87e544bca5ae1bd187f11239abcab1f73c836049/src%2Ftest%2Fcompile-fail%2Funinhabited-matches-feature-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e544bca5ae1bd187f11239abcab1f73c836049/src%2Ftest%2Fcompile-fail%2Funinhabited-matches-feature-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funinhabited-matches-feature-gated.rs?ref=87e544bca5ae1bd187f11239abcab1f73c836049", "patch": "@@ -19,13 +19,13 @@ fn main() {\n     };\n \n     let x: &Void = unsafe { std::mem::uninitialized() };\n-    let _ = match x {}; // okay\n+    let _ = match x {}; //~ ERROR non-exhaustive\n \n     let x: (Void,) = unsafe { std::mem::uninitialized() };\n-    let _ = match x {}; // okay\n+    let _ = match x {}; //~ ERROR non-exhaustive\n \n     let x: [Void; 1] = unsafe { std::mem::uninitialized() };\n-    let _ = match x {}; // okay\n+    let _ = match x {}; //~ ERROR non-exhaustive\n \n     let x: &[Void] = unsafe { std::mem::uninitialized() };\n     let _ = match x {   //~ ERROR non-exhaustive"}, {"sha": "d5df84e0fb083d9f51952cdb11341ce84706cb5c", "filename": "src/test/run-pass/issue-38972.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87e544bca5ae1bd187f11239abcab1f73c836049/src%2Ftest%2Frun-pass%2Fissue-38972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e544bca5ae1bd187f11239abcab1f73c836049/src%2Ftest%2Frun-pass%2Fissue-38972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-38972.rs?ref=87e544bca5ae1bd187f11239abcab1f73c836049", "patch": "@@ -16,14 +16,10 @@ enum Foo { }\n \n fn make_foo() -> Option<Foo> { None }\n \n-fn use_foo(v: &Foo) -> ! {\n-    match v { }\n-}\n-\n #[deny(warnings)]\n fn main() {\n     match make_foo() {\n         None => {},\n-        Some(ref v) => use_foo(v),\n+        Some(_) => {}\n     }\n }"}]}