{"sha": "8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNjBlNzUxY2JjZmE0N2M3YmVkNzg4ZGZlMmFiNWNlYmZjYjc4YjM=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-06T18:17:09Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-06T18:17:09Z"}, "message": "Merge #260\n\n260: Modernize r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "58f01a945f7c27d6baaecf38e84617ca46782073", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58f01a945f7c27d6baaecf38e84617ca46782073"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "html_url": "https://github.com/rust-lang/rust/commit/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "5ad84f0ca5fe9bb250cd4026e5dcb5478d932666", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ad84f0ca5fe9bb250cd4026e5dcb5478d932666", "html_url": "https://github.com/rust-lang/rust/commit/5ad84f0ca5fe9bb250cd4026e5dcb5478d932666"}, {"sha": "28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76", "url": "https://api.github.com/repos/rust-lang/rust/commits/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76", "html_url": "https://github.com/rust-lang/rust/commit/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76"}], "stats": {"total": 262, "additions": 82, "deletions": 180}, "files": [{"sha": "08b357b1eb91cabfc5103571f32ec0d59c3908b1", "filename": "crates/gen_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fgen_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fgen_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2FCargo.toml?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -1,4 +1,5 @@\n [package]\n+edition = \"2018\"\n name = \"gen_lsp_server\"\n version = \"0.1.0\"\n authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]"}, {"sha": "8779fbf0fd71e3eaec3652ed42ef0d8e68f78fde", "filename": "crates/gen_lsp_server/src/lib.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -59,16 +59,7 @@\n //! }\n //! ```\n \n-#[macro_use]\n-extern crate failure;\n-#[macro_use]\n-extern crate log;\n-extern crate serde;\n-extern crate serde_json;\n-#[macro_use]\n-extern crate serde_derive;\n-extern crate crossbeam_channel;\n-extern crate languageserver_types;\n+use failure::{bail, format_err};\n \n mod msg;\n mod stdio;\n@@ -81,7 +72,7 @@ use languageserver_types::{\n };\n \n pub type Result<T> = ::std::result::Result<T, failure::Error>;\n-pub use {\n+pub use crate::{\n     msg::{ErrorCode, RawMessage, RawNotification, RawRequest, RawResponse, RawResponseError},\n     stdio::{stdio_transport, Threads},\n };\n@@ -98,18 +89,18 @@ pub fn run_server(\n     sender: Sender<RawMessage>,\n     server: impl FnOnce(InitializeParams, &Receiver<RawMessage>, &Sender<RawMessage>) -> Result<()>,\n ) -> Result<()> {\n-    info!(\"lsp server initializes\");\n+    log::info!(\"lsp server initializes\");\n     let params = initialize(&receiver, &sender, caps)?;\n-    info!(\"lsp server initialized, serving requests\");\n+    log::info!(\"lsp server initialized, serving requests\");\n     server(params, &receiver, &sender)?;\n-    info!(\"lsp server waiting for exit notification\");\n+    log::info!(\"lsp server waiting for exit notification\");\n     match receiver.recv() {\n         Some(RawMessage::Notification(n)) => n\n             .cast::<Exit>()\n             .map_err(|n| format_err!(\"unexpected notification during shutdown: {:?}\", n))?,\n         m => bail!(\"unexpected message during shutdown: {:?}\", m),\n     }\n-    info!(\"lsp server shutdown complete\");\n+    log::info!(\"lsp server shutdown complete\");\n     Ok(())\n }\n "}, {"sha": "1e5384380f318824399a9d57de8155daee646003", "filename": "crates/gen_lsp_server/src/msg.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -1,10 +1,11 @@\n use std::io::{BufRead, Write};\n \n use languageserver_types::{notification::Notification, request::Request};\n-use serde::{de::DeserializeOwned, Serialize};\n+use serde_derive::{Deserialize, Serialize};\n use serde_json::{from_str, from_value, to_string, to_value, Value};\n+use failure::{bail, format_err};\n \n-use Result;\n+use crate::Result;\n \n #[derive(Debug, Serialize, Deserialize, Clone)]\n #[serde(untagged)]\n@@ -91,7 +92,7 @@ impl RawRequest {\n     pub fn new<R>(id: u64, params: &R::Params) -> RawRequest\n     where\n         R: Request,\n-        R::Params: Serialize,\n+        R::Params: serde::Serialize,\n     {\n         RawRequest {\n             id,\n@@ -102,7 +103,7 @@ impl RawRequest {\n     pub fn cast<R>(self) -> ::std::result::Result<(u64, R::Params), RawRequest>\n     where\n         R: Request,\n-        R::Params: DeserializeOwned,\n+        R::Params: serde::de::DeserializeOwned,\n     {\n         if self.method != R::METHOD {\n             return Err(self);\n@@ -117,7 +118,7 @@ impl RawResponse {\n     pub fn ok<R>(id: u64, result: &R::Result) -> RawResponse\n     where\n         R: Request,\n-        R::Result: Serialize,\n+        R::Result: serde::Serialize,\n     {\n         RawResponse {\n             id,\n@@ -143,7 +144,7 @@ impl RawNotification {\n     pub fn new<N>(params: &N::Params) -> RawNotification\n     where\n         N: Notification,\n-        N::Params: Serialize,\n+        N::Params: serde::Serialize,\n     {\n         RawNotification {\n             method: N::METHOD.to_string(),\n@@ -153,7 +154,7 @@ impl RawNotification {\n     pub fn cast<N>(self) -> ::std::result::Result<N::Params, RawNotification>\n     where\n         N: Notification,\n-        N::Params: DeserializeOwned,\n+        N::Params: serde::de::DeserializeOwned,\n     {\n         if self.method != N::METHOD {\n             return Err(self);\n@@ -191,12 +192,12 @@ fn read_msg_text(inp: &mut impl BufRead) -> Result<Option<String>> {\n     buf.resize(size, 0);\n     inp.read_exact(&mut buf)?;\n     let buf = String::from_utf8(buf)?;\n-    debug!(\"< {}\", buf);\n+    log::debug!(\"< {}\", buf);\n     Ok(Some(buf))\n }\n \n fn write_msg_text(out: &mut impl Write, msg: &str) -> Result<()> {\n-    debug!(\"> {}\", msg);\n+    log::debug!(\"> {}\", msg);\n     write!(out, \"Content-Length: {}\\r\\n\\r\\n\", msg.len())?;\n     out.write_all(msg.as_bytes())?;\n     out.flush()?;"}, {"sha": "35d8e46d00d06d796bc1d16705f25dbac68c3db4", "filename": "crates/gen_lsp_server/src/stdio.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fgen_lsp_server%2Fsrc%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fgen_lsp_server%2Fsrc%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Fstdio.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -4,8 +4,9 @@ use std::{\n };\n \n use crossbeam_channel::{bounded, Receiver, Sender};\n+use failure::bail;\n \n-use {RawMessage, Result};\n+use crate::{RawMessage, Result};\n \n pub fn stdio_transport() -> (Receiver<RawMessage>, Sender<RawMessage>, Threads) {\n     let (writer_sender, mut writer_receiver) = bounded::<RawMessage>(16);"}, {"sha": "4b8b1081679c91bfb5f72d82a495420273efd475", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -1,14 +1,6 @@\n //! ra_analyzer crate is the brain of Rust analyzer. It relies on the `salsa`\n //! crate, which provides and incremental on-demand database of facts.\n \n-extern crate fst;\n-extern crate ra_editor;\n-extern crate ra_syntax;\n-extern crate rayon;\n-extern crate relative_path;\n-extern crate rustc_hash;\n-extern crate salsa;\n-\n macro_rules! ctry {\n     ($expr:expr) => {\n         match $expr {"}, {"sha": "4ce2c5c85d9949c91412ca4984aa3759788aa511", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -1,10 +1,3 @@\n-extern crate ra_analysis;\n-extern crate ra_editor;\n-extern crate ra_syntax;\n-extern crate relative_path;\n-extern crate rustc_hash;\n-extern crate test_utils;\n-\n use ra_syntax::TextRange;\n use test_utils::assert_eq_dbg;\n "}, {"sha": "939f7fe77d185379942ccbc82a7dde92dc0d817e", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -1,11 +1,3 @@\n-extern crate clap;\n-#[macro_use]\n-extern crate failure;\n-extern crate join_to_string;\n-extern crate ra_editor;\n-extern crate ra_syntax;\n-extern crate tools;\n-\n use std::{fs, io::Read, path::Path, time::Instant};\n \n use clap::{App, Arg, SubCommand};\n@@ -97,7 +89,7 @@ fn render_test(file: &Path, line: usize) -> Result<(String, String)> {\n         *start_line <= line && line <= *start_line + t.text.lines().count()\n     });\n     let test = match test {\n-        None => bail!(\"No test found at line {} at {}\", line, file.display()),\n+        None => failure::bail!(\"No test found at line {} at {}\", line, file.display()),\n         Some((_start_line, test)) => test,\n     };\n     let file = SourceFileNode::parse(&test.text);"}, {"sha": "ce080ee971940a9446aa4e8620d29457e4767828", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -1,12 +1,3 @@\n-extern crate itertools;\n-extern crate join_to_string;\n-extern crate ra_syntax;\n-extern crate rustc_hash;\n-extern crate superslice;\n-#[cfg(test)]\n-#[macro_use]\n-extern crate test_utils as _test_utils;\n-\n mod code_actions;\n mod edit;\n mod extend_selection;\n@@ -154,7 +145,7 @@ pub fn find_node_at_offset<'a, N: AstNode<'a>>(\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::test_utils::{add_cursor, assert_eq_dbg, extract_offset};\n+    use crate::test_utils::{add_cursor, assert_eq_dbg, extract_offset, assert_eq_text};\n \n     #[test]\n     fn test_highlighting() {"}, {"sha": "f0a4f250a799b32538600c4f34c896c558bbce7d", "filename": "crates/ra_editor/src/test_utils.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_editor%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_editor%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ftest_utils.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -1,7 +1,8 @@\n-use crate::LocalEdit;\n-pub use crate::_test_utils::*;\n use ra_syntax::{SourceFileNode, TextRange, TextUnit};\n \n+use crate::LocalEdit;\n+pub use test_utils::*;\n+\n pub fn check_action<F: Fn(&SourceFileNode, TextUnit) -> Option<LocalEdit>>(\n     before: &str,\n     after: &str,"}, {"sha": "9703e0371209c461a735cdfe7ddb2ccc72bf17df", "filename": "crates/ra_editor/src/typing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ftyping.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -238,7 +238,7 @@ fn compute_ws(left: SyntaxNodeRef, right: SyntaxNodeRef) -> &'static str {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::test_utils::{add_cursor, check_action, extract_offset, extract_range};\n+    use crate::test_utils::{add_cursor, check_action, extract_offset, extract_range, assert_eq_text};\n \n     fn check_join_lines(before: &str, after: &str) {\n         check_action(before, after, |file, offset| {"}, {"sha": "75c6fa1b8da6e8cec18feb286867554ebdfdf9be", "filename": "crates/ra_lsp_server/src/lib.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Flib.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -1,30 +1,3 @@\n-#[macro_use]\n-extern crate failure;\n-#[macro_use]\n-extern crate serde_derive;\n-extern crate languageserver_types;\n-extern crate serde;\n-extern crate serde_json;\n-#[macro_use]\n-extern crate crossbeam_channel;\n-extern crate rayon;\n-#[macro_use]\n-extern crate log;\n-extern crate cargo_metadata;\n-extern crate drop_bomb;\n-#[macro_use]\n-extern crate failure_derive;\n-extern crate im;\n-extern crate relative_path;\n-extern crate rustc_hash;\n-extern crate url_serde;\n-extern crate walkdir;\n-\n-extern crate gen_lsp_server;\n-extern crate ra_analysis;\n-extern crate ra_editor;\n-extern crate ra_syntax;\n-\n mod caps;\n mod conv;\n mod main_loop;"}, {"sha": "9ba9725620038d4f945cac70893b780ca84d48fa", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -1,15 +1,5 @@\n-#[macro_use]\n-extern crate log;\n-#[macro_use]\n-extern crate failure;\n-#[macro_use]\n-extern crate serde_derive;\n-extern crate serde;\n-extern crate flexi_logger;\n-extern crate gen_lsp_server;\n-extern crate ra_lsp_server;\n-\n-use serde::Deserialize;\n+use serde_derive::Deserialize;\n+use serde::Deserialize as _D;\n use flexi_logger::{Duplicate, Logger};\n use gen_lsp_server::{run_server, stdio_transport};\n use ra_lsp_server::Result;\n@@ -21,15 +11,15 @@ fn main() -> Result<()> {\n         .log_to_file()\n         .directory(\"log\")\n         .start()?;\n-    info!(\"lifecycle: server started\");\n+    log::info!(\"lifecycle: server started\");\n     match ::std::panic::catch_unwind(main_inner) {\n         Ok(res) => {\n-            info!(\"lifecycle: terminating process with {:?}\", res);\n+            log::info!(\"lifecycle: terminating process with {:?}\", res);\n             res\n         }\n         Err(_) => {\n-            error!(\"server panicked\");\n-            bail!(\"server panicked\")\n+            log::error!(\"server panicked\");\n+            failure::bail!(\"server panicked\")\n         }\n     }\n }\n@@ -60,8 +50,8 @@ fn main_inner() -> Result<()> {\n             ra_lsp_server::main_loop(false, root, publish_decorations, r, s)\n         },\n     )?;\n-    info!(\"shutting down IO...\");\n+    log::info!(\"shutting down IO...\");\n     threads.join()?;\n-    info!(\"... IO is down\");\n+    log::info!(\"... IO is down\");\n     Ok(())\n }"}, {"sha": "0e18789068a4cb296415b0babf24279d49f7bdfb", "filename": "crates/ra_lsp_server/src/main_loop/mod.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -3,7 +3,7 @@ mod subscriptions;\n \n use std::path::PathBuf;\n \n-use crossbeam_channel::{unbounded, Receiver, Sender};\n+use crossbeam_channel::{unbounded, select, Receiver, Sender};\n use gen_lsp_server::{\n     handle_shutdown, ErrorCode, RawMessage, RawNotification, RawRequest, RawResponse,\n };\n@@ -12,6 +12,8 @@ use ra_analysis::{Canceled, FileId, LibraryData};\n use rayon::{self, ThreadPool};\n use rustc_hash::FxHashSet;\n use serde::{de::DeserializeOwned, Serialize};\n+use failure::{format_err, bail};\n+use failure_derive::Fail;\n \n use crate::{\n     main_loop::subscriptions::Subscriptions,\n@@ -54,14 +56,14 @@ pub fn main_loop(\n ) -> Result<()> {\n     let pool = rayon::ThreadPoolBuilder::new()\n         .num_threads(4)\n-        .panic_handler(|_| error!(\"thread panicked :(\"))\n+        .panic_handler(|_| log::error!(\"thread panicked :(\"))\n         .build()\n         .unwrap();\n     let (task_sender, task_receiver) = unbounded::<Task>();\n     let (fs_worker, fs_watcher) = vfs::roots_loader();\n     let (ws_worker, ws_watcher) = workspace_loader();\n \n-    info!(\"server initialized, serving requests\");\n+    log::info!(\"server initialized, serving requests\");\n     let mut state = ServerWorldState::default();\n \n     let mut pending_requests = FxHashSet::default();\n@@ -82,12 +84,12 @@ pub fn main_loop(\n         &mut subs,\n     );\n \n-    info!(\"waiting for tasks to finish...\");\n+    log::info!(\"waiting for tasks to finish...\");\n     task_receiver.for_each(|task| on_task(task, msg_sender, &mut pending_requests));\n-    info!(\"...tasks have finished\");\n-    info!(\"joining threadpool...\");\n+    log::info!(\"...tasks have finished\");\n+    log::info!(\"joining threadpool...\");\n     drop(pool);\n-    info!(\"...threadpool has finished\");\n+    log::info!(\"...threadpool has finished\");\n \n     let fs_res = fs_watcher.stop();\n     let ws_res = ws_watcher.stop();\n@@ -126,7 +128,7 @@ fn main_loop_inner(\n             Ws(Result<CargoWorkspace>),\n             Lib(LibraryData),\n         }\n-        trace!(\"selecting\");\n+        log::trace!(\"selecting\");\n         let event = select! {\n             recv(msg_receiver, msg) => match msg {\n                 Some(msg) => Event::Msg(msg),\n@@ -147,17 +149,17 @@ fn main_loop_inner(\n         match event {\n             Event::Task(task) => on_task(task, msg_sender, pending_requests),\n             Event::Fs(root, events) => {\n-                info!(\"fs change, {}, {} events\", root.display(), events.len());\n+                log::info!(\"fs change, {}, {} events\", root.display(), events.len());\n                 if root == ws_root {\n                     state.apply_fs_changes(events);\n                 } else {\n                     let (files, resolver) = state.events_to_files(events);\n                     let sender = libdata_sender.clone();\n                     pool.spawn(move || {\n                         let start = ::std::time::Instant::now();\n-                        info!(\"indexing {} ... \", root.display());\n+                        log::info!(\"indexing {} ... \", root.display());\n                         let data = LibraryData::prepare(files, resolver);\n-                        info!(\"indexed {:?} {}\", start.elapsed(), root.display());\n+                        log::info!(\"indexed {:?} {}\", start.elapsed(), root.display());\n                         sender.send(data);\n                     });\n                 }\n@@ -195,14 +197,14 @@ fn main_loop_inner(\n                             .map(|(_idx, root)| root);\n \n                         for root in unique {\n-                            debug!(\"sending root, {}\", root.display());\n+                            log::debug!(\"sending root, {}\", root.display());\n                             fs_worker.send(root.to_owned());\n                         }\n                     }\n                     state.set_workspaces(workspaces);\n                     state_changed = true;\n                 }\n-                Err(e) => warn!(\"loading workspace failed: {}\", e),\n+                Err(e) => log::warn!(\"loading workspace failed: {}\", e),\n             },\n             Event::Lib(lib) => {\n                 feedback(internal_mode, \"library loaded\", msg_sender);\n@@ -217,7 +219,7 @@ fn main_loop_inner(\n                     match on_request(state, pending_requests, pool, &task_sender, req)? {\n                         None => (),\n                         Some(req) => {\n-                            error!(\"unknown request: {:?}\", req);\n+                            log::error!(\"unknown request: {:?}\", req);\n                             let resp = RawResponse::err(\n                                 req.id,\n                                 ErrorCode::MethodNotFound as i32,\n@@ -231,7 +233,7 @@ fn main_loop_inner(\n                     on_notification(msg_sender, state, pending_requests, subs, not)?;\n                     state_changed = true;\n                 }\n-                RawMessage::Response(resp) => error!(\"unexpected response: {:?}\", resp),\n+                RawMessage::Response(resp) => log::error!(\"unexpected response: {:?}\", resp),\n             },\n         };\n \n@@ -370,7 +372,7 @@ fn on_notification(\n         }\n         Err(not) => not,\n     };\n-    error!(\"unhandled notification: {:?}\", not);\n+    log::error!(\"unhandled notification: {:?}\", not);\n     Ok(())\n }\n \n@@ -455,7 +457,7 @@ fn update_file_notifications_on_threadpool(\n             match handlers::publish_diagnostics(&world, file_id) {\n                 Err(e) => {\n                     if !is_canceled(&e) {\n-                        error!(\"failed to compute diagnostics: {:?}\", e);\n+                        log::error!(\"failed to compute diagnostics: {:?}\", e);\n                     }\n                 }\n                 Ok(params) => {\n@@ -467,7 +469,7 @@ fn update_file_notifications_on_threadpool(\n                 match handlers::publish_decorations(&world, file_id) {\n                     Err(e) => {\n                         if !is_canceled(&e) {\n-                            error!(\"failed to compute decorations: {:?}\", e);\n+                            log::error!(\"failed to compute decorations: {:?}\", e);\n                         }\n                     }\n                     Ok(params) => {"}, {"sha": "3305d468aa9cc82430d62b7be45d87b72a5ec958", "filename": "crates/ra_lsp_server/src/project_model.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -1,12 +1,14 @@\n use std::path::{Path, PathBuf};\n \n+use serde_derive::Serialize;\n use cargo_metadata::{metadata_run, CargoOpt};\n use ra_syntax::SmolStr;\n use rustc_hash::{FxHashMap, FxHashSet};\n+use failure::{format_err, bail};\n \n use crate::{\n-    thread_watcher::{ThreadWatcher, Worker},\n     Result,\n+    thread_watcher::{ThreadWatcher, Worker},\n };\n \n #[derive(Debug, Clone)]"}, {"sha": "999792ecba8e3a0e0c36d855c550480f34405a33", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -1,3 +1,4 @@\n+use serde_derive::{Serialize, Deserialize};\n use languageserver_types::{Location, Position, Range, TextDocumentIdentifier, Url};\n use rustc_hash::FxHashMap;\n use url_serde;"}, {"sha": "c3f89ad5f0f4db7c48ef1c69e33e1326ed41519a", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -9,6 +9,7 @@ use ra_analysis::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, FileResolver, LibraryData,\n };\n use rustc_hash::FxHashMap;\n+use failure::{bail, format_err};\n \n use crate::{\n     path_map::{PathMap, Root},"}, {"sha": "99825d440d8fda5f2394815cd91bf6b1fb3f3f89", "filename": "crates/ra_lsp_server/src/thread_watcher.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_lsp_server%2Fsrc%2Fthread_watcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_lsp_server%2Fsrc%2Fthread_watcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fthread_watcher.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -2,6 +2,7 @@ use std::thread;\n \n use crossbeam_channel::{bounded, unbounded, Receiver, Sender};\n use drop_bomb::DropBomb;\n+use failure::format_err;\n \n use crate::Result;\n \n@@ -48,16 +49,16 @@ impl ThreadWatcher {\n     }\n \n     pub fn stop(mut self) -> Result<()> {\n-        info!(\"waiting for {} to finish ...\", self.name);\n+        log::info!(\"waiting for {} to finish ...\", self.name);\n         let name = self.name;\n         self.bomb.defuse();\n         let res = self\n             .thread\n             .join()\n             .map_err(|_| format_err!(\"ThreadWatcher {} died\", name));\n         match &res {\n-            Ok(()) => info!(\"... {} terminated with ok\", name),\n-            Err(_) => error!(\"... {} terminated with err\", name),\n+            Ok(()) => log::info!(\"... {} terminated with ok\", name),\n+            Err(_) => log::error!(\"... {} terminated with err\", name),\n         }\n         res\n     }"}, {"sha": "00ab3e6c3d655268f8c83ef00fd3a5bbe330198e", "filename": "crates/ra_lsp_server/src/vfs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_lsp_server%2Fsrc%2Fvfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_lsp_server%2Fsrc%2Fvfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fvfs.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -25,9 +25,9 @@ pub fn roots_loader() -> (Worker<PathBuf, (PathBuf, Vec<FileEvent>)>, ThreadWatc\n         |input_receiver, output_sender| {\n             input_receiver\n                 .map(|path| {\n-                    debug!(\"loading {} ...\", path.as_path().display());\n+                    log::debug!(\"loading {} ...\", path.as_path().display());\n                     let events = load_root(path.as_path());\n-                    debug!(\"... loaded {}\", path.as_path().display());\n+                    log::debug!(\"... loaded {}\", path.as_path().display());\n                     (path, events)\n                 })\n                 .for_each(|it| output_sender.send(it))\n@@ -41,7 +41,7 @@ fn load_root(path: &Path) -> Vec<FileEvent> {\n         let entry = match entry {\n             Ok(entry) => entry,\n             Err(e) => {\n-                warn!(\"watcher error: {}\", e);\n+                log::warn!(\"watcher error: {}\", e);\n                 continue;\n             }\n         };\n@@ -55,7 +55,7 @@ fn load_root(path: &Path) -> Vec<FileEvent> {\n         let text = match fs::read_to_string(path) {\n             Ok(text) => text,\n             Err(e) => {\n-                warn!(\"watcher error: {}\", e);\n+                log::warn!(\"watcher error: {}\", e);\n                 continue;\n             }\n         };"}, {"sha": "cbc0c88443a0efbbb1756bfb4230500c0b18f92d", "filename": "crates/ra_lsp_server/tests/heavy_tests/main.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -1,13 +1,3 @@\n-#[macro_use]\n-extern crate crossbeam_channel;\n-extern crate flexi_logger;\n-extern crate gen_lsp_server;\n-extern crate languageserver_types;\n-extern crate ra_lsp_server;\n-extern crate serde;\n-extern crate serde_json;\n-extern crate tempdir;\n-\n mod support;\n \n use ra_lsp_server::req::{Runnables, RunnablesParams};"}, {"sha": "019048a3a869c857950b29e2bd71e75cf4cc1d42", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -6,7 +6,7 @@ use std::{\n     time::Duration,\n };\n \n-use crossbeam_channel::{after, Receiver};\n+use crossbeam_channel::{after, select, Receiver};\n use flexi_logger::Logger;\n use gen_lsp_server::{RawMessage, RawNotification, RawRequest};\n use languageserver_types::{"}, {"sha": "8ad8ed196c1ed65041d9ecacd1e229c5ddbdfa9a", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -1,5 +1,5 @@\n [package]\n-edition = \"2015\"\n+edition = \"2018\"\n name = \"ra_syntax\"\n version = \"0.1.0\"\n authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]"}, {"sha": "0e5c9baadd586b8680f1bb4fd8045eb84d68c612", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -20,17 +20,6 @@\n #![allow(missing_docs)]\n //#![warn(unreachable_pub)] // rust-lang/rust#47816\n \n-extern crate arrayvec;\n-extern crate drop_bomb;\n-extern crate itertools;\n-extern crate parking_lot;\n-extern crate rowan;\n-extern crate unicode_xid;\n-\n-#[cfg(test)]\n-#[macro_use]\n-extern crate test_utils;\n-\n pub mod algo;\n pub mod ast;\n mod lexer;\n@@ -48,11 +37,11 @@ pub mod utils;\n mod validation;\n mod yellow;\n \n+pub use rowan::{SmolStr, TextRange, TextUnit};\n pub use crate::{\n     ast::AstNode,\n     lexer::{tokenize, Token},\n     reparsing::AtomEdit,\n-    rowan::{SmolStr, TextRange, TextUnit},\n     syntax_kinds::SyntaxKind,\n     yellow::{\n         Direction, OwnedRoot, RefRoot, SyntaxError, SyntaxNode, SyntaxNodeRef, TreeRoot, WalkEvent, Location,"}, {"sha": "c37c30e349d1d2e980e9b707ef8debe68d1934de", "filename": "crates/ra_syntax/src/parser_api.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_syntax%2Fsrc%2Fparser_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_syntax%2Fsrc%2Fparser_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparser_api.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -1,5 +1,6 @@\n+use drop_bomb::DropBomb;\n+\n use crate::{\n-    drop_bomb::DropBomb,\n     parser_impl::ParserImpl,\n     token_set::TokenSet,\n     SyntaxKind::{self, ERROR},"}, {"sha": "732fb0e4ae24373017665af7dd67cb1b62c16381", "filename": "crates/ra_syntax/src/reparsing.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_syntax%2Fsrc%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Fra_syntax%2Fsrc%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Freparsing.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -179,10 +179,10 @@ fn merge_errors(\n \n #[cfg(test)]\n mod tests {\n-    use super::{\n-        super::{test_utils::extract_range, text_utils::replace_range, utils::dump_tree, SourceFileNode},\n-        reparse_block, reparse_leaf, AtomEdit, GreenNode, SyntaxError, SyntaxNodeRef,\n-};\n+    use test_utils::{extract_range, assert_eq_text};\n+\n+    use crate::{SourceFileNode, text_utils::replace_range, utils::dump_tree };\n+    use super::*;\n \n     fn do_check<F>(before: &str, replace_with: &str, reparser: F)\n     where"}, {"sha": "e72ec9c4700a7632127b49353ea58b4cfcb4e0f8", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -1,12 +1,9 @@\n-extern crate difference;\n-extern crate itertools;\n-extern crate text_unit;\n+use std::fmt;\n \n use itertools::Itertools;\n-use std::fmt;\n use text_unit::{TextRange, TextUnit};\n \n-pub use self::difference::Changeset as __Changeset;\n+pub use difference::Changeset as __Changeset;\n \n pub const CURSOR_MARKER: &str = \"<|>\";\n "}, {"sha": "c2123db99601756963229be131a81a881913977e", "filename": "crates/tools/src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Ftools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Ftools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Flib.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -1,7 +1,3 @@\n-extern crate failure;\n-extern crate itertools;\n-extern crate teraron;\n-\n use std::{\n     path::{Path, PathBuf},\n     process::{Command, Stdio},\n@@ -12,7 +8,7 @@ use itertools::Itertools;\n \n pub use teraron::{Mode, Overwrite, Verify};\n \n-pub type Result<T> = ::std::result::Result<T, failure::Error>;\n+pub type Result<T> = std::result::Result<T, failure::Error>;\n \n pub const GRAMMAR: &str = \"crates/ra_syntax/src/grammar.ron\";\n pub const SYNTAX_KINDS: &str = \"crates/ra_syntax/src/syntax_kinds/generated.rs.tera\";"}, {"sha": "7bd4a2d09c85b4687c01126fb66618523fe89183", "filename": "crates/tools/src/main.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Ftools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3/crates%2Ftools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Fmain.rs?ref=8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "patch": "@@ -1,16 +1,12 @@\n-extern crate clap;\n-extern crate failure;\n-extern crate teraron;\n-extern crate tools;\n-extern crate walkdir;\n-\n-use clap::{App, Arg, SubCommand};\n-use failure::bail;\n use std::{\n     collections::HashMap,\n     fs,\n     path::{Path, PathBuf},\n };\n+\n+use clap::{App, Arg, SubCommand};\n+use failure::bail;\n+\n use tools::{collect_tests, generate, run, run_rustfmt, Mode, Overwrite, Result, Test, Verify};\n \n const GRAMMAR_DIR: &str = \"./crates/ra_syntax/src/grammar\";"}]}