{"sha": "f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MDhhYTllODAwMGRkN2ZkMmMzZGU1NGZlMWQ5MTRmZGRmNGZlOTI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-27T11:04:48Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-27T11:04:48Z"}, "message": "recover on 'mut ' and improve recovery for keywords.", "tree": {"sha": "edc7953aea9c42c82aa3c9a0e6b7f7d5d75413f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edc7953aea9c42c82aa3c9a0e6b7f7d5d75413f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "html_url": "https://github.com/rust-lang/rust/commit/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e49b9581baba9d89519d17ac0d8400b6ae77e754", "url": "https://api.github.com/repos/rust-lang/rust/commits/e49b9581baba9d89519d17ac0d8400b6ae77e754", "html_url": "https://github.com/rust-lang/rust/commit/e49b9581baba9d89519d17ac0d8400b6ae77e754"}], "stats": {"total": 596, "additions": 449, "deletions": 147}, "files": [{"sha": "7b228a700a74847a3972b0d04845a23049007153", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 105, "deletions": 31, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -4,6 +4,7 @@ use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n use crate::ptr::P;\n use crate::ast::{self, Attribute, Pat, PatKind, FieldPat, RangeEnd, RangeSyntax, Mac};\n use crate::ast::{BindingMode, Ident, Mutability, Path, QSelf, Expr, ExprKind};\n+use crate::mut_visit::{noop_visit_pat, MutVisitor};\n use crate::parse::token::{self};\n use crate::print::pprust;\n use crate::source_map::{respan, Span, Spanned};\n@@ -273,21 +274,20 @@ impl<'a> Parser<'a> {\n                 // Parse _\n                 PatKind::Wild\n             } else if self.eat_keyword(kw::Mut) {\n-                self.recover_pat_ident_mut_first()?\n+                self.parse_pat_ident_mut()?\n             } else if self.eat_keyword(kw::Ref) {\n                 // Parse ref ident @ pat / ref mut ident @ pat\n                 let mutbl = self.parse_mutability();\n                 self.parse_pat_ident(BindingMode::ByRef(mutbl))?\n             } else if self.eat_keyword(kw::Box) {\n                 // Parse `box pat`\n                 PatKind::Box(self.parse_pat_with_range_pat(false, None)?)\n-            } else if self.token.is_ident() && !self.token.is_reserved_ident() &&\n-                      self.parse_as_ident() {\n+            } else if self.can_be_ident_pat() {\n                 // Parse `ident @ pat`\n                 // This can give false positives and parse nullary enums,\n                 // they are dealt with later in resolve.\n                 self.parse_pat_ident(BindingMode::ByValue(Mutability::Immutable))?\n-            } else if self.token.is_path_start() {\n+            } else if self.is_start_of_pat_with_path() {\n                 // Parse pattern starting with a path\n                 let (qself, path) = if self.eat_lt() {\n                     // Parse a qualified path\n@@ -384,24 +384,85 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n+    fn parse_pat_ident_mut(&mut self) -> PResult<'a, PatKind> {\n+        let mut_span = self.prev_span;\n+\n+        if self.eat_keyword(kw::Ref) {\n+            return self.recover_mut_ref_ident(mut_span)\n+        }\n+\n+        self.recover_additional_muts();\n+\n+        let mut pat = self.parse_pat(Some(\"identifier\"))?;\n+\n+        // Add `mut` to any binding in the parsed pattern.\n+        struct AddMut;\n+        impl MutVisitor for AddMut {\n+            fn visit_pat(&mut self, pat: &mut P<Pat>) {\n+                if let PatKind::Ident(BindingMode::ByValue(ref mut m), ..) = pat.node {\n+                    *m = Mutability::Mutable;\n+                }\n+                noop_visit_pat(pat, self);\n+            }\n+        }\n+        AddMut.visit_pat(&mut pat);\n+\n+        // Unwrap; If we don't have `mut $ident`, error.\n+        let pat = pat.into_inner();\n+        match &pat.node {\n+            PatKind::Ident(..) => {}\n+            _ => self.ban_mut_general_pat(mut_span, &pat),\n+        }\n+\n+        Ok(pat.node)\n+    }\n+\n     /// Recover on `mut ref? ident @ pat` and suggest\n     /// that the order of `mut` and `ref` is incorrect.\n-    fn recover_pat_ident_mut_first(&mut self) -> PResult<'a, PatKind> {\n-        let mutref_span = self.prev_span.to(self.token.span);\n-        let binding_mode = if self.eat_keyword(kw::Ref) {\n-            self.struct_span_err(mutref_span, \"the order of `mut` and `ref` is incorrect\")\n-                .span_suggestion(\n-                    mutref_span,\n-                    \"try switching the order\",\n-                    \"ref mut\".into(),\n-                    Applicability::MachineApplicable\n-                )\n-                .emit();\n-            BindingMode::ByRef(Mutability::Mutable)\n-        } else {\n-            BindingMode::ByValue(Mutability::Mutable)\n-        };\n-        self.parse_pat_ident(binding_mode)\n+    fn recover_mut_ref_ident(&mut self, lo: Span) -> PResult<'a, PatKind> {\n+        let mutref_span = lo.to(self.prev_span);\n+        self.struct_span_err(mutref_span, \"the order of `mut` and `ref` is incorrect\")\n+            .span_suggestion(\n+                mutref_span,\n+                \"try switching the order\",\n+                \"ref mut\".into(),\n+                Applicability::MachineApplicable\n+            )\n+            .emit();\n+\n+        self.parse_pat_ident(BindingMode::ByRef(Mutability::Mutable))\n+    }\n+\n+    /// Error on `mut $pat` where `$pat` is not an ident.\n+    fn ban_mut_general_pat(&self, lo: Span, pat: &Pat) {\n+        let span = lo.to(pat.span);\n+        self.struct_span_err(span, \"`mut` must be attached to each individual binding\")\n+            .span_suggestion(\n+                span,\n+                \"add `mut` to each binding\",\n+                pprust::pat_to_string(&pat),\n+                Applicability::MachineApplicable,\n+            )\n+            .emit();\n+    }\n+\n+    /// Eat any extraneous `mut`s and error + recover if we ate any.\n+    fn recover_additional_muts(&mut self) {\n+        let lo = self.token.span;\n+        while self.eat_keyword(kw::Mut) {}\n+        if lo == self.token.span {\n+            return;\n+        }\n+\n+        let span = lo.to(self.prev_span);\n+        self.struct_span_err(span, \"`mut` on a binding may not be repeated\")\n+            .span_suggestion(\n+                span,\n+                \"remove the additional `mut`s\",\n+                String::new(),\n+                Applicability::MachineApplicable,\n+            )\n+            .emit();\n     }\n \n     /// Parse macro invocation\n@@ -479,17 +540,6 @@ impl<'a> Parser<'a> {\n         Err(err)\n     }\n \n-    // Helper function to decide whether to parse as ident binding\n-    // or to try to do something more complex like range patterns.\n-    fn parse_as_ident(&mut self) -> bool {\n-        self.look_ahead(1, |t| match t.kind {\n-            token::OpenDelim(token::Paren) | token::OpenDelim(token::Brace) |\n-            token::DotDotDot | token::DotDotEq | token::DotDot |\n-            token::ModSep | token::Not => false,\n-            _ => true,\n-        })\n-    }\n-\n     /// Is the current token suitable as the start of a range patterns end?\n     fn is_pat_range_end_start(&self) -> bool {\n         self.token.is_path_start() // e.g. `MY_CONST`;\n@@ -563,6 +613,30 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    /// Is this the start of a pattern beginning with a path?\n+    fn is_start_of_pat_with_path(&mut self) -> bool {\n+        self.check_path()\n+        // Just for recovery (see `can_be_ident`).\n+        || self.token.is_ident() && !self.token.is_bool_lit() && !self.token.is_keyword(kw::In)\n+    }\n+\n+    /// Would `parse_pat_ident` be appropriate here?\n+    fn can_be_ident_pat(&mut self) -> bool {\n+        self.check_ident()\n+        && !self.token.is_bool_lit() // Avoid `true` or `false` as a binding as it is a literal.\n+        && !self.token.is_path_segment_keyword() // Avoid e.g. `Self` as it is a path.\n+        // Avoid `in`. Due to recovery in the list parser this messes with `for ( $pat in $expr )`.\n+        && !self.token.is_keyword(kw::In)\n+        && self.look_ahead(1, |t| match t.kind { // Try to do something more complex?\n+            token::OpenDelim(token::Paren) // A tuple struct pattern.\n+            | token::OpenDelim(token::Brace) // A struct pattern.\n+            | token::DotDotDot | token::DotDotEq | token::DotDot // A range pattern.\n+            | token::ModSep // A tuple / struct variant pattern.\n+            | token::Not => false, // A macro expanding to a pattern.\n+            _ => true,\n+        })\n+    }\n+\n     /// Parses `ident` or `ident @ pat`.\n     /// Used by the copy foo and ref foo patterns to give a good\n     /// error message when parsing mistakes like `ref foo(a, b)`."}, {"sha": "8a420f7203cacbfa45255feabf11aaa874a9d4be", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let extern = 0; //~ ERROR expected pattern, found keyword `extern`\n+    let extern = 0; //~ ERROR expected identifier, found keyword `extern`\n }"}, {"sha": "73ac113f1b1e08d12d67a3d57e55176aa0d6d2a8", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-pat.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `extern`\n+error: expected identifier, found keyword `extern`\n   --> $DIR/keyword-extern-as-identifier-pat.rs:2:9\n    |\n LL |     let extern = 0;\n-   |         ^^^^^^ expected pattern\n+   |         ^^^^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#extern = 0;\n+   |         ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "695baf81872763a4315598cc8302b8e856b5b045", "filename": "src/test/ui/parser/issue-32501.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fissue-32501.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fissue-32501.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32501.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -4,5 +4,6 @@ fn main() {\n     let _ = 0;\n     let mut b = 0;\n     let mut _b = 0;\n-    let mut _ = 0; //~ ERROR expected identifier, found reserved identifier `_`\n+    let mut _ = 0;\n+    //~^ ERROR `mut` must be attached to each individual binding\n }"}, {"sha": "f5d3300cf9c565555d1a12768d3fa2e9ccdbec54", "filename": "src/test/ui/parser/issue-32501.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fissue-32501.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fissue-32501.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32501.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,8 @@\n-error: expected identifier, found reserved identifier `_`\n-  --> $DIR/issue-32501.rs:7:13\n+error: `mut` must be attached to each individual binding\n+  --> $DIR/issue-32501.rs:7:9\n    |\n LL |     let mut _ = 0;\n-   |             ^ expected identifier, found reserved identifier\n+   |         ^^^^^ help: add `mut` to each binding: `_`\n \n error: aborting due to previous error\n "}, {"sha": "570206575ab07e16c55c6f885eaa56731b09dea0", "filename": "src/test/ui/parser/keyword-abstract.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-abstract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-abstract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-abstract.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let abstract = (); //~ ERROR expected pattern, found reserved keyword `abstract`\n+    let abstract = (); //~ ERROR expected identifier, found reserved keyword `abstract`\n }"}, {"sha": "eb2c810099e161b1b899bcb840cda53953b2d929", "filename": "src/test/ui/parser/keyword-abstract.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-abstract.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-abstract.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-abstract.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found reserved keyword `abstract`\n+error: expected identifier, found reserved keyword `abstract`\n   --> $DIR/keyword-abstract.rs:2:9\n    |\n LL |     let abstract = ();\n-   |         ^^^^^^^^ expected pattern\n+   |         ^^^^^^^^ expected identifier, found reserved keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#abstract = ();\n+   |         ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "cd47c8a3907d959de3def73a6d27c3b32382274f", "filename": "src/test/ui/parser/keyword-as-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-as-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-as-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-as-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py as'\n \n fn main() {\n-    let as = \"foo\"; //~ error: expected pattern, found keyword `as`\n+    let as = \"foo\"; //~ error: expected identifier, found keyword `as`\n }"}, {"sha": "5648652be9bcadb3a20a458486fcbdb4a0e3c9d9", "filename": "src/test/ui/parser/keyword-as-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-as-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-as-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-as-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `as`\n+error: expected identifier, found keyword `as`\n   --> $DIR/keyword-as-as-identifier.rs:4:9\n    |\n LL |     let as = \"foo\";\n-   |         ^^ expected pattern\n+   |         ^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#as = \"foo\";\n+   |         ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "04b25a7aaf6135b0a50d272c057b07e9b0595832", "filename": "src/test/ui/parser/keyword-break-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-break-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-break-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-break-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py break'\n \n fn main() {\n-    let break = \"foo\"; //~ error: expected pattern, found keyword `break`\n+    let break = \"foo\"; //~ error: expected identifier, found keyword `break`\n }"}, {"sha": "820193db70b0fbadf717633d6034cad9cc1307a2", "filename": "src/test/ui/parser/keyword-break-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-break-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-break-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-break-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `break`\n+error: expected identifier, found keyword `break`\n   --> $DIR/keyword-break-as-identifier.rs:4:9\n    |\n LL |     let break = \"foo\";\n-   |         ^^^^^ expected pattern\n+   |         ^^^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#break = \"foo\";\n+   |         ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "6a2d926bf5796245a6ca61bcf63a5b0322229460", "filename": "src/test/ui/parser/keyword-const-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-const-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-const-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-const-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py const'\n \n fn main() {\n-    let const = \"foo\"; //~ error: expected pattern, found keyword `const`\n+    let const = \"foo\"; //~ error: expected identifier, found keyword `const`\n }"}, {"sha": "95b536c99c75aea93bf8346a359cb3ec876e2603", "filename": "src/test/ui/parser/keyword-const-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-const-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-const-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-const-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `const`\n+error: expected identifier, found keyword `const`\n   --> $DIR/keyword-const-as-identifier.rs:4:9\n    |\n LL |     let const = \"foo\";\n-   |         ^^^^^ expected pattern\n+   |         ^^^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#const = \"foo\";\n+   |         ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "cfdd62a2d1bcedb39b6a0265ad864922442853c2", "filename": "src/test/ui/parser/keyword-continue-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-continue-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-continue-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-continue-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py continue'\n \n fn main() {\n-    let continue = \"foo\"; //~ error: expected pattern, found keyword `continue`\n+    let continue = \"foo\"; //~ error: expected identifier, found keyword `continue`\n }"}, {"sha": "6b24422a5557e90d945ce858c114c8166768a5fc", "filename": "src/test/ui/parser/keyword-continue-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-continue-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-continue-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-continue-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `continue`\n+error: expected identifier, found keyword `continue`\n   --> $DIR/keyword-continue-as-identifier.rs:4:9\n    |\n LL |     let continue = \"foo\";\n-   |         ^^^^^^^^ expected pattern\n+   |         ^^^^^^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#continue = \"foo\";\n+   |         ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f12dac3ff75ebd0796e9917d5f347b5593a680e2", "filename": "src/test/ui/parser/keyword-else-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-else-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-else-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-else-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py else'\n \n fn main() {\n-    let else = \"foo\"; //~ error: expected pattern, found keyword `else`\n+    let else = \"foo\"; //~ error: expected identifier, found keyword `else`\n }"}, {"sha": "f28635cd08cd6488d41241f9640cad36180f3cc7", "filename": "src/test/ui/parser/keyword-else-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-else-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-else-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-else-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `else`\n+error: expected identifier, found keyword `else`\n   --> $DIR/keyword-else-as-identifier.rs:4:9\n    |\n LL |     let else = \"foo\";\n-   |         ^^^^ expected pattern\n+   |         ^^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#else = \"foo\";\n+   |         ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "fe66230d028307faf06edeb76352b688ed0d7e21", "filename": "src/test/ui/parser/keyword-enum-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-enum-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-enum-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-enum-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py enum'\n \n fn main() {\n-    let enum = \"foo\"; //~ error: expected pattern, found keyword `enum`\n+    let enum = \"foo\"; //~ error: expected identifier, found keyword `enum`\n }"}, {"sha": "fc54dce1b68f4667595e87ad495574066280ff6c", "filename": "src/test/ui/parser/keyword-enum-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-enum-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-enum-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-enum-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `enum`\n+error: expected identifier, found keyword `enum`\n   --> $DIR/keyword-enum-as-identifier.rs:4:9\n    |\n LL |     let enum = \"foo\";\n-   |         ^^^^ expected pattern\n+   |         ^^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#enum = \"foo\";\n+   |         ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a79a11032a018e1d4e3339672e52db6dc4095d1f", "filename": "src/test/ui/parser/keyword-final.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-final.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-final.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-final.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let final = (); //~ ERROR expected pattern, found reserved keyword `final`\n+    let final = (); //~ ERROR expected identifier, found reserved keyword `final`\n }"}, {"sha": "291710d05cbfde4d8201700b14a5bc335afa77c8", "filename": "src/test/ui/parser/keyword-final.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-final.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-final.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-final.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found reserved keyword `final`\n+error: expected identifier, found reserved keyword `final`\n   --> $DIR/keyword-final.rs:2:9\n    |\n LL |     let final = ();\n-   |         ^^^^^ expected pattern\n+   |         ^^^^^ expected identifier, found reserved keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#final = ();\n+   |         ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f30e115f7947e8d91ef196ba6a74be8e0347c7c6", "filename": "src/test/ui/parser/keyword-fn-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-fn-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-fn-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-fn-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py fn'\n \n fn main() {\n-    let fn = \"foo\"; //~ error: expected pattern, found keyword `fn`\n+    let fn = \"foo\"; //~ error: expected identifier, found keyword `fn`\n }"}, {"sha": "692f195b2888dd08afad55d7818173d50fea326f", "filename": "src/test/ui/parser/keyword-fn-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-fn-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-fn-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-fn-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `fn`\n+error: expected identifier, found keyword `fn`\n   --> $DIR/keyword-fn-as-identifier.rs:4:9\n    |\n LL |     let fn = \"foo\";\n-   |         ^^ expected pattern\n+   |         ^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#fn = \"foo\";\n+   |         ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "9e8a2ad53420c3736001fbcc6b9fdbe502dc9d4c", "filename": "src/test/ui/parser/keyword-for-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-for-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-for-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-for-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py for'\n \n fn main() {\n-    let for = \"foo\"; //~ error: expected pattern, found keyword `for`\n+    let for = \"foo\"; //~ error: expected identifier, found keyword `for`\n }"}, {"sha": "bcaf421286e76503034889868f29b4a2e8203452", "filename": "src/test/ui/parser/keyword-for-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-for-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-for-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-for-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `for`\n+error: expected identifier, found keyword `for`\n   --> $DIR/keyword-for-as-identifier.rs:4:9\n    |\n LL |     let for = \"foo\";\n-   |         ^^^ expected pattern\n+   |         ^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#for = \"foo\";\n+   |         ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0bd5756afce7f95c18d4bf1c8e017a9ce2ff390b", "filename": "src/test/ui/parser/keyword-if-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-if-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-if-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-if-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py if'\n \n fn main() {\n-    let if = \"foo\"; //~ error: expected pattern, found keyword `if`\n+    let if = \"foo\"; //~ error: expected identifier, found keyword `if`\n }"}, {"sha": "43fbcd7148a1db7d0c3914b0549c74affb93922c", "filename": "src/test/ui/parser/keyword-if-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-if-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-if-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-if-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `if`\n+error: expected identifier, found keyword `if`\n   --> $DIR/keyword-if-as-identifier.rs:4:9\n    |\n LL |     let if = \"foo\";\n-   |         ^^ expected pattern\n+   |         ^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#if = \"foo\";\n+   |         ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "df529bae0721443d9ae2dc483c307047bf9788e0", "filename": "src/test/ui/parser/keyword-impl-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-impl-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-impl-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-impl-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py impl'\n \n fn main() {\n-    let impl = \"foo\"; //~ error: expected pattern, found keyword `impl`\n+    let impl = \"foo\"; //~ error: expected identifier, found keyword `impl`\n }"}, {"sha": "01886eb45cb6da41c9210bfc2389cd84bb4868e2", "filename": "src/test/ui/parser/keyword-impl-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-impl-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-impl-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-impl-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `impl`\n+error: expected identifier, found keyword `impl`\n   --> $DIR/keyword-impl-as-identifier.rs:4:9\n    |\n LL |     let impl = \"foo\";\n-   |         ^^^^ expected pattern\n+   |         ^^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#impl = \"foo\";\n+   |         ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "9b1183501b28d62425dbbc5ad045dd34fefd88f2", "filename": "src/test/ui/parser/keyword-let-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-let-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-let-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-let-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py let'\n \n fn main() {\n-    let let = \"foo\"; //~ error: expected pattern, found keyword `let`\n+    let let = \"foo\"; //~ error: expected identifier, found keyword `let`\n }"}, {"sha": "f6c39077be23b3e8eaa80aae7dbc6475993a9706", "filename": "src/test/ui/parser/keyword-let-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-let-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-let-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-let-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `let`\n+error: expected identifier, found keyword `let`\n   --> $DIR/keyword-let-as-identifier.rs:4:9\n    |\n LL |     let let = \"foo\";\n-   |         ^^^ expected pattern\n+   |         ^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#let = \"foo\";\n+   |         ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "46914a19be2bd1841f54c9184ca7d433b195532b", "filename": "src/test/ui/parser/keyword-loop-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-loop-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-loop-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-loop-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py loop'\n \n fn main() {\n-    let loop = \"foo\"; //~ error: expected pattern, found keyword `loop`\n+    let loop = \"foo\"; //~ error: expected identifier, found keyword `loop`\n }"}, {"sha": "f0c282faa29f16e1e778d254dc9ba0d88fac9826", "filename": "src/test/ui/parser/keyword-loop-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-loop-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-loop-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-loop-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `loop`\n+error: expected identifier, found keyword `loop`\n   --> $DIR/keyword-loop-as-identifier.rs:4:9\n    |\n LL |     let loop = \"foo\";\n-   |         ^^^^ expected pattern\n+   |         ^^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#loop = \"foo\";\n+   |         ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d3cecb991b8f96c050fa6010b7967a48b5437b4b", "filename": "src/test/ui/parser/keyword-match-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-match-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-match-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-match-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py match'\n \n fn main() {\n-    let match = \"foo\"; //~ error: expected pattern, found keyword `match`\n+    let match = \"foo\"; //~ error: expected identifier, found keyword `match`\n }"}, {"sha": "f1f4397d194f04d1c74a8d0ce9f5064cf38215b6", "filename": "src/test/ui/parser/keyword-match-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-match-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-match-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-match-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `match`\n+error: expected identifier, found keyword `match`\n   --> $DIR/keyword-match-as-identifier.rs:4:9\n    |\n LL |     let match = \"foo\";\n-   |         ^^^^^ expected pattern\n+   |         ^^^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#match = \"foo\";\n+   |         ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b9c7b6c78ed6c9f3ebffd098d6ca01ac917115e9", "filename": "src/test/ui/parser/keyword-mod-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-mod-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-mod-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-mod-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py mod'\n \n fn main() {\n-    let mod = \"foo\"; //~ error: expected pattern, found keyword `mod`\n+    let mod = \"foo\"; //~ error: expected identifier, found keyword `mod`\n }"}, {"sha": "65ae3baa8c21d4c5a477d82397922d3e8b29e5dc", "filename": "src/test/ui/parser/keyword-mod-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-mod-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-mod-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-mod-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `mod`\n+error: expected identifier, found keyword `mod`\n   --> $DIR/keyword-mod-as-identifier.rs:4:9\n    |\n LL |     let mod = \"foo\";\n-   |         ^^^ expected pattern\n+   |         ^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#mod = \"foo\";\n+   |         ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "65be02e3c70cf233aab3125e1dbefdd4280f129e", "filename": "src/test/ui/parser/keyword-move-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-move-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-move-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-move-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py move'\n \n fn main() {\n-    let move = \"foo\"; //~ error: expected pattern, found keyword `move`\n+    let move = \"foo\"; //~ error: expected identifier, found keyword `move`\n }"}, {"sha": "216f7c931eea7b9ff34eee0387ba51ff52ae7e88", "filename": "src/test/ui/parser/keyword-move-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-move-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-move-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-move-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `move`\n+error: expected identifier, found keyword `move`\n   --> $DIR/keyword-move-as-identifier.rs:4:9\n    |\n LL |     let move = \"foo\";\n-   |         ^^^^ expected pattern\n+   |         ^^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#move = \"foo\";\n+   |         ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "009bebd7ddba8f38460783645903934a2d597904", "filename": "src/test/ui/parser/keyword-override.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-override.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-override.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-override.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let override = (); //~ ERROR expected pattern, found reserved keyword `override`\n+    let override = (); //~ ERROR expected identifier, found reserved keyword `override`\n }"}, {"sha": "3183fa510c2d15279191d15ade705784e8d21750", "filename": "src/test/ui/parser/keyword-override.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-override.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-override.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-override.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found reserved keyword `override`\n+error: expected identifier, found reserved keyword `override`\n   --> $DIR/keyword-override.rs:2:9\n    |\n LL |     let override = ();\n-   |         ^^^^^^^^ expected pattern\n+   |         ^^^^^^^^ expected identifier, found reserved keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#override = ();\n+   |         ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2b2bb14118d7d78d73d80aa5ca2d91fa87c3e8f0", "filename": "src/test/ui/parser/keyword-pub-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-pub-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-pub-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-pub-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py pub'\n \n fn main() {\n-    let pub = \"foo\"; //~ error: expected pattern, found keyword `pub`\n+    let pub = \"foo\"; //~ error: expected identifier, found keyword `pub`\n }"}, {"sha": "f81078b12bd3c5dc5c6e6cff2d45661d1872b517", "filename": "src/test/ui/parser/keyword-pub-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-pub-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-pub-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-pub-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `pub`\n+error: expected identifier, found keyword `pub`\n   --> $DIR/keyword-pub-as-identifier.rs:4:9\n    |\n LL |     let pub = \"foo\";\n-   |         ^^^ expected pattern\n+   |         ^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#pub = \"foo\";\n+   |         ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e1a2db5e4d82d22cfc547bbf73bfc26a6e7174f5", "filename": "src/test/ui/parser/keyword-return-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-return-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-return-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-return-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py return'\n \n fn main() {\n-    let return = \"foo\"; //~ error: expected pattern, found keyword `return`\n+    let return = \"foo\"; //~ error: expected identifier, found keyword `return`\n }"}, {"sha": "8cc4d12fbbb9af65304a42387fec4b739e207020", "filename": "src/test/ui/parser/keyword-return-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-return-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-return-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-return-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `return`\n+error: expected identifier, found keyword `return`\n   --> $DIR/keyword-return-as-identifier.rs:4:9\n    |\n LL |     let return = \"foo\";\n-   |         ^^^^^^ expected pattern\n+   |         ^^^^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#return = \"foo\";\n+   |         ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "423b9854b8aa1346d41b01ff2cee50b59f004088", "filename": "src/test/ui/parser/keyword-static-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-static-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-static-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-static-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py static'\n \n fn main() {\n-    let static = \"foo\"; //~ error: expected pattern, found keyword `static`\n+    let static = \"foo\"; //~ error: expected identifier, found keyword `static`\n }"}, {"sha": "7d22bc97d66aeb23c83a5169fd493de1eba4d6b0", "filename": "src/test/ui/parser/keyword-static-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-static-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-static-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-static-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `static`\n+error: expected identifier, found keyword `static`\n   --> $DIR/keyword-static-as-identifier.rs:4:9\n    |\n LL |     let static = \"foo\";\n-   |         ^^^^^^ expected pattern\n+   |         ^^^^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#static = \"foo\";\n+   |         ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "18cfe11592aed29c9387921d79d941361839efe7", "filename": "src/test/ui/parser/keyword-struct-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-struct-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-struct-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-struct-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py struct'\n \n fn main() {\n-    let struct = \"foo\"; //~ error: expected pattern, found keyword `struct`\n+    let struct = \"foo\"; //~ error: expected identifier, found keyword `struct`\n }"}, {"sha": "b109fa6247dcdf0853e872276b0ba47d77113706", "filename": "src/test/ui/parser/keyword-struct-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-struct-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-struct-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-struct-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `struct`\n+error: expected identifier, found keyword `struct`\n   --> $DIR/keyword-struct-as-identifier.rs:4:9\n    |\n LL |     let struct = \"foo\";\n-   |         ^^^^^^ expected pattern\n+   |         ^^^^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#struct = \"foo\";\n+   |         ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "67f81167dbdd33153e8ce77179f068d14822f63f", "filename": "src/test/ui/parser/keyword-trait-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-trait-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-trait-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-trait-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py trait'\n \n fn main() {\n-    let trait = \"foo\"; //~ error: expected pattern, found keyword `trait`\n+    let trait = \"foo\"; //~ error: expected identifier, found keyword `trait`\n }"}, {"sha": "ccc675cdb3a7cc80fa32efc4bf9e3b360ed2c8ea", "filename": "src/test/ui/parser/keyword-trait-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-trait-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-trait-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-trait-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `trait`\n+error: expected identifier, found keyword `trait`\n   --> $DIR/keyword-trait-as-identifier.rs:4:9\n    |\n LL |     let trait = \"foo\";\n-   |         ^^^^^ expected pattern\n+   |         ^^^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#trait = \"foo\";\n+   |         ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4fa37bdb057b738461bff235721feb70c014e5fb", "filename": "src/test/ui/parser/keyword-try-as-identifier-edition2018.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-try-as-identifier-edition2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-try-as-identifier-edition2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-try-as-identifier-edition2018.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: --edition 2018\n \n fn main() {\n-    let try = \"foo\"; //~ error: expected pattern, found reserved keyword `try`\n+    let try = \"foo\"; //~ error: expected identifier, found reserved keyword `try`\n }"}, {"sha": "f71b889a30db517a9bf480f053f9c1823f0172f8", "filename": "src/test/ui/parser/keyword-try-as-identifier-edition2018.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-try-as-identifier-edition2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-try-as-identifier-edition2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-try-as-identifier-edition2018.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found reserved keyword `try`\n+error: expected identifier, found reserved keyword `try`\n   --> $DIR/keyword-try-as-identifier-edition2018.rs:4:9\n    |\n LL |     let try = \"foo\";\n-   |         ^^^ expected pattern\n+   |         ^^^ expected identifier, found reserved keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#try = \"foo\";\n+   |         ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "04adddf72c6ff2603a4474830739ef1e4c66de28", "filename": "src/test/ui/parser/keyword-type-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-type-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-type-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-type-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py type'\n \n fn main() {\n-    let type = \"foo\"; //~ error: expected pattern, found keyword `type`\n+    let type = \"foo\"; //~ error: expected identifier, found keyword `type`\n }"}, {"sha": "88099d949a829e56d4d807c09452e67146d71bfe", "filename": "src/test/ui/parser/keyword-type-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-type-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-type-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-type-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `type`\n+error: expected identifier, found keyword `type`\n   --> $DIR/keyword-type-as-identifier.rs:4:9\n    |\n LL |     let type = \"foo\";\n-   |         ^^^^ expected pattern\n+   |         ^^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#type = \"foo\";\n+   |         ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "29dc77d276cbdd9c6fffac02e4792cfdc7c2ac76", "filename": "src/test/ui/parser/keyword-typeof.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-typeof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-typeof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-typeof.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let typeof = (); //~ ERROR expected pattern, found reserved keyword `typeof`\n+    let typeof = (); //~ ERROR expected identifier, found reserved keyword `typeof`\n }"}, {"sha": "4a1b63d5c9357b7e27690fdfd8170feba1713c6d", "filename": "src/test/ui/parser/keyword-typeof.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-typeof.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-typeof.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-typeof.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found reserved keyword `typeof`\n+error: expected identifier, found reserved keyword `typeof`\n   --> $DIR/keyword-typeof.rs:2:9\n    |\n LL |     let typeof = ();\n-   |         ^^^^^^ expected pattern\n+   |         ^^^^^^ expected identifier, found reserved keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#typeof = ();\n+   |         ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0ff6d188c6480a93fd41e9c37279c4cab8e92b91", "filename": "src/test/ui/parser/keyword-unsafe-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-unsafe-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-unsafe-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-unsafe-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py unsafe'\n \n fn main() {\n-    let unsafe = \"foo\"; //~ error: expected pattern, found keyword `unsafe`\n+    let unsafe = \"foo\"; //~ error: expected identifier, found keyword `unsafe`\n }"}, {"sha": "205bb81df405bc5478b77a1e0b343e6cc9f29080", "filename": "src/test/ui/parser/keyword-unsafe-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-unsafe-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-unsafe-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-unsafe-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `unsafe`\n+error: expected identifier, found keyword `unsafe`\n   --> $DIR/keyword-unsafe-as-identifier.rs:4:9\n    |\n LL |     let unsafe = \"foo\";\n-   |         ^^^^^^ expected pattern\n+   |         ^^^^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#unsafe = \"foo\";\n+   |         ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "821bedee088322374aa6a433868e735dd86d02b2", "filename": "src/test/ui/parser/keyword-use-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-use-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-use-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-use-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py use'\n \n fn main() {\n-    let use = \"foo\"; //~ error: expected pattern, found keyword `use`\n+    let use = \"foo\"; //~ error: expected identifier, found keyword `use`\n }"}, {"sha": "85a0492f5735f21f80179d8e81b718ecd58836a5", "filename": "src/test/ui/parser/keyword-use-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-use-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-use-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-use-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `use`\n+error: expected identifier, found keyword `use`\n   --> $DIR/keyword-use-as-identifier.rs:4:9\n    |\n LL |     let use = \"foo\";\n-   |         ^^^ expected pattern\n+   |         ^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#use = \"foo\";\n+   |         ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "56301bd20adfdc5bff4f3320e0058513d6c52cbe", "filename": "src/test/ui/parser/keyword-where-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-where-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-where-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-where-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py where'\n \n fn main() {\n-    let where = \"foo\"; //~ error: expected pattern, found keyword `where`\n+    let where = \"foo\"; //~ error: expected identifier, found keyword `where`\n }"}, {"sha": "b8b85069076365b195468cc8bebbfd7356d80fd6", "filename": "src/test/ui/parser/keyword-where-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-where-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-where-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-where-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `where`\n+error: expected identifier, found keyword `where`\n   --> $DIR/keyword-where-as-identifier.rs:4:9\n    |\n LL |     let where = \"foo\";\n-   |         ^^^^^ expected pattern\n+   |         ^^^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#where = \"foo\";\n+   |         ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "22026d15dcbfbad302d0b39431fdd111eea6ee95", "filename": "src/test/ui/parser/keyword-while-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-while-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-while-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-while-as-identifier.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,5 +1,5 @@\n // This file was auto-generated using 'src/etc/generate-keyword-tests.py while'\n \n fn main() {\n-    let while = \"foo\"; //~ error: expected pattern, found keyword `while`\n+    let while = \"foo\"; //~ error: expected identifier, found keyword `while`\n }"}, {"sha": "bb0c0ac668a41d8cb3a032ebf175c22885e4f343", "filename": "src/test/ui/parser/keyword-while-as-identifier.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-while-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fkeyword-while-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-while-as-identifier.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found keyword `while`\n+error: expected identifier, found keyword `while`\n   --> $DIR/keyword-while-as-identifier.rs:4:9\n    |\n LL |     let while = \"foo\";\n-   |         ^^^^^ expected pattern\n+   |         ^^^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#while = \"foo\";\n+   |         ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "87e127f9d364a195eaeac22ce27960c2244c8a17", "filename": "src/test/ui/parser/mut-patterns.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,7 +1,35 @@\n // Can't put mut in non-ident pattern\n \n+// edition:2018\n+\n+#![feature(box_patterns)]\n+#![allow(warnings)]\n+\n pub fn main() {\n+    let mut mut x = 0;\n+    //~^ ERROR `mut` on a binding may not be repeated\n+    //~| remove the additional `mut`s\n+\n     struct Foo { x: isize }\n     let mut Foo { x: x } = Foo { x: 3 };\n-    //~^ ERROR: expected one of `:`, `;`, `=`, `@`, or `|`, found `{`\n+    //~^ ERROR `mut` must be attached to each individual binding\n+    //~| add `mut` to each binding\n+\n+    let mut Foo { x } = Foo { x: 3 };\n+    //~^ ERROR `mut` must be attached to each individual binding\n+    //~| add `mut` to each binding\n+\n+    struct r#yield(u8, u8);\n+    let mut mut yield(become, await) = r#yield(0, 0);\n+    //~^ ERROR `mut` on a binding may not be repeated\n+    //~| ERROR `mut` must be attached to each individual binding\n+    //~| ERROR expected identifier, found reserved keyword `yield`\n+    //~| ERROR expected identifier, found reserved keyword `become`\n+    //~| ERROR expected identifier, found reserved keyword `await`\n+\n+    struct W<T, U>(T, U);\n+    struct B { f: Box<u8> }\n+    let mut W(mut a, W(b, W(ref c, W(d, B { box f }))))\n+    //~^ ERROR `mut` must be attached to each individual binding\n+        = W(0, W(1, W(2, W(3, B { f: Box::new(4u8) }))));\n }"}, {"sha": "a251e2908f02c5fd4e3ad392f21e07bdf1ca7015", "filename": "src/test/ui/parser/mut-patterns.stderr", "status": "modified", "additions": 64, "deletions": 4, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,68 @@\n-error: expected one of `:`, `;`, `=`, `@`, or `|`, found `{`\n-  --> $DIR/mut-patterns.rs:5:17\n+error: `mut` on a binding may not be repeated\n+  --> $DIR/mut-patterns.rs:9:13\n+   |\n+LL |     let mut mut x = 0;\n+   |             ^^^ help: remove the additional `mut`s\n+\n+error: `mut` must be attached to each individual binding\n+  --> $DIR/mut-patterns.rs:14:9\n    |\n LL |     let mut Foo { x: x } = Foo { x: 3 };\n-   |                 ^ expected one of `:`, `;`, `=`, `@`, or `|` here\n+   |         ^^^^^^^^^^^^^^^^ help: add `mut` to each binding: `Foo { x: mut x }`\n+\n+error: `mut` must be attached to each individual binding\n+  --> $DIR/mut-patterns.rs:18:9\n+   |\n+LL |     let mut Foo { x } = Foo { x: 3 };\n+   |         ^^^^^^^^^^^^^ help: add `mut` to each binding: `Foo { mut x }`\n+\n+error: `mut` on a binding may not be repeated\n+  --> $DIR/mut-patterns.rs:23:13\n+   |\n+LL |     let mut mut yield(become, await) = r#yield(0, 0);\n+   |             ^^^ help: remove the additional `mut`s\n+\n+error: expected identifier, found reserved keyword `yield`\n+  --> $DIR/mut-patterns.rs:23:17\n+   |\n+LL |     let mut mut yield(become, await) = r#yield(0, 0);\n+   |                 ^^^^^ expected identifier, found reserved keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let mut mut r#yield(become, await) = r#yield(0, 0);\n+   |                 ^^^^^^^\n+\n+error: expected identifier, found reserved keyword `become`\n+  --> $DIR/mut-patterns.rs:23:23\n+   |\n+LL |     let mut mut yield(become, await) = r#yield(0, 0);\n+   |                       ^^^^^^ expected identifier, found reserved keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let mut mut yield(r#become, await) = r#yield(0, 0);\n+   |                       ^^^^^^^^\n+\n+error: expected identifier, found reserved keyword `await`\n+  --> $DIR/mut-patterns.rs:23:31\n+   |\n+LL |     let mut mut yield(become, await) = r#yield(0, 0);\n+   |                               ^^^^^ expected identifier, found reserved keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let mut mut yield(become, r#await) = r#yield(0, 0);\n+   |                               ^^^^^^^\n+\n+error: `mut` must be attached to each individual binding\n+  --> $DIR/mut-patterns.rs:23:9\n+   |\n+LL |     let mut mut yield(become, await) = r#yield(0, 0);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add `mut` to each binding: `r#yield(mut r#become, mut r#await)`\n+\n+error: `mut` must be attached to each individual binding\n+  --> $DIR/mut-patterns.rs:32:9\n+   |\n+LL |     let mut W(mut a, W(b, W(ref c, W(d, B { box f }))))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add `mut` to each binding: `W(mut a, W(mut b, W(ref c, W(mut d, B { box mut f }))))`\n \n-error: aborting due to previous error\n+error: aborting due to 9 previous errors\n "}, {"sha": "56645255ee5f64d20aaa1792f2d9aac3e9865f90", "filename": "src/test/ui/reserved/reserved-become.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Freserved%2Freserved-become.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Freserved%2Freserved-become.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freserved%2Freserved-become.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let become = 0;\n-    //~^ ERROR expected pattern, found reserved keyword `become`\n+    //~^ ERROR expected identifier, found reserved keyword `become`\n }"}, {"sha": "3ce9fb33c289e2af924772b371c5620716c24a6c", "filename": "src/test/ui/reserved/reserved-become.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Freserved%2Freserved-become.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Freserved%2Freserved-become.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freserved%2Freserved-become.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -1,8 +1,12 @@\n-error: expected pattern, found reserved keyword `become`\n+error: expected identifier, found reserved keyword `become`\n   --> $DIR/reserved-become.rs:2:9\n    |\n LL |     let become = 0;\n-   |         ^^^^^^ expected pattern\n+   |         ^^^^^^ expected identifier, found reserved keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     let r#become = 0;\n+   |         ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d479905932be04a50bb58189a2d0caa9af639e01", "filename": "src/test/ui/self/self_type_keyword.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.rs?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -14,7 +14,8 @@ pub fn main() {\n         ref Self => (),\n         //~^ ERROR expected identifier, found keyword `Self`\n         mut Self => (),\n-        //~^ ERROR expected identifier, found keyword `Self`\n+        //~^ ERROR `mut` must be attached to each individual binding\n+        //~| ERROR cannot find unit struct/variant or constant `Self`\n         ref mut Self => (),\n         //~^ ERROR expected identifier, found keyword `Self`\n         Self!() => (),"}, {"sha": "fdae06ccdd9f561f1fb4ac93a18ee4f97dbaf589", "filename": "src/test/ui/self/self_type_keyword.stderr", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr?ref=f908aa9e8000dd7fd2c3de54fe1d914fddf4fe92", "patch": "@@ -10,38 +10,38 @@ error: expected identifier, found keyword `Self`\n LL |         ref Self => (),\n    |             ^^^^ expected identifier, found keyword\n \n-error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:16:13\n+error: `mut` must be attached to each individual binding\n+  --> $DIR/self_type_keyword.rs:16:9\n    |\n LL |         mut Self => (),\n-   |             ^^^^ expected identifier, found keyword\n+   |         ^^^^^^^^ help: add `mut` to each binding: `Self`\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:18:17\n+  --> $DIR/self_type_keyword.rs:19:17\n    |\n LL |         ref mut Self => (),\n    |                 ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:22:15\n+  --> $DIR/self_type_keyword.rs:23:15\n    |\n LL |         Foo { Self } => (),\n    |               ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:28:26\n+  --> $DIR/self_type_keyword.rs:29:26\n    |\n LL |     extern crate core as Self;\n    |                          ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:33:32\n+  --> $DIR/self_type_keyword.rs:34:32\n    |\n LL |     use std::option::Option as Self;\n    |                                ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:38:11\n+  --> $DIR/self_type_keyword.rs:39:11\n    |\n LL |     trait Self {}\n    |           ^^^^ expected identifier, found keyword\n@@ -53,11 +53,21 @@ LL | struct Bar<'Self>;\n    |            ^^^^^\n \n error: cannot find macro `Self!` in this scope\n-  --> $DIR/self_type_keyword.rs:20:9\n+  --> $DIR/self_type_keyword.rs:21:9\n    |\n LL |         Self!() => (),\n    |         ^^^^\n \n+error[E0531]: cannot find unit struct/variant or constant `Self` in this scope\n+  --> $DIR/self_type_keyword.rs:16:13\n+   |\n+LL |         mut Self => (),\n+   |             ^^^^ not found in this scope\n+help: possible candidate is found in another module, you can import it into scope\n+   |\n+LL | use foo::Self;\n+   |\n+\n error[E0392]: parameter `'Self` is never used\n   --> $DIR/self_type_keyword.rs:6:12\n    |\n@@ -66,6 +76,6 @@ LL | struct Bar<'Self>;\n    |\n    = help: consider removing `'Self` or using a marker such as `std::marker::PhantomData`\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 12 previous errors\n \n For more information about this error, try `rustc --explain E0392`."}]}