{"sha": "893b919e64b59c04dbd7c88e74ba138ff8e22a64", "node_id": "C_kwDOAAsO6NoAKDg5M2I5MTllNjRiNTljMDRkYmQ3Yzg4ZTc0YmExMzhmZjhlMjJhNjQ", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2022-06-23T20:28:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2022-06-23T20:28:46Z"}, "message": "remove VerifyBound::IfEq variant", "tree": {"sha": "41d082004e43ccc0793c39fb154cbebb20695688", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41d082004e43ccc0793c39fb154cbebb20695688"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/893b919e64b59c04dbd7c88e74ba138ff8e22a64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/893b919e64b59c04dbd7c88e74ba138ff8e22a64", "html_url": "https://github.com/rust-lang/rust/commit/893b919e64b59c04dbd7c88e74ba138ff8e22a64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/893b919e64b59c04dbd7c88e74ba138ff8e22a64/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b39ba21fcbf262b94bc8b7c20310fc7fb923d53c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b39ba21fcbf262b94bc8b7c20310fc7fb923d53c", "html_url": "https://github.com/rust-lang/rust/commit/b39ba21fcbf262b94bc8b7c20310fc7fb923d53c"}], "stats": {"total": 90, "additions": 31, "deletions": 59}, "files": [{"sha": "5604516606015b4c675d56aca2a25ab0f23c1009", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/893b919e64b59c04dbd7c88e74ba138ff8e22a64/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893b919e64b59c04dbd7c88e74ba138ff8e22a64/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=893b919e64b59c04dbd7c88e74ba138ff8e22a64", "patch": "@@ -19,7 +19,6 @@ use rustc_middle::mir::{\n };\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::traits::ObligationCauseCode;\n-use rustc_middle::ty::Region;\n use rustc_middle::ty::{self, subst::SubstsRef, RegionVid, Ty, TyCtxt, TypeFoldable};\n use rustc_span::Span;\n \n@@ -1192,10 +1191,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         debug!(\"eval_verify_bound(lower_bound={:?}, verify_bound={:?})\", lower_bound, verify_bound);\n \n         match verify_bound {\n-            VerifyBound::IfEq(test_ty, verify_bound1) => {\n-                self.eval_if_eq(infcx, generic_ty, lower_bound, *test_ty, *verify_bound1)\n-            }\n-\n             VerifyBound::IfEqBound(verify_if_eq_b) => {\n                 self.eval_if_eq_bound(infcx, param_env, generic_ty, lower_bound, *verify_if_eq_b)\n             }\n@@ -1234,24 +1229,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         }\n     }\n \n-    fn eval_if_eq(\n-        &self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n-        generic_ty: Ty<'tcx>,\n-        lower_bound: RegionVid,\n-        test_ty: Ty<'tcx>,\n-        verify_bound: Region<'tcx>,\n-    ) -> bool {\n-        let generic_ty_normalized = self.normalize_to_scc_representatives(infcx.tcx, generic_ty);\n-        let test_ty_normalized = self.normalize_to_scc_representatives(infcx.tcx, test_ty);\n-        if generic_ty_normalized == test_ty_normalized {\n-            let verify_bound_vid = self.to_region_vid(verify_bound);\n-            self.eval_outlives(verify_bound_vid, lower_bound)\n-        } else {\n-            false\n-        }\n-    }\n-\n     fn eval_if_eq_bound(\n         &self,\n         infcx: &InferCtxt<'_, 'tcx>,"}, {"sha": "51943f9f38c6d376f065dcf6f1a23942da0fd9c9", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/893b919e64b59c04dbd7c88e74ba138ff8e22a64/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893b919e64b59c04dbd7c88e74ba138ff8e22a64/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=893b919e64b59c04dbd7c88e74ba138ff8e22a64", "patch": "@@ -822,11 +822,6 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         min: ty::Region<'tcx>,\n     ) -> bool {\n         match bound {\n-            VerifyBound::IfEq(k, r) => {\n-                (var_values.normalize(self.region_rels.tcx, *k) == generic_ty)\n-                    && self.bound_is_met(&VerifyBound::OutlivedBy(*r), var_values, generic_ty, min)\n-            }\n-\n             VerifyBound::IfEqBound(verify_if_eq_b) => {\n                 match test_type_match::extract_verify_if_eq_bound(\n                     self.tcx(),"}, {"sha": "ab76f41414ac6b21e4a467c65f011d077ac31cab", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/893b919e64b59c04dbd7c88e74ba138ff8e22a64/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893b919e64b59c04dbd7c88e74ba138ff8e22a64/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=893b919e64b59c04dbd7c88e74ba138ff8e22a64", "patch": "@@ -190,42 +190,44 @@ pub enum GenericKind<'tcx> {\n /// This is described with an `AnyRegion('a, 'b)` node.\n #[derive(Debug, Clone)]\n pub enum VerifyBound<'tcx> {\n-    /// Given a kind K and a bound B, expands to a function like the\n-    /// following, where `G` is the generic for which this verify\n-    /// bound was created:\n+    /// This is a \"conditional bound\" that checks the result of inference\n+    /// and supplies a bound if it ended up being relevant. It's used in situations\n+    /// like this:\n     ///\n-    /// ```ignore (pseudo-rust)\n-    /// fn(min) -> bool {\n-    ///     if G == K {\n-    ///         B(min)\n-    ///     } else {\n-    ///         false\n-    ///     }\n-    /// }\n+    /// ```rust\n+    /// fn foo<'a, 'b, T: SomeTrait<'a>>\n+    /// where\n+    ///    <T as SomeTrait<'a>>::Item: 'b\n     /// ```\n     ///\n-    /// In other words, if the generic `G` that we are checking is\n-    /// equal to `K`, then check the associated verify bound\n-    /// (otherwise, false).\n-    ///\n-    /// This is used when we have something in the environment that\n-    /// may or may not be relevant, depending on the region inference\n-    /// results. For example, we may have `where <T as\n-    /// Trait<'a>>::Item: 'b` in our where-clauses. If we are\n-    /// generating the verify-bound for `<T as Trait<'0>>::Item`, then\n-    /// this where-clause is only relevant if `'0` winds up inferred\n-    /// to `'a`.\n+    /// If we have an obligation like `<T as SomeTrait<'?x>>::Item: 'c`, then\n+    /// we don't know yet whether it suffices to show that `'b: 'c`. If `'?x` winds\n+    /// up being equal to `'a`, then the where-clauses on function applies, and\n+    /// in that case we can show `'b: 'c`. But if `'?x` winds up being something\n+    /// else, the bound isn't relevant.\n     ///\n-    /// So we would compile to a verify-bound like\n+    /// More abstractly, this function takes a `Binder<VerifyIfEq>`. The binder\n+    /// represents an existential binder -- i.e., if you have something like\n     ///\n-    /// ```ignore (illustrative)\n-    /// IfEq(<T as Trait<'a>>::Item, AnyRegion('a))\n+    /// ```rust\n+    /// where for<'a> <T as SomeTrait<'a>::Item: 'a\n     /// ```\n     ///\n-    /// meaning, if the subject G is equal to `<T as Trait<'a>>::Item`\n-    /// (after inference), and `'a: min`, then `G: min`.\n-    IfEq(Ty<'tcx>, Region<'tcx>),\n-\n+    /// then the `for<'a>` corresponds to the binder. The idea is that we have\n+    /// to find some instantiation of `'a` that can make `<T as SomeTrait<'a>>::Item`\n+    /// equal to the final value of `G`, the generic we are checking.\n+    ///\n+    /// ```ignore (pseudo-rust)\n+    /// fn(min) -> bool {\n+    ///     exists<'a> {\n+    ///         if G == K {\n+    ///             B(min)\n+    ///         } else {\n+    ///             false\n+    ///         }\n+    ///     }\n+    /// }\n+    /// ```\n     IfEqBound(ty::Binder<'tcx, VerifyIfEq<'tcx>>),\n \n     /// Given a region `R`, expands to the function:\n@@ -805,7 +807,6 @@ impl<'tcx> GenericKind<'tcx> {\n impl<'tcx> VerifyBound<'tcx> {\n     pub fn must_hold(&self) -> bool {\n         match self {\n-            VerifyBound::IfEq(..) => false,\n             VerifyBound::IfEqBound(..) => false,\n             VerifyBound::OutlivedBy(re) => re.is_static(),\n             VerifyBound::IsEmpty => false,\n@@ -816,7 +817,6 @@ impl<'tcx> VerifyBound<'tcx> {\n \n     pub fn cannot_hold(&self) -> bool {\n         match self {\n-            VerifyBound::IfEq(_, _) => false,\n             VerifyBound::IfEqBound(..) => false,\n             VerifyBound::IsEmpty => false,\n             VerifyBound::OutlivedBy(_) => false,"}]}