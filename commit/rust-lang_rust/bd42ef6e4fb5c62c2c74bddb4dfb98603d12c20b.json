{"sha": "bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNDJlZjZlNGZiNWM2MmMyYzc0YmRkYjRkZmI5ODYwM2QxMmMyMGI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-27T17:46:25Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-04-28T09:24:53Z"}, "message": "Introduce ArenaStorage.", "tree": {"sha": "11405e9029c4721942c04283c0a2ccd9ce64518f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11405e9029c4721942c04283c0a2ccd9ce64518f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b", "html_url": "https://github.com/rust-lang/rust/commit/bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8ef41e83f34e7de8d0f7abf5034f2e19e98edba", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8ef41e83f34e7de8d0f7abf5034f2e19e98edba", "html_url": "https://github.com/rust-lang/rust/commit/e8ef41e83f34e7de8d0f7abf5034f2e19e98edba"}], "stats": {"total": 102, "additions": 97, "deletions": 5}, "files": [{"sha": "e92d298105c469fc8475f569ea0c0ecc14ad353c", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b", "patch": "@@ -4125,6 +4125,7 @@ dependencies = [\n name = \"rustc_query_system\"\n version = \"0.0.0\"\n dependencies = [\n+ \"arena\",\n  \"log\",\n  \"parking_lot 0.10.2\",\n  \"rustc-rayon-core\","}, {"sha": "f2a131a5ab29898de48481082790df510026e5ab", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b", "patch": "@@ -156,7 +156,8 @@ rustc_queries! {\n         /// Set of all the `DefId`s in this crate that have MIR associated with\n         /// them. This includes all the body owners, but also things like struct\n         /// constructors.\n-        query mir_keys(_: CrateNum) -> &'tcx FxHashSet<LocalDefId> {\n+        query mir_keys(_: CrateNum) -> FxHashSet<LocalDefId> {\n+            storage(ArenaCacheSelector<'tcx>)\n             desc { \"getting a list of all mir_keys\" }\n         }\n "}, {"sha": "e4237df592394f9dd5370250dcaa9f63527a967d", "filename": "src/librustc_middle/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs?ref=bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b", "patch": "@@ -213,7 +213,7 @@ macro_rules! query_storage {\n         <<$K as Key>::CacheSelector as CacheSelector<$K, $V>>::Cache\n     };\n     ([storage($ty:ty) $($rest:tt)*][$K:ty, $V:ty]) => {\n-        $ty\n+        <$ty as CacheSelector<$K, $V>>::Cache\n     };\n     ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*][$($args:tt)*]) => {\n         query_storage!([$($($modifiers)*)*][$($args)*])"}, {"sha": "5cf74bc7b0709f9c062d44e50cef20731ee93c1d", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b", "patch": "@@ -60,7 +60,7 @@ fn is_mir_available(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n \n /// Finds the full set of `DefId`s within the current crate that have\n /// MIR associated with them.\n-fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> &FxHashSet<LocalDefId> {\n+fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> FxHashSet<LocalDefId> {\n     assert_eq!(krate, LOCAL_CRATE);\n \n     let mut set = FxHashSet::default();\n@@ -97,7 +97,7 @@ fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> &FxHashSet<LocalDefId> {\n         .krate()\n         .visit_all_item_likes(&mut GatherCtors { tcx, set: &mut set }.as_deep_visitor());\n \n-    tcx.arena.alloc(set)\n+    set\n }\n \n /// Where a specific `mir::Body` comes from."}, {"sha": "392e19e1f44718a2d53f7eeb4cca0f48342732fe", "filename": "src/librustc_query_system/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b/src%2Flibrustc_query_system%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b/src%2Flibrustc_query_system%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2FCargo.toml?ref=bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b", "patch": "@@ -10,6 +10,7 @@ path = \"lib.rs\"\n doctest = false\n \n [dependencies]\n+arena = { path = \"../libarena\" }\n log = { version = \"0.4\", features = [\"release_max_level_info\", \"std\"] }\n rustc-rayon-core = \"0.3.0\"\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "d921bcdcdd30102443b7395c40accfb15de1bfec", "filename": "src/librustc_query_system/query/caches.rs", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b/src%2Flibrustc_query_system%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b/src%2Flibrustc_query_system%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fcaches.rs?ref=bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b", "patch": "@@ -2,8 +2,10 @@ use crate::dep_graph::DepNodeIndex;\n use crate::query::plumbing::{QueryLookup, QueryState};\n use crate::query::QueryContext;\n \n+use arena::TypedArena;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sharded::Sharded;\n+use rustc_data_structures::sync::WorkerLocal;\n use std::default::Default;\n use std::hash::Hash;\n use std::marker::PhantomData;\n@@ -133,3 +135,88 @@ impl<K: Eq + Hash, V: Clone> QueryCache for DefaultCache<K, V> {\n         f(Box::new(results))\n     }\n }\n+\n+pub struct ArenaCacheSelector<'tcx>(PhantomData<&'tcx ()>);\n+\n+impl<'tcx, K: Eq + Hash, V: 'tcx> CacheSelector<K, V> for ArenaCacheSelector<'tcx> {\n+    type Cache = ArenaCache<'tcx, K, V>;\n+}\n+\n+pub struct ArenaCache<'tcx, K, V> {\n+    arena: WorkerLocal<&'tcx TypedArena<(V, DepNodeIndex)>>,\n+    phantom: PhantomData<K>,\n+}\n+\n+impl<'tcx, K, V> Default for ArenaCache<'tcx, K, V> {\n+    fn default() -> Self {\n+        ArenaCache {\n+            arena: WorkerLocal::new(|_| &*Box::leak(Box::new(TypedArena::default()))),\n+            phantom: PhantomData,\n+        }\n+    }\n+}\n+\n+impl<'tcx, K: Eq + Hash, V: 'tcx> QueryStorage for ArenaCache<'tcx, K, V> {\n+    type Value = V;\n+    type Stored = &'tcx V;\n+\n+    fn store_nocache(&self, value: Self::Value) -> Self::Stored {\n+        let value = self.arena.alloc((value, DepNodeIndex::INVALID));\n+        &value.0\n+    }\n+}\n+\n+impl<'tcx, K: Eq + Hash, V: 'tcx> QueryCache for ArenaCache<'tcx, K, V> {\n+    type Key = K;\n+    type Sharded = FxHashMap<K, &'tcx (V, DepNodeIndex)>;\n+\n+    #[inline(always)]\n+    fn lookup<CTX: QueryContext, R, OnHit, OnMiss>(\n+        &self,\n+        state: &QueryState<CTX, Self>,\n+        key: K,\n+        on_hit: OnHit,\n+        on_miss: OnMiss,\n+    ) -> R\n+    where\n+        OnHit: FnOnce(&&'tcx V, DepNodeIndex) -> R,\n+        OnMiss: FnOnce(K, QueryLookup<'_, CTX, K, Self::Sharded>) -> R,\n+    {\n+        let mut lookup = state.get_lookup(&key);\n+        let lock = &mut *lookup.lock;\n+\n+        let result = lock.cache.raw_entry().from_key_hashed_nocheck(lookup.key_hash, &key);\n+\n+        if let Some((_, value)) = result {\n+            on_hit(&&value.0, value.1)\n+        } else {\n+            on_miss(key, lookup)\n+        }\n+    }\n+\n+    #[inline]\n+    fn complete<CTX: QueryContext>(\n+        &self,\n+        _: CTX,\n+        lock_sharded_storage: &mut Self::Sharded,\n+        key: K,\n+        value: V,\n+        index: DepNodeIndex,\n+    ) -> Self::Stored {\n+        let value = self.arena.alloc((value, index));\n+        lock_sharded_storage.insert(key, value);\n+        &value.0\n+    }\n+\n+    fn iter<R, L>(\n+        &self,\n+        shards: &Sharded<L>,\n+        get_shard: impl Fn(&mut L) -> &mut Self::Sharded,\n+        f: impl for<'a> FnOnce(Box<dyn Iterator<Item = (&'a K, &'a V, DepNodeIndex)> + 'a>) -> R,\n+    ) -> R {\n+        let mut shards = shards.lock_shards();\n+        let mut shards: Vec<_> = shards.iter_mut().map(|shard| get_shard(shard)).collect();\n+        let results = shards.iter_mut().flat_map(|shard| shard.iter()).map(|(k, v)| (k, &v.0, v.1));\n+        f(Box::new(results))\n+    }\n+}"}, {"sha": "49097725bc9b9f0bc6a2bef775cd8e9462a9f2f6", "filename": "src/librustc_query_system/query/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b/src%2Flibrustc_query_system%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b/src%2Flibrustc_query_system%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fmod.rs?ref=bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b", "patch": "@@ -7,7 +7,9 @@ pub use self::job::deadlock;\n pub use self::job::{QueryInfo, QueryJob, QueryJobId, QueryJobInfo};\n \n mod caches;\n-pub use self::caches::{CacheSelector, DefaultCacheSelector, QueryCache, QueryStorage};\n+pub use self::caches::{\n+    ArenaCacheSelector, CacheSelector, DefaultCacheSelector, QueryCache, QueryStorage,\n+};\n \n mod config;\n pub use self::config::{QueryAccessors, QueryConfig, QueryDescription};"}]}