{"sha": "6ca6c1a6cc2b097c93eee30f0ba5371423e9966f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYTZjMWE2Y2MyYjA5N2M5M2VlZTMwZjBiYTUzNzE0MjNlOTk2NmY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-12-19T04:39:33Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T11:25:10Z"}, "message": "rustc_mir: adjust the type_length_limit diagnostic to be more useful.", "tree": {"sha": "2013f15a153a0dced8efcd8746dbaa809581db78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2013f15a153a0dced8efcd8746dbaa809581db78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ca6c1a6cc2b097c93eee30f0ba5371423e9966f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ca6c1a6cc2b097c93eee30f0ba5371423e9966f", "html_url": "https://github.com/rust-lang/rust/commit/6ca6c1a6cc2b097c93eee30f0ba5371423e9966f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ca6c1a6cc2b097c93eee30f0ba5371423e9966f/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e1cef700753ef4802c244f7e48d59de5d4324dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e1cef700753ef4802c244f7e48d59de5d4324dd", "html_url": "https://github.com/rust-lang/rust/commit/3e1cef700753ef4802c244f7e48d59de5d4324dd"}], "stats": {"total": 70, "additions": 45, "deletions": 25}, "files": [{"sha": "288894f235b718f060537daa8f2bf8dcd7f8b7f6", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6ca6c1a6cc2b097c93eee30f0ba5371423e9966f/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca6c1a6cc2b097c93eee30f0ba5371423e9966f/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=6ca6c1a6cc2b097c93eee30f0ba5371423e9966f", "patch": "@@ -3,7 +3,7 @@ use crate::hir::map::DefPathData;\n use crate::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use crate::ty::{self, DefIdTree, Ty, TyCtxt};\n use crate::ty::print::PrintCx;\n-use crate::ty::subst::{Subst, Substs};\n+use crate::ty::subst::{Subst, SubstsRef};\n use crate::middle::cstore::{ExternCrate, ExternCrateSource};\n use syntax::ast;\n use syntax::symbol::{keywords, Symbol};\n@@ -79,7 +79,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn item_path_str_with_substs_and_ns(\n         self,\n         def_id: DefId,\n-        substs: Option<&Substs<'tcx>>,\n+        substs: Option<SubstsRef<'tcx>>,\n         ns: Namespace,\n     ) -> String {\n         debug!(\"item_path_str: def_id={:?}, substs={:?}, ns={:?}\", def_id, substs, ns);\n@@ -116,7 +116,7 @@ impl<P: ItemPathPrinter> PrintCx<'a, 'gcx, 'tcx, P> {\n     pub fn default_print_item_path(\n         &mut self,\n         def_id: DefId,\n-        substs: Option<&Substs<'tcx>>,\n+        substs: Option<SubstsRef<'tcx>>,\n         ns: Namespace,\n     ) -> P::Path {\n         debug!(\"default_print_item_path: def_id={:?}, substs={:?}, ns={:?}\", def_id, substs, ns);\n@@ -169,7 +169,7 @@ impl<P: ItemPathPrinter> PrintCx<'a, 'gcx, 'tcx, P> {\n     fn default_print_impl_path(\n         &mut self,\n         impl_def_id: DefId,\n-        substs: Option<&Substs<'tcx>>,\n+        substs: Option<SubstsRef<'tcx>>,\n         ns: Namespace,\n     ) -> P::Path {\n         debug!(\"default_print_impl_path: impl_def_id={:?}\", impl_def_id);\n@@ -314,15 +314,15 @@ pub trait ItemPathPrinter: Sized {\n     fn print_item_path(\n         self: &mut PrintCx<'_, '_, 'tcx, Self>,\n         def_id: DefId,\n-        substs: Option<&Substs<'tcx>>,\n+        substs: Option<SubstsRef<'tcx>>,\n         ns: Namespace,\n     ) -> Self::Path {\n         self.default_print_item_path(def_id, substs, ns)\n     }\n     fn print_impl_path(\n         self: &mut PrintCx<'_, '_, 'tcx, Self>,\n         impl_def_id: DefId,\n-        substs: Option<&Substs<'tcx>>,\n+        substs: Option<SubstsRef<'tcx>>,\n         ns: Namespace,\n     ) -> Self::Path {\n         self.default_print_impl_path(impl_def_id, substs, ns)\n@@ -506,7 +506,7 @@ impl ItemPathPrinter for LocalPathPrinter {\n     fn print_item_path(\n         self: &mut PrintCx<'_, '_, 'tcx, Self>,\n         def_id: DefId,\n-        substs: Option<&Substs<'tcx>>,\n+        substs: Option<SubstsRef<'tcx>>,\n         ns: Namespace,\n     ) -> Self::Path {\n         self.try_print_visible_item_path(def_id, ns)\n@@ -515,7 +515,7 @@ impl ItemPathPrinter for LocalPathPrinter {\n     fn print_impl_path(\n         self: &mut PrintCx<'_, '_, 'tcx, Self>,\n         impl_def_id: DefId,\n-        substs: Option<&Substs<'tcx>>,\n+        substs: Option<SubstsRef<'tcx>>,\n         ns: Namespace,\n     ) -> Self::Path {\n         // Always use types for non-local impls, where types are always"}, {"sha": "307cee5d97217c1ae55e730bc5421574ad94a9ce", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6ca6c1a6cc2b097c93eee30f0ba5371423e9966f/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca6c1a6cc2b097c93eee30f0ba5371423e9966f/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=6ca6c1a6cc2b097c93eee30f0ba5371423e9966f", "patch": "@@ -198,6 +198,8 @@ use crate::monomorphize::item::{MonoItemExt, DefPathBasedNames, InstantiationMod\n use rustc_data_structures::bit_set::GrowableBitSet;\n use rustc_data_structures::sync::{MTRef, MTLock, ParallelIterator, par_iter};\n \n+use std::iter;\n+\n #[derive(PartialEq, Eq, Hash, Clone, Copy, Debug)]\n pub enum MonoItemCollectionMode {\n     Eager,\n@@ -487,21 +489,33 @@ fn check_type_length_limit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // We include the const length in the type length, as it's better\n     // to be overly conservative.\n     if type_length + const_length > type_length_limit {\n-        // The instance name is already known to be too long for rustc. Use\n-        // `{:.64}` to avoid blasting the user's terminal with thousands of\n-        // lines of type-name.\n-        let instance_name = instance.to_string();\n-        let msg = format!(\"reached the type-length limit while instantiating `{:.64}...`\",\n-                          instance_name);\n-        let mut diag = if let Some(hir_id) = tcx.hir().as_local_hir_id(instance.def_id()) {\n-            tcx.sess.struct_span_fatal(tcx.hir().span_by_hir_id(hir_id), &msg)\n-        } else {\n-            tcx.sess.struct_fatal(&msg)\n+        // The instance name is already known to be too long for rustc.\n+        // Show only the first and last 32 characters to avoid blasting\n+        // the user's terminal with thousands of lines of type-name.\n+        let shrink = |s: String, before: usize, after: usize| {\n+            // An iterator of all byte positions including the end of the string.\n+            let positions = || s.char_indices().map(|(i, _)| i).chain(iter::once(s.len()));\n+\n+            let shrunk = format!(\n+                \"{before}...{after}\",\n+                before = &s[..positions().nth(before).unwrap_or(s.len())],\n+                after = &s[positions().rev().nth(after).unwrap_or(0)..],\n+            );\n+\n+            // Only use the shrunk version if it's really shorter.\n+            // This also avoids the case where before and after slices overlap.\n+            if shrunk.len() < s.len() {\n+                shrunk\n+            } else {\n+                s\n+            }\n         };\n-\n+        let msg = format!(\"reached the type-length limit while instantiating `{}`\",\n+                          shrink(instance.to_string(), 32, 32));\n+        let mut diag = tcx.sess.struct_span_fatal(tcx.def_span(instance.def_id()), &msg);\n         diag.note(&format!(\n             \"consider adding a `#![type_length_limit=\\\"{}\\\"]` attribute to your crate\",\n-            type_length_limit * 2));\n+            type_length));\n         diag.emit();\n         tcx.sess.abort_if_errors();\n     }"}, {"sha": "b60e1c29ec0ee1eac4d1e1f88c9b3b9c0e0407db", "filename": "src/test/ui/issues/issue-22638.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ca6c1a6cc2b097c93eee30f0ba5371423e9966f/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ca6c1a6cc2b097c93eee30f0ba5371423e9966f/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr?ref=6ca6c1a6cc2b097c93eee30f0ba5371423e9966f", "patch": "@@ -8,7 +8,7 @@ LL | |         a.matches(f)\n LL | |     }\n    | |_____^\n    |\n-   = note: consider adding a `#![type_length_limit=\"40000000\"]` attribute to your crate\n+   = note: consider adding a `#![type_length_limit=\"26214380\"]` attribute to your crate\n \n error: aborting due to previous error\n "}, {"sha": "aead415d23f84bf2875b33c1c0a6c0f85aacd289", "filename": "src/test/ui/issues/issue-37311-type-length-limit/issue-37311.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ca6c1a6cc2b097c93eee30f0ba5371423e9966f/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ca6c1a6cc2b097c93eee30f0ba5371423e9966f/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr?ref=6ca6c1a6cc2b097c93eee30f0ba5371423e9966f", "patch": "@@ -1,12 +1,12 @@\n-error: reached the type-length limit while instantiating `<(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(), &()), &(&(), &())), &...`\n+error: reached the type-length limit while instantiating `<(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(...))))))))))))))) as Foo>::recurse`\n   --> $DIR/issue-37311.rs:13:5\n    |\n LL | /     fn recurse(&self) {\n LL | |         (self, self).recurse();\n LL | |     }\n    | |_____^\n    |\n-   = note: consider adding a `#![type_length_limit=\"2097152\"]` attribute to your crate\n+   = note: consider adding a `#![type_length_limit=\"2097149\"]` attribute to your crate\n \n error: aborting due to previous error\n "}, {"sha": "cd15f81a615355dda6dae175ceded2755aa4177d", "filename": "src/test/ui/type_length_limit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ca6c1a6cc2b097c93eee30f0ba5371423e9966f/src%2Ftest%2Fui%2Ftype_length_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca6c1a6cc2b097c93eee30f0ba5371423e9966f/src%2Ftest%2Fui%2Ftype_length_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.rs?ref=6ca6c1a6cc2b097c93eee30f0ba5371423e9966f", "patch": "@@ -1,3 +1,5 @@\n+// ignore-musl\n+// ignore-x86\n // error-pattern: reached the type-length limit while instantiating\n \n // Test that the type length limit can be changed."}, {"sha": "9d07c86356b67ed80ad99176621926cfe57fd0f5", "filename": "src/test/ui/type_length_limit.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ca6c1a6cc2b097c93eee30f0ba5371423e9966f/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ca6c1a6cc2b097c93eee30f0ba5371423e9966f/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.stderr?ref=6ca6c1a6cc2b097c93eee30f0ba5371423e9966f", "patch": "@@ -1,6 +1,10 @@\n-error: reached the type-length limit while instantiating `std::mem::drop::<std::option::Option<((((((G, G, G), (G, G, G), ...`\n+error: reached the type-length limit while instantiating `std::mem::drop::<std::option::Op... G), (G, G, G), (G, G, G))))))>>`\n+  --> $SRC_DIR/libcore/mem.rs:LL:COL\n    |\n-   = note: consider adding a `#![type_length_limit=\"512\"]` attribute to your crate\n+LL | pub fn drop<T>(_x: T) { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: consider adding a `#![type_length_limit=\"1094\"]` attribute to your crate\n \n error: aborting due to previous error\n "}]}