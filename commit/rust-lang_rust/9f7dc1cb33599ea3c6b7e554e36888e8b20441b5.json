{"sha": "9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmN2RjMWNiMzM1OTllYTNjNmI3ZTU1NGUzNjg4OGU4YjIwNDQxYjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-01-08T14:21:19Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-01-08T22:21:06Z"}, "message": "Remove ret_style and instead check whether fn return type is bot\n\ncc #3681", "tree": {"sha": "ddb6626367948f127e52209e6874d31434ce67c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddb6626367948f127e52209e6874d31434ce67c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "html_url": "https://github.com/rust-lang/rust/commit/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80435ad429429ae0e5e9c5c131e4719306bd50fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/80435ad429429ae0e5e9c5c131e4719306bd50fa", "html_url": "https://github.com/rust-lang/rust/commit/80435ad429429ae0e5e9c5c131e4719306bd50fa"}], "stats": {"total": 215, "additions": 70, "deletions": 145}, "files": [{"sha": "089e528c0c2e44492b3292694fc97df44b00399e", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -90,13 +90,6 @@ fn parse_arg_data(data: @~[u8], crate_num: int, pos: uint, tcx: ty::ctxt,\n     parse_arg(st, conv)\n }\n \n-fn parse_ret_ty(st: @pstate, conv: conv_did) -> (ast::ret_style, ty::t) {\n-    match peek(st) {\n-      '!' => { next(st); (ast::noreturn, ty::mk_bot(st.tcx)) }\n-      _ => (ast::return_val, parse_ty(st, conv))\n-    }\n-}\n-\n fn parse_path(st: @pstate) -> @ast::path {\n     let mut idents: ~[ast::ident] = ~[];\n     fn is_last(c: char) -> bool { return c == '(' || c == ':'; }\n@@ -437,14 +430,13 @@ fn parse_ty_fn(st: @pstate, conv: conv_did) -> ty::FnTy {\n         inputs.push({mode: mode, ty: parse_ty(st, conv)});\n     }\n     st.pos += 1u; // eat the ']'\n-    let (ret_style, ret_ty) = parse_ret_ty(st, conv);\n+    let ret_ty = parse_ty(st, conv);\n     return FnTyBase {\n         meta: FnMeta {purity: purity,\n                       proto: proto,\n                       onceness: onceness,\n                       bounds: bounds,\n-                      region: region,\n-                      ret_style: ret_style},\n+                      region: region},\n         sig: FnSig {inputs: inputs,\n                     output: ret_ty}\n     };"}, {"sha": "9612a28a401cc59eb555d9b77d65d0edb281f522", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -388,10 +388,7 @@ fn enc_ty_fn(w: io::Writer, cx: @ctxt, ft: ty::FnTy) {\n         enc_arg(w, cx, *arg);\n     }\n     w.write_char(']');\n-    match ft.meta.ret_style {\n-      noreturn => w.write_char('!'),\n-      _ => enc_ty(w, cx, ft.sig.output)\n-    }\n+    enc_ty(w, cx, ft.sig.output);\n }\n \n fn enc_bounds(w: io::Writer, cx: @ctxt, bs: @~[ty::param_bound]) {"}, {"sha": "635e2d18d6c26ad97622f4d528c4e511f3c85a76", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -580,20 +580,22 @@ fn check_item_type_limits(cx: ty::ctxt, it: @ast::item) {\n         }\n     }\n \n-    let visit = item_stopping_visitor(visit::mk_simple_visitor(@{\n-        visit_expr: fn@(e: @ast::expr) {\n-            match e.node {\n-                ast::expr_binary(ref binop, @ref l, @ref r) => {\n-                    if is_comparison(*binop)\n-                       && !check_limits(cx, *binop, l, r) {\n-                        cx.sess.span_lint(\n-                            type_limits, e.id, it.id, e.span,\n-                            ~\"comparison is useless due to type limits\");\n-                    }\n+    let visit_expr: @fn(@ast::expr) = |e| {\n+        match e.node {\n+            ast::expr_binary(ref binop, @ref l, @ref r) => {\n+                if is_comparison(*binop)\n+                    && !check_limits(cx, *binop, l, r) {\n+                    cx.sess.span_lint(\n+                        type_limits, e.id, it.id, e.span,\n+                        ~\"comparison is useless due to type limits\");\n                 }\n-                _ => ()\n             }\n-        },\n+            _ => ()\n+        }\n+    };\n+\n+    let visit = item_stopping_visitor(visit::mk_simple_visitor(@{\n+        visit_expr: visit_expr,\n         .. *visit::default_simple_visitor()\n     }));\n     visit::visit_item(it, (), visit);"}, {"sha": "317d0fbfd0386f07d10f33834d3eef6ea77cc1a4", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -493,11 +493,10 @@ fn compare_scalar_types(cx: block, lhs: ValueRef, rhs: ValueRef,\n fn compare_scalar_values(cx: block, lhs: ValueRef, rhs: ValueRef,\n                          nt: scalar_type, op: ast::binop) -> ValueRef {\n     let _icx = cx.insn_ctxt(\"compare_scalar_values\");\n-    fn die_(cx: block) -> ! {\n+    fn die(cx: block) -> ! {\n         cx.tcx().sess.bug(~\"compare_scalar_values: must be a\\\n           comparison operator\");\n     }\n-    let die = fn@() -> ! { die_(cx) };\n     match nt {\n       nil_type => {\n         // We don't need to do actual comparisons for nil.\n@@ -506,7 +505,7 @@ fn compare_scalar_values(cx: block, lhs: ValueRef, rhs: ValueRef,\n           ast::eq | ast::le | ast::ge => return C_bool(true),\n           ast::ne | ast::lt | ast::gt => return C_bool(false),\n           // refinements would be nice\n-          _ => die()\n+          _ => die(cx)\n         }\n       }\n       floating_point => {\n@@ -517,7 +516,7 @@ fn compare_scalar_values(cx: block, lhs: ValueRef, rhs: ValueRef,\n           ast::le => lib::llvm::RealOLE,\n           ast::gt => lib::llvm::RealOGT,\n           ast::ge => lib::llvm::RealOGE,\n-          _ => die()\n+          _ => die(cx)\n         };\n         return FCmp(cx, cmp, lhs, rhs);\n       }\n@@ -529,7 +528,7 @@ fn compare_scalar_values(cx: block, lhs: ValueRef, rhs: ValueRef,\n           ast::le => lib::llvm::IntSLE,\n           ast::gt => lib::llvm::IntSGT,\n           ast::ge => lib::llvm::IntSGE,\n-          _ => die()\n+          _ => die(cx)\n         };\n         return ICmp(cx, cmp, lhs, rhs);\n       }\n@@ -541,7 +540,7 @@ fn compare_scalar_values(cx: block, lhs: ValueRef, rhs: ValueRef,\n           ast::le => lib::llvm::IntULE,\n           ast::gt => lib::llvm::IntUGT,\n           ast::ge => lib::llvm::IntUGE,\n-          _ => die()\n+          _ => die(cx)\n         };\n         return ICmp(cx, cmp, lhs, rhs);\n       }"}, {"sha": "85aed8d5387d8c86b88b0b17ca870f3788ca7c68", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -1022,8 +1022,7 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::foreign_item,\n                               proto: ast::ProtoBorrowed,\n                               onceness: ast::Many,\n                               region: ty::re_bound(ty::br_anon(0)),\n-                              bounds: @~[],\n-                              ret_style: ast::return_val},\n+                              bounds: @~[]},\n                 sig: FnSig {inputs: ~[{mode: ast::expl(ast::by_val),\n                                        ty: star_u8}],\n                             output: ty::mk_nil(bcx.tcx())}"}, {"sha": "ccbced417e245e06b64ff274e13951a55404cb70", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -280,8 +280,7 @@ fn normalize_for_monomorphization(tcx: ty::ctxt, ty: ty::t) -> Option<ty::t> {\n                                         proto: fty.meta.proto,\n                                         onceness: ast::Many,\n                                         region: ty::re_static,\n-                                        bounds: @~[],\n-                                        ret_style: ast::return_val},\n+                                        bounds: @~[]},\n                           sig: FnSig {inputs: ~[],\n                                       output: ty::mk_nil(tcx)}}))\n         }\n@@ -292,8 +291,7 @@ fn normalize_for_monomorphization(tcx: ty::ctxt, ty: ty::t) -> Option<ty::t> {\n                                         proto: ast::ProtoBox,\n                                         onceness: ast::Many,\n                                         region: ty::re_static,\n-                                        bounds: @~[],\n-                                        ret_style: ast::return_val},\n+                                        bounds: @~[]},\n                           sig: FnSig {inputs: ~[],\n                                       output: ty::mk_nil(tcx)}}))\n         }"}, {"sha": "39ab5735dee3f023b997519081475d8cdf455250", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -219,11 +219,7 @@ impl reflector {\n               ast::extern_fn => 3u\n             };\n             let protoval = ast_proto_constant(fty.meta.proto);\n-            let retval = match fty.meta.ret_style {\n-              ast::noreturn => 0u,\n-              ast::return_val => 1u\n-            };\n-            // XXX: Must we allocate here?\n+            let retval = if ty::type_is_bot(fty.sig.output) {0u} else {1u};\n             let extra = ~[self.c_uint(pureval),\n                           self.c_uint(protoval),\n                           self.c_uint(vec::len(fty.sig.inputs)),"}, {"sha": "1435f0c66da6292720d584622fa33fd5293d6fd9", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -116,7 +116,7 @@ export ty_opaque_closure_ptr, mk_opaque_closure_ptr;\n export ty_opaque_box, mk_opaque_box;\n export ty_float, mk_float, mk_mach_float, type_is_fp;\n export ty_fn, FnTy, FnTyBase, FnMeta, FnSig, mk_fn;\n-export ty_fn_proto, ty_fn_purity, ty_fn_ret, ty_fn_ret_style, tys_in_fn_ty;\n+export ty_fn_proto, ty_fn_purity, ty_fn_ret, tys_in_fn_ty;\n export ty_int, mk_int, mk_mach_int, mk_char;\n export mk_i8, mk_u8, mk_i16, mk_u16, mk_i32, mk_u32, mk_i64, mk_u64;\n export mk_f32, mk_f64;\n@@ -219,7 +219,6 @@ export terr_regions_not_same, terr_regions_no_overlap;\n export terr_regions_insufficiently_polymorphic;\n export terr_regions_overly_polymorphic;\n export terr_proto_mismatch;\n-export terr_ret_style_mismatch;\n export terr_fn, terr_trait;\n export purity_to_str;\n export onceness_to_str;\n@@ -517,15 +516,13 @@ pure fn type_id(t: t) -> uint { get(t).id }\n  * - `onceness` indicates whether the function can be called one time or many\n  *   times.\n  * - `region` is the region bound on the function's upvars (often &static).\n- * - `bounds` is the parameter bounds on the function's upvars.\n- * - `ret_style` indicates whether the function returns a value or fails. */\n+ * - `bounds` is the parameter bounds on the function's upvars. */\n struct FnMeta {\n     purity: ast::purity,\n     proto: ast::Proto,\n     onceness: ast::Onceness,\n     region: Region,\n-    bounds: @~[param_bound],\n-    ret_style: ret_style\n+    bounds: @~[param_bound]\n }\n \n /**\n@@ -695,7 +692,6 @@ struct expected_found<T> {\n // Data structures used in type unification\n enum type_err {\n     terr_mismatch,\n-    terr_ret_style_mismatch(expected_found<ast::ret_style>),\n     terr_purity_mismatch(expected_found<purity>),\n     terr_onceness_mismatch(expected_found<Onceness>),\n     terr_mutability,\n@@ -2819,11 +2815,10 @@ impl arg : to_bytes::IterBytes {\n \n impl FnMeta : to_bytes::IterBytes {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n-        to_bytes::iter_bytes_5(&self.purity,\n+        to_bytes::iter_bytes_4(&self.purity,\n                                &self.proto,\n                                &self.region,\n                                &self.bounds,\n-                               &self.ret_style,\n                                lsb0, f);\n     }\n }\n@@ -2969,13 +2964,6 @@ pure fn ty_fn_ret(fty: t) -> t {\n     }\n }\n \n-fn ty_fn_ret_style(fty: t) -> ast::ret_style {\n-    match get(fty).sty {\n-      ty_fn(ref f) => f.meta.ret_style,\n-      _ => fail ~\"ty_fn_ret_style() called on non-fn type\"\n-    }\n-}\n-\n fn is_fn_ty(fty: t) -> bool {\n     match get(fty).sty {\n       ty_fn(_) => true,\n@@ -3435,17 +3423,6 @@ fn type_err_to_str(cx: ctxt, err: &type_err) -> ~str {\n \n     match *err {\n         terr_mismatch => ~\"types differ\",\n-        terr_ret_style_mismatch(values) => {\n-            fn to_str(s: ast::ret_style) -> ~str {\n-                match s {\n-                    ast::noreturn => ~\"non-returning\",\n-                    ast::return_val => ~\"return-by-value\"\n-                }\n-            }\n-            fmt!(\"expected %s function, found %s function\",\n-                 to_str(values.expected),\n-                 to_str(values.expected))\n-        }\n         terr_purity_mismatch(values) => {\n             fmt!(\"expected %s fn but found %s fn\",\n                  purity_to_str(values.expected),\n@@ -4406,8 +4383,7 @@ impl FnMeta : cmp::Eq {\n     pure fn eq(&self, other: &FnMeta) -> bool {\n         (*self).purity == (*other).purity &&\n         (*self).proto == (*other).proto &&\n-        (*self).bounds == (*other).bounds &&\n-        (*self).ret_style == (*other).ret_style\n+        (*self).bounds == (*other).bounds\n     }\n     pure fn ne(&self, other: &FnMeta) -> bool { !(*self).eq(other) }\n }"}, {"sha": "b290f6c1742aca6610f5d3572182f4cbc6228c14", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -507,8 +507,7 @@ fn ty_of_fn_decl<AC: ast_conv, RS: region_scope Copy Durable>(\n                           proto: ast_proto,\n                           onceness: onceness,\n                           region: bound_region,\n-                          bounds: bounds,\n-                          ret_style: decl.cf},\n+                          bounds: bounds},\n             sig: FnSig {inputs: input_tys,\n                         output: output_ty}\n         }"}, {"sha": "bd8b6934e0db43c7093a0ec2170eaf0d04272f40", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -1091,6 +1091,8 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n \n                   let supplied_arg_count = args.len();\n \n+                  bot |= ty::type_is_bot(fn_ty.sig.output);\n+\n                   // Grab the argument types, supplying fresh type variables\n                   // if the wrong number of arguments were supplied\n                   let expected_arg_count = fn_ty.sig.inputs.len();\n@@ -1218,7 +1220,6 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         // Pull the return type out of the type of the function.\n         match structure_of(fcx, sp, fty) {\n           ty::ty_fn(ref f) => {\n-              bot |= (f.meta.ret_style == ast::noreturn);\n               fcx.write_ty(call_expr_id, f.sig.output);\n               return bot;\n           }\n@@ -3078,8 +3079,7 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n                           proto: ast::ProtoBorrowed,\n                           onceness: ast::Once,\n                           region: ty::re_bound(ty::br_anon(0)),\n-                          bounds: @~[],\n-                          ret_style: ast::return_val},\n+                          bounds: @~[]},\n             sig: FnSig {inputs: ~[{mode: ast::expl(ast::by_val),\n                                    ty: ty::mk_imm_ptr(\n                                        ccx.tcx,\n@@ -3291,8 +3291,7 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n                       proto: ast::ProtoBare,\n                       onceness: ast::Many,\n                       region: ty::re_static,\n-                      bounds: @~[],\n-                      ret_style: ast::return_val},\n+                      bounds: @~[]},\n         sig: FnSig {inputs: inputs,\n                     output: output}\n     });"}, {"sha": "e8d424b899fe3c2c436f55349540fe89f98b47ce", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -161,8 +161,7 @@ fn get_enum_variant_types(ccx: @crate_ctxt,\n                                   proto: ast::ProtoBare,\n                                   onceness: ast::Many,\n                                   bounds: @~[],\n-                                  region: ty::re_static,\n-                                  ret_style: ast::return_val},\n+                                  region: ty::re_static},\n                     sig: FnSig {inputs: args,\n                                 output: enum_ty}\n                 }));\n@@ -195,8 +194,7 @@ fn get_enum_variant_types(ccx: @crate_ctxt,\n                                   proto: ast::ProtoBare,\n                                   onceness: ast::Many,\n                                   bounds: @~[],\n-                                  region: ty::re_static,\n-                                  ret_style: ast::return_val},\n+                                  region: ty::re_static},\n                     sig: FnSig {inputs: struct_fields, output: enum_ty }}));\n             }\n             ast::enum_variant_kind(ref enum_definition) => {\n@@ -698,8 +696,7 @@ fn convert_struct(ccx: @crate_ctxt,\n                         proto: ast::ProtoBare,\n                         onceness: ast::Many,\n                         bounds: @~[],\n-                        region: ty::re_static,\n-                        ret_style: ast::return_val,\n+                        region: ty::re_static\n                     },\n                     sig: FnSig {\n                         inputs: do struct_def.fields.map |field| {\n@@ -967,8 +964,7 @@ fn ty_of_foreign_fn_decl(ccx: @crate_ctxt,\n                       onceness: ast::Many,\n                       proto: ast::ProtoBare,\n                       bounds: @~[],\n-                      region: ty::re_static,\n-                      ret_style: ast::return_val},\n+                      region: ty::re_static},\n         sig: FnSig {inputs: input_tys,\n                     output: output_ty}\n     });"}, {"sha": "514ae87800d100aa08ba26d219603f088ff91b2b", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -88,7 +88,6 @@ trait combine {\n     fn modes(a: ast::mode, b: ast::mode) -> cres<ast::mode>;\n     fn args(a: ty::arg, b: ty::arg) -> cres<ty::arg>;\n     fn protos(p1: ast::Proto, p2: ast::Proto) -> cres<ast::Proto>;\n-    fn ret_styles(r1: ret_style, r2: ret_style) -> cres<ret_style>;\n     fn purities(a: purity, b: purity) -> cres<purity>;\n     fn oncenesses(a: Onceness, b: Onceness) -> cres<Onceness>;\n     fn contraregions(a: ty::Region, b: ty::Region) -> cres<ty::Region>;\n@@ -331,15 +330,13 @@ fn super_fn_metas<C:combine>(\n {\n     let p = if_ok!(self.protos(a_f.proto, b_f.proto));\n     let r = if_ok!(self.contraregions(a_f.region, b_f.region));\n-    let rs = if_ok!(self.ret_styles(a_f.ret_style, b_f.ret_style));\n     let purity = if_ok!(self.purities(a_f.purity, b_f.purity));\n     let onceness = if_ok!(self.oncenesses(a_f.onceness, b_f.onceness));\n     Ok(FnMeta {purity: purity,\n                proto: p,\n                region: r,\n                onceness: onceness,\n-               bounds: a_f.bounds, // XXX: This is wrong!\n-               ret_style: rs})\n+               bounds: a_f.bounds}) // XXX: This is wrong!\n }\n \n fn super_fn_sigs<C:combine>("}, {"sha": "1d27312c509426c7262ba90670bdbe4cf3d71d78", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -105,18 +105,6 @@ impl Glb: combine {\n         }\n     }\n \n-    fn ret_styles(r1: ret_style, r2: ret_style) -> cres<ret_style> {\n-        match (r1, r2) {\n-          (ast::return_val, ast::return_val) => {\n-            Ok(ast::return_val)\n-          }\n-          (ast::noreturn, _) |\n-          (_, ast::noreturn) => {\n-            Ok(ast::noreturn)\n-          }\n-        }\n-    }\n-\n     fn regions(a: ty::Region, b: ty::Region) -> cres<ty::Region> {\n         debug!(\"%s.regions(%?, %?)\",\n                self.tag(),"}, {"sha": "8a6cfd13d513806f69190b02eb46c3592fdeac4b", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -98,14 +98,6 @@ impl Lub: combine {\n         }\n     }\n \n-    fn ret_styles(r1: ret_style, r2: ret_style) -> cres<ret_style> {\n-        match (r1, r2) {\n-          (ast::return_val, _) |\n-          (_, ast::return_val) => Ok(ast::return_val),\n-          (ast::noreturn, ast::noreturn) => Ok(ast::noreturn)\n-        }\n-    }\n-\n     fn contraregions(a: ty::Region, b: ty::Region) -> cres<ty::Region> {\n         return Glb(*self).regions(a, b);\n     }"}, {"sha": "1b0c71dc8903650473ef29acdcedcd2847c51aa1", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -96,12 +96,6 @@ impl Sub: combine {\n         })\n     }\n \n-    fn ret_styles(a: ret_style, b: ret_style) -> cres<ret_style> {\n-        self.lub().ret_styles(a, b).compare(b, || {\n-            ty::terr_ret_style_mismatch(expected_found(&self, a, b))\n-        })\n-    }\n-\n     fn tys(a: ty::t, b: ty::t) -> cres<ty::t> {\n         debug!(\"%s.tys(%s, %s)\", self.tag(),\n                a.to_str(self.infcx), b.to_str(self.infcx));"}, {"sha": "94fe6090c6b7b750ee6d98ed71cca4fe8bfc04fa", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -181,8 +181,7 @@ impl Env {\n                           proto: ast::ProtoBare,\n                           onceness: ast::Many,\n                           region: ty::re_static,\n-                          bounds: @~[],\n-                          ret_style: ast::return_val},\n+                          bounds: @~[]},\n             sig: FnSig {inputs: move inputs,\n                         output: output_ty}\n         })"}, {"sha": "c81ad60e0834ddf798e9619096ab2efb3ed6b4ee", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -259,7 +259,7 @@ fn expr_repr(cx: ctxt, expr: @ast::expr) -> ~str {\n          pprust::expr_to_str(expr, cx.sess.intr()))\n }\n \n-fn tys_to_str(cx: ctxt, ts: ~[t]) -> ~str {\n+fn tys_to_str(cx: ctxt, ts: &[t]) -> ~str {\n     let tstrs = ts.map(|t| ty_to_str(cx, *t));\n     fmt!(\"[%s]\", str::connect(tstrs, \", \"))\n }\n@@ -291,9 +291,8 @@ fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n                  purity: ast::purity,\n                  onceness: ast::Onceness,\n                  ident: Option<ast::ident>,\n-                 inputs: ~[arg],\n-                 output: t,\n-                 cf: ast::ret_style) -> ~str {\n+                 inputs: &[arg],\n+                 output: t) -> ~str {\n         let mut s;\n \n         s = match purity {\n@@ -331,9 +330,10 @@ fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n         s += ~\")\";\n         if ty::get(output).sty != ty_nil {\n             s += ~\" -> \";\n-            match cf {\n-              ast::noreturn => { s += ~\"!\"; }\n-              ast::return_val => { s += ty_to_str(cx, output); }\n+            if ty::type_is_bot(output) {\n+                s += ~\"!\";\n+            } else {\n+                s += ty_to_str(cx, output);\n             }\n         }\n         return s;\n@@ -347,8 +347,7 @@ fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n             m.fty.meta.onceness,\n             Some(m.ident),\n             m.fty.sig.inputs,\n-            m.fty.sig.output,\n-            m.fty.meta.ret_style) + ~\";\";\n+            m.fty.sig.output) + ~\";\";\n     }\n     fn field_to_str(cx: ctxt, f: field) -> ~str {\n         return cx.sess.str_of(f.ident) + ~\": \" + mt_to_str(cx, f.mt);\n@@ -364,7 +363,7 @@ fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n     // pretty print the structural type representation:\n     return match /*bad*/copy ty::get(typ).sty {\n       ty_nil => ~\"()\",\n-      ty_bot => ~\"_|_\",\n+      ty_bot => ~\"!\",\n       ty_bool => ~\"bool\",\n       ty_int(ast::ty_i) => ~\"int\",\n       ty_int(ast::ty_char) => ~\"char\",\n@@ -396,9 +395,8 @@ fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n                   f.meta.purity,\n                   f.meta.onceness,\n                   None,\n-                  /*bad*/copy f.sig.inputs,\n-                  f.sig.output,\n-                  f.meta.ret_style)\n+                  f.sig.inputs,\n+                  f.sig.output)\n       }\n       ty_infer(infer_ty) => infer_ty.to_str(),\n       ty_err => ~\"[type error]\",\n@@ -409,15 +407,12 @@ fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n       ty_enum(did, ref substs) | ty_struct(did, ref substs) => {\n         let path = ty::item_path(cx, did);\n         let base = ast_map::path_to_str(path, cx.sess.intr());\n-        parameterized(cx, base, (*substs).self_r, /*bad*/copy (*substs).tps)\n+        parameterized(cx, base, substs.self_r, substs.tps)\n       }\n       ty_trait(did, ref substs, vs) => {\n         let path = ty::item_path(cx, did);\n         let base = ast_map::path_to_str(path, cx.sess.intr());\n-        let result = parameterized(cx,\n-                                   base,\n-                                   substs.self_r,\n-                                   /*bad*/copy substs.tps);\n+        let result = parameterized(cx, base, substs.self_r, substs.tps);\n         vstore_ty_to_str(cx, result, vs)\n       }\n       ty_evec(mt, vs) => {\n@@ -433,9 +428,9 @@ fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n }\n \n fn parameterized(cx: ctxt,\n-                 base: ~str,\n+                 base: &str,\n                  self_r: Option<ty::Region>,\n-                 tps: ~[ty::t]) -> ~str {\n+                 tps: &[ty::t]) -> ~str {\n \n     let r_str = match self_r {\n       None => ~\"\","}, {"sha": "9e73bbe1406bdc79b4e5258bbd9de21beab1aca8", "filename": "src/test/compile-fail/bad-bang-ann-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -13,7 +13,7 @@\n \n fn bad_bang(i: uint) -> ! {\n     return 7u;\n-    //~^ ERROR expected `_|_` but found `uint`\n+    //~^ ERROR expected `!` but found `uint`\n }\n \n fn main() { bad_bang(5u); }"}, {"sha": "4dbe5876a978e850c57d07741c16efaaf6a006fe", "filename": "src/test/compile-fail/bad-bang-ann.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -13,7 +13,7 @@\n \n fn bad_bang(i: uint) -> ! {\n     if i < 0u { } else { fail; }\n-    //~^ ERROR expected `_|_` but found `()`\n+    //~^ ERROR expected `!` but found `()`\n }\n \n fn main() { bad_bang(5u); }"}, {"sha": "af78e19e8c2e21ebcaa3f3bd11590f63c0fc00b3", "filename": "src/test/compile-fail/bang-tailexpr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Ftest%2Fcompile-fail%2Fbang-tailexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Ftest%2Fcompile-fail%2Fbang-tailexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbang-tailexpr.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn f() -> ! {\n-    3i //~ ERROR expected `_|_` but found `int`\n+    3i //~ ERROR expected `!` but found `int`\n }\n fn main() { }"}, {"sha": "00bfa7a2233faea444db182c31c1bdc6530a9939", "filename": "src/test/compile-fail/closure-that-fails.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Ftest%2Fcompile-fail%2Fclosure-that-fails.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Ftest%2Fcompile-fail%2Fclosure-that-fails.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-that-fails.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -0,0 +1,7 @@\n+fn foo(f: fn() -> !) {}\n+\n+fn main() {\n+    // Type inference didn't use to be able to handle this:\n+    foo(|| fail);\n+    foo(|| 22); //~ ERROR mismatched types\n+}"}, {"sha": "61afdab405dc47dfab2000b873115d51d52d765f", "filename": "src/test/compile-fail/issue-897-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Ftest%2Fcompile-fail%2Fissue-897-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Ftest%2Fcompile-fail%2Fissue-897-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-897-2.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -10,7 +10,7 @@\n \n fn g() -> ! { fail; }\n fn f() -> ! {\n-    return 42i; //~ ERROR expected `_|_` but found `int`\n+    return 42i; //~ ERROR expected `!` but found `int`\n     g(); //~ WARNING unreachable statement\n }\n fn main() { }"}, {"sha": "1ed7034be77cd63e9d3997a6cf17c6482ebca5b9", "filename": "src/test/compile-fail/issue-897.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Ftest%2Fcompile-fail%2Fissue-897.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Ftest%2Fcompile-fail%2Fissue-897.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-897.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn f() -> ! {\n-    return 42i; //~ ERROR expected `_|_` but found `int`\n+    return 42i; //~ ERROR expected `!` but found `int`\n     fail; //~ WARNING unreachable statement\n }\n fn main() { }"}, {"sha": "0265bd6d24b675c0bde3801d7f714507f33bbee8", "filename": "src/test/compile-fail/loop-does-not-diverge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs?ref=9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "patch": "@@ -14,7 +14,7 @@ fn forever() -> ! {\n   loop {\n     break;\n   }\n-  return 42i; //~ ERROR expected `_|_` but found `int`\n+  return 42i; //~ ERROR expected `!` but found `int`\n }\n \n fn main() {"}]}