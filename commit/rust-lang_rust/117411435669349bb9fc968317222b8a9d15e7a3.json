{"sha": "117411435669349bb9fc968317222b8a9d15e7a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNzQxMTQzNTY2OTM0OWJiOWZjOTY4MzE3MjIyYjhhOWQxNWU3YTM=", "commit": {"author": {"name": "Michael Sproul", "email": "micsproul@gmail.com", "date": "2015-05-03T00:57:41Z"}, "committer": {"name": "Michael Sproul", "email": "micsproul@gmail.com", "date": "2015-05-03T12:08:25Z"}, "message": "Add error index generator.", "tree": {"sha": "b57176bfb5087fdfed6b3a5727f74df455c95df5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b57176bfb5087fdfed6b3a5727f74df455c95df5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/117411435669349bb9fc968317222b8a9d15e7a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/117411435669349bb9fc968317222b8a9d15e7a3", "html_url": "https://github.com/rust-lang/rust/commit/117411435669349bb9fc968317222b8a9d15e7a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/117411435669349bb9fc968317222b8a9d15e7a3/comments", "author": {"login": "michaelsproul", "id": 4452260, "node_id": "MDQ6VXNlcjQ0NTIyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelsproul", "html_url": "https://github.com/michaelsproul", "followers_url": "https://api.github.com/users/michaelsproul/followers", "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}", "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions", "organizations_url": "https://api.github.com/users/michaelsproul/orgs", "repos_url": "https://api.github.com/users/michaelsproul/repos", "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelsproul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelsproul", "id": 4452260, "node_id": "MDQ6VXNlcjQ0NTIyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelsproul", "html_url": "https://github.com/michaelsproul", "followers_url": "https://api.github.com/users/michaelsproul/followers", "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}", "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions", "organizations_url": "https://api.github.com/users/michaelsproul/orgs", "repos_url": "https://api.github.com/users/michaelsproul/repos", "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelsproul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d7d3ec9d2b314af0188a820c58fbd95ee905793", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d7d3ec9d2b314af0188a820c58fbd95ee905793", "html_url": "https://github.com/rust-lang/rust/commit/0d7d3ec9d2b314af0188a820c58fbd95ee905793"}], "stats": {"total": 127, "additions": 125, "deletions": 2}, "files": [{"sha": "546b16c1b850b9619c39bfed16e22d5418b20b62", "filename": "mk/crates.mk", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/117411435669349bb9fc968317222b8a9d15e7a3/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/117411435669349bb9fc968317222b8a9d15e7a3/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=117411435669349bb9fc968317222b8a9d15e7a3", "patch": "@@ -58,7 +58,7 @@ RUSTC_CRATES := rustc rustc_typeck rustc_borrowck rustc_resolve rustc_driver \\\n                 rustc_data_structures\n HOST_CRATES := syntax $(RUSTC_CRATES) rustdoc fmt_macros\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n-TOOLS := compiletest rustdoc rustc rustbook\n+TOOLS := compiletest rustdoc rustc rustbook error-index-generator\n \n DEPS_core :=\n DEPS_libc := core\n@@ -107,10 +107,12 @@ TOOL_DEPS_compiletest := test getopts\n TOOL_DEPS_rustdoc := rustdoc\n TOOL_DEPS_rustc := rustc_driver\n TOOL_DEPS_rustbook := std rustdoc\n+TOOL_DEPS_error-index-generator := rustdoc syntax serialize\n TOOL_SOURCE_compiletest := $(S)src/compiletest/compiletest.rs\n TOOL_SOURCE_rustdoc := $(S)src/driver/driver.rs\n TOOL_SOURCE_rustc := $(S)src/driver/driver.rs\n TOOL_SOURCE_rustbook := $(S)src/rustbook/main.rs\n+TOOL_SOURCE_error-index-generator := $(S)src/error-index-generator/main.rs\n \n ONLY_RLIB_core := 1\n ONLY_RLIB_libc := 1"}, {"sha": "6f16e0d95789bd40594d25309bfb3289bd5b6301", "filename": "mk/docs.mk", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/117411435669349bb9fc968317222b8a9d15e7a3/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/117411435669349bb9fc968317222b8a9d15e7a3/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=117411435669349bb9fc968317222b8a9d15e7a3", "patch": "@@ -71,6 +71,10 @@ RUSTBOOK_EXE = $(HBIN2_H_$(CFG_BUILD))/rustbook$(X_$(CFG_BUILD))\n # ./configure\n RUSTBOOK = $(RPATH_VAR2_T_$(CFG_BUILD)_H_$(CFG_BUILD)) $(RUSTBOOK_EXE)\n \n+# The error-index-generator executable...\n+ERR_IDX_GEN_EXE = $(HBIN2_H_$(CFG_BUILD))/error-index-generator$(X_$(CFG_BUILD))\n+ERR_IDX_GEN = $(RPATH_VAR2_T_$(CFG_BUILD)_H_$(CFG_BUILD)) $(ERR_IDX_GEN_EXE)\n+\n D := $(S)src/doc\n \n DOC_TARGETS := trpl style\n@@ -288,3 +292,9 @@ doc/style/index.html: $(RUSTBOOK_EXE) $(wildcard $(S)/src/doc/style/*.md) | doc/\n \t@$(call E, rustbook: $@)\n \t$(Q)rm -rf doc/style\n \t$(Q)$(RUSTBOOK) build $(S)src/doc/style doc/style\n+\n+error-index: doc/error-index.html\n+\n+doc/error-index.html: $(ERR_IDX_GEN_EXE) | doc/\n+\t$(Q)$(call E, error-index-generator: $@)\n+\t$(Q)$(ERR_IDX_GEN)"}, {"sha": "1ae6a61c95a8c250e8cf397738f6a4052a370bfe", "filename": "mk/prepare.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/117411435669349bb9fc968317222b8a9d15e7a3/mk%2Fprepare.mk", "raw_url": "https://github.com/rust-lang/rust/raw/117411435669349bb9fc968317222b8a9d15e7a3/mk%2Fprepare.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fprepare.mk?ref=117411435669349bb9fc968317222b8a9d15e7a3", "patch": "@@ -70,7 +70,7 @@ define PREPARE_MAN\n \t$(Q)$(PREPARE_MAN_CMD) $(PREPARE_SOURCE_MAN_DIR)/$(1) $(PREPARE_DEST_MAN_DIR)/$(1)\n endef\n \n-PREPARE_TOOLS = $(filter-out compiletest rustbook, $(TOOLS))\n+PREPARE_TOOLS = $(filter-out compiletest rustbook error-index-generator, $(TOOLS))\n \n \n # $(1) is tool"}, {"sha": "1f18eded3c953f0b27ca50c61e77ce3ec1e33ffa", "filename": "src/error-index-generator/main.rs", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/117411435669349bb9fc968317222b8a9d15e7a3/src%2Ferror-index-generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/117411435669349bb9fc968317222b8a9d15e7a3/src%2Ferror-index-generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror-index-generator%2Fmain.rs?ref=117411435669349bb9fc968317222b8a9d15e7a3", "patch": "@@ -0,0 +1,111 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_private, rustdoc)]\n+\n+extern crate syntax;\n+extern crate rustdoc;\n+extern crate serialize as rustc_serialize;\n+\n+use std::collections::BTreeMap;\n+use std::fs::{read_dir, File};\n+use std::io::{Read, Write};\n+use std::path::Path;\n+use std::error::Error;\n+\n+use syntax::diagnostics::metadata::{get_metadata_dir, ErrorMetadataMap};\n+\n+use rustdoc::html::markdown::Markdown;\n+use rustc_serialize::json;\n+\n+/// Load all the metadata files from `metadata_dir` into an in-memory map.\n+fn load_all_errors(metadata_dir: &Path) -> Result<ErrorMetadataMap, Box<Error>> {\n+    let mut all_errors = BTreeMap::new();\n+\n+    for entry in try!(read_dir(metadata_dir)) {\n+        let path = try!(entry).path();\n+\n+        let mut metadata_str = String::new();\n+        try!(\n+            File::open(&path).and_then(|mut f|\n+            f.read_to_string(&mut metadata_str))\n+        );\n+\n+        let some_errors: ErrorMetadataMap = try!(json::decode(&metadata_str));\n+\n+        for (err_code, info) in some_errors {\n+            all_errors.insert(err_code, info);\n+        }\n+    }\n+\n+    Ok(all_errors)\n+}\n+\n+/// Output an HTML page for the errors in `err_map` to `output_path`.\n+fn render_error_page(err_map: &ErrorMetadataMap, output_path: &Path) -> Result<(), Box<Error>> {\n+    let mut output_file = try!(File::create(output_path));\n+\n+    try!(write!(&mut output_file,\n+r##\"<!DOCTYPE html>\n+<html>\n+<head>\n+<title>Rust Compiler Error Index</title>\n+<link rel=\"stylesheet\" type=\"text/css\" href=\"rust.css\"/>\n+</head>\n+<body>\n+\"##\n+    ));\n+\n+    try!(write!(&mut output_file, \"<h1>Rust Compiler Error Index</h1>\\n\"));\n+\n+    for (err_code, info) in err_map.iter() {\n+        // Enclose each error in a div so they can be shown/hidden en masse.\n+        let desc_desc = match info.description {\n+            Some(_) => \"error-described\",\n+            None => \"error-undescribed\"\n+        };\n+        let use_desc = match info.use_site {\n+            Some(_) => \"error-used\",\n+            None => \"error-unused\"\n+        };\n+        try!(write!(&mut output_file, \"<div class=\\\"{} {}\\\">\", desc_desc, use_desc));\n+\n+        // Error title (with self-link).\n+        try!(write!(&mut output_file,\n+            \"<h2 id=\\\"{0}\\\"><a href=\\\"#{0}\\\">{0}</a></h2>\\n\",\n+            err_code\n+        ));\n+\n+        // Description rendered as markdown.\n+        match info.description {\n+            Some(ref desc) => try!(write!(&mut output_file, \"{}\", Markdown(desc))),\n+            None => try!(write!(&mut output_file, \"<p>No description.</p>\\n\"))\n+        }\n+\n+        try!(write!(&mut output_file, \"</div>\\n\"));\n+    }\n+\n+    try!(write!(&mut output_file, \"</body>\\n</html>\"));\n+\n+    Ok(())\n+}\n+\n+fn main_with_result() -> Result<(), Box<Error>> {\n+    let metadata_dir = get_metadata_dir();\n+    let err_map = try!(load_all_errors(&metadata_dir));\n+    try!(render_error_page(&err_map, Path::new(\"doc/error-index.html\")));\n+    Ok(())\n+}\n+\n+fn main() {\n+    if let Err(e) = main_with_result() {\n+        panic!(\"{}\", e.description());\n+    }\n+}"}]}