{"sha": "f92000816e0cf8bdfe6ad422464ce0fa6144b496", "node_id": "C_kwDOAAsO6NoAKGY5MjAwMDgxNmUwY2Y4YmRmZTZhZDQyMjQ2NGNlMGZhNjE0NGI0OTY", "commit": {"author": {"name": "mejrs", "email": "", "date": "2023-01-03T13:08:20Z"}, "committer": {"name": "mejrs", "email": "", "date": "2023-01-11T23:11:11Z"}, "message": "Improve proc macro attribute diagnostics", "tree": {"sha": "3ddaf555b04a99cbb61d349328be206b99bb60a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ddaf555b04a99cbb61d349328be206b99bb60a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f92000816e0cf8bdfe6ad422464ce0fa6144b496", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f92000816e0cf8bdfe6ad422464ce0fa6144b496", "html_url": "https://github.com/rust-lang/rust/commit/f92000816e0cf8bdfe6ad422464ce0fa6144b496", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f92000816e0cf8bdfe6ad422464ce0fa6144b496/comments", "author": {}, "committer": {}, "parents": [{"sha": "ef4046e4f3932991971cdb64915172899532aece", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef4046e4f3932991971cdb64915172899532aece", "html_url": "https://github.com/rust-lang/rust/commit/ef4046e4f3932991971cdb64915172899532aece"}], "stats": {"total": 510, "additions": 488, "deletions": 22}, "files": [{"sha": "63db6b6837b474b0ada861a5f14093cdf7810ae2", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f92000816e0cf8bdfe6ad422464ce0fa6144b496/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f92000816e0cf8bdfe6ad422464ce0fa6144b496/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=f92000816e0cf8bdfe6ad422464ce0fa6144b496", "patch": "@@ -707,3 +707,24 @@ passes_ignored_derived_impls =\n       [one] trait {$trait_list}, but this is\n      *[other] traits {$trait_list}, but these are\n     } intentionally ignored during dead code analysis\n+\n+passes_proc_macro_typeerror = mismatched {$kind} signature\n+    .label = found {$found}, expected type `proc_macro::TokenStream`\n+    .note = {$kind}s must have a signature of `{$expected_signature}`\n+\n+passes_proc_macro_diff_arg_count = mismatched {$kind} signature\n+    .label = found unexpected {$count ->\n+      [one] argument\n+     *[other] arguments\n+    }\n+    .note = {$kind}s must have a signature of `{$expected_signature}`\n+\n+passes_proc_macro_missing_args = mismatched {$kind} signature\n+    .label = {$kind} must have {$expected_input_count ->\n+      [one] one argument\n+     *[other] two arguments\n+    } of type `proc_macro::TokenStream`\n+\n+passes_proc_macro_invalid_abi = proc macro functions may not be `extern \"{$abi}\"`\n+\n+passes_proc_macro_unsafe = proc macro functions may not be `unsafe`"}, {"sha": "517bf2533c5e604becdddd503a2ce8b4e25c56da", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 124, "deletions": 6, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/f92000816e0cf8bdfe6ad422464ce0fa6144b496/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92000816e0cf8bdfe6ad422464ce0fa6144b496/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=f92000816e0cf8bdfe6ad422464ce0fa6144b496", "patch": "@@ -6,11 +6,12 @@\n \n use crate::errors::{\n     self, AttrApplication, DebugVisualizerUnreadable, InvalidAttrAtCrateLevel, ObjectLifetimeErr,\n-    OnlyHasEffectOn, TransparentIncompatible, UnrecognizedReprHint,\n+    OnlyHasEffectOn, ProcMacroDiffArguments, ProcMacroInvalidAbi, ProcMacroMissingArguments,\n+    ProcMacroTypeError, ProcMacroUnsafe, TransparentIncompatible, UnrecognizedReprHint,\n };\n use rustc_ast::{ast, AttrStyle, Attribute, LitKind, MetaItemKind, MetaItemLit, NestedMetaItem};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{fluent, Applicability, MultiSpan};\n+use rustc_errors::{fluent, Applicability, IntoDiagnosticArg, MultiSpan};\n use rustc_expand::base::resolve_path;\n use rustc_feature::{AttributeDuplicates, AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use rustc_hir as hir;\n@@ -19,18 +20,19 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{\n     self, FnSig, ForeignItem, HirId, Item, ItemKind, TraitItem, CRATE_HIR_ID, CRATE_OWNER_ID,\n };\n-use rustc_hir::{MethodKind, Target};\n+use rustc_hir::{MethodKind, Target, Unsafety};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_lifetime::ObjectLifetimeDefault;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{ParamEnv, TyCtxt};\n use rustc_session::lint::builtin::{\n     CONFLICTING_REPR_HINTS, INVALID_DOC_ATTRIBUTES, UNUSED_ATTRIBUTES,\n };\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n+use std::cell::Cell;\n use std::collections::hash_map::Entry;\n \n pub(crate) fn target_from_impl_item<'tcx>(\n@@ -62,8 +64,27 @@ enum ItemLike<'tcx> {\n     ForeignItem,\n }\n \n+#[derive(Copy, Clone)]\n+pub(crate) enum ProcMacroKind {\n+    FunctionLike,\n+    Derive,\n+    Attribute,\n+}\n+\n+impl IntoDiagnosticArg for ProcMacroKind {\n+    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n+        match self {\n+            ProcMacroKind::Attribute => \"attribute proc macro\",\n+            ProcMacroKind::Derive => \"derive proc macro\",\n+            ProcMacroKind::FunctionLike => \"function-like proc macro\",\n+        }\n+        .into_diagnostic_arg()\n+    }\n+}\n+\n struct CheckAttrVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n+    abort: Cell<bool>,\n }\n \n impl CheckAttrVisitor<'_> {\n@@ -172,7 +193,7 @@ impl CheckAttrVisitor<'_> {\n                 sym::path => self.check_generic_attr(hir_id, attr, target, Target::Mod),\n                 sym::plugin_registrar => self.check_plugin_registrar(hir_id, attr, target),\n                 sym::macro_export => self.check_macro_export(hir_id, attr, target),\n-                sym::ignore | sym::should_panic | sym::proc_macro_derive => {\n+                sym::ignore | sym::should_panic => {\n                     self.check_generic_attr(hir_id, attr, target, Target::Fn)\n                 }\n                 sym::automatically_derived => {\n@@ -182,6 +203,16 @@ impl CheckAttrVisitor<'_> {\n                     self.check_generic_attr(hir_id, attr, target, Target::Mod)\n                 }\n                 sym::rustc_object_lifetime_default => self.check_object_lifetime_default(hir_id),\n+                sym::proc_macro => {\n+                    self.check_proc_macro(hir_id, target, ProcMacroKind::FunctionLike)\n+                }\n+                sym::proc_macro_attribute => {\n+                    self.check_proc_macro(hir_id, target, ProcMacroKind::Attribute);\n+                }\n+                sym::proc_macro_derive => {\n+                    self.check_generic_attr(hir_id, attr, target, Target::Fn);\n+                    self.check_proc_macro(hir_id, target, ProcMacroKind::Derive)\n+                }\n                 _ => {}\n             }\n \n@@ -2052,6 +2083,90 @@ impl CheckAttrVisitor<'_> {\n             errors::Unused { attr_span: attr.span, note },\n         );\n     }\n+\n+    fn check_proc_macro(&self, hir_id: HirId, target: Target, kind: ProcMacroKind) {\n+        let expected_input_count = match kind {\n+            ProcMacroKind::Attribute => 2,\n+            ProcMacroKind::Derive | ProcMacroKind::FunctionLike => 1,\n+        };\n+\n+        let expected_signature = match kind {\n+            ProcMacroKind::Attribute => \"fn(TokenStream, TokenStream) -> TokenStream\",\n+            ProcMacroKind::Derive | ProcMacroKind::FunctionLike => \"fn(TokenStream) -> TokenStream\",\n+        };\n+\n+        let tcx = self.tcx;\n+        if target == Target::Fn {\n+            let Some(tokenstream) = tcx.get_diagnostic_item(sym::TokenStream) else {return};\n+            let tokenstream = tcx.type_of(tokenstream);\n+\n+            let id = hir_id.expect_owner();\n+            let hir_sig = tcx.hir().fn_sig_by_hir_id(hir_id).unwrap();\n+\n+            let sig = tcx.fn_sig(id);\n+\n+            if sig.abi() != Abi::Rust {\n+                tcx.sess\n+                    .emit_err(ProcMacroInvalidAbi { span: hir_sig.span, abi: sig.abi().name() });\n+                self.abort.set(true);\n+            }\n+\n+            if sig.unsafety() == Unsafety::Unsafe {\n+                tcx.sess.emit_err(ProcMacroUnsafe { span: hir_sig.span });\n+                self.abort.set(true);\n+            }\n+\n+            let output = sig.output().skip_binder();\n+\n+            // Typecheck the output\n+            if tcx.normalize_erasing_regions(ParamEnv::empty(), output) != tokenstream {\n+                tcx.sess.emit_err(ProcMacroTypeError {\n+                    span: hir_sig.decl.output.span(),\n+                    found: output,\n+                    kind,\n+                    expected_signature,\n+                });\n+                self.abort.set(true);\n+            }\n+\n+            // Typecheck \"expected_input_count\" inputs, emitting\n+            // `ProcMacroMissingArguments` if there are not enough.\n+            if let Some(args) = sig.inputs().skip_binder().get(0..expected_input_count) {\n+                for (arg, input) in args.iter().zip(hir_sig.decl.inputs) {\n+                    if tcx.normalize_erasing_regions(ParamEnv::empty(), *arg) != tokenstream {\n+                        tcx.sess.emit_err(ProcMacroTypeError {\n+                            span: input.span,\n+                            found: *arg,\n+                            kind,\n+                            expected_signature,\n+                        });\n+                        self.abort.set(true);\n+                    }\n+                }\n+            } else {\n+                tcx.sess.emit_err(ProcMacroMissingArguments {\n+                    expected_input_count,\n+                    span: hir_sig.span,\n+                    kind,\n+                    expected_signature,\n+                });\n+                self.abort.set(true);\n+            }\n+\n+            // Check that there are not too many arguments\n+            let body_id = tcx.hir().body_owned_by(id.def_id);\n+            let excess = tcx.hir().body(body_id).params.get(expected_input_count..);\n+            if let Some(excess @ [begin @ end] | excess @ [begin, .., end]) = excess {\n+                tcx.sess.emit_err(ProcMacroDiffArguments {\n+                    span: begin.span.to(end.span),\n+                    count: excess.len(),\n+                    kind,\n+                    expected_signature,\n+                });\n+                self.abort.set(true);\n+            }\n+        }\n+    }\n }\n \n impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n@@ -2214,12 +2329,15 @@ fn check_non_exported_macro_for_invalid_attrs(tcx: TyCtxt<'_>, item: &Item<'_>)\n }\n \n fn check_mod_attrs(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    let check_attr_visitor = &mut CheckAttrVisitor { tcx };\n+    let check_attr_visitor = &mut CheckAttrVisitor { tcx, abort: Cell::new(false) };\n     tcx.hir().visit_item_likes_in_module(module_def_id, check_attr_visitor);\n     if module_def_id.is_top_level_module() {\n         check_attr_visitor.check_attributes(CRATE_HIR_ID, DUMMY_SP, Target::Mod, None);\n         check_invalid_crate_level_attr(tcx, tcx.hir().krate_attrs());\n     }\n+    if check_attr_visitor.abort.get() {\n+        tcx.sess.abort_if_errors()\n+    }\n }\n \n pub(crate) fn provide(providers: &mut Providers) {"}, {"sha": "68103608ec9d9f16606ff8b71bffcd769e209c53", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f92000816e0cf8bdfe6ad422464ce0fa6144b496/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92000816e0cf8bdfe6ad422464ce0fa6144b496/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=f92000816e0cf8bdfe6ad422464ce0fa6144b496", "patch": "@@ -12,6 +12,7 @@ use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n use rustc_middle::ty::{MainDefinition, Ty};\n use rustc_span::{Span, Symbol, DUMMY_SP};\n \n+use crate::check_attr::ProcMacroKind;\n use crate::lang_items::Duplicate;\n \n #[derive(LintDiagnostic)]\n@@ -1508,3 +1509,52 @@ pub struct ChangeFieldsToBeOfUnitType {\n     #[suggestion_part(code = \"()\")]\n     pub spans: Vec<Span>,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(passes_proc_macro_typeerror)]\n+#[note]\n+pub(crate) struct ProcMacroTypeError<'tcx> {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub found: Ty<'tcx>,\n+    pub kind: ProcMacroKind,\n+    pub expected_signature: &'static str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes_proc_macro_diff_arg_count)]\n+pub(crate) struct ProcMacroDiffArguments {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub count: usize,\n+    pub kind: ProcMacroKind,\n+    pub expected_signature: &'static str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes_proc_macro_missing_args)]\n+pub(crate) struct ProcMacroMissingArguments {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub expected_input_count: usize,\n+    pub kind: ProcMacroKind,\n+    pub expected_signature: &'static str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes_proc_macro_invalid_abi)]\n+pub(crate) struct ProcMacroInvalidAbi {\n+    #[primary_span]\n+    pub span: Span,\n+    pub abi: &'static str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes_proc_macro_unsafe)]\n+pub(crate) struct ProcMacroUnsafe {\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "0cc9567d4d67274ad57252767f27cd10f9982de3", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f92000816e0cf8bdfe6ad422464ce0fa6144b496/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92000816e0cf8bdfe6ad422464ce0fa6144b496/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=f92000816e0cf8bdfe6ad422464ce0fa6144b496", "patch": "@@ -287,6 +287,7 @@ symbols! {\n         Target,\n         ToOwned,\n         ToString,\n+        TokenStream,\n         Try,\n         TryCaptureGeneric,\n         TryCapturePrintable,"}, {"sha": "8bff40c279aaa4ce2b9761c9a78ae32bfa93d6aa", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f92000816e0cf8bdfe6ad422464ce0fa6144b496/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92000816e0cf8bdfe6ad422464ce0fa6144b496/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=f92000816e0cf8bdfe6ad422464ce0fa6144b496", "patch": "@@ -74,6 +74,7 @@ pub fn is_available() -> bool {\n ///\n /// This is both the input and output of `#[proc_macro]`, `#[proc_macro_attribute]`\n /// and `#[proc_macro_derive]` definitions.\n+#[rustc_diagnostic_item = \"TokenStream\"]\n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n #[derive(Clone)]\n pub struct TokenStream(Option<bridge::client::TokenStream>);"}, {"sha": "2a40ddd496ce809ca3023b1a93f74098049f237b", "filename": "tests/ui/proc-macro/proc-macro-abi.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f92000816e0cf8bdfe6ad422464ce0fa6144b496/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92000816e0cf8bdfe6ad422464ce0fa6144b496/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.rs?ref=f92000816e0cf8bdfe6ad422464ce0fa6144b496", "patch": "@@ -0,0 +1,28 @@\n+#![crate_type = \"proc-macro\"]\n+#![allow(warnings)]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro]\n+pub extern \"C\" fn abi(a: TokenStream) -> TokenStream {\n+    //~^ ERROR proc macro functions may not be `extern\n+    a\n+}\n+\n+#[proc_macro]\n+pub extern \"system\" fn abi2(a: TokenStream) -> TokenStream {\n+    //~^ ERROR proc macro functions may not be `extern\n+    a\n+}\n+\n+#[proc_macro]\n+pub extern fn abi3(a: TokenStream) -> TokenStream {\n+    //~^ ERROR proc macro functions may not be `extern\n+    a\n+}\n+\n+#[proc_macro]\n+pub extern \"Rust\" fn abi4(a: TokenStream) -> TokenStream {\n+    a\n+}"}, {"sha": "fa5f5dc09899880fe44f918d0af006f500d7005f", "filename": "tests/ui/proc-macro/proc-macro-abi.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f92000816e0cf8bdfe6ad422464ce0fa6144b496/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f92000816e0cf8bdfe6ad422464ce0fa6144b496/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.stderr?ref=f92000816e0cf8bdfe6ad422464ce0fa6144b496", "patch": "@@ -0,0 +1,20 @@\n+error: proc macro functions may not be `extern \"C\"`\n+  --> $DIR/proc-macro-abi.rs:8:1\n+   |\n+LL | pub extern \"C\" fn abi(a: TokenStream) -> TokenStream {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: proc macro functions may not be `extern \"system\"`\n+  --> $DIR/proc-macro-abi.rs:14:1\n+   |\n+LL | pub extern \"system\" fn abi2(a: TokenStream) -> TokenStream {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: proc macro functions may not be `extern \"C\"`\n+  --> $DIR/proc-macro-abi.rs:20:1\n+   |\n+LL | pub extern fn abi3(a: TokenStream) -> TokenStream {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "fb17710950106f4563ff6f411e542c7e7aa922b8", "filename": "tests/ui/proc-macro/signature-proc-macro-attribute.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f92000816e0cf8bdfe6ad422464ce0fa6144b496/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92000816e0cf8bdfe6ad422464ce0fa6144b496/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.rs?ref=f92000816e0cf8bdfe6ad422464ce0fa6144b496", "patch": "@@ -0,0 +1,29 @@\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn bad_input(input: String) -> TokenStream {\n+    //~^ ERROR mismatched attribute proc macro signature\n+    ::proc_macro::TokenStream::new()\n+}\n+\n+#[proc_macro_attribute]\n+pub fn bad_output(input: TokenStream) -> String {\n+    //~^ ERROR mismatched attribute proc macro signature\n+    //~| ERROR mismatched attribute proc macro signature\n+    String::from(\"blah\")\n+}\n+\n+#[proc_macro_attribute]\n+pub fn bad_everything(input: String) -> String {\n+    //~^ ERROR mismatched attribute proc macro signature\n+    //~| ERROR mismatched attribute proc macro signature\n+    input\n+}\n+\n+#[proc_macro_attribute]\n+pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n+    //~^ ERROR mismatched attribute proc macro signature\n+}"}, {"sha": "ecfd2b06e109c6fe0a3283a451f4cc6ce3b1a164", "filename": "tests/ui/proc-macro/signature-proc-macro-attribute.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f92000816e0cf8bdfe6ad422464ce0fa6144b496/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f92000816e0cf8bdfe6ad422464ce0fa6144b496/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.stderr?ref=f92000816e0cf8bdfe6ad422464ce0fa6144b496", "patch": "@@ -0,0 +1,42 @@\n+error: mismatched attribute proc macro signature\n+  --> $DIR/signature-proc-macro-attribute.rs:7:1\n+   |\n+LL | pub fn bad_input(input: String) -> TokenStream {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attribute proc macro must have two arguments of type `proc_macro::TokenStream`\n+\n+error: mismatched attribute proc macro signature\n+  --> $DIR/signature-proc-macro-attribute.rs:13:42\n+   |\n+LL | pub fn bad_output(input: TokenStream) -> String {\n+   |                                          ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |\n+   = note: attribute proc macros must have a signature of `fn(TokenStream, TokenStream) -> TokenStream`\n+\n+error: mismatched attribute proc macro signature\n+  --> $DIR/signature-proc-macro-attribute.rs:13:1\n+   |\n+LL | pub fn bad_output(input: TokenStream) -> String {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attribute proc macro must have two arguments of type `proc_macro::TokenStream`\n+\n+error: mismatched attribute proc macro signature\n+  --> $DIR/signature-proc-macro-attribute.rs:20:41\n+   |\n+LL | pub fn bad_everything(input: String) -> String {\n+   |                                         ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |\n+   = note: attribute proc macros must have a signature of `fn(TokenStream, TokenStream) -> TokenStream`\n+\n+error: mismatched attribute proc macro signature\n+  --> $DIR/signature-proc-macro-attribute.rs:20:1\n+   |\n+LL | pub fn bad_everything(input: String) -> String {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attribute proc macro must have two arguments of type `proc_macro::TokenStream`\n+\n+error: mismatched attribute proc macro signature\n+  --> $DIR/signature-proc-macro-attribute.rs:27:49\n+   |\n+LL | pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n+   |                                                 ^^^^^^^^^ found unexpected argument\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "a079157538fb66078f06e1a7fe983308c235bf0e", "filename": "tests/ui/proc-macro/signature-proc-macro-derive.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f92000816e0cf8bdfe6ad422464ce0fa6144b496/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92000816e0cf8bdfe6ad422464ce0fa6144b496/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.rs?ref=f92000816e0cf8bdfe6ad422464ce0fa6144b496", "patch": "@@ -0,0 +1,28 @@\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_derive(Blah)]\n+pub fn bad_input(input: String) -> TokenStream {\n+    //~^ ERROR mismatched derive proc macro signature\n+    TokenStream::new()\n+}\n+\n+#[proc_macro_derive(Bleh)]\n+pub fn bad_output(input: TokenStream) -> String {\n+    //~^ ERROR mismatched derive proc macro signature\n+    String::from(\"blah\")\n+}\n+\n+#[proc_macro_derive(Bluh)]\n+pub fn bad_everything(input: String) -> String {\n+    //~^ ERROR mismatched derive proc macro signature\n+    //~| ERROR mismatched derive proc macro signature\n+    input\n+}\n+\n+#[proc_macro_derive(Blih)]\n+pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n+    //~^ ERROR mismatched derive proc macro signature\n+}"}, {"sha": "bb2bd9a93d24b96b81704d1365e8e9d0cf15fb8d", "filename": "tests/ui/proc-macro/signature-proc-macro-derive.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f92000816e0cf8bdfe6ad422464ce0fa6144b496/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f92000816e0cf8bdfe6ad422464ce0fa6144b496/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.stderr?ref=f92000816e0cf8bdfe6ad422464ce0fa6144b496", "patch": "@@ -0,0 +1,40 @@\n+error: mismatched derive proc macro signature\n+  --> $DIR/signature-proc-macro-derive.rs:7:25\n+   |\n+LL | pub fn bad_input(input: String) -> TokenStream {\n+   |                         ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |\n+   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+\n+error: mismatched derive proc macro signature\n+  --> $DIR/signature-proc-macro-derive.rs:13:42\n+   |\n+LL | pub fn bad_output(input: TokenStream) -> String {\n+   |                                          ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |\n+   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+\n+error: mismatched derive proc macro signature\n+  --> $DIR/signature-proc-macro-derive.rs:19:41\n+   |\n+LL | pub fn bad_everything(input: String) -> String {\n+   |                                         ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |\n+   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+\n+error: mismatched derive proc macro signature\n+  --> $DIR/signature-proc-macro-derive.rs:19:30\n+   |\n+LL | pub fn bad_everything(input: String) -> String {\n+   |                              ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |\n+   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+\n+error: mismatched derive proc macro signature\n+  --> $DIR/signature-proc-macro-derive.rs:26:33\n+   |\n+LL | pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ found unexpected arguments\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "35d5be2171283ff332e224b382fa61a5e2b06c42", "filename": "tests/ui/proc-macro/signature-proc-macro.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f92000816e0cf8bdfe6ad422464ce0fa6144b496/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92000816e0cf8bdfe6ad422464ce0fa6144b496/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.rs?ref=f92000816e0cf8bdfe6ad422464ce0fa6144b496", "patch": "@@ -0,0 +1,28 @@\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro]\n+pub fn bad_input(input: String) -> TokenStream {\n+    //~^ ERROR mismatched function-like proc macro signature\n+    ::proc_macro::TokenStream::new()\n+}\n+\n+#[proc_macro]\n+pub fn bad_output(input: TokenStream) -> String {\n+    //~^ ERROR mismatched function-like proc macro signature\n+    String::from(\"blah\")\n+}\n+\n+#[proc_macro]\n+pub fn bad_everything(input: String) -> String {\n+    //~^ ERROR mismatched function-like proc macro signature\n+    //~| ERROR mismatched function-like proc macro signature\n+    input\n+}\n+\n+#[proc_macro]\n+pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n+    //~^ ERROR mismatched function-like proc macro signature\n+}"}, {"sha": "32241e1b9e00a175025c5b7f59c19c13a75fb729", "filename": "tests/ui/proc-macro/signature-proc-macro.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f92000816e0cf8bdfe6ad422464ce0fa6144b496/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f92000816e0cf8bdfe6ad422464ce0fa6144b496/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.stderr?ref=f92000816e0cf8bdfe6ad422464ce0fa6144b496", "patch": "@@ -0,0 +1,40 @@\n+error: mismatched function-like proc macro signature\n+  --> $DIR/signature-proc-macro.rs:7:25\n+   |\n+LL | pub fn bad_input(input: String) -> TokenStream {\n+   |                         ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |\n+   = note: function-like proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+\n+error: mismatched function-like proc macro signature\n+  --> $DIR/signature-proc-macro.rs:13:42\n+   |\n+LL | pub fn bad_output(input: TokenStream) -> String {\n+   |                                          ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |\n+   = note: function-like proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+\n+error: mismatched function-like proc macro signature\n+  --> $DIR/signature-proc-macro.rs:19:41\n+   |\n+LL | pub fn bad_everything(input: String) -> String {\n+   |                                         ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |\n+   = note: function-like proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+\n+error: mismatched function-like proc macro signature\n+  --> $DIR/signature-proc-macro.rs:19:30\n+   |\n+LL | pub fn bad_everything(input: String) -> String {\n+   |                              ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |\n+   = note: function-like proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+\n+error: mismatched function-like proc macro signature\n+  --> $DIR/signature-proc-macro.rs:26:33\n+   |\n+LL | pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ found unexpected arguments\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "11187aa31bd8071c6047c1568bf7ac7373bbc30b", "filename": "tests/ui/proc-macro/signature.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f92000816e0cf8bdfe6ad422464ce0fa6144b496/tests%2Fui%2Fproc-macro%2Fsignature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92000816e0cf8bdfe6ad422464ce0fa6144b496/tests%2Fui%2Fproc-macro%2Fsignature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature.rs?ref=f92000816e0cf8bdfe6ad422464ce0fa6144b496", "patch": "@@ -8,6 +8,10 @@ extern crate proc_macro;\n \n #[proc_macro_derive(A)]\n pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n-    //~^ ERROR: expected a `Fn<(proc_macro::TokenStream,)>` closure, found `unsafe extern \"C\" fn\n+    //~^ ERROR: mismatched derive proc macro signature\n+    //~| mismatched derive proc macro signature\n+    //~| mismatched derive proc macro signature\n+    //~| proc macro functions may not be `extern\n+    //~| proc macro functions may not be `unsafe\n     loop {}\n }"}, {"sha": "3dbe3f22a0df89310dbcb24e8fdb51e021e50754", "filename": "tests/ui/proc-macro/signature.stderr", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f92000816e0cf8bdfe6ad422464ce0fa6144b496/tests%2Fui%2Fproc-macro%2Fsignature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f92000816e0cf8bdfe6ad422464ce0fa6144b496/tests%2Fui%2Fproc-macro%2Fsignature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature.stderr?ref=f92000816e0cf8bdfe6ad422464ce0fa6144b496", "patch": "@@ -1,20 +1,36 @@\n-error[E0277]: expected a `Fn<(proc_macro::TokenStream,)>` closure, found `unsafe extern \"C\" fn(i32, u32) -> u32 {foo}`\n+error: proc macro functions may not be `extern \"C\"`\n   --> $DIR/signature.rs:10:1\n    |\n-LL | / pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n-LL | |\n-LL | |     loop {}\n-LL | | }\n-   | | ^\n-   | | |\n-   | |_call the function in a closure: `|| unsafe { /* code */ }`\n-   |   required by a bound introduced by this call\n+LL | pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: proc macro functions may not be `unsafe`\n+  --> $DIR/signature.rs:10:1\n+   |\n+LL | pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: mismatched derive proc macro signature\n+  --> $DIR/signature.rs:10:49\n+   |\n+LL | pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n+   |                                                 ^^^ found u32, expected type `proc_macro::TokenStream`\n+   |\n+   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+\n+error: mismatched derive proc macro signature\n+  --> $DIR/signature.rs:10:33\n+   |\n+LL | pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n+   |                                 ^^^ found i32, expected type `proc_macro::TokenStream`\n+   |\n+   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+\n+error: mismatched derive proc macro signature\n+  --> $DIR/signature.rs:10:38\n    |\n-   = help: the trait `Fn<(proc_macro::TokenStream,)>` is not implemented for fn item `unsafe extern \"C\" fn(i32, u32) -> u32 {foo}`\n-   = note: unsafe function cannot be called generically without an unsafe block\n-note: required by a bound in `ProcMacro::custom_derive`\n-  --> $SRC_DIR/proc_macro/src/bridge/client.rs:LL:COL\n+LL | pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n+   |                                      ^^^^^^ found unexpected argument\n \n-error: aborting due to previous error\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0277`."}]}