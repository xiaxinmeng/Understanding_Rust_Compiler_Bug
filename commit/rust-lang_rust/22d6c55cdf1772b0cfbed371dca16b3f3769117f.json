{"sha": "22d6c55cdf1772b0cfbed371dca16b3f3769117f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZDZjNTVjZGYxNzcyYjBjZmJlZDM3MWRjYTE2YjNmMzc2OTExN2Y=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-02-03T22:48:16Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T11:25:10Z"}, "message": "rustc: print ExistentialProjection with spaces around `=`, e.g. `dyn Foo<A = X>`.", "tree": {"sha": "6fb9eb343a8f160e707f160930337925836da11b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fb9eb343a8f160e707f160930337925836da11b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22d6c55cdf1772b0cfbed371dca16b3f3769117f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22d6c55cdf1772b0cfbed371dca16b3f3769117f", "html_url": "https://github.com/rust-lang/rust/commit/22d6c55cdf1772b0cfbed371dca16b3f3769117f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22d6c55cdf1772b0cfbed371dca16b3f3769117f/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a54a41ce47c149fd6587182a4ab87a146844f939", "url": "https://api.github.com/repos/rust-lang/rust/commits/a54a41ce47c149fd6587182a4ab87a146844f939", "html_url": "https://github.com/rust-lang/rust/commit/a54a41ce47c149fd6587182a4ab87a146844f939"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "fa57e0b96745ae1f751a06c4c657cb9e939a6b49", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=22d6c55cdf1772b0cfbed371dca16b3f3769117f", "patch": "@@ -1489,7 +1489,7 @@ define_print_and_forward_display! {\n \n     ty::ExistentialProjection<'tcx> {\n         let name = cx.tcx().associated_item(self.item_def_id).ident;\n-        p!(write(\"{}=\", name), print(self.ty))\n+        p!(write(\"{} = \", name), print(self.ty))\n     }\n \n     ty::ExistentialPredicate<'tcx> {"}, {"sha": "31d2c5f318e5056cc22cdb55f399f11985bfea34", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=22d6c55cdf1772b0cfbed371dca16b3f3769117f", "patch": "@@ -29,7 +29,7 @@ LL |     baz(&a);\n    |\n    = note: expected type `usize`\n               found type `Bar`\n-   = note: required for the cast to the object type `dyn Foo<A=Bar>`\n+   = note: required for the cast to the object type `dyn Foo<A = Bar>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ad0b6515490b973e7c3b8534a3243246445ebae1", "filename": "src/test/ui/associated-types/associated-types-overridden-binding-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr?ref=22d6c55cdf1772b0cfbed371dca16b3f3769117f", "patch": "@@ -6,7 +6,7 @@ LL |     let _: &I32Iterator<Item = u32> = &vec![42].into_iter();\n    |\n    = note: expected type `u32`\n               found type `i32`\n-   = note: required for the cast to the object type `dyn I32Iterator<Item=u32, Item=i32>`\n+   = note: required for the cast to the object type `dyn I32Iterator<Item = u32, Item = i32>`\n \n error: aborting due to previous error\n "}, {"sha": "456a4c18e2b3020e882d7a133517fffab68ec75b", "filename": "src/test/ui/confuse-field-and-method/issue-2392.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr?ref=22d6c55cdf1772b0cfbed371dca16b3f3769117f", "patch": "@@ -75,7 +75,7 @@ LL |     w.wrap.not_closure();\n    |\n    = help: did you mean to write `w.wrap.not_closure` instead of `w.wrap.not_closure(...)`?\n \n-error[E0599]: no method named `closure` found for type `Obj<std::boxed::Box<(dyn std::boxed::FnBox<(), Output=u32> + 'static)>>` in the current scope\n+error[E0599]: no method named `closure` found for type `Obj<std::boxed::Box<(dyn std::boxed::FnBox<(), Output = u32> + 'static)>>` in the current scope\n   --> $DIR/issue-2392.rs:62:24\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {"}, {"sha": "89df58dd2dc1b19825bda7393282ad0a86710879", "filename": "src/test/ui/issues/issue-20605.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr?ref=22d6c55cdf1772b0cfbed371dca16b3f3769117f", "patch": "@@ -1,10 +1,10 @@\n-error[E0277]: the size for values of type `dyn std::iter::Iterator<Item=&mut u8>` cannot be known at compilation time\n+error[E0277]: the size for values of type `dyn std::iter::Iterator<Item = &mut u8>` cannot be known at compilation time\n   --> $DIR/issue-20605.rs:2:17\n    |\n LL |     for item in *things { *item = 0 }\n    |                 ^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `dyn std::iter::Iterator<Item=&mut u8>`\n+   = help: the trait `std::marker::Sized` is not implemented for `dyn std::iter::Iterator<Item = &mut u8>`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::iter::IntoIterator::into_iter`\n "}, {"sha": "6a012b214c504a6a0ccfa183092dd9c582717a3e", "filename": "src/test/ui/issues/issue-22312.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Ftest%2Fui%2Fissues%2Fissue-22312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Ftest%2Fui%2Fissues%2Fissue-22312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22312.stderr?ref=22d6c55cdf1772b0cfbed371dca16b3f3769117f", "patch": "@@ -1,4 +1,4 @@\n-error[E0605]: non-primitive cast: `Self` as `&dyn std::ops::Index<usize, Output=<Self as std::ops::Index<usize>>::Output>`\n+error[E0605]: non-primitive cast: `Self` as `&dyn std::ops::Index<usize, Output = <Self as std::ops::Index<usize>>::Output>`\n   --> $DIR/issue-22312.rs:11:24\n    |\n LL |         let indexer = &(*self as &Index<usize, Output = <Self as Index<usize>>::Output>);"}, {"sha": "7cf597d3a98f81b5d2c1c2448a4504b53478b1f1", "filename": "src/test/ui/issues/issue-55796.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr?ref=22d6c55cdf1772b0cfbed371dca16b3f3769117f", "patch": "@@ -16,8 +16,8 @@ LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n    = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<(dyn std::iter::Iterator<Item=<Self as Graph<'a>>::Node> + 'static)>\n-              found std::boxed::Box<dyn std::iter::Iterator<Item=<Self as Graph<'a>>::Node>>\n+           expected std::boxed::Box<(dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>\n+              found std::boxed::Box<dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node>>\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/issue-55796.rs:21:9\n@@ -37,8 +37,8 @@ LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n    = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<(dyn std::iter::Iterator<Item=<Self as Graph<'a>>::Node> + 'static)>\n-              found std::boxed::Box<dyn std::iter::Iterator<Item=<Self as Graph<'a>>::Node>>\n+           expected std::boxed::Box<(dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>\n+              found std::boxed::Box<dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node>>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a1169910ae7e2acafeff6ecaf45ecf7ad40f4f8a", "filename": "src/test/ui/retslot-cast.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Ftest%2Fui%2Fretslot-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Ftest%2Fui%2Fretslot-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fretslot-cast.stderr?ref=22d6c55cdf1772b0cfbed371dca16b3f3769117f", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/retslot-cast.rs:13:5\n    |\n LL |     inner(x)\n-   |     ^^^^^^^^ expected trait `std::iter::Iterator<Item=()>`, found trait `std::iter::Iterator<Item=()> + std::marker::Send`\n+   |     ^^^^^^^^ expected trait `std::iter::Iterator<Item = ()>`, found trait `std::iter::Iterator<Item = ()> + std::marker::Send`\n    |\n-   = note: expected type `std::option::Option<&dyn std::iter::Iterator<Item=()>>`\n-              found type `std::option::Option<&dyn std::iter::Iterator<Item=()> + std::marker::Send>`\n+   = note: expected type `std::option::Option<&dyn std::iter::Iterator<Item = ()>>`\n+              found type `std::option::Option<&dyn std::iter::Iterator<Item = ()> + std::marker::Send>`\n \n error: aborting due to previous error\n "}, {"sha": "d41086186f8d7826cc4f33c1b8c1d4adc14ddf00", "filename": "src/test/ui/typeck/issue-57673-ice-on-deref-of-boxed-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Ftest%2Fui%2Ftypeck%2Fissue-57673-ice-on-deref-of-boxed-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Ftest%2Fui%2Ftypeck%2Fissue-57673-ice-on-deref-of-boxed-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-57673-ice-on-deref-of-boxed-trait.stderr?ref=22d6c55cdf1772b0cfbed371dca16b3f3769117f", "patch": "@@ -7,7 +7,7 @@ LL |     *x\n    |     ^^ expected (), found trait std::iter::Iterator\n    |\n    = note: expected type `()`\n-              found type `(dyn std::iter::Iterator<Item=()> + 'static)`\n+              found type `(dyn std::iter::Iterator<Item = ()> + 'static)`\n \n error: aborting due to previous error\n "}, {"sha": "ce90f5b9d2486b61cc584b88f13193bc5b955305", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-default.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-default.stderr?ref=22d6c55cdf1772b0cfbed371dca16b3f3769117f", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `dyn Foo<(isize,), isize, Output=()>: Eq<dyn Foo<(isize,), Output=()>>` is not satisfied\n+error[E0277]: the trait bound `dyn Foo<(isize,), isize, Output = ()>: Eq<dyn Foo<(isize,), Output = ()>>` is not satisfied\n   --> $DIR/unboxed-closure-sugar-default.rs:21:5\n    |\n LL |     eq::< Foo<(isize,),isize,Output=()>,      Foo(isize)                      >();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Eq<dyn Foo<(isize,), Output=()>>` is not implemented for `dyn Foo<(isize,), isize, Output=()>`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Eq<dyn Foo<(isize,), Output = ()>>` is not implemented for `dyn Foo<(isize,), isize, Output = ()>`\n    |\n note: required by `eq`\n   --> $DIR/unboxed-closure-sugar-default.rs:14:1"}, {"sha": "857a32ca69e73a49b309f25654e65115eed6f4bf", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-equiv.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.stderr?ref=22d6c55cdf1772b0cfbed371dca16b3f3769117f", "patch": "@@ -1,9 +1,9 @@\n-error[E0277]: the trait bound `dyn Foo<(char,), Output=()>: Eq<dyn Foo<(), Output=()>>` is not satisfied\n+error[E0277]: the trait bound `dyn Foo<(char,), Output = ()>: Eq<dyn Foo<(), Output = ()>>` is not satisfied\n   --> $DIR/unboxed-closure-sugar-equiv.rs:43:5\n    |\n LL | /     eq::< Foo<(),Output=()>,\n LL | |           Foo(char)                                               >();\n-   | |___________________________________________________________________^ the trait `Eq<dyn Foo<(), Output=()>>` is not implemented for `dyn Foo<(char,), Output=()>`\n+   | |___________________________________________________________________^ the trait `Eq<dyn Foo<(), Output = ()>>` is not implemented for `dyn Foo<(char,), Output = ()>`\n    |\n note: required by `eq`\n   --> $DIR/unboxed-closure-sugar-equiv.rs:16:1"}, {"sha": "d0475bf08c38d2bb8fe602ac25f40ae2e1af2b4b", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22d6c55cdf1772b0cfbed371dca16b3f3769117f/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=22d6c55cdf1772b0cfbed371dca16b3f3769117f", "patch": "@@ -19,8 +19,8 @@ LL |     Box::new(items.iter())\n    |              ^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n    = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<(dyn std::iter::Iterator<Item=&T> + 'static)>\n-              found std::boxed::Box<dyn std::iter::Iterator<Item=&T>>\n+           expected std::boxed::Box<(dyn std::iter::Iterator<Item = &T> + 'static)>\n+              found std::boxed::Box<dyn std::iter::Iterator<Item = &T>>\n \n error: aborting due to previous error\n "}]}