{"sha": "2be32e8e9b92c7d3d1b984ade5ed062afd1b1f6c", "node_id": "C_kwDOAAsO6NoAKDJiZTMyZThlOWI5MmM3ZDNkMWI5ODRhZGU1ZWQwNjJhZmQxYjFmNmM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-09T22:00:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-09T22:00:32Z"}, "message": "Rollup merge of #100261 - luqmana:suggestions-overflow, r=lcnr\n\nSet tainted errors bit before emitting coerce suggestions.\n\nFixes #100246.\n\n#89576 basically got 99% of the way there but the match typechecking code (which calls `coerce_inner`) also needed a similar fix.", "tree": {"sha": "b70f0c8ec1f3f6c1e828427fc549eeae6418918a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b70f0c8ec1f3f6c1e828427fc549eeae6418918a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2be32e8e9b92c7d3d1b984ade5ed062afd1b1f6c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi8tkACRBK7hj4Ov3rIwAAR+wIABxIfLCJPcO0t2QAt+Vb5GHB\nA+uq7rgdXfeazhQoQxCzYtR2d6lM4LzDJy5LaSOu1bLlpj4jJZf3C5TbosoOMbUJ\nrdU2nWYijRNbI0KNQxKIGkajqZv0WM7bVo9y3EF6mw9DNHKfrvJe28QmR19GnJWA\nCgrqeiAx4uxHCvgAdV22X+4dcXNS3JE6jdWqbX3GGI46w7y/ikjfOQUkofhwKpCK\nGgXOcy82EJtZdjb9GlTyeuqhbDsSrjVqIdY/wREJ4+jVCcZwLfCS2AKYePpmVlod\nOWkTbDipLYGWiDu9AZMr2A7hDJxWVidwaPuYMFbqB5fNocb9Y+lwzUpl2SNat6E=\n=HCW7\n-----END PGP SIGNATURE-----\n", "payload": "tree b70f0c8ec1f3f6c1e828427fc549eeae6418918a\nparent 4add5148a577ac5c146eabab5b094025bb8b14eb\nparent 75cc9cddf7ebcbf00213bbdf6a9e2c78bc0876f1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660082432 +0200\ncommitter GitHub <noreply@github.com> 1660082432 +0200\n\nRollup merge of #100261 - luqmana:suggestions-overflow, r=lcnr\n\nSet tainted errors bit before emitting coerce suggestions.\n\nFixes #100246.\n\n#89576 basically got 99% of the way there but the match typechecking code (which calls `coerce_inner`) also needed a similar fix.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2be32e8e9b92c7d3d1b984ade5ed062afd1b1f6c", "html_url": "https://github.com/rust-lang/rust/commit/2be32e8e9b92c7d3d1b984ade5ed062afd1b1f6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2be32e8e9b92c7d3d1b984ade5ed062afd1b1f6c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4add5148a577ac5c146eabab5b094025bb8b14eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4add5148a577ac5c146eabab5b094025bb8b14eb", "html_url": "https://github.com/rust-lang/rust/commit/4add5148a577ac5c146eabab5b094025bb8b14eb"}, {"sha": "75cc9cddf7ebcbf00213bbdf6a9e2c78bc0876f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/75cc9cddf7ebcbf00213bbdf6a9e2c78bc0876f1", "html_url": "https://github.com/rust-lang/rust/commit/75cc9cddf7ebcbf00213bbdf6a9e2c78bc0876f1"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "49dc5532abdc97d762b135cc9fdcb4e88436fce3", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2be32e8e9b92c7d3d1b984ade5ed062afd1b1f6c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be32e8e9b92c7d3d1b984ade5ed062afd1b1f6c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=2be32e8e9b92c7d3d1b984ade5ed062afd1b1f6c", "patch": "@@ -1479,6 +1479,10 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 }\n             }\n             Err(coercion_error) => {\n+                // Mark that we've failed to coerce the types here to suppress\n+                // any superfluous errors we might encounter while trying to\n+                // emit or provide suggestions on how to fix the initial error.\n+                fcx.set_tainted_by_errors();\n                 let (expected, found) = if label_expression_as_expected {\n                     // In the case where this is a \"forced unit\", like\n                     // `break`, we want to call the `()` \"expected\""}, {"sha": "8f0b34bab0c87f4920f2a8fd2a87a1c98ab095cc", "filename": "src/test/ui/typeck/issue-100246.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2be32e8e9b92c7d3d1b984ade5ed062afd1b1f6c/src%2Ftest%2Fui%2Ftypeck%2Fissue-100246.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be32e8e9b92c7d3d1b984ade5ed062afd1b1f6c/src%2Ftest%2Fui%2Ftypeck%2Fissue-100246.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-100246.rs?ref=2be32e8e9b92c7d3d1b984ade5ed062afd1b1f6c", "patch": "@@ -0,0 +1,30 @@\n+#![recursion_limit = \"5\"] // To reduce noise\n+\n+//expect incompatible type error when ambiguous traits are in scope\n+//and not an overflow error on the span in the main function.\n+\n+struct Ratio<T>(T);\n+\n+pub trait Pow {\n+    fn pow(self) -> Self;\n+}\n+\n+impl<'a, T> Pow for &'a Ratio<T>\n+where\n+    &'a T: Pow,\n+{\n+    fn pow(self) -> Self {\n+        self\n+    }\n+}\n+\n+fn downcast<'a, W: ?Sized>() -> std::io::Result<&'a W> {\n+    todo!()\n+}\n+\n+struct Other;\n+\n+fn main() -> std::io::Result<()> {\n+    let other: Other = downcast()?;//~ERROR 28:24: 28:35: `?` operator has incompatible types\n+    Ok(())\n+}"}, {"sha": "8b77de94e89f866aee1c72f0c916d5927e3f151d", "filename": "src/test/ui/typeck/issue-100246.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2be32e8e9b92c7d3d1b984ade5ed062afd1b1f6c/src%2Ftest%2Fui%2Ftypeck%2Fissue-100246.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2be32e8e9b92c7d3d1b984ade5ed062afd1b1f6c/src%2Ftest%2Fui%2Ftypeck%2Fissue-100246.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-100246.stderr?ref=2be32e8e9b92c7d3d1b984ade5ed062afd1b1f6c", "patch": "@@ -0,0 +1,13 @@\n+error[E0308]: `?` operator has incompatible types\n+  --> $DIR/issue-100246.rs:28:24\n+   |\n+LL |     let other: Other = downcast()?;\n+   |                        ^^^^^^^^^^^ expected struct `Other`, found reference\n+   |\n+   = note: `?` operator cannot convert from `&_` to `Other`\n+   = note: expected struct `Other`\n+           found reference `&_`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}