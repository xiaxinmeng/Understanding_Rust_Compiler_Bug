{"sha": "e2834a20e7c5bbfb1502f582545153dc6b25a70c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyODM0YTIwZTdjNWJiZmIxNTAyZjU4MjU0NTE1M2RjNmIyNWE3MGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-21T07:49:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-21T07:49:05Z"}, "message": "Auto merge of #30413 - pnkfelix:fsk-span_note, r=Manishearth\n\nAdd note when item accessed from module via `m.i` rather than `m::i`.\n\n(I tried to make this somewhat future-proofed, in that the `UnresolvedNameContext` could be expanded in the future with other cases besides paths that are known to be modules.)\n\nThis supersedes PR #30356 ; since I'm responsible for a bunch of new code here, someone else should review it. :)", "tree": {"sha": "ae869265c97938169e0d268e8550c5e5f741f75f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae869265c97938169e0d268e8550c5e5f741f75f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2834a20e7c5bbfb1502f582545153dc6b25a70c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2834a20e7c5bbfb1502f582545153dc6b25a70c", "html_url": "https://github.com/rust-lang/rust/commit/e2834a20e7c5bbfb1502f582545153dc6b25a70c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2834a20e7c5bbfb1502f582545153dc6b25a70c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da4a21e91a620338e757e52b1011df4d194e9395", "url": "https://api.github.com/repos/rust-lang/rust/commits/da4a21e91a620338e757e52b1011df4d194e9395", "html_url": "https://github.com/rust-lang/rust/commit/da4a21e91a620338e757e52b1011df4d194e9395"}, {"sha": "04c05c7b01170a7ce3be58a6a2b4a437daf57dd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/04c05c7b01170a7ce3be58a6a2b4a437daf57dd6", "html_url": "https://github.com/rust-lang/rust/commit/04c05c7b01170a7ce3be58a6a2b4a437daf57dd6"}], "stats": {"total": 138, "additions": 133, "deletions": 5}, "files": [{"sha": "3f7327e700bddad3be52ef15f7957a6be775a2cb", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 73, "deletions": 5, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/e2834a20e7c5bbfb1502f582545153dc6b25a70c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2834a20e7c5bbfb1502f582545153dc6b25a70c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e2834a20e7c5bbfb1502f582545153dc6b25a70c", "patch": "@@ -179,7 +179,7 @@ pub enum ResolutionError<'a> {\n     /// error E0424: `self` is not available in a static method\n     SelfNotAvailableInStaticMethod,\n     /// error E0425: unresolved name\n-    UnresolvedName(&'a str, &'a str),\n+    UnresolvedName(&'a str, &'a str, UnresolvedNameContext),\n     /// error E0426: use of undeclared label\n     UndeclaredLabel(&'a str),\n     /// error E0427: cannot use `ref` binding mode with ...\n@@ -202,6 +202,21 @@ pub enum ResolutionError<'a> {\n     AttemptToUseNonConstantValueInConstant,\n }\n \n+/// Context of where `ResolutionError::UnresolvedName` arose.\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+pub enum UnresolvedNameContext {\n+    /// `PathIsMod(id)` indicates that a given path, used in\n+    /// expression context, actually resolved to a module rather than\n+    /// a value. The `id` attached to the variant is the node id of\n+    /// the erroneous path expression.\n+    PathIsMod(ast::NodeId),\n+\n+    /// `Other` means we have no extra information about the context\n+    /// of the unresolved name error. (Maybe we could eliminate all\n+    /// such cases; but for now, this is an information-free default.)\n+    Other,\n+}\n+\n fn resolve_error<'b, 'a: 'b, 'tcx: 'a>(resolver: &'b Resolver<'a, 'tcx>,\n                                        span: syntax::codemap::Span,\n                                        resolution_error: ResolutionError<'b>) {\n@@ -402,13 +417,46 @@ fn resolve_error<'b, 'a: 'b, 'tcx: 'a>(resolver: &'b Resolver<'a, 'tcx>,\n                       \"`self` is not available in a static method. Maybe a `self` argument is \\\n                        missing?\");\n         }\n-        ResolutionError::UnresolvedName(path, name) => {\n+        ResolutionError::UnresolvedName(path, msg, context) => {\n             span_err!(resolver.session,\n                       span,\n                       E0425,\n                       \"unresolved name `{}`{}\",\n                       path,\n-                      name);\n+                      msg);\n+\n+            match context {\n+                UnresolvedNameContext::Other => {} // no help available\n+                UnresolvedNameContext::PathIsMod(id) => {\n+                    let mut help_msg = String::new();\n+                    let parent_id = resolver.ast_map.get_parent_node(id);\n+                    if let Some(hir_map::Node::NodeExpr(e)) = resolver.ast_map.find(parent_id) {\n+                        match e.node {\n+                            ExprField(_, ident) => {\n+                                help_msg = format!(\"To reference an item from the \\\n+                                                    `{module}` module, use \\\n+                                                    `{module}::{ident}`\",\n+                                                   module = &*path,\n+                                                   ident = ident.node);\n+                            }\n+\n+                            ExprMethodCall(ident, _, _) => {\n+                                help_msg = format!(\"To call a function from the \\\n+                                                    `{module}` module, use \\\n+                                                    `{module}::{ident}(..)`\",\n+                                                   module = &*path,\n+                                                   ident = ident.node);\n+                            }\n+\n+                            _ => {} // no help available\n+                        }\n+                    }\n+\n+                    if !help_msg.is_empty() {\n+                        resolver.session.fileline_help(span, &help_msg);\n+                    }\n+                }\n+            }\n         }\n         ResolutionError::UndeclaredLabel(name) => {\n             span_err!(resolver.session,\n@@ -3539,13 +3587,33 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                         format!(\"to call `{}::{}`\", path_str, path_name),\n                                 };\n \n+                                let mut context =  UnresolvedNameContext::Other;\n                                 if !msg.is_empty() {\n-                                    msg = format!(\". Did you mean {}?\", msg)\n+                                    msg = format!(\". Did you mean {}?\", msg);\n+                                } else {\n+                                    // we check if this a module and if so, we display a help\n+                                    // message\n+                                    let name_path = path.segments.iter()\n+                                                        .map(|seg| seg.identifier.name)\n+                                                        .collect::<Vec<_>>();\n+                                    let current_module = self.current_module.clone();\n+\n+                                    match self.resolve_module_path(current_module,\n+                                                   &name_path[..],\n+                                                   UseLexicalScope,\n+                                                   expr.span,\n+                                                   PathSearch) {\n+                                        Success(_) => {\n+                                            context = UnresolvedNameContext::PathIsMod(expr.id);\n+                                        },\n+                                        _ => {},\n+                                    };\n                                 }\n \n                                 resolve_error(self,\n                                               expr.span,\n-                                              ResolutionError::UnresolvedName(&*path_name, &*msg));\n+                                              ResolutionError::UnresolvedName(\n+                                                  &*path_name, &*msg, context));\n                             }\n                         }\n                     }"}, {"sha": "ecf17fa84d7e32bfe2399d40aa7c96e843c1c6dc", "filename": "src/test/compile-fail/suggest-path-instead-of-mod-dot-item.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e2834a20e7c5bbfb1502f582545153dc6b25a70c/src%2Ftest%2Fcompile-fail%2Fsuggest-path-instead-of-mod-dot-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2834a20e7c5bbfb1502f582545153dc6b25a70c/src%2Ftest%2Fcompile-fail%2Fsuggest-path-instead-of-mod-dot-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsuggest-path-instead-of-mod-dot-item.rs?ref=e2834a20e7c5bbfb1502f582545153dc6b25a70c", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Beginners write `mod.item` when they should write `mod::item`.\n+// This tests that we suggest the latter when we encounter the former.\n+\n+pub mod a {\n+    pub const I: i32 = 1;\n+\n+    pub fn f() -> i32 { 2 }\n+\n+    pub mod b {\n+        pub const J: i32 = 3;\n+\n+        pub fn g() -> i32 { 4 }\n+    }\n+}\n+\n+fn h1() -> i32 {\n+    a.I\n+        //~^ ERROR E0425\n+        //~| HELP To reference an item from the `a` module, use `a::I`\n+}\n+\n+fn h2() -> i32 {\n+    a.g()\n+        //~^ ERROR E0425\n+        //~| HELP To call a function from the `a` module, use `a::g(..)`\n+}\n+\n+fn h3() -> i32 {\n+    a.b.J\n+        //~^ ERROR E0425\n+        //~| HELP To reference an item from the `a` module, use `a::b`\n+}\n+\n+fn h4() -> i32 {\n+    a::b.J\n+        //~^ ERROR E0425\n+        //~| HELP To reference an item from the `a::b` module, use `a::b::J`\n+}\n+\n+fn h5() -> i32 {\n+    a.b.f()\n+        //~^ ERROR E0425\n+        //~| HELP To reference an item from the `a` module, use `a::b`\n+}\n+\n+fn h6() -> i32 {\n+    a::b.f()\n+        //~^ ERROR E0425\n+        //~| HELP To call a function from the `a::b` module, use `a::b::f(..)`\n+}"}]}