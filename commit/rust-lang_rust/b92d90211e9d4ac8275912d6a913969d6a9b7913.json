{"sha": "b92d90211e9d4ac8275912d6a913969d6a9b7913", "node_id": "C_kwDOAAsO6NoAKGI5MmQ5MDIxMWU5ZDRhYzgyNzU5MTJkNmE5MTM5NjlkNmE5Yjc5MTM", "commit": {"author": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-01-10T21:57:22Z"}, "committer": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-01-14T07:29:56Z"}, "message": "change impl_trait_ref query to return EarlyBinder; remove bound_impl_trait_ref query; add EarlyBinder to impl_trait_ref in metadata", "tree": {"sha": "1fea3e3f0a262b1189c1d21e47f047066f922738", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fea3e3f0a262b1189c1d21e47f047066f922738"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b92d90211e9d4ac8275912d6a913969d6a9b7913", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b92d90211e9d4ac8275912d6a913969d6a9b7913", "html_url": "https://github.com/rust-lang/rust/commit/b92d90211e9d4ac8275912d6a913969d6a9b7913", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b92d90211e9d4ac8275912d6a913969d6a9b7913/comments", "author": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a160ce3a48c626bc30894ca50a2b1024c8f1d672", "url": "https://api.github.com/repos/rust-lang/rust/commits/a160ce3a48c626bc30894ca50a2b1024c8f1d672", "html_url": "https://github.com/rust-lang/rust/commit/a160ce3a48c626bc30894ca50a2b1024c8f1d672"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "248d7388410673c3da902461a252936750345e67", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b92d90211e9d4ac8275912d6a913969d6a9b7913/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92d90211e9d4ac8275912d6a913969d6a9b7913/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=b92d90211e9d4ac8275912d6a913969d6a9b7913", "patch": "@@ -247,7 +247,7 @@ fn check_hash_peq<'tcx>(\n                     return;\n                 }\n \n-                let trait_ref = cx.tcx.bound_impl_trait_ref(impl_id).expect(\"must be a trait implementation\");\n+                let trait_ref = cx.tcx.impl_trait_ref(impl_id).expect(\"must be a trait implementation\");\n \n                 // Only care about `impl PartialEq<Foo> for Foo`\n                 // For `impl PartialEq<B> for A, input_types is [A, B]\n@@ -295,7 +295,7 @@ fn check_ord_partial_ord<'tcx>(\n                     return;\n                 }\n \n-                let trait_ref = cx.tcx.bound_impl_trait_ref(impl_id).expect(\"must be a trait implementation\");\n+                let trait_ref = cx.tcx.impl_trait_ref(impl_id).expect(\"must be a trait implementation\");\n \n                 // Only care about `impl PartialOrd<Foo> for Foo`\n                 // For `impl PartialOrd<B> for A, input_types is [A, B]"}, {"sha": "2ef547526d4f7961027d20dbb77f7e846435b992", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b92d90211e9d4ac8275912d6a913969d6a9b7913/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92d90211e9d4ac8275912d6a913969d6a9b7913/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=b92d90211e9d4ac8275912d6a913969d6a9b7913", "patch": "@@ -55,7 +55,7 @@ impl<'tcx> LateLintPass<'tcx> for FallibleImplFrom {\n         // check for `impl From<???> for ..`\n         if_chain! {\n             if let hir::ItemKind::Impl(impl_) = &item.kind;\n-            if let Some(impl_trait_ref) = cx.tcx.bound_impl_trait_ref(item.owner_id.to_def_id());\n+            if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(item.owner_id);\n             if cx.tcx.is_diagnostic_item(sym::From, impl_trait_ref.skip_binder().def_id);\n             then {\n                 lint_impl_body(cx, item.span, impl_.items);"}, {"sha": "bd66ace4500a8d305f55ec1e430e1785e09d3348", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b92d90211e9d4ac8275912d6a913969d6a9b7913/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92d90211e9d4ac8275912d6a913969d6a9b7913/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=b92d90211e9d4ac8275912d6a913969d6a9b7913", "patch": "@@ -76,7 +76,7 @@ impl<'tcx> LateLintPass<'tcx> for FromOverInto {\n             && let Some(into_trait_seg) = hir_trait_ref.path.segments.last()\n             // `impl Into<target_ty> for self_ty`\n             && let Some(GenericArgs { args: [GenericArg::Type(target_ty)], .. }) = into_trait_seg.args\n-            && let Some(middle_trait_ref) = cx.tcx.bound_impl_trait_ref(item.owner_id.to_def_id()).map(ty::EarlyBinder::subst_identity)\n+            && let Some(middle_trait_ref) = cx.tcx.impl_trait_ref(item.owner_id).map(ty::EarlyBinder::subst_identity)\n             && cx.tcx.is_diagnostic_item(sym::Into, middle_trait_ref.def_id)\n             && !matches!(middle_trait_ref.substs.type_at(1).kind(), ty::Alias(ty::Opaque, _))\n         {"}, {"sha": "29d59c26d92c4a2f697399ff93df5c753bc89152", "filename": "clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b92d90211e9d4ac8275912d6a913969d6a9b7913/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92d90211e9d4ac8275912d6a913969d6a9b7913/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=b92d90211e9d4ac8275912d6a913969d6a9b7913", "patch": "@@ -101,7 +101,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n                             if name.ident.as_str() == \"MIN\";\n                             if let Some(const_id) = cx.typeck_results().type_dependent_def_id(cond_num_val.hir_id);\n                             if let Some(impl_id) = cx.tcx.impl_of_method(const_id);\n-                            if let None = cx.tcx.bound_impl_trait_ref(impl_id); // An inherent impl\n+                            if let None = cx.tcx.impl_trait_ref(impl_id); // An inherent impl\n                             if cx.tcx.type_of(impl_id).is_integral();\n                             then {\n                                 print_lint_and_sugg(cx, var_name, expr)\n@@ -114,7 +114,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n                             if name.ident.as_str() == \"min_value\";\n                             if let Some(func_id) = cx.typeck_results().type_dependent_def_id(func.hir_id);\n                             if let Some(impl_id) = cx.tcx.impl_of_method(func_id);\n-                            if let None = cx.tcx.bound_impl_trait_ref(impl_id); // An inherent impl\n+                            if let None = cx.tcx.impl_trait_ref(impl_id); // An inherent impl\n                             if cx.tcx.type_of(impl_id).is_integral();\n                             then {\n                                 print_lint_and_sugg(cx, var_name, expr)"}, {"sha": "06ecbce4e70e940bed5d941b41be29198817ef6c", "filename": "clippy_lints/src/methods/implicit_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b92d90211e9d4ac8275912d6a913969d6a9b7913/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92d90211e9d4ac8275912d6a913969d6a9b7913/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs?ref=b92d90211e9d4ac8275912d6a913969d6a9b7913", "patch": "@@ -53,7 +53,7 @@ pub fn is_clone_like(cx: &LateContext<'_>, method_name: &str, method_def_id: hir\n         \"to_vec\" => cx\n             .tcx\n             .impl_of_method(method_def_id)\n-            .filter(|&impl_did| cx.tcx.type_of(impl_did).is_slice() && cx.tcx.bound_impl_trait_ref(impl_did).is_none())\n+            .filter(|&impl_did| cx.tcx.type_of(impl_did).is_slice() && cx.tcx.impl_trait_ref(impl_did).is_none())\n             .is_some(),\n         _ => false,\n     }"}, {"sha": "219a9edd65768eeb3124f3c174375e5fce335058", "filename": "clippy_lints/src/methods/suspicious_splitn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b92d90211e9d4ac8275912d6a913969d6a9b7913/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92d90211e9d4ac8275912d6a913969d6a9b7913/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs?ref=b92d90211e9d4ac8275912d6a913969d6a9b7913", "patch": "@@ -12,7 +12,7 @@ pub(super) fn check(cx: &LateContext<'_>, method_name: &str, expr: &Expr<'_>, se\n         if count <= 1;\n         if let Some(call_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(call_id);\n-        if cx.tcx.bound_impl_trait_ref(impl_id).is_none();\n+        if cx.tcx.impl_trait_ref(impl_id).is_none();\n         let self_ty = cx.tcx.type_of(impl_id);\n         if self_ty.is_slice() || self_ty.is_str();\n         then {"}, {"sha": "6fd100762b49dd7caacd956f9b6596f050d053db", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b92d90211e9d4ac8275912d6a913969d6a9b7913/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92d90211e9d4ac8275912d6a913969d6a9b7913/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=b92d90211e9d4ac8275912d6a913969d6a9b7913", "patch": "@@ -175,7 +175,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx hir::ImplItem<'_>) {\n         // If the method is an impl for a trait, don't doc.\n         if let Some(cid) = cx.tcx.associated_item(impl_item.owner_id).impl_container(cx.tcx) {\n-            if cx.tcx.bound_impl_trait_ref(cid).is_some() {\n+            if cx.tcx.impl_trait_ref(cid).is_some() {\n                 return;\n             }\n         } else {"}, {"sha": "5a459548153aab242c7a0d4b6aa800e50d522fc2", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b92d90211e9d4ac8275912d6a913969d6a9b7913/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92d90211e9d4ac8275912d6a913969d6a9b7913/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=b92d90211e9d4ac8275912d6a913969d6a9b7913", "patch": "@@ -155,7 +155,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n         let container_id = assoc_item.container_id(cx.tcx);\n         let trait_def_id = match assoc_item.container {\n             TraitContainer => Some(container_id),\n-            ImplContainer => cx.tcx.bound_impl_trait_ref(container_id).map(|t| t.skip_binder().def_id),\n+            ImplContainer => cx.tcx.impl_trait_ref(container_id).map(|t| t.skip_binder().def_id),\n         };\n \n         if let Some(trait_def_id) = trait_def_id {"}, {"sha": "839c3a3815c29ef5a55b0bcf877b680916a41923", "filename": "clippy_lints/src/non_send_fields_in_send_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b92d90211e9d4ac8275912d6a913969d6a9b7913/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92d90211e9d4ac8275912d6a913969d6a9b7913/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs?ref=b92d90211e9d4ac8275912d6a913969d6a9b7913", "patch": "@@ -89,7 +89,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n             if let Some(trait_id) = trait_ref.trait_def_id();\n             if send_trait == trait_id;\n             if hir_impl.polarity == ImplPolarity::Positive;\n-            if let Some(ty_trait_ref) = cx.tcx.bound_impl_trait_ref(item.owner_id.to_def_id());\n+            if let Some(ty_trait_ref) = cx.tcx.impl_trait_ref(item.owner_id);\n             if let self_ty = ty_trait_ref.subst_identity().self_ty();\n             if let ty::Adt(adt_def, impl_trait_substs) = self_ty.kind();\n             then {"}, {"sha": "7b1d974f2f877e51f0c1d4fe29a89d57d383fb87", "filename": "clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b92d90211e9d4ac8275912d6a913969d6a9b7913/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92d90211e9d4ac8275912d6a913969d6a9b7913/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=b92d90211e9d4ac8275912d6a913969d6a9b7913", "patch": "@@ -244,7 +244,7 @@ impl<'tcx> LateLintPass<'tcx> for OnlyUsedInRecursion {\n             })) => {\n                 #[allow(trivial_casts)]\n                 if let Some(Node::Item(item)) = get_parent_node(cx.tcx, owner_id.into())\n-                    && let Some(trait_ref) = cx.tcx.bound_impl_trait_ref(item.owner_id.to_def_id()).map(|t| t.subst_identity())\n+                    && let Some(trait_ref) = cx.tcx.impl_trait_ref(item.owner_id).map(|t| t.subst_identity())\n                     && let Some(trait_item_id) = cx.tcx.associated_item(owner_id).trait_item_def_id\n                 {\n                     ("}, {"sha": "6ae9d9d63538006d7d4e759b17217a07d98424b5", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b92d90211e9d4ac8275912d6a913969d6a9b7913/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92d90211e9d4ac8275912d6a913969d6a9b7913/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=b92d90211e9d4ac8275912d6a913969d6a9b7913", "patch": "@@ -133,7 +133,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                 ref mut types_to_skip,\n                 ..\n             }) = self.stack.last_mut();\n-            if let Some(impl_trait_ref) = cx.tcx.bound_impl_trait_ref(impl_id.to_def_id());\n+            if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(impl_id);\n             then {\n                 // `self_ty` is the semantic self type of `impl <trait> for <type>`. This cannot be\n                 // `Self`."}]}