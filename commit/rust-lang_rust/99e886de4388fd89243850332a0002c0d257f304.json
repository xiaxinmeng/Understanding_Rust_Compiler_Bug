{"sha": "99e886de4388fd89243850332a0002c0d257f304", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZTg4NmRlNDM4OGZkODkyNDM4NTAzMzJhMDAwMmMwZDI1N2YzMDQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-29T11:32:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-29T11:32:32Z"}, "message": "Rollup merge of #59510 - varkor:rename-type_parameters, r=eddyb\n\nRename `type_parameters` to `generics` and so on\n\nSome old variable names had fallen through the generics generalisation pull requests.", "tree": {"sha": "e1a7bd0fd03dc3d0b35529b95281c69bf1f7b2f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1a7bd0fd03dc3d0b35529b95281c69bf1f7b2f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99e886de4388fd89243850332a0002c0d257f304", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcngJQCRBK7hj4Ov3rIwAAdHIIAF9nHGCcUodrf0Egl86ez5pE\n1EchcO6o17kc1GuD/lnK7K/C14/AlKwKB/nLcGrfCihsm8upFXpBMzg8qpeHmq0K\n0u1mMBtbEZcBM3vQWhg0z8GGNpr7OTP5cVvrlw5dFiHJedUccbncrxhaV0odvdMi\nVL6B4HZttNVn2evEBAgRfqWOEeHy9MBBZKw9AH0bVPEHNNL6yRjMeM4zUk/h+YW/\n/bgVm0kJfqBDDMZZ9k+WHUPBf9Z/ExZudotGbfCwcIEboyE9pTEKJWVFvy13TcDf\nVfXIiB2o+6w4Jx+05Hqr5cOPMfLbzbLzVUQy1/7siiYbWi9WX0DqTYqEBDzhBH0=\n=lned\n-----END PGP SIGNATURE-----\n", "payload": "tree e1a7bd0fd03dc3d0b35529b95281c69bf1f7b2f0\nparent 4aacc49ece36795fe5790e6ac62bc299bb5f762d\nparent 44813dfcb68c670f6ff8b7d79cea5f75b9f02ab9\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553859152 +0100\ncommitter GitHub <noreply@github.com> 1553859152 +0100\n\nRollup merge of #59510 - varkor:rename-type_parameters, r=eddyb\n\nRename `type_parameters` to `generics` and so on\n\nSome old variable names had fallen through the generics generalisation pull requests.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99e886de4388fd89243850332a0002c0d257f304", "html_url": "https://github.com/rust-lang/rust/commit/99e886de4388fd89243850332a0002c0d257f304", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99e886de4388fd89243850332a0002c0d257f304/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4aacc49ece36795fe5790e6ac62bc299bb5f762d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4aacc49ece36795fe5790e6ac62bc299bb5f762d", "html_url": "https://github.com/rust-lang/rust/commit/4aacc49ece36795fe5790e6ac62bc299bb5f762d"}, {"sha": "44813dfcb68c670f6ff8b7d79cea5f75b9f02ab9", "url": "https://api.github.com/repos/rust-lang/rust/commits/44813dfcb68c670f6ff8b7d79cea5f75b9f02ab9", "html_url": "https://github.com/rust-lang/rust/commit/44813dfcb68c670f6ff8b7d79cea5f75b9f02ab9"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "6689b0c26fb89ee561428e3429c7d93cca294db3", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99e886de4388fd89243850332a0002c0d257f304/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e886de4388fd89243850332a0002c0d257f304/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=99e886de4388fd89243850332a0002c0d257f304", "patch": "@@ -485,30 +485,30 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n         ItemKind::GlobalAsm(_) => {\n             visitor.visit_id(item.hir_id);\n         }\n-        ItemKind::Ty(ref typ, ref type_parameters) => {\n+        ItemKind::Ty(ref ty, ref generics) => {\n             visitor.visit_id(item.hir_id);\n-            visitor.visit_ty(typ);\n-            visitor.visit_generics(type_parameters)\n+            visitor.visit_ty(ty);\n+            visitor.visit_generics(generics)\n         }\n         ItemKind::Existential(ExistTy { ref generics, ref bounds, impl_trait_fn: _ }) => {\n             visitor.visit_id(item.hir_id);\n             walk_generics(visitor, generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n         }\n-        ItemKind::Enum(ref enum_definition, ref type_parameters) => {\n-            visitor.visit_generics(type_parameters);\n+        ItemKind::Enum(ref enum_definition, ref generics) => {\n+            visitor.visit_generics(generics);\n             // `visit_enum_def()` takes care of visiting the `Item`'s `HirId`.\n-            visitor.visit_enum_def(enum_definition, type_parameters, item.hir_id, item.span)\n+            visitor.visit_enum_def(enum_definition, generics, item.hir_id, item.span)\n         }\n         ItemKind::Impl(\n             ..,\n-            ref type_parameters,\n+            ref generics,\n             ref opt_trait_reference,\n             ref typ,\n             ref impl_item_refs\n         ) => {\n             visitor.visit_id(item.hir_id);\n-            visitor.visit_generics(type_parameters);\n+            visitor.visit_generics(generics);\n             walk_list!(visitor, visit_trait_ref, opt_trait_reference);\n             visitor.visit_ty(typ);\n             walk_list!(visitor, visit_impl_item_ref, impl_item_refs);"}, {"sha": "0e8ab2ba2a5a2ad9d5fd9920ba97304f74ba49b2", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99e886de4388fd89243850332a0002c0d257f304/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e886de4388fd89243850332a0002c0d257f304/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=99e886de4388fd89243850332a0002c0d257f304", "patch": "@@ -1040,7 +1040,7 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n \n impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n     fn is_root(&self, def_id: DefId) -> bool {\n-        !item_has_type_parameters(self.tcx, def_id) && match self.mode {\n+        !item_requires_monomorphization(self.tcx, def_id) && match self.mode {\n             MonoItemCollectionMode::Eager => {\n                 true\n             }\n@@ -1101,7 +1101,7 @@ impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n     }\n }\n \n-fn item_has_type_parameters<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+fn item_requires_monomorphization<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool {\n     let generics = tcx.generics_of(def_id);\n     generics.requires_monomorphization(tcx)\n }"}, {"sha": "7d4002525942ba543ca84820e7d34b948c8759b7", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99e886de4388fd89243850332a0002c0d257f304/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e886de4388fd89243850332a0002c0d257f304/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=99e886de4388fd89243850332a0002c0d257f304", "patch": "@@ -659,7 +659,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n     fn process_impl(\n         &mut self,\n         item: &'l ast::Item,\n-        type_parameters: &'l ast::Generics,\n+        generics: &'l ast::Generics,\n         trait_ref: &'l Option<ast::TraitRef>,\n         typ: &'l ast::Ty,\n         impl_items: &'l [ast::ImplItem],\n@@ -678,7 +678,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         if let &Some(ref trait_ref) = trait_ref {\n             self.process_path(trait_ref.ref_id, &trait_ref.path);\n         }\n-        self.process_generic_params(type_parameters, \"\", item.id);\n+        self.process_generic_params(generics, \"\", item.id);\n         for impl_item in impl_items {\n             let map = &self.tcx.hir();\n             self.process_impl_item(impl_item, map.local_def_id(item.id));"}, {"sha": "313ed19b945d1b93e5921a8b2200a78a702e0ca8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99e886de4388fd89243850332a0002c0d257f304/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e886de4388fd89243850332a0002c0d257f304/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=99e886de4388fd89243850332a0002c0d257f304", "patch": "@@ -2544,7 +2544,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             Neither if self.type_var_diverges(ty) => self.tcx.mk_diverging_default(),\n             Neither => return false,\n         };\n-        debug!(\"default_type_parameters: defaulting `{:?}` to `{:?}`\", ty, fallback);\n+        debug!(\"fallback_if_possible: defaulting `{:?}` to `{:?}`\", ty, fallback);\n         self.demand_eqtype(syntax_pos::DUMMY_SP, ty, fallback);\n         true\n     }"}, {"sha": "920270b5473cfd08d23e9ac9d3aa4a015c8d33fb", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99e886de4388fd89243850332a0002c0d257f304/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e886de4388fd89243850332a0002c0d257f304/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=99e886de4388fd89243850332a0002c0d257f304", "patch": "@@ -1,5 +1,5 @@\n use crate::check::{Inherited, FnCtxt};\n-use crate::constrained_type_params::{identify_constrained_type_params, Parameter};\n+use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n \n use crate::hir::def_id::DefId;\n use rustc::traits::{self, ObligationCauseCode};\n@@ -941,7 +941,7 @@ fn check_variances_for_type_defn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         .map(|(index, _)| Parameter(index as u32))\n                         .collect();\n \n-    identify_constrained_type_params(tcx,\n+    identify_constrained_generic_params(tcx,\n                                      &ty_predicates,\n                                      None,\n                                      &mut constrained_parameters);"}, {"sha": "5edb8c92a3bbca268dafb268cde4851b6c634a29", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99e886de4388fd89243850332a0002c0d257f304/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e886de4388fd89243850332a0002c0d257f304/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=99e886de4388fd89243850332a0002c0d257f304", "patch": "@@ -15,7 +15,7 @@\n //! crate as a kind of pass. This should eventually be factored away.\n \n use crate::astconv::{AstConv, Bounds};\n-use crate::constrained_type_params as ctp;\n+use crate::constrained_generic_params as ctp;\n use crate::check::intrinsic::intrisic_operation_unsafety;\n use crate::lint;\n use crate::middle::lang_items::SizedTraitLangItem;"}, {"sha": "18bf66ceb3501fc0d0ff14dbf49380f5a75d5535", "filename": "src/librustc_typeck/constrained_generic_params.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99e886de4388fd89243850332a0002c0d257f304/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e886de4388fd89243850332a0002c0d257f304/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs?ref=99e886de4388fd89243850332a0002c0d257f304", "patch": "@@ -86,7 +86,7 @@ impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n     }\n }\n \n-pub fn identify_constrained_type_params<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+pub fn identify_constrained_generic_params<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>,\n                                               predicates: &ty::GenericPredicates<'tcx>,\n                                               impl_trait_ref: Option<ty::TraitRef<'tcx>>,\n                                               input_parameters: &mut FxHashSet<Parameter>)", "previous_filename": "src/librustc_typeck/constrained_type_params.rs"}, {"sha": "2b72f43d36f729d8774bc5f5b73a9133bb2cab9f", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99e886de4388fd89243850332a0002c0d257f304/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e886de4388fd89243850332a0002c0d257f304/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=99e886de4388fd89243850332a0002c0d257f304", "patch": "@@ -8,7 +8,7 @@\n //! specialization errors. These things can (and probably should) be\n //! fixed, but for the moment it's easier to do these checks early.\n \n-use crate::constrained_type_params as ctp;\n+use crate::constrained_generic_params as ctp;\n use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::def_id::DefId;\n@@ -103,7 +103,7 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let impl_trait_ref = tcx.impl_trait_ref(impl_def_id);\n \n     let mut input_parameters = ctp::parameters_for_impl(impl_self_ty, impl_trait_ref);\n-    ctp::identify_constrained_type_params(\n+    ctp::identify_constrained_generic_params(\n         tcx, &impl_predicates, impl_trait_ref, &mut input_parameters);\n \n     // Disallow unconstrained lifetimes, but only if they appear in assoc types."}, {"sha": "cc90044573ce5de457d869f5fa41df3413cecc52", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99e886de4388fd89243850332a0002c0d257f304/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e886de4388fd89243850332a0002c0d257f304/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=99e886de4388fd89243850332a0002c0d257f304", "patch": "@@ -88,7 +88,7 @@ mod check;\n mod check_unused;\n mod coherence;\n mod collect;\n-mod constrained_type_params;\n+mod constrained_generic_params;\n mod structured_errors;\n mod impl_wf_check;\n mod namespace;"}, {"sha": "8f42d47e69cd3b57c8637a29e44baa2318f2e323", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/99e886de4388fd89243850332a0002c0d257f304/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e886de4388fd89243850332a0002c0d257f304/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=99e886de4388fd89243850332a0002c0d257f304", "patch": "@@ -244,24 +244,24 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             walk_list!(visitor, visit_foreign_item, &foreign_module.items);\n         }\n         ItemKind::GlobalAsm(ref ga) => visitor.visit_global_asm(ga),\n-        ItemKind::Ty(ref typ, ref type_parameters) => {\n+        ItemKind::Ty(ref typ, ref generics) => {\n             visitor.visit_ty(typ);\n-            visitor.visit_generics(type_parameters)\n+            visitor.visit_generics(generics)\n         }\n-        ItemKind::Existential(ref bounds, ref type_parameters) => {\n+        ItemKind::Existential(ref bounds, ref generics) => {\n             walk_list!(visitor, visit_param_bound, bounds);\n-            visitor.visit_generics(type_parameters)\n+            visitor.visit_generics(generics)\n         }\n-        ItemKind::Enum(ref enum_definition, ref type_parameters) => {\n-            visitor.visit_generics(type_parameters);\n-            visitor.visit_enum_def(enum_definition, type_parameters, item.id, item.span)\n+        ItemKind::Enum(ref enum_definition, ref generics) => {\n+            visitor.visit_generics(generics);\n+            visitor.visit_enum_def(enum_definition, generics, item.id, item.span)\n         }\n         ItemKind::Impl(_, _, _,\n-                 ref type_parameters,\n+                 ref generics,\n                  ref opt_trait_reference,\n                  ref typ,\n                  ref impl_items) => {\n-            visitor.visit_generics(type_parameters);\n+            visitor.visit_generics(generics);\n             walk_list!(visitor, visit_trait_ref, opt_trait_reference);\n             visitor.visit_ty(typ);\n             walk_list!(visitor, visit_impl_item, impl_items);"}]}