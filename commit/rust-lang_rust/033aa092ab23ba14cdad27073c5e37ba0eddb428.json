{"sha": "033aa092ab23ba14cdad27073c5e37ba0eddb428", "node_id": "C_kwDOAAsO6NoAKDAzM2FhMDkyYWIyM2JhMTRjZGFkMjcwNzNjNWUzN2JhMGVkZGI0Mjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-28T03:27:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-28T03:27:33Z"}, "message": "Auto merge of #110919 - JohnTitor:rollup-9phs2vx, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #109702 (configure --set support list as arguments)\n - #110620 (Document `const {}` syntax for `std::thread_local`.)\n - #110721 (format panic message only once)\n - #110881 (refactor(docs): remove macro resolution fallback)\n - #110893 (remove inline const deadcode in typeck)\n - #110898 (Remove unused std::sys_common::thread_local_key::Key)\n - #110909 (Skip `rustc` version detection on macOS)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "79fc618f753407aaadeb4de5aa1e7565e2311495", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79fc618f753407aaadeb4de5aa1e7565e2311495"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/033aa092ab23ba14cdad27073c5e37ba0eddb428", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/033aa092ab23ba14cdad27073c5e37ba0eddb428", "html_url": "https://github.com/rust-lang/rust/commit/033aa092ab23ba14cdad27073c5e37ba0eddb428", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/033aa092ab23ba14cdad27073c5e37ba0eddb428/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a3258fa52acdc4b63d0a49df2bd989153440d9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a3258fa52acdc4b63d0a49df2bd989153440d9b", "html_url": "https://github.com/rust-lang/rust/commit/9a3258fa52acdc4b63d0a49df2bd989153440d9b"}, {"sha": "00b9ce5a2ad81db72e77a0bdc63530f130cde482", "url": "https://api.github.com/repos/rust-lang/rust/commits/00b9ce5a2ad81db72e77a0bdc63530f130cde482", "html_url": "https://github.com/rust-lang/rust/commit/00b9ce5a2ad81db72e77a0bdc63530f130cde482"}], "stats": {"total": 227, "additions": 110, "deletions": 117}, "files": [{"sha": "3928520153c478896de9479a84a6046a2930fc7c", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/033aa092ab23ba14cdad27073c5e37ba0eddb428/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033aa092ab23ba14cdad27073c5e37ba0eddb428/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=033aa092ab23ba14cdad27073c5e37ba0eddb428", "patch": "@@ -221,12 +221,6 @@ fn typeck_with_fallback<'tcx>(\n             }))\n         } else if let Node::AnonConst(_) = node {\n             match tcx.hir().get(tcx.hir().parent_id(id)) {\n-                Node::Expr(&hir::Expr {\n-                    kind: hir::ExprKind::ConstBlock(ref anon_const), ..\n-                }) if anon_const.hir_id == id => Some(fcx.next_ty_var(TypeVariableOrigin {\n-                    kind: TypeVariableOriginKind::TypeInference,\n-                    span,\n-                })),\n                 Node::Ty(&hir::Ty { kind: hir::TyKind::Typeof(ref anon_const), .. })\n                     if anon_const.hir_id == id =>\n                 {"}, {"sha": "204834984a227b7acf1218b6182b19e87eb05be7", "filename": "library/std/src/sys_common/thread_local_key.rs", "status": "modified", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/033aa092ab23ba14cdad27073c5e37ba0eddb428/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033aa092ab23ba14cdad27073c5e37ba0eddb428/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs?ref=033aa092ab23ba14cdad27073c5e37ba0eddb428", "patch": "@@ -87,31 +87,6 @@ pub struct StaticKey {\n     dtor: Option<unsafe extern \"C\" fn(*mut u8)>,\n }\n \n-/// A type for a safely managed OS-based TLS slot.\n-///\n-/// This type allocates an OS TLS key when it is initialized and will deallocate\n-/// the key when it falls out of scope. When compared with `StaticKey`, this\n-/// type is entirely safe to use.\n-///\n-/// Implementations will likely, however, contain unsafe code as this type only\n-/// operates on `*mut u8`, a raw pointer.\n-///\n-/// # Examples\n-///\n-/// ```ignore (cannot-doctest-private-modules)\n-/// use tls::os::Key;\n-///\n-/// let key = Key::new(None);\n-/// assert!(key.get().is_null());\n-/// key.set(1 as *mut u8);\n-/// assert!(!key.get().is_null());\n-///\n-/// drop(key); // deallocate this TLS slot.\n-/// ```\n-pub struct Key {\n-    key: imp::Key,\n-}\n-\n /// Constant initialization value for static TLS keys.\n ///\n /// This value specifies no destructor by default.\n@@ -194,39 +169,3 @@ impl StaticKey {\n         }\n     }\n }\n-\n-impl Key {\n-    /// Creates a new managed OS TLS key.\n-    ///\n-    /// This key will be deallocated when the key falls out of scope.\n-    ///\n-    /// The argument provided is an optionally-specified destructor for the\n-    /// value of this TLS key. When a thread exits and the value for this key\n-    /// is non-null the destructor will be invoked. The TLS value will be reset\n-    /// to null before the destructor is invoked.\n-    ///\n-    /// Note that the destructor will not be run when the `Key` goes out of\n-    /// scope.\n-    #[inline]\n-    pub fn new(dtor: Option<unsafe extern \"C\" fn(*mut u8)>) -> Key {\n-        Key { key: unsafe { imp::create(dtor) } }\n-    }\n-\n-    /// See StaticKey::get\n-    #[inline]\n-    pub fn get(&self) -> *mut u8 {\n-        unsafe { imp::get(self.key) }\n-    }\n-\n-    /// See StaticKey::set\n-    #[inline]\n-    pub fn set(&self, val: *mut u8) {\n-        unsafe { imp::set(self.key, val) }\n-    }\n-}\n-\n-impl Drop for Key {\n-    fn drop(&mut self) {\n-        unsafe { imp::destroy(self.key) }\n-    }\n-}"}, {"sha": "6a44c65d91869fc7b3034f1d1c70ab2031159dc9", "filename": "library/std/src/sys_common/thread_local_key/tests.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/033aa092ab23ba14cdad27073c5e37ba0eddb428/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033aa092ab23ba14cdad27073c5e37ba0eddb428/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key%2Ftests.rs?ref=033aa092ab23ba14cdad27073c5e37ba0eddb428", "patch": "@@ -1,24 +1,6 @@\n-use super::{Key, StaticKey};\n+use super::StaticKey;\n use core::ptr;\n \n-fn assert_sync<T: Sync>() {}\n-fn assert_send<T: Send>() {}\n-\n-#[test]\n-fn smoke() {\n-    assert_sync::<Key>();\n-    assert_send::<Key>();\n-\n-    let k1 = Key::new(None);\n-    let k2 = Key::new(None);\n-    assert!(k1.get().is_null());\n-    assert!(k2.get().is_null());\n-    k1.set(ptr::invalid_mut(1));\n-    k2.set(ptr::invalid_mut(2));\n-    assert_eq!(k1.get() as usize, 1);\n-    assert_eq!(k2.get() as usize, 2);\n-}\n-\n #[test]\n fn statik() {\n     static K1: StaticKey = StaticKey::new(None);"}, {"sha": "3b7c31826b962bef1003c5be3668121514e5e4cb", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/033aa092ab23ba14cdad27073c5e37ba0eddb428/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033aa092ab23ba14cdad27073c5e37ba0eddb428/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=033aa092ab23ba14cdad27073c5e37ba0eddb428", "patch": "@@ -134,10 +134,28 @@ impl<T: 'static> fmt::Debug for LocalKey<T> {\n /// thread_local! {\n ///     pub static FOO: RefCell<u32> = RefCell::new(1);\n ///\n-///     #[allow(unused)]\n ///     static BAR: RefCell<f32> = RefCell::new(1.0);\n /// }\n-/// # fn main() {}\n+///\n+/// FOO.with(|foo| assert_eq!(*foo.borrow(), 1));\n+/// BAR.with(|bar| assert_eq!(*bar.borrow(), 1.0));\n+/// ```\n+///\n+/// This macro supports a special `const {}` syntax that can be used\n+/// when the initialization expression can be evaluated as a constant.\n+/// This can enable a more efficient thread local implementation that\n+/// can avoid lazy initialization. For types that do not\n+/// [need to be dropped][crate::mem::needs_drop], this can enable an\n+/// even more efficient implementation that does not need to\n+/// track any additional state.\n+///\n+/// ```\n+/// use std::cell::Cell;\n+/// thread_local! {\n+///     pub static FOO: Cell<u32> = const { Cell::new(1) };\n+/// }\n+///\n+/// FOO.with(|foo| assert_eq!(foo.get(), 1));\n /// ```\n ///\n /// See [`LocalKey` documentation][`std::thread::LocalKey`] for more"}, {"sha": "9c6c917ac4a2b223be904b571a6cd366da397a8e", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/033aa092ab23ba14cdad27073c5e37ba0eddb428/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/033aa092ab23ba14cdad27073c5e37ba0eddb428/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=033aa092ab23ba14cdad27073c5e37ba0eddb428", "patch": "@@ -209,19 +209,25 @@ def default_build_triple(verbose):\n     # install, use their preference. This fixes most issues with Windows builds\n     # being detected as GNU instead of MSVC.\n     default_encoding = sys.getdefaultencoding()\n-    try:\n-        version = subprocess.check_output([\"rustc\", \"--version\", \"--verbose\"],\n-                stderr=subprocess.DEVNULL)\n-        version = version.decode(default_encoding)\n-        host = next(x for x in version.split('\\n') if x.startswith(\"host: \"))\n-        triple = host.split(\"host: \")[1]\n-        if verbose:\n-            print(\"detected default triple {} from pre-installed rustc\".format(triple))\n-        return triple\n-    except Exception as e:\n+\n+    if sys.platform == 'darwin':\n         if verbose:\n-            print(\"pre-installed rustc not detected: {}\".format(e))\n+            print(\"not using rustc detection as it is unreliable on macOS\")\n             print(\"falling back to auto-detect\")\n+    else:\n+        try:\n+            version = subprocess.check_output([\"rustc\", \"--version\", \"--verbose\"],\n+                    stderr=subprocess.DEVNULL)\n+            version = version.decode(default_encoding)\n+            host = next(x for x in version.split('\\n') if x.startswith(\"host: \"))\n+            triple = host.split(\"host: \")[1]\n+            if verbose:\n+                print(\"detected default triple {} from pre-installed rustc\".format(triple))\n+            return triple\n+        except Exception as e:\n+            if verbose:\n+                print(\"pre-installed rustc not detected: {}\".format(e))\n+                print(\"falling back to auto-detect\")\n \n     required = sys.platform != 'win32'\n     ostype = require([\"uname\", \"-s\"], exit=required)"}, {"sha": "5ecda83ee66b12d86351424ff757f3cc432e2f35", "filename": "src/bootstrap/bootstrap_test.py", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/033aa092ab23ba14cdad27073c5e37ba0eddb428/src%2Fbootstrap%2Fbootstrap_test.py", "raw_url": "https://github.com/rust-lang/rust/raw/033aa092ab23ba14cdad27073c5e37ba0eddb428/src%2Fbootstrap%2Fbootstrap_test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap_test.py?ref=033aa092ab23ba14cdad27073c5e37ba0eddb428", "patch": "@@ -112,6 +112,14 @@ def test_set_top_level(self):\n         build = self.serialize_and_parse([\"--set\", \"profile=compiler\"])\n         self.assertEqual(build.get_toml(\"profile\"), 'compiler')\n \n+    def test_set_codegen_backends(self):\n+        build = self.serialize_and_parse([\"--set\", \"rust.codegen-backends=cranelift\"])\n+        self.assertNotEqual(build.config_toml.find(\"codegen-backends = ['cranelift']\"), -1)\n+        build = self.serialize_and_parse([\"--set\", \"rust.codegen-backends=cranelift,llvm\"])\n+        self.assertNotEqual(build.config_toml.find(\"codegen-backends = ['cranelift', 'llvm']\"), -1)\n+        build = self.serialize_and_parse([\"--enable-full-tools\"])\n+        self.assertNotEqual(build.config_toml.find(\"codegen-backends = ['llvm']\"), -1)\n+\n if __name__ == '__main__':\n     SUITE = unittest.TestSuite()\n     TEST_LOADER = unittest.TestLoader()"}, {"sha": "571062a3a6fd0b3b8aa50452807f1160994c1844", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/033aa092ab23ba14cdad27073c5e37ba0eddb428/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/033aa092ab23ba14cdad27073c5e37ba0eddb428/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=033aa092ab23ba14cdad27073c5e37ba0eddb428", "patch": "@@ -153,8 +153,7 @@ def v(*args):\n   \"experimental LLVM targets to build\")\n v(\"release-channel\", \"rust.channel\", \"the name of the release channel to build\")\n v(\"release-description\", \"rust.description\", \"optional descriptive string for version output\")\n-v(\"dist-compression-formats\", None,\n-  \"comma-separated list of compression formats to use\")\n+v(\"dist-compression-formats\", None, \"List of compression formats to use\")\n \n # Used on systems where \"cc\" is unavailable\n v(\"default-linker\", \"rust.default-linker\", \"the default linker\")\n@@ -168,8 +167,8 @@ def v(*args):\n v(\"tools\", None, \"List of extended tools will be installed\")\n v(\"codegen-backends\", None, \"List of codegen backends to build\")\n v(\"build\", \"build.build\", \"GNUs ./configure syntax LLVM build triple\")\n-v(\"host\", None, \"GNUs ./configure syntax LLVM host triples\")\n-v(\"target\", None, \"GNUs ./configure syntax LLVM target triples\")\n+v(\"host\", None, \"List of GNUs ./configure syntax LLVM host triples\")\n+v(\"target\", None, \"List of GNUs ./configure syntax LLVM target triples\")\n \n v(\"set\", None, \"set arbitrary key/value pairs in TOML configuration\")\n \n@@ -182,6 +181,11 @@ def err(msg):\n     print(\"configure: error: \" + msg)\n     sys.exit(1)\n \n+def is_value_list(key):\n+    for option in options:\n+        if option.name == key and option.desc.startswith('List of'):\n+            return True\n+    return False\n \n if '--help' in sys.argv or '-h' in sys.argv:\n     print('Usage: ./configure [options]')\n@@ -295,6 +299,8 @@ def set(key, value, config):\n     parts = key.split('.')\n     for i, part in enumerate(parts):\n         if i == len(parts) - 1:\n+            if is_value_list(part) and isinstance(value, str):\n+                value = value.split(',')\n             arr[part] = value\n         else:\n             if part not in arr:"}, {"sha": "7e173a171a83adb2d41900c6b86892d4ea024b9a", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/033aa092ab23ba14cdad27073c5e37ba0eddb428/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033aa092ab23ba14cdad27073c5e37ba0eddb428/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=033aa092ab23ba14cdad27073c5e37ba0eddb428", "patch": "@@ -1295,7 +1295,8 @@ impl LinkCollector<'_, '_> {\n                                 }\n                             }\n                         }\n-                        resolution_failure(self, diag, path_str, disambiguator, smallvec![err])\n+                        resolution_failure(self, diag, path_str, disambiguator, smallvec![err]);\n+                        return vec![];\n                     }\n                 }\n             }\n@@ -1331,13 +1332,14 @@ impl LinkCollector<'_, '_> {\n                     .fold(0, |acc, res| if let Ok(res) = res { acc + res.len() } else { acc });\n \n                 if len == 0 {\n-                    return resolution_failure(\n+                    resolution_failure(\n                         self,\n                         diag,\n                         path_str,\n                         disambiguator,\n                         candidates.into_iter().filter_map(|res| res.err()).collect(),\n                     );\n+                    return vec![];\n                 } else if len == 1 {\n                     candidates.into_iter().filter_map(|res| res.ok()).flatten().collect::<Vec<_>>()\n                 } else {\n@@ -1642,9 +1644,8 @@ fn resolution_failure(\n     path_str: &str,\n     disambiguator: Option<Disambiguator>,\n     kinds: SmallVec<[ResolutionFailure<'_>; 3]>,\n-) -> Vec<(Res, Option<DefId>)> {\n+) {\n     let tcx = collector.cx.tcx;\n-    let mut recovered_res = None;\n     report_diagnostic(\n         tcx,\n         BROKEN_INTRA_DOC_LINKS,\n@@ -1736,19 +1737,25 @@ fn resolution_failure(\n \n                         if !path_str.contains(\"::\") {\n                             if disambiguator.map_or(true, |d| d.ns() == MacroNS)\n-                                && let Some(&res) = collector.cx.tcx.resolutions(()).all_macro_rules\n-                                                             .get(&Symbol::intern(path_str))\n+                                && collector\n+                                    .cx\n+                                    .tcx\n+                                    .resolutions(())\n+                                    .all_macro_rules\n+                                    .get(&Symbol::intern(path_str))\n+                                    .is_some()\n                             {\n                                 diag.note(format!(\n                                     \"`macro_rules` named `{path_str}` exists in this crate, \\\n                                      but it is not in scope at this link's location\"\n                                 ));\n-                                recovered_res = res.try_into().ok().map(|res| (res, None));\n                             } else {\n                                 // If the link has `::` in it, assume it was meant to be an\n                                 // intra-doc link. Otherwise, the `[]` might be unrelated.\n-                                diag.help(\"to escape `[` and `]` characters, \\\n-                                           add '\\\\' before them like `\\\\[` or `\\\\]`\");\n+                                diag.help(\n+                                    \"to escape `[` and `]` characters, \\\n+                                           add '\\\\' before them like `\\\\[` or `\\\\]`\",\n+                                );\n                             }\n                         }\n \n@@ -1854,11 +1861,6 @@ fn resolution_failure(\n             }\n         },\n     );\n-\n-    match recovered_res {\n-        Some(r) => vec![r],\n-        None => Vec::new(),\n-    }\n }\n \n fn report_multiple_anchors(cx: &DocContext<'_>, diag_info: DiagnosticInfo<'_>) {"}, {"sha": "41505e72405d3f010c158416b1a2cd0a779ea662", "filename": "tests/rustdoc/issue-106142.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/033aa092ab23ba14cdad27073c5e37ba0eddb428/tests%2Frustdoc%2Fissue-106142.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033aa092ab23ba14cdad27073c5e37ba0eddb428/tests%2Frustdoc%2Fissue-106142.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-106142.rs?ref=033aa092ab23ba14cdad27073c5e37ba0eddb428", "patch": "@@ -0,0 +1,14 @@\n+// @has 'issue_106142/a/index.html'\n+// @count 'issue_106142/a/index.html' '//ul[@class=\"item-table\"]//li//a' 1\n+\n+#![allow(rustdoc::broken_intra_doc_links)]\n+\n+pub mod a {\n+    /// [`m`]\n+    pub fn f() {}\n+\n+    #[macro_export]\n+    macro_rules! m {\n+        () => {};\n+    }\n+}"}, {"sha": "6211bf961b3bcff4d4a5a4a0133269ba3e08e57c", "filename": "tests/ui/panics/fmt-only-once.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/033aa092ab23ba14cdad27073c5e37ba0eddb428/tests%2Fui%2Fpanics%2Ffmt-only-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033aa092ab23ba14cdad27073c5e37ba0eddb428/tests%2Fui%2Fpanics%2Ffmt-only-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanics%2Ffmt-only-once.rs?ref=033aa092ab23ba14cdad27073c5e37ba0eddb428", "patch": "@@ -0,0 +1,21 @@\n+// run-fail\n+// check-run-results\n+// exec-env:RUST_BACKTRACE=0\n+\n+// Test that we format the panic message only once.\n+// Regression test for https://github.com/rust-lang/rust/issues/110717\n+\n+use std::fmt;\n+\n+struct PrintOnFmt;\n+\n+impl fmt::Display for PrintOnFmt {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        eprintln!(\"fmt\");\n+        f.write_str(\"PrintOnFmt\")\n+    }\n+}\n+\n+fn main() {\n+    panic!(\"{}\", PrintOnFmt)\n+}"}, {"sha": "39bd06881ad051252c4041ca9f1009febe1c447f", "filename": "tests/ui/panics/fmt-only-once.run.stderr", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/033aa092ab23ba14cdad27073c5e37ba0eddb428/tests%2Fui%2Fpanics%2Ffmt-only-once.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033aa092ab23ba14cdad27073c5e37ba0eddb428/tests%2Fui%2Fpanics%2Ffmt-only-once.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanics%2Ffmt-only-once.run.stderr?ref=033aa092ab23ba14cdad27073c5e37ba0eddb428", "patch": "@@ -0,0 +1,3 @@\n+fmt\n+thread 'main' panicked at 'PrintOnFmt', $DIR/fmt-only-once.rs:20:5\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"}]}