{"sha": "eba2270a9cc1c0785cf42fa87fe154f425a2eea0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViYTIyNzBhOWNjMWMwNzg1Y2Y0MmZhODdmZTE1NGY0MjVhMmVlYTA=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2016-08-25T16:43:40Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2016-09-15T16:48:16Z"}, "message": "Add `pub fn ptr_eq(this: &Self, other: &Self) -> bool` to `Rc` and `Arc`.\n\nServo and Kuchiki have had helper functions doing this for some time.", "tree": {"sha": "c0d1099f1b0d3bd7e474046b3d9bab4c9e01a6b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0d1099f1b0d3bd7e474046b3d9bab4c9e01a6b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eba2270a9cc1c0785cf42fa87fe154f425a2eea0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eba2270a9cc1c0785cf42fa87fe154f425a2eea0", "html_url": "https://github.com/rust-lang/rust/commit/eba2270a9cc1c0785cf42fa87fe154f425a2eea0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eba2270a9cc1c0785cf42fa87fe154f425a2eea0/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16ff9e22cdb552fd10e6cee2eb22f0c5da6d7e79", "url": "https://api.github.com/repos/rust-lang/rust/commits/16ff9e22cdb552fd10e6cee2eb22f0c5da6d7e79", "html_url": "https://github.com/rust-lang/rust/commit/16ff9e22cdb552fd10e6cee2eb22f0c5da6d7e79"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "5f9ccd1820ca6181dcf1011b684e873026f15de9", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/eba2270a9cc1c0785cf42fa87fe154f425a2eea0/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba2270a9cc1c0785cf42fa87fe154f425a2eea0/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=eba2270a9cc1c0785cf42fa87fe154f425a2eea0", "patch": "@@ -331,6 +331,33 @@ impl<T: ?Sized> Arc<T> {\n             deallocate(ptr as *mut u8, size_of_val(&*ptr), align_of_val(&*ptr))\n         }\n     }\n+\n+    #[inline]\n+    #[unstable(feature = \"ptr_eq\",\n+               reason = \"newly added\",\n+               issue = \"36497\")]\n+    /// Return whether two `Arc` references point to the same value\n+    /// (not just values that compare equal).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ptr_eq)]\n+    ///\n+    /// use std::sync::Arc;\n+    ///\n+    /// let five = Arc::new(5);\n+    /// let same_five = five.clone();\n+    /// let other_five = Arc::new(5);\n+    ///\n+    /// assert!(Arc::ptr_eq(&five, &same_five));\n+    /// assert!(!Arc::ptr_eq(&five, &other_five));\n+    /// ```\n+    pub fn ptr_eq(this: &Self, other: &Self) -> bool {\n+        let this_ptr: *const ArcInner<T> = *this.ptr;\n+        let other_ptr: *const ArcInner<T> = *other.ptr;\n+        this_ptr == other_ptr\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1200,6 +1227,16 @@ mod tests {\n         let foo: Weak<usize> = Weak::new();\n         assert!(foo.upgrade().is_none());\n     }\n+\n+    #[test]\n+    fn test_ptr_eq() {\n+        let five = Arc::new(5);\n+        let same_five = five.clone();\n+        let other_five = Arc::new(5);\n+\n+        assert!(Arc::ptr_eq(&five, &same_five));\n+        assert!(!Arc::ptr_eq(&five, &other_five));\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "32e5587ff41282af0fc034eab987692727488ef8", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/eba2270a9cc1c0785cf42fa87fe154f425a2eea0/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba2270a9cc1c0785cf42fa87fe154f425a2eea0/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=eba2270a9cc1c0785cf42fa87fe154f425a2eea0", "patch": "@@ -376,6 +376,33 @@ impl<T: ?Sized> Rc<T> {\n             None\n         }\n     }\n+\n+    #[inline]\n+    #[unstable(feature = \"ptr_eq\",\n+               reason = \"newly added\",\n+               issue = \"36497\")]\n+    /// Return whether two `Rc` references point to the same value\n+    /// (not just values that compare equal).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ptr_eq)]\n+    ///\n+    /// use std::rc::Rc;\n+    ///\n+    /// let five = Rc::new(5);\n+    /// let same_five = five.clone();\n+    /// let other_five = Rc::new(5);\n+    ///\n+    /// assert!(Rc::ptr_eq(&five, &same_five));\n+    /// assert!(!Rc::ptr_eq(&five, &other_five));\n+    /// ```\n+    pub fn ptr_eq(this: &Self, other: &Self) -> bool {\n+        let this_ptr: *const RcBox<T> = *this.ptr;\n+        let other_ptr: *const RcBox<T> = *other.ptr;\n+        this_ptr == other_ptr\n+    }\n }\n \n impl<T: Clone> Rc<T> {\n@@ -1174,6 +1201,16 @@ mod tests {\n         let foo: Weak<usize> = Weak::new();\n         assert!(foo.upgrade().is_none());\n     }\n+\n+    #[test]\n+    fn test_ptr_eq() {\n+        let five = Rc::new(5);\n+        let same_five = five.clone();\n+        let other_five = Rc::new(5);\n+\n+        assert!(Rc::ptr_eq(&five, &same_five));\n+        assert!(!Rc::ptr_eq(&five, &other_five));\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}