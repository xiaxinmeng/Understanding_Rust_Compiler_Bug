{"sha": "7ec44e6c7b0e5fb2ddbc281aa74b515f8ea4e16b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYzQ0ZTZjN2IwZTVmYjJkZGJjMjgxYWE3NGI1MTVmOGVhNGUxNmI=", "commit": {"author": {"name": "ubsan", "email": "npmazzuca@gmail.com", "date": "2016-07-05T17:40:59Z"}, "committer": {"name": "ubsan", "email": "npmazzuca@gmail.com", "date": "2016-07-05T17:40:59Z"}, "message": "Fix tests", "tree": {"sha": "10844a448c209a084b9811ef07ed27b0fdceccaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10844a448c209a084b9811ef07ed27b0fdceccaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ec44e6c7b0e5fb2ddbc281aa74b515f8ea4e16b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec44e6c7b0e5fb2ddbc281aa74b515f8ea4e16b", "html_url": "https://github.com/rust-lang/rust/commit/7ec44e6c7b0e5fb2ddbc281aa74b515f8ea4e16b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ec44e6c7b0e5fb2ddbc281aa74b515f8ea4e16b/comments", "author": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e94ebf268385686299b6838b41e8e04a874259f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e94ebf268385686299b6838b41e8e04a874259f", "html_url": "https://github.com/rust-lang/rust/commit/9e94ebf268385686299b6838b41e8e04a874259f"}], "stats": {"total": 238, "additions": 138, "deletions": 100}, "files": [{"sha": "fd23598a84715bfdf3cce0159ee05cc13eece8cf", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 138, "deletions": 100, "changes": 238, "blob_url": "https://github.com/rust-lang/rust/blob/7ec44e6c7b0e5fb2ddbc281aa74b515f8ea4e16b/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec44e6c7b0e5fb2ddbc281aa74b515f8ea4e16b/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=7ec44e6c7b0e5fb2ddbc281aa74b515f8ea4e16b", "patch": "@@ -286,12 +286,13 @@ extern \"rust-intrinsic\" {\n     /// `transmute::<T, U>(t)` is semantically equivalent to the following:\n     ///\n     /// ```\n+    /// use std::{mem, ptr};\n     /// // assuming that T and U are the same size\n     /// unsafe fn transmute<T, U>(t: T) -> U {\n-    ///     let u: U = mem::uninitialized();\n-    ///     std::ptr::copy_nonoverlapping(&t as *const T as *const u8,\n-    ///                                   &mut u as *mut U as *mut u8,\n-    ///                                   mem::size_of::<T>());\n+    ///     let mut u: U = mem::uninitialized();\n+    ///     ptr::copy_nonoverlapping(&t as *const T as *const u8,\n+    ///                              &mut u as *mut U as *mut u8,\n+    ///                              mem::size_of::<T>());\n     ///     mem::forget(t);\n     ///     u\n     /// }\n@@ -310,88 +311,115 @@ extern \"rust-intrinsic\" {\n     /// through other means. Some more or less common uses, and a better way,\n     /// are as follows:\n     ///\n+    /// Turning a pointer into a `usize`:\n+    /// ```\n+    /// let ptr = &0;\n+    /// let ptr_num_transmute = mem::transmute::<&i32, usize>(ptr);\n+    /// // Use `as` casts instead\n+    /// let ptr_num_cast = ptr as *const i32 as usize;\n     /// ```\n-    /// use std::mem;\n-    ///\n-    /// // turning a pointer into a usize\n-    /// {\n-    ///     let ptr = &0;\n-    ///     let ptr_num_transmute = mem::transmute::<&i32, usize>(ptr);\n-    ///     // Use `as` casts instead\n-    ///     let ptr_num_cast = ptr as *const i32 as usize;\n-    /// }\n-    ///\n-    /// // Turning a *mut T into an &mut T\n-    /// {\n-    ///     let ptr: *mut i32 = &mut 0;\n-    ///     let ref_transmuted = mem::transmute::<*mut i32, &mut i32>(ptr);\n-    ///     // Use reborrows\n-    ///     let ref_casted = &mut *ptr;\n-    /// }\n     ///\n-    /// // Turning an &mut T into an &mut U\n-    /// {\n-    ///     let ptr = &mut 0;\n-    ///     let val_transmuted = mem::transmute::<&mut i32, &mut u32>(ptr);\n-    ///     // Now let's put together `as` and reborrowing\n-    ///     let val_casts = &mut *(ptr as *mut i32 as *mut u32);\n-    /// }\n+    /// Turning a `*mut T` into an `&mut T`:\n+    /// ```\n+    /// let ptr: *mut i32 = &mut 0;\n+    /// let ref_transmuted = mem::transmute::<*mut i32, &mut i32>(ptr);\n+    /// // Use reborrows\n+    /// let ref_casted = &mut *ptr;\n+    /// ```\n     ///\n-    /// // Turning an `&str` into an `&[u8]`\n-    /// {\n-    ///     // this is not a good way to do this.\n-    ///     let slice = unsafe { mem::transmute::<&str, &[u8]>(\"Rust\") };\n-    ///     assert_eq!(slice, [82, 117, 115, 116]);\n-    ///     // You could use `str::as_bytes`\n-    ///     let slice = \"Rust\".as_bytes();\n-    ///     assert_eq!(slice, [82, 117, 115, 116]);\n-    ///     // Or, just use a byte string, if you have control over the string\n-    ///     // literal\n-    ///     assert_eq!(b\"Rust\", [82, 117, 116, 116]);\n-    /// }\n+    /// Turning an `&mut T` into an `&mut U`:\n+    /// ```\n+    /// let ptr = &mut 0;\n+    /// let val_transmuted = mem::transmute::<&mut i32, &mut u32>(ptr);\n+    /// // Now let's put together `as` and reborrowing\n+    /// let val_casts = &mut *(ptr as *mut i32 as *mut u32);\n+    /// ```\n     ///\n-    /// // Turning a Vec<&T> into a Vec<Option<&T>>\n-    /// {\n-    ///     let store = [0, 1, 2, 3];\n-    ///     let v_orig = store.iter().collect::<Vec<&i32>>();\n-    ///     // Using transmute; Undefined Behavior\n-    ///     let v_transmuted = mem::transmute::<Vec<&i32>, Vec<Option<&i32>>>(\n-    ///         v_orig.clone());\n-    ///     // The suggested, safe way\n-    ///     let v_collected = v_orig.clone()\n-    ///                             .into_iter()\n-    ///                             .map(|r| Some(r))\n-    ///                             .collect::<Vec<Option<&i32>>>();\n-    ///     // The no-copy, unsafe way, still using transmute, but not UB\n-    ///     // This is equivalent to the original, but safer, and reuses the\n-    ///     // same Vec internals. Therefore the new inner type must have the\n-    ///     // exact same size, and the same or lesser alignment, as the old\n-    ///     // type. The same caveats exist for this method as transmute, for\n-    ///     // the original inner type (`&i32`) to the converted inner type\n-    ///     // (`Option<&i32>`), so read the nomicon page linked above.\n-    ///     let v_no_copy = Vec::from_raw_parts(v_orig.as_mut_ptr(),\n-    ///                                         v_orig.len(),\n-    ///                                         v_orig.capacity());\n-    ///     mem::forget(v_orig);\n-    /// }\n+    /// Turning an `&str` into an `&[u8]`:\n+    /// ```\n+    /// // this is not a good way to do this.\n+    /// let slice = unsafe { mem::transmute::<&str, &[u8]>(\"Rust\") };\n+    /// assert_eq!(slice, [82, 117, 115, 116]);\n+    /// // You could use `str::as_bytes`\n+    /// let slice = \"Rust\".as_bytes();\n+    /// assert_eq!(slice, [82, 117, 115, 116]);\n+    /// // Or, just use a byte string, if you have control over the string\n+    /// // literal\n+    /// assert_eq!(b\"Rust\", [82, 117, 116, 116]);\n+    /// ```\n     ///\n+    /// Turning a `Vec<&T>` into a `Vec<Option<&T>>`:\n+    /// ```\n+    /// let store = [0, 1, 2, 3];\n+    /// let v_orig = store.iter().collect::<Vec<&i32>>();\n+    /// // Using transmute: this is Undefined Behavior, and a bad idea\n+    /// // However, it is no-copy\n+    /// let v_transmuted = mem::transmute::<Vec<&i32>, Vec<Option<&i32>>>(\n+    ///     v_orig.clone());\n+    /// // This is the suggested, safe way\n+    /// // It does copy the entire Vector, though, into a new array\n+    /// let v_collected = v_orig.clone()\n+    ///                         .into_iter()\n+    ///                         .map(|r| Some(r))\n+    ///                         .collect::<Vec<Option<&i32>>>();\n+    /// // The no-copy, unsafe way, still using transmute, but not UB\n+    /// // This is equivalent to the original, but safer, and reuses the\n+    /// // same Vec internals. Therefore the new inner type must have the\n+    /// // exact same size, and the same or lesser alignment, as the old\n+    /// // type. The same caveats exist for this method as transmute, for\n+    /// // the original inner type (`&i32`) to the converted inner type\n+    /// // (`Option<&i32>`), so read the nomicon page linked above.\n+    /// let v_from_raw = Vec::from_raw_parts(v_orig.as_mut_ptr(),\n+    ///                                      v_orig.len(),\n+    ///                                      v_orig.capacity());\n+    /// mem::forget(v_orig);\n+    /// ```\n     ///\n-    /// // Copying an `&mut T` to reslice:\n-    /// {\n-    ///     fn split_at_mut_transmute<T>(slice: &mut [T], index: usize)\n-    ///                                  -> (&mut [T], &mut [T]) {\n-    ///         let len = slice.len();\n-    ///         assert!(index < len);\n+    /// Implemententing `split_at_mut`:\n+    /// ```\n+    /// use std::{slice, mem};\n+    /// // There are multiple ways to do this; and there are multiple problems\n+    /// // with the following, transmute, way\n+    /// fn split_at_mut_transmute<T>(slice: &mut [T], index: usize)\n+    ///                              -> (&mut [T], &mut [T]) {\n+    ///     let len = slice.len();\n+    ///     assert!(index < len);\n+    ///     unsafe {\n     ///         let slice2 = mem::transmute::<&mut [T], &mut [T]>(slice);\n-    ///         (slice[0..index], slice2[index..len])\n+    ///         // first: transmute is not typesafe; all it checks is that T and\n+    ///         // U are of the same size. Second, right here, you have two\n+    ///         // mutable references pointing to the same memory\n+    ///         (&mut slice[0..index], &mut slice2[index..len])\n     ///     }\n-    ///     // Again, use `as` and reborrowing\n-    ///     fn split_at_mut_casts<T>(slice: &mut [T], index: usize)\n-    ///                              -> (&mut [T], &mut [T]) {\n-    ///         let len = slice.len();\n-    ///         assert!(index < len);\n-    ///         let slice2 = &mut *(slice as *mut [T]); // actually typesafe!\n-    ///         (slice[0..index], slice2[index..len])\n+    /// }\n+    /// // This gets rid of the typesafety problems; `&mut *` will *only* give\n+    /// // you an &mut T from an &mut T or *mut T\n+    /// fn split_at_mut_casts<T>(slice: &mut [T], index: usize)\n+    ///                          -> (&mut [T], &mut [T]) {\n+    ///     let len = slice.len();\n+    ///     assert!(index < len);\n+    ///     unsafe {\n+    ///         let slice2 = &mut *(slice as *mut [T]);\n+    ///         // however, you still have two mutable references pointing to\n+    ///         // the same memory\n+    ///         (&mut slice[0..index], &mut slice2[index..len])\n+    ///     }\n+    /// }\n+    /// // This is how the standard library does it. This is the best method, if\n+    /// // you need to do something like this\n+    /// fn split_at_stdlib<T>(slice: &mut [T], index: usize)\n+    ///                       -> (&mut [T], &mut [T]) {\n+    ///     let len = self.len();\n+    ///     let ptr = self.as_mut_ptr();\n+    ///     unsafe {\n+    ///         assert!(mid <= len);\n+    ///         // This now has three mutable references pointing at the same\n+    ///         // memory. `slice`, the rvalue ret.0, and the rvalue ret.1.\n+    ///         // However, `slice` is never used after `let ptr = ...`, and so\n+    ///         // one can treat it as \"dead\", and therefore, you only have two\n+    ///         // real mutable slices.\n+    ///         (slice::from_raw_parts_mut(ptr, mid),\n+    ///          slice::from_raw_parts_mut(ptr.offset(mid as isize), len - mid))\n     ///     }\n     /// }\n     /// ```\n@@ -400,39 +428,49 @@ extern \"rust-intrinsic\" {\n     ///\n     /// There are valid uses of transmute, though they are few and far between.\n     ///\n+    /// Getting the bitpattern of a floating point type:\n+    /// ```\n+    /// let bitpattern = std::mem::transmute::<f32, u32>(1.0);\n+    /// assert_eq!(bitpattern, 0x3F800000);\n     /// ```\n-    /// // getting the bitpattern of a floating point type\n-    /// {\n-    ///     let x = mem::transmute::<f32, u32>(0.0/0.0)\n+    ///\n+    /// Turning a pointer into a function pointer (this isn't guaranteed to\n+    /// work in Rust, although, for example, Linux does make this guarantee):\n+    /// ```\n+    /// fn foo() -> i32 {\n+    ///     0\n     /// }\n+    /// let pointer = foo as *const ();\n+    /// let function = std::mem::transmute::<*const (), fn() -> i32>(pointer)\n+    /// assert_eq!(function(), 0);\n+    /// ```\n     ///\n+    /// Extending a lifetime, or shortening an invariant an invariant lifetime;\n+    /// this is advanced, very unsafe rust:\n+    /// ```\n+    /// use std::mem;\n     ///\n-    /// // turning a pointer into a function pointer\n-    /// {\n-    ///     // in file.c: `int foo(void) { ... }`\n-    ///     let handle: *mut libc::c_void = libc::dlopen(\n-    ///         b\"file.so\\0\".as_ptr() as *const libc::c_char, libc::RTLD_LAZY);\n-    ///     let foo: *mut libc::c_void = libc::dlsym(\n-    ///         handle,\n-    ///         b\"foo\\0\".as_ptr() as *const libc::c_char);\n-    ///     let foo = mem::transmute::<*mut libc::c_void,\n-    ///                                     extern fn() -> libc::c_int>(foo);\n-    ///     println!(\"{}\", foo());\n+    /// struct R<'a>(&'a i32);\n+    /// unsafe fn extend_lifetime<'b>(r: R<'b>) -> R<'static> {\n+    ///     mem::transmute::<R<'b>, R<'static>>(ptr);\n     /// }\n     ///\n-    ///\n-    /// // extending an invariant lifetime; this is advanced, very unsafe rust\n-    /// {\n-    ///     struct T<'a>(&'a i32);\n-    ///     let value = 0;\n-    ///     let t = T::new(&value);\n-    ///     let ptr = &mut t;\n-    ///     let ptr_extended = mem::transmute::<&mut T, &mut T<'static>>(ptr);\n+    /// unsafe fn shorten_invariant<'b, 'c>(r: &'b mut R<'static>)\n+    ///                                     -> &'b R<'c> {\n+    ///     let ref_to_original =\n+    ///         mem::transmute::<&'b mut R<'static>, &'b mut R<'c>>(\n+    ///             ref_to_extended);\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn transmute<T, U>(e: T) -> U;\n \n+    /// Gives the address for the return value of the enclosing function.\n+    ///\n+    /// Using this intrinsic in a function that does not use an out pointer\n+    /// will trigger a compiler error.\n+    pub fn return_address() -> *const u8;\n+\n     /// Returns `true` if the actual type given as `T` requires drop\n     /// glue; returns `false` if the actual type provided for `T`\n     /// implements `Copy`."}]}