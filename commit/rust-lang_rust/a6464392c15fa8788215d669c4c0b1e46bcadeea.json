{"sha": "a6464392c15fa8788215d669c4c0b1e46bcadeea", "node_id": "C_kwDOAAsO6NoAKGE2NDY0MzkyYzE1ZmE4Nzg4MjE1ZDY2OWM0YzBiMWU0NmJjYWRlZWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-04T09:35:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-04T09:35:56Z"}, "message": "Auto merge of #14483 - jhgg:fix/generate-delegate-methods-autoderef, r=Veykril\n\nassist: autoderef in generate delegate methods\n\nfixes #14438", "tree": {"sha": "cb7a3252f61e06e36509f9cced90efc3f329952f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb7a3252f61e06e36509f9cced90efc3f329952f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6464392c15fa8788215d669c4c0b1e46bcadeea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6464392c15fa8788215d669c4c0b1e46bcadeea", "html_url": "https://github.com/rust-lang/rust/commit/a6464392c15fa8788215d669c4c0b1e46bcadeea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6464392c15fa8788215d669c4c0b1e46bcadeea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8715401716311b93d53eac37198126a9d6690be", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8715401716311b93d53eac37198126a9d6690be", "html_url": "https://github.com/rust-lang/rust/commit/e8715401716311b93d53eac37198126a9d6690be"}, {"sha": "f6b0c19c56e4e046fa3dfb29f22bfd49b98ca338", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6b0c19c56e4e046fa3dfb29f22bfd49b98ca338", "html_url": "https://github.com/rust-lang/rust/commit/f6b0c19c56e4e046fa3dfb29f22bfd49b98ca338"}], "stats": {"total": 63, "additions": 55, "deletions": 8}, "files": [{"sha": "aecb3826e4756d7ccb1ed067b7ff20559477d2b3", "filename": "crates/ide-assists/src/handlers/generate_delegate_methods.rs", "status": "modified", "additions": 55, "deletions": 8, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/a6464392c15fa8788215d669c4c0b1e46bcadeea/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6464392c15fa8788215d669c4c0b1e46bcadeea/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs?ref=a6464392c15fa8788215d669c4c0b1e46bcadeea", "patch": "@@ -1,3 +1,5 @@\n+use std::collections::HashSet;\n+\n use hir::{self, HasCrate, HasSource, HasVisibility};\n use syntax::ast::{self, make, AstNode, HasGenericParams, HasName, HasVisibility as _};\n \n@@ -63,16 +65,23 @@ pub(crate) fn generate_delegate_methods(acc: &mut Assists, ctx: &AssistContext<'\n     };\n \n     let sema_field_ty = ctx.sema.resolve_type(&field_ty)?;\n-    let krate = sema_field_ty.krate(ctx.db());\n     let mut methods = vec![];\n-    sema_field_ty.iterate_assoc_items(ctx.db(), krate, |item| {\n-        if let hir::AssocItem::Function(f) = item {\n-            if f.self_param(ctx.db()).is_some() && f.is_visible_from(ctx.db(), current_module) {\n-                methods.push(f)\n+    let mut seen_names = HashSet::new();\n+\n+    for ty in sema_field_ty.autoderef(ctx.db()) {\n+        let krate = ty.krate(ctx.db());\n+        ty.iterate_assoc_items(ctx.db(), krate, |item| {\n+            if let hir::AssocItem::Function(f) = item {\n+                if f.self_param(ctx.db()).is_some()\n+                    && f.is_visible_from(ctx.db(), current_module)\n+                    && seen_names.insert(f.name(ctx.db()))\n+                {\n+                    methods.push(f)\n+                }\n             }\n-        }\n-        Option::<()>::None\n-    });\n+            Option::<()>::None\n+        });\n+    }\n \n     for method in methods {\n         let adt = ast::Adt::Struct(strukt.clone());\n@@ -314,6 +323,44 @@ impl<T> Person<T> {\n         );\n     }\n \n+    #[test]\n+    fn test_generates_delegate_autoderef() {\n+        check_assist(\n+            generate_delegate_methods,\n+            r#\"\n+//- minicore: deref\n+struct Age(u8);\n+impl Age {\n+    fn age(&self) -> u8 {\n+        self.0\n+    }\n+}\n+struct AgeDeref(Age);\n+impl core::ops::Deref for AgeDeref { type Target = Age; }\n+struct Person {\n+    ag$0e: AgeDeref,\n+}\n+impl Person {}\"#,\n+            r#\"\n+struct Age(u8);\n+impl Age {\n+    fn age(&self) -> u8 {\n+        self.0\n+    }\n+}\n+struct AgeDeref(Age);\n+impl core::ops::Deref for AgeDeref { type Target = Age; }\n+struct Person {\n+    age: AgeDeref,\n+}\n+impl Person {\n+    $0fn age(&self) -> u8 {\n+        self.age.age()\n+    }\n+}\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_generate_delegate_visibility() {\n         check_assist_not_applicable("}]}