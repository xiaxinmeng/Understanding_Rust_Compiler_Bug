{"sha": "7a7e47eab7323a8e122d9994b2936e50e42a1af2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhN2U0N2VhYjczMjNhOGUxMjJkOTk5NGIyOTM2ZTUwZTQyYTFhZjI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-18T20:53:19Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-18T20:53:19Z"}, "message": "Chalkify TraitRef", "tree": {"sha": "a2ad2b6faf8c708fc593546df64d489c117b61f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2ad2b6faf8c708fc593546df64d489c117b61f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a7e47eab7323a8e122d9994b2936e50e42a1af2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a7e47eab7323a8e122d9994b2936e50e42a1af2", "html_url": "https://github.com/rust-lang/rust/commit/7a7e47eab7323a8e122d9994b2936e50e42a1af2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a7e47eab7323a8e122d9994b2936e50e42a1af2/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b70bea0d7994cbe7b1e01e6b2e0f4ab3ac2c6fd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b70bea0d7994cbe7b1e01e6b2e0f4ab3ac2c6fd5", "html_url": "https://github.com/rust-lang/rust/commit/b70bea0d7994cbe7b1e01e6b2e0f4ab3ac2c6fd5"}], "stats": {"total": 172, "additions": 99, "deletions": 73}, "files": [{"sha": "67ec8e82a2d663a3ff04d3e07ad4a376202a6751", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=7a7e47eab7323a8e122d9994b2936e50e42a1af2", "patch": "@@ -1462,7 +1462,7 @@ impl TypeParam {\n             .into_iter()\n             .filter_map(|pred| match &pred.value {\n                 hir_ty::GenericPredicate::Implemented(trait_ref) => {\n-                    Some(Trait::from(trait_ref.trait_))\n+                    Some(Trait::from(trait_ref.hir_trait_id()))\n                 }\n                 _ => None,\n             })\n@@ -1757,8 +1757,8 @@ impl Type {\n \n     pub fn impls_trait(&self, db: &dyn HirDatabase, trait_: Trait, args: &[Type]) -> bool {\n         let trait_ref = hir_ty::TraitRef {\n-            trait_: trait_.id,\n-            substs: Substitution::build_for_def(db, trait_.id)\n+            trait_id: hir_ty::to_chalk_trait_id(trait_.id),\n+            substitution: Substitution::build_for_def(db, trait_.id)\n                 .push(self.ty.value.clone())\n                 .fill(args.iter().map(|t| t.ty.value.clone()))\n                 .build(),\n@@ -2023,7 +2023,7 @@ impl Type {\n             it.into_iter()\n                 .filter_map(|pred| match pred {\n                     hir_ty::GenericPredicate::Implemented(trait_ref) => {\n-                        Some(Trait::from(trait_ref.trait_))\n+                        Some(Trait::from(trait_ref.hir_trait_id()))\n                     }\n                     _ => None,\n                 })\n@@ -2067,7 +2067,7 @@ impl Type {\n                 match pred {\n                     GenericPredicate::Implemented(trait_ref) => {\n                         cb(type_.clone());\n-                        walk_substs(db, type_, &trait_ref.substs, cb);\n+                        walk_substs(db, type_, &trait_ref.substitution, cb);\n                     }\n                     _ => (),\n                 }"}, {"sha": "ad4e6f23bbdfa02e0b9905679b87f542ac74a754", "filename": "crates/hir_ty/src/autoderef.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs?ref=7a7e47eab7323a8e122d9994b2936e50e42a1af2", "patch": "@@ -12,7 +12,7 @@ use log::{info, warn};\n \n use crate::{\n     db::HirDatabase,\n-    to_assoc_type_id,\n+    to_assoc_type_id, to_chalk_trait_id,\n     traits::{InEnvironment, Solution},\n     utils::generics,\n     BoundVar, Canonical, DebruijnIndex, Interner, Obligation, Substitution, TraitRef, Ty, TyKind,\n@@ -68,7 +68,8 @@ fn deref_by_trait(\n         Substitution::build_for_generics(&generic_params).push(ty.value.value.clone()).build();\n \n     // Check that the type implements Deref at all\n-    let trait_ref = TraitRef { trait_: deref_trait, substs: parameters.clone() };\n+    let trait_ref =\n+        TraitRef { trait_id: to_chalk_trait_id(deref_trait), substitution: parameters.clone() };\n     let implements_goal = Canonical {\n         kinds: ty.value.kinds.clone(),\n         value: InEnvironment {"}, {"sha": "c6b4f37e58a91cd7dd4efec7f5475ac0b20a9030", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=7a7e47eab7323a8e122d9994b2936e50e42a1af2", "patch": "@@ -344,7 +344,7 @@ impl HirDisplay for Ty {\n                 };\n \n                 if let [GenericPredicate::Implemented(trait_ref), _] = predicates.as_ref() {\n-                    let trait_ = trait_ref.trait_;\n+                    let trait_ = trait_ref.hir_trait_id();\n                     if fn_traits(f.db.upcast(), trait_).any(|it| it == trait_) {\n                         return write!(f, \"{}\", ty_display);\n                     }\n@@ -670,7 +670,7 @@ fn write_bounds_like_dyn_trait(\n     for p in predicates.iter() {\n         match p {\n             GenericPredicate::Implemented(trait_ref) => {\n-                let trait_ = trait_ref.trait_;\n+                let trait_ = trait_ref.hir_trait_id();\n                 if !is_fn_trait {\n                     is_fn_trait = fn_traits(f.db.upcast(), trait_).any(|it| it == trait_);\n                 }\n@@ -685,7 +685,7 @@ fn write_bounds_like_dyn_trait(\n                 // existential) here, which is the only thing that's\n                 // possible in actual Rust, and hence don't print it\n                 write!(f, \"{}\", f.db.trait_data(trait_).name)?;\n-                if let [_, params @ ..] = &*trait_ref.substs.0 {\n+                if let [_, params @ ..] = &*trait_ref.substitution.0 {\n                     if is_fn_trait {\n                         if let Some(args) = params.first().and_then(|it| it.as_tuple()) {\n                             write!(f, \"(\")?;\n@@ -745,16 +745,16 @@ impl TraitRef {\n             return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n         }\n \n-        self.substs[0].hir_fmt(f)?;\n+        self.substitution[0].hir_fmt(f)?;\n         if use_as {\n             write!(f, \" as \")?;\n         } else {\n             write!(f, \": \")?;\n         }\n-        write!(f, \"{}\", f.db.trait_data(self.trait_).name)?;\n-        if self.substs.len() > 1 {\n+        write!(f, \"{}\", f.db.trait_data(self.hir_trait_id()).name)?;\n+        if self.substitution.len() > 1 {\n             write!(f, \"<\")?;\n-            f.write_joined(&self.substs[1..], \", \")?;\n+            f.write_joined(&self.substitution[1..], \", \")?;\n             write!(f, \">\")?;\n         }\n         Ok(())"}, {"sha": "b6ae4fc6559fced19561261dbc7537f990d9f0cf", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=7a7e47eab7323a8e122d9994b2936e50e42a1af2", "patch": "@@ -42,7 +42,7 @@ use super::{\n };\n use crate::{\n     db::HirDatabase, infer::diagnostics::InferenceDiagnostic, lower::ImplTraitLoweringMode,\n-    to_assoc_type_id, AliasTy, Interner, TyKind,\n+    to_assoc_type_id, to_chalk_trait_id, AliasTy, Interner, TyKind,\n };\n \n pub(crate) use unify::unify;\n@@ -394,7 +394,8 @@ impl<'a> InferenceContext<'a> {\n                     .push(inner_ty)\n                     .fill(params.iter().cloned())\n                     .build();\n-                let trait_ref = TraitRef { trait_, substs: substs.clone() };\n+                let trait_ref =\n+                    TraitRef { trait_id: to_chalk_trait_id(trait_), substitution: substs.clone() };\n                 let projection = ProjectionPredicate {\n                     ty: ty.clone(),\n                     projection_ty: ProjectionTy {"}, {"sha": "b86474ed415f09b8278d66e88d9ab1f10d4d1ebe", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=7a7e47eab7323a8e122d9994b2936e50e42a1af2", "patch": "@@ -8,7 +8,8 @@ use chalk_ir::{Mutability, TyVariableKind};\n use hir_def::lang_item::LangItemTarget;\n \n use crate::{\n-    autoderef, traits::Solution, Interner, Obligation, Substitution, TraitRef, Ty, TyKind,\n+    autoderef, to_chalk_trait_id, traits::Solution, Interner, Obligation, Substitution, TraitRef,\n+    Ty, TyKind,\n };\n \n use super::{InEnvironment, InferenceContext};\n@@ -140,7 +141,8 @@ impl<'a> InferenceContext<'a> {\n             .push(from_ty.clone())\n             .push(to_ty.clone())\n             .build();\n-        let trait_ref = TraitRef { trait_: coerce_unsized_trait, substs };\n+        let trait_ref =\n+            TraitRef { trait_id: to_chalk_trait_id(coerce_unsized_trait), substitution: substs };\n         let goal = InEnvironment::new(self.trait_env.clone(), Obligation::Trait(trait_ref));\n \n         let canonicalizer = self.canonicalizer();"}, {"sha": "93548b6c024f82dc3cc0c6de6fc43dc2285d5e90", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=7a7e47eab7323a8e122d9994b2936e50e42a1af2", "patch": "@@ -18,7 +18,7 @@ use crate::{\n     lower::lower_to_chalk_mutability,\n     method_resolution, op,\n     primitive::{self, UintTy},\n-    to_assoc_type_id,\n+    to_assoc_type_id, to_chalk_trait_id,\n     traits::{chalk::from_chalk, FnTrait, InEnvironment},\n     utils::{generics, variant_data, Generics},\n     AdtId, Binders, CallableDefId, FnPointer, FnSig, Interner, Obligation, Rawness, Scalar,\n@@ -90,8 +90,10 @@ impl<'a> InferenceContext<'a> {\n             Substitution::build_for_generics(&generic_params).push(ty.clone()).push(arg_ty).build();\n \n         let trait_env = Arc::clone(&self.trait_env);\n-        let implements_fn_trait =\n-            Obligation::Trait(TraitRef { trait_: fn_once_trait, substs: substs.clone() });\n+        let implements_fn_trait = Obligation::Trait(TraitRef {\n+            trait_id: to_chalk_trait_id(fn_once_trait),\n+            substitution: substs.clone(),\n+        });\n         let goal = self.canonicalizer().canonicalize_obligation(InEnvironment {\n             value: implements_fn_trait.clone(),\n             environment: trait_env,\n@@ -948,7 +950,10 @@ impl<'a> InferenceContext<'a> {\n                         // construct a TraitDef\n                         let substs =\n                             parameters.prefix(generics(self.db.upcast(), trait_.into()).len());\n-                        self.obligations.push(Obligation::Trait(TraitRef { trait_, substs }));\n+                        self.obligations.push(Obligation::Trait(TraitRef {\n+                            trait_id: to_chalk_trait_id(trait_),\n+                            substitution: substs,\n+                        }));\n                     }\n                 }\n                 CallableDefId::StructId(_) | CallableDefId::EnumVariantId(_) => {}"}, {"sha": "e15135fc1fe934b8247a91e443bdacce0e936512", "filename": "crates/hir_ty/src/infer/path.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=7a7e47eab7323a8e122d9994b2936e50e42a1af2", "patch": "@@ -9,7 +9,9 @@ use hir_def::{\n };\n use hir_expand::name::Name;\n \n-use crate::{method_resolution, Interner, Substitution, Ty, TyKind, ValueTyDefId};\n+use crate::{\n+    method_resolution, to_chalk_trait_id, Interner, Substitution, Ty, TyKind, ValueTyDefId,\n+};\n \n use super::{ExprOrPatId, InferenceContext, TraitRef};\n \n@@ -165,7 +167,7 @@ impl<'a> InferenceContext<'a> {\n         segment: PathSegment<'_>,\n         id: ExprOrPatId,\n     ) -> Option<(ValueNs, Option<Substitution>)> {\n-        let trait_ = trait_ref.trait_;\n+        let trait_ = trait_ref.hir_trait_id();\n         let item =\n             self.db.trait_data(trait_).items.iter().map(|(_name, id)| (*id)).find_map(|item| {\n                 match item {\n@@ -200,7 +202,7 @@ impl<'a> InferenceContext<'a> {\n         };\n \n         self.write_assoc_resolution(id, item);\n-        Some((def, Some(trait_ref.substs)))\n+        Some((def, Some(trait_ref.substitution)))\n     }\n \n     fn resolve_ty_assoc_item(\n@@ -255,8 +257,8 @@ impl<'a> InferenceContext<'a> {\n                             .fill(std::iter::repeat_with(|| self.table.new_type_var()))\n                             .build();\n                         self.obligations.push(super::Obligation::Trait(TraitRef {\n-                            trait_,\n-                            substs: trait_substs.clone(),\n+                            trait_id: to_chalk_trait_id(trait_),\n+                            substitution: trait_substs.clone(),\n                         }));\n                         Some(trait_substs)\n                     }"}, {"sha": "f5ea096982bd9b5e87316ba4c0521872a7dea933", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=7a7e47eab7323a8e122d9994b2936e50e42a1af2", "patch": "@@ -390,9 +390,9 @@ impl InferenceTable {\n     ) -> bool {\n         match (pred1, pred2) {\n             (GenericPredicate::Implemented(tr1), GenericPredicate::Implemented(tr2))\n-                if tr1.trait_ == tr2.trait_ =>\n+                if tr1.trait_id == tr2.trait_id =>\n             {\n-                self.unify_substs(&tr1.substs, &tr2.substs, depth + 1)\n+                self.unify_substs(&tr1.substitution, &tr2.substitution, depth + 1)\n             }\n             (GenericPredicate::Projection(proj1), GenericPredicate::Projection(proj2))\n                 if proj1.projection_ty.associated_ty_id == proj2.projection_ty.associated_ty_id =>"}, {"sha": "3859dbfa14d4c6a31a7ced10b8d71e1f6b49ff87", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=7a7e47eab7323a8e122d9994b2936e50e42a1af2", "patch": "@@ -58,6 +58,8 @@ pub type ClosureId = chalk_ir::ClosureId<Interner>;\n pub type OpaqueTyId = chalk_ir::OpaqueTyId<Interner>;\n pub type PlaceholderIndex = chalk_ir::PlaceholderIndex;\n \n+pub type ChalkTraitId = chalk_ir::TraitId<Interner>;\n+\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum Lifetime {\n     Parameter(LifetimeParamId),\n@@ -81,7 +83,10 @@ pub struct ProjectionTy {\n \n impl ProjectionTy {\n     pub fn trait_ref(&self, db: &dyn HirDatabase) -> TraitRef {\n-        TraitRef { trait_: self.trait_(db), substs: self.substitution.clone() }\n+        TraitRef {\n+            trait_id: to_chalk_trait_id(self.trait_(db)),\n+            substitution: self.substitution.clone(),\n+        }\n     }\n \n     fn trait_(&self, db: &dyn HirDatabase) -> TraitId {\n@@ -493,31 +498,33 @@ impl<T: TypeWalk> TypeWalk for Binders<T> {\n }\n \n /// A trait with type parameters. This includes the `Self`, so this represents a concrete type implementing the trait.\n-/// Name to be bikeshedded: TraitBound? TraitImplements?\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct TraitRef {\n-    /// FIXME name?\n-    pub trait_: TraitId,\n-    pub substs: Substitution,\n+    pub trait_id: ChalkTraitId,\n+    pub substitution: Substitution,\n }\n \n impl TraitRef {\n-    pub fn self_ty(&self) -> &Ty {\n-        &self.substs[0]\n+    pub fn self_type_parameter(&self) -> &Ty {\n+        &self.substitution[0]\n+    }\n+\n+    pub fn hir_trait_id(&self) -> TraitId {\n+        from_chalk_trait_id(self.trait_id)\n     }\n }\n \n impl TypeWalk for TraitRef {\n     fn walk(&self, f: &mut impl FnMut(&Ty)) {\n-        self.substs.walk(f);\n+        self.substitution.walk(f);\n     }\n \n     fn walk_mut_binders(\n         &mut self,\n         f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n         binders: DebruijnIndex,\n     ) {\n-        self.substs.walk_mut_binders(f, binders);\n+        self.substitution.walk_mut_binders(f, binders);\n     }\n }\n \n@@ -784,7 +791,7 @@ impl Ty {\n \n     /// If this is a `dyn Trait`, returns that trait.\n     pub fn dyn_trait(&self) -> Option<TraitId> {\n-        self.dyn_trait_ref().map(|it| it.trait_)\n+        self.dyn_trait_ref().map(|it| it.trait_id).map(from_chalk_trait_id)\n     }\n \n     fn builtin_deref(&self) -> Option<Ty> {\n@@ -868,8 +875,8 @@ impl Ty {\n                             // Parameters will be walked outside, and projection predicate is not used.\n                             // So just provide the Future trait.\n                             let impl_bound = GenericPredicate::Implemented(TraitRef {\n-                                trait_: future_trait,\n-                                substs: Substitution::empty(),\n+                                trait_id: to_chalk_trait_id(future_trait),\n+                                substitution: Substitution::empty(),\n                             });\n                             Some(vec![impl_bound])\n                         } else {\n@@ -1158,3 +1165,11 @@ pub fn to_placeholder_idx(db: &dyn HirDatabase, id: TypeParamId) -> PlaceholderI\n         idx: salsa::InternKey::as_intern_id(&interned_id).as_usize(),\n     }\n }\n+\n+pub fn to_chalk_trait_id(id: TraitId) -> ChalkTraitId {\n+    chalk_ir::TraitId(salsa::InternKey::as_intern_id(&id))\n+}\n+\n+pub fn from_chalk_trait_id(id: ChalkTraitId) -> TraitId {\n+    salsa::InternKey::from_intern_id(id.0)\n+}"}, {"sha": "5d950a017554374fa2dd7badd4a6b0b8cafa3f28", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=7a7e47eab7323a8e122d9994b2936e50e42a1af2", "patch": "@@ -27,7 +27,7 @@ use stdx::impl_from;\n \n use crate::{\n     db::HirDatabase,\n-    to_assoc_type_id, to_placeholder_idx,\n+    to_assoc_type_id, to_chalk_trait_id, to_placeholder_idx,\n     traits::chalk::{Interner, ToChalk},\n     utils::{\n         all_super_trait_refs, associated_type_by_name_including_super_traits, generics,\n@@ -360,7 +360,7 @@ impl<'a> TyLoweringContext<'a> {\n                             // FIXME handle type parameters on the segment\n                             TyKind::Alias(AliasTy::Projection(ProjectionTy {\n                                 associated_ty_id: to_assoc_type_id(associated_ty),\n-                                substitution: super_trait_ref.substs,\n+                                substitution: super_trait_ref.substitution,\n                             }))\n                             .intern(&Interner)\n                         }\n@@ -470,9 +470,9 @@ impl<'a> TyLoweringContext<'a> {\n                                         \"there should be generics if there's a generic param\",\n                                     ),\n                                 );\n-                                t.substs.clone().subst_bound_vars(&s)\n+                                t.substitution.clone().subst_bound_vars(&s)\n                             }\n-                            TypeParamLoweringMode::Variable => t.substs.clone(),\n+                            TypeParamLoweringMode::Variable => t.substitution.clone(),\n                         };\n                         // We need to shift in the bound vars, since\n                         // associated_type_shorthand_candidates does not do that\n@@ -641,7 +641,7 @@ impl<'a> TyLoweringContext<'a> {\n         if let Some(self_ty) = explicit_self_ty {\n             substs.0[0] = self_ty;\n         }\n-        TraitRef { trait_: resolved, substs }\n+        TraitRef { trait_id: to_chalk_trait_id(resolved), substitution: substs }\n     }\n \n     fn lower_trait_ref(\n@@ -743,7 +743,7 @@ impl<'a> TyLoweringContext<'a> {\n                 };\n                 let projection_ty = ProjectionTy {\n                     associated_ty_id: to_assoc_type_id(associated_ty),\n-                    substitution: super_trait_ref.substs,\n+                    substitution: super_trait_ref.substitution,\n                 };\n                 let mut preds = SmallVec::with_capacity(\n                     binding.type_ref.as_ref().map_or(0, |_| 1) + binding.bounds.len(),\n@@ -820,8 +820,8 @@ pub fn associated_type_shorthand_candidates<R>(\n                     == TypeParamProvenance::TraitSelf\n                 {\n                     let trait_ref = TraitRef {\n-                        trait_: trait_id,\n-                        substs: Substitution::bound_vars(&generics, DebruijnIndex::INNERMOST),\n+                        trait_id: to_chalk_trait_id(trait_id),\n+                        substitution: Substitution::bound_vars(&generics, DebruijnIndex::INNERMOST),\n                     };\n                     traits_.push(trait_ref);\n                 }\n@@ -832,7 +832,7 @@ pub fn associated_type_shorthand_candidates<R>(\n     };\n \n     for t in traits_from_env.into_iter().flat_map(move |t| all_super_trait_refs(db, t)) {\n-        let data = db.trait_data(t.trait_);\n+        let data = db.trait_data(t.hir_trait_id());\n \n         for (name, assoc_id) in &data.items {\n             match assoc_id {\n@@ -926,7 +926,7 @@ pub(crate) fn trait_environment_query(\n                 continue;\n             }\n             if let GenericPredicate::Implemented(tr) = &pred {\n-                traits_in_scope.push((tr.self_ty().clone(), tr.trait_));\n+                traits_in_scope.push((tr.self_type_parameter().clone(), tr.hir_trait_id()));\n             }\n             let program_clause: chalk_ir::ProgramClause<Interner> =\n                 pred.clone().to_chalk(db).cast(&Interner);\n@@ -950,7 +950,7 @@ pub(crate) fn trait_environment_query(\n         // inside consts or type aliases)\n         cov_mark::hit!(trait_self_implements_self);\n         let substs = Substitution::type_params(db, trait_id);\n-        let trait_ref = TraitRef { trait_: trait_id, substs };\n+        let trait_ref = TraitRef { trait_id: to_chalk_trait_id(trait_id), substitution: substs };\n         let pred = GenericPredicate::Implemented(trait_ref);\n         let program_clause: chalk_ir::ProgramClause<Interner> =\n             pred.clone().to_chalk(db).cast(&Interner);"}, {"sha": "01b78fb445ec685ba62e8e98b433aec642030024", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=7a7e47eab7323a8e122d9994b2936e50e42a1af2", "patch": "@@ -19,6 +19,7 @@ use crate::{\n     db::HirDatabase,\n     from_foreign_def_id,\n     primitive::{self, FloatTy, IntTy, UintTy},\n+    to_chalk_trait_id,\n     utils::all_super_traits,\n     AdtId, Canonical, DebruijnIndex, FnPointer, FnSig, ForeignDefId, InEnvironment, Interner,\n     Scalar, Substitution, TraitEnvironment, TraitRef, Ty, TyKind, TypeWalk,\n@@ -101,7 +102,7 @@ impl TraitImpls {\n         for (_module_id, module_data) in crate_def_map.modules() {\n             for impl_id in module_data.scope.impls() {\n                 let target_trait = match db.impl_trait(impl_id) {\n-                    Some(tr) => tr.value.trait_,\n+                    Some(tr) => tr.value.hir_trait_id(),\n                     None => continue,\n                 };\n                 let self_ty = db.impl_self_ty(impl_id);\n@@ -773,7 +774,7 @@ fn generic_implements_goal(\n         .fill_with_bound_vars(DebruijnIndex::INNERMOST, kinds.len())\n         .build();\n     kinds.extend(iter::repeat(chalk_ir::TyVariableKind::General).take(substs.len() - 1));\n-    let trait_ref = TraitRef { trait_, substs };\n+    let trait_ref = TraitRef { trait_id: to_chalk_trait_id(trait_), substitution: substs };\n     let obligation = super::Obligation::Trait(trait_ref);\n     Canonical { kinds: kinds.into(), value: InEnvironment::new(env, obligation) }\n }"}, {"sha": "a7287dea1c10e05654b68e58ce80f657e17b77e1", "filename": "crates/hir_ty/src/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits.rs?ref=7a7e47eab7323a8e122d9994b2936e50e42a1af2", "patch": "@@ -137,7 +137,7 @@ pub(crate) fn trait_solve_query(\n     goal: Canonical<InEnvironment<Obligation>>,\n ) -> Option<Solution> {\n     let _p = profile::span(\"trait_solve_query\").detail(|| match &goal.value.value {\n-        Obligation::Trait(it) => db.trait_data(it.trait_).name.to_string(),\n+        Obligation::Trait(it) => db.trait_data(it.hir_trait_id()).name.to_string(),\n         Obligation::Projection(_) => \"projection\".to_string(),\n     });\n     log::info!(\"trait_solve_query({})\", goal.value.value.display(db));"}, {"sha": "bac70f5aa4260c7c431f7dc9217f0a93ba45a573", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=7a7e47eab7323a8e122d9994b2936e50e42a1af2", "patch": "@@ -19,7 +19,7 @@ use crate::{\n     display::HirDisplay,\n     from_assoc_type_id,\n     method_resolution::{TyFingerprint, ALL_FLOAT_FPS, ALL_INT_FPS},\n-    to_assoc_type_id,\n+    to_assoc_type_id, to_chalk_trait_id,\n     utils::generics,\n     BoundVar, CallableDefId, CallableSig, DebruijnIndex, FnDefId, GenericPredicate,\n     ProjectionPredicate, ProjectionTy, Substitution, TraitRef, Ty, TyKind,\n@@ -219,9 +219,9 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                     // for<T> <Self> [Future<Self>, Future::Output<Self> = T]\n                     //     ^1  ^0            ^0                    ^0      ^1\n                     let impl_bound = GenericPredicate::Implemented(TraitRef {\n-                        trait_: future_trait,\n+                        trait_id: to_chalk_trait_id(future_trait),\n                         // Self type as the first parameter.\n-                        substs: Substitution::single(\n+                        substitution: Substitution::single(\n                             TyKind::BoundVar(BoundVar {\n                                 debruijn: DebruijnIndex::INNERMOST,\n                                 index: 0,\n@@ -546,7 +546,7 @@ fn impl_def_datum(\n \n     let generic_params = generics(db.upcast(), impl_id.into());\n     let bound_vars = Substitution::bound_vars(&generic_params, DebruijnIndex::INNERMOST);\n-    let trait_ = trait_ref.trait_;\n+    let trait_ = trait_ref.hir_trait_id();\n     let impl_type = if impl_id.lookup(db.upcast()).container.krate() == krate {\n         rust_ir::ImplType::Local\n     } else {\n@@ -614,7 +614,7 @@ fn type_alias_associated_ty_value(\n     let trait_ref = db.impl_trait(impl_id).expect(\"assoc ty value should not exist\").value; // we don't return any assoc ty values if the impl'd trait can't be resolved\n \n     let assoc_ty = db\n-        .trait_data(trait_ref.trait_)\n+        .trait_data(trait_ref.hir_trait_id())\n         .associated_type_by_name(&type_alias_data.name)\n         .expect(\"assoc ty value should not exist\"); // validated when building the impl data as well\n     let ty = db.ty(type_alias.into());"}, {"sha": "0086ce1e9d6ed286711377a9cdc07a3a18445d04", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=7a7e47eab7323a8e122d9994b2936e50e42a1af2", "patch": "@@ -239,15 +239,15 @@ impl ToChalk for TraitRef {\n     type Chalk = chalk_ir::TraitRef<Interner>;\n \n     fn to_chalk(self: TraitRef, db: &dyn HirDatabase) -> chalk_ir::TraitRef<Interner> {\n-        let trait_id = self.trait_.to_chalk(db);\n-        let substitution = self.substs.to_chalk(db);\n+        let trait_id = self.trait_id;\n+        let substitution = self.substitution.to_chalk(db);\n         chalk_ir::TraitRef { trait_id, substitution }\n     }\n \n     fn from_chalk(db: &dyn HirDatabase, trait_ref: chalk_ir::TraitRef<Interner>) -> Self {\n-        let trait_ = from_chalk(db, trait_ref.trait_id);\n+        let trait_id = trait_ref.trait_id;\n         let substs = from_chalk(db, trait_ref.substitution);\n-        TraitRef { trait_, substs }\n+        TraitRef { trait_id, substitution: substs }\n     }\n }\n \n@@ -515,17 +515,16 @@ pub(super) fn generic_predicate_to_inline_bound(\n     // We don't have a special type for this, but Chalk does.\n     match pred {\n         GenericPredicate::Implemented(trait_ref) => {\n-            if &trait_ref.substs[0] != self_ty {\n+            if &trait_ref.substitution[0] != self_ty {\n                 // we can only convert predicates back to type bounds if they\n                 // have the expected self type\n                 return None;\n             }\n-            let args_no_self = trait_ref.substs[1..]\n+            let args_no_self = trait_ref.substitution[1..]\n                 .iter()\n                 .map(|ty| ty.clone().to_chalk(db).cast(&Interner))\n                 .collect();\n-            let trait_bound =\n-                rust_ir::TraitBound { trait_id: trait_ref.trait_.to_chalk(db), args_no_self };\n+            let trait_bound = rust_ir::TraitBound { trait_id: trait_ref.trait_id, args_no_self };\n             Some(rust_ir::InlineBound::TraitBound(trait_bound))\n         }\n         GenericPredicate::Projection(proj) => {"}, {"sha": "b66243d48878acadb0ac829e1fa5a703767d8be1", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7e47eab7323a8e122d9994b2936e50e42a1af2/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=7a7e47eab7323a8e122d9994b2936e50e42a1af2", "patch": "@@ -55,9 +55,9 @@ fn direct_super_trait_refs(db: &dyn HirDatabase, trait_ref: &TraitRef) -> Vec<Tr\n     // lifetime problems, but since there usually shouldn't be more than a\n     // few direct traits this should be fine (we could even use some kind of\n     // SmallVec if performance is a concern)\n-    let generic_params = db.generic_params(trait_ref.trait_.into());\n+    let generic_params = db.generic_params(trait_ref.hir_trait_id().into());\n     let trait_self = match generic_params.find_trait_self_param() {\n-        Some(p) => TypeParamId { parent: trait_ref.trait_.into(), local_id: p },\n+        Some(p) => TypeParamId { parent: trait_ref.hir_trait_id().into(), local_id: p },\n         None => return Vec::new(),\n     };\n     db.generic_predicates_for_param(trait_self)\n@@ -68,7 +68,7 @@ fn direct_super_trait_refs(db: &dyn HirDatabase, trait_ref: &TraitRef) -> Vec<Tr\n                 _ => None,\n             })\n         })\n-        .map(|pred| pred.subst(&trait_ref.substs))\n+        .map(|pred| pred.subst(&trait_ref.substitution))\n         .collect()\n }\n \n@@ -108,7 +108,7 @@ pub(super) fn all_super_trait_refs(db: &dyn HirDatabase, trait_ref: TraitRef) ->\n         // yeah this is quadratic, but trait hierarchies should be flat\n         // enough that this doesn't matter\n         for tt in direct_super_trait_refs(db, t) {\n-            if !result.iter().any(|tr| tr.trait_ == tt.trait_) {\n+            if !result.iter().any(|tr| tr.trait_id == tt.trait_id) {\n                 result.push(tt);\n             }\n         }\n@@ -123,7 +123,7 @@ pub(super) fn associated_type_by_name_including_super_traits(\n     name: &Name,\n ) -> Option<(TraitRef, TypeAliasId)> {\n     all_super_trait_refs(db, trait_ref).into_iter().find_map(|t| {\n-        let assoc_type = db.trait_data(t.trait_).associated_type_by_name(name)?;\n+        let assoc_type = db.trait_data(t.hir_trait_id()).associated_type_by_name(name)?;\n         Some((t, assoc_type))\n     })\n }"}]}