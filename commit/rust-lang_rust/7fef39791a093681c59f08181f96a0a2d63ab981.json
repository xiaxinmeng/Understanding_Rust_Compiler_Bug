{"sha": "7fef39791a093681c59f08181f96a0a2d63ab981", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZWYzOTc5MWEwOTM2ODFjNTlmMDgxODFmOTZhMGEyZDYzYWI5ODE=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-07T22:04:05Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-17T23:16:41Z"}, "message": "Make get_lints be a static function\n\nThis moves from calling get_lints on instantiated pass objects to the\nraw object", "tree": {"sha": "aeec291ce2631b859eb955f5881be1c0be0cfa7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeec291ce2631b859eb955f5881be1c0be0cfa7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fef39791a093681c59f08181f96a0a2d63ab981", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fef39791a093681c59f08181f96a0a2d63ab981", "html_url": "https://github.com/rust-lang/rust/commit/7fef39791a093681c59f08181f96a0a2d63ab981", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fef39791a093681c59f08181f96a0a2d63ab981/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68c07db80a90fd0fc3be03474555dc685864bcb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/68c07db80a90fd0fc3be03474555dc685864bcb6", "html_url": "https://github.com/rust-lang/rust/commit/68c07db80a90fd0fc3be03474555dc685864bcb6"}], "stats": {"total": 99, "additions": 42, "deletions": 57}, "files": [{"sha": "373ee2568a47c576c30ce005e92c5cd49b99ea6d", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7fef39791a093681c59f08181f96a0a2d63ab981/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fef39791a093681c59f08181f96a0a2d63ab981/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=7fef39791a093681c59f08181f96a0a2d63ab981", "patch": "@@ -22,7 +22,7 @@ use crate::hir::intravisit as hir_visit;\n use crate::hir::intravisit::Visitor;\n use crate::hir::map::{definitions::DisambiguatedDefPathData, DefPathData};\n use crate::lint::{EarlyLintPass, LateLintPass, EarlyLintPassObject, LateLintPassObject};\n-use crate::lint::{LintArray, Level, Lint, LintId, LintPass, LintBuffer};\n+use crate::lint::{Level, Lint, LintId, LintPass, LintBuffer};\n use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::lint::levels::{LintLevelSets, LintLevelsBuilder};\n use crate::middle::privacy::AccessLevels;\n@@ -1307,10 +1307,6 @@ impl LintPass for LateLintPassObjects<'_> {\n     fn name(&self) -> &'static str {\n         panic!()\n     }\n-\n-    fn get_lints(&self) -> LintArray {\n-        panic!()\n-    }\n }\n \n macro_rules! expand_late_lint_pass_impl_methods {\n@@ -1477,10 +1473,6 @@ impl LintPass for EarlyLintPassObjects<'_> {\n     fn name(&self) -> &'static str {\n         panic!()\n     }\n-\n-    fn get_lints(&self) -> LintArray {\n-        panic!()\n-    }\n }\n \n macro_rules! expand_early_lint_pass_impl_methods {"}, {"sha": "1b34808ef30ac960b048c7aa4253231719472529", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7fef39791a093681c59f08181f96a0a2d63ab981/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fef39791a093681c59f08181f96a0a2d63ab981/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=7fef39791a093681c59f08181f96a0a2d63ab981", "patch": "@@ -178,14 +178,6 @@ pub type LintArray = Vec<&'static Lint>;\n \n pub trait LintPass {\n     fn name(&self) -> &'static str;\n-\n-    /// Gets descriptions of the lints this `LintPass` object can emit.\n-    ///\n-    /// N.B., there is no enforcement that the object only emits lints it registered.\n-    /// And some `rustc` internal `LintPass`es register lints to be emitted by other\n-    /// parts of the compiler. If you want enforced access restrictions for your\n-    /// `Lint`, make it a private `static` item in its own module.\n-    fn get_lints(&self) -> LintArray;\n }\n \n /// Implements `LintPass for $name` with the given list of `Lint` statics.\n@@ -194,7 +186,9 @@ macro_rules! impl_lint_pass {\n     ($name:ident => [$($lint:expr),* $(,)?]) => {\n         impl LintPass for $name {\n             fn name(&self) -> &'static str { stringify!($name) }\n-            fn get_lints(&self) -> LintArray { $crate::lint_array!($($lint),*) }\n+        }\n+        impl $name {\n+            pub fn get_lints() -> LintArray { $crate::lint_array!($($lint),*) }\n         }\n     };\n }\n@@ -332,6 +326,12 @@ macro_rules! declare_combined_late_lint_pass {\n                     $($passes: $constructor,)*\n                 }\n             }\n+\n+            $v fn get_lints() -> LintArray {\n+                let mut lints = Vec::new();\n+                $(lints.extend_from_slice(&$passes::get_lints());)*\n+                lints\n+            }\n         }\n \n         impl<'a, 'tcx> LateLintPass<'a, 'tcx> for $name {\n@@ -342,12 +342,6 @@ macro_rules! declare_combined_late_lint_pass {\n             fn name(&self) -> &'static str {\n                 panic!()\n             }\n-\n-            fn get_lints(&self) -> LintArray {\n-                let mut lints = Vec::new();\n-                $(lints.extend_from_slice(&self.$passes.get_lints());)*\n-                lints\n-            }\n         }\n     )\n }\n@@ -459,6 +453,12 @@ macro_rules! declare_combined_early_lint_pass {\n                     $($passes: $constructor,)*\n                 }\n             }\n+\n+            $v fn get_lints() -> LintArray {\n+                let mut lints = Vec::new();\n+                $(lints.extend_from_slice(&$passes::get_lints());)*\n+                lints\n+            }\n         }\n \n         impl EarlyLintPass for $name {\n@@ -469,12 +469,6 @@ macro_rules! declare_combined_early_lint_pass {\n             fn name(&self) -> &'static str {\n                 panic!()\n             }\n-\n-            fn get_lints(&self) -> LintArray {\n-                let mut lints = Vec::new();\n-                $(lints.extend_from_slice(&self.$passes.get_lints());)*\n-                lints\n-            }\n         }\n     )\n }"}, {"sha": "fdea437d37fbc5ed138f676b3c5b2d8ca5b18100", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fef39791a093681c59f08181f96a0a2d63ab981/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fef39791a093681c59f08181f96a0a2d63ab981/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=7fef39791a093681c59f08181f96a0a2d63ab981", "patch": "@@ -291,19 +291,19 @@ pub fn register_plugins<'a>(\n         syntax_exts,\n         early_lint_passes,\n         late_lint_passes,\n+        lints,\n         lint_groups,\n         llvm_passes,\n         attributes,\n         ..\n     } = registry;\n \n     let mut ls = sess.lint_store.borrow_mut();\n+    ls.register_lints(&lints);\n     for pass in early_lint_passes {\n-        ls.register_lints(&pass.get_lints());\n         ls.register_early_pass(pass);\n     }\n     for pass in late_lint_passes {\n-        ls.register_lints(&pass.get_lints());\n         ls.register_late_pass(pass);\n     }\n "}, {"sha": "752396188afd11f04f7f1a29a991a3f25d02168b", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7fef39791a093681c59f08181f96a0a2d63ab981/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fef39791a093681c59f08181f96a0a2d63ab981/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=7fef39791a093681c59f08181f96a0a2d63ab981", "patch": "@@ -204,17 +204,17 @@ pub fn register_builtins(store: &mut lint::LintStore, no_interleave_lints: bool)\n     }\n \n     macro_rules! register_pass {\n-        ($method:ident, $constructor:expr) => (\n+        ($method:ident, $ty:ident, $constructor:expr) => (\n             let obj = box $constructor;\n-            store.register_lints(&obj.get_lints());\n+            store.register_lints(&$ty::get_lints());\n             store.$method(obj);\n         )\n     }\n \n     macro_rules! register_passes {\n         ($method:ident, [$($passes:ident: $constructor:expr,)*]) => (\n             $(\n-                register_pass!($method, $constructor);\n+                register_pass!($method, $passes, $constructor);\n             )*\n         )\n     }\n@@ -225,10 +225,10 @@ pub fn register_builtins(store: &mut lint::LintStore, no_interleave_lints: bool)\n         late_lint_passes!(register_passes, register_late_pass);\n         late_lint_mod_passes!(register_passes, register_late_mod_pass);\n     } else {\n-        store.register_lints(&BuiltinCombinedPreExpansionLintPass::new().get_lints());\n-        store.register_lints(&BuiltinCombinedEarlyLintPass::new().get_lints());\n-        store.register_lints(&BuiltinCombinedModuleLateLintPass::new().get_lints());\n-        store.register_lints(&BuiltinCombinedLateLintPass::new().get_lints());\n+        store.register_lints(&BuiltinCombinedPreExpansionLintPass::get_lints());\n+        store.register_lints(&BuiltinCombinedEarlyLintPass::get_lints());\n+        store.register_lints(&BuiltinCombinedModuleLateLintPass::get_lints());\n+        store.register_lints(&BuiltinCombinedLateLintPass::get_lints());\n     }\n \n     add_lint_group!(\"nonstandard_style\",\n@@ -486,11 +486,11 @@ pub fn register_builtins(store: &mut lint::LintStore, no_interleave_lints: bool)\n }\n \n pub fn register_internals(store: &mut lint::LintStore) {\n-    store.register_lints(&DefaultHashTypes::new().get_lints());\n+    store.register_lints(&DefaultHashTypes::get_lints());\n     store.register_early_pass(box DefaultHashTypes::new());\n-    store.register_lints(&LintPassImpl.get_lints());\n+    store.register_lints(&LintPassImpl::get_lints());\n     store.register_early_pass(box LintPassImpl);\n-    store.register_lints(&TyTyKind.get_lints());\n+    store.register_lints(&TyTyKind::get_lints());\n     store.register_late_pass(box TyTyKind);\n     store.register_group(\n         false,"}, {"sha": "a8076b57c86ac1bbc6acf1d0022345540ae469c7", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7fef39791a093681c59f08181f96a0a2d63ab981/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fef39791a093681c59f08181f96a0a2d63ab981/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=7fef39791a093681c59f08181f96a0a2d63ab981", "patch": "@@ -41,6 +41,9 @@ pub struct Registry<'a> {\n     #[doc(hidden)]\n     pub late_lint_passes: Vec<LateLintPassObject>,\n \n+    #[doc(hidden)]\n+    pub lints: Vec<&'static Lint>,\n+\n     #[doc(hidden)]\n     pub lint_groups: FxHashMap<&'static str, (Vec<LintId>, Option<&'static str>)>,\n \n@@ -59,6 +62,7 @@ impl<'a> Registry<'a> {\n             args_hidden: None,\n             krate_span,\n             syntax_exts: vec![],\n+            lints: vec![],\n             early_lint_passes: vec![],\n             late_lint_passes: vec![],\n             lint_groups: FxHashMap::default(),\n@@ -99,6 +103,11 @@ impl<'a> Registry<'a> {\n         self.register_syntax_extension(Symbol::intern(name), ext);\n     }\n \n+    /// Register a compiler lint pass.\n+    pub fn register_lints(&mut self, lints: &[&'static Lint]) {\n+        self.lints.extend(lints);\n+    }\n+\n     /// Register a compiler lint pass.\n     pub fn register_early_lint_pass(&mut self, lint_pass: EarlyLintPassObject) {\n         self.early_lint_passes.push(lint_pass);"}, {"sha": "2a468d679a88786b29984c0c4e53ade2f609819e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7fef39791a093681c59f08181f96a0a2d63ab981/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fef39791a093681c59f08181f96a0a2d63ab981/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=7fef39791a093681c59f08181f96a0a2d63ab981", "patch": "@@ -5,7 +5,7 @@ use rustc::hir::HirId;\n use rustc::middle::cstore::CrateStore;\n use rustc::middle::privacy::AccessLevels;\n use rustc::ty::{Ty, TyCtxt};\n-use rustc::lint::{self, LintPass};\n+use rustc::lint;\n use rustc::session::config::ErrorOutputType;\n use rustc::session::DiagnosticOutput;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n@@ -273,10 +273,9 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n     whitelisted_lints.extend(lint_opts.iter().map(|(lint, _)| lint).cloned());\n \n     let lints = || {\n-        lint::builtin::HardwiredLints\n-            .get_lints()\n+        lint::builtin::HardwiredLints::get_lints()\n             .into_iter()\n-            .chain(rustc_lint::SoftLints.get_lints().into_iter())\n+            .chain(rustc_lint::SoftLints::get_lints().into_iter())\n     };\n \n     let lint_opts = lints().filter_map(|lint| {"}, {"sha": "0bfb32c6dc43b812d551f3d1a51e3126ce1b7feb", "filename": "src/test/ui-fulldeps/internal-lints/lint_pass_impl_without_macro.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7fef39791a093681c59f08181f96a0a2d63ab981/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fef39791a093681c59f08181f96a0a2d63ab981/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs?ref=7fef39791a093681c59f08181f96a0a2d63ab981", "patch": "@@ -6,7 +6,7 @@\n extern crate rustc;\n \n use rustc::lint::{LintArray, LintPass};\n-use rustc::{declare_lint, declare_lint_pass, impl_lint_pass, lint_array};\n+use rustc::{declare_lint, declare_lint_pass, impl_lint_pass};\n \n declare_lint! {\n     pub TEST_LINT,\n@@ -17,10 +17,6 @@ declare_lint! {\n struct Foo;\n \n impl LintPass for Foo { //~ERROR implementing `LintPass` by hand\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(TEST_LINT)\n-    }\n-\n     fn name(&self) -> &'static str {\n         \"Foo\"\n     }\n@@ -31,10 +27,6 @@ macro_rules! custom_lint_pass_macro {\n         struct Custom;\n \n         impl LintPass for Custom { //~ERROR implementing `LintPass` by hand\n-            fn get_lints(&self) -> LintArray {\n-                lint_array!(TEST_LINT)\n-            }\n-\n             fn name(&self) -> &'static str {\n                 \"Custom\"\n             }"}, {"sha": "b7cff343395e94f69fcc73f2fc2f307bad97d218", "filename": "src/test/ui-fulldeps/internal-lints/lint_pass_impl_without_macro.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7fef39791a093681c59f08181f96a0a2d63ab981/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fef39791a093681c59f08181f96a0a2d63ab981/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr?ref=7fef39791a093681c59f08181f96a0a2d63ab981", "patch": "@@ -12,7 +12,7 @@ LL | #![deny(rustc::lint_pass_impl_without_macro)]\n    = help: try using `declare_lint_pass!` or `impl_lint_pass!` instead\n \n error: implementing `LintPass` by hand\n-  --> $DIR/lint_pass_impl_without_macro.rs:33:14\n+  --> $DIR/lint_pass_impl_without_macro.rs:29:14\n    |\n LL |         impl LintPass for Custom {\n    |              ^^^^^^^^\n@@ -23,4 +23,3 @@ LL | custom_lint_pass_macro!();\n    = help: try using `declare_lint_pass!` or `impl_lint_pass!` instead\n \n error: aborting due to 2 previous errors\n-"}]}