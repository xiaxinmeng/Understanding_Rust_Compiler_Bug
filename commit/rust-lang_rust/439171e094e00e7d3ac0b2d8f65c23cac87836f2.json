{"sha": "439171e094e00e7d3ac0b2d8f65c23cac87836f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzOTE3MWUwOTRlMDBlN2QzYWMwYjJkOGY2NWMyM2NhYzg3ODM2ZjI=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-11-07T11:37:28Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-11-07T11:39:52Z"}, "message": "look at assoc ct, check the type of nodes", "tree": {"sha": "69ba3c86f6f4079ce146ce3d33b9feddfdb691d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69ba3c86f6f4079ce146ce3d33b9feddfdb691d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/439171e094e00e7d3ac0b2d8f65c23cac87836f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/439171e094e00e7d3ac0b2d8f65c23cac87836f2", "html_url": "https://github.com/rust-lang/rust/commit/439171e094e00e7d3ac0b2d8f65c23cac87836f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/439171e094e00e7d3ac0b2d8f65c23cac87836f2/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0256d065d4901b63def6c04013da4f781d0752bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0256d065d4901b63def6c04013da4f781d0752bb", "html_url": "https://github.com/rust-lang/rust/commit/0256d065d4901b63def6c04013da4f781d0752bb"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "e1721a5a88a76f6edf98a7f76ddfcaa52c7c8e3e", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/439171e094e00e7d3ac0b2d8f65c23cac87836f2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439171e094e00e7d3ac0b2d8f65c23cac87836f2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=439171e094e00e7d3ac0b2d8f65c23cac87836f2", "patch": "@@ -512,6 +512,13 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                 block = &self.body.basic_blocks()[next];\n             } else {\n                 assert_eq!(self.locals[mir::RETURN_PLACE], self.nodes.last().unwrap());\n+                // `AbstractConst`s should not contain any promoteds as they require references which\n+                // are not allowed.\n+                assert!(!self.nodes.iter().any(|n| matches!(\n+                    n.node,\n+                    Node::Leaf(ty::Const { val: ty::ConstKind::Unevaluated(_, _, Some(_)), ty: _ })\n+                )));\n+\n                 self.nodes[self.locals[mir::RETURN_PLACE]].used = true;\n                 if let Some(&unused) = self.nodes.iter().find(|n| !n.used) {\n                     self.error(Some(unused.span), \"dead code\")?;\n@@ -609,6 +616,10 @@ pub(super) fn try_unify<'tcx>(\n         (Node::Leaf(a_ct), Node::Leaf(b_ct)) => {\n             let a_ct = a_ct.subst(tcx, a.substs);\n             let b_ct = b_ct.subst(tcx, b.substs);\n+            if a_ct.ty != b_ct.ty {\n+                return false;\n+            }\n+\n             match (a_ct.val, b_ct.val) {\n                 // We can just unify errors with everything to reduce the amount of\n                 // emitted errors here.\n@@ -621,6 +632,12 @@ pub(super) fn try_unify<'tcx>(\n                 // we do not want to use `assert_eq!(a(), b())` to infer that `N` and `M` have to be `1`. This\n                 // means that we only allow inference variables if they are equal.\n                 (ty::ConstKind::Infer(a_val), ty::ConstKind::Infer(b_val)) => a_val == b_val,\n+                // We may want to instead recurse into unevaluated constants here. That may require some\n+                // care to prevent infinite recursion, so let's just ignore this for now.\n+                (\n+                    ty::ConstKind::Unevaluated(a_def, a_substs, None),\n+                    ty::ConstKind::Unevaluated(b_def, b_substs, None),\n+                ) => a_def == b_def && a_substs == b_substs,\n                 // FIXME(const_evaluatable_checked): We may want to either actually try\n                 // to evaluate `a_ct` and `b_ct` if they are are fully concrete or something like\n                 // this, for now we just return false here."}, {"sha": "533fe55b45beea4d32c09302c1aa76ddb62f3a10", "filename": "src/test/ui/const-generics/const_evaluatable_checked/associated-consts.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/439171e094e00e7d3ac0b2d8f65c23cac87836f2/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fassociated-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439171e094e00e7d3ac0b2d8f65c23cac87836f2/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fassociated-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fassociated-consts.rs?ref=439171e094e00e7d3ac0b2d8f65c23cac87836f2", "patch": "@@ -0,0 +1,31 @@\n+// run-pass\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+pub trait BlockCipher {\n+    const BLOCK_SIZE: usize;\n+}\n+\n+struct FooCipher;\n+impl BlockCipher for FooCipher {\n+    const BLOCK_SIZE: usize = 64;\n+}\n+\n+struct BarCipher;\n+impl BlockCipher for BarCipher {\n+    const BLOCK_SIZE: usize = 32;\n+}\n+\n+pub struct Block<C>(C);\n+\n+pub fn test<C: BlockCipher, const M: usize>()\n+where\n+    [u8; M - C::BLOCK_SIZE]: Sized,\n+{\n+    let _ = [0; M - C::BLOCK_SIZE];\n+}\n+\n+fn main() {\n+    test::<FooCipher, 128>();\n+    test::<BarCipher, 64>();\n+}"}, {"sha": "05049d9c2a6efb7716c063a7fe32d4e39c0c2c34", "filename": "src/test/ui/const-generics/const_evaluatable_checked/different-fn.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/439171e094e00e7d3ac0b2d8f65c23cac87836f2/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439171e094e00e7d3ac0b2d8f65c23cac87836f2/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.rs?ref=439171e094e00e7d3ac0b2d8f65c23cac87836f2", "patch": "@@ -0,0 +1,16 @@\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+use std::mem::size_of;\n+use std::marker::PhantomData;\n+\n+struct Foo<T>(PhantomData<T>);\n+\n+fn test<T>() -> [u8; size_of::<T>()] {\n+    [0; size_of::<Foo<T>>()]\n+    //~^ ERROR unconstrained generic constant\n+}\n+\n+fn main() {\n+    test::<u32>();\n+}"}, {"sha": "1f6dddb04e56c91ce53910b2ea229d3791735f8e", "filename": "src/test/ui/const-generics/const_evaluatable_checked/different-fn.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/439171e094e00e7d3ac0b2d8f65c23cac87836f2/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/439171e094e00e7d3ac0b2d8f65c23cac87836f2/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr?ref=439171e094e00e7d3ac0b2d8f65c23cac87836f2", "patch": "@@ -0,0 +1,14 @@\n+error: unconstrained generic constant\n+  --> $DIR/different-fn.rs:10:9\n+   |\n+LL |     [0; size_of::<Foo<T>>()]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider adding a `where` bound for this expression\n+  --> $DIR/different-fn.rs:10:9\n+   |\n+LL |     [0; size_of::<Foo<T>>()]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}