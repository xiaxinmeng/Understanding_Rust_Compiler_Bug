{"sha": "98510ec5d3478f3e9178bbff076532487292d8f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NTEwZWM1ZDM0NzhmM2U5MTc4YmJmZjA3NjUzMjQ4NzI5MmQ4Zjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-24T18:46:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-24T18:46:04Z"}, "message": "move the rest of presentation to presentation", "tree": {"sha": "96053c129790cfab55f06912f4944154b851c2b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96053c129790cfab55f06912f4944154b851c2b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98510ec5d3478f3e9178bbff076532487292d8f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98510ec5d3478f3e9178bbff076532487292d8f8", "html_url": "https://github.com/rust-lang/rust/commit/98510ec5d3478f3e9178bbff076532487292d8f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98510ec5d3478f3e9178bbff076532487292d8f8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7a78729100aa2068827e5812aec03abd3a5df9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7a78729100aa2068827e5812aec03abd3a5df9a", "html_url": "https://github.com/rust-lang/rust/commit/b7a78729100aa2068827e5812aec03abd3a5df9a"}], "stats": {"total": 70, "additions": 20, "deletions": 50}, "files": [{"sha": "f515fcc14f27c5b5d86f548dcef99f5c3b18abde", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 2, "deletions": 39, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/98510ec5d3478f3e9178bbff076532487292d8f8/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98510ec5d3478f3e9178bbff076532487292d8f8/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=98510ec5d3478f3e9178bbff076532487292d8f8", "patch": "@@ -1,14 +1,8 @@\n use std::fmt;\n \n-use hir::{Docs, Documentation};\n+use hir::Documentation;\n use ra_syntax::TextRange;\n-use ra_text_edit::{ TextEditBuilder, TextEdit};\n-\n-use crate::completion::{\n-    completion_context::CompletionContext,\n-    const_label,\n-    type_label\n-};\n+use ra_text_edit::{TextEditBuilder, TextEdit};\n \n /// `CompletionItem` describes a single completion variant in the editor pop-up.\n /// It is basically a POD with various properties. To construct a\n@@ -253,27 +247,6 @@ impl Builder {\n         self.documentation = docs.map(Into::into);\n         self\n     }\n-    pub(super) fn from_const(mut self, ctx: &CompletionContext, ct: hir::Const) -> Builder {\n-        if let Some(docs) = ct.docs(ctx.db) {\n-            self.documentation = Some(docs);\n-        }\n-\n-        self.detail = Some(const_item_label(ctx, ct));\n-        self.kind = Some(CompletionItemKind::Const);\n-\n-        self\n-    }\n-\n-    pub(super) fn from_type(mut self, ctx: &CompletionContext, ty: hir::Type) -> Builder {\n-        if let Some(docs) = ty.docs(ctx.db) {\n-            self.documentation = Some(docs);\n-        }\n-\n-        self.detail = Some(type_item_label(ctx, ty));\n-        self.kind = Some(CompletionItemKind::TypeAlias);\n-\n-        self\n-    }\n }\n \n impl<'a> Into<CompletionItem> for Builder {\n@@ -307,16 +280,6 @@ impl Into<Vec<CompletionItem>> for Completions {\n     }\n }\n \n-fn const_item_label(ctx: &CompletionContext, ct: hir::Const) -> String {\n-    let node = ct.source(ctx.db).1;\n-    const_label(&node)\n-}\n-\n-fn type_item_label(ctx: &CompletionContext, ty: hir::Type) -> String {\n-    let node = ty.source(ctx.db).1;\n-    type_label(&node)\n-}\n-\n #[cfg(test)]\n pub(crate) fn do_completion(code: &str, kind: CompletionKind) -> Vec<CompletionItem> {\n     use crate::mock_analysis::{single_file_with_position, analysis_and_position};"}, {"sha": "0ead520327387e5629586ef94e665ab82f0ca0a6", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/98510ec5d3478f3e9178bbff076532487292d8f8/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98510ec5d3478f3e9178bbff076532487292d8f8/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=98510ec5d3478f3e9178bbff076532487292d8f8", "patch": "@@ -6,7 +6,7 @@ use ra_syntax::ast::NameOwner;\n \n use crate::completion::{\n     Completions, CompletionKind, CompletionItemKind, CompletionContext, CompletionItem,\n-    function_label,\n+    function_label, const_label, type_label,\n };\n \n impl Completions {\n@@ -91,6 +91,8 @@ impl Completions {\n     ) {\n         let sig = func.signature(ctx.db);\n         let name = name.unwrap_or_else(|| sig.name().to_string());\n+        let (_, ast_node) = func.source(ctx.db);\n+        let detail = function_label(&ast_node);\n \n         let mut builder = CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name)\n             .kind(if sig.has_self_param() {\n@@ -99,7 +101,7 @@ impl Completions {\n                 CompletionItemKind::Function\n             })\n             .set_documentation(func.docs(ctx.db))\n-            .set_detail(function_item_label(ctx, func));\n+            .set_detail(detail);\n         // If not an import, add parenthesis automatically.\n         if ctx.use_item_syntax.is_none() && !ctx.is_call {\n             tested_by!(inserts_parens_for_function_calls);\n@@ -115,13 +117,18 @@ impl Completions {\n     }\n \n     pub(crate) fn add_const(&mut self, ctx: &CompletionContext, constant: hir::Const) {\n-        let (_file_id, cosnt_def) = constant.source(ctx.db);\n-        let name = match cosnt_def.name() {\n+        let (_file_id, ast_node) = constant.source(ctx.db);\n+        let name = match ast_node.name() {\n             Some(name) => name,\n             _ => return,\n         };\n+        let (_, ast_node) = constant.source(ctx.db);\n+        let detail = const_label(&ast_node);\n+\n         CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.text().to_string())\n-            .from_const(ctx, constant)\n+            .kind(CompletionItemKind::Const)\n+            .set_documentation(constant.docs(ctx.db))\n+            .detail(detail)\n             .add_to(self);\n     }\n \n@@ -131,8 +138,13 @@ impl Completions {\n             Some(name) => name,\n             _ => return,\n         };\n+        let (_, ast_node) = type_alias.source(ctx.db);\n+        let detail = type_label(&ast_node);\n+\n         CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.text().to_string())\n-            .from_type(ctx, type_alias)\n+            .kind(CompletionItemKind::TypeAlias)\n+            .set_documentation(type_alias.docs(ctx.db))\n+            .detail(detail)\n             .add_to(self);\n     }\n \n@@ -152,11 +164,6 @@ impl Completions {\n     }\n }\n \n-fn function_item_label(ctx: &CompletionContext, function: hir::Function) -> Option<String> {\n-    let node = function.source(ctx.db).1;\n-    function_label(&node)\n-}\n-\n #[cfg(test)]\n mod tests {\n     use test_utils::covers;"}]}