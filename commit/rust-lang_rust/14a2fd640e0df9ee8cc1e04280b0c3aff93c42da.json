{"sha": "14a2fd640e0df9ee8cc1e04280b0c3aff93c42da", "node_id": "C_kwDOAAsO6NoAKDE0YTJmZDY0MGUwZGY5ZWU4Y2MxZTA0MjgwYjBjM2FmZjkzYzQyZGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-11T22:00:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-11T22:00:53Z"}, "message": "Auto merge of #90489 - jyn514:load-all-extern-crates, r=petrochenkov\n\nrustdoc: Go back to loading all external crates unconditionally\n\nThis *continues* to cause regressions. This code will be unnecessary\nonce access to the resolver happens fully before creating the tyctxt\n(#83761), so load all crates unconditionally for now. To minimize churn, this leaves in the code for loading crates selectively.\n\n\"Fixes\" https://github.com/rust-lang/rust/issues/84738. Previously: https://github.com/rust-lang/rust/pull/83738, https://github.com/rust-lang/rust/pull/85749, https://github.com/rust-lang/rust/pull/88215\n\nr? `@petrochenkov` cc `@camelid` (this should fix the \"index out of bounds\" error you had while looking up `crate_name`).", "tree": {"sha": "ff33ab007794af4108e4a330702c16093cbd3a27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff33ab007794af4108e4a330702c16093cbd3a27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14a2fd640e0df9ee8cc1e04280b0c3aff93c42da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14a2fd640e0df9ee8cc1e04280b0c3aff93c42da", "html_url": "https://github.com/rust-lang/rust/commit/14a2fd640e0df9ee8cc1e04280b0c3aff93c42da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14a2fd640e0df9ee8cc1e04280b0c3aff93c42da/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "936238a92b2f9d6e7afe7dda69b4afd903f96399", "url": "https://api.github.com/repos/rust-lang/rust/commits/936238a92b2f9d6e7afe7dda69b4afd903f96399", "html_url": "https://github.com/rust-lang/rust/commit/936238a92b2f9d6e7afe7dda69b4afd903f96399"}, {"sha": "51345a83aaa99d1ec1a64e09c4e3280051e9cfa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/51345a83aaa99d1ec1a64e09c4e3280051e9cfa2", "html_url": "https://github.com/rust-lang/rust/commit/51345a83aaa99d1ec1a64e09c4e3280051e9cfa2"}], "stats": {"total": 100, "additions": 93, "deletions": 7}, "files": [{"sha": "a331f4cf3e6e7c6e48e015ad67409019d07a6b65", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/14a2fd640e0df9ee8cc1e04280b0c3aff93c42da/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a2fd640e0df9ee8cc1e04280b0c3aff93c42da/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=14a2fd640e0df9ee8cc1e04280b0c3aff93c42da", "patch": "@@ -16,13 +16,15 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n use rustc_resolve as resolve;\n+use rustc_resolve::Namespace::TypeNS;\n use rustc_session::config::{self, CrateType, ErrorOutputType};\n use rustc_session::lint;\n use rustc_session::DiagnosticOutput;\n use rustc_session::Session;\n+use rustc_span::def_id::CRATE_DEF_INDEX;\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n-use rustc_span::Span;\n+use rustc_span::{Span, DUMMY_SP};\n \n use std::cell::RefCell;\n use std::lazy::SyncLazy;\n@@ -283,13 +285,43 @@ crate fn create_config(\n }\n \n crate fn create_resolver<'a>(\n+    externs: config::Externs,\n     queries: &Queries<'a>,\n     sess: &Session,\n ) -> Rc<RefCell<interface::BoxedResolver>> {\n     let (krate, resolver, _) = &*abort_on_err(queries.expansion(), sess).peek();\n     let resolver = resolver.clone();\n \n-    crate::passes::collect_intra_doc_links::load_intra_link_crates(resolver, krate)\n+    let resolver = crate::passes::collect_intra_doc_links::load_intra_link_crates(resolver, krate);\n+\n+    // FIXME: somehow rustdoc is still missing crates even though we loaded all\n+    // the known necessary crates. Load them all unconditionally until we find a way to fix this.\n+    // DO NOT REMOVE THIS without first testing on the reproducer in\n+    // https://github.com/jyn514/objr/commit/edcee7b8124abf0e4c63873e8422ff81beb11ebb\n+    let extern_names: Vec<String> = externs\n+        .iter()\n+        .filter(|(_, entry)| entry.add_prelude)\n+        .map(|(name, _)| name)\n+        .cloned()\n+        .collect();\n+    resolver.borrow_mut().access(|resolver| {\n+        sess.time(\"load_extern_crates\", || {\n+            for extern_name in &extern_names {\n+                debug!(\"loading extern crate {}\", extern_name);\n+                if let Err(()) = resolver\n+                    .resolve_str_path_error(\n+                        DUMMY_SP,\n+                        extern_name,\n+                        TypeNS,\n+                        LocalDefId { local_def_index: CRATE_DEF_INDEX }.to_def_id(),\n+                  ) {\n+                    warn!(\"unable to resolve external crate {} (do you have an unused `--extern` crate?)\", extern_name)\n+                  }\n+            }\n+        });\n+    });\n+\n+    resolver\n }\n \n crate fn run_global_ctxt("}, {"sha": "1c12cc547e0da1a64b52755ccc07fbc49031da11", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14a2fd640e0df9ee8cc1e04280b0c3aff93c42da/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a2fd640e0df9ee8cc1e04280b0c3aff93c42da/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=14a2fd640e0df9ee8cc1e04280b0c3aff93c42da", "patch": "@@ -756,6 +756,7 @@ fn main_options(options: config::Options) -> MainResult {\n     let default_passes = options.default_passes;\n     let output_format = options.output_format;\n     // FIXME: fix this clone (especially render_options)\n+    let externs = options.externs.clone();\n     let manual_passes = options.manual_passes.clone();\n     let render_options = options.render_options.clone();\n     let scrape_examples_options = options.scrape_examples_options.clone();\n@@ -774,7 +775,7 @@ fn main_options(options: config::Options) -> MainResult {\n             // We need to hold on to the complete resolver, so we cause everything to be\n             // cloned for the analysis passes to use. Suboptimal, but necessary in the\n             // current architecture.\n-            let resolver = core::create_resolver(queries, sess);\n+            let resolver = core::create_resolver(externs, queries, sess);\n \n             if sess.diagnostic().has_errors_or_lint_errors() {\n                 sess.fatal(\"Compilation failed, aborting rustdoc\");"}, {"sha": "4cebf741e200271ce837e047fd81cc587c673e4b", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/14a2fd640e0df9ee8cc1e04280b0c3aff93c42da/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a2fd640e0df9ee8cc1e04280b0c3aff93c42da/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=14a2fd640e0df9ee8cc1e04280b0c3aff93c42da", "patch": "@@ -1,3 +1,4 @@\n+use ast::visit;\n use rustc_ast as ast;\n use rustc_hir::def::Namespace::TypeNS;\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n@@ -16,7 +17,7 @@ crate fn load_intra_link_crates(resolver: Resolver, krate: &ast::Crate) -> Resol\n     let mut loader = IntraLinkCrateLoader { current_mod: CRATE_DEF_ID, resolver };\n     // `walk_crate` doesn't visit the crate itself for some reason.\n     loader.load_links_in_attrs(&krate.attrs, krate.span);\n-    ast::visit::walk_crate(&mut loader, krate);\n+    visit::walk_crate(&mut loader, krate);\n     loader.resolver\n }\n \n@@ -54,7 +55,12 @@ impl IntraLinkCrateLoader {\n     }\n }\n \n-impl ast::visit::Visitor<'_> for IntraLinkCrateLoader {\n+impl visit::Visitor<'_> for IntraLinkCrateLoader {\n+    fn visit_foreign_item(&mut self, item: &ast::ForeignItem) {\n+        self.load_links_in_attrs(&item.attrs, item.span);\n+        visit::walk_foreign_item(self, item)\n+    }\n+\n     fn visit_item(&mut self, item: &ast::Item) {\n         use rustc_ast_lowering::ResolverAstLowering;\n \n@@ -64,12 +70,29 @@ impl ast::visit::Visitor<'_> for IntraLinkCrateLoader {\n             let old_mod = mem::replace(&mut self.current_mod, new_mod);\n \n             self.load_links_in_attrs(&item.attrs, item.span);\n-            ast::visit::walk_item(self, item);\n+            visit::walk_item(self, item);\n \n             self.current_mod = old_mod;\n         } else {\n             self.load_links_in_attrs(&item.attrs, item.span);\n-            ast::visit::walk_item(self, item);\n+            visit::walk_item(self, item);\n         }\n     }\n+\n+    // NOTE: if doc-comments are ever allowed on function parameters, this will have to implement `visit_param` too.\n+\n+    fn visit_assoc_item(&mut self, item: &ast::AssocItem, ctxt: visit::AssocCtxt) {\n+        self.load_links_in_attrs(&item.attrs, item.span);\n+        visit::walk_assoc_item(self, item, ctxt)\n+    }\n+\n+    fn visit_field_def(&mut self, field: &ast::FieldDef) {\n+        self.load_links_in_attrs(&field.attrs, field.span);\n+        visit::walk_field_def(self, field)\n+    }\n+\n+    fn visit_variant(&mut self, v: &ast::Variant) {\n+        self.load_links_in_attrs(&v.attrs, v.span);\n+        visit::walk_variant(self, v)\n+    }\n }"}, {"sha": "d11c69f812a8dfe9ea3db2474363c188c096c5b3", "filename": "src/test/rustdoc-ui/intra-doc/auxiliary/dep1.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14a2fd640e0df9ee8cc1e04280b0c3aff93c42da/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a2fd640e0df9ee8cc1e04280b0c3aff93c42da/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep1.rs?ref=14a2fd640e0df9ee8cc1e04280b0c3aff93c42da", "patch": "@@ -0,0 +1 @@\n+// intentionally empty"}, {"sha": "d11c69f812a8dfe9ea3db2474363c188c096c5b3", "filename": "src/test/rustdoc-ui/intra-doc/auxiliary/dep2.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14a2fd640e0df9ee8cc1e04280b0c3aff93c42da/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a2fd640e0df9ee8cc1e04280b0c3aff93c42da/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep2.rs?ref=14a2fd640e0df9ee8cc1e04280b0c3aff93c42da", "patch": "@@ -0,0 +1 @@\n+// intentionally empty"}, {"sha": "d11c69f812a8dfe9ea3db2474363c188c096c5b3", "filename": "src/test/rustdoc-ui/intra-doc/auxiliary/dep3.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14a2fd640e0df9ee8cc1e04280b0c3aff93c42da/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a2fd640e0df9ee8cc1e04280b0c3aff93c42da/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep3.rs?ref=14a2fd640e0df9ee8cc1e04280b0c3aff93c42da", "patch": "@@ -0,0 +1 @@\n+// intentionally empty"}, {"sha": "d11c69f812a8dfe9ea3db2474363c188c096c5b3", "filename": "src/test/rustdoc-ui/intra-doc/auxiliary/dep4.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14a2fd640e0df9ee8cc1e04280b0c3aff93c42da/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a2fd640e0df9ee8cc1e04280b0c3aff93c42da/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep4.rs?ref=14a2fd640e0df9ee8cc1e04280b0c3aff93c42da", "patch": "@@ -0,0 +1 @@\n+// intentionally empty"}, {"sha": "438c56aa516a9839281fba992942513823f7d86d", "filename": "src/test/rustdoc-ui/intra-doc/extern-crate-load.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/14a2fd640e0df9ee8cc1e04280b0c3aff93c42da/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fextern-crate-load.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a2fd640e0df9ee8cc1e04280b0c3aff93c42da/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fextern-crate-load.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fextern-crate-load.rs?ref=14a2fd640e0df9ee8cc1e04280b0c3aff93c42da", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+// aux-crate:dep1=dep1.rs\n+// aux-crate:dep2=dep2.rs\n+// aux-crate:dep3=dep3.rs\n+// aux-crate:dep4=dep4.rs\n+#![deny(rustdoc::broken_intra_doc_links)]\n+\n+pub trait Trait {\n+    /// [dep1]\n+    type Item;\n+}\n+\n+pub struct S {\n+    /// [dep2]\n+    pub x: usize,\n+}\n+\n+extern \"C\" {\n+    /// [dep3]\n+    pub fn printf();\n+}\n+\n+pub enum E {\n+    /// [dep4]\n+    A\n+}"}]}