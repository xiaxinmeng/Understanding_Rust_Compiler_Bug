{"sha": "c42f1218a0a7b3a5c84502f9cb4b123d65148f4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MmYxMjE4YTBhN2IzYTVjODQ1MDJmOWNiNGIxMjNkNjUxNDhmNGM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-05-03T23:47:53Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-05-03T23:48:44Z"}, "message": "rustpkg: Handle sysroot more correctly\n\nIn rustpkg, pass around sysroot; in rustpkg tests, set the sysroot\nmanually so that tests can find libcore and such.\n\nWith bonus metadata::filesearch refactoring to avoid copies.", "tree": {"sha": "62c64c5bf4423454770bb71295bb34110b66ba3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62c64c5bf4423454770bb71295bb34110b66ba3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c42f1218a0a7b3a5c84502f9cb4b123d65148f4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c42f1218a0a7b3a5c84502f9cb4b123d65148f4c", "html_url": "https://github.com/rust-lang/rust/commit/c42f1218a0a7b3a5c84502f9cb4b123d65148f4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c42f1218a0a7b3a5c84502f9cb4b123d65148f4c/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "376a5526a78ab7acf9ba143264acc0c0e2e70541", "url": "https://api.github.com/repos/rust-lang/rust/commits/376a5526a78ab7acf9ba143264acc0c0e2e70541", "html_url": "https://github.com/rust-lang/rust/commit/376a5526a78ab7acf9ba143264acc0c0e2e70541"}], "stats": {"total": 158, "additions": 106, "deletions": 52}, "files": [{"sha": "fceff55abf8d49775835a1a0daa65669f9b7f51a", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c42f1218a0a7b3a5c84502f9cb4b123d65148f4c/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42f1218a0a7b3a5c84502f9cb4b123d65148f4c/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=c42f1218a0a7b3a5c84502f9cb4b123d65148f4c", "patch": "@@ -40,7 +40,7 @@ pub fn get_rpath_flags(sess: session::Session, out_filename: &Path)\n     // where rustrt is and we know every rust program needs it\n     let libs = vec::append_one(libs, get_sysroot_absolute_rt_lib(sess));\n \n-    let rpaths = get_rpaths(os, &sysroot, output, libs,\n+    let rpaths = get_rpaths(os, sysroot, output, libs,\n                             sess.opts.target_triple);\n     rpaths_to_flags(rpaths)\n }"}, {"sha": "d968cf708d93895ee58e22c041ac989d589303e9", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c42f1218a0a7b3a5c84502f9cb4b123d65148f4c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42f1218a0a7b3a5c84502f9cb4b123d65148f4c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=c42f1218a0a7b3a5c84502f9cb4b123d65148f4c", "patch": "@@ -603,7 +603,7 @@ pub fn build_session_options(binary: @~str,\n             link::output_type_bitcode\n         } else { link::output_type_exe };\n     let sysroot_opt = getopts::opt_maybe_str(matches, ~\"sysroot\");\n-    let sysroot_opt = sysroot_opt.map(|m| Path(*m));\n+    let sysroot_opt = sysroot_opt.map(|m| @Path(*m));\n     let target_opt = getopts::opt_maybe_str(matches, ~\"target\");\n     let target_feature_opt = getopts::opt_maybe_str(matches, ~\"target-feature\");\n     let save_temps = getopts::opt_present(matches, ~\"save-temps\");"}, {"sha": "04cf3ca64f9d77925bb7fdfc8bb3a5aa30494d12", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c42f1218a0a7b3a5c84502f9cb4b123d65148f4c/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42f1218a0a7b3a5c84502f9cb4b123d65148f4c/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=c42f1218a0a7b3a5c84502f9cb4b123d65148f4c", "patch": "@@ -125,7 +125,7 @@ pub struct options {\n     output_type: back::link::output_type,\n     addl_lib_search_paths: ~[Path],\n     linker_args: ~[~str],\n-    maybe_sysroot: Option<Path>,\n+    maybe_sysroot: Option<@Path>,\n     target_triple: ~str,\n     target_feature: ~str,\n     // User-specified cfg meta items. The compiler itself will add additional"}, {"sha": "ded0b314d44bbd4cac660d676c87ba17b0cec1c8", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c42f1218a0a7b3a5c84502f9cb4b123d65148f4c/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42f1218a0a7b3a5c84502f9cb4b123d65148f4c/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=c42f1218a0a7b3a5c84502f9cb4b123d65148f4c", "patch": "@@ -20,41 +20,49 @@ pub fn pick_file(file: Path, path: &Path) -> Option<Path> {\n }\n \n pub trait FileSearch {\n-    fn sysroot(&self) -> Path;\n-    fn lib_search_paths(&self) -> ~[Path];\n+    fn sysroot(&self) -> @Path;\n+    fn for_each_lib_search_path(&self, f: &fn(&Path) -> bool);\n     fn get_target_lib_path(&self) -> Path;\n     fn get_target_lib_file_path(&self, file: &Path) -> Path;\n }\n \n-pub fn mk_filesearch(maybe_sysroot: &Option<Path>,\n+pub fn mk_filesearch(maybe_sysroot: &Option<@Path>,\n                      target_triple: &str,\n                      addl_lib_search_paths: ~[Path])\n                   -> @FileSearch {\n     struct FileSearchImpl {\n-        sysroot: Path,\n+        sysroot: @Path,\n         addl_lib_search_paths: ~[Path],\n         target_triple: ~str\n     }\n     impl FileSearch for FileSearchImpl {\n-        fn sysroot(&self) -> Path { /*bad*/copy self.sysroot }\n-        fn lib_search_paths(&self) -> ~[Path] {\n-            let mut paths = /*bad*/copy self.addl_lib_search_paths;\n-\n-            paths.push(\n-                make_target_lib_path(&self.sysroot,\n-                                     self.target_triple));\n-            match get_rustpkg_lib_path_nearest() {\n-              result::Ok(ref p) => paths.push((/*bad*/copy *p)),\n-              result::Err(_) => ()\n+        fn sysroot(&self) -> @Path { self.sysroot }\n+        fn for_each_lib_search_path(&self, f: &fn(&Path) -> bool) {\n+            debug!(\"filesearch: searching additional lib search paths\");\n+            if !self.addl_lib_search_paths.each(f) {\n+                return;\n             }\n-            match get_rustpkg_lib_path() {\n-              result::Ok(ref p) => paths.push((/*bad*/copy *p)),\n-              result::Err(_) => ()\n+\n+            debug!(\"filesearch: searching target lib path\");\n+            if !f(&make_target_lib_path(self.sysroot,\n+                                        self.target_triple)) {\n+                return;\n             }\n-            paths\n+            debug!(\"filesearch: searching rustpkg lib path nearest\");\n+            if match get_rustpkg_lib_path_nearest() {\n+                    result::Ok(ref p) => f(p),\n+                    result::Err(_) => true\n+                } {\n+                    return;\n+                }\n+           debug!(\"filesearch: searching rustpkg lib path\");\n+           match get_rustpkg_lib_path() {\n+              result::Ok(ref p) => f(p),\n+              result::Err(_) => true\n+           }\n         }\n         fn get_target_lib_path(&self) -> Path {\n-            make_target_lib_path(&self.sysroot, self.target_triple)\n+            make_target_lib_path(self.sysroot, self.target_triple)\n         }\n         fn get_target_lib_file_path(&self, file: &Path) -> Path {\n             self.get_target_lib_path().push_rel(file)\n@@ -72,7 +80,7 @@ pub fn mk_filesearch(maybe_sysroot: &Option<Path>,\n \n pub fn search<T:Copy>(filesearch: @FileSearch, pick: pick<T>) -> Option<T> {\n     let mut rslt = None;\n-    for filesearch.lib_search_paths().each |lib_search_path| {\n+    for filesearch.for_each_lib_search_path() |lib_search_path| {\n         debug!(\"searching %s\", lib_search_path.to_str());\n         for os::list_dir_path(lib_search_path).each |path| {\n             debug!(\"testing %s\", path.to_str());\n@@ -108,10 +116,10 @@ fn get_or_default_sysroot() -> Path {\n     }\n }\n \n-fn get_sysroot(maybe_sysroot: &Option<Path>) -> Path {\n+fn get_sysroot(maybe_sysroot: &Option<@Path>) -> @Path {\n     match *maybe_sysroot {\n-      option::Some(ref sr) => (/*bad*/copy *sr),\n-      option::None => get_or_default_sysroot()\n+      option::Some(sr) => sr,\n+      option::None => @get_or_default_sysroot()\n     }\n }\n "}, {"sha": "348d828bded2f2a9fced3179ddc5197cc24864f3", "filename": "src/librustpkg/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c42f1218a0a7b3a5c84502f9cb4b123d65148f4c/src%2Flibrustpkg%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42f1218a0a7b3a5c84502f9cb4b123d65148f4c/src%2Flibrustpkg%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fcontext.rs?ref=c42f1218a0a7b3a5c84502f9cb4b123d65148f4c", "patch": "@@ -13,6 +13,9 @@\n use core::hashmap::HashMap;\n \n pub struct Ctx {\n+    // Sysroot -- if this is None, uses rustc filesearch's\n+    // idea of the default\n+    sysroot_opt: Option<@Path>,\n     // I'm not sure what this is for\n     json: bool,\n     // Cache of hashes of things already installed"}, {"sha": "d21fdcda7f76f779a23f29f225a17397ea00ec6f", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c42f1218a0a7b3a5c84502f9cb4b123d65148f4c/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42f1218a0a7b3a5c84502f9cb4b123d65148f4c/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=c42f1218a0a7b3a5c84502f9cb4b123d65148f4c", "patch": "@@ -29,11 +29,7 @@ pub static u_rwx: i32 = (S_IRUSR | S_IWUSR | S_IXUSR) as i32;\n /// Creates a directory that is readable, writeable,\n /// and executable by the user. Returns true iff creation\n /// succeeded.\n-pub fn make_dir_rwx(p: &Path) -> bool {\n-    use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n-\n-    os::make_dir(p, u_rwx)\n-}\n+pub fn make_dir_rwx(p: &Path) -> bool { os::make_dir(p, u_rwx) }\n \n /// Replace all occurrences of '-' in the stem part of path with '_'\n /// This is because we treat rust-foo-bar-quux and rust_foo_bar_quux"}, {"sha": "dd5806ba01568a5e2bf48e60890a4de0ee1ad908", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c42f1218a0a7b3a5c84502f9cb4b123d65148f4c/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c42f1218a0a7b3a5c84502f9cb4b123d65148f4c/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=c42f1218a0a7b3a5c84502f9cb4b123d65148f4c", "patch": "@@ -306,7 +306,7 @@ impl Ctx {\n             // Find crates inside the workspace\n             src.find_crates();\n             // Build it!\n-            src.build(&build_dir, cfgs);\n+            src.build(&build_dir, cfgs, self.sysroot_opt);\n         }\n \n     }\n@@ -506,6 +506,7 @@ pub fn main() {\n     }\n \n     Ctx {\n+        sysroot_opt: None, // Currently, only tests override this\n         json: json,\n         dep_cache: @mut HashMap::new()\n     }.run(cmd, args);\n@@ -648,6 +649,8 @@ impl PkgSrc {\n \n         debug!(\"Checking dir: %s\", dir.to_str());\n \n+        // tjc: Rather than erroring out, need to try downloading the\n+        // contents of the path to a local directory (#5679)\n         if !os::path_exists(&dir) {\n             cond.raise((self.id, ~\"missing package dir\"));\n         }\n@@ -744,18 +747,20 @@ impl PkgSrc {\n                self.benchs.len())\n     }\n \n-    fn build_crates(&self, dst_dir: &Path,\n-                           src_dir: &Path,\n-                           crates: &[Crate],\n-                           cfgs: ~[~str],\n-                           test: bool, crate_type: crate_type) {\n+    fn build_crates(&self,\n+                    maybe_sysroot: Option<@Path>,\n+                    dst_dir: &Path,\n+                    src_dir: &Path,\n+                    crates: &[Crate],\n+                    cfgs: ~[~str],\n+                    test: bool, crate_type: crate_type) {\n \n         for crates.each |&crate| {\n             let path = &src_dir.push_rel(&crate.file).normalize();\n             util::note(fmt!(\"build_crates: compiling %s\", path.to_str()));\n             util::note(fmt!(\"build_crates: destination dir is %s\", dst_dir.to_str()));\n \n-            let result = util::compile_crate(None, self.id, path,\n+            let result = util::compile_crate(maybe_sysroot, self.id, path,\n                                      dst_dir,\n                                      crate.flags,\n                                      crate.cfgs + cfgs,\n@@ -769,15 +774,15 @@ impl PkgSrc {\n         }\n     }\n \n-    fn build(&self, dst_dir: &Path, cfgs: ~[~str]) {\n+    fn build(&self, dst_dir: &Path, cfgs: ~[~str], maybe_sysroot: Option<@Path>) {\n         let dir = self.check_dir();\n         debug!(\"Building libs\");\n-        self.build_crates(dst_dir, &dir, self.libs, cfgs, false, lib_crate);\n+        self.build_crates(maybe_sysroot, dst_dir, &dir, self.libs, cfgs, false, lib_crate);\n         debug!(\"Building mains\");\n-        self.build_crates(dst_dir, &dir, self.mains, cfgs, false, bin_crate);\n+        self.build_crates(maybe_sysroot, dst_dir, &dir, self.mains, cfgs, false, bin_crate);\n         debug!(\"Building tests\");\n-        self.build_crates(dst_dir, &dir, self.tests, cfgs, true, bin_crate);\n+        self.build_crates(maybe_sysroot, dst_dir, &dir, self.tests, cfgs, true, bin_crate);\n         debug!(\"Building benches\");\n-        self.build_crates(dst_dir, &dir, self.benchs, cfgs, true, bin_crate);\n+        self.build_crates(maybe_sysroot, dst_dir, &dir, self.benchs, cfgs, true, bin_crate);\n     }\n }"}, {"sha": "486e2959e9ed76208947046d94e97d28d5421fbc", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 48, "deletions": 7, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c42f1218a0a7b3a5c84502f9cb4b123d65148f4c/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42f1218a0a7b3a5c84502f9cb4b123d65148f4c/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=c42f1218a0a7b3a5c84502f9cb4b123d65148f4c", "patch": "@@ -20,8 +20,9 @@ use path_util::{target_executable_in_workspace, target_library_in_workspace,\n                make_dir_rwx, u_rwx};\n use core::os::mkdir_recursive;\n \n-fn fake_ctxt() -> Ctx {\n+fn fake_ctxt(sysroot_opt: Option<@Path>) -> Ctx {\n     Ctx {\n+        sysroot_opt: sysroot_opt,\n         json: false,\n         dep_cache: @mut HashMap::new()\n     }\n@@ -34,6 +35,13 @@ fn fake_pkg() -> PkgId {\n     }\n }\n \n+fn remote_pkg() -> PkgId {\n+    PkgId {\n+        path: Path(~\"github.com/catamorphism/test-pkg\"),\n+        version: default_version()\n+    }\n+}\n+\n fn writeFile(file_path: &Path, contents: ~str) {\n     let out: @io::Writer =\n         result::get(&io::file_writer(file_path,\n@@ -69,6 +77,15 @@ fn is_rwx(p: &Path) -> bool {\n     }\n }\n \n+#[cfg(test)]\n+fn test_sysroot() -> Path {\n+    // Totally gross hack but it's just for test cases.\n+    // Infer the sysroot from the exe name and tack \"stage2\"\n+    // onto it. (Did I mention it was a gross hack?)\n+    let self_path = os::self_exe_path().expect(\"Couldn't get self_exe path\");\n+    self_path.pop().push(\"stage2\")\n+}\n+\n #[test]\n fn test_make_dir_rwx() {\n     let temp = &os::tmpdir();\n@@ -84,11 +101,9 @@ fn test_make_dir_rwx() {\n \n #[test]\n fn test_install_valid() {\n-    use rustc::metadata::filesearch;\n-\n-    let sysroot = filesearch::get_rustpkg_sysroot();\n-    debug!(\"sysroot = %s\", sysroot.get().to_str());\n-    let ctxt = fake_ctxt();\n+    let sysroot = test_sysroot();\n+    debug!(\"sysroot = %s\", sysroot.to_str());\n+    let ctxt = fake_ctxt(Some(@sysroot));\n     let temp_pkg_id = fake_pkg();\n     let temp_workspace = mk_temp_workspace(&temp_pkg_id.path);\n     // should have test, bench, lib, and main\n@@ -114,7 +129,7 @@ fn test_install_invalid() {\n     use conditions::nonexistent_package::cond;\n     use cond1 = conditions::missing_pkg_files::cond;\n \n-    let ctxt = fake_ctxt();\n+    let ctxt = fake_ctxt(None);\n     let pkgid = fake_pkg();\n     let temp_workspace = mkdtemp(&os::tmpdir(), \"test\").expect(\"couldn't create temp dir\");\n     let mut error_occurred = false;\n@@ -130,3 +145,29 @@ fn test_install_invalid() {\n     }\n     assert!(error_occurred && error1_occurred);\n }\n+\n+#[test]\n+#[ignore(reason = \"install from URL-fragment not yet implemented\")]\n+fn test_install_url() {\n+    let sysroot = test_sysroot();\n+    debug!(\"sysroot = %s\", sysroot.to_str());\n+    let ctxt = fake_ctxt(Some(@sysroot));\n+    let temp_pkg_id = remote_pkg();\n+    let temp_workspace = mk_temp_workspace(&temp_pkg_id.path);\n+    // should have test, bench, lib, and main\n+    ctxt.install(&temp_workspace, temp_pkg_id);\n+    // Check that all files exist\n+    let exec = target_executable_in_workspace(temp_pkg_id, &temp_workspace);\n+    debug!(\"exec = %s\", exec.to_str());\n+    assert!(os::path_exists(&exec));\n+    assert!(is_rwx(&exec));\n+    let lib = target_library_in_workspace(temp_pkg_id, &temp_workspace);\n+    debug!(\"lib = %s\", lib.to_str());\n+    assert!(os::path_exists(&lib));\n+    assert!(is_rwx(&lib));\n+    // And that the test and bench executables aren't installed\n+    assert!(!os::path_exists(&target_test_in_workspace(temp_pkg_id, &temp_workspace)));\n+    let bench = target_bench_in_workspace(temp_pkg_id, &temp_workspace);\n+    debug!(\"bench = %s\", bench.to_str());\n+    assert!(!os::path_exists(&bench));\n+}\n\\ No newline at end of file"}, {"sha": "0762fa4ad7fd3d1829e6179711ce9e6aa2264bdf", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c42f1218a0a7b3a5c84502f9cb4b123d65148f4c/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42f1218a0a7b3a5c84502f9cb4b123d65148f4c/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=c42f1218a0a7b3a5c84502f9cb4b123d65148f4c", "patch": "@@ -435,7 +435,7 @@ pub fn add_pkg(pkg: &Pkg) -> bool {\n }\n \n // FIXME (#4432): Use workcache to only compile when needed\n-pub fn compile_input(sysroot: Option<Path>,\n+pub fn compile_input(sysroot: Option<@Path>,\n                      pkg_id: PkgId,\n                      in_file: &Path,\n                      out_dir: &Path,\n@@ -474,6 +474,7 @@ pub fn compile_input(sysroot: Option<Path>,\n            out_file.to_str());\n     debug!(\"flags: %s\", str::connect(flags, ~\" \"));\n     debug!(\"cfgs: %s\", str::connect(cfgs, ~\" \"));\n+    debug!(\"compile_input's sysroot = %?\", sysroot);\n \n     let matches = getopts(~[~\"-Z\", ~\"time-passes\"]\n                           + if building_library { ~[~\"--lib\"] }\n@@ -587,7 +588,7 @@ fn add_attrs(c: ast::crate, new_attrs: ~[attribute]) -> @ast::crate {\n \n // Called by build_crates\n // FIXME (#4432): Use workcache to only compile when needed\n-pub fn compile_crate(sysroot: Option<Path>, pkg_id: PkgId,\n+pub fn compile_crate(sysroot: Option<@Path>, pkg_id: PkgId,\n                      crate: &Path, dir: &Path,\n                      flags: ~[~str], cfgs: ~[~str], opt: bool,\n                      test: bool, crate_type: crate_type) -> bool {"}]}