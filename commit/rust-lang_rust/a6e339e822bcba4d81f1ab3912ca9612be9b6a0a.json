{"sha": "a6e339e822bcba4d81f1ab3912ca9612be9b6a0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ZTMzOWU4MjJiY2JhNGQ4MWYxYWIzOTEyY2E5NjEyYmU5YjZhMGE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-11T14:36:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-11T15:28:51Z"}, "message": "use Source for impl block", "tree": {"sha": "2d6444f28ea0501ae768c007243e25b86fef06e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d6444f28ea0501ae768c007243e25b86fef06e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6e339e822bcba4d81f1ab3912ca9612be9b6a0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6e339e822bcba4d81f1ab3912ca9612be9b6a0a", "html_url": "https://github.com/rust-lang/rust/commit/a6e339e822bcba4d81f1ab3912ca9612be9b6a0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6e339e822bcba4d81f1ab3912ca9612be9b6a0a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1", "html_url": "https://github.com/rust-lang/rust/commit/f411c2988d40bbdebc5c9a63ce4bfb883a2fbca1"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "5b56f890e4d0821421cbe9d2c06c5dfa0a902684", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a6e339e822bcba4d81f1ab3912ca9612be9b6a0a/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6e339e822bcba4d81f1ab3912ca9612be9b6a0a/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=a6e339e822bcba4d81f1ab3912ca9612be9b6a0a", "patch": "@@ -442,11 +442,8 @@ impl HasSource for Union {\n }\n \n impl Union {\n-    pub fn source(\n-        self,\n-        db: &(impl DefDatabase + AstDatabase),\n-    ) -> (HirFileId, TreeArc<ast::StructDef>) {\n-        self.id.source(db)\n+    pub fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::StructDef>> {\n+        self.id.source(db).into()\n     }\n \n     pub fn name(self, db: &impl DefDatabase) -> Option<Name> {"}, {"sha": "f736f38751e006cfd2f2041debdfa2e32354bf61", "filename": "crates/ra_hir/src/docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6e339e822bcba4d81f1ab3912ca9612be9b6a0a/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6e339e822bcba4d81f1ab3912ca9612be9b6a0a/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdocs.rs?ref=a6e339e822bcba4d81f1ab3912ca9612be9b6a0a", "patch": "@@ -82,7 +82,7 @@ pub(crate) fn documentation_query(\n         DocDef::Static(it) => docs_from_ast(&*it.source(db).ast),\n         DocDef::Const(it) => docs_from_ast(&*it.source(db).ast),\n         DocDef::Function(it) => docs_from_ast(&*it.source(db).ast),\n-        DocDef::Union(it) => docs_from_ast(&*it.source(db).1),\n+        DocDef::Union(it) => docs_from_ast(&*it.source(db).ast),\n         DocDef::Trait(it) => docs_from_ast(&*it.source(db).ast),\n         DocDef::TypeAlias(it) => docs_from_ast(&*it.source(db).ast),\n         DocDef::MacroDef(it) => docs_from_ast(&*it.source(db).1),"}, {"sha": "0b8bd5700f974dde7b91801f8e482800c670a637", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6e339e822bcba4d81f1ab3912ca9612be9b6a0a/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6e339e822bcba4d81f1ab3912ca9612be9b6a0a/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=a6e339e822bcba4d81f1ab3912ca9612be9b6a0a", "patch": "@@ -70,7 +70,7 @@ impl GenericParams {\n         match def {\n             GenericDef::Function(it) => generics.fill(&*it.source(db).ast, start),\n             GenericDef::Struct(it) => generics.fill(&*it.source(db).ast, start),\n-            GenericDef::Union(it) => generics.fill(&*it.source(db).1, start),\n+            GenericDef::Union(it) => generics.fill(&*it.source(db).ast, start),\n             GenericDef::Enum(it) => generics.fill(&*it.source(db).ast, start),\n             GenericDef::Trait(it) => {\n                 // traits get the Self type as an implicit first type parameter\n@@ -82,7 +82,7 @@ impl GenericParams {\n                 generics.fill(&*it.source(db).ast, start + 1);\n             }\n             GenericDef::TypeAlias(it) => generics.fill(&*it.source(db).ast, start),\n-            GenericDef::ImplBlock(it) => generics.fill(&*it.source(db).1, start),\n+            GenericDef::ImplBlock(it) => generics.fill(&*it.source(db).ast, start),\n         }\n \n         Arc::new(generics)"}, {"sha": "8194f38d4e3cefd3a4600dc6e537dece10c3c61d", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a6e339e822bcba4d81f1ab3912ca9612be9b6a0a/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6e339e822bcba4d81f1ab3912ca9612be9b6a0a/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=a6e339e822bcba4d81f1ab3912ca9612be9b6a0a", "patch": "@@ -8,7 +8,7 @@ use ra_syntax::{\n };\n \n use crate::{\n-    Const, TypeAlias, Function, HirFileId, AstDatabase,\n+    Const, TypeAlias, Function, HirFileId, AstDatabase, HasSource, Source,\n     HirDatabase, DefDatabase, TraitRef,\n     type_ref::TypeRef,\n     ids::LocationCtx,\n@@ -44,6 +44,15 @@ pub struct ImplBlock {\n     impl_id: ImplId,\n }\n \n+impl HasSource for ImplBlock {\n+    type Ast = TreeArc<ast::ImplBlock>;\n+    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::ImplBlock>> {\n+        let source_map = db.impls_in_module_with_source_map(self.module).1;\n+        let (file_id, source) = self.module.definition_source(db);\n+        (file_id, source_map.get(&source, self.impl_id)).into()\n+    }\n+}\n+\n impl ImplBlock {\n     pub(crate) fn containing(\n         module_impl_blocks: Arc<ModuleImplBlocks>,\n@@ -58,13 +67,10 @@ impl ImplBlock {\n     }\n \n     /// Returns the syntax of the impl block\n-    pub fn source(\n-        &self,\n-        db: &(impl DefDatabase + AstDatabase),\n-    ) -> (HirFileId, TreeArc<ast::ImplBlock>) {\n+    pub fn source(&self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::ImplBlock>> {\n         let source_map = db.impls_in_module_with_source_map(self.module).1;\n         let (file_id, source) = self.module.definition_source(db);\n-        (file_id, source_map.get(&source, self.impl_id))\n+        (file_id, source_map.get(&source, self.impl_id)).into()\n     }\n \n     pub fn id(&self) -> ImplId {"}, {"sha": "640d685444186c309c47f8122329dcaa9d1de937", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6e339e822bcba4d81f1ab3912ca9612be9b6a0a/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6e339e822bcba4d81f1ab3912ca9612be9b6a0a/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=a6e339e822bcba4d81f1ab3912ca9612be9b6a0a", "patch": "@@ -228,12 +228,12 @@ impl NavigationTarget {\n         db: &RootDatabase,\n         impl_block: hir::ImplBlock,\n     ) -> NavigationTarget {\n-        let (file_id, node) = impl_block.source(db);\n+        let src = impl_block.source(db);\n         NavigationTarget::from_syntax(\n-            file_id.as_original_file(),\n+            src.file_id.as_original_file(),\n             \"impl\".into(),\n             None,\n-            node.syntax(),\n+            src.ast.syntax(),\n             None,\n             None,\n         )"}]}