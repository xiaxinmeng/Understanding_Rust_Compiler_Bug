{"sha": "56512b9d427012321384b91dcde5dc8daa83cf89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NTEyYjlkNDI3MDEyMzIxMzg0YjkxZGNkZTVkYzhkYWE4M2NmODk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-22T18:57:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-22T18:57:55Z"}, "message": "Rollup merge of #66639 - Centril:simplify-fresh-binding, r=petrochenkov\n\nresolve: more declarative `fresh_binding`\n\nFollowing up on https://github.com/rust-lang/rust/pull/64111, this PR redefines `fresh_binding` wrt. `already_bound_and` and `already_bound_or` in a more declarative and simplified fashion.\n\ncc #54883\n\nr? @petrochenkov", "tree": {"sha": "e49948083f64d1b3e0503d6a0b789743d4da3fee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e49948083f64d1b3e0503d6a0b789743d4da3fee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56512b9d427012321384b91dcde5dc8daa83cf89", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2C+zCRBK7hj4Ov3rIwAAdHIIAFyZgIqrCWlHveVDiknb008e\n5f8ib0tv1tzaQDh7xaHjjmrObk4AgY/XIvUEKmZi0EOBa0zIOkupg9gam5ASKIja\nTwRu4q3I1T6poBOOuDztdl+VNgOM9bH1iSBmJ5oZdz4OXHBVel7bXsc3uMqAb4ht\nTQ5ipcKiGGlKbsbLnVTXVLJXm9VIIBk2RSnTtxNQGFn3vDfomeZZLKHxHA1ZYAPF\n50RkRDnW3iYbLj7wPBaM9+F4M4aJLIDhvQWmR4CO7Bn8Bd82us/pGqFs/hgKezE+\nF34q3+Ywt/B7zsry9aLxKe79eECLlNxTWYAJeBH60OPm/nfrnI+nirDEe8yM67M=\n=Xj2V\n-----END PGP SIGNATURE-----\n", "payload": "tree e49948083f64d1b3e0503d6a0b789743d4da3fee\nparent fd3bd29c181896e31f7a756a5b64a27d6578ca81\nparent 94b7ea97bf1c817a94237fa789c841eb0e66b5c0\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1574449075 +0100\ncommitter GitHub <noreply@github.com> 1574449075 +0100\n\nRollup merge of #66639 - Centril:simplify-fresh-binding, r=petrochenkov\n\nresolve: more declarative `fresh_binding`\n\nFollowing up on https://github.com/rust-lang/rust/pull/64111, this PR redefines `fresh_binding` wrt. `already_bound_and` and `already_bound_or` in a more declarative and simplified fashion.\n\ncc #54883\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56512b9d427012321384b91dcde5dc8daa83cf89", "html_url": "https://github.com/rust-lang/rust/commit/56512b9d427012321384b91dcde5dc8daa83cf89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56512b9d427012321384b91dcde5dc8daa83cf89/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd3bd29c181896e31f7a756a5b64a27d6578ca81", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd3bd29c181896e31f7a756a5b64a27d6578ca81", "html_url": "https://github.com/rust-lang/rust/commit/fd3bd29c181896e31f7a756a5b64a27d6578ca81"}, {"sha": "94b7ea97bf1c817a94237fa789c841eb0e66b5c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/94b7ea97bf1c817a94237fa789c841eb0e66b5c0", "html_url": "https://github.com/rust-lang/rust/commit/94b7ea97bf1c817a94237fa789c841eb0e66b5c0"}], "stats": {"total": 22, "additions": 7, "deletions": 15}, "files": [{"sha": "666c482c680462bb6ff213a0b0658004c8919656", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/56512b9d427012321384b91dcde5dc8daa83cf89/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56512b9d427012321384b91dcde5dc8daa83cf89/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=56512b9d427012321384b91dcde5dc8daa83cf89", "patch": "@@ -69,6 +69,7 @@ impl PatternSource {\n /// Denotes whether the context for the set of already bound bindings is a `Product`\n /// or `Or` context. This is used in e.g., `fresh_binding` and `resolve_pattern_inner`.\n /// See those functions for more information.\n+#[derive(PartialEq)]\n enum PatBoundCtx {\n     /// A product pattern context, e.g., `Variant(a, b)`.\n     Product,\n@@ -1417,21 +1418,12 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n         // later passes make about or-patterns.)\n         let ident = ident.modern_and_legacy();\n \n-        // Walk outwards the stack of products / or-patterns and\n-        // find out if the identifier has been bound in any of these.\n-        let mut already_bound_and = false;\n-        let mut already_bound_or = false;\n-        for (is_sum, set) in bindings.iter_mut().rev() {\n-            match (is_sum, set.get(&ident).cloned()) {\n-                // Already bound in a product pattern, e.g. `(a, a)` which is not allowed.\n-                (PatBoundCtx::Product, Some(..)) => already_bound_and = true,\n-                // Already bound in an or-pattern, e.g. `V1(a) | V2(a)`.\n-                // This is *required* for consistency which is checked later.\n-                (PatBoundCtx::Or, Some(..)) => already_bound_or = true,\n-                // Not already bound here.\n-                _ => {}\n-            }\n-        }\n+        let mut bound_iter = bindings.iter().filter(|(_, set)| set.contains(&ident));\n+        // Already bound in a product pattern? e.g. `(a, a)` which is not allowed.\n+        let already_bound_and = bound_iter.clone().any(|(ctx, _)| *ctx == PatBoundCtx::Product);\n+        // Already bound in an or-pattern? e.g. `V1(a) | V2(a)`.\n+        // This is *required* for consistency which is checked later.\n+        let already_bound_or = bound_iter.any(|(ctx, _)| *ctx == PatBoundCtx::Or);\n \n         if already_bound_and {\n             // Overlap in a product pattern somewhere; report an error."}]}