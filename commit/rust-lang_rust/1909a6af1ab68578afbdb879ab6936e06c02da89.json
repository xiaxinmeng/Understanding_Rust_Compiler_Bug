{"sha": "1909a6af1ab68578afbdb879ab6936e06c02da89", "node_id": "C_kwDOAAsO6NoAKDE5MDlhNmFmMWFiNjg1NzhhZmJkYjg3OWFiNjkzNmUwNmMwMmRhODk", "commit": {"author": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-10-26T16:10:40Z"}, "committer": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-10-26T16:30:32Z"}, "message": "[`use_self`] fix suggestion when full path to struct was given\n\nPreviously the following wrong suggestion was given\n\n```rust\nimpl Error for std::fmt::Error {\n    fn custom<T: std::fmt::Display>(_msg: T) -> Self {\n-        std::fmt::Error // Should lint\n+        Self::Error // Should lint\n    }\n}\n```\n\nAlso remove known problem line related to #4140 since it's been closed, and refactor the lint", "tree": {"sha": "daebf502e9fe598e1a78f76d9aaa92f4282dd68d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daebf502e9fe598e1a78f76d9aaa92f4282dd68d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1909a6af1ab68578afbdb879ab6936e06c02da89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1909a6af1ab68578afbdb879ab6936e06c02da89", "html_url": "https://github.com/rust-lang/rust/commit/1909a6af1ab68578afbdb879ab6936e06c02da89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1909a6af1ab68578afbdb879ab6936e06c02da89/comments", "author": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e86e810889481d6f4284e6ec29224ed5fca490bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e86e810889481d6f4284e6ec29224ed5fca490bd", "html_url": "https://github.com/rust-lang/rust/commit/e86e810889481d6f4284e6ec29224ed5fca490bd"}], "stats": {"total": 120, "additions": 87, "deletions": 33}, "files": [{"sha": "464ffdc0a2ad920b7223f541f89115afc8a3f7b6", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1909a6af1ab68578afbdb879ab6936e06c02da89/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1909a6af1ab68578afbdb879ab6936e06c02da89/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=1909a6af1ab68578afbdb879ab6936e06c02da89", "patch": "@@ -30,7 +30,6 @@ declare_clippy_lint! {\n     ///\n     /// ### Known problems\n     /// - Unaddressed false negative in fn bodies of trait implementations\n-    /// - False positive with associated types in traits (#4140)\n     ///\n     /// ### Example\n     /// ```rust\n@@ -235,24 +234,13 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             then {} else { return; }\n         }\n         match expr.kind {\n-            ExprKind::Struct(QPath::Resolved(_, path), ..) => match path.res {\n-                Res::SelfTyParam { .. } | Res::SelfTyAlias { .. } => (),\n-                Res::Def(DefKind::Variant, _) => lint_path_to_variant(cx, path),\n-                _ => span_lint(cx, path.span),\n-            },\n-            // tuple struct instantiation (`Foo(arg)` or `Enum::Foo(arg)`)\n+            ExprKind::Struct(QPath::Resolved(_, path), ..) => check_path(cx, path),\n             ExprKind::Call(fun, _) => {\n                 if let ExprKind::Path(QPath::Resolved(_, path)) = fun.kind {\n-                    if let Res::Def(DefKind::Ctor(ctor_of, _), ..) = path.res {\n-                        match ctor_of {\n-                            CtorOf::Variant => lint_path_to_variant(cx, path),\n-                            CtorOf::Struct => span_lint(cx, path.span),\n-                        }\n-                    }\n+                    check_path(cx, path);\n                 }\n             },\n-            // unit enum variants (`Enum::A`)\n-            ExprKind::Path(QPath::Resolved(_, path)) => lint_path_to_variant(cx, path),\n+            ExprKind::Path(QPath::Resolved(_, path)) => check_path(cx, path),\n             _ => (),\n         }\n     }\n@@ -268,15 +256,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                  | PatKind::Struct(QPath::Resolved(_, path), _, _) = pat.kind;\n             if cx.typeck_results().pat_ty(pat) == cx.tcx.type_of(impl_id);\n             then {\n-                match path.res {\n-                    Res::Def(DefKind::Ctor(ctor_of, _), ..) => match ctor_of {\n-                            CtorOf::Variant => lint_path_to_variant(cx, path),\n-                            CtorOf::Struct => span_lint(cx, path.span),\n-                    },\n-                    Res::Def(DefKind::Variant, ..) => lint_path_to_variant(cx, path),\n-                    Res::Def(DefKind::Struct, ..) => span_lint(cx, path.span),\n-                    _ => ()\n-                }\n+                check_path(cx, path);\n             }\n         }\n     }\n@@ -314,6 +294,16 @@ fn span_lint(cx: &LateContext<'_>, span: Span) {\n     );\n }\n \n+fn check_path(cx: &LateContext<'_>, path: &Path<'_>) {\n+    match path.res {\n+        Res::Def(DefKind::Ctor(CtorOf::Variant, _) | DefKind::Variant, ..) => {\n+            lint_path_to_variant(cx, path);\n+        },\n+        Res::Def(DefKind::Ctor(CtorOf::Struct, _) | DefKind::Struct, ..) => span_lint(cx, path.span),\n+        _ => (),\n+    }\n+}\n+\n fn lint_path_to_variant(cx: &LateContext<'_>, path: &Path<'_>) {\n     if let [.., self_seg, _variant] = path.segments {\n         let span = path"}, {"sha": "163f8bb35e79bef6831b8c2a5ca1201444b58355", "filename": "tests/ui-cargo/cargo_rust_version/fail_both_diff/src/main.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1909a6af1ab68578afbdb879ab6936e06c02da89/tests%2Fui-cargo%2Fcargo_rust_version%2Ffail_both_diff%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1909a6af1ab68578afbdb879ab6936e06c02da89/tests%2Fui-cargo%2Fcargo_rust_version%2Ffail_both_diff%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fcargo_rust_version%2Ffail_both_diff%2Fsrc%2Fmain.stderr?ref=1909a6af1ab68578afbdb879ab6936e06c02da89", "patch": "@@ -12,5 +12,11 @@ note: the lint level is defined here\n LL | #![deny(clippy::use_self)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: unnecessary structure name repetition\n+  --> $DIR/main.rs:7:9\n+   |\n+LL |         Foo\n+   |         ^^^ help: use the applicable keyword: `Self`\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "259d39b12526cef2c87c2b6c9b5b46b28483d873", "filename": "tests/ui-cargo/cargo_rust_version/fail_both_same/src/main.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1909a6af1ab68578afbdb879ab6936e06c02da89/tests%2Fui-cargo%2Fcargo_rust_version%2Ffail_both_same%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1909a6af1ab68578afbdb879ab6936e06c02da89/tests%2Fui-cargo%2Fcargo_rust_version%2Ffail_both_same%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fcargo_rust_version%2Ffail_both_same%2Fsrc%2Fmain.stderr?ref=1909a6af1ab68578afbdb879ab6936e06c02da89", "patch": "@@ -10,5 +10,11 @@ note: the lint level is defined here\n LL | #![deny(clippy::use_self)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: unnecessary structure name repetition\n+  --> $DIR/main.rs:7:9\n+   |\n+LL |         Foo\n+   |         ^^^ help: use the applicable keyword: `Self`\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "259d39b12526cef2c87c2b6c9b5b46b28483d873", "filename": "tests/ui-cargo/cargo_rust_version/fail_cargo/src/main.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1909a6af1ab68578afbdb879ab6936e06c02da89/tests%2Fui-cargo%2Fcargo_rust_version%2Ffail_cargo%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1909a6af1ab68578afbdb879ab6936e06c02da89/tests%2Fui-cargo%2Fcargo_rust_version%2Ffail_cargo%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fcargo_rust_version%2Ffail_cargo%2Fsrc%2Fmain.stderr?ref=1909a6af1ab68578afbdb879ab6936e06c02da89", "patch": "@@ -10,5 +10,11 @@ note: the lint level is defined here\n LL | #![deny(clippy::use_self)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: unnecessary structure name repetition\n+  --> $DIR/main.rs:7:9\n+   |\n+LL |         Foo\n+   |         ^^^ help: use the applicable keyword: `Self`\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "259d39b12526cef2c87c2b6c9b5b46b28483d873", "filename": "tests/ui-cargo/cargo_rust_version/fail_clippy/src/main.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1909a6af1ab68578afbdb879ab6936e06c02da89/tests%2Fui-cargo%2Fcargo_rust_version%2Ffail_clippy%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1909a6af1ab68578afbdb879ab6936e06c02da89/tests%2Fui-cargo%2Fcargo_rust_version%2Ffail_clippy%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fcargo_rust_version%2Ffail_clippy%2Fsrc%2Fmain.stderr?ref=1909a6af1ab68578afbdb879ab6936e06c02da89", "patch": "@@ -10,5 +10,11 @@ note: the lint level is defined here\n LL | #![deny(clippy::use_self)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: unnecessary structure name repetition\n+  --> $DIR/main.rs:7:9\n+   |\n+LL |         Foo\n+   |         ^^^ help: use the applicable keyword: `Self`\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "97e6c3d5a55928d2db3a6ec727e3e9f712bd2ebf", "filename": "tests/ui-cargo/cargo_rust_version/fail_file_attr/src/main.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1909a6af1ab68578afbdb879ab6936e06c02da89/tests%2Fui-cargo%2Fcargo_rust_version%2Ffail_file_attr%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1909a6af1ab68578afbdb879ab6936e06c02da89/tests%2Fui-cargo%2Fcargo_rust_version%2Ffail_file_attr%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fcargo_rust_version%2Ffail_file_attr%2Fsrc%2Fmain.stderr?ref=1909a6af1ab68578afbdb879ab6936e06c02da89", "patch": "@@ -10,5 +10,11 @@ note: the lint level is defined here\n LL | #![deny(clippy::use_self)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: unnecessary structure name repetition\n+  --> $DIR/main.rs:12:9\n+   |\n+LL |         Foo\n+   |         ^^^ help: use the applicable keyword: `Self`\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "4e779308d024187acf9b20903b58f038ef62a08a", "filename": "tests/ui/use_self_trait.fixed", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1909a6af1ab68578afbdb879ab6936e06c02da89/tests%2Fui%2Fuse_self_trait.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1909a6af1ab68578afbdb879ab6936e06c02da89/tests%2Fui%2Fuse_self_trait.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self_trait.fixed?ref=1909a6af1ab68578afbdb879ab6936e06c02da89", "patch": "@@ -47,8 +47,7 @@ impl Mul for Bad {\n \n impl Clone for Bad {\n     fn clone(&self) -> Self {\n-        // FIXME: applicable here\n-        Bad\n+        Self\n     }\n }\n \n@@ -138,4 +137,16 @@ mod impl_in_macro {\n     parse_ip_impl!(Foo); // Should not lint\n }\n \n+mod full_path_replacement {\n+    trait Error {\n+        fn custom<T: std::fmt::Display>(_msg: T) -> Self;\n+    }\n+\n+    impl Error for std::fmt::Error {\n+        fn custom<T: std::fmt::Display>(_msg: T) -> Self {\n+            Self // Should lint\n+        }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "325dc73b21ea9565a9e304e551fffe7dd12e62f2", "filename": "tests/ui/use_self_trait.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1909a6af1ab68578afbdb879ab6936e06c02da89/tests%2Fui%2Fuse_self_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1909a6af1ab68578afbdb879ab6936e06c02da89/tests%2Fui%2Fuse_self_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self_trait.rs?ref=1909a6af1ab68578afbdb879ab6936e06c02da89", "patch": "@@ -47,7 +47,6 @@ impl Mul for Bad {\n \n impl Clone for Bad {\n     fn clone(&self) -> Self {\n-        // FIXME: applicable here\n         Bad\n     }\n }\n@@ -138,4 +137,16 @@ mod impl_in_macro {\n     parse_ip_impl!(Foo); // Should not lint\n }\n \n+mod full_path_replacement {\n+    trait Error {\n+        fn custom<T: std::fmt::Display>(_msg: T) -> Self;\n+    }\n+\n+    impl Error for std::fmt::Error {\n+        fn custom<T: std::fmt::Display>(_msg: T) -> Self {\n+            std::fmt::Error // Should lint\n+        }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "090729b9c3d54175c675db9c078aed3d7f0f5794", "filename": "tests/ui/use_self_trait.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1909a6af1ab68578afbdb879ab6936e06c02da89/tests%2Fui%2Fuse_self_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1909a6af1ab68578afbdb879ab6936e06c02da89/tests%2Fui%2Fuse_self_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self_trait.stderr?ref=1909a6af1ab68578afbdb879ab6936e06c02da89", "patch": "@@ -84,5 +84,17 @@ error: unnecessary structure name repetition\n LL |     fn mul(self, rhs: Bad) -> Bad {\n    |                               ^^^ help: use the applicable keyword: `Self`\n \n-error: aborting due to 14 previous errors\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:50:9\n+   |\n+LL |         Bad\n+   |         ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:147:13\n+   |\n+LL |             std::fmt::Error // Should lint\n+   |             ^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: aborting due to 16 previous errors\n "}]}