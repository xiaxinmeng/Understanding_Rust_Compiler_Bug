{"sha": "c457abee2e913ebb6f46329c15c6b43fbcb8c703", "node_id": "C_kwDOAAsO6NoAKGM0NTdhYmVlMmU5MTNlYmI2ZjQ2MzI5YzE1YzZiNDNmYmNiOGM3MDM", "commit": {"author": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-09-24T18:21:58Z"}, "committer": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-10-07T19:19:27Z"}, "message": "migrate lib_features.rs to translateable diagnostics", "tree": {"sha": "8baf292653b0d8d52ccea14e9877177ac6c8db15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8baf292653b0d8d52ccea14e9877177ac6c8db15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c457abee2e913ebb6f46329c15c6b43fbcb8c703", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c457abee2e913ebb6f46329c15c6b43fbcb8c703", "html_url": "https://github.com/rust-lang/rust/commit/c457abee2e913ebb6f46329c15c6b43fbcb8c703", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c457abee2e913ebb6f46329c15c6b43fbcb8c703/comments", "author": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "40d5f00e16230ce67c018bb05b8772f02634146c", "url": "https://api.github.com/repos/rust-lang/rust/commits/40d5f00e16230ce67c018bb05b8772f02634146c", "html_url": "https://github.com/rust-lang/rust/commit/40d5f00e16230ce67c018bb05b8772f02634146c"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "b2c54aaccfe3565809a05f81cac75d421ab7aef1", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c457abee2e913ebb6f46329c15c6b43fbcb8c703/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/c457abee2e913ebb6f46329c15c6b43fbcb8c703/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=c457abee2e913ebb6f46329c15c6b43fbcb8c703", "patch": "@@ -420,3 +420,9 @@ passes_unrecognized_field =\n \n passes_layout =\n     layout error: {$layout_error}\n+\n+passes_feature_stable_twice =\n+    feature `{$feature}` is declared stable since {$since}, but was previously declared stable since {$prev_since}\n+\n+passes_feature_previously_declared =\n+    feature `{$feature}` is declared {$declared}, but was previously declared {$prev_declared}"}, {"sha": "7c3a575242f320e0c00f18c426500f9773772b8a", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c457abee2e913ebb6f46329c15c6b43fbcb8c703/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c457abee2e913ebb6f46329c15c6b43fbcb8c703/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=c457abee2e913ebb6f46329c15c6b43fbcb8c703", "patch": "@@ -832,3 +832,23 @@ pub struct Layout {\n     pub span: Span,\n     pub layout_error: String,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(passes::feature_stable_twice, code = \"E0711\")]\n+pub struct FeatureStableTwice {\n+    #[primary_span]\n+    pub span: Span,\n+    pub feature: Symbol,\n+    pub since: Symbol,\n+    pub prev_since: Symbol,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes::feature_previously_declared, code = \"E0711\")]\n+pub struct FeaturePreviouslyDeclared<'a, 'b> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub feature: Symbol,\n+    pub declared: &'a str,\n+    pub prev_declared: &'b str,\n+}"}, {"sha": "b5843c0ae488b1f17c58d81c1ae91758baf4e8e7", "filename": "compiler/rustc_passes/src/lib_features.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c457abee2e913ebb6f46329c15c6b43fbcb8c703/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c457abee2e913ebb6f46329c15c6b43fbcb8c703/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs?ref=c457abee2e913ebb6f46329c15c6b43fbcb8c703", "patch": "@@ -6,7 +6,6 @@\n \n use rustc_ast::{Attribute, MetaItemKind};\n use rustc_attr::{rust_version_symbol, VERSION_PLACEHOLDER};\n-use rustc_errors::struct_span_err;\n use rustc_hir::intravisit::Visitor;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::lib_features::LibFeatures;\n@@ -15,6 +14,8 @@ use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::Symbol;\n use rustc_span::{sym, Span};\n \n+use crate::errors::{FeaturePreviouslyDeclared, FeatureStableTwice};\n+\n fn new_lib_features() -> LibFeatures {\n     LibFeatures { stable: Default::default(), unstable: Default::default() }\n }\n@@ -92,14 +93,12 @@ impl<'tcx> LibFeatureCollector<'tcx> {\n             (Some(since), _, false) => {\n                 if let Some((prev_since, _)) = self.lib_features.stable.get(&feature) {\n                     if *prev_since != since {\n-                        self.span_feature_error(\n+                        self.tcx.sess.emit_err(FeatureStableTwice {\n                             span,\n-                            &format!(\n-                                \"feature `{}` is declared stable since {}, \\\n-                                 but was previously declared stable since {}\",\n-                                feature, since, prev_since,\n-                            ),\n-                        );\n+                            feature,\n+                            since,\n+                            prev_since: *prev_since,\n+                        });\n                         return;\n                     }\n                 }\n@@ -110,22 +109,17 @@ impl<'tcx> LibFeatureCollector<'tcx> {\n                 self.lib_features.unstable.insert(feature, span);\n             }\n             (Some(_), _, true) | (None, true, _) => {\n-                self.span_feature_error(\n+                let declared = if since.is_some() { \"stable\" } else { \"unstable\" };\n+                let prev_declared = if since.is_none() { \"stable\" } else { \"unstable\" };\n+                self.tcx.sess.emit_err(FeaturePreviouslyDeclared {\n                     span,\n-                    &format!(\n-                        \"feature `{}` is declared {}, but was previously declared {}\",\n-                        feature,\n-                        if since.is_some() { \"stable\" } else { \"unstable\" },\n-                        if since.is_none() { \"stable\" } else { \"unstable\" },\n-                    ),\n-                );\n+                    feature,\n+                    declared,\n+                    prev_declared,\n+                });\n             }\n         }\n     }\n-\n-    fn span_feature_error(&self, span: Span, msg: &str) {\n-        struct_span_err!(self.tcx.sess, span, E0711, \"{}\", &msg).emit();\n-    }\n }\n \n impl<'tcx> Visitor<'tcx> for LibFeatureCollector<'tcx> {"}]}