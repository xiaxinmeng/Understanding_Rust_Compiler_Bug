{"sha": "936b567d2e732afa1cc357c7faff2491d6d9212d", "node_id": "C_kwDOAAsO6NoAKDkzNmI1NjdkMmU3MzJhZmExY2MzNTdjN2ZhZmYyNDkxZDZkOTIxMmQ", "commit": {"author": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2023-02-14T20:26:47Z"}, "committer": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2023-02-20T18:50:20Z"}, "message": "Minimal changes to make miri work", "tree": {"sha": "44b8330bc0243682065e81d747244407b612cf26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44b8330bc0243682065e81d747244407b612cf26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/936b567d2e732afa1cc357c7faff2491d6d9212d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEETdpCnQmiF6hBYUqdfsyTL4sscx4FAmPzwPEACgkQfsyTL4ss\ncx7DDg/9EgbICn+PKuz/tIINPZhz5ZPjMrJlN/QX6BilC4tKRX5AD5bLEwcsNh7w\nrUSPmtXDVfcuMEfZYaRM7AIhG+jF/D58db/LiQy1A1ePzSCvSs0ozqErVnykphnK\nNHnyGFb1m+hL6JT9GYCI8BRPwJumgyRbUfjTbZjsdzzcT7p+73B8voTBudpwjLp5\n/N6LAhiOoYOIM5Gj2GqnNtFsqDDihbHZERGkvj+zgFtCE3uLylTkVLtM7wFCAoc6\n42INKeUmJCQD64JZDPB5kdrEkZQtDvVWQ9wnvZEFTQXIppKZ6OUcIbU8yET2HtTQ\n8pHwVIlXWijz3fBdUMAtsHAhNPESkc11t3ozuk/jgDYFOixuHn5jQZoQb2sO2ZBV\nVrNO1qJZacewAx0uta7kEBm534LXdAE2D7DlfRXkDfKtSIdqSXNaewCH/g7udsZo\nE6v2Hev5Fiez+tq9JZVHW0GRoRT3pPBqSAq3dBw+QEfowMEMym2jFM0lzjLw8v6B\nL9TQu2FA0RLTadC/oyygRNCcscABbG61lqdQ4bcyoVvMJDL6xI9tcvYS04wDgQXs\nSd4jBxuhv0QJaCIhV7vH68CD8e6WFPgI/25TXZY6MQ9KJXfTg/gHC1LXqJzmWcTh\n+XD+NcR2FNP4pPTR7be/u5avpCLBCvr4oUfvhSucbFaRNiaLaN0=\n=fnIf\n-----END PGP SIGNATURE-----", "payload": "tree 44b8330bc0243682065e81d747244407b612cf26\nparent 871c1dee33b91f20d90ff14441bab5bb93c55380\nauthor Rune Tynan <runetynan@gmail.com> 1676406407 -0500\ncommitter Rune Tynan <runetynan@gmail.com> 1676919020 -0500\n\nMinimal changes to make miri work\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/936b567d2e732afa1cc357c7faff2491d6d9212d", "html_url": "https://github.com/rust-lang/rust/commit/936b567d2e732afa1cc357c7faff2491d6d9212d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/936b567d2e732afa1cc357c7faff2491d6d9212d/comments", "author": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "871c1dee33b91f20d90ff14441bab5bb93c55380", "url": "https://api.github.com/repos/rust-lang/rust/commits/871c1dee33b91f20d90ff14441bab5bb93c55380", "html_url": "https://github.com/rust-lang/rust/commit/871c1dee33b91f20d90ff14441bab5bb93c55380"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "92fa59aec6e5f0fc462beb0babf219d53f5026ee", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/936b567d2e732afa1cc357c7faff2491d6d9212d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936b567d2e732afa1cc357c7faff2491d6d9212d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=936b567d2e732afa1cc357c7faff2491d6d9212d", "patch": "@@ -16,8 +16,8 @@ use rustc_target::spec::abi::Abi as CallAbi;\n use crate::const_eval::CheckAlignment;\n \n use super::{\n-    AllocId, AllocRange, Allocation, AllocBytes, ConstAllocation, Frame, ImmTy, InterpCx, InterpResult,\n-    MemoryKind, OpTy, Operand, PlaceTy, Pointer, Provenance, Scalar, StackPopUnwind,\n+    AllocBytes, AllocId, AllocRange, Allocation, ConstAllocation, Frame, ImmTy, InterpCx,\n+    InterpResult, MemoryKind, OpTy, Operand, PlaceTy, Pointer, Provenance, Scalar, StackPopUnwind,\n };\n \n /// Data returned by Machine::stack_pop,\n@@ -111,7 +111,10 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Memory's allocation map\n     type MemoryMap: AllocMap<\n             AllocId,\n-            (MemoryKind<Self::MemoryKind>, Allocation<Self::Provenance, Self::AllocExtra, Self::Bytes>),\n+            (\n+                MemoryKind<Self::MemoryKind>,\n+                Allocation<Self::Provenance, Self::AllocExtra, Self::Bytes>,\n+            ),\n         > + Default\n         + Clone;\n "}, {"sha": "a3764a7d142663d454030eac69b3a3eda82768cd", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/936b567d2e732afa1cc357c7faff2491d6d9212d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936b567d2e732afa1cc357c7faff2491d6d9212d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=936b567d2e732afa1cc357c7faff2491d6d9212d", "patch": "@@ -581,7 +581,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         ptr: Pointer<Option<M::Provenance>>,\n         size: Size,\n         align: Align,\n-    ) -> InterpResult<'tcx, Option<AllocRef<'a, 'tcx, M::Provenance, M::AllocExtra, M::Bytes>>> {\n+    ) -> InterpResult<'tcx, Option<AllocRef<'a, 'tcx, M::Provenance, M::AllocExtra, M::Bytes>>>\n+    {\n         let ptr_and_alloc = self.check_and_deref_ptr(\n             ptr,\n             size,\n@@ -653,7 +654,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         ptr: Pointer<Option<M::Provenance>>,\n         size: Size,\n         align: Align,\n-    ) -> InterpResult<'tcx, Option<AllocRefMut<'a, 'tcx, M::Provenance, M::AllocExtra, M::Bytes>>> {\n+    ) -> InterpResult<'tcx, Option<AllocRefMut<'a, 'tcx, M::Provenance, M::AllocExtra, M::Bytes>>>\n+    {\n         let parts = self.get_ptr_access(ptr, size, align)?;\n         if let Some((alloc_id, offset, prov)) = parts {\n             let tcx = *self.tcx;\n@@ -924,7 +926,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> std::fmt::Debug for DumpAllocs<'a,\n }\n \n /// Reading and writing.\n-impl<'tcx, 'a, Prov: Provenance, Extra, Bytes: AllocBytes> AllocRefMut<'a, 'tcx, Prov, Extra, Bytes> {\n+impl<'tcx, 'a, Prov: Provenance, Extra, Bytes: AllocBytes>\n+    AllocRefMut<'a, 'tcx, Prov, Extra, Bytes>\n+{\n     /// `range` is relative to this allocation reference, not the base of the allocation.\n     pub fn write_scalar(&mut self, range: AllocRange, val: Scalar<Prov>) -> InterpResult<'tcx> {\n         let range = self.range.subrange(range);"}, {"sha": "d15933c826b9a65b20a96da471403f5cd8f4a09f", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/936b567d2e732afa1cc357c7faff2491d6d9212d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936b567d2e732afa1cc357c7faff2491d6d9212d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=936b567d2e732afa1cc357c7faff2491d6d9212d", "patch": "@@ -340,7 +340,8 @@ where\n     pub(super) fn get_place_alloc(\n         &self,\n         place: &MPlaceTy<'tcx, M::Provenance>,\n-    ) -> InterpResult<'tcx, Option<AllocRef<'_, 'tcx, M::Provenance, M::AllocExtra, M::Bytes>>> {\n+    ) -> InterpResult<'tcx, Option<AllocRef<'_, 'tcx, M::Provenance, M::AllocExtra, M::Bytes>>>\n+    {\n         assert!(place.layout.is_sized());\n         assert!(!place.meta.has_meta());\n         let size = place.layout.size;\n@@ -351,7 +352,8 @@ where\n     pub(super) fn get_place_alloc_mut(\n         &mut self,\n         place: &MPlaceTy<'tcx, M::Provenance>,\n-    ) -> InterpResult<'tcx, Option<AllocRefMut<'_, 'tcx, M::Provenance, M::AllocExtra, M::Bytes>>> {\n+    ) -> InterpResult<'tcx, Option<AllocRefMut<'_, 'tcx, M::Provenance, M::AllocExtra, M::Bytes>>>\n+    {\n         assert!(place.layout.is_sized());\n         assert!(!place.meta.has_meta());\n         let size = place.layout.size;"}, {"sha": "45477c4426672529455aa102614a4e890febae6b", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/936b567d2e732afa1cc357c7faff2491d6d9212d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936b567d2e732afa1cc357c7faff2491d6d9212d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=936b567d2e732afa1cc357c7faff2491d6d9212d", "patch": "@@ -32,13 +32,7 @@ pub use init_mask::{InitChunk, InitChunkIter};\n \n /// Functionality required for the bytes of an `Allocation`.\n pub trait AllocBytes:\n-    Clone\n-    + fmt::Debug\n-    + Eq\n-    + PartialEq\n-    + Hash\n-    + Deref<Target = [u8]>\n-    + DerefMut<Target = [u8]>\n+    Clone + fmt::Debug + Eq + PartialEq + Hash + Deref<Target = [u8]> + DerefMut<Target = [u8]>\n {\n     /// Adjust the bytes to the specified alignment -- by default, this is a no-op.\n     fn adjust_to_align(self, _align: Align) -> Self;\n@@ -271,11 +265,7 @@ impl AllocRange {\n // The constructors are all without extra; the extra gets added by a machine hook later.\n impl<Prov: Provenance, Bytes: AllocBytes> Allocation<Prov, (), Bytes> {\n     /// Creates an allocation from an existing `Bytes` value - this is needed for miri FFI support\n-    pub fn from_raw_bytes(\n-        bytes: Bytes,\n-        align: Align,\n-        mutability: Mutability,\n-    ) -> Self {\n+    pub fn from_raw_bytes(bytes: Bytes, align: Align, mutability: Mutability) -> Self {\n         let size = Size::from_bytes(bytes.len());\n         Self {\n             bytes,"}, {"sha": "1766d7a66980461e51b54de99105b39dd89b74f9", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/936b567d2e732afa1cc357c7faff2491d6d9212d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936b567d2e732afa1cc357c7faff2491d6d9212d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=936b567d2e732afa1cc357c7faff2491d6d9212d", "patch": "@@ -127,8 +127,8 @@ pub use self::error::{\n pub use self::value::{get_slice_bytes, ConstAlloc, ConstValue, Scalar};\n \n pub use self::allocation::{\n-    alloc_range, AllocBytes, AllocError, AllocRange, AllocResult, Allocation, ConstAllocation, InitChunk,\n-    InitChunkIter,\n+    alloc_range, AllocBytes, AllocError, AllocRange, AllocResult, Allocation, ConstAllocation,\n+    InitChunk, InitChunkIter,\n };\n \n pub use self::pointer::{Pointer, PointerArithmetic, Provenance};"}, {"sha": "00fdd57cb176b91f9466a3e137dd235b6e2ec718", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/936b567d2e732afa1cc357c7faff2491d6d9212d/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936b567d2e732afa1cc357c7faff2491d6d9212d/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=936b567d2e732afa1cc357c7faff2491d6d9212d", "patch": "@@ -771,10 +771,11 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n \n     type Provenance = Provenance;\n     type ProvenanceExtra = ProvenanceExtra;\n+    type Bytes = Box<[u8]>;\n \n     type MemoryMap = MonoHashMap<\n         AllocId,\n-        (MemoryKind<MiriMemoryKind>, Allocation<Provenance, Self::AllocExtra>),\n+        (MemoryKind<MiriMemoryKind>, Allocation<Provenance, Self::AllocExtra, Self::Bytes>),\n     >;\n \n     const GLOBAL_KIND: Option<MiriMemoryKind> = Some(MiriMemoryKind::Global);"}]}