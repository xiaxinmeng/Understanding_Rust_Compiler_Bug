{"sha": "af293372e4ea9578840338bdd1b765bfc3c80352", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMjkzMzcyZTRlYTk1Nzg4NDAzMzhiZGQxYjc2NWJmYzNjODAzNTI=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2014-07-01T22:17:28Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2014-09-14T19:35:48Z"}, "message": "PartialVec: Remove TODOs and rename `unwrap` to `into_vec`", "tree": {"sha": "f265e4a5a2719dd0b48c01c14ac73e87040cb6ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f265e4a5a2719dd0b48c01c14ac73e87040cb6ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af293372e4ea9578840338bdd1b765bfc3c80352", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af293372e4ea9578840338bdd1b765bfc3c80352", "html_url": "https://github.com/rust-lang/rust/commit/af293372e4ea9578840338bdd1b765bfc3c80352", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af293372e4ea9578840338bdd1b765bfc3c80352/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbc3cb3a54c02211d8e4f9ff082c4ee2d544ec7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbc3cb3a54c02211d8e4f9ff082c4ee2d544ec7d", "html_url": "https://github.com/rust-lang/rust/commit/dbc3cb3a54c02211d8e4f9ff082c4ee2d544ec7d"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "488661d2e8b5be9e9877f8e13a9d877012aa836d", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/af293372e4ea9578840338bdd1b765bfc3c80352/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af293372e4ea9578840338bdd1b765bfc3c80352/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=af293372e4ea9578840338bdd1b765bfc3c80352", "patch": "@@ -1710,9 +1710,6 @@ pub mod raw {\n     }\n }\n \n-// TODO: Find some way to statically assert that `T` and `U` have the same\n-// size.\n-//\n /// An owned, partially type-converted vector.\n ///\n /// No allocations are performed by usage, only a deallocation happens in the\n@@ -1734,7 +1731,7 @@ pub mod raw {\n /// assert_eq!(pv.pop(), None);\n /// pv.push(2u);\n /// pv.push(3);\n-/// assert_eq!(pv.unwrap(), vec![2, 3]);\n+/// assert_eq!(pv.into_vec(), vec![2, 3]);\n /// ```\n //\n // Upheld invariants:\n@@ -1767,7 +1764,7 @@ pub struct PartialVec<T,U> {\n impl<T,U> PartialVec<T,U> {\n     /// Creates a `PartialVec` from a `Vec`.\n     pub fn new(mut vec: Vec<T>) -> PartialVec<T,U> {\n-        // TODO: do this statically\n+        // FIXME: Assert that the types `T` and `U` have the same size.\n         assert!(mem::size_of::<T>() != 0);\n         assert!(mem::size_of::<U>() != 0);\n         assert!(mem::size_of::<T>() == mem::size_of::<U>());\n@@ -1872,7 +1869,7 @@ impl<T,U> PartialVec<T,U> {\n     ///\n     /// Fails if not all `T`s were popped, also fails if not the same amount of\n     /// `U`s was pushed before calling `unwrap`.\n-    pub fn unwrap(self) -> Vec<U> {\n+    pub fn into_vec(self) -> Vec<U> {\n         // If `self.end_u == self.end_t`, we know from (e) that there are no\n         // more `T`s in `vec`, we also know that the whole length of `vec` is\n         // now used by `U`s, thus we can just transmute `vec` from a vector of\n@@ -1945,11 +1942,10 @@ impl<T> Vec<T> {\n     pub fn map_inplace<U>(self, f: |T| -> U) -> Vec<U> {\n         let mut pv = PartialVec::new(self);\n         loop {\n-            // TODO: need this extra assignment for borrowck to pass\n             let maybe_t = pv.pop();\n             match maybe_t {\n                 Some(t) => pv.push(f(t)),\n-                None => return pv.unwrap(),\n+                None => return pv.into_vec(),\n             };\n         }\n     }"}]}