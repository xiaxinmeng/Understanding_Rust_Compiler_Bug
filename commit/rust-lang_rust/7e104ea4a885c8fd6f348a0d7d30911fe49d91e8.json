{"sha": "7e104ea4a885c8fd6f348a0d7d30911fe49d91e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMTA0ZWE0YTg4NWM4ZmQ2ZjM0OGEwZDdkMzA5MTFmZTQ5ZDkxZTg=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-06-22T11:18:10Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-06-26T10:00:55Z"}, "message": "Bump chalk", "tree": {"sha": "8672b65c9308939517f45486a4671449dba3c334", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8672b65c9308939517f45486a4671449dba3c334"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e104ea4a885c8fd6f348a0d7d30911fe49d91e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e104ea4a885c8fd6f348a0d7d30911fe49d91e8", "html_url": "https://github.com/rust-lang/rust/commit/7e104ea4a885c8fd6f348a0d7d30911fe49d91e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e104ea4a885c8fd6f348a0d7d30911fe49d91e8/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38cd1b70e8d4b8f57ac2ae0702cf4728764094d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/38cd1b70e8d4b8f57ac2ae0702cf4728764094d9", "html_url": "https://github.com/rust-lang/rust/commit/38cd1b70e8d4b8f57ac2ae0702cf4728764094d9"}], "stats": {"total": 340, "additions": 281, "deletions": 59}, "files": [{"sha": "f22366a362837a9908e2b86faee2997872d960ab", "filename": "Cargo.lock", "status": "modified", "additions": 172, "deletions": 18, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/7e104ea4a885c8fd6f348a0d7d30911fe49d91e8/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7e104ea4a885c8fd6f348a0d7d30911fe49d91e8/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7e104ea4a885c8fd6f348a0d7d30911fe49d91e8", "patch": "@@ -24,6 +24,15 @@ dependencies = [\n  \"memchr\",\n ]\n \n+[[package]]\n+name = \"ansi_term\"\n+version = \"0.11.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n+dependencies = [\n+ \"winapi 0.3.8\",\n+]\n+\n [[package]]\n name = \"anyhow\"\n version = \"1.0.31\"\n@@ -94,6 +103,12 @@ dependencies = [\n  \"memchr\",\n ]\n \n+[[package]]\n+name = \"byteorder\"\n+version = \"1.3.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"08c48aae112d48ed9f069b33538ea9e3e90aa263cfa3d1c24309612b1f7472de\"\n+\n [[package]]\n name = \"cargo_metadata\"\n version = \"0.10.0\"\n@@ -120,9 +135,8 @@ checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n \n [[package]]\n name = \"chalk-derive\"\n-version = \"0.11.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5b9bd01eab87277d973183a1d2e56bace1c11f8242c52c20636fb7dddf343ac9\"\n+version = \"0.15.0-dev.0\"\n+source = \"git+https://github.com/rust-lang/chalk#57037a53f7decc965d25972606c3ea930e9cb39f\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -132,30 +146,28 @@ dependencies = [\n \n [[package]]\n name = \"chalk-engine\"\n-version = \"0.11.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6c7a637c3d17ed555aef16e16952a5d1e127bd55178cc30be22afeb92da90c7d\"\n+version = \"0.15.0-dev.0\"\n+source = \"git+https://github.com/rust-lang/chalk#57037a53f7decc965d25972606c3ea930e9cb39f\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\",\n  \"rustc-hash\",\n+ \"tracing\",\n ]\n \n [[package]]\n name = \"chalk-ir\"\n-version = \"0.11.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"595e5735ded16c3f3dc348f7b15bbb2521a0080b1863cac38ad5271589944670\"\n+version = \"0.15.0-dev.0\"\n+source = \"git+https://github.com/rust-lang/chalk#57037a53f7decc965d25972606c3ea930e9cb39f\"\n dependencies = [\n  \"chalk-derive\",\n  \"lazy_static\",\n ]\n \n [[package]]\n name = \"chalk-solve\"\n-version = \"0.11.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5d9d938139db425867a30cc0cfec0269406d8238d0571d829041eaa7a8455d11\"\n+version = \"0.15.0-dev.0\"\n+source = \"git+https://github.com/rust-lang/chalk#57037a53f7decc965d25972606c3ea930e9cb39f\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\",\n@@ -164,6 +176,19 @@ dependencies = [\n  \"itertools\",\n  \"petgraph\",\n  \"rustc-hash\",\n+ \"tracing\",\n+ \"tracing-subscriber\",\n+]\n+\n+[[package]]\n+name = \"chrono\"\n+version = \"0.4.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"80094f509cf8b5ae86a4966a39b3ff66cd7e2a3e594accec3743ff3fabeab5b2\"\n+dependencies = [\n+ \"num-integer\",\n+ \"num-traits\",\n+ \"time\",\n ]\n \n [[package]]\n@@ -676,6 +701,15 @@ dependencies = [\n  \"url\",\n ]\n \n+[[package]]\n+name = \"matchers\"\n+version = \"0.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f099785f7595cc4b4553a174ce30dd7589ef93391ff414dbb67f62392b9e0ce1\"\n+dependencies = [\n+ \"regex-automata\",\n+]\n+\n [[package]]\n name = \"matches\"\n version = \"0.1.8\"\n@@ -796,6 +830,25 @@ dependencies = [\n  \"winapi 0.3.8\",\n ]\n \n+[[package]]\n+name = \"num-integer\"\n+version = \"0.1.43\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8d59457e662d541ba17869cf51cf177c0b5f0cbf476c66bdc90bf1edac4f875b\"\n+dependencies = [\n+ \"autocfg\",\n+ \"num-traits\",\n+]\n+\n+[[package]]\n+name = \"num-traits\"\n+version = \"0.2.12\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ac267bcc07f48ee5f8935ab0d24f316fb722d7a1292e2913f0cc196b29ffd611\"\n+dependencies = [\n+ \"autocfg\",\n+]\n+\n [[package]]\n name = \"num_cpus\"\n version = \"1.13.0\"\n@@ -1333,6 +1386,16 @@ dependencies = [\n  \"thread_local\",\n ]\n \n+[[package]]\n+name = \"regex-automata\"\n+version = \"0.1.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ae1ded71d66a4a97f5e961fd0cb25a5f366a42a41570d16a763a69c092c26ae4\"\n+dependencies = [\n+ \"byteorder\",\n+ \"regex-syntax\",\n+]\n+\n [[package]]\n name = \"regex-syntax\"\n version = \"0.6.18\"\n@@ -1523,18 +1586,18 @@ checksum = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.113\"\n+version = \"1.0.114\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6135c78461981c79497158ef777264c51d9d0f4f3fc3a4d22b915900e42dac6a\"\n+checksum = \"5317f7588f0a5078ee60ef675ef96735a1442132dc645eb1d12c018620ed8cd3\"\n dependencies = [\n  \"serde_derive\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.113\"\n+version = \"1.0.114\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"93c5eaa17d0954cb481cdcfffe9d84fcfa7a1a9f2349271e678677be4c26ae31\"\n+checksum = \"2a0be94b04690fbaed37cddffc5c134bf537c8e3329d53e982fe04c374978f8e\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -1575,6 +1638,15 @@ dependencies = [\n  \"yaml-rust\",\n ]\n \n+[[package]]\n+name = \"sharded-slab\"\n+version = \"0.0.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"06d5a3f5166fb5b42a5439f2eee8b9de149e235961e3eb21c5808fc3ea17ff3e\"\n+dependencies = [\n+ \"lazy_static\",\n+]\n+\n [[package]]\n name = \"slab\"\n version = \"0.4.2\"\n@@ -1608,9 +1680,9 @@ checksum = \"ab16ced94dbd8a46c82fd81e3ed9a8727dac2977ea869d217bcc4ea1f122e81f\"\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.32\"\n+version = \"1.0.33\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a994520748611c17d163e81b6c4a4b13d11b7f63884362ab2efac3aa9cf16d00\"\n+checksum = \"e8d5d96e8cbb005d6959f119f773bfaebb5684296108fb32600c00cde305b2cd\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -1703,12 +1775,94 @@ dependencies = [\n  \"num_cpus\",\n ]\n \n+[[package]]\n+name = \"time\"\n+version = \"0.1.43\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ca8a50ef2360fbd1eeb0ecd46795a87a19024eb4b53c5dc916ca1fd95fe62438\"\n+dependencies = [\n+ \"libc\",\n+ \"winapi 0.3.8\",\n+]\n+\n [[package]]\n name = \"tinyvec\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"53953d2d3a5ad81d9f844a32f14ebb121f50b650cd59d0ee2a07cf13c617efed\"\n \n+[[package]]\n+name = \"tracing\"\n+version = \"0.1.15\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a41f40ed0e162c911ac6fcb53ecdc8134c46905fdbbae8c50add462a538b495f\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"tracing-attributes\",\n+ \"tracing-core\",\n+]\n+\n+[[package]]\n+name = \"tracing-attributes\"\n+version = \"0.1.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"99bbad0de3fd923c9c3232ead88510b783e5a4d16a6154adffa3d53308de984c\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"tracing-core\"\n+version = \"0.1.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0aa83a9a47081cd522c09c81b31aec2c9273424976f922ad61c053b58350b715\"\n+dependencies = [\n+ \"lazy_static\",\n+]\n+\n+[[package]]\n+name = \"tracing-log\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5e0f8c7178e13481ff6765bd169b33e8d554c5d2bbede5e32c356194be02b9b9\"\n+dependencies = [\n+ \"lazy_static\",\n+ \"log\",\n+ \"tracing-core\",\n+]\n+\n+[[package]]\n+name = \"tracing-serde\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b6ccba2f8f16e0ed268fc765d9b7ff22e965e7185d32f8f1ec8294fe17d86e79\"\n+dependencies = [\n+ \"serde\",\n+ \"tracing-core\",\n+]\n+\n+[[package]]\n+name = \"tracing-subscriber\"\n+version = \"0.2.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"04a11b459109e38ff6e1b580bafef4142a11d44889f5d07424cbce2fd2a2a119\"\n+dependencies = [\n+ \"ansi_term\",\n+ \"chrono\",\n+ \"lazy_static\",\n+ \"matchers\",\n+ \"regex\",\n+ \"serde\",\n+ \"serde_json\",\n+ \"sharded-slab\",\n+ \"smallvec\",\n+ \"tracing-core\",\n+ \"tracing-log\",\n+ \"tracing-serde\",\n+]\n+\n [[package]]\n name = \"unicode-bidi\"\n version = \"0.3.4\""}, {"sha": "407322dc16c436d1e057624aabcf8ff2d8705916", "filename": "crates/ra_hir_ty/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e104ea4a885c8fd6f348a0d7d30911fe49d91e8/crates%2Fra_hir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7e104ea4a885c8fd6f348a0d7d30911fe49d91e8/crates%2Fra_hir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2FCargo.toml?ref=7e104ea4a885c8fd6f348a0d7d30911fe49d91e8", "patch": "@@ -27,8 +27,8 @@ test_utils = { path = \"../test_utils\" }\n \n scoped-tls = \"1\"\n \n-chalk-solve = \"0.11\"\n-chalk-ir = \"0.11\"\n+chalk-solve = { version = \"0.15.0-dev.0\", git = \"https://github.com/rust-lang/chalk\" }\n+chalk-ir = { version = \"0.15.0-dev.0\", git = \"https://github.com/rust-lang/chalk\" }\n \n [dev-dependencies]\n insta = \"0.16.0\""}, {"sha": "5a1c6ccc354e019676df71fc6361651a34fbf459", "filename": "crates/ra_hir_ty/src/tests/coercion.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7e104ea4a885c8fd6f348a0d7d30911fe49d91e8/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e104ea4a885c8fd6f348a0d7d30911fe49d91e8/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=7e104ea4a885c8fd6f348a0d7d30911fe49d91e8", "patch": "@@ -664,6 +664,8 @@ fn test() {\n fn coerce_unsize_trait_object() {\n     assert_snapshot!(\n         infer_with_mismatches(r#\"\n+#[lang = \"sized\"]\n+pub trait Sized {}\n #[lang = \"unsize\"]\n pub trait Unsize<T> {}\n #[lang = \"coerce_unsized\"]\n@@ -689,19 +691,19 @@ fn test() {\n }\n \"#, true),\n         @r###\"\n-    387..572 '{     ...bj2; }': ()\n-    397..400 'obj': &dyn Baz<i8, i16>\n-    422..424 '&S': &S<i8, i16>\n-    423..424 'S': S<i8, i16>\n-    434..437 'obj': &dyn Bar<usize, i8, i16>\n-    459..462 'obj': &dyn Baz<i8, i16>\n-    472..475 'obj': &dyn Foo<i8, usize>\n-    494..497 'obj': &dyn Bar<usize, i8, i16>\n-    507..511 'obj2': &dyn Baz<i8, i16>\n-    533..535 '&S': &S<i8, i16>\n-    534..535 'S': S<i8, i16>\n-    545..546 '_': &dyn Foo<i8, usize>\n-    565..569 'obj2': &dyn Baz<i8, i16>\n+    424..609 '{     ...bj2; }': ()\n+    434..437 'obj': &dyn Baz<i8, i16>\n+    459..461 '&S': &S<i8, i16>\n+    460..461 'S': S<i8, i16>\n+    471..474 'obj': &dyn Bar<usize, i8, i16>\n+    496..499 'obj': &dyn Baz<i8, i16>\n+    509..512 'obj': &dyn Foo<i8, usize>\n+    531..534 'obj': &dyn Bar<usize, i8, i16>\n+    544..548 'obj2': &dyn Baz<i8, i16>\n+    570..572 '&S': &S<i8, i16>\n+    571..572 'S': S<i8, i16>\n+    582..583 '_': &dyn Foo<i8, usize>\n+    602..606 'obj2': &dyn Baz<i8, i16>\n     \"###\n     );\n }\n@@ -710,6 +712,8 @@ fn test() {\n fn coerce_unsize_super_trait_cycle() {\n     assert_snapshot!(\n         infer_with_mismatches(r#\"\n+#[lang = \"sized\"]\n+pub trait Sized {}\n #[lang = \"unsize\"]\n pub trait Unsize<T> {}\n #[lang = \"coerce_unsized\"]\n@@ -734,12 +738,12 @@ fn test() {\n }\n \"#, true),\n         @r###\"\n-    291..347 '{     ...obj; }': ()\n-    301..304 'obj': &dyn D\n-    315..317 '&S': &S\n-    316..317 'S': S\n-    327..330 'obj': &dyn A\n-    341..344 'obj': &dyn D\n+    328..384 '{     ...obj; }': ()\n+    338..341 'obj': &dyn D\n+    352..354 '&S': &S\n+    353..354 'S': S\n+    364..367 'obj': &dyn A\n+    378..381 'obj': &dyn D\n     \"###\n     );\n }"}, {"sha": "71c0c2d27ec5b1924d092dbd75d48ef313b9e961", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e104ea4a885c8fd6f348a0d7d30911fe49d91e8/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e104ea4a885c8fd6f348a0d7d30911fe49d91e8/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=7e104ea4a885c8fd6f348a0d7d30911fe49d91e8", "patch": "@@ -1753,11 +1753,11 @@ fn test() {\n     384..500 '{     ...(f); }': ()\n     394..397 'bar': Bar<fn(u8) -> u32>\n     423..426 'bar': Bar<fn(u8) -> u32>\n-    423..432 'bar.foo()': {unknown}\n+    423..432 'bar.foo()': (u8, u32)\n     443..446 'opt': Opt<u8>\n     465..466 'f': fn(u8) -> u32\n     487..490 'opt': Opt<u8>\n-    487..497 'opt.map(f)': Opt<FnOnce::Output<fn(u8) -> u32, (u8,)>>\n+    487..497 'opt.map(f)': Opt<u32>\n     495..496 'f': fn(u8) -> u32\n     \"###\n     );\n@@ -1830,9 +1830,9 @@ fn test() {\n     634..643 'Lazy::new': fn new<Foo, fn() -> Foo>(fn() -> Foo) -> Lazy<Foo, fn() -> Foo>\n     634..660 'Lazy::...n_ptr)': Lazy<Foo, fn() -> Foo>\n     644..659 'make_foo_fn_ptr': fn() -> Foo\n-    670..672 'r2': {unknown}\n+    670..672 'r2': usize\n     675..680 'lazy2': Lazy<Foo, fn() -> Foo>\n-    675..686 'lazy2.foo()': {unknown}\n+    675..686 'lazy2.foo()': usize\n     549..551 '{}': ()\n     \"###\n     );"}, {"sha": "8ef4941c0a328b61175df6961a38389a41958ded", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 71, "deletions": 15, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/7e104ea4a885c8fd6f348a0d7d30911fe49d91e8/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e104ea4a885c8fd6f348a0d7d30911fe49d91e8/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=7e104ea4a885c8fd6f348a0d7d30911fe49d91e8", "patch": "@@ -48,6 +48,9 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n     fn adt_datum(&self, struct_id: AdtId) -> Arc<StructDatum> {\n         self.db.struct_datum(self.krate, struct_id)\n     }\n+    fn adt_repr(&self, _struct_id: AdtId) -> rust_ir::AdtRepr {\n+        unreachable!()\n+    }\n     fn impl_datum(&self, impl_id: ImplId) -> Arc<ImplDatum> {\n         self.db.impl_datum(self.krate, impl_id)\n     }\n@@ -128,8 +131,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         well_known_trait: rust_ir::WellKnownTrait,\n     ) -> Option<chalk_ir::TraitId<Interner>> {\n         let lang_attr = lang_attr_from_well_known_trait(well_known_trait);\n-        let lang_items = self.db.crate_lang_items(self.krate);\n-        let trait_ = match lang_items.target(lang_attr) {\n+        let trait_ = match self.db.lang_item(self.krate, lang_attr.into()) {\n             Some(LangItemTarget::TraitId(trait_)) => trait_,\n             _ => return None,\n         };\n@@ -186,6 +188,39 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         // FIXME: implement actual object safety\n         true\n     }\n+\n+    fn closure_kind(\n+        &self,\n+        _closure_id: chalk_ir::ClosureId<Interner>,\n+        _substs: &chalk_ir::Substitution<Interner>,\n+    ) -> rust_ir::ClosureKind {\n+        // FIXME: implement closure support\n+        unimplemented!()\n+    }\n+    fn closure_inputs_and_output(\n+        &self,\n+        _closure_id: chalk_ir::ClosureId<Interner>,\n+        _substs: &chalk_ir::Substitution<Interner>,\n+    ) -> chalk_ir::Binders<rust_ir::FnDefInputsAndOutputDatum<Interner>> {\n+        // FIXME: implement closure support\n+        unimplemented!()\n+    }\n+    fn closure_upvars(\n+        &self,\n+        _closure_id: chalk_ir::ClosureId<Interner>,\n+        _substs: &chalk_ir::Substitution<Interner>,\n+    ) -> chalk_ir::Binders<chalk_ir::Ty<Interner>> {\n+        // FIXME: implement closure support\n+        unimplemented!()\n+    }\n+    fn closure_fn_substitution(\n+        &self,\n+        _closure_id: chalk_ir::ClosureId<Interner>,\n+        _substs: &chalk_ir::Substitution<Interner>,\n+    ) -> chalk_ir::Substitution<Interner> {\n+        // FIXME: implement closure support\n+        unimplemented!()\n+    }\n }\n \n pub(crate) fn program_clauses_for_chalk_env_query(\n@@ -250,7 +285,7 @@ pub(crate) fn trait_datum_query(\n         upstream: trait_.lookup(db.upcast()).container.module(db.upcast()).krate != krate,\n         non_enumerable: true,\n         coinductive: false, // only relevant for Chalk testing\n-        // FIXME set these flags correctly\n+        // FIXME: set these flags correctly\n         marker: false,\n         fundamental: false,\n     };\n@@ -272,20 +307,28 @@ pub(crate) fn trait_datum_query(\n \n fn well_known_trait_from_lang_attr(name: &str) -> Option<WellKnownTrait> {\n     Some(match name {\n-        \"sized\" => WellKnownTrait::SizedTrait,\n-        \"copy\" => WellKnownTrait::CopyTrait,\n-        \"clone\" => WellKnownTrait::CloneTrait,\n-        \"drop\" => WellKnownTrait::DropTrait,\n+        \"sized\" => WellKnownTrait::Sized,\n+        \"copy\" => WellKnownTrait::Copy,\n+        \"clone\" => WellKnownTrait::Clone,\n+        \"drop\" => WellKnownTrait::Drop,\n+        \"fn_once\" => WellKnownTrait::FnOnce,\n+        \"fn_mut\" => WellKnownTrait::FnMut,\n+        \"fn\" => WellKnownTrait::Fn,\n+        \"unsize\" => WellKnownTrait::Unsize,\n         _ => return None,\n     })\n }\n \n fn lang_attr_from_well_known_trait(attr: WellKnownTrait) -> &'static str {\n     match attr {\n-        WellKnownTrait::SizedTrait => \"sized\",\n-        WellKnownTrait::CopyTrait => \"copy\",\n-        WellKnownTrait::CloneTrait => \"clone\",\n-        WellKnownTrait::DropTrait => \"drop\",\n+        WellKnownTrait::Sized => \"sized\",\n+        WellKnownTrait::Copy => \"copy\",\n+        WellKnownTrait::Clone => \"clone\",\n+        WellKnownTrait::Drop => \"drop\",\n+        WellKnownTrait::FnOnce => \"fn_once\",\n+        WellKnownTrait::FnMut => \"fn_mut\",\n+        WellKnownTrait::Fn => \"fn\",\n+        WellKnownTrait::Unsize => \"unsize\",\n     }\n }\n \n@@ -309,8 +352,9 @@ pub(crate) fn struct_datum_query(\n         .unwrap_or_else(Vec::new);\n     let flags = rust_ir::AdtFlags {\n         upstream,\n-        // FIXME set fundamental flag correctly\n+        // FIXME set fundamental and phantom_data flags correctly\n         fundamental: false,\n+        phantom_data: false,\n     };\n     let struct_datum_bound = rust_ir::AdtDatumBound {\n         fields: Vec::new(), // FIXME add fields (only relevant for auto traits)\n@@ -448,11 +492,23 @@ pub(crate) fn fn_def_datum_query(\n     let where_clauses = convert_where_clauses(db, callable_def.into(), &bound_vars);\n     let bound = rust_ir::FnDefDatumBound {\n         // Note: Chalk doesn't actually use this information yet as far as I am aware, but we provide it anyway\n-        argument_types: sig.value.params().iter().map(|ty| ty.clone().to_chalk(db)).collect(),\n-        return_type: sig.value.ret().clone().to_chalk(db),\n+        inputs_and_output: make_binders(\n+            rust_ir::FnDefInputsAndOutputDatum {\n+                argument_types: sig\n+                    .value\n+                    .params()\n+                    .iter()\n+                    .map(|ty| ty.clone().to_chalk(db))\n+                    .collect(),\n+                return_type: sig.value.ret().clone().to_chalk(db),\n+            }\n+            .shifted_in(&Interner),\n+            0,\n+        ),\n         where_clauses,\n     };\n-    let datum = FnDefDatum { id: fn_def_id, binders: make_binders(bound, sig.num_binders) };\n+    let datum =\n+        FnDefDatum { id: fn_def_id, binders: make_binders(bound, sig.num_binders), abi: () };\n     Arc::new(datum)\n }\n "}, {"sha": "15426b022487f0a0cae851215ca58ab011a05b54", "filename": "crates/ra_hir_ty/src/traits/chalk/interner.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e104ea4a885c8fd6f348a0d7d30911fe49d91e8/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e104ea4a885c8fd6f348a0d7d30911fe49d91e8/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs?ref=7e104ea4a885c8fd6f348a0d7d30911fe49d91e8", "patch": "@@ -42,6 +42,7 @@ impl chalk_ir::interner::Interner for Interner {\n     type DefId = InternId;\n     type InternedAdtId = crate::TypeCtorId;\n     type Identifier = TypeAliasId;\n+    type FnAbi = ();\n \n     fn debug_adt_id(type_kind_id: AdtId, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n         tls::with_current_program(|prog| Some(prog?.debug_struct_id(type_kind_id, fmt)))"}, {"sha": "ac82ea83109f66c0c2e4c459d73956abbb86046b", "filename": "crates/ra_hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7e104ea4a885c8fd6f348a0d7d30911fe49d91e8/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e104ea4a885c8fd6f348a0d7d30911fe49d91e8/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=7e104ea4a885c8fd6f348a0d7d30911fe49d91e8", "patch": "@@ -65,7 +65,10 @@ impl ToChalk for Ty {\n                     &Interner,\n                     predicates.iter().filter(|p| !p.is_error()).cloned().map(|p| p.to_chalk(db)),\n                 );\n-                let bounded_ty = chalk_ir::DynTy { bounds: make_binders(where_clauses, 1) };\n+                let bounded_ty = chalk_ir::DynTy {\n+                    bounds: make_binders(where_clauses, 1),\n+                    lifetime: LIFETIME_PLACEHOLDER.to_lifetime(&Interner),\n+                };\n                 chalk_ir::TyData::Dyn(bounded_ty).intern(&Interner)\n             }\n             Ty::Opaque(opaque_ty) => {\n@@ -319,6 +322,10 @@ impl ToChalk for TypeCtor {\n                 // this should not be reached, since we don't represent TypeName::Error with TypeCtor\n                 unreachable!()\n             }\n+            TypeName::Closure(_) => {\n+                // FIXME: implement closure support\n+                unreachable!()\n+            }\n         }\n     }\n }"}]}