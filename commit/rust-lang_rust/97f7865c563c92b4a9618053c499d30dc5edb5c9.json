{"sha": "97f7865c563c92b4a9618053c499d30dc5edb5c9", "node_id": "C_kwDOAAsO6NoAKDk3Zjc4NjVjNTYzYzkyYjRhOTYxODA1M2M0OTlkMzBkYzVlZGI1Yzk", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-21T14:20:15Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-21T14:20:15Z"}, "message": "Simplify macro rendering, remove constructor structs", "tree": {"sha": "80a83fecabdc24a9f707c744a980b642aabaa829", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80a83fecabdc24a9f707c744a980b642aabaa829"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97f7865c563c92b4a9618053c499d30dc5edb5c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97f7865c563c92b4a9618053c499d30dc5edb5c9", "html_url": "https://github.com/rust-lang/rust/commit/97f7865c563c92b4a9618053c499d30dc5edb5c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97f7865c563c92b4a9618053c499d30dc5edb5c9/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b60d80eaf1f5bf6f0d5860565f46b4dd4ae448e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b60d80eaf1f5bf6f0d5860565f46b4dd4ae448e", "html_url": "https://github.com/rust-lang/rust/commit/2b60d80eaf1f5bf6f0d5860565f46b4dd4ae448e"}], "stats": {"total": 160, "additions": 81, "deletions": 79}, "files": [{"sha": "404a2fa9d33ea0ed5ecf7e90607335275d47624b", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97f7865c563c92b4a9618053c499d30dc5edb5c9/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f7865c563c92b4a9618053c499d30dc5edb5c9/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=97f7865c563c92b4a9618053c499d30dc5edb5c9", "patch": "@@ -47,8 +47,8 @@ impl<'a> RenderContext<'a> {\n         self.completion.source_range()\n     }\n \n-    fn is_deprecated(&self, node: impl HasAttrs) -> bool {\n-        let attrs = node.attrs(self.db());\n+    fn is_deprecated(&self, def: impl HasAttrs) -> bool {\n+        let attrs = def.attrs(self.db());\n         attrs.by_key(\"deprecated\").exists() || attrs.by_key(\"rustc_deprecated\").exists()\n     }\n \n@@ -71,8 +71,8 @@ impl<'a> RenderContext<'a> {\n                 .unwrap_or(false)\n     }\n \n-    fn docs(&self, node: impl HasAttrs) -> Option<hir::Documentation> {\n-        node.docs(self.db())\n+    fn docs(&self, def: impl HasAttrs) -> Option<hir::Documentation> {\n+        def.docs(self.db())\n     }\n }\n "}, {"sha": "9c7b9a6db3ce3f0ba073452d778cabc69c083d2a", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 76, "deletions": 74, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/97f7865c563c92b4a9618053c499d30dc5edb5c9/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f7865c563c92b4a9618053c499d30dc5edb5c9/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=97f7865c563c92b4a9618053c499d30dc5edb5c9", "patch": "@@ -1,7 +1,7 @@\n //! Renderer for macro invocations.\n \n use either::Either;\n-use hir::HasSource;\n+use hir::{db::HirDatabase, Documentation, HasSource};\n use ide_db::SymbolKind;\n use syntax::{\n     display::{fn_as_proc_macro_label, macro_label},\n@@ -21,94 +21,96 @@ pub(crate) fn render_macro(\n     macro_: hir::MacroDef,\n ) -> Option<CompletionItem> {\n     let _p = profile::span(\"render_macro\");\n-    MacroRender::new(ctx, name, macro_).render(import_to_add)\n+    render(ctx, name, macro_, import_to_add)\n }\n \n-#[derive(Debug)]\n-struct MacroRender<'a> {\n-    ctx: RenderContext<'a>,\n-    name: SmolStr,\n+fn render(\n+    ctx @ RenderContext { completion }: RenderContext<'_>,\n+    name: hir::Name,\n     macro_: hir::MacroDef,\n-    docs: Option<hir::Documentation>,\n-    bra: &'static str,\n-    ket: &'static str,\n-}\n+    import_to_add: Option<ImportEdit>,\n+) -> Option<CompletionItem> {\n+    let db = completion.db;\n \n-impl<'a> MacroRender<'a> {\n-    fn new(ctx: RenderContext<'a>, name: hir::Name, macro_: hir::MacroDef) -> MacroRender<'a> {\n-        let name = name.to_smol_str();\n-        let docs = ctx.docs(macro_);\n-        let docs_str = docs.as_ref().map_or(\"\", |s| s.as_str());\n-        let (bra, ket) =\n-            if macro_.is_fn_like() { guess_macro_braces(&name, docs_str) } else { (\"\", \"\") };\n+    let source_range = if completion.is_immediately_after_macro_bang() {\n+        cov_mark::hit!(completes_macro_call_if_cursor_at_bang_token);\n+        completion.token.parent().map(|it| it.text_range())\n+    } else {\n+        Some(ctx.source_range())\n+    }?;\n \n-        MacroRender { ctx, name, macro_, docs, bra, ket }\n-    }\n+    let name = name.to_smol_str();\n+    let docs = ctx.docs(macro_);\n+    let docs_str = docs.as_ref().map(Documentation::as_str).unwrap_or_default();\n+    let (bra, ket) =\n+        if macro_.is_fn_like() { guess_macro_braces(&name, docs_str) } else { (\"\", \"\") };\n \n-    fn render(self, import_to_add: Option<ImportEdit>) -> Option<CompletionItem> {\n-        let source_range = if self.ctx.completion.is_immediately_after_macro_bang() {\n-            cov_mark::hit!(completes_macro_call_if_cursor_at_bang_token);\n-            self.ctx.completion.token.parent().map(|it| it.text_range())\n-        } else {\n-            Some(self.ctx.source_range())\n-        }?;\n-        let mut item =\n-            CompletionItem::new(SymbolKind::from(self.macro_.kind()), source_range, self.label());\n-        item.set_deprecated(self.ctx.is_deprecated(self.macro_)).set_detail(self.detail());\n+    let needs_bang = macro_.is_fn_like()\n+        && !matches!(completion.path_kind(), Some(PathKind::Mac | PathKind::Use));\n \n-        if let Some(import_to_add) = import_to_add {\n-            item.add_import(import_to_add);\n-        }\n+    let mut item = CompletionItem::new(\n+        SymbolKind::from(macro_.kind()),\n+        source_range,\n+        label(&ctx, needs_bang, bra, ket, &name),\n+    );\n+    item.set_deprecated(ctx.is_deprecated(macro_))\n+        .set_detail(detail(db, macro_))\n+        .set_documentation(docs);\n \n-        let needs_bang = self.macro_.is_fn_like()\n-            && !matches!(self.ctx.completion.path_kind(), Some(PathKind::Mac | PathKind::Use));\n-        let has_parens = self.ctx.completion.path_is_call();\n+    if let Some(import_to_add) = import_to_add {\n+        item.add_import(import_to_add);\n+    }\n \n-        match self.ctx.snippet_cap() {\n-            Some(cap) if needs_bang && !has_parens => {\n-                let snippet = format!(\"{}!{}$0{}\", self.name, self.bra, self.ket);\n-                let lookup = self.banged_name();\n-                item.insert_snippet(cap, snippet).lookup_by(lookup);\n-            }\n-            _ if needs_bang => {\n-                let lookup = self.banged_name();\n-                item.insert_text(self.banged_name()).lookup_by(lookup);\n-            }\n-            _ => {\n-                cov_mark::hit!(dont_insert_macro_call_parens_unncessary);\n-                item.insert_text(&*self.name);\n-            }\n-        };\n+    let name = &*name;\n \n-        item.set_documentation(self.docs);\n-        Some(item.build())\n-    }\n+    match ctx.snippet_cap() {\n+        Some(cap) if needs_bang && !completion.path_is_call() => {\n+            let snippet = format!(\"{}!{}$0{}\", name, bra, ket);\n+            let lookup = banged_name(name);\n+            item.insert_snippet(cap, snippet).lookup_by(lookup);\n+        }\n+        _ if needs_bang => {\n+            let banged_name = banged_name(name);\n+            item.insert_text(banged_name.clone()).lookup_by(banged_name);\n+        }\n+        _ => {\n+            cov_mark::hit!(dont_insert_macro_call_parens_unncessary);\n+            item.insert_text(name);\n+        }\n+    };\n \n-    fn needs_bang(&self) -> bool {\n-        !matches!(self.ctx.completion.path_kind(), Some(PathKind::Mac | PathKind::Use))\n-    }\n+    Some(item.build())\n+}\n \n-    fn label(&self) -> SmolStr {\n-        if !self.macro_.is_fn_like() {\n-            self.name.clone()\n-        } else if self.needs_bang() && self.ctx.snippet_cap().is_some() {\n-            SmolStr::from_iter([&*self.name, \"!\", self.bra, \"\u2026\", self.ket])\n+fn label(\n+    ctx: &RenderContext<'_>,\n+    needs_bang: bool,\n+    bra: &str,\n+    ket: &str,\n+    name: &SmolStr,\n+) -> SmolStr {\n+    if needs_bang {\n+        if ctx.snippet_cap().is_some() {\n+            SmolStr::from_iter([&*name, \"!\", bra, \"\u2026\", ket])\n         } else {\n-            self.banged_name()\n+            banged_name(name)\n         }\n+    } else {\n+        name.clone()\n     }\n+}\n \n-    fn banged_name(&self) -> SmolStr {\n-        SmolStr::from_iter([&*self.name, \"!\"])\n-    }\n+fn banged_name(name: &str) -> SmolStr {\n+    SmolStr::from_iter([name, \"!\"])\n+}\n \n-    fn detail(&self) -> Option<String> {\n-        let detail = match self.macro_.source(self.ctx.db())?.value {\n-            Either::Left(node) => macro_label(&node),\n-            Either::Right(node) => fn_as_proc_macro_label(&node),\n-        };\n-        Some(detail)\n-    }\n+fn detail(db: &dyn HirDatabase, macro_: hir::MacroDef) -> Option<String> {\n+    // FIXME: This is parsing the file!\n+    let detail = match macro_.source(db)?.value {\n+        Either::Left(node) => macro_label(&node),\n+        Either::Right(node) => fn_as_proc_macro_label(&node),\n+    };\n+    Some(detail)\n }\n \n fn guess_macro_braces(macro_name: &str, docs: &str) -> (&'static str, &'static str) {\n@@ -147,7 +149,7 @@ mod tests {\n     fn dont_insert_macro_call_parens_unncessary() {\n         cov_mark::check!(dont_insert_macro_call_parens_unncessary);\n         check_edit(\n-            \"frobnicate!\",\n+            \"frobnicate\",\n             r#\"\n //- /main.rs crate:main deps:foo\n use foo::$0;\n@@ -161,7 +163,7 @@ use foo::frobnicate;\n         );\n \n         check_edit(\n-            \"frobnicate!\",\n+            \"frobnicate\",\n             r#\"\n macro_rules! frobnicate { () => () }\n fn main() { frob$0!(); }"}, {"sha": "5f20e342e02d53903f5fa768915b26ac91abaf56", "filename": "crates/ide_completion/src/tests/use_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97f7865c563c92b4a9618053c499d30dc5edb5c9/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f7865c563c92b4a9618053c499d30dc5edb5c9/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs?ref=97f7865c563c92b4a9618053c499d30dc5edb5c9", "patch": "@@ -129,7 +129,7 @@ struct Bar;\n \"#,\n         expect![[r#\"\n             st Foo\n-            ma foo! macro_rules! foo_\n+            ma foo macro_rules! foo_\n         \"#]],\n     );\n }"}]}