{"sha": "64f0510d18bc62c6bbe6f3c7d4b0d43665ccc1eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZjA1MTBkMThiYzYyYzZiYmU2ZjNjN2Q0YjBkNDM2NjVjY2MxZWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-07T14:33:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-07T14:33:09Z"}, "message": "Move cmd to a separate dir", "tree": {"sha": "dc5376a0e7a656d103190666b7def3bc5ca33d34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc5376a0e7a656d103190666b7def3bc5ca33d34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64f0510d18bc62c6bbe6f3c7d4b0d43665ccc1eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64f0510d18bc62c6bbe6f3c7d4b0d43665ccc1eb", "html_url": "https://github.com/rust-lang/rust/commit/64f0510d18bc62c6bbe6f3c7d4b0d43665ccc1eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64f0510d18bc62c6bbe6f3c7d4b0d43665ccc1eb/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91f9bc2b866fc87dbaadb29a8c72eba10ae57c5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/91f9bc2b866fc87dbaadb29a8c72eba10ae57c5c", "html_url": "https://github.com/rust-lang/rust/commit/91f9bc2b866fc87dbaadb29a8c72eba10ae57c5c"}], "stats": {"total": 111, "additions": 58, "deletions": 53}, "files": [{"sha": "2027f489379e7f6b709e1675cdbb08c11444374e", "filename": "xtask/src/cmd.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/64f0510d18bc62c6bbe6f3c7d4b0d43665ccc1eb/xtask%2Fsrc%2Fcmd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f0510d18bc62c6bbe6f3c7d4b0d43665ccc1eb/xtask%2Fsrc%2Fcmd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcmd.rs?ref=64f0510d18bc62c6bbe6f3c7d4b0d43665ccc1eb", "patch": "@@ -0,0 +1,53 @@\n+use std::process::{Command, Output, Stdio};\n+\n+use anyhow::{Context, Result};\n+\n+use crate::project_root;\n+\n+pub struct Cmd<'a> {\n+    pub unix: &'a str,\n+    pub windows: &'a str,\n+    pub work_dir: &'a str,\n+}\n+\n+impl Cmd<'_> {\n+    pub fn run(self) -> Result<()> {\n+        if cfg!(windows) {\n+            run(self.windows, self.work_dir)\n+        } else {\n+            run(self.unix, self.work_dir)\n+        }\n+    }\n+    pub fn run_with_output(self) -> Result<Output> {\n+        if cfg!(windows) {\n+            run_with_output(self.windows, self.work_dir)\n+        } else {\n+            run_with_output(self.unix, self.work_dir)\n+        }\n+    }\n+}\n+\n+pub fn run(cmdline: &str, dir: &str) -> Result<()> {\n+    do_run(cmdline, dir, &mut |c| {\n+        c.stdout(Stdio::inherit());\n+    })\n+    .map(|_| ())\n+}\n+\n+pub fn run_with_output(cmdline: &str, dir: &str) -> Result<Output> {\n+    do_run(cmdline, dir, &mut |_| {})\n+}\n+\n+fn do_run(cmdline: &str, dir: &str, f: &mut dyn FnMut(&mut Command)) -> Result<Output> {\n+    eprintln!(\"\\nwill run: {}\", cmdline);\n+    let proj_dir = project_root().join(dir);\n+    let mut args = cmdline.split_whitespace();\n+    let exec = args.next().unwrap();\n+    let mut cmd = Command::new(exec);\n+    f(cmd.args(args).current_dir(proj_dir).stderr(Stdio::inherit()));\n+    let output = cmd.output().with_context(|| format!(\"running `{}`\", cmdline))?;\n+    if !output.status.success() {\n+        anyhow::bail!(\"`{}` exited with {}\", cmdline, output.status);\n+    }\n+    Ok(output)\n+}"}, {"sha": "7bfc4a285789588506a45489fad234df94ba5167", "filename": "xtask/src/lib.rs", "status": "modified", "additions": 5, "deletions": 53, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/64f0510d18bc62c6bbe6f3c7d4b0d43665ccc1eb/xtask%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f0510d18bc62c6bbe6f3c7d4b0d43665ccc1eb/xtask%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Flib.rs?ref=64f0510d18bc62c6bbe6f3c7d4b0d43665ccc1eb", "patch": "@@ -1,20 +1,23 @@\n //! FIXME: write short doc here\n \n+mod cmd;\n pub mod codegen;\n pub mod install;\n pub mod pre_commit;\n mod ast_src;\n \n use anyhow::Context;\n-pub use anyhow::Result;\n use std::{\n     env,\n     path::{Path, PathBuf},\n-    process::{Command, Output, Stdio},\n+    process::{Command, Stdio},\n };\n \n use crate::codegen::Mode;\n \n+pub use anyhow::Result;\n+pub use cmd::{run, run_with_output, Cmd};\n+\n const TOOLCHAIN: &str = \"stable\";\n \n pub fn project_root() -> PathBuf {\n@@ -27,40 +30,6 @@ pub fn project_root() -> PathBuf {\n     .to_path_buf()\n }\n \n-pub struct Cmd<'a> {\n-    pub unix: &'a str,\n-    pub windows: &'a str,\n-    pub work_dir: &'a str,\n-}\n-\n-impl Cmd<'_> {\n-    pub fn run(self) -> Result<()> {\n-        if cfg!(windows) {\n-            run(self.windows, self.work_dir)\n-        } else {\n-            run(self.unix, self.work_dir)\n-        }\n-    }\n-    pub fn run_with_output(self) -> Result<Output> {\n-        if cfg!(windows) {\n-            run_with_output(self.windows, self.work_dir)\n-        } else {\n-            run_with_output(self.unix, self.work_dir)\n-        }\n-    }\n-}\n-\n-pub fn run(cmdline: &str, dir: &str) -> Result<()> {\n-    do_run(cmdline, dir, |c| {\n-        c.stdout(Stdio::inherit());\n-    })\n-    .map(|_| ())\n-}\n-\n-pub fn run_with_output(cmdline: &str, dir: &str) -> Result<Output> {\n-    do_run(cmdline, dir, |_| {})\n-}\n-\n pub fn run_rustfmt(mode: Mode) -> Result<()> {\n     match Command::new(\"rustup\")\n         .args(&[\"run\", TOOLCHAIN, \"--\", \"cargo\", \"fmt\", \"--version\"])\n@@ -132,20 +101,3 @@ pub fn run_fuzzer() -> Result<()> {\n \n     run(\"rustup run nightly -- cargo fuzz run parser\", \"./crates/ra_syntax\")\n }\n-\n-fn do_run<F>(cmdline: &str, dir: &str, mut f: F) -> Result<Output>\n-where\n-    F: FnMut(&mut Command),\n-{\n-    eprintln!(\"\\nwill run: {}\", cmdline);\n-    let proj_dir = project_root().join(dir);\n-    let mut args = cmdline.split_whitespace();\n-    let exec = args.next().unwrap();\n-    let mut cmd = Command::new(exec);\n-    f(cmd.args(args).current_dir(proj_dir).stderr(Stdio::inherit()));\n-    let output = cmd.output().with_context(|| format!(\"running `{}`\", cmdline))?;\n-    if !output.status.success() {\n-        anyhow::bail!(\"`{}` exited with {}\", cmdline, output.status);\n-    }\n-    Ok(output)\n-}"}]}