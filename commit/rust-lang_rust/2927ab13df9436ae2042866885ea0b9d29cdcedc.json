{"sha": "2927ab13df9436ae2042866885ea0b9d29cdcedc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MjdhYjEzZGY5NDM2YWUyMDQyODY2ODg1ZWEwYjlkMjljZGNlZGM=", "commit": {"author": {"name": "U-NOV2010\\eugals", "email": "C:\\Self\\AppData\\Mail", "date": "2013-09-17T09:33:36Z"}, "committer": {"name": "Evgeny Sologubov", "email": "C:\\Self\\AppData\\Mail", "date": "2013-09-19T14:34:23Z"}, "message": "optimized trans_to_datum::auto_borrow_obj code generation in case some trivial cases where simple copying can be applied", "tree": {"sha": "eff11ef334e0531cb814619954c8cf435301e7fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eff11ef334e0531cb814619954c8cf435301e7fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2927ab13df9436ae2042866885ea0b9d29cdcedc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2927ab13df9436ae2042866885ea0b9d29cdcedc", "html_url": "https://github.com/rust-lang/rust/commit/2927ab13df9436ae2042866885ea0b9d29cdcedc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2927ab13df9436ae2042866885ea0b9d29cdcedc/comments", "author": null, "committer": null, "parents": [{"sha": "99ec14dbb0c6017106f2378bedd35ac256aa0006", "url": "https://api.github.com/repos/rust-lang/rust/commits/99ec14dbb0c6017106f2378bedd35ac256aa0006", "html_url": "https://github.com/rust-lang/rust/commit/99ec14dbb0c6017106f2378bedd35ac256aa0006"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "99ea455941c5bf49cd6e4988afccdd5a7075a1fd", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2927ab13df9436ae2042866885ea0b9d29cdcedc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2927ab13df9436ae2042866885ea0b9d29cdcedc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=2927ab13df9436ae2042866885ea0b9d29cdcedc", "patch": "@@ -313,6 +313,37 @@ pub fn trans_to_datum(bcx: @mut Block, expr: @ast::Expr) -> DatumBlock {\n         let target_obj_ty = expr_ty_adjusted(bcx, expr);\n         debug!(\"auto_borrow_obj(target=%s)\",\n                target_obj_ty.repr(tcx));\n+\n+        // Extract source store information\n+        let (source_store, source_mutbl) = match ty::get(source_datum.ty).sty {\n+            ty::ty_trait(_, _, s, m, _) => (s, m),\n+            _ => {\n+                bcx.sess().span_bug(\n+                    expr.span,\n+                    fmt!(\"auto_borrow_trait_obj expected a trait, found %s\",\n+                         source_datum.ty.repr(bcx.tcx())));\n+            }\n+        };\n+\n+        // check if any borrowing is really needed or we could reuse the source_datum instead\n+        match ty::get(target_obj_ty).sty {\n+            ty::ty_trait(_, _, ty::RegionTraitStore(target_scope), target_mutbl, _) => {\n+                if target_mutbl == ast::MutImmutable && target_mutbl == source_mutbl {\n+                    match source_store {\n+                        ty::RegionTraitStore(source_scope) => {\n+                            if tcx.region_maps.is_subregion_of(target_scope, source_scope) {\n+                                return DatumBlock { bcx: bcx, datum: source_datum };\n+                            }\n+                        },\n+                        _ => {}\n+\n+                    };\n+                }\n+            },\n+            _ => {}\n+        }\n+\n+        \n         let scratch = scratch_datum(bcx, target_obj_ty,\n                                     \"__auto_borrow_obj\", false);\n \n@@ -331,15 +362,6 @@ pub fn trans_to_datum(bcx: @mut Block, expr: @ast::Expr) -> DatumBlock {\n         // ~T, or &T, depending on source_obj_ty.\n         let source_data_ptr = GEPi(bcx, source_llval, [0u, abi::trt_field_box]);\n         let source_data = Load(bcx, source_data_ptr); // always a ptr\n-        let (source_store, source_mutbl) = match ty::get(source_datum.ty).sty {\n-            ty::ty_trait(_, _, s, m, _) => (s, m),\n-            _ => {\n-                bcx.sess().span_bug(\n-                    expr.span,\n-                    fmt!(\"auto_borrow_trait_obj expected a trait, found %s\",\n-                         source_datum.ty.repr(bcx.tcx())));\n-            }\n-        };\n         let target_data = match source_store {\n             ty::BoxTraitStore(*) => {\n                 // For deref of @T or @mut T, create a dummy datum and"}]}