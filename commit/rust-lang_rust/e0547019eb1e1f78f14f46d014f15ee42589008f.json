{"sha": "e0547019eb1e1f78f14f46d014f15ee42589008f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNTQ3MDE5ZWIxZTFmNzhmMTRmNDZkMDE0ZjE1ZWU0MjU4OTAwOGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-19T20:23:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-19T20:23:12Z"}, "message": "Auto merge of #36102 - GuillaumeGomez:rustc_metadata_diagnostics, r=jonathandturner\n\nRustc metadata diagnostics\n\nr? @jonathandturner", "tree": {"sha": "829b2f553c4e36d892003b0940917e974ac39912", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/829b2f553c4e36d892003b0940917e974ac39912"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0547019eb1e1f78f14f46d014f15ee42589008f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0547019eb1e1f78f14f46d014f15ee42589008f", "html_url": "https://github.com/rust-lang/rust/commit/e0547019eb1e1f78f14f46d014f15ee42589008f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0547019eb1e1f78f14f46d014f15ee42589008f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "412a6377046ac17cdb63d03860aec7bca85e7846", "url": "https://api.github.com/repos/rust-lang/rust/commits/412a6377046ac17cdb63d03860aec7bca85e7846", "html_url": "https://github.com/rust-lang/rust/commit/412a6377046ac17cdb63d03860aec7bca85e7846"}, {"sha": "d4c6a61c44bdf470a88a7a24d83cfd31f9b70992", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4c6a61c44bdf470a88a7a24d83cfd31f9b70992", "html_url": "https://github.com/rust-lang/rust/commit/d4c6a61c44bdf470a88a7a24d83cfd31f9b70992"}], "stats": {"total": 195, "additions": 186, "deletions": 9}, "files": [{"sha": "681a7ec5b5ac99d1f89670c7fb89b9ef8b3060ed", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0547019eb1e1f78f14f46d014f15ee42589008f/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0547019eb1e1f78f14f46d014f15ee42589008f/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=e0547019eb1e1f78f14f46d014f15ee42589008f", "patch": "@@ -1140,6 +1140,7 @@ pub fn diagnostics_registry() -> errors::registry::Registry {\n     all_errors.extend_from_slice(&rustc_privacy::DIAGNOSTICS);\n     all_errors.extend_from_slice(&rustc_trans::DIAGNOSTICS);\n     all_errors.extend_from_slice(&rustc_const_eval::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_metadata::DIAGNOSTICS);\n \n     Registry::new(&all_errors)\n }"}, {"sha": "f52e1437acc9534a9b1a5c98c313d617c38aaf67", "filename": "src/librustc_metadata/diagnostics.rs", "status": "modified", "additions": 183, "deletions": 9, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/e0547019eb1e1f78f14f46d014f15ee42589008f/src%2Flibrustc_metadata%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0547019eb1e1f78f14f46d014f15ee42589008f/src%2Flibrustc_metadata%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdiagnostics.rs?ref=e0547019eb1e1f78f14f46d014f15ee42589008f", "patch": "@@ -21,7 +21,7 @@ A link name was given with an empty name. Erroneous code example:\n The rust compiler cannot link to an external library if you don't give it its\n name. Example:\n \n-```\n+```ignore\n #[link(name = \"some_lib\")] extern {} // ok!\n ```\n \"##,\n@@ -32,8 +32,8 @@ as frameworks are specific to that operating system.\n \n Erroneous code example:\n \n-```compile_fail,E0455\n-#[link(name = \"FooCoreServices\",  kind = \"framework\")] extern {}\n+```ignore\n+#[link(name = \"FooCoreServices\", kind = \"framework\")] extern {}\n // OS used to compile is Linux for example\n ```\n \n@@ -72,7 +72,7 @@ A link was used without a name parameter. Erroneous code example:\n Please add the name parameter to allow the rust compiler to find the library\n you want. Example:\n \n-```\n+```ignore\n #[link(kind = \"dylib\", name = \"some_lib\")] extern {} // ok!\n ```\n \"##,\n@@ -91,6 +91,185 @@ You need to link your code to the relevant crate in order to be able to use it\n well, and you link to them the same way.\n \"##,\n \n+E0466: r##\"\n+Macro import declarations were malformed.\n+\n+Erroneous code examples:\n+\n+```compile_fail,E0466\n+#[macro_use(a_macro(another_macro))] // error: invalid import declaration\n+extern crate some_crate;\n+\n+#[macro_use(i_want = \"some_macros\")] // error: invalid import declaration\n+extern crate another_crate;\n+```\n+\n+This is a syntax error at the level of attribute declarations. The proper\n+syntax for macro imports is the following:\n+\n+```ignore\n+// In some_crate:\n+#[macro_export]\n+macro_rules! get_tacos {\n+    ...\n+}\n+\n+#[macro_export]\n+macro_rules! get_pimientos {\n+    ...\n+}\n+\n+// In your crate:\n+#[macro_use(get_tacos, get_pimientos)] // It imports `get_tacos` and\n+extern crate some_crate;               // `get_pimientos` macros from some_crate\n+```\n+\n+If you would like to import all exported macros, write `macro_use` with no\n+arguments.\n+\"##,\n+\n+E0467: r##\"\n+Macro reexport declarations were empty or malformed.\n+\n+Erroneous code examples:\n+\n+```compile_fail,E0467\n+#[macro_reexport]                    // error: no macros listed for export\n+extern crate macros_for_good;\n+\n+#[macro_reexport(fun_macro = \"foo\")] // error: not a macro identifier\n+extern crate other_macros_for_good;\n+```\n+\n+This is a syntax error at the level of attribute declarations.\n+\n+Currently, `macro_reexport` requires at least one macro name to be listed.\n+Unlike `macro_use`, listing no names does not reexport all macros from the\n+given crate.\n+\n+Decide which macros you would like to export and list them properly.\n+\n+These are proper reexport declarations:\n+\n+```ignore\n+#[macro_reexport(some_macro, another_macro)]\n+extern crate macros_for_good;\n+```\n+\"##,\n+\n+E0468: r##\"\n+A non-root module attempts to import macros from another crate.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0468\n+mod foo {\n+    #[macro_use(helpful_macro)] // error: must be at crate root to import\n+    extern crate some_crate;    //        macros from another crate\n+    helpful_macro!(...)\n+}\n+```\n+\n+Only `extern crate` imports at the crate root level are allowed to import\n+macros.\n+\n+Either move the macro import to crate root or do without the foreign macros.\n+This will work:\n+\n+```ignore\n+#[macro_use(helpful_macro)]\n+extern crate some_crate;\n+\n+mod foo {\n+    helpful_macro!(...)\n+}\n+```\n+\"##,\n+\n+E0469: r##\"\n+A macro listed for import was not found.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0469\n+#[macro_use(drink, be_merry)] // error: imported macro not found\n+extern crate collections;\n+\n+fn main() {\n+    // ...\n+}\n+```\n+\n+Either the listed macro is not contained in the imported crate, or it is not\n+exported from the given crate.\n+\n+This could be caused by a typo. Did you misspell the macro's name?\n+\n+Double-check the names of the macros listed for import, and that the crate\n+in question exports them.\n+\n+A working version would be:\n+\n+```ignore\n+// In some_crate crate:\n+#[macro_export]\n+macro_rules! eat {\n+    ...\n+}\n+\n+#[macro_export]\n+macro_rules! drink {\n+    ...\n+}\n+\n+// In your crate:\n+#[macro_use(eat, drink)]\n+extern crate some_crate; //ok!\n+```\n+\"##,\n+\n+E0470: r##\"\n+A macro listed for reexport was not found.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0470\n+#[macro_reexport(drink, be_merry)]\n+extern crate collections;\n+\n+fn main() {\n+    // ...\n+}\n+```\n+\n+Either the listed macro is not contained in the imported crate, or it is not\n+exported from the given crate.\n+\n+This could be caused by a typo. Did you misspell the macro's name?\n+\n+Double-check the names of the macros listed for reexport, and that the crate\n+in question exports them.\n+\n+A working version:\n+\n+```ignore\n+// In some_crate crate:\n+#[macro_export]\n+macro_rules! eat {\n+    ...\n+}\n+\n+#[macro_export]\n+macro_rules! drink {\n+    ...\n+}\n+\n+// In your_crate:\n+#[macro_reexport(eat, drink)]\n+extern crate some_crate;\n+```\n+\"##,\n+\n }\n \n register_diagnostics! {\n@@ -102,11 +281,6 @@ register_diagnostics! {\n     E0462, // found staticlib `..` instead of rlib or dylib\n     E0464, // multiple matching crates for `..`\n     E0465, // multiple .. candidates for `..` found\n-    E0466, // bad macro import\n-    E0467, // bad macro reexport\n-    E0468, // an `extern crate` loading macros must be at the crate root\n-    E0469, // imported macro not found\n-    E0470, // reexported macro not found\n     E0519, // local crate and dependency have same (crate-name, disambiguator)\n     E0523, // two dependencies have same (crate-name, disambiguator) but different SVH\n }"}, {"sha": "9fb619340098276def0be99b539b21de16b2f21e", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0547019eb1e1f78f14f46d014f15ee42589008f/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0547019eb1e1f78f14f46d014f15ee42589008f/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=e0547019eb1e1f78f14f46d014f15ee42589008f", "patch": "@@ -68,3 +68,5 @@ pub mod index;\n pub mod loader;\n pub mod macro_import;\n pub mod tls_context;\n+\n+__build_diagnostic_array! { librustc_metadata, DIAGNOSTICS }"}]}