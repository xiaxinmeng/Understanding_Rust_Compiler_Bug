{"sha": "77606f20c92518c16d68bf16c0a117af1e925524", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NjA2ZjIwYzkyNTE4YzE2ZDY4YmYxNmMwYTExN2FmMWU5MjU1MjQ=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-05-31T17:10:08Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-06-11T20:48:33Z"}, "message": "Stabilize alloc::Layout (with only some of its methods)", "tree": {"sha": "9fcdd22d19629d5431354c07b102c7c5128f9892", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fcdd22d19629d5431354c07b102c7c5128f9892"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77606f20c92518c16d68bf16c0a117af1e925524", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77606f20c92518c16d68bf16c0a117af1e925524", "html_url": "https://github.com/rust-lang/rust/commit/77606f20c92518c16d68bf16c0a117af1e925524", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77606f20c92518c16d68bf16c0a117af1e925524/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75e17da87358751becc950b9319f5d4aa82744ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/75e17da87358751becc950b9319f5d4aa82744ce", "html_url": "https://github.com/rust-lang/rust/commit/75e17da87358751becc950b9319f5d4aa82744ce"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "a65a06d0c8933d7507b8318c0f081b21af904411", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/77606f20c92518c16d68bf16c0a117af1e925524/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77606f20c92518c16d68bf16c0a117af1e925524/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=77606f20c92518c16d68bf16c0a117af1e925524", "patch": "@@ -46,7 +46,7 @@ fn size_align<T>() -> (usize, usize) {\n /// requests have positive size. A caller to the `Alloc::alloc`\n /// method must either ensure that conditions like this are met, or\n /// use specific allocators with looser requirements.)\n-#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+#[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub struct Layout {\n     // size of the requested block of memory, measured in bytes.\n@@ -72,7 +72,7 @@ impl Layout {\n     /// * `size`, when rounded up to the nearest multiple of `align`,\n     ///    must not overflow (i.e. the rounded value must be less than\n     ///    `usize::MAX`).\n-    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[inline]\n     pub fn from_size_align(size: usize, align: usize) -> Result<Self, LayoutErr> {\n         if !align.is_power_of_two() {\n@@ -108,24 +108,24 @@ impl Layout {\n     ///\n     /// This function is unsafe as it does not verify the preconditions from\n     /// [`Layout::from_size_align`](#method.from_size_align).\n-    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[inline]\n     pub unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {\n         Layout { size_: size, align_: NonZeroUsize::new_unchecked(align) }\n     }\n \n     /// The minimum size in bytes for a memory block of this layout.\n-    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[inline]\n     pub fn size(&self) -> usize { self.size_ }\n \n     /// The minimum byte alignment for a memory block of this layout.\n-    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[inline]\n     pub fn align(&self) -> usize { self.align_.get() }\n \n     /// Constructs a `Layout` suitable for holding a value of type `T`.\n-    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[inline]\n     pub fn new<T>() -> Self {\n         let (size, align) = size_align::<T>();\n@@ -142,7 +142,7 @@ impl Layout {\n     /// Produces layout describing a record that could be used to\n     /// allocate backing structure for `T` (which could be a trait\n     /// or other unsized type like a slice).\n-    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[inline]\n     pub fn for_value<T: ?Sized>(t: &T) -> Self {\n         let (size, align) = (mem::size_of_val(t), mem::align_of_val(t));\n@@ -331,14 +331,14 @@ impl Layout {\n /// The parameters given to `Layout::from_size_align`\n /// or some other `Layout` constructor\n /// do not satisfy its documented constraints.\n-#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+#[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct LayoutErr {\n     private: ()\n }\n \n // (we need this for downstream impl of trait Error)\n-#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+#[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n impl fmt::Display for LayoutErr {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.write_str(\"invalid parameters to Layout::from_size_align\")"}]}