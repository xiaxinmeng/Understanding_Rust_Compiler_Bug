{"sha": "ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNzMzYzNhNTliZTc3Yjc1MmQ2ZDNmNzIyNTk2YmZkNWIxZmNmMzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-03T16:38:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-03T16:38:41Z"}, "message": "Auto merge of #71853 - Dylan-DPC:rollup-4qi6ry9, r=Dylan-DPC\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #71398 (Add `RefCell::take`)\n - #71663 (Fix exceeding bitshifts not emitting for assoc. consts (properly this time, I swear!))\n - #71726 (Suggest deref when coercing `ty::Ref` to `ty::RawPtr` with arbitrary mutability)\n - #71808 (Add long error explanation for E0539)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "61894abbcaaaf485a676ff25e81596bb79463299", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61894abbcaaaf485a676ff25e81596bb79463299"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "html_url": "https://github.com/rust-lang/rust/commit/ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2", "html_url": "https://github.com/rust-lang/rust/commit/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2"}, {"sha": "ce1dba99185a87eafcc99fc2738a1f8473f13b6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce1dba99185a87eafcc99fc2738a1f8473f13b6e", "html_url": "https://github.com/rust-lang/rust/commit/ce1dba99185a87eafcc99fc2738a1f8473f13b6e"}], "stats": {"total": 946, "additions": 677, "deletions": 269}, "files": [{"sha": "0f2665eba6f22f1be3e2e48652129dcfefa53023", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -1023,6 +1023,31 @@ impl<T: ?Sized> RefCell<T> {\n     }\n }\n \n+impl<T: Default> RefCell<T> {\n+    /// Takes the wrapped value, leaving `Default::default()` in its place.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if the value is currently borrowed.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(refcell_take)]\n+    /// use std::cell::RefCell;\n+    ///\n+    /// let c = RefCell::new(5);\n+    /// let five = c.take();\n+    ///\n+    /// assert_eq!(five, 5);\n+    /// assert_eq!(c.into_inner(), 0);\n+    /// ```\n+    #[unstable(feature = \"refcell_take\", issue = \"71395\")]\n+    pub fn take(&self) -> T {\n+        self.replace(Default::default())\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: ?Sized> Send for RefCell<T> where T: Send {}\n "}, {"sha": "e01412bc21cfd036dadcef85c3bab4599aa1d0a3", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -281,6 +281,7 @@ E0535: include_str!(\"./error_codes/E0535.md\"),\n E0536: include_str!(\"./error_codes/E0536.md\"),\n E0537: include_str!(\"./error_codes/E0537.md\"),\n E0538: include_str!(\"./error_codes/E0538.md\"),\n+E0539: include_str!(\"./error_codes/E0539.md\"),\n E0541: include_str!(\"./error_codes/E0541.md\"),\n E0550: include_str!(\"./error_codes/E0550.md\"),\n E0551: include_str!(\"./error_codes/E0551.md\"),\n@@ -570,7 +571,6 @@ E0753: include_str!(\"./error_codes/E0753.md\"),\n     E0521, // borrowed data escapes outside of closure\n     E0523,\n //  E0526, // shuffle indices are not constant\n-    E0539, // incorrect meta item\n     E0540, // multiple rustc_deprecated attributes\n     E0542, // missing 'since'\n     E0543, // missing 'reason'"}, {"sha": "df2d7d910bb360fc3e06b9bb87b98e85e3318b52", "filename": "src/librustc_error_codes/error_codes/E0539.md", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Flibrustc_error_codes%2Ferror_codes%2FE0539.md", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Flibrustc_error_codes%2Ferror_codes%2FE0539.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0539.md?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -0,0 +1,48 @@\n+An invalid meta-item was used inside an attribute.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0539\n+#![feature(staged_api)]\n+#![stable(since = \"1.0.0\", feature = \"test\")]\n+\n+#[rustc_deprecated(reason)] // error!\n+#[unstable(feature = \"deprecated_fn\", issue = \"123\")]\n+fn deprecated() {}\n+\n+#[unstable(feature = \"unstable_struct\", issue)] // error!\n+struct Unstable;\n+\n+#[rustc_const_unstable(feature)] // error!\n+const fn unstable_fn() {}\n+\n+#[stable(feature = \"stable_struct\", since)] // error!\n+struct Stable;\n+\n+#[rustc_const_stable(feature)] // error!\n+const fn stable_fn() {}\n+```\n+\n+Meta items are the key-value pairs inside of an attribute.\n+To fix these issues you need to give required key-value pairs.\n+\n+```\n+#![feature(staged_api)]\n+#![stable(since = \"1.0.0\", feature = \"test\")]\n+\n+#[rustc_deprecated(since = \"1.39.0\", reason = \"reason\")] // ok!\n+#[unstable(feature = \"deprecated_fn\", issue = \"123\")]\n+fn deprecated() {}\n+\n+#[unstable(feature = \"unstable_struct\", issue = \"123\")] // ok!\n+struct Unstable;\n+\n+#[rustc_const_unstable(feature = \"unstable_fn\", issue = \"124\")] // ok!\n+const fn unstable_fn() {}\n+\n+#[stable(feature = \"stable_struct\", since = \"1.39.0\")] // ok!\n+struct Stable;\n+\n+#[rustc_const_stable(feature = \"stable_fn\", since = \"1.39.0\")] // ok!\n+const fn stable_fn() {}\n+```"}, {"sha": "b6991349ff4dc881b9361eac1727850499950ab4", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 61, "deletions": 31, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -11,6 +11,7 @@ use std::ops::RangeInclusive;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n+use rustc_middle::mir::interpret::{InterpError, InterpErrorInfo};\n use rustc_middle::ty;\n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_span::symbol::{sym, Symbol};\n@@ -24,43 +25,71 @@ use super::{\n };\n \n macro_rules! throw_validation_failure {\n-    ($what:expr, $where:expr, $details:expr) => {{\n-        let mut msg = format!(\"encountered {}\", $what);\n-        let where_ = &$where;\n-        if !where_.is_empty() {\n-            msg.push_str(\" at \");\n-            write_path(&mut msg, where_);\n-        }\n-        write!(&mut msg, \", but expected {}\", $details).unwrap();\n-        throw_ub!(ValidationFailure(msg))\n-    }};\n-    ($what:expr, $where:expr) => {{\n+    ($what:expr, $where:expr $(, $expected:expr )?) => {{\n         let mut msg = format!(\"encountered {}\", $what);\n         let where_ = &$where;\n         if !where_.is_empty() {\n             msg.push_str(\" at \");\n             write_path(&mut msg, where_);\n         }\n+        $( write!(&mut msg, \", but expected {}\", $expected).unwrap(); )?\n         throw_ub!(ValidationFailure(msg))\n     }};\n }\n \n+/// Returns a validation failure for any Err value of $e.\n+// FIXME: Replace all usages of try_validation! with try_validation_pat!.\n macro_rules! try_validation {\n-    ($e:expr, $what:expr, $where:expr, $details:expr) => {{\n-        match $e {\n-            Ok(x) => x,\n-            // We re-throw the error, so we are okay with allocation:\n-            // this can only slow down builds that fail anyway.\n-            Err(_) => throw_validation_failure!($what, $where, $details),\n-        }\n+    ($e:expr, $what:expr, $where:expr $(, $expected:expr )?) => {{\n+        try_validation_pat!($e, $where, {\n+            _ => { \"{}\", $what } $( expected { \"{}\", $expected } )?,\n+        })\n     }};\n-\n-    ($e:expr, $what:expr, $where:expr) => {{\n+}\n+/// Like try_validation, but will throw a validation error if any of the patterns in $p are\n+/// matched. Other errors are passed back to the caller, unchanged. This lets you use the patterns\n+/// as a kind of validation blacklist:\n+///\n+/// ```\n+/// let v = try_validation_pat!(some_fn(), some_path, {\n+///     Foo | Bar | Baz => { \"some failure\" },\n+/// });\n+/// // Failures that match $p are thrown up as validation errors, but other errors are passed back\n+/// // unchanged.\n+/// ```\n+///\n+/// An additional expected parameter can also be added to the failure message:\n+///\n+/// ```\n+/// let v = try_validation_pat!(some_fn(), some_path, {\n+///     Foo | Bar | Baz => { \"some failure\" } expected { \"something that wasn't a failure\" },\n+/// });\n+/// ```\n+///\n+/// An additional nicety is that both parameters actually take format args, so you can just write\n+/// the format string in directly:\n+///\n+/// ```\n+/// let v = try_validation_pat!(some_fn(), some_path, {\n+///     Foo | Bar | Baz => { \"{:?}\", some_failure } expected { \"{}\", expected_value },\n+/// });\n+/// ```\n+///\n+macro_rules! try_validation_pat {\n+    ($e:expr, $where:expr, { $( $p:pat )|+ =>\n+        { $( $what_fmt:expr ),+ } $( expected { $( $expected_fmt:expr ),+ } )? $( , )?}) => {{\n         match $e {\n             Ok(x) => x,\n-            // We re-throw the error, so we are okay with allocation:\n-            // this can only slow down builds that fail anyway.\n-            Err(_) => throw_validation_failure!($what, $where),\n+            // We catch the error and turn it into a validation failure. We are okay with\n+            // allocation here as this can only slow down builds that fail anyway.\n+            $( Err(InterpErrorInfo { kind: $p, .. }) )|+ =>\n+                throw_validation_failure!(\n+                    format_args!($( $what_fmt ),+),\n+                    $where\n+                    $(, format_args!($( $expected_fmt ),+))?\n+                ),\n+            #[allow(unreachable_patterns)]\n+            Err(e) => Err::<!, _>(e)?,\n         }\n     }};\n }\n@@ -492,11 +521,9 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 // We are conservative with undef for integers, but try to\n                 // actually enforce the strict rules for raw pointers (mostly because\n                 // that lets us re-use `ref_to_mplace`).\n-                let place = try_validation!(\n-                    self.ecx.ref_to_mplace(self.ecx.read_immediate(value)?),\n-                    \"uninitialized raw pointer\",\n-                    self.path\n-                );\n+                let place = try_validation_pat!(self.ecx.ref_to_mplace(self.ecx.read_immediate(value)?), self.path, {\n+                    err_ub!(InvalidUndefBytes(..)) => { \"uninitialized raw pointer\" },\n+                });\n                 if place.layout.is_unsized() {\n                     self.check_wide_ptr_meta(place.meta, place.layout)?;\n                 }\n@@ -800,7 +827,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n \n                                 throw_validation_failure!(\"uninitialized bytes\", self.path)\n                             }\n-                            // Other errors shouldn't be possible\n+                            // Propagate upwards (that will also check for unexpected errors).\n                             _ => return Err(err),\n                         }\n                     }\n@@ -843,9 +870,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Run it.\n         match visitor.visit_value(op) {\n             Ok(()) => Ok(()),\n-            // We should only get validation errors here. Avoid other errors as\n-            // those do not show *where* in the value the issue lies.\n+            // Pass through validation failures.\n             Err(err) if matches!(err.kind, err_ub!(ValidationFailure { .. })) => Err(err),\n+            // Also pass through InvalidProgram, those just indicate that we could not\n+            // validate and each caller will know best what to do with them.\n+            Err(err) if matches!(err.kind, InterpError::InvalidProgram(_)) => Err(err),\n+            // Avoid other errors as those do not show *where* in the value the issue lies.\n             Err(err) => bug!(\"Unexpected error during validation: {}\", err),\n         }\n     }"}, {"sha": "aae80185b4d6e4b4dbafef3f7c722403129a5fb7", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -549,11 +549,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return None;\n         }\n \n-        // FIXME we need to revisit this for #67176\n-        if rvalue.needs_subst() {\n-            return None;\n-        }\n-\n         // Perform any special handling for specific Rvalue types.\n         // Generally, checks here fall into one of two categories:\n         //   1. Additional checking to provide useful lints to the user\n@@ -594,6 +589,11 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             _ => {}\n         }\n \n+        // FIXME we need to revisit this for #67176\n+        if rvalue.needs_subst() {\n+            return None;\n+        }\n+\n         self.use_ecx(|this| {\n             trace!(\"calling eval_rvalue_into_place(rvalue = {:?}, place = {:?})\", rvalue, place);\n             this.ecx.eval_rvalue_into_place(rvalue, place)?;"}, {"sha": "86cafa0b8ca2500ef84bedce90abd1339a43660f", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -74,7 +74,7 @@ use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode};\n use smallvec::{smallvec, SmallVec};\n use std::ops::Deref;\n \n-pub struct Coerce<'a, 'tcx> {\n+struct Coerce<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n     cause: ObligationCause<'tcx>,\n     use_lub: bool,\n@@ -126,15 +126,15 @@ fn success<'tcx>(\n }\n \n impl<'f, 'tcx> Coerce<'f, 'tcx> {\n-    pub fn new(\n+    fn new(\n         fcx: &'f FnCtxt<'f, 'tcx>,\n         cause: ObligationCause<'tcx>,\n         allow_two_phase: AllowTwoPhase,\n     ) -> Self {\n         Coerce { fcx, cause, allow_two_phase, use_lub: false }\n     }\n \n-    pub fn unify(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> InferResult<'tcx, Ty<'tcx>> {\n+    fn unify(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> InferResult<'tcx, Ty<'tcx>> {\n         debug!(\"unify(a: {:?}, b: {:?}, use_lub: {})\", a, b, self.use_lub);\n         self.commit_if_ok(|_| {\n             if self.use_lub {\n@@ -841,6 +841,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.probe(|_| coerce.coerce(source, target)).is_ok()\n     }\n \n+    /// Given a type and a target type, this function will calculate and return\n+    /// how many dereference steps needed to achieve `expr_ty <: target`. If\n+    /// it's not possible, return `None`.\n+    pub fn deref_steps(&self, expr_ty: Ty<'tcx>, target: Ty<'tcx>) -> Option<usize> {\n+        let cause = self.cause(rustc_span::DUMMY_SP, ObligationCauseCode::ExprAssignable);\n+        // We don't ever need two-phase here since we throw out the result of the coercion\n+        let coerce = Coerce::new(self, cause, AllowTwoPhase::No);\n+        coerce\n+            .autoderef(rustc_span::DUMMY_SP, expr_ty)\n+            .find_map(|(ty, steps)| coerce.unify(ty, target).ok().map(|_| steps))\n+    }\n+\n     /// Given some expressions, their known unified type and another expression,\n     /// tries to unify the types, potentially inserting coercions on any of the\n     /// provided expressions and returns their LUB (aka \"common supertype\")."}, {"sha": "9e14efb67a94ca5df426bb0fb66bbbfad8662a7e", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 96, "deletions": 40, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -1,4 +1,3 @@\n-use crate::check::coercion::Coerce;\n use crate::check::FnCtxt;\n use rustc_infer::infer::InferOk;\n use rustc_trait_selection::infer::InferCtxtExt as _;\n@@ -9,7 +8,6 @@ use rustc_ast::util::parser::PREC_POSTFIX;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::{is_range_literal, Node};\n-use rustc_middle::traits::ObligationCauseCode;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::{self, AssocItem, Ty, TypeAndMut};\n use rustc_span::symbol::sym;\n@@ -355,6 +353,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         false\n     }\n \n+    fn replace_prefix<A, B, C>(&self, s: A, old: B, new: C) -> Option<String>\n+    where\n+        A: AsRef<str>,\n+        B: AsRef<str>,\n+        C: AsRef<str>,\n+    {\n+        let s = s.as_ref();\n+        let old = old.as_ref();\n+        if s.starts_with(old) { Some(new.as_ref().to_owned() + &s[old.len()..]) } else { None }\n+    }\n+\n     /// This function is used to determine potential \"simple\" improvements or users' errors and\n     /// provide them useful help. For example:\n     ///\n@@ -376,7 +385,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &hir::Expr<'_>,\n         checked_ty: Ty<'tcx>,\n         expected: Ty<'tcx>,\n-    ) -> Option<(Span, &'static str, String)> {\n+    ) -> Option<(Span, &'static str, String, Applicability)> {\n         let sm = self.sess().source_map();\n         let sp = expr.span;\n         if sm.is_imported(sp) {\n@@ -400,11 +409,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (&ty::Str, &ty::Array(arr, _) | &ty::Slice(arr)) if arr == self.tcx.types.u8 => {\n                     if let hir::ExprKind::Lit(_) = expr.kind {\n                         if let Ok(src) = sm.span_to_snippet(sp) {\n-                            if src.starts_with(\"b\\\"\") {\n+                            if let Some(src) = self.replace_prefix(src, \"b\\\"\", \"\\\"\") {\n                                 return Some((\n                                     sp,\n                                     \"consider removing the leading `b`\",\n-                                    src[1..].to_string(),\n+                                    src,\n+                                    Applicability::MachineApplicable,\n                                 ));\n                             }\n                         }\n@@ -413,11 +423,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (&ty::Array(arr, _) | &ty::Slice(arr), &ty::Str) if arr == self.tcx.types.u8 => {\n                     if let hir::ExprKind::Lit(_) = expr.kind {\n                         if let Ok(src) = sm.span_to_snippet(sp) {\n-                            if src.starts_with('\"') {\n+                            if let Some(src) = self.replace_prefix(src, \"\\\"\", \"b\\\"\") {\n                                 return Some((\n                                     sp,\n                                     \"consider adding a leading `b`\",\n-                                    format!(\"b{}\", src),\n+                                    src,\n+                                    Applicability::MachineApplicable,\n                                 ));\n                             }\n                         }\n@@ -470,7 +481,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let sugg_expr = if needs_parens { format!(\"({})\", src) } else { src };\n \n                         if let Some(sugg) = self.can_use_as_ref(expr) {\n-                            return Some(sugg);\n+                            return Some((\n+                                sugg.0,\n+                                sugg.1,\n+                                sugg.2,\n+                                Applicability::MachineApplicable,\n+                            ));\n                         }\n                         let field_name = if is_struct_pat_shorthand_field {\n                             format!(\"{}: \", sugg_expr)\n@@ -495,6 +511,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                         \"consider dereferencing here to assign to the mutable \\\n                                          borrowed piece of memory\",\n                                         format!(\"*{}\", src),\n+                                        Applicability::MachineApplicable,\n                                     ));\n                                 }\n                             }\n@@ -505,11 +522,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 sp,\n                                 \"consider mutably borrowing here\",\n                                 format!(\"{}&mut {}\", field_name, sugg_expr),\n+                                Applicability::MachineApplicable,\n                             ),\n                             hir::Mutability::Not => (\n                                 sp,\n                                 \"consider borrowing here\",\n                                 format!(\"{}&{}\", field_name, sugg_expr),\n+                                Applicability::MachineApplicable,\n                             ),\n                         });\n                     }\n@@ -526,51 +545,88 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // We have `&T`, check if what was expected was `T`. If so,\n                 // we may want to suggest removing a `&`.\n                 if sm.is_imported(expr.span) {\n-                    if let Ok(code) = sm.span_to_snippet(sp) {\n-                        if code.starts_with('&') {\n+                    if let Ok(src) = sm.span_to_snippet(sp) {\n+                        if let Some(src) = self.replace_prefix(src, \"&\", \"\") {\n                             return Some((\n                                 sp,\n                                 \"consider removing the borrow\",\n-                                code[1..].to_string(),\n+                                src,\n+                                Applicability::MachineApplicable,\n                             ));\n                         }\n                     }\n                     return None;\n                 }\n                 if let Ok(code) = sm.span_to_snippet(expr.span) {\n-                    return Some((sp, \"consider removing the borrow\", code));\n+                    return Some((\n+                        sp,\n+                        \"consider removing the borrow\",\n+                        code,\n+                        Applicability::MachineApplicable,\n+                    ));\n                 }\n             }\n             (\n                 _,\n-                &ty::RawPtr(TypeAndMut { ty: _, mutbl: hir::Mutability::Not }),\n-                &ty::Ref(_, _, hir::Mutability::Not),\n+                &ty::RawPtr(TypeAndMut { ty: ty_b, mutbl: mutbl_b }),\n+                &ty::Ref(_, ty_a, mutbl_a),\n             ) => {\n-                let cause = self.cause(rustc_span::DUMMY_SP, ObligationCauseCode::ExprAssignable);\n-                // We don't ever need two-phase here since we throw out the result of the coercion\n-                let coerce = Coerce::new(self, cause, AllowTwoPhase::No);\n-\n-                if let Some(steps) =\n-                    coerce.autoderef(sp, checked_ty).skip(1).find_map(|(referent_ty, steps)| {\n-                        coerce\n-                            .unify(\n-                                coerce.tcx.mk_ptr(ty::TypeAndMut {\n-                                    mutbl: hir::Mutability::Not,\n-                                    ty: referent_ty,\n-                                }),\n-                                expected,\n-                            )\n-                            .ok()\n-                            .map(|_| steps)\n-                    })\n-                {\n-                    // The pointer type implements `Copy` trait so the suggestion is always valid.\n-                    if let Ok(code) = sm.span_to_snippet(sp) {\n-                        if code.starts_with('&') {\n-                            let derefs = \"*\".repeat(steps - 1);\n-                            let message = \"consider dereferencing the reference\";\n-                            let suggestion = format!(\"&{}{}\", derefs, code[1..].to_string());\n-                            return Some((sp, message, suggestion));\n+                if let Some(steps) = self.deref_steps(ty_a, ty_b) {\n+                    // Only suggest valid if dereferencing needed.\n+                    if steps > 0 {\n+                        // The pointer type implements `Copy` trait so the suggestion is always valid.\n+                        if let Ok(src) = sm.span_to_snippet(sp) {\n+                            let derefs = &\"*\".repeat(steps);\n+                            if let Some((src, applicability)) = match mutbl_b {\n+                                hir::Mutability::Mut => {\n+                                    let new_prefix = \"&mut \".to_owned() + derefs;\n+                                    match mutbl_a {\n+                                        hir::Mutability::Mut => {\n+                                            if let Some(s) =\n+                                                self.replace_prefix(src, \"&mut \", new_prefix)\n+                                            {\n+                                                Some((s, Applicability::MachineApplicable))\n+                                            } else {\n+                                                None\n+                                            }\n+                                        }\n+                                        hir::Mutability::Not => {\n+                                            if let Some(s) =\n+                                                self.replace_prefix(src, \"&\", new_prefix)\n+                                            {\n+                                                Some((s, Applicability::Unspecified))\n+                                            } else {\n+                                                None\n+                                            }\n+                                        }\n+                                    }\n+                                }\n+                                hir::Mutability::Not => {\n+                                    let new_prefix = \"&\".to_owned() + derefs;\n+                                    match mutbl_a {\n+                                        hir::Mutability::Mut => {\n+                                            if let Some(s) =\n+                                                self.replace_prefix(src, \"&mut \", new_prefix)\n+                                            {\n+                                                Some((s, Applicability::MachineApplicable))\n+                                            } else {\n+                                                None\n+                                            }\n+                                        }\n+                                        hir::Mutability::Not => {\n+                                            if let Some(s) =\n+                                                self.replace_prefix(src, \"&\", new_prefix)\n+                                            {\n+                                                Some((s, Applicability::MachineApplicable))\n+                                            } else {\n+                                                None\n+                                            }\n+                                        }\n+                                    }\n+                                }\n+                            } {\n+                                return Some((sp, \"consider dereferencing\", src, applicability));\n+                            }\n                         }\n                     }\n                 }\n@@ -616,7 +672,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         } else {\n                             format!(\"*{}\", code)\n                         };\n-                        return Some((sp, message, suggestion));\n+                        return Some((sp, message, suggestion, Applicability::MachineApplicable));\n                     }\n                 }\n             }"}, {"sha": "6274a11ebd5d0842efe1635fe4bb621e3adddd98", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -5036,8 +5036,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n     ) {\n-        if let Some((sp, msg, suggestion)) = self.check_ref(expr, found, expected) {\n-            err.span_suggestion(sp, msg, suggestion, Applicability::MachineApplicable);\n+        if let Some((sp, msg, suggestion, applicability)) = self.check_ref(expr, found, expected) {\n+            err.span_suggestion(sp, msg, suggestion, applicability);\n         } else if let (ty::FnDef(def_id, ..), true) =\n             (&found.kind, self.suggest_fn_call(err, expr, expected, found))\n         {"}, {"sha": "a3ee14e85d22286df13e0dfcffef2f14ea9f3e27", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -497,7 +497,7 @@ impl Drop for WaiterQueue<'_> {\n             let mut queue = (state_and_queue & !STATE_MASK) as *const Waiter;\n             while !queue.is_null() {\n                 let next = (*queue).next;\n-                let thread = (*queue).thread.replace(None).unwrap();\n+                let thread = (*queue).thread.take().unwrap();\n                 (*queue).signaled.store(true, Ordering::Release);\n                 // ^- FIXME (maybe): This is another case of issue #55005\n                 // `store()` has a potentially dangling ref to `signaled`."}, {"sha": "6df52affe399333863131ffe8ba84bb9c4d8a1c6", "filename": "src/test/run-make/wasm-panic-small/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Frun-make%2Fwasm-panic-small%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Frun-make%2Fwasm-panic-small%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-panic-small%2Ffoo.rs?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -23,5 +23,5 @@ pub fn foo() {\n pub fn foo() -> usize {\n     use std::cell::Cell;\n     thread_local!(static A: Cell<Vec<u32>> = Cell::new(Vec::new()));\n-    A.try_with(|x| x.replace(Vec::new()).len()).unwrap_or(0)\n+    A.try_with(|x| x.take().len()).unwrap_or(0)\n }"}, {"sha": "dfbd3223efc86136662a3f13bbaccd2a9bcb3a87", "filename": "src/test/ui/issues/issue-32122-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Fissues%2Fissue-32122-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Fissues%2Fissue-32122-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32122-1.stderr?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -5,7 +5,7 @@ LL |     let _: *const u8 = &a;\n    |            ---------   ^^\n    |            |           |\n    |            |           expected `u8`, found struct `Foo`\n-   |            |           help: consider dereferencing the reference: `&*a`\n+   |            |           help: consider dereferencing: `&*a`\n    |            expected due to this\n    |\n    = note: expected raw pointer `*const u8`"}, {"sha": "2e199e2a19f732e28cccea1232931be87d1ec273", "filename": "src/test/ui/issues/issue-32122-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Fissues%2Fissue-32122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Fissues%2Fissue-32122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32122-2.stderr?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -5,7 +5,7 @@ LL |     let _: *const u8 = &a;\n    |            ---------   ^^\n    |            |           |\n    |            |           expected `u8`, found struct `Emm`\n-   |            |           help: consider dereferencing the reference: `&***a`\n+   |            |           help: consider dereferencing: `&***a`\n    |            expected due to this\n    |\n    = note: expected raw pointer `*const u8`"}, {"sha": "cbc0e8c061b820184dfa45ebe77b80383c465947", "filename": "src/test/ui/issues/issue-71676-1.fixed", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Fissues%2Fissue-71676-1.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Fissues%2Fissue-71676-1.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-71676-1.fixed?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -0,0 +1,53 @@\n+// run-rustfix\n+use std::ops::Deref;\n+use std::ops::DerefMut;\n+struct Bar(u8);\n+struct Foo(Bar);\n+struct Emm(Foo);\n+impl Deref for Bar{\n+    type Target = u8;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+impl Deref for Foo {\n+    type Target = Bar;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+impl Deref for Emm {\n+    type Target = Foo;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+impl DerefMut for Bar{\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        &mut self.0\n+    }\n+}\n+impl DerefMut for Foo {\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        &mut self.0\n+    }\n+}\n+impl DerefMut for Emm {\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        &mut self.0\n+    }\n+}\n+fn main() {\n+    // Suggest dereference with arbitrary mutability\n+    let a = Emm(Foo(Bar(0)));\n+    let _: *const u8 = &***a; //~ ERROR mismatched types\n+\n+    let mut a = Emm(Foo(Bar(0)));\n+    let _: *mut u8 = &mut ***a; //~ ERROR mismatched types\n+\n+    let a = Emm(Foo(Bar(0)));\n+    let _: *const u8 = &***a; //~ ERROR mismatched types\n+\n+    let mut a = Emm(Foo(Bar(0)));\n+    let _: *mut u8 = &mut ***a; //~ ERROR mismatched types\n+}"}, {"sha": "6e87c7174c6335f0b01acaced49609cf89a36ba2", "filename": "src/test/ui/issues/issue-71676-1.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Fissues%2Fissue-71676-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Fissues%2Fissue-71676-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-71676-1.rs?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -0,0 +1,53 @@\n+// run-rustfix\n+use std::ops::Deref;\n+use std::ops::DerefMut;\n+struct Bar(u8);\n+struct Foo(Bar);\n+struct Emm(Foo);\n+impl Deref for Bar{\n+    type Target = u8;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+impl Deref for Foo {\n+    type Target = Bar;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+impl Deref for Emm {\n+    type Target = Foo;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+impl DerefMut for Bar{\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        &mut self.0\n+    }\n+}\n+impl DerefMut for Foo {\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        &mut self.0\n+    }\n+}\n+impl DerefMut for Emm {\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        &mut self.0\n+    }\n+}\n+fn main() {\n+    // Suggest dereference with arbitrary mutability\n+    let a = Emm(Foo(Bar(0)));\n+    let _: *const u8 = &a; //~ ERROR mismatched types\n+\n+    let mut a = Emm(Foo(Bar(0)));\n+    let _: *mut u8 = &a; //~ ERROR mismatched types\n+\n+    let a = Emm(Foo(Bar(0)));\n+    let _: *const u8 = &mut a; //~ ERROR mismatched types\n+\n+    let mut a = Emm(Foo(Bar(0)));\n+    let _: *mut u8 = &mut a; //~ ERROR mismatched types\n+}"}, {"sha": "bbabc2202dc840fbaee18bc0cb30728e7404b0e2", "filename": "src/test/ui/issues/issue-71676-1.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Fissues%2Fissue-71676-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Fissues%2Fissue-71676-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-71676-1.stderr?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -0,0 +1,55 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-71676-1.rs:43:24\n+   |\n+LL |     let _: *const u8 = &a;\n+   |            ---------   ^^\n+   |            |           |\n+   |            |           expected `u8`, found struct `Emm`\n+   |            |           help: consider dereferencing: `&***a`\n+   |            expected due to this\n+   |\n+   = note: expected raw pointer `*const u8`\n+                found reference `&Emm`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-71676-1.rs:46:22\n+   |\n+LL |     let _: *mut u8 = &a;\n+   |            -------   ^^\n+   |            |         |\n+   |            |         types differ in mutability\n+   |            |         help: consider dereferencing: `&mut ***a`\n+   |            expected due to this\n+   |\n+   = note: expected raw pointer `*mut u8`\n+                found reference `&Emm`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-71676-1.rs:49:24\n+   |\n+LL |     let _: *const u8 = &mut a;\n+   |            ---------   ^^^^^^\n+   |            |           |\n+   |            |           expected `u8`, found struct `Emm`\n+   |            |           help: consider dereferencing: `&***a`\n+   |            expected due to this\n+   |\n+   = note:    expected raw pointer `*const u8`\n+           found mutable reference `&mut Emm`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-71676-1.rs:52:22\n+   |\n+LL |     let _: *mut u8 = &mut a;\n+   |            -------   ^^^^^^\n+   |            |         |\n+   |            |         expected `u8`, found struct `Emm`\n+   |            |         help: consider dereferencing: `&mut ***a`\n+   |            expected due to this\n+   |\n+   = note:    expected raw pointer `*mut u8`\n+           found mutable reference `&mut Emm`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "f3183899dc5238f7c93c0753d5acadc57a5c4dbe", "filename": "src/test/ui/issues/issue-71676-2.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Fissues%2Fissue-71676-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Fissues%2Fissue-71676-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-71676-2.rs?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -0,0 +1,42 @@\n+use std::ops::Deref;\n+use std::ops::DerefMut;\n+struct Bar(u8);\n+struct Foo(Bar);\n+struct Emm(Foo);\n+impl Deref for Bar{\n+    type Target = u8;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+impl Deref for Foo {\n+    type Target = Bar;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+impl Deref for Emm {\n+    type Target = Foo;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+impl DerefMut for Bar{\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        &mut self.0\n+    }\n+}\n+impl DerefMut for Foo {\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        &mut self.0\n+    }\n+}\n+impl DerefMut for Emm {\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        &mut self.0\n+    }\n+}\n+fn main() {\n+    let a = Emm(Foo(Bar(0)));\n+    let _: *mut u8 = &a; //~ ERROR mismatched types\n+}"}, {"sha": "ebdd345809af563fc1e5f7862024380a06b52672", "filename": "src/test/ui/issues/issue-71676-2.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Fissues%2Fissue-71676-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Fissues%2Fissue-71676-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-71676-2.stderr?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -0,0 +1,16 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-71676-2.rs:41:22\n+   |\n+LL |     let _: *mut u8 = &a;\n+   |            -------   ^^\n+   |            |         |\n+   |            |         types differ in mutability\n+   |            |         help: consider dereferencing: `&mut ***a`\n+   |            expected due to this\n+   |\n+   = note: expected raw pointer `*mut u8`\n+                found reference `&Emm`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "0c328a2594a4671d74216251ff7c5cadba806729", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.noopt.stderr", "status": "modified", "additions": 57, "deletions": 51, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -1,146 +1,152 @@\n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:22:13\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:17:20\n    |\n-LL |     let _ = x << 42;\n-   |             ^^^^^^^ attempt to shift left with overflow\n+LL |     const N: i32 = T::N << 42;\n+   |                    ^^^^^^^^^^ attempt to shift left with overflow\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-exceeding-bitshifts.rs:9:9\n+  --> $DIR/lint-exceeding-bitshifts.rs:8:9\n    |\n-LL | #![deny(arithmetic_overflow, const_err)]\n+LL | #![warn(arithmetic_overflow, const_err)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:27:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:21:13\n+   |\n+LL |     let _ = x << 42;\n+   |             ^^^^^^^ attempt to shift left with overflow\n+\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:26:15\n    |\n LL |       let n = 1u8 << 8;\n    |               ^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:29:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:28:15\n    |\n LL |       let n = 1u16 << 16;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:31:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:30:15\n    |\n LL |       let n = 1u32 << 32;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:33:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:32:15\n    |\n LL |       let n = 1u64 << 64;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:35:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:34:15\n    |\n LL |       let n = 1i8 << 8;\n    |               ^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:37:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:36:15\n    |\n LL |       let n = 1i16 << 16;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:39:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:38:15\n    |\n LL |       let n = 1i32 << 32;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:41:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:40:15\n    |\n LL |       let n = 1i64 << 64;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:44:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:43:15\n    |\n LL |       let n = 1u8 >> 8;\n    |               ^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:46:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:45:15\n    |\n LL |       let n = 1u16 >> 16;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:48:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:47:15\n    |\n LL |       let n = 1u32 >> 32;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:50:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:49:15\n    |\n LL |       let n = 1u64 >> 64;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:52:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:51:15\n    |\n LL |       let n = 1i8 >> 8;\n    |               ^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:54:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:53:15\n    |\n LL |       let n = 1i16 >> 16;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:56:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:55:15\n    |\n LL |       let n = 1i32 >> 32;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:58:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:57:15\n    |\n LL |       let n = 1i64 >> 64;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:62:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:61:15\n    |\n LL |       let n = n << 8;\n    |               ^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:64:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:63:15\n    |\n LL |       let n = 1u8 << -8;\n    |               ^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:69:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:68:15\n    |\n LL |       let n = 1u8 << (4+4);\n    |               ^^^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:71:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:70:15\n    |\n LL |       let n = 1i64 >> [64][0];\n    |               ^^^^^^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:76:15\n    |\n LL |       let n = 1_isize << BITS;\n    |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:78:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n    |\n LL |       let n = 1_usize << BITS;\n    |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n \n-error: aborting due to 23 previous errors\n+warning: 24 warnings emitted\n "}, {"sha": "0c328a2594a4671d74216251ff7c5cadba806729", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.opt.stderr", "status": "modified", "additions": 57, "deletions": 51, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -1,146 +1,152 @@\n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:22:13\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:17:20\n    |\n-LL |     let _ = x << 42;\n-   |             ^^^^^^^ attempt to shift left with overflow\n+LL |     const N: i32 = T::N << 42;\n+   |                    ^^^^^^^^^^ attempt to shift left with overflow\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-exceeding-bitshifts.rs:9:9\n+  --> $DIR/lint-exceeding-bitshifts.rs:8:9\n    |\n-LL | #![deny(arithmetic_overflow, const_err)]\n+LL | #![warn(arithmetic_overflow, const_err)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:27:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:21:13\n+   |\n+LL |     let _ = x << 42;\n+   |             ^^^^^^^ attempt to shift left with overflow\n+\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:26:15\n    |\n LL |       let n = 1u8 << 8;\n    |               ^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:29:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:28:15\n    |\n LL |       let n = 1u16 << 16;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:31:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:30:15\n    |\n LL |       let n = 1u32 << 32;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:33:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:32:15\n    |\n LL |       let n = 1u64 << 64;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:35:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:34:15\n    |\n LL |       let n = 1i8 << 8;\n    |               ^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:37:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:36:15\n    |\n LL |       let n = 1i16 << 16;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:39:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:38:15\n    |\n LL |       let n = 1i32 << 32;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:41:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:40:15\n    |\n LL |       let n = 1i64 << 64;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:44:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:43:15\n    |\n LL |       let n = 1u8 >> 8;\n    |               ^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:46:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:45:15\n    |\n LL |       let n = 1u16 >> 16;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:48:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:47:15\n    |\n LL |       let n = 1u32 >> 32;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:50:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:49:15\n    |\n LL |       let n = 1u64 >> 64;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:52:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:51:15\n    |\n LL |       let n = 1i8 >> 8;\n    |               ^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:54:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:53:15\n    |\n LL |       let n = 1i16 >> 16;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:56:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:55:15\n    |\n LL |       let n = 1i32 >> 32;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:58:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:57:15\n    |\n LL |       let n = 1i64 >> 64;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:62:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:61:15\n    |\n LL |       let n = n << 8;\n    |               ^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:64:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:63:15\n    |\n LL |       let n = 1u8 << -8;\n    |               ^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:69:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:68:15\n    |\n LL |       let n = 1u8 << (4+4);\n    |               ^^^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:71:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:70:15\n    |\n LL |       let n = 1i64 >> [64][0];\n    |               ^^^^^^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:76:15\n    |\n LL |       let n = 1_isize << BITS;\n    |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:78:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n    |\n LL |       let n = 1_usize << BITS;\n    |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n \n-error: aborting due to 23 previous errors\n+warning: 24 warnings emitted\n "}, {"sha": "0c328a2594a4671d74216251ff7c5cadba806729", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "status": "modified", "additions": 57, "deletions": 51, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -1,146 +1,152 @@\n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:22:13\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:17:20\n    |\n-LL |     let _ = x << 42;\n-   |             ^^^^^^^ attempt to shift left with overflow\n+LL |     const N: i32 = T::N << 42;\n+   |                    ^^^^^^^^^^ attempt to shift left with overflow\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-exceeding-bitshifts.rs:9:9\n+  --> $DIR/lint-exceeding-bitshifts.rs:8:9\n    |\n-LL | #![deny(arithmetic_overflow, const_err)]\n+LL | #![warn(arithmetic_overflow, const_err)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:27:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:21:13\n+   |\n+LL |     let _ = x << 42;\n+   |             ^^^^^^^ attempt to shift left with overflow\n+\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:26:15\n    |\n LL |       let n = 1u8 << 8;\n    |               ^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:29:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:28:15\n    |\n LL |       let n = 1u16 << 16;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:31:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:30:15\n    |\n LL |       let n = 1u32 << 32;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:33:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:32:15\n    |\n LL |       let n = 1u64 << 64;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:35:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:34:15\n    |\n LL |       let n = 1i8 << 8;\n    |               ^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:37:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:36:15\n    |\n LL |       let n = 1i16 << 16;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:39:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:38:15\n    |\n LL |       let n = 1i32 << 32;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:41:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:40:15\n    |\n LL |       let n = 1i64 << 64;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:44:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:43:15\n    |\n LL |       let n = 1u8 >> 8;\n    |               ^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:46:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:45:15\n    |\n LL |       let n = 1u16 >> 16;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:48:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:47:15\n    |\n LL |       let n = 1u32 >> 32;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:50:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:49:15\n    |\n LL |       let n = 1u64 >> 64;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:52:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:51:15\n    |\n LL |       let n = 1i8 >> 8;\n    |               ^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:54:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:53:15\n    |\n LL |       let n = 1i16 >> 16;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:56:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:55:15\n    |\n LL |       let n = 1i32 >> 32;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:58:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:57:15\n    |\n LL |       let n = 1i64 >> 64;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:62:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:61:15\n    |\n LL |       let n = n << 8;\n    |               ^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:64:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:63:15\n    |\n LL |       let n = 1u8 << -8;\n    |               ^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:69:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:68:15\n    |\n LL |       let n = 1u8 << (4+4);\n    |               ^^^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:71:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:70:15\n    |\n LL |       let n = 1i64 >> [64][0];\n    |               ^^^^^^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:76:15\n    |\n LL |       let n = 1_isize << BITS;\n    |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:78:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n    |\n LL |       let n = 1_usize << BITS;\n    |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n \n-error: aborting due to 23 previous errors\n+warning: 24 warnings emitted\n "}, {"sha": "565bef49c9f8ca40e60b0cc746acb93222b57553", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -2,11 +2,10 @@\n //[noopt]compile-flags: -C opt-level=0\n //[opt]compile-flags: -O\n //[opt_with_overflow_checks]compile-flags: -C overflow-checks=on -O\n-\n-// build-fail\n+// build-pass\n \n #![crate_type=\"lib\"]\n-#![deny(arithmetic_overflow, const_err)]\n+#![warn(arithmetic_overflow, const_err)]\n #![allow(unused_variables)]\n #![allow(dead_code)]\n \n@@ -15,65 +14,65 @@ pub trait Foo {\n }\n \n impl<T: Foo> Foo for Vec<T> {\n-    const N: i32 = T::N << 42; // FIXME this should warn\n+    const N: i32 = T::N << 42; //~ WARN: arithmetic operation will overflow\n }\n \n pub fn foo(x: i32) {\n-    let _ = x << 42; //~ ERROR: arithmetic operation will overflow\n+    let _ = x << 42; //~ WARN: arithmetic operation will overflow\n }\n \n pub fn main() {\n       let n = 1u8 << 7;\n-      let n = 1u8 << 8;   //~ ERROR: arithmetic operation will overflow\n+      let n = 1u8 << 8;   //~ WARN: arithmetic operation will overflow\n       let n = 1u16 << 15;\n-      let n = 1u16 << 16; //~ ERROR: arithmetic operation will overflow\n+      let n = 1u16 << 16; //~ WARN: arithmetic operation will overflow\n       let n = 1u32 << 31;\n-      let n = 1u32 << 32; //~ ERROR: arithmetic operation will overflow\n+      let n = 1u32 << 32; //~ WARN: arithmetic operation will overflow\n       let n = 1u64 << 63;\n-      let n = 1u64 << 64; //~ ERROR: arithmetic operation will overflow\n+      let n = 1u64 << 64; //~ WARN: arithmetic operation will overflow\n       let n = 1i8 << 7;\n-      let n = 1i8 << 8;   //~ ERROR: arithmetic operation will overflow\n+      let n = 1i8 << 8;   //~ WARN: arithmetic operation will overflow\n       let n = 1i16 << 15;\n-      let n = 1i16 << 16; //~ ERROR: arithmetic operation will overflow\n+      let n = 1i16 << 16; //~ WARN: arithmetic operation will overflow\n       let n = 1i32 << 31;\n-      let n = 1i32 << 32; //~ ERROR: arithmetic operation will overflow\n+      let n = 1i32 << 32; //~ WARN: arithmetic operation will overflow\n       let n = 1i64 << 63;\n-      let n = 1i64 << 64; //~ ERROR: arithmetic operation will overflow\n+      let n = 1i64 << 64; //~ WARN: arithmetic operation will overflow\n \n       let n = 1u8 >> 7;\n-      let n = 1u8 >> 8;   //~ ERROR: arithmetic operation will overflow\n+      let n = 1u8 >> 8;   //~ WARN: arithmetic operation will overflow\n       let n = 1u16 >> 15;\n-      let n = 1u16 >> 16; //~ ERROR: arithmetic operation will overflow\n+      let n = 1u16 >> 16; //~ WARN: arithmetic operation will overflow\n       let n = 1u32 >> 31;\n-      let n = 1u32 >> 32; //~ ERROR: arithmetic operation will overflow\n+      let n = 1u32 >> 32; //~ WARN: arithmetic operation will overflow\n       let n = 1u64 >> 63;\n-      let n = 1u64 >> 64; //~ ERROR: arithmetic operation will overflow\n+      let n = 1u64 >> 64; //~ WARN: arithmetic operation will overflow\n       let n = 1i8 >> 7;\n-      let n = 1i8 >> 8;   //~ ERROR: arithmetic operation will overflow\n+      let n = 1i8 >> 8;   //~ WARN: arithmetic operation will overflow\n       let n = 1i16 >> 15;\n-      let n = 1i16 >> 16; //~ ERROR: arithmetic operation will overflow\n+      let n = 1i16 >> 16; //~ WARN: arithmetic operation will overflow\n       let n = 1i32 >> 31;\n-      let n = 1i32 >> 32; //~ ERROR: arithmetic operation will overflow\n+      let n = 1i32 >> 32; //~ WARN: arithmetic operation will overflow\n       let n = 1i64 >> 63;\n-      let n = 1i64 >> 64; //~ ERROR: arithmetic operation will overflow\n+      let n = 1i64 >> 64; //~ WARN: arithmetic operation will overflow\n \n       let n = 1u8;\n       let n = n << 7;\n-      let n = n << 8; //~ ERROR: arithmetic operation will overflow\n+      let n = n << 8; //~ WARN: arithmetic operation will overflow\n \n-      let n = 1u8 << -8; //~ ERROR: arithmetic operation will overflow\n+      let n = 1u8 << -8; //~ WARN: arithmetic operation will overflow\n \n       let n = 1i8<<(1isize+-1);\n \n       let n = 1u8 << (4+3);\n-      let n = 1u8 << (4+4); //~ ERROR: arithmetic operation will overflow\n+      let n = 1u8 << (4+4); //~ WARN: arithmetic operation will overflow\n       let n = 1i64 >> [63][0];\n-      let n = 1i64 >> [64][0]; //~ ERROR: arithmetic operation will overflow\n+      let n = 1i64 >> [64][0]; //~ WARN: arithmetic operation will overflow\n \n       #[cfg(target_pointer_width = \"32\")]\n       const BITS: usize = 32;\n       #[cfg(target_pointer_width = \"64\")]\n       const BITS: usize = 64;\n-      let n = 1_isize << BITS; //~ ERROR: arithmetic operation will overflow\n-      let n = 1_usize << BITS; //~ ERROR: arithmetic operation will overflow\n+      let n = 1_isize << BITS; //~ WARN: arithmetic operation will overflow\n+      let n = 1_usize << BITS; //~ WARN: arithmetic operation will overflow\n }"}, {"sha": "3c5da3f14403503d00caf5533ede8b3624fd8f80", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -108,4 +108,5 @@ LL | fn deprecated_without_unstable_or_stable() { }\n \n error: aborting due to 18 previous errors\n \n-For more information about this error, try `rustc --explain E0541`.\n+Some errors have detailed explanations: E0539, E0541.\n+For more information about an error, try `rustc --explain E0539`."}, {"sha": "a5b85646581bfe9b85cc395937162e05f3c342c2", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.rs?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -7,7 +7,7 @@ struct MyType<'a>(Cell<Option<&'a mut MyType<'a>>>, PhantomPinned);\n impl<'a> Clone for &'a mut MyType<'a> {\n     //~^ ERROR E0751\n     fn clone(&self) -> &'a mut MyType<'a> {\n-        self.0.replace(None).unwrap()\n+        self.0.take().unwrap()\n     }\n }\n "}, {"sha": "606cc65a84bc2612eec4da2674b5bf0f2981ee7c", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-derefmut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea733c3a59be77b752d6d3f722596bfd5b1fcf31/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.rs?ref=ea733c3a59be77b752d6d3f722596bfd5b1fcf31", "patch": "@@ -12,7 +12,7 @@ struct MyType<'a>(Cell<Option<&'a mut MyType<'a>>>, PhantomPinned);\n impl<'a> DerefMut for &'a MyType<'a> {\n     //~^ ERROR E0751\n     fn deref_mut(&mut self) -> &mut MyType<'a> {\n-        self.0.replace(None).unwrap()\n+        self.0.take().unwrap()\n     }\n }\n "}]}