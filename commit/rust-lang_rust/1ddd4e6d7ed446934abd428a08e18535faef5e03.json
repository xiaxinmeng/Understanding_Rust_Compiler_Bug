{"sha": "1ddd4e6d7ed446934abd428a08e18535faef5e03", "node_id": "C_kwDOAAsO6NoAKDFkZGQ0ZTZkN2VkNDQ2OTM0YWJkNDI4YTA4ZTE4NTM1ZmFlZjVlMDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-11T01:06:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-11T01:06:26Z"}, "message": "Auto merge of #89752 - matthiaskrgr:rollup-v4fgmwg, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #89579 (Add regression test for issue 80108)\n - #89632 (Fix docblock code display on mobile)\n - #89691 (Move `DebuggerCommands` and `check_debugger_output` to a separate module)\n - #89707 (Apply clippy suggestions for std)\n - #89722 (Fix spelling: Cannonical -> Canonical)\n - #89736 (Remove unused CSS rule)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4bcf48eb7610041f34b158d395aacfbaf6aeee04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bcf48eb7610041f34b158d395aacfbaf6aeee04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ddd4e6d7ed446934abd428a08e18535faef5e03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ddd4e6d7ed446934abd428a08e18535faef5e03", "html_url": "https://github.com/rust-lang/rust/commit/1ddd4e6d7ed446934abd428a08e18535faef5e03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ddd4e6d7ed446934abd428a08e18535faef5e03/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bf55753c680e653eaa9d11dd66e56844bd04d32", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf55753c680e653eaa9d11dd66e56844bd04d32", "html_url": "https://github.com/rust-lang/rust/commit/3bf55753c680e653eaa9d11dd66e56844bd04d32"}, {"sha": "bf01a59be58cb1a2e9c37766762a3aedc575d346", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf01a59be58cb1a2e9c37766762a3aedc575d346", "html_url": "https://github.com/rust-lang/rust/commit/bf01a59be58cb1a2e9c37766762a3aedc575d346"}], "stats": {"total": 354, "additions": 203, "deletions": 151}, "files": [{"sha": "6720493cd3cb19ba77400f82970fc08df7449cca", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ddd4e6d7ed446934abd428a08e18535faef5e03/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ddd4e6d7ed446934abd428a08e18535faef5e03/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=1ddd4e6d7ed446934abd428a08e18535faef5e03", "patch": "@@ -264,14 +264,14 @@ impl EvaluationResult {\n /// Indicates that trait evaluation caused overflow and in which pass.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable)]\n pub enum OverflowError {\n-    Cannonical,\n+    Canonical,\n     ErrorReporting,\n }\n \n impl<'tcx> From<OverflowError> for SelectionError<'tcx> {\n     fn from(overflow_error: OverflowError) -> SelectionError<'tcx> {\n         match overflow_error {\n-            OverflowError::Cannonical => SelectionError::Overflow,\n+            OverflowError::Canonical => SelectionError::Overflow,\n             OverflowError::ErrorReporting => SelectionError::ErrorReporting,\n         }\n     }"}, {"sha": "2fa6c0c02597b77ebef3d29585b04f825ab7c46f", "filename": "compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ddd4e6d7ed446934abd428a08e18535faef5e03/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ddd4e6d7ed446934abd428a08e18535faef5e03/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=1ddd4e6d7ed446934abd428a08e18535faef5e03", "patch": "@@ -83,10 +83,10 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n     ) -> EvaluationResult {\n         match self.evaluate_obligation(obligation) {\n             Ok(result) => result,\n-            Err(OverflowError::Cannonical) => {\n+            Err(OverflowError::Canonical) => {\n                 let mut selcx = SelectionContext::with_query_mode(&self, TraitQueryMode::Standard);\n                 selcx.evaluate_root_obligation(obligation).unwrap_or_else(|r| match r {\n-                    OverflowError::Cannonical => {\n+                    OverflowError::Canonical => {\n                         span_bug!(\n                             obligation.cause.span,\n                             \"Overflow should be caught earlier in standard query mode: {:?}, {:?}\","}, {"sha": "0f6e2e0be52b74a076a18019fe8d48272f7599e0", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ddd4e6d7ed446934abd428a08e18535faef5e03/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ddd4e6d7ed446934abd428a08e18535faef5e03/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=1ddd4e6d7ed446934abd428a08e18535faef5e03", "patch": "@@ -161,7 +161,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     Ok(Some(EvaluatedCandidate { candidate: c, evaluation: eval }))\n                 }\n                 Ok(_) => Ok(None),\n-                Err(OverflowError::Cannonical) => Err(Overflow),\n+                Err(OverflowError::Canonical) => Err(Overflow),\n                 Err(OverflowError::ErrorReporting) => Err(ErrorReporting),\n             })\n             .flat_map(Result::transpose)"}, {"sha": "85502a399dedac0bbc74781160255accebbba09d", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ddd4e6d7ed446934abd428a08e18535faef5e03/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ddd4e6d7ed446934abd428a08e18535faef5e03/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=1ddd4e6d7ed446934abd428a08e18535faef5e03", "patch": "@@ -900,7 +900,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         match self.candidate_from_obligation(stack) {\n             Ok(Some(c)) => self.evaluate_candidate(stack, &c),\n             Ok(None) => Ok(EvaluatedToAmbig),\n-            Err(Overflow) => Err(OverflowError::Cannonical),\n+            Err(Overflow) => Err(OverflowError::Canonical),\n             Err(ErrorReporting) => Err(OverflowError::ErrorReporting),\n             Err(..) => Ok(EvaluatedToErr),\n         }\n@@ -1064,7 +1064,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     self.infcx.report_overflow_error(error_obligation, true);\n                 }\n                 TraitQueryMode::Canonical => {\n-                    return Err(OverflowError::Cannonical);\n+                    return Err(OverflowError::Canonical);\n                 }\n             }\n         }"}, {"sha": "2864e94f60f2c82ca542ac8fa890701bc340a0a9", "filename": "library/std/src/io/buffered/bufreader.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1ddd4e6d7ed446934abd428a08e18535faef5e03/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ddd4e6d7ed446934abd428a08e18535faef5e03/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs?ref=1ddd4e6d7ed446934abd428a08e18535faef5e03", "patch": "@@ -242,14 +242,13 @@ impl<R: Seek> BufReader<R> {\n                 self.pos = new_pos as usize;\n                 return Ok(());\n             }\n-        } else {\n-            if let Some(new_pos) = pos.checked_add(offset as u64) {\n-                if new_pos <= self.cap as u64 {\n-                    self.pos = new_pos as usize;\n-                    return Ok(());\n-                }\n+        } else if let Some(new_pos) = pos.checked_add(offset as u64) {\n+            if new_pos <= self.cap as u64 {\n+                self.pos = new_pos as usize;\n+                return Ok(());\n             }\n         }\n+\n         self.seek(SeekFrom::Current(offset)).map(drop)\n     }\n }"}, {"sha": "ad550a823ae90e2596c26614d19c2911bbd953ad", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ddd4e6d7ed446934abd428a08e18535faef5e03/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ddd4e6d7ed446934abd428a08e18535faef5e03/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=1ddd4e6d7ed446934abd428a08e18535faef5e03", "patch": "@@ -558,7 +558,7 @@ impl IntoInner<Handle> for File {\n \n impl FromInner<Handle> for File {\n     fn from_inner(handle: Handle) -> File {\n-        File { handle: handle }\n+        File { handle }\n     }\n }\n \n@@ -672,7 +672,7 @@ impl FilePermissions {\n \n impl FileType {\n     fn new(attrs: c::DWORD, reparse_tag: c::DWORD) -> FileType {\n-        FileType { attributes: attrs, reparse_tag: reparse_tag }\n+        FileType { attributes: attrs, reparse_tag }\n     }\n     pub fn is_dir(&self) -> bool {\n         !self.is_symlink() && self.is_directory()"}, {"sha": "18a2a36ad2548e25c0bab340235d2fd41ac81646", "filename": "library/std/src/sys/windows/stack_overflow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ddd4e6d7ed446934abd428a08e18535faef5e03/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ddd4e6d7ed446934abd428a08e18535faef5e03/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstack_overflow.rs?ref=1ddd4e6d7ed446934abd428a08e18535faef5e03", "patch": "@@ -9,10 +9,10 @@ impl Handler {\n     pub unsafe fn new() -> Handler {\n         // This API isn't available on XP, so don't panic in that case and just\n         // pray it works out ok.\n-        if c::SetThreadStackGuarantee(&mut 0x5000) == 0 {\n-            if c::GetLastError() as u32 != c::ERROR_CALL_NOT_IMPLEMENTED as u32 {\n-                panic!(\"failed to reserve stack space for exception handling\");\n-            }\n+        if c::SetThreadStackGuarantee(&mut 0x5000) == 0\n+            && c::GetLastError() as u32 != c::ERROR_CALL_NOT_IMPLEMENTED as u32\n+        {\n+            panic!(\"failed to reserve stack space for exception handling\");\n         }\n         Handler\n     }"}, {"sha": "d5e8f12414ff2d688007a157925030225d107518", "filename": "library/std/src/sys_common/backtrace.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ddd4e6d7ed446934abd428a08e18535faef5e03/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ddd4e6d7ed446934abd428a08e18535faef5e03/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs?ref=1ddd4e6d7ed446934abd428a08e18535faef5e03", "patch": "@@ -93,10 +93,8 @@ unsafe fn _print_fmt(fmt: &mut fmt::Formatter<'_>, print_fmt: PrintFmt) -> fmt::\n         if stop {\n             return false;\n         }\n-        if !hit {\n-            if start {\n-                res = bt_fmt.frame().print_raw(frame.ip(), None, None, None);\n-            }\n+        if !hit && start {\n+            res = bt_fmt.frame().print_raw(frame.ip(), None, None, None);\n         }\n \n         idx += 1;"}, {"sha": "843dda324da7fb75842b6ca3457f17f1b69bdcdc", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ddd4e6d7ed446934abd428a08e18535faef5e03/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ddd4e6d7ed446934abd428a08e18535faef5e03/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=1ddd4e6d7ed446934abd428a08e18535faef5e03", "patch": "@@ -78,7 +78,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             );\n                             match infcx.evaluate_obligation(&obligation) {\n                                 Ok(eval_result) if eval_result.may_apply() => {}\n-                                Err(traits::OverflowError::Cannonical) => {}\n+                                Err(traits::OverflowError::Canonical) => {}\n                                 Err(traits::OverflowError::ErrorReporting) => {}\n                                 _ => {\n                                     return false;"}, {"sha": "cea3452780e6f69a942efd13298ba7603c823895", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ddd4e6d7ed446934abd428a08e18535faef5e03/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/1ddd4e6d7ed446934abd428a08e18535faef5e03/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=1ddd4e6d7ed446934abd428a08e18535faef5e03", "patch": "@@ -773,8 +773,6 @@ h2.small-section-header > .anchor {\n \n .item-table {\n \tdisplay: table-row;\n-\t/* align content left */\n-\tjustify-items: start;\n }\n .item-row {\n \tdisplay: table-row;\n@@ -1969,4 +1967,8 @@ details.undocumented[open] > summary::before {\n \t.docblock {\n \t\tmargin-left: 12px;\n \t}\n+\n+\t.docblock code {\n+\t\toverflow-wrap: anywhere;\n+\t}\n }"}, {"sha": "12677a5648a2d374db1aefa6736fc319bc022bad", "filename": "src/test/rustdoc-gui/docblock-big-code-mobile.goml", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1ddd4e6d7ed446934abd428a08e18535faef5e03/src%2Ftest%2Frustdoc-gui%2Fdocblock-big-code-mobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/1ddd4e6d7ed446934abd428a08e18535faef5e03/src%2Ftest%2Frustdoc-gui%2Fdocblock-big-code-mobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdocblock-big-code-mobile.goml?ref=1ddd4e6d7ed446934abd428a08e18535faef5e03", "patch": "@@ -0,0 +1,9 @@\n+// If we have a long `<code>`, we need to ensure that it'll be fully displayed on mobile, meaning\n+// that it'll be on two lines.\n+emulate: \"iPhone 8\" // it has the following size: (375, 667)\n+goto: file://|DOC_PATH|/test_docs/long_code_block/index.html\n+// We now check that the block is on two lines:\n+show-text: true // We need to enable text draw to be able to have the \"real\" size\n+// Little explanations for this test: if the text wasn't displayed on two lines, it would take\n+// around 20px (which is the font size).\n+assert-property: (\".docblock p > code\", {\"offsetHeight\": \"42\"})"}, {"sha": "2a147e64d8bf2706f4f137774b07bd79993661aa", "filename": "src/test/rustdoc-gui/src/test_docs/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ddd4e6d7ed446934abd428a08e18535faef5e03/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ddd4e6d7ed446934abd428a08e18535faef5e03/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs?ref=1ddd4e6d7ed446934abd428a08e18535faef5e03", "patch": "@@ -120,3 +120,6 @@ pub type SomeType = u32;\n pub mod huge_amount_of_consts {\n     include!(concat!(env!(\"OUT_DIR\"), \"/huge_amount_of_consts.rs\"));\n }\n+\n+/// Very long code text `hereIgoWithLongTextBecauseWhyNotAndWhyWouldntI`.\n+pub mod long_code_block {}"}, {"sha": "0576c2e6be164f230ac09d3a269a43161ebc47a1", "filename": "src/test/ui/wasm/simd-to-array-80108.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1ddd4e6d7ed446934abd428a08e18535faef5e03/src%2Ftest%2Fui%2Fwasm%2Fsimd-to-array-80108.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ddd4e6d7ed446934abd428a08e18535faef5e03/src%2Ftest%2Fui%2Fwasm%2Fsimd-to-array-80108.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwasm%2Fsimd-to-array-80108.rs?ref=1ddd4e6d7ed446934abd428a08e18535faef5e03", "patch": "@@ -0,0 +1,15 @@\n+// only-wasm32\n+// compile-flags: --crate-type=lib -Copt-level=2\n+// build-pass\n+#![feature(repr_simd)]\n+\n+// Regression test for #80108\n+\n+#[repr(simd)]\n+pub struct Vector([i32; 4]);\n+\n+impl Vector {\n+    pub const fn to_array(self) -> [i32; 4] {\n+        self.0\n+    }\n+}"}, {"sha": "4470272a9f86672adcf1fbf168723040f89bd8e8", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 36, "deletions": 125, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/1ddd4e6d7ed446934abd428a08e18535faef5e03/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ddd4e6d7ed446934abd428a08e18535faef5e03/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=1ddd4e6d7ed446934abd428a08e18535faef5e03", "patch": "@@ -38,6 +38,9 @@ use tracing::*;\n use crate::extract_gdb_version;\n use crate::is_android_gdb_target;\n \n+mod debugger;\n+use debugger::{check_debugger_output, DebuggerCommands};\n+\n #[cfg(test)]\n mod tests;\n \n@@ -200,12 +203,6 @@ struct TestCx<'test> {\n     revision: Option<&'test str>,\n }\n \n-struct DebuggerCommands {\n-    commands: Vec<String>,\n-    check_lines: Vec<String>,\n-    breakpoint_lines: Vec<usize>,\n-}\n-\n enum ReadFrom {\n     Path,\n     Stdin(String),\n@@ -235,10 +232,8 @@ impl<'test> TestCx<'test> {\n     /// Code executed for each revision in turn (or, if there are no\n     /// revisions, exactly once, with revision == None).\n     fn run_revision(&self) {\n-        if self.props.should_ice {\n-            if self.config.mode != Incremental {\n-                self.fatal(\"cannot use should-ice in a test that is not cfail\");\n-            }\n+        if self.props.should_ice && self.config.mode != Incremental {\n+            self.fatal(\"cannot use should-ice in a test that is not cfail\");\n         }\n         match self.config.mode {\n             RunPassValgrind => self.run_valgrind_test(),\n@@ -674,7 +669,10 @@ impl<'test> TestCx<'test> {\n \n         // Parse debugger commands etc from test files\n         let DebuggerCommands { commands, check_lines, breakpoint_lines, .. } =\n-            self.parse_debugger_commands(prefixes);\n+            match DebuggerCommands::parse_from(&self.testpaths.file, self.config, prefixes) {\n+                Ok(cmds) => cmds,\n+                Err(e) => self.fatal(&e),\n+            };\n \n         // https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-commands\n         let mut script_str = String::with_capacity(2048);\n@@ -726,7 +724,9 @@ impl<'test> TestCx<'test> {\n             self.fatal_proc_rec(\"Error while running CDB\", &debugger_run_result);\n         }\n \n-        self.check_debugger_output(&debugger_run_result, &check_lines);\n+        if let Err(e) = check_debugger_output(&debugger_run_result, &check_lines) {\n+            self.fatal_proc_rec(&e, &debugger_run_result);\n+        }\n     }\n \n     fn run_debuginfo_gdb_test(&self) {\n@@ -757,7 +757,10 @@ impl<'test> TestCx<'test> {\n         };\n \n         let DebuggerCommands { commands, check_lines, breakpoint_lines } =\n-            self.parse_debugger_commands(prefixes);\n+            match DebuggerCommands::parse_from(&self.testpaths.file, self.config, prefixes) {\n+                Ok(cmds) => cmds,\n+                Err(e) => self.fatal(&e),\n+            };\n         let mut cmds = commands.join(\"\\n\");\n \n         // compile test file (it should have 'compile-flags:-g' in the header)\n@@ -960,7 +963,9 @@ impl<'test> TestCx<'test> {\n             self.fatal_proc_rec(\"gdb failed to execute\", &debugger_run_result);\n         }\n \n-        self.check_debugger_output(&debugger_run_result, &check_lines);\n+        if let Err(e) = check_debugger_output(&debugger_run_result, &check_lines) {\n+            self.fatal_proc_rec(&e, &debugger_run_result);\n+        }\n     }\n \n     fn run_debuginfo_lldb_test(&self) {\n@@ -1018,7 +1023,10 @@ impl<'test> TestCx<'test> {\n \n         // Parse debugger commands etc from test files\n         let DebuggerCommands { commands, check_lines, breakpoint_lines, .. } =\n-            self.parse_debugger_commands(prefixes);\n+            match DebuggerCommands::parse_from(&self.testpaths.file, self.config, prefixes) {\n+                Ok(cmds) => cmds,\n+                Err(e) => self.fatal(&e),\n+            };\n \n         // Write debugger script:\n         // We don't want to hang when calling `quit` while the process is still running\n@@ -1094,7 +1102,9 @@ impl<'test> TestCx<'test> {\n             self.fatal_proc_rec(\"Error while running LLDB\", &debugger_run_result);\n         }\n \n-        self.check_debugger_output(&debugger_run_result, &check_lines);\n+        if let Err(e) = check_debugger_output(&debugger_run_result, &check_lines) {\n+            self.fatal_proc_rec(&e, &debugger_run_result);\n+        }\n     }\n \n     fn run_lldb(\n@@ -1131,45 +1141,6 @@ impl<'test> TestCx<'test> {\n         ProcRes { status, stdout: out, stderr: err, cmdline: format!(\"{:?}\", cmd) }\n     }\n \n-    fn parse_debugger_commands(&self, debugger_prefixes: &[&str]) -> DebuggerCommands {\n-        let directives = debugger_prefixes\n-            .iter()\n-            .map(|prefix| (format!(\"{}-command\", prefix), format!(\"{}-check\", prefix)))\n-            .collect::<Vec<_>>();\n-\n-        let mut breakpoint_lines = vec![];\n-        let mut commands = vec![];\n-        let mut check_lines = vec![];\n-        let mut counter = 1;\n-        let reader = BufReader::new(File::open(&self.testpaths.file).unwrap());\n-        for line in reader.lines() {\n-            match line {\n-                Ok(line) => {\n-                    let line =\n-                        if line.starts_with(\"//\") { line[2..].trim_start() } else { line.as_str() };\n-\n-                    if line.contains(\"#break\") {\n-                        breakpoint_lines.push(counter);\n-                    }\n-\n-                    for &(ref command_directive, ref check_directive) in &directives {\n-                        self.config\n-                            .parse_name_value_directive(&line, command_directive)\n-                            .map(|cmd| commands.push(cmd));\n-\n-                        self.config\n-                            .parse_name_value_directive(&line, check_directive)\n-                            .map(|cmd| check_lines.push(cmd));\n-                    }\n-                }\n-                Err(e) => self.fatal(&format!(\"Error while parsing debugger commands: {}\", e)),\n-            }\n-            counter += 1;\n-        }\n-\n-        DebuggerCommands { commands, check_lines, breakpoint_lines }\n-    }\n-\n     fn cleanup_debug_info_options(&self, options: &Option<String>) -> Option<String> {\n         if options.is_none() {\n             return None;\n@@ -1216,66 +1187,6 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n-    fn check_debugger_output(&self, debugger_run_result: &ProcRes, check_lines: &[String]) {\n-        let num_check_lines = check_lines.len();\n-\n-        let mut check_line_index = 0;\n-        for line in debugger_run_result.stdout.lines() {\n-            if check_line_index >= num_check_lines {\n-                break;\n-            }\n-\n-            if check_single_line(line, &(check_lines[check_line_index])[..]) {\n-                check_line_index += 1;\n-            }\n-        }\n-        if check_line_index != num_check_lines && num_check_lines > 0 {\n-            self.fatal_proc_rec(\n-                &format!(\"line not found in debugger output: {}\", check_lines[check_line_index]),\n-                debugger_run_result,\n-            );\n-        }\n-\n-        fn check_single_line(line: &str, check_line: &str) -> bool {\n-            // Allow check lines to leave parts unspecified (e.g., uninitialized\n-            // bits in the  wrong case of an enum) with the notation \"[...]\".\n-            let line = line.trim();\n-            let check_line = check_line.trim();\n-            let can_start_anywhere = check_line.starts_with(\"[...]\");\n-            let can_end_anywhere = check_line.ends_with(\"[...]\");\n-\n-            let check_fragments: Vec<&str> =\n-                check_line.split(\"[...]\").filter(|frag| !frag.is_empty()).collect();\n-            if check_fragments.is_empty() {\n-                return true;\n-            }\n-\n-            let (mut rest, first_fragment) = if can_start_anywhere {\n-                match line.find(check_fragments[0]) {\n-                    Some(pos) => (&line[pos + check_fragments[0].len()..], 1),\n-                    None => return false,\n-                }\n-            } else {\n-                (line, 0)\n-            };\n-\n-            for current_fragment in &check_fragments[first_fragment..] {\n-                match rest.find(current_fragment) {\n-                    Some(pos) => {\n-                        rest = &rest[pos + current_fragment.len()..];\n-                    }\n-                    None => return false,\n-                }\n-            }\n-\n-            if !can_end_anywhere && !rest.is_empty() {\n-                return false;\n-            }\n-\n-            true\n-        }\n-    }\n-\n     fn check_error_patterns(\n         &self,\n         output_to_check: &str,\n@@ -2154,9 +2065,9 @@ impl<'test> TestCx<'test> {\n \n     fn maybe_dump_to_stdout(&self, out: &str, err: &str) {\n         if self.config.verbose {\n-            println!(\"------{}------------------------------\", \"stdout\");\n+            println!(\"------stdout------------------------------\");\n             println!(\"{}\", out);\n-            println!(\"------{}------------------------------\", \"stderr\");\n+            println!(\"------stderr------------------------------\");\n             println!(\"{}\", err);\n             println!(\"------------------------------------------\");\n         }\n@@ -3249,11 +3160,10 @@ impl<'test> TestCx<'test> {\n                 if !proc_res.status.success() {\n                     self.fatal_proc_rec(\"test run failed!\", &proc_res);\n                 }\n-            } else {\n-                if proc_res.status.success() {\n-                    self.fatal_proc_rec(\"test run succeeded!\", &proc_res);\n-                }\n+            } else if proc_res.status.success() {\n+                self.fatal_proc_rec(\"test run succeeded!\", &proc_res);\n             }\n+\n             if !self.props.error_patterns.is_empty() {\n                 // \"// error-pattern\" comments\n                 self.check_error_patterns(&proc_res.stderr, &proc_res, pm);\n@@ -3300,10 +3210,11 @@ impl<'test> TestCx<'test> {\n             if !res.status.success() {\n                 self.fatal_proc_rec(\"failed to compile fixed code\", &res);\n             }\n-            if !res.stderr.is_empty() && !self.props.rustfix_only_machine_applicable {\n-                if !json::rustfix_diagnostics_only(&res.stderr).is_empty() {\n-                    self.fatal_proc_rec(\"fixed code is still producing diagnostics\", &res);\n-                }\n+            if !res.stderr.is_empty()\n+                && !self.props.rustfix_only_machine_applicable\n+                && !json::rustfix_diagnostics_only(&res.stderr).is_empty()\n+            {\n+                self.fatal_proc_rec(\"fixed code is still producing diagnostics\", &res);\n             }\n         }\n     }"}, {"sha": "cbd5e4c431f56365bb23a3a66881ccbfd3101b4a", "filename": "src/tools/compiletest/src/runtest/debugger.rs", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/1ddd4e6d7ed446934abd428a08e18535faef5e03/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest%2Fdebugger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ddd4e6d7ed446934abd428a08e18535faef5e03/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest%2Fdebugger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest%2Fdebugger.rs?ref=1ddd4e6d7ed446934abd428a08e18535faef5e03", "patch": "@@ -0,0 +1,115 @@\n+use crate::common::Config;\n+use crate::runtest::ProcRes;\n+\n+use std::fs::File;\n+use std::io::{BufRead, BufReader};\n+use std::path::Path;\n+\n+pub(super) struct DebuggerCommands {\n+    pub commands: Vec<String>,\n+    pub check_lines: Vec<String>,\n+    pub breakpoint_lines: Vec<usize>,\n+}\n+\n+impl DebuggerCommands {\n+    pub(super) fn parse_from(\n+        file: &Path,\n+        config: &Config,\n+        debugger_prefixes: &[&str],\n+    ) -> Result<Self, String> {\n+        let directives = debugger_prefixes\n+            .iter()\n+            .map(|prefix| (format!(\"{}-command\", prefix), format!(\"{}-check\", prefix)))\n+            .collect::<Vec<_>>();\n+\n+        let mut breakpoint_lines = vec![];\n+        let mut commands = vec![];\n+        let mut check_lines = vec![];\n+        let mut counter = 1;\n+        let reader = BufReader::new(File::open(file).unwrap());\n+        for line in reader.lines() {\n+            match line {\n+                Ok(line) => {\n+                    let line =\n+                        if line.starts_with(\"//\") { line[2..].trim_start() } else { line.as_str() };\n+\n+                    if line.contains(\"#break\") {\n+                        breakpoint_lines.push(counter);\n+                    }\n+\n+                    for &(ref command_directive, ref check_directive) in &directives {\n+                        config\n+                            .parse_name_value_directive(&line, command_directive)\n+                            .map(|cmd| commands.push(cmd));\n+\n+                        config\n+                            .parse_name_value_directive(&line, check_directive)\n+                            .map(|cmd| check_lines.push(cmd));\n+                    }\n+                }\n+                Err(e) => return Err(format!(\"Error while parsing debugger commands: {}\", e)),\n+            }\n+            counter += 1;\n+        }\n+\n+        Ok(Self { commands, check_lines, breakpoint_lines })\n+    }\n+}\n+\n+pub(super) fn check_debugger_output(\n+    debugger_run_result: &ProcRes,\n+    check_lines: &[String],\n+) -> Result<(), String> {\n+    let num_check_lines = check_lines.len();\n+\n+    let mut check_line_index = 0;\n+    for line in debugger_run_result.stdout.lines() {\n+        if check_line_index >= num_check_lines {\n+            break;\n+        }\n+\n+        if check_single_line(line, &(check_lines[check_line_index])[..]) {\n+            check_line_index += 1;\n+        }\n+    }\n+    if check_line_index != num_check_lines && num_check_lines > 0 {\n+        Err(format!(\"line not found in debugger output: {}\", check_lines[check_line_index]))\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n+fn check_single_line(line: &str, check_line: &str) -> bool {\n+    // Allow check lines to leave parts unspecified (e.g., uninitialized\n+    // bits in the  wrong case of an enum) with the notation \"[...]\".\n+    let line = line.trim();\n+    let check_line = check_line.trim();\n+    let can_start_anywhere = check_line.starts_with(\"[...]\");\n+    let can_end_anywhere = check_line.ends_with(\"[...]\");\n+\n+    let check_fragments: Vec<&str> =\n+        check_line.split(\"[...]\").filter(|frag| !frag.is_empty()).collect();\n+    if check_fragments.is_empty() {\n+        return true;\n+    }\n+\n+    let (mut rest, first_fragment) = if can_start_anywhere {\n+        match line.find(check_fragments[0]) {\n+            Some(pos) => (&line[pos + check_fragments[0].len()..], 1),\n+            None => return false,\n+        }\n+    } else {\n+        (line, 0)\n+    };\n+\n+    for current_fragment in &check_fragments[first_fragment..] {\n+        match rest.find(current_fragment) {\n+            Some(pos) => {\n+                rest = &rest[pos + current_fragment.len()..];\n+            }\n+            None => return false,\n+        }\n+    }\n+\n+    if !can_end_anywhere && !rest.is_empty() { false } else { true }\n+}"}]}