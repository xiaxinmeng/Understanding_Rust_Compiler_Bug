{"sha": "8ce5a53934f6fbbf9b00151eee70ac01d6d3cfee", "node_id": "C_kwDOAAsO6NoAKDhjZTVhNTM5MzRmNmZiYmY5YjAwMTUxZWVlNzBhYzAxZDZkM2NmZWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-09T16:02:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-09T16:02:43Z"}, "message": "Auto merge of #14302 - Veykril:db-memory-usage, r=Veykril\n\ninternal: Add missing queries to per_query_memory_usage", "tree": {"sha": "586f032629a20c8810e9bfdcd43f1163936f8997", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/586f032629a20c8810e9bfdcd43f1163936f8997"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ce5a53934f6fbbf9b00151eee70ac01d6d3cfee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ce5a53934f6fbbf9b00151eee70ac01d6d3cfee", "html_url": "https://github.com/rust-lang/rust/commit/8ce5a53934f6fbbf9b00151eee70ac01d6d3cfee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ce5a53934f6fbbf9b00151eee70ac01d6d3cfee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10a652a1e42a9f75a921d8a8ecaf1b4557101c3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/10a652a1e42a9f75a921d8a8ecaf1b4557101c3e", "html_url": "https://github.com/rust-lang/rust/commit/10a652a1e42a9f75a921d8a8ecaf1b4557101c3e"}, {"sha": "c49f75340377a420470ab1470bd77fd20556a5cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c49f75340377a420470ab1470bd77fd20556a5cb", "html_url": "https://github.com/rust-lang/rust/commit/c49f75340377a420470ab1470bd77fd20556a5cb"}], "stats": {"total": 127, "additions": 59, "deletions": 68}, "files": [{"sha": "3be477d48774adb80d5c4cf4ae74510b4a38693e", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8ce5a53934f6fbbf9b00151eee70ac01d6d3cfee/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce5a53934f6fbbf9b00151eee70ac01d6d3cfee/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=8ce5a53934f6fbbf9b00151eee70ac01d6d3cfee", "patch": "@@ -271,7 +271,6 @@ pub struct Body {\n     pub exprs: Arena<Expr>,\n     pub pats: Arena<Pat>,\n     pub bindings: Arena<Binding>,\n-    pub or_pats: FxHashMap<PatId, Arc<[PatId]>>,\n     pub labels: Arena<Label>,\n     /// The patterns for the function's parameters. While the parameter types are\n     /// part of the function signature, the patterns are not (they don't change\n@@ -410,18 +409,6 @@ impl Body {\n             .map(move |&block| (block, db.block_def_map(block).expect(\"block ID without DefMap\")))\n     }\n \n-    pub fn pattern_representative(&self, pat: PatId) -> PatId {\n-        self.or_pats.get(&pat).and_then(|pats| pats.first().copied()).unwrap_or(pat)\n-    }\n-\n-    /// Retrieves all ident patterns this pattern shares the ident with.\n-    pub fn ident_patterns_for<'slf>(&'slf self, pat: &'slf PatId) -> &'slf [PatId] {\n-        match self.or_pats.get(pat) {\n-            Some(pats) => pats,\n-            None => std::slice::from_ref(pat),\n-        }\n-    }\n-\n     pub fn pretty_print(&self, db: &dyn DefDatabase, owner: DefWithBodyId) -> String {\n         pretty::print_body_hir(db, self, owner)\n     }\n@@ -436,19 +423,9 @@ impl Body {\n     }\n \n     fn shrink_to_fit(&mut self) {\n-        let Self {\n-            _c: _,\n-            body_expr: _,\n-            block_scopes,\n-            or_pats,\n-            exprs,\n-            labels,\n-            params,\n-            pats,\n-            bindings,\n-        } = self;\n+        let Self { _c: _, body_expr: _, block_scopes, exprs, labels, params, pats, bindings } =\n+            self;\n         block_scopes.shrink_to_fit();\n-        or_pats.shrink_to_fit();\n         exprs.shrink_to_fit();\n         labels.shrink_to_fit();\n         params.shrink_to_fit();\n@@ -464,7 +441,6 @@ impl Default for Body {\n             exprs: Default::default(),\n             pats: Default::default(),\n             bindings: Default::default(),\n-            or_pats: Default::default(),\n             labels: Default::default(),\n             params: Default::default(),\n             block_scopes: Default::default(),"}, {"sha": "83ce9b6acbba88643829ee3b9870235ab9b06fbb", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8ce5a53934f6fbbf9b00151eee70ac01d6d3cfee/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce5a53934f6fbbf9b00151eee70ac01d6d3cfee/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=8ce5a53934f6fbbf9b00151eee70ac01d6d3cfee", "patch": "@@ -94,11 +94,8 @@ pub(super) fn lower(\n             body_expr: dummy_expr_id(),\n             block_scopes: Vec::new(),\n             _c: Count::new(),\n-            or_pats: Default::default(),\n         },\n         expander,\n-        name_to_pat_grouping: Default::default(),\n-        is_lowering_inside_or_pat: false,\n         is_lowering_assignee_expr: false,\n         is_lowering_generator: false,\n     }\n@@ -111,9 +108,6 @@ struct ExprCollector<'a> {\n     ast_id_map: Arc<AstIdMap>,\n     body: Body,\n     source_map: BodySourceMap,\n-    // a poor-mans union-find?\n-    name_to_pat_grouping: FxHashMap<Name, Vec<PatId>>,\n-    is_lowering_inside_or_pat: bool,\n     is_lowering_assignee_expr: bool,\n     is_lowering_generator: bool,\n }\n@@ -824,13 +818,7 @@ impl ExprCollector<'_> {\n     }\n \n     fn collect_pat(&mut self, pat: ast::Pat) -> PatId {\n-        let pat_id = self.collect_pat_(pat, &mut BindingList::default());\n-        for (_, pats) in self.name_to_pat_grouping.drain() {\n-            let pats = Arc::<[_]>::from(pats);\n-            self.body.or_pats.extend(pats.iter().map(|&pat| (pat, pats.clone())));\n-        }\n-        self.is_lowering_inside_or_pat = false;\n-        pat_id\n+        self.collect_pat_(pat, &mut BindingList::default())\n     }\n \n     fn collect_pat_opt(&mut self, pat: Option<ast::Pat>) -> PatId {\n@@ -845,13 +833,13 @@ impl ExprCollector<'_> {\n             ast::Pat::IdentPat(bp) => {\n                 let name = bp.name().map(|nr| nr.as_name()).unwrap_or_else(Name::missing);\n \n-                let key = self.is_lowering_inside_or_pat.then(|| name.clone());\n                 let annotation =\n                     BindingAnnotation::new(bp.mut_token().is_some(), bp.ref_token().is_some());\n                 let subpat = bp.pat().map(|subpat| self.collect_pat_(subpat, binding_list));\n-                let (binding, pattern) = if annotation == BindingAnnotation::Unannotated\n-                    && subpat.is_none()\n-                {\n+\n+                let is_simple_ident_pat =\n+                    annotation == BindingAnnotation::Unannotated && subpat.is_none();\n+                let (binding, pattern) = if is_simple_ident_pat {\n                     // This could also be a single-segment path pattern. To\n                     // decide that, we need to try resolving the name.\n                     let (resolved, _) = self.expander.def_map.resolve_path(\n@@ -892,9 +880,6 @@ impl ExprCollector<'_> {\n                 if let Some(binding_id) = binding {\n                     self.add_definition_to_binding(binding_id, pat);\n                 }\n-                if let Some(key) = key {\n-                    self.name_to_pat_grouping.entry(key).or_default().push(pat);\n-                }\n                 return pat;\n             }\n             ast::Pat::TupleStructPat(p) => {\n@@ -914,7 +899,6 @@ impl ExprCollector<'_> {\n                 path.map(Pat::Path).unwrap_or(Pat::Missing)\n             }\n             ast::Pat::OrPat(p) => {\n-                self.is_lowering_inside_or_pat = true;\n                 let pats = p.pats().map(|p| self.collect_pat_(p, binding_list)).collect();\n                 Pat::Or(pats)\n             }"}, {"sha": "cd465739139654bad7532e898d322c0dd5bb3ead", "filename": "crates/hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ce5a53934f6fbbf9b00151eee70ac01d6d3cfee/crates%2Fhir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce5a53934f6fbbf9b00151eee70ac01d6d3cfee/crates%2Fhir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdb.rs?ref=8ce5a53934f6fbbf9b00151eee70ac01d6d3cfee", "patch": "@@ -5,8 +5,9 @@\n //! But we need this for at least LRU caching at the query level.\n pub use hir_def::db::*;\n pub use hir_expand::db::{\n-    AstDatabase, AstDatabaseStorage, AstIdMapQuery, HygieneFrameQuery, InternMacroCallQuery,\n-    MacroArgTextQuery, MacroDefQuery, MacroExpandQuery, ParseMacroExpansionQuery,\n+    AstDatabase, AstDatabaseStorage, AstIdMapQuery, ExpandProcMacroQuery, HygieneFrameQuery,\n+    InternMacroCallQuery, MacroArgTextQuery, MacroDefQuery, MacroExpandErrorQuery,\n+    MacroExpandQuery, ParseMacroExpansionQuery,\n };\n pub use hir_ty::db::*;\n "}, {"sha": "74dce1cca2d253bc6a53e698efe1d8badc9f6aa4", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ce5a53934f6fbbf9b00151eee70ac01d6d3cfee/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce5a53934f6fbbf9b00151eee70ac01d6d3cfee/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=8ce5a53934f6fbbf9b00151eee70ac01d6d3cfee", "patch": "@@ -2501,10 +2501,6 @@ impl GenericDef {\n }\n \n /// A single local definition.\n-///\n-/// If the definition of this is part of a \"MultiLocal\", that is a local that has multiple declarations due to or-patterns\n-/// then this only references a single one of those.\n-/// To retrieve the other locals you should use [`Local::associated_locals`]\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct Local {\n     pub(crate) parent: DefWithBodyId,"}, {"sha": "244e99fe2e27d2359b1431f44778f14cf5e39ed1", "filename": "crates/ide-db/src/apply_change.rs", "status": "modified", "additions": 49, "deletions": 15, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/8ce5a53934f6fbbf9b00151eee70ac01d6d3cfee/crates%2Fide-db%2Fsrc%2Fapply_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce5a53934f6fbbf9b00151eee70ac01d6d3cfee/crates%2Fide-db%2Fsrc%2Fapply_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fapply_change.rs?ref=8ce5a53934f6fbbf9b00151eee70ac01d6d3cfee", "patch": "@@ -73,68 +73,96 @@ impl RootDatabase {\n \n             // AstDatabase\n             hir::db::AstIdMapQuery\n+            hir::db::ParseMacroExpansionQuery\n+            hir::db::InternMacroCallQuery\n             hir::db::MacroArgTextQuery\n             hir::db::MacroDefQuery\n-            hir::db::ParseMacroExpansionQuery\n             hir::db::MacroExpandQuery\n+            hir::db::ExpandProcMacroQuery\n+            hir::db::MacroExpandErrorQuery\n             hir::db::HygieneFrameQuery\n-            hir::db::InternMacroCallQuery\n \n             // DefDatabase\n             hir::db::FileItemTreeQuery\n-            hir::db::BlockDefMapQuery\n             hir::db::CrateDefMapQueryQuery\n-            hir::db::FieldsAttrsQuery\n-            hir::db::VariantsAttrsQuery\n-            hir::db::FieldsAttrsSourceMapQuery\n-            hir::db::VariantsAttrsSourceMapQuery\n+            hir::db::BlockDefMapQuery\n             hir::db::StructDataQuery\n+            hir::db::StructDataWithDiagnosticsQuery\n             hir::db::UnionDataQuery\n+            hir::db::UnionDataWithDiagnosticsQuery\n             hir::db::EnumDataQuery\n+            hir::db::EnumDataWithDiagnosticsQuery\n             hir::db::ImplDataQuery\n+            hir::db::ImplDataWithDiagnosticsQuery\n             hir::db::TraitDataQuery\n+            hir::db::TraitDataWithDiagnosticsQuery\n+            hir::db::TraitAliasDataQuery\n             hir::db::TypeAliasDataQuery\n             hir::db::FunctionDataQuery\n             hir::db::ConstDataQuery\n             hir::db::StaticDataQuery\n+            hir::db::Macro2DataQuery\n+            hir::db::MacroRulesDataQuery\n+            hir::db::ProcMacroDataQuery\n             hir::db::BodyWithSourceMapQuery\n             hir::db::BodyQuery\n             hir::db::ExprScopesQuery\n             hir::db::GenericParamsQuery\n+            hir::db::VariantsAttrsQuery\n+            hir::db::FieldsAttrsQuery\n+            hir::db::VariantsAttrsSourceMapQuery\n+            hir::db::FieldsAttrsSourceMapQuery\n             hir::db::AttrsQuery\n             hir::db::CrateLangItemsQuery\n             hir::db::LangItemQuery\n             hir::db::ImportMapQuery\n+            hir::db::FieldVisibilitiesQuery\n+            hir::db::FunctionVisibilityQuery\n+            hir::db::ConstVisibilityQuery\n+            hir::db::CrateSupportsNoStdQuery\n \n             // HirDatabase\n             hir::db::InferQueryQuery\n+            hir::db::MirBodyQuery\n+            hir::db::BorrowckQuery\n             hir::db::TyQuery\n             hir::db::ValueTyQuery\n             hir::db::ImplSelfTyQuery\n+            hir::db::ConstParamTyQuery\n+            hir::db::ConstEvalQuery\n+            hir::db::ConstEvalDiscriminantQuery\n             hir::db::ImplTraitQuery\n             hir::db::FieldTypesQuery\n+            hir::db::LayoutOfAdtQuery\n+            hir::db::TargetDataLayoutQuery\n             hir::db::CallableItemSignatureQuery\n+            hir::db::ReturnTypeImplTraitsQuery\n             hir::db::GenericPredicatesForParamQuery\n             hir::db::GenericPredicatesQuery\n+            hir::db::TraitEnvironmentQuery\n             hir::db::GenericDefaultsQuery\n             hir::db::InherentImplsInCrateQuery\n-            hir::db::TraitEnvironmentQuery\n+            hir::db::InherentImplsInBlockQuery\n+            hir::db::IncoherentInherentImplCratesQuery\n             hir::db::TraitImplsInCrateQuery\n+            hir::db::TraitImplsInBlockQuery\n             hir::db::TraitImplsInDepsQuery\n-            hir::db::AssociatedTyDataQuery\n+            hir::db::InternCallableDefQuery\n+            hir::db::InternLifetimeParamIdQuery\n+            hir::db::InternImplTraitIdQuery\n+            hir::db::InternTypeOrConstParamIdQuery\n+            hir::db::InternClosureQuery\n+            hir::db::InternGeneratorQuery\n             hir::db::AssociatedTyDataQuery\n             hir::db::TraitDatumQuery\n             hir::db::StructDatumQuery\n             hir::db::ImplDatumQuery\n             hir::db::FnDefDatumQuery\n-            hir::db::ReturnTypeImplTraitsQuery\n-            hir::db::InternCallableDefQuery\n-            hir::db::InternTypeOrConstParamIdQuery\n-            hir::db::InternImplTraitIdQuery\n-            hir::db::InternClosureQuery\n+            hir::db::FnDefVarianceQuery\n+            hir::db::AdtVarianceQuery\n             hir::db::AssociatedTyValueQuery\n             hir::db::TraitSolveQueryQuery\n-            hir::db::InternTypeOrConstParamIdQuery\n+            hir::db::ProgramClausesForChalkEnvQuery\n \n             // SymbolsDatabase\n             crate::symbol_index::ModuleSymbolsQuery\n@@ -153,8 +181,14 @@ impl RootDatabase {\n             hir::db::InternConstQuery\n             hir::db::InternStaticQuery\n             hir::db::InternTraitQuery\n+            hir::db::InternTraitAliasQuery\n             hir::db::InternTypeAliasQuery\n             hir::db::InternImplQuery\n+            hir::db::InternExternBlockQuery\n+            hir::db::InternBlockQuery\n+            hir::db::InternMacro2Query\n+            hir::db::InternProcMacroQuery\n+            hir::db::InternMacroRulesQuery\n         ];\n \n         acc.sort_by_key(|it| std::cmp::Reverse(it.1));"}]}