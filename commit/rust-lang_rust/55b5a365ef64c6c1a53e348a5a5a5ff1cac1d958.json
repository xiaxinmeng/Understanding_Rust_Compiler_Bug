{"sha": "55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YjVhMzY1ZWY2NGM2YzFhNTNlMzQ4YTVhNWE1ZmYxY2FjMWQ5NTg=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-02-23T19:46:08Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-17T16:19:29Z"}, "message": "trans: Remove unused return type argument from declare_cfn.", "tree": {"sha": "45dc3cf2985fb3085ef3c8ed17cc24459f44006e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45dc3cf2985fb3085ef3c8ed17cc24459f44006e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958", "html_url": "https://github.com/rust-lang/rust/commit/55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5af3c12cfc07887b66ed1d8cd9e59e1c77cc8790", "url": "https://api.github.com/repos/rust-lang/rust/commits/5af3c12cfc07887b66ed1d8cd9e59e1c77cc8790", "html_url": "https://github.com/rust-lang/rust/commit/5af3c12cfc07887b66ed1d8cd9e59e1c77cc8790"}], "stats": {"total": 87, "additions": 34, "deletions": 53}, "files": [{"sha": "3dd226d97c73773397fc61302e71df19c6993c42", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958", "patch": "@@ -2630,14 +2630,15 @@ pub fn create_entry_wrapper(ccx: &CrateContext, sp: Span, main_llfn: ValueRef) {\n                        use_start_lang_item: bool) {\n         let llfty = Type::func(&[ccx.int_type(), Type::i8p(ccx).ptr_to()], &ccx.int_type());\n \n-        let llfn = declare::define_cfn(ccx, \"main\", llfty, ccx.tcx().mk_nil()).unwrap_or_else(|| {\n+        if declare::get_defined_value(ccx, \"main\").is_some() {\n             // FIXME: We should be smart and show a better diagnostic here.\n             ccx.sess().struct_span_err(sp, \"entry symbol `main` defined multiple times\")\n                       .help(\"did you use #[no_mangle] on `fn main`? Use #[start] instead\")\n                       .emit();\n             ccx.sess().abort_if_errors();\n             panic!();\n-        });\n+        }\n+        let llfn = declare::declare_cfn(ccx, \"main\", llfty);\n \n         let llbb = unsafe {\n             llvm::LLVMAppendBasicBlockInContext(ccx.llcx(), llfn, \"top\\0\".as_ptr() as *const _)"}, {"sha": "64c02a91f9418617eb57c8108d8592961367603c", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958", "patch": "@@ -519,25 +519,20 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n             Some(def_id) if !base::wants_msvc_seh(ccx.sess()) => {\n                 Callee::def(ccx, def_id, tcx.mk_substs(Substs::empty())).reify(ccx).val\n             }\n-            _ => {\n-                let mut personality = self.ccx.eh_personality().borrow_mut();\n-                match *personality {\n-                    Some(llpersonality) => llpersonality,\n-                    None => {\n-                        let name = if !base::wants_msvc_seh(self.ccx.sess()) {\n-                            \"rust_eh_personality\"\n-                        } else if target.arch == \"x86\" {\n-                            \"_except_handler3\"\n-                        } else {\n-                            \"__C_specific_handler\"\n-                        };\n-                        let fty = Type::variadic_func(&[], &Type::i32(self.ccx));\n-                        let f = declare::declare_cfn(self.ccx, name, fty,\n-                                                     self.ccx.tcx().types.i32);\n-                        *personality = Some(f);\n-                        f\n-                    }\n-                }\n+            _ => if let Some(llpersonality) = ccx.eh_personality().get() {\n+                llpersonality\n+            } else {\n+                let name = if !base::wants_msvc_seh(ccx.sess()) {\n+                    \"rust_eh_personality\"\n+                } else if target.arch == \"x86\" {\n+                    \"_except_handler3\"\n+                } else {\n+                    \"__C_specific_handler\"\n+                };\n+                let fty = Type::variadic_func(&[], &Type::i32(ccx));\n+                let f = declare::declare_cfn(ccx, name, fty);\n+                ccx.eh_personality().set(Some(f));\n+                f\n             }\n         }\n     }"}, {"sha": "ab56e8054712307b7796ca04648fbdf911d4fb46", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958", "patch": "@@ -865,27 +865,23 @@ fn declare_intrinsic(ccx: &CrateContext, key: &str) -> Option<ValueRef> {\n     macro_rules! ifn {\n         ($name:expr, fn() -> $ret:expr) => (\n             if key == $name {\n-                let f = declare::declare_cfn(ccx, $name, Type::func(&[], &$ret),\n-                                             ccx.tcx().mk_nil());\n+                let f = declare::declare_cfn(ccx, $name, Type::func(&[], &$ret));\n                 llvm::SetUnnamedAddr(f, false);\n                 ccx.intrinsics().borrow_mut().insert($name, f.clone());\n                 return Some(f);\n             }\n         );\n         ($name:expr, fn(...) -> $ret:expr) => (\n             if key == $name {\n-                let f = declare::declare_cfn(ccx, $name,\n-                                             Type::variadic_func(&[], &$ret),\n-                                             ccx.tcx().mk_nil());\n+                let f = declare::declare_cfn(ccx, $name, Type::variadic_func(&[], &$ret));\n                 llvm::SetUnnamedAddr(f, false);\n                 ccx.intrinsics().borrow_mut().insert($name, f.clone());\n                 return Some(f);\n             }\n         );\n         ($name:expr, fn($($arg:expr),*) -> $ret:expr) => (\n             if key == $name {\n-                let f = declare::declare_cfn(ccx, $name, Type::func(&[$($arg),*], &$ret),\n-                                             ccx.tcx().mk_nil());\n+                let f = declare::declare_cfn(ccx, $name, Type::func(&[$($arg),*], &$ret));\n                 llvm::SetUnnamedAddr(f, false);\n                 ccx.intrinsics().borrow_mut().insert($name, f.clone());\n                 return Some(f);\n@@ -1032,8 +1028,7 @@ fn declare_intrinsic(ccx: &CrateContext, key: &str) -> Option<ValueRef> {\n                 ifn!($name, fn($($arg),*) -> void);\n             } else if key == $name {\n                 let f = declare::declare_cfn(ccx, stringify!($cname),\n-                                             Type::func(&[$($arg),*], &void),\n-                                             ccx.tcx().mk_nil());\n+                                             Type::func(&[$($arg),*], &void));\n                 llvm::SetLinkage(f, llvm::InternalLinkage);\n \n                 let bld = ccx.builder();\n@@ -1055,8 +1050,7 @@ fn declare_intrinsic(ccx: &CrateContext, key: &str) -> Option<ValueRef> {\n                 ifn!($name, fn($($arg),*) -> $ret);\n             } else if key == $name {\n                 let f = declare::declare_cfn(ccx, stringify!($cname),\n-                                             Type::func(&[$($arg),*], &$ret),\n-                                             ccx.tcx().mk_nil());\n+                                             Type::func(&[$($arg),*], &$ret));\n                 ccx.intrinsics().borrow_mut().insert($name, f.clone());\n                 return Some(f);\n             }"}, {"sha": "381138431e088acd5394d4e6058421eb9028d48a", "filename": "src/librustc_trans/trans/declare.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs?ref=55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958", "patch": "@@ -55,9 +55,8 @@ pub fn declare_global(ccx: &CrateContext, name: &str, ty: Type) -> llvm::ValueRe\n ///\n /// If there\u2019s a value with the same name already declared, the function will\n /// update the declaration and return existing ValueRef instead.\n-pub fn declare_fn(ccx: &CrateContext, name: &str, callconv: llvm::CallConv,\n-                  ty: Type, output: ty::FnOutput) -> ValueRef {\n-    debug!(\"declare_fn(name={:?})\", name);\n+fn declare_raw_fn(ccx: &CrateContext, name: &str, callconv: llvm::CallConv, ty: Type) -> ValueRef {\n+    debug!(\"declare_raw_fn(name={:?}, ty={:?})\", name, ty);\n     let namebuf = CString::new(name).unwrap_or_else(|_|{\n         ccx.sess().bug(&format!(\"name {:?} contains an interior null byte\", name))\n     });\n@@ -70,10 +69,6 @@ pub fn declare_fn(ccx: &CrateContext, name: &str, callconv: llvm::CallConv,\n     // be merged.\n     llvm::SetUnnamedAddr(llfn, true);\n \n-    if output == ty::FnDiverging {\n-        llvm::SetFunctionAttribute(llfn, llvm::Attribute::NoReturn);\n-    }\n-\n     if ccx.tcx().sess.opts.cg.no_redzone\n         .unwrap_or(ccx.tcx().sess.target.target.options.disable_redzone) {\n         llvm::SetFunctionAttribute(llfn, llvm::Attribute::NoRedZone)\n@@ -90,9 +85,8 @@ pub fn declare_fn(ccx: &CrateContext, name: &str, callconv: llvm::CallConv,\n ///\n /// If there\u2019s a value with the same name already declared, the function will\n /// update the declaration and return existing ValueRef instead.\n-pub fn declare_cfn(ccx: &CrateContext, name: &str, fn_type: Type,\n-                   output: ty::Ty) -> ValueRef {\n-    declare_fn(ccx, name, llvm::CCallConv, fn_type, ty::FnConverging(output))\n+pub fn declare_cfn(ccx: &CrateContext, name: &str, fn_type: Type) -> ValueRef {\n+    declare_raw_fn(ccx, name, llvm::CCallConv, fn_type)\n }\n \n \n@@ -237,7 +231,7 @@ pub fn define_internal_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n /// Get defined or externally defined (AvailableExternally linkage) value by\n /// name.\n-fn get_defined_value(ccx: &CrateContext, name: &str) -> Option<ValueRef> {\n+pub fn get_defined_value(ccx: &CrateContext, name: &str) -> Option<ValueRef> {\n     debug!(\"get_defined_value(name={:?})\", name);\n     let namebuf = CString::new(name).unwrap_or_else(|_|{\n         ccx.sess().bug(&format!(\"name {:?} contains an interior null byte\", name))"}, {"sha": "102732eb1dcca1752e3a81022e4dbfabec9e611a", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958", "patch": "@@ -1678,8 +1678,7 @@ fn trans_scalar_binop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             if use_fmod {\n                 let f64t = Type::f64(bcx.ccx());\n                 let fty = Type::func(&[f64t, f64t], &f64t);\n-                let llfn = declare::declare_cfn(bcx.ccx(), \"fmod\", fty,\n-                                                tcx.types.f64);\n+                let llfn = declare::declare_cfn(bcx.ccx(), \"fmod\", fty);\n                 if lhs_t == tcx.types.f32 {\n                     let lhs = FPExt(bcx, lhs, f64t);\n                     let rhs = FPExt(bcx, rhs, f64t);"}, {"sha": "2408d6769470ff5d06f2e5915570c3e61eb30b2d", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958", "patch": "@@ -14,7 +14,7 @@\n \n use std;\n \n-use back::link::*;\n+use back::link;\n use llvm;\n use llvm::{ValueRef, get_param};\n use middle::lang_items::ExchangeFreeFnLangItem;\n@@ -251,15 +251,14 @@ fn get_drop_glue_core<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     // To avoid infinite recursion, don't `make_drop_glue` until after we've\n     // added the entry to the `drop_glues` cache.\n     if let Some(old_sym) = ccx.available_drop_glues().borrow().get(&g) {\n-        let llfn = declare::declare_cfn(ccx, &old_sym, llfnty, ccx.tcx().mk_nil());\n+        let llfn = declare::declare_cfn(ccx, &old_sym, llfnty);\n         ccx.drop_glues().borrow_mut().insert(g, llfn);\n         return llfn;\n     };\n \n-    let fn_nm = mangle_internal_name_by_type_and_seq(ccx, t, \"drop\");\n-    let llfn = declare::define_cfn(ccx, &fn_nm, llfnty, ccx.tcx().mk_nil()).unwrap_or_else(||{\n-       ccx.sess().bug(&format!(\"symbol `{}` already defined\", fn_nm));\n-    });\n+    let fn_nm = link::mangle_internal_name_by_type_and_seq(ccx, t, \"drop\");\n+    assert!(declare::get_defined_value(ccx, &fn_nm).is_none());\n+    let llfn = declare::declare_cfn(ccx, &fn_nm, llfnty);\n     ccx.available_drop_glues().borrow_mut().insert(g, fn_nm);\n \n     let _s = StatRecorder::new(ccx, format!(\"drop {:?}\", t));"}, {"sha": "24e13d750a95a6137aef6642aae424c011c93868", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958", "patch": "@@ -949,8 +949,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                 intrinsics::IntrinsicDef::Named(name) => {\n                     let f = declare::declare_cfn(ccx,\n                                                  name,\n-                                                 Type::func(&inputs, &outputs),\n-                                                 tcx.mk_nil());\n+                                                 Type::func(&inputs, &outputs));\n                     Call(bcx, f, &llargs, None, call_debug_location)\n                 }\n             };"}]}