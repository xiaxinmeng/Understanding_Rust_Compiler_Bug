{"sha": "f6a76c443e7dbae08e43d4f7746474f61ba49ae0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2YTc2YzQ0M2U3ZGJhZTA4ZTQzZDRmNzc0NjQ3NGY2MWJhNDlhZTA=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-08-06T07:34:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-06T07:34:08Z"}, "message": "Merge pull request #2890 from topecongiro/use-builder-pattern-for-ListFormatting\n\nUse builder pattern for ListFormatting", "tree": {"sha": "5bb79b04862a6d0a6917cb8c7ec1ba03bdebdd0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bb79b04862a6d0a6917cb8c7ec1ba03bdebdd0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6a76c443e7dbae08e43d4f7746474f61ba49ae0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbZ/nwCRBK7hj4Ov3rIwAAdHIIAIXJ1zzZfyyq4ZE/XNpbNzAM\nyGD+gQfOTXYDddZHby2vZ08lA9p1oEREAQri0tQ6QU4Md0vlfjJqbXjV6K7ElFAl\n3XSyW2KwmsxUs+bgRl/xqFq6ZYRYpU3dfhVMRrkFhwgCCUcN+eRjucBv30YpPrjk\nxc/ArXmTBD5umG+nvQzjrhTKzbxR/s/m/Imw1bBMd0kTwwY8qrjJs11/cX4KAwuP\nqR94v98WZc7K/VxiE57yEaOpiBg5G20ZRH2JElmxguRvYKmnXkyyTZv5vsjh5GQ3\njjKijPk5OaHI6obAPFhEs4LOwdS7J2h0zkasSZvUGJXnSknDwYVCNgq3gZgW2bI=\n=fVGP\n-----END PGP SIGNATURE-----\n", "payload": "tree 5bb79b04862a6d0a6917cb8c7ec1ba03bdebdd0f\nparent 86ee126052659ebb5fd8c8c80e0fe371bfe9d95f\nparent 1a6df18d6f358dbe01b2dd4def94ff597f791590\nauthor Nick Cameron <nrc@ncameron.org> 1533540848 +1200\ncommitter GitHub <noreply@github.com> 1533540848 +1200\n\nMerge pull request #2890 from topecongiro/use-builder-pattern-for-ListFormatting\n\nUse builder pattern for ListFormatting"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6a76c443e7dbae08e43d4f7746474f61ba49ae0", "html_url": "https://github.com/rust-lang/rust/commit/f6a76c443e7dbae08e43d4f7746474f61ba49ae0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86ee126052659ebb5fd8c8c80e0fe371bfe9d95f", "url": "https://api.github.com/repos/rust-lang/rust/commits/86ee126052659ebb5fd8c8c80e0fe371bfe9d95f", "html_url": "https://github.com/rust-lang/rust/commit/86ee126052659ebb5fd8c8c80e0fe371bfe9d95f"}, {"sha": "1a6df18d6f358dbe01b2dd4def94ff597f791590", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6df18d6f358dbe01b2dd4def94ff597f791590", "html_url": "https://github.com/rust-lang/rust/commit/1a6df18d6f358dbe01b2dd4def94ff597f791590"}], "stats": {"total": 357, "additions": 150, "deletions": 207}, "files": [{"sha": "2ec47d305728bb15125c1b731f93e816f4a9c2f4", "filename": "src/attr.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=f6a76c443e7dbae08e43d4f7746474f61ba49ae0", "patch": "@@ -14,7 +14,7 @@ use comment::{contains_comment, rewrite_doc_comment};\n use config::lists::*;\n use config::IndentStyle;\n use expr::rewrite_literal;\n-use lists::{itemize_list, write_list, ListFormatting};\n+use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, Separator};\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n use types::{rewrite_path, PathContext};\n@@ -294,19 +294,10 @@ where\n         ListTactic::HorizontalVertical\n     };\n \n-    let tactic =\n-        ::lists::definitive_tactic(&item_vec, tactic, ::lists::Separator::Comma, shape.width);\n-    let fmt = ListFormatting {\n-        tactic,\n-        separator: \",\",\n-        trailing_separator: SeparatorTactic::Never,\n-        separator_place: SeparatorPlace::Back,\n-        shape,\n-        ends_with_newline: false,\n-        preserve_newline: false,\n-        nested: false,\n-        config: context.config,\n-    };\n+    let tactic = definitive_tactic(&item_vec, tactic, Separator::Comma, shape.width);\n+    let fmt = ListFormatting::new(shape, context.config)\n+        .tactic(tactic)\n+        .ends_with_newline(false);\n     let item_str = write_list(&item_vec, &fmt)?;\n \n     let one_line_budget = one_line_shape.width;"}, {"sha": "1a4a6e44fdfba07db0177d3fffced668c5c977db", "filename": "src/closures.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=f6a76c443e7dbae08e43d4f7746474f61ba49ae0", "patch": "@@ -270,17 +270,9 @@ fn rewrite_closure_fn_decl(\n         _ => arg_shape,\n     };\n \n-    let fmt = ListFormatting {\n-        tactic,\n-        separator: \",\",\n-        trailing_separator: SeparatorTactic::Never,\n-        separator_place: SeparatorPlace::Back,\n-        shape: arg_shape,\n-        ends_with_newline: false,\n-        preserve_newline: true,\n-        nested: false,\n-        config: context.config,\n-    };\n+    let fmt = ListFormatting::new(arg_shape, context.config)\n+        .tactic(tactic)\n+        .preserve_newline(true);\n     let list_str = write_list(&item_vec, &fmt)?;\n     let mut prefix = format!(\"{}{}{}|{}|\", is_async, immovable, mover, list_str);\n "}, {"sha": "0f4474d7c0f1a363420d394ad596288e0d05d39b", "filename": "src/expr.rs", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=f6a76c443e7dbae08e43d4f7746474f61ba49ae0", "patch": "@@ -1197,17 +1197,11 @@ pub fn rewrite_multiple_patterns(\n             shape.width,\n         )\n     };\n-    let fmt = ListFormatting {\n-        tactic,\n-        separator: \" |\",\n-        trailing_separator: SeparatorTactic::Never,\n-        separator_place: context.config.binop_separator(),\n-        shape,\n-        ends_with_newline: false,\n-        preserve_newline: false,\n-        nested: false,\n-        config: context.config,\n-    };\n+    let fmt = ListFormatting::new(shape, context.config)\n+        .tactic(tactic)\n+        .separator(\" |\")\n+        .separator_place(context.config.binop_separator())\n+        .ends_with_newline(false);\n     write_list(&items, &fmt)\n }\n \n@@ -1760,17 +1754,9 @@ where\n         Separator::Comma,\n         nested_shape.width,\n     );\n-    let fmt = ListFormatting {\n-        tactic,\n-        separator: \",\",\n-        trailing_separator: SeparatorTactic::Never,\n-        separator_place: SeparatorPlace::Back,\n-        shape,\n-        ends_with_newline: false,\n-        preserve_newline: false,\n-        nested: false,\n-        config: context.config,\n-    };\n+    let fmt = ListFormatting::new(shape, context.config)\n+        .tactic(tactic)\n+        .ends_with_newline(false);\n     let list_str = write_list(&item_vec, &fmt)?;\n \n     Some(format!(\"({})\", list_str))"}, {"sha": "2007d05bc548973132fb0289c09aeb7a4d607f2f", "filename": "src/imports.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=f6a76c443e7dbae08e43d4f7746474f61ba49ae0", "patch": "@@ -714,21 +714,17 @@ fn rewrite_nested_use_tree(\n \n     let ends_with_newline = context.config.imports_indent() == IndentStyle::Block\n         && tactic != DefinitiveListTactic::Horizontal;\n-    let fmt = ListFormatting {\n-        tactic,\n-        separator: \",\",\n-        trailing_separator: if ends_with_newline {\n-            context.config.trailing_comma()\n-        } else {\n-            SeparatorTactic::Never\n-        },\n-        separator_place: SeparatorPlace::Back,\n-        shape: nested_shape,\n-        ends_with_newline,\n-        preserve_newline: true,\n-        nested: has_nested_list,\n-        config: context.config,\n+    let trailing_separator = if ends_with_newline {\n+        context.config.trailing_comma()\n+    } else {\n+        SeparatorTactic::Never\n     };\n+    let fmt = ListFormatting::new(nested_shape, context.config)\n+        .tactic(tactic)\n+        .trailing_separator(trailing_separator)\n+        .ends_with_newline(ends_with_newline)\n+        .preserve_newline(true)\n+        .nested(has_nested_list);\n \n     let list_str = write_list(&list_items, &fmt)?;\n "}, {"sha": "0152fb8794c357eb317bf44a79e4b003b6a68392", "filename": "src/items.rs", "status": "modified", "additions": 21, "deletions": 48, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=f6a76c443e7dbae08e43d4f7746474f61ba49ae0", "patch": "@@ -529,17 +529,9 @@ impl<'a> FmtVisitor<'a> {\n         }\n \n         let shape = self.shape().sub_width(2)?;\n-        let fmt = ListFormatting {\n-            tactic: DefinitiveListTactic::Vertical,\n-            separator: \",\",\n-            trailing_separator: self.config.trailing_comma(),\n-            separator_place: SeparatorPlace::Back,\n-            shape,\n-            ends_with_newline: true,\n-            preserve_newline: true,\n-            nested: false,\n-            config: self.config,\n-        };\n+        let fmt = ListFormatting::new(shape, self.config)\n+            .trailing_separator(self.config.trailing_comma())\n+            .preserve_newline(true);\n \n         let list = write_list(&items, &fmt)?;\n         result.push_str(&list);\n@@ -2360,22 +2352,16 @@ fn rewrite_args(\n \n     debug!(\"rewrite_args: budget: {}, tactic: {:?}\", budget, tactic);\n \n-    let fmt = ListFormatting {\n-        tactic,\n-        separator: \",\",\n-        trailing_separator: if variadic {\n-            SeparatorTactic::Never\n-        } else {\n-            trailing_comma\n-        },\n-        separator_place: SeparatorPlace::Back,\n-        shape: Shape::legacy(budget, indent),\n-        ends_with_newline: tactic.ends_with_newline(context.config.indent_style()),\n-        preserve_newline: true,\n-        nested: false,\n-        config: context.config,\n+    let trailing_separator = if variadic {\n+        SeparatorTactic::Never\n+    } else {\n+        trailing_comma\n     };\n-\n+    let fmt = ListFormatting::new(Shape::legacy(budget, indent), context.config)\n+        .tactic(tactic)\n+        .trailing_separator(trailing_separator)\n+        .ends_with_newline(tactic.ends_with_newline(context.config.indent_style()))\n+        .preserve_newline(true);\n     write_list(&arg_items, &fmt)\n }\n \n@@ -2551,17 +2537,10 @@ fn rewrite_where_clause_rfc_style(\n         DefinitiveListTactic::Vertical\n     };\n \n-    let fmt = ListFormatting {\n-        tactic: shape_tactic,\n-        separator: \",\",\n-        trailing_separator: comma_tactic,\n-        separator_place: SeparatorPlace::Back,\n-        shape: clause_shape,\n-        ends_with_newline: true,\n-        preserve_newline: true,\n-        nested: false,\n-        config: context.config,\n-    };\n+    let fmt = ListFormatting::new(clause_shape, context.config)\n+        .tactic(shape_tactic)\n+        .trailing_separator(comma_tactic)\n+        .preserve_newline(true);\n     let preds_str = write_list(&items.collect::<Vec<_>>(), &fmt)?;\n \n     let comment_separator = |comment: &str, shape: Shape| {\n@@ -2666,17 +2645,11 @@ fn rewrite_where_clause(\n         comma_tactic = SeparatorTactic::Never;\n     }\n \n-    let fmt = ListFormatting {\n-        tactic,\n-        separator: \",\",\n-        trailing_separator: comma_tactic,\n-        separator_place: SeparatorPlace::Back,\n-        shape: Shape::legacy(budget, offset),\n-        ends_with_newline: tactic.ends_with_newline(context.config.indent_style()),\n-        preserve_newline: true,\n-        nested: false,\n-        config: context.config,\n-    };\n+    let fmt = ListFormatting::new(Shape::legacy(budget, offset), context.config)\n+        .tactic(tactic)\n+        .trailing_separator(comma_tactic)\n+        .ends_with_newline(tactic.ends_with_newline(context.config.indent_style()))\n+        .preserve_newline(true);\n     let preds_str = write_list(&item_vec, &fmt)?;\n \n     let end_length = if terminator == \"{\" {"}, {"sha": "f7a6f9944cd961ccb629d427b4d184137ba52071", "filename": "src/lists.rs", "status": "modified", "additions": 58, "deletions": 9, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=f6a76c443e7dbae08e43d4f7746474f61ba49ae0", "patch": "@@ -24,22 +24,71 @@ use utils::{count_newlines, first_line_width, last_line_width, mk_sp, starts_wit\n use visitor::SnippetProvider;\n \n pub struct ListFormatting<'a> {\n-    pub tactic: DefinitiveListTactic,\n-    pub separator: &'a str,\n-    pub trailing_separator: SeparatorTactic,\n-    pub separator_place: SeparatorPlace,\n-    pub shape: Shape,\n+    tactic: DefinitiveListTactic,\n+    separator: &'a str,\n+    trailing_separator: SeparatorTactic,\n+    separator_place: SeparatorPlace,\n+    shape: Shape,\n     // Non-expressions, e.g. items, will have a new line at the end of the list.\n     // Important for comment styles.\n-    pub ends_with_newline: bool,\n+    ends_with_newline: bool,\n     // Remove newlines between list elements for expressions.\n-    pub preserve_newline: bool,\n+    preserve_newline: bool,\n     // Nested import lists get some special handling for the \"Mixed\" list type\n-    pub nested: bool,\n-    pub config: &'a Config,\n+    nested: bool,\n+    config: &'a Config,\n }\n \n impl<'a> ListFormatting<'a> {\n+    pub fn new(shape: Shape, config: &'a Config) -> Self {\n+        ListFormatting {\n+            tactic: DefinitiveListTactic::Vertical,\n+            separator: \",\",\n+            trailing_separator: SeparatorTactic::Never,\n+            separator_place: SeparatorPlace::Back,\n+            shape,\n+            ends_with_newline: true,\n+            preserve_newline: false,\n+            nested: false,\n+            config: config,\n+        }\n+    }\n+\n+    pub fn tactic(mut self, tactic: DefinitiveListTactic) -> Self {\n+        self.tactic = tactic;\n+        self\n+    }\n+\n+    pub fn separator(mut self, separator: &'a str) -> Self {\n+        self.separator = separator;\n+        self\n+    }\n+\n+    pub fn trailing_separator(mut self, trailing_separator: SeparatorTactic) -> Self {\n+        self.trailing_separator = trailing_separator;\n+        self\n+    }\n+\n+    pub fn separator_place(mut self, separator_place: SeparatorPlace) -> Self {\n+        self.separator_place = separator_place;\n+        self\n+    }\n+\n+    pub fn ends_with_newline(mut self, ends_with_newline: bool) -> Self {\n+        self.ends_with_newline = ends_with_newline;\n+        self\n+    }\n+\n+    pub fn preserve_newline(mut self, preserve_newline: bool) -> Self {\n+        self.preserve_newline = preserve_newline;\n+        self\n+    }\n+\n+    pub fn nested(mut self, nested: bool) -> Self {\n+        self.nested = nested;\n+        self\n+    }\n+\n     pub fn needs_trailing_separator(&self) -> bool {\n         match self.trailing_separator {\n             // We always put separator in front."}, {"sha": "b32de753fdad42040dd1aa2d05a0136407874826", "filename": "src/macros.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=f6a76c443e7dbae08e43d4f7746474f61ba49ae0", "patch": "@@ -412,17 +412,10 @@ pub fn rewrite_macro_def(\n         false,\n     ).collect::<Vec<_>>();\n \n-    let fmt = ListFormatting {\n-        tactic: DefinitiveListTactic::Vertical,\n-        separator: if def.legacy { \";\" } else { \"\" },\n-        trailing_separator: SeparatorTactic::Always,\n-        separator_place: SeparatorPlace::Back,\n-        shape: arm_shape,\n-        ends_with_newline: true,\n-        preserve_newline: true,\n-        nested: false,\n-        config: context.config,\n-    };\n+    let fmt = ListFormatting::new(arm_shape, context.config)\n+        .separator(if def.legacy { \";\" } else { \"\" })\n+        .trailing_separator(SeparatorTactic::Always)\n+        .preserve_newline(true);\n \n     if multi_branch_style {\n         result += \" {\";"}, {"sha": "29e9f19ad7dcdb9db1dbb0f6e9bd10b51f0be65c", "filename": "src/matches.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=f6a76c443e7dbae08e43d4f7746474f61ba49ae0", "patch": "@@ -215,18 +215,10 @@ fn rewrite_match_arms(\n         false,\n     );\n     let arms_vec: Vec<_> = items.collect();\n-    let fmt = ListFormatting {\n-        tactic: DefinitiveListTactic::Vertical,\n-        // We will add/remove commas inside `arm.rewrite()`, and hence no separator here.\n-        separator: \"\",\n-        trailing_separator: SeparatorTactic::Never,\n-        separator_place: SeparatorPlace::Back,\n-        shape: arm_shape,\n-        ends_with_newline: true,\n-        preserve_newline: true,\n-        nested: false,\n-        config: context.config,\n-    };\n+    // We will add/remove commas inside `arm.rewrite()`, and hence no separator here.\n+    let fmt = ListFormatting::new(arm_shape, context.config)\n+        .separator(\"\")\n+        .preserve_newline(true);\n \n     write_list(&arms_vec, &fmt)\n }"}, {"sha": "e18fe140c8de8249e82a566b11eeffe47d1d2a72", "filename": "src/overflow.rs", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=f6a76c443e7dbae08e43d4f7746474f61ba49ae0", "patch": "@@ -363,32 +363,27 @@ impl<'a, T: 'a + Rewrite + ToExpr + Spanned> Context<'a, T> {\n         // indentation. If its first line fits on one line with the other arguments,\n         // we format the function arguments horizontally.\n         let tactic = self.try_overflow_last_item(&mut list_items);\n-\n-        let fmt = ListFormatting {\n-            tactic,\n-            separator: \",\",\n-            trailing_separator: if let Some(tactic) = self.force_separator_tactic {\n-                tactic\n-            } else if !self.context.use_block_indent() {\n-                SeparatorTactic::Never\n-            } else if tactic == DefinitiveListTactic::Mixed {\n-                // We are using mixed layout because everything did not fit within a single line.\n-                SeparatorTactic::Always\n-            } else {\n-                self.context.config.trailing_comma()\n-            },\n-            separator_place: SeparatorPlace::Back,\n-            shape: self.nested_shape,\n-            ends_with_newline: match tactic {\n-                DefinitiveListTactic::Vertical | DefinitiveListTactic::Mixed => {\n-                    self.context.use_block_indent()\n-                }\n-                _ => false,\n-            },\n-            preserve_newline: false,\n-            nested: false,\n-            config: self.context.config,\n+        let trailing_separator = if let Some(tactic) = self.force_separator_tactic {\n+            tactic\n+        } else if !self.context.use_block_indent() {\n+            SeparatorTactic::Never\n+        } else if tactic == DefinitiveListTactic::Mixed {\n+            // We are using mixed layout because everything did not fit within a single line.\n+            SeparatorTactic::Always\n+        } else {\n+            self.context.config.trailing_comma()\n         };\n+        let ends_with_newline = match tactic {\n+            DefinitiveListTactic::Vertical | DefinitiveListTactic::Mixed => {\n+                self.context.use_block_indent()\n+            }\n+            _ => false,\n+        };\n+\n+        let fmt = ListFormatting::new(self.nested_shape, self.context.config)\n+            .tactic(tactic)\n+            .trailing_separator(trailing_separator)\n+            .ends_with_newline(ends_with_newline);\n \n         write_list(&list_items, &fmt)\n             .map(|items_str| (tactic == DefinitiveListTactic::Horizontal, items_str))"}, {"sha": "7ab43def8c773cb79f5f10120a2dc81893426feb", "filename": "src/patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=f6a76c443e7dbae08e43d4f7746474f61ba49ae0", "patch": "@@ -214,7 +214,7 @@ fn rewrite_struct_pat(\n     if ellipsis {\n         if fields_str.contains('\\n') || fields_str.len() > one_line_width {\n             // Add a missing trailing comma.\n-            if fmt.trailing_separator == SeparatorTactic::Never {\n+            if context.config.trailing_comma() == SeparatorTactic::Never {\n                 fields_str.push_str(\",\");\n             }\n             fields_str.push_str(\"\\n\");\n@@ -223,7 +223,7 @@ fn rewrite_struct_pat(\n         } else {\n             if !fields_str.is_empty() {\n                 // there are preceding struct fields being matched on\n-                if fmt.tactic == DefinitiveListTactic::Vertical {\n+                if tactic == DefinitiveListTactic::Vertical {\n                     // if the tactic is Vertical, write_list already added a trailing ,\n                     fields_str.push_str(\" \");\n                 } else {"}, {"sha": "bc429a10ab6abec6538e65fc64c292c48a52f4fe", "filename": "src/reorder.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=f6a76c443e7dbae08e43d4f7746474f61ba49ae0", "patch": "@@ -16,7 +16,7 @@\n \n // FIXME(#2455): Reorder trait items.\n \n-use config::{lists::*, Config};\n+use config::Config;\n use syntax::{ast, attr, codemap::Span};\n \n use attr::filter_inline_attrs;\n@@ -69,18 +69,7 @@ fn wrap_reorderable_items(\n     list_items: &[ListItem],\n     shape: Shape,\n ) -> Option<String> {\n-    let fmt = ListFormatting {\n-        tactic: DefinitiveListTactic::Vertical,\n-        separator: \"\",\n-        trailing_separator: SeparatorTactic::Never,\n-        separator_place: SeparatorPlace::Back,\n-        shape,\n-        ends_with_newline: true,\n-        preserve_newline: false,\n-        nested: false,\n-        config: context.config,\n-    };\n-\n+    let fmt = ListFormatting::new(shape, context.config).separator(\"\");\n     write_list(list_items, &fmt)\n }\n "}, {"sha": "360c7304988ba9667d388e9225339d2cc6a021ab", "filename": "src/types.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=f6a76c443e7dbae08e43d4f7746474f61ba49ae0", "patch": "@@ -360,23 +360,17 @@ where\n         Separator::Comma,\n         budget,\n     );\n-\n-    let fmt = ListFormatting {\n-        tactic,\n-        separator: \",\",\n-        trailing_separator: if !context.use_block_indent() || variadic {\n-            SeparatorTactic::Never\n-        } else {\n-            context.config.trailing_comma()\n-        },\n-        separator_place: SeparatorPlace::Back,\n-        shape: list_shape,\n-        ends_with_newline: tactic.ends_with_newline(context.config.indent_style()),\n-        preserve_newline: true,\n-        nested: false,\n-        config: context.config,\n+    let trailing_separator = if !context.use_block_indent() || variadic {\n+        SeparatorTactic::Never\n+    } else {\n+        context.config.trailing_comma()\n     };\n \n+    let fmt = ListFormatting::new(list_shape, context.config)\n+        .tactic(tactic)\n+        .trailing_separator(trailing_separator)\n+        .ends_with_newline(tactic.ends_with_newline(context.config.indent_style()))\n+        .preserve_newline(true);\n     let list_str = write_list(&item_vec, &fmt)?;\n \n     let ty_shape = match context.config.indent_style() {"}, {"sha": "c6721bc5010e53c9cd410a30e2438e5cccbeee31", "filename": "src/vertical.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a76c443e7dbae08e43d4f7746474f61ba49ae0/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=f6a76c443e7dbae08e43d4f7746474f61ba49ae0", "patch": "@@ -245,17 +245,10 @@ fn rewrite_aligned_items_inner<T: AlignedItem>(\n         one_line_width,\n     );\n \n-    let fmt = ListFormatting {\n-        tactic,\n-        separator: \",\",\n-        trailing_separator: context.config.trailing_comma(),\n-        separator_place: SeparatorPlace::Back,\n-        shape: item_shape,\n-        ends_with_newline: true,\n-        preserve_newline: true,\n-        nested: false,\n-        config: context.config,\n-    };\n+    let fmt = ListFormatting::new(item_shape, context.config)\n+        .tactic(tactic)\n+        .trailing_separator(context.config.trailing_comma())\n+        .preserve_newline(true);\n     write_list(&items, &fmt)\n }\n "}]}