{"sha": "a5cdd4aeb11fad6b0bf73d342398700a27c4484b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1Y2RkNGFlYjExZmFkNmIwYmY3M2QzNDIzOTg3MDBhMjdjNDQ4NGI=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-07-20T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-07-19T22:56:27Z"}, "message": "Ignore not really redundant clones of ManuallyDrop\n\n\"Redundant\" clones of `ManuallyDrop` are sometimes used for the side effect of\ninvoking the clone, without running the drop implementation of the inner type.\nIn other words, they aren't really redundant. For example, futures-rs crate:\n\n```rust\n#[allow(clippy::redundant_clone)] // The clone here isn't actually redundant.\nunsafe fn increase_refcount<T: ArcWake>(data: *const ()) {\n    // Retain Arc, but don't touch refcount by wrapping in ManuallyDrop\n    let arc = mem::ManuallyDrop::new(Arc::<T>::from_raw(data as *const T));\n    // Now increase refcount, but don't drop new refcount either\n    let _arc_clone: mem::ManuallyDrop<_> = arc.clone();\n}\n```\n\nIgnore redundant clone lint for ManuallyDrop.", "tree": {"sha": "e7c988d3b9b4ca6eb4f556a53134969f035d6f40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7c988d3b9b4ca6eb4f556a53134969f035d6f40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5cdd4aeb11fad6b0bf73d342398700a27c4484b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5cdd4aeb11fad6b0bf73d342398700a27c4484b", "html_url": "https://github.com/rust-lang/rust/commit/a5cdd4aeb11fad6b0bf73d342398700a27c4484b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5cdd4aeb11fad6b0bf73d342398700a27c4484b/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cf4219c1673533eb5caf304237bffaa8e847067", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf4219c1673533eb5caf304237bffaa8e847067", "html_url": "https://github.com/rust-lang/rust/commit/8cf4219c1673533eb5caf304237bffaa8e847067"}], "stats": {"total": 57, "additions": 47, "deletions": 10}, "files": [{"sha": "7932be0d4b1f260a59b3d839002d3747bb1a9ad1", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5cdd4aeb11fad6b0bf73d342398700a27c4484b/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cdd4aeb11fad6b0bf73d342398700a27c4484b/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=a5cdd4aeb11fad6b0bf73d342398700a27c4484b", "patch": "@@ -124,6 +124,12 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n                 continue;\n             }\n \n+            if let ty::Adt(ref def, _) = arg_ty.kind {\n+                if match_def_path(cx, def.did, &paths::MEM_MANUALLY_DROP) {\n+                    continue;\n+                }\n+            }\n+\n             // `{ cloned = &arg; clone(move cloned); }` or `{ cloned = &arg; to_path_buf(cloned); }`\n             let (cloned, cannot_move_out) = unwrap_or_continue!(find_stmt_assigns_to(cx, mir, arg, from_borrow, bb));\n "}, {"sha": "a515ee29c82adc64e2678302137a26ac40254157", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a5cdd4aeb11fad6b0bf73d342398700a27c4484b/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cdd4aeb11fad6b0bf73d342398700a27c4484b/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=a5cdd4aeb11fad6b0bf73d342398700a27c4484b", "patch": "@@ -59,6 +59,7 @@ pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"Link\n pub const LINT: [&str; 3] = [\"rustc_session\", \"lint\", \"Lint\"];\n pub const MEM_DISCRIMINANT: [&str; 3] = [\"core\", \"mem\", \"discriminant\"];\n pub const MEM_FORGET: [&str; 3] = [\"core\", \"mem\", \"forget\"];\n+pub const MEM_MANUALLY_DROP: [&str; 4] = [\"core\", \"mem\", \"manually_drop\", \"ManuallyDrop\"];\n pub const MEM_MAYBEUNINIT: [&str; 4] = [\"core\", \"mem\", \"maybe_uninit\", \"MaybeUninit\"];\n pub const MEM_MAYBEUNINIT_UNINIT: [&str; 5] = [\"core\", \"mem\", \"maybe_uninit\", \"MaybeUninit\", \"uninit\"];\n pub const MEM_REPLACE: [&str; 3] = [\"core\", \"mem\", \"replace\"];"}, {"sha": "cdeefda4c234c071e573445af3e10e1f0e404702", "filename": "tests/ui/redundant_clone.fixed", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a5cdd4aeb11fad6b0bf73d342398700a27c4484b/tests%2Fui%2Fredundant_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a5cdd4aeb11fad6b0bf73d342398700a27c4484b/tests%2Fui%2Fredundant_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.fixed?ref=a5cdd4aeb11fad6b0bf73d342398700a27c4484b", "patch": "@@ -52,6 +52,7 @@ fn main() {\n     borrower_propagation();\n     not_consumed();\n     issue_5405();\n+    manually_drop();\n }\n \n #[derive(Clone)]\n@@ -170,3 +171,17 @@ fn issue_5405() {\n     let c: [usize; 2] = [2, 3];\n     let _d: usize = c[1].clone();\n }\n+\n+fn manually_drop() {\n+    use std::mem::ManuallyDrop;\n+    use std::sync::Arc;\n+\n+    let a = ManuallyDrop::new(Arc::new(\"Hello!\".to_owned()));\n+    let _ = a.clone(); // OK\n+\n+    let p: *const String = Arc::into_raw(ManuallyDrop::into_inner(a));\n+    unsafe {\n+        Arc::from_raw(p);\n+        Arc::from_raw(p);\n+    }\n+}"}, {"sha": "acb7ffb305f2a8890b981bfed1c4f5303d8da232", "filename": "tests/ui/redundant_clone.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a5cdd4aeb11fad6b0bf73d342398700a27c4484b/tests%2Fui%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cdd4aeb11fad6b0bf73d342398700a27c4484b/tests%2Fui%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.rs?ref=a5cdd4aeb11fad6b0bf73d342398700a27c4484b", "patch": "@@ -52,6 +52,7 @@ fn main() {\n     borrower_propagation();\n     not_consumed();\n     issue_5405();\n+    manually_drop();\n }\n \n #[derive(Clone)]\n@@ -170,3 +171,17 @@ fn issue_5405() {\n     let c: [usize; 2] = [2, 3];\n     let _d: usize = c[1].clone();\n }\n+\n+fn manually_drop() {\n+    use std::mem::ManuallyDrop;\n+    use std::sync::Arc;\n+\n+    let a = ManuallyDrop::new(Arc::new(\"Hello!\".to_owned()));\n+    let _ = a.clone(); // OK\n+\n+    let p: *const String = Arc::into_raw(ManuallyDrop::into_inner(a));\n+    unsafe {\n+        Arc::from_raw(p);\n+        Arc::from_raw(p);\n+    }\n+}"}, {"sha": "89b39254299107df27cc468f9b761d3f07d269f0", "filename": "tests/ui/redundant_clone.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a5cdd4aeb11fad6b0bf73d342398700a27c4484b/tests%2Fui%2Fredundant_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5cdd4aeb11fad6b0bf73d342398700a27c4484b/tests%2Fui%2Fredundant_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.stderr?ref=a5cdd4aeb11fad6b0bf73d342398700a27c4484b", "patch": "@@ -108,61 +108,61 @@ LL |     let _t = tup.0.clone();\n    |              ^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:61:22\n+  --> $DIR/redundant_clone.rs:62:22\n    |\n LL |         (a.clone(), a.clone())\n    |                      ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:61:21\n+  --> $DIR/redundant_clone.rs:62:21\n    |\n LL |         (a.clone(), a.clone())\n    |                     ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:121:15\n+  --> $DIR/redundant_clone.rs:122:15\n    |\n LL |     let _s = s.clone();\n    |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:121:14\n+  --> $DIR/redundant_clone.rs:122:14\n    |\n LL |     let _s = s.clone();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:122:15\n+  --> $DIR/redundant_clone.rs:123:15\n    |\n LL |     let _t = t.clone();\n    |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:122:14\n+  --> $DIR/redundant_clone.rs:123:14\n    |\n LL |     let _t = t.clone();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:132:19\n+  --> $DIR/redundant_clone.rs:133:19\n    |\n LL |         let _f = f.clone();\n    |                   ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:132:18\n+  --> $DIR/redundant_clone.rs:133:18\n    |\n LL |         let _f = f.clone();\n    |                  ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:144:14\n+  --> $DIR/redundant_clone.rs:145:14\n    |\n LL |     let y = x.clone().join(\"matthias\");\n    |              ^^^^^^^^ help: remove this\n    |\n note: cloned value is neither consumed nor mutated\n-  --> $DIR/redundant_clone.rs:144:13\n+  --> $DIR/redundant_clone.rs:145:13\n    |\n LL |     let y = x.clone().join(\"matthias\");\n    |             ^^^^^^^^^"}]}