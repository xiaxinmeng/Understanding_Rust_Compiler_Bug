{"sha": "fc13fd03ba0155915f72d0d1578f69c3998e73ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMTNmZDAzYmEwMTU1OTE1ZjcyZDBkMTU3OGY2OWMzOTk4ZTczYWQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-06-15T08:21:10Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-06-15T18:06:13Z"}, "message": "typeck: Use `LocalDefId`s for the unused trait import set", "tree": {"sha": "5d9ee12af7da66669a5003d22115733a1f26d5c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d9ee12af7da66669a5003d22115733a1f26d5c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc13fd03ba0155915f72d0d1578f69c3998e73ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc13fd03ba0155915f72d0d1578f69c3998e73ad", "html_url": "https://github.com/rust-lang/rust/commit/fc13fd03ba0155915f72d0d1578f69c3998e73ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc13fd03ba0155915f72d0d1578f69c3998e73ad/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4337ccc10db07f72566ad06f62662ab9b27e3bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4337ccc10db07f72566ad06f62662ab9b27e3bd", "html_url": "https://github.com/rust-lang/rust/commit/a4337ccc10db07f72566ad06f62662ab9b27e3bd"}], "stats": {"total": 32, "additions": 14, "deletions": 18}, "files": [{"sha": "aaef9871aa5572364dd8f6142f5eafa8ffebaa84", "filename": "src/librustc_middle/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc13fd03ba0155915f72d0d1578f69c3998e73ad/src%2Flibrustc_middle%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc13fd03ba0155915f72d0d1578f69c3998e73ad/src%2Flibrustc_middle%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Farena.rs?ref=fc13fd03ba0155915f72d0d1578f69c3998e73ad", "patch": "@@ -114,6 +114,7 @@ macro_rules! arena_types {\n \n             // This is used to decode the &'tcx [Span] for InlineAsm's line_spans.\n             [decode] span: rustc_span::Span, rustc_span::Span;\n+            [decode] used_trait_imports: rustc_data_structures::fx::FxHashSet<rustc_hir::def_id::LocalDefId>, rustc_data_structures::fx::FxHashSet<rustc_hir::def_id::LocalDefId>;\n         ], $tcx);\n     )\n }"}, {"sha": "b3751beede25abecafcb2821784947e125abdeaf", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc13fd03ba0155915f72d0d1578f69c3998e73ad/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc13fd03ba0155915f72d0d1578f69c3998e73ad/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=fc13fd03ba0155915f72d0d1578f69c3998e73ad", "patch": "@@ -526,7 +526,7 @@ rustc_queries! {\n     }\n \n     Other {\n-        query used_trait_imports(key: LocalDefId) -> &'tcx DefIdSet {\n+        query used_trait_imports(key: LocalDefId) -> &'tcx FxHashSet<LocalDefId> {\n             desc { |tcx| \"used_trait_imports `{}`\", tcx.def_path_str(key.to_def_id()) }\n             cache_on_disk_if { true }\n         }"}, {"sha": "e716b2e8469239dfa47d3d8a68ca6ba89fedd570", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc13fd03ba0155915f72d0d1578f69c3998e73ad/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc13fd03ba0155915f72d0d1578f69c3998e73ad/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=fc13fd03ba0155915f72d0d1578f69c3998e73ad", "patch": "@@ -35,7 +35,7 @@ use rustc_data_structures::sync::{self, Lock, Lrc, WorkerLocal};\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n use rustc_hir::definitions::{DefPathHash, Definitions};\n use rustc_hir::lang_items::{self, PanicLocationLangItem};\n use rustc_hir::{HirId, ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet, Node, TraitCandidate};\n@@ -392,7 +392,7 @@ pub struct TypeckTables<'tcx> {\n     /// This is used for warning unused imports. During type\n     /// checking, this `Lrc` should not be cloned: it must have a ref-count\n     /// of 1 so that we can insert things into the set mutably.\n-    pub used_trait_imports: Lrc<DefIdSet>,\n+    pub used_trait_imports: Lrc<FxHashSet<LocalDefId>>,\n \n     /// If any errors occurred while type-checking this body,\n     /// this field will be set to `Some(ErrorReported)`."}, {"sha": "259c4a8664f1bf4fbbfd1dbf3f1ba21e0bcb977e", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc13fd03ba0155915f72d0d1578f69c3998e73ad/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc13fd03ba0155915f72d0d1578f69c3998e73ad/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=fc13fd03ba0155915f72d0d1578f69c3998e73ad", "patch": "@@ -197,7 +197,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             debug!(\"used_trait_import: {:?}\", import_id);\n             Lrc::get_mut(&mut self.tables.borrow_mut().used_trait_imports)\n                 .unwrap()\n-                .insert(import_id.to_def_id());\n+                .insert(*import_id);\n         }\n \n         self.tcx.check_stability(pick.item.def_id, Some(call_expr.hir_id), span);\n@@ -461,7 +461,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let used_trait_imports = Lrc::get_mut(&mut tables.used_trait_imports).unwrap();\n             for import_id in pick.import_ids {\n                 debug!(\"resolve_ufcs: used_trait_import: {:?}\", import_id);\n-                used_trait_imports.insert(import_id.to_def_id());\n+                used_trait_imports.insert(import_id);\n             }\n         }\n "}, {"sha": "f9105a51c49a9c927951ed7823c60357df641413", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc13fd03ba0155915f72d0d1578f69c3998e73ad/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc13fd03ba0155915f72d0d1578f69c3998e73ad/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=fc13fd03ba0155915f72d0d1578f69c3998e73ad", "patch": "@@ -96,7 +96,7 @@ use rustc_errors::ErrorReported;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::lang_items::{\n@@ -839,7 +839,7 @@ fn has_typeck_tables(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     }\n }\n \n-fn used_trait_imports(tcx: TyCtxt<'_>, def_id: LocalDefId) -> &DefIdSet {\n+fn used_trait_imports(tcx: TyCtxt<'_>, def_id: LocalDefId) -> &FxHashSet<LocalDefId> {\n     &*tcx.typeck_tables_of(def_id).used_trait_imports\n }\n "}, {"sha": "646c802fba3187bf5627e36f7fa0c91d47e21530", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc13fd03ba0155915f72d0d1578f69c3998e73ad/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc13fd03ba0155915f72d0d1578f69c3998e73ad/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=fc13fd03ba0155915f72d0d1578f69c3998e73ad", "patch": "@@ -4,10 +4,8 @@\n \n use crate::check::FnCtxt;\n \n-use rustc_data_structures::sync::Lrc;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefIdSet;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_infer::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc_infer::infer::InferCtxt;\n@@ -67,10 +65,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         wbcx.visit_user_provided_sigs();\n         wbcx.visit_generator_interior_types();\n \n-        let used_trait_imports = mem::replace(\n-            &mut self.tables.borrow_mut().used_trait_imports,\n-            Lrc::new(DefIdSet::default()),\n-        );\n+        let used_trait_imports = mem::take(&mut self.tables.borrow_mut().used_trait_imports);\n         debug!(\"used_trait_imports({:?}) = {:?}\", item_def_id, used_trait_imports);\n         wbcx.tables.used_trait_imports = used_trait_imports;\n "}, {"sha": "81daf064bb36866a74d90663460cbfd2958766de", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc13fd03ba0155915f72d0d1578f69c3998e73ad/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc13fd03ba0155915f72d0d1578f69c3998e73ad/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=fc13fd03ba0155915f72d0d1578f69c3998e73ad", "patch": "@@ -1,14 +1,14 @@\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, DefIdSet, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint;\n use rustc_span::{Span, Symbol};\n \n pub fn check_crate(tcx: TyCtxt<'_>) {\n-    let mut used_trait_imports = DefIdSet::default();\n+    let mut used_trait_imports = FxHashSet::default();\n     for &body_id in tcx.hir().krate().bodies.keys() {\n         let item_def_id = tcx.hir().body_owner_def_id(body_id);\n         let imports = tcx.used_trait_imports(item_def_id);\n@@ -39,7 +39,7 @@ impl ItemLikeVisitor<'v> for CheckVisitor<'tcx> {\n \n struct CheckVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    used_trait_imports: DefIdSet,\n+    used_trait_imports: FxHashSet<LocalDefId>,\n }\n \n impl CheckVisitor<'tcx> {\n@@ -49,7 +49,7 @@ impl CheckVisitor<'tcx> {\n             return;\n         }\n \n-        if self.used_trait_imports.contains(&def_id.to_def_id()) {\n+        if self.used_trait_imports.contains(&def_id) {\n             return;\n         }\n "}]}