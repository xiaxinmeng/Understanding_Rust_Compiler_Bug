{"sha": "b0dabce47803c18b935ec5390de69e04ad5304c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZGFiY2U0NzgwM2MxOGI5MzVlYzUzOTBkZTY5ZTA0YWQ1MzA0YzI=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-26T08:11:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-26T08:11:34Z"}, "message": "Merge pull request #2963 from commandline/master\n\nFix regression in print_literal", "tree": {"sha": "d67b6343389b0bedf21172da8ba17ad219445319", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d67b6343389b0bedf21172da8ba17ad219445319"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0dabce47803c18b935ec5390de69e04ad5304c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbWYI2CRBK7hj4Ov3rIwAAdHIIAAJT0cuj1wZbc3OLzG/m58Gj\nlhQgoDdhIgtNNzXa8Zun7h+q5Myypp/0DITi/j84j5cf0b87HMzbLL/emzRF8uyG\nIZvt8YtW+8v4PmSfF0upkCfBbEcuvn7py7ijk9R4v5CXzqba4prBWvzhyHiDpy86\n6VpPud8V1z6TL8oAY1+oBSDVKaiqQXPIQhFw5rImyldTPGEMbl7aJn64K91mocs/\nlt/+xPIfrdSUte1JTpkaCulj033g+GhPgNkHNdolqE+D6ZtMRjGlmWyxS5BmPeQn\nGJt2rC0YlXeHq4Xq8NJaUBkbe2oK1Vj81tV1r/LVP0Uz0xMWn2O38RI28Y4YXo0=\n=hqnF\n-----END PGP SIGNATURE-----\n", "payload": "tree d67b6343389b0bedf21172da8ba17ad219445319\nparent e1096391dced29496fd0f1acdb2d77d1f0042480\nparent 9b11be72c0fbc830291ab02b94470f7e95e84382\nauthor Oliver Schneider <github35764891676564198441@oli-obk.de> 1532592694 +0200\ncommitter GitHub <noreply@github.com> 1532592694 +0200\n\nMerge pull request #2963 from commandline/master\n\nFix regression in print_literal"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0dabce47803c18b935ec5390de69e04ad5304c2", "html_url": "https://github.com/rust-lang/rust/commit/b0dabce47803c18b935ec5390de69e04ad5304c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0dabce47803c18b935ec5390de69e04ad5304c2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1096391dced29496fd0f1acdb2d77d1f0042480", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1096391dced29496fd0f1acdb2d77d1f0042480", "html_url": "https://github.com/rust-lang/rust/commit/e1096391dced29496fd0f1acdb2d77d1f0042480"}, {"sha": "9b11be72c0fbc830291ab02b94470f7e95e84382", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b11be72c0fbc830291ab02b94470f7e95e84382", "html_url": "https://github.com/rust-lang/rust/commit/9b11be72c0fbc830291ab02b94470f7e95e84382"}], "stats": {"total": 146, "additions": 75, "deletions": 71}, "files": [{"sha": "0b52981bfa584ab2a28d8233018154808062f36a", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b0dabce47803c18b935ec5390de69e04ad5304c2/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0dabce47803c18b935ec5390de69e04ad5304c2/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=b0dabce47803c18b935ec5390de69e04ad5304c2", "patch": "@@ -290,22 +290,24 @@ fn check_tts(cx: &EarlyContext<'a>, tts: &ThinTokenStream, is_write: bool) -> Op\n                 idx += 1;\n             },\n             ExprKind::Assign(lhs, rhs) => {\n-                if let ExprKind::Path(_, p) = &lhs.node {\n-                    let mut all_simple = true;\n-                    let mut seen = false;\n-                    for arg in &args {\n-                        match arg.position {\n-                            | ArgumentImplicitlyIs(_)\n-                            | ArgumentIs(_)\n-                            => {},\n-                            ArgumentNamed(name) => if *p == name {\n-                                seen = true;\n-                                all_simple &= arg.format == SIMPLE;\n-                            },\n+                if let ExprKind::Lit(_) = rhs.node {\n+                    if let ExprKind::Path(_, p) = &lhs.node {\n+                        let mut all_simple = true;\n+                        let mut seen = false;\n+                        for arg in &args {\n+                            match arg.position {\n+                                | ArgumentImplicitlyIs(_)\n+                                | ArgumentIs(_)\n+                                => {},\n+                                ArgumentNamed(name) => if *p == name {\n+                                    seen = true;\n+                                    all_simple &= arg.format == SIMPLE;\n+                                },\n+                            }\n+                        }\n+                        if all_simple && seen {\n+                            span_lint(cx, lint, rhs.span, \"literal with an empty format string\");\n                         }\n-                    }\n-                    if all_simple && seen {\n-                        span_lint(cx, lint, rhs.span, \"literal with an empty format string\");\n                     }\n                 }\n             },"}, {"sha": "620349bab33591c023cf3d0d73f45683ba9c8733", "filename": "tests/ui/print_literal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0dabce47803c18b935ec5390de69e04ad5304c2/tests%2Fui%2Fprint_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0dabce47803c18b935ec5390de69e04ad5304c2/tests%2Fui%2Fprint_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_literal.rs?ref=b0dabce47803c18b935ec5390de69e04ad5304c2", "patch": "@@ -8,6 +8,7 @@ fn main() {\n     println!(\"Hello\");\n     let world = \"world\";\n     println!(\"Hello {}\", world);\n+    println!(\"Hello {world}\", world=world);\n     println!(\"3 in hex is {:X}\", 3);\n     println!(\"2 + 1 = {:.4}\", 3);\n     println!(\"2 + 1 = {:5.4}\", 3);"}, {"sha": "cada26c614231ff3963251475d80889d7496cd12", "filename": "tests/ui/print_literal.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b0dabce47803c18b935ec5390de69e04ad5304c2/tests%2Fui%2Fprint_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0dabce47803c18b935ec5390de69e04ad5304c2/tests%2Fui%2Fprint_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_literal.stderr?ref=b0dabce47803c18b935ec5390de69e04ad5304c2", "patch": "@@ -1,87 +1,87 @@\n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:23:71\n+  --> $DIR/print_literal.rs:24:71\n    |\n-23 |     println!(\"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n+24 |     println!(\"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n    |                                                                       ^\n    |\n    = note: `-D print-literal` implied by `-D warnings`\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:24:24\n+  --> $DIR/print_literal.rs:25:24\n    |\n-24 |     print!(\"Hello {}\", \"world\");\n+25 |     print!(\"Hello {}\", \"world\");\n    |                        ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:25:36\n+  --> $DIR/print_literal.rs:26:36\n    |\n-25 |     println!(\"Hello {} {}\", world, \"world\");\n+26 |     println!(\"Hello {} {}\", world, \"world\");\n    |                                    ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:26:26\n+  --> $DIR/print_literal.rs:27:26\n    |\n-26 |     println!(\"Hello {}\", \"world\");\n+27 |     println!(\"Hello {}\", \"world\");\n    |                          ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:27:30\n+  --> $DIR/print_literal.rs:28:30\n    |\n-27 |     println!(\"10 / 4 is {}\", 2.5);\n+28 |     println!(\"10 / 4 is {}\", 2.5);\n    |                              ^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:28:28\n+  --> $DIR/print_literal.rs:29:28\n    |\n-28 |     println!(\"2 + 1 = {}\", 3);\n+29 |     println!(\"2 + 1 = {}\", 3);\n    |                            ^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:33:25\n+  --> $DIR/print_literal.rs:34:25\n    |\n-33 |     println!(\"{0} {1}\", \"hello\", \"world\");\n+34 |     println!(\"{0} {1}\", \"hello\", \"world\");\n    |                         ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:33:34\n+  --> $DIR/print_literal.rs:34:34\n    |\n-33 |     println!(\"{0} {1}\", \"hello\", \"world\");\n+34 |     println!(\"{0} {1}\", \"hello\", \"world\");\n    |                                  ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:34:25\n+  --> $DIR/print_literal.rs:35:25\n    |\n-34 |     println!(\"{1} {0}\", \"hello\", \"world\");\n+35 |     println!(\"{1} {0}\", \"hello\", \"world\");\n    |                         ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:34:34\n+  --> $DIR/print_literal.rs:35:34\n    |\n-34 |     println!(\"{1} {0}\", \"hello\", \"world\");\n+35 |     println!(\"{1} {0}\", \"hello\", \"world\");\n    |                                  ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:37:33\n+  --> $DIR/print_literal.rs:38:33\n    |\n-37 |     println!(\"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n+38 |     println!(\"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n    |                                 ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:37:46\n+  --> $DIR/print_literal.rs:38:46\n    |\n-37 |     println!(\"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n+38 |     println!(\"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n    |                                              ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:38:33\n+  --> $DIR/print_literal.rs:39:33\n    |\n-38 |     println!(\"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n+39 |     println!(\"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n    |                                 ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:38:46\n+  --> $DIR/print_literal.rs:39:46\n    |\n-38 |     println!(\"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n+39 |     println!(\"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n    |                                              ^^^^^^^\n \n error: aborting due to 14 previous errors"}, {"sha": "48dfcd0ea3e11d9d3fa7326a16971f0fb0edfcc2", "filename": "tests/ui/write_literal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0dabce47803c18b935ec5390de69e04ad5304c2/tests%2Fui%2Fwrite_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0dabce47803c18b935ec5390de69e04ad5304c2/tests%2Fui%2Fwrite_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_literal.rs?ref=b0dabce47803c18b935ec5390de69e04ad5304c2", "patch": "@@ -11,6 +11,7 @@ fn main() {\n     writeln!(&mut v, \"Hello\");\n     let world = \"world\";\n     writeln!(&mut v, \"Hello {}\", world);\n+    writeln!(&mut v, \"Hello {world}\", world=world);\n     writeln!(&mut v, \"3 in hex is {:X}\", 3);\n     writeln!(&mut v, \"2 + 1 = {:.4}\", 3);\n     writeln!(&mut v, \"2 + 1 = {:5.4}\", 3);"}, {"sha": "d2e8ca94ed807938580479d716700932a17c14c8", "filename": "tests/ui/write_literal.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b0dabce47803c18b935ec5390de69e04ad5304c2/tests%2Fui%2Fwrite_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0dabce47803c18b935ec5390de69e04ad5304c2/tests%2Fui%2Fwrite_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_literal.stderr?ref=b0dabce47803c18b935ec5390de69e04ad5304c2", "patch": "@@ -1,87 +1,87 @@\n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:26:79\n+  --> $DIR/write_literal.rs:27:79\n    |\n-26 |     writeln!(&mut v, \"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n+27 |     writeln!(&mut v, \"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n    |                                                                               ^\n    |\n    = note: `-D write-literal` implied by `-D warnings`\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:27:32\n+  --> $DIR/write_literal.rs:28:32\n    |\n-27 |     write!(&mut v, \"Hello {}\", \"world\");\n+28 |     write!(&mut v, \"Hello {}\", \"world\");\n    |                                ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:28:44\n+  --> $DIR/write_literal.rs:29:44\n    |\n-28 |     writeln!(&mut v, \"Hello {} {}\", world, \"world\");\n+29 |     writeln!(&mut v, \"Hello {} {}\", world, \"world\");\n    |                                            ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:29:34\n+  --> $DIR/write_literal.rs:30:34\n    |\n-29 |     writeln!(&mut v, \"Hello {}\", \"world\");\n+30 |     writeln!(&mut v, \"Hello {}\", \"world\");\n    |                                  ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:30:38\n+  --> $DIR/write_literal.rs:31:38\n    |\n-30 |     writeln!(&mut v, \"10 / 4 is {}\", 2.5);\n+31 |     writeln!(&mut v, \"10 / 4 is {}\", 2.5);\n    |                                      ^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:31:36\n+  --> $DIR/write_literal.rs:32:36\n    |\n-31 |     writeln!(&mut v, \"2 + 1 = {}\", 3);\n+32 |     writeln!(&mut v, \"2 + 1 = {}\", 3);\n    |                                    ^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:36:33\n+  --> $DIR/write_literal.rs:37:33\n    |\n-36 |     writeln!(&mut v, \"{0} {1}\", \"hello\", \"world\");\n+37 |     writeln!(&mut v, \"{0} {1}\", \"hello\", \"world\");\n    |                                 ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:36:42\n+  --> $DIR/write_literal.rs:37:42\n    |\n-36 |     writeln!(&mut v, \"{0} {1}\", \"hello\", \"world\");\n+37 |     writeln!(&mut v, \"{0} {1}\", \"hello\", \"world\");\n    |                                          ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:37:33\n+  --> $DIR/write_literal.rs:38:33\n    |\n-37 |     writeln!(&mut v, \"{1} {0}\", \"hello\", \"world\");\n+38 |     writeln!(&mut v, \"{1} {0}\", \"hello\", \"world\");\n    |                                 ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:37:42\n+  --> $DIR/write_literal.rs:38:42\n    |\n-37 |     writeln!(&mut v, \"{1} {0}\", \"hello\", \"world\");\n+38 |     writeln!(&mut v, \"{1} {0}\", \"hello\", \"world\");\n    |                                          ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:40:41\n+  --> $DIR/write_literal.rs:41:41\n    |\n-40 |     writeln!(&mut v, \"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n+41 |     writeln!(&mut v, \"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n    |                                         ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:40:54\n+  --> $DIR/write_literal.rs:41:54\n    |\n-40 |     writeln!(&mut v, \"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n+41 |     writeln!(&mut v, \"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n    |                                                      ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:41:41\n+  --> $DIR/write_literal.rs:42:41\n    |\n-41 |     writeln!(&mut v, \"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n+42 |     writeln!(&mut v, \"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n    |                                         ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:41:54\n+  --> $DIR/write_literal.rs:42:54\n    |\n-41 |     writeln!(&mut v, \"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n+42 |     writeln!(&mut v, \"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n    |                                                      ^^^^^^^\n \n error: aborting due to 14 previous errors"}]}