{"sha": "15bf62b475caa2e24f0186e8e2d6cd104cd72370", "node_id": "C_kwDOAAsO6NoAKDE1YmY2MmI0NzVjYWEyZTI0ZjAxODZlOGUyZDZjZDEwNGNkNzIzNzA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-02T13:26:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-02T13:26:58Z"}, "message": "Rollup merge of #97450 - c410-f3r:assert-compiler, r=oli-obk\n\n[RFC 2011] Basic compiler infrastructure\n\nSplitting https://github.com/rust-lang/rust/pull/96496 into smaller pieces as was done in https://github.com/rust-lang/rust/pull/97233. Hope review will be easier.\n\nThis PR practically contains no logic and only serves as a building ground for the actual code that will be placed in a posterior step.\n\n* Adds `context.rs` to place the new `assert!` logic. Has a lot of unused elements but all of them are used by the implementation.\n* Creates an unstable flag because the feature is not yet complete and also to allow external feedback.\n* Creates the necessary `sym` identifiers that are mostly based on the library elements -> https://github.com/rust-lang/rust/blob/master/library/core/src/asserting.rs\n* Modifies `assert.rs` to branch to `context.rs` if the unstable flag is enabled.\n* Adds a test to satisfy tidy but the test does nothing in reality.", "tree": {"sha": "f858be19cb2f67c7acf6ebab533fe0d7b3de56be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f858be19cb2f67c7acf6ebab533fe0d7b3de56be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15bf62b475caa2e24f0186e8e2d6cd104cd72370", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJimLqiCRBK7hj4Ov3rIwAAKUkIAFhJ+TG6r8EKk5v9QT2yOKOO\nUrjcOYd5vDdX1ySD2H/VqhDUYcVXas5mndCwKMjXkVmh7DjBqj7REgcz7iGlGBXl\nOwb2IylbgCyM8ZrsNRJkk34mIS8nRuRqWOVyzFncUwBdEJ73NAG3OW/EpI7n0AH3\nb/+huIi061VRVxf+EnCQg5fqAoDsRjh94h3216IqJWYuiycCAi1IR/GobbnVKUhH\nb48RTUTPTZcjikfgiKhp+bLObz+2smvo1Fzq6wofGhcKQRDEgfpWHAINVMu1U7AP\nywoCIwzMtIBA38QnawAnb+ppRYOtjcaVvHswASzumYXw490Ash/vFQxzaH8Q9Y0=\n=UHhR\n-----END PGP SIGNATURE-----\n", "payload": "tree f858be19cb2f67c7acf6ebab533fe0d7b3de56be\nparent 0b2d48e5af11ca20878ccb463fceba2c180a6a4a\nparent aa115eba12d6a12bfa4c51e3b6c187f28c42a889\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1654176418 +0200\ncommitter GitHub <noreply@github.com> 1654176418 +0200\n\nRollup merge of #97450 - c410-f3r:assert-compiler, r=oli-obk\n\n[RFC 2011] Basic compiler infrastructure\n\nSplitting https://github.com/rust-lang/rust/pull/96496 into smaller pieces as was done in https://github.com/rust-lang/rust/pull/97233. Hope review will be easier.\n\nThis PR practically contains no logic and only serves as a building ground for the actual code that will be placed in a posterior step.\n\n* Adds `context.rs` to place the new `assert!` logic. Has a lot of unused elements but all of them are used by the implementation.\n* Creates an unstable flag because the feature is not yet complete and also to allow external feedback.\n* Creates the necessary `sym` identifiers that are mostly based on the library elements -> https://github.com/rust-lang/rust/blob/master/library/core/src/asserting.rs\n* Modifies `assert.rs` to branch to `context.rs` if the unstable flag is enabled.\n* Adds a test to satisfy tidy but the test does nothing in reality.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15bf62b475caa2e24f0186e8e2d6cd104cd72370", "html_url": "https://github.com/rust-lang/rust/commit/15bf62b475caa2e24f0186e8e2d6cd104cd72370", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15bf62b475caa2e24f0186e8e2d6cd104cd72370/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b2d48e5af11ca20878ccb463fceba2c180a6a4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b2d48e5af11ca20878ccb463fceba2c180a6a4a", "html_url": "https://github.com/rust-lang/rust/commit/0b2d48e5af11ca20878ccb463fceba2c180a6a4a"}, {"sha": "aa115eba12d6a12bfa4c51e3b6c187f28c42a889", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa115eba12d6a12bfa4c51e3b6c187f28c42a889", "html_url": "https://github.com/rust-lang/rust/commit/aa115eba12d6a12bfa4c51e3b6c187f28c42a889"}], "stats": {"total": 154, "additions": 129, "deletions": 25}, "files": [{"sha": "0c75187193c38857904b1e0f316b9408e82469c1", "filename": "compiler/rustc_builtin_macros/src/assert.rs", "status": "modified", "additions": 48, "deletions": 22, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/15bf62b475caa2e24f0186e8e2d6cd104cd72370/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bf62b475caa2e24f0186e8e2d6cd104cd72370/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs?ref=15bf62b475caa2e24f0186e8e2d6cd104cd72370", "patch": "@@ -1,11 +1,13 @@\n+mod context;\n+\n use crate::edition_panic::use_panic_2021;\n use rustc_ast::ptr::P;\n use rustc_ast::token;\n use rustc_ast::tokenstream::{DelimSpan, TokenStream};\n-use rustc_ast::{self as ast, *};\n+use rustc_ast::{Expr, ExprKind, MacArgs, MacCall, MacDelimiter, Path, PathSegment, UnOp};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{Applicability, PResult};\n-use rustc_expand::base::*;\n+use rustc_expand::base::{DummyResult, ExtCtxt, MacEager, MacResult};\n use rustc_parse::parser::Parser;\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n@@ -25,13 +27,13 @@ pub fn expand_assert<'cx>(\n \n     // `core::panic` and `std::panic` are different macros, so we use call-site\n     // context to pick up whichever is currently in scope.\n-    let sp = cx.with_call_site_ctxt(span);\n+    let call_site_span = cx.with_call_site_ctxt(span);\n \n-    let panic_call = if let Some(tokens) = custom_message {\n-        let path = if use_panic_2021(span) {\n+    let panic_path = || {\n+        if use_panic_2021(span) {\n             // On edition 2021, we always call `$crate::panic::panic_2021!()`.\n             Path {\n-                span: sp,\n+                span: call_site_span,\n                 segments: cx\n                     .std_path(&[sym::panic, sym::panic_2021])\n                     .into_iter()\n@@ -42,27 +44,40 @@ pub fn expand_assert<'cx>(\n         } else {\n             // Before edition 2021, we call `panic!()` unqualified,\n             // such that it calls either `std::panic!()` or `core::panic!()`.\n-            Path::from_ident(Ident::new(sym::panic, sp))\n-        };\n-        // Pass the custom message to panic!().\n-        cx.expr(\n-            sp,\n+            Path::from_ident(Ident::new(sym::panic, call_site_span))\n+        }\n+    };\n+\n+    // Simply uses the user provided message instead of generating custom outputs\n+    let expr = if let Some(tokens) = custom_message {\n+        let then = cx.expr(\n+            call_site_span,\n             ExprKind::MacCall(MacCall {\n-                path,\n+                path: panic_path(),\n                 args: P(MacArgs::Delimited(\n-                    DelimSpan::from_single(sp),\n+                    DelimSpan::from_single(call_site_span),\n                     MacDelimiter::Parenthesis,\n                     tokens,\n                 )),\n                 prior_type_ascription: None,\n             }),\n-        )\n-    } else {\n+        );\n+        expr_if_not(cx, call_site_span, cond_expr, then, None)\n+    }\n+    // If `generic_assert` is enabled, generates rich captured outputs\n+    //\n+    // FIXME(c410-f3r) See https://github.com/rust-lang/rust/issues/96949\n+    else if let Some(features) = cx.ecfg.features && features.generic_assert {\n+        context::Context::new(cx, call_site_span).build(cond_expr, panic_path())\n+    }\n+    // If `generic_assert` is not enabled, only outputs a literal \"assertion failed: ...\"\n+    // string\n+    else {\n         // Pass our own message directly to $crate::panicking::panic(),\n         // because it might contain `{` and `}` that should always be\n         // passed literally.\n-        cx.expr_call_global(\n-            sp,\n+        let then = cx.expr_call_global(\n+            call_site_span,\n             cx.std_path(&[sym::panicking, sym::panic]),\n             vec![cx.expr_str(\n                 DUMMY_SP,\n@@ -71,18 +86,29 @@ pub fn expand_assert<'cx>(\n                     pprust::expr_to_string(&cond_expr).escape_debug()\n                 )),\n             )],\n-        )\n+        );\n+        expr_if_not(cx, call_site_span, cond_expr, then, None)\n     };\n-    let if_expr =\n-        cx.expr_if(sp, cx.expr(sp, ExprKind::Unary(UnOp::Not, cond_expr)), panic_call, None);\n-    MacEager::expr(if_expr)\n+\n+    MacEager::expr(expr)\n }\n \n struct Assert {\n-    cond_expr: P<ast::Expr>,\n+    cond_expr: P<Expr>,\n     custom_message: Option<TokenStream>,\n }\n \n+// if !{ ... } { ... } else { ... }\n+fn expr_if_not(\n+    cx: &ExtCtxt<'_>,\n+    span: Span,\n+    cond: P<Expr>,\n+    then: P<Expr>,\n+    els: Option<P<Expr>>,\n+) -> P<Expr> {\n+    cx.expr_if(span, cx.expr(span, ExprKind::Unary(UnOp::Not, cond)), then, els)\n+}\n+\n fn parse_assert<'a>(cx: &mut ExtCtxt<'a>, sp: Span, stream: TokenStream) -> PResult<'a, Assert> {\n     let mut parser = cx.new_parser_from_tts(stream);\n "}, {"sha": "8d187a4be8aee93be6fca8f36fb215ea929c9e8a", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/15bf62b475caa2e24f0186e8e2d6cd104cd72370/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bf62b475caa2e24f0186e8e2d6cd104cd72370/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=15bf62b475caa2e24f0186e8e2d6cd104cd72370", "patch": "@@ -0,0 +1,44 @@\n+use rustc_ast::{ptr::P, Expr, Path};\n+use rustc_expand::base::ExtCtxt;\n+use rustc_span::Span;\n+\n+pub(super) struct Context<'cx, 'a> {\n+    cx: &'cx ExtCtxt<'a>,\n+    span: Span,\n+}\n+\n+impl<'cx, 'a> Context<'cx, 'a> {\n+    pub(super) fn new(cx: &'cx ExtCtxt<'a>, span: Span) -> Self {\n+        Self { cx, span }\n+    }\n+\n+    /// Builds the whole `assert!` expression.\n+    ///\n+    /// {\n+    ///    use ::core::asserting::{ ... };\n+    ///\n+    ///    let mut __capture0 = Capture::new();\n+    ///    ...\n+    ///    ...\n+    ///    ...\n+    ///\n+    ///    if !{\n+    ///       ...\n+    ///       ...\n+    ///       ...\n+    ///    } {\n+    ///        panic!(\n+    ///            \"Assertion failed: ... \\n With expansion: ...\",\n+    ///            __capture0,\n+    ///            ...\n+    ///            ...\n+    ///            ...\n+    ///        );\n+    ///    }\n+    /// }\n+    pub(super) fn build(self, _cond_expr: P<Expr>, _panic_path: Path) -> P<Expr> {\n+        let Self { cx, span, .. } = self;\n+        let stmts = Vec::new();\n+        cx.expr_block(cx.block(span, stmts))\n+    }\n+}"}, {"sha": "48b1470ced5a05716181d6394ee0bb82ef5a48da", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15bf62b475caa2e24f0186e8e2d6cd104cd72370/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bf62b475caa2e24f0186e8e2d6cd104cd72370/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=15bf62b475caa2e24f0186e8e2d6cd104cd72370", "patch": "@@ -1,17 +1,18 @@\n //! This crate contains implementations of built-in macros and other code generating facilities\n //! injecting code into the crate before it is lowered to HIR.\n \n+#![allow(rustc::potential_query_instability)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(array_windows)]\n #![feature(box_patterns)]\n #![feature(decl_macro)]\n #![feature(is_sorted)]\n-#![feature(nll)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n+#![feature(nll)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n #![recursion_limit = \"256\"]\n-#![allow(rustc::potential_query_instability)]\n \n extern crate proc_macro;\n "}, {"sha": "e73c31c98fe32040a4cd21aac375b43947e03a22", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15bf62b475caa2e24f0186e8e2d6cd104cd72370/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bf62b475caa2e24f0186e8e2d6cd104cd72370/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=15bf62b475caa2e24f0186e8e2d6cd104cd72370", "patch": "@@ -160,7 +160,7 @@ impl<'a> ExtCtxt<'a> {\n             attrs: AttrVec::new(),\n             tokens: None,\n         });\n-        ast::Stmt { id: ast::DUMMY_NODE_ID, kind: ast::StmtKind::Local(local), span: sp }\n+        self.stmt_local(local, sp)\n     }\n \n     // Generates `let _: Type;`, which is usually used for type assertions.\n@@ -174,6 +174,10 @@ impl<'a> ExtCtxt<'a> {\n             attrs: AttrVec::new(),\n             tokens: None,\n         });\n+        self.stmt_local(local, span)\n+    }\n+\n+    pub fn stmt_local(&self, local: P<ast::Local>, span: Span) -> ast::Stmt {\n         ast::Stmt { id: ast::DUMMY_NODE_ID, kind: ast::StmtKind::Local(local), span }\n     }\n "}, {"sha": "1466e8dfc92e4d59a36ae587b9b1d3aedbf32419", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15bf62b475caa2e24f0186e8e2d6cd104cd72370/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bf62b475caa2e24f0186e8e2d6cd104cd72370/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=15bf62b475caa2e24f0186e8e2d6cd104cd72370", "patch": "@@ -150,6 +150,8 @@ declare_features! (\n     (active, allow_internal_unstable, \"1.0.0\", None, None),\n     /// Allows identifying the `compiler_builtins` crate.\n     (active, compiler_builtins, \"1.13.0\", None, None),\n+    /// Outputs useful `assert!` messages\n+    (active, generic_assert, \"1.63.0\", None, None),\n     /// Allows using the `rust-intrinsic`'s \"ABI\".\n     (active, intrinsics, \"1.0.0\", None, None),\n     /// Allows using `#[lang = \"..\"]` attribute for linking items to special compiler logic."}, {"sha": "f02465fe7dd0b804971d4da588a2f9a2de4cadf1", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15bf62b475caa2e24f0186e8e2d6cd104cd72370/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bf62b475caa2e24f0186e8e2d6cd104cd72370/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=15bf62b475caa2e24f0186e8e2d6cd104cd72370", "patch": "@@ -733,6 +733,7 @@ symbols! {\n         generator_state,\n         generators,\n         generic_arg_infer,\n+        generic_assert,\n         generic_associated_types,\n         generic_associated_types_extended,\n         generic_const_exprs,"}, {"sha": "f70ca87e304a91961d5b1c62f1b24204d6a9d3e7", "filename": "src/test/ui/rfc-2011-nicer-assert-messages/feature-gate-generic_assert.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/15bf62b475caa2e24f0186e8e2d6cd104cd72370/src%2Ftest%2Fui%2Frfc-2011-nicer-assert-messages%2Ffeature-gate-generic_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bf62b475caa2e24f0186e8e2d6cd104cd72370/src%2Ftest%2Fui%2Frfc-2011-nicer-assert-messages%2Ffeature-gate-generic_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2011-nicer-assert-messages%2Ffeature-gate-generic_assert.rs?ref=15bf62b475caa2e24f0186e8e2d6cd104cd72370", "patch": "@@ -0,0 +1,26 @@\n+// compile-flags: --test\n+// run-pass\n+\n+// `generic_assert` is completely unimplemented and doesn't generate any logic, thus the\n+// reason why this test currently passes\n+#![feature(core_intrinsics, generic_assert, generic_assert_internals)]\n+\n+use std::fmt::{Debug, Formatter};\n+\n+#[derive(Clone, Copy, PartialEq)]\n+struct CopyDebug(i32);\n+\n+impl Debug for CopyDebug {\n+  fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {\n+    f.write_str(\"With great power comes great electricity bills\")\n+  }\n+}\n+\n+#[test]\n+fn test() {\n+  let _copy_debug = CopyDebug(1);\n+  assert!(_copy_debug == CopyDebug(3));\n+}\n+\n+fn main() {\n+}"}]}