{"sha": "af19a50a2697392e89cdda2b94ab271459e1c729", "node_id": "C_kwDOAAsO6NoAKGFmMTlhNTBhMjY5NzM5MmU4OWNkZGEyYjk0YWIyNzE0NTllMWM3Mjk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-23T21:13:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-23T21:13:22Z"}, "message": "Rollup merge of #94249 - compiler-errors:better-copy-errors, r=davidtwco\n\nBetter errors when a Copy impl on a Struct is not self-consistent\n\nAs discovered in a Zulip thread with `@nnethercote` and `@Mark-Simulacrum,` it's not immediately obvious why a field on an ADT doesn't implement `Copy`.  This PR attempts to give slightly more detailed information by spinning up a fulfillment context to try to dig down and discover transitive fulfillment errors that cause `is_copy_modulo_regions` to fail on a ADT field.\n\nThe error message still kinda sucks, but should only show up in the case that an existing error message was totally missing... so I think it's a good compromise for now?", "tree": {"sha": "73deb8a87a4d78b97e4880e146fd7399bd658a49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73deb8a87a4d78b97e4880e146fd7399bd658a49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af19a50a2697392e89cdda2b94ab271459e1c729", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiO41yCRBK7hj4Ov3rIwAAZRIIAA7bQIWf5r7v5efIRarbQG3i\nGTJJLQ8/Hr2/04txzgwb2+EHLRf2AAo8ZHOTReX+ywiAEhmUe/vfpkWIgAq41011\nvpRSKY43mFB6ejYtT1jDN9OewMLM/YJZu3FHFA5GMnFd/okf+WN7lF7g3au3ih7q\nuq3X7JRCAV+lVZfHrmL2W19vX+tyRb+V2zbCIEbsi3qeSHMszWMqJzzXY37CZY02\nJZ6H+fAGnKAPeXln4+7/bdI/jBhEaDv2lOjsR/rgw3RVqNNgohKn2joDHZWJE77f\ncnz6AZQFRyMX1PoGoLt/Uj58gIPgjlb3Mg5W0GMor+2u50lJGu3dC0nmaqkUD8o=\n=aJ99\n-----END PGP SIGNATURE-----\n", "payload": "tree 73deb8a87a4d78b97e4880e146fd7399bd658a49\nparent 547369d3d881a9eb1de0d3e368f9a59aa7c648b0\nparent c8cbd3d03c92ec903a964b67dd90aa2cc6d78f2c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1648070002 +0100\ncommitter GitHub <noreply@github.com> 1648070002 +0100\n\nRollup merge of #94249 - compiler-errors:better-copy-errors, r=davidtwco\n\nBetter errors when a Copy impl on a Struct is not self-consistent\n\nAs discovered in a Zulip thread with `@nnethercote` and `@Mark-Simulacrum,` it's not immediately obvious why a field on an ADT doesn't implement `Copy`.  This PR attempts to give slightly more detailed information by spinning up a fulfillment context to try to dig down and discover transitive fulfillment errors that cause `is_copy_modulo_regions` to fail on a ADT field.\n\nThe error message still kinda sucks, but should only show up in the case that an existing error message was totally missing... so I think it's a good compromise for now?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af19a50a2697392e89cdda2b94ab271459e1c729", "html_url": "https://github.com/rust-lang/rust/commit/af19a50a2697392e89cdda2b94ab271459e1c729", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af19a50a2697392e89cdda2b94ab271459e1c729/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "547369d3d881a9eb1de0d3e368f9a59aa7c648b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/547369d3d881a9eb1de0d3e368f9a59aa7c648b0", "html_url": "https://github.com/rust-lang/rust/commit/547369d3d881a9eb1de0d3e368f9a59aa7c648b0"}, {"sha": "c8cbd3d03c92ec903a964b67dd90aa2cc6d78f2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8cbd3d03c92ec903a964b67dd90aa2cc6d78f2c", "html_url": "https://github.com/rust-lang/rust/commit/c8cbd3d03c92ec903a964b67dd90aa2cc6d78f2c"}], "stats": {"total": 104, "additions": 100, "deletions": 4}, "files": [{"sha": "b83b0bf1ca52eea50331e7aa1f89d254b47c7c5c", "filename": "compiler/rustc_trait_selection/src/traits/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af19a50a2697392e89cdda2b94ab271459e1c729/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af19a50a2697392e89cdda2b94ab271459e1c729/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs?ref=af19a50a2697392e89cdda2b94ab271459e1c729", "patch": "@@ -11,7 +11,7 @@ use crate::traits::error_reporting::InferCtxtExt;\n \n #[derive(Clone)]\n pub enum CopyImplementationError<'tcx> {\n-    InfrigingFields(Vec<&'tcx ty::FieldDef>),\n+    InfrigingFields(Vec<(&'tcx ty::FieldDef, Ty<'tcx>)>),\n     NotAnAdt,\n     HasDestructor,\n }\n@@ -67,7 +67,7 @@ pub fn can_type_implement_copy<'tcx>(\n                 match traits::fully_normalize(&infcx, ctx, cause, param_env, ty) {\n                     Ok(ty) => {\n                         if !infcx.type_is_copy_modulo_regions(param_env, ty, span) {\n-                            infringing.push(field);\n+                            infringing.push((field, ty));\n                         }\n                     }\n                     Err(errors) => {"}, {"sha": "3135e9996ab8b8a7dc798dd604ac8ed09c7bfda3", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/af19a50a2697392e89cdda2b94ab271459e1c729/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af19a50a2697392e89cdda2b94ab271459e1c729/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=af19a50a2697392e89cdda2b94ab271459e1c729", "patch": "@@ -91,8 +91,40 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n                 E0204,\n                 \"the trait `Copy` may not be implemented for this type\"\n             );\n-            for span in fields.iter().map(|f| tcx.def_span(f.did)) {\n-                err.span_label(span, \"this field does not implement `Copy`\");\n+            for (field, ty) in fields {\n+                let field_span = tcx.def_span(field.did);\n+                err.span_label(field_span, \"this field does not implement `Copy`\");\n+                // Spin up a new FulfillmentContext, so we can get the _precise_ reason\n+                // why this field does not implement Copy. This is useful because sometimes\n+                // it is not immediately clear why Copy is not implemented for a field, since\n+                // all we point at is the field itself.\n+                tcx.infer_ctxt().enter(|infcx| {\n+                    let mut fulfill_cx = traits::FulfillmentContext::new_ignoring_regions();\n+                    fulfill_cx.register_bound(\n+                        &infcx,\n+                        param_env,\n+                        ty,\n+                        tcx.lang_items().copy_trait().unwrap(),\n+                        traits::ObligationCause::dummy_with_span(field_span),\n+                    );\n+                    for error in fulfill_cx.select_all_or_error(&infcx) {\n+                        let error_predicate = error.obligation.predicate;\n+                        // Only note if it's not the root obligation, otherwise it's trivial and\n+                        // should be self-explanatory (i.e. a field literally doesn't implement Copy).\n+\n+                        // FIXME: This error could be more descriptive, especially if the error_predicate\n+                        // contains a foreign type or if it's a deeply nested type...\n+                        if error_predicate != error.root_obligation.predicate {\n+                            err.span_note(\n+                                error.obligation.cause.span,\n+                                &format!(\n+                                    \"the `Copy` impl for `{}` requires that `{}`\",\n+                                    ty, error_predicate\n+                                ),\n+                            );\n+                        }\n+                    }\n+                });\n             }\n             err.emit();\n         }"}, {"sha": "80bbe387ac719ffd612d7de87104d64abe1be762", "filename": "src/test/ui/coherence/deep-bad-copy-reason.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/af19a50a2697392e89cdda2b94ab271459e1c729/src%2Ftest%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af19a50a2697392e89cdda2b94ab271459e1c729/src%2Ftest%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.rs?ref=af19a50a2697392e89cdda2b94ab271459e1c729", "patch": "@@ -0,0 +1,40 @@\n+#![feature(extern_types)]\n+\n+extern \"Rust\" {\n+    type OpaqueListContents;\n+}\n+\n+pub struct ListS<T> {\n+    len: usize,\n+    data: [T; 0],\n+    opaque: OpaqueListContents,\n+}\n+\n+pub struct Interned<'a, T>(&'a T);\n+\n+impl<'a, T> Clone for Interned<'a, T> {\n+    fn clone(&self) -> Self {\n+        *self\n+    }\n+}\n+\n+impl<'a, T> Copy for Interned<'a, T> {}\n+\n+pub struct List<'tcx, T>(Interned<'tcx, ListS<T>>);\n+//~^ NOTE this field does not implement `Copy`\n+//~| NOTE the `Copy` impl for `Interned<'tcx, ListS<T>>` requires that `OpaqueListContents: Sized`\n+\n+impl<'tcx, T> Clone for List<'tcx, T> {\n+    fn clone(&self) -> Self {\n+        *self\n+    }\n+}\n+\n+impl<'tcx, T> Copy for List<'tcx, T> {}\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n+\n+fn assert_is_copy<T: Copy>() {}\n+\n+fn main() {\n+    assert_is_copy::<List<'static, ()>>();\n+}"}, {"sha": "295538cee60962b94da2a44414709af934bda0c1", "filename": "src/test/ui/coherence/deep-bad-copy-reason.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/af19a50a2697392e89cdda2b94ab271459e1c729/src%2Ftest%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af19a50a2697392e89cdda2b94ab271459e1c729/src%2Ftest%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.stderr?ref=af19a50a2697392e89cdda2b94ab271459e1c729", "patch": "@@ -0,0 +1,18 @@\n+error[E0204]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/deep-bad-copy-reason.rs:33:15\n+   |\n+LL | pub struct List<'tcx, T>(Interned<'tcx, ListS<T>>);\n+   |                          ------------------------ this field does not implement `Copy`\n+...\n+LL | impl<'tcx, T> Copy for List<'tcx, T> {}\n+   |               ^^^^\n+   |\n+note: the `Copy` impl for `Interned<'tcx, ListS<T>>` requires that `OpaqueListContents: Sized`\n+  --> $DIR/deep-bad-copy-reason.rs:23:26\n+   |\n+LL | pub struct List<'tcx, T>(Interned<'tcx, ListS<T>>);\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0204`."}, {"sha": "279808dd55bb4dea18fbaa79ccbbcc66d351fb9b", "filename": "src/test/ui/union/union-copy.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af19a50a2697392e89cdda2b94ab271459e1c729/src%2Ftest%2Fui%2Funion%2Funion-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af19a50a2697392e89cdda2b94ab271459e1c729/src%2Ftest%2Fui%2Funion%2Funion-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-copy.stderr?ref=af19a50a2697392e89cdda2b94ab271459e1c729", "patch": "@@ -6,6 +6,12 @@ LL |     a: std::mem::ManuallyDrop<String>\n ...\n LL | impl Copy for W {}\n    |      ^^^^\n+   |\n+note: the `Copy` impl for `ManuallyDrop<String>` requires that `String: Copy`\n+  --> $DIR/union-copy.rs:8:5\n+   |\n+LL |     a: std::mem::ManuallyDrop<String>\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}