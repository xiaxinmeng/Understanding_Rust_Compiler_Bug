{"sha": "36a3ebde96b49832fe9b0f683d13348abc1cc503", "node_id": "C_kwDOAAsO6NoAKDM2YTNlYmRlOTZiNDk4MzJmZTliMGY2ODNkMTMzNDhhYmMxY2M1MDM", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-18T10:44:55Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-30T09:23:58Z"}, "message": "fix behavior for empty impls", "tree": {"sha": "d2f4cbd1088fd9ba85ee421aaae85cec8096d463", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2f4cbd1088fd9ba85ee421aaae85cec8096d463"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36a3ebde96b49832fe9b0f683d13348abc1cc503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36a3ebde96b49832fe9b0f683d13348abc1cc503", "html_url": "https://github.com/rust-lang/rust/commit/36a3ebde96b49832fe9b0f683d13348abc1cc503", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36a3ebde96b49832fe9b0f683d13348abc1cc503/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d0d9cd718b22e4db049bb5df14c9f29869ed5be", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d0d9cd718b22e4db049bb5df14c9f29869ed5be", "html_url": "https://github.com/rust-lang/rust/commit/0d0d9cd718b22e4db049bb5df14c9f29869ed5be"}], "stats": {"total": 63, "additions": 37, "deletions": 26}, "files": [{"sha": "e1d6b5d2bd425672b7a07ded2a29a4a2cc09b14e", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/36a3ebde96b49832fe9b0f683d13348abc1cc503/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a3ebde96b49832fe9b0f683d13348abc1cc503/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=36a3ebde96b49832fe9b0f683d13348abc1cc503", "patch": "@@ -282,11 +282,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // found when exploring `all_traits`, but we also need them to be acurate on\n                     // our suggestions (#47759).\n                     let found_assoc = |ty: Ty<'tcx>| {\n-                        simplify_type(tcx, ty, TreatParams::AsPlaceholders).and_then(|simp| {\n-                            tcx.incoherent_impls(simp)\n-                            .iter()\n-                            .find_map(|&id| self.associated_value(id, item_name))\n-                        }).is_some()\n+                        simplify_type(tcx, ty, TreatParams::AsPlaceholders)\n+                            .and_then(|simp| {\n+                                tcx.incoherent_impls(simp)\n+                                    .iter()\n+                                    .find_map(|&id| self.associated_value(id, item_name))\n+                            })\n+                            .is_some()\n                     };\n                     let found_candidate = candidates.next().is_some()\n                         || found_assoc(tcx.types.i8)"}, {"sha": "e7f9ad911721ae09515ef3d9d1eaecf79aa325f4", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/36a3ebde96b49832fe9b0f683d13348abc1cc503/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a3ebde96b49832fe9b0f683d13348abc1cc503/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=36a3ebde96b49832fe9b0f683d13348abc1cc503", "patch": "@@ -7,7 +7,7 @@\n //! `tcx.inherent_impls(def_id)`). That value, however,\n //! is computed by selecting an idea from this table.\n \n-use rustc_errors::{pluralize, struct_span_err};\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n@@ -151,24 +151,33 @@ impl<'tcx> InherentCollect<'tcx> {\n         const ADD_ATTR: &str =\n             \"alternatively add `#[rustc_allow_incoherent_impl]` to the relevant impl items\";\n         if !self.tcx.hir().rustc_coherence_is_core() {\n-            for item in items {\n-                if !self.tcx.has_attr(item.id.def_id.to_def_id(), sym::rustc_allow_incoherent_impl)\n-                {\n-                    let mut err = struct_span_err!(\n-                        self.tcx.sess,\n-                        span,\n-                        E0390,\n-                        \"cannot define inherent `impl` for primitive types\",\n-                    );\n-\n-                    if self.tcx.features().rustc_attrs {\n-                        err.help(INTO_CORE).span_help(item.span, ADD_ATTR);\n-                    } else {\n-                        err.help(\"consider using a trait instead\");\n+            if self.tcx.features().rustc_attrs {\n+                for item in items {\n+                    if !self\n+                        .tcx\n+                        .has_attr(item.id.def_id.to_def_id(), sym::rustc_allow_incoherent_impl)\n+                    {\n+                        struct_span_err!(\n+                            self.tcx.sess,\n+                            span,\n+                            E0390,\n+                            \"cannot define inherent `impl` for primitive types outside of `core`\",\n+                        )\n+                        .help(INTO_CORE)\n+                        .span_help(item.span, ADD_ATTR)\n+                        .emit();\n+                        return;\n                     }\n-                    err.emit();\n-                    return;\n                 }\n+            } else {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    span,\n+                    E0390,\n+                    \"cannot define inherent `impl` for primitive types\",\n+                )\n+                .help(\"consider using an extension trait instead\")\n+                .emit();\n             }\n         }\n "}, {"sha": "e635d4ec196a271351a9dd1d8b52c68f2dc4077d", "filename": "src/test/ui/error-codes/E0390.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36a3ebde96b49832fe9b0f683d13348abc1cc503/src%2Ftest%2Fui%2Ferror-codes%2FE0390.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36a3ebde96b49832fe9b0f683d13348abc1cc503/src%2Ftest%2Fui%2Ferror-codes%2FE0390.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0390.stderr?ref=36a3ebde96b49832fe9b0f683d13348abc1cc503", "patch": "@@ -4,7 +4,7 @@ error[E0390]: cannot define inherent `impl` for primitive types\n LL | impl *mut Foo {}\n    |      ^^^^^^^^\n    |\n-   = help: consider using a trait instead\n+   = help: consider using an extension trait instead\n \n error: aborting due to previous error\n "}, {"sha": "c788317d786caad42944633c2e697e363e77eb61", "filename": "src/test/ui/kinds-of-primitive-impl.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36a3ebde96b49832fe9b0f683d13348abc1cc503/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36a3ebde96b49832fe9b0f683d13348abc1cc503/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.stderr?ref=36a3ebde96b49832fe9b0f683d13348abc1cc503", "patch": "@@ -4,23 +4,23 @@ error[E0390]: cannot define inherent `impl` for primitive types\n LL | impl u8 {\n    |      ^^\n    |\n-   = help: consider using a trait instead\n+   = help: consider using an extension trait instead\n \n error[E0390]: cannot define inherent `impl` for primitive types\n   --> $DIR/kinds-of-primitive-impl.rs:6:6\n    |\n LL | impl str {\n    |      ^^^\n    |\n-   = help: consider using a trait instead\n+   = help: consider using an extension trait instead\n \n error[E0390]: cannot define inherent `impl` for primitive types\n   --> $DIR/kinds-of-primitive-impl.rs:12:6\n    |\n LL | impl char {\n    |      ^^^^\n    |\n-   = help: consider using a trait instead\n+   = help: consider using an extension trait instead\n \n error: aborting due to 3 previous errors\n "}]}