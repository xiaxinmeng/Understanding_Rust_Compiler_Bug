{"sha": "4a8ba7b031728229cd30fe30e4d9f3cce6ece14c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhOGJhN2IwMzE3MjgyMjljZDMwZmUzMGU0ZDlmM2NjZTZlY2UxNGM=", "commit": {"author": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2020-10-07T04:58:02Z"}, "committer": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2020-10-13T16:50:59Z"}, "message": "dedicated visitor for arm patterns", "tree": {"sha": "6c42bd45cb070c43705cfd9176ae9e9c54984066", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c42bd45cb070c43705cfd9176ae9e9c54984066"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a8ba7b031728229cd30fe30e4d9f3cce6ece14c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE0u8S3YU336XkLsQOPNdIZH7vY1kFAl+F2vMACgkQPNdIZH7v\nY1mjVxAAnVnu8BIf6cmAQ/u0ys2CsHre9ddkZVxz30MEYi3iERIDYAdSIn4w6bBD\neuWdkqOiKx3X32iTlyuDUYmZfseILkemeXcEQDdmPUktp4VvO6Goa4jw8kPz9c3G\n0CkY8naGYNfwTcIP4JvIzKps0Skk8SxmneQ4r00wYXT2xeMSuWSLsdG30D3z0Uxf\nxi9IqvDOr5wYYbmDfBczezk+DDhFviFvBivGsAXinE7HJzbGWdVATu5pzuJwKZnm\nKfwyKWzo0p0rxX4H0OjNC6TrZvvGN9U5YwDJc7Fb6+VEXAJbDfCo65NKM57o+xW6\ngr1JgoOMJqikmgrrnzKtr+qSM6Bt1kpBaUgt2tKlFr1fBI5wQl5hh3/1+D7+raBm\nf1aHo6bYq8nLM00khEDCrjAcQSAtP7TrYSPUglMIJZAsNv4CleReBej2rrpDjAWV\nxPnU/rUxQssOc7lMLm7sP4IOIgXUsNAPOGk2mG2TZMyf4NWdP7hsSMUGP5Je8B+5\nHFIVN8vxliGnbNAM4Sges00JEDJRGYw+Nj+UT7OQIde4Vr1rQ6P/H05V5pKeJfTf\n7sx/uxtFZGh24GOZJNWZffd3L0hRMs6segfDSN8OzN4ra4JJPE7g26rWDi3hXNKT\nDSjYVn5NCyoTwPQiNcGJxY8ipQ0b2Ojdf6bKS0KvBTz+GRCSjHw=\n=kYwH\n-----END PGP SIGNATURE-----", "payload": "tree 6c42bd45cb070c43705cfd9176ae9e9c54984066\nparent df127b86cb90470d8ceebdd880db8ad4c372f91b\nauthor Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1602046682 +0800\ncommitter Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1602607859 +0800\n\ndedicated visitor for arm patterns\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a8ba7b031728229cd30fe30e4d9f3cce6ece14c", "html_url": "https://github.com/rust-lang/rust/commit/4a8ba7b031728229cd30fe30e4d9f3cce6ece14c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a8ba7b031728229cd30fe30e4d9f3cce6ece14c/comments", "author": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df127b86cb90470d8ceebdd880db8ad4c372f91b", "url": "https://api.github.com/repos/rust-lang/rust/commits/df127b86cb90470d8ceebdd880db8ad4c372f91b", "html_url": "https://github.com/rust-lang/rust/commit/df127b86cb90470d8ceebdd880db8ad4c372f91b"}], "stats": {"total": 59, "additions": 41, "deletions": 18}, "files": [{"sha": "677070c08e35e920b8d1728d7c62fc96d5547826", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/4a8ba7b031728229cd30fe30e4d9f3cce6ece14c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8ba7b031728229cd30fe30e4d9f3cce6ece14c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=4a8ba7b031728229cd30fe30e4d9f3cce6ece14c", "patch": "@@ -28,9 +28,8 @@ struct InteriorVisitor<'a, 'tcx> {\n     /// such borrows can span across this yield point.\n     /// As such, we need to track these borrows and record them despite of the fact\n     /// that they may succeed the said yield point in the post-order.\n-    nested_scope_of_guards: SmallVec<[SmallVec<[HirId; 4]>; 4]>,\n-    current_scope_of_guards: HirIdSet,\n-    arm_has_guard: bool,\n+    guard_bindings: SmallVec<[SmallVec<[HirId; 4]>; 1]>,\n+    guard_bindings_set: HirIdSet,\n }\n \n impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n@@ -147,9 +146,8 @@ pub fn resolve_interior<'a, 'tcx>(\n         expr_count: 0,\n         kind,\n         prev_unresolved_span: None,\n-        nested_scope_of_guards: <_>::default(),\n-        current_scope_of_guards: <_>::default(),\n-        arm_has_guard: false,\n+        guard_bindings: <_>::default(),\n+        guard_bindings_set: <_>::default(),\n     };\n     intravisit::walk_body(&mut visitor, body);\n \n@@ -228,25 +226,34 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n \n     fn visit_arm(&mut self, arm: &'tcx Arm<'tcx>) {\n         if arm.guard.is_some() {\n-            self.nested_scope_of_guards.push(<_>::default());\n-            self.arm_has_guard = true;\n+            self.guard_bindings.push(<_>::default());\n         }\n         self.visit_pat(&arm.pat);\n         if let Some(ref g) = arm.guard {\n+            self.guard_bindings.push(<_>::default());\n+            ArmPatCollector {\n+                guard_bindings_set: &mut self.guard_bindings_set,\n+                guard_bindings: self\n+                    .guard_bindings\n+                    .last_mut()\n+                    .expect(\"should have pushed at least one earlier\"),\n+            }\n+            .visit_pat(&arm.pat);\n+\n             match g {\n                 Guard::If(ref e) => {\n                     self.visit_expr(e);\n                 }\n             }\n+\n             let mut scope_var_ids =\n-                self.nested_scope_of_guards.pop().expect(\"should have pushed at least one earlier\");\n+                self.guard_bindings.pop().expect(\"should have pushed at least one earlier\");\n             for var_id in scope_var_ids.drain(..) {\n                 assert!(\n-                    self.current_scope_of_guards.remove(&var_id),\n+                    self.guard_bindings_set.remove(&var_id),\n                     \"variable should be placed in scope earlier\"\n                 );\n             }\n-            self.arm_has_guard = false;\n         }\n         self.visit_expr(&arm.body);\n     }\n@@ -256,14 +263,10 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n \n         self.expr_count += 1;\n \n-        if let PatKind::Binding(_, id, ..) = pat.kind {\n+        if let PatKind::Binding(..) = pat.kind {\n             let scope = self.region_scope_tree.var_scope(pat.hir_id.local_id);\n             let ty = self.fcx.typeck_results.borrow().pat_ty(pat);\n             self.record(ty, Some(scope), None, pat.span, false);\n-            if self.arm_has_guard {\n-                self.nested_scope_of_guards.as_mut_slice().last_mut().unwrap().push(id);\n-                self.current_scope_of_guards.insert(id);\n-            }\n         }\n     }\n \n@@ -299,8 +302,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n                 intravisit::walk_expr(self, expr);\n                 let res = self.fcx.typeck_results.borrow().qpath_res(qpath, expr.hir_id);\n                 match res {\n-                    Res::Local(id) if self.current_scope_of_guards.contains(&id) => {\n-                        debug!(\"a borrow in guard from pattern local is detected\");\n+                    Res::Local(id) if self.guard_bindings_set.contains(&id) => {\n                         guard_borrowing_from_pattern = true;\n                     }\n                     _ => {}\n@@ -350,3 +352,24 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n         }\n     }\n }\n+\n+struct ArmPatCollector<'a> {\n+    guard_bindings_set: &'a mut HirIdSet,\n+    guard_bindings: &'a mut SmallVec<[HirId; 4]>,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for ArmPatCollector<'a> {\n+    type Map = intravisit::ErasedMap<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_pat(&mut self, pat: &'tcx Pat<'tcx>) {\n+        intravisit::walk_pat(self, pat);\n+        if let PatKind::Binding(_, id, ..) = pat.kind {\n+            self.guard_bindings.push(id);\n+            self.guard_bindings_set.insert(id);\n+        }\n+    }\n+}"}]}