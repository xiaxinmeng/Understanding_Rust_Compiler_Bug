{"sha": "ea1f886e502bc826cd4e241d06ffd0ad26e95d00", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMWY4ODZlNTAyYmM4MjZjZDRlMjQxZDA2ZmZkMGFkMjZlOTVkMDA=", "commit": {"author": {"name": "nwin", "email": "nwin@users.noreply.github.com", "date": "2015-03-14T12:39:39Z"}, "committer": {"name": "nwin", "email": "nwin@users.noreply.github.com", "date": "2015-10-02T19:07:48Z"}, "message": "Use generic trait implementations for Cursor when possible.", "tree": {"sha": "68614ee86c8e29593d13a15dd8d0888e592a4f93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68614ee86c8e29593d13a15dd8d0888e592a4f93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea1f886e502bc826cd4e241d06ffd0ad26e95d00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea1f886e502bc826cd4e241d06ffd0ad26e95d00", "html_url": "https://github.com/rust-lang/rust/commit/ea1f886e502bc826cd4e241d06ffd0ad26e95d00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea1f886e502bc826cd4e241d06ffd0ad26e95d00/comments", "author": {"login": "nwin", "id": 949560, "node_id": "MDQ6VXNlcjk0OTU2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/949560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nwin", "html_url": "https://github.com/nwin", "followers_url": "https://api.github.com/users/nwin/followers", "following_url": "https://api.github.com/users/nwin/following{/other_user}", "gists_url": "https://api.github.com/users/nwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/nwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nwin/subscriptions", "organizations_url": "https://api.github.com/users/nwin/orgs", "repos_url": "https://api.github.com/users/nwin/repos", "events_url": "https://api.github.com/users/nwin/events{/privacy}", "received_events_url": "https://api.github.com/users/nwin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nwin", "id": 949560, "node_id": "MDQ6VXNlcjk0OTU2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/949560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nwin", "html_url": "https://github.com/nwin", "followers_url": "https://api.github.com/users/nwin/followers", "following_url": "https://api.github.com/users/nwin/following{/other_user}", "gists_url": "https://api.github.com/users/nwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/nwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nwin/subscriptions", "organizations_url": "https://api.github.com/users/nwin/orgs", "repos_url": "https://api.github.com/users/nwin/repos", "events_url": "https://api.github.com/users/nwin/events{/privacy}", "received_events_url": "https://api.github.com/users/nwin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17a2cb443a9dda03f2c35853fb69b981f179a4df", "url": "https://api.github.com/repos/rust-lang/rust/commits/17a2cb443a9dda03f2c35853fb69b981f179a4df", "html_url": "https://github.com/rust-lang/rust/commit/17a2cb443a9dda03f2c35853fb69b981f179a4df"}], "stats": {"total": 74, "additions": 25, "deletions": 49}, "files": [{"sha": "542b67adf2489d746092f1cb985f6e13ecccf510", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 25, "deletions": 49, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/ea1f886e502bc826cd4e241d06ffd0ad26e95d00/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea1f886e502bc826cd4e241d06ffd0ad26e95d00/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=ea1f886e502bc826cd4e241d06ffd0ad26e95d00", "patch": "@@ -192,67 +192,43 @@ impl<T> Cursor<T> {\n     pub fn set_position(&mut self, pos: u64) { self.pos = pos; }\n }\n \n-macro_rules! seek {\n-    () => {\n-        fn seek(&mut self, style: SeekFrom) -> io::Result<u64> {\n-            let pos = match style {\n-                SeekFrom::Start(n) => { self.pos = n; return Ok(n) }\n-                SeekFrom::End(n) => self.inner.len() as i64 + n,\n-                SeekFrom::Current(n) => self.pos as i64 + n,\n-            };\n-\n-            if pos < 0 {\n-                Err(Error::new(ErrorKind::InvalidInput,\n-                               \"invalid seek to a negative position\"))\n-            } else {\n-                self.pos = pos as u64;\n-                Ok(self.pos)\n-            }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T> io::Seek for Cursor<T> where T: AsRef<[u8]> {\n+    fn seek(&mut self, style: SeekFrom) -> io::Result<u64> {\n+        let pos = match style {\n+            SeekFrom::Start(n) => { self.pos = n; return Ok(n) }\n+            SeekFrom::End(n) => self.inner.as_ref().len() as i64 + n,\n+            SeekFrom::Current(n) => self.pos as i64 + n,\n+        };\n+\n+        if pos < 0 {\n+            Err(Error::new(ErrorKind::InvalidInput,\n+                           \"invalid seek to a negative position\"))\n+        } else {\n+            self.pos = pos as u64;\n+            Ok(self.pos)\n         }\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> io::Seek for Cursor<&'a [u8]> { seek!(); }\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> io::Seek for Cursor<&'a mut [u8]> { seek!(); }\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl io::Seek for Cursor<Vec<u8>> { seek!(); }\n-\n-macro_rules! read {\n-    () => {\n-        fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n-            let n = try!(Read::read(&mut try!(self.fill_buf()), buf));\n-            self.pos += n as u64;\n-            Ok(n)\n-        }\n+impl<T> Read for Cursor<T> where T: AsRef<[u8]> {\n+    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n+        let n = try!(Read::read(&mut try!(self.fill_buf()), buf));\n+        self.pos += n as u64;\n+        Ok(n)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Read for Cursor<&'a [u8]> { read!(); }\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Read for Cursor<&'a mut [u8]> { read!(); }\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Read for Cursor<Vec<u8>> { read!(); }\n-\n-macro_rules! buffer {\n-    () => {\n-        fn fill_buf(&mut self) -> io::Result<&[u8]> {\n-            let amt = cmp::min(self.pos, self.inner.len() as u64);\n-            Ok(&self.inner[(amt as usize)..])\n-        }\n-        fn consume(&mut self, amt: usize) { self.pos += amt as u64; }\n+impl<T> BufRead for Cursor<T> where T: AsRef<[u8]> {\n+    fn fill_buf(&mut self) -> io::Result<&[u8]> {\n+        let amt = cmp::min(self.pos, self.inner.as_ref().len() as u64);\n+        Ok(&self.inner.as_ref()[(amt as usize)..])\n     }\n+    fn consume(&mut self, amt: usize) { self.pos += amt as u64; }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> BufRead for Cursor<&'a [u8]> { buffer!(); }\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> BufRead for Cursor<&'a mut [u8]> { buffer!(); }\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> BufRead for Cursor<Vec<u8>> { buffer!(); }\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Write for Cursor<&'a mut [u8]> {\n     fn write(&mut self, data: &[u8]) -> io::Result<usize> {"}]}