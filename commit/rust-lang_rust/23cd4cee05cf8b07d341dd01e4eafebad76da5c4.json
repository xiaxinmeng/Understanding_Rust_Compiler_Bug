{"sha": "23cd4cee05cf8b07d341dd01e4eafebad76da5c4", "node_id": "C_kwDOAAsO6NoAKDIzY2Q0Y2VlMDVjZjhiMDdkMzQxZGQwMWU0ZWFmZWJhZDc2ZGE1YzQ", "commit": {"author": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2023-03-02T10:50:37Z"}, "committer": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2023-03-02T10:51:20Z"}, "message": "Add basic tests", "tree": {"sha": "f9d37d0d938d25adba5acaa9a51045debfdec043", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9d37d0d938d25adba5acaa9a51045debfdec043"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23cd4cee05cf8b07d341dd01e4eafebad76da5c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23cd4cee05cf8b07d341dd01e4eafebad76da5c4", "html_url": "https://github.com/rust-lang/rust/commit/23cd4cee05cf8b07d341dd01e4eafebad76da5c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23cd4cee05cf8b07d341dd01e4eafebad76da5c4/comments", "author": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e63f08c85d7bc2fb9cf2fad21d6d17359b0be15", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e63f08c85d7bc2fb9cf2fad21d6d17359b0be15", "html_url": "https://github.com/rust-lang/rust/commit/1e63f08c85d7bc2fb9cf2fad21d6d17359b0be15"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "a0e664acd130aae44f9df6c13803b9893ee1445c", "filename": "library/std/src/os/unix/fs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23cd4cee05cf8b07d341dd01e4eafebad76da5c4/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cd4cee05cf8b07d341dd01e4eafebad76da5c4/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs?ref=23cd4cee05cf8b07d341dd01e4eafebad76da5c4", "patch": "@@ -17,6 +17,10 @@ use crate::sealed::Sealed;\n #[allow(unused_imports)]\n use io::{Read, Write};\n \n+// Tests for this module\n+#[cfg(test)]\n+mod tests;\n+\n /// Unix-specific extensions to [`fs::File`].\n #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n pub trait FileExt {"}, {"sha": "67f607bd4683735e3508f3eed425d7c9216922ac", "filename": "library/std/src/os/unix/fs/tests.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/23cd4cee05cf8b07d341dd01e4eafebad76da5c4/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cd4cee05cf8b07d341dd01e4eafebad76da5c4/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs%2Ftests.rs?ref=23cd4cee05cf8b07d341dd01e4eafebad76da5c4", "patch": "@@ -0,0 +1,57 @@\n+use super::*;\n+\n+#[test]\n+fn read_vectored_at() {\n+    let msg = b\"preadv is working!\";\n+    let dir = crate::sys_common::io::test::tmpdir();\n+\n+    let filename = dir.join(\"preadv.txt\");\n+    {\n+        let mut file = fs::File::create(&filename).unwrap();\n+        file.write_all(msg).unwrap();\n+    }\n+    {\n+        let file = fs::File::open(&filename).unwrap();\n+        let mut buf0 = [0; 4];\n+        let mut buf1 = [0; 3];\n+\n+        let mut iovec = [io::IoSliceMut::new(&mut buf0), io::IoSliceMut::new(&mut buf1)];\n+\n+        let n = file.read_vectored_at(&mut iovec, 4).unwrap();\n+\n+        assert!(n == 4 || n == 7);\n+        assert_eq!(&buf0, b\"dv i\");\n+\n+        if n == 7 {\n+            assert_eq!(&buf1, b\"s w\");\n+        }\n+    }\n+}\n+\n+#[test]\n+fn write_vectored_at() {\n+    let msg = b\"pwritev is not working!\";\n+    let dir = crate::sys_common::io::test::tmpdir();\n+\n+    let filename = dir.join(\"preadv.txt\");\n+    {\n+        let mut file = fs::File::create(&filename).unwrap();\n+        file.write_all(msg).unwrap();\n+    }\n+    let expected = {\n+        let file = fs::File::options().write(true).open(&filename).unwrap();\n+        let buf0 = b\"    \";\n+        let buf1 = b\"great  \";\n+\n+        let iovec = [io::IoSlice::new(buf0), io::IoSlice::new(buf1)];\n+\n+        let n = file.write_vectored_at(&iovec, 11).unwrap();\n+\n+        assert!(n == 4 || n == 11);\n+\n+        if n == 4 { b\"pwritev is     working!\" } else { b\"pwritev is     great  !\" }\n+    };\n+\n+    let content = fs::read(&filename).unwrap();\n+    assert_eq!(&content, expected);\n+}"}]}