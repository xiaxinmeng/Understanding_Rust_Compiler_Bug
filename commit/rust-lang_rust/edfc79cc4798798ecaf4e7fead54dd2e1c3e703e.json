{"sha": "edfc79cc4798798ecaf4e7fead54dd2e1c3e703e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZmM3OWNjNDc5ODc5OGVjYWY0ZTdmZWFkNTRkZDJlMWMzZTcwM2U=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-04T04:44:42Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-04T04:44:52Z"}, "message": "Translate const vecs, most of const slices. More for #2317.", "tree": {"sha": "2de6f138e57a153b29a212371978c2a448f3d491", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2de6f138e57a153b29a212371978c2a448f3d491"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edfc79cc4798798ecaf4e7fead54dd2e1c3e703e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edfc79cc4798798ecaf4e7fead54dd2e1c3e703e", "html_url": "https://github.com/rust-lang/rust/commit/edfc79cc4798798ecaf4e7fead54dd2e1c3e703e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edfc79cc4798798ecaf4e7fead54dd2e1c3e703e/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "url": "https://api.github.com/repos/rust-lang/rust/commits/f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "html_url": "https://github.com/rust-lang/rust/commit/f23674394f2e77b7aa4686a5ae9f2f60d6faa428"}], "stats": {"total": 68, "additions": 58, "deletions": 10}, "files": [{"sha": "3d485338ffb99b563de7a9062fd6719cee1874a4", "filename": "src/rustc/middle/check_const.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/edfc79cc4798798ecaf4e7fead54dd2e1c3e703e/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edfc79cc4798798ecaf4e7fead54dd2e1c3e703e/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_const.rs?ref=edfc79cc4798798ecaf4e7fead54dd2e1c3e703e", "patch": "@@ -66,10 +66,7 @@ fn check_expr(sess: session, def_map: resolve3::DefMap,\n                           ~\"disallowed operator in constant expression\");\n             return;\n           }\n-          expr_lit(@{node: lit_str(_), _}) {\n-            sess.span_err(e.span,\n-                          ~\"string constants are not supported\");\n-          }\n+          expr_lit(@{node: lit_str(_), _}) { }\n           expr_binary(_, _, _) | expr_unary(_, _) {\n             if method_map.contains_key(e.id) {\n                 sess.span_err(e.span, ~\"user-defined operators are not \\\n@@ -101,6 +98,9 @@ fn check_expr(sess: session, def_map: resolve3::DefMap,\n               }\n             }\n           }\n+          expr_vstore(_, vstore_slice(_)) |\n+          expr_vstore(_, vstore_fixed(_)) |\n+          expr_vec(_, m_imm) |\n           expr_addr_of(m_imm, _) |\n           expr_tup(*) |\n           expr_rec(*) { }"}, {"sha": "03c0b303c09370388f65019dab2d2bd78a3f0a84", "filename": "src/rustc/middle/trans/consts.rs", "status": "modified", "additions": 44, "deletions": 5, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/edfc79cc4798798ecaf4e7fead54dd2e1c3e703e/src%2Frustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edfc79cc4798798ecaf4e7fead54dd2e1c3e703e/src%2Frustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=edfc79cc4798798ecaf4e7fead54dd2e1c3e703e", "patch": "@@ -25,21 +25,29 @@ fn const_lit(cx: @crate_ctxt, e: @ast::expr, lit: ast::lit)\n       ast::lit_float(fs, t) { C_floating(*fs, T_float_ty(cx, t)) }\n       ast::lit_bool(b) { C_bool(b) }\n       ast::lit_nil { C_nil() }\n-      ast::lit_str(s) {\n-        cx.sess.span_unimpl(lit.span, ~\"unique string in this context\");\n-      }\n+      ast::lit_str(s) { C_estr_slice(cx, *s) }\n     }\n }\n \n // FIXME (#2530): this should do some structural hash-consing to avoid\n // duplicate constants. I think. Maybe LLVM has a magical mode that does so\n // later on?\n+\n+fn const_vec_and_sz(cx: @crate_ctxt, e: @ast::expr, es: &[@ast::expr])\n+    -> (ValueRef, ValueRef) {\n+    let vec_ty = ty::expr_ty(cx.tcx, e);\n+    let unit_ty = ty::sequence_element_type(cx.tcx, vec_ty);\n+    let llunitty = type_of::type_of(cx, unit_ty);\n+    let v = C_array(llunitty, es.map(|e| const_expr(cx, e)));\n+    let unit_sz = shape::llsize_of(cx, llunitty);\n+    let sz = llvm::LLVMConstMul(C_uint(cx, es.len()), unit_sz);\n+    return (v, sz);\n+}\n+\n fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n     let _icx = cx.insn_ctxt(~\"const_expr\");\n     alt e.node {\n       ast::expr_lit(lit) { consts::const_lit(cx, e, *lit) }\n-      // If we have a vstore, just keep going; it has to be a string\n-      ast::expr_vstore(e, _) { const_expr(cx, e) }\n       ast::expr_binary(b, e1, e2) {\n         let te1 = const_expr(cx, e1);\n         let te2 = const_expr(cx, e2);\n@@ -147,6 +155,37 @@ fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n       ast::expr_rec(fs, none) {\n         C_struct(fs.map(|f| const_expr(cx, f.node.expr)))\n       }\n+      ast::expr_vec(es, m_imm) {\n+        let (v, _) = const_vec_and_sz(cx, e, es);\n+        v\n+      }\n+      ast::expr_vstore(e, ast::vstore_fixed(_)) {\n+        const_expr(cx, e)\n+      }\n+      ast::expr_vstore(sub, ast::vstore_slice(_)) {\n+        alt sub.node {\n+          ast::expr_lit(lit) {\n+            alt lit.node {\n+              ast::lit_str(*) => { const_expr(cx, sub) }\n+              _ => { cx.sess.span_bug(e.span,\n+                                      ~\"bad const-slice lit\") }\n+            }\n+          }\n+          ast::expr_vec(es, m_imm) => {\n+            let (cv, sz) = const_vec_and_sz(cx, e, es);\n+            let subty = ty::expr_ty(cx.tcx, sub),\n+            llty = type_of::type_of(cx, subty);\n+            let gv = do str::as_c_str(\"const\") |name| {\n+                llvm::LLVMAddGlobal(cx.llmod, llty, name)\n+            };\n+            llvm::LLVMSetInitializer(gv, cv);\n+            llvm::LLVMSetGlobalConstant(gv, True);\n+            C_struct(~[gv, sz])\n+          }\n+          _ => cx.sess.span_bug(e.span,\n+                                ~\"bad const-slice expr\")\n+        }\n+      }\n       ast::expr_path(path) {\n         alt cx.tcx.def_map.find(e.id) {\n           some(ast::def_const(def_id)) {"}, {"sha": "4fb90af66a2a00042edfba5f5a6227213fc3e465", "filename": "src/test/run-pass/const-region-ptrs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edfc79cc4798798ecaf4e7fead54dd2e1c3e703e/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edfc79cc4798798ecaf4e7fead54dd2e1c3e703e/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs?ref=edfc79cc4798798ecaf4e7fead54dd2e1c3e703e", "patch": "@@ -4,6 +4,8 @@ const x: &int = &10;\n const y: &{a: int, b: &int} = &{a: 15, b: x};\n \n fn main() {\n-    io::println(fmt!(\"x = %?\", x));\n+    io::println(fmt!(\"x = %?\", *x));\n     io::println(fmt!(\"y = {a: %?, b: %?}\", y.a, *(y.b)));\n+    assert *x == 10;\n+    assert *(y.b) == 10;\n }"}, {"sha": "4e5b7e81e9aee0ea3128503f41cfbf885fc9c4bf", "filename": "src/test/run-pass/const-vecs-and-slices.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/edfc79cc4798798ecaf4e7fead54dd2e1c3e703e/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edfc79cc4798798ecaf4e7fead54dd2e1c3e703e/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs?ref=edfc79cc4798798ecaf4e7fead54dd2e1c3e703e", "patch": "@@ -0,0 +1,7 @@\n+const x : [int]/4 = [1,2,3,4];\n+\n+fn main() {\n+    io::println(fmt!(\"%?\", x[1]));\n+    assert x[1] == 2;\n+    assert x[3] == 4;\n+}\n\\ No newline at end of file"}]}