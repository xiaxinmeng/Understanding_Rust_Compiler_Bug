{"sha": "c748c7b3febf5016ed1baa93448512e461dfb685", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NDhjN2IzZmViZjUwMTZlZDFiYWE5MzQ0ODUxMmU0NjFkZmI2ODU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-02T13:23:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-02T13:23:46Z"}, "message": "Rollup merge of #61380 - varkor:expected-usize-got-param, r=eddyb\n\nFix some issues with `unwrap_usize` instead of `assert_usize`\n\nFixes https://github.com/rust-lang/rust/issues/61337.\nFixes https://github.com/rust-lang/rust/issues/61341.\nFixes https://github.com/rust-lang/rust/issues/61422.\n\nr? @eddyb", "tree": {"sha": "42db5a8d00e6c6eb27542825a3522225a2465606", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42db5a8d00e6c6eb27542825a3522225a2465606"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c748c7b3febf5016ed1baa93448512e461dfb685", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc883iCRBK7hj4Ov3rIwAAdHIIACgV1PHtG9ueV0LyZidAUjXL\n65PhtB/4WBfMLDdoaTBdA+0/Jf1M/xl43JrrfgBlNtuonmVgXUNqJ/Eenmv6nnUq\n0Er9gcNJb2mE1Wqp342KmcxK7KcJvU+/Uoc222eUukuIC3DYin7HuStrhKhfMd86\nNEj5+UBFCb6NxlORb2xVQBf9J0XeeOVFXKDOQps9RzH2AgOWjiihasIgrNlFQVlA\nuQoS+vE/n7+ZKD0luDXiaMWcy1QXcC9FXDZy/jfdMkngms6Nwo3vBvgfvNnsJb8D\nib63VgSZtrZMsheHyBCfz9unSm9b+YMofDeLy3kwcFWiG4XCtXZ3jwEi/6Rxt50=\n=1vg3\n-----END PGP SIGNATURE-----\n", "payload": "tree 42db5a8d00e6c6eb27542825a3522225a2465606\nparent 538e17a3fdb517e0cd63f7c16d3292e7d710f7c7\nparent e82cd9528c127aff90d58a25573b9aeb43616c2b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1559481826 +0200\ncommitter GitHub <noreply@github.com> 1559481826 +0200\n\nRollup merge of #61380 - varkor:expected-usize-got-param, r=eddyb\n\nFix some issues with `unwrap_usize` instead of `assert_usize`\n\nFixes https://github.com/rust-lang/rust/issues/61337.\nFixes https://github.com/rust-lang/rust/issues/61341.\nFixes https://github.com/rust-lang/rust/issues/61422.\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c748c7b3febf5016ed1baa93448512e461dfb685", "html_url": "https://github.com/rust-lang/rust/commit/c748c7b3febf5016ed1baa93448512e461dfb685", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c748c7b3febf5016ed1baa93448512e461dfb685/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "538e17a3fdb517e0cd63f7c16d3292e7d710f7c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/538e17a3fdb517e0cd63f7c16d3292e7d710f7c7", "html_url": "https://github.com/rust-lang/rust/commit/538e17a3fdb517e0cd63f7c16d3292e7d710f7c7"}, {"sha": "e82cd9528c127aff90d58a25573b9aeb43616c2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e82cd9528c127aff90d58a25573b9aeb43616c2b", "html_url": "https://github.com/rust-lang/rust/commit/e82cd9528c127aff90d58a25573b9aeb43616c2b"}], "stats": {"total": 188, "additions": 160, "deletions": 28}, "files": [{"sha": "95312d55b3be1c6125d7a40a8c4e7eb0e75fd26c", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=c748c7b3febf5016ed1baa93448512e461dfb685", "patch": "@@ -914,8 +914,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n \n             // already reported in the query\n-            ConstEvalFailure(_) => {\n-                self.tcx.sess.delay_span_bug(span, \"constant in type had an ignored error\");\n+            ConstEvalFailure(err) => {\n+                self.tcx.sess.delay_span_bug(\n+                    span,\n+                    &format!(\"constant in type had an ignored error: {:?}\", err),\n+                );\n                 return;\n             }\n "}, {"sha": "6415122dd3905877fb0268868f6fffbb7cfb35bf", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=c748c7b3febf5016ed1baa93448512e461dfb685", "patch": "@@ -549,8 +549,8 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                     }\n                 }\n \n+                let count = count.assert_usize(tcx).ok_or(LayoutError::Unknown(ty))?;\n                 let element = self.layout_of(element)?;\n-                let count = count.unwrap_usize(tcx);\n                 let size = element.size.checked_mul(count, dl)\n                     .ok_or(LayoutError::SizeOverflow(ty))?;\n "}, {"sha": "42bd790ca2e9c47662da3e2a8662f0c858a67e55", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=c748c7b3febf5016ed1baa93448512e461dfb685", "patch": "@@ -342,9 +342,7 @@ fn fixed_vec_metadata(\n     let (size, align) = cx.size_and_align_of(array_or_slice_type);\n \n     let upper_bound = match array_or_slice_type.sty {\n-        ty::Array(_, len) => {\n-            len.unwrap_usize(cx.tcx) as c_longlong\n-        }\n+        ty::Array(_, len) => len.unwrap_usize(cx.tcx) as c_longlong,\n         _ => -1\n     };\n "}, {"sha": "8aa27eef72a5e022efa1e534520245934713184a", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=c748c7b3febf5016ed1baa93448512e461dfb685", "patch": "@@ -332,8 +332,8 @@ fn place_base_conflict<'a, 'gcx: 'tcx, 'tcx>(\n                 },\n                 (StaticKind::Promoted(promoted_1), StaticKind::Promoted(promoted_2)) => {\n                     if promoted_1 == promoted_2 {\n-                        if let ty::Array(_, size) = s1.ty.sty {\n-                            if size.unwrap_usize(tcx) == 0 {\n+                        if let ty::Array(_, len) = s1.ty.sty {\n+                            if let Some(0) = len.assert_usize(tcx) {\n                                 // Ignore conflicts with promoted [T; 0].\n                                 debug!(\"place_element_conflict: IGNORE-LEN-0-PROMOTED\");\n                                 return Overlap::Disjoint;"}, {"sha": "fe94181047fcd3a5b76b3940de3dc4e20dbbb4fc", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=c748c7b3febf5016ed1baa93448512e461dfb685", "patch": "@@ -316,8 +316,9 @@ impl Qualif for HasMutInterior {\n                     } else if let ty::Array(_, len) = ty.sty {\n                         // FIXME(eddyb) the `cx.mode == Mode::Fn` condition\n                         // seems unnecessary, given that this is merely a ZST.\n-                        if !(len.unwrap_usize(cx.tcx) == 0 && cx.mode == Mode::Fn) {\n-                            return true;\n+                        match len.assert_usize(cx.tcx) {\n+                            Some(0) if cx.mode == Mode::Fn => {},\n+                            _ => return true,\n                         }\n                     } else {\n                         return true;"}, {"sha": "64e2eedd721ef21ce8d155990fb4ca723c64f8ba", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=c748c7b3febf5016ed1baa93448512e461dfb685", "patch": "@@ -400,27 +400,36 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let expected_ty = self.structurally_resolved_type(pat.span, expected);\n                 let (inner_ty, slice_ty) = match expected_ty.sty {\n                     ty::Array(inner_ty, size) => {\n-                        let size = size.unwrap_usize(tcx);\n-                        let min_len = before.len() as u64 + after.len() as u64;\n-                        if slice.is_none() {\n-                            if min_len != size {\n-                                struct_span_err!(\n-                                    tcx.sess, pat.span, E0527,\n-                                    \"pattern requires {} elements but array has {}\",\n-                                    min_len, size)\n-                                    .span_label(pat.span, format!(\"expected {} elements\", size))\n+                        if let Some(size) = size.assert_usize(tcx) {\n+                            let min_len = before.len() as u64 + after.len() as u64;\n+                            if slice.is_none() {\n+                                if min_len != size {\n+                                    struct_span_err!(\n+                                        tcx.sess, pat.span, E0527,\n+                                        \"pattern requires {} elements but array has {}\",\n+                                        min_len, size)\n+                                        .span_label(pat.span, format!(\"expected {} elements\", size))\n+                                        .emit();\n+                                }\n+                                (inner_ty, tcx.types.err)\n+                            } else if let Some(rest) = size.checked_sub(min_len) {\n+                                (inner_ty, tcx.mk_array(inner_ty, rest))\n+                            } else {\n+                                struct_span_err!(tcx.sess, pat.span, E0528,\n+                                        \"pattern requires at least {} elements but array has {}\",\n+                                        min_len, size)\n+                                    .span_label(pat.span,\n+                                        format!(\"pattern cannot match array of {} elements\", size))\n                                     .emit();\n+                                (inner_ty, tcx.types.err)\n                             }\n-                            (inner_ty, tcx.types.err)\n-                        } else if let Some(rest) = size.checked_sub(min_len) {\n-                            (inner_ty, tcx.mk_array(inner_ty, rest))\n                         } else {\n-                            struct_span_err!(tcx.sess, pat.span, E0528,\n-                                    \"pattern requires at least {} elements but array has {}\",\n-                                    min_len, size)\n-                                .span_label(pat.span,\n-                                    format!(\"pattern cannot match array of {} elements\", size))\n-                                .emit();\n+                            struct_span_err!(\n+                                tcx.sess,\n+                                pat.span,\n+                                E0730,\n+                                \"cannot pattern-match on an array without a fixed length\",\n+                            ).emit();\n                             (inner_ty, tcx.types.err)\n                         }\n                     }"}, {"sha": "b5a50f43875816debe1ef11b32b13a456dcc7cd1", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=c748c7b3febf5016ed1baa93448512e461dfb685", "patch": "@@ -4648,6 +4648,38 @@ fn make_recursive_type() -> impl Sized {\n ```\n \"##,\n \n+E0730: r##\"\n+An array without a fixed length was pattern-matched.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0730\n+#![feature(const_generics)]\n+\n+fn is_123<const N: usize>(x: [u32; N]) -> bool {\n+    match x {\n+        [1, 2, 3] => true, // error: cannot pattern-match on an\n+                           //        array without a fixed length\n+        _ => false\n+    }\n+}\n+```\n+\n+Ensure that the pattern is consistent with the size of the matched\n+array. Additional elements can be matched with `..`:\n+\n+```\n+#![feature(slice_patterns)]\n+\n+let r = &[1, 2, 3, 4];\n+match r {\n+    &[a, b, ..] => { // ok!\n+        println!(\"a={}, b={}\", a, b);\n+    }\n+}\n+```\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "3ccf38e5619775499121eb5669eda91826931bb9", "filename": "src/test/ui/const-generics/issue-61422.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.rs?ref=c748c7b3febf5016ed1baa93448512e461dfb685", "patch": "@@ -0,0 +1,15 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+use std::mem;\n+\n+fn foo<const SIZE: usize>() {\n+    let arr: [u8; SIZE] = unsafe {\n+        let mut array: [u8; SIZE] = mem::uninitialized();\n+        array\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "4cb76ec4fe18c61680adc1b51dea377f2da2009c", "filename": "src/test/ui/const-generics/issue-61422.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.stderr?ref=c748c7b3febf5016ed1baa93448512e461dfb685", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-61422.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+"}, {"sha": "f930fb879632502ef3d4a38602f9761f19552ceb", "filename": "src/test/ui/const-generics/mut-ref-const-param-array.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.rs?ref=c748c7b3febf5016ed1baa93448512e461dfb685", "patch": "@@ -0,0 +1,19 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+use std::ops::AddAssign;\n+\n+fn inc<T: AddAssign + Clone, const N: usize>(v: &mut [T; N]) -> &mut [T; N] {\n+    for x in v.iter_mut() {\n+        *x += x.clone();\n+    }\n+    v\n+}\n+\n+fn main() {\n+    let mut v = [1, 2, 3];\n+    inc(&mut v);\n+    assert_eq!(v, [2, 4, 6]);\n+}"}, {"sha": "261d3578a11ac7e2306b5349318db6cefd3e56f2", "filename": "src/test/ui/const-generics/mut-ref-const-param-array.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.stderr?ref=c748c7b3febf5016ed1baa93448512e461dfb685", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/mut-ref-const-param-array.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+"}, {"sha": "794048174f903ef10b09c9c21911c1ed1b488c8f", "filename": "src/test/ui/const-generics/transparent-maybeunit-array-wrapper.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.rs?ref=c748c7b3febf5016ed1baa93448512e461dfb685", "patch": "@@ -0,0 +1,11 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+use std::mem::MaybeUninit;\n+\n+#[repr(transparent)]\n+pub struct MaybeUninitWrapper<const N: usize>(MaybeUninit<[u64; N]>);\n+\n+fn main() {}"}, {"sha": "661bbd113bc0db965a1a1155269b6e8f9e178842", "filename": "src/test/ui/const-generics/transparent-maybeunit-array-wrapper.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.stderr?ref=c748c7b3febf5016ed1baa93448512e461dfb685", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/transparent-maybeunit-array-wrapper.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+"}, {"sha": "e5048d6e6e320d0d12d16e87893c16ed4084e7d7", "filename": "src/test/ui/error-codes/E0730.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Ftest%2Fui%2Ferror-codes%2FE0730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Ftest%2Fui%2Ferror-codes%2FE0730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0730.rs?ref=c748c7b3febf5016ed1baa93448512e461dfb685", "patch": "@@ -0,0 +1,11 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+fn is_123<const N: usize>(x: [u32; N]) -> bool {\n+    match x {\n+        [1, 2, 3] => true, //~ ERROR cannot pattern-match on an array without a fixed length\n+        _ => false\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "f9281262bb71b9b98ce75c0f16ec74d7260d73d8", "filename": "src/test/ui/error-codes/E0730.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c748c7b3febf5016ed1baa93448512e461dfb685/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr?ref=c748c7b3febf5016ed1baa93448512e461dfb685", "patch": "@@ -0,0 +1,15 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/E0730.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+\n+error[E0730]: cannot pattern-match on an array without a fixed length\n+  --> $DIR/E0730.rs:6:9\n+   |\n+LL |         [1, 2, 3] => true,\n+   |         ^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0730`."}]}