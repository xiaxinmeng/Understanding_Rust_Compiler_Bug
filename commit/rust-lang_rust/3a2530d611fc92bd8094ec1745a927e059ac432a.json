{"sha": "3a2530d611fc92bd8094ec1745a927e059ac432a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMjUzMGQ2MTFmYzkyYmQ4MDk0ZWMxNzQ1YTkyN2UwNTlhYzQzMmE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-30T20:26:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-30T22:53:34Z"}, "message": "Test fixes and rebase conflicts\n\nAlso some tidying up of a bunch of crate attributes", "tree": {"sha": "0e02c7b12ca7ab267ba36903a535ec3cb286a23e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e02c7b12ca7ab267ba36903a535ec3cb286a23e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a2530d611fc92bd8094ec1745a927e059ac432a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a2530d611fc92bd8094ec1745a927e059ac432a", "html_url": "https://github.com/rust-lang/rust/commit/3a2530d611fc92bd8094ec1745a927e059ac432a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a2530d611fc92bd8094ec1745a927e059ac432a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "188d7c0bc36e69b99f6bdefd613027e53fa8b2d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/188d7c0bc36e69b99f6bdefd613027e53fa8b2d0", "html_url": "https://github.com/rust-lang/rust/commit/188d7c0bc36e69b99f6bdefd613027e53fa8b2d0"}], "stats": {"total": 459, "additions": 220, "deletions": 239}, "files": [{"sha": "b73623223fd4eecbc197eb940507ba40cf618059", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -9,21 +9,20 @@\n // except according to those terms.\n \n #![crate_type = \"bin\"]\n-#![allow(unknown_features)]\n-#![feature(slicing_syntax, unboxed_closures)]\n+\n #![feature(box_syntax)]\n+#![feature(collections)]\n+#![feature(core)]\n #![feature(int_uint)]\n-#![feature(test)]\n-#![feature(rustc_private)]\n-#![feature(std_misc)]\n-#![feature(path)]\n #![feature(io)]\n-#![feature(core)]\n-#![feature(collections)]\n #![feature(os)]\n+#![feature(path)]\n+#![feature(rustc_private)]\n+#![feature(slicing_syntax, unboxed_closures)]\n+#![feature(std_misc)]\n+#![feature(test)]\n #![feature(unicode)]\n \n-#![allow(unstable)]\n #![deny(warnings)]\n \n extern crate test;"}, {"sha": "122cffe36975f397a4974e9e3537e3e8d19a9189", "filename": "src/doc/trpl/patterns.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Fdoc%2Ftrpl%2Fpatterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Fdoc%2Ftrpl%2Fpatterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fpatterns.md?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -180,7 +180,7 @@ If you want to match against a slice or array, you can use `&`:\n fn main() {\n     let v = vec![\"match_this\", \"1\"];\n \n-    match &v {\n+    match &v[] {\n         [\"match_this\", second] => println!(\"The second element is {}\", second),\n         _ => {},\n     }"}, {"sha": "6b56c2b630346ff32c1cf6650917017e0204fc1a", "filename": "src/driver/driver.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fdriver.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![cfg_attr(rustc, feature(rustc_private))]\n #![cfg_attr(rustdoc, feature(rustdoc))]\n "}, {"sha": "1fc205b5f754dfb1c19bc41cbb4b487a165ca972", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -66,11 +66,10 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n #![no_std]\n-#![allow(unknown_features)]\n #![feature(lang_items, unsafe_destructor)]\n #![feature(box_syntax)]\n #![feature(optin_builtin_traits)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n+#![feature(int_uint)]\n #![feature(core)]\n #![feature(hash)]\n #![feature(libc)]"}, {"sha": "5ada51976ac9608fd565f5782adfb932f6044a8b", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -21,24 +21,21 @@\n \n #![crate_name = \"arena\"]\n #![unstable(feature = \"rustc_private\")]\n-#![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![allow(unknown_features)]\n-#![feature(unsafe_destructor)]\n-#![feature(unboxed_closures)]\n-#![feature(box_syntax)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n-#![allow(missing_docs)]\n #![feature(alloc)]\n+#![feature(box_syntax)]\n #![feature(core)]\n+#![feature(int_uint)]\n+#![feature(staged_api)]\n+#![feature(unboxed_closures)]\n+#![feature(unsafe_destructor)]\n #![cfg_attr(test, feature(test))]\n-#![cfg_attr(test, feature(collections))]\n \n extern crate alloc;\n "}, {"sha": "ce00bd48bb8baf321092b8bf8acdcc375f7a066c", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -15,27 +15,27 @@\n \n #![crate_name = \"collections\"]\n #![unstable(feature = \"collections\")]\n-#![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n-#![allow(unknown_features)]\n-#![feature(unsafe_destructor, slicing_syntax)]\n+#![cfg_attr(not(stage0), allow(unused_mut))] // NOTE: remove after stage0 snap\n+\n+#![feature(alloc)]\n #![feature(box_syntax)]\n-#![feature(unboxed_closures)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n-#![no_std]\n #![feature(core)]\n-#![feature(alloc)]\n-#![feature(unicode)]\n #![feature(hash)]\n+#![feature(int_uint)]\n+#![feature(staged_api)]\n+#![feature(unboxed_closures)]\n+#![feature(unicode)]\n+#![feature(unsafe_destructor, slicing_syntax)]\n #![cfg_attr(test, feature(test))]\n-// NOTE(stage0): remove after a snapshot\n-#![cfg_attr(not(stage0), allow(unused_mut))]\n+\n+#![no_std]\n \n #[macro_use]\n extern crate core;"}, {"sha": "7032a3d9137ab11f59ac4549ba2a5ac49652cef1", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -2204,7 +2204,7 @@ mod tests {\n                 d.push_back(i);\n             }\n \n-            assert_eq!(d.drain().collect::<Vec<i32>>(), [0, 1, 2, 3, 4]);\n+            assert_eq!(d.drain().collect::<Vec<_>>(), [0, 1, 2, 3, 4]);\n             assert!(d.is_empty());\n         }\n \n@@ -2214,21 +2214,21 @@ mod tests {\n             for i in 0..5 {\n                 d.push_back(i);\n             }\n-            for i in 6i..9 {\n+            for i in 6..9 {\n                 d.push_front(i);\n             }\n \n-            assert_eq!(d.drain().collect::<Vec<i32>>(), [8,7,6,0,1,2,3,4]);\n+            assert_eq!(d.drain().collect::<Vec<_>>(), [8,7,6,0,1,2,3,4]);\n             assert!(d.is_empty());\n         }\n \n         // partially used\n         {\n-            let mut d = RingBuf::new();\n+            let mut d: RingBuf<i32> = RingBuf::new();\n             for i in 0..5 {\n                 d.push_back(i);\n             }\n-            for i in 6i..9 {\n+            for i in 6..9 {\n                 d.push_front(i);\n             }\n \n@@ -2669,7 +2669,7 @@ mod tests {\n     #[test]\n     fn test_as_slices() {\n         let mut ring: RingBuf<i32> = RingBuf::with_capacity(127);\n-        let cap = ring.capacity() as int;\n+        let cap = ring.capacity() as i32;\n         let first = cap/2;\n         let last  = cap - first;\n         for i in 0..first {\n@@ -2690,14 +2690,14 @@ mod tests {\n             assert_eq!(right, expected_right);\n         }\n \n-        assert_eq!(ring.len() as int, cap);\n-        assert_eq!(ring.capacity() as int, cap);\n+        assert_eq!(ring.len() as i32, cap);\n+        assert_eq!(ring.capacity() as i32, cap);\n     }\n \n     #[test]\n     fn test_as_mut_slices() {\n         let mut ring: RingBuf<i32> = RingBuf::with_capacity(127);\n-        let cap = ring.capacity() as int;\n+        let cap = ring.capacity() as i32;\n         let first = cap/2;\n         let last  = cap - first;\n         for i in 0..first {\n@@ -2718,7 +2718,7 @@ mod tests {\n             assert_eq!(right, expected_right);\n         }\n \n-        assert_eq!(ring.len() as int, cap);\n-        assert_eq!(ring.capacity() as int, cap);\n+        assert_eq!(ring.len() as i32, cap);\n+        assert_eq!(ring.capacity() as i32, cap);\n     }\n }"}, {"sha": "c45879ae251a52546a3330db5f5c20824827845e", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -181,7 +181,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// let mut vec: Vec<int> = Vec::with_capacity(10);\n+    /// let mut vec: Vec<_> = Vec::with_capacity(10);\n     ///\n     /// // The vector contains no items, even though it has capacity for more\n     /// assert_eq!(vec.len(), 0);"}, {"sha": "d2bc30fa74a183335540d13a87ab739a8bf02ff1", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -49,7 +49,6 @@\n \n #![crate_name = \"core\"]\n #![unstable(feature = \"core\")]\n-#![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -58,15 +57,16 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![no_std]\n-#![allow(unknown_features, raw_pointer_derive)]\n-#![allow(unknown_features)] #![feature(intrinsics, lang_items)]\n+#![allow(raw_pointer_derive)]\n+#![deny(missing_docs)]\n+#![cfg_attr(not(stage0), allow(unused_mut))] // NOTE: remove after stage0 snap\n+\n+#![feature(int_uint)]\n+#![feature(intrinsics, lang_items)]\n+#![feature(on_unimplemented)]\n #![feature(simd, unsafe_destructor, slicing_syntax)]\n+#![feature(staged_api)]\n #![feature(unboxed_closures)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n-#![feature(on_unimplemented)]\n-#![deny(missing_docs)]\n-// NOTE(stage0) remove cfg_attr after a snapshot\n-#![cfg_attr(not(stage0), allow(unused_mut))]\n \n #[macro_use]\n mod macros;"}, {"sha": "b7c5c6640ced0132dddde8709a0c2b222b262e55", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -1728,11 +1728,11 @@ from_str_radix_int_impl! { u32 }\n from_str_radix_int_impl! { u64 }\n \n /// An error which can be returned when parsing an integer.\n-#[derive(Show, Clone, PartialEq)]\n+#[derive(Debug, Clone, PartialEq)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ParseIntError { kind: IntErrorKind }\n \n-#[derive(Show, Clone, PartialEq)]\n+#[derive(Debug, Clone, PartialEq)]\n enum IntErrorKind {\n     Empty,\n     InvalidDigit,\n@@ -1760,11 +1760,11 @@ impl Error for ParseIntError {\n }\n \n /// An error which can be returned when parsing a float.\n-#[derive(Show, Clone, PartialEq)]\n+#[derive(Debug, Clone, PartialEq)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ParseFloatError { kind: FloatErrorKind }\n \n-#[derive(Show, Clone, PartialEq)]\n+#[derive(Debug, Clone, PartialEq)]\n enum FloatErrorKind {\n     Empty,\n     Invalid,"}, {"sha": "cb7af3b3d35a1297fe73e529e2105435443b23fa", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -148,7 +148,7 @@ impl FromStr for bool {\n }\n \n /// An error returned when parsing a `bool` from a string fails.\n-#[derive(Show, Clone, PartialEq)]\n+#[derive(Debug, Clone, PartialEq)]\n #[allow(missing_copy_implementations)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ParseBoolError { _priv: () }"}, {"sha": "ae23024cf20ae5cbd5cf8df921e00dd3a04a1e28", "filename": "src/libcoretest/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibcoretest%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibcoretest%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fhash%2Fmod.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -76,12 +76,12 @@ fn test_writer_hasher() {\n     // FIXME (#18248) Add tests for hashing Rc<str> and Rc<[T]>\n \n     unsafe {\n-        let ptr: *const int = mem::transmute(5);\n+        let ptr: *const i32 = mem::transmute(5is);\n         assert_eq!(hash(&ptr), 5);\n     }\n \n     unsafe {\n-        let ptr: *mut int = mem::transmute(5);\n+        let ptr: *mut i32 = mem::transmute(5is);\n         assert_eq!(hash(&ptr), 5);\n     }\n }"}, {"sha": "3102abb660fb806f91595decd2985434b2e3db11", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -328,15 +328,15 @@ fn test_iterator_len() {\n \n #[test]\n fn test_iterator_sum() {\n-    let v: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+    let v: &[i32] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     assert_eq!(v[..4].iter().map(|&x| x).sum(), 6);\n     assert_eq!(v.iter().map(|&x| x).sum(), 55);\n     assert_eq!(v[..0].iter().map(|&x| x).sum(), 0);\n }\n \n #[test]\n fn test_iterator_product() {\n-    let v: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+    let v: &[i32] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     assert_eq!(v[..4].iter().map(|&x| x).product(), 0);\n     assert_eq!(v[1..5].iter().map(|&x| x).product(), 24);\n     assert_eq!(v[..0].iter().map(|&x| x).product(), 1);\n@@ -730,23 +730,23 @@ fn test_random_access_cycle() {\n \n #[test]\n fn test_double_ended_range() {\n-    assert!((11..14).rev().collect::<Vec<int>>() == vec![13, 12, 11]);\n+    assert!((11..14).rev().collect::<Vec<_>>() == vec![13, 12, 11]);\n     for _ in (10..0).rev() {\n         panic!(\"unreachable\");\n     }\n \n-    assert!((11u..14).rev().collect::<Vec<uint>>() == vec![13u, 12, 11]);\n-    for _ in (10u..0).rev() {\n+    assert!((11..14).rev().collect::<Vec<_>>() == vec![13, 12, 11]);\n+    for _ in (10..0).rev() {\n         panic!(\"unreachable\");\n     }\n }\n \n #[test]\n fn test_range() {\n-    assert!((0..5).collect::<Vec<int>>() == vec![0, 1, 2, 3, 4]);\n-    assert!((-10..-1).collect::<Vec<int>>() ==\n+    assert!((0..5).collect::<Vec<_>>() == vec![0, 1, 2, 3, 4]);\n+    assert!((-10..-1).collect::<Vec<_>>() ==\n                vec![-10, -9, -8, -7, -6, -5, -4, -3, -2]);\n-    assert!((0..5).rev().collect::<Vec<int>>() == vec![4, 3, 2, 1, 0]);\n+    assert!((0..5).rev().collect::<Vec<_>>() == vec![4, 3, 2, 1, 0]);\n     assert_eq!((200..-5).count(), 0);\n     assert_eq!((200..-5).rev().count(), 0);\n     assert_eq!((200..200).count(), 0);"}, {"sha": "c26d3e7bb8a7dd6b6ff0f72e094b9018b5594f98", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unsafe_destructor, slicing_syntax)]\n-#![feature(unboxed_closures)]\n #![feature(box_syntax)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n+#![feature(int_uint)]\n+#![feature(unboxed_closures)]\n+#![feature(unsafe_destructor, slicing_syntax)]\n \n extern crate core;\n extern crate test;"}, {"sha": "e7fb2ba56ab358c37651fb03e43a563bc958b41f", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -16,17 +16,17 @@\n \n #![crate_name = \"flate\"]\n #![unstable(feature = \"rustc_private\")]\n-#![feature(staged_api)]\n #![staged_api]\n-#![allow(unknown_features)] #![feature(int_uint)]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n-#![feature(hash)]\n+\n #![feature(core)]\n+#![feature(int_uint)]\n #![feature(libc)]\n+#![feature(staged_api)]\n \n #[cfg(test)] #[macro_use] extern crate log;\n "}, {"sha": "8a473ad43af19bf0bc36b51a7c167446b0ad1640", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -16,7 +16,6 @@\n \n #![crate_name = \"fmt_macros\"]\n #![unstable(feature = \"rustc_private\")]\n-#![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n@@ -25,10 +24,10 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n+#![cfg_attr(stage0, feature(core))]\n+#![feature(int_uint)]\n #![feature(slicing_syntax)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n-#![feature(collections)]\n-#![feature(core)]\n+#![feature(staged_api)]\n #![feature(unicode)]\n \n pub use self::Piece::*;"}, {"sha": "055672df5d14c04c78451496ee32bbcf1bd87490", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -80,19 +80,20 @@\n #![crate_name = \"getopts\"]\n #![unstable(feature = \"rustc_private\",\n             reason = \"use the crates.io `getopts` library instead\")]\n-#![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n-#![feature(slicing_syntax)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n+\n #![deny(missing_docs)]\n #![feature(collections)]\n #![feature(core)]\n+#![feature(int_uint)]\n+#![feature(slicing_syntax)]\n+#![feature(staged_api)]\n #![cfg_attr(test, feature(rustc_private))]\n \n #[cfg(test)] #[macro_use] extern crate log;"}, {"sha": "3606387ad2318202bd964e17c0ec61b26e2ff4fc", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -274,7 +274,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n #![feature(slicing_syntax)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n+#![feature(int_uint)]\n #![feature(collections)]\n #![feature(core)]\n #![feature(io)]"}, {"sha": "bd8537f53cd32b41948ef44d74301539b7ffbb96", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -15,7 +15,7 @@\n #![cfg_attr(not(feature = \"cargo-build\"), feature(staged_api))]\n #![cfg_attr(not(feature = \"cargo-build\"), staged_api)]\n #![cfg_attr(not(feature = \"cargo-build\"), feature(core))]\n-#![allow(unknown_features)] #![feature(int_uint)]\n+#![feature(int_uint)]\n #![no_std]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\","}, {"sha": "81d8c60f8939b92a1cdd0f232a324c2713c1d030", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -158,25 +158,22 @@\n #![crate_name = \"log\"]\n #![unstable(feature = \"rustc_private\",\n             reason = \"use the crates.io `log` library instead\")]\n-#![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n+#![deny(missing_docs)]\n \n-#![allow(unknown_features)]\n+#![feature(staged_api)]\n #![feature(slicing_syntax)]\n #![feature(box_syntax)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n-#![deny(missing_docs)]\n-#![feature(collections)]\n+#![feature(int_uint)]\n #![feature(core)]\n #![feature(io)]\n #![feature(os)]\n-#![feature(rustc_private)]\n #![feature(std_misc)]\n \n use std::cell::RefCell;"}, {"sha": "3ff400388721afdb0d60ac813371a94d4e4fd4e2", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -22,7 +22,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n-#![allow(unknown_features)] #![feature(int_uint)]\n+#![feature(int_uint)]\n #![no_std]\n #![unstable(feature = \"rand\")]\n #![feature(staged_api)]"}, {"sha": "acc21cbf0600f9dcd957bd7619bb6122de4e0441", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -17,21 +17,21 @@\n \n #![crate_name = \"rbml\"]\n #![unstable(feature = \"rustc_private\")]\n-#![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n-#![allow(unknown_features)]\n-#![feature(slicing_syntax)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n+\n #![feature(collections)]\n #![feature(core)]\n+#![feature(int_uint)]\n #![feature(io)]\n #![feature(rustc_private)]\n+#![feature(slicing_syntax)]\n+#![feature(staged_api)]\n \n extern crate serialize;\n #[macro_use] extern crate log;"}, {"sha": "6ae861fcb04241447609ddfc174775effd65a8df", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -16,33 +16,32 @@\n \n #![crate_name = \"rustc\"]\n #![unstable(feature = \"rustc_private\")]\n-#![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![allow(unknown_features)]\n-#![feature(quote)]\n-#![feature(slicing_syntax, unsafe_destructor)]\n+#![cfg_attr(not(stage0), allow(unused_mut))] // NOTE: remove after stage0 snap\n+\n #![feature(box_syntax)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n-#![feature(rustc_diagnostic_macros)]\n #![feature(collections)]\n #![feature(core)]\n+#![feature(hash)]\n+#![feature(int_uint)]\n #![feature(io)]\n #![feature(libc)]\n #![feature(os)]\n #![feature(path)]\n+#![feature(quote)]\n+#![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n+#![feature(slicing_syntax, unsafe_destructor)]\n+#![feature(staged_api)]\n #![feature(std_misc)]\n #![feature(unicode)]\n-#![feature(hash)]\n #![cfg_attr(test, feature(test))]\n-// NOTE(stage0) remove cfg_attr after a snapshot\n-#![cfg_attr(not(stage0), allow(unused_mut))]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "2c6b5797f572b3f4fafa142414abb7f70e59b876", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -23,23 +23,23 @@\n \n #![crate_name = \"rustc_back\"]\n #![unstable(feature = \"rustc_private\")]\n-#![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n-#![allow(unknown_features)]\n-#![feature(slicing_syntax, box_syntax)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n+\n+#![feature(box_syntax)]\n #![feature(collections)]\n #![feature(core)]\n #![feature(hash)]\n+#![feature(int_uint)]\n #![feature(io)]\n #![feature(os)]\n #![feature(path)]\n #![feature(rustc_private)]\n+#![feature(staged_api)]\n \n extern crate syntax;\n extern crate serialize;"}, {"sha": "031607728797ed29cd35716e2e776f20490c3a5c", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![crate_name = \"rustc_bitflags\"]\n-#![allow(unknown_features)]\n #![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"rlib\"]"}, {"sha": "c2677cc3fd0b386a27d16da3df43cec4a33fedb5", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -10,24 +10,23 @@\n \n #![crate_name = \"rustc_borrowck\"]\n #![unstable(feature = \"rustc_private\")]\n-#![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![allow(unknown_features)]\n-#![feature(quote)]\n-#![feature(slicing_syntax, unsafe_destructor)]\n-#![feature(rustc_diagnostic_macros)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n #![allow(non_camel_case_types)]\n-#![feature(collections)]\n+\n #![feature(core)]\n-#![feature(rustc_private)]\n #![feature(hash)]\n+#![feature(int_uint)]\n+#![feature(quote)]\n+#![feature(rustc_diagnostic_macros)]\n+#![feature(rustc_private)]\n+#![feature(staged_api)]\n+#![feature(unsafe_destructor)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "2eada1ff174f15ccc5beecbe369712d781b191f7", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -16,27 +16,26 @@\n \n #![crate_name = \"rustc_driver\"]\n #![unstable(feature = \"rustc_private\")]\n-#![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![allow(unknown_features)]\n-#![feature(quote)]\n-#![feature(slicing_syntax, unsafe_destructor)]\n #![feature(box_syntax)]\n-#![feature(rustc_diagnostic_macros)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n #![feature(collections)]\n #![feature(core)]\n+#![feature(int_uint)]\n #![feature(io)]\n #![feature(libc)]\n #![feature(os)]\n #![feature(path)]\n+#![feature(quote)]\n+#![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n+#![feature(slicing_syntax, unsafe_destructor)]\n+#![feature(staged_api)]\n #![feature(std_misc)]\n #![feature(unicode)]\n "}, {"sha": "a24bc6eaec351da4c8799545bef8670c5d01f5d8", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -15,24 +15,23 @@\n \n #![crate_name = \"rustc_llvm\"]\n #![unstable(feature = \"rustc_private\")]\n-#![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![allow(unknown_features)]\n-#![feature(link_args)]\n #![feature(box_syntax)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n #![feature(collections)]\n #![feature(core)]\n+#![feature(hash)]\n+#![feature(int_uint)]\n #![feature(libc)]\n+#![feature(link_args)]\n #![feature(path)]\n+#![feature(staged_api)]\n #![feature(std_misc)]\n-#![feature(hash)]\n \n extern crate libc;\n #[macro_use] #[no_link] extern crate rustc_bitflags;"}, {"sha": "14e80c6c8ef3ca40434690c0e18881d17a8de6c9", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -10,19 +10,18 @@\n \n #![crate_name = \"rustc_privacy\"]\n #![unstable(feature = \"rustc_private\")]\n-#![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![feature(rustc_diagnostic_macros)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n-#![feature(collections)]\n #![feature(core)]\n+#![feature(int_uint)]\n+#![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n+#![feature(staged_api)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "a753631ec80662b7db25afa943fc81deb02caaa1", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -10,23 +10,23 @@\n \n #![crate_name = \"rustc_resolve\"]\n #![unstable(feature = \"rustc_private\")]\n-#![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![feature(slicing_syntax)]\n-#![feature(rustc_diagnostic_macros)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n #![feature(alloc)]\n #![feature(collections)]\n #![feature(core)]\n+#![feature(hash)]\n+#![feature(int_uint)]\n+#![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n+#![feature(slicing_syntax)]\n+#![feature(staged_api)]\n #![feature(std_misc)]\n-#![feature(hash)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "c46c2b7e6ddaf2410f45f08a0e4bf1238c081f55", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -16,33 +16,32 @@\n \n #![crate_name = \"rustc_trans\"]\n #![unstable(feature = \"rustc_private\")]\n-#![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![allow(unknown_features)]\n-#![feature(quote)]\n-#![feature(slicing_syntax, unsafe_destructor)]\n-#![feature(box_syntax)]\n-#![feature(rustc_diagnostic_macros)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n+#![cfg_attr(not(stage0), allow(unused_mut))] // NOTE: remove after stage0 snap\n+\n #![feature(alloc)]\n+#![feature(box_syntax)]\n #![feature(collections)]\n #![feature(core)]\n+#![feature(hash)]\n+#![feature(int_uint)]\n #![feature(io)]\n #![feature(libc)]\n #![feature(os)]\n #![feature(path)]\n+#![feature(quote)]\n+#![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n+#![feature(slicing_syntax, unsafe_destructor)]\n+#![feature(staged_api)]\n #![feature(std_misc)]\n #![feature(unicode)]\n-#![feature(hash)]\n-// NOTE(stage0) remove cfg_attr after a snapshot\n-#![cfg_attr(not(stage0), allow(unused_mut))]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "fbeaae1d1dfa3a272ebd895447db8ca8b63ae2a4", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -130,7 +130,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                                      global: path.global,\n                                      segments: segs};\n             let qualname = if i == 0 && path.global {\n-                format(\"::{}\", path_to_string(&sub_path))\n+                format!(\"::{}\", path_to_string(&sub_path))\n             } else {\n                 path_to_string(&sub_path)\n             };\n@@ -169,7 +169,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n             return;\n         }\n \n-        let sub_paths = sub_paths[..len-1];\n+        let sub_paths = &sub_paths[..len-1];\n         for (i, &(ref span, ref qualname)) in sub_paths.iter().enumerate() {\n             let qualname = if i == 0 && global && !path.global {\n                 format!(\"::{}\", qualname)\n@@ -339,7 +339,6 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                     match self.analysis.ty_cx.map.get(def_id.node) {\n                         NodeItem(_) => {\n                             format!(\"::{}\", ty::item_path_str(&self.analysis.ty_cx, def_id))\n-                            result\n                         }\n                         _ => {\n                             self.sess.span_bug(method.span,\n@@ -1149,20 +1148,20 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n                 }\n             }\n             ast::ItemExternCrate(ref s) => {\n-                let name = get_ident(ident);\n+                let name = get_ident(item.ident);\n                 let name = name.get();\n                 let location = match *s {\n                     Some((ref s, _)) => s.get().to_string(),\n                     None => name.to_string(),\n                 };\n-                let alias_span = self.span.span_for_last_ident(i.span);\n-                let cnum = match self.sess.cstore.find_extern_mod_stmt_cnum(id) {\n+                let alias_span = self.span.span_for_last_ident(item.span);\n+                let cnum = match self.sess.cstore.find_extern_mod_stmt_cnum(item.id) {\n                     Some(cnum) => cnum,\n                     None => 0,\n                 };\n-                self.fmt.extern_crate_str(i.span,\n+                self.fmt.extern_crate_str(item.span,\n                                           alias_span,\n-                                          id,\n+                                          item.id,\n                                           cnum,\n                                           name,\n                                           &location[],"}, {"sha": "165eec5ecd717751cc4d573333d7546162d0f457", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -1865,7 +1865,7 @@ pub enum LvaluePreference {\n }\n \n /// Whether `autoderef` requires types to resolve.\n-#[derive(Copy, Show, PartialEq, Eq)]\n+#[derive(Copy, Debug, PartialEq, Eq)]\n pub enum UnresolvedTypeAction {\n     /// Produce an error and return `ty_err` whenever a type cannot\n     /// be resolved (i.e. it is `ty_infer`)."}, {"sha": "68f5ec9c8c2705eb710e0f05e0ade6a9bdd6adef", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -65,27 +65,26 @@ This API is completely unstable and subject to change.\n \n #![crate_name = \"rustc_typeck\"]\n #![unstable(feature = \"rustc_private\")]\n-#![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![allow(unknown_features)]\n-#![feature(quote)]\n-#![feature(slicing_syntax, unsafe_destructor)]\n-#![feature(box_syntax)]\n-#![feature(rustc_diagnostic_macros)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n #![allow(non_camel_case_types)]\n+#![cfg_attr(not(stage0), allow(unused_mut))] // NOTE: remove after stage0 snap\n+\n+#![feature(box_syntax)]\n #![feature(collections)]\n #![feature(core)]\n+#![feature(int_uint)]\n+#![feature(quote)]\n+#![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n+#![feature(slicing_syntax, unsafe_destructor)]\n+#![feature(staged_api)]\n #![feature(std_misc)]\n-// NOTE(stage0) remove cfg_attr after a snapshot\n-#![cfg_attr(not(stage0), allow(unused_mut))]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "7e08226019f9849ca56a1f7e7538a59201381f31", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -420,7 +420,7 @@ impl LangString {\n         let mut seen_other_tags = false;\n         let mut data = LangString::all_false();\n \n-        let mut tokens = string.split(|&: c: char|\n+        let tokens = string.split(|&: c: char|\n             !(c == '_' || c == '-' || c.is_alphanumeric())\n         );\n "}, {"sha": "8a007fb035e30772e38531d100da9890d8ae46eb", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -1942,7 +1942,7 @@ fn item_enum(w: &mut fmt::Formatter, it: &clean::Item,\n                 clean::VariantItem(ref var) => {\n                     match var.kind {\n                         clean::StructVariant(ref s) => {\n-                            let mut fields = s.fields.iter().filter(|f| {\n+                            let fields = s.fields.iter().filter(|f| {\n                                 match f.inner {\n                                     clean::StructFieldItem(ref t) => match *t {\n                                         clean::HiddenStructField => false,"}, {"sha": "29e52d627cdfe8c98eaad8ed5d1476edd28f3313", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -10,30 +10,29 @@\n \n #![crate_name = \"rustdoc\"]\n #![unstable(feature = \"rustdoc\")]\n-#![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n-#![feature(slicing_syntax)]\n+\n #![feature(box_syntax)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n #![feature(collections)]\n #![feature(core)]\n+#![feature(hash)]\n+#![feature(int_uint)]\n #![feature(io)]\n #![feature(libc)]\n #![feature(os)]\n #![feature(path)]\n #![feature(rustc_private)]\n+#![feature(slicing_syntax)]\n+#![feature(staged_api)]\n #![feature(std_misc)]\n #![feature(test)]\n #![feature(unicode)]\n-#![feature(hash)]\n-// NOTE(stage0) remove cfg_attr after a snapshot\n-#![cfg_attr(not(stage0), allow(unused_mut))]\n \n extern crate arena;\n extern crate getopts;"}, {"sha": "e86ee4a73cea96b42ff148f66f9862ad7bbee320", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -17,24 +17,23 @@ Core encoding and decoding interfaces.\n #![crate_name = \"serialize\"]\n #![unstable(feature = \"rustc_private\",\n             reason = \"deprecated in favor of rustc-serialize on crates.io\")]\n-#![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n-#![allow(unknown_features)]\n+\n #![feature(box_syntax)]\n-#![feature(old_impl_check)]\n-#![feature(slicing_syntax)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n #![feature(collections)]\n #![feature(core)]\n+#![feature(int_uint)]\n #![feature(io)]\n #![feature(path)]\n #![feature(rustc_private)]\n+#![feature(slicing_syntax)]\n+#![feature(staged_api)]\n #![feature(std_misc)]\n #![feature(unicode)]\n #![cfg_attr(test, feature(test))]"}, {"sha": "96aebb735ef123ea1fb3f0e495778f97089f0a4c", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -97,7 +97,6 @@\n \n #![crate_name = \"std\"]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n@@ -106,30 +105,29 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n-#![allow(unknown_features)]\n-#![feature(linkage, thread_local, asm)]\n-#![feature(lang_items, unsafe_destructor)]\n-#![feature(slicing_syntax, unboxed_closures)]\n+#![feature(alloc)]\n #![feature(box_syntax)]\n-#![feature(old_impl_check)]\n-#![feature(optin_builtin_traits)]\n-#![feature(int_uint)]\n+#![feature(collections)]\n #![feature(core)]\n+#![feature(hash)]\n+#![feature(int_uint)]\n+#![feature(lang_items, unsafe_destructor)]\n #![feature(libc)]\n-#![feature(alloc)]\n-#![feature(unicode)]\n-#![feature(collections)]\n+#![feature(linkage, thread_local, asm)]\n+#![feature(old_impl_check)]\n+#![feature(optin_builtin_traits)]\n #![feature(rand)]\n-#![feature(hash)]\n+#![feature(staged_api)]\n+#![feature(unboxed_closures)]\n+#![feature(unicode)]\n+#![cfg_attr(not(stage0), feature(macro_reexport))]\n #![cfg_attr(test, feature(test))]\n-// NOTE(stage0): remove cfg_attr after a snapshot\n-#![cfg_attr(not(stage0), allow(unused_mut))]\n-#![feature(macro_reexport)]\n \n // Don't link to std. We are std.\n #![no_std]\n \n #![deny(missing_docs)]\n+#![cfg_attr(not(stage0), allow(unused_mut))] // NOTE: remove after stage0 snap\n \n #[cfg(test)]\n #[macro_use]"}, {"sha": "1337675544d3171c1dcd577ffc218bb6e2516d35", "filename": "src/libstd/old_io/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibstd%2Fold_io%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibstd%2Fold_io%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ffs.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -1101,10 +1101,10 @@ mod test {\n         let dir = &tmpdir.join(\"di_readdir\");\n         check!(mkdir(dir, old_io::USER_RWX));\n         let prefix = \"foo\";\n-        for n in 0..3 {\n+        for n in 0is..3 {\n             let f = dir.join(format!(\"{}.txt\", n));\n             let mut w = check!(File::create(&f));\n-            let msg_str = format!(\"{}{}\", prefix, n.to_string());\n+            let msg_str = format!(\"{}{}\", prefix, n);\n             let msg = msg_str.as_bytes();\n             check!(w.write(msg));\n         }"}, {"sha": "565f9d8381801a4573c1f5766e2544017010bed8", "filename": "src/libstd/old_io/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -369,7 +369,7 @@ impl FromStr for SocketAddr {\n     }\n }\n \n-#[derive(Show, Clone, PartialEq, Copy)]\n+#[derive(Debug, Clone, PartialEq, Copy)]\n pub struct ParseError;\n \n /// A trait for objects which can be converted or resolved to one or more `SocketAddr` values."}, {"sha": "122ac4c3445cc3c20f4541dec81f9bb93dd3ae7e", "filename": "src/libstd/old_io/net/tcp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -1160,7 +1160,7 @@ mod test {\n                 tx.send(TcpStream::connect(addr).unwrap()).unwrap();\n             });\n             let _l = rx.recv().unwrap();\n-            for i in 0..1001 {\n+            for i in 0is..1001 {\n                 match a.accept() {\n                     Ok(..) => break,\n                     Err(ref e) if e.kind == TimedOut => {}\n@@ -1260,7 +1260,7 @@ mod test {\n         assert_eq!(s.read(&mut [0]).err().unwrap().kind, TimedOut);\n \n         s.set_timeout(Some(20));\n-        for i in 0..1001 {\n+        for i in 0is..1001 {\n             match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,\n@@ -1318,7 +1318,7 @@ mod test {\n \n         let mut s = a.accept().unwrap();\n         s.set_write_timeout(Some(20));\n-        for i in 0..1001 {\n+        for i in 0is..1001 {\n             match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,"}, {"sha": "6a0c8a930107095a6216df3f646f2ac19476ea2c", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -97,7 +97,7 @@ impl FromStr for Path {\n }\n \n /// Valuelue indicating that a path could not be parsed from a string.\n-#[derive(Show, Clone, PartialEq, Copy)]\n+#[derive(Debug, Clone, PartialEq, Copy)]\n pub struct ParsePathError;\n \n impl<S: hash::Writer + hash::Hasher> hash::Hash<S> for Path {"}, {"sha": "b524b89ef9fb27b24a18bf26bccd5c90cfcbf392", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -126,7 +126,7 @@ impl FromStr for Path {\n }\n \n /// Value indicating that a path could not be parsed from a string.\n-#[derive(Show, Clone, PartialEq, Copy)]\n+#[derive(Debug, Clone, PartialEq, Copy)]\n pub struct ParsePathError;\n \n impl<S: hash::Writer + hash::Hasher> hash::Hash<S> for Path {"}, {"sha": "fb40a6c8f609d37c4005d488f207f31147baf191", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -160,7 +160,7 @@ pub fn panicking() -> bool {\n // An uninlined, unmangled function upon which to slap yer breakpoints\n #[inline(never)]\n #[no_mangle]\n-#[allow(private_no_mangle_fns)]\n+#[cfg_attr(not(stage0), allow(private_no_mangle_fns))]\n fn rust_panic(cause: Box<Any + Send>) -> ! {\n     rtdebug!(\"begin_unwind()\");\n \n@@ -238,7 +238,7 @@ pub mod eabi {\n \n     #[lang=\"eh_personality\"]\n     #[no_mangle] // referenced from rust_try.ll\n-    #[allow(private_no_mangle_fns)]\n+    #[cfg_attr(not(stage0), allow(private_no_mangle_fns))]\n     extern fn rust_eh_personality(\n         version: c_int,\n         actions: uw::_Unwind_Action,"}, {"sha": "775cfede70d9b3faf86776bcad43b9c202aff1dc", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -110,7 +110,7 @@ static KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n     (\"int_uint\", \"1.0.0\", Active),\n \n     // macro reexport needs more discusion and stabilization\n-    (\"macro_reexport\", Active),\n+    (\"macro_reexport\", \"1.0.0\", Active),\n \n     // These are used to test this portion of the compiler, they don't actually\n     // mean anything"}, {"sha": "73424136cfbcb44594e0f6d964197b45dcaec803", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -16,31 +16,30 @@\n \n #![crate_name = \"syntax\"]\n #![unstable(feature = \"rustc_private\")]\n-#![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![allow(unknown_features)]\n-#![feature(slicing_syntax)]\n+#![cfg_attr(not(stage0), allow(unused_mut))] // NOTE: remove after stage0 snap\n+\n #![feature(box_syntax)]\n-#![feature(quote, unsafe_destructor)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n #![feature(collections)]\n #![feature(core)]\n #![feature(hash)]\n+#![feature(int_uint)]\n #![feature(io)]\n #![feature(libc)]\n #![feature(os)]\n #![feature(path)]\n+#![feature(quote, unsafe_destructor)]\n #![feature(rustc_private)]\n+#![feature(slicing_syntax)]\n+#![feature(staged_api)]\n #![feature(std_misc)]\n #![feature(unicode)]\n-// NOTE(stage0) remove cfg_attr after a snapshot\n-#![cfg_attr(not(stage0), allow(unused_mut))]\n \n extern crate arena;\n extern crate fmt_macros;"}, {"sha": "27a46fb5a682ddc3b1475a40c5c03c0218bb02ef", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -41,26 +41,25 @@\n #![crate_name = \"term\"]\n #![unstable(feature = \"rustc_private\",\n             reason = \"use the crates.io `term` library instead\")]\n-#![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n+#![deny(missing_docs)]\n \n-#![allow(unknown_features)]\n-#![feature(slicing_syntax)]\n #![feature(box_syntax)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n-#![deny(missing_docs)]\n #![feature(collections)]\n #![feature(core)]\n+#![feature(int_uint)]\n #![feature(io)]\n #![feature(os)]\n #![feature(path)]\n #![feature(rustc_private)]\n+#![feature(slicing_syntax)]\n+#![feature(staged_api)]\n #![feature(std_misc)]\n #![feature(unicode)]\n "}, {"sha": "f22c58c54a6851a00cff14575b378ef1225b86f4", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -25,27 +25,27 @@\n \n #![crate_name = \"test\"]\n #![unstable(feature = \"test\")]\n-#![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n-#![allow(unknown_features)]\n+\n+#![cfg_attr(not(stage0), allow(unused_mut))] // NOTE: remove after stage0 snap\n+\n #![feature(asm, slicing_syntax)]\n #![feature(box_syntax)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n #![feature(collections)]\n #![feature(core)]\n+#![feature(hash)]\n+#![feature(int_uint)]\n #![feature(io)]\n #![feature(os)]\n #![feature(path)]\n #![feature(rustc_private)]\n+#![feature(staged_api)]\n #![feature(std_misc)]\n-#![feature(hash)]\n-// NOTE(stage0): remove cfg_attr after a snapshot\n-#![cfg_attr(not(stage0), allow(unused_mut))]\n \n extern crate getopts;\n extern crate serialize;"}, {"sha": "822dde7eb2c61084045b3cedbe57a6032d8f64b5", "filename": "src/libunicode/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibunicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Flibunicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Flib.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -31,7 +31,7 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![no_std]\n #![feature(slicing_syntax)]\n-#![allow(unknown_features)] #![feature(int_uint)]\n+#![feature(int_uint)]\n #![feature(core)]\n \n extern crate core;"}, {"sha": "e159e9729b635a2c416931c41a9361676045f091", "filename": "src/rustllvm/llvm-auto-clean-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Frustllvm%2Fllvm-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Frustllvm%2Fllvm-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-auto-clean-trigger?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be forcibly cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2015-01-18\n+2015-01-30"}, {"sha": "3c01697166e8bdafdd19f84925d8d1c471335d37", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -104,8 +104,8 @@ impl<'a, T> Iterator for ListIterator<'a, T> {\n // corresponding mirrored piece), with, as minimum coordinates, (0,\n // 0).  If all is false, only generate half of the possibilities (used\n // to break the symmetry of the board).\n-fn transform(piece: Vec<(int, int)> , all: bool) -> Vec<Vec<(int, int)>> {\n-    let mut res: Vec<Vec<(int, int)>> =\n+fn transform(piece: Vec<(isize, isize)> , all: bool) -> Vec<Vec<(isize, isize)>> {\n+    let mut res: Vec<Vec<(isize, isize)>> =\n         // rotations\n         iterate(piece, |rot| rot.iter().map(|&(y, x)| (x + y, -y)).collect())\n         .take(if all {6} else {3})\n@@ -133,14 +133,14 @@ fn transform(piece: Vec<(int, int)> , all: bool) -> Vec<Vec<(int, int)>> {\n // Takes a piece with minimum coordinate (0, 0) (as generated by\n // transform).  Returns the corresponding mask if p translated by (dy,\n // dx) is on the board.\n-fn mask(dy: int, dx: int, id: uint, p: &Vec<(int, int)>) -> Option<u64> {\n+fn mask(dy: isize, dx: isize, id: usize, p: &Vec<(isize, isize)>) -> Option<u64> {\n     let mut m = 1 << (50 + id);\n     for &(y, x) in p.iter() {\n         let x = x + dx + (y + (dy % 2)) / 2;\n         if x < 0 || x > 4 {return None;}\n         let y = y + dy;\n         if y < 0 || y > 9 {return None;}\n-        m |= 1 << (y * 5 + x) as uint;\n+        m |= 1 << (y * 5 + x) as usize;\n     }\n     Some(m)\n }\n@@ -164,12 +164,12 @@ fn make_masks() -> Vec<Vec<Vec<u64> > > {\n     // To break the central symmetry of the problem, every\n     // transformation must be taken except for one piece (piece 3\n     // here).\n-    let transforms: Vec<Vec<Vec<(int, int)>>> =\n+    let transforms: Vec<Vec<Vec<(isize, isize)>>> =\n         pieces.into_iter().enumerate()\n         .map(|(id, p)| transform(p, id != 3))\n         .collect();\n \n-    (0..50).map(|yx| {\n+    (0is..50).map(|yx| {\n         transforms.iter().enumerate().map(|(id, t)| {\n             t.iter().filter_map(|p| mask(yx / 5, yx % 5, id, p)).collect()\n         }).collect()\n@@ -212,7 +212,7 @@ fn filter_masks(masks: &mut Vec<Vec<Vec<u64>>>) {\n // Gets the identifier of a mask.\n fn get_id(m: u64) -> u8 {\n     for id in 0u8..10 {\n-        if m & (1 << (id + 50) as uint) != 0 {return id;}\n+        if m & (1 << (id + 50) as usize) != 0 {return id;}\n     }\n     panic!(\"{:016x} does not have a valid identifier\", m);\n }\n@@ -222,7 +222,7 @@ fn to_vec(raw_sol: &List<u64>) -> Vec<u8> {\n     let mut sol = repeat('.' as u8).take(50).collect::<Vec<_>>();\n     for &m in raw_sol.iter() {\n         let id = '0' as u8 + get_id(m);\n-        for i in 0u..50 {\n+        for i in 0us..50 {\n             if m & 1 << i != 0 {\n                 sol[i] = id;\n             }\n@@ -244,7 +244,7 @@ fn print_sol(sol: &Vec<u8>) {\n // The data managed during the search\n struct Data {\n     // Number of solution found.\n-    nb: int,\n+    nb: isize,\n     // Lexicographically minimal solution found.\n     min: Vec<u8>,\n     // Lexicographically maximal solution found.\n@@ -286,7 +286,7 @@ fn handle_sol(raw_sol: &List<u64>, data: &mut Data) {\n fn search(\n     masks: &Vec<Vec<Vec<u64>>>,\n     board: u64,\n-    mut i: uint,\n+    mut i: usize,\n     cur: List<u64>,\n     data: &mut Data)\n {\n@@ -297,7 +297,7 @@ fn search(\n     let masks_at = &masks[i];\n \n     // for every unused piece\n-    for id in (0u..10).filter(|&id| board & (1 << (id + 50)) == 0) {\n+    for id in (0us..10).filter(|&id| board & (1 << (id + 50)) == 0) {\n         // for each mask that fits on the board\n         for m in masks_at[id].iter().filter(|&m| board & *m == 0) {\n             // This check is too costly."}, {"sha": "83b9d4633dcf360289f50511d0239d04198945ae", "filename": "src/test/compile-fail/regions-infer-not-param.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -27,5 +27,10 @@ fn take_direct<'a,'b>(p: direct<'a>) -> direct<'b> { p } //~ ERROR mismatched ty\n fn take_indirect1(p: indirect1) -> indirect1 { p }\n \n fn take_indirect2<'a,'b>(p: indirect2<'a>) -> indirect2<'b> { p } //~ ERROR mismatched types\n+//~| expected `indirect2<'b>`\n+//~| found `indirect2<'a>`\n+//~| ERROR mismatched types\n+//~| expected `indirect2<'b>`\n+//~| found `indirect2<'a>`\n \n fn main() {}"}, {"sha": "f2879cfc6ba1dc40450ebd2632d4b37d1a6109ea", "filename": "src/test/run-make/save-analysis/SubDir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Ftest%2Frun-make%2Fsave-analysis%2FSubDir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Ftest%2Frun-make%2Fsave-analysis%2FSubDir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2FSubDir%2Fmod.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -12,15 +12,15 @@\n \n use sub::sub2 as msalias;\n use sub::sub2;\n-use std::io::stdio::println;\n+use std::old_io::stdio::println;\n \n static yy: usize = 25us;\n \n mod sub {\n     pub mod sub2 {\n-        use std::io::stdio::println;\n+        use std::old_io::stdio::println;\n         pub mod sub3 {\n-            use std::io::stdio::println;\n+            use std::old_io::stdio::println;\n             pub fn hello() {\n                 println(\"hello from module 3\");\n             }"}, {"sha": "690f40b4f5b7346128fe9ca79f828882ca163f86", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -20,7 +20,7 @@ extern crate \"flate\" as myflate;\n use graphviz::maybe_owned_vec::MaybeOwnedVector;\n use std::collections::{HashMap,HashSet};\n use std::cell::RefCell;\n-use std::io::stdio::println;\n+use std::old_io::stdio::println;\n \n \n use sub::sub2 as msalias;\n@@ -62,9 +62,9 @@ fn test_tup_struct(x: TupStruct) -> int {\n \n mod sub {\n     pub mod sub2 {\n-        use std::io::stdio::println;\n+        use std::old_io::stdio::println;\n         pub mod sub3 {\n-            use std::io::stdio::println;\n+            use std::old_io::stdio::println;\n             pub fn hello() {\n                 println(\"hello from module 3\");\n             }"}, {"sha": "95b7728b47f993766bf149c6401987feb5cf2c20", "filename": "src/test/run-pass/issue-16668.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2530d611fc92bd8094ec1745a927e059ac432a/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16668.rs?ref=3a2530d611fc92bd8094ec1745a927e059ac432a", "patch": "@@ -18,7 +18,7 @@ struct Parser<'a, I, O> {\n     parse: Box<FnMut(I) -> Result<O, String> + 'a>\n }\n \n-impl<'a, I, O: 'a> Parser<'a, I, O> {\n+impl<'a, I: 'a, O: 'a> Parser<'a, I, O> {\n     fn compose<K: 'a>(mut self, mut rhs: Parser<'a, O, K>) -> Parser<'a, I, K> {\n         Parser {\n             parse: box move |&mut: x: I| {"}]}