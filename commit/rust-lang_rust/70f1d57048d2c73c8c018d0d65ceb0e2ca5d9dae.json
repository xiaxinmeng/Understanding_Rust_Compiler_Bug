{"sha": "70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZjFkNTcwNDhkMmM3M2M4YzAxOGQwZDY1Y2ViMGUyY2E1ZDlkYWU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-12-31T17:15:40Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-01-01T06:15:18Z"}, "message": "Rename `syntax_pos` to `rustc_span` in source code", "tree": {"sha": "ed077cbfc27cfa99565965681f03138285b1cb00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed077cbfc27cfa99565965681f03138285b1cb00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "html_url": "https://github.com/rust-lang/rust/commit/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38aa6bdfd705ea0604d7d5dd9fabc5e8f853a4fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/38aa6bdfd705ea0604d7d5dd9fabc5e8f853a4fc", "html_url": "https://github.com/rust-lang/rust/commit/38aa6bdfd705ea0604d7d5dd9fabc5e8f853a4fc"}], "stats": {"total": 1202, "additions": 601, "deletions": 601}, "files": [{"sha": "01608701a79dc2d2375ad56923569a9b30b42984", "filename": "src/libfmt_macros/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibfmt_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibfmt_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2FCargo.toml?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -9,5 +9,5 @@ name = \"fmt_macros\"\n path = \"lib.rs\"\n \n [dependencies]\n-syntax_pos = { path = \"../librustc_span\", package = \"rustc_span\" }\n+rustc_span = { path = \"../librustc_span\" }\n rustc_lexer = { path = \"../librustc_lexer\" }"}, {"sha": "9ca7eee999fe0493b3f4f44421123ae32b797a6d", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -24,7 +24,7 @@ use std::iter;\n use std::str;\n use std::string;\n \n-use syntax_pos::{InnerSpan, Symbol};\n+use rustc_span::{InnerSpan, Symbol};\n \n #[derive(Copy, Clone)]\n struct InnerOffset(usize);"}, {"sha": "98c2a17f0dd54d41da10596d3554c519034826e7", "filename": "src/libfmt_macros/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibfmt_macros%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibfmt_macros%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Ftests.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -144,7 +144,7 @@ fn format_align_fill() {\n }\n #[test]\n fn format_counts() {\n-    use syntax_pos::{edition, Globals, GLOBALS};\n+    use rustc_span::{edition, Globals, GLOBALS};\n     GLOBALS.set(&Globals::new(edition::DEFAULT_EDITION), || {\n         same(\n             \"{:10x}\","}, {"sha": "973384bcf05aa5445fb4850d23824b8fe5c6a880", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -30,7 +30,7 @@ rustc_index = { path = \"../librustc_index\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n-syntax_pos = { path = \"../librustc_span\", package = \"rustc_span\" }\n+rustc_span = { path = \"../librustc_span\" }\n backtrace = \"0.3.40\"\n parking_lot = \"0.9\"\n byteorder = { version = \"1.3\" }"}, {"sha": "8c68f7272c02c6539d4a7b9ef09a90f8798c56b9", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -65,9 +65,9 @@ use crate::traits::query::{\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_span::symbol::Symbol;\n use std::fmt;\n use std::hash::Hash;\n-use syntax_pos::symbol::Symbol;\n \n // erase!() just makes tokens go away. It's used to specify which macro argument\n // is repeated (i.e., which sub-expression of the macro we are in) but don't need"}, {"sha": "2b201cfe0a962da6b1b4ab4b688ac5c95c63d602", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -12,9 +12,9 @@ use crate::lint::builtin::UNUSED_ATTRIBUTES;\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n \n+use rustc_span::Span;\n use std::fmt::{self, Display};\n use syntax::{attr, symbol::sym};\n-use syntax_pos::Span;\n \n use rustc_error_codes::*;\n "}, {"sha": "6ba9a53799b9a402db7826faf66cca46bdc120fc", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -6,10 +6,10 @@ use crate::ty;\n use crate::util::nodemap::DefIdMap;\n \n use rustc_macros::HashStable;\n+use rustc_span::hygiene::MacroKind;\n+use rustc_span::Span;\n use syntax::ast;\n use syntax::ast::NodeId;\n-use syntax_pos::hygiene::MacroKind;\n-use syntax_pos::Span;\n \n use std::fmt::Debug;\n "}, {"sha": "241febe0cf60c680fc0ce927457ea0910a540283", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -36,8 +36,8 @@ use super::itemlikevisit::DeepVisitor;\n use crate::hir::map::Map;\n use crate::hir::*;\n \n+use rustc_span::Span;\n use syntax::ast::{Attribute, Ident, Name};\n-use syntax_pos::Span;\n \n #[derive(Copy, Clone)]\n pub enum FnKind<'a> {"}, {"sha": "9546c101dc80306e88ebbdd98ca3bfeadccf41a9", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -15,8 +15,8 @@ use crate::hir as ast;\n use crate::hir::intravisit::FnKind;\n use crate::hir::map;\n use crate::hir::{Expr, FnDecl, Node};\n+use rustc_span::Span;\n use syntax::ast::{Attribute, Ident};\n-use syntax_pos::Span;\n \n /// An FnLikeNode is a Node that is like a fn, in that it has a decl\n /// and a body (as well as a NodeId, a span, etc)."}, {"sha": "c1fe1bec342ff5ad7837befe48fee6da9b122b22", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -11,10 +11,10 @@ use crate::session::Session;\n use crate::util::nodemap::FxHashMap;\n use rustc_data_structures::svh::Svh;\n use rustc_index::vec::IndexVec;\n+use rustc_span::Span;\n use std::iter::repeat;\n use syntax::ast::NodeId;\n use syntax::source_map::SourceMap;\n-use syntax_pos::Span;\n \n use crate::ich::StableHashingContext;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};"}, {"sha": "60bacfbe2df63a5b06f7ee8ec6d40cfeabf08918", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -13,13 +13,13 @@ use crate::util::nodemap::NodeMap;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_index::vec::IndexVec;\n+use rustc_span::hygiene::ExpnId;\n+use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::Span;\n use std::borrow::Borrow;\n use std::fmt::Write;\n use std::hash::Hash;\n use syntax::ast;\n-use syntax_pos::hygiene::ExpnId;\n-use syntax_pos::symbol::{sym, Symbol};\n-use syntax_pos::Span;\n \n /// The `DefPathTable` maps `DefIndex`es to `DefKey`s and vice versa.\n /// Internally the `DefPathTable` holds a tree of `DefKey`s, where each `DefKey`"}, {"sha": "7445f35dd21ad892ca7b20096fceea489686f0c5", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -16,11 +16,11 @@ use crate::util::nodemap::FxHashMap;\n \n use rustc_data_structures::svh::Svh;\n use rustc_index::vec::IndexVec;\n+use rustc_span::hygiene::MacroKind;\n+use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, Name, NodeId};\n use syntax::source_map::Spanned;\n-use syntax_pos::hygiene::MacroKind;\n-use syntax_pos::{Span, DUMMY_SP};\n \n pub mod blocks;\n mod collector;"}, {"sha": "d0cc87f7506a0608de384db75978845e57c3c24e", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -19,6 +19,9 @@ use errors::FatalError;\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_macros::HashStable;\n use rustc_serialize::{self, Decodable, Decoder, Encodable, Encoder};\n+use rustc_span::source_map::{SourceMap, Spanned};\n+use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n use smallvec::SmallVec;\n use std::collections::{BTreeMap, BTreeSet};\n@@ -30,9 +33,6 @@ pub use syntax::ast::{CaptureBy, Constness, Movability, Mutability, Unsafety};\n use syntax::attr::{InlineAttr, OptimizeAttr};\n use syntax::tokenstream::TokenStream;\n use syntax::util::parser::ExprPrecedence;\n-use syntax_pos::source_map::{SourceMap, Spanned};\n-use syntax_pos::symbol::{kw, sym, Symbol};\n-use syntax_pos::{MultiSpan, Span, DUMMY_SP};\n \n pub mod check_attr;\n pub mod def;"}, {"sha": "56b557b409ca6955786bba6ae9d5e578dd1e985f", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,8 +1,8 @@\n use crate::hir::def::{CtorOf, DefKind, Res};\n use crate::hir::def_id::DefId;\n use crate::hir::{self, HirId, PatKind};\n+use rustc_span::Span;\n use syntax::ast;\n-use syntax_pos::Span;\n \n use std::iter::{Enumerate, ExactSizeIterator};\n "}, {"sha": "7cc57ed7528a3b8a6a334eaaa9808a6ce0a9b39d", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,3 +1,4 @@\n+use rustc_span::{self, BytePos, FileName};\n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n use syntax::print::pp::Breaks::{Consistent, Inconsistent};\n@@ -7,7 +8,6 @@ use syntax::sess::ParseSess;\n use syntax::source_map::{SourceMap, Spanned};\n use syntax::symbol::kw;\n use syntax::util::parser::{self, AssocOp, Fixity};\n-use syntax_pos::{self, BytePos, FileName};\n \n use crate::hir;\n use crate::hir::{GenericArg, GenericParam, GenericParamKind};\n@@ -178,7 +178,7 @@ impl<'a> State<'a> {\n         self.end(); // close the head-box\n     }\n \n-    pub fn bclose_maybe_open(&mut self, span: syntax_pos::Span, close_box: bool) {\n+    pub fn bclose_maybe_open(&mut self, span: rustc_span::Span, close_box: bool) {\n         self.maybe_print_comment(span.hi());\n         self.break_offset_if_not_bol(1, -(INDENT_UNIT as isize));\n         self.s.word(\"}\");\n@@ -187,7 +187,7 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn bclose(&mut self, span: syntax_pos::Span) {\n+    pub fn bclose(&mut self, span: rustc_span::Span) {\n         self.bclose_maybe_open(span, true)\n     }\n \n@@ -223,7 +223,7 @@ impl<'a> State<'a> {\n     pub fn commasep_cmnt<T, F, G>(&mut self, b: Breaks, elts: &[T], mut op: F, mut get_span: G)\n     where\n         F: FnMut(&mut State<'_>, &T),\n-        G: FnMut(&T) -> syntax_pos::Span,\n+        G: FnMut(&T) -> rustc_span::Span,\n     {\n         self.rbox(0, b);\n         let len = elts.len();\n@@ -704,7 +704,7 @@ impl<'a> State<'a> {\n         enum_definition: &hir::EnumDef<'_>,\n         generics: &hir::Generics<'_>,\n         name: ast::Name,\n-        span: syntax_pos::Span,\n+        span: rustc_span::Span,\n         visibility: &hir::Visibility<'_>,\n     ) {\n         self.head(visibility_qualified(visibility, \"enum\"));\n@@ -715,7 +715,7 @@ impl<'a> State<'a> {\n         self.print_variants(&enum_definition.variants, span)\n     }\n \n-    pub fn print_variants(&mut self, variants: &[hir::Variant<'_>], span: syntax_pos::Span) {\n+    pub fn print_variants(&mut self, variants: &[hir::Variant<'_>], span: rustc_span::Span) {\n         self.bopen();\n         for v in variants {\n             self.space_if_not_bol();\n@@ -763,7 +763,7 @@ impl<'a> State<'a> {\n         struct_def: &hir::VariantData<'_>,\n         generics: &hir::Generics<'_>,\n         name: ast::Name,\n-        span: syntax_pos::Span,\n+        span: rustc_span::Span,\n         print_finalizer: bool,\n     ) {\n         self.print_name(name);\n@@ -839,18 +839,18 @@ impl<'a> State<'a> {\n         match ti.kind {\n             hir::TraitItemKind::Const(ref ty, default) => {\n                 let vis =\n-                    Spanned { span: syntax_pos::DUMMY_SP, node: hir::VisibilityKind::Inherited };\n+                    Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Inherited };\n                 self.print_associated_const(ti.ident, &ty, default, &vis);\n             }\n             hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Required(ref arg_names)) => {\n                 let vis =\n-                    Spanned { span: syntax_pos::DUMMY_SP, node: hir::VisibilityKind::Inherited };\n+                    Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Inherited };\n                 self.print_method_sig(ti.ident, sig, &ti.generics, &vis, arg_names, None);\n                 self.s.word(\";\");\n             }\n             hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) => {\n                 let vis =\n-                    Spanned { span: syntax_pos::DUMMY_SP, node: hir::VisibilityKind::Inherited };\n+                    Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Inherited };\n                 self.head(\"\");\n                 self.print_method_sig(ti.ident, sig, &ti.generics, &vis, &[], Some(body));\n                 self.nbsp();\n@@ -2097,8 +2097,8 @@ impl<'a> State<'a> {\n         }\n         let generics = hir::Generics {\n             params: &[],\n-            where_clause: hir::WhereClause { predicates: &[], span: syntax_pos::DUMMY_SP },\n-            span: syntax_pos::DUMMY_SP,\n+            where_clause: hir::WhereClause { predicates: &[], span: rustc_span::DUMMY_SP },\n+            span: rustc_span::DUMMY_SP,\n         };\n         self.print_fn(\n             decl,\n@@ -2110,7 +2110,7 @@ impl<'a> State<'a> {\n             },\n             name,\n             &generics,\n-            &Spanned { span: syntax_pos::DUMMY_SP, node: hir::VisibilityKind::Inherited },\n+            &Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Inherited },\n             arg_names,\n             None,\n         );\n@@ -2119,7 +2119,7 @@ impl<'a> State<'a> {\n \n     pub fn maybe_print_trailing_comment(\n         &mut self,\n-        span: syntax_pos::Span,\n+        span: rustc_span::Span,\n         next_pos: Option<BytePos>,\n     ) {\n         if let Some(cmnts) = self.comments() {"}, {"sha": "ff6b0541078b7e7c175ec898742fd82fd5b903a7", "filename": "src/librustc/hir/upvars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fhir%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fhir%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fupvars.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -6,7 +6,7 @@ use crate::hir::{self, HirId};\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n pub fn provide(providers: &mut Providers<'_>) {\n     providers.upvars = |tcx, def_id| {"}, {"sha": "305b6058d34660dbdab15dbd4335672eb5a7a21b", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -9,10 +9,10 @@ use crate::ty::{fast_reject, TyCtxt};\n \n use std::cmp::Ord;\n \n+use rustc_span::{BytePos, SourceFile};\n use syntax::ast;\n use syntax::source_map::SourceMap;\n use syntax::symbol::Symbol;\n-use syntax_pos::{BytePos, SourceFile};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n@@ -270,7 +270,7 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for ast::NodeId {\n     }\n }\n \n-impl<'a> syntax_pos::HashStableContext for StableHashingContext<'a> {\n+impl<'a> rustc_span::HashStableContext for StableHashingContext<'a> {\n     fn hash_spans(&self) -> bool {\n         self.hash_spans\n     }"}, {"sha": "90e1cac211aa649e5fb7dc43dd22b974df3ec693", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -3,8 +3,8 @@\n \n use crate::ich::StableHashingContext;\n \n+use rustc_span::SourceFile;\n use syntax::ast;\n-use syntax_pos::SourceFile;\n \n use crate::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n \n@@ -114,22 +114,22 @@ impl<'a> HashStable<StableHashingContext<'a>> for SourceFile {\n     }\n }\n \n-fn stable_byte_pos(pos: ::syntax_pos::BytePos, source_file_start: ::syntax_pos::BytePos) -> u32 {\n+fn stable_byte_pos(pos: ::rustc_span::BytePos, source_file_start: ::rustc_span::BytePos) -> u32 {\n     pos.0 - source_file_start.0\n }\n \n fn stable_multibyte_char(\n-    mbc: ::syntax_pos::MultiByteChar,\n-    source_file_start: ::syntax_pos::BytePos,\n+    mbc: ::rustc_span::MultiByteChar,\n+    source_file_start: ::rustc_span::BytePos,\n ) -> (u32, u32) {\n-    let ::syntax_pos::MultiByteChar { pos, bytes } = mbc;\n+    let ::rustc_span::MultiByteChar { pos, bytes } = mbc;\n \n     (pos.0 - source_file_start.0, bytes as u32)\n }\n \n fn stable_non_narrow_char(\n-    swc: ::syntax_pos::NonNarrowChar,\n-    source_file_start: ::syntax_pos::BytePos,\n+    swc: ::rustc_span::NonNarrowChar,\n+    source_file_start: ::rustc_span::BytePos,\n ) -> (u32, u32) {\n     let pos = swc.pos();\n     let width = swc.width();\n@@ -138,10 +138,10 @@ fn stable_non_narrow_char(\n }\n \n fn stable_normalized_pos(\n-    np: ::syntax_pos::NormalizedPos,\n-    source_file_start: ::syntax_pos::BytePos,\n+    np: ::rustc_span::NormalizedPos,\n+    source_file_start: ::rustc_span::BytePos,\n ) -> (u32, u32) {\n-    let ::syntax_pos::NormalizedPos { pos, diff } = np;\n+    let ::rustc_span::NormalizedPos { pos, diff } = np;\n \n     (pos.0 - source_file_start.0, diff)\n }"}, {"sha": "f07e8f38734a7c9189f7c294febbd0b01122404d", "filename": "src/librustc/ich/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fich%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fich%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -4,8 +4,8 @@ pub use self::hcx::{\n     hash_stable_trait_impls, NodeIdHashingMode, StableHashingContext, StableHashingContextProvider,\n };\n crate use rustc_data_structures::fingerprint::Fingerprint;\n+pub use rustc_span::CachingSourceMapView;\n use syntax::symbol::{sym, Symbol};\n-pub use syntax_pos::CachingSourceMapView;\n \n mod hcx;\n "}, {"sha": "b720168f3563ed094c3a411b5f3e39e55fcc2c24", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -190,7 +190,7 @@ impl CanonicalizeRegionMode for CanonicalizeQueryResponse {\n                 // `delay_span_bug` to allow type error over an ICE.\n                 ty::tls::with_context(|c| {\n                     c.tcx.sess.delay_span_bug(\n-                        syntax_pos::DUMMY_SP,\n+                        rustc_span::DUMMY_SP,\n                         &format!(\"unexpected region in query response: `{:?}`\", r),\n                     );\n                 });"}, {"sha": "5e402dc79a1adb703ad4b3ae39ea5221b6eafc41", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -25,8 +25,8 @@ use crate::ty::{self, BoundVar, Ty, TyCtxt};\n use crate::util::captures::Captures;\n use rustc_index::vec::Idx;\n use rustc_index::vec::IndexVec;\n+use rustc_span::DUMMY_SP;\n use std::fmt::Debug;\n-use syntax_pos::DUMMY_SP;\n \n impl<'tcx> InferCtxtBuilder<'tcx> {\n     /// The \"main method\" for a canonicalized trait query. Given the"}, {"sha": "a9e56a9264cf90dc3ac5b53d3970448c0494b6eb", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -40,8 +40,8 @@ use crate::ty::subst::SubstsRef;\n use crate::ty::{self, InferConst, Ty, TyCtxt};\n use crate::ty::{IntType, UintType};\n \n+use rustc_span::{Span, DUMMY_SP};\n use syntax::ast;\n-use syntax_pos::{Span, DUMMY_SP};\n \n #[derive(Clone)]\n pub struct CombineFields<'infcx, 'tcx> {"}, {"sha": "e2b70abe6f0f571d94b82adefa8be307b7633d99", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -67,9 +67,9 @@ use crate::ty::{\n \n use errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use rustc_error_codes::*;\n+use rustc_span::{Pos, Span};\n use rustc_target::spec::abi;\n use std::{cmp, fmt};\n-use syntax_pos::{Pos, Span};\n \n mod note;\n "}, {"sha": "a94595b227b2e528156733f028c612c5b705bb73", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -6,10 +6,10 @@ use crate::infer::InferCtxt;\n use crate::ty::print::Print;\n use crate::ty::{self, DefIdTree, Infer, Ty, TyVar};\n use errors::{Applicability, DiagnosticBuilder};\n+use rustc_span::Span;\n use std::borrow::Cow;\n use syntax::source_map::DesugaringKind;\n use syntax::symbol::kw;\n-use syntax_pos::Span;\n \n use rustc_error_codes::*;\n "}, {"sha": "a33cb511133db1635b8fb18062ceb064ac459d59", "filename": "src/librustc/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -6,7 +6,7 @@ use crate::infer::{Subtype, ValuePairs};\n use crate::traits::ObligationCauseCode::CompareImplMethodObligation;\n use crate::ty::Ty;\n use crate::util::common::ErrorReported;\n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// Print the error message for lifetime errors when the `impl` doesn't conform to the `trait`."}, {"sha": "ece55c4a822f6d18ea2e5114d9244e25e25ccdeb", "filename": "src/librustc/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -5,7 +5,7 @@ use crate::hir;\n use crate::hir::def_id::DefId;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::ty::{self, DefIdTree, Region, Ty};\n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n // The struct contains the information about the anonymous region\n // we are searching for."}, {"sha": "3fd5d3b5de4f2760666ec46072b433db1120bb8a", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -21,8 +21,8 @@ use rustc_data_structures::graph::implementation::{\n };\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n+use rustc_span::Span;\n use std::fmt;\n-use syntax_pos::Span;\n \n mod graphviz;\n "}, {"sha": "f9bc9020f163373f8dcc6c1080cbd541cad2e18e", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -27,12 +27,12 @@ use crate::util::nodemap::{FxHashMap, FxHashSet};\n use errors::DiagnosticBuilder;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::unify as ut;\n+use rustc_span::symbol::Symbol;\n+use rustc_span::Span;\n use std::cell::{Cell, Ref, RefCell, RefMut};\n use std::collections::BTreeMap;\n use std::fmt;\n use syntax::ast;\n-use syntax_pos::symbol::Symbol;\n-use syntax_pos::Span;\n \n use self::combine::CombineFields;\n use self::lexical_region_resolve::LexicalRegionResolutions;\n@@ -1728,7 +1728,7 @@ impl RegionVariableOrigin {\n             Coercion(a) => a,\n             EarlyBoundRegion(a, ..) => a,\n             LateBoundRegion(a, ..) => a,\n-            BoundRegionInCoherence(_) => syntax_pos::DUMMY_SP,\n+            BoundRegionInCoherence(_) => rustc_span::DUMMY_SP,\n             UpvarRegion(_, a) => a,\n             NLL(..) => bug!(\"NLL variable used with `span`\"),\n         }"}, {"sha": "6b53871b9e2f5935551a1e3e2886346baee6fa78", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -266,7 +266,7 @@ where\n     ) -> Ty<'tcx> {\n         use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n         use crate::traits::WhereClause;\n-        use syntax_pos::DUMMY_SP;\n+        use rustc_span::DUMMY_SP;\n \n         match value_ty.kind {\n             ty::Projection(other_projection_ty) => {"}, {"sha": "8399737b3e6102e0f14946ae3834123e1ce7daa4", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -13,7 +13,7 @@ use errors::DiagnosticBuilder;\n use rustc::session::config::nightly_options;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n use rustc_error_codes::*;\n "}, {"sha": "e27f1a8b26d7ff5b58ea9fa2bbb672f2269e6026", "filename": "src/librustc/infer/outlives/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -4,7 +4,7 @@ use crate::infer::{GenericKind, InferCtxt};\n use crate::traits::query::outlives_bounds::{self, OutlivesBound};\n use crate::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashMap;\n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n /// The `OutlivesEnvironment` collects information about what outlives\n /// what in a given type-checking setting. For example, if we have a"}, {"sha": "323aa1f7f01cd31623188a4f650aa8329491567d", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -15,7 +15,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::unify as ut;\n use rustc_index::vec::IndexVec;\n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n use std::collections::BTreeMap;\n use std::ops::Range;"}, {"sha": "43ded26b42217e07907be2f515ad73d7b79bf891", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,7 +1,7 @@\n use crate::hir::def_id::DefId;\n use crate::ty::{self, Ty, TyVid};\n+use rustc_span::Span;\n use syntax::symbol::Symbol;\n-use syntax_pos::Span;\n \n use rustc_data_structures::snapshot_vec as sv;\n use rustc_data_structures::unify as ut;"}, {"sha": "cc05f4ee7a5c3c501d8ae38d966e5feb758b439d", "filename": "src/librustc/infer/unify_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Funify_key.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,8 +1,8 @@\n use crate::ty::{self, FloatVarValue, InferConst, IntVarValue, Ty, TyCtxt};\n use rustc_data_structures::unify::InPlace;\n use rustc_data_structures::unify::{EqUnifyValue, NoError, UnificationTable, UnifyKey, UnifyValue};\n+use rustc_span::{Span, DUMMY_SP};\n use syntax::symbol::Symbol;\n-use syntax_pos::{Span, DUMMY_SP};\n \n use std::cell::RefMut;\n use std::cmp;"}, {"sha": "6e0bb3a2a2b38180df86b47b1cfa09f5775aca13", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -34,11 +34,11 @@ use crate::util::nodemap::FxHashMap;\n \n use errors::DiagnosticBuilder;\n use rustc_data_structures::sync::{self, join, par_iter, ParallelIterator};\n+use rustc_span::{symbol::Symbol, MultiSpan, Span};\n use std::slice;\n use syntax::ast;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::visit as ast_visit;\n-use syntax_pos::{symbol::Symbol, MultiSpan, Span};\n \n use rustc_error_codes::*;\n "}, {"sha": "7e433f50db208273752edc75f39fe5380ae5ba7e", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -32,11 +32,11 @@ use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n use crate::util::nodemap::NodeMap;\n use errors::{DiagnosticBuilder, DiagnosticId};\n+use rustc_span::hygiene::MacroKind;\n+use rustc_span::Span;\n use syntax::ast;\n use syntax::source_map::{DesugaringKind, ExpnKind, MultiSpan};\n use syntax::symbol::Symbol;\n-use syntax_pos::hygiene::MacroKind;\n-use syntax_pos::Span;\n \n pub use crate::lint::context::{\n     check_ast_crate, check_crate, late_lint_mod, BufferedEarlyLint, CheckLintNameResult,"}, {"sha": "93c8ad770707636c5c389d35369a24930fb762d1", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -12,13 +12,13 @@ use rustc_data_structures::svh::Svh;\n \n use rustc_data_structures::sync::{self, MetadataRef};\n use rustc_macros::HashStable;\n+use rustc_span::Span;\n use rustc_target::spec::Target;\n use std::any::Any;\n use std::path::{Path, PathBuf};\n use syntax::ast;\n use syntax::expand::allocator::AllocatorKind;\n use syntax::symbol::Symbol;\n-use syntax_pos::Span;\n \n pub use self::NativeLibraryKind::*;\n pub use rustc_session::utils::NativeLibraryKind;"}, {"sha": "c07b65acff2182abc9edd9779f6ccbd2ab0ec3f9", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -19,9 +19,9 @@ use crate::util::nodemap::FxHashMap;\n use crate::hir;\n use crate::hir::itemlikevisit::ItemLikeVisitor;\n use rustc_macros::HashStable;\n+use rustc_span::Span;\n use syntax::ast;\n use syntax::symbol::{sym, Symbol};\n-use syntax_pos::Span;\n \n use rustc_error_codes::*;\n "}, {"sha": "dd03a703c8964644040df453c362b48fbd346f32", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -16,7 +16,7 @@ use crate::util::nodemap::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_index::vec::Idx;\n use rustc_macros::HashStable;\n-use syntax_pos::{Span, DUMMY_SP};\n+use rustc_span::{Span, DUMMY_SP};\n \n use std::fmt;\n "}, {"sha": "7b186bc7a140c737fce9a17365a59f7c14d1cc05", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -16,12 +16,12 @@ use crate::ty::{self, TyCtxt};\n use crate::util::nodemap::{FxHashMap, FxHashSet};\n use errors::DiagnosticBuilder;\n use rustc_feature::GateIssue;\n+use rustc_span::{MultiSpan, Span};\n use syntax::ast::{Attribute, CRATE_NODE_ID};\n use syntax::attr::{self, ConstStability, Deprecation, RustcDeprecation, Stability};\n use syntax::errors::Applicability;\n use syntax::feature_gate::{feature_err, feature_err_issue};\n use syntax::symbol::{sym, Symbol};\n-use syntax_pos::{MultiSpan, Span};\n \n use std::cmp::Ordering;\n use std::mem::replace;"}, {"sha": "011c9fc27e05ec58410de0cb4a2120bf6d1d65e3", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -9,10 +9,10 @@ use crate::hir::intravisit;\n use crate::hir::intravisit::{NestedVisitorMap, Visitor};\n use crate::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_span::Span;\n use rustc_target::spec::PanicStrategy;\n use syntax::ast;\n use syntax::symbol::{sym, Symbol};\n-use syntax_pos::Span;\n \n use rustc_error_codes::*;\n "}, {"sha": "2308da5d610e8891a65b4b04a35fd42794bb565e", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -11,10 +11,10 @@ use backtrace::Backtrace;\n use errors::DiagnosticBuilder;\n use hir::GeneratorKind;\n use rustc_macros::HashStable;\n+use rustc_span::{Pos, Span};\n use rustc_target::spec::abi::Abi;\n use std::{any::Any, env, fmt};\n use syntax::symbol::Symbol;\n-use syntax_pos::{Pos, Span};\n \n use rustc_error_codes::*;\n "}, {"sha": "b560363c95861cb4028a72368df0f17c5bc8f4ea", "filename": "src/librustc/mir/interpret/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fqueries.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -4,7 +4,7 @@ use crate::hir::def_id::DefId;\n use crate::mir;\n use crate::ty::subst::{InternalSubsts, SubstsRef};\n use crate::ty::{self, TyCtxt};\n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n impl<'tcx> TyCtxt<'tcx> {\n     /// Evaluates a constant without providing any substitutions. This is useful to evaluate consts"}, {"sha": "bb1afdd877f82f6ffd147a93c30120b40852f59c", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -27,6 +27,7 @@ use rustc_index::bit_set::BitMatrix;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_serialize::{Decodable, Encodable};\n+use rustc_span::{Span, DUMMY_SP};\n use smallvec::SmallVec;\n use std::borrow::Cow;\n use std::fmt::{self, Debug, Display, Formatter, Write};\n@@ -36,7 +37,6 @@ use std::{iter, mem, option, u32};\n pub use syntax::ast::Mutability;\n use syntax::ast::Name;\n use syntax::symbol::Symbol;\n-use syntax_pos::{Span, DUMMY_SP};\n \n pub use crate::mir::cache::{BodyAndCache, ReadOnlyBodyAndCache};\n pub use crate::mir::interpret::AssertMessage;"}, {"sha": "9173c328006411cda989ebe0f3d2d0bd22da4b4a", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,7 +1,7 @@\n use crate::mir::*;\n use crate::ty::subst::SubstsRef;\n use crate::ty::{CanonicalUserTypeAnnotation, Ty};\n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n // # The MIR Visitor\n //"}, {"sha": "1534e922cddf0e47145d0f5cf86084711308a921", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -13,8 +13,8 @@ use crate::ty::query::QueryDescription;\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n \n+use rustc_span::symbol::Symbol;\n use std::borrow::Cow;\n-use syntax_pos::symbol::Symbol;\n \n // Each of these queries corresponds to a function pointer field in the\n // `Providers` struct for requesting a value of that type, and a method\n@@ -497,7 +497,7 @@ rustc_queries! {\n             desc { \"extract field of const\" }\n         }\n \n-        query const_caller_location(key: (syntax_pos::Symbol, u32, u32)) -> &'tcx ty::Const<'tcx> {\n+        query const_caller_location(key: (rustc_span::Symbol, u32, u32)) -> &'tcx ty::Const<'tcx> {\n             no_force\n             desc { \"get a &core::panic::Location referring to a span\" }\n         }"}, {"sha": "9be18f45de654b5911ab216332b758cbebe29707", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -12,8 +12,8 @@ use crate::traits::{self, Normalized, Obligation, ObligationCause, SelectionCont\n use crate::ty::fold::TypeFoldable;\n use crate::ty::subst::Subst;\n use crate::ty::{self, Ty, TyCtxt};\n+use rustc_span::DUMMY_SP;\n use syntax::symbol::sym;\n-use syntax_pos::DUMMY_SP;\n \n /// Whether we do the orphan check relative to this crate or\n /// to some remote crate."}, {"sha": "8a5a92fcfa6d98af59caee96ec25f29d749bfbcc", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -25,11 +25,11 @@ use crate::util::nodemap::{FxHashMap, FxHashSet};\n \n use errors::{pluralize, Applicability, DiagnosticBuilder, Style};\n use rustc::hir::def_id::LOCAL_CRATE;\n+use rustc_span::source_map::SourceMap;\n+use rustc_span::{ExpnKind, MultiSpan, Span, DUMMY_SP};\n use std::fmt;\n use syntax::ast;\n use syntax::symbol::{kw, sym};\n-use syntax_pos::source_map::SourceMap;\n-use syntax_pos::{ExpnKind, MultiSpan, Span, DUMMY_SP};\n \n use rustc_error_codes::*;\n "}, {"sha": "5c44d5bda39b2f4aa059b67dc5eec2c8d944a5e6", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -32,8 +32,8 @@ use crate::ty::{self, AdtKind, GenericParamDefKind, List, ToPredicate, Ty, TyCtx\n use crate::util::common::ErrorReported;\n use chalk_engine;\n use rustc_macros::HashStable;\n+use rustc_span::{Span, DUMMY_SP};\n use syntax::ast;\n-use syntax_pos::{Span, DUMMY_SP};\n \n use std::fmt::Debug;\n use std::rc::Rc;"}, {"sha": "97f75056f80a2625761874240dd0a32d2a6173e3", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -16,11 +16,11 @@ use crate::lint;\n use crate::traits::{self, Obligation, ObligationCause};\n use crate::ty::subst::{InternalSubsts, Subst};\n use crate::ty::{self, Predicate, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use rustc_span::{Span, DUMMY_SP};\n use std::borrow::Cow;\n use std::iter::{self};\n use syntax::ast::{self};\n use syntax::symbol::Symbol;\n-use syntax_pos::{Span, DUMMY_SP};\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum ObjectSafetyViolation {"}, {"sha": "5d90018e80a389c4af7430aa60b373e65929c094", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -5,10 +5,10 @@ use crate::ty::{self, GenericParamDefKind, TyCtxt};\n use crate::util::common::ErrorReported;\n use crate::util::nodemap::FxHashMap;\n \n+use rustc_span::Span;\n use syntax::ast::{MetaItem, NestedMetaItem};\n use syntax::attr;\n use syntax::symbol::{kw, sym, Symbol};\n-use syntax_pos::Span;\n \n use rustc_error_codes::*;\n "}, {"sha": "c604bf59cbd794c25525209652984ad5afe6bd71", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -21,9 +21,9 @@ use crate::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt};\n use crate::util::common::FN_OUTPUT_NAME;\n use rustc_data_structures::snapshot_map::{Snapshot, SnapshotMap};\n use rustc_macros::HashStable;\n+use rustc_span::DUMMY_SP;\n use syntax::ast::Ident;\n use syntax::symbol::sym;\n-use syntax_pos::DUMMY_SP;\n \n /// Depending on the stage of compilation, we want projection to be\n /// more or less conservative."}, {"sha": "9d3e9e309c6976e585bc13c4d328a5489fff1594", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -19,7 +19,7 @@ use crate::traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCau\n use crate::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use crate::ty::{self, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::FxHashSet;\n-use syntax_pos::DUMMY_SP;\n+use rustc_span::DUMMY_SP;\n \n use super::util::impl_trait_ref_and_oblig;\n use super::{FulfillmentContext, SelectionContext};"}, {"sha": "99f6e933fb418eb87d1091b980e01050d770f9e3", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,6 +1,6 @@\n use errors::DiagnosticBuilder;\n+use rustc_span::Span;\n use smallvec::SmallVec;\n-use syntax_pos::Span;\n \n use crate::hir;\n use crate::hir::def_id::DefId;"}, {"sha": "3ccbc096d02c276350b1a43950efaa2242852062", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -14,9 +14,9 @@ use crate::ty::subst::SubstsRef;\n use crate::ty::{self, List, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_serialize::{opaque, Decodable, Decoder, Encodable, Encoder};\n+use rustc_span::Span;\n use std::hash::Hash;\n use std::intrinsics;\n-use syntax_pos::Span;\n \n /// The shorthand encoding uses an enum's variant index `usize`\n /// and is offset by this value so it never matches a real variant.\n@@ -355,7 +355,7 @@ macro_rules! implement_ty_decoder {\n             use $crate::ty::subst::SubstsRef;\n             use $crate::hir::def_id::{CrateNum};\n \n-            use syntax_pos::Span;\n+            use rustc_span::Span;\n \n             use super::$DecoderName;\n "}, {"sha": "518ad63bdd0aee8ba17d5688bc462cfda7b3921a", "filename": "src/librustc/ty/constness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fconstness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fconstness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fconstness.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -3,9 +3,9 @@ use crate::hir::def_id::DefId;\n use crate::hir::map::blocks::FnLikeNode;\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n+use rustc_span::symbol::Symbol;\n use rustc_target::spec::abi::Abi;\n use syntax::attr;\n-use syntax_pos::symbol::Symbol;\n \n impl<'tcx> TyCtxt<'tcx> {\n     /// Whether the `def_id` counts as const fn in your current crate, considering all active"}, {"sha": "daa5ca37a98cd73697c91b4b1df9abd6d26282d4", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -59,6 +59,7 @@ use rustc_data_structures::stable_hasher::{\n use rustc_data_structures::sync::{Lock, Lrc, WorkerLocal};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n+use rustc_span::Span;\n use rustc_target::spec::abi;\n use smallvec::SmallVec;\n use std::any::Any;\n@@ -76,7 +77,6 @@ use syntax::attr;\n use syntax::expand::allocator::AllocatorKind;\n use syntax::source_map::MultiSpan;\n use syntax::symbol::{kw, sym, Symbol};\n-use syntax_pos::Span;\n \n pub struct AllArenas {\n     pub interner: SyncDroplessArena,"}, {"sha": "e2ecfd13d2f85d7d5a0fa022db367c5794bbb1c0", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -3,10 +3,10 @@ use crate::hir::def_id::DefId;\n use crate::ty::{self, BoundRegion, Region, Ty, TyCtxt};\n \n use errors::{Applicability, DiagnosticBuilder};\n+use rustc_span::Span;\n use rustc_target::spec::abi;\n use syntax::ast;\n use syntax::errors::pluralize;\n-use syntax_pos::Span;\n \n use std::borrow::Cow;\n use std::fmt;"}, {"sha": "63345f828e09cc1297e3226930e5eba87fe70434", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,9 +1,9 @@\n use crate::session::{self, DataTypeKind};\n use crate::ty::{self, subst::SubstsRef, ReprOptions, Ty, TyCtxt, TypeFoldable};\n \n+use rustc_span::DUMMY_SP;\n use syntax::ast::{self, Ident, IntTy, UintTy};\n use syntax::attr;\n-use syntax_pos::DUMMY_SP;\n \n use std::cmp;\n use std::fmt;"}, {"sha": "2707d07633b2fd5c77dce2694e26f79258d87fbb", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -35,6 +35,9 @@ use rustc_macros::HashStable;\n \n use rustc_data_structures::sync::{self, par_iter, Lrc, ParallelIterator};\n use rustc_serialize::{self, Encodable, Encoder};\n+use rustc_span::hygiene::ExpnId;\n+use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::Span;\n use rustc_target::abi::Align;\n use std::cell::RefCell;\n use std::cmp::{self, Ordering};\n@@ -46,9 +49,6 @@ use std::slice;\n use std::{mem, ptr};\n use syntax::ast::{self, Ident, Name, NodeId};\n use syntax::attr;\n-use syntax_pos::hygiene::ExpnId;\n-use syntax_pos::symbol::{kw, sym, Symbol};\n-use syntax_pos::Span;\n \n use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};"}, {"sha": "dd8274dcf22a55bcd458ca7228cecf9381654491", "filename": "src/librustc/ty/query/job.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -4,7 +4,7 @@ use crate::ty::query::Query;\n use crate::ty::tls;\n \n use rustc_data_structures::sync::Lrc;\n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n #[cfg(not(parallel_compiler))]\n use std::ptr;\n@@ -17,9 +17,9 @@ use {\n     rustc_data_structures::sync::Lock,\n     rustc_data_structures::{jobserver, OnDrop},\n     rustc_rayon_core as rayon_core,\n+    rustc_span::DUMMY_SP,\n     std::iter::FromIterator,\n     std::{mem, process, thread},\n-    syntax_pos::DUMMY_SP,\n };\n \n /// Represents a span and a query key.\n@@ -432,16 +432,16 @@ pub unsafe fn handle_deadlock() {\n     let gcx_ptr = tls::GCX_PTR.with(|gcx_ptr| gcx_ptr as *const _);\n     let gcx_ptr = &*gcx_ptr;\n \n-    let syntax_pos_globals =\n-        syntax_pos::GLOBALS.with(|syntax_pos_globals| syntax_pos_globals as *const _);\n-    let syntax_pos_globals = &*syntax_pos_globals;\n+    let rustc_span_globals =\n+        rustc_span::GLOBALS.with(|rustc_span_globals| rustc_span_globals as *const _);\n+    let rustc_span_globals = &*rustc_span_globals;\n     let syntax_globals = syntax::GLOBALS.with(|syntax_globals| syntax_globals as *const _);\n     let syntax_globals = &*syntax_globals;\n     thread::spawn(move || {\n         tls::GCX_PTR.set(gcx_ptr, || {\n             syntax::GLOBALS.set(syntax_globals, || {\n-                syntax_pos::GLOBALS\n-                    .set(syntax_pos_globals, || tls::with_global(|tcx| deadlock(tcx, &registry)))\n+                rustc_span::GLOBALS\n+                    .set(rustc_span_globals, || tls::with_global(|tcx| deadlock(tcx, &registry)))\n             });\n         })\n     });"}, {"sha": "3cf0a07b29df67b57b87d35aea465d331a12da6d", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -8,8 +8,8 @@ use crate::ty::fast_reject::SimplifiedType;\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, Ty, TyCtxt};\n \n-use syntax_pos::symbol::Symbol;\n-use syntax_pos::{Span, DUMMY_SP};\n+use rustc_span::symbol::Symbol;\n+use rustc_span::{Span, DUMMY_SP};\n \n /// The `Key` trait controls what types can legally be used as the key\n /// for a query."}, {"sha": "9a555ecf091c72e537e7b49f5ffc138f1bffae9b", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -47,14 +47,14 @@ use rustc_data_structures::sync::Lrc;\n use rustc_index::vec::IndexVec;\n use rustc_target::spec::PanicStrategy;\n \n+use rustc_span::{Span, DUMMY_SP};\n use std::any::type_name;\n use std::borrow::Cow;\n use std::ops::Deref;\n use std::sync::Arc;\n use syntax::ast;\n use syntax::attr;\n use syntax::symbol::Symbol;\n-use syntax_pos::{Span, DUMMY_SP};\n \n #[macro_use]\n mod plumbing;"}, {"sha": "a432f43d1330328658aaa94bc90fe732384a22f5", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -20,11 +20,11 @@ use rustc_serialize::{\n     opaque, Decodable, Decoder, Encodable, Encoder, SpecializedDecoder, SpecializedEncoder,\n     UseSpecializedDecodable, UseSpecializedEncodable,\n };\n+use rustc_span::hygiene::{ExpnId, SyntaxContext};\n+use rustc_span::{BytePos, SourceFile, Span, DUMMY_SP};\n use std::mem;\n use syntax::ast::{Ident, NodeId};\n use syntax::source_map::{SourceMap, StableSourceFileId};\n-use syntax_pos::hygiene::{ExpnId, SyntaxContext};\n-use syntax_pos::{BytePos, SourceFile, Span, DUMMY_SP};\n \n const TAG_FILE_FOOTER: u128 = 0xC0FFEE_C0FFEE_C0FFEE_C0FFEE_C0FFEE;\n "}, {"sha": "0642de8c744c21db7375e606f56b7d495e2feb92", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -20,12 +20,12 @@ use rustc_data_structures::fx::{FxHashMap, FxHasher};\n use rustc_data_structures::sharded::Sharded;\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_data_structures::thin_vec::ThinVec;\n+use rustc_span::Span;\n use std::collections::hash_map::Entry;\n use std::hash::{Hash, Hasher};\n use std::mem;\n use std::ptr;\n use syntax::source_map::DUMMY_SP;\n-use syntax_pos::Span;\n \n use rustc_error_codes::*;\n "}, {"sha": "c92128a1467a53a4be970bb5b0db510eb6d97f52", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -274,7 +274,7 @@ CloneTypeFoldableAndLiftImpls! {\n     crate::middle::region::Scope,\n     ::syntax::ast::FloatTy,\n     ::syntax::ast::NodeId,\n-    ::syntax_pos::symbol::Symbol,\n+    ::rustc_span::symbol::Symbol,\n     crate::hir::def::Res,\n     crate::hir::def_id::DefId,\n     crate::hir::InlineAsmInner,\n@@ -303,7 +303,7 @@ CloneTypeFoldableAndLiftImpls! {\n     crate::ty::RegionVid,\n     crate::ty::UniverseIndex,\n     crate::ty::Variance,\n-    ::syntax_pos::Span,\n+    ::rustc_span::Span,\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "13cb5fd1f38ce7628eaddf79d8a99932beb79f57", "filename": "src/librustc/ty/structural_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_match.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -5,7 +5,7 @@ use rustc::traits::{self, ConstPatternStructural, TraitEngine};\n \n use rustc_data_structures::fx::FxHashSet;\n \n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n use crate::ty::fold::{TypeFoldable, TypeVisitor};\n use crate::ty::{self, AdtDef, Ty, TyCtxt};"}, {"sha": "0167fae0ce11878ea13af9e11c6fd13f447da088", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -8,8 +8,8 @@ use crate::ty::{self, Lift, List, ParamConst, Ty, TyCtxt};\n \n use rustc_macros::HashStable;\n use rustc_serialize::{self, Decodable, Decoder, Encodable, Encoder};\n+use rustc_span::{Span, DUMMY_SP};\n use smallvec::SmallVec;\n-use syntax_pos::{Span, DUMMY_SP};\n \n use core::intrinsics;\n use std::cmp::Ordering;"}, {"sha": "15fae10236dbc4cc7e58ba751a5f7ecee6a8c9c4", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -18,10 +18,10 @@ use crate::util::common::ErrorReported;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_macros::HashStable;\n+use rustc_span::{Span, DUMMY_SP};\n use std::{cmp, fmt};\n use syntax::ast;\n use syntax::attr::{self, SignedInt, UnsignedInt};\n-use syntax_pos::{Span, DUMMY_SP};\n \n #[derive(Copy, Clone, Debug)]\n pub struct Discr<'tcx> {"}, {"sha": "1440813f47aab269fd7e7af5528313daed65d97a", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -5,9 +5,9 @@ use crate::middle::lang_items;\n use crate::traits::{self, AssocTypeBoundData};\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use rustc_span::Span;\n use std::iter::once;\n use syntax::symbol::{kw, Ident};\n-use syntax_pos::Span;\n \n /// Returns the set of obligations needed to make `ty` well-formed.\n /// If `ty` contains unresolved inference variables, this may include"}, {"sha": "c12b2859f728ec752737dcdb9b2e7de5a4c44237", "filename": "src/librustc/util/bug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Futil%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc%2Futil%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fbug.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,8 +1,8 @@\n // These functions are used by macro expansion for bug! and span_bug!\n \n use crate::ty::tls;\n+use rustc_span::{MultiSpan, Span};\n use std::fmt;\n-use syntax_pos::{MultiSpan, Span};\n \n #[cold]\n #[inline(never)]"}, {"sha": "f56cc938f4a2f7b720ed83f28190b5a277ab0dff", "filename": "src/librustc_builtin_macros/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2FCargo.toml?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -20,5 +20,5 @@ rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }\n rustc_expand = { path = \"../librustc_expand\" }\n-syntax_pos = { path = \"../librustc_span\", package = \"rustc_span\" }\n+rustc_span = { path = \"../librustc_span\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "71d6d058d90beaa82d2930fa84912f8f2b58f6ff", "filename": "src/librustc_builtin_macros/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fasm.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -5,13 +5,13 @@ use State::*;\n use errors::{DiagnosticBuilder, PResult};\n use rustc_expand::base::*;\n use rustc_parse::parser::Parser;\n+use rustc_span::Span;\n use syntax::ast::{self, AsmDialect};\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym, Symbol};\n use syntax::token::{self, Token};\n use syntax::tokenstream::{self, TokenStream};\n use syntax::{span_err, struct_span_err};\n-use syntax_pos::Span;\n \n use rustc_error_codes::*;\n "}, {"sha": "c32263a6a0f9c29f1aeb994406a81576681d71e1", "filename": "src/librustc_builtin_macros/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fassert.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -2,13 +2,13 @@ use errors::{Applicability, DiagnosticBuilder};\n \n use rustc_expand::base::*;\n use rustc_parse::parser::Parser;\n+use rustc_span::{Span, DUMMY_SP};\n use syntax::ast::{self, *};\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::symbol::{sym, Symbol};\n use syntax::token::{self, TokenKind};\n use syntax::tokenstream::{DelimSpan, TokenStream, TokenTree};\n-use syntax_pos::{Span, DUMMY_SP};\n \n pub fn expand_assert<'cx>(\n     cx: &'cx mut ExtCtxt<'_>,"}, {"sha": "62a4dc06b1fe2b241eae6cfc4380ca51a359405f", "filename": "src/librustc_builtin_macros/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fcfg.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -4,11 +4,11 @@\n use errors::DiagnosticBuilder;\n \n use rustc_expand::base::{self, *};\n+use rustc_span::Span;\n use syntax::ast;\n use syntax::attr;\n use syntax::token;\n use syntax::tokenstream::TokenStream;\n-use syntax_pos::Span;\n \n pub fn expand_cfg(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "2f7f7e73ac2ce900d49dfa1808f4d206a355b52f", "filename": "src/librustc_builtin_macros/cmdline_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fcmdline_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fcmdline_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fcmdline_attrs.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,11 +1,11 @@\n //! Attributes injected into the crate root from command line using `-Z crate-attr`.\n \n use rustc_expand::panictry;\n+use rustc_span::FileName;\n use syntax::ast::{self, AttrItem, AttrStyle};\n use syntax::attr::mk_attr;\n use syntax::sess::ParseSess;\n use syntax::token;\n-use syntax_pos::FileName;\n \n pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -> ast::Crate {\n     for raw_attr in attrs {"}, {"sha": "4d8d168a2a8664fa21cdb290e9cd44db054f8238", "filename": "src/librustc_builtin_macros/compile_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fcompile_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fcompile_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fcompile_error.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,8 +1,8 @@\n // The compiler code necessary to support the compile_error! extension.\n \n use rustc_expand::base::{self, *};\n+use rustc_span::Span;\n use syntax::tokenstream::TokenStream;\n-use syntax_pos::Span;\n \n pub fn expand_compile_error<'cx>(\n     cx: &'cx mut ExtCtxt<'_>,"}, {"sha": "c768402b479f8e8141246e084d76f0954582317b", "filename": "src/librustc_builtin_macros/concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fconcat.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -7,7 +7,7 @@ use std::string::String;\n \n pub fn expand_concat(\n     cx: &mut base::ExtCtxt<'_>,\n-    sp: syntax_pos::Span,\n+    sp: rustc_span::Span,\n     tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'static> {\n     let es = match base::get_exprs_from_tts(cx, sp, tts) {"}, {"sha": "449cb2a0b1887ac27483f1d626bbc1a8940b258c", "filename": "src/librustc_builtin_macros/concat_idents.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fconcat_idents.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,10 +1,10 @@\n use rustc_expand::base::{self, *};\n+use rustc_span::symbol::Symbol;\n+use rustc_span::Span;\n use syntax::ast;\n use syntax::ptr::P;\n use syntax::token::{self, Token};\n use syntax::tokenstream::{TokenStream, TokenTree};\n-use syntax_pos::symbol::Symbol;\n-use syntax_pos::Span;\n \n pub fn expand_concat_idents<'cx>(\n     cx: &'cx mut ExtCtxt<'_>,"}, {"sha": "ceb9aab484864a8a27bc1c26939acebf774ad67f", "filename": "src/librustc_builtin_macros/deriving/bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fbounds.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -3,8 +3,8 @@ use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n use rustc_expand::base::{Annotatable, ExtCtxt};\n+use rustc_span::Span;\n use syntax::ast::MetaItem;\n-use syntax_pos::Span;\n \n pub fn expand_deriving_copy(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "0b79ee13132b97d9f75a0f491d93a5deaa51d4bc", "filename": "src/librustc_builtin_macros/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fclone.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -3,10 +3,10 @@ use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n use rustc_expand::base::{Annotatable, ExtCtxt};\n+use rustc_span::Span;\n use syntax::ast::{self, Expr, GenericArg, Generics, ItemKind, MetaItem, VariantData};\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym, Symbol};\n-use syntax_pos::Span;\n \n pub fn expand_deriving_clone(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "72c3be2365444f1803402bed48554549c7edb643", "filename": "src/librustc_builtin_macros/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Feq.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -3,10 +3,10 @@ use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n use rustc_expand::base::{Annotatable, ExtCtxt};\n+use rustc_span::Span;\n use syntax::ast::{self, Expr, GenericArg, Ident, MetaItem};\n use syntax::ptr::P;\n use syntax::symbol::{sym, Symbol};\n-use syntax_pos::Span;\n \n pub fn expand_deriving_eq(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "c16f80159503afec8095a99513435afad69ccfaa", "filename": "src/librustc_builtin_macros/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Ford.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -3,10 +3,10 @@ use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n use rustc_expand::base::{Annotatable, ExtCtxt};\n+use rustc_span::Span;\n use syntax::ast::{self, Expr, MetaItem};\n use syntax::ptr::P;\n use syntax::symbol::sym;\n-use syntax_pos::Span;\n \n pub fn expand_deriving_ord(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "daf518242d5af9094b00d6113c7a4a0fae8023ee", "filename": "src/librustc_builtin_macros/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -3,10 +3,10 @@ use crate::deriving::generic::*;\n use crate::deriving::{path_local, path_std};\n \n use rustc_expand::base::{Annotatable, ExtCtxt};\n+use rustc_span::Span;\n use syntax::ast::{BinOpKind, Expr, MetaItem};\n use syntax::ptr::P;\n use syntax::symbol::sym;\n-use syntax_pos::Span;\n \n pub fn expand_deriving_partial_eq(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "5313b829ca8f62066ce70216b11fa74c15c3730b", "filename": "src/librustc_builtin_macros/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -5,10 +5,10 @@ use crate::deriving::generic::*;\n use crate::deriving::{path_local, path_std, pathvec_std};\n \n use rustc_expand::base::{Annotatable, ExtCtxt};\n+use rustc_span::Span;\n use syntax::ast::{self, BinOpKind, Expr, MetaItem};\n use syntax::ptr::P;\n use syntax::symbol::{sym, Symbol};\n-use syntax_pos::Span;\n \n pub fn expand_deriving_partial_ord(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "e9c5c7ff9cc6f1a573c9d1e4717631080c575476", "filename": "src/librustc_builtin_macros/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fdebug.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -3,11 +3,11 @@ use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n use rustc_expand::base::{Annotatable, ExtCtxt};\n+use rustc_span::{Span, DUMMY_SP};\n use syntax::ast::{self, Ident};\n use syntax::ast::{Expr, MetaItem};\n use syntax::ptr::P;\n use syntax::symbol::sym;\n-use syntax_pos::{Span, DUMMY_SP};\n \n pub fn expand_deriving_debug(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "8706535cd3f70b9b41271fbf0c43c281d8ffce27", "filename": "src/librustc_builtin_macros/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fdecodable.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -5,11 +5,11 @@ use crate::deriving::generic::*;\n use crate::deriving::pathvec_std;\n \n use rustc_expand::base::{Annotatable, ExtCtxt};\n+use rustc_span::Span;\n use syntax::ast;\n use syntax::ast::{Expr, MetaItem, Mutability};\n use syntax::ptr::P;\n use syntax::symbol::Symbol;\n-use syntax_pos::Span;\n \n pub fn expand_deriving_rustc_decodable(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "43185f924e79cbac00099859a472e6683ef2d3ef", "filename": "src/librustc_builtin_macros/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fdefault.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -3,11 +3,11 @@ use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n use rustc_expand::base::{Annotatable, DummyResult, ExtCtxt};\n+use rustc_span::Span;\n use syntax::ast::{Expr, MetaItem};\n use syntax::ptr::P;\n use syntax::span_err;\n use syntax::symbol::{kw, sym};\n-use syntax_pos::Span;\n \n use rustc_error_codes::*;\n "}, {"sha": "496e5e3058d1cf8599e8175c5d6f937d5f55280c", "filename": "src/librustc_builtin_macros/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fencodable.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -90,10 +90,10 @@ use crate::deriving::generic::*;\n use crate::deriving::pathvec_std;\n \n use rustc_expand::base::{Annotatable, ExtCtxt};\n+use rustc_span::Span;\n use syntax::ast::{Expr, ExprKind, MetaItem, Mutability};\n use syntax::ptr::P;\n use syntax::symbol::Symbol;\n-use syntax_pos::Span;\n \n pub fn expand_deriving_rustc_encodable(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "da81e52fb695455444638512acae0a3aacd8895d", "filename": "src/librustc_builtin_macros/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -182,6 +182,7 @@ use std::iter;\n use std::vec;\n \n use rustc_expand::base::{Annotatable, ExtCtxt};\n+use rustc_span::Span;\n use syntax::ast::{self, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n use syntax::ast::{GenericArg, GenericParamKind, VariantData};\n use syntax::attr;\n@@ -190,7 +191,6 @@ use syntax::sess::ParseSess;\n use syntax::source_map::respan;\n use syntax::symbol::{kw, sym, Symbol};\n use syntax::util::map_in_place::MapInPlace;\n-use syntax_pos::Span;\n \n use ty::{LifetimeBounds, Path, Ptr, PtrTy, Self_, Ty};\n "}, {"sha": "4597bfe3d1cbb4c216fc30b3234a8042ca1f2ad7", "filename": "src/librustc_builtin_macros/deriving/generic/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -5,11 +5,11 @@ pub use PtrTy::*;\n pub use Ty::*;\n \n use rustc_expand::base::ExtCtxt;\n+use rustc_span::symbol::kw;\n+use rustc_span::Span;\n use syntax::ast::{self, Expr, GenericArg, GenericParamKind, Generics, Ident, SelfKind};\n use syntax::ptr::P;\n use syntax::source_map::{respan, DUMMY_SP};\n-use syntax_pos::symbol::kw;\n-use syntax_pos::Span;\n \n /// The types of pointers\n #[derive(Clone)]"}, {"sha": "bb83c0449c70f8681719b903131f02670fa4ce4e", "filename": "src/librustc_builtin_macros/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fhash.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -3,10 +3,10 @@ use crate::deriving::generic::*;\n use crate::deriving::{self, path_std, pathvec_std};\n \n use rustc_expand::base::{Annotatable, ExtCtxt};\n+use rustc_span::Span;\n use syntax::ast::{Expr, MetaItem, Mutability};\n use syntax::ptr::P;\n use syntax::symbol::sym;\n-use syntax_pos::Span;\n \n pub fn expand_deriving_hash(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "6f1b3adfb46cfc36b87916fd5eda45035af934d4", "filename": "src/librustc_builtin_macros/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,10 +1,10 @@\n //! The compiler code necessary to implement the `#[derive]` extensions.\n \n use rustc_expand::base::{Annotatable, ExtCtxt, MultiItemModifier};\n+use rustc_span::Span;\n use syntax::ast::{self, ItemKind, MetaItem};\n use syntax::ptr::P;\n use syntax::symbol::{sym, Symbol};\n-use syntax_pos::Span;\n \n macro path_local($x:ident) {\n     generic::ty::Path::new_local(stringify!($x))"}, {"sha": "17489295ff69c6398f9640959720f377bbb0b6cf", "filename": "src/librustc_builtin_macros/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fenv.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -4,10 +4,10 @@\n //\n \n use rustc_expand::base::{self, *};\n+use rustc_span::Span;\n use syntax::ast::{self, GenericArg, Ident};\n use syntax::symbol::{kw, sym, Symbol};\n use syntax::tokenstream::TokenStream;\n-use syntax_pos::Span;\n \n use std::env;\n "}, {"sha": "6e7853c85adab65b0f803dabb2264e649e88e067", "filename": "src/librustc_builtin_macros/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -8,12 +8,12 @@ use errors::Applicability;\n use errors::DiagnosticBuilder;\n \n use rustc_expand::base::{self, *};\n+use rustc_span::{MultiSpan, Span};\n use syntax::ast;\n use syntax::ptr::P;\n use syntax::symbol::{sym, Symbol};\n use syntax::token;\n use syntax::tokenstream::TokenStream;\n-use syntax_pos::{MultiSpan, Span};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use std::borrow::Cow;"}, {"sha": "cc3c403450e0478bf0801a6097369bfb18ea40b3", "filename": "src/librustc_builtin_macros/format_foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat_foreign.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,6 +1,6 @@\n pub mod printf {\n     use super::strcursor::StrCursor as Cur;\n-    use syntax_pos::InnerSpan;\n+    use rustc_span::InnerSpan;\n \n     /// Represents a single `printf`-style substitution.\n     #[derive(Clone, PartialEq, Debug)]\n@@ -604,7 +604,7 @@ pub mod printf {\n \n pub mod shell {\n     use super::strcursor::StrCursor as Cur;\n-    use syntax_pos::InnerSpan;\n+    use rustc_span::InnerSpan;\n \n     #[derive(Clone, PartialEq, Debug)]\n     pub enum Substitution<'a> {"}, {"sha": "33c54c9cee001dde83c2ba4b001ab1b4ed105f5b", "filename": "src/librustc_builtin_macros/format_foreign/printf/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fformat_foreign%2Fprintf%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fformat_foreign%2Fprintf%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat_foreign%2Fprintf%2Ftests.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -37,7 +37,7 @@ fn test_parse() {\n                         precision: $prec,\n                         length: $len,\n                         type_: $type_,\n-                        position: syntax_pos::InnerSpan::new($pos.0, $pos.1),\n+                        position: rustc_span::InnerSpan::new($pos.0, $pos.1),\n                     }),\n                     \"!\"\n                 ))"}, {"sha": "58e1c0fc2b1c9b87434cd8826ded69accfc8c0aa", "filename": "src/librustc_builtin_macros/global_allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,12 +1,12 @@\n use crate::util::check_builtin_macro_attribute;\n \n use rustc_expand::base::{Annotatable, ExtCtxt};\n+use rustc_span::Span;\n use syntax::ast::{self, Attribute, Expr, FnHeader, FnSig, Generics, Ident, Param};\n use syntax::ast::{ItemKind, Mutability, Stmt, Ty, TyKind, Unsafety};\n use syntax::expand::allocator::{AllocatorKind, AllocatorMethod, AllocatorTy, ALLOCATOR_METHODS};\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym, Symbol};\n-use syntax_pos::Span;\n \n pub fn expand(\n     ecx: &mut ExtCtxt<'_>,"}, {"sha": "f36b9af77247fc8b1835b3dd80ce348d85b038f0", "filename": "src/librustc_builtin_macros/global_asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fglobal_asm.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -10,13 +10,13 @@\n use errors::DiagnosticBuilder;\n \n use rustc_expand::base::{self, *};\n+use rustc_span::Span;\n use smallvec::smallvec;\n use syntax::ast;\n use syntax::ptr::P;\n use syntax::source_map::respan;\n use syntax::token;\n use syntax::tokenstream::TokenStream;\n-use syntax_pos::Span;\n \n pub fn expand_global_asm<'cx>(\n     cx: &'cx mut ExtCtxt<'_>,"}, {"sha": "7c7fc286e0a5e0e0aa04c3fc86cfbabeb851c37a", "filename": "src/librustc_builtin_macros/log_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Flog_syntax.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,11 +1,11 @@\n use rustc_expand::base;\n+use rustc_span;\n use syntax::print;\n use syntax::tokenstream::TokenStream;\n-use syntax_pos;\n \n pub fn expand_log_syntax<'cx>(\n     _cx: &'cx mut base::ExtCtxt<'_>,\n-    sp: syntax_pos::Span,\n+    sp: rustc_span::Span,\n     tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'cx> {\n     println!(\"{}\", print::pprust::tts_to_string(tts));"}, {"sha": "f2e3414588bba77880cc694fe5104e1741e7cc8c", "filename": "src/librustc_builtin_macros/proc_macro_harness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -2,6 +2,8 @@ use std::mem;\n \n use rustc_expand::base::{ExtCtxt, Resolver};\n use rustc_expand::expand::{AstFragment, ExpansionConfig};\n+use rustc_span::hygiene::AstPass;\n+use rustc_span::{Span, DUMMY_SP};\n use smallvec::smallvec;\n use syntax::ast::{self, Ident};\n use syntax::attr;\n@@ -11,8 +13,6 @@ use syntax::ptr::P;\n use syntax::sess::ParseSess;\n use syntax::symbol::{kw, sym};\n use syntax::visit::{self, Visitor};\n-use syntax_pos::hygiene::AstPass;\n-use syntax_pos::{Span, DUMMY_SP};\n \n struct ProcMacroDerive {\n     trait_name: ast::Name,"}, {"sha": "e24f49909ced25c6a7a426e69ba4be4d1161609c", "filename": "src/librustc_builtin_macros/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fsource_util.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -9,8 +9,8 @@ use syntax::symbol::Symbol;\n use syntax::token;\n use syntax::tokenstream::TokenStream;\n \n+use rustc_span::{self, Pos, Span};\n use smallvec::SmallVec;\n-use syntax_pos::{self, Pos, Span};\n \n use rustc_data_structures::sync::Lrc;\n "}, {"sha": "e7f6c59e88970fa559298ae85da223eb4ea87952", "filename": "src/librustc_builtin_macros/standard_library_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,12 +1,12 @@\n use rustc_expand::base::{ExtCtxt, Resolver};\n use rustc_expand::expand::ExpansionConfig;\n+use rustc_span::hygiene::AstPass;\n+use rustc_span::DUMMY_SP;\n use syntax::edition::Edition;\n use syntax::ptr::P;\n use syntax::sess::ParseSess;\n use syntax::symbol::{kw, sym, Ident, Symbol};\n use syntax::{ast, attr};\n-use syntax_pos::hygiene::AstPass;\n-use syntax_pos::DUMMY_SP;\n \n pub fn inject(\n     mut krate: ast::Crate,"}, {"sha": "280565badfdafbe0a588b6e8ce7910133e80b797", "filename": "src/librustc_builtin_macros/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -3,12 +3,12 @@\n use crate::util::check_builtin_macro_attribute;\n \n use rustc_expand::base::*;\n+use rustc_span::Span;\n use syntax::ast;\n use syntax::attr;\n use syntax::print::pprust;\n use syntax::source_map::respan;\n use syntax::symbol::{sym, Symbol};\n-use syntax_pos::Span;\n \n use std::iter;\n "}, {"sha": "ea0c2d070935368de022879ab010cf8d77f36307", "filename": "src/librustc_builtin_macros/test_harness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest_harness.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -4,6 +4,8 @@ use log::debug;\n use rustc_expand::base::{ExtCtxt, Resolver};\n use rustc_expand::expand::{AstFragment, ExpansionConfig};\n use rustc_feature::Features;\n+use rustc_span::hygiene::{AstPass, SyntaxContext, Transparency};\n+use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::PanicStrategy;\n use smallvec::{smallvec, SmallVec};\n use syntax::ast::{self, Ident};\n@@ -14,8 +16,6 @@ use syntax::ptr::P;\n use syntax::sess::ParseSess;\n use syntax::source_map::respan;\n use syntax::symbol::{sym, Symbol};\n-use syntax_pos::hygiene::{AstPass, SyntaxContext, Transparency};\n-use syntax_pos::{Span, DUMMY_SP};\n \n use std::{iter, mem};\n "}, {"sha": "577a1d690c1f900825c997c552b9b0f8247c32fc", "filename": "src/librustc_builtin_macros/trace_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftrace_macros.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,7 +1,7 @@\n use rustc_expand::base::{self, ExtCtxt};\n+use rustc_span::Span;\n use syntax::symbol::kw;\n use syntax::tokenstream::{TokenStream, TokenTree};\n-use syntax_pos::Span;\n \n pub fn expand_trace_macros(\n     cx: &mut ExtCtxt<'_>,"}, {"sha": "b7d1a5d1d7c68fc3f403c48a571ef86f739362fc", "filename": "src/librustc_builtin_macros/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_builtin_macros%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Futil.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,8 +1,8 @@\n use rustc_expand::base::ExtCtxt;\n use rustc_feature::AttributeTemplate;\n use rustc_parse::validate_attr;\n+use rustc_span::Symbol;\n use syntax::ast::MetaItem;\n-use syntax_pos::Symbol;\n \n pub fn check_builtin_macro_attribute(ecx: &ExtCtxt<'_>, meta_item: &MetaItem, name: Symbol) {\n     // All the built-in macro attributes are \"words\" at the moment."}, {"sha": "140a896b681db90ea1a35dbaf25dfb749a9959f1", "filename": "src/librustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2FCargo.toml?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -31,4 +31,4 @@ rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }\n rustc_expand = { path = \"../librustc_expand\" }\n-syntax_pos = { path = \"../librustc_span\", package = \"rustc_span\" }\n+rustc_span = { path = \"../librustc_span\" }"}, {"sha": "14e2009912fca35d11074cd7254784c9262360e5", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -8,7 +8,7 @@ use rustc::hir;\n use rustc_codegen_ssa::mir::operand::OperandValue;\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::traits::*;\n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n use libc::{c_char, c_uint};\n use log::debug;"}, {"sha": "c757fb596b11de9d35895ffc219d5c2685445a2c", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -35,9 +35,9 @@ use rustc_codegen_ssa::back::write::submit_codegened_module_to_llvm;\n use rustc_codegen_ssa::traits::*;\n \n use rustc::hir::CodegenFnAttrs;\n+use rustc_span::symbol::Symbol;\n use std::ffi::CString;\n use std::time::Instant;\n-use syntax_pos::symbol::Symbol;\n \n use crate::value::Value;\n "}, {"sha": "2f3be077ef5c3f141dd88c43c4e2e26c4dfea157", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -14,9 +14,9 @@ use rustc::mir::mono::MonoItem;\n use rustc::ty::{self, Instance, Ty};\n use rustc::{bug, span_bug};\n use rustc_codegen_ssa::traits::*;\n+use rustc_span::Span;\n use rustc_target::abi::HasDataLayout;\n use syntax::symbol::{sym, Symbol};\n-use syntax_pos::Span;\n \n use rustc::ty::layout::{self, Align, LayoutOf, Size};\n "}, {"sha": "eba05ed5d7787096b1e83c3b73df344bb4f5e258", "filename": "src/librustc_codegen_llvm/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -9,7 +9,7 @@ use rustc::mir::{Body, SourceScope};\n \n use libc::c_uint;\n \n-use syntax_pos::Pos;\n+use rustc_span::Pos;\n \n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::Idx;"}, {"sha": "e752103c1d7ae2204884c47a99f045f7c7fe7070", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -42,10 +42,10 @@ use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_fs_util::path_to_c_string;\n use rustc_index::vec::{Idx, IndexVec};\n+use rustc_span::{self, FileName, Span};\n use rustc_target::abi::HasDataLayout;\n use syntax::ast;\n use syntax::symbol::{Interner, Symbol};\n-use syntax_pos::{self, FileName, Span};\n \n use libc::{c_longlong, c_uint};\n use std::collections::hash_map::Entry;\n@@ -506,7 +506,7 @@ fn trait_pointer_metadata(\n             type_metadata: type_metadata(\n                 cx,\n                 cx.tcx.mk_mut_ptr(cx.tcx.types.u8),\n-                syntax_pos::DUMMY_SP,\n+                rustc_span::DUMMY_SP,\n             ),\n             offset: layout.fields.offset(0),\n             size: data_ptr_field.size,\n@@ -516,7 +516,7 @@ fn trait_pointer_metadata(\n         },\n         MemberDescription {\n             name: \"vtable\".to_owned(),\n-            type_metadata: type_metadata(cx, vtable_field.ty, syntax_pos::DUMMY_SP),\n+            type_metadata: type_metadata(cx, vtable_field.ty, rustc_span::DUMMY_SP),\n             offset: layout.fields.offset(1),\n             size: vtable_field.size,\n             align: vtable_field.align.abi,\n@@ -533,7 +533,7 @@ fn trait_pointer_metadata(\n         member_descriptions,\n         containing_scope,\n         file_metadata,\n-        syntax_pos::DUMMY_SP,\n+        rustc_span::DUMMY_SP,\n     )\n }\n \n@@ -1816,7 +1816,7 @@ fn prepare_enum_metadata(\n             None => {\n                 let (discriminant_size, discriminant_align) = (discr.size(cx), discr.align(cx));\n                 let discriminant_base_type_metadata =\n-                    type_metadata(cx, discr.to_ty(cx.tcx), syntax_pos::DUMMY_SP);\n+                    type_metadata(cx, discr.to_ty(cx.tcx), rustc_span::DUMMY_SP);\n \n                 let discriminant_name = match enum_type.kind {\n                     ty::Adt(..) => SmallCStr::new(&cx.tcx.item_name(enum_def_id).as_str()),\n@@ -2146,7 +2146,7 @@ fn compute_type_parameters(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>) -> Option<&'\n                         let actual_type =\n                             cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n                         let actual_type_metadata =\n-                            type_metadata(cx, actual_type, syntax_pos::DUMMY_SP);\n+                            type_metadata(cx, actual_type, rustc_span::DUMMY_SP);\n                         let name = SmallCStr::new(&name.as_str());\n                         Some(unsafe {\n                             Some(llvm::LLVMRustDIBuilderCreateTemplateTypeParameter(\n@@ -2327,7 +2327,7 @@ pub fn create_vtable_metadata(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>, vtable: &\n         return;\n     }\n \n-    let type_metadata = type_metadata(cx, ty, syntax_pos::DUMMY_SP);\n+    let type_metadata = type_metadata(cx, ty, rustc_span::DUMMY_SP);\n \n     unsafe {\n         // `LLVMRustDIBuilderCreateStructType()` wants an empty array. A null\n@@ -2376,7 +2376,7 @@ pub fn create_vtable_metadata(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>, vtable: &\n pub fn extend_scope_to_file(\n     cx: &CodegenCx<'ll, '_>,\n     scope_metadata: &'ll DIScope,\n-    file: &syntax_pos::SourceFile,\n+    file: &rustc_span::SourceFile,\n     defining_crate: CrateNum,\n ) -> &'ll DILexicalBlock {\n     let file_metadata = file_metadata(cx, &file.name, defining_crate);"}, {"sha": "765643113f5269228402ce4322b3c80e8ef4dc1c", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -37,10 +37,10 @@ use std::ffi::CString;\n \n use rustc::ty::layout::{self, HasTyCtxt, LayoutOf, Size};\n use rustc_codegen_ssa::traits::*;\n+use rustc_span::{self, BytePos, Pos, Span};\n use smallvec::SmallVec;\n use syntax::ast;\n use syntax::symbol::Symbol;\n-use syntax_pos::{self, BytePos, Pos, Span};\n \n mod create_scope_map;\n pub mod gdb;\n@@ -387,7 +387,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             signature.push(if fn_abi.ret.is_ignore() {\n                 None\n             } else {\n-                Some(type_metadata(cx, fn_abi.ret.layout.ty, syntax_pos::DUMMY_SP))\n+                Some(type_metadata(cx, fn_abi.ret.layout.ty, rustc_span::DUMMY_SP))\n             });\n \n             // Arguments types\n@@ -412,14 +412,14 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                         }\n                         _ => t,\n                     };\n-                    Some(type_metadata(cx, t, syntax_pos::DUMMY_SP))\n+                    Some(type_metadata(cx, t, rustc_span::DUMMY_SP))\n                 }));\n             } else {\n                 signature.extend(\n                     fn_abi\n                         .args\n                         .iter()\n-                        .map(|arg| Some(type_metadata(cx, arg.layout.ty, syntax_pos::DUMMY_SP))),\n+                        .map(|arg| Some(type_metadata(cx, arg.layout.ty, rustc_span::DUMMY_SP))),\n                 );\n             }\n \n@@ -462,7 +462,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                             let actual_type =\n                                 cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n                             let actual_type_metadata =\n-                                type_metadata(cx, actual_type, syntax_pos::DUMMY_SP);\n+                                type_metadata(cx, actual_type, rustc_span::DUMMY_SP);\n                             let name = SmallCStr::new(&name.as_str());\n                             Some(unsafe {\n                                 Some(llvm::LLVMRustDIBuilderCreateTemplateTypeParameter(\n@@ -515,7 +515,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                     // so avoid methods on other types (e.g., `<*mut T>::null`).\n                     match impl_self_ty.kind {\n                         ty::Adt(def, ..) if !def.is_box() => {\n-                            Some(type_metadata(cx, impl_self_ty, syntax_pos::DUMMY_SP))\n+                            Some(type_metadata(cx, impl_self_ty, rustc_span::DUMMY_SP))\n                         }\n                         _ => None,\n                     }\n@@ -549,7 +549,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     fn extend_scope_to_file(\n         &self,\n         scope_metadata: &'ll DIScope,\n-        file: &syntax_pos::SourceFile,\n+        file: &rustc_span::SourceFile,\n         defining_crate: CrateNum,\n     ) -> &'ll DILexicalBlock {\n         metadata::extend_scope_to_file(&self, scope_metadata, file, defining_crate)"}, {"sha": "6afaca44e0e96d2312994fcccce946bc1d9685c5", "filename": "src/librustc_codegen_llvm/debuginfo/source_loc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -11,7 +11,7 @@ use log::debug;\n use rustc_codegen_ssa::traits::*;\n \n use libc::c_uint;\n-use syntax_pos::{Pos, Span};\n+use rustc_span::{Pos, Span};\n \n /// Sets the current debug location at the beginning of the span.\n ///"}, {"sha": "53497e396cd3e1d952640cd4ac8af15d7bff8c64", "filename": "src/librustc_codegen_llvm/debuginfo/utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -11,7 +11,7 @@ use crate::llvm;\n use crate::llvm::debuginfo::{DIArray, DIBuilder, DIDescriptor, DIScope};\n use rustc_codegen_ssa::traits::*;\n \n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n pub fn is_node_local_to_unit(cx: &CodegenCx<'_, '_>, def_id: DefId) -> bool {\n     // The is_local_to_unit flag indicates whether a function is local to the\n@@ -32,8 +32,8 @@ pub fn create_DIArray(builder: &DIBuilder<'ll>, arr: &[Option<&'ll DIDescriptor>\n     };\n }\n \n-/// Returns syntax_pos::Loc corresponding to the beginning of the span\n-pub fn span_start(cx: &CodegenCx<'_, '_>, span: Span) -> syntax_pos::Loc {\n+/// Returns rustc_span::Loc corresponding to the beginning of the span\n+pub fn span_start(cx: &CodegenCx<'_, '_>, span: Span) -> rustc_span::Loc {\n     cx.sess().source_map().lookup_char_pos(span.lo())\n }\n "}, {"sha": "0e121df1d257e27d0064fe32897ee3a534d3a978", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -23,7 +23,7 @@ use syntax::ast;\n use rustc_codegen_ssa::common::span_invalid_monomorphization_error;\n use rustc_codegen_ssa::traits::*;\n \n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n use std::cmp::Ordering;\n use std::{i128, iter, u128};"}, {"sha": "0b6a2861c42a5ff844d1ceb67b11be3bb25b3b03", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -21,7 +21,7 @@\n #![feature(trusted_len)]\n \n use back::write::{create_informational_target_machine, create_target_machine};\n-use syntax_pos::symbol::Symbol;\n+use rustc_span::symbol::Symbol;\n \n pub use llvm_util::target_features;\n use rustc::dep_graph::WorkProduct;"}, {"sha": "b57ca0d09f9c618e60557de04c1677e2bfcee267", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -6,10 +6,10 @@ use rustc::session::config::PrintRequest;\n use rustc::session::Session;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_feature::UnstableFeatures;\n+use rustc_span::symbol::Symbol;\n use rustc_target::spec::{MergeFunctions, PanicStrategy};\n use std::ffi::CString;\n use syntax::symbol::sym;\n-use syntax_pos::symbol::Symbol;\n \n use std::slice;\n use std::str;"}, {"sha": "7eb1ae22397fb748c415c306ee4d7d652b5042c3", "filename": "src/librustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FCargo.toml?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -21,7 +21,7 @@ tempfile = \"3.1\"\n \n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n-syntax_pos = { path = \"../librustc_span\", package = \"rustc_span\" }\n+rustc_span = { path = \"../librustc_span\" }\n rustc = { path = \"../librustc\" }\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }"}, {"sha": "4e49d4dda935dec4b84ace2ec5ac4b55cc5251d5", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -30,11 +30,11 @@ use rustc_incremental::{\n     copy_cgu_workproducts_to_incr_comp_cache_dir, in_incr_comp_dir, in_incr_comp_dir_sess,\n };\n use rustc_session::cgu_reuse_tracker::CguReuseTracker;\n+use rustc_span::hygiene::ExpnId;\n+use rustc_span::source_map::SourceMap;\n+use rustc_span::symbol::{sym, Symbol};\n use rustc_target::spec::MergeFunctions;\n use syntax::attr;\n-use syntax_pos::hygiene::ExpnId;\n-use syntax_pos::source_map::SourceMap;\n-use syntax_pos::symbol::{sym, Symbol};\n \n use std::any::Any;\n use std::fs;"}, {"sha": "27841d67c1a9a4a338d20d6cf440c31819d5c589", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -43,8 +43,8 @@ use rustc::util::nodemap::FxHashMap;\n use rustc_codegen_utils::{check_for_rustc_errors_attr, symbol_names_test};\n use rustc_index::vec::Idx;\n use rustc_session::cgu_reuse_tracker::CguReuse;\n+use rustc_span::Span;\n use syntax::attr;\n-use syntax_pos::Span;\n \n use std::cmp;\n use std::ops::{Deref, DerefMut};"}, {"sha": "e0505daed8a62afa8f0f2af90da18e3dcbf5bd6b", "filename": "src/librustc_codegen_ssa/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fcommon.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -2,7 +2,7 @@\n \n use rustc::session::Session;\n use rustc::ty::{Ty, TyCtxt};\n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n use crate::base;\n use crate::traits::*;"}, {"sha": "fd31361d67950d427c35700e83a89dc92abec3a4", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -34,8 +34,8 @@ use rustc::ty::query::Providers;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n+use rustc_span::symbol::Symbol;\n use std::path::{Path, PathBuf};\n-use syntax_pos::symbol::Symbol;\n \n pub mod back;\n pub mod base;"}, {"sha": "0ceb44d019b64efa925c052cbb4e45be1cec95c7", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -14,7 +14,7 @@ use rustc::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n-use syntax_pos::DUMMY_SP;\n+use rustc_span::DUMMY_SP;\n \n pub fn non_ssa_locals<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     fx: &FunctionCx<'a, 'tcx, Bx>,"}, {"sha": "5d26b84b2c931309a7e959aefe83a2f8c5b25014", "filename": "src/librustc_codegen_ssa/mir/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -6,8 +6,8 @@ use rustc::ty::layout::{LayoutOf, Size};\n use rustc::ty::TyCtxt;\n use rustc_index::vec::IndexVec;\n \n+use rustc_span::{BytePos, Span};\n use syntax::symbol::kw;\n-use syntax_pos::{BytePos, Span};\n \n use super::OperandValue;\n use super::{FunctionCx, LocalRef};\n@@ -65,7 +65,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             // Walk up the macro expansion chain until we reach a non-expanded span.\n             // We also stop at the function body level because no line stepping can occur\n             // at the level above that.\n-            let span = syntax_pos::hygiene::walk_chain(source_info.span, self.mir.span.ctxt());\n+            let span = rustc_span::hygiene::walk_chain(source_info.span, self.mir.span.ctxt());\n             let scope = self.scope_metadata_for_loc(source_info.scope, span.lo());\n             // Use span of the outermost expansion site, while keeping the original lexical scope.\n             (scope, span)"}, {"sha": "6af63edbe79ed51cd2838e6cb1fa9a8eb2df7824", "filename": "src/librustc_codegen_ssa/traits/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,7 +1,7 @@\n use super::BackendTypes;\n use crate::mir::place::PlaceRef;\n use rustc::hir::{GlobalAsm, InlineAsmInner};\n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n pub trait AsmBuilderMethods<'tcx>: BackendTypes {\n     /// Take an inline assembly expression and splat it out via LLVM"}, {"sha": "e0d0a2f32f33183acabea4fd038a353896507225", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -7,8 +7,8 @@ use rustc::ty::layout::{HasTyCtxt, LayoutOf, TyLayout};\n use rustc::ty::Ty;\n use rustc::ty::TyCtxt;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n+use rustc_span::symbol::Symbol;\n use syntax::expand::allocator::AllocatorKind;\n-use syntax_pos::symbol::Symbol;\n \n use std::sync::mpsc;\n use std::sync::Arc;"}, {"sha": "608fa5ef71e03d9e67f4885830eae1a03c7e684c", "filename": "src/librustc_codegen_ssa/traits/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -3,7 +3,7 @@ use crate::mir::place::PlaceRef;\n use rustc::mir::interpret::Allocation;\n use rustc::mir::interpret::Scalar;\n use rustc::ty::layout;\n-use syntax_pos::Symbol;\n+use rustc_span::Symbol;\n \n pub trait ConstMethods<'tcx>: BackendTypes {\n     // Constant constructors"}, {"sha": "c2e8bad4b2dbe4d76095b75ec8ca7de79a2cd493", "filename": "src/librustc_codegen_ssa/traits/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -4,9 +4,9 @@ use rustc::hir::def_id::CrateNum;\n use rustc::mir;\n use rustc::ty::layout::Size;\n use rustc::ty::{Instance, Ty};\n+use rustc_span::{SourceFile, Span};\n use rustc_target::abi::call::FnAbi;\n use syntax::ast::Name;\n-use syntax_pos::{SourceFile, Span};\n \n pub trait DebugInfoMethods<'tcx>: BackendTypes {\n     fn create_vtable_metadata(&self, ty: Ty<'tcx>, vtable: Self::Value);"}, {"sha": "482a76932ae4277cefc3c2d90955e4485c4ec426", "filename": "src/librustc_codegen_ssa/traits/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Ftraits%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Ftraits%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fintrinsic.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,8 +1,8 @@\n use super::BackendTypes;\n use crate::mir::operand::OperandRef;\n use rustc::ty::{self, Ty};\n+use rustc_span::Span;\n use rustc_target::abi::call::FnAbi;\n-use syntax_pos::Span;\n \n pub trait IntrinsicCallMethods<'tcx>: BackendTypes {\n     /// Remember to add all intrinsics here, in librustc_typeck/check/mod.rs,"}, {"sha": "0d644e6dd30b3e20398a0788ee038904498133ed", "filename": "src/librustc_codegen_ssa/traits/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -5,8 +5,8 @@ use crate::common::TypeKind;\n use crate::mir::place::PlaceRef;\n use rustc::ty::layout::{self, TyLayout};\n use rustc::ty::{self, Ty};\n+use rustc_span::DUMMY_SP;\n use rustc_target::abi::call::{ArgAbi, CastTarget, FnAbi, Reg};\n-use syntax_pos::DUMMY_SP;\n \n // This depends on `Backend` and not `BackendTypes`, because consumers will probably want to use\n // `LayoutOf` or `HasTyCtxt`. This way, they don't have to add a constraint on it themselves."}, {"sha": "404e556cd524e25ccf27ae62011e205585b74758", "filename": "src/librustc_codegen_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2FCargo.toml?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -15,7 +15,7 @@ punycode = \"0.4.0\"\n rustc-demangle = \"0.1.16\"\n \n syntax = { path = \"../libsyntax\" }\n-syntax_pos = { path = \"../librustc_span\", package = \"rustc_span\" }\n+rustc_span = { path = \"../librustc_span\" }\n rustc = { path = \"../librustc\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "d56027f460842be521500d046ed077623f145711", "filename": "src/librustc_codegen_utils/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flink.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,9 +1,9 @@\n use rustc::session::config::{self, Input, OutputFilenames, OutputType};\n use rustc::session::Session;\n+use rustc_span::Span;\n use std::path::{Path, PathBuf};\n use syntax::symbol::sym;\n use syntax::{ast, attr};\n-use syntax_pos::Span;\n \n pub fn out_filename(\n     sess: &Session,"}, {"sha": "533ce620b678ca2b24d29adabe0be8e4e39e67a6", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -95,7 +95,7 @@ use rustc::session::config::SymbolManglingVersion;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, Instance, TyCtxt};\n \n-use syntax_pos::symbol::Symbol;\n+use rustc_span::symbol::Symbol;\n \n use log::debug;\n "}, {"sha": "99436f427cb00523370a3aa01c02136b02ec6542", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -31,7 +31,7 @@ rustc_interface = { path = \"../librustc_interface\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_resolve = { path = \"../librustc_resolve\" }\n syntax = { path = \"../libsyntax\" }\n-syntax_pos = { path = \"../librustc_span\", package = \"rustc_span\" }\n+rustc_span = { path = \"../librustc_span\" }\n \n [features]\n llvm = ['rustc_interface/llvm']"}, {"sha": "94636725646e20a351a7766b638ec0338707e3a5", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -58,10 +58,10 @@ use std::process::{self, Command, Stdio};\n use std::str;\n use std::time::Instant;\n \n+use rustc_span::source_map::FileLoader;\n+use rustc_span::symbol::sym;\n+use rustc_span::FileName;\n use syntax::ast;\n-use syntax_pos::source_map::FileLoader;\n-use syntax_pos::symbol::sym;\n-use syntax_pos::FileName;\n \n mod args;\n pub mod pretty;"}, {"sha": "84fa5fb786bfb51717b3b8abc2b7506b4cfa5470", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -10,9 +10,9 @@ use rustc::ty::{self, TyCtxt};\n use rustc::util::common::ErrorReported;\n use rustc_mir::util::{write_mir_graphviz, write_mir_pretty};\n \n+use rustc_span::FileName;\n use syntax::ast;\n use syntax::print::pprust;\n-use syntax_pos::FileName;\n \n use std::cell::Cell;\n use std::fs::File;\n@@ -298,7 +298,7 @@ impl<'a> pprust::PpAnn for HygieneAnnotation<'a> {\n             pprust::AnnNode::Crate(_) => {\n                 s.s.hardbreak();\n                 let verbose = self.sess.verbose();\n-                s.synth_comment(syntax_pos::hygiene::debug_hygiene_data(verbose));\n+                s.synth_comment(rustc_span::hygiene::debug_hygiene_data(verbose));\n                 s.s.hardbreak_if_not_bol();\n             }\n             _ => {}"}, {"sha": "0d0989677c58589baadc231051cf9f494ec58e6e", "filename": "src/librustc_errors/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2FCargo.toml?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -12,7 +12,7 @@ doctest = false\n [dependencies]\n log = \"0.4\"\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n-syntax_pos = { path = \"../librustc_span\", package = \"rustc_span\" }\n+rustc_span = { path = \"../librustc_span\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n unicode-width = \"0.1.4\"\n atty = \"0.2\""}, {"sha": "7413cef6d32d44d3608f7fd0678ba6be7d0f3e9b", "filename": "src/librustc_errors/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -12,8 +12,8 @@ use annotate_snippets::display_list::DisplayList;\n use annotate_snippets::formatter::DisplayListFormatter;\n use annotate_snippets::snippet::*;\n use rustc_data_structures::sync::Lrc;\n-use syntax_pos::source_map::SourceMap;\n-use syntax_pos::{Loc, MultiSpan, SourceFile};\n+use rustc_span::source_map::SourceMap;\n+use rustc_span::{Loc, MultiSpan, SourceFile};\n \n /// Generates diagnostics using annotate-snippet\n pub struct AnnotateSnippetEmitterWriter {"}, {"sha": "5286e8c19b46244420c6bec40fcccc0adb496497", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -5,8 +5,8 @@ use crate::Level;\n use crate::Substitution;\n use crate::SubstitutionPart;\n use crate::SuggestionStyle;\n+use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use std::fmt;\n-use syntax_pos::{MultiSpan, Span, DUMMY_SP};\n \n #[must_use]\n #[derive(Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]"}, {"sha": "79ec9ad7b03297812b3550a0677bc7513728c170", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -2,10 +2,10 @@ use crate::{Applicability, Handler, Level, StashKey};\n use crate::{Diagnostic, DiagnosticId, DiagnosticStyledString};\n \n use log::debug;\n+use rustc_span::{MultiSpan, Span};\n use std::fmt::{self, Debug};\n use std::ops::{Deref, DerefMut};\n use std::thread::panicking;\n-use syntax_pos::{MultiSpan, Span};\n \n /// Used for emitting structured error messages and other diagnostic information.\n ///"}, {"sha": "541b89e6fce5f1fa287b78d8231051c14231f525", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -9,8 +9,8 @@\n \n use Destination::*;\n \n-use syntax_pos::source_map::SourceMap;\n-use syntax_pos::{MultiSpan, SourceFile, Span};\n+use rustc_span::source_map::SourceMap;\n+use rustc_span::{MultiSpan, SourceFile, Span};\n \n use crate::snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, Style, StyledString};\n use crate::styled_buffer::StyledBuffer;"}, {"sha": "29d3122636e6226c7adfebc42fcce025fb6c1232", "filename": "src/librustc_errors/json.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_errors%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_errors%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fjson.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -9,19 +9,19 @@\n \n // FIXME: spec the JSON output properly.\n \n-use syntax_pos::source_map::{FilePathMapping, SourceMap};\n+use rustc_span::source_map::{FilePathMapping, SourceMap};\n \n use crate::emitter::{Emitter, HumanReadableErrorType};\n use crate::registry::Registry;\n use crate::{Applicability, DiagnosticId};\n use crate::{CodeSuggestion, SubDiagnostic};\n \n use rustc_data_structures::sync::Lrc;\n+use rustc_span::{MacroBacktrace, MultiSpan, Span, SpanLabel};\n use std::io::{self, Write};\n use std::path::Path;\n use std::sync::{Arc, Mutex};\n use std::vec;\n-use syntax_pos::{MacroBacktrace, MultiSpan, Span, SpanLabel};\n \n use rustc_serialize::json::{as_json, as_pretty_json};\n \n@@ -378,7 +378,7 @@ impl DiagnosticSpan {\n \n impl DiagnosticSpanLine {\n     fn line_from_source_file(\n-        fm: &syntax_pos::SourceFile,\n+        fm: &rustc_span::SourceFile,\n         index: usize,\n         h_start: usize,\n         h_end: usize,"}, {"sha": "35912901d688a3eca5744f09003e474a15ce80c3", "filename": "src/librustc_errors/json/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_errors%2Fjson%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_errors%2Fjson%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fjson%2Ftests.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,12 +1,12 @@\n use super::*;\n \n use crate::json::JsonEmitter;\n-use syntax_pos::source_map::{FilePathMapping, SourceMap};\n+use rustc_span::source_map::{FilePathMapping, SourceMap};\n \n use crate::emitter::{ColorConfig, HumanReadableErrorType};\n use crate::Handler;\n use rustc_serialize::json::decode;\n-use syntax_pos::{BytePos, Span};\n+use rustc_span::{BytePos, Span};\n \n use std::str;\n \n@@ -40,8 +40,8 @@ impl<T: Write> Write for Shared<T> {\n }\n \n fn with_default_globals(f: impl FnOnce()) {\n-    let globals = syntax_pos::Globals::new(syntax_pos::edition::DEFAULT_EDITION);\n-    syntax_pos::GLOBALS.set(&globals, || syntax_pos::GLOBALS.set(&globals, f))\n+    let globals = rustc_span::Globals::new(rustc_span::edition::DEFAULT_EDITION);\n+    rustc_span::GLOBALS.set(&globals, || rustc_span::GLOBALS.set(&globals, f))\n }\n \n /// Test the span yields correct positions in JSON."}, {"sha": "aa2865a75f9aebe1d8a796346fd885fd741e8068", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -18,8 +18,8 @@ use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::{self, Lock, Lrc};\n use rustc_data_structures::AtomicRef;\n-use syntax_pos::source_map::SourceMap;\n-use syntax_pos::{Loc, MultiSpan, Span};\n+use rustc_span::source_map::SourceMap;\n+use rustc_span::{Loc, MultiSpan, Span};\n \n use std::borrow::Cow;\n use std::panic;\n@@ -146,7 +146,7 @@ impl CodeSuggestion {\n     /// Returns the assembled code suggestions, whether they should be shown with an underline\n     /// and whether the substitution only differs in capitalization.\n     pub fn splice_lines(&self, cm: &SourceMap) -> Vec<(String, Vec<SubstitutionPart>, bool)> {\n-        use syntax_pos::{CharPos, Pos};\n+        use rustc_span::{CharPos, Pos};\n \n         fn push_trailing(\n             buf: &mut String,\n@@ -240,7 +240,7 @@ impl CodeSuggestion {\n     }\n }\n \n-pub use syntax_pos::fatal_error::{FatalError, FatalErrorMarker};\n+pub use rustc_span::fatal_error::{FatalError, FatalErrorMarker};\n \n /// Signifies that the compiler died with an explicit call to `.bug`\n /// or `.span_bug` rather than a failed assertion, etc."}, {"sha": "f9c15fbed362f5edc223aefee5cd3c1491eb1baa", "filename": "src/librustc_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2FCargo.toml?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -13,7 +13,7 @@ doctest = false\n [dependencies]\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n log = \"0.4\"\n-syntax_pos = { path = \"../librustc_span\", package = \"rustc_span\" }\n+rustc_span = { path = \"../librustc_span\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_feature = { path = \"../librustc_feature\" }"}, {"sha": "acf90651080d2f805fff3f8e887bcfc12dda10d9", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -16,16 +16,16 @@ use syntax::visit::Visitor;\n use errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{self, Lrc};\n+use rustc_span::hygiene::{AstPass, ExpnData, ExpnId, ExpnKind};\n+use rustc_span::{FileName, MultiSpan, Span, DUMMY_SP};\n use smallvec::{smallvec, SmallVec};\n-use syntax_pos::hygiene::{AstPass, ExpnData, ExpnId, ExpnKind};\n-use syntax_pos::{FileName, MultiSpan, Span, DUMMY_SP};\n \n use std::default::Default;\n use std::iter;\n use std::path::PathBuf;\n use std::rc::Rc;\n \n-crate use syntax_pos::hygiene::MacroKind;\n+crate use rustc_span::hygiene::MacroKind;\n \n #[derive(Debug, Clone)]\n pub enum Annotatable {"}, {"sha": "3375efe41f1338403744f6eeed657a9f52d37bea", "filename": "src/librustc_expand/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbuild.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -6,7 +6,7 @@ use syntax::ptr::P;\n use syntax::source_map::{respan, Spanned};\n use syntax::symbol::{kw, sym, Symbol};\n \n-use syntax_pos::{Pos, Span};\n+use rustc_span::{Pos, Span};\n \n impl<'a> ExtCtxt<'a> {\n     pub fn path(&self, span: Span, strs: Vec<ast::Ident>) -> ast::Path {"}, {"sha": "6ac4456c43e0809047f17239e233b786919ce6ee", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -26,8 +26,8 @@ use syntax::util::map_in_place::MapInPlace;\n use syntax::visit::{self, Visitor};\n \n use errors::{Applicability, FatalError, PResult};\n+use rustc_span::{FileName, Span, DUMMY_SP};\n use smallvec::{smallvec, SmallVec};\n-use syntax_pos::{FileName, Span, DUMMY_SP};\n \n use rustc_data_structures::sync::Lrc;\n use std::io::ErrorKind;"}, {"sha": "feba7f633ed80c98fa8efee93f079feee8fb58c9", "filename": "src/librustc_expand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Flib.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -29,7 +29,7 @@ mod placeholders;\n mod proc_macro_server;\n \n pub use mbe::macro_rules::compile_declarative_macro;\n-crate use syntax_pos::hygiene;\n+crate use rustc_span::hygiene;\n pub mod base;\n pub mod build;\n pub mod expand;"}, {"sha": "fe207a4c876875da45712d900da11ccd1b58fe1d", "filename": "src/librustc_expand/mbe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -13,7 +13,7 @@ use syntax::ast;\n use syntax::token::{self, Token, TokenKind};\n use syntax::tokenstream::DelimSpan;\n \n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n use rustc_data_structures::sync::Lrc;\n "}, {"sha": "819ae02d28233a617c65fd263321fef54b625254", "filename": "src/librustc_expand/mbe/macro_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fmbe%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fmbe%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_check.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -113,8 +113,8 @@ use syntax::symbol::{kw, sym};\n use syntax::token::{DelimToken, Token, TokenKind};\n \n use rustc_data_structures::fx::FxHashMap;\n+use rustc_span::{symbol::Ident, MultiSpan, Span};\n use smallvec::SmallVec;\n-use syntax_pos::{symbol::Ident, MultiSpan, Span};\n \n /// Stack represented as linked list.\n ///"}, {"sha": "0585f4f46b9afa206c8f9237c5b5a10b0133c111", "filename": "src/librustc_expand/mbe/macro_parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -86,8 +86,8 @@ use syntax::token::{self, DocComment, Nonterminal, Token};\n use syntax::tokenstream::TokenStream;\n \n use errors::{FatalError, PResult};\n+use rustc_span::Span;\n use smallvec::{smallvec, SmallVec};\n-use syntax_pos::Span;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n@@ -270,7 +270,7 @@ crate enum ParseResult<T> {\n     /// end of macro invocation. Otherwise, it indicates that no rules expected the given token.\n     Failure(Token, &'static str),\n     /// Fatal error (malformed macro?). Abort compilation.\n-    Error(syntax_pos::Span, String),\n+    Error(rustc_span::Span, String),\n }\n \n /// A `ParseResult` where the `Success` variant contains a mapping of `Ident`s to `NamedMatch`es.\n@@ -369,7 +369,7 @@ fn nameize<I: Iterator<Item = NamedMatch>>(\n         m: &TokenTree,\n         res: &mut I,\n         ret_val: &mut FxHashMap<Ident, NamedMatch>,\n-    ) -> Result<(), (syntax_pos::Span, String)> {\n+    ) -> Result<(), (rustc_span::Span, String)> {\n         match *m {\n             TokenTree::Sequence(_, ref seq) => {\n                 for next_m in &seq.tts {"}, {"sha": "826cb43294a100583dbebe11884e8cf5d5488096", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -11,6 +11,8 @@ use crate::mbe::transcribe::transcribe;\n use rustc_feature::Features;\n use rustc_parse::parser::Parser;\n use rustc_parse::Directory;\n+use rustc_span::hygiene::Transparency;\n+use rustc_span::Span;\n use syntax::ast;\n use syntax::attr::{self, TransparencyError};\n use syntax::edition::Edition;\n@@ -19,8 +21,6 @@ use syntax::sess::ParseSess;\n use syntax::symbol::{kw, sym, Symbol};\n use syntax::token::{self, NtTT, Token, TokenKind::*};\n use syntax::tokenstream::{DelimSpan, TokenStream};\n-use syntax_pos::hygiene::Transparency;\n-use syntax_pos::Span;\n \n use errors::{DiagnosticBuilder, FatalError};\n use log::debug;"}, {"sha": "99026a7a09ea17d61a589e0f4126e08e7c8294fd", "filename": "src/librustc_expand/mbe/quoted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -8,7 +8,7 @@ use syntax::symbol::kw;\n use syntax::token::{self, Token};\n use syntax::tokenstream;\n \n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n use rustc_data_structures::sync::Lrc;\n "}, {"sha": "4fd68a80de81d275f535f473d95c9beeefda4ce0", "filename": "src/librustc_expand/mbe/transcribe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -12,8 +12,8 @@ use smallvec::{smallvec, SmallVec};\n use errors::pluralize;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n-use syntax_pos::hygiene::{ExpnId, Transparency};\n-use syntax_pos::Span;\n+use rustc_span::hygiene::{ExpnId, Transparency};\n+use rustc_span::Span;\n \n use std::mem;\n "}, {"sha": "521aec335e1a48ccc7670c0f5d037afe140d750a", "filename": "src/librustc_expand/parse/lexer/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,12 +1,12 @@\n use rustc_data_structures::sync::Lrc;\n use rustc_parse::lexer::StringReader;\n+use rustc_span::symbol::Symbol;\n+use rustc_span::{BytePos, Span};\n use syntax::sess::ParseSess;\n use syntax::source_map::{FilePathMapping, SourceMap};\n use syntax::token::{self, Token, TokenKind};\n use syntax::util::comments::is_doc_comment;\n use syntax::with_default_globals;\n-use syntax_pos::symbol::Symbol;\n-use syntax_pos::{BytePos, Span};\n \n use errors::{emitter::EmitterWriter, Handler};\n use std::io;"}, {"sha": "de7be2542eeffbe3e6a38911fcb840481db1538d", "filename": "src/librustc_expand/parse/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fparse%2Ftests.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -2,6 +2,7 @@ use crate::tests::{matches_codepattern, string_to_stream, with_error_checking_pa\n \n use errors::PResult;\n use rustc_parse::new_parser_from_source_str;\n+use rustc_span::{BytePos, FileName, Pos, Span};\n use syntax::ast::{self, Name, PatKind};\n use syntax::print::pprust::item_to_string;\n use syntax::ptr::P;\n@@ -12,7 +13,6 @@ use syntax::token::{self, Token};\n use syntax::tokenstream::{DelimSpan, TokenStream, TokenTree};\n use syntax::visit;\n use syntax::with_default_globals;\n-use syntax_pos::{BytePos, FileName, Pos, Span};\n \n use std::path::PathBuf;\n \n@@ -32,7 +32,7 @@ fn parse_item_from_source_str(\n     new_parser_from_source_str(sess, name, source).parse_item()\n }\n \n-// Produces a `syntax_pos::span`.\n+// Produces a `rustc_span::span`.\n fn sp(a: u32, b: u32) -> Span {\n     Span::with_root_ctxt(BytePos(a), BytePos(b))\n }"}, {"sha": "2776bc647337b0477abe671bf61923dbadb423fd", "filename": "src/librustc_expand/proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -8,7 +8,7 @@ use syntax::token;\n use syntax::tokenstream::{self, TokenStream};\n \n use rustc_data_structures::sync::Lrc;\n-use syntax_pos::{Span, DUMMY_SP};\n+use rustc_span::{Span, DUMMY_SP};\n \n const EXEC_STRATEGY: pm::bridge::server::SameThread = pm::bridge::server::SameThread;\n "}, {"sha": "cf5749f506856b065bfd9d0bf46bc594710dcdb6", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -2,14 +2,14 @@ use crate::base::ExtCtxt;\n \n use rustc_parse::lexer::nfc_normalize;\n use rustc_parse::{nt_to_tokenstream, parse_stream_from_source_str};\n+use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::{BytePos, FileName, MultiSpan, Pos, SourceFile, Span};\n use syntax::ast;\n use syntax::print::pprust;\n use syntax::sess::ParseSess;\n use syntax::token;\n use syntax::tokenstream::{self, DelimSpan, IsJoint::*, TokenStream, TreeAndJoint};\n use syntax::util::comments;\n-use syntax_pos::symbol::{kw, sym, Symbol};\n-use syntax_pos::{BytePos, FileName, MultiSpan, Pos, SourceFile, Span};\n \n use errors::Diagnostic;\n use rustc_data_structures::sync::Lrc;"}, {"sha": "a1ec6d674cc5e303cb81e6340b86835abb4c632d", "filename": "src/librustc_expand/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Ftests.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,10 +1,10 @@\n use rustc_parse::{new_parser_from_source_str, parser::Parser, source_file_to_stream};\n+use rustc_span::{BytePos, MultiSpan, Span};\n use syntax::ast;\n use syntax::sess::ParseSess;\n use syntax::source_map::{FilePathMapping, SourceMap};\n use syntax::tokenstream::TokenStream;\n use syntax::with_default_globals;\n-use syntax_pos::{BytePos, MultiSpan, Span};\n \n use errors::emitter::EmitterWriter;\n use errors::{Handler, PResult};"}, {"sha": "287c168f76a19e8cdcf085e8faa07458395cd2cf", "filename": "src/librustc_expand/tokenstream/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Ftokenstream%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_expand%2Ftokenstream%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Ftokenstream%2Ftests.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,11 +1,11 @@\n use crate::tests::string_to_stream;\n \n+use rustc_span::{BytePos, Span};\n use smallvec::smallvec;\n use syntax::ast::Name;\n use syntax::token;\n use syntax::tokenstream::{TokenStream, TokenStreamBuilder, TokenTree};\n use syntax::with_default_globals;\n-use syntax_pos::{BytePos, Span};\n \n fn string_to_ts(string: &str) -> TokenStream {\n     string_to_stream(string.to_owned())"}, {"sha": "96fd15ef3044c748a64e70a4353668a88877035a", "filename": "src/librustc_feature/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_feature%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_feature%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2FCargo.toml?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -12,4 +12,4 @@ doctest = false\n [dependencies]\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n lazy_static = \"1.0.0\"\n-syntax_pos = { path = \"../librustc_span\", package = \"rustc_span\" }\n+rustc_span = { path = \"../librustc_span\" }"}, {"sha": "d880fc84b3819c6a1c3732688bb474fb1db9ace6", "filename": "src/librustc_feature/accepted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_feature%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_feature%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Faccepted.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,7 +1,7 @@\n //! List of the accepted feature gates.\n \n use super::{Feature, State};\n-use syntax_pos::symbol::sym;\n+use rustc_span::symbol::sym;\n \n macro_rules! declare_features {\n     ($("}, {"sha": "8cb1684491bb8a230e4a685390acb989d3ffb525", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -2,9 +2,9 @@\n \n use super::{Feature, State};\n \n-use syntax_pos::edition::Edition;\n-use syntax_pos::symbol::{sym, Symbol};\n-use syntax_pos::Span;\n+use rustc_span::edition::Edition;\n+use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::Span;\n \n macro_rules! set {\n     ($field: ident) => {{"}, {"sha": "3cbf96b6d29a18b4bac15a3d33e8ed5f1b5fdd86", "filename": "src/librustc_feature/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fbuiltin_attrs.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -7,7 +7,7 @@ use crate::{Features, Stability};\n \n use lazy_static::lazy_static;\n use rustc_data_structures::fx::FxHashMap;\n-use syntax_pos::symbol::{sym, Symbol};\n+use rustc_span::symbol::{sym, Symbol};\n \n type GateFn = fn(&Features) -> bool;\n "}, {"sha": "71a464279253b12ef817d8f50159da82cd787ac7", "filename": "src/librustc_feature/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_feature%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_feature%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Flib.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -15,9 +15,9 @@ mod active;\n mod builtin_attrs;\n mod removed;\n \n+use rustc_span::{edition::Edition, symbol::Symbol, Span};\n use std::fmt;\n use std::num::NonZeroU32;\n-use syntax_pos::{edition::Edition, symbol::Symbol, Span};\n \n #[derive(Clone, Copy)]\n pub enum State {"}, {"sha": "1eeedd77214167ca5e5b24eb9c66e5350a371dce", "filename": "src/librustc_feature/removed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_feature%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_feature%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fremoved.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,7 +1,7 @@\n //! List of the removed feature gates.\n \n use super::{Feature, State};\n-use syntax_pos::symbol::sym;\n+use rustc_span::symbol::sym;\n \n macro_rules! declare_features {\n     ($("}, {"sha": "3e5570847fa5e24c1de54a0bfef2db4e40e470be", "filename": "src/librustc_incremental/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_incremental%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_incremental%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2FCargo.toml?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -17,6 +17,6 @@ rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n-syntax_pos = { path = \"../librustc_span\", package = \"rustc_span\" }\n+rustc_span = { path = \"../librustc_span\" }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n rustc_session = { path = \"../librustc_session\" }"}, {"sha": "19b5f985f13b8589621a0c6f80e31c2ddbf50390", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -42,11 +42,11 @@ use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::implementation::{Direction, NodeIndex, INCOMING, OUTGOING};\n+use rustc_span::Span;\n use std::env;\n use std::fs::{self, File};\n use std::io::Write;\n use syntax::{ast, symbol::sym};\n-use syntax_pos::Span;\n \n pub fn assert_dep_graph(tcx: TyCtxt<'_>) {\n     tcx.dep_graph.with_ignore(|| {"}, {"sha": "2ce782a98585df86a875b9815e702d1c87aafb48", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -23,11 +23,11 @@ use rustc::hir::{ImplItemKind, ItemKind as HirItem, TraitItemKind};\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_span::Span;\n use std::iter::FromIterator;\n use std::vec::Vec;\n use syntax::ast::{self, Attribute, NestedMetaItem};\n use syntax::symbol::{sym, Symbol};\n-use syntax_pos::Span;\n \n const EXCEPT: Symbol = sym::except;\n const LABEL: Symbol = sym::label;"}, {"sha": "9e2fae178d552718b1ecb3b9a30ce6a7117f6e84", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -17,7 +17,7 @@ syntax = { path = \"../libsyntax\" }\n rustc_builtin_macros = { path = \"../librustc_builtin_macros\" }\n rustc_expand = { path = \"../librustc_expand\" }\n rustc_parse = { path = \"../librustc_parse\" }\n-syntax_pos = { path = \"../librustc_span\", package = \"rustc_span\" }\n+rustc_span = { path = \"../librustc_span\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc = { path = \"../librustc\" }\n rustc_ast_lowering = { path = \"../librustc_ast_lowering\" }"}, {"sha": "1ed8d66863c815db5ee5081b8a8e0718adb9f6b9", "filename": "src/librustc_interface/callbacks.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_interface%2Fcallbacks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_interface%2Fcallbacks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fcallbacks.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -11,17 +11,17 @@\n \n use rustc::ty::tls;\n use rustc_errors::{Diagnostic, TRACK_DIAGNOSTICS};\n+use rustc_span;\n use std::fmt;\n-use syntax_pos;\n \n /// This is a callback from libsyntax as it cannot access the implicit state\n /// in librustc otherwise.\n-fn span_debug(span: syntax_pos::Span, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+fn span_debug(span: rustc_span::Span, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n     tls::with_opt(|tcx| {\n         if let Some(tcx) = tcx {\n             write!(f, \"{}\", tcx.sess.source_map().span_to_string(span))\n         } else {\n-            syntax_pos::default_span_debug(span, f)\n+            rustc_span::default_span_debug(span, f)\n         }\n     })\n }\n@@ -43,6 +43,6 @@ fn track_diagnostic(diagnostic: &Diagnostic) {\n /// Sets up the callbacks in prior crates which we want to refer to the\n /// TyCtxt in.\n pub fn setup_callbacks() {\n-    syntax_pos::SPAN_DEBUG.swap(&(span_debug as fn(_, &mut fmt::Formatter<'_>) -> _));\n+    rustc_span::SPAN_DEBUG.swap(&(span_debug as fn(_, &mut fmt::Formatter<'_>) -> _));\n     TRACK_DIAGNOSTICS.swap(&(track_diagnostic as fn(&_)));\n }"}, {"sha": "9cfd30eab29ea2fb2de9dec395fd9449baa1046b", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -13,14 +13,14 @@ use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::OnDrop;\n use rustc_errors::registry::Registry;\n use rustc_parse::new_parser_from_source_str;\n+use rustc_span::edition;\n use std::path::PathBuf;\n use std::result;\n use std::sync::{Arc, Mutex};\n use syntax::ast::{self, MetaItemKind};\n use syntax::sess::ParseSess;\n use syntax::source_map::{FileLoader, FileName, SourceMap};\n use syntax::token;\n-use syntax_pos::edition;\n \n pub type Result<T> = result::Result<T, ErrorReported>;\n "}, {"sha": "4d15424112e5c37173ac203dc915e85f1cb79d2c", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -33,14 +33,14 @@ use rustc_passes::{self, ast_validation, hir_stats, layout_test};\n use rustc_plugin_impl as plugin;\n use rustc_privacy;\n use rustc_resolve::{Resolver, ResolverArenas};\n+use rustc_span::FileName;\n use rustc_traits;\n use rustc_typeck as typeck;\n use syntax::early_buffered_lints::BufferedEarlyLint;\n use syntax::mut_visit::MutVisitor;\n use syntax::symbol::Symbol;\n use syntax::util::node_count::NodeCounter;\n use syntax::{self, ast, visit};\n-use syntax_pos::FileName;\n \n use rustc_serialize::json;\n use tempfile::Builder as TempFileBuilder;\n@@ -470,7 +470,7 @@ pub fn lower_to_hir<'res, 'tcx>(\n \n     // Discard hygiene data, which isn't required after lowering to HIR.\n     if !sess.opts.debugging_opts.keep_hygiene_data {\n-        syntax_pos::hygiene::clear_syntax_context_map();\n+        rustc_span::hygiene::clear_syntax_context_map();\n     }\n \n     Ok(hir_forest)"}, {"sha": "091cf3681fa7cbe6b613f211a158494243a5b43b", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -14,6 +14,7 @@ use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::registry::Registry;\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n use rustc_resolve::{self, Resolver};\n+use rustc_span::edition::Edition;\n use smallvec::SmallVec;\n use std::env;\n use std::io::{self, Write};\n@@ -30,7 +31,6 @@ use syntax::source_map::{FileLoader, RealFileLoader, SourceMap};\n use syntax::symbol::{sym, Symbol};\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::{self, ast, attr};\n-use syntax_pos::edition::Edition;\n \n /// Adds `target_feature = \"...\"` cfgs for a variety of platform\n /// specific features (SSE, NEON etc.).\n@@ -186,14 +186,14 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n \n     syntax::with_globals(edition, || {\n         syntax::GLOBALS.with(|syntax_globals| {\n-            syntax_pos::GLOBALS.with(|syntax_pos_globals| {\n+            rustc_span::GLOBALS.with(|rustc_span_globals| {\n                 // The main handler runs for each Rayon worker thread and sets up\n-                // the thread local rustc uses. syntax_globals and syntax_pos_globals are\n+                // the thread local rustc uses. syntax_globals and rustc_span_globals are\n                 // captured and set on the new threads. ty::tls::with_thread_locals sets up\n                 // thread local callbacks from libsyntax\n                 let main_handler = move |thread: ThreadBuilder| {\n                     syntax::GLOBALS.set(syntax_globals, || {\n-                        syntax_pos::GLOBALS.set(syntax_pos_globals, || {\n+                        rustc_span::GLOBALS.set(rustc_span_globals, || {\n                             if let Some(stderr) = stderr {\n                                 io::set_panic(Some(box Sink(stderr.clone())));\n                             }\n@@ -718,36 +718,36 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n                 stmts: s.into_iter().collect(),\n                 rules,\n                 id: resolver.next_node_id(),\n-                span: syntax_pos::DUMMY_SP,\n+                span: rustc_span::DUMMY_SP,\n             }\n         }\n \n         fn block_to_stmt(b: ast::Block, resolver: &mut Resolver<'_>) -> ast::Stmt {\n             let expr = P(ast::Expr {\n                 id: resolver.next_node_id(),\n                 kind: ast::ExprKind::Block(P(b), None),\n-                span: syntax_pos::DUMMY_SP,\n+                span: rustc_span::DUMMY_SP,\n                 attrs: AttrVec::new(),\n             });\n \n             ast::Stmt {\n                 id: resolver.next_node_id(),\n                 kind: ast::StmtKind::Expr(expr),\n-                span: syntax_pos::DUMMY_SP,\n+                span: rustc_span::DUMMY_SP,\n             }\n         }\n \n         let empty_block = stmt_to_block(BlockCheckMode::Default, None, self.resolver);\n         let loop_expr = P(ast::Expr {\n             kind: ast::ExprKind::Loop(P(empty_block), None),\n             id: self.resolver.next_node_id(),\n-            span: syntax_pos::DUMMY_SP,\n+            span: rustc_span::DUMMY_SP,\n             attrs: AttrVec::new(),\n         });\n \n         let loop_stmt = ast::Stmt {\n             id: self.resolver.next_node_id(),\n-            span: syntax_pos::DUMMY_SP,\n+            span: rustc_span::DUMMY_SP,\n             kind: ast::StmtKind::Expr(loop_expr),\n         };\n "}, {"sha": "600f7031ed5c0f77b8c5242925f83cc6edd46f0e", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -13,7 +13,7 @@ log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }\n-syntax_pos = { path = \"../librustc_span\", package = \"rustc_span\" }\n+rustc_span = { path = \"../librustc_span\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_index = { path = \"../librustc_index\" }"}, {"sha": "6e5a0f549158fb2a32c877a0657a2da2bc22bc40", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -37,6 +37,7 @@ use rustc::util::nodemap::FxHashSet;\n use rustc_feature::Stability;\n use rustc_feature::{deprecated_attributes, AttributeGate, AttributeTemplate, AttributeType};\n \n+use rustc_span::{BytePos, Span};\n use syntax::ast::{self, Expr};\n use syntax::attr::{self, HasAttrs};\n use syntax::edition::Edition;\n@@ -47,7 +48,6 @@ use syntax::source_map::Spanned;\n use syntax::symbol::{kw, sym, Symbol};\n use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax::visit::FnKind;\n-use syntax_pos::{BytePos, Span};\n \n use rustc::hir::{self, GenericParamKind, PatKind};\n "}, {"sha": "099f154d4c887232840ccdcfb9710f573df5aee0", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -41,8 +41,8 @@ use rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintAr\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n \n+use rustc_span::Span;\n use syntax::ast;\n-use syntax_pos::Span;\n \n use lint::LintId;\n "}, {"sha": "7c5520f86b4ad5edb8ff5b4f02f8cff7bea29d08", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -5,12 +5,12 @@ use rustc::hir::intravisit::FnKind;\n use rustc::hir::{self, GenericParamKind, PatKind};\n use rustc::lint;\n use rustc::ty;\n+use rustc_span::{symbol::Ident, BytePos, Span};\n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n use syntax::errors::Applicability;\n use syntax::symbol::sym;\n-use syntax_pos::{symbol::Ident, BytePos, Span};\n \n #[derive(PartialEq)]\n pub enum MethodLateContext {"}, {"sha": "7983c0e35c8db8b20280e20364a14d500bce3bea", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -14,11 +14,11 @@ use util::nodemap::FxHashSet;\n use std::cmp;\n use std::{f32, f64, i16, i32, i64, i8, u16, u32, u64, u8};\n \n+use rustc_span::symbol::sym;\n+use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n use syntax::errors::Applicability;\n use syntax::{ast, attr, source_map};\n-use syntax_pos::symbol::sym;\n-use syntax_pos::Span;\n \n use rustc::hir;\n "}, {"sha": "95f83d9a9d2b318b4f5014f7191c47901ee12e8e", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -10,14 +10,14 @@ use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_feature::{AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n \n+use rustc_span::{BytePos, Span};\n use syntax::ast;\n use syntax::attr;\n use syntax::errors::{pluralize, Applicability};\n use syntax::print::pprust;\n use syntax::symbol::Symbol;\n use syntax::symbol::{kw, sym};\n use syntax::util::parser;\n-use syntax_pos::{BytePos, Span};\n \n use log::debug;\n \n@@ -468,13 +468,13 @@ impl EarlyLintPass for UnusedParens {\n             }\n \n             If(ref cond, ref block, ..) => {\n-                let left = e.span.lo() + syntax_pos::BytePos(2);\n+                let left = e.span.lo() + rustc_span::BytePos(2);\n                 let right = block.span.lo();\n                 (cond, \"`if` condition\", true, Some(left), Some(right))\n             }\n \n             While(ref cond, ref block, ..) => {\n-                let left = e.span.lo() + syntax_pos::BytePos(5);\n+                let left = e.span.lo() + rustc_span::BytePos(5);\n                 let right = block.span.lo();\n                 (cond, \"`while` condition\", true, Some(left), Some(right))\n             }\n@@ -485,12 +485,12 @@ impl EarlyLintPass for UnusedParens {\n             }\n \n             Match(ref head, _) => {\n-                let left = e.span.lo() + syntax_pos::BytePos(5);\n+                let left = e.span.lo() + rustc_span::BytePos(5);\n                 (head, \"`match` head expression\", true, Some(left), None)\n             }\n \n             Ret(Some(ref value)) => {\n-                let left = e.span.lo() + syntax_pos::BytePos(3);\n+                let left = e.span.lo() + rustc_span::BytePos(3);\n                 (value, \"`return` value\", false, Some(left), None)\n             }\n "}, {"sha": "c8ef9f1edb0adc2a1d1df4311c9fe794caaf0413", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -24,5 +24,5 @@ stable_deref_trait = \"1.0.0\"\n syntax = { path = \"../libsyntax\" }\n rustc_expand = { path = \"../librustc_expand\" }\n rustc_parse = { path = \"../librustc_parse\" }\n-syntax_pos = { path = \"../librustc_span\", package = \"rustc_span\" }\n+rustc_span = { path = \"../librustc_span\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "adb73d1c5fcc31abfd4af2b1bd587c23a914f7da", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -23,13 +23,13 @@ use std::{cmp, fs};\n use log::{debug, info, log_enabled};\n use proc_macro::bridge::client::ProcMacro;\n use rustc_expand::base::SyntaxExtension;\n+use rustc_span::{Span, DUMMY_SP};\n use syntax::ast;\n use syntax::attr;\n use syntax::edition::Edition;\n use syntax::expand::allocator::{global_allocator_spans, AllocatorKind};\n use syntax::span_fatal;\n use syntax::symbol::{sym, Symbol};\n-use syntax_pos::{Span, DUMMY_SP};\n \n use rustc_error_codes::*;\n "}, {"sha": "0fec4bff1633d095752a0544a435971344c58b8b", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -38,7 +38,7 @@ pub mod locator;\n pub fn validate_crate_name(\n     sess: Option<&rustc::session::Session>,\n     s: &str,\n-    sp: Option<syntax_pos::Span>,\n+    sp: Option<rustc_span::Span>,\n ) {\n     let mut err_count = 0;\n     {"}, {"sha": "93b29cf81d75265be548a431b5e0eae6719537e1", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -225,11 +225,11 @@ use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n \n use errors::DiagnosticBuilder;\n+use rustc_span::Span;\n use rustc_target::spec::{Target, TargetTriple};\n use syntax::struct_span_err;\n use syntax::symbol::{sym, Symbol};\n use syntax::{span_err, span_fatal};\n-use syntax_pos::Span;\n \n use std::cmp;\n use std::fmt;"}, {"sha": "06240994da3a887c9a4d36fc46aafc70771d886a", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -171,7 +171,7 @@ impl Collector<'tcx> {\n             feature_err(\n                 &self.tcx.sess.parse_sess,\n                 sym::static_nobundle,\n-                span.unwrap_or_else(|| syntax_pos::DUMMY_SP),\n+                span.unwrap_or_else(|| rustc_span::DUMMY_SP),\n                 \"kind=\\\"static-nobundle\\\" is unstable\",\n             )\n             .emit();\n@@ -180,7 +180,7 @@ impl Collector<'tcx> {\n             feature_err(\n                 &self.tcx.sess.parse_sess,\n                 sym::raw_dylib,\n-                span.unwrap_or_else(|| syntax_pos::DUMMY_SP),\n+                span.unwrap_or_else(|| rustc_span::DUMMY_SP),\n                 \"kind=\\\"raw-dylib\\\" is unstable\",\n             )\n             .emit();"}, {"sha": "8984eeccbf77805596ff609da8b5cd5aceed98ab", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -36,11 +36,11 @@ use proc_macro::bridge::client::ProcMacro;\n use rustc_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n use rustc_expand::proc_macro::{AttrProcMacro, BangProcMacro, ProcMacroDerive};\n use rustc_serialize::{opaque, Decodable, Decoder, SpecializedDecoder};\n+use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::{self, hygiene::MacroKind, BytePos, Pos, Span, DUMMY_SP};\n use syntax::ast::{self, Ident};\n use syntax::attr;\n use syntax::source_map::{self, respan, Spanned};\n-use syntax_pos::symbol::{sym, Symbol};\n-use syntax_pos::{self, hygiene::MacroKind, BytePos, Pos, Span, DUMMY_SP};\n \n pub use cstore_impl::{provide, provide_extern};\n \n@@ -111,15 +111,15 @@ crate struct CrateMetadata {\n     extern_crate: Lock<Option<ExternCrate>>,\n }\n \n-/// Holds information about a syntax_pos::SourceFile imported from another crate.\n+/// Holds information about a rustc_span::SourceFile imported from another crate.\n /// See `imported_source_files()` for more information.\n struct ImportedSourceFile {\n     /// This SourceFile's byte-offset within the source_map of its original crate\n-    original_start_pos: syntax_pos::BytePos,\n+    original_start_pos: rustc_span::BytePos,\n     /// The end of this SourceFile within the source_map of its original crate\n-    original_end_pos: syntax_pos::BytePos,\n+    original_end_pos: rustc_span::BytePos,\n     /// The imported SourceFile's representation within the local source_map\n-    translated_source_file: Lrc<syntax_pos::SourceFile>,\n+    translated_source_file: Lrc<rustc_span::SourceFile>,\n }\n \n pub(super) struct DecodeContext<'a, 'tcx> {\n@@ -1459,7 +1459,7 @@ impl<'a, 'tcx> CrateMetadata {\n                 .map(|source_file_to_import| {\n                     // We can't reuse an existing SourceFile, so allocate a new one\n                     // containing the information we need.\n-                    let syntax_pos::SourceFile {\n+                    let rustc_span::SourceFile {\n                         name,\n                         name_was_remapped,\n                         src_hash,"}, {"sha": "804e40c31ecefac371c9c3bcc352b33a527a1266", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -26,6 +26,7 @@ use smallvec::SmallVec;\n use std::any::Any;\n use std::sync::Arc;\n \n+use rustc_span::{FileName, Span};\n use syntax::ast;\n use syntax::attr;\n use syntax::expand::allocator::AllocatorKind;\n@@ -34,7 +35,6 @@ use syntax::source_map;\n use syntax::source_map::Spanned;\n use syntax::symbol::Symbol;\n use syntax::tokenstream::DelimSpan;\n-use syntax_pos::{FileName, Span};\n \n macro_rules! provide {\n     (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident,"}, {"sha": "681358a178a37763f309ab4c6a9dbce2d936a26c", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -25,6 +25,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_serialize::{opaque, Encodable, Encoder, SpecializedEncoder};\n \n use log::{debug, trace};\n+use rustc_span::{self, FileName, SourceFile, Span};\n use std::hash::Hash;\n use std::num::NonZeroUsize;\n use std::path::Path;\n@@ -34,7 +35,6 @@ use syntax::attr;\n use syntax::expand::is_proc_macro_attr;\n use syntax::source_map::Spanned;\n use syntax::symbol::{kw, sym, Ident, Symbol};\n-use syntax_pos::{self, FileName, SourceFile, Span};\n \n use rustc::hir::intravisit;\n use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n@@ -332,7 +332,7 @@ impl<'tcx> EncodeContext<'tcx> {\n \n     fn encode_info_for_items(&mut self) {\n         let krate = self.tcx.hir().krate();\n-        let vis = Spanned { span: syntax_pos::DUMMY_SP, node: hir::VisibilityKind::Public };\n+        let vis = Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Public };\n         self.encode_info_for_mod(hir::CRATE_HIR_ID, &krate.module, &krate.attrs, &vis);\n         krate.visit_all_item_likes(&mut self.as_deep_visitor());\n         for macro_def in krate.exported_macros {\n@@ -345,7 +345,7 @@ impl<'tcx> EncodeContext<'tcx> {\n         self.lazy(definitions.def_path_table())\n     }\n \n-    fn encode_source_map(&mut self) -> Lazy<[syntax_pos::SourceFile]> {\n+    fn encode_source_map(&mut self) -> Lazy<[rustc_span::SourceFile]> {\n         let source_map = self.tcx.sess.source_map();\n         let all_source_files = source_map.files();\n "}, {"sha": "00142477b2868fb3960501a7702a98bf13c33af3", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -15,11 +15,11 @@ use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n use rustc_index::vec::IndexVec;\n use rustc_serialize::opaque::Encoder;\n+use rustc_span::{self, Span};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n use syntax::edition::Edition;\n use syntax::symbol::Symbol;\n use syntax::{ast, attr};\n-use syntax_pos::{self, Span};\n \n use std::marker::PhantomData;\n use std::num::NonZeroUsize;\n@@ -190,7 +190,7 @@ crate struct CrateRoot<'tcx> {\n     diagnostic_items: Lazy<[(Symbol, DefIndex)]>,\n     native_libraries: Lazy<[NativeLibrary]>,\n     foreign_modules: Lazy<[ForeignModule]>,\n-    source_map: Lazy<[syntax_pos::SourceFile]>,\n+    source_map: Lazy<[rustc_span::SourceFile]>,\n     def_path_table: Lazy<hir::map::definitions::DefPathTable>,\n     impls: Lazy<[TraitImpls]>,\n     exported_symbols: Lazy!([(ExportedSymbol<'tcx>, SymbolExportLevel)]),"}, {"sha": "3f9e2c025866eb55a2ad7e870691d5a14d7d9fdb", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -26,7 +26,7 @@ rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n-syntax_pos = { path = \"../librustc_span\", package = \"rustc_span\" }\n+rustc_span = { path = \"../librustc_span\" }\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "c60a11e348d70e2634a840d3978e7e0ce0329d33", "filename": "src/librustc_mir/borrow_check/constraints/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fconstraints%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fconstraints%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconstraints%2Fgraph.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -2,7 +2,7 @@ use rustc::mir::ConstraintCategory;\n use rustc::ty::RegionVid;\n use rustc_data_structures::graph;\n use rustc_index::vec::IndexVec;\n-use syntax_pos::DUMMY_SP;\n+use rustc_span::DUMMY_SP;\n \n use crate::borrow_check::{\n     constraints::OutlivesConstraintIndex,"}, {"sha": "5eca32ce00c8bc05b024962a447306a853b09906", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -11,8 +11,8 @@ use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_index::vec::Idx;\n+use rustc_span::Span;\n use syntax::source_map::DesugaringKind;\n-use syntax_pos::Span;\n \n use crate::dataflow::drop_flag_effects;\n use crate::dataflow::indexes::{MoveOutIndex, MovePathIndex};"}, {"sha": "58f62bf7e40b326e160625ffa9180c4563d47d2c", "filename": "src/librustc_mir/borrow_check/diagnostics/explain_borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -11,8 +11,8 @@ use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::DiagnosticBuilder;\n use rustc_index::vec::IndexVec;\n-use syntax_pos::symbol::Symbol;\n-use syntax_pos::Span;\n+use rustc_span::symbol::Symbol;\n+use rustc_span::Span;\n \n use crate::borrow_check::{\n     borrow_set::BorrowData, nll::ConstraintDescription, region_infer::Cause, MirBorrowckCtxt,"}, {"sha": "e006c6ddf19ab9f4668b96650e042ea1554ed5a6", "filename": "src/librustc_mir/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -13,7 +13,7 @@ use rustc::ty::layout::VariantIdx;\n use rustc::ty::print::Print;\n use rustc::ty::{self, DefIdTree, Ty, TyCtxt};\n use rustc_errors::DiagnosticBuilder;\n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n use super::borrow_set::BorrowData;\n use super::MirBorrowckCtxt;"}, {"sha": "3f4204bc12f6adec3021d2eb19f392b93a2af568", "filename": "src/librustc_mir/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,7 +1,7 @@\n use rustc::mir::*;\n use rustc::ty;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n use crate::borrow_check::diagnostics::UseSpans;\n use crate::borrow_check::prefixes::PrefixSet;"}, {"sha": "99fedc8b67d6fc85af190d375434cc843f772979", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -4,8 +4,8 @@ use rustc::mir::{self, ClearCrossCrate, Local, LocalInfo, Location, ReadOnlyBody\n use rustc::mir::{Mutability, Place, PlaceBase, PlaceRef, ProjectionElem};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_index::vec::Idx;\n-use syntax_pos::symbol::kw;\n-use syntax_pos::Span;\n+use rustc_span::symbol::kw;\n+use rustc_span::Span;\n \n use crate::borrow_check::diagnostics::BorrowedContentSource;\n use crate::borrow_check::MirBorrowckCtxt;"}, {"sha": "f45246301d33e00e7e62e60b0f10f9f1d0eb974f", "filename": "src/librustc_mir/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -9,10 +9,10 @@ use rustc::mir::{Body, ConstraintCategory, Location};\n use rustc::ty::{self, RegionVid, Ty};\n use rustc_errors::DiagnosticBuilder;\n use rustc_index::vec::IndexVec;\n+use rustc_span::Span;\n use std::collections::VecDeque;\n use syntax::errors::Applicability;\n use syntax::symbol::kw;\n-use syntax_pos::Span;\n \n use crate::util::borrowck_errors;\n "}, {"sha": "3b8043e8f1befcf9fc8c5d33928636d7e136bea3", "filename": "src/librustc_mir/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -7,8 +7,8 @@ use rustc::ty::subst::{GenericArgKind, SubstsRef};\n use rustc::ty::{self, RegionVid, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::DiagnosticBuilder;\n+use rustc_span::{symbol::Symbol, Span, DUMMY_SP};\n use syntax::symbol::kw;\n-use syntax_pos::{symbol::Symbol, Span, DUMMY_SP};\n \n use crate::borrow_check::{\n     nll::ToRegionVid, region_infer::RegionInferenceContext, universal_regions::DefiningTy,"}, {"sha": "d9bfcaf57f5fc52f3c2b44b685bf7b7f94a4f8bd", "filename": "src/librustc_mir/borrow_check/diagnostics/var_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fvar_name.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -3,8 +3,8 @@ use crate::borrow_check::{nll::ToRegionVid, region_infer::RegionInferenceContext\n use rustc::mir::{Body, Local};\n use rustc::ty::{RegionVid, TyCtxt};\n use rustc_index::vec::{Idx, IndexVec};\n+use rustc_span::symbol::Symbol;\n use syntax::source_map::Span;\n-use syntax_pos::symbol::Symbol;\n \n impl<'tcx> RegionInferenceContext<'tcx> {\n     crate fn get_var_name_and_span_for_region("}, {"sha": "9f10ddbc2527c971b8b1906c3e94e952462fca18", "filename": "src/librustc_mir/borrow_check/member_constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmember_constraints.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -3,9 +3,9 @@ use rustc::hir::def_id::DefId;\n use rustc::infer::region_constraints::MemberConstraint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::vec::{Idx, IndexVec};\n+use rustc_span::Span;\n use std::hash::Hash;\n use std::ops::Index;\n-use syntax_pos::Span;\n \n /// Compactly stores a set of `R0 member of [R1...Rn]` constraints,\n /// indexed by the region `R0`."}, {"sha": "2c6aa7eb1b16b090741c1960628d380f5abc3292", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -25,8 +25,8 @@ use std::collections::BTreeMap;\n use std::mem;\n use std::rc::Rc;\n \n+use rustc_span::{Span, DUMMY_SP};\n use syntax::ast::Name;\n-use syntax_pos::{Span, DUMMY_SP};\n \n use crate::dataflow::indexes::{BorrowIndex, InitIndex, MoveOutIndex, MovePathIndex};\n use crate::dataflow::move_paths::{HasMoveData, InitLocation, LookupResult, MoveData, MoveError};"}, {"sha": "73267b0f399732044427c9d6b5e13d86f9bece72", "filename": "src/librustc_mir/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -16,7 +16,7 @@ use rustc_data_structures::graph::vec_graph::VecGraph;\n use rustc_data_structures::graph::WithSuccessors;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n use crate::borrow_check::{\n     constraints::{"}, {"sha": "8f65a0f01c6e0d62f461c3d6671b55abc163ef14", "filename": "src/librustc_mir/borrow_check/type_check/constraint_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fconstraint_conversion.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -7,7 +7,7 @@ use rustc::infer::{self, InferCtxt, SubregionOrigin};\n use rustc::mir::ConstraintCategory;\n use rustc::ty::subst::GenericArgKind;\n use rustc::ty::{self, TyCtxt};\n-use syntax_pos::DUMMY_SP;\n+use rustc_span::DUMMY_SP;\n \n use crate::borrow_check::{\n     constraints::OutlivesConstraint,"}, {"sha": "0e4801b88d87e966fc880d6889444dc1529ef9b5", "filename": "src/librustc_mir/borrow_check/type_check/free_region_relations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -7,8 +7,8 @@ use rustc::traits::query::outlives_bounds::{self, OutlivesBound};\n use rustc::traits::query::type_op::{self, TypeOp};\n use rustc::ty::{self, RegionVid, Ty};\n use rustc_data_structures::transitive_relation::TransitiveRelation;\n+use rustc_span::DUMMY_SP;\n use std::rc::Rc;\n-use syntax_pos::DUMMY_SP;\n \n use crate::borrow_check::{\n     nll::ToRegionVid,"}, {"sha": "3d3b1e5cbf6a9147d4148a6ba995d75f12c7b07e", "filename": "src/librustc_mir/borrow_check/type_check/input_output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -12,7 +12,7 @@ use rustc::mir::*;\n use rustc::ty::Ty;\n \n use rustc_index::vec::Idx;\n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n use crate::borrow_check::universal_regions::UniversalRegions;\n "}, {"sha": "369bce64724ab9628c1c8402d9aeb3a1a1ea95e2", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -31,7 +31,7 @@ use rustc::ty::{\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_error_codes::*;\n use rustc_index::vec::{Idx, IndexVec};\n-use syntax_pos::{Span, DUMMY_SP};\n+use rustc_span::{Span, DUMMY_SP};\n \n use crate::dataflow::move_paths::MoveData;\n use crate::dataflow::FlowAtLocation;"}, {"sha": "4b1a5d0c9a2810d6daf6c8110978d66c6ecf3589", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -4,7 +4,7 @@ use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n use crate::hair::*;\n use rustc::hir;\n use rustc::mir::*;\n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub fn ast_block("}, {"sha": "29eac5e4b3f541306c1ca8851c37274351b557a1", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -8,7 +8,7 @@ use rustc::middle::region;\n use rustc::mir::interpret::PanicInfo::BoundsCheck;\n use rustc::mir::*;\n use rustc::ty::{self, CanonicalUserTypeAnnotation, Ty, TyCtxt, Variance};\n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n use rustc_index::vec::Idx;\n "}, {"sha": "34b0cbf3b25cd1ab3ec9ec16cf2c8312e2e553cf", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -9,7 +9,7 @@ use rustc::middle::region;\n use rustc::mir::interpret::PanicInfo;\n use rustc::mir::*;\n use rustc::ty::{self, Ty, UpvarSubsts};\n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Returns an rvalue suitable for use until the end of the current"}, {"sha": "9c7b1129916a3ee9138a090a38a2766368001454", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -6,7 +6,7 @@ use crate::hair::*;\n use rustc::hir;\n use rustc::middle::region;\n use rustc::mir::*;\n-use syntax_pos::symbol::sym;\n+use rustc_span::symbol::sym;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Compile `expr` into a fresh temporary. This is used when building"}, {"sha": "2a2c818cb8a9554b925f46fd81de4b36da1db7f5", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -7,7 +7,7 @@ use rustc::hir;\n use rustc::mir::*;\n use rustc::ty::{self, CanonicalUserTypeAnnotation};\n use rustc_data_structures::fx::FxHashMap;\n-use syntax_pos::symbol::sym;\n+use rustc_span::symbol::sym;\n \n use rustc_target::spec::abi::Abi;\n "}, {"sha": "468a36267251c81de866f671cf2e4672456eee6d", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -17,9 +17,9 @@ use rustc::ty::layout::VariantIdx;\n use rustc::ty::{self, CanonicalUserTypeAnnotation, Ty};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_index::bit_set::BitSet;\n+use rustc_span::Span;\n use smallvec::{smallvec, SmallVec};\n use syntax::ast::Name;\n-use syntax_pos::Span;\n \n // helper functions, broken out by category:\n mod simplify;"}, {"sha": "b87cf7610c2443f4adc95fb00d0084de63cc117b", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -16,7 +16,7 @@ use rustc::ty::util::IntTypeExt;\n use rustc::ty::{self, adjustment::PointerCast, Ty};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::BitSet;\n-use syntax_pos::symbol::sym;\n+use rustc_span::symbol::sym;\n \n use std::cmp::Ordering;\n "}, {"sha": "7c358fef7d10279be27c89e5c5d87f3b118766c4", "filename": "src/librustc_mir/build/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -6,7 +6,7 @@ use crate::build::Builder;\n use rustc::ty::{self, Ty};\n \n use rustc::mir::*;\n-use syntax_pos::{Span, DUMMY_SP};\n+use rustc_span::{Span, DUMMY_SP};\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Adds a new temporary value of type `ty` storing the result of"}, {"sha": "322898cc1812b88c68ebeed863767adf55b320c8", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -14,12 +14,12 @@ use rustc::ty::subst::Subst;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::util::nodemap::HirIdMap;\n use rustc_index::vec::{Idx, IndexVec};\n+use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n use rustc_target::spec::PanicStrategy;\n use std::u32;\n use syntax::attr::{self, UnwindAttr};\n use syntax::symbol::kw;\n-use syntax_pos::Span;\n \n use super::lints;\n "}, {"sha": "b05b1d246307c5d90a0d6fd50ed374a538a23f91", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -89,9 +89,9 @@ use rustc::hir::GeneratorKind;\n use rustc::middle::region;\n use rustc::mir::*;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_span::{Span, DUMMY_SP};\n use std::collections::hash_map::Entry;\n use std::mem;\n-use syntax_pos::{Span, DUMMY_SP};\n \n #[derive(Debug)]\n struct Scope {"}, {"sha": "38401b42b48a8a3019a06c39fa988a0477893956", "filename": "src/librustc_mir/dataflow/impls/indirect_mutation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Findirect_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Findirect_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Findirect_mutation.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -2,7 +2,7 @@ use rustc::mir::visit::Visitor;\n use rustc::mir::{self, Local, Location};\n use rustc::ty::{self, TyCtxt};\n use rustc_index::bit_set::BitSet;\n-use syntax_pos::DUMMY_SP;\n+use rustc_span::DUMMY_SP;\n \n use crate::dataflow::{self, GenKillSet};\n "}, {"sha": "6b711c37dae38023bf9e41054682d7e9555e4bb3", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -3,8 +3,8 @@ use rustc::mir::*;\n use rustc::ty::{ParamEnv, Ty, TyCtxt};\n use rustc::util::nodemap::FxHashMap;\n use rustc_index::vec::{Enumerated, Idx, IndexVec};\n+use rustc_span::Span;\n use smallvec::SmallVec;\n-use syntax_pos::Span;\n \n use std::fmt;\n use std::ops::{Index, IndexMut};"}, {"sha": "a4bedfa6490e20599073369387d1d241bbcf607d", "filename": "src/librustc_mir/hair/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fconstant.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,7 +1,7 @@\n use rustc::mir::interpret::{ConstValue, Scalar};\n use rustc::ty::{self, layout::Size, ParamEnv, Ty, TyCtxt};\n+use rustc_span::symbol::Symbol;\n use syntax::ast;\n-use syntax_pos::symbol::Symbol;\n \n #[derive(PartialEq)]\n crate enum LitToConstError {"}, {"sha": "569ac96d369c0110ecd47c236d87d4e683ca3cf6", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -12,7 +12,7 @@ use rustc::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::ty::{self, AdtKind, Ty};\n use rustc_index::vec::Idx;\n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr<'tcx> {\n     type Output = Expr<'tcx>;"}, {"sha": "800507e868ca621db27420a0aa055c107348b291", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -14,7 +14,7 @@ use rustc::ty::adjustment::PointerCast;\n use rustc::ty::layout::VariantIdx;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{AdtDef, Const, Ty, UpvarSubsts, UserType};\n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n mod constant;\n pub mod cx;"}, {"sha": "61d2eceb3087771d965d0dfc961eca2534925f20", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -246,8 +246,8 @@ use rustc::mir::Field;\n use rustc::util::captures::Captures;\n use rustc::util::common::ErrorReported;\n \n+use rustc_span::{Span, DUMMY_SP};\n use syntax::attr::{SignedInt, UnsignedInt};\n-use syntax_pos::{Span, DUMMY_SP};\n \n use arena::TypedArena;\n "}, {"sha": "12d75033da2cfc114beb439c038a107a0819d9e4", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -15,10 +15,10 @@ use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_error_codes::*;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_span::symbol::sym;\n+use rustc_span::{MultiSpan, Span};\n use syntax::ast::Mutability;\n use syntax::feature_gate::feature_err;\n-use syntax_pos::symbol::sym;\n-use syntax_pos::{MultiSpan, Span};\n \n use std::slice;\n "}, {"sha": "dd97565f55abe2feaa2445a6ff06f6277b0ae532", "filename": "src/librustc_mir/hair/pattern/const_to_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fconst_to_pat.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -9,7 +9,7 @@ use rustc::ty::{self, Ty, TyCtxt};\n \n use rustc_index::vec::Idx;\n \n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n use std::cell::Cell;\n "}, {"sha": "f5d8ed877ec5cbe0ee399d3b941ae5c45b46bac6", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -22,10 +22,10 @@ use rustc::ty::{CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTyp\n \n use rustc_index::vec::Idx;\n \n+use rustc_span::{Span, DUMMY_SP};\n use std::cmp::Ordering;\n use std::fmt;\n use syntax::ast;\n-use syntax_pos::{Span, DUMMY_SP};\n \n use rustc_error_codes::*;\n "}, {"sha": "9f54d4c3212e9e73cdfa924c46399d3d8f9e1b7c", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -199,7 +199,7 @@ impl<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx\n                     self.intern_shallow(vtable.alloc_id, Mutability::Not, None)?;\n                 } else {\n                     self.ecx().tcx.sess.delay_span_bug(\n-                        syntax_pos::DUMMY_SP,\n+                        rustc_span::DUMMY_SP,\n                         \"vtables pointers cannot be integer pointers\",\n                     );\n                 }"}, {"sha": "cc38cbbac8d65a598d18fcf20c24534732c8832d", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -12,8 +12,8 @@ use rustc::ty;\n use rustc::ty::layout::{LayoutOf, Primitive, Size};\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::TyCtxt;\n-use syntax_pos::symbol::{sym, Symbol};\n-use syntax_pos::Span;\n+use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::Span;\n \n use super::{ImmTy, InterpCx, Machine, OpTy, PlaceTy};\n "}, {"sha": "da0a9fb4f1be5763ecc4e26446bde8c45633c29f", "filename": "src/librustc_mir/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,7 +1,7 @@\n use rustc::middle::lang_items::PanicLocationLangItem;\n use rustc::ty::subst::Subst;\n+use rustc_span::{Span, Symbol};\n use rustc_target::abi::LayoutOf;\n-use syntax_pos::{Span, Symbol};\n \n use crate::interpret::{\n     intrinsics::{InterpCx, Machine},"}, {"sha": "3b444ac46ef26b55224615f3aba6d148236e7aca", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -8,7 +8,7 @@ use std::hash::Hash;\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n use rustc::ty::{self, Ty, TyCtxt};\n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n use super::{\n     AllocId, Allocation, AllocationExtra, AssertMessage, Frame, ImmTy, InterpCx, InterpResult,"}, {"sha": "b55f66dc75124b7c7b1d8c9895d8fdedc26f09b4", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -11,7 +11,7 @@ use rustc::hir;\n use rustc::ty;\n use rustc::ty::layout::{self, LayoutOf, TyLayout, VariantIdx};\n use rustc_data_structures::fx::FxHashSet;\n-use syntax_pos::symbol::{sym, Symbol};\n+use rustc_span::symbol::{sym, Symbol};\n \n use std::hash::Hash;\n "}, {"sha": "6c8f8f6c2275c053269013dd9103084b5fc1ab77", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -855,7 +855,7 @@ fn find_vtable_types_for_unsizing<'tcx>(\n     let ptr_vtable = |inner_source: Ty<'tcx>, inner_target: Ty<'tcx>| {\n         let param_env = ty::ParamEnv::reveal_all();\n         let type_has_metadata = |ty: Ty<'tcx>| -> bool {\n-            use syntax_pos::DUMMY_SP;\n+            use rustc_span::DUMMY_SP;\n             if ty.is_sized(tcx.at(DUMMY_SP), param_env) {\n                 return false;\n             }"}, {"sha": "5d88f3b93aeb364c7b3cd5d765640e30e5faec3c", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -8,8 +8,8 @@ use rustc::ty::{self, Ty, TyCtxt};\n \n use rustc_index::vec::{Idx, IndexVec};\n \n+use rustc_span::{sym, Span};\n use rustc_target::spec::abi::Abi;\n-use syntax_pos::{sym, Span};\n \n use std::fmt;\n use std::iter;"}, {"sha": "37435fbf4d16f04d52d0ad8f77d4f8a0e183a446", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -3,9 +3,9 @@\n use rustc::hir::def_id::DefId;\n use rustc::session::config::nightly_options;\n use rustc::ty::TyCtxt;\n+use rustc_span::{Span, Symbol};\n use syntax::feature_gate::feature_err;\n use syntax::symbol::sym;\n-use syntax_pos::{Span, Symbol};\n \n use super::{ConstKind, Item};\n "}, {"sha": "0799cc2374ad4747c5e414a3f2f848e32edf9611", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -2,7 +2,7 @@\n \n use rustc::mir::*;\n use rustc::ty::{self, Ty};\n-use syntax_pos::DUMMY_SP;\n+use rustc_span::DUMMY_SP;\n \n use super::Item as ConstCx;\n "}, {"sha": "19cad453e25e62e7f3a79abc945e4746dd7d0099", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -9,8 +9,8 @@ use rustc::ty::cast::CastTy;\n use rustc::ty::{self, TyCtxt};\n use rustc_error_codes::*;\n use rustc_index::bit_set::BitSet;\n+use rustc_span::Span;\n use syntax::symbol::sym;\n-use syntax_pos::Span;\n \n use std::borrow::Cow;\n use std::ops::Deref;"}, {"sha": "e1c2b494337e742e4cc7170ab354c379830c9346", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -24,8 +24,8 @@ use rustc::ty::subst::InternalSubsts;\n use rustc::ty::{self, Instance, ParamEnv, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::vec::IndexVec;\n+use rustc_span::{Span, DUMMY_SP};\n use syntax::ast::Mutability;\n-use syntax_pos::{Span, DUMMY_SP};\n \n use crate::const_eval::error_to_const_error;\n use crate::interpret::{"}, {"sha": "269465fb88b42807ea950e50368b0a393cfab1e7", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -15,8 +15,8 @@ use rustc::ty::layout::VariantIdx;\n use rustc::ty::{self, TyCtxt};\n use rustc::util::nodemap::FxHashMap;\n use rustc_index::bit_set::BitSet;\n+use rustc_span::Span;\n use std::fmt;\n-use syntax_pos::Span;\n \n pub struct ElaborateDrops;\n "}, {"sha": "62f7a3f539acb728d8e789560c735c366132a9af", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -8,9 +8,9 @@ use rustc::ty::steal::Steal;\n use rustc::ty::{InstanceDef, TyCtxt, TypeFoldable};\n use rustc::util::nodemap::DefIdSet;\n use rustc_index::vec::IndexVec;\n+use rustc_span::Span;\n use std::borrow::Cow;\n use syntax::ast;\n-use syntax_pos::Span;\n \n pub mod add_call_guards;\n pub mod add_moves_for_packed_drops;"}, {"sha": "804e6dbb20251deb7a3cb1bb744d94d2889e12f6", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -19,9 +19,9 @@ use rustc::mir::*;\n use rustc::ty::cast::CastTy;\n use rustc::ty::subst::InternalSubsts;\n use rustc::ty::{self, List, TyCtxt, TypeFoldable};\n+use rustc_span::{Span, DUMMY_SP};\n use syntax::ast::LitKind;\n use syntax::symbol::sym;\n-use syntax_pos::{Span, DUMMY_SP};\n \n use rustc_index::vec::{Idx, IndexVec};\n use rustc_target::spec::abi::Abi;"}, {"sha": "7bb1a4e3921bfc02d982e96136e9d9b95a9c25f1", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -2,10 +2,10 @@ use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::mir::*;\n use rustc::ty::{self, adjustment::PointerCast, Predicate, Ty, TyCtxt};\n+use rustc_span::Span;\n use std::borrow::Cow;\n use syntax::attr;\n use syntax::symbol::{sym, Symbol};\n-use syntax_pos::Span;\n \n type McfResult = Result<(), (Span, Cow<'static, str>)>;\n "}, {"sha": "7066ed906eb4f03d9433d64a51abed295eee6107", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,7 +1,7 @@\n+use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n use syntax::symbol::sym;\n-use syntax_pos::Span;\n \n use crate::transform::{MirPass, MirSource};\n use rustc::hir::def_id::DefId;"}, {"sha": "9f67109b34a1bbe1260b4929d8756d65475f397f", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,6 +1,6 @@\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n-use syntax_pos::{MultiSpan, Span};\n+use rustc_span::{MultiSpan, Span};\n \n use rustc_error_codes::*;\n "}, {"sha": "68aa82f902f0198cd21233742e451395b1a94e7b", "filename": "src/librustc_mir/util/patch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpatch.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,7 +1,7 @@\n use rustc::mir::*;\n use rustc::ty::Ty;\n use rustc_index::vec::{Idx, IndexVec};\n-use syntax_pos::Span;\n+use rustc_span::Span;\n \n /// This struct represents a patch to MIR, which can add\n /// new statements and basic blocks and patch over block"}, {"sha": "d41d89902efcd6135c17cceb37c5f7dec51de3f3", "filename": "src/librustc_parse/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2FCargo.toml?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -18,6 +18,6 @@ rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n-syntax_pos = { path = \"../librustc_span\", package = \"rustc_span\" }\n+rustc_span = { path = \"../librustc_span\" }\n syntax = { path = \"../libsyntax\" }\n unicode-normalization = \"0.1.11\""}, {"sha": "0dbbda37ee411ec09448432a651e4d378f2bea9c", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -11,6 +11,8 @@\n use crate::{parse_in, validate_attr};\n use rustc_errors::Applicability;\n use rustc_feature::Features;\n+use rustc_span::symbol::sym;\n+use rustc_span::Span;\n use syntax::ast::{self, AttrItem, Attribute, MetaItem};\n use syntax::attr;\n use syntax::attr::HasAttrs;\n@@ -20,8 +22,6 @@ use syntax::mut_visit::*;\n use syntax::ptr::P;\n use syntax::sess::ParseSess;\n use syntax::util::map_in_place::MapInPlace;\n-use syntax_pos::symbol::sym;\n-use syntax_pos::Span;\n \n use smallvec::SmallVec;\n "}, {"sha": "02e4808679f00dbbbb80d6f958cf5d0dd35b0ff1", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -2,11 +2,11 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::{DiagnosticBuilder, FatalError};\n use rustc_lexer::unescape;\n use rustc_lexer::Base;\n+use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::{BytePos, Pos, Span};\n use syntax::sess::ParseSess;\n use syntax::token::{self, Token, TokenKind};\n use syntax::util::comments;\n-use syntax_pos::symbol::{sym, Symbol};\n-use syntax_pos::{BytePos, Pos, Span};\n \n use log::debug;\n use std::char;\n@@ -43,7 +43,7 @@ pub struct StringReader<'a> {\n impl<'a> StringReader<'a> {\n     pub fn new(\n         sess: &'a ParseSess,\n-        source_file: Lrc<syntax_pos::SourceFile>,\n+        source_file: Lrc<rustc_span::SourceFile>,\n         override_span: Option<Span>,\n     ) -> Self {\n         if source_file.src.is_none() {"}, {"sha": "5beda290b9144dea180faa2f49ee9f8f8f2f3696", "filename": "src/librustc_parse/lexer/tokentrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -2,14 +2,14 @@ use super::{StringReader, UnmatchedBrace};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::PResult;\n+use rustc_span::Span;\n use syntax::print::pprust::token_to_string;\n use syntax::token::{self, Token};\n use syntax::tokenstream::{\n     DelimSpan,\n     IsJoint::{self, *},\n     TokenStream, TokenTree, TreeAndJoint,\n };\n-use syntax_pos::Span;\n \n impl<'a> StringReader<'a> {\n     crate fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {"}, {"sha": "151c63a49b57c497af98398cd44cf43fd94c33d4", "filename": "src/librustc_parse/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Funescape_error_reporting.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -4,7 +4,7 @@ use std::iter::once;\n use std::ops::Range;\n \n use rustc_lexer::unescape::{EscapeError, Mode};\n-use syntax_pos::{BytePos, Span};\n+use rustc_span::{BytePos, Span};\n \n use syntax::errors::{Applicability, Handler};\n "}, {"sha": "ac395f6cbc2fd2cdc097dfa2e3517a66d11b15d1", "filename": "src/librustc_parse/lexer/unicode_chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Funicode_chars.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -4,7 +4,7 @@\n use super::StringReader;\n use crate::token;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n-use syntax_pos::{symbol::kw, BytePos, Pos, Span};\n+use rustc_span::{symbol::kw, BytePos, Pos, Span};\n \n #[rustfmt::skip] // for line breaks\n const UNICODE_ARRAY: &[(char, &str, char)] = &["}, {"sha": "9227e968ecc4f2522593d96aa759923c7d55047f", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -12,7 +12,7 @@ use syntax::tokenstream::{self, TokenStream, TokenTree};\n \n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Diagnostic, FatalError, Level, PResult};\n-use syntax_pos::{FileName, SourceFile, Span};\n+use rustc_span::{FileName, SourceFile, Span};\n \n use std::borrow::Cow;\n use std::path::Path;\n@@ -373,7 +373,7 @@ fn prepend_attrs(\n     sess: &ParseSess,\n     attrs: &[ast::Attribute],\n     tokens: Option<&tokenstream::TokenStream>,\n-    span: syntax_pos::Span,\n+    span: rustc_span::Span,\n ) -> Option<tokenstream::TokenStream> {\n     let tokens = tokens?;\n     if attrs.len() == 0 {"}, {"sha": "81f31b2eda1d4990fb6756beefbc28d8e3b17a5a", "filename": "src/librustc_parse/parser/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fattr.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,11 +1,11 @@\n use super::{Parser, PathStyle, TokenType};\n use rustc_errors::PResult;\n+use rustc_span::{Span, Symbol};\n use syntax::ast;\n use syntax::attr;\n use syntax::print::pprust;\n use syntax::token::{self, Nonterminal};\n use syntax::util::comments;\n-use syntax_pos::{Span, Symbol};\n \n use log::debug;\n "}, {"sha": "bf03f731c9f90dcb253229313a6e96f78e2f62cb", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -3,6 +3,8 @@ use super::{BlockMode, Parser, PathStyle, SemiColonMode, SeqSep, TokenExpectType\n use rustc_data_structures::fx::FxHashSet;\n use rustc_error_codes::*;\n use rustc_errors::{self, pluralize, Applicability, DiagnosticBuilder, Handler, PResult};\n+use rustc_span::symbol::kw;\n+use rustc_span::{MultiSpan, Span, SpanSnippetError, DUMMY_SP};\n use syntax::ast::{\n     self, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Ident, Item, Param,\n };\n@@ -12,8 +14,6 @@ use syntax::ptr::P;\n use syntax::struct_span_err;\n use syntax::token::{self, token_can_begin_expr, TokenKind};\n use syntax::util::parser::AssocOp;\n-use syntax_pos::symbol::kw;\n-use syntax_pos::{MultiSpan, Span, SpanSnippetError, DUMMY_SP};\n \n use log::{debug, trace};\n use std::mem;"}, {"sha": "90f15375aec428b3b6ebdd06d4c560efbcba1c9a", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -5,6 +5,8 @@ use super::{SemiColonMode, SeqSep, TokenExpectType};\n use crate::maybe_recover_from_interpolated_ty_qpath;\n \n use rustc_errors::{Applicability, PResult};\n+use rustc_span::source_map::{self, Span};\n+use rustc_span::symbol::{kw, sym, Symbol};\n use std::mem;\n use syntax::ast::{self, AttrStyle, AttrVec, CaptureBy, Field, Ident, Lit, DUMMY_NODE_ID};\n use syntax::ast::{\n@@ -17,8 +19,6 @@ use syntax::token::{self, Token, TokenKind};\n use syntax::util::classify;\n use syntax::util::literal::LitError;\n use syntax::util::parser::{prec_let_scrutinee_needs_par, AssocOp, Fixity};\n-use syntax_pos::source_map::{self, Span};\n-use syntax_pos::symbol::{kw, sym, Symbol};\n \n /// Possibly accepts an `token::Interpolated` expression (a pre-parsed expression\n /// dropped into the token stream, which happens while parsing the result of"}, {"sha": "c0cc9deafb818714c2cd95951e07e7f96d1dd364", "filename": "src/librustc_parse/parser/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,10 +1,10 @@\n use super::Parser;\n \n use rustc_errors::PResult;\n+use rustc_span::symbol::{kw, sym};\n use syntax::ast::{self, Attribute, GenericBounds, GenericParam, GenericParamKind, WhereClause};\n use syntax::source_map::DUMMY_SP;\n use syntax::token;\n-use syntax_pos::symbol::{kw, sym};\n \n impl<'a> Parser<'a> {\n     /// Parses bounds of a lifetime parameter `BOUND + BOUND + BOUND`, possibly with trailing `+`."}, {"sha": "a05bc48981efe4446c5d31ccbec59c28df43ceac", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -5,6 +5,9 @@ use crate::maybe_whole;\n \n use rustc_error_codes::*;\n use rustc_errors::{Applicability, DiagnosticBuilder, PResult, StashKey};\n+use rustc_span::source_map::{self, respan, Span};\n+use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::BytePos;\n use syntax::ast::{self, AttrKind, AttrStyle, AttrVec, Attribute, Ident, DUMMY_NODE_ID};\n use syntax::ast::{AssocItem, AssocItemKind, Item, ItemKind, UseTree, UseTreeKind};\n use syntax::ast::{BindingMode, Block, FnDecl, FnSig, Mac, MacArgs, MacDelimiter, Param, SelfKind};\n@@ -16,9 +19,6 @@ use syntax::ptr::P;\n use syntax::struct_span_err;\n use syntax::token;\n use syntax::tokenstream::{DelimSpan, TokenStream, TokenTree};\n-use syntax_pos::source_map::{self, respan, Span};\n-use syntax_pos::symbol::{kw, sym, Symbol};\n-use syntax_pos::BytePos;\n \n use log::debug;\n use std::mem;"}, {"sha": "6dcffcf0bd7b86680ccb1d892ff3742cdf863314", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -16,6 +16,9 @@ use crate::{Directory, DirectoryOwnership};\n \n use log::debug;\n use rustc_errors::{Applicability, DiagnosticBuilder, FatalError, PResult};\n+use rustc_span::source_map::respan;\n+use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::{BytePos, FileName, Span, DUMMY_SP};\n use syntax::ast::{self, AttrStyle, AttrVec, CrateSugar, Extern, Ident, Unsafety, DUMMY_NODE_ID};\n use syntax::ast::{IsAsync, MacArgs, MacDelimiter, Mutability, StrLit, Visibility, VisibilityKind};\n use syntax::print::pprust;\n@@ -25,9 +28,6 @@ use syntax::struct_span_err;\n use syntax::token::{self, DelimToken, Token, TokenKind};\n use syntax::tokenstream::{self, DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n use syntax::util::comments::{doc_comment_style, strip_doc_comment_decoration};\n-use syntax_pos::source_map::respan;\n-use syntax_pos::symbol::{kw, sym, Symbol};\n-use syntax_pos::{BytePos, FileName, Span, DUMMY_SP};\n \n use std::borrow::Cow;\n use std::path::PathBuf;"}, {"sha": "3254ab5b46325e7815e72662ecba685a995def67", "filename": "src/librustc_parse/parser/module.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmodule.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -5,11 +5,11 @@ use super::Parser;\n use crate::{new_sub_parser_from_file, DirectoryOwnership};\n \n use rustc_errors::PResult;\n+use rustc_span::source_map::{FileName, SourceMap, Span, DUMMY_SP};\n+use rustc_span::symbol::sym;\n use syntax::ast::{self, Attribute, Crate, Ident, ItemKind, Mod};\n use syntax::attr;\n use syntax::token::{self, TokenKind};\n-use syntax_pos::source_map::{FileName, SourceMap, Span, DUMMY_SP};\n-use syntax_pos::symbol::sym;\n \n use std::path::{self, Path, PathBuf};\n "}, {"sha": "bf7f5735f134b12f4b235e312291b5b1dbdc1096", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,14 +1,14 @@\n use super::{Parser, PathStyle};\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n use rustc_errors::{Applicability, DiagnosticBuilder, PResult};\n+use rustc_span::source_map::{respan, Span, Spanned};\n+use rustc_span::symbol::{kw, sym};\n use syntax::ast::{self, AttrVec, Attribute, FieldPat, Mac, Pat, PatKind, RangeEnd, RangeSyntax};\n use syntax::ast::{BindingMode, Expr, ExprKind, Ident, Mutability, Path, QSelf};\n use syntax::mut_visit::{noop_visit_mac, noop_visit_pat, MutVisitor};\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::token;\n-use syntax_pos::source_map::{respan, Span, Spanned};\n-use syntax_pos::symbol::{kw, sym};\n \n type Expected = Option<&'static str>;\n "}, {"sha": "0358458c0991de06da777b0b60dabacd1cc281ab", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,13 +1,13 @@\n use super::{Parser, TokenType};\n use crate::maybe_whole;\n use rustc_errors::{pluralize, Applicability, PResult};\n+use rustc_span::source_map::{BytePos, Span};\n+use rustc_span::symbol::{kw, sym};\n use syntax::ast::{self, AngleBracketedArgs, Ident, ParenthesizedArgs, Path, PathSegment, QSelf};\n use syntax::ast::{\n     AnonConst, AssocTyConstraint, AssocTyConstraintKind, BlockCheckMode, GenericArg,\n };\n use syntax::token::{self, Token};\n-use syntax_pos::source_map::{BytePos, Span};\n-use syntax_pos::symbol::{kw, sym};\n \n use log::debug;\n use std::mem;"}, {"sha": "a94d8228bbe85f3a70260bad001047720f440287", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -7,14 +7,14 @@ use crate::maybe_whole;\n use crate::DirectoryOwnership;\n \n use rustc_errors::{Applicability, PResult};\n+use rustc_span::source_map::{respan, Span};\n+use rustc_span::symbol::{kw, sym, Symbol};\n use syntax::ast;\n use syntax::ast::{AttrStyle, AttrVec, Attribute, Mac, MacStmtStyle, VisibilityKind};\n use syntax::ast::{Block, BlockCheckMode, Expr, ExprKind, Local, Stmt, StmtKind, DUMMY_NODE_ID};\n use syntax::ptr::P;\n use syntax::token;\n use syntax::util::classify;\n-use syntax_pos::source_map::{respan, Span};\n-use syntax_pos::symbol::{kw, sym, Symbol};\n \n use std::mem;\n "}, {"sha": "4122aa17f83d3507a4b409951f42c09caafb4a98", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -5,6 +5,8 @@ use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n \n use rustc_error_codes::*;\n use rustc_errors::{pluralize, Applicability, PResult};\n+use rustc_span::source_map::Span;\n+use rustc_span::symbol::kw;\n use syntax::ast::{\n     self, BareFnTy, FunctionRetTy, GenericParam, Ident, Lifetime, MutTy, Ty, TyKind,\n };\n@@ -15,8 +17,6 @@ use syntax::ast::{Mac, Mutability};\n use syntax::ptr::P;\n use syntax::struct_span_err;\n use syntax::token::{self, Token};\n-use syntax_pos::source_map::Span;\n-use syntax_pos::symbol::kw;\n \n /// Returns `true` if `IDENT t` can start a type -- `IDENT::a::b`, `IDENT<u8, u8>`,\n /// `IDENT<<u8 as Trait>::AssocTy>`."}, {"sha": "f089361220777fa35b093a3b8e25399d6c7a7d2e", "filename": "src/librustc_parse/validate_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_parse%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fvalidate_attr.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -4,11 +4,11 @@ use crate::parse_in;\n \n use rustc_errors::{Applicability, PResult};\n use rustc_feature::{AttributeTemplate, BUILTIN_ATTRIBUTE_MAP};\n+use rustc_span::{sym, Symbol};\n use syntax::ast::{self, Attribute, MacArgs, MacDelimiter, MetaItem, MetaItemKind};\n use syntax::early_buffered_lints::ILL_FORMED_ATTRIBUTE_INPUT;\n use syntax::sess::ParseSess;\n use syntax::tokenstream::DelimSpan;\n-use syntax_pos::{sym, Symbol};\n \n pub fn check_meta(sess: &ParseSess, attr: &Attribute) {\n     if attr.is_doc_comment() {"}, {"sha": "b33b891d4bb53e3a61531e7341adc461d6d539e9", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -17,6 +17,6 @@ rustc_index = { path = \"../librustc_index\" }\n rustc_parse = { path = \"../librustc_parse\" }\n rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }\n-syntax_pos = { path = \"../librustc_span\", package = \"rustc_span\" }\n+rustc_span = { path = \"../librustc_span\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "a0d5467893de0d70d491fdf1285e123501eb7663", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -11,6 +11,7 @@ use rustc::lint;\n use rustc::session::Session;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_parse::validate_attr;\n+use rustc_span::Span;\n use std::mem;\n use syntax::ast::*;\n use syntax::attr;\n@@ -20,7 +21,6 @@ use syntax::source_map::Spanned;\n use syntax::symbol::{kw, sym};\n use syntax::visit::{self, Visitor};\n use syntax::{span_err, struct_span_err, walk_list};\n-use syntax_pos::Span;\n \n use rustc_error_codes::*;\n "}, {"sha": "c08aab2e200fc4e3a9e9dbb345e63a584cdbe600", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -15,10 +15,10 @@ use rustc::session::config::nightly_options;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_error_codes::*;\n+use rustc_span::{sym, Span, Symbol};\n use syntax::ast::Mutability;\n use syntax::feature_gate::feature_err;\n use syntax::span_err;\n-use syntax_pos::{sym, Span, Symbol};\n \n use std::fmt;\n "}, {"sha": "fc7f9c9e58c6140ecb302cb98daa061075e70c0f", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -17,9 +17,9 @@ use rustc::util::nodemap::FxHashSet;\n \n use rustc_data_structures::fx::FxHashMap;\n \n+use rustc_span;\n use syntax::symbol::sym;\n use syntax::{ast, attr};\n-use syntax_pos;\n \n // Any local node that may call something in its body block should be\n // explored. For example, if it's a live Node::Item that is a\n@@ -231,7 +231,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n         _: ast::Name,\n         _: &hir::Generics<'_>,\n         _: hir::HirId,\n-        _: syntax_pos::Span,\n+        _: rustc_span::Span,\n     ) {\n         let has_repr_c = self.repr_has_repr_c;\n         let inherited_pub_visibility = self.inherited_pub_visibility;\n@@ -549,7 +549,7 @@ impl DeadVisitor<'tcx> {\n     fn warn_dead_code(\n         &mut self,\n         id: hir::HirId,\n-        span: syntax_pos::Span,\n+        span: rustc_span::Span,\n         name: ast::Name,\n         node_type: &str,\n         participle: &str,"}, {"sha": "3b7728a18d36d34998e9f999551dcf8813891617", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -6,10 +6,10 @@ use rustc::session::config::EntryFnType;\n use rustc::session::{config, Session};\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_span::Span;\n use syntax::attr;\n use syntax::entry::EntryPointType;\n use syntax::symbol::sym;\n-use syntax_pos::Span;\n \n use rustc_error_codes::*;\n "}, {"sha": "d52f31ceeeadfb83f67db50cba08040a1c6248f7", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -6,9 +6,9 @@ use rustc::hir::intravisit as hir_visit;\n use rustc::hir::{self, HirId};\n use rustc::util::common::to_readable_str;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc_span::Span;\n use syntax::ast::{self, AttrId, NodeId};\n use syntax::visit as ast_visit;\n-use syntax_pos::Span;\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n enum Id {"}, {"sha": "95dc31cc29bf4b8d519236afd3ee1213a37d458c", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -7,8 +7,8 @@ use rustc::ty::{self, Ty, TyCtxt};\n use rustc::hir;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_index::vec::Idx;\n+use rustc_span::{sym, Span};\n use rustc_target::spec::abi::Abi::RustIntrinsic;\n-use syntax_pos::{sym, Span};\n \n use rustc_error_codes::*;\n "}, {"sha": "2f486e3038fb83e240a7c619ac3bcc40ebee2dad", "filename": "src/librustc_passes/lib_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_passes%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_passes%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib_features.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -9,9 +9,9 @@ use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::middle::lib_features::LibFeatures;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_span::{sym, Span};\n use syntax::ast::{Attribute, MetaItem, MetaItemKind};\n use syntax::symbol::Symbol;\n-use syntax_pos::{sym, Span};\n \n use rustc_error_codes::*;\n "}, {"sha": "b32f6420f66859c65fb2d8e4554a9dd2e92531fa", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -109,14 +109,14 @@ use rustc::util::nodemap::{HirIdMap, HirIdSet};\n \n use errors::Applicability;\n use rustc_data_structures::fx::FxIndexMap;\n+use rustc_span::Span;\n use std::collections::VecDeque;\n use std::io;\n use std::io::prelude::*;\n use std::rc::Rc;\n use std::{fmt, u32};\n use syntax::ast;\n use syntax::symbol::sym;\n-use syntax_pos::Span;\n \n #[derive(Copy, Clone, PartialEq)]\n struct Variable(u32);"}, {"sha": "f5011ceef142eba2b6218b671a390af70ce11faa", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -9,8 +9,8 @@ use rustc::hir::map::Map;\n use rustc::hir::{self, Destination, Movability, Node};\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_span::Span;\n use syntax::struct_span_err;\n-use syntax_pos::Span;\n \n use rustc_error_codes::*;\n "}, {"sha": "1004e639b6ef731c2019641cc6c1994153f03577", "filename": "src/librustc_passes/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -17,8 +17,8 @@ use rustc::ty::TyCtxt;\n use rustc::util::nodemap::FxHashSet;\n \n use rustc_index::vec::Idx;\n+use rustc_span::Span;\n use syntax::source_map;\n-use syntax_pos::Span;\n \n use std::mem;\n "}, {"sha": "a9bbe429c00cce346de21c9474742d9e7d95ef93", "filename": "src/librustc_plugin_impl/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_plugin_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_plugin_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2FCargo.toml?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -14,5 +14,5 @@ doctest = false\n rustc = { path = \"../librustc\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n syntax = { path = \"../libsyntax\" }\n-syntax_pos = { path = \"../librustc_span\", package = \"rustc_span\" }\n+rustc_span = { path = \"../librustc_span\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "caa43b3380275ca66994b69423f7099afa902f8f", "filename": "src/librustc_plugin_impl/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_plugin_impl%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_plugin_impl%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Fbuild.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -5,9 +5,9 @@ use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_span::Span;\n use syntax::attr;\n use syntax::symbol::sym;\n-use syntax_pos::Span;\n \n struct RegistrarFinder {\n     registrars: Vec<(hir::HirId, Span)>,"}, {"sha": "3010691dba20d04bd615b9ed7eb942ff1069cc3f", "filename": "src/librustc_plugin_impl/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_plugin_impl%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_plugin_impl%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Fload.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -5,14 +5,14 @@ use rustc::middle::cstore::MetadataLoader;\n use rustc::session::Session;\n use rustc_metadata::locator;\n \n+use rustc_span::Span;\n use std::borrow::ToOwned;\n use std::env;\n use std::mem;\n use std::path::PathBuf;\n use syntax::ast::{Crate, Ident};\n use syntax::struct_span_err;\n use syntax::symbol::sym;\n-use syntax_pos::Span;\n \n use rustc_error_codes::*;\n "}, {"sha": "e39c0b427dab1aa2d03f4611b07a7097ab974491", "filename": "src/librustc_privacy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_privacy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_privacy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2FCargo.toml?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -12,7 +12,7 @@ path = \"lib.rs\"\n rustc = { path = \"../librustc\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n syntax = { path = \"../libsyntax\" }\n-syntax_pos = { path = \"../librustc_span\", package = \"rustc_span\" }\n+rustc_span = { path = \"../librustc_span\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n log = \"0.4\""}, {"sha": "6c3053f016bf05b7730346b2e781c6da3d57dfff", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -20,11 +20,11 @@ use rustc::ty::subst::InternalSubsts;\n use rustc::ty::{self, GenericParamDefKind, TraitRef, Ty, TyCtxt, TypeFoldable};\n use rustc::util::nodemap::HirIdSet;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_span::hygiene::Transparency;\n+use rustc_span::Span;\n use syntax::ast::Ident;\n use syntax::attr;\n use syntax::symbol::{kw, sym};\n-use syntax_pos::hygiene::Transparency;\n-use syntax_pos::Span;\n \n use std::marker::PhantomData;\n use std::{cmp, fmt, mem};"}, {"sha": "a7ad0db99cfe07af98c6de9c8e3d5f314dd0cb90", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -17,7 +17,7 @@ syntax = { path = \"../libsyntax\" }\n rustc_expand = { path = \"../librustc_expand\" }\n arena = { path = \"../libarena\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n-syntax_pos = { path = \"../librustc_span\", package = \"rustc_span\" }\n+rustc_span = { path = \"../librustc_span\" }\n rustc = { path = \"../librustc\" }\n rustc_ast_lowering = { path = \"../librustc_ast_lowering\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "911de5d2174e6d137801299367e8a89063044485", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -31,6 +31,8 @@ use errors::Applicability;\n \n use rustc_expand::base::SyntaxExtension;\n use rustc_expand::expand::AstFragment;\n+use rustc_span::hygiene::{ExpnId, MacroKind};\n+use rustc_span::{Span, DUMMY_SP};\n use syntax::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind, NodeId};\n use syntax::ast::{AssocItem, AssocItemKind, MetaItemKind, StmtKind};\n use syntax::ast::{Ident, Name};\n@@ -40,8 +42,6 @@ use syntax::span_err;\n use syntax::symbol::{kw, sym};\n use syntax::token::{self, Token};\n use syntax::visit::{self, Visitor};\n-use syntax_pos::hygiene::{ExpnId, MacroKind};\n-use syntax_pos::{Span, DUMMY_SP};\n \n use log::debug;\n "}, {"sha": "4f25d55db36104ed2c16be4d6dc0945f6114c48f", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -31,9 +31,9 @@ use errors::pluralize;\n use rustc::util::nodemap::NodeMap;\n use rustc::{lint, ty};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use syntax::ast;\n use syntax::visit::{self, Visitor};\n-use syntax_pos::{MultiSpan, Span, DUMMY_SP};\n \n struct UnusedImport<'a> {\n     use_tree: &'a ast::UseTree,"}, {"sha": "4662440ec31e1427c838da00a54bd44a91e5dd39", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -2,12 +2,12 @@ use log::debug;\n use rustc::hir::def_id::DefIndex;\n use rustc::hir::map::definitions::*;\n use rustc_expand::expand::AstFragment;\n+use rustc_span::hygiene::ExpnId;\n+use rustc_span::Span;\n use syntax::ast::*;\n use syntax::symbol::{kw, sym};\n use syntax::token::{self, Token};\n use syntax::visit;\n-use syntax_pos::hygiene::ExpnId;\n-use syntax_pos::Span;\n \n crate fn collect_definitions(\n     definitions: &mut Definitions,"}, {"sha": "2553ac6208c575fac9769888a09b6fe0bed2649b", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -10,14 +10,14 @@ use rustc::session::Session;\n use rustc::ty::{self, DefIdTree};\n use rustc::util::nodemap::FxHashSet;\n use rustc_feature::BUILTIN_ATTRIBUTES;\n+use rustc_span::hygiene::MacroKind;\n+use rustc_span::{BytePos, MultiSpan, Span};\n use syntax::ast::{self, Ident, Path};\n use syntax::print::pprust;\n use syntax::source_map::SourceMap;\n use syntax::struct_span_err;\n use syntax::symbol::{kw, Symbol};\n use syntax::util::lev_distance::find_best_match_for_name;\n-use syntax_pos::hygiene::MacroKind;\n-use syntax_pos::{BytePos, MultiSpan, Span};\n \n use crate::imports::{ImportDirective, ImportDirectiveSubclass, ImportResolver};\n use crate::path_names_to_string;"}, {"sha": "c79a97f93f07f2cad6cedcf196dbfd839ba563e2", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -23,12 +23,12 @@ use rustc::util::nodemap::FxHashSet;\n use rustc::{bug, span_bug};\n use rustc_data_structures::ptr_key::PtrKey;\n \n+use rustc_span::hygiene::ExpnId;\n+use rustc_span::{MultiSpan, Span};\n use syntax::ast::{Ident, Name, NodeId};\n use syntax::symbol::kw;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::{struct_span_err, unwrap_or};\n-use syntax_pos::hygiene::ExpnId;\n-use syntax_pos::{MultiSpan, Span};\n \n use rustc_error_codes::*;\n "}, {"sha": "a0d59fa4829e85e075be4aa757fbf999995b8e05", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -18,14 +18,14 @@ use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc::hir::TraitCandidate;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc::{bug, lint, span_bug};\n+use rustc_span::Span;\n use smallvec::{smallvec, SmallVec};\n use syntax::ast::*;\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym};\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::visit::{self, FnKind, Visitor};\n use syntax::{unwrap_or, walk_list};\n-use syntax_pos::Span;\n \n use std::collections::BTreeSet;\n use std::mem::replace;"}, {"sha": "5e59efac536476ef226d308a45db10ae99fb0698", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -12,11 +12,11 @@ use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc::hir::PrimTy;\n use rustc::session::config::nightly_options;\n use rustc::util::nodemap::FxHashSet;\n+use rustc_span::hygiene::MacroKind;\n+use rustc_span::Span;\n use syntax::ast::{self, Expr, ExprKind, Ident, NodeId, Path, Ty, TyKind};\n use syntax::symbol::kw;\n use syntax::util::lev_distance::find_best_match_for_name;\n-use syntax_pos::hygiene::MacroKind;\n-use syntax_pos::Span;\n \n use rustc_error_codes::*;\n "}, {"sha": "b1be98834795a3d6cc44ea1e79ac72a096433d80", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -38,6 +38,8 @@ use rustc_metadata::creader::{CStore, CrateLoader};\n \n use errors::{Applicability, DiagnosticBuilder};\n use rustc_expand::base::SyntaxExtension;\n+use rustc_span::hygiene::{ExpnId, ExpnKind, MacroKind, SyntaxContext, Transparency};\n+use rustc_span::{Span, DUMMY_SP};\n use syntax::ast::{self, FloatTy, Ident, IntTy, Name, NodeId, UintTy};\n use syntax::ast::{Crate, CRATE_NODE_ID};\n use syntax::ast::{ItemKind, Path};\n@@ -47,8 +49,6 @@ use syntax::source_map::Spanned;\n use syntax::symbol::{kw, sym};\n use syntax::visit::{self, Visitor};\n use syntax::{struct_span_err, unwrap_or};\n-use syntax_pos::hygiene::{ExpnId, ExpnKind, MacroKind, SyntaxContext, Transparency};\n-use syntax_pos::{Span, DUMMY_SP};\n \n use log::debug;\n "}, {"sha": "1f8573e44f1e1b2bc6aabdc54be012c935e1b41e", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -15,13 +15,13 @@ use errors::{pluralize, Applicability, DiagnosticBuilder};\n use rustc::lint;\n use rustc::session::Session;\n use rustc::util::nodemap::{DefIdMap, FxHashMap, FxHashSet, HirIdMap, HirIdSet};\n+use rustc_span::Span;\n use std::borrow::Cow;\n use std::cell::Cell;\n use std::mem::{replace, take};\n use syntax::ast;\n use syntax::attr;\n use syntax::symbol::{kw, sym};\n-use syntax_pos::Span;\n \n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::{self, GenericParamKind, LifetimeParamKind};"}, {"sha": "0903afeef4da4363773337e089c5648b1e05058e", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -17,18 +17,18 @@ use rustc_expand::base::{self, Indeterminate, InvocationRes};\n use rustc_expand::compile_declarative_macro;\n use rustc_expand::expand::{AstFragment, AstFragmentKind, Invocation, InvocationKind};\n use rustc_feature::is_builtin_attr_name;\n+use rustc_span::hygiene::{self, ExpnData, ExpnId, ExpnKind};\n+use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::{Span, DUMMY_SP};\n use syntax::ast::{self, Ident, NodeId};\n use syntax::attr::{self, StabilityLevel};\n use syntax::edition::Edition;\n use syntax::feature_gate::feature_err;\n use syntax::print::pprust;\n-use syntax_pos::hygiene::{self, ExpnData, ExpnId, ExpnKind};\n-use syntax_pos::symbol::{kw, sym, Symbol};\n-use syntax_pos::{Span, DUMMY_SP};\n \n use rustc_data_structures::sync::Lrc;\n+use rustc_span::hygiene::{AstPass, MacroKind};\n use std::{mem, ptr};\n-use syntax_pos::hygiene::{AstPass, MacroKind};\n \n type Res = def::Res<NodeId>;\n "}, {"sha": "cc31f78c5e9417425bf929e34e1785d80f2aed81", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -16,6 +16,6 @@ rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n rustc_parse = { path = \"../librustc_parse\" }\n serde_json = \"1\"\n syntax = { path = \"../libsyntax\" }\n-syntax_pos = { path = \"../librustc_span\", package = \"rustc_span\" }\n+rustc_span = { path = \"../librustc_span\" }\n rls-data = \"0.19\"\n rls-span = \"0.5\""}, {"sha": "e898b8acfbefcc97c3fb803ddb1d29f7fdd9be96", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -23,14 +23,14 @@ use rustc_data_structures::fx::FxHashSet;\n use std::env;\n use std::path::Path;\n \n+use rustc_span::*;\n use syntax::ast::{self, Attribute, NodeId, PatKind};\n use syntax::print::pprust::{bounds_to_string, generic_params_to_string, ty_to_string};\n use syntax::ptr::P;\n use syntax::source_map::{respan, DUMMY_SP};\n use syntax::token;\n use syntax::visit::{self, Visitor};\n use syntax::walk_list;\n-use syntax_pos::*;\n \n use crate::dumper::{Access, Dumper};\n use crate::sig;"}, {"sha": "bebe5309b4465de897d93d128bf1c6512eb05760", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -26,13 +26,13 @@ use std::fs::File;\n use std::io::BufWriter;\n use std::path::{Path, PathBuf};\n \n+use rustc_span::*;\n use syntax::ast::{self, Attribute, NodeId, PatKind, DUMMY_NODE_ID};\n use syntax::print::pprust;\n use syntax::print::pprust::{param_to_string, ty_to_string};\n use syntax::source_map::Spanned;\n use syntax::util::comments::strip_doc_comment_decoration;\n use syntax::visit::{self, Visitor};\n-use syntax_pos::*;\n \n use dump_visitor::DumpVisitor;\n use span_utils::SpanUtils;"}, {"sha": "f904a0bb9f8066857289be1eeeffd5bf9e049073", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,8 +1,8 @@\n use crate::generated_code;\n use rustc::session::Session;\n use rustc_parse::lexer::{self, StringReader};\n+use rustc_span::*;\n use syntax::token::{self, TokenKind};\n-use syntax_pos::*;\n \n #[derive(Clone)]\n pub struct SpanUtils<'a> {"}, {"sha": "47c23bc4dcf98c4f074ab88106323720cf9a4d16", "filename": "src/librustc_session/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_session%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_session%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2FCargo.toml?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -15,7 +15,7 @@ rustc_feature = { path = \"../librustc_feature\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-syntax_pos = { path = \"../librustc_span\", package = \"rustc_span\" }\n+rustc_span = { path = \"../librustc_span\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n num_cpus = \"1.0\""}, {"sha": "2f06ff95b1923a8eec4de3783c2fcc1b486255cc", "filename": "src/librustc_session/cgu_reuse_tracker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_session%2Fcgu_reuse_tracker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_session%2Fcgu_reuse_tracker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fcgu_reuse_tracker.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -4,8 +4,8 @@\n \n use log::debug;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_span::Span;\n use std::sync::{Arc, Mutex};\n-use syntax_pos::Span;\n \n #[derive(Copy, Clone, Debug, PartialEq, PartialOrd)]\n pub enum CguReuse {"}, {"sha": "164803d92b12775d6c145a9f8b25041fae32006f", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -15,9 +15,9 @@ use rustc_target::spec::{Target, TargetTriple};\n \n use crate::parse::CrateConfig;\n use rustc_feature::UnstableFeatures;\n-use syntax_pos::edition::{Edition, DEFAULT_EDITION, EDITION_NAME_LIST};\n-use syntax_pos::source_map::{FileName, FilePathMapping};\n-use syntax_pos::symbol::{sym, Symbol};\n+use rustc_span::edition::{Edition, DEFAULT_EDITION, EDITION_NAME_LIST};\n+use rustc_span::source_map::{FileName, FilePathMapping};\n+use rustc_span::symbol::{sym, Symbol};\n \n use rustc_errors::emitter::HumanReadableErrorType;\n use rustc_errors::{ColorConfig, FatalError, Handler};\n@@ -1966,12 +1966,12 @@ crate mod dep_tracking {\n     use crate::lint;\n     use crate::utils::NativeLibraryKind;\n     use rustc_feature::UnstableFeatures;\n+    use rustc_span::edition::Edition;\n     use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel, TargetTriple};\n     use std::collections::hash_map::DefaultHasher;\n     use std::collections::BTreeMap;\n     use std::hash::Hash;\n     use std::path::PathBuf;\n-    use syntax_pos::edition::Edition;\n \n     pub trait DepTrackingHash {\n         fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType);"}, {"sha": "0cce7e848fd6066dafdc955254c471fc303f2bc5", "filename": "src/librustc_session/lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_session%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae/src%2Flibrustc_session%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint.rs?ref=70f1d57048d2c73c8c018d0d65ceb0e2ca5d9dae", "patch": "@@ -1,8 +1,8 @@\n pub use self::Level::*;\n use crate::node_id::NodeId;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n-use syntax_pos::edition::Edition;\n-use syntax_pos::{sym, MultiSpan, Symbol};\n+use rustc_span::edition::Edition;\n+use rustc_span::{sym, MultiSpan, Symbol};\n \n /// Setting for how to handle a lint.\n #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]"}]}