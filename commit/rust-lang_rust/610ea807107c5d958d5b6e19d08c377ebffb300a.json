{"sha": "610ea807107c5d958d5b6e19d08c377ebffb300a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMGVhODA3MTA3YzVkOTU4ZDViNmUxOWQwOGMzNzdlYmZmYjMwMGE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-15T12:51:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-15T12:51:50Z"}, "message": "Rollup merge of #68219 - oli-obk:fix_miri, r=RalfJung,wesleywiser\n\nUntangle ZST validation from integer validation and generalize it to all zsts\n\ncc @RalfJung\n\nr? @wesleywiser", "tree": {"sha": "0e2817675e2c2ba69d8311e34b781b58b74e81bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e2817675e2c2ba69d8311e34b781b58b74e81bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/610ea807107c5d958d5b6e19d08c377ebffb300a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeHwrmCRBK7hj4Ov3rIwAAdHIIAKECwPrU/kXMSiTWkSmzmIWn\n8N9BoDvevYUoeOaoBukLGEagFfKogpn0+Mw96tcVxC+w+h68p4b9ILmDybs939W5\nX+cTP4hWGpenRa1q9eHoDAcWUMmmLcFYBSHqcANjRW/lP9kc/WrjgxkBlPCnUDmv\nx8cIPrNPM6uZ/nJrz1ZFVVWzH9Sq8GSMGp0uwzpu7c/2zQR/lP/qu/UvwsfWGL4w\nZgzFukAH+2+yOl8v0hfmjSlDcbC2Ez31naDzytjjThhxr0jZmBhsmE/zt/gb+Kaw\n0/1L2t4YZlz5LM/XoIdk59vkHkDVOvROZRf1WgUVPTQJ+UCb5YVWTqfDIVeUFxk=\n=Dg+K\n-----END PGP SIGNATURE-----\n", "payload": "tree 0e2817675e2c2ba69d8311e34b781b58b74e81bc\nparent 20c49fc79755fbe12fac48485582ce8d9b367175\nparent 0e14b9ff268b6987f935847d7857969a69b7ee7d\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1579092710 +0900\ncommitter GitHub <noreply@github.com> 1579092710 +0900\n\nRollup merge of #68219 - oli-obk:fix_miri, r=RalfJung,wesleywiser\n\nUntangle ZST validation from integer validation and generalize it to all zsts\n\ncc @RalfJung\n\nr? @wesleywiser\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/610ea807107c5d958d5b6e19d08c377ebffb300a", "html_url": "https://github.com/rust-lang/rust/commit/610ea807107c5d958d5b6e19d08c377ebffb300a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/610ea807107c5d958d5b6e19d08c377ebffb300a/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20c49fc79755fbe12fac48485582ce8d9b367175", "url": "https://api.github.com/repos/rust-lang/rust/commits/20c49fc79755fbe12fac48485582ce8d9b367175", "html_url": "https://github.com/rust-lang/rust/commit/20c49fc79755fbe12fac48485582ce8d9b367175"}, {"sha": "0e14b9ff268b6987f935847d7857969a69b7ee7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e14b9ff268b6987f935847d7857969a69b7ee7d", "html_url": "https://github.com/rust-lang/rust/commit/0e14b9ff268b6987f935847d7857969a69b7ee7d"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "6934ec0bdb6aa56aad958961a8fbf5fc9552e0ac", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/610ea807107c5d958d5b6e19d08c377ebffb300a/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ea807107c5d958d5b6e19d08c377ebffb300a/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=610ea807107c5d958d5b6e19d08c377ebffb300a", "patch": "@@ -587,12 +587,6 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                     // padding.\n                     match tys.kind {\n                         ty::Int(..) | ty::Uint(..) | ty::Float(..) => true,\n-                        ty::Tuple(tys) if tys.len() == 0 => true,\n-                        ty::Adt(adt_def, _)\n-                            if adt_def.is_struct() && adt_def.all_fields().next().is_none() =>\n-                        {\n-                            true\n-                        }\n                         _ => false,\n                     }\n                 } =>\n@@ -609,11 +603,6 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                 }\n                 // This is the element type size.\n                 let layout = self.ecx.layout_of(tys)?;\n-                // Empty tuples and fieldless structs (the only ZSTs that allow reaching this code)\n-                // have no data to be checked.\n-                if layout.is_zst() {\n-                    return Ok(());\n-                }\n                 // This is the size in bytes of the whole array.\n                 let size = layout.size * len;\n                 // Size is not 0, get a pointer.\n@@ -656,6 +645,13 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                     }\n                 }\n             }\n+            // Fast path for arrays and slices of ZSTs. We only need to check a single ZST element\n+            // of an array and not all of them, because there's only a single value of a specific\n+            // ZST type, so either validation fails for all elements or none.\n+            ty::Array(tys, ..) | ty::Slice(tys) if self.ecx.layout_of(tys)?.is_zst() => {\n+                // Validate just the first element\n+                self.walk_aggregate(op, fields.take(1))?\n+            }\n             _ => {\n                 self.walk_aggregate(op, fields)? // default handler\n             }"}, {"sha": "70a5b10e9be99543db11ad8a509af3217bdac4f3", "filename": "src/test/ui/consts/huge-values.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/610ea807107c5d958d5b6e19d08c377ebffb300a/src%2Ftest%2Fui%2Fconsts%2Fhuge-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ea807107c5d958d5b6e19d08c377ebffb300a/src%2Ftest%2Fui%2Fconsts%2Fhuge-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fhuge-values.rs?ref=610ea807107c5d958d5b6e19d08c377ebffb300a", "patch": "@@ -1,11 +1,17 @@\n // build-pass\n // ignore-32bit\n \n+// This test is a canary test that will essentially not compile in a reasonable time frame\n+// (so it'll take hours) if any of the optimizations regress. With the optimizations, these compile\n+// in milliseconds just as if the length were set to `1`.\n+\n #[derive(Clone, Copy)]\n struct Foo;\n \n fn main() {\n     let _ = [(); 4_000_000_000];\n     let _ = [0u8; 4_000_000_000];\n     let _ = [Foo; 4_000_000_000];\n+    let _ = [(Foo, (), Foo, ((), Foo, [0; 0])); 4_000_000_000];\n+    let _ = [[0; 0]; 4_000_000_000];\n }"}, {"sha": "c7144f05ec7a4ad264caf48af23621c0c4156c7e", "filename": "src/test/ui/consts/validate_never_arrays.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/610ea807107c5d958d5b6e19d08c377ebffb300a/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ea807107c5d958d5b6e19d08c377ebffb300a/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs?ref=610ea807107c5d958d5b6e19d08c377ebffb300a", "patch": "@@ -1,5 +1,9 @@\n #![feature(const_raw_ptr_deref, never_type)]\n \n-const FOO: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) }; //~ ERROR undefined behavior\n+const _: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) }; //~ ERROR undefined behavior\n+const _: &[!; 0] = unsafe { &*(1_usize as *const [!; 0]) }; // ok\n+const _: &[!] = unsafe { &*(1_usize as *const [!; 0]) }; // ok\n+const _: &[!] = unsafe { &*(1_usize as *const [!; 1]) }; //~ ERROR undefined behavior\n+const _: &[!] = unsafe { &*(1_usize as *const [!; 42]) }; //~ ERROR undefined behavior\n \n fn main() {}"}, {"sha": "cb995b8216f4ec154662d90a6241c0b7edbd7443", "filename": "src/test/ui/consts/validate_never_arrays.stderr", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/610ea807107c5d958d5b6e19d08c377ebffb300a/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/610ea807107c5d958d5b6e19d08c377ebffb300a/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.stderr?ref=610ea807107c5d958d5b6e19d08c377ebffb300a", "patch": "@@ -1,11 +1,27 @@\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/validate_never_arrays.rs:3:1\n    |\n-LL | const FOO: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type at .<deref>\n+LL | const _: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type at .<deref>\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n-error: aborting due to previous error\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/validate_never_arrays.rs:6:1\n+   |\n+LL | const _: &[!] = unsafe { &*(1_usize as *const [!; 1]) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type at .<deref>[0]\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/validate_never_arrays.rs:7:1\n+   |\n+LL | const _: &[!] = unsafe { &*(1_usize as *const [!; 42]) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type at .<deref>[0]\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}]}