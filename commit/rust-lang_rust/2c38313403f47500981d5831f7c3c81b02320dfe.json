{"sha": "2c38313403f47500981d5831f7c3c81b02320dfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMzgzMTM0MDNmNDc1MDA5ODFkNTgzMWY3YzNjODFiMDIzMjBkZmU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-16T18:53:27Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-16T18:53:27Z"}, "message": "Move unimpl! macro to unimpl.rs", "tree": {"sha": "da3ae4b481a5444ddb3d70f72ce07a8d470f7274", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da3ae4b481a5444ddb3d70f72ce07a8d470f7274"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c38313403f47500981d5831f7c3c81b02320dfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c38313403f47500981d5831f7c3c81b02320dfe", "html_url": "https://github.com/rust-lang/rust/commit/2c38313403f47500981d5831f7c3c81b02320dfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c38313403f47500981d5831f7c3c81b02320dfe/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2a8996f886d157904063cca4e3e2082dd27b5e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2a8996f886d157904063cca4e3e2082dd27b5e5", "html_url": "https://github.com/rust-lang/rust/commit/b2a8996f886d157904063cca4e3e2082dd27b5e5"}], "stats": {"total": 86, "additions": 60, "deletions": 26}, "files": [{"sha": "1be7942c84b98bf33ec5a27069c47fa7e75e4576", "filename": "src/base.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c38313403f47500981d5831f7c3c81b02320dfe/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c38313403f47500981d5831f7c3c81b02320dfe/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=2c38313403f47500981d5831f7c3c81b02320dfe", "patch": "@@ -104,8 +104,10 @@ fn trans_fn<'a, 'tcx: 'a>(\n     };\n \n     // Step 6. Codegen function\n-    crate::abi::codegen_fn_prelude(&mut fx, start_ebb);\n-    codegen_fn_content(&mut fx);\n+    with_unimpl_span(fx.mir.span, || {\n+        crate::abi::codegen_fn_prelude(&mut fx, start_ebb);\n+        codegen_fn_content(&mut fx);\n+    });\n \n     // Step 7. Write function to file for debugging\n     let mut writer = crate::pretty_clif::CommentWriter(fx.comments);"}, {"sha": "5b25861838eefe618dc56137d751d32d1fe77ad5", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2c38313403f47500981d5831f7c3c81b02320dfe/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c38313403f47500981d5831f7c3c81b02320dfe/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2c38313403f47500981d5831f7c3c81b02320dfe", "patch": "@@ -2,7 +2,8 @@\n     rustc_private,\n     macro_at_most_once_rep,\n     never_type,\n-    extern_crate_item_prelude\n+    extern_crate_item_prelude,\n+    decl_macro,\n )]\n #![allow(intra_doc_link_resolution_failure)]\n \n@@ -34,7 +35,6 @@ extern crate target_lexicon;\n \n use std::any::Any;\n use std::fs::File;\n-use std::io::Write;\n use std::sync::mpsc;\n \n use syntax::symbol::Symbol;\n@@ -60,14 +60,6 @@ use cranelift_faerie::*;\n use crate::constant::ConstantCx;\n use crate::prelude::*;\n \n-struct NonFatal(pub String);\n-\n-macro_rules! unimpl {\n-    ($($tt:tt)*) => {\n-        panic!(crate::NonFatal(format!($($tt)*)));\n-    };\n-}\n-\n mod abi;\n mod allocator;\n mod analyze;\n@@ -82,6 +74,7 @@ mod main_shim;\n mod metadata;\n mod pretty_clif;\n mod trap;\n+mod unimpl;\n mod vtable;\n \n mod prelude {\n@@ -123,6 +116,7 @@ mod prelude {\n     pub use crate::base::{trans_operand, trans_place};\n     pub use crate::common::*;\n     pub use crate::trap::*;\n+    pub use crate::unimpl::{unimpl, with_unimpl_span};\n     pub use crate::{Caches, CodegenResults, CrateInfo};\n }\n \n@@ -482,21 +476,9 @@ fn codegen_mono_items<'a, 'tcx: 'a>(\n     println!(\"[codegen mono items] start\");\n \n     for (&mono_item, &(_linkage, _vis)) in mono_items {\n-        let res = ::std::panic::catch_unwind(::std::panic::AssertUnwindSafe(|| {\n+        unimpl::try_unimpl(tcx, log, || {\n             base::trans_mono_item(tcx, module, &mut caches, &mut ccx, mono_item);\n-        }));\n-\n-        if let Err(err) = res {\n-            match err.downcast::<NonFatal>() {\n-                Ok(non_fatal) => {\n-                    if cfg!(debug_assertions) {\n-                        writeln!(log.as_mut().unwrap(), \"{}\", &non_fatal.0).unwrap();\n-                    }\n-                    tcx.sess.err(&non_fatal.0)\n-                }\n-                Err(err) => ::std::panic::resume_unwind(err),\n-            }\n-        }\n+        });\n     }\n \n     crate::main_shim::maybe_create_entry_wrapper(tcx, module);"}, {"sha": "771897fa4b0767d2a68bd667ea6d585203468030", "filename": "src/unimpl.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/2c38313403f47500981d5831f7c3c81b02320dfe/src%2Funimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c38313403f47500981d5831f7c3c81b02320dfe/src%2Funimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funimpl.rs?ref=2c38313403f47500981d5831f7c3c81b02320dfe", "patch": "@@ -0,0 +1,50 @@\n+//! The unimpl! macro is defined here. It is used to generate\n+//! a non-fatal error on not yet implemented things.\n+\n+use std::cell::RefCell;\n+use std::fs::File;\n+use std::io::Write;\n+\n+use syntax::source_map::Span;\n+\n+use rustc::ty::TyCtxt;\n+\n+thread_local! {\n+    static SPAN_STACK: RefCell<Vec<Span>> = RefCell::new(vec![]);\n+}\n+\n+// Just public, because of the unimpl macro\n+pub struct NonFatal(pub String);\n+\n+pub macro unimpl($($tt:tt)*) {\n+    panic!(NonFatal(format!($($tt)*)));\n+}\n+\n+pub fn try_unimpl(tcx: TyCtxt, log: &mut Option<File>, f: impl FnOnce()) {\n+    let res = ::std::panic::catch_unwind(::std::panic::AssertUnwindSafe(|| {\n+        f()\n+    }));\n+\n+    if let Err(err) = res {\n+        SPAN_STACK.with(|span_stack| {\n+            match err.downcast::<NonFatal>() {\n+                Ok(non_fatal) => {\n+                    if cfg!(debug_assertions) {\n+                        writeln!(log.as_mut().unwrap(), \"{} at {:?}\", &non_fatal.0, span_stack.borrow()).unwrap();\n+                    }\n+                    tcx.sess.err(&non_fatal.0)\n+                }\n+                Err(err) => ::std::panic::resume_unwind(err),\n+            }\n+            span_stack.borrow_mut().clear();\n+        });\n+    }\n+}\n+\n+pub fn with_unimpl_span(span: Span, f: impl FnOnce()) {\n+    SPAN_STACK.with(|span_stack| {\n+        span_stack.borrow_mut().push(span);\n+        f();\n+        span_stack.borrow_mut().pop();\n+    });\n+}"}]}