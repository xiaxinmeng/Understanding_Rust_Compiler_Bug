{"sha": "17e632d382dfae46e9dfa684db9bddec3e8951a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ZTYzMmQzODJkZmFlNDZlOWRmYTY4NGRiOWJkZGVjM2U4OTUxYTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-05T09:32:54Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-05T09:33:15Z"}, "message": "or_patterns: test default binding modes", "tree": {"sha": "1bf44abb1b1c56e536988e092222605ca459ff33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bf44abb1b1c56e536988e092222605ca459ff33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17e632d382dfae46e9dfa684db9bddec3e8951a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17e632d382dfae46e9dfa684db9bddec3e8951a7", "html_url": "https://github.com/rust-lang/rust/commit/17e632d382dfae46e9dfa684db9bddec3e8951a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17e632d382dfae46e9dfa684db9bddec3e8951a7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29437e55a56c1c1251ae5f7276f3e95dac4b609a", "url": "https://api.github.com/repos/rust-lang/rust/commits/29437e55a56c1c1251ae5f7276f3e95dac4b609a", "html_url": "https://github.com/rust-lang/rust/commit/29437e55a56c1c1251ae5f7276f3e95dac4b609a"}], "stats": {"total": 132, "additions": 132, "deletions": 0}, "files": [{"sha": "3b6047c7be47df460e07fa2373996df13da5a597", "filename": "src/test/ui/or-patterns/or-patterns-default-binding-modes.rs", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/17e632d382dfae46e9dfa684db9bddec3e8951a7/src%2Ftest%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e632d382dfae46e9dfa684db9bddec3e8951a7/src%2Ftest%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs?ref=17e632d382dfae46e9dfa684db9bddec3e8951a7", "patch": "@@ -0,0 +1,132 @@\n+// Test that or-patterns are pass-through with respect to default binding modes.\n+\n+// check-pass\n+\n+#![feature(or_patterns)]\n+#![allow(irrefutable_let_patterns)]\n+\n+fn main() {\n+    // A regression test for a mistake we made at one point:\n+    match &1 {\n+        e @ &(1..=2) | e @ &(3..=4) => {}\n+        _ => {}\n+    }\n+\n+    match &0 {\n+        0 | &1 => {}\n+        _ => {}\n+    }\n+\n+    type R<'a> = &'a Result<u8, u8>;\n+\n+    let res: R<'_> = &Ok(0);\n+\n+    match res {\n+        // Alternatives propagate expected type / binding mode independently.\n+        Ok(mut x) | &Err(mut x) => drop::<u8>(x),\n+    }\n+    match res {\n+        &(Ok(x) | Err(x)) => drop::<u8>(x),\n+    }\n+    match res {\n+        Ok(x) | Err(x) => drop::<&u8>(x),\n+    }\n+    if let Ok(mut x) | &Err(mut x) = res {\n+        drop::<u8>(x);\n+    }\n+    if let &(Ok(x) | Err(x)) = res {\n+        drop::<u8>(x);\n+    }\n+    let Ok(mut x) | &Err(mut x) = res;\n+    drop::<u8>(x);\n+    let &(Ok(x) | Err(x)) = res;\n+    drop::<u8>(x);\n+    let Ok(x) | Err(x) = res;\n+    drop::<&u8>(x);\n+    for Ok(mut x) | &Err(mut x) in std::iter::once(res) {\n+        drop::<u8>(x);\n+    }\n+    for &(Ok(x) | Err(x)) in std::iter::once(res) {\n+        drop::<u8>(x);\n+    }\n+    for Ok(x) | Err(x) in std::iter::once(res) {\n+        drop::<&u8>(x);\n+    }\n+    fn f1((Ok(mut x) | &Err(mut x)): R<'_>) {\n+        drop::<u8>(x);\n+    }\n+    fn f2(&(Ok(x) | Err(x)): R<'_>) {\n+        drop::<u8>(x);\n+    }\n+    fn f3((Ok(x) | Err(x)): R<'_>) {\n+        drop::<&u8>(x);\n+    }\n+\n+    // Wrap inside another type (a product for a simplity with irrefutable contexts).\n+    #[derive(Copy, Clone)]\n+    struct Wrap<T>(T);\n+    let wres = Wrap(res);\n+\n+    match wres {\n+        Wrap(Ok(mut x) | &Err(mut x)) => drop::<u8>(x),\n+    }\n+    match wres {\n+        Wrap(&(Ok(x) | Err(x))) => drop::<u8>(x),\n+    }\n+    match wres {\n+        Wrap(Ok(x) | Err(x)) => drop::<&u8>(x),\n+    }\n+    if let Wrap(Ok(mut x) | &Err(mut x)) = wres {\n+        drop::<u8>(x);\n+    }\n+    if let Wrap(&(Ok(x) | Err(x))) = wres {\n+        drop::<u8>(x);\n+    }\n+    if let Wrap(Ok(x) | Err(x)) = wres {\n+        drop::<&u8>(x);\n+    }\n+    let Wrap(Ok(mut x) | &Err(mut x)) = wres;\n+    drop::<u8>(x);\n+    let Wrap(&(Ok(x) | Err(x))) = wres;\n+    drop::<u8>(x);\n+    let Wrap(Ok(x) | Err(x)) = wres;\n+    drop::<&u8>(x);\n+    for Wrap(Ok(mut x) | &Err(mut x)) in std::iter::once(wres) {\n+        drop::<u8>(x);\n+    }\n+    for Wrap(&(Ok(x) | Err(x))) in std::iter::once(wres) {\n+        drop::<u8>(x);\n+    }\n+    for Wrap(Ok(x) | Err(x)) in std::iter::once(wres) {\n+        drop::<&u8>(x);\n+    }\n+    fn fw1(Wrap(Ok(mut x) | &Err(mut x)): Wrap<R<'_>>) {\n+        drop::<u8>(x);\n+    }\n+    fn fw2(Wrap(&(Ok(x) | Err(x))): Wrap<R<'_>>) {\n+        drop::<u8>(x);\n+    }\n+    fn fw3(Wrap(Ok(x) | Err(x)): Wrap<R<'_>>) {\n+        drop::<&u8>(x);\n+    }\n+\n+    // Nest some more:\n+\n+    enum Tri<P> {\n+        A(P),\n+        B(P),\n+        C(P),\n+    }\n+\n+    let tri = &Tri::A(&Ok(0));\n+    let Tri::A(Ok(mut x) | Err(mut x))\n+    | Tri::B(&Ok(mut x) | Err(mut x))\n+    | &Tri::C(Ok(mut x) | Err(mut x)) = tri;\n+    drop::<u8>(x);\n+\n+    match tri {\n+        Tri::A(Ok(mut x) | Err(mut x))\n+        | Tri::B(&Ok(mut x) | Err(mut x))\n+        | &Tri::C(Ok(mut x) | Err(mut x)) => drop::<u8>(x),\n+    }\n+}"}]}