{"sha": "23bbd65d968ef385fa7a7cd90ea8252bd78081b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYmJkNjVkOTY4ZWYzODVmYTdhN2NkOTBlYTgyNTJiZDc4MDgxYjE=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-25T19:48:21Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-23T13:58:34Z"}, "message": "Remove unstable `--pretty` flag\n\nIt doesn't do anything `--unpretty` doesn't, and due to a bug, also\ndidn't show up in `--help`. I don't think there's any reason to keep it\naround, I haven't seen anyone using it.", "tree": {"sha": "e2044f67757951f57492ed4bcb347380f10734da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2044f67757951f57492ed4bcb347380f10734da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23bbd65d968ef385fa7a7cd90ea8252bd78081b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23bbd65d968ef385fa7a7cd90ea8252bd78081b1", "html_url": "https://github.com/rust-lang/rust/commit/23bbd65d968ef385fa7a7cd90ea8252bd78081b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23bbd65d968ef385fa7a7cd90ea8252bd78081b1/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f4afdf0255600306bf67432da722c7b5d2cbf82", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f4afdf0255600306bf67432da722c7b5d2cbf82", "html_url": "https://github.com/rust-lang/rust/commit/7f4afdf0255600306bf67432da722c7b5d2cbf82"}], "stats": {"total": 134, "additions": 47, "deletions": 87}, "files": [{"sha": "b63529aee905610f80e6c08d0b1da50287a3b7d6", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 40, "deletions": 79, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/23bbd65d968ef385fa7a7cd90ea8252bd78081b1/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bbd65d968ef385fa7a7cd90ea8252bd78081b1/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=23bbd65d968ef385fa7a7cd90ea8252bd78081b1", "patch": "@@ -1125,15 +1125,6 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n                                  never  = never colorize output\",\n             \"auto|always|never\",\n         ),\n-        opt::opt(\n-            \"\",\n-            \"pretty\",\n-            \"Pretty-print the input instead of compiling;\n-                  valid types are: `normal` (un-annotated source),\n-                  `expanded` (crates expanded), or\n-                  `expanded,identified` (fully parenthesized, AST nodes with IDs).\",\n-            \"TYPE\",\n-        ),\n         opt::multi_s(\n             \"\",\n             \"remap-path-prefix\",\n@@ -1969,7 +1960,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let remap_path_prefix = parse_remap_path_prefix(matches, error_format);\n \n-    let pretty = parse_pretty(matches, &debugging_opts, error_format);\n+    let pretty = parse_pretty(&debugging_opts, error_format);\n \n     if !debugging_opts.unstable_options\n         && !target_triple.triple().contains(\"apple\")\n@@ -2017,69 +2008,39 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     }\n }\n \n-fn parse_pretty(\n-    matches: &getopts::Matches,\n-    debugging_opts: &DebuggingOptions,\n-    efmt: ErrorOutputType,\n-) -> Option<PpMode> {\n-    fn parse_pretty_inner(efmt: ErrorOutputType, name: &str, extended: bool) -> PpMode {\n-        use PpMode::*;\n-        let first = match (name, extended) {\n-            (\"normal\", _) => Source(PpSourceMode::Normal),\n-            (\"identified\", _) => Source(PpSourceMode::Identified),\n-            (\"everybody_loops\", true) => Source(PpSourceMode::EveryBodyLoops),\n-            (\"expanded\", _) => Source(PpSourceMode::Expanded),\n-            (\"expanded,identified\", _) => Source(PpSourceMode::ExpandedIdentified),\n-            (\"expanded,hygiene\", _) => Source(PpSourceMode::ExpandedHygiene),\n-            (\"ast-tree\", true) => AstTree(PpAstTreeMode::Normal),\n-            (\"ast-tree,expanded\", true) => AstTree(PpAstTreeMode::Expanded),\n-            (\"hir\", true) => Hir(PpHirMode::Normal),\n-            (\"hir,identified\", true) => Hir(PpHirMode::Identified),\n-            (\"hir,typed\", true) => Hir(PpHirMode::Typed),\n-            (\"hir-tree\", true) => HirTree,\n-            (\"thir-tree\", true) => ThirTree,\n-            (\"mir\", true) => Mir,\n-            (\"mir-cfg\", true) => MirCFG,\n-            _ => {\n-                if extended {\n-                    early_error(\n-                        efmt,\n-                        &format!(\n-                            \"argument to `unpretty` must be one of `normal`, \\\n-                                        `expanded`, `identified`, `expanded,identified`, \\\n-                                        `expanded,hygiene`, `everybody_loops`, \\\n-                                        `ast-tree`, `ast-tree,expanded`, `hir`, `hir,identified`, \\\n-                                        `hir,typed`, `hir-tree`, `mir` or `mir-cfg`; got {}\",\n-                            name\n-                        ),\n-                    );\n-                } else {\n-                    early_error(\n-                        efmt,\n-                        &format!(\n-                            \"argument to `pretty` must be one of `normal`, \\\n-                                        `expanded`, `identified`, or `expanded,identified`; got {}\",\n-                            name\n-                        ),\n-                    );\n-                }\n-            }\n-        };\n-        tracing::debug!(\"got unpretty option: {:?}\", first);\n-        first\n-    }\n-\n-    if debugging_opts.unstable_options {\n-        if let Some(a) = matches.opt_default(\"pretty\", \"normal\") {\n-            // stable pretty-print variants only\n-            return Some(parse_pretty_inner(efmt, &a, false));\n-        }\n-    }\n-\n-    debugging_opts.unpretty.as_ref().map(|a| {\n-        // extended with unstable pretty-print variants\n-        parse_pretty_inner(efmt, &a, true)\n-    })\n+fn parse_pretty(debugging_opts: &DebuggingOptions, efmt: ErrorOutputType) -> Option<PpMode> {\n+    use PpMode::*;\n+\n+    let first = match debugging_opts.unpretty.as_deref()? {\n+        \"normal\" => Source(PpSourceMode::Normal),\n+        \"identified\" => Source(PpSourceMode::Identified),\n+        \"everybody_loops\" => Source(PpSourceMode::EveryBodyLoops),\n+        \"expanded\" => Source(PpSourceMode::Expanded),\n+        \"expanded,identified\" => Source(PpSourceMode::ExpandedIdentified),\n+        \"expanded,hygiene\" => Source(PpSourceMode::ExpandedHygiene),\n+        \"ast-tree\" => AstTree(PpAstTreeMode::Normal),\n+        \"ast-tree,expanded\" => AstTree(PpAstTreeMode::Expanded),\n+        \"hir\" => Hir(PpHirMode::Normal),\n+        \"hir,identified\" => Hir(PpHirMode::Identified),\n+        \"hir,typed\" => Hir(PpHirMode::Typed),\n+        \"hir-tree\" => HirTree,\n+        \"thir-tree\" => ThirTree,\n+        \"mir\" => Mir,\n+        \"mir-cfg\" => MirCFG,\n+        name => early_error(\n+            efmt,\n+            &format!(\n+                \"argument to `unpretty` must be one of `normal`, \\\n+                            `expanded`, `identified`, `expanded,identified`, \\\n+                            `expanded,hygiene`, `everybody_loops`, \\\n+                            `ast-tree`, `ast-tree,expanded`, `hir`, `hir,identified`, \\\n+                            `hir,typed`, `hir-tree`, `mir` or `mir-cfg`; got {}\",\n+                name\n+            ),\n+        ),\n+    };\n+    tracing::debug!(\"got unpretty option: {:?}\", first);\n+    Some(first)\n }\n \n pub fn make_crate_type_option() -> RustcOptGroup {\n@@ -2187,17 +2148,17 @@ impl fmt::Display for CrateType {\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n pub enum PpSourceMode {\n-    /// `--pretty=normal`\n+    /// `-Zunpretty=normal`\n     Normal,\n     /// `-Zunpretty=everybody_loops`\n     EveryBodyLoops,\n-    /// `--pretty=expanded`\n+    /// `-Zunpretty=expanded`\n     Expanded,\n-    /// `--pretty=identified`\n+    /// `-Zunpretty=identified`\n     Identified,\n-    /// `--pretty=expanded,identified`\n+    /// `-Zunpretty=expanded,identified`\n     ExpandedIdentified,\n-    /// `--pretty=expanded,hygiene`\n+    /// `-Zunpretty=expanded,hygiene`\n     ExpandedHygiene,\n }\n \n@@ -2222,7 +2183,7 @@ pub enum PpHirMode {\n #[derive(Copy, Clone, PartialEq, Debug)]\n pub enum PpMode {\n     /// Options that print the source code, i.e.\n-    /// `--pretty` and `-Zunpretty=everybody_loops`\n+    /// `-Zunpretty=normal` and `-Zunpretty=everybody_loops`\n     Source(PpSourceMode),\n     AstTree(PpAstTreeMode),\n     /// Options that print the HIR, i.e. `-Zunpretty=hir`"}, {"sha": "8eb81e6f10c2369a87463d3d83626485d66caadb", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23bbd65d968ef385fa7a7cd90ea8252bd78081b1/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bbd65d968ef385fa7a7cd90ea8252bd78081b1/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=23bbd65d968ef385fa7a7cd90ea8252bd78081b1", "patch": "@@ -1189,7 +1189,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"take the brakes off const evaluation. NOTE: this is unsound (default: no)\"),\n     unpretty: Option<String> = (None, parse_unpretty, [UNTRACKED],\n         \"present the input source, unstable (and less-pretty) variants;\n-        valid types are any of the types for `--pretty`, as well as:\n+        `normal`, `identified`,\n         `expanded`, `expanded,identified`,\n         `expanded,hygiene` (with internal representations),\n         `everybody_loops` (all function bodies replaced with `loop {}`),"}, {"sha": "213fe1637c177e9771550d96530c49063a11ddb1", "filename": "src/test/pretty/block-comment-wchar.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23bbd65d968ef385fa7a7cd90ea8252bd78081b1/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "raw_url": "https://github.com/rust-lang/rust/raw/23bbd65d968ef385fa7a7cd90ea8252bd78081b1/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp?ref=23bbd65d968ef385fa7a7cd90ea8252bd78081b1", "patch": "@@ -1,6 +1,6 @@\n // This is meant as a test case for Issue 3961.\n //\n-// Test via: rustc --pretty normal src/test/pretty/block-comment-wchar.rs\n+// Test via: rustc -Zunpretty normal src/test/pretty/block-comment-wchar.rs\n // ignore-tidy-cr\n // ignore-tidy-tab\n // pp-exact:block-comment-wchar.pp"}, {"sha": "ed82cbbd8cf872f6216083f7922b08baae174f11", "filename": "src/test/pretty/block-comment-wchar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23bbd65d968ef385fa7a7cd90ea8252bd78081b1/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bbd65d968ef385fa7a7cd90ea8252bd78081b1/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs?ref=23bbd65d968ef385fa7a7cd90ea8252bd78081b1", "patch": "@@ -1,6 +1,6 @@\n // This is meant as a test case for Issue 3961.\n //\n-// Test via: rustc --pretty normal src/test/pretty/block-comment-wchar.rs\n+// Test via: rustc -Zunpretty normal src/test/pretty/block-comment-wchar.rs\n // ignore-tidy-cr\n // ignore-tidy-tab\n // pp-exact:block-comment-wchar.pp"}, {"sha": "e721c5afdd7bc03901a6bd5baab46592172f411e", "filename": "src/test/run-make-fulldeps/pretty-expanded/Makefile", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23bbd65d968ef385fa7a7cd90ea8252bd78081b1/src%2Ftest%2Frun-make-fulldeps%2Fpretty-expanded%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/23bbd65d968ef385fa7a7cd90ea8252bd78081b1/src%2Ftest%2Frun-make-fulldeps%2Fpretty-expanded%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpretty-expanded%2FMakefile?ref=23bbd65d968ef385fa7a7cd90ea8252bd78081b1", "patch": "@@ -1,5 +1,4 @@\n -include ../tools.mk\n \n all:\n-\t$(RUSTC) -o $(TMPDIR)/input.expanded.rs -Z unstable-options \\\n-\t\t--pretty=expanded input.rs\n+\t$(RUSTC) -o $(TMPDIR)/input.expanded.rs -Zunpretty=expanded input.rs"}, {"sha": "b224c52fcadde215ab1b23b9e46bfeeb64d6e73c", "filename": "src/test/run-make-fulldeps/pretty-print-to-file/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23bbd65d968ef385fa7a7cd90ea8252bd78081b1/src%2Ftest%2Frun-make-fulldeps%2Fpretty-print-to-file%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/23bbd65d968ef385fa7a7cd90ea8252bd78081b1/src%2Ftest%2Frun-make-fulldeps%2Fpretty-print-to-file%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpretty-print-to-file%2FMakefile?ref=23bbd65d968ef385fa7a7cd90ea8252bd78081b1", "patch": "@@ -1,5 +1,5 @@\n -include ../tools.mk\n \n all:\n-\t$(RUSTC) -o $(TMPDIR)/input.out --pretty=normal -Z unstable-options input.rs\n+\t$(RUSTC) -o $(TMPDIR)/input.out -Zunpretty=normal input.rs\n \tdiff -u $(TMPDIR)/input.out input.pp"}, {"sha": "505a2d2f79f5a6e643ace60975d4eb67f4d4d71f", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23bbd65d968ef385fa7a7cd90ea8252bd78081b1/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bbd65d968ef385fa7a7cd90ea8252bd78081b1/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=23bbd65d968ef385fa7a7cd90ea8252bd78081b1", "patch": "@@ -306,7 +306,7 @@ pub struct TestProps {\n     // a proc-macro and needs `#![crate_type = \"proc-macro\"]`. This ensures\n     // that the aux file is compiled as a `proc-macro` and not as a `dylib`.\n     pub no_prefer_dynamic: bool,\n-    // Run --pretty expanded when running pretty printing tests\n+    // Run -Zunpretty expanded when running pretty printing tests\n     pub pretty_expanded: bool,\n     // Which pretty mode are we testing with, default to 'normal'\n     pub pretty_mode: String,"}, {"sha": "41de46a43b067e66e0ad1773bb18be810ee0ed20", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23bbd65d968ef385fa7a7cd90ea8252bd78081b1/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bbd65d968ef385fa7a7cd90ea8252bd78081b1/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=23bbd65d968ef385fa7a7cd90ea8252bd78081b1", "patch": "@@ -599,7 +599,7 @@ impl<'test> TestCx<'test> {\n             return;\n         }\n \n-        // additionally, run `--pretty expanded` and try to build it.\n+        // additionally, run `-Zunpretty=expanded` and try to build it.\n         let proc_res = self.print_source(ReadFrom::Path, \"expanded\");\n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"pretty-printing (expanded) failed\", &proc_res);"}]}