{"sha": "836784f02be6c05df0a15c22a3c63cac033b5d29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNjc4NGYwMmJlNmMwNWRmMGExNWMyMmEzYzYzY2FjMDMzYjVkMjk=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-30T11:03:28Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-30T11:03:28Z"}, "message": "Fix move_item test fixture indentations", "tree": {"sha": "8e2f9b593d57dd8bd5a7aadd9cb58a1b2ec1f6c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e2f9b593d57dd8bd5a7aadd9cb58a1b2ec1f6c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/836784f02be6c05df0a15c22a3c63cac033b5d29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/836784f02be6c05df0a15c22a3c63cac033b5d29", "html_url": "https://github.com/rust-lang/rust/commit/836784f02be6c05df0a15c22a3c63cac033b5d29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/836784f02be6c05df0a15c22a3c63cac033b5d29/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4de447b293d5c6d7ad00196dc8409d29575a8c86", "url": "https://api.github.com/repos/rust-lang/rust/commits/4de447b293d5c6d7ad00196dc8409d29575a8c86", "html_url": "https://github.com/rust-lang/rust/commit/4de447b293d5c6d7ad00196dc8409d29575a8c86"}], "stats": {"total": 352, "additions": 176, "deletions": 176}, "files": [{"sha": "f053580a56bb5d5c0bbb684c9d59443196f77d9c", "filename": "crates/ide/src/move_item.rs", "status": "modified", "additions": 176, "deletions": 176, "changes": 352, "blob_url": "https://github.com/rust-lang/rust/blob/836784f02be6c05df0a15c22a3c63cac033b5d29/crates%2Fide%2Fsrc%2Fmove_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836784f02be6c05df0a15c22a3c63cac033b5d29/crates%2Fide%2Fsrc%2Fmove_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmove_item.rs?ref=836784f02be6c05df0a15c22a3c63cac033b5d29", "patch": "@@ -203,7 +203,7 @@ fn main() {\n         }\n     };\n }\n-            \"#,\n+\"#,\n             expect![[r#\"\n                 fn main() {\n                     match true {\n@@ -234,7 +234,7 @@ fn main() {\n         }\n     };\n }\n-            \"#,\n+\"#,\n             expect![[r#\"\n                 fn main() {\n                     match true {\n@@ -265,18 +265,18 @@ fn main() {\n         }\n     };\n }\n-            \"#,\n+\"#,\n             expect![[r#\"\n-fn main() {\n-    match true {\n-        true => {\n-            println!(\"Hello, world\");\n-        },\n-        false => {\n-            println!(\"Test\");\n-        }\n-    };\n-}\n+                fn main() {\n+                    match true {\n+                        true => {\n+                            println!(\"Hello, world\");\n+                        },\n+                        false => {\n+                            println!(\"Test\");\n+                        }\n+                    };\n+                }\n             \"#]],\n             Direction::Up,\n         );\n@@ -290,12 +290,12 @@ fn main() {\n     let test = 123;\n     let test2$0$0 = 456;\n }\n-            \"#,\n+\"#,\n             expect![[r#\"\n-fn main() {\n-    let test2$0 = 456;\n-    let test = 123;\n-}\n+                fn main() {\n+                    let test2$0 = 456;\n+                    let test = 123;\n+                }\n             \"#]],\n             Direction::Up,\n         );\n@@ -309,12 +309,12 @@ fn main() {\n     println!(\"Hello, world\");\n     println!(\"All I want to say is...\");$0$0\n }\n-            \"#,\n+\"#,\n             expect![[r#\"\n-fn main() {\n-    println!(\"All I want to say is...\");$0\n-    println!(\"Hello, world\");\n-}\n+                fn main() {\n+                    println!(\"All I want to say is...\");$0\n+                    println!(\"Hello, world\");\n+                }\n             \"#]],\n             Direction::Up,\n         );\n@@ -327,15 +327,15 @@ fn main() {\n         println!(\"Test\");\n     }$0$0\n }\n-            \"#,\n+\"#,\n             expect![[r#\"\n-fn main() {\n-    if true {\n-        println!(\"Test\");\n-    }$0\n+                fn main() {\n+                    if true {\n+                        println!(\"Test\");\n+                    }$0\n \n-    println!(\"Hello, world\");\n-}\n+                    println!(\"Hello, world\");\n+                }\n             \"#]],\n             Direction::Up,\n         );\n@@ -348,15 +348,15 @@ fn main() {\n         println!(\"Test\");\n     }$0$0\n }\n-            \"#,\n+\"#,\n             expect![[r#\"\n-fn main() {\n-    for i in 0..10 {\n-        println!(\"Test\");\n-    }$0\n+                fn main() {\n+                    for i in 0..10 {\n+                        println!(\"Test\");\n+                    }$0\n \n-    println!(\"Hello, world\");\n-}\n+                    println!(\"Hello, world\");\n+                }\n             \"#]],\n             Direction::Up,\n         );\n@@ -369,15 +369,15 @@ fn main() {\n         println!(\"Test\");\n     }$0$0\n }\n-            \"#,\n+\"#,\n             expect![[r#\"\n-fn main() {\n-    loop {\n-        println!(\"Test\");\n-    }$0\n+                fn main() {\n+                    loop {\n+                        println!(\"Test\");\n+                    }$0\n \n-    println!(\"Hello, world\");\n-}\n+                    println!(\"Hello, world\");\n+                }\n             \"#]],\n             Direction::Up,\n         );\n@@ -390,15 +390,15 @@ fn main() {\n         println!(\"Test\");\n     }$0$0\n }\n-            \"#,\n+\"#,\n             expect![[r#\"\n-fn main() {\n-    while true {\n-        println!(\"Test\");\n-    }$0\n+                fn main() {\n+                    while true {\n+                        println!(\"Test\");\n+                    }$0\n \n-    println!(\"Hello, world\");\n-}\n+                    println!(\"Hello, world\");\n+                }\n             \"#]],\n             Direction::Up,\n         );\n@@ -409,13 +409,13 @@ fn main() {\n \n     return 123;$0$0\n }\n-            \"#,\n+\"#,\n             expect![[r#\"\n-fn main() {\n-    return 123;$0\n+                fn main() {\n+                    return 123;$0\n \n-    println!(\"Hello, world\");\n-}\n+                    println!(\"Hello, world\");\n+                }\n             \"#]],\n             Direction::Up,\n         );\n@@ -429,12 +429,12 @@ fn main() {\n     println!(\"All I want to say is...\");$0$0\n     println!(\"Hello, world\");\n }\n-            \"#,\n+\"#,\n             expect![[r#\"\n-fn main() {\n-    println!(\"All I want to say is...\");\n-    println!(\"Hello, world\");\n-}\n+                fn main() {\n+                    println!(\"All I want to say is...\");\n+                    println!(\"Hello, world\");\n+                }\n             \"#]],\n             Direction::Up,\n         );\n@@ -447,11 +447,11 @@ fn main() {\n fn main() {}\n \n fn foo() {}$0$0\n-            \"#,\n+\"#,\n             expect![[r#\"\n-fn foo() {}$0\n+                fn foo() {}$0\n \n-fn main() {}\n+                fn main() {}\n             \"#]],\n             Direction::Up,\n         );\n@@ -466,13 +466,13 @@ struct Yay;\n trait Wow {}\n \n impl Wow for Yay $0$0{}\n-            \"#,\n+\"#,\n             expect![[r#\"\n-struct Yay;\n+                struct Yay;\n \n-impl Wow for Yay $0{}\n+                impl Wow for Yay $0{}\n \n-trait Wow {}\n+                trait Wow {}\n             \"#]],\n             Direction::Up,\n         );\n@@ -484,10 +484,10 @@ trait Wow {}\n             r#\"\n use std::vec::Vec;\n use std::collections::HashMap$0$0;\n-            \"#,\n+\"#,\n             expect![[r#\"\n-use std::collections::HashMap$0;\n-use std::vec::Vec;\n+                use std::collections::HashMap$0;\n+                use std::vec::Vec;\n             \"#]],\n             Direction::Up,\n         );\n@@ -505,16 +505,16 @@ fn main() {\n         _ => {}\n     };$0\n }\n-            \"#,\n+\"#,\n             expect![[r#\"\n-fn main() {\n-    match test {\n-        456 => {},\n-        _ => {}\n-    };\n+                fn main() {\n+                    match test {\n+                        456 => {},\n+                        _ => {}\n+                    };\n \n-    let test = 123;\n-}\n+                    let test = 123;\n+                }\n             \"#]],\n             Direction::Up,\n         );\n@@ -529,22 +529,22 @@ fn test(one: i32, two$0$0: u32) {}\n fn main() {\n     test(123, 456);\n }\n-            \"#,\n+\"#,\n             expect![[r#\"\n-fn test(two$0: u32, one: i32) {}\n+                fn test(two$0: u32, one: i32) {}\n \n-fn main() {\n-    test(123, 456);\n-}\n+                fn main() {\n+                    test(123, 456);\n+                }\n             \"#]],\n             Direction::Up,\n         );\n         check(\n             r#\"\n fn f($0$0arg: u8, arg2: u16) {}\n-            \"#,\n+\"#,\n             expect![[r#\"\n-fn f(arg2: u16, $0arg: u8) {}\n+                fn f(arg2: u16, $0arg: u8) {}\n             \"#]],\n             Direction::Down,\n         );\n@@ -559,13 +559,13 @@ fn test(one: i32, two: u32) {}\n fn main() {\n     test(123, 456$0$0);\n }\n-            \"#,\n+\"#,\n             expect![[r#\"\n-fn test(one: i32, two: u32) {}\n+                fn test(one: i32, two: u32) {}\n \n-fn main() {\n-    test(456$0, 123);\n-}\n+                fn main() {\n+                    test(456$0, 123);\n+                }\n             \"#]],\n             Direction::Up,\n         );\n@@ -580,13 +580,13 @@ fn test(one: i32, two: u32) {}\n fn main() {\n     test(123$0$0, 456);\n }\n-            \"#,\n+\"#,\n             expect![[r#\"\n-fn test(one: i32, two: u32) {}\n+                fn test(one: i32, two: u32) {}\n \n-fn main() {\n-    test(456, 123$0);\n-}\n+                fn main() {\n+                    test(456, 123$0);\n+                }\n             \"#]],\n             Direction::Down,\n         );\n@@ -601,13 +601,13 @@ fn test(one: i32, two: u32) {}\n fn main() {\n     test(123$0$0, 456);\n }\n-            \"#,\n+\"#,\n             expect![[r#\"\n-fn test(one: i32, two: u32) {}\n+                fn test(one: i32, two: u32) {}\n \n-fn main() {\n-    test(123, 456);\n-}\n+                fn main() {\n+                    test(123, 456);\n+                }\n             \"#]],\n             Direction::Up,\n         );\n@@ -620,11 +620,11 @@ fn main() {\n struct Test<A, B$0$0>(A, B);\n \n fn main() {}\n-            \"#,\n+\"#,\n             expect![[r#\"\n-struct Test<B$0, A>(A, B);\n+                struct Test<B$0, A>(A, B);\n \n-fn main() {}\n+                fn main() {}\n             \"#]],\n             Direction::Up,\n         );\n@@ -639,13 +639,13 @@ struct Test<A, B>(A, B);\n fn main() {\n     let t = Test::<i32, &str$0$0>(123, \"yay\");\n }\n-            \"#,\n+\"#,\n             expect![[r#\"\n-struct Test<A, B>(A, B);\n+                struct Test<A, B>(A, B);\n \n-fn main() {\n-    let t = Test::<&str$0, i32>(123, \"yay\");\n-}\n+                fn main() {\n+                    let t = Test::<&str$0, i32>(123, \"yay\");\n+                }\n             \"#]],\n             Direction::Up,\n         );\n@@ -661,14 +661,14 @@ enum Hello {\n }\n \n fn main() {}\n-            \"#,\n+\"#,\n             expect![[r#\"\n-enum Hello {\n-    Two$0,\n-    One\n-}\n+                enum Hello {\n+                    Two$0,\n+                    One\n+                }\n \n-fn main() {}\n+                fn main() {}\n             \"#]],\n             Direction::Up,\n         );\n@@ -685,15 +685,15 @@ trait Two {}\n fn test<T: One + Two$0$0>(t: T) {}\n \n fn main() {}\n-            \"#,\n+\"#,\n             expect![[r#\"\n-trait One {}\n+                trait One {}\n \n-trait Two {}\n+                trait Two {}\n \n-fn test<T: Two$0 + One>(t: T) {}\n+                fn test<T: Two$0 + One>(t: T) {}\n \n-fn main() {}\n+                fn main() {}\n             \"#]],\n             Direction::Up,\n         );\n@@ -722,27 +722,27 @@ impl Yay for Test {\n         println!(\"Mmmm\");\n     }\n }\n-            \"#,\n+\"#,\n             expect![[r#\"\n-struct Test;\n+                struct Test;\n \n-trait Yay {\n-    type One;\n+                trait Yay {\n+                    type One;\n \n-    type Two;\n+                    type Two;\n \n-    fn inner();\n-}\n+                    fn inner();\n+                }\n \n-impl Yay for Test {\n-    type One = i32;\n+                impl Yay for Test {\n+                    type One = i32;\n \n-    fn inner() {$0\n-        println!(\"Mmmm\");\n-    }\n+                    fn inner() {$0\n+                        println!(\"Mmmm\");\n+                    }\n \n-    type Two = u32;\n-}\n+                    type Two = u32;\n+                }\n             \"#]],\n             Direction::Up,\n         );\n@@ -761,17 +761,17 @@ fn test() {\n         fn inner() {}\n     }\n }\n-            \"#,\n+\"#,\n             expect![[r#\"\n-fn test() {\n-    mod hi {$0\n-        fn inner() {}\n-    }\n-\n-    mod hello {\n-        fn inner() {}\n-    }\n-}\n+                fn test() {\n+                    mod hi {$0\n+                        fn inner() {}\n+                    }\n+\n+                    mod hello {\n+                        fn inner() {}\n+                    }\n+                }\n             \"#]],\n             Direction::Up,\n         );\n@@ -788,16 +788,16 @@ enum FooBar {\n }\n \n fn main() {}\n-            \"#,\n-            expect![[r#\"\n-fn main() {}\n-\n-$0#[derive(Debug)]\n-enum FooBar {\n-    Foo,\n-    Bar,\n-}\n-            \"#]],\n+\"#,\n+            expect![[r##\"\n+                fn main() {}\n+\n+                $0#[derive(Debug)]\n+                enum FooBar {\n+                    Foo,\n+                    Bar,\n+                }\n+            \"##]],\n             Direction::Down,\n         );\n         check(\n@@ -808,14 +808,14 @@ $0$0enum FooBar {\n }\n \n fn main() {}\n-            \"#,\n+\"#,\n             expect![[r#\"\n-fn main() {}\n+                fn main() {}\n \n-$0enum FooBar {\n-    Foo,\n-    Bar,\n-}\n+                $0enum FooBar {\n+                    Foo,\n+                    Bar,\n+                }\n             \"#]],\n             Direction::Down,\n         );\n@@ -828,15 +828,15 @@ trait SomeTrait {}\n $0$0impl SomeTrait for Test {}\n \n fn main() {}\n-            \"#,\n+\"#,\n             expect![[r#\"\n-struct Test;\n+                struct Test;\n \n-$0impl SomeTrait for Test {}\n+                $0impl SomeTrait for Test {}\n \n-trait SomeTrait {}\n+                trait SomeTrait {}\n \n-fn main() {}\n+                fn main() {}\n             \"#]],\n             Direction::Up,\n         );\n@@ -852,14 +852,14 @@ enum FooBar {\n }$0$0\n \n fn main() {}\n-            \"#,\n+\"#,\n             expect![[r#\"\n-fn main() {}\n+                fn main() {}\n \n-enum FooBar {\n-    Foo,\n-    Bar,\n-}$0\n+                enum FooBar {\n+                    Foo,\n+                    Bar,\n+                }$0\n             \"#]],\n             Direction::Down,\n         );\n@@ -872,15 +872,15 @@ trait SomeTrait {}\n impl SomeTrait for Test {}$0$0\n \n fn main() {}\n-            \"#,\n+\"#,\n             expect![[r#\"\n-struct Test;\n+                struct Test;\n \n-impl SomeTrait for Test {}$0\n+                impl SomeTrait for Test {}$0\n \n-trait SomeTrait {}\n+                trait SomeTrait {}\n \n-fn main() {}\n+                fn main() {}\n             \"#]],\n             Direction::Up,\n         );"}]}