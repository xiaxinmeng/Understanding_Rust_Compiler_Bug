{"sha": "46a662ecb21eac21bd274bc23e5faf9cf51790be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YTY2MmVjYjIxZWFjMjFiZDI3NGJjMjNlNWZhZjljZjUxNzkwYmU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-16T05:45:13Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-16T09:07:42Z"}, "message": "rustdoc: Build mod and fn nodes from the AST", "tree": {"sha": "3cdd7cb5c32fa3e8e3f0d85f7bc23b8367039f64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cdd7cb5c32fa3e8e3f0d85f7bc23b8367039f64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46a662ecb21eac21bd274bc23e5faf9cf51790be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46a662ecb21eac21bd274bc23e5faf9cf51790be", "html_url": "https://github.com/rust-lang/rust/commit/46a662ecb21eac21bd274bc23e5faf9cf51790be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46a662ecb21eac21bd274bc23e5faf9cf51790be/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9cd983f365cdc64d1a904580455794a47676fb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9cd983f365cdc64d1a904580455794a47676fb6", "html_url": "https://github.com/rust-lang/rust/commit/b9cd983f365cdc64d1a904580455794a47676fb6"}], "stats": {"total": 149, "additions": 129, "deletions": 20}, "files": [{"sha": "f78dd5b54b65207c4721d0c5f9c7563a3400524a", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/46a662ecb21eac21bd274bc23e5faf9cf51790be/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a662ecb21eac21bd274bc23e5faf9cf51790be/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=46a662ecb21eac21bd274bc23e5faf9cf51790be", "patch": "@@ -1,14 +1,21 @@\n-type cratedoc = {\n-    mods: [moddoc]\n+type cratedoc = ~{\n+    topmod: moddoc,\n };\n \n-type moddoc = {\n-    fns: [fndoc]\n+type moddoc = ~{\n+    name: str,\n+    mods: modlist,\n+    fns: fnlist\n };\n \n-type fndoc = {\n+type fndoc = ~{\n+    name: str,\n     brief: str,\n     desc: option::t<str>,\n     return: option::t<str>,\n     args: map::hashmap<str, str>\n };\n+\n+// Just to break the structural recursive types\n+tag modlist = [moddoc];\n+tag fnlist = [fndoc];"}, {"sha": "06450cc2f085de964b0fb24b26d39bb6613b6437", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 95, "deletions": 6, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/46a662ecb21eac21bd274bc23e5faf9cf51790be/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a662ecb21eac21bd274bc23e5faf9cf51790be/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=46a662ecb21eac21bd274bc23e5faf9cf51790be", "patch": "@@ -1,11 +1,69 @@\n-#[doc = \"Converting the Rust AST to the rustdoc document model\"];\n-\n import rustc::syntax::ast;\n+import rustc::syntax::visit;\n+\n+export extract;\n \n #[doc = \"Converts the Rust AST to the rustdoc document model\"]\n-fn extract(crate: @ast::crate) -> doc::cratedoc {\n-    {\n-        mods: []\n+fn extract(\n+    crate: @ast::crate\n+) -> doc::cratedoc {\n+    ~{\n+        topmod: top_moddoc_from_crate(crate),\n+    }\n+}\n+\n+fn top_moddoc_from_crate(\n+    crate: @ast::crate\n+) -> doc::moddoc {\n+    moddoc_from_mod(crate.node.module, \"crate\", crate.node.attrs)\n+}\n+\n+fn moddoc_from_mod(\n+    module: ast::_mod,\n+    name: ast::ident,\n+    _attrs: [ast::attribute]\n+\n+) -> doc::moddoc {\n+    ~{\n+        name: name,\n+        mods: doc::modlist(\n+            vec::filter_map(module.items) {|item|\n+                alt item.node {\n+                  ast::item_mod(m) {\n+                    some(moddoc_from_mod(m, item.ident, item.attrs))\n+                  }\n+                  _ {\n+                    none\n+                  }\n+                }\n+            }),\n+        fns: doc::fnlist(\n+            vec::filter_map(module.items) {|item|\n+                alt item.node {\n+                  ast::item_fn(decl, typarams, _) {\n+                    some(fndoc_from_fn(\n+                        decl, typarams, item.ident, item.attrs))\n+                  }\n+                  _ {\n+                    none\n+                  }\n+                }\n+            })\n+    }\n+}\n+\n+fn fndoc_from_fn(\n+    _decl: ast::fn_decl,\n+    _typarams: [ast::ty_param],\n+    name: ast::ident,\n+    _attrs: [ast::attribute]\n+) -> doc::fndoc {\n+    ~{\n+        name: name,\n+        brief: \"todo\",\n+        desc: none,\n+        return: none,\n+        args: map::new_str_hash::<str>()\n     }\n }\n \n@@ -17,6 +75,37 @@ mod tests {\n         let source = \"\"; // empty crate\n         let ast = parse::from_str(source);\n         let doc = extract(ast);\n-        assert doc.mods == [];\n+        // FIXME #1535: These are boxed to prevent a crash\n+        assert ~doc.topmod.mods == ~doc::modlist([]);\n+        assert ~doc.topmod.fns == ~doc::fnlist([]);\n+    }\n+\n+    #[test]\n+    fn extract_mods() {\n+        let source = \"mod a { mod b { } mod c { } }\";\n+        let ast = parse::from_str(source);\n+        let doc = extract(ast);\n+        assert doc.topmod.mods[0].name == \"a\";\n+        assert doc.topmod.mods[0].mods[0].name == \"b\";\n+        assert doc.topmod.mods[0].mods[1].name == \"c\";\n+    }\n+\n+    #[test]\n+    fn extract_mods_deep() {\n+        let source = \"mod a { mod b { mod c { } } }\";\n+        let ast = parse::from_str(source);\n+        let doc = extract(ast);\n+        assert doc.topmod.mods[0].mods[0].mods[0].name == \"c\";\n+    }\n+\n+    #[test]\n+    fn extract_fns() {\n+        let source =\n+            \"fn a() { } \\\n+             mod b { fn c() { } }\";\n+        let ast = parse::from_str(source);\n+        let doc = extract(ast);\n+        assert doc.topmod.fns[0].name == \"a\";\n+        assert doc.topmod.mods[0].fns[0].name == \"c\";\n     }\n }\n\\ No newline at end of file"}, {"sha": "ee277b43a916ecc6c9209d25cf904dc939d0bee6", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/46a662ecb21eac21bd274bc23e5faf9cf51790be/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a662ecb21eac21bd274bc23e5faf9cf51790be/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=46a662ecb21eac21bd274bc23e5faf9cf51790be", "patch": "@@ -80,7 +80,12 @@ fn parse_compound_fndoc(items: [@ast::meta_item]) -> doc::fndoc {\n         none. { \"_undocumented_\" }\n     };\n \n-    { brief: _brief, desc: desc, return: return, args: argdocs }\n+    ~{\n+        name: \"todo\",\n+        brief: _brief,\n+        desc: desc,\n+        return: return,\n+        args: argdocs }\n }\n \n #[doc(\n@@ -95,10 +100,13 @@ fn doc_item(rd: rustdoc, item: @ast::item) {\n         alt attr.node.value.node {\n             ast::meta_name_value(\n                 \"doc\", {node: ast::lit_str(value), span: _}) {\n-                _fndoc = some({ brief: value,\n-                                desc: none,\n-                                return: none,\n-                                args: noargdocs });\n+                _fndoc = some(~{\n+                    name: \"todo\",\n+                    brief: value,\n+                    desc: none,\n+                    return: none,\n+                    args: noargdocs\n+                });\n             }\n             ast::meta_list(\"doc\", docs) {\n                 _fndoc = some(parse_compound_fndoc(docs));\n@@ -108,10 +116,15 @@ fn doc_item(rd: rustdoc, item: @ast::item) {\n \n     let _fndoc0 = alt _fndoc {\n         some(_d) { _d }\n-        none. { { brief: \"_undocumented_\",\n-                 desc: none,\n-                 return: none,\n-                 args: noargdocs } }\n+        none. {\n+          ~{\n+              name: \"todo\",\n+              brief: \"_undocumented_\",\n+              desc: none,\n+              return: none,\n+              args: noargdocs\n+          }\n+        }\n     };\n \n     alt item.node {"}]}