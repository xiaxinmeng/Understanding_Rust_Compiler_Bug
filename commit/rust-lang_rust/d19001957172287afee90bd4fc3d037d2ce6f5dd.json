{"sha": "d19001957172287afee90bd4fc3d037d2ce6f5dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxOTAwMTk1NzE3MjI4N2FmZWU5MGJkNGZjM2QwMzdkMmNlNmY1ZGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-25T14:52:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-25T14:52:50Z"}, "message": "Move input to top-level", "tree": {"sha": "bbcc2302fa6c44d5fc2a07f2c81a3de9123d643c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbcc2302fa6c44d5fc2a07f2c81a3de9123d643c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d19001957172287afee90bd4fc3d037d2ce6f5dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d19001957172287afee90bd4fc3d037d2ce6f5dd", "html_url": "https://github.com/rust-lang/rust/commit/d19001957172287afee90bd4fc3d037d2ce6f5dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d19001957172287afee90bd4fc3d037d2ce6f5dd/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ef3fda5e165cbc079f731e459635df0a714b778", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ef3fda5e165cbc079f731e459635df0a714b778", "html_url": "https://github.com/rust-lang/rust/commit/5ef3fda5e165cbc079f731e459635df0a714b778"}], "stats": {"total": 129, "additions": 67, "deletions": 62}, "files": [{"sha": "ea4275e630508143eba40917d441a0703ee8cb63", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d19001957172287afee90bd4fc3d037d2ce6f5dd/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d19001957172287afee90bd4fc3d037d2ce6f5dd/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d19001957172287afee90bd4fc3d037d2ce6f5dd", "patch": "@@ -608,7 +608,7 @@ dependencies = [\n  \"rayon 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"salsa 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"salsa 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n ]\n \n@@ -834,7 +834,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"salsa\"\n-version = \"0.6.1\"\n+version = \"0.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"derive-new 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1350,7 +1350,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\n \"checksum ryu 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7153dd96dade874ab973e098cb62fcdbb89a03682e46b144fd09550998d4a4a7\"\n \"checksum safemem 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8dca453248a96cb0749e36ccdfe2b0b4e54a61bfef89fb97ec621eb8e0a93dd9\"\n-\"checksum salsa 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9fc085b9e4a2cf422e798387d0dc1091c6dae97411b2b177755950db9a26dace\"\n+\"checksum salsa 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ba7fe802c02c7b0074b0b4794442d73e3c7d071967300a98bb0f5dfc25e9f1ef\"\n \"checksum same-file 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"10f7794e2fda7f594866840e95f5c5962e886e228e68b6505885811a94dd728c\"\n \"checksum scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94258f53601af11e6a49f722422f6e3425c52b06245a5cf9bc09908b174f5e27\"\n \"checksum semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\""}, {"sha": "5d7915fa5cbf14f265cb0b13083560e6be479d8f", "filename": "crates/ra_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d19001957172287afee90bd4fc3d037d2ce6f5dd/crates%2Fra_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d19001957172287afee90bd4fc3d037d2ce6f5dd/crates%2Fra_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2FCargo.toml?ref=d19001957172287afee90bd4fc3d037d2ce6f5dd", "patch": "@@ -11,7 +11,7 @@ rayon = \"1.0.2\"\n fst = \"0.3.1\"\n ra_syntax = { path = \"../ra_syntax\" }\n ra_editor = { path = \"../ra_editor\" }\n-salsa = \"0.6.1\"\n+salsa = \"0.6.2\"\n rustc-hash = \"1.0\"\n \n [dev-dependencies]"}, {"sha": "0a2f99575583eaa0888310dc70a89df839ecfd8c", "filename": "crates/ra_analysis/src/completion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d19001957172287afee90bd4fc3d037d2ce6f5dd/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19001957172287afee90bd4fc3d037d2ce6f5dd/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs?ref=d19001957172287afee90bd4fc3d037d2ce6f5dd", "patch": "@@ -6,7 +6,8 @@ use ra_syntax::{\n \n use crate::{\n     FileId, Cancelable,\n-    db::{self, SyntaxDatabase, input::FilesDatabase},\n+    input::FilesDatabase,\n+    db::{self, SyntaxDatabase},\n     descriptors::module::{ModulesDatabase, ModuleTree, ModuleId},\n };\n "}, {"sha": "3ca14af79d2261345c0b00997bcded3a4fbbe828", "filename": "crates/ra_analysis/src/db.rs", "status": "renamed", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d19001957172287afee90bd4fc3d037d2ce6f5dd/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19001957172287afee90bd4fc3d037d2ce6f5dd/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=d19001957172287afee90bd4fc3d037d2ce6f5dd", "patch": "@@ -1,5 +1,3 @@\n-pub(crate) mod input;\n-\n use std::{\n     sync::Arc,\n };\n@@ -51,13 +49,13 @@ impl Clone for RootDatabase {\n \n salsa::database_storage! {\n     pub(crate) struct RootDatabaseStorage for RootDatabase {\n-        impl input::FilesDatabase {\n-            fn file_text() for input::FileTextQuery;\n-            fn file_source_root() for input::FileSourceRootQuery;\n-            fn source_root() for input::SourceRootQuery;\n-            fn libraries() for input::LibrarieseQuery;\n-            fn library_symbols() for input::LibrarySymbolsQuery;\n-            fn crate_graph() for input::CrateGraphQuery;\n+        impl crate::input::FilesDatabase {\n+            fn file_text() for crate::input::FileTextQuery;\n+            fn file_source_root() for crate::input::FileSourceRootQuery;\n+            fn source_root() for crate::input::SourceRootQuery;\n+            fn libraries() for crate::input::LibrarieseQuery;\n+            fn library_symbols() for crate::input::LibrarySymbolsQuery;\n+            fn crate_graph() for crate::input::CrateGraphQuery;\n         }\n         impl SyntaxDatabase {\n             fn file_syntax() for FileSyntaxQuery;\n@@ -72,7 +70,7 @@ salsa::database_storage! {\n }\n \n salsa::query_group! {\n-    pub(crate) trait SyntaxDatabase: input::FilesDatabase {\n+    pub(crate) trait SyntaxDatabase: crate::input::FilesDatabase {\n         fn file_syntax(file_id: FileId) -> File {\n             type FileSyntaxQuery;\n         }", "previous_filename": "crates/ra_analysis/src/db/mod.rs"}, {"sha": "aecf6e29af86da53c1fc2b860ab18c698ad60717", "filename": "crates/ra_analysis/src/descriptors/module/imp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d19001957172287afee90bd4fc3d037d2ce6f5dd/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19001957172287afee90bd4fc3d037d2ce6f5dd/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs?ref=d19001957172287afee90bd4fc3d037d2ce6f5dd", "patch": "@@ -8,8 +8,8 @@ use ra_syntax::{\n };\n \n use crate::{\n-    FileId, Cancelable, FileResolverImp,\n-    db::{self, input::{SourceRoot, SourceRootId}},\n+    FileId, Cancelable, FileResolverImp, db,\n+    input::{SourceRoot, SourceRootId},\n };\n \n use super::{"}, {"sha": "8968c4afdb2151fd4879fee8abca0bcf551f85bc", "filename": "crates/ra_analysis/src/descriptors/module/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d19001957172287afee90bd4fc3d037d2ce6f5dd/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19001957172287afee90bd4fc3d037d2ce6f5dd/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs?ref=d19001957172287afee90bd4fc3d037d2ce6f5dd", "patch": "@@ -7,7 +7,8 @@ use ra_syntax::{ast::{self, NameOwner, AstNode}, SmolStr, SyntaxNode};\n \n use crate::{\n     FileId, Cancelable,\n-    db::{SyntaxDatabase, input::SourceRootId},\n+    db::SyntaxDatabase,\n+    input::SourceRootId,\n };\n \n salsa::query_group! {"}, {"sha": "69f5ed3309e12d63f73552cf614142333c334076", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d19001957172287afee90bd4fc3d037d2ce6f5dd/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19001957172287afee90bd4fc3d037d2ce6f5dd/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=d19001957172287afee90bd4fc3d037d2ce6f5dd", "patch": "@@ -18,8 +18,9 @@ use crate::{\n     AnalysisChange,\n     db::{\n         self, SyntaxDatabase,\n-        input::{SourceRootId, FilesDatabase, SourceRoot, WORKSPACE}\n+\n     },\n+    input::{SourceRootId, FilesDatabase, SourceRoot, WORKSPACE},\n     descriptors::module::{ModulesDatabase, ModuleTree, Problem},\n     descriptors::{FnDescriptor},\n     CrateGraph, CrateId, Diagnostic, FileId, FileResolver, FileSystemEdit, Position,\n@@ -102,7 +103,7 @@ impl AnalysisHostImpl {\n \n         for (file_id, text) in change.files_changed {\n             self.db\n-                .query(db::input::FileTextQuery)\n+                .query(crate::input::FileTextQuery)\n                 .set(file_id, Arc::new(text))\n         }\n         if !(change.files_added.is_empty() && change.files_removed.is_empty()) {\n@@ -111,22 +112,22 @@ impl AnalysisHostImpl {\n             let mut source_root = SourceRoot::clone(&self.db.source_root(WORKSPACE));\n             for (file_id, text) in change.files_added {\n                 self.db\n-                    .query(db::input::FileTextQuery)\n+                    .query(crate::input::FileTextQuery)\n                     .set(file_id, Arc::new(text));\n                 self.db\n-                    .query(db::input::FileSourceRootQuery)\n-                    .set(file_id, db::input::WORKSPACE);\n+                    .query(crate::input::FileSourceRootQuery)\n+                    .set(file_id, crate::input::WORKSPACE);\n                 source_root.files.insert(file_id);\n             }\n             for file_id in change.files_removed {\n                 self.db\n-                    .query(db::input::FileTextQuery)\n+                    .query(crate::input::FileTextQuery)\n                     .set(file_id, Arc::new(String::new()));\n                 source_root.files.remove(&file_id);\n             }\n             source_root.file_resolver = file_resolver;\n             self.db\n-                .query(db::input::SourceRootQuery)\n+                .query(crate::input::SourceRootQuery)\n                 .set(WORKSPACE, Arc::new(source_root))\n         }\n         if !change.libraries_added.is_empty() {\n@@ -138,29 +139,29 @@ impl AnalysisHostImpl {\n                 for (file_id, text) in library.files {\n                     files.insert(file_id);\n                     self.db\n-                        .query(db::input::FileSourceRootQuery)\n+                        .query(crate::input::FileSourceRootQuery)\n                         .set_constant(file_id, source_root_id);\n                     self.db\n-                        .query(db::input::FileTextQuery)\n+                        .query(crate::input::FileTextQuery)\n                         .set_constant(file_id, Arc::new(text));\n                 }\n                 let source_root = SourceRoot {\n                     files,\n                     file_resolver: library.file_resolver,\n                 };\n                 self.db\n-                    .query(db::input::SourceRootQuery)\n+                    .query(crate::input::SourceRootQuery)\n                     .set(source_root_id, Arc::new(source_root));\n                 self.db\n-                    .query(db::input::LibrarySymbolsQuery)\n+                    .query(crate::input::LibrarySymbolsQuery)\n                     .set(source_root_id, Arc::new(library.symbol_index));\n             }\n             self.db\n-                .query(db::input::LibrarieseQuery)\n+                .query(crate::input::LibrarieseQuery)\n                 .set((), Arc::new(libraries));\n         }\n         if let Some(crate_graph) = change.crate_graph {\n-            self.db.query(db::input::CrateGraphQuery)\n+            self.db.query(crate::input::CrateGraphQuery)\n                 .set((), Arc::new(crate_graph))\n         }\n     }"}, {"sha": "e64fad40cf4754ae7ca2c6ee98c10483e5f77804", "filename": "crates/ra_analysis/src/input.rs", "status": "renamed", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d19001957172287afee90bd4fc3d037d2ce6f5dd/crates%2Fra_analysis%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19001957172287afee90bd4fc3d037d2ce6f5dd/crates%2Fra_analysis%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Finput.rs?ref=d19001957172287afee90bd4fc3d037d2ce6f5dd", "patch": "@@ -1,11 +1,42 @@\n use std::{\n     sync::Arc,\n+    fmt,\n };\n \n use salsa;\n use rustc_hash::FxHashSet;\n+use relative_path::RelativePath;\n+use rustc_hash::FxHashMap;\n \n-use crate::{FileId, FileResolverImp, CrateGraph, symbol_index::SymbolIndex};\n+use crate::{symbol_index::SymbolIndex, FileResolverImp};\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub struct FileId(pub u32);\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub struct CrateId(pub u32);\n+\n+#[derive(Debug, Clone, Default, PartialEq, Eq)]\n+pub struct CrateGraph {\n+    pub(crate) crate_roots: FxHashMap<CrateId, FileId>,\n+}\n+\n+impl CrateGraph {\n+    pub fn new() -> CrateGraph {\n+        CrateGraph::default()\n+    }\n+    pub fn add_crate_root(&mut self, file_id: FileId) -> CrateId{\n+        let crate_id = CrateId(self.crate_roots.len() as u32);\n+        let prev = self.crate_roots.insert(crate_id, file_id);\n+        assert!(prev.is_none());\n+        crate_id\n+    }\n+}\n+\n+pub trait FileResolver: fmt::Debug + Send + Sync + 'static {\n+    fn file_stem(&self, file_id: FileId) -> String;\n+    fn resolve(&self, file_id: FileId, path: &RelativePath) -> Option<FileId>;\n+}\n \n salsa::query_group! {\n     pub(crate) trait FilesDatabase: salsa::Database {", "previous_filename": "crates/ra_analysis/src/db/input.rs"}, {"sha": "a67cac21ee930fa158301b5b36f3aea4712795a5", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 3, "deletions": 30, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d19001957172287afee90bd4fc3d037d2ce6f5dd/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19001957172287afee90bd4fc3d037d2ce6f5dd/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=d19001957172287afee90bd4fc3d037d2ce6f5dd", "patch": "@@ -6,6 +6,7 @@ extern crate relative_path;\n extern crate rustc_hash;\n extern crate salsa;\n \n+mod input;\n mod db;\n mod descriptors;\n mod imp;\n@@ -17,9 +18,8 @@ use std::{\n     sync::Arc,\n };\n \n-use rustc_hash::FxHashMap;\n use ra_syntax::{AtomEdit, File, TextRange, TextUnit};\n-use relative_path::{RelativePath, RelativePathBuf};\n+use relative_path::RelativePathBuf;\n use rayon::prelude::*;\n \n use crate::{\n@@ -29,6 +29,7 @@ use crate::{\n \n pub use crate::{\n     descriptors::FnDescriptor,\n+    input::{FileId, FileResolver, CrateGraph, CrateId}\n };\n pub use ra_editor::{\n     CompletionItem, FileSymbol, Fold, FoldKind, HighlightedRange, LineIndex, Runnable,\n@@ -49,34 +50,6 @@ impl std::fmt::Display for Canceled {\n impl std::error::Error for Canceled {\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct FileId(pub u32);\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct CrateId(pub u32);\n-\n-#[derive(Debug, Clone, Default, PartialEq, Eq)]\n-pub struct CrateGraph {\n-    crate_roots: FxHashMap<CrateId, FileId>,\n-}\n-\n-impl CrateGraph {\n-    pub fn new() -> CrateGraph {\n-        CrateGraph::default()\n-    }\n-    pub fn add_crate_root(&mut self, file_id: FileId) -> CrateId{\n-        let crate_id = CrateId(self.crate_roots.len() as u32);\n-        let prev = self.crate_roots.insert(crate_id, file_id);\n-        assert!(prev.is_none());\n-        crate_id\n-    }\n-}\n-\n-pub trait FileResolver: fmt::Debug + Send + Sync + 'static {\n-    fn file_stem(&self, file_id: FileId) -> String;\n-    fn resolve(&self, file_id: FileId, path: &RelativePath) -> Option<FileId>;\n-}\n-\n #[derive(Default)]\n pub struct AnalysisChange {\n     files_added: Vec<(FileId, String)>,"}]}