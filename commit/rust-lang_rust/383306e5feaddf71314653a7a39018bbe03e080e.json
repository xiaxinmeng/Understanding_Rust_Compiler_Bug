{"sha": "383306e5feaddf71314653a7a39018bbe03e080e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MzMwNmU1ZmVhZGRmNzEzMTQ2NTNhN2EzOTAxOGJiZTAzZTA4MGU=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-10-05T14:40:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-05T14:40:24Z"}, "message": "Update rustc-ap-* crates to 606.0.0 (#3835)", "tree": {"sha": "85658617ddb08bbbc71247812a615bda64a28ebd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85658617ddb08bbbc71247812a615bda64a28ebd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/383306e5feaddf71314653a7a39018bbe03e080e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdmKtYCRBK7hj4Ov3rIwAAdHIIADcSCzcxCn6sl8IQ2R3IijlQ\nJoRspYZP5SiJY162RavZDeFVY43l0IpSb67RquDOUYQ1yAZUpzdgZ9eu9nFvQVd9\nkNDElNEsQth4Tnayhc4M8vyryX2O6Y+GdeikY44ou2ZzwdMbaiHgHM1PWNvChXPr\nvOk9v0N04W00chC+5K7uOhrawrFGWipUU/PS0rRuU5e8gwCg2KO16l2k5DEctrbF\nqjElE1yXfc9/ycGjJASOK3NZHxZO3eoeFAHGKmIjGtXNKXJZ8ZQKmYAXJdEbvwWo\nGWLsGeIuFBkGQQ/BNSR2udbprFw2h8OI4LS/hxzZbrCnE2U88DrBC/mSX4P/lLo=\n=Lvxo\n-----END PGP SIGNATURE-----\n", "payload": "tree 85658617ddb08bbbc71247812a615bda64a28ebd\nparent fb01dc857c2c073eedfa02ce37f6189a9972f838\nauthor Seiichi Uchida <seuchida@gmail.com> 1570286424 +0900\ncommitter GitHub <noreply@github.com> 1570286424 +0900\n\nUpdate rustc-ap-* crates to 606.0.0 (#3835)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/383306e5feaddf71314653a7a39018bbe03e080e", "html_url": "https://github.com/rust-lang/rust/commit/383306e5feaddf71314653a7a39018bbe03e080e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/383306e5feaddf71314653a7a39018bbe03e080e/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb01dc857c2c073eedfa02ce37f6189a9972f838", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb01dc857c2c073eedfa02ce37f6189a9972f838", "html_url": "https://github.com/rust-lang/rust/commit/fb01dc857c2c073eedfa02ce37f6189a9972f838"}], "stats": {"total": 467, "additions": 202, "deletions": 265}, "files": [{"sha": "38d97a9c4eb99a2878036c3075fcc3a5274de9e0", "filename": "Cargo.lock", "status": "modified", "additions": 79, "deletions": 150, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/383306e5feaddf71314653a7a39018bbe03e080e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/383306e5feaddf71314653a7a39018bbe03e080e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=383306e5feaddf71314653a7a39018bbe03e080e", "patch": "@@ -46,11 +46,6 @@ dependencies = [\n  \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"autocfg\"\n-version = \"0.1.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"backtrace\"\n version = \"0.3.37\"\n@@ -253,7 +248,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"ena\"\n-version = \"0.13.0\"\n+version = \"0.13.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -413,11 +408,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"lock_api\"\n-version = \"0.1.5\"\n+version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"owning_ref 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"scopeguard 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -451,14 +445,6 @@ dependencies = [\n  \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"owning_ref\"\n-version = \"0.4.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"packed_simd\"\n version = \"0.3.3\"\n@@ -469,20 +455,23 @@ dependencies = [\n \n [[package]]\n name = \"parking_lot\"\n-version = \"0.7.1\"\n+version = \"0.9.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"lock_api 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lock_api 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot_core 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"parking_lot_core\"\n-version = \"0.4.0\"\n+version = \"0.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n+ \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -535,33 +524,6 @@ dependencies = [\n  \"proc-macro2 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"rand\"\n-version = \"0.6.5\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"autocfg 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_chacha 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_hc 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_isaac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_jitter 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_os 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_pcg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_xorshift 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"rand_chacha\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"autocfg 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"rand_core\"\n version = \"0.3.1\"\n@@ -575,32 +537,6 @@ name = \"rand_core\"\n version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"rand_hc\"\n-version = \"0.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"rand_isaac\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"rand_jitter\"\n-version = \"0.1.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"rand_os\"\n version = \"0.1.3\"\n@@ -614,23 +550,6 @@ dependencies = [\n  \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"rand_pcg\"\n-version = \"0.1.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"autocfg 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"rand_xorshift\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"rdrand\"\n version = \"0.4.0\"\n@@ -683,33 +602,34 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-arena\"\n-version = \"583.0.0\"\n+version = \"606.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-rustc_data_structures 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-graphviz\"\n-version = \"583.0.0\"\n+version = \"606.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-ap-rustc_data_structures\"\n-version = \"583.0.0\"\n+version = \"606.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ena 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ena 0.13.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"indexmap 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jobserver 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-graphviz 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-graphviz 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_index 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon-core 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -719,31 +639,40 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_errors\"\n-version = \"583.0.0\"\n+version = \"606.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"annotate-snippets 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term_size 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rustc-ap-rustc_index\"\n+version = \"606.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rustc-ap-serialize 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rustc-ap-rustc_lexer\"\n-version = \"583.0.0\"\n+version = \"606.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_macros\"\n-version = \"583.0.0\"\n+version = \"606.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -755,19 +684,20 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_target\"\n-version = \"583.0.0\"\n+version = \"606.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_index 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-serialize\"\n-version = \"583.0.0\"\n+version = \"606.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"indexmap 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -776,33 +706,34 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-syntax\"\n-version = \"583.0.0\"\n+version = \"606.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_lexer 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_macros 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_index 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_lexer 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-syntax_pos\"\n-version = \"583.0.0\"\n+version = \"606.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-arena 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_macros 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-arena 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_index 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -881,9 +812,9 @@ dependencies = [\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-workspace-hack 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustfmt-config_proc_macro 0.2.0\",\n  \"serde 1.0.99 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -919,6 +850,11 @@ name = \"scopeguard\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"scopeguard\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"semver\"\n version = \"0.9.0\"\n@@ -1177,7 +1113,6 @@ dependencies = [\n \"checksum arrayref 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d382e583f07208808f6b1249e60848879ba3543f57c32277bf52d69c2f0f0ee\"\n \"checksum arrayvec 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b8d73f9beda665eaa98ab9e4f7442bd4e7de6652587de55b2525e52e29c1b0ba\"\n \"checksum atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1803c647a3ec87095e7ae7acfca019e98de5ec9a7d01343f611cf3152ed71a90\"\n-\"checksum autocfg 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b671c8fb71b457dd4ae18c4ba1e59aa81793daacc361d82fcd410cef0d491875\"\n \"checksum backtrace 0.3.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5180c5a20655b14a819b652fd2378fa5f1697b6c9ddad3e695c2f9cedf6df4e2\"\n \"checksum backtrace-sys 0.1.31 (registry+https://github.com/rust-lang/crates.io-index)\" = \"82a830b4ef2d1124a711c71d263c5abdc710ef8e907bd508c88be475cebc422b\"\n \"checksum base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b25d992356d2eb0ed82172f5248873db5560c4721f564b13cb5193bda5e668e\"\n@@ -1202,7 +1137,7 @@ dependencies = [\n \"checksum dirs 2.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"13aea89a5c93364a98e9b37b2fa237effbb694d5cfe01c5b70941f7eb087d5e3\"\n \"checksum dirs-sys 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"afa0b23de8fd801745c471deffa6e12d248f962c9fd4b4c33787b055599bde7b\"\n \"checksum either 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5527cfe0d098f36e3f8839852688e63c8fff1c90b2b405aef730615f9a7bcf7b\"\n-\"checksum ena 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dc01d68e08ca384955a3aeba9217102ca1aa85b6e168639bf27739f1d749d87\"\n+\"checksum ena 0.13.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8944dc8fa28ce4a38f778bd46bf7d923fe73eed5a439398507246c8e017e6f36\"\n \"checksum env_logger 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aafcde04e90a5226a6443b7aabdb016ba2f8307c847d524724bd9b346dd1a2d3\"\n \"checksum failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"795bd83d3abeb9220f257e597aa0080a508b27533824adf336529648f6abf7e2\"\n \"checksum failure_derive 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea1063915fd7ef4309e222a5a07cf9c319fb9c7836b1f89b85458672dbb127e1\"\n@@ -1221,48 +1156,41 @@ dependencies = [\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n \"checksum libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\" = \"34fcd2c08d2f832f376f4173a231990fa5aef4e99fb569867318a227ef4c06ba\"\n-\"checksum lock_api 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"62ebf1391f6acad60e5c8b43706dde4582df75c06698ab44511d15016bc2442c\"\n+\"checksum lock_api 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8912e782533a93a167888781b836336a6ca5da6175c05944c86cf28c31104dc\"\n \"checksum log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"14b6052be84e6b71ab17edffc2eeabf5c2c3ae1fdb464aae35ac50c67a44e1f7\"\n \"checksum memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"88579771288728879b57485cc7d6b07d648c9f0141eb955f8ab7f9d45394468e\"\n \"checksum memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f9dc261e2b62d7a622bf416ea3c5245cdd5d9a7fcc428c0d06804dfce1775b3\"\n \"checksum nodrop 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2f9667ddcc6cc8a43afc9b7917599d7216aa09c463919ea32c59ed6cac8bc945\"\n \"checksum num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bcef43580c035376c0705c42792c294b66974abbfd2789b511784023f71f3273\"\n-\"checksum owning_ref 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49a4b8ea2179e6a2e27411d3bca09ca6dd630821cf6894c6c7c8467a8ee7ef13\"\n \"checksum packed_simd 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a85ea9fc0d4ac0deb6fe7911d38786b32fc11119afd9e9d38b84ff691ce64220\"\n-\"checksum parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab41b4aed082705d1056416ae4468b6ea99d52599ecf3169b00088d43113e337\"\n-\"checksum parking_lot_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94c8c7923936b28d546dfd14d4472eaf34c99b14e1c973a32b3e6d4eb04298c9\"\n+\"checksum parking_lot 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f842b1982eb6c2fe34036a4fbfb06dd185a3f5c8edfaacdf7d1ea10b07de6252\"\n+\"checksum parking_lot_core 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b876b1b9e7ac6e1a74a6da34d25c42e17e8862aa409cbbbdcfc8d86c6f3bc62b\"\n \"checksum proc-macro-error 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aeccfe4d5d8ea175d5f0e4a2ad0637e0f4121d63bd99d356fb1f39ab2e7c6097\"\n \"checksum proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cf3d2011ab5c909338f7887f4fc896d35932e29146c12c8d01da6b22a80ba759\"\n \"checksum proc-macro2 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e98a83a9f9b331f54b924e68a66acb1bb35cb01fb0a23645139967abefb697e8\"\n \"checksum quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9274b940887ce9addde99c4eee6b5c44cc494b182b97e73dc8ffdcb3397fd3f0\"\n \"checksum quote 0.6.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ce23b6b870e8f94f81fb0a363d65d86675884b34a09043c81e5562f11c1f8e1\"\n \"checksum quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"053a8c8bcc71fcce321828dc897a98ab9760bef03a4fc36693c231e5b3216cfe\"\n-\"checksum rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d71dacdc3c88c1fde3885a3be3fbab9f35724e6ce99467f7d9c5026132184ca\"\n-\"checksum rand_chacha 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"556d3a1ca6600bfcbab7c7c91ccb085ac7fbbcd70e008a98742e7847f4f7bcef\"\n \"checksum rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6fdeb83b075e8266dcc8762c22776f6877a63111121f5f8c7411e5be7eed4b\"\n \"checksum rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9c33a3c44ca05fa6f1807d8e6743f3824e8509beca625669633be0acbdf509dc\"\n-\"checksum rand_hc 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b40677c7be09ae76218dc623efbf7b18e34bced3f38883af07bb75630a21bc4\"\n-\"checksum rand_isaac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ded997c9d5f13925be2a6fd7e66bf1872597f759fd9dd93513dd7e92e5a5ee08\"\n-\"checksum rand_jitter 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1166d5c91dc97b88d1decc3285bb0a99ed84b05cfd0bc2341bdf2d43fc41e39b\"\n \"checksum rand_os 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b75f676a1e053fc562eafbb47838d67c84801e38fc1ba459e8f180deabd5071\"\n-\"checksum rand_pcg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"abf9b09b01790cfe0364f52bf32995ea3c39f4d2dd011eac241d2914146d0b44\"\n-\"checksum rand_xorshift 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cbf7e9e623549b0e21f6e97cf8ecf247c1a8fd2e8a992ae265314300b2455d5c\"\n \"checksum rdrand 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"678054eb77286b51581ba43620cc911abf02758c91f93f479767aed0f90458b2\"\n \"checksum redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2439c63f3f6139d1b57529d16bc3b8bb855230c8efcc5d3a896c8bea7c3b1e84\"\n \"checksum redox_users 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4ecedbca3bf205f8d8f5c2b44d83cd0690e39ee84b951ed649e9f1841132b66d\"\n \"checksum regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dc220bd33bdce8f093101afe22a037b8eb0e5af33592e6a9caafff0d4cb81cbd\"\n \"checksum regex-syntax 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11a7e20d1cce64ef2fed88b66d347f88bd9babb82845b2b858f3edbf59a4f716\"\n \"checksum rust-argon2 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4ca4eaef519b494d1f2848fc602d18816fed808a981aedf4f1f00ceb7c9d32cf\"\n-\"checksum rustc-ap-arena 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f59b76d334bd533f3fdc5c651c27678c5e80fac67c6f7da22ba21a58878c55f5\"\n-\"checksum rustc-ap-graphviz 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e632ef08ca17458acfd46d2ead3d541a1c249586cd5329f5fe333dacfab6142\"\n-\"checksum rustc-ap-rustc_data_structures 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e89e2c7be68185418f3cd56af3df8b29007a59a1cebefa63612d055f9bcb1a36\"\n-\"checksum rustc-ap-rustc_errors 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1e47cb380abeb72b01e42b2342d592f7eeea7d536c2f1f0d0e550dc509e46333\"\n-\"checksum rustc-ap-rustc_lexer 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"494cfaf67f49217d67d0774eeecbba61ac89acf478db97ef11f113ed8a959305\"\n-\"checksum rustc-ap-rustc_macros 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2e5d36becc59b4497f9cbd3ae0610081de0207a1d0e95c066369167b14f486f\"\n-\"checksum rustc-ap-rustc_target 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7bfc5f96dfc3b9f8d5b57884f7f37467ecff6776cd4b8b491a7daece6fdd7c2\"\n-\"checksum rustc-ap-serialize 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2bb9ee231cf79eded39c56647499f83d6136ff5c8c0baaa9e21b6febee00f4f6\"\n-\"checksum rustc-ap-syntax 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3827fc208814efbde82d613e31d11b4250ce9e8cf8afe4a4d47bbbd099632c9\"\n-\"checksum rustc-ap-syntax_pos 583.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"930ed81c34f325e512cc315c04d676fa84a373879d5c43bb54054a0522b05213\"\n+\"checksum rustc-ap-arena 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a623fd4805842e9bd0bb6e6dace63efede0ee22de4522a0b03b7c3d15a22f009\"\n+\"checksum rustc-ap-graphviz 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee549ade784b444ef10c0240c3487ed785aa65d711071f7984246b15329a17b6\"\n+\"checksum rustc-ap-rustc_data_structures 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca545744a5a9b42e3d0410d6290d40de96dd567253fe77f310c1de4afd213dd4\"\n+\"checksum rustc-ap-rustc_errors 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a6967a41ed38ef4bce0f559fe9a4801d8ba12ac032f40a12a55e72f79d52c9bb\"\n+\"checksum rustc-ap-rustc_index 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"457a5c204ae2fdaa5bdb5b196e58ca59896870d80445fe423063c9453496e3ea\"\n+\"checksum rustc-ap-rustc_lexer 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ed0c064676f8a08e42a36b0d4e4a102465fb0f4b75e11436cb7f66d2c3fa7139\"\n+\"checksum rustc-ap-rustc_macros 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b2d77e46159c5288c585decbcdc9d742889c65e307c31e104c7a36d63fe1f5d0\"\n+\"checksum rustc-ap-rustc_target 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"86ca895350b0de14d064b499168c93fa183958d5462eb042c927d93623e41ec1\"\n+\"checksum rustc-ap-serialize 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92679240e86f4583cc05f8dcf6439bdab87bac9e6555718469176de9bd52ba20\"\n+\"checksum rustc-ap-syntax 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a0c30f8e38c847dbfd9e2f1e472ab06d0bd0a23ab53ae4c5a44912842ce834e\"\n+\"checksum rustc-ap-syntax_pos 606.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2bdaa0fb40143b4b878256ac4e2b498885daafc269502504d91929eab4744bf4\"\n \"checksum rustc-demangle 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4c691c0e608126e00913e33f0ccf3727d5fc84573623b8d65b2df340b5201783\"\n \"checksum rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7540fc8b0c49f096ee9c961cda096467dce8084bec6bdca2fc83895fd9b28cb8\"\n \"checksum rustc-rayon 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d2e07e19601f21c59aad953c2632172ba70cb27e685771514ea66e4062b3363\"\n@@ -1273,6 +1201,7 @@ dependencies = [\n \"checksum same-file 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"585e8ddcedc187886a30fa705c47985c3fa88d06624095856b36ca0b82ff4421\"\n \"checksum scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea6a9290e3c9cf0f18145ef7ffa62d68ee0bf5fcd651017e586dc7fd5da448c2\"\n \"checksum scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94258f53601af11e6a49f722422f6e3425c52b06245a5cf9bc09908b174f5e27\"\n+\"checksum scopeguard 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b42e15e59b18a828bbf5c58ea01debb36b9b096346de35d941dcb89009f24a0d\"\n \"checksum semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\n \"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n \"checksum serde 1.0.99 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fec2851eb56d010dc9a21b89ca53ee75e6528bab60c11e89d38390904982da9f\""}, {"sha": "080f1e8ff1fd734e27587942b4a8c0c9387ac8f2", "filename": "Cargo.toml", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/383306e5feaddf71314653a7a39018bbe03e080e/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/383306e5feaddf71314653a7a39018bbe03e080e/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=383306e5feaddf71314653a7a39018bbe03e080e", "patch": "@@ -47,9 +47,6 @@ env_logger = \"0.6\"\n getopts = \"0.2\"\n derive-new = \"0.5\"\n cargo_metadata = \"0.8\"\n-rustc-ap-rustc_target = \"583.0.0\"\n-rustc-ap-syntax = \"583.0.0\"\n-rustc-ap-syntax_pos = \"583.0.0\"\n failure = \"0.1.3\"\n bytecount = \"0.6\"\n unicode-width = \"0.1.5\"\n@@ -58,13 +55,24 @@ dirs = \"2.0.1\"\n ignore = \"0.4.6\"\n annotate-snippets = { version = \"0.6\", features = [\"ansi_term\"] }\n structopt = \"0.3\"\n-\n rustfmt-config_proc_macro = { version = \"0.2\", path = \"config_proc_macro\" }\n \n # A noop dependency that changes in the Rust repository, it's a bit of a hack.\n # See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`\n # for more information.\n rustc-workspace-hack = \"1.0.0\"\n \n+[dependencies.rustc_target]\n+package = \"rustc-ap-rustc_target\"\n+version = \"606.0.0\"\n+\n+[dependencies.syntax]\n+package = \"rustc-ap-syntax\"\n+version = \"606.0.0\"\n+\n+[dependencies.syntax_pos]\n+package = \"rustc-ap-syntax_pos\"\n+version = \"606.0.0\"\n+\n [dev-dependencies]\n lazy_static = \"1.0.0\""}, {"sha": "63a01e5660380217b3867bd0c6ac0bfe463d2251", "filename": "src/attr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=383306e5feaddf71314653a7a39018bbe03e080e", "patch": "@@ -20,7 +20,7 @@ mod doc_comment;\n \n /// Returns attributes on the given statement.\n pub(crate) fn get_attrs_from_stmt(stmt: &ast::Stmt) -> &[ast::Attribute] {\n-    match stmt.node {\n+    match stmt.kind {\n         ast::StmtKind::Local(ref local) => &local.attrs,\n         ast::StmtKind::Item(ref item) => &item.attrs,\n         ast::StmtKind::Expr(ref expr) | ast::StmtKind::Semi(ref expr) => &expr.attrs,\n@@ -29,7 +29,7 @@ pub(crate) fn get_attrs_from_stmt(stmt: &ast::Stmt) -> &[ast::Attribute] {\n }\n \n pub(crate) fn get_span_without_attrs(stmt: &ast::Stmt) -> Span {\n-    match stmt.node {\n+    match stmt.kind {\n         ast::StmtKind::Local(ref local) => local.span,\n         ast::StmtKind::Item(ref item) => item.span,\n         ast::StmtKind::Expr(ref expr) | ast::StmtKind::Semi(ref expr) => expr.span,\n@@ -218,7 +218,7 @@ fn has_newlines_before_after_comment(comment: &str) -> (&str, &str) {\n \n impl Rewrite for ast::MetaItem {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n-        Some(match self.node {\n+        Some(match self.kind {\n             ast::MetaItemKind::Word => {\n                 rewrite_path(context, PathContext::Type, None, &self.path, shape)?\n             }\n@@ -495,7 +495,7 @@ fn attr_prefix(attr: &ast::Attribute) -> &'static str {\n \n pub(crate) trait MetaVisitor<'ast> {\n     fn visit_meta_item(&mut self, meta_item: &'ast ast::MetaItem) {\n-        match meta_item.node {\n+        match meta_item.kind {\n             ast::MetaItemKind::Word => self.visit_meta_word(meta_item),\n             ast::MetaItemKind::List(ref list) => self.visit_meta_list(meta_item, list),\n             ast::MetaItemKind::NameValue(ref lit) => self.visit_meta_name_value(meta_item, lit),"}, {"sha": "ff8d7214c5480b5fec73ea0087666130e7422f4e", "filename": "src/chains.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=383306e5feaddf71314653a7a39018bbe03e080e", "patch": "@@ -135,7 +135,7 @@ impl ChainItemKind {\n     }\n \n     fn is_tup_field_access(expr: &ast::Expr) -> bool {\n-        match expr.node {\n+        match expr.kind {\n             ast::ExprKind::Field(_, ref field) => {\n                 field.name.to_string().chars().all(|c| c.is_digit(10))\n             }\n@@ -144,7 +144,7 @@ impl ChainItemKind {\n     }\n \n     fn from_ast(context: &RewriteContext<'_>, expr: &ast::Expr) -> (ChainItemKind, Span) {\n-        let (kind, span) = match expr.node {\n+        let (kind, span) = match expr.kind {\n             ast::ExprKind::MethodCall(ref segment, ref expressions) => {\n                 let types = if let Some(ref generic_args) = segment.args {\n                     if let ast::GenericArgs::AngleBracketed(ref data) = **generic_args {\n@@ -262,7 +262,7 @@ impl Chain {\n         let mut rev_children = vec![];\n         let mut sub_tries = 0;\n         for subexpr in &subexpr_list {\n-            match subexpr.node {\n+            match subexpr.kind {\n                 ast::ExprKind::Try(_) => sub_tries += 1,\n                 _ => {\n                     rev_children.push(ChainItem::new(context, subexpr, sub_tries));\n@@ -390,7 +390,7 @@ impl Chain {\n     // Returns the expression's subexpression, if it exists. When the subexpr\n     // is a try! macro, we'll convert it to shorthand when the option is set.\n     fn pop_expr_chain(expr: &ast::Expr, context: &RewriteContext<'_>) -> Option<ast::Expr> {\n-        match expr.node {\n+        match expr.kind {\n             ast::ExprKind::MethodCall(_, ref expressions) => {\n                 Some(Self::convert_try(&expressions[0], context))\n             }\n@@ -402,7 +402,7 @@ impl Chain {\n     }\n \n     fn convert_try(expr: &ast::Expr, context: &RewriteContext<'_>) -> ast::Expr {\n-        match expr.node {\n+        match expr.kind {\n             ast::ExprKind::Mac(ref mac) if context.config.use_try_shorthand() => {\n                 if let Some(subexpr) = convert_try_mac(mac, context) {\n                     subexpr"}, {"sha": "1b877f5ef978fed541b0034581209b608aeaf08c", "filename": "src/closures.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=383306e5feaddf71314653a7a39018bbe03e080e", "patch": "@@ -40,7 +40,7 @@ pub(crate) fn rewrite_closure(\n     // 1 = space between `|...|` and body.\n     let body_shape = shape.offset_left(extra_offset)?;\n \n-    if let ast::ExprKind::Block(ref block, _) = body.node {\n+    if let ast::ExprKind::Block(ref block, _) = body.kind {\n         // The body of the closure is an empty block.\n         if block.stmts.is_empty() && !block_contains_comment(block, context.source_map) {\n             return body\n@@ -89,7 +89,7 @@ fn get_inner_expr<'a>(\n     prefix: &str,\n     context: &RewriteContext<'_>,\n ) -> &'a ast::Expr {\n-    if let ast::ExprKind::Block(ref block, _) = expr.node {\n+    if let ast::ExprKind::Block(ref block, _) = expr.kind {\n         if !needs_block(block, prefix, context) {\n             // block.stmts.len() == 1\n             if let Some(expr) = stmt_expr(&block.stmts[0]) {\n@@ -110,7 +110,7 @@ fn needs_block(block: &ast::Block, prefix: &str, context: &RewriteContext<'_>) -\n }\n \n fn veto_block(e: &ast::Expr) -> bool {\n-    match e.node {\n+    match e.kind {\n         ast::ExprKind::Call(..)\n         | ast::ExprKind::Binary(..)\n         | ast::ExprKind::Cast(..)\n@@ -141,7 +141,7 @@ fn rewrite_closure_with_block(\n     let block = ast::Block {\n         stmts: vec![ast::Stmt {\n             id: ast::NodeId::root(),\n-            node: ast::StmtKind::Expr(ptr::P(body.clone())),\n+            kind: ast::StmtKind::Expr(ptr::P(body.clone())),\n             span: body.span,\n         }],\n         id: ast::NodeId::root(),\n@@ -161,7 +161,7 @@ fn rewrite_closure_expr(\n     shape: Shape,\n ) -> Option<String> {\n     fn allow_multi_line(expr: &ast::Expr) -> bool {\n-        match expr.node {\n+        match expr.kind {\n             ast::ExprKind::Match(..)\n             | ast::ExprKind::Block(..)\n             | ast::ExprKind::TryBlock(..)\n@@ -291,9 +291,9 @@ pub(crate) fn rewrite_last_closure(\n     shape: Shape,\n ) -> Option<String> {\n     if let ast::ExprKind::Closure(capture, ref is_async, movability, ref fn_decl, ref body, _) =\n-        expr.node\n+        expr.kind\n     {\n-        let body = match body.node {\n+        let body = match body.kind {\n             ast::ExprKind::Block(ref block, _)\n                 if !is_unsafe_block(block)\n                     && !context.inside_macro()\n@@ -353,7 +353,7 @@ pub(crate) fn rewrite_last_closure(\n pub(crate) fn args_have_many_closure(args: &[OverflowableItem<'_>]) -> bool {\n     args.iter()\n         .filter_map(OverflowableItem::to_expr)\n-        .filter(|expr| match expr.node {\n+        .filter(|expr| match expr.kind {\n             ast::ExprKind::Closure(..) => true,\n             _ => false,\n         })\n@@ -371,7 +371,7 @@ fn is_block_closure_forced(context: &RewriteContext<'_>, expr: &ast::Expr) -> bo\n }\n \n fn is_block_closure_forced_inner(expr: &ast::Expr, version: Version) -> bool {\n-    match expr.node {\n+    match expr.kind {\n         ast::ExprKind::If(..) | ast::ExprKind::While(..) | ast::ExprKind::ForLoop(..) => true,\n         ast::ExprKind::Loop(..) if version == Version::Two => true,\n         ast::ExprKind::AddrOf(_, ref expr)\n@@ -392,7 +392,7 @@ fn is_block_closure_forced_inner(expr: &ast::Expr, version: Version) -> bool {\n /// isn't parsed as (if true {...} else {...} | x) | 5\n // From https://github.com/rust-lang/rust/blob/master/src/libsyntax/parse/classify.rs.\n fn expr_requires_semi_to_be_stmt(e: &ast::Expr) -> bool {\n-    match e.node {\n+    match e.kind {\n         ast::ExprKind::If(..)\n         | ast::ExprKind::Match(..)\n         | ast::ExprKind::Block(..)"}, {"sha": "86bb98d3ea88735e73d5a593555001e24a3747d3", "filename": "src/expr.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=383306e5feaddf71314653a7a39018bbe03e080e", "patch": "@@ -65,7 +65,7 @@ pub(crate) fn format_expr(\n         shape\n     };\n \n-    let expr_rw = match expr.node {\n+    let expr_rw = match expr.kind {\n         ast::ExprKind::Array(ref expr_vec) => rewrite_array(\n             \"\",\n             expr_vec.iter(),\n@@ -250,8 +250,8 @@ pub(crate) fn format_expr(\n             };\n \n             fn needs_space_before_range(context: &RewriteContext<'_>, lhs: &ast::Expr) -> bool {\n-                match lhs.node {\n-                    ast::ExprKind::Lit(ref lit) => match lit.node {\n+                match lhs.kind {\n+                    ast::ExprKind::Lit(ref lit) => match lit.kind {\n                         ast::LitKind::FloatUnsuffixed(..) => {\n                             context.snippet(lit.span).ends_with('.')\n                         }\n@@ -262,7 +262,7 @@ pub(crate) fn format_expr(\n             }\n \n             fn needs_space_after_range(rhs: &ast::Expr) -> bool {\n-                match rhs.node {\n+                match rhs.kind {\n                     // Don't format `.. ..` into `....`, which is invalid.\n                     //\n                     // This check is unnecessary for `lhs`, because a range\n@@ -575,7 +575,7 @@ pub(crate) fn rewrite_cond(\n     expr: &ast::Expr,\n     shape: Shape,\n ) -> Option<String> {\n-    match expr.node {\n+    match expr.kind {\n         ast::ExprKind::Match(ref cond, _) => {\n             // `match `cond` {`\n             let cond_shape = match context.config.indent_style() {\n@@ -612,15 +612,15 @@ struct ControlFlow<'a> {\n }\n \n fn extract_pats_and_cond(expr: &ast::Expr) -> (Option<&ast::Pat>, &ast::Expr) {\n-    match expr.node {\n+    match expr.kind {\n         ast::ExprKind::Let(ref pat, ref cond) => (Some(pat), cond),\n         _ => (None, expr),\n     }\n }\n \n // FIXME: Refactor this.\n fn to_control_flow(expr: &ast::Expr, expr_type: ExprType) -> Option<ControlFlow<'_>> {\n-    match expr.node {\n+    match expr.kind {\n         ast::ExprKind::If(ref cond, ref if_block, ref else_block) => {\n             let (pat, cond) = extract_pats_and_cond(cond);\n             Some(ControlFlow::new_if(\n@@ -748,7 +748,7 @@ impl<'a> ControlFlow<'a> {\n         let else_block = self.else_block?;\n         let fixed_cost = self.keyword.len() + \"  {  } else {  }\".len();\n \n-        if let ast::ExprKind::Block(ref else_node, _) = else_block.node {\n+        if let ast::ExprKind::Block(ref else_node, _) = else_block.kind {\n             if !is_simple_block(self.block, None, context.source_map)\n                 || !is_simple_block(else_node, None, context.source_map)\n                 || pat_expr_str.contains('\\n')\n@@ -1014,7 +1014,7 @@ impl<'a> Rewrite for ControlFlow<'a> {\n         if let Some(else_block) = self.else_block {\n             let shape = Shape::indented(shape.indent, context.config);\n             let mut last_in_chain = false;\n-            let rewrite = match else_block.node {\n+            let rewrite = match else_block.kind {\n                 // If the else expression is another if-else expression, prevent it\n                 // from being formatted on a single line.\n                 // Note how we're passing the original shape, as the\n@@ -1149,7 +1149,7 @@ pub(crate) fn is_empty_block(\n }\n \n pub(crate) fn stmt_is_expr(stmt: &ast::Stmt) -> bool {\n-    match stmt.node {\n+    match stmt.kind {\n         ast::StmtKind::Expr(..) => true,\n         _ => false,\n     }\n@@ -1168,7 +1168,7 @@ pub(crate) fn rewrite_literal(\n     l: &ast::Lit,\n     shape: Shape,\n ) -> Option<String> {\n-    match l.node {\n+    match l.kind {\n         ast::LitKind::Str(_, ast::StrStyle::Cooked) => rewrite_string_lit(context, l.span, shape),\n         _ => wrap_str(\n             context.snippet(l.span).to_owned(),\n@@ -1253,7 +1253,7 @@ pub(crate) fn rewrite_call(\n }\n \n pub(crate) fn is_simple_expr(expr: &ast::Expr) -> bool {\n-    match expr.node {\n+    match expr.kind {\n         ast::ExprKind::Lit(..) => true,\n         ast::ExprKind::Path(ref qself, ref path) => qself.is_none() && path.segments.len() <= 1,\n         ast::ExprKind::AddrOf(_, ref expr)\n@@ -1279,7 +1279,7 @@ pub(crate) fn can_be_overflowed_expr(\n     expr: &ast::Expr,\n     args_len: usize,\n ) -> bool {\n-    match expr.node {\n+    match expr.kind {\n         _ if !expr.attrs.is_empty() => false,\n         ast::ExprKind::Match(..) => {\n             (context.use_block_indent() && args_len == 1)\n@@ -1324,7 +1324,7 @@ pub(crate) fn can_be_overflowed_expr(\n }\n \n pub(crate) fn is_nested_call(expr: &ast::Expr) -> bool {\n-    match expr.node {\n+    match expr.kind {\n         ast::ExprKind::Call(..) | ast::ExprKind::Mac(..) => true,\n         ast::ExprKind::AddrOf(_, ref expr)\n         | ast::ExprKind::Box(ref expr)\n@@ -1380,7 +1380,7 @@ fn rewrite_paren(\n         post_comment = rewrite_missing_comment(post_span, shape, context)?;\n \n         // Remove nested parens if there are no comments.\n-        if let ast::ExprKind::Paren(ref subsubexpr) = subexpr.node {\n+        if let ast::ExprKind::Paren(ref subsubexpr) = subexpr.kind {\n             if remove_nested_parens && pre_comment.is_empty() && post_comment.is_empty() {\n                 span = subexpr.span;\n                 subexpr = subsubexpr;\n@@ -1985,7 +1985,7 @@ fn rewrite_expr_addrof(\n }\n \n pub(crate) fn is_method_call(expr: &ast::Expr) -> bool {\n-    match expr.node {\n+    match expr.kind {\n         ast::ExprKind::MethodCall(..) => true,\n         ast::ExprKind::AddrOf(_, ref expr)\n         | ast::ExprKind::Box(ref expr)"}, {"sha": "3635f078e967e558f171892748a77b1bc0215e6b", "filename": "src/formatting.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=383306e5feaddf71314653a7a39018bbe03e080e", "patch": "@@ -8,7 +8,7 @@ use std::time::{Duration, Instant};\n \n use syntax::ast;\n use syntax::errors::emitter::{ColorConfig, Emitter};\n-use syntax::errors::{DiagnosticBuilder, Handler};\n+use syntax::errors::{Diagnostic, DiagnosticBuilder, Handler};\n use syntax::parse::{self, ParseSess};\n use syntax::source_map::{FilePathMapping, SourceMap, Span, DUMMY_SP};\n \n@@ -640,12 +640,6 @@ fn parse_crate(\n         .map(|mut parser| {\n             parser.recurse_into_file_modules = false;\n             parser\n-        })\n-        .map_err(|diags| {\n-            diags\n-                .into_iter()\n-                .map(|d| DiagnosticBuilder::new_diagnostic(&parse_session.span_diagnostic, d))\n-                .collect::<Vec<_>>()\n         }),\n     };\n \n@@ -659,7 +653,13 @@ fn parse_crate(\n             let mut parser = AssertUnwindSafe(parser);\n             catch_unwind(move || parser.0.parse_crate_mod().map_err(|d| vec![d]))\n         }\n-        Err(db) => Ok(Err(db)),\n+        Err(diagnostics) => {\n+            for diagnostic in diagnostics {\n+                parse_session.span_diagnostic.emit_diagnostic(&diagnostic);\n+            }\n+            report.add_parsing_error();\n+            return Err(ErrorKind::ParseError);\n+        }\n     };\n \n     match result {\n@@ -687,7 +687,7 @@ fn parse_crate(\n struct SilentEmitter;\n \n impl Emitter for SilentEmitter {\n-    fn emit_diagnostic(&mut self, _db: &DiagnosticBuilder<'_>) {}\n+    fn emit_diagnostic(&mut self, _db: &Diagnostic) {}\n }\n \n fn silent_emitter() -> Box<SilentEmitter> {"}, {"sha": "139301f537ad8f6509daac9f13a2a0c3b0292889", "filename": "src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=383306e5feaddf71314653a7a39018bbe03e080e", "patch": "@@ -287,7 +287,7 @@ impl UseTree {\n         context: &RewriteContext<'_>,\n         item: &ast::Item,\n     ) -> Option<UseTree> {\n-        match item.node {\n+        match item.kind {\n             ast::ItemKind::Use(ref use_tree) => Some(\n                 UseTree::from_ast(\n                     context,"}, {"sha": "e10265df0effe0b4e98b40cfb0ed4a4cd56d6539", "filename": "src/items.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=383306e5feaddf71314653a7a39018bbe03e080e", "patch": "@@ -595,7 +595,7 @@ impl<'a> FmtVisitor<'a> {\n                 }\n             }\n \n-            buffer.sort_by(|(_, a), (_, b)| match (&a.node, &b.node) {\n+            buffer.sort_by(|(_, a), (_, b)| match (&a.kind, &b.kind) {\n                 (TyAlias(..), TyAlias(..))\n                 | (Const(..), Const(..))\n                 | (Macro(..), Macro(..))\n@@ -616,14 +616,14 @@ impl<'a> FmtVisitor<'a> {\n                 // different impl items.\n                 if prev_kind\n                     .as_ref()\n-                    .map_or(false, |prev_kind| need_empty_line(prev_kind, &item.node))\n+                    .map_or(false, |prev_kind| need_empty_line(prev_kind, &item.kind))\n                 {\n                     self.push_str(\"\\n\");\n                 }\n                 let indent_str = self.block_indent.to_string_with_newline(self.config);\n                 self.push_str(&indent_str);\n                 self.push_str(buf.trim());\n-                prev_kind = Some(item.node.clone());\n+                prev_kind = Some(item.kind.clone());\n             }\n         } else {\n             for item in items {\n@@ -638,7 +638,7 @@ pub(crate) fn format_impl(\n     item: &ast::Item,\n     offset: Indent,\n ) -> Option<String> {\n-    if let ast::ItemKind::Impl(_, _, _, ref generics, _, ref self_ty, ref items) = item.node {\n+    if let ast::ItemKind::Impl(_, _, _, ref generics, _, ref self_ty, ref items) = item.kind {\n         let mut result = String::with_capacity(128);\n         let ref_and_type = format_impl_ref_and_type(context, item, offset)?;\n         let sep = offset.to_string_with_newline(context.config);\n@@ -794,7 +794,7 @@ fn format_impl_ref_and_type(\n         ref trait_ref,\n         ref self_ty,\n         _,\n-    ) = item.node\n+    ) = item.kind\n     {\n         let mut result = String::with_capacity(128);\n \n@@ -928,7 +928,7 @@ impl<'a> StructParts<'a> {\n     }\n \n     pub(crate) fn from_item(item: &'a ast::Item) -> Self {\n-        let (prefix, def, generics) = match item.node {\n+        let (prefix, def, generics) = match item.kind {\n             ast::ItemKind::Struct(ref def, ref generics) => (\"struct \", def, generics),\n             ast::ItemKind::Union(ref def, ref generics) => (\"union \", def, generics),\n             _ => unreachable!(),\n@@ -972,7 +972,7 @@ pub(crate) fn format_trait(\n         ref generics,\n         ref generic_bounds,\n         ref trait_items,\n-    ) = item.node\n+    ) = item.kind\n     {\n         let mut result = String::with_capacity(128);\n         let header = format!(\n@@ -1656,7 +1656,7 @@ pub(crate) struct StaticParts<'a> {\n \n impl<'a> StaticParts<'a> {\n     pub(crate) fn from_item(item: &'a ast::Item) -> Self {\n-        let (prefix, ty, mutability, expr) = match item.node {\n+        let (prefix, ty, mutability, expr) = match item.kind {\n             ast::ItemKind::Static(ref ty, mutability, ref expr) => (\"static\", ty, mutability, expr),\n             ast::ItemKind::Const(ref ty, ref expr) => {\n                 (\"const\", ty, ast::Mutability::Immutable, expr)\n@@ -1676,7 +1676,7 @@ impl<'a> StaticParts<'a> {\n     }\n \n     pub(crate) fn from_trait_item(ti: &'a ast::TraitItem) -> Self {\n-        let (ty, expr_opt) = match ti.node {\n+        let (ty, expr_opt) = match ti.kind {\n             ast::TraitItemKind::Const(ref ty, ref expr_opt) => (ty, expr_opt),\n             _ => unreachable!(),\n         };\n@@ -1693,7 +1693,7 @@ impl<'a> StaticParts<'a> {\n     }\n \n     pub(crate) fn from_impl_item(ii: &'a ast::ImplItem) -> Self {\n-        let (ty, expr) = match ii.node {\n+        let (ty, expr) = match ii.kind {\n             ast::ImplItemKind::Const(ref ty, ref expr) => (ty, expr),\n             _ => unreachable!(),\n         };\n@@ -1874,7 +1874,7 @@ impl Rewrite for ast::FunctionRetTy {\n }\n \n fn is_empty_infer(ty: &ast::Ty, pat_span: Span) -> bool {\n-    match ty.node {\n+    match ty.kind {\n         ast::TyKind::Infer => ty.span.hi() == pat_span.hi(),\n         _ => false,\n     }\n@@ -2048,15 +2048,15 @@ pub(crate) fn span_lo_for_param(param: &ast::Param) -> BytePos {\n }\n \n pub(crate) fn span_hi_for_param(context: &RewriteContext<'_>, param: &ast::Param) -> BytePos {\n-    match param.ty.node {\n+    match param.ty.kind {\n         ast::TyKind::Infer if context.snippet(param.ty.span) == \"_\" => param.ty.span.hi(),\n         ast::TyKind::Infer if is_named_param(param) => param.pat.span.hi(),\n         _ => param.ty.span.hi(),\n     }\n }\n \n pub(crate) fn is_named_param(param: &ast::Param) -> bool {\n-    if let ast::PatKind::Ident(_, ident, _) = param.pat.node {\n+    if let ast::PatKind::Ident(_, ident, _) = param.pat.kind {\n         ident.name != symbol::kw::Invalid\n     } else {\n         true\n@@ -2182,7 +2182,7 @@ fn rewrite_fn_base(\n         indent,\n         param_indent,\n         params_span,\n-        fd.c_variadic,\n+        fd.c_variadic(),\n     )?;\n \n     let put_params_in_block = match context.config.indent_style() {\n@@ -3024,7 +3024,7 @@ impl Rewrite for ast::ForeignItem {\n         // FIXME: this may be a faulty span from libsyntax.\n         let span = mk_sp(self.span.lo(), self.span.hi() - BytePos(1));\n \n-        let item_str = match self.node {\n+        let item_str = match self.kind {\n             ast::ForeignItemKind::Fn(ref fn_decl, ref generics) => rewrite_fn_base(\n                 context,\n                 shape.indent,\n@@ -3146,21 +3146,21 @@ pub(crate) fn rewrite_extern_crate(\n \n /// Returns `true` for `mod foo;`, false for `mod foo { .. }`.\n pub(crate) fn is_mod_decl(item: &ast::Item) -> bool {\n-    match item.node {\n+    match item.kind {\n         ast::ItemKind::Mod(ref m) => m.inner.hi() != item.span.hi(),\n         _ => false,\n     }\n }\n \n pub(crate) fn is_use_item(item: &ast::Item) -> bool {\n-    match item.node {\n+    match item.kind {\n         ast::ItemKind::Use(_) => true,\n         _ => false,\n     }\n }\n \n pub(crate) fn is_extern_crate(item: &ast::Item) -> bool {\n-    match item.node {\n+    match item.kind {\n         ast::ItemKind::ExternCrate(..) => true,\n         _ => false,\n     }"}, {"sha": "8f509dd12c8b2744051e9fb2dbcb4e04fa119111", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=383306e5feaddf71314653a7a39018bbe03e080e", "patch": "@@ -1196,7 +1196,7 @@ pub(crate) fn convert_try_mac(mac: &ast::Mac, context: &RewriteContext<'_>) -> O\n \n         Some(ast::Expr {\n             id: ast::NodeId::root(), // dummy value\n-            node: ast::ExprKind::Try(parser.parse_expr().ok()?),\n+            kind: ast::ExprKind::Try(parser.parse_expr().ok()?),\n             span: mac.span, // incorrect span, but shouldn't matter too much\n             attrs: ThinVec::new(),\n         })"}, {"sha": "fcfb8055f0186086de2e1db12a67fc9374701a67", "filename": "src/matches.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=383306e5feaddf71314653a7a39018bbe03e080e", "patch": "@@ -141,7 +141,7 @@ fn arm_comma(config: &Config, body: &ast::Expr, is_last: bool) -> &'static str {\n         \"\"\n     } else if config.match_block_trailing_comma() {\n         \",\"\n-    } else if let ast::ExprKind::Block(ref block, _) = body.node {\n+    } else if let ast::ExprKind::Block(ref block, _) = body.kind {\n         if let ast::BlockCheckMode::Default = block.rules {\n             \"\"\n         } else {\n@@ -272,7 +272,7 @@ fn block_can_be_flattened<'a>(\n     context: &RewriteContext<'_>,\n     expr: &'a ast::Expr,\n ) -> Option<&'a ast::Block> {\n-    match expr.node {\n+    match expr.kind {\n         ast::ExprKind::Block(ref block, _)\n             if !is_unsafe_block(block)\n                 && !context.inside_macro()\n@@ -296,8 +296,8 @@ fn flatten_arm_body<'a>(\n         |expr| !context.config.force_multiline_blocks() && can_flatten_block_around_this(expr);\n \n     if let Some(ref block) = block_can_be_flattened(context, body) {\n-        if let ast::StmtKind::Expr(ref expr) = block.stmts[0].node {\n-            if let ast::ExprKind::Block(..) = expr.node {\n+        if let ast::StmtKind::Expr(ref expr) = block.stmts[0].kind {\n+            if let ast::ExprKind::Block(..) = expr.kind {\n                 flatten_arm_body(context, expr, None)\n             } else {\n                 let cond_becomes_muti_line = opt_shape\n@@ -331,7 +331,7 @@ fn rewrite_match_body(\n         body,\n         shape.offset_left(extra_offset(pats_str, shape) + 4),\n     );\n-    let (is_block, is_empty_block) = if let ast::ExprKind::Block(ref block, _) = body.node {\n+    let (is_block, is_empty_block) = if let ast::ExprKind::Block(ref block, _) = body.kind {\n         (\n             true,\n             is_empty_block(block, Some(&body.attrs), context.source_map),\n@@ -548,7 +548,7 @@ fn nop_block_collapse(block_str: Option<String>, budget: usize) -> Option<String\n }\n \n fn can_flatten_block_around_this(body: &ast::Expr) -> bool {\n-    match body.node {\n+    match body.kind {\n         // We do not allow `if` to stay on the same line, since we could easily mistake\n         // `pat => if cond { ... }` and `pat if cond => { ... }`.\n         ast::ExprKind::If(..) => false,"}, {"sha": "568faa7194b56b5fab24254997c45dc095c68d14", "filename": "src/modules.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=383306e5feaddf71314653a7a39018bbe03e080e", "patch": "@@ -104,7 +104,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n             visitor::CfgIfVisitor::new(self.parse_sess, self.directory.to_syntax_directory());\n         visitor.visit_item(&item);\n         for module_item in visitor.mods() {\n-            if let ast::ItemKind::Mod(ref sub_mod) = module_item.item.node {\n+            if let ast::ItemKind::Mod(ref sub_mod) = module_item.item.kind {\n                 self.visit_sub_mod(&module_item.item, Cow::Owned(sub_mod.clone()))?;\n             }\n         }\n@@ -119,7 +119,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                 continue;\n             }\n \n-            if let ast::ItemKind::Mod(ref sub_mod) = item.node {\n+            if let ast::ItemKind::Mod(ref sub_mod) = item.kind {\n                 self.visit_sub_mod(&item, Cow::Owned(sub_mod.clone()))?;\n             }\n         }\n@@ -133,7 +133,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                 self.visit_cfg_if(Cow::Borrowed(item))?;\n             }\n \n-            if let ast::ItemKind::Mod(ref sub_mod) = item.node {\n+            if let ast::ItemKind::Mod(ref sub_mod) = item.kind {\n                 self.visit_sub_mod(item, Cow::Borrowed(sub_mod))?;\n             }\n         }\n@@ -476,7 +476,7 @@ fn parse_mod_items<'a>(parser: &mut parser::Parser<'a>, inner_lo: Span) -> PResu\n }\n \n fn is_cfg_if(item: &ast::Item) -> bool {\n-    match item.node {\n+    match item.kind {\n         ast::ItemKind::Mac(ref mac) => {\n             if let Some(first_segment) = mac.path.segments.first() {\n                 if first_segment.ident.name == Symbol::intern(\"cfg_if\") {"}, {"sha": "e9223ce964483f6022b71f7ac216ad8d3e636d21", "filename": "src/modules/visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fmodules%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fmodules%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules%2Fvisitor.rs?ref=383306e5feaddf71314653a7a39018bbe03e080e", "patch": "@@ -98,7 +98,7 @@ impl<'a, 'ast: 'a> CfgIfVisitor<'a> {\n                         );\n                     }\n                 };\n-                if let ast::ItemKind::Mod(..) = item.node {\n+                if let ast::ItemKind::Mod(..) = item.kind {\n                     self.mods.push(ModItem { item });\n                 }\n             }\n@@ -137,23 +137,23 @@ impl PathVisitor {\n \n impl<'ast> MetaVisitor<'ast> for PathVisitor {\n     fn visit_meta_name_value(&mut self, meta_item: &'ast ast::MetaItem, lit: &'ast ast::Lit) {\n-        if meta_item.check_name(Symbol::intern(\"path\")) && lit.node.is_str() {\n+        if meta_item.check_name(Symbol::intern(\"path\")) && lit.kind.is_str() {\n             self.paths.push(lit_to_str(lit));\n         }\n     }\n }\n \n #[cfg(not(windows))]\n fn lit_to_str(lit: &ast::Lit) -> String {\n-    match lit.node {\n+    match lit.kind {\n         ast::LitKind::Str(symbol, ..) => symbol.to_string(),\n         _ => unreachable!(),\n     }\n }\n \n #[cfg(windows)]\n fn lit_to_str(lit: &ast::Lit) -> String {\n-    match lit.node {\n+    match lit.kind {\n         ast::LitKind::Str(symbol, ..) => symbol.as_str().replace(\"/\", \"\\\\\"),\n         _ => unreachable!(),\n     }"}, {"sha": "3b85c0b8e575a35d99e698d5d59888d445b93103", "filename": "src/overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/383306e5feaddf71314653a7a39018bbe03e080e/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383306e5feaddf71314653a7a39018bbe03e080e/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=383306e5feaddf71314653a7a39018bbe03e080e", "patch": "@@ -126,7 +126,7 @@ impl<'a> OverflowableItem<'a> {\n             OverflowableItem::MacroArg(MacroArg::Expr(expr)) => is_simple_expr(expr),\n             OverflowableItem::NestedMetaItem(nested_meta_item) => match nested_meta_item {\n                 ast::NestedMetaItem::Literal(..) => true,\n-                ast::NestedMetaItem::MetaItem(ref meta_item) => match meta_item.node {\n+                ast::NestedMetaItem::MetaItem(ref meta_item) => match meta_item.kind {\n                     ast::MetaItemKind::Word => true,\n                     _ => false,\n                 },\n@@ -399,7 +399,7 @@ impl<'a> Context<'a> {\n         let last_item = self.last_item()?;\n         let rewrite = match last_item {\n             OverflowableItem::Expr(ref expr) => {\n-                match expr.node {\n+                match expr.kind {\n                     // When overflowing the closure which consists of a single control flow\n                     // expression, force to use block if its condition uses multi line.\n                     ast::ExprKind::Closure(..) => {"}, {"sha": "45132c1f9f653100cd75bc471eb69e7500d69f1e", "filename": "src/pairs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fpairs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fpairs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpairs.rs?ref=383306e5feaddf71314653a7a39018bbe03e080e", "patch": "@@ -254,7 +254,7 @@ impl FlattenPair for ast::Expr {\n         context: &RewriteContext<'_>,\n         shape: Shape,\n     ) -> Option<PairList<'_, '_, ast::Expr>> {\n-        let top_op = match self.node {\n+        let top_op = match self.kind {\n             ast::ExprKind::Binary(op, _, _) => op.node,\n             _ => return None,\n         };\n@@ -285,7 +285,7 @@ impl FlattenPair for ast::Expr {\n         let mut separators = vec![];\n         let mut node = self;\n         loop {\n-            match node.node {\n+            match node.kind {\n                 ast::ExprKind::Binary(op, ref lhs, _) if op.node == top_op => {\n                     stack.push(node);\n                     node = lhs;\n@@ -295,7 +295,7 @@ impl FlattenPair for ast::Expr {\n                     let rw = default_rewrite(node, op_len, list.is_empty());\n                     list.push((node, rw));\n                     if let Some(pop) = stack.pop() {\n-                        match pop.node {\n+                        match pop.kind {\n                             ast::ExprKind::Binary(op, _, ref rhs) => {\n                                 separators.push(op.node.to_string());\n                                 node = rhs;"}, {"sha": "e81631d1662458784a6018c8f4173eef4900931d", "filename": "src/patterns.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=383306e5feaddf71314653a7a39018bbe03e080e", "patch": "@@ -36,7 +36,7 @@ pub(crate) fn is_short_pattern(pat: &ast::Pat, pat_str: &str) -> bool {\n }\n \n fn is_short_pattern_inner(pat: &ast::Pat) -> bool {\n-    match pat.node {\n+    match pat.kind {\n         ast::PatKind::Rest | ast::PatKind::Wild | ast::PatKind::Lit(_) => true,\n         ast::PatKind::Ident(_, _, ref pat) => pat.is_none(),\n         ast::PatKind::Struct(..)\n@@ -57,7 +57,7 @@ fn is_short_pattern_inner(pat: &ast::Pat) -> bool {\n \n impl Rewrite for Pat {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n-        match self.node {\n+        match self.kind {\n             PatKind::Or(ref pats) => {\n                 let pat_strs = pats\n                     .iter()\n@@ -335,7 +335,7 @@ impl<'a> Spanned for TuplePatField<'a> {\n impl<'a> TuplePatField<'a> {\n     fn is_dotdot(&self) -> bool {\n         match self {\n-            TuplePatField::Pat(pat) => match pat.node {\n+            TuplePatField::Pat(pat) => match pat.kind {\n                 ast::PatKind::Rest => true,\n                 _ => false,\n             },\n@@ -350,7 +350,7 @@ pub(crate) fn can_be_overflowed_pat(\n     len: usize,\n ) -> bool {\n     match *pat {\n-        TuplePatField::Pat(pat) => match pat.node {\n+        TuplePatField::Pat(pat) => match pat.kind {\n             ast::PatKind::Path(..)\n             | ast::PatKind::Tuple(..)\n             | ast::PatKind::Struct(..)"}, {"sha": "5a6a45118b930cd5bd6029e491dd7b488a496157", "filename": "src/reorder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383306e5feaddf71314653a7a39018bbe03e080e/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383306e5feaddf71314653a7a39018bbe03e080e/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=383306e5feaddf71314653a7a39018bbe03e080e", "patch": "@@ -23,7 +23,7 @@ use crate::visitor::FmtVisitor;\n \n /// Choose the ordering between the given two items.\n fn compare_items(a: &ast::Item, b: &ast::Item) -> Ordering {\n-    match (&a.node, &b.node) {\n+    match (&a.kind, &b.kind) {\n         (&ast::ItemKind::Mod(..), &ast::ItemKind::Mod(..)) => {\n             a.ident.as_str().cmp(&b.ident.as_str())\n         }\n@@ -68,7 +68,7 @@ fn rewrite_reorderable_item(\n     item: &ast::Item,\n     shape: Shape,\n ) -> Option<String> {\n-    match item.node {\n+    match item.kind {\n         ast::ItemKind::ExternCrate(..) => rewrite_extern_crate(context, item, shape),\n         ast::ItemKind::Mod(..) => rewrite_mod(context, item, shape),\n         _ => None,\n@@ -83,7 +83,7 @@ fn rewrite_reorderable_items(\n     shape: Shape,\n     span: Span,\n ) -> Option<String> {\n-    match reorderable_items[0].node {\n+    match reorderable_items[0].kind {\n         // FIXME: Remove duplicated code.\n         ast::ItemKind::Use(..) => {\n             let mut normalized_items: Vec<_> = reorderable_items\n@@ -164,7 +164,7 @@ enum ReorderableItemKind {\n \n impl ReorderableItemKind {\n     fn from(item: &ast::Item) -> Self {\n-        match item.node {\n+        match item.kind {\n             _ if contains_macro_use_attr(item) | contains_skip(&item.attrs) => {\n                 ReorderableItemKind::Other\n             }"}, {"sha": "8872e6df2da0d394ba0fb49ebd6f57f37d6e4c48", "filename": "src/spanned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=383306e5feaddf71314653a7a39018bbe03e080e", "patch": "@@ -63,7 +63,7 @@ implement_spanned!(ast::ImplItem);\n \n impl Spanned for ast::Stmt {\n     fn span(&self) -> Span {\n-        match self.node {\n+        match self.kind {\n             ast::StmtKind::Local(ref local) => mk_sp(local.span().lo(), self.span.hi()),\n             ast::StmtKind::Item(ref item) => mk_sp(item.span().lo(), self.span.hi()),\n             ast::StmtKind::Expr(ref expr) | ast::StmtKind::Semi(ref expr) => {"}, {"sha": "a7aa6de0b134e86d56e32c4e6449f2b7e814b595", "filename": "src/stmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstmt.rs?ref=383306e5feaddf71314653a7a39018bbe03e080e", "patch": "@@ -27,7 +27,7 @@ impl<'a> Stmt<'a> {\n     }\n \n     pub(crate) fn to_item(&self) -> Option<&ast::Item> {\n-        match self.inner.node {\n+        match self.inner.kind {\n             ast::StmtKind::Item(ref item) => Some(&**item),\n             _ => None,\n         }\n@@ -57,8 +57,8 @@ impl<'a> Stmt<'a> {\n             return false;\n         }\n \n-        match self.as_ast_node().node {\n-            ast::StmtKind::Expr(ref expr) => match expr.node {\n+        match self.as_ast_node().kind {\n+            ast::StmtKind::Expr(ref expr) => match expr.kind {\n                 ast::ExprKind::Ret(..) | ast::ExprKind::Continue(..) | ast::ExprKind::Break(..) => {\n                     false\n                 }\n@@ -94,7 +94,7 @@ fn format_stmt(\n ) -> Option<String> {\n     skip_out_of_file_lines_range!(context, stmt.span());\n \n-    let result = match stmt.node {\n+    let result = match stmt.kind {\n         ast::StmtKind::Local(ref local) => local.rewrite(context, shape),\n         ast::StmtKind::Expr(ref ex) | ast::StmtKind::Semi(ref ex) => {\n             let suffix = if semicolon_for_stmt(context, stmt) {"}, {"sha": "3efe80fdb81c2963a9004d3cba1b40d79ea2a4cb", "filename": "src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/383306e5feaddf71314653a7a39018bbe03e080e/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383306e5feaddf71314653a7a39018bbe03e080e/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=383306e5feaddf71314653a7a39018bbe03e080e", "patch": "@@ -613,7 +613,7 @@ impl Rewrite for ast::TraitRef {\n \n impl Rewrite for ast::Ty {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n-        match self.node {\n+        match self.kind {\n             ast::TyKind::TraitObject(ref bounds, tobj_syntax) => {\n                 // we have to consider 'dyn' keyword is used or not!!!\n                 let is_dyn = tobj_syntax == ast::TraitObjectSyntax::Dyn;\n@@ -800,7 +800,7 @@ fn rewrite_bare_fn(\n     let rewrite = format_function_type(\n         bare_fn.decl.inputs.iter(),\n         &bare_fn.decl.output,\n-        bare_fn.decl.c_variadic,\n+        bare_fn.decl.c_variadic(),\n         span,\n         context,\n         func_ty_shape,\n@@ -891,7 +891,7 @@ pub(crate) fn can_be_overflowed_type(\n     ty: &ast::Ty,\n     len: usize,\n ) -> bool {\n-    match ty.node {\n+    match ty.kind {\n         ast::TyKind::Tup(..) => context.use_block_indent() && len == 1,\n         ast::TyKind::Rptr(_, ref mutty) | ast::TyKind::Ptr(ref mutty) => {\n             can_be_overflowed_type(context, &*mutty.ty, len)"}, {"sha": "12e3d943417da0c9103f04a9ad0a26d86b0d0550", "filename": "src/utils.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/383306e5feaddf71314653a7a39018bbe03e080e/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383306e5feaddf71314653a7a39018bbe03e080e/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=383306e5feaddf71314653a7a39018bbe03e080e", "patch": "@@ -248,7 +248,7 @@ pub(crate) fn last_line_extendable(s: &str) -> bool {\n \n #[inline]\n fn is_skip(meta_item: &MetaItem) -> bool {\n-    match meta_item.node {\n+    match meta_item.kind {\n         MetaItemKind::Word => {\n             let path_str = meta_item.path.to_string();\n             path_str == skip_annotation().as_str() || path_str == depr_skip_annotation().as_str()\n@@ -277,7 +277,7 @@ pub(crate) fn contains_skip(attrs: &[Attribute]) -> bool {\n \n #[inline]\n pub(crate) fn semicolon_for_expr(context: &RewriteContext<'_>, expr: &ast::Expr) -> bool {\n-    match expr.node {\n+    match expr.kind {\n         ast::ExprKind::Ret(..) | ast::ExprKind::Continue(..) | ast::ExprKind::Break(..) => {\n             context.config.trailing_semicolon()\n         }\n@@ -287,8 +287,8 @@ pub(crate) fn semicolon_for_expr(context: &RewriteContext<'_>, expr: &ast::Expr)\n \n #[inline]\n pub(crate) fn semicolon_for_stmt(context: &RewriteContext<'_>, stmt: &ast::Stmt) -> bool {\n-    match stmt.node {\n-        ast::StmtKind::Semi(ref expr) => match expr.node {\n+    match stmt.kind {\n+        ast::StmtKind::Semi(ref expr) => match expr.kind {\n             ast::ExprKind::While(..) | ast::ExprKind::Loop(..) | ast::ExprKind::ForLoop(..) => {\n                 false\n             }\n@@ -304,7 +304,7 @@ pub(crate) fn semicolon_for_stmt(context: &RewriteContext<'_>, stmt: &ast::Stmt)\n \n #[inline]\n pub(crate) fn stmt_expr(stmt: &ast::Stmt) -> Option<&ast::Expr> {\n-    match stmt.node {\n+    match stmt.kind {\n         ast::StmtKind::Expr(ref expr) => Some(expr),\n         _ => None,\n     }\n@@ -422,7 +422,7 @@ pub(crate) fn colon_spaces(config: &Config) -> &'static str {\n \n #[inline]\n pub(crate) fn left_most_sub_expr(e: &ast::Expr) -> &ast::Expr {\n-    match e.node {\n+    match e.kind {\n         ast::ExprKind::Call(ref e, _)\n         | ast::ExprKind::Binary(_, ref e, _)\n         | ast::ExprKind::Cast(ref e, _)\n@@ -450,7 +450,7 @@ pub(crate) fn first_line_ends_with(s: &str, c: char) -> bool {\n // States whether an expression's last line exclusively consists of closing\n // parens, braces, and brackets in its idiomatic formatting.\n pub(crate) fn is_block_expr(context: &RewriteContext<'_>, expr: &ast::Expr, repr: &str) -> bool {\n-    match expr.node {\n+    match expr.kind {\n         ast::ExprKind::Mac(..)\n         | ast::ExprKind::Call(..)\n         | ast::ExprKind::MethodCall(..)"}, {"sha": "15490798a6e6eeade59185366473057c15813e4e", "filename": "src/visitor.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383306e5feaddf71314653a7a39018bbe03e080e/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=383306e5feaddf71314653a7a39018bbe03e080e", "patch": "@@ -112,7 +112,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             return;\n         }\n \n-        match stmt.as_ast_node().node {\n+        match stmt.as_ast_node().kind {\n             ast::StmtKind::Item(ref item) => {\n                 self.visit_item(item);\n                 // Handle potential `;` after the item.\n@@ -397,7 +397,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         let skip_context_saved = self.skip_context.clone();\n         self.skip_context.update_with_attrs(&attrs);\n \n-        let should_visit_node_again = match item.node {\n+        let should_visit_node_again = match item.kind {\n             // For use/extern crate items, skip rewriting attributes but check for a skip attribute.\n             ast::ItemKind::Use(..) | ast::ItemKind::ExternCrate(_) => {\n                 if contains_skip(attrs) {\n@@ -439,7 +439,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         };\n \n         if should_visit_node_again {\n-            match item.node {\n+            match item.kind {\n                 ast::ItemKind::Use(ref tree) => self.format_import(item, tree),\n                 ast::ItemKind::Impl(..) => {\n                     let block_indent = self.block_indent;\n@@ -557,7 +557,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             return;\n         }\n \n-        match ti.node {\n+        match ti.kind {\n             ast::TraitItemKind::Const(..) => self.visit_static(&StaticParts::from_trait_item(ti)),\n             ast::TraitItemKind::Method(ref sig, None) => {\n                 let indent = self.block_indent;\n@@ -601,7 +601,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             return;\n         }\n \n-        match ii.node {\n+        match ii.kind {\n             ast::ImplItemKind::Method(ref sig, ref body) => {\n                 let inner_attrs = inner_attributes(&ii.attrs);\n                 self.visit_fn("}]}