{"sha": "66dc08ad604cdb75cbc2a89d3551c51fbc6cc20e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ZGMwOGFkNjA0Y2RiNzVjYmMyYTg5ZDM1NTFjNTFmYmM2Y2MyMGU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-13T16:51:32Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-15T07:42:31Z"}, "message": "Make sure that all file loading happens via SourceMap\n\nThat way, callers don't need to repeat \"let's add this to sm manually\nfor tracking dependencies\" trick.\n\nIt should make it easier to switch to using `FileLoader` for binary\nfiles in the future as well", "tree": {"sha": "08ea2138360902194a89b8955ac6399b0a7f903c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08ea2138360902194a89b8955ac6399b0a7f903c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66dc08ad604cdb75cbc2a89d3551c51fbc6cc20e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66dc08ad604cdb75cbc2a89d3551c51fbc6cc20e", "html_url": "https://github.com/rust-lang/rust/commit/66dc08ad604cdb75cbc2a89d3551c51fbc6cc20e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66dc08ad604cdb75cbc2a89d3551c51fbc6cc20e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e9a136fcec5eb78f09a14dfd072a51ae2550269", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e9a136fcec5eb78f09a14dfd072a51ae2550269", "html_url": "https://github.com/rust-lang/rust/commit/9e9a136fcec5eb78f09a14dfd072a51ae2550269"}], "stats": {"total": 70, "additions": 36, "deletions": 34}, "files": [{"sha": "e978976438367270f79789de6784d6ca3517bd44", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/66dc08ad604cdb75cbc2a89d3551c51fbc6cc20e/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66dc08ad604cdb75cbc2a89d3551c51fbc6cc20e/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=66dc08ad604cdb75cbc2a89d3551c51fbc6cc20e", "patch": "@@ -25,7 +25,6 @@ use syntax_pos::{Span, DUMMY_SP, FileName};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n-use std::fs;\n use std::io::ErrorKind;\n use std::{iter, mem};\n use std::ops::DerefMut;\n@@ -1239,13 +1238,11 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                     }\n \n                     let filename = self.cx.resolve_path(&*file.as_str(), it.span());\n-                    match fs::read_to_string(&filename) {\n-                        Ok(src) => {\n-                            let src_interned = Symbol::intern(&src);\n-\n-                            // Add this input file to the code map to make it available as\n-                            // dependency information\n-                            self.cx.source_map().new_source_file(filename.into(), src);\n+                    match self.cx.source_map().load_file(&filename) {\n+                        Ok(source_file) => {\n+                            let src = source_file.src.as_ref()\n+                                .expect(\"freshly loaded file should have a source\");\n+                            let src_interned = Symbol::intern(src.as_str());\n \n                             let include_info = vec![\n                                 ast::NestedMetaItem::MetaItem("}, {"sha": "ceaa5ee3aa54b6121efad8014eee2b0357560422", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/66dc08ad604cdb75cbc2a89d3551c51fbc6cc20e/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66dc08ad604cdb75cbc2a89d3551c51fbc6cc20e/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=66dc08ad604cdb75cbc2a89d3551c51fbc6cc20e", "patch": "@@ -170,6 +170,26 @@ impl SourceMap {\n         Ok(self.new_source_file(filename, src))\n     }\n \n+    /// Loads source file as a binary blob.\n+    ///\n+    /// Unlike `load_file`, guarantees that no normalization like BOM-removal\n+    /// takes place.\n+    pub fn load_binary_file(&self, path: &Path) -> io::Result<Vec<u8>> {\n+        // Ideally, this should use `self.file_loader`, but it can't\n+        // deal with binary files yet.\n+        let bytes = fs::read(path)?;\n+\n+        // We need to add file to the `SourceMap`, so that it is present\n+        // in dep-info. There's also an edge case that file might be both\n+        // loaded as a binary via `include_bytes!` and as proper `SourceFile`\n+        // via `mod`, so we try to use real file contents and not just an\n+        // empty string.\n+        let text = std::str::from_utf8(&bytes).unwrap_or(\"\")\n+            .to_string();\n+        self.new_source_file(path.to_owned().into(), text);\n+        Ok(bytes)\n+    }\n+\n     pub fn files(&self) -> MappedLockGuard<'_, Vec<Lrc<SourceFile>>> {\n         LockGuard::map(self.files.borrow(), |files| &mut files.source_files)\n     }"}, {"sha": "e008ed710e4d07e1ea270bb1aa67d4fe26170705", "filename": "src/libsyntax_ext/source_util.rs", "status": "modified", "additions": 11, "deletions": 26, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/66dc08ad604cdb75cbc2a89d3551c51fbc6cc20e/src%2Flibsyntax_ext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66dc08ad604cdb75cbc2a89d3551c51fbc6cc20e/src%2Flibsyntax_ext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fsource_util.rs?ref=66dc08ad604cdb75cbc2a89d3551c51fbc6cc20e", "patch": "@@ -9,8 +9,6 @@ use syntax::tokenstream;\n use smallvec::SmallVec;\n use syntax_pos::{self, Pos, Span};\n \n-use std::fs;\n-use std::io::ErrorKind;\n use rustc_data_structures::sync::Lrc;\n \n // These macros all relate to the file system; they either return\n@@ -114,20 +112,17 @@ pub fn expand_include_str(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::To\n         None => return DummyResult::any(sp)\n     };\n     let file = cx.resolve_path(file, sp);\n-    match fs::read_to_string(&file) {\n-        Ok(src) => {\n-            let interned_src = Symbol::intern(&src);\n-\n-            // Add this input file to the code map to make it available as\n-            // dependency information\n-            cx.source_map().new_source_file(file.into(), src);\n-\n-            base::MacEager::expr(cx.expr_str(sp, interned_src))\n+    match cx.source_map().load_binary_file(&file) {\n+        Ok(bytes) => match std::str::from_utf8(&bytes) {\n+            Ok(src) => {\n+                let interned_src = Symbol::intern(&src);\n+                base::MacEager::expr(cx.expr_str(sp, interned_src))\n+            }\n+            Err(_) => {\n+                cx.span_err(sp, &format!(\"{} wasn't a utf-8 file\", file.display()));\n+                DummyResult::any(sp)\n+            }\n         },\n-        Err(ref e) if e.kind() == ErrorKind::InvalidData => {\n-            cx.span_err(sp, &format!(\"{} wasn't a utf-8 file\", file.display()));\n-            DummyResult::any(sp)\n-        }\n         Err(e) => {\n             cx.span_err(sp, &format!(\"couldn't read {}: {}\", file.display(), e));\n             DummyResult::any(sp)\n@@ -142,18 +137,8 @@ pub fn expand_include_bytes(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::\n         None => return DummyResult::any(sp)\n     };\n     let file = cx.resolve_path(file, sp);\n-    match fs::read(&file) {\n+    match cx.source_map().load_binary_file(&file) {\n         Ok(bytes) => {\n-            // Add the contents to the source map if it contains UTF-8.\n-            let (contents, bytes) = match String::from_utf8(bytes) {\n-                Ok(s) => {\n-                    let bytes = s.as_bytes().to_owned();\n-                    (s, bytes)\n-                },\n-                Err(e) => (String::new(), e.into_bytes()),\n-            };\n-            cx.source_map().new_source_file(file.into(), contents);\n-\n             base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(Lrc::new(bytes))))\n         },\n         Err(e) => {"}]}