{"sha": "dc21daeeb88c20b6431e70fe4ef5cc416af8410d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMjFkYWVlYjg4YzIwYjY0MzFlNzBmZTRlZjVjYzQxNmFmODQxMGQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-04-30T20:34:22Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-04-30T20:34:22Z"}, "message": "borrowck: fix critical bug prevent us from ever using write guards :)", "tree": {"sha": "4ef3a3dc23df54f38ca2c3ec4fcef87713fada3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ef3a3dc23df54f38ca2c3ec4fcef87713fada3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc21daeeb88c20b6431e70fe4ef5cc416af8410d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc21daeeb88c20b6431e70fe4ef5cc416af8410d", "html_url": "https://github.com/rust-lang/rust/commit/dc21daeeb88c20b6431e70fe4ef5cc416af8410d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc21daeeb88c20b6431e70fe4ef5cc416af8410d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "418f99111852d13e9446c70cd616e6e6780bb632", "url": "https://api.github.com/repos/rust-lang/rust/commits/418f99111852d13e9446c70cd616e6e6780bb632", "html_url": "https://github.com/rust-lang/rust/commit/418f99111852d13e9446c70cd616e6e6780bb632"}], "stats": {"total": 30, "additions": 6, "deletions": 24}, "files": [{"sha": "70da9c9380559eb86523151f0823680051e641f7", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc21daeeb88c20b6431e70fe4ef5cc416af8410d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc21daeeb88c20b6431e70fe4ef5cc416af8410d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=dc21daeeb88c20b6431e70fe4ef5cc416af8410d", "patch": "@@ -357,6 +357,8 @@ pub impl<'self> CheckLoanCtxt<'self> {\n             //! Safety checks related to writes to aliasable, mutable locations\n \n             let guarantor = cmt.guarantor();\n+            debug!(\"check_for_aliasable_mutable_writes(cmt=%s, guarantor=%s)\",\n+                   cmt.repr(self.tcx()), guarantor.repr(self.tcx()));\n             match guarantor.cat {\n                 mc::cat_deref(b, _, mc::region_ptr(m_mutbl, _)) => {\n                     // Statically prohibit writes to `&mut` when aliasable\n@@ -379,6 +381,7 @@ pub impl<'self> CheckLoanCtxt<'self> {\n                         id: base.id,\n                         derefs: deref_count\n                     };\n+                    debug!(\"Inserting write guard at %?\", key);\n                     self.bccx.write_guard_map.insert(key);\n                 }\n "}, {"sha": "fdfb26c0d08354b33332be658e27487573a5d018", "filename": "src/librustc/middle/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc21daeeb88c20b6431e70fe4ef5cc416af8410d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc21daeeb88c20b6431e70fe4ef5cc416af8410d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=dc21daeeb88c20b6431e70fe4ef5cc416af8410d", "patch": "@@ -90,6 +90,7 @@ impl GuaranteeLifetimeContext {\n \n                 // See rule Freeze-Imm-Managed-Ptr-2 in doc.rs\n                 let omit_root = (\n+                    ptr_mutbl == m_imm &&\n                     self.bccx.is_subregion_of(self.loan_region, base_scope) &&\n                     base.mutbl.is_immutable() &&\n                     !self.is_moved(base)"}, {"sha": "8a986a22d4c48b7aeb476ac0c245f1791d7056ec", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc21daeeb88c20b6431e70fe4ef5cc416af8410d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc21daeeb88c20b6431e70fe4ef5cc416af8410d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=dc21daeeb88c20b6431e70fe4ef5cc416af8410d", "patch": "@@ -148,7 +148,7 @@ fn gather_loans_in_expr(ex: @ast::expr,\n \n     // If this expression is borrowed, have to ensure it remains valid:\n     {\n-        let mut this = &mut *self; // FIXME(#5074)\n+        let this = &mut *self; // FIXME(#5074)\n         if !this.ignore_adjustments.contains(&ex.id) {\n             for tcx.adjustments.find(&ex.id).each |&adjustments| {\n                 this.guarantee_adjustments(ex, *adjustments);\n@@ -283,7 +283,7 @@ pub impl GatherLoanCtxt {\n                 let mcx = &mc::mem_categorization_ctxt {\n                     tcx: self.tcx(),\n                     method_map: self.bccx.method_map};\n-                let mut cmt = mcx.cat_expr_autoderefd(expr, autoderefs);\n+                let cmt = mcx.cat_expr_autoderefd(expr, autoderefs);\n                 debug!(\"after autoderef, cmt=%s\", cmt.repr(self.tcx()));\n \n                 match *autoref {"}, {"sha": "adccc786926dc19fab6dc640083f432d6a9b87c6", "filename": "src/test/run-pass/too-much-recursion.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/418f99111852d13e9446c70cd616e6e6780bb632/src%2Ftest%2Frun-pass%2Ftoo-much-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418f99111852d13e9446c70cd616e6e6780bb632/src%2Ftest%2Frun-pass%2Ftoo-much-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftoo-much-recursion.rs?ref=418f99111852d13e9446c70cd616e6e6780bb632", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-win32\n-// error-pattern:ran out of stack\n-\n-// Test that the task fails after hitting the recursion limit, but\n-// that it doesn't bring down the whole proc\n-\n-pub fn main() {\n-    do task::spawn_unlinked {\n-        fn f() { f() };\n-        f();\n-    };\n-}"}]}