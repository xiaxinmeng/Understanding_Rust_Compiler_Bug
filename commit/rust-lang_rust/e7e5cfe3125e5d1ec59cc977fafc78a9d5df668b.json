{"sha": "e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZTVjZmUzMTI1ZTVkMWVjNTljYzk3N2ZhZmM3OGE5ZDVkZjY2OGI=", "commit": {"author": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2016-08-05T16:01:48Z"}, "committer": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2016-08-05T16:01:48Z"}, "message": "Merge branch 'master' of https://github.com/rust-lang/rust", "tree": {"sha": "db5e062430996f55441cd8439184f9b46efc26e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db5e062430996f55441cd8439184f9b46efc26e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "html_url": "https://github.com/rust-lang/rust/commit/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/comments", "author": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f5294e1d6ec900f1d650879954016146e5df748", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f5294e1d6ec900f1d650879954016146e5df748", "html_url": "https://github.com/rust-lang/rust/commit/2f5294e1d6ec900f1d650879954016146e5df748"}, {"sha": "4c02363852e6ce41cf2da1b43a32cb7780a9b067", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c02363852e6ce41cf2da1b43a32cb7780a9b067", "html_url": "https://github.com/rust-lang/rust/commit/4c02363852e6ce41cf2da1b43a32cb7780a9b067"}], "stats": {"total": 1211, "additions": 1033, "deletions": 178}, "files": [{"sha": "74e2c90503cd37fd66477a45e7f024eb485e2480", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -23,7 +23,7 @@ code example:\n #[deny(const_err)]\n \n const X: i32 = 42 / 0;\n-// error: attempted to divide by zero in a constant expression\n+// error: attempt to divide by zero in a constant expression\n ```\n \"##,\n "}, {"sha": "cbbc2c4f98f5e09b025f59756289a153805b0f7d", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 56, "deletions": 17, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -19,7 +19,7 @@ use session::Session;\n use lint;\n use middle::cstore::LOCAL_CRATE;\n use hir::def::Def;\n-use hir::def_id::{CRATE_DEF_INDEX, DefId};\n+use hir::def_id::{CRATE_DEF_INDEX, DefId, DefIndex};\n use ty::{self, TyCtxt};\n use middle::privacy::AccessLevels;\n use syntax::parse::token::InternedString;\n@@ -61,12 +61,46 @@ enum AnnotationKind {\n     Container,\n }\n \n+/// An entry in the `depr_map`.\n+#[derive(Clone)]\n+pub struct DeprecationEntry {\n+    /// The metadata of the attribute associated with this entry.\n+    pub attr: Deprecation,\n+    /// The def id where the attr was originally attached. `None` for non-local\n+    /// `DefId`'s.\n+    origin: Option<DefIndex>,\n+}\n+\n+impl DeprecationEntry {\n+    fn local(attr: Deprecation, id: DefId) -> DeprecationEntry {\n+        assert!(id.is_local());\n+        DeprecationEntry {\n+            attr: attr,\n+            origin: Some(id.index),\n+        }\n+    }\n+\n+    fn external(attr: Deprecation) -> DeprecationEntry {\n+        DeprecationEntry {\n+            attr: attr,\n+            origin: None,\n+        }\n+    }\n+\n+    pub fn same_origin(&self, other: &DeprecationEntry) -> bool {\n+        match (self.origin, other.origin) {\n+            (Some(o1), Some(o2)) => o1 == o2,\n+            _ => false\n+        }\n+    }\n+}\n+\n /// A stability index, giving the stability level for items and methods.\n pub struct Index<'tcx> {\n     /// This is mostly a cache, except the stabilities of local items\n     /// are filled by the annotator.\n     stab_map: DefIdMap<Option<&'tcx Stability>>,\n-    depr_map: DefIdMap<Option<Deprecation>>,\n+    depr_map: DefIdMap<Option<DeprecationEntry>>,\n \n     /// Maps for each crate whether it is part of the staged API.\n     staged_api: FnvHashMap<ast::CrateNum, bool>\n@@ -77,7 +111,7 @@ struct Annotator<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     index: &'a mut Index<'tcx>,\n     parent_stab: Option<&'tcx Stability>,\n-    parent_depr: Option<Deprecation>,\n+    parent_depr: Option<DeprecationEntry>,\n     access_levels: &'a AccessLevels,\n     in_trait_impl: bool,\n }\n@@ -184,14 +218,15 @@ impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n \n                 // `Deprecation` is just two pointers, no need to intern it\n                 let def_id = self.tcx.map.local_def_id(id);\n-                self.index.depr_map.insert(def_id, Some(depr.clone()));\n+                let depr_entry = Some(DeprecationEntry::local(depr, def_id));\n+                self.index.depr_map.insert(def_id, depr_entry.clone());\n \n-                let orig_parent_depr = replace(&mut self.parent_depr, Some(depr));\n+                let orig_parent_depr = replace(&mut self.parent_depr, depr_entry);\n                 visit_children(self);\n                 self.parent_depr = orig_parent_depr;\n-            } else if let Some(depr) = self.parent_depr.clone() {\n+            } else if let parent_depr @ Some(_) = self.parent_depr.clone() {\n                 let def_id = self.tcx.map.local_def_id(id);\n-                self.index.depr_map.insert(def_id, Some(depr));\n+                self.index.depr_map.insert(def_id, parent_depr);\n                 visit_children(self);\n             } else {\n                 visit_children(self);\n@@ -351,7 +386,7 @@ struct Checker<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx> Checker<'a, 'tcx> {\n     fn check(&mut self, id: DefId, span: Span,\n-             stab: &Option<&Stability>, _depr: &Option<Deprecation>) {\n+             stab: &Option<&Stability>, _depr: &Option<DeprecationEntry>) {\n         if !is_staged_api(self.tcx, id) {\n             return;\n         }\n@@ -476,7 +511,7 @@ pub fn check_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             warn_about_defns: bool,\n                             cb: &mut FnMut(DefId, Span,\n                                            &Option<&Stability>,\n-                                           &Option<Deprecation>)) {\n+                                           &Option<DeprecationEntry>)) {\n     match item.node {\n         hir::ItemExternCrate(_) => {\n             // compiler-generated `extern crate` items have a dummy span.\n@@ -515,7 +550,7 @@ pub fn check_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n pub fn check_expr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, e: &hir::Expr,\n                             cb: &mut FnMut(DefId, Span,\n                                            &Option<&Stability>,\n-                                           &Option<Deprecation>)) {\n+                                           &Option<DeprecationEntry>)) {\n     let span;\n     let id = match e.node {\n         hir::ExprMethodCall(i, _, _) => {\n@@ -579,7 +614,7 @@ pub fn check_path<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             path: &hir::Path, id: ast::NodeId,\n                             cb: &mut FnMut(DefId, Span,\n                                            &Option<&Stability>,\n-                                           &Option<Deprecation>)) {\n+                                           &Option<DeprecationEntry>)) {\n     // Paths in import prefixes may have no resolution.\n     match tcx.expect_def_or_none(id) {\n         Some(Def::PrimTy(..)) => {}\n@@ -595,7 +630,7 @@ pub fn check_path_list_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                       item: &hir::PathListItem,\n                                       cb: &mut FnMut(DefId, Span,\n                                                      &Option<&Stability>,\n-                                                     &Option<Deprecation>)) {\n+                                                     &Option<DeprecationEntry>)) {\n     match tcx.expect_def(item.node.id()) {\n         Def::PrimTy(..) => {}\n         def => {\n@@ -607,7 +642,7 @@ pub fn check_path_list_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n pub fn check_pat<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, pat: &hir::Pat,\n                            cb: &mut FnMut(DefId, Span,\n                                           &Option<&Stability>,\n-                                          &Option<Deprecation>)) {\n+                                          &Option<DeprecationEntry>)) {\n     debug!(\"check_pat(pat = {:?})\", pat);\n     if is_internal(tcx, pat.span) { return; }\n \n@@ -638,7 +673,7 @@ fn maybe_do_stability_check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                       id: DefId, span: Span,\n                                       cb: &mut FnMut(DefId, Span,\n                                                      &Option<&Stability>,\n-                                                     &Option<Deprecation>)) {\n+                                                     &Option<DeprecationEntry>)) {\n     if is_internal(tcx, span) {\n         debug!(\"maybe_do_stability_check: \\\n                 skipping span={:?} since it is internal\", span);\n@@ -647,7 +682,7 @@ fn maybe_do_stability_check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let (stability, deprecation) = if is_staged_api(tcx, id) {\n         (tcx.lookup_stability(id), None)\n     } else {\n-        (None, tcx.lookup_deprecation(id))\n+        (None, tcx.lookup_deprecation_entry(id))\n     };\n     debug!(\"maybe_do_stability_check: \\\n             inspecting id={:?} span={:?} of stability={:?}\", id, span, stability);\n@@ -685,6 +720,10 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     }\n \n     pub fn lookup_deprecation(self, id: DefId) -> Option<Deprecation> {\n+        self.lookup_deprecation_entry(id).map(|depr| depr.attr)\n+    }\n+\n+    pub fn lookup_deprecation_entry(self, id: DefId) -> Option<DeprecationEntry> {\n         if let Some(depr) = self.stability.borrow().depr_map.get(&id) {\n             return depr.clone();\n         }\n@@ -703,12 +742,12 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n         }\n     }\n \n-    fn lookup_deprecation_uncached(self, id: DefId) -> Option<Deprecation> {\n+    fn lookup_deprecation_uncached(self, id: DefId) -> Option<DeprecationEntry> {\n         debug!(\"lookup(id={:?})\", id);\n         if id.is_local() {\n             None // The stability cache is filled partially lazily\n         } else {\n-            self.sess.cstore.deprecation(id)\n+            self.sess.cstore.deprecation(id).map(DeprecationEntry::external)\n         }\n     }\n }"}, {"sha": "e2e30ef026c2fd81f255071216e819c665633a43", "filename": "src/librustc_const_math/err.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_const_math%2Ferr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_const_math%2Ferr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Ferr.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -57,18 +57,18 @@ impl ConstMathErr {\n             UnequalTypes(BitOr) => \"tried to bitor two values of different types\",\n             UnequalTypes(BitXor) => \"tried to xor two values of different types\",\n             UnequalTypes(_) => unreachable!(),\n-            Overflow(Add) => \"attempted to add with overflow\",\n-            Overflow(Sub) => \"attempted to subtract with overflow\",\n-            Overflow(Mul) => \"attempted to multiply with overflow\",\n-            Overflow(Div) => \"attempted to divide with overflow\",\n-            Overflow(Rem) => \"attempted to calculate the remainder with overflow\",\n-            Overflow(Neg) => \"attempted to negate with overflow\",\n-            Overflow(Shr) => \"attempted to shift right with overflow\",\n-            Overflow(Shl) => \"attempted to shift left with overflow\",\n+            Overflow(Add) => \"attempt to add with overflow\",\n+            Overflow(Sub) => \"attempt to subtract with overflow\",\n+            Overflow(Mul) => \"attempt to multiply with overflow\",\n+            Overflow(Div) => \"attempt to divide with overflow\",\n+            Overflow(Rem) => \"attempt to calculate the remainder with overflow\",\n+            Overflow(Neg) => \"attempt to negate with overflow\",\n+            Overflow(Shr) => \"attempt to shift right with overflow\",\n+            Overflow(Shl) => \"attempt to shift left with overflow\",\n             Overflow(_) => unreachable!(),\n-            ShiftNegative => \"attempted to shift by a negative amount\",\n-            DivisionByZero => \"attempted to divide by zero\",\n-            RemainderByZero => \"attempted to calculate the remainder with a divisor of zero\",\n+            ShiftNegative => \"attempt to shift by a negative amount\",\n+            DivisionByZero => \"attempt to divide by zero\",\n+            RemainderByZero => \"attempt to calculate the remainder with a divisor of zero\",\n             UnsignedNegation => \"unary negation of unsigned integer\",\n             ULitOutOfRange(ast::UintTy::U8) => \"literal out of range for u8\",\n             ULitOutOfRange(ast::UintTy::U16) => \"literal out of range for u16\","}, {"sha": "f1f5e194da4d16538418838c23725cad0f45e392", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -995,6 +995,8 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         passes.push_pass(box mir::transform::no_landing_pads::NoLandingPads);\n         passes.push_pass(box mir::transform::simplify_cfg::SimplifyCfg::new(\"elaborate-drops\"));\n \n+        passes.push_pass(box mir::transform::deaggregator::Deaggregator);\n+\n         passes.push_pass(box mir::transform::add_call_guards::AddCallGuards);\n         passes.push_pass(box mir::transform::dump_mir::Marker(\"PreTrans\"));\n "}, {"sha": "49dad2d0f6d924653de235ab358a5540f163c512", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 65, "deletions": 5, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -567,18 +567,36 @@ declare_lint! {\n }\n \n /// Checks for use of items with `#[deprecated]` or `#[rustc_deprecated]` attributes\n-#[derive(Copy, Clone)]\n-pub struct Deprecated;\n+#[derive(Clone)]\n+pub struct Deprecated {\n+    /// Tracks the `NodeId` of the current item.\n+    ///\n+    /// This is required since not all node ids are present in the hir map.\n+    current_item: ast::NodeId,\n+}\n \n impl Deprecated {\n+    pub fn new() -> Deprecated {\n+        Deprecated {\n+            current_item: ast::CRATE_NODE_ID,\n+        }\n+    }\n+\n     fn lint(&self, cx: &LateContext, _id: DefId, span: Span,\n-            stability: &Option<&attr::Stability>, deprecation: &Option<attr::Deprecation>) {\n+            stability: &Option<&attr::Stability>,\n+            deprecation: &Option<stability::DeprecationEntry>) {\n         // Deprecated attributes apply in-crate and cross-crate.\n         if let Some(&attr::Stability{rustc_depr: Some(attr::RustcDeprecation{ref reason, ..}), ..})\n                 = *stability {\n             output(cx, DEPRECATED, span, Some(&reason))\n-        } else if let Some(attr::Deprecation{ref note, ..}) = *deprecation {\n-            output(cx, DEPRECATED, span, note.as_ref().map(|x| &**x))\n+        } else if let Some(ref depr_entry) = *deprecation {\n+            if let Some(parent_depr) = cx.tcx.lookup_deprecation_entry(self.parent_def(cx)) {\n+                if parent_depr.same_origin(depr_entry) {\n+                    return;\n+                }\n+            }\n+\n+            output(cx, DEPRECATED, span, depr_entry.attr.note.as_ref().map(|x| &**x))\n         }\n \n         fn output(cx: &LateContext, lint: &'static Lint, span: Span, note: Option<&str>) {\n@@ -591,6 +609,19 @@ impl Deprecated {\n             cx.span_lint(lint, span, &msg);\n         }\n     }\n+\n+    fn push_item(&mut self, item_id: ast::NodeId) {\n+        self.current_item = item_id;\n+    }\n+\n+    fn item_post(&mut self, cx: &LateContext, item_id: ast::NodeId) {\n+        assert_eq!(self.current_item, item_id);\n+        self.current_item = cx.tcx.map.get_parent(item_id);\n+    }\n+\n+    fn parent_def(&self, cx: &LateContext) -> DefId {\n+        cx.tcx.map.local_def_id(self.current_item)\n+    }\n }\n \n impl LintPass for Deprecated {\n@@ -601,11 +632,16 @@ impl LintPass for Deprecated {\n \n impl LateLintPass for Deprecated {\n     fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n+        self.push_item(item.id);\n         stability::check_item(cx.tcx, item, false,\n                               &mut |id, sp, stab, depr|\n                                 self.lint(cx, id, sp, &stab, &depr));\n     }\n \n+    fn check_item_post(&mut self, cx: &LateContext, item: &hir::Item) {\n+        self.item_post(cx, item.id);\n+    }\n+\n     fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n         stability::check_expr(cx.tcx, e,\n                               &mut |id, sp, stab, depr|\n@@ -629,6 +665,30 @@ impl LateLintPass for Deprecated {\n                              &mut |id, sp, stab, depr|\n                                 self.lint(cx, id, sp, &stab, &depr));\n     }\n+\n+    fn check_impl_item(&mut self, _: &LateContext, item: &hir::ImplItem) {\n+        self.push_item(item.id);\n+    }\n+\n+    fn check_impl_item_post(&mut self, cx: &LateContext, item: &hir::ImplItem) {\n+        self.item_post(cx, item.id);\n+    }\n+\n+    fn check_trait_item(&mut self, _: &LateContext, item: &hir::TraitItem) {\n+        self.push_item(item.id);\n+    }\n+\n+    fn check_trait_item_post(&mut self, cx: &LateContext, item: &hir::TraitItem) {\n+        self.item_post(cx, item.id);\n+    }\n+\n+    fn check_foreign_item(&mut self, _: &LateContext, item: &hir::ForeignItem) {\n+        self.push_item(item.id);\n+    }\n+\n+    fn check_foreign_item_post(&mut self, cx: &LateContext, item: &hir::ForeignItem) {\n+        self.item_post(cx, item.id);\n+    }\n }\n \n declare_lint! {"}, {"sha": "43376dfd8c2a0ec6dac298f4ba802f5d4caa84d8", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -124,7 +124,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                  UnusedAllocation,\n                  MissingCopyImplementations,\n                  UnstableFeatures,\n-                 Deprecated,\n                  UnconditionalRecursion,\n                  InvalidNoMangleItems,\n                  PluginAsLibrary,\n@@ -133,6 +132,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                  );\n \n     add_builtin_with_new!(sess,\n+                          Deprecated,\n                           TypeLimits,\n                           MissingDoc,\n                           MissingDebugImplementations,"}, {"sha": "fccd4a607fdcf1cd2e9a520b7ee0efe7b2d5cecb", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,116 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::ty::TyCtxt;\n+use rustc::mir::repr::*;\n+use rustc::mir::transform::{MirPass, MirSource, Pass};\n+use rustc_data_structures::indexed_vec::Idx;\n+use rustc::ty::VariantKind;\n+\n+pub struct Deaggregator;\n+\n+impl Pass for Deaggregator {}\n+\n+impl<'tcx> MirPass<'tcx> for Deaggregator {\n+    fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                    source: MirSource, mir: &mut Mir<'tcx>) {\n+        let node_id = source.item_id();\n+        let node_path = tcx.item_path_str(tcx.map.local_def_id(node_id));\n+        debug!(\"running on: {:?}\", node_path);\n+        // we only run when mir_opt_level > 1\n+        match tcx.sess.opts.debugging_opts.mir_opt_level {\n+            Some(0) |\n+            Some(1) |\n+            None => { return; },\n+            _ => {}\n+        };\n+\n+        // Do not trigger on constants.  Could be revised in future\n+        if let MirSource::Fn(_) = source {} else { return; }\n+        // In fact, we might not want to trigger in other cases.\n+        // Ex: when we could use SROA.  See issue #35259\n+\n+        let mut curr: usize = 0;\n+        for bb in mir.basic_blocks_mut() {\n+            let idx = match get_aggregate_statement(curr, &bb.statements) {\n+                Some(idx) => idx,\n+                None => continue,\n+            };\n+            // do the replacement\n+            debug!(\"removing statement {:?}\", idx);\n+            let src_info = bb.statements[idx].source_info;\n+            let suffix_stmts = bb.statements.split_off(idx+1);\n+            let orig_stmt = bb.statements.pop().unwrap();\n+            let StatementKind::Assign(ref lhs, ref rhs) = orig_stmt.kind;\n+            let (agg_kind, operands) = match rhs {\n+                &Rvalue::Aggregate(ref agg_kind, ref operands) => (agg_kind, operands),\n+                _ => span_bug!(src_info.span, \"expected aggregate, not {:?}\", rhs),\n+            };\n+            let (adt_def, variant, substs) = match agg_kind {\n+                &AggregateKind::Adt(adt_def, variant, substs) => (adt_def, variant, substs),\n+                _ => span_bug!(src_info.span, \"expected struct, not {:?}\", rhs),\n+            };\n+            let n = bb.statements.len();\n+            bb.statements.reserve(n + operands.len() + suffix_stmts.len());\n+            for (i, op) in operands.iter().enumerate() {\n+                let ref variant_def = adt_def.variants[variant];\n+                let ty = variant_def.fields[i].ty(tcx, substs);\n+                let rhs = Rvalue::Use(op.clone());\n+\n+                // since we don't handle enums, we don't need a cast\n+                let lhs_cast = lhs.clone();\n+\n+                // FIXME we cannot deaggregate enums issue: #35186\n+\n+                let lhs_proj = Lvalue::Projection(Box::new(LvalueProjection {\n+                    base: lhs_cast,\n+                    elem: ProjectionElem::Field(Field::new(i), ty),\n+                }));\n+                let new_statement = Statement {\n+                    source_info: src_info,\n+                    kind: StatementKind::Assign(lhs_proj, rhs),\n+                };\n+                debug!(\"inserting: {:?} @ {:?}\", new_statement, idx + i);\n+                bb.statements.push(new_statement);\n+            }\n+            curr = bb.statements.len();\n+            bb.statements.extend(suffix_stmts);\n+        }\n+    }\n+}\n+\n+fn get_aggregate_statement<'a, 'tcx, 'b>(curr: usize,\n+                                         statements: &Vec<Statement<'tcx>>)\n+                                         -> Option<usize> {\n+    for i in curr..statements.len() {\n+        let ref statement = statements[i];\n+        let StatementKind::Assign(_, ref rhs) = statement.kind;\n+        let (kind, operands) = match rhs {\n+            &Rvalue::Aggregate(ref kind, ref operands) => (kind, operands),\n+            _ => continue,\n+        };\n+        let (adt_def, variant) = match kind {\n+            &AggregateKind::Adt(adt_def, variant, _) => (adt_def, variant),\n+            _ => continue,\n+        };\n+        if operands.len() == 0 || adt_def.variants.len() > 1 {\n+            // don't deaggregate ()\n+            // don't deaggregate enums ... for now\n+            continue;\n+        }\n+        debug!(\"getting variant {:?}\", variant);\n+        debug!(\"for adt_def {:?}\", adt_def);\n+        let variant_def = &adt_def.variants[variant];\n+        if variant_def.kind == VariantKind::Struct {\n+            return Some(i);\n+        }\n+    };\n+    None\n+}"}, {"sha": "c3485b8256da1fa0c8b1178309f5b978faf9f615", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -17,3 +17,4 @@ pub mod add_call_guards;\n pub mod promote_consts;\n pub mod qualify_consts;\n pub mod dump_mir;\n+pub mod deaggregator;"}, {"sha": "d2cf48eddebac2de42b84571262075df045d4af7", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -55,6 +55,17 @@ impl<'a> AstValidator<'a> {\n             err.emit();\n         }\n     }\n+\n+    fn check_decl_no_pat<ReportFn: Fn(Span, bool)>(&self, decl: &FnDecl, report_err: ReportFn) {\n+        for arg in &decl.inputs {\n+            match arg.pat.node {\n+                PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), _, None) |\n+                PatKind::Wild => {}\n+                PatKind::Ident(..) => report_err(arg.pat.span, true),\n+                _ => report_err(arg.pat.span, false),\n+            }\n+        }\n+    }\n }\n \n impl<'a> Visitor for AstValidator<'a> {\n@@ -82,6 +93,23 @@ impl<'a> Visitor for AstValidator<'a> {\n         visit::walk_expr(self, expr)\n     }\n \n+    fn visit_ty(&mut self, ty: &Ty) {\n+        match ty.node {\n+            TyKind::BareFn(ref bfty) => {\n+                self.check_decl_no_pat(&bfty.decl, |span, _| {\n+                    let mut err = struct_span_err!(self.session, span, E0561,\n+                                            \"patterns aren't allowed in function pointer types\");\n+                    err.span_note(span, \"this is a recent error, see \\\n+                                         issue #35203 for more details\");\n+                    err.emit();\n+                });\n+            }\n+            _ => {}\n+        }\n+\n+        visit::walk_ty(self, ty)\n+    }\n+\n     fn visit_path(&mut self, path: &Path, id: NodeId) {\n         if path.global && path.segments.len() > 0 {\n             let ident = path.segments[0].identifier;\n@@ -135,6 +163,25 @@ impl<'a> Visitor for AstValidator<'a> {\n         visit::walk_item(self, item)\n     }\n \n+    fn visit_foreign_item(&mut self, fi: &ForeignItem) {\n+        match fi.node {\n+            ForeignItemKind::Fn(ref decl, _) => {\n+                self.check_decl_no_pat(decl, |span, is_recent| {\n+                    let mut err = struct_span_err!(self.session, span, E0130,\n+                                        \"patterns aren't allowed in foreign function declarations\");\n+                    if is_recent {\n+                        err.span_note(span, \"this is a recent error, see \\\n+                                             issue #35203 for more details\");\n+                    }\n+                    err.emit();\n+                });\n+            }\n+            ForeignItemKind::Static(..) => {}\n+        }\n+\n+        visit::walk_foreign_item(self, fi)\n+    }\n+\n     fn visit_variant_data(&mut self, vdata: &VariantData, _: Ident,\n                           _: &Generics, _: NodeId, span: Span) {\n         if vdata.fields().is_empty() {"}, {"sha": "3e2dd477bccf089f0e40b0598246ce9c120b39e2", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -49,6 +49,39 @@ match 5u32 {\n ```\n \"##,\n \n+E0130: r##\"\n+You declared a pattern as an argument in a foreign function declaration.\n+Erroneous code example:\n+\n+```compile_fail\n+extern {\n+    fn foo((a, b): (u32, u32)); // error: patterns aren't allowed in foreign\n+                                //        function declarations\n+}\n+```\n+\n+Please replace the pattern argument with a regular one. Example:\n+\n+```\n+struct SomeStruct {\n+    a: u32,\n+    b: u32,\n+}\n+\n+extern {\n+    fn foo(s: SomeStruct); // ok!\n+}\n+```\n+\n+Or:\n+\n+```\n+extern {\n+    fn foo(a: (u32, u32)); // ok!\n+}\n+```\n+\"##,\n+\n E0161: r##\"\n A value was moved. However, its size was not known at compile time, and only\n values of a known size can be moved.\n@@ -187,4 +220,5 @@ pub impl Foo for Bar {\n \n register_diagnostics! {\n     E0472, // asm! is unsupported on this target\n+    E0561, // patterns aren't allowed in function pointer types\n }"}, {"sha": "2a60dd17446717eae78d1a971c48dc81e6ee541a", "filename": "src/librustc_trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_trans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_trans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fexpr.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -1512,7 +1512,7 @@ fn trans_unary<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                           C_integral(llty, min, true), debug_loc);\n                         with_cond(bcx, is_min, |bcx| {\n                             let msg = InternedString::new(\n-                                \"attempted to negate with overflow\");\n+                                \"attempt to negate with overflow\");\n                             controlflow::trans_fail(bcx, expr_info(expr), msg)\n                         })\n                     } else {"}, {"sha": "9bfdb511c623c97f34974b9711b443978ffcea3b", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -261,7 +261,23 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n \n             mir::TerminatorKind::Assert { ref cond, expected, ref msg, target, cleanup } => {\n                 let cond = self.trans_operand(&bcx, cond).immediate();\n-                let const_cond = common::const_to_opt_uint(cond).map(|c| c == 1);\n+                let mut const_cond = common::const_to_opt_uint(cond).map(|c| c == 1);\n+\n+                // This case can currently arise only from functions marked\n+                // with #[rustc_inherit_overflow_checks] and inlined from\n+                // another crate (mostly core::num generic/#[inline] fns),\n+                // while the current crate doesn't use overflow checks.\n+                // NOTE: Unlike binops, negation doesn't have its own\n+                // checked operation, just a comparison with the minimum\n+                // value, so we have to check for the assert message.\n+                if !bcx.ccx().check_overflow() {\n+                    use rustc_const_math::ConstMathErr::Overflow;\n+                    use rustc_const_math::Op::Neg;\n+\n+                    if let mir::AssertMessage::Math(Overflow(Neg)) = *msg {\n+                        const_cond = Some(expected);\n+                    }\n+                }\n \n                 // Don't translate the panic block if success if known.\n                 if const_cond == Some(expected) {"}, {"sha": "48f72405ae8fec45613590051575158aaea78331", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -60,8 +60,6 @@ There are some shortcomings in this design:\n \n use astconv::{AstConv, ast_region_to_region, Bounds, PartitionedBounds, partition_bounds};\n use lint;\n-use hir::def::Def;\n-use hir::def_id::DefId;\n use constrained_type_params as ctp;\n use middle::lang_items::SizedTraitLangItem;\n use middle::const_val::ConstVal;\n@@ -74,7 +72,6 @@ use rustc::ty::{VariantKind};\n use rustc::ty::util::IntTypeExt;\n use rscope::*;\n use rustc::dep_graph::DepNode;\n-use rustc::hir::map as hir_map;\n use util::common::{ErrorReported, MemoizationMap};\n use util::nodemap::{NodeMap, FnvHashMap};\n use {CrateCtxt, write_ty_to_tcx};\n@@ -91,9 +88,9 @@ use syntax::parse::token::keywords;\n use syntax::ptr::P;\n use syntax_pos::Span;\n \n-use rustc::hir::{self, PatKind};\n-use rustc::hir::intravisit;\n-use rustc::hir::print as pprust;\n+use rustc::hir::{self, intravisit, map as hir_map, print as pprust};\n+use rustc::hir::def::Def;\n+use rustc::hir::def_id::DefId;\n \n ///////////////////////////////////////////////////////////////////////////\n // Main entry point\n@@ -2145,14 +2142,6 @@ fn compute_type_scheme_of_foreign_fn_decl<'a, 'tcx>(\n     abi: abi::Abi)\n     -> ty::TypeScheme<'tcx>\n {\n-    for i in &decl.inputs {\n-        match i.pat.node {\n-            PatKind::Binding(..) | PatKind::Wild => {}\n-            _ => span_err!(ccx.tcx.sess, i.pat.span, E0130,\n-                           \"patterns aren't allowed in foreign function declarations\")\n-        }\n-    }\n-\n     let ty_generics = ty_generics_for_fn(ccx, ast_generics, &ty::Generics::empty());\n \n     let rb = BindingRscope::new();"}, {"sha": "b655d955429f06087ada1e969a5b866d3d2a084d", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -1800,39 +1800,6 @@ Please also verify that this wasn't because of a name-clash and rename the type\n parameter if so.\n \"##,\n \n-E0130: r##\"\n-You declared a pattern as an argument in a foreign function declaration.\n-Erroneous code example:\n-\n-```compile_fail\n-extern {\n-    fn foo((a, b): (u32, u32)); // error: patterns aren't allowed in foreign\n-                                //        function declarations\n-}\n-```\n-\n-Please replace the pattern argument with a regular one. Example:\n-\n-```\n-struct SomeStruct {\n-    a: u32,\n-    b: u32,\n-}\n-\n-extern {\n-    fn foo(s: SomeStruct); // ok!\n-}\n-```\n-\n-Or:\n-\n-```\n-extern {\n-    fn foo(a: (u32, u32)); // ok!\n-}\n-```\n-\"##,\n-\n E0131: r##\"\n It is not possible to define `main` with type parameters, or even with function\n parameters. When `main` is present, it must take no arguments and return `()`."}, {"sha": "ff6cb55f388c337ef5836be6a80f36d4a217bd8f", "filename": "src/test/compile-fail/E0201.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0201.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo(u8);\n+\n+impl Foo {\n+    fn bar(&self) -> bool { self.0 > 5 }\n+    fn bar() {} //~ ERROR E0201\n+}\n+\n+trait Baz {\n+    type Quux;\n+    fn baz(&self) -> bool;\n+}\n+\n+impl Baz for Foo {\n+    type Quux = u32;\n+\n+    fn baz(&self) -> bool { true }\n+    fn baz(&self) -> bool { self.0 > 5 } //~ ERROR E0201\n+    type Quux = u32; //~ ERROR E0201\n+}\n+\n+fn main() {\n+}"}, {"sha": "2fa2afa12eb431bcb3c5bacf9d7aab579b3e18b6", "filename": "src/test/compile-fail/E0204.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0204.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0204.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0204.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    foo: Vec<u32>,\n+}\n+\n+impl Copy for Foo { } //~ ERROR E0204\n+\n+#[derive(Copy)] //~ ERROR E0204\n+struct Foo2<'a> {\n+    ty: &'a mut bool,\n+}\n+\n+fn main() {\n+}"}, {"sha": "e4781bba08aab14cd52e81981269d3c9a625896e", "filename": "src/test/compile-fail/E0205.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0205.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Foo {\n+    Bar(Vec<u32>),\n+    Baz,\n+}\n+\n+impl Copy for Foo { } //~ ERROR E0205\n+\n+#[derive(Copy)] //~ ERROR E0205\n+enum Foo2<'a> {\n+    Bar(&'a mut bool),\n+    Baz,\n+}\n+\n+fn main() {\n+}"}, {"sha": "31b01da3d75b566e75f87e498eb1a893c91a926b", "filename": "src/test/compile-fail/E0206.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0206.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0206.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0206.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+type Foo = i32;\n+\n+impl Copy for Foo { } //~ ERROR E0206\n+                      //~^ ERROR E0117\n+\n+#[derive(Copy, Clone)]\n+struct Bar;\n+\n+impl Copy for &'static Bar { } //~ ERROR E0206\n+\n+fn main() {\n+}"}, {"sha": "bd87dbaf786a518407bc28a07c8e5c8528e5ef8f", "filename": "src/test/compile-fail/E0207.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0207.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0207.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0207.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo;\n+\n+impl<T: Default> Foo { //~ ERROR E0207\n+    fn get(&self) -> T {\n+        <T as Default>::default()\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "59609345ee5235f65ea67e669a3daa4d5489c37a", "filename": "src/test/compile-fail/E0214.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0214.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let v: Vec(&str) = vec![\"foo\"]; //~ ERROR E0214\n+}"}, {"sha": "17e2b18b3745e55a14a3e2ef99193d4a842503e5", "filename": "src/test/compile-fail/E0220.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0220.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Trait {\n+    type Bar;\n+}\n+\n+type Foo = Trait<F=i32>; //~ ERROR E0220\n+                         //~^ ERROR E0191\n+\n+fn main() {\n+}"}, {"sha": "213ec5a0488802960ce291c4547781f96dbd0fc6", "filename": "src/test/compile-fail/E0221.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0221.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0221.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0221.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait T1 {}\n+trait T2 {}\n+\n+trait Foo {\n+    type A: T1;\n+}\n+\n+trait Bar : Foo {\n+    type A: T2;\n+    fn do_something() {\n+        let _: Self::A; //~ ERROR E0221\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "bbf7d762ef00bb3e1fcb16915aa9487fc4cde1a6", "filename": "src/test/compile-fail/E0223.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0223.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0223.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0223.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait MyTrait { type X; }\n+\n+fn main() {\n+    let foo: MyTrait::X; //~ ERROR E0223\n+}"}, {"sha": "190350c5a557117deaa9b870c2136a672635e530", "filename": "src/test/compile-fail/E0225.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0225.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0225.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0225.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let _: Box<std::io::Read + std::io::Write>; //~ ERROR E0225\n+}"}, {"sha": "45d5c59592f759cc120685f4d3e92c1782efd29d", "filename": "src/test/compile-fail/E0229.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0229.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0229.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0229.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Foo {\n+    type A;\n+    fn boo(&self) -> <Self as Foo>::A;\n+}\n+\n+struct Bar;\n+\n+impl Foo for isize {\n+    type A = usize;\n+    fn boo(&self) -> usize { 42 }\n+}\n+\n+fn baz<I>(x: &<I as Foo<A=Bar>>::A) {} //~ ERROR E0229\n+\n+fn main() {\n+}"}, {"sha": "efeb869d71fa5ab8cc0dda6fa7c90569d1937c18", "filename": "src/test/compile-fail/E0232.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0232.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0232.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0232.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(on_unimplemented)]\n+\n+#[rustc_on_unimplemented] //~ ERROR E0232\n+trait Bar {}\n+\n+fn main() {\n+}"}, {"sha": "8cc245c10cbe9cdd60c5a16101e4e5304b63e3c2", "filename": "src/test/compile-fail/E0243.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0243.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0243.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0243.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo<T> { x: T }\n+struct Bar { x: Foo } //~ ERROR E0243\n+\n+fn main() {\n+}"}, {"sha": "4c57447109296bb24514811682a3de4648c83626", "filename": "src/test/compile-fail/E0244.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0244.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo { x: bool }\n+struct Bar<S, T> { x: Foo<S, T> } //~ ERROR E0244\n+\n+fn main() {\n+}"}, {"sha": "fdfd41a456bf601316e05cf46fc78eb086697ab8", "filename": "src/test/compile-fail/E0248.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0248.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0248.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0248.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Foo {\n+    Bar(u32),\n+}\n+\n+fn do_something(x: Foo::Bar) { } //~ ERROR E0248\n+\n+fn main() {\n+}"}, {"sha": "6b353c8cd1a62a90c86fb4d3a303ce4466338e52", "filename": "src/test/compile-fail/E0252.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0252.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use foo::baz;\n+use bar::baz; //~ ERROR E0252\n+\n+mod foo {\n+    pub struct baz;\n+}\n+\n+mod bar {\n+    pub mod baz {}\n+}\n+\n+fn main() {\n+}"}, {"sha": "61cc8902036ec9966fdfc35d36134f23570900f6", "filename": "src/test/compile-fail/E0306.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0306.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0306.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0306.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const A: [u32; \"hello\"] = []; //~ ERROR E0306\n+const B: [u32; true] = []; //~ ERROR E0306\n+const C: [u32; 0.0] = []; //~ ERROR E0306\n+\n+fn main() {\n+}"}, {"sha": "8c9fc9551561ddc2d8603d012ece766c8cdcc640", "filename": "src/test/compile-fail/E0308-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0308-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0308-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0308-2.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::rc::Rc;\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn x(self: Rc<Foo>) {} //~ ERROR E0308\n+}\n+\n+fn main() {\n+}"}, {"sha": "d7dca056f3fa6ba651766e9a57762b5f84ed0a7d", "filename": "src/test/compile-fail/E0308-3.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0308-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0308-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0308-3.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() -> i32 { 0 } //~ ERROR E0308"}, {"sha": "bb4cd1434167b56b617e4b3c9fc0aca3339a3d7e", "filename": "src/test/compile-fail/E0308-4.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0308-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0308-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0308-4.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = 1u8;\n+    match x {\n+        0u8...3i8 => (), //~ ERROR E0308\n+        _ => ()\n+    }\n+}"}, {"sha": "078f1d3a9a1ab78c2eca64e2faeb3328a6c73313", "filename": "src/test/compile-fail/E0308.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0308.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2FE0308.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0308.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(intrinsics)]\n+\n+extern \"rust-intrinsic\" {\n+    fn size_of<T>(); //~ ERROR E0308\n+}\n+\n+fn main() {\n+}"}, {"sha": "42fb40394fb298bf7c19bb067019e5d8db716adb", "filename": "src/test/compile-fail/const-err-early.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -11,10 +11,10 @@\n #![feature(const_indexing)]\n #![deny(const_err)]\n \n-pub const A: i8 = -std::i8::MIN; //~ ERROR attempted to negate with overflow\n-pub const B: u8 = 200u8 + 200u8; //~ ERROR attempted to add with overflow\n-pub const C: u8 = 200u8 * 4; //~ ERROR attempted to multiply with overflow\n-pub const D: u8 = 42u8 - (42u8 + 1); //~ ERROR attempted to subtract with overflow\n+pub const A: i8 = -std::i8::MIN; //~ ERROR attempt to negate with overflow\n+pub const B: u8 = 200u8 + 200u8; //~ ERROR attempt to add with overflow\n+pub const C: u8 = 200u8 * 4; //~ ERROR attempt to multiply with overflow\n+pub const D: u8 = 42u8 - (42u8 + 1); //~ ERROR attempt to subtract with overflow\n pub const E: u8 = [5u8][1];\n //~^ ERROR index out of bounds: the len is 1 but the index is 1\n "}, {"sha": "d4f9c0fe56dae4645af8f37e178cfad831ca2a87", "filename": "src/test/compile-fail/const-err-multi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -10,7 +10,7 @@\n \n #![deny(const_err)]\n \n-pub const A: i8 = -std::i8::MIN; //~ ERROR attempted to negate with overflow\n+pub const A: i8 = -std::i8::MIN; //~ ERROR attempt to negate with overflow\n pub const B: i8 = A;\n pub const C: u8 = A as u8;\n pub const D: i8 = 50 - A;"}, {"sha": "944e458c4c0f03db09a25a11c2e5e3565e45b398", "filename": "src/test/compile-fail/const-err.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fconst-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fconst-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -30,18 +30,18 @@ const FOO: u8 = [5u8][1];\n fn main() {\n     let a = -std::i8::MIN;\n     //~^ WARN this expression will panic at run-time\n-    //~| attempted to negate with overflow\n+    //~| attempt to negate with overflow\n     let b = 200u8 + 200u8 + 200u8;\n     //~^ WARN this expression will panic at run-time\n-    //~| attempted to add with overflow\n+    //~| attempt to add with overflow\n     //~^^^ WARN this expression will panic at run-time\n-    //~| attempted to add with overflow\n+    //~| attempt to add with overflow\n     let c = 200u8 * 4;\n     //~^ WARN this expression will panic at run-time\n-    //~| attempted to multiply with overflow\n+    //~| attempt to multiply with overflow\n     let d = 42u8 - (42u8 + 1);\n     //~^ WARN this expression will panic at run-time\n-    //~| attempted to subtract with overflow\n+    //~| attempt to subtract with overflow\n     let _e = [5u8][1];\n     //~^ WARN this expression will panic at run-time\n     //~| index out of bounds: the len is 1 but the index is 1"}, {"sha": "7c1fb2ccd47297594b53f62bb6a6e3c270067d00", "filename": "src/test/compile-fail/const-err2.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fconst-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fconst-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err2.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -18,14 +18,14 @@ fn black_box<T>(_: T) {\n \n fn main() {\n     let a = -std::i8::MIN;\n-    //~^ ERROR attempted to negate with overflow\n+    //~^ ERROR attempt to negate with overflow\n     let b = 200u8 + 200u8 + 200u8;\n-    //~^ ERROR attempted to add with overflow\n-    //~| ERROR attempted to add with overflow\n+    //~^ ERROR attempt to add with overflow\n+    //~| ERROR attempt to add with overflow\n     let c = 200u8 * 4;\n-    //~^ ERROR attempted to multiply with overflow\n+    //~^ ERROR attempt to multiply with overflow\n     let d = 42u8 - (42u8 + 1);\n-    //~^ ERROR attempted to subtract with overflow\n+    //~^ ERROR attempt to subtract with overflow\n     let _e = [5u8][1];\n     black_box(a);\n     black_box(b);"}, {"sha": "264f02588ae5dbca1636c2d27a8ab91ddfa1df51", "filename": "src/test/compile-fail/const-eval-overflow-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-2.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -20,11 +20,11 @@ use std::{u8, u16, u32, u64, usize};\n const NEG_128: i8 = -128;\n const NEG_NEG_128: i8 = -NEG_128;\n //~^ ERROR constant evaluation error\n-//~| attempted to negate with overflow\n+//~| attempt to negate with overflow\n //~| ERROR constant evaluation error\n-//~| attempted to negate with overflow\n+//~| attempt to negate with overflow\n //~| ERROR constant evaluation error\n-//~| attempted to negate with overflow\n+//~| attempt to negate with overflow\n \n fn main() {\n     match -128i8 {"}, {"sha": "d930cb770472ffc64c9b1ead3459effc3a2732d3", "filename": "src/test/compile-fail/const-eval-overflow-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-3.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -17,7 +17,7 @@\n // self-hosted and a cross-compiled setup; therefore resorting to\n // error-pattern for now.\n \n-// error-pattern: attempted to add with overflow\n+// error-pattern: attempt to add with overflow\n \n #![allow(unused_imports)]\n "}, {"sha": "67525fc16261b252f7aa679ba3c1f2ce76f06221", "filename": "src/test/compile-fail/const-eval-overflow-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -23,7 +23,7 @@ use std::{u8, u16, u32, u64, usize};\n \n const A_I8_T\n     : [u32; (i8::MAX as i8 + 1i8) as usize]\n-    //~^ ERROR error evaluating count: attempted to add with overflow\n+    //~^ ERROR error evaluating count: attempt to add with overflow\n     = [0; (i8::MAX as usize) + 1];\n \n fn main() {"}, {"sha": "b8f3f714a84ec89811235ddbcfaee993cb608f26", "filename": "src/test/compile-fail/const-eval-overflow.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -22,113 +22,113 @@ use std::{u8, u16, u32, u64, usize};\n const VALS_I8: (i8, i8, i8, i8) =\n     (-i8::MIN,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to negate with overflow\n+     //~| attempt to negate with overflow\n      i8::MIN - 1,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to subtract with overflow\n+     //~| attempt to subtract with overflow\n      i8::MAX + 1,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to add with overflow\n+     //~| attempt to add with overflow\n      i8::MIN * 2,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to multiply with overflow\n+     //~| attempt to multiply with overflow\n      );\n \n const VALS_I16: (i16, i16, i16, i16) =\n     (-i16::MIN,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to negate with overflow\n+     //~| attempt to negate with overflow\n      i16::MIN - 1,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to subtract with overflow\n+     //~| attempt to subtract with overflow\n      i16::MAX + 1,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to add with overflow\n+     //~| attempt to add with overflow\n      i16::MIN * 2,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to multiply with overflow\n+     //~| attempt to multiply with overflow\n      );\n \n const VALS_I32: (i32, i32, i32, i32) =\n     (-i32::MIN,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to negate with overflow\n+     //~| attempt to negate with overflow\n      i32::MIN - 1,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to subtract with overflow\n+     //~| attempt to subtract with overflow\n      i32::MAX + 1,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to add with overflow\n+     //~| attempt to add with overflow\n      i32::MIN * 2,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to multiply with overflow\n+     //~| attempt to multiply with overflow\n      );\n \n const VALS_I64: (i64, i64, i64, i64) =\n     (-i64::MIN,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to negate with overflow\n+     //~| attempt to negate with overflow\n      i64::MIN - 1,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to subtract with overflow\n+     //~| attempt to subtract with overflow\n      i64::MAX + 1,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to add with overflow\n+     //~| attempt to add with overflow\n      i64::MAX * 2,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to multiply with overflow\n+     //~| attempt to multiply with overflow\n      );\n \n const VALS_U8: (u8, u8, u8, u8) =\n     (-(u8::MIN as i8) as u8,\n      u8::MIN - 1,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to subtract with overflow\n+     //~| attempt to subtract with overflow\n      u8::MAX + 1,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to add with overflow\n+     //~| attempt to add with overflow\n      u8::MAX * 2,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to multiply with overflow\n+     //~| attempt to multiply with overflow\n      );\n \n const VALS_U16: (u16, u16, u16, u16) =\n     (-(u16::MIN as i16) as u16,\n      u16::MIN - 1,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to subtract with overflow\n+     //~| attempt to subtract with overflow\n      u16::MAX + 1,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to add with overflow\n+     //~| attempt to add with overflow\n      u16::MAX * 2,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to multiply with overflow\n+     //~| attempt to multiply with overflow\n      );\n \n const VALS_U32: (u32, u32, u32, u32) =\n     (-(u32::MIN as i32) as u32,\n      u32::MIN - 1,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to subtract with overflow\n+     //~| attempt to subtract with overflow\n      u32::MAX + 1,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to add with overflow\n+     //~| attempt to add with overflow\n      u32::MAX * 2,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to multiply with overflow\n+     //~| attempt to multiply with overflow\n      );\n \n const VALS_U64: (u64, u64, u64, u64) =\n     (-(u64::MIN as i64) as u64,\n      u64::MIN - 1,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to subtract with overflow\n+     //~| attempt to subtract with overflow\n      u64::MAX + 1,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to add with overflow\n+     //~| attempt to add with overflow\n      u64::MAX * 2,\n      //~^ ERROR constant evaluation error\n-     //~| attempted to multiply with overflow\n+     //~| attempt to multiply with overflow\n      );\n \n fn main() {"}, {"sha": "c01bb82676304f1581af586d85520b13a977861c", "filename": "src/test/compile-fail/const-len-underflow-separate-spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-separate-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-separate-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-separate-spans.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -16,7 +16,7 @@ const ONE: usize = 1;\n const TWO: usize = 2;\n const LEN: usize = ONE - TWO;\n //~^ ERROR E0080\n-//~| attempted to subtract with overflow\n+//~| attempt to subtract with overflow\n \n fn main() {\n     let a: [i8; LEN] = unimplemented!();"}, {"sha": "7f2229b5a6534c868910d7c42e834bd6f16337de", "filename": "src/test/compile-fail/const-len-underflow-subspans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-subspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-subspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-subspans.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -17,5 +17,5 @@ const TWO: usize = 2;\n fn main() {\n     let a: [i8; ONE - TWO] = unimplemented!();\n     //~^ ERROR constant evaluation error [E0080]\n-    //~| attempted to subtract with overflow\n+    //~| attempt to subtract with overflow\n }"}, {"sha": "8f7ec9de58af2bda03ee30398d18c8893cbfc6b5", "filename": "src/test/compile-fail/const-tup-index-span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fconst-tup-index-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fconst-tup-index-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-tup-index-span.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -12,7 +12,7 @@\n \n const TUP: (usize,) = 5 << 64;\n //~^ ERROR E0080\n-//~| attempted to shift left with overflow\n+//~| attempt to shift left with overflow\n const ARR: [i32; TUP.0] = [];\n \n fn main() {"}, {"sha": "eedbba59c6f4837196a7e148f4f727a5b5139722", "filename": "src/test/compile-fail/deprecation-lint-nested.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fdeprecation-lint-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fdeprecation-lint-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdeprecation-lint-nested.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,81 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(deprecated)]\n+#![allow(warnings)]\n+\n+#[deprecated]\n+fn issue_35128() {\n+    format_args!(\"foo\");\n+}\n+\n+#[deprecated]\n+fn issue_35128_minimal() {\n+    static FOO: &'static str = \"foo\";\n+    let _ = FOO;\n+}\n+\n+#[deprecated]\n+mod silent {\n+    type DeprecatedType = u8;\n+    struct DeprecatedStruct;\n+    fn deprecated_fn() {}\n+    trait DeprecatedTrait {}\n+    static DEPRECATED_STATIC: u8 = 0;\n+    const DEPRECATED_CONST: u8 = 1;\n+\n+    struct Foo(DeprecatedType);\n+\n+    impl DeprecatedTrait for Foo {}\n+\n+    impl Foo {\n+        fn bar<T: DeprecatedTrait>() {\n+            deprecated_fn();\n+        }\n+    }\n+\n+    fn foo() -> u8 {\n+        DEPRECATED_STATIC +\n+        DEPRECATED_CONST\n+    }\n+}\n+\n+#[deprecated]\n+mod loud {\n+    #[deprecated]\n+    type DeprecatedType = u8;\n+    #[deprecated]\n+    struct DeprecatedStruct;\n+    #[deprecated]\n+    fn deprecated_fn() {}\n+    #[deprecated]\n+    trait DeprecatedTrait {}\n+    #[deprecated]\n+    static DEPRECATED_STATIC: u8 = 0;\n+    #[deprecated]\n+    const DEPRECATED_CONST: u8 = 1;\n+\n+    struct Foo(DeprecatedType); //~ ERROR use of deprecated item\n+\n+    impl DeprecatedTrait for Foo {} //~ ERROR use of deprecated item\n+\n+    impl Foo {\n+        fn bar<T: DeprecatedTrait>() { //~ ERROR use of deprecated item\n+            deprecated_fn(); //~ ERROR use of deprecated item\n+        }\n+    }\n+\n+    fn foo() -> u8 {\n+        DEPRECATED_STATIC + //~ ERROR use of deprecated item\n+        DEPRECATED_CONST //~ ERROR use of deprecated item\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "edee24206cd33b43224ea900488cc962929912d8", "filename": "src/test/compile-fail/deprecation-lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fdeprecation-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fdeprecation-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdeprecation-lint.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -266,14 +266,14 @@ mod this_crate {\n     #[deprecated(since = \"1.0.0\", note = \"text\")]\n     fn test_fn_body() {\n         fn fn_in_body() {}\n-        fn_in_body(); //~ ERROR use of deprecated item: text\n+        fn_in_body();\n     }\n \n     impl MethodTester {\n         #[deprecated(since = \"1.0.0\", note = \"text\")]\n         fn test_method_body(&self) {\n             fn fn_in_body() {}\n-            fn_in_body(); //~ ERROR use of deprecated item: text\n+            fn_in_body();\n         }\n     }\n "}, {"sha": "86cc2c144ac07dd2a0169d5abdd69f0a742b336e", "filename": "src/test/compile-fail/eval-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Feval-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Feval-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Feval-enum.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -10,10 +10,10 @@\n \n enum test {\n     div_zero = 1/0, //~ ERROR E0080\n-                    //~| attempted to divide by zero\n+                    //~| attempt to divide by zero\n     rem_zero = 1%0,\n     //~^ ERROR E0080\n-    //~| attempted to calculate the remainder with a divisor of zero\n+    //~| attempt to calculate the remainder with a divisor of zero\n }\n \n fn main() {}"}, {"sha": "d8ab48d1ec3e688cde39fe4a08c0592475764574", "filename": "src/test/compile-fail/issue-8460-const.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -15,43 +15,43 @@ use std::thread;\n \n fn main() {\n     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempted to divide with overflow\n+    //~^ ERROR attempt to divide with overflow\n     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempted to divide with overflow\n+    //~^ ERROR attempt to divide with overflow\n     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempted to divide with overflow\n+    //~^ ERROR attempt to divide with overflow\n     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempted to divide with overflow\n+    //~^ ERROR attempt to divide with overflow\n     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempted to divide with overflow\n+    //~^ ERROR attempt to divide with overflow\n     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-    //~^ ERROR attempted to divide by zero\n+    //~^ ERROR attempt to divide by zero\n     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-    //~^ ERROR attempted to divide by zero\n+    //~^ ERROR attempt to divide by zero\n     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-    //~^ ERROR attempted to divide by zero\n+    //~^ ERROR attempt to divide by zero\n     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-    //~^ ERROR attempted to divide by zero\n+    //~^ ERROR attempt to divide by zero\n     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-    //~^ ERROR attempted to divide by zero\n+    //~^ ERROR attempt to divide by zero\n     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempted to calculate the remainder with overflow\n+    //~^ ERROR attempt to calculate the remainder with overflow\n     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempted to calculate the remainder with overflow\n+    //~^ ERROR attempt to calculate the remainder with overflow\n     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempted to calculate the remainder with overflow\n+    //~^ ERROR attempt to calculate the remainder with overflow\n     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempted to calculate the remainder with overflow\n+    //~^ ERROR attempt to calculate the remainder with overflow\n     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempted to calculate the remainder with overflow\n+    //~^ ERROR attempt to calculate the remainder with overflow\n     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-    //~^ ERROR attempted to calculate the remainder with a divisor of zero\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-    //~^ ERROR attempted to calculate the remainder with a divisor of zero\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-    //~^ ERROR attempted to calculate the remainder with a divisor of zero\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-    //~^ ERROR attempted to calculate the remainder with a divisor of zero\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-    //~^ ERROR attempted to calculate the remainder with a divisor of zero\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n }"}, {"sha": "3e51550d1fa07bc336bcb1da6f19545643e0674b", "filename": "src/test/compile-fail/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -53,7 +53,7 @@ fn main() {\n       let n = n << 8; //~ ERROR: bitshift exceeds the type's number of bits\n \n       let n = 1u8 << -8; //~ ERROR: bitshift exceeds the type's number of bits\n-      //~^ WARN: attempted to shift by a negative amount\n+      //~^ WARN: attempt to shift by a negative amount\n \n       let n = 1u8 << (4+3);\n       let n = 1u8 << (4+4); //~ ERROR: bitshift exceeds the type's number of bits"}, {"sha": "a2971f23a79e148a9a30a941d23ee2c9d68e4df7", "filename": "src/test/compile-fail/lint-type-overflow2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -15,7 +15,7 @@\n #[allow(unused_variables)]\n fn main() {\n     let x2: i8 = --128; //~ error: literal out of range for i8\n-    //~^ error: attempted to negate with overflow\n+    //~^ error: attempt to negate with overflow\n \n     let x = -3.40282348e+38_f32; //~ error: literal out of range for f32\n     let x =  3.40282348e+38_f32; //~ error: literal out of range for f32"}, {"sha": "3edbdf4ebc9584ce7d5770bd15064dd56fedf64f", "filename": "src/test/compile-fail/no-patterns-in-args.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern {\n+    fn f1(mut arg: u8); //~ ERROR patterns aren't allowed in foreign function declarations\n+                        //~^ NOTE this is a recent error\n+    fn f2(&arg: u8); //~ ERROR patterns aren't allowed in foreign function declarations\n+    fn f3(arg @ _: u8); //~ ERROR patterns aren't allowed in foreign function declarations\n+                        //~^ NOTE this is a recent error\n+    fn g1(arg: u8); // OK\n+    fn g2(_: u8); // OK\n+    // fn g3(u8); // Not yet\n+}\n+\n+type A1 = fn(mut arg: u8); //~ ERROR patterns aren't allowed in function pointer types\n+                           //~^ NOTE this is a recent error\n+type A2 = fn(&arg: u8); //~ ERROR patterns aren't allowed in function pointer types\n+                        //~^ NOTE this is a recent error\n+type B1 = fn(arg: u8); // OK\n+type B2 = fn(_: u8); // OK\n+type B3 = fn(u8); // OK\n+\n+fn main() {}"}, {"sha": "e57a9674cf683d4be0421655c911bd7928076eb1", "filename": "src/test/mir-opt/deaggregator_test.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Baz {\n+    x: usize,\n+    y: f32,\n+    z: bool,\n+}\n+\n+fn bar(a: usize) -> Baz {\n+    Baz { x: a, y: 0.0, z: false }\n+}\n+\n+fn main() {}\n+\n+// END RUST SOURCE\n+// START rustc.node13.Deaggregator.before.mir\n+// bb0: {\n+//     var0 = arg0;                     // scope 0 at main.rs:8:8: 8:9\n+//     tmp0 = var0;                     // scope 1 at main.rs:9:14: 9:15\n+//     return = Baz { x: tmp0, y: const F32(0), z: const false }; // scope ...\n+//     goto -> bb1;                     // scope 1 at main.rs:8:1: 10:2\n+// }\n+// END rustc.node13.Deaggregator.before.mir\n+// START rustc.node13.Deaggregator.after.mir\n+// bb0: {\n+//     var0 = arg0;                     // scope 0 at main.rs:8:8: 8:9\n+//     tmp0 = var0;                     // scope 1 at main.rs:9:14: 9:15\n+//     (return.0: usize) = tmp0;        // scope 1 at main.rs:9:5: 9:34\n+//     (return.1: f32) = const F32(0);  // scope 1 at main.rs:9:5: 9:34\n+//     (return.2: bool) = const false;  // scope 1 at main.rs:9:5: 9:34\n+//     goto -> bb1;                     // scope 1 at main.rs:8:1: 10:2\n+// }\n+// END rustc.node13.Deaggregator.after.mir\n\\ No newline at end of file"}, {"sha": "c9c4a88c9b53eca1692726f0990cb833a5c7cf0f", "filename": "src/test/run-fail/divide-by-zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Fdivide-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Fdivide-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdivide-by-zero.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty : (#23623) problems when  ending with // comments\n \n-// error-pattern:attempted to divide by zero\n+// error-pattern:attempt to divide by zero\n \n fn main() {\n     let y = 0;"}, {"sha": "d2b598a7933bcd86f128cbffdd484c5a83d3ee52", "filename": "src/test/run-fail/mod-zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Fmod-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Fmod-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmod-zero.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty : (#23623) problems when  ending with // comments\n \n-// error-pattern:attempted to calculate the remainder with a divisor of zero\n+// error-pattern:attempt to calculate the remainder with a divisor of zero\n \n fn main() {\n     let y = 0;"}, {"sha": "acc7676db457efd8d71c8264b37acd7b989562cd", "filename": "src/test/run-fail/overflowing-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-add.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty : (#23623) problems when  ending with // comments\n \n-// error-pattern:thread 'main' panicked at 'attempted to add with overflow'\n+// error-pattern:thread 'main' panicked at 'attempt to add with overflow'\n // compile-flags: -C debug-assertions\n \n "}, {"sha": "29ce3b0e6a16d7be8eb6fb2479fdd9b72b06baf3", "filename": "src/test/run-fail/overflowing-lsh-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-lsh-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-lsh-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-1.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty : (#23623) problems when  ending with // comments\n \n-// error-pattern:thread 'main' panicked at 'attempted to shift left with overflow'\n+// error-pattern:thread 'main' panicked at 'attempt to shift left with overflow'\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]"}, {"sha": "62fc9230f353d07f2f8426d86b349416391df3a0", "filename": "src/test/run-fail/overflowing-lsh-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-lsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-lsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-2.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty : (#23623) problems when  ending with // comments\n \n-// error-pattern:thread 'main' panicked at 'attempted to shift left with overflow'\n+// error-pattern:thread 'main' panicked at 'attempt to shift left with overflow'\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]"}, {"sha": "1bc1703a89ce37702c59c1436c03c5fb5d259e40", "filename": "src/test/run-fail/overflowing-lsh-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-lsh-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-lsh-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-3.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty : (#23623) problems when  ending with // comments\n \n-// error-pattern:thread 'main' panicked at 'attempted to shift left with overflow'\n+// error-pattern:thread 'main' panicked at 'attempt to shift left with overflow'\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]"}, {"sha": "8de44f25e048967ec0d732654dcdf3ad8d718216", "filename": "src/test/run-fail/overflowing-lsh-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-lsh-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-lsh-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-4.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty : (#23623) problems when  ending with // comments\n \n-// error-pattern:thread 'main' panicked at 'attempted to shift left with overflow'\n+// error-pattern:thread 'main' panicked at 'attempt to shift left with overflow'\n // compile-flags: -C debug-assertions\n \n // This function is checking that our automatic truncation does not"}, {"sha": "a09c0f06a5cc6180f383100d8bf289ba20d7e076", "filename": "src/test/run-fail/overflowing-mul.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-mul.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-mul.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-mul.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty : (#23623) problems when  ending with // comments\n \n-// error-pattern:thread 'main' panicked at 'attempted to multiply with overflow'\n+// error-pattern:thread 'main' panicked at 'attempt to multiply with overflow'\n // compile-flags: -C debug-assertions\n \n fn main() {"}, {"sha": "96853fc565b716d4511d014f1e98b613833f7cd4", "filename": "src/test/run-fail/overflowing-neg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-neg.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty : (#23623) problems when  ending with // comments\n \n-// error-pattern:thread 'main' panicked at 'attempted to negate with overflow'\n+// error-pattern:thread 'main' panicked at 'attempt to negate with overflow'\n // compile-flags: -C debug-assertions\n \n fn main() {"}, {"sha": "b0ff0df557704f41ad42c9856c90217461959841", "filename": "src/test/run-fail/overflowing-pow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-pow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-pow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-pow.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:thread 'main' panicked at 'attempted to multiply with overflow'\n+// error-pattern:thread 'main' panicked at 'attempt to multiply with overflow'\n // compile-flags: -C debug-assertions\n \n fn main() {"}, {"sha": "ef4a503cfe42592d3674c2e479d714f7187a105b", "filename": "src/test/run-fail/overflowing-rsh-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-rsh-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-rsh-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-1.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty : (#23623) problems when  ending with // comments\n \n-// error-pattern:thread 'main' panicked at 'attempted to shift right with overflow'\n+// error-pattern:thread 'main' panicked at 'attempt to shift right with overflow'\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]"}, {"sha": "da072b5a9a5a999c39cd535109d51fd4126139c0", "filename": "src/test/run-fail/overflowing-rsh-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-rsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-rsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-2.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty : (#23623) problems when  ending with // comments\n \n-// error-pattern:thread 'main' panicked at 'attempted to shift right with overflow'\n+// error-pattern:thread 'main' panicked at 'attempt to shift right with overflow'\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]"}, {"sha": "0b7809402e6db93222cc588bf1dfc1b8c4d590e1", "filename": "src/test/run-fail/overflowing-rsh-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-rsh-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-rsh-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-3.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty : (#23623) problems when  ending with // comments\n \n-// error-pattern:thread 'main' panicked at 'attempted to shift right with overflow'\n+// error-pattern:thread 'main' panicked at 'attempt to shift right with overflow'\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]"}, {"sha": "1e0cc18fbdcd63c9fb9e01a3ffac16f43a229240", "filename": "src/test/run-fail/overflowing-rsh-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-rsh-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-rsh-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-4.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty : (#23623) problems when  ending with // comments\n \n-// error-pattern:thread 'main' panicked at 'attempted to shift right with overflow'\n+// error-pattern:thread 'main' panicked at 'attempt to shift right with overflow'\n // compile-flags: -C debug-assertions\n \n // This function is checking that our (type-based) automatic"}, {"sha": "690901ff0c25b0f95d855604e3fe7cef932466d8", "filename": "src/test/run-fail/overflowing-rsh-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-rsh-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-rsh-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-5.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty : (#23623) problems when  ending with // comments\n \n-// error-pattern:thread 'main' panicked at 'attempted to shift right with overflow'\n+// error-pattern:thread 'main' panicked at 'attempt to shift right with overflow'\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]"}, {"sha": "6a6ed4f11f20ef3dc7711d832bad80e2c32f964f", "filename": "src/test/run-fail/overflowing-rsh-6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-rsh-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-rsh-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-6.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty : (#23623) problems when  ending with // comments\n \n-// error-pattern:thread 'main' panicked at 'attempted to shift right with overflow'\n+// error-pattern:thread 'main' panicked at 'attempt to shift right with overflow'\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]"}, {"sha": "083e8d24467fd67148a2d7bff94c5182413adb33", "filename": "src/test/run-fail/overflowing-sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-fail%2Foverflowing-sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-sub.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty : (#23623) problems when  ending with // comments\n \n-// error-pattern:thread 'main' panicked at 'attempted to subtract with overflow'\n+// error-pattern:thread 'main' panicked at 'attempt to subtract with overflow'\n // compile-flags: -C debug-assertions\n \n fn main() {"}, {"sha": "04ac606a8a9a5458e0c4ec1c7ee70b7965271700", "filename": "src/test/run-pass/mir_overflow_off.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-pass%2Fmir_overflow_off.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftest%2Frun-pass%2Fmir_overflow_off.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_overflow_off.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z force-overflow-checks=off -Z orbit\n+\n+// Test that with MIR trans, overflow checks can be\n+// turned off, even when they're from core::ops::*.\n+\n+use std::ops::*;\n+\n+fn main() {\n+    assert_eq!(i8::neg(-0x80), -0x80);\n+\n+    assert_eq!(u8::add(0xff, 1), 0_u8);\n+    assert_eq!(u8::sub(0, 1), 0xff_u8);\n+    assert_eq!(u8::mul(0xff, 2), 0xfe_u8);\n+    assert_eq!(u8::shl(1, 9), 2_u8);\n+    assert_eq!(u8::shr(2, 9), 1_u8);\n+}"}, {"sha": "6647a1a0a933d41046dc22ad79e0709a52393967", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=e7e5cfe3125e5d1ec59cc977fafc78a9d5df668b", "patch": "@@ -1340,6 +1340,8 @@ actual:\\n\\\n             MirOpt => {\n                 args.extend([\"-Z\",\n                              \"dump-mir=all\",\n+                             \"-Z\",\n+                             \"mir-opt-level=3\",\n                              \"-Z\"]\n                             .iter()\n                             .map(|s| s.to_string()));"}]}