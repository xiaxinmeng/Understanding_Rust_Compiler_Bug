{"sha": "95208044e86af21569484c67a6b5bfd7eaa32b2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MjA4MDQ0ZTg2YWYyMTU2OTQ4NGM2N2E2YjViZmQ3ZWFhMzJiMmY=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-17T17:56:41Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-17T17:56:41Z"}, "message": "Make `async_idents` an edition incompat lint", "tree": {"sha": "3ecc1b58caf59c7bc4739079cbe3ab71f0b16766", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ecc1b58caf59c7bc4739079cbe3ab71f0b16766"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95208044e86af21569484c67a6b5bfd7eaa32b2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95208044e86af21569484c67a6b5bfd7eaa32b2f", "html_url": "https://github.com/rust-lang/rust/commit/95208044e86af21569484c67a6b5bfd7eaa32b2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95208044e86af21569484c67a6b5bfd7eaa32b2f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15a8a66d5c17868c617825ead1db05a158002384", "url": "https://api.github.com/repos/rust-lang/rust/commits/15a8a66d5c17868c617825ead1db05a158002384", "html_url": "https://github.com/rust-lang/rust/commit/15a8a66d5c17868c617825ead1db05a158002384"}], "stats": {"total": 256, "additions": 238, "deletions": 18}, "files": [{"sha": "4897b7406f8e335919743e1e75abfd46292d9b4d", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95208044e86af21569484c67a6b5bfd7eaa32b2f/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95208044e86af21569484c67a6b5bfd7eaa32b2f/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=95208044e86af21569484c67a6b5bfd7eaa32b2f", "patch": "@@ -1788,7 +1788,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnameableTestFunctions {\n \n declare_lint! {\n     pub ASYNC_IDENTS,\n-    Allow,\n+    Deny,\n     \"detects `async` being used as an identifier\"\n }\n \n@@ -1798,7 +1798,7 @@ pub struct Async2018;\n \n impl LintPass for Async2018 {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!()\n+        lint_array!(ASYNC_IDENTS)\n     }\n }\n "}, {"sha": "bb0f0e7832fd2a8edc175b3ab5a26821ff23fb56", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95208044e86af21569484c67a6b5bfd7eaa32b2f/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95208044e86af21569484c67a6b5bfd7eaa32b2f/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=95208044e86af21569484c67a6b5bfd7eaa32b2f", "patch": "@@ -189,7 +189,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     add_lint_group!(sess,\n                     \"rust_2018_idioms\",\n                     BARE_TRAIT_OBJECTS,\n-                    ASYNC_IDENTS,\n                     UNREACHABLE_PUB,\n                     UNUSED_EXTERN_CRATES,\n                     ELLIPSIS_INCLUSIVE_RANGE_PATTERNS);\n@@ -224,6 +223,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue #35896 <https://github.com/rust-lang/rust/issues/35896>\",\n             edition: Some(Edition::Edition2018),\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(ASYNC_IDENTS),\n+            reference: \"issue #49716 <https://github.com/rust-lang/rust/issues/49716>\",\n+            edition: Some(Edition::Edition2018),\n+        },\n         FutureIncompatibleInfo {\n             id: LintId::of(SAFE_EXTERN_STATICS),\n             reference: \"issue #36247 <https://github.com/rust-lang/rust/issues/36247>\","}, {"sha": "8f80e000e3caf2485cb385794e2522d7f427994c", "filename": "src/test/ui/auxiliary/edition-kw-macro-2015.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95208044e86af21569484c67a6b5bfd7eaa32b2f/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95208044e86af21569484c67a6b5bfd7eaa32b2f/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2015.rs?ref=95208044e86af21569484c67a6b5bfd7eaa32b2f", "patch": "@@ -11,6 +11,7 @@\n // edition:2015\n \n #![feature(raw_identifiers)]\n+#![allow(async_idents)]\n \n #[macro_export]\n macro_rules! produces_async {"}, {"sha": "d42014766ec6862a6e86ae1e974c53579ce7461e", "filename": "src/test/ui/auxiliary/edition-kw-macro-2018.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95208044e86af21569484c67a6b5bfd7eaa32b2f/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95208044e86af21569484c67a6b5bfd7eaa32b2f/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2018.rs?ref=95208044e86af21569484c67a6b5bfd7eaa32b2f", "patch": "@@ -11,6 +11,7 @@\n // edition:2018\n \n #![feature(raw_identifiers)]\n+#![allow(async_idents)]\n \n #[macro_export]\n macro_rules! produces_async {"}, {"sha": "3b78ce80be20820e180f74c02912f9d9e76af733", "filename": "src/test/ui/edition-keywords-2015-2015-expansion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95208044e86af21569484c67a6b5bfd7eaa32b2f/src%2Ftest%2Fui%2Fedition-keywords-2015-2015-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95208044e86af21569484c67a6b5bfd7eaa32b2f/src%2Ftest%2Fui%2Fedition-keywords-2015-2015-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2015-2015-expansion.rs?ref=95208044e86af21569484c67a6b5bfd7eaa32b2f", "patch": "@@ -13,6 +13,7 @@\n // compile-pass\n \n #![feature(raw_identifiers)]\n+#![allow(async_idents)]\n \n #[macro_use]\n extern crate edition_kw_macro_2015;"}, {"sha": "be22d8b9b01057f7ff10d81895b95ebde84028b0", "filename": "src/test/ui/edition-keywords-2018-2015-expansion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95208044e86af21569484c67a6b5bfd7eaa32b2f/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95208044e86af21569484c67a6b5bfd7eaa32b2f/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-expansion.rs?ref=95208044e86af21569484c67a6b5bfd7eaa32b2f", "patch": "@@ -13,6 +13,7 @@\n // compile-pass\n \n #![feature(raw_identifiers)]\n+#![allow(async_idents)]\n \n #[macro_use]\n extern crate edition_kw_macro_2015;"}, {"sha": "dc44fec912e0af80db543c35255cd798d27b1f8b", "filename": "src/test/ui/rust-2018/async-ident.fixed", "status": "modified", "additions": 58, "deletions": 3, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/95208044e86af21569484c67a6b5bfd7eaa32b2f/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/95208044e86af21569484c67a6b5bfd7eaa32b2f/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed?ref=95208044e86af21569484c67a6b5bfd7eaa32b2f", "patch": "@@ -9,18 +9,21 @@\n // except according to those terms.\n \n #![feature(raw_identifiers)]\n-#![deny(rust_2018_idioms)]\n-#![allow(dead_code)]\n+#![allow(dead_code, unused_variables, non_camel_case_types, non_upper_case_globals)]\n \n+// edition:2015\n // run-rustfix\n \n fn r#async() {} //~ ERROR async\n+//~^ WARN hard error in the 2018 edition\n \n macro_rules! foo {\n     ($foo:ident) => {};\n     ($r#async:expr, r#async) => {};\n     //~^ ERROR async\n     //~| ERROR async\n+    //~| WARN hard error in the 2018 edition\n+    //~| WARN hard error in the 2018 edition\n }\n \n foo!(async);\n@@ -29,4 +32,56 @@ mod dont_lint_raw {\n     fn r#async() {}\n }\n \n-fn main() {}\n+mod async_trait {\n+    trait r#async {}\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+    struct MyStruct;\n+    impl r#async for MyStruct {}\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}\n+\n+mod async_static {\n+    static r#async: u32 = 0;\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}\n+\n+mod async_const {\n+    const r#async: u32 = 0;\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}\n+\n+struct Foo;\n+impl Foo { fn r#async() {} }\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+\n+fn main() {\n+    struct r#async {}\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+    let r#async: r#async = r#async {};\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+    //~| ERROR async\n+    //~| WARN hard error in the 2018 edition\n+    //~| ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}\n+\n+#[macro_export]\n+macro_rules! produces_async {\n+    () => (pub fn r#async() {})\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}\n+\n+#[macro_export]\n+macro_rules! consumes_async {\n+    (r#async) => (1)\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}\n\\ No newline at end of file"}, {"sha": "6fffad0ce9b709d4d3d63f619818545559000cff", "filename": "src/test/ui/rust-2018/async-ident.rs", "status": "modified", "additions": 58, "deletions": 3, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/95208044e86af21569484c67a6b5bfd7eaa32b2f/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95208044e86af21569484c67a6b5bfd7eaa32b2f/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs?ref=95208044e86af21569484c67a6b5bfd7eaa32b2f", "patch": "@@ -9,18 +9,21 @@\n // except according to those terms.\n \n #![feature(raw_identifiers)]\n-#![deny(rust_2018_idioms)]\n-#![allow(dead_code)]\n+#![allow(dead_code, unused_variables, non_camel_case_types, non_upper_case_globals)]\n \n+// edition:2015\n // run-rustfix\n \n fn async() {} //~ ERROR async\n+//~^ WARN hard error in the 2018 edition\n \n macro_rules! foo {\n     ($foo:ident) => {};\n     ($async:expr, async) => {};\n     //~^ ERROR async\n     //~| ERROR async\n+    //~| WARN hard error in the 2018 edition\n+    //~| WARN hard error in the 2018 edition\n }\n \n foo!(async);\n@@ -29,4 +32,56 @@ mod dont_lint_raw {\n     fn r#async() {}\n }\n \n-fn main() {}\n+mod async_trait {\n+    trait async {}\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+    struct MyStruct;\n+    impl async for MyStruct {}\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}\n+\n+mod async_static {\n+    static async: u32 = 0;\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}\n+\n+mod async_const {\n+    const async: u32 = 0;\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}\n+\n+struct Foo;\n+impl Foo { fn async() {} }\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+\n+fn main() {\n+    struct async {}\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+    let async: async = async {};\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+    //~| ERROR async\n+    //~| WARN hard error in the 2018 edition\n+    //~| ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}\n+\n+#[macro_export]\n+macro_rules! produces_async {\n+    () => (pub fn async() {})\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}\n+\n+#[macro_export]\n+macro_rules! consumes_async {\n+    (async) => (1)\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}\n\\ No newline at end of file"}, {"sha": "85596e8fe6b767851c204432a3a8e5ced76135b7", "filename": "src/test/ui/rust-2018/async-ident.stderr", "status": "modified", "additions": 111, "deletions": 9, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/95208044e86af21569484c67a6b5bfd7eaa32b2f/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95208044e86af21569484c67a6b5bfd7eaa32b2f/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.stderr?ref=95208044e86af21569484c67a6b5bfd7eaa32b2f", "patch": "@@ -4,24 +4,126 @@ error: `async` is a keyword in the 2018 edition\n LL | fn async() {} //~ ERROR async\n    |    ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-note: lint level defined here\n-  --> $DIR/async-ident.rs:12:9\n-   |\n-LL | #![deny(rust_2018_idioms)]\n-   |         ^^^^^^^^^^^^^^^^\n-   = note: #[deny(async_idents)] implied by #[deny(rust_2018_idioms)]\n+   = note: #[deny(async_idents)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n-  --> $DIR/async-ident.rs:21:7\n+  --> $DIR/async-ident.rs:22:7\n    |\n LL |     ($async:expr, async) => {};\n    |       ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n-  --> $DIR/async-ident.rs:21:19\n+  --> $DIR/async-ident.rs:22:19\n    |\n LL |     ($async:expr, async) => {};\n    |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:36:11\n+   |\n+LL |     trait async {}\n+   |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:40:10\n+   |\n+LL |     impl async for MyStruct {}\n+   |          ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:46:12\n+   |\n+LL |     static async: u32 = 0;\n+   |            ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:52:11\n+   |\n+LL |     const async: u32 = 0;\n+   |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:58:15\n+   |\n+LL | impl Foo { fn async() {} }\n+   |               ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:63:12\n+   |\n+LL |     struct async {}\n+   |            ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:66:9\n+   |\n+LL |     let async: async = async {};\n+   |         ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:66:16\n+   |\n+LL |     let async: async = async {};\n+   |                ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:66:24\n+   |\n+LL |     let async: async = async {};\n+   |                        ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:77:19\n+   |\n+LL |     () => (pub fn async() {})\n+   |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:84:6\n+   |\n+LL |     (async) => (1)\n+   |      ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 14 previous errors\n "}]}