{"sha": "e90ee1674ae2fd32bc5e07a3a52562c45b273c56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MGVlMTY3NGFlMmZkMzJiYzVlMDdhM2E1MjU2MmM0NWIyNzNjNTY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-20T08:35:15Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-20T08:35:15Z"}, "message": "fix comparing of function pointers", "tree": {"sha": "835f10fcbb2ccd4e91c024ee7966acf779632db0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/835f10fcbb2ccd4e91c024ee7966acf779632db0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e90ee1674ae2fd32bc5e07a3a52562c45b273c56", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXZ6rDAAoJEFbW7qD8Z6xG7b8P/2qxcglacXnqUBCl4IMcGA73\nS9NfP307bMXnGxOy5+73WNiYSc3RlK1l6erXqKu8eQNQz1NH/vz0mq8b7wFXWziB\nS/DmZFik8MiytKTZr7xIn81nAPFlOZi1jAqhYyELCBWUflEQ+W6qbE2y2t+ASy5E\nisvJ9BFfBLQnUo5pwCm6RpyWwdcKzldUWMb8bOuZVAWOEwitSk9E/xyTJMUmu2VI\nEBqjSHWsA4cnVhFZUkMkwejz8BSthJ4Jr50qkS7M2D0RFdW0b/DrQQg8rqzo4keF\neDgxL82e3TxvyXs1k0cDE0ZRPCE3q58EcckdfkP5gHM4f/3I5SQzaWj+/8PtE3pO\nSBVqJwXk7sdTlZKbE1cc+viZJCirJW2qPw6cncVthpjqRIB5cKmsZf/S97mtu5at\nUrVjygFXPJsMtjJ3iQQ/PAxp/rhh66QL/3iWYaQqGzgpJ3hKaVhB+fg72v2bi2E+\nj5hZlMqFE17C6c/d+kxZPGbqy5eccgrl9TE35abL2QKoLdoRI8QhKN8jDMQ2/aB7\nyTGr3IETb66NXkFr7u0+Zp770FXJp/rhzFCJ1OY6MLjoax4u9bmAbe5SFizvykjg\nah+KE6YS76+ZbPSzuxKQRnLMPUQZcBsNwsZKOfsiTuG37dTzxj9c6ycUBq5jHpKA\nk8EJP0dJcMB5C53fAA8t\n=sX/y\n-----END PGP SIGNATURE-----", "payload": "tree 835f10fcbb2ccd4e91c024ee7966acf779632db0\nparent d9776427b465283bb2368be0301bf0e5cd1459eb\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466411715 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466411715 +0200\n\nfix comparing of function pointers"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e90ee1674ae2fd32bc5e07a3a52562c45b273c56", "html_url": "https://github.com/rust-lang/rust/commit/e90ee1674ae2fd32bc5e07a3a52562c45b273c56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e90ee1674ae2fd32bc5e07a3a52562c45b273c56/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9776427b465283bb2368be0301bf0e5cd1459eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9776427b465283bb2368be0301bf0e5cd1459eb", "html_url": "https://github.com/rust-lang/rust/commit/d9776427b465283bb2368be0301bf0e5cd1459eb"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "739e987a373c0526dfa53339affd07915629f7a8", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e90ee1674ae2fd32bc5e07a3a52562c45b273c56/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90ee1674ae2fd32bc5e07a3a52562c45b273c56/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=e90ee1674ae2fd32bc5e07a3a52562c45b273c56", "patch": "@@ -1404,6 +1404,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             (8, &ty::TyUint(UintTy::Us)) |\n             (_, &ty::TyUint(UintTy::U64)) => PrimVal::U64(self.memory.read_uint(ptr, 8)? as u64),\n \n+            (_, &ty::TyFnDef(def_id, substs, fn_ty)) => {\n+                PrimVal::FnPtr(self.memory.create_fn_ptr(def_id, substs, fn_ty))\n+            },\n+            (_, &ty::TyFnPtr(_)) => self.memory.read_ptr(ptr).map(PrimVal::FnPtr)?,\n             (_, &ty::TyRef(_, ty::TypeAndMut { ty, .. })) |\n             (_, &ty::TyRawPtr(ty::TypeAndMut { ty, .. })) => {\n                 if self.type_is_sized(ty) {"}, {"sha": "a7fecd773c907d676994f457dbe51d478de01b82", "filename": "src/memory.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e90ee1674ae2fd32bc5e07a3a52562c45b273c56/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90ee1674ae2fd32bc5e07a3a52562c45b273c56/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=e90ee1674ae2fd32bc5e07a3a52562c45b273c56", "patch": "@@ -42,7 +42,7 @@ impl Pointer {\n     }\n }\n \n-#[derive(Debug, Copy, Clone)]\n+#[derive(Debug, Copy, Clone, Hash, Eq, PartialEq)]\n pub struct FunctionDefinition<'tcx> {\n     pub def_id: DefId,\n     pub substs: &'tcx Substs<'tcx>,\n@@ -59,6 +59,8 @@ pub struct Memory<'tcx> {\n     /// Function \"allocations\". They exist solely so pointers have something to point to, and\n     /// we can figure out what they point to.\n     functions: HashMap<AllocId, FunctionDefinition<'tcx>>,\n+    /// Inverse map of `functions` so we don't allocate a new pointer every time we need one\n+    function_definitions: HashMap<FunctionDefinition<'tcx>, AllocId>,\n     next_id: AllocId,\n     pub pointer_size: usize,\n }\n@@ -69,22 +71,29 @@ impl<'tcx> Memory<'tcx> {\n         Memory {\n             alloc_map: HashMap::new(),\n             functions: HashMap::new(),\n+            function_definitions: HashMap::new(),\n             next_id: AllocId(0),\n             pointer_size: pointer_size,\n         }\n     }\n \n-    // FIXME: never create two pointers to the same def_id + substs combination\n-    // maybe re-use the statics cache of the EvalContext?\n     pub fn create_fn_ptr(&mut self, def_id: DefId, substs: &'tcx Substs<'tcx>, fn_ty: &'tcx BareFnTy<'tcx>) -> Pointer {\n-        let id = self.next_id;\n-        debug!(\"creating fn ptr: {}\", id);\n-        self.next_id.0 += 1;\n-        self.functions.insert(id, FunctionDefinition {\n+        let def = FunctionDefinition {\n             def_id: def_id,\n             substs: substs,\n             fn_ty: fn_ty,\n-        });\n+        };\n+        if let Some(&alloc_id) = self.function_definitions.get(&def) {\n+            return Pointer {\n+                alloc_id: alloc_id,\n+                offset: 0,\n+            };\n+        }\n+        let id = self.next_id;\n+        debug!(\"creating fn ptr: {}\", id);\n+        self.next_id.0 += 1;\n+        self.functions.insert(id, def);\n+        self.function_definitions.insert(def, id);\n         Pointer {\n             alloc_id: id,\n             offset: 0,\n@@ -361,6 +370,7 @@ impl<'tcx> Memory<'tcx> {\n             PrimVal::U32(n)  => self.write_uint(ptr, n as u64, 4),\n             PrimVal::U64(n)  => self.write_uint(ptr, n as u64, 8),\n             PrimVal::IntegerPtr(n) => self.write_uint(ptr, n as u64, pointer_size),\n+            PrimVal::FnPtr(_p) |\n             PrimVal::AbstractPtr(_p) => unimplemented!(),\n         }\n     }"}, {"sha": "67ef58948fa769e7313a02dd1021148dcaf5d1d1", "filename": "src/primval.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e90ee1674ae2fd32bc5e07a3a52562c45b273c56/src%2Fprimval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90ee1674ae2fd32bc5e07a3a52562c45b273c56/src%2Fprimval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprimval.rs?ref=e90ee1674ae2fd32bc5e07a3a52562c45b273c56", "patch": "@@ -10,6 +10,7 @@ pub enum PrimVal {\n     U8(u8), U16(u16), U32(u32), U64(u64),\n \n     AbstractPtr(Pointer),\n+    FnPtr(Pointer),\n     IntegerPtr(u64),\n }\n \n@@ -130,9 +131,20 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n \n         (IntegerPtr(l), IntegerPtr(r)) => int_binops!(IntegerPtr, l, r),\n \n-        (AbstractPtr(_), IntegerPtr(_)) | (IntegerPtr(_), AbstractPtr(_)) =>\n+        (AbstractPtr(_), IntegerPtr(_)) |\n+        (IntegerPtr(_), AbstractPtr(_)) |\n+        (FnPtr(_), AbstractPtr(_)) |\n+        (AbstractPtr(_), FnPtr(_)) |\n+        (FnPtr(_), IntegerPtr(_)) |\n+        (IntegerPtr(_), FnPtr(_)) =>\n             return unrelated_ptr_ops(bin_op),\n \n+        (FnPtr(l_ptr), FnPtr(r_ptr)) => match bin_op {\n+            Eq => Bool(l_ptr == r_ptr),\n+            Ne => Bool(l_ptr != r_ptr),\n+            _ => return Err(EvalError::Unimplemented(format!(\"unimplemented fn ptr comparison: {:?}\", bin_op))),\n+        },\n+\n         (AbstractPtr(l_ptr), AbstractPtr(r_ptr)) => {\n             if l_ptr.alloc_id != r_ptr.alloc_id {\n                 return unrelated_ptr_ops(bin_op);"}, {"sha": "2e75a5a3ea2a5f74810df1ef5406e107c54f84ab", "filename": "tests/run-pass/function_pointers.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e90ee1674ae2fd32bc5e07a3a52562c45b273c56/tests%2Frun-pass%2Ffunction_pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90ee1674ae2fd32bc5e07a3a52562c45b273c56/tests%2Frun-pass%2Ffunction_pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffunction_pointers.rs?ref=e90ee1674ae2fd32bc5e07a3a52562c45b273c56", "patch": "@@ -12,4 +12,6 @@ fn call_fn_ptr() -> i32 {\n \n fn main() {\n     assert_eq!(call_fn_ptr(), 42);\n+    assert!(return_fn_ptr() == f);\n+    assert!(return_fn_ptr() as unsafe fn() -> i32 == f as fn() -> i32 as unsafe fn() -> i32);\n }"}]}