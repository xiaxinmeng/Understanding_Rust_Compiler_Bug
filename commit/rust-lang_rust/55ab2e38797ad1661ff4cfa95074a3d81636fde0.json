{"sha": "55ab2e38797ad1661ff4cfa95074a3d81636fde0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YWIyZTM4Nzk3YWQxNjYxZmY0Y2ZhOTUwNzRhM2Q4MTYzNmZkZTA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-18T15:57:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-18T15:57:33Z"}, "message": "Rollup merge of #81546 - hyd-dev:libtest-run-out-of-threads, r=Mark-Simulacrum\n\n[libtest] Run the test synchronously when hitting thread limit\n\nlibtest currently panics if it hits the thread limit. This often results in spurious test failures (<code>thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 11, kind: WouldBlock, message: \"Resource temporarily unavailable\" }'</code> ... `error: test failed, to rerun pass '--lib'`). This PR makes it continue to run the test synchronously if it runs out of threads.\n\nCloses #78165.\n\n``@rustbot`` label: A-libtest T-libs", "tree": {"sha": "f0e24335cc00fb698c7aeab728539113bf1da127", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0e24335cc00fb698c7aeab728539113bf1da127"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55ab2e38797ad1661ff4cfa95074a3d81636fde0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgLo5tCRBK7hj4Ov3rIwAAdHIIACuPL+XXPrGdgDLxe5DPib6E\nYFY7fXtD0ubfsDSl/ZhBgW6cpTRzFnU7U8EpWoybLskG3e2Y3ZL9IMJjHQtmi1Te\nQt7nqJl8a5Pq+A8y69USEVoXJqOOP1qS0jd+I/Vm5H3gp4jD8Z5CE7T0FnQGws4r\n0pMF4wzLp/sbRN11xyiRirl6aapw2jTrTbV54q0k+cQYon/7dka/nVM+snqCCZee\n1kszMpsKU5Kkl2WDIVr+DE+vvrvxsqmiBW/l/nLStBvtvtwxuQrpfVuoshpvfIIm\nk81QuAgiIj3aBbulJj8IwNlZOEyO3dkGvWKA71iTTtRbdSfGRd+IZvPTuZhMI9I=\n=AETJ\n-----END PGP SIGNATURE-----\n", "payload": "tree f0e24335cc00fb698c7aeab728539113bf1da127\nparent cb2effd44e667d133e31ef334e30d10195218ce6\nparent 43aed7441ee289c6228ecead91ee66245122b880\nauthor Dylan DPC <dylan.dpc@gmail.com> 1613663853 +0100\ncommitter GitHub <noreply@github.com> 1613663853 +0100\n\nRollup merge of #81546 - hyd-dev:libtest-run-out-of-threads, r=Mark-Simulacrum\n\n[libtest] Run the test synchronously when hitting thread limit\n\nlibtest currently panics if it hits the thread limit. This often results in spurious test failures (<code>thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 11, kind: WouldBlock, message: \"Resource temporarily unavailable\" }'</code> ... `error: test failed, to rerun pass '--lib'`). This PR makes it continue to run the test synchronously if it runs out of threads.\n\nCloses #78165.\n\n``@rustbot`` label: A-libtest T-libs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55ab2e38797ad1661ff4cfa95074a3d81636fde0", "html_url": "https://github.com/rust-lang/rust/commit/55ab2e38797ad1661ff4cfa95074a3d81636fde0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55ab2e38797ad1661ff4cfa95074a3d81636fde0/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb2effd44e667d133e31ef334e30d10195218ce6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb2effd44e667d133e31ef334e30d10195218ce6", "html_url": "https://github.com/rust-lang/rust/commit/cb2effd44e667d133e31ef334e30d10195218ce6"}, {"sha": "43aed7441ee289c6228ecead91ee66245122b880", "url": "https://api.github.com/repos/rust-lang/rust/commits/43aed7441ee289c6228ecead91ee66245122b880", "html_url": "https://github.com/rust-lang/rust/commit/43aed7441ee289c6228ecead91ee66245122b880"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "ae38030d49771c05d185ab08f7571332d028b6ff", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/55ab2e38797ad1661ff4cfa95074a3d81636fde0/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ab2e38797ad1661ff4cfa95074a3d81636fde0/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=55ab2e38797ad1661ff4cfa95074a3d81636fde0", "patch": "@@ -506,7 +506,18 @@ pub fn run_test(\n         let supports_threads = !cfg!(target_os = \"emscripten\") && !cfg!(target_arch = \"wasm32\");\n         if concurrency == Concurrent::Yes && supports_threads {\n             let cfg = thread::Builder::new().name(name.as_slice().to_owned());\n-            Some(cfg.spawn(runtest).unwrap())\n+            let mut runtest = Arc::new(Mutex::new(Some(runtest)));\n+            let runtest2 = runtest.clone();\n+            match cfg.spawn(move || runtest2.lock().unwrap().take().unwrap()()) {\n+                Ok(handle) => Some(handle),\n+                Err(e) if e.kind() == io::ErrorKind::WouldBlock => {\n+                    // `ErrorKind::WouldBlock` means hitting the thread limit on some\n+                    // platforms, so run the test synchronously here instead.\n+                    Arc::get_mut(&mut runtest).unwrap().get_mut().unwrap().take().unwrap()();\n+                    None\n+                }\n+                Err(e) => panic!(\"failed to spawn thread to run test: {}\", e),\n+            }\n         } else {\n             runtest();\n             None"}, {"sha": "29c1bc71d870459d5ebcd94f04b8eb4686efd809", "filename": "src/test/run-make/libtest-thread-limit/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/55ab2e38797ad1661ff4cfa95074a3d81636fde0/src%2Ftest%2Frun-make%2Flibtest-thread-limit%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/55ab2e38797ad1661ff4cfa95074a3d81636fde0/src%2Ftest%2Frun-make%2Flibtest-thread-limit%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flibtest-thread-limit%2FMakefile?ref=55ab2e38797ad1661ff4cfa95074a3d81636fde0", "patch": "@@ -0,0 +1,7 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# only-linux\n+\n+all:\n+\t$(RUSTC) test.rs --test --target $(TARGET)\n+\t$(shell ulimit -p 0 && $(call RUN,test))"}, {"sha": "d899411a49ea0c9979eabb6691c5701d4c017c37", "filename": "src/test/run-make/libtest-thread-limit/test.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/55ab2e38797ad1661ff4cfa95074a3d81636fde0/src%2Ftest%2Frun-make%2Flibtest-thread-limit%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ab2e38797ad1661ff4cfa95074a3d81636fde0/src%2Ftest%2Frun-make%2Flibtest-thread-limit%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flibtest-thread-limit%2Ftest.rs?ref=55ab2e38797ad1661ff4cfa95074a3d81636fde0", "patch": "@@ -0,0 +1,16 @@\n+#![feature(once_cell)]\n+\n+use std::{io::ErrorKind, lazy::SyncOnceCell, thread::{self, Builder, ThreadId}};\n+\n+static THREAD_ID: SyncOnceCell<ThreadId> = SyncOnceCell::new();\n+\n+#[test]\n+fn spawn_thread_would_block() {\n+    assert_eq!(Builder::new().spawn(|| unreachable!()).unwrap_err().kind(), ErrorKind::WouldBlock);\n+    THREAD_ID.set(thread::current().id()).unwrap();\n+}\n+\n+#[test]\n+fn run_in_same_thread() {\n+    assert_eq!(*THREAD_ID.get().unwrap(), thread::current().id());\n+}"}]}