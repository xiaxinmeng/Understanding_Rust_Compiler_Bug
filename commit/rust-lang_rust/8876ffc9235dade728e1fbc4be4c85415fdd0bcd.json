{"sha": "8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NzZmZmM5MjM1ZGFkZTcyOGUxZmJjNGJlNGM4NTQxNWZkZDBiY2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-02T19:42:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-02T19:42:07Z"}, "message": "Auto merge of #77462 - jonas-schievink:rollup-m0rqdh5, r=jonas-schievink\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #76101 (Update RELEASES.md for 1.47.0)\n - #76739 (resolve: prohibit anon const non-static lifetimes)\n - #76811 (Doc alias name restriction)\n - #77405 (Add tracking issue of iter_advance_by feature)\n - #77409 (Add example for iter chain struct)\n - #77415 (Better error message for `async` blocks in a const-context)\n - #77423 (Add `-Zprecise-enum-drop-elaboration`)\n - #77432 (Use posix_spawn on musl targets)\n - #77441 (Fix AVR stack corruption bug)\n - #77442 (Clean up on example doc fixes for ptr::copy)\n - #77444 (Fix span for incorrect pattern field and add label)\n - #77453 (Stop running macOS builds on Azure Pipelines)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "6620cd20a64fe21bbe2a0dcb57e389315be3801e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6620cd20a64fe21bbe2a0dcb57e389315be3801e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "html_url": "https://github.com/rust-lang/rust/commit/8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be3808108e15d84881f07af85b3145bcdd626e48", "url": "https://api.github.com/repos/rust-lang/rust/commits/be3808108e15d84881f07af85b3145bcdd626e48", "html_url": "https://github.com/rust-lang/rust/commit/be3808108e15d84881f07af85b3145bcdd626e48"}, {"sha": "0c5f0b1c690d108df0951333b1c24f6ebc02dc0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c5f0b1c690d108df0951333b1c24f6ebc02dc0c", "html_url": "https://github.com/rust-lang/rust/commit/0c5f0b1c690d108df0951333b1c24f6ebc02dc0c"}], "stats": {"total": 621, "additions": 409, "deletions": 212}, "files": [{"sha": "62d30842b230c0729f14b744b1e2f7795b9411be", "filename": "RELEASES.md", "status": "modified", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -1,3 +1,138 @@\n+Version 1.47.0 (2020-10-08)\n+==========================\n+\n+Language\n+--------\n+- [Closures will now warn when not used.][74869]\n+\n+Compiler\n+--------\n+- [Stabilized the `-C control-flow-guard` codegen option][73893], which enables\n+  [Control Flow Guard][1.47.0-cfg] for Windows platforms, and is ignored on other\n+  platforms.\n+- [Upgraded to LLVM 11.][73526]\n+- [Added tier 3\\* support for the `thumbv4t-none-eabi` target.][74419]\n+- [Upgrade the FreeBSD toolchain to version 11.4][75204]\n+- [`RUST_BACKTRACE`'s output is now more compact.][75048]\n+\n+\\* Refer to Rust's [platform support page][forge-platform-support] for more\n+information on Rust's tiered platform support.\n+\n+Libraries\n+---------\n+- [`CStr` now implements `Index<RangeFrom<usize>>`.][74021]\n+- [Traits in `std`/`core` are now implemented for arrays of any length, not just\n+  those of length less than 33.][74060]\n+- [`ops::RangeFull` and `ops::Range` now implement Default.][73197]\n+- [`panic::Location` now implements `Copy`, `Clone`, `Eq`, `Hash`, `Ord`,\n+  `PartialEq`, and `PartialOrd`.][73583]\n+\n+Stabilized APIs\n+---------------\n+- [`Ident::new_raw`]\n+- [`Range::is_empty`]\n+- [`RangeInclusive::is_empty`]\n+- [`Result::as_deref`]\n+- [`Result::as_deref_mut`]\n+- [`Vec::leak`]\n+- [`pointer::offset_from`]\n+- [`f32::TAU`]\n+- [`f64::TAU`]\n+\n+The following previously stable APIs have now been made const.\n+\n+- [The `new` method for all `NonZero` integers.][73858]\n+- [The `checked_add`,`checked_sub`,`checked_mul`,`checked_neg`, `checked_shl`,\n+  `checked_shr`, `saturating_add`, `saturating_sub`, and `saturating_mul`\n+  methods for all integers.][73858]\n+- [The `checked_abs`, `saturating_abs`, `saturating_neg`, and `signum`  for all\n+  signed integers.][73858]\n+- [The `is_ascii_alphabetic`, `is_ascii_uppercase`, `is_ascii_lowercase`,\n+  `is_ascii_alphanumeric`, `is_ascii_digit`, `is_ascii_hexdigit`,\n+  `is_ascii_punctuation`, `is_ascii_graphic`, `is_ascii_whitespace`, and\n+  `is_ascii_control` methods for `char` and `u8`.][73858]\n+\n+Cargo\n+-----\n+- [`build-dependencies` are now built with opt-level 0 by default.][cargo/8500]\n+  You can override this by setting the following in your `Cargo.toml`.\n+  ```toml\n+  [profile.release.build-override]\n+  opt-level = 3\n+  ```\n+- [`cargo-help` will now display man pages for commands rather just the\n+  `--help` text.][cargo/8456]\n+- [`cargo-metadata` now emits a `test` field indicating if a target has\n+  tests enabled.][cargo/8478]\n+- [`workspace.default-members` now respects `workspace.exclude`.][cargo/8485]\n+- [`cargo-publish` will now use an alternative registry by default if it's the\n+  only registry specified in `package.publish`.][cargo/8571]\n+\n+Misc\n+----\n+- [Added a help button beside Rustdoc's searchbar that explains rustdoc's\n+  type based search.][75366]\n+- [Added the Ayu theme to rustdoc.][71237]\n+\n+Compatibility Notes\n+-------------------\n+- [Bumped the minimum supported Emscripten version to 1.39.20.][75716]\n+- [Fixed a regression parsing `{} && false` in tail expressions.][74650]\n+- [Added changes to how proc-macros are expanded in `macro_rules!` that should\n+  help to preserve more span information.][73084] These changes may cause\n+  compiliation errors if your macro was unhygenic or didn't correctly handle\n+  `Delimiter::None`.\n+- [Moved support for the CloudABI target to tier 3.][75568]\n+- [`linux-gnu` targets now require minimum kernel 2.6.32 and glibc 2.11.][74163]\n+- [Added the `rustc-docs` component.][75560] This allows you to install\n+  and read the documentation for the compiler internal APIs. (Currently only\n+  available for `x86_64-unknown-linux-gnu`.)\n+\n+Internal Only\n+--------\n+- [Improved default settings for bootstrapping in `x.py`.][73964] You can read details about this change in the [\"Changes To `x.py` Defaults\"](https://blog.rust-lang.org/inside-rust/2020/08/30/changes-to-x-py-defaults.html) post on the Inside Rust blog.\n+\n+[1.47.0-cfg]: https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard\n+[75048]: https://github.com/rust-lang/rust/pull/75048/\n+[74163]: https://github.com/rust-lang/rust/pull/74163/\n+[71237]: https://github.com/rust-lang/rust/pull/71237/\n+[74869]: https://github.com/rust-lang/rust/pull/74869/\n+[73858]: https://github.com/rust-lang/rust/pull/73858/\n+[75716]: https://github.com/rust-lang/rust/pull/75716/\n+[75908]: https://github.com/rust-lang/rust/pull/75908/\n+[75516]: https://github.com/rust-lang/rust/pull/75516/\n+[75560]: https://github.com/rust-lang/rust/pull/75560/\n+[75568]: https://github.com/rust-lang/rust/pull/75568/\n+[75366]: https://github.com/rust-lang/rust/pull/75366/\n+[75204]: https://github.com/rust-lang/rust/pull/75204/\n+[74650]: https://github.com/rust-lang/rust/pull/74650/\n+[74419]: https://github.com/rust-lang/rust/pull/74419/\n+[73964]: https://github.com/rust-lang/rust/pull/73964/\n+[74021]: https://github.com/rust-lang/rust/pull/74021/\n+[74060]: https://github.com/rust-lang/rust/pull/74060/\n+[73893]: https://github.com/rust-lang/rust/pull/73893/\n+[73526]: https://github.com/rust-lang/rust/pull/73526/\n+[73583]: https://github.com/rust-lang/rust/pull/73583/\n+[73084]: https://github.com/rust-lang/rust/pull/73084/\n+[73197]: https://github.com/rust-lang/rust/pull/73197/\n+[72488]: https://github.com/rust-lang/rust/pull/72488/\n+[cargo/8456]: https://github.com/rust-lang/cargo/pull/8456/\n+[cargo/8478]: https://github.com/rust-lang/cargo/pull/8478/\n+[cargo/8485]: https://github.com/rust-lang/cargo/pull/8485/\n+[cargo/8500]: https://github.com/rust-lang/cargo/pull/8500/\n+[cargo/8571]: https://github.com/rust-lang/cargo/pull/8571/\n+[`Ident::new_raw`]:  https://doc.rust-lang.org/nightly/proc_macro/struct.Ident.html#method.new_raw\n+[`Range::is_empty`]: https://doc.rust-lang.org/nightly/std/ops/struct.Range.html#method.is_empty\n+[`RangeInclusive::is_empty`]: https://doc.rust-lang.org/nightly/std/ops/struct.RangeInclusive.html#method.is_empty\n+[`Result::as_deref_mut`]: https://doc.rust-lang.org/nightly/std/result/enum.Result.html#method.as_deref_mut\n+[`Result::as_deref`]: https://doc.rust-lang.org/nightly/std/result/enum.Result.html#method.as_deref\n+[`TypeId::of`]: https://doc.rust-lang.org/nightly/std/any/struct.TypeId.html#method.of\n+[`Vec::leak`]: https://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#method.leak\n+[`f32::TAU`]: https://doc.rust-lang.org/nightly/std/f32/consts/constant.TAU.html\n+[`f64::TAU`]: https://doc.rust-lang.org/nightly/std/f64/consts/constant.TAU.html\n+[`pointer::offset_from`]: https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset_from\n+\n+\n Version 1.46.0 (2020-08-27)\n ==========================\n "}, {"sha": "07ce9d0cd9484611b8e15840382f30d720b9b549", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -568,6 +568,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(osx_rpath_install_name, true);\n     tracked!(panic_abort_tests, true);\n     tracked!(plt, Some(true));\n+    tracked!(precise_enum_drop_elaboration, false);\n     tracked!(print_fuel, Some(\"abc\".to_string()));\n     tracked!(profile, true);\n     tracked!(profile_emit, Some(PathBuf::from(\"abc\")));"}, {"sha": "185f0edfeb6bcbeaf6aab1f17c8fb43104510b2d", "filename": "compiler/rustc_mir/src/dataflow/impls/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fmod.rs?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -358,6 +358,10 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeInitializedPlaces<'_, 'tcx> {\n         discr: &mir::Operand<'tcx>,\n         edge_effects: &mut impl SwitchIntEdgeEffects<G>,\n     ) {\n+        if !self.tcx.sess.opts.debugging_opts.precise_enum_drop_elaboration {\n+            return;\n+        }\n+\n         let enum_ = discr.place().and_then(|discr| {\n             switch_on_enum_discriminant(self.tcx, &self.body, &self.body[block], discr)\n         });\n@@ -469,6 +473,10 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeUninitializedPlaces<'_, 'tcx> {\n         discr: &mir::Operand<'tcx>,\n         edge_effects: &mut impl SwitchIntEdgeEffects<G>,\n     ) {\n+        if !self.tcx.sess.opts.debugging_opts.precise_enum_drop_elaboration {\n+            return;\n+        }\n+\n         if !self.mark_inactive_variants_as_uninit {\n             return;\n         }"}, {"sha": "32e233e337da34350a593b7372b17ab8c062b393", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -151,14 +151,15 @@ impl NonConstOp for FnPtrCast {\n }\n \n #[derive(Debug)]\n-pub struct Generator;\n+pub struct Generator(pub hir::GeneratorKind);\n impl NonConstOp for Generator {\n     fn status_in_item(&self, _: &ConstCx<'_, '_>) -> Status {\n         Status::Forbidden\n     }\n \n     fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n-        ccx.tcx.sess.struct_span_err(span, \"Generators and `async` functions cannot be `const`\")\n+        let msg = format!(\"{}s are not allowed in {}s\", self.0, ccx.const_kind());\n+        ccx.tcx.sess.struct_span_err(span, &msg)\n     }\n }\n "}, {"sha": "4e714bfeed310c582c62b1bac484456bdaa44737", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -770,6 +770,14 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                     return;\n                 }\n \n+                // `async` blocks get lowered to `std::future::from_generator(/* a closure */)`.\n+                let is_async_block = Some(callee) == tcx.lang_items().from_generator_fn();\n+                if is_async_block {\n+                    let kind = hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Block);\n+                    self.check_op(ops::Generator(kind));\n+                    return;\n+                }\n+\n                 // HACK: This is to \"unstabilize\" the `transmute` intrinsic\n                 // within const fns. `transmute` is allowed in all other const contexts.\n                 // This won't really scale to more intrinsics or functions. Let's allow const\n@@ -869,7 +877,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n             TerminatorKind::Abort => self.check_op(ops::Abort),\n \n             TerminatorKind::GeneratorDrop | TerminatorKind::Yield { .. } => {\n-                self.check_op(ops::Generator)\n+                self.check_op(ops::Generator(hir::GeneratorKind::Gen))\n             }\n \n             TerminatorKind::Assert { .. }"}, {"sha": "5aced9dc37c7eb189fd748fb487214735c0293d9", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -795,6 +795,7 @@ impl<'a> Parser<'a> {\n         }\n         self.bump();\n         let (fields, etc) = self.parse_pat_fields().unwrap_or_else(|mut e| {\n+            e.span_label(path.span, \"while parsing the fields for this pattern\");\n             e.emit();\n             self.recover_stmt();\n             (vec![], true)\n@@ -844,7 +845,7 @@ impl<'a> Parser<'a> {\n \n             // check that a comma comes after every field\n             if !ate_comma {\n-                let err = self.struct_span_err(self.prev_token.span, \"expected `,`\");\n+                let err = self.struct_span_err(self.token.span, \"expected `,`\");\n                 if let Some(mut delayed) = delayed_err {\n                     delayed.emit();\n                 }"}, {"sha": "b52216c45ce95a2cbff447b33b50691db12a3f47", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -260,23 +260,42 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n+    fn doc_alias_str_error(&self, meta: &NestedMetaItem) {\n+        self.tcx\n+            .sess\n+            .struct_span_err(\n+                meta.span(),\n+                \"doc alias attribute expects a string: #[doc(alias = \\\"0\\\")]\",\n+            )\n+            .emit();\n+    }\n+\n     fn check_doc_alias(&self, attr: &Attribute, hir_id: HirId, target: Target) -> bool {\n         if let Some(mi) = attr.meta() {\n             if let Some(list) = mi.meta_item_list() {\n                 for meta in list {\n                     if meta.has_name(sym::alias) {\n-                        if !meta.is_value_str()\n-                            || meta\n-                                .value_str()\n-                                .map(|s| s.to_string())\n-                                .unwrap_or_else(String::new)\n-                                .is_empty()\n+                        if !meta.is_value_str() {\n+                            self.doc_alias_str_error(meta);\n+                            return false;\n+                        }\n+                        let doc_alias =\n+                            meta.value_str().map(|s| s.to_string()).unwrap_or_else(String::new);\n+                        if doc_alias.is_empty() {\n+                            self.doc_alias_str_error(meta);\n+                            return false;\n+                        }\n+                        if let Some(c) =\n+                            doc_alias.chars().find(|&c| c == '\"' || c == '\\'' || c.is_whitespace())\n                         {\n                             self.tcx\n                                 .sess\n                                 .struct_span_err(\n                                     meta.span(),\n-                                    \"doc alias attribute expects a string: #[doc(alias = \\\"0\\\")]\",\n+                                    &format!(\n+                                        \"{:?} character isn't allowed in `#[doc(alias = \\\"...\\\")]`\",\n+                                        c,\n+                                    ),\n                                 )\n                                 .emit();\n                             return false;\n@@ -312,6 +331,7 @@ impl CheckAttrVisitor<'tcx> {\n                                     &format!(\"`#[doc(alias = \\\"...\\\")]` isn't allowed on {}\", err),\n                                 )\n                                 .emit();\n+                            return false;\n                         }\n                     }\n                 }"}, {"sha": "521ea7ad184f979bcc4c48cbd98e35d7fc15c0e3", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -16,6 +16,7 @@ use rustc_hir::def::{self, CtorKind, DefKind};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::PrimTy;\n use rustc_session::config::nightly_options;\n+use rustc_session::parse::feature_err;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, Span, DUMMY_SP};\n@@ -1599,4 +1600,32 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n             _ => {}\n         }\n     }\n+\n+    /// Non-static lifetimes are prohibited in anonymous constants under `min_const_generics` so\n+    /// this function will emit an error if `min_const_generics` is enabled, the body identified by\n+    /// `body_id` is an anonymous constant and `lifetime_ref` is non-static.\n+    crate fn maybe_emit_forbidden_non_static_lifetime_error(\n+        &self,\n+        body_id: hir::BodyId,\n+        lifetime_ref: &'tcx hir::Lifetime,\n+    ) {\n+        let is_anon_const = matches!(\n+            self.tcx.def_kind(self.tcx.hir().body_owner_def_id(body_id)),\n+            hir::def::DefKind::AnonConst\n+        );\n+        let is_allowed_lifetime = matches!(\n+            lifetime_ref.name,\n+            hir::LifetimeName::Implicit | hir::LifetimeName::Static | hir::LifetimeName::Underscore\n+        );\n+\n+        if self.tcx.features().min_const_generics && is_anon_const && !is_allowed_lifetime {\n+            feature_err(\n+                &self.tcx.sess.parse_sess,\n+                sym::const_generics,\n+                lifetime_ref.span,\n+                \"a non-static lifetime is not allowed in a `const`\",\n+            )\n+            .emit();\n+        }\n+    }\n }"}, {"sha": "072fb509b192a8e130ba328edabfd5092007fc11", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -1777,6 +1777,10 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let result = loop {\n             match *scope {\n                 Scope::Body { id, s } => {\n+                    // Non-static lifetimes are prohibited in anonymous constants under\n+                    // `min_const_generics`.\n+                    self.maybe_emit_forbidden_non_static_lifetime_error(id, lifetime_ref);\n+\n                     outermost_body = Some(id);\n                     scope = s;\n                 }"}, {"sha": "b705ab6d9313aad052aaf2f73406d86063488291", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -1008,6 +1008,10 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"a single extra argument to prepend the linker invocation (can be used several times)\"),\n     pre_link_args: Vec<String> = (Vec::new(), parse_list, [UNTRACKED],\n         \"extra arguments to prepend to the linker invocation (space separated)\"),\n+    precise_enum_drop_elaboration: bool = (true, parse_bool, [TRACKED],\n+        \"use a more precise version of drop elaboration for matches on enums (default: yes). \\\n+        This results in better codegen, but has caused miscompilations on some tier 2 platforms. \\\n+        See #77382 and #74551.\"),\n     print_fuel: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"make rustc print the total optimization fuel used by a crate\"),\n     print_link_args: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "426cdb12ec4e40118c91c7749c03d8a84dd8bb1e", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -1901,9 +1901,10 @@ pub unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {\n /// ```\n /// use std::ptr;\n ///\n-/// /// # Safety:\n+/// /// # Safety\n+/// ///\n /// /// * `ptr` must be correctly aligned for its type and non-zero.\n-/// /// * `ptr` must be valid for reads of `elts` contiguous objects of type `T`.\n+/// /// * `ptr` must be valid for reads of `elts` contiguous elements of type `T`.\n /// /// * Those elements must not be used after calling this function unless `T: Copy`.\n /// # #[allow(dead_code)]\n /// unsafe fn from_buf_raw<T>(ptr: *const T, elts: usize) -> Vec<T> {"}, {"sha": "ac27ec19b3688a6cb634b55f6c1a6973a2af8078", "filename": "library/core/src/iter/adapters/chain.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -6,6 +6,17 @@ use crate::usize;\n ///\n /// This `struct` is created by [`Iterator::chain`]. See its documentation\n /// for more.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::iter::Chain;\n+/// use std::slice::Iter;\n+///\n+/// let a1 = [1, 2, 3];\n+/// let a2 = [4, 5, 6];\n+/// let iter: Chain<Iter<_>, Iter<_>> = a1.iter().chain(a2.iter());\n+/// ```\n #[derive(Clone, Debug)]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "16bee0e2eee1866349427a7981ee4da42c655c5c", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -123,7 +123,7 @@ pub trait DoubleEndedIterator: Iterator {\n     /// assert_eq!(iter.advance_back_by(100), Err(1)); // only `&3` was skipped\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"none\")]\n+    #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"77404\")]\n     fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n         for i in 0..n {\n             self.next_back().ok_or(i)?;"}, {"sha": "813afcc0ec6e4fd65a3dbd00e727c3ec6ffba5bf", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -314,7 +314,7 @@ pub trait Iterator {\n     /// assert_eq!(iter.advance_by(100), Err(1)); // only `&4` was skipped\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"none\")]\n+    #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"77404\")]\n     fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n         for i in 0..n {\n             self.next().ok_or(i)?;"}, {"sha": "32f456266c99738ebd5d9280cd9b53016864ac1f", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -252,7 +252,8 @@ impl Command {\n     #[cfg(not(any(\n         target_os = \"macos\",\n         target_os = \"freebsd\",\n-        all(target_os = \"linux\", target_env = \"gnu\")\n+        all(target_os = \"linux\", target_env = \"gnu\"),\n+        all(target_os = \"linux\", target_env = \"musl\"),\n     )))]\n     fn posix_spawn(\n         &mut self,\n@@ -267,7 +268,8 @@ impl Command {\n     #[cfg(any(\n         target_os = \"macos\",\n         target_os = \"freebsd\",\n-        all(target_os = \"linux\", target_env = \"gnu\")\n+        all(target_os = \"linux\", target_env = \"gnu\"),\n+        all(target_os = \"linux\", target_env = \"musl\"),\n     ))]\n     fn posix_spawn(\n         &mut self,\n@@ -297,10 +299,10 @@ impl Command {\n             }\n         }\n \n-        // Solaris and glibc 2.29+ can set a new working directory, and maybe\n-        // others will gain this non-POSIX function too. We'll check for this\n-        // weak symbol as soon as it's needed, so we can return early otherwise\n-        // to do a manual chdir before exec.\n+        // Solaris, glibc 2.29+, and musl 1.24+ can set a new working directory,\n+        // and maybe others will gain this non-POSIX function too. We'll check\n+        // for this weak symbol as soon as it's needed, so we can return early\n+        // otherwise to do a manual chdir before exec.\n         weak! {\n             fn posix_spawn_file_actions_addchdir_np(\n                 *mut libc::posix_spawn_file_actions_t,"}, {"sha": "37c2e9bc35a0db9ba3efc3b679453db8a7089237", "filename": "src/ci/azure-pipelines/auto.yml", "status": "modified", "additions": 3, "deletions": 39, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Fci%2Fazure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Fci%2Fazure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fauto.yml?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -18,45 +18,9 @@ trigger:\n   - auto\n \n jobs:\n-- job: macOS\n+- job: Dummy\n   timeoutInMinutes: 600\n   pool:\n-    vmImage: macos-10.15\n+    vmImage: ubuntu-16.04\n   steps:\n-  - template: steps/run.yml\n-  variables:\n-    # We're still uploading macOS builds from Azure Pipelines.\n-    - group: prod-credentials\n-  strategy:\n-    matrix:\n-      # OSX builders running tests, these run the full test suite.\n-      # NO_DEBUG_ASSERTIONS=1 to make them go faster, but also do have some\n-      # runners that run `//ignore-debug` tests.\n-      #\n-      # Note that the compiler is compiled to target 10.8 here because the Xcode\n-      # version that we're using, 8.2, cannot compile LLVM for OSX 10.7.\n-      x86_64-apple:\n-        SCRIPT: ./x.py --stage 2 test\n-        INITIAL_RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc --set llvm.ninja=false\n-        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n-        MACOSX_DEPLOYMENT_TARGET: 10.8\n-        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n-        NO_LLVM_ASSERTIONS: 1\n-        NO_DEBUG_ASSERTIONS: 1\n-\n-      dist-x86_64-apple:\n-        SCRIPT: ./x.py dist\n-        INITIAL_RUST_CONFIGURE_ARGS: --host=x86_64-apple-darwin --target=x86_64-apple-darwin,aarch64-apple-ios,x86_64-apple-ios --enable-full-tools --enable-sanitizers --enable-profiler --set rust.jemalloc --set llvm.ninja=false\n-        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n-        MACOSX_DEPLOYMENT_TARGET: 10.7\n-        NO_LLVM_ASSERTIONS: 1\n-        NO_DEBUG_ASSERTIONS: 1\n-        DIST_REQUIRE_ALL_TOOLS: 1\n-\n-      dist-x86_64-apple-alt:\n-        SCRIPT: ./x.py dist\n-        INITIAL_RUST_CONFIGURE_ARGS: --enable-extended --enable-profiler --set rust.jemalloc --set llvm.ninja=false\n-        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n-        MACOSX_DEPLOYMENT_TARGET: 10.7\n-        NO_LLVM_ASSERTIONS: 1\n-        NO_DEBUG_ASSERTIONS: 1\n+  - bash: echo \"We're running this job since bors is still gating on Azure\""}, {"sha": "34fc4d76fa207d7cc572ef02c24ffcda40001993", "filename": "src/ci/azure-pipelines/steps/run.yml", "status": "removed", "additions": 0, "deletions": 142, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/be3808108e15d84881f07af85b3145bcdd626e48/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "raw_url": "https://github.com/rust-lang/rust/raw/be3808108e15d84881f07af85b3145bcdd626e48/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml?ref=be3808108e15d84881f07af85b3145bcdd626e48", "patch": "@@ -1,142 +0,0 @@\n-#####################################\n-##    READ BEFORE CHANGING THIS    ##\n-#####################################\n-\n-# We're in the process of evaluating GitHub Actions as a possible replacement\n-# for Azure Pipelines, and at the moment the configuration is duplicated\n-# between the two CI providers. Be sure to also change the configuration in\n-# src/ci/github-actions when changing this file.\n-\n-#####################################\n-\n-# FIXME(linux): need to configure core dumps, enable them, and then dump\n-# backtraces on failure from all core dumps:\n-#\n-# - bash: sudo apt install gdb\n-# - bash: sudo sh -c 'echo \"/checkout/obj/cores/core.%p.%E\" > /proc/sys/kernel/core_pattern'\n-#\n-# Check travis config for `gdb --batch` command to print all crash logs\n-\n-steps:\n-\n-# Configure our CI_JOB_NAME variable which log analyzers can use for the main\n-# step to see what's going on.\n-- bash: |\n-    builder=$(echo $AGENT_JOBNAME | cut -d ' ' -f 2)\n-    echo \"##vso[task.setvariable variable=CI_JOB_NAME]$builder\"\n-  displayName: Configure Job Name\n-\n-# Disable automatic line ending conversion, which is enabled by default on\n-# Azure's Windows image. Having the conversion enabled caused regressions both\n-# in our test suite (it broke miri tests) and in the ecosystem, since we\n-# started shipping install scripts with CRLF endings instead of the old LF.\n-#\n-# Note that we do this a couple times during the build as the PATH and current\n-# user/directory change, e.g. when mingw is enabled.\n-- bash: git config --global core.autocrlf false\n-  displayName: \"Disable git automatic line ending conversion\"\n-\n-- checkout: self\n-  fetchDepth: 2\n-\n-- bash: src/ci/scripts/setup-environment.sh\n-  displayName: Setup environment\n-\n-- bash: src/ci/scripts/clean-disk.sh\n-  displayName: Clean disk\n-\n-- bash: src/ci/scripts/should-skip-this.sh\n-  displayName: Decide whether to run this job\n-\n-- bash: src/ci/scripts/collect-cpu-stats.sh\n-  displayName: Collect CPU-usage statistics in the background\n-\n-- bash: src/ci/scripts/dump-environment.sh\n-  displayName: Show the current environment\n-\n-- bash: src/ci/scripts/install-sccache.sh\n-  displayName: Install sccache\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-- bash: src/ci/scripts/install-clang.sh\n-  displayName: Install clang\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-- bash: src/ci/scripts/install-wix.sh\n-  displayName: Install wix\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-- bash: src/ci/scripts/symlink-build-dir.sh\n-  displayName: Ensure the build happens on a partition with enough space\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-- bash: src/ci/scripts/disable-git-crlf-conversion.sh\n-  displayName: \"Disable git automatic line ending conversion (on C:/)\"\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-- bash: src/ci/scripts/install-msys2.sh\n-  displayName: Install msys2\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-- bash: src/ci/scripts/install-mingw.sh\n-  displayName: Install MinGW\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-- bash: src/ci/scripts/install-ninja.sh\n-  displayName: Install ninja\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-- bash: src/ci/scripts/enable-docker-ipv6.sh\n-  displayName: Enable IPv6 on Docker\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-# Disable automatic line ending conversion (again). On Windows, when we're\n-# installing dependencies, something switches the git configuration directory or\n-# re-enables autocrlf. We've not tracked down the exact cause -- and there may\n-# be multiple -- but this should ensure submodules are checked out with the\n-# appropriate line endings.\n-- bash: src/ci/scripts/disable-git-crlf-conversion.sh\n-  displayName: Disable git automatic line ending conversion\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-- bash: src/ci/scripts/checkout-submodules.sh\n-  displayName: Checkout submodules\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-- bash: src/ci/scripts/verify-line-endings.sh\n-  displayName: Verify line endings\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-# Ensure the `aws` CLI is installed so we can deploy later on, cache docker\n-# images, etc.\n-- bash: src/ci/scripts/install-awscli.sh\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-  displayName: Install awscli\n-\n-- bash: src/ci/scripts/run-build-from-ci.sh\n-  timeoutInMinutes: 600\n-  env:\n-    AWS_ACCESS_KEY_ID: $(SCCACHE_AWS_ACCESS_KEY_ID)\n-    AWS_SECRET_ACCESS_KEY: $(SCCACHE_AWS_SECRET_ACCESS_KEY)\n-    TOOLSTATE_REPO_ACCESS_TOKEN: $(TOOLSTATE_REPO_ACCESS_TOKEN)\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-  displayName: Run build\n-\n-- bash: src/ci/scripts/upload-artifacts.sh\n-  env:\n-    AWS_ACCESS_KEY_ID: $(UPLOAD_AWS_ACCESS_KEY_ID)\n-    AWS_SECRET_ACCESS_KEY: $(UPLOAD_AWS_SECRET_ACCESS_KEY)\n-  displayName: Upload artifacts\n-  # Adding a condition on DEPLOY=1 or DEPLOY_ALT=1 is not needed as all deploy\n-  # builders *should* have the AWS credentials available. Still, explicitly\n-  # adding the condition is helpful as this way CI will not silently skip\n-  # deploying artifacts from a dist builder if the variables are misconfigured,\n-  # erroring about invalid credentials instead.\n-  condition: |\n-    and(\n-      succeeded(), not(variables.SKIP_JOB),\n-      or(\n-        variables.UPLOAD_AWS_SECRET_ACCESS_KEY,\n-        eq(variables.DEPLOY, '1'), eq(variables.DEPLOY_ALT, '1')\n-      )\n-    )"}, {"sha": "8c7926f116b711102fb689ef34054a12cc77e256", "filename": "src/doc/rustdoc/src/advanced-features.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Fdoc%2Frustdoc%2Fsrc%2Fadvanced-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Fdoc%2Frustdoc%2Fsrc%2Fadvanced-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fadvanced-features.md?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -46,3 +46,5 @@ pub struct BigX;\n \n Then, when looking for it through the `rustdoc` search, if you enter \"x\" or\n \"big\", search will show the `BigX` struct first.\n+\n+There are some limitations on the doc alias names though: you can't use `\"` or whitespace."}, {"sha": "8fbfb04bac3e4f40daa410c481246f0e294c4fb3", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -695,7 +695,7 @@ impl Attributes {\n         self.other_attrs\n             .lists(sym::doc)\n             .filter(|a| a.has_name(sym::alias))\n-            .filter_map(|a| a.value_str().map(|s| s.to_string().replace(\"\\\"\", \"\")))\n+            .filter_map(|a| a.value_str().map(|s| s.to_string()))\n             .filter(|v| !v.is_empty())\n             .collect::<FxHashSet<_>>()\n     }"}, {"sha": "e8b556b6a8836147429abe391d6ed18806867b45", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -1 +1 @@\n-Subproject commit 2c56ba7db75b536b0432228b4760ed79174eca30\n+Subproject commit e8b556b6a8836147429abe391d6ed18806867b45"}, {"sha": "c8bec39fad61399448f8dc06a18803d7f88735d8", "filename": "src/test/rustdoc-ui/check-doc-alias-attr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.rs?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -7,4 +7,10 @@ pub struct Bar;\n #[doc(alias)] //~ ERROR\n #[doc(alias = 0)] //~ ERROR\n #[doc(alias(\"bar\"))] //~ ERROR\n+#[doc(alias = \"\\\"\")] //~ ERROR\n+#[doc(alias = \"\\n\")] //~ ERROR\n+#[doc(alias = \"\n+\")] //~^ ERROR\n+#[doc(alias = \" \")] //~ ERROR\n+#[doc(alias = \"\\t\")] //~ ERROR\n pub struct Foo;"}, {"sha": "be7d7b3dbea93528d6e03d3f8d6e4ea4c1888f0a", "filename": "src/test/rustdoc-ui/check-doc-alias-attr.stderr", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.stderr?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -16,5 +16,37 @@ error: doc alias attribute expects a string: #[doc(alias = \"0\")]\n LL | #[doc(alias(\"bar\"))]\n    |       ^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: '\\\"' character isn't allowed in `#[doc(alias = \"...\")]`\n+  --> $DIR/check-doc-alias-attr.rs:10:7\n+   |\n+LL | #[doc(alias = \"\\\"\")]\n+   |       ^^^^^^^^^^^^\n+\n+error: '\\n' character isn't allowed in `#[doc(alias = \"...\")]`\n+  --> $DIR/check-doc-alias-attr.rs:11:7\n+   |\n+LL | #[doc(alias = \"\\n\")]\n+   |       ^^^^^^^^^^^^\n+\n+error: '\\n' character isn't allowed in `#[doc(alias = \"...\")]`\n+  --> $DIR/check-doc-alias-attr.rs:12:7\n+   |\n+LL |   #[doc(alias = \"\n+   |  _______^\n+LL | | \")]\n+   | |_^\n+\n+error: ' ' character isn't allowed in `#[doc(alias = \"...\")]`\n+  --> $DIR/check-doc-alias-attr.rs:14:7\n+   |\n+LL | #[doc(alias = \" \")]\n+   |       ^^^^^^^^^^^\n+\n+error: '\\t' character isn't allowed in `#[doc(alias = \"...\")]`\n+  --> $DIR/check-doc-alias-attr.rs:15:7\n+   |\n+LL | #[doc(alias = \"\\t\")]\n+   |       ^^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "c8bec39fad61399448f8dc06a18803d7f88735d8", "filename": "src/test/ui/check-doc-alias-attr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Fui%2Fcheck-doc-alias-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Fui%2Fcheck-doc-alias-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-doc-alias-attr.rs?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -7,4 +7,10 @@ pub struct Bar;\n #[doc(alias)] //~ ERROR\n #[doc(alias = 0)] //~ ERROR\n #[doc(alias(\"bar\"))] //~ ERROR\n+#[doc(alias = \"\\\"\")] //~ ERROR\n+#[doc(alias = \"\\n\")] //~ ERROR\n+#[doc(alias = \"\n+\")] //~^ ERROR\n+#[doc(alias = \" \")] //~ ERROR\n+#[doc(alias = \"\\t\")] //~ ERROR\n pub struct Foo;"}, {"sha": "be7d7b3dbea93528d6e03d3f8d6e4ea4c1888f0a", "filename": "src/test/ui/check-doc-alias-attr.stderr", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Fui%2Fcheck-doc-alias-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Fui%2Fcheck-doc-alias-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-doc-alias-attr.stderr?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -16,5 +16,37 @@ error: doc alias attribute expects a string: #[doc(alias = \"0\")]\n LL | #[doc(alias(\"bar\"))]\n    |       ^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: '\\\"' character isn't allowed in `#[doc(alias = \"...\")]`\n+  --> $DIR/check-doc-alias-attr.rs:10:7\n+   |\n+LL | #[doc(alias = \"\\\"\")]\n+   |       ^^^^^^^^^^^^\n+\n+error: '\\n' character isn't allowed in `#[doc(alias = \"...\")]`\n+  --> $DIR/check-doc-alias-attr.rs:11:7\n+   |\n+LL | #[doc(alias = \"\\n\")]\n+   |       ^^^^^^^^^^^^\n+\n+error: '\\n' character isn't allowed in `#[doc(alias = \"...\")]`\n+  --> $DIR/check-doc-alias-attr.rs:12:7\n+   |\n+LL |   #[doc(alias = \"\n+   |  _______^\n+LL | | \")]\n+   | |_^\n+\n+error: ' ' character isn't allowed in `#[doc(alias = \"...\")]`\n+  --> $DIR/check-doc-alias-attr.rs:14:7\n+   |\n+LL | #[doc(alias = \" \")]\n+   |       ^^^^^^^^^^^\n+\n+error: '\\t' character isn't allowed in `#[doc(alias = \"...\")]`\n+  --> $DIR/check-doc-alias-attr.rs:15:7\n+   |\n+LL | #[doc(alias = \"\\t\")]\n+   |       ^^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "02944e2bff2f5e6c64961c54d81c15f2cd4f04a6", "filename": "src/test/ui/const-generics/min_const_generics/forbid-non-static-lifetimes.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.rs?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -0,0 +1,27 @@\n+#![feature(min_const_generics)]\n+\n+// This test checks that non-static lifetimes are prohibited under `min_const_generics`. It\n+// currently emits an error with `min_const_generics`. This will ICE under `const_generics`.\n+\n+fn test<const N: usize>() {}\n+\n+fn issue_75323_and_74447_1<'a>() -> &'a () {\n+    test::<{ let _: &'a (); 3 },>();\n+   //~^ ERROR a non-static lifetime is not allowed in a `const`\n+    &()\n+}\n+\n+fn issue_75323_and_74447_2() {\n+    test::<{ let _: &(); 3 },>();\n+}\n+\n+fn issue_75323_and_74447_3() {\n+    test::<{ let _: &'static (); 3 },>();\n+}\n+\n+fn issue_73375<'a>() {\n+    [(); (|_: &'a u8| (), 0).1];\n+    //~^ ERROR a non-static lifetime is not allowed in a `const`\n+}\n+\n+fn main() {}"}, {"sha": "cdfd491e39541bcf34742c12824e39f90b02c1ca", "filename": "src/test/ui/const-generics/min_const_generics/forbid-non-static-lifetimes.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.stderr?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/forbid-non-static-lifetimes.rs:9:22\n+   |\n+LL |     test::<{ let _: &'a (); 3 },>();\n+   |                      ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/forbid-non-static-lifetimes.rs:23:16\n+   |\n+LL |     [(); (|_: &'a u8| (), 0).1];\n+   |                ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "1fa2a6160913ef2a10037c9cedcf872088ecbd24", "filename": "src/test/ui/consts/async-block.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Fui%2Fconsts%2Fasync-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Fui%2Fconsts%2Fasync-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fasync-block.rs?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -0,0 +1,8 @@\n+// From <https://github.com/rust-lang/rust/issues/77361>\n+\n+// edition:2018\n+\n+const _: i32 = { core::mem::ManuallyDrop::new(async { 0 }); 4 };\n+//~^ `async` block\n+\n+fn main() {}"}, {"sha": "99f470623ac32ce2835386a648f73b5ba8c31890", "filename": "src/test/ui/consts/async-block.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Fui%2Fconsts%2Fasync-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Fui%2Fconsts%2Fasync-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fasync-block.stderr?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -0,0 +1,8 @@\n+error: `async` blocks are not allowed in constants\n+  --> $DIR/async-block.rs:5:47\n+   |\n+LL | const _: i32 = { core::mem::ManuallyDrop::new(async { 0 }); 4 };\n+   |                                               ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b35762a887c782d7ae8e4d177546dbe478bd1ef3", "filename": "src/test/ui/parser/bind-struct-early-modifiers.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Fui%2Fparser%2Fbind-struct-early-modifiers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Fui%2Fparser%2Fbind-struct-early-modifiers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbind-struct-early-modifiers.stderr?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -1,8 +1,10 @@\n error: expected `,`\n-  --> $DIR/bind-struct-early-modifiers.rs:4:19\n+  --> $DIR/bind-struct-early-modifiers.rs:4:20\n    |\n LL |         Foo { ref x: ref x } => {},\n-   |                   ^\n+   |         ---        ^\n+   |         |\n+   |         while parsing the fields for this pattern\n \n error: aborting due to previous error\n "}, {"sha": "438ea67d33cdd1d4c70bf9dc8d590129c86c2846", "filename": "src/test/ui/parser/issue-10392.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Fui%2Fparser%2Fissue-10392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Fui%2Fparser%2Fissue-10392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-10392.stderr?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -2,7 +2,9 @@ error: expected identifier, found `,`\n   --> $DIR/issue-10392.rs:6:13\n    |\n LL |     let A { , } = a();\n-   |             ^ expected identifier\n+   |         -   ^ expected identifier\n+   |         |\n+   |         while parsing the fields for this pattern\n \n error: aborting due to previous error\n "}, {"sha": "80e9ac5bedf13292da7a83650e3de4311a7e4953", "filename": "src/test/ui/parser/issue-63135.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -35,7 +35,9 @@ error: expected one of `!` or `[`, found `}`\n   --> $DIR/issue-63135.rs:3:16\n    |\n LL | fn i(n{...,f #\n-   |                ^ expected one of `!` or `[`\n+   |      -         ^ expected one of `!` or `[`\n+   |      |\n+   |      while parsing the fields for this pattern\n \n error: aborting due to 5 previous errors\n "}, {"sha": "750727273eb1fad02e2597cf2f1532ee3138654d", "filename": "src/test/ui/resolve/issue-54379.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Fui%2Fresolve%2Fissue-54379.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/src%2Ftest%2Fui%2Fresolve%2Fissue-54379.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-54379.stderr?ref=8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "patch": "@@ -8,10 +8,12 @@ LL |         MyStruct { .., Some(_) } => {},\n    |                    `..` must be at the end and cannot have a trailing comma\n \n error: expected `,`\n-  --> $DIR/issue-54379.rs:9:24\n+  --> $DIR/issue-54379.rs:9:28\n    |\n LL |         MyStruct { .., Some(_) } => {},\n-   |                        ^^^^\n+   |         --------           ^\n+   |         |\n+   |         while parsing the fields for this pattern\n \n error: aborting due to 2 previous errors\n "}]}