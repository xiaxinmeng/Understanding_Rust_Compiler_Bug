{"sha": "b58347a9c607e493ff947ff470492c38f7819c72", "node_id": "C_kwDOAAsO6NoAKGI1ODM0N2E5YzYwN2U0OTNmZjk0N2ZmNDcwNDkyYzM4Zjc4MTljNzI", "commit": {"author": {"name": "\u8bb8\u6770\u53cb Jieyou Xu (Joe)", "email": "jieyouxu@outlook.com", "date": "2023-02-08T16:49:43Z"}, "committer": {"name": "\u8bb8\u6770\u53cb Jieyou Xu (Joe)", "email": "jieyouxu@outlook.com", "date": "2023-02-09T07:15:15Z"}, "message": "Don't expose type parameters and implementation details from macro expansion", "tree": {"sha": "a2a90965a5dac72702ff4f1888dc837a5f56472d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2a90965a5dac72702ff4f1888dc837a5f56472d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b58347a9c607e493ff947ff470492c38f7819c72", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEze4qXcfh0ileWqZTxf1dMgFP20cFAmPknZkACgkQxf1dMgFP\n20fwIQ/+Nnnh2ZKPZJE6lXcBCTzUfGrx3d4+e5t0C4JVfrKHXNXpGPb4cFwDj2rF\npiZEQDhTO5UKKogdxIPUhMMX4dcgkoBOg5afmG6LsZn86wYygop3S6myDdL8quEq\nsI/aHhbzkQJyOJeRo3Y9yAc0f//praMSfa9ubCdgNGzrVkWF4jfHQAb0BosWN6Uj\nx5TyrqPBEeh39AGZL+bb038m0yDsXwVYKtU2VwstiG+gjKi7clHmx+uYNA6Cs9eG\nXg5z/gIRlR890rO1vw1jZ2QCjz0DbN+tCa7UZXN5+y1VPR538rpjR2BXxGt4so4H\n2ceoAZECDrPCWy2wjmj9+et+8JmlAMKyQoIxg80crRLt4r9Khqd/wqOQAcPYbUvs\nkv5bQhqQYSGyDRixE/KZctTSXN6EhbpSZ7NNQhmWY8rq5k/n0LzsG5WLTQcP9Vqw\nTl3Kad14ZWkWhNE1XWpGxvfLiLoG5wL/yBx3sQ2jvlJRf7DYD7+su7GdtzmsGmIB\n0eJHrQbQJVxWHRAPYUwqzRGVKf3SJVrJwa4aI+Wisl+voo5WUpyXmRqBDkOV1Hfr\nNZrRP15Y33J+DvWy6SIM6I44U8s2tGYx2Cyus20GlN0uQer5CvrmKLO9mEYO5lRr\njaEMP6Y3lNUYmE0HTOhI2WU8zVn0BzbUldet3cPFB2Z13gwhWcI=\n=oM78\n-----END PGP SIGNATURE-----", "payload": "tree a2a90965a5dac72702ff4f1888dc837a5f56472d\nparent b082e80e20475b1ec5b0bd0dd1dac3e6759c8022\nauthor \u8bb8\u6770\u53cb Jieyou Xu (Joe) <jieyouxu@outlook.com> 1675874983 +0800\ncommitter \u8bb8\u6770\u53cb Jieyou Xu (Joe) <jieyouxu@outlook.com> 1675926915 +0800\n\nDon't expose type parameters and implementation details from macro expansion\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b58347a9c607e493ff947ff470492c38f7819c72", "html_url": "https://github.com/rust-lang/rust/commit/b58347a9c607e493ff947ff470492c38f7819c72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b58347a9c607e493ff947ff470492c38f7819c72/comments", "author": {"login": "jieyouxu", "id": 39484203, "node_id": "MDQ6VXNlcjM5NDg0MjAz", "avatar_url": "https://avatars.githubusercontent.com/u/39484203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jieyouxu", "html_url": "https://github.com/jieyouxu", "followers_url": "https://api.github.com/users/jieyouxu/followers", "following_url": "https://api.github.com/users/jieyouxu/following{/other_user}", "gists_url": "https://api.github.com/users/jieyouxu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jieyouxu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jieyouxu/subscriptions", "organizations_url": "https://api.github.com/users/jieyouxu/orgs", "repos_url": "https://api.github.com/users/jieyouxu/repos", "events_url": "https://api.github.com/users/jieyouxu/events{/privacy}", "received_events_url": "https://api.github.com/users/jieyouxu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jieyouxu", "id": 39484203, "node_id": "MDQ6VXNlcjM5NDg0MjAz", "avatar_url": "https://avatars.githubusercontent.com/u/39484203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jieyouxu", "html_url": "https://github.com/jieyouxu", "followers_url": "https://api.github.com/users/jieyouxu/followers", "following_url": "https://api.github.com/users/jieyouxu/following{/other_user}", "gists_url": "https://api.github.com/users/jieyouxu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jieyouxu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jieyouxu/subscriptions", "organizations_url": "https://api.github.com/users/jieyouxu/orgs", "repos_url": "https://api.github.com/users/jieyouxu/repos", "events_url": "https://api.github.com/users/jieyouxu/events{/privacy}", "received_events_url": "https://api.github.com/users/jieyouxu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b082e80e20475b1ec5b0bd0dd1dac3e6759c8022", "url": "https://api.github.com/repos/rust-lang/rust/commits/b082e80e20475b1ec5b0bd0dd1dac3e6759c8022", "html_url": "https://github.com/rust-lang/rust/commit/b082e80e20475b1ec5b0bd0dd1dac3e6759c8022"}], "stats": {"total": 85, "additions": 59, "deletions": 26}, "files": [{"sha": "c092efbb557cf76acbf6ec427ecacec9e8e036be", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b58347a9c607e493ff947ff470492c38f7819c72/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b58347a9c607e493ff947ff470492c38f7819c72/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=b58347a9c607e493ff947ff470492c38f7819c72", "patch": "@@ -158,8 +158,12 @@ fn fmt_printer<'a, 'tcx>(infcx: &'a InferCtxt<'tcx>, ns: Namespace) -> FmtPrinte\n         if infcx.probe_ty_var(ty_vid).is_ok() {\n             warn!(\"resolved ty var in error message\");\n         }\n-        if let TypeVariableOriginKind::TypeParameterDefinition(name, _) =\n-            infcx.inner.borrow_mut().type_variables().var_origin(ty_vid).kind\n+\n+        let mut infcx_inner = infcx.inner.borrow_mut();\n+        let ty_vars = infcx_inner.type_variables();\n+        let var_origin = ty_vars.var_origin(ty_vid);\n+        if let TypeVariableOriginKind::TypeParameterDefinition(name, _) = var_origin.kind\n+            && !var_origin.span.from_expansion()\n         {\n             Some(name)\n         } else {\n@@ -254,7 +258,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                     if let TypeVariableOriginKind::TypeParameterDefinition(name, def_id) =\n                         var_origin.kind\n                     {\n-                        if name != kw::SelfUpper {\n+                        if name != kw::SelfUpper && !var_origin.span.from_expansion() {\n                             return InferenceDiagnosticsData {\n                                 name: name.to_string(),\n                                 span: Some(var_origin.span),\n@@ -780,7 +784,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n         // The sources are listed in order of preference here.\n         let tcx = self.infcx.tcx;\n         let ctx = CostCtxt { tcx };\n-        let base_cost = match source.kind {\n+        match source.kind {\n             InferSourceKind::LetBinding { ty, .. } => ctx.ty_cost(ty),\n             InferSourceKind::ClosureArg { ty, .. } => ctx.ty_cost(ty),\n             InferSourceKind::GenericArg { def_id, generic_args, .. } => {\n@@ -797,17 +801,17 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n             InferSourceKind::ClosureReturn { ty, should_wrap_expr, .. } => {\n                 30 + ctx.ty_cost(ty) + if should_wrap_expr.is_some() { 10 } else { 0 }\n             }\n-        };\n-\n-        let suggestion_may_apply = if source.from_expansion() { 10000 } else { 0 };\n-\n-        base_cost + suggestion_may_apply\n+        }\n     }\n \n     /// Uses `fn source_cost` to determine whether this inference source is preferable to\n     /// previous sources. We generally prefer earlier sources.\n     #[instrument(level = \"debug\", skip(self))]\n     fn update_infer_source(&mut self, mut new_source: InferSource<'tcx>) {\n+        if new_source.from_expansion() {\n+            return;\n+        }\n+\n         let cost = self.source_cost(&new_source) + self.attempt;\n         debug!(?cost);\n         self.attempt += 1;\n@@ -819,6 +823,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n             // `let x: _ = iter.collect();`, as this is a very common case.\n             *def_id = Some(did);\n         }\n+\n         if cost < self.infer_source_cost {\n             self.infer_source_cost = cost;\n             self.infer_source = Some(new_source);"}, {"sha": "7f6758f47f8fe4cf1c89f6f27011af67b7d720b7", "filename": "tests/ui/inference/need_type_info/issue-107745-avoid-expr-from-macro-expansion.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b58347a9c607e493ff947ff470492c38f7819c72/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-107745-avoid-expr-from-macro-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b58347a9c607e493ff947ff470492c38f7819c72/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-107745-avoid-expr-from-macro-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-107745-avoid-expr-from-macro-expansion.rs?ref=b58347a9c607e493ff947ff470492c38f7819c72", "patch": "@@ -0,0 +1,19 @@\n+// ignore-tidy-linelength\n+\n+// Regression test for #107745.\n+// Previously need_type_info::update_infer_source will consider expressions originating from\n+// macro expressions as candiate \"previous sources\". This unfortunately can mean that\n+// for macros expansions such as `format!()` internal implementation details can leak, such as:\n+//\n+// ```\n+// error[E0282]: type annotations needed\n+// --> src/main.rs:2:22\n+//  |\n+//2 |     println!(\"{:?}\", []);\n+//  |                      ^^ cannot infer type of the type parameter `T` declared on the associated function `new_debug`\n+// ```\n+\n+fn main() {\n+    println!(\"{:?}\", []);\n+    //~^ ERROR type annotations needed\n+}"}, {"sha": "464655bbcf4515b90d764cbea4ecb3565f316943", "filename": "tests/ui/inference/need_type_info/issue-107745-avoid-expr-from-macro-expansion.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b58347a9c607e493ff947ff470492c38f7819c72/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-107745-avoid-expr-from-macro-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b58347a9c607e493ff947ff470492c38f7819c72/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-107745-avoid-expr-from-macro-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-107745-avoid-expr-from-macro-expansion.stderr?ref=b58347a9c607e493ff947ff470492c38f7819c72", "patch": "@@ -0,0 +1,11 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-107745-avoid-expr-from-macro-expansion.rs:17:22\n+   |\n+LL |     println!(\"{:?}\", []);\n+   |                      ^^ cannot infer type\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "8c92505b5eb281b5008b56d1b2aee1e2dd353746", "filename": "tests/ui/issues/issue-16966.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b58347a9c607e493ff947ff470492c38f7819c72/tests%2Fui%2Fissues%2Fissue-16966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b58347a9c607e493ff947ff470492c38f7819c72/tests%2Fui%2Fissues%2Fissue-16966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-16966.stderr?ref=b58347a9c607e493ff947ff470492c38f7819c72", "patch": "@@ -1,10 +1,8 @@\n error[E0282]: type annotations needed\n-  --> $DIR/issue-16966.rs:2:5\n+  --> $DIR/issue-16966.rs:2:12\n    |\n LL |     panic!(std::default::Default::default());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `M` declared on the function `begin_panic`\n-   |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n \n error: aborting due to previous error\n "}, {"sha": "a56cd17773dc4cd0577b5ae1711af2166bd04f4e", "filename": "tests/ui/parser/missing-closing-angle-bracket-eq-constraint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b58347a9c607e493ff947ff470492c38f7819c72/tests%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b58347a9c607e493ff947ff470492c38f7819c72/tests%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.rs?ref=b58347a9c607e493ff947ff470492c38f7819c72", "patch": "@@ -17,7 +17,7 @@ fn test2<T1, T2>(arg1 : T1, arg2 : T2) {\n fn test3<'a>(arg : &'a u32) {\n   let v : Vec<'a = vec![];\n     //~^ ERROR: expected one of\n-    //~| ERROR: type annotations needed for `Vec<T>`\n+    //~| ERROR: type annotations needed for `Vec<_>`\n }\n \n fn main() {}"}, {"sha": "b2448774ae9d35d8544969e33b59430086b0b4db", "filename": "tests/ui/parser/missing-closing-angle-bracket-eq-constraint.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b58347a9c607e493ff947ff470492c38f7819c72/tests%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b58347a9c607e493ff947ff470492c38f7819c72/tests%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.stderr?ref=b58347a9c607e493ff947ff470492c38f7819c72", "patch": "@@ -39,26 +39,26 @@ help: you might have meant to end the type parameters here\n LL |   let v : Vec<'a> = vec![];\n    |                 +\n \n-error[E0282]: type annotations needed for `Vec<T>`\n+error[E0282]: type annotations needed for `Vec<_>`\n   --> $DIR/missing-closing-angle-bracket-eq-constraint.rs:7:7\n    |\n LL |   let v : Vec<(u32,_) = vec![];\n    |       ^\n    |\n-help: consider giving `v` an explicit type, where the type for type parameter `T` is specified\n+help: consider giving `v` an explicit type, where the placeholders `_` are specified\n    |\n-LL |   let v: Vec<T> : Vec<(u32,_) = vec![];\n+LL |   let v: Vec<_> : Vec<(u32,_) = vec![];\n    |        ++++++++\n \n-error[E0282]: type annotations needed for `Vec<T>`\n+error[E0282]: type annotations needed for `Vec<_>`\n   --> $DIR/missing-closing-angle-bracket-eq-constraint.rs:18:7\n    |\n LL |   let v : Vec<'a = vec![];\n    |       ^\n    |\n-help: consider giving `v` an explicit type, where the type for type parameter `T` is specified\n+help: consider giving `v` an explicit type, where the placeholders `_` are specified\n    |\n-LL |   let v: Vec<T> : Vec<'a = vec![];\n+LL |   let v: Vec<_> : Vec<'a = vec![];\n    |        ++++++++\n \n error: aborting due to 5 previous errors"}, {"sha": "09c4b2053b27e6dc6e65fe3491700db3c0bb4dc0", "filename": "tests/ui/type/type-check/cannot_infer_local_or_vec.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b58347a9c607e493ff947ff470492c38f7819c72/tests%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b58347a9c607e493ff947ff470492c38f7819c72/tests%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr?ref=b58347a9c607e493ff947ff470492c38f7819c72", "patch": "@@ -1,12 +1,12 @@\n-error[E0282]: type annotations needed for `Vec<T>`\n+error[E0282]: type annotations needed for `Vec<_>`\n   --> $DIR/cannot_infer_local_or_vec.rs:2:9\n    |\n LL |     let x = vec![];\n    |         ^\n    |\n-help: consider giving `x` an explicit type, where the type for type parameter `T` is specified\n+help: consider giving `x` an explicit type, where the placeholders `_` are specified\n    |\n-LL |     let x: Vec<T> = vec![];\n+LL |     let x: Vec<_> = vec![];\n    |          ++++++++\n \n error: aborting due to previous error"}, {"sha": "1fa253052e6495e76550acacb53b426d9fbc32e0", "filename": "tests/ui/type/type-check/cannot_infer_local_or_vec_in_tuples.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b58347a9c607e493ff947ff470492c38f7819c72/tests%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b58347a9c607e493ff947ff470492c38f7819c72/tests%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr?ref=b58347a9c607e493ff947ff470492c38f7819c72", "patch": "@@ -1,12 +1,12 @@\n-error[E0282]: type annotations needed for `(Vec<T>,)`\n+error[E0282]: type annotations needed for `(Vec<_>,)`\n   --> $DIR/cannot_infer_local_or_vec_in_tuples.rs:2:9\n    |\n LL |     let (x, ) = (vec![], );\n    |         ^^^^^   ---------- type must be known at this point\n    |\n-help: consider giving this pattern a type, where the type for type parameter `T` is specified\n+help: consider giving this pattern a type, where the placeholders `_` are specified\n    |\n-LL |     let (x, ): (Vec<T>,) = (vec![], );\n+LL |     let (x, ): (Vec<_>,) = (vec![], );\n    |              +++++++++++\n \n error: aborting due to previous error"}]}