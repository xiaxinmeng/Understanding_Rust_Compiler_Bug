{"sha": "f954f7b23b8564ecd0bbeb015d0d4da7e4c044eb", "node_id": "C_kwDOAAsO6NoAKGY5NTRmN2IyM2I4NTY0ZWNkMGJiZWIwMTVkMGQ0ZGE3ZTRjMDQ0ZWI", "commit": {"author": {"name": "Martin Kr\u00f6ning", "email": "mkroening@posteo.net", "date": "2022-06-26T20:52:19Z"}, "committer": {"name": "Martin Kr\u00f6ning", "email": "mkroening@posteo.net", "date": "2022-06-26T21:19:38Z"}, "message": "Hermit: Fix initializing lazy locks", "tree": {"sha": "1bee71e250f3b66595d0f377dd8b5ca2beb005ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bee71e250f3b66595d0f377dd8b5ca2beb005ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f954f7b23b8564ecd0bbeb015d0d4da7e4c044eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f954f7b23b8564ecd0bbeb015d0d4da7e4c044eb", "html_url": "https://github.com/rust-lang/rust/commit/f954f7b23b8564ecd0bbeb015d0d4da7e4c044eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f954f7b23b8564ecd0bbeb015d0d4da7e4c044eb/comments", "author": {"login": "mkroening", "id": 28776973, "node_id": "MDQ6VXNlcjI4Nzc2OTcz", "avatar_url": "https://avatars.githubusercontent.com/u/28776973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkroening", "html_url": "https://github.com/mkroening", "followers_url": "https://api.github.com/users/mkroening/followers", "following_url": "https://api.github.com/users/mkroening/following{/other_user}", "gists_url": "https://api.github.com/users/mkroening/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkroening/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkroening/subscriptions", "organizations_url": "https://api.github.com/users/mkroening/orgs", "repos_url": "https://api.github.com/users/mkroening/repos", "events_url": "https://api.github.com/users/mkroening/events{/privacy}", "received_events_url": "https://api.github.com/users/mkroening/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mkroening", "id": 28776973, "node_id": "MDQ6VXNlcjI4Nzc2OTcz", "avatar_url": "https://avatars.githubusercontent.com/u/28776973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkroening", "html_url": "https://github.com/mkroening", "followers_url": "https://api.github.com/users/mkroening/followers", "following_url": "https://api.github.com/users/mkroening/following{/other_user}", "gists_url": "https://api.github.com/users/mkroening/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkroening/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkroening/subscriptions", "organizations_url": "https://api.github.com/users/mkroening/orgs", "repos_url": "https://api.github.com/users/mkroening/repos", "events_url": "https://api.github.com/users/mkroening/events{/privacy}", "received_events_url": "https://api.github.com/users/mkroening/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "788ddedb0d88e40db9cd62b6163d5a471813044b", "url": "https://api.github.com/repos/rust-lang/rust/commits/788ddedb0d88e40db9cd62b6163d5a471813044b", "html_url": "https://github.com/rust-lang/rust/commit/788ddedb0d88e40db9cd62b6163d5a471813044b"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "22059ca0dbe107ec24b6f64c3bf5c6f60f6d1bec", "filename": "library/std/src/sys/hermit/condvar.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f954f7b23b8564ecd0bbeb015d0d4da7e4c044eb/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f954f7b23b8564ecd0bbeb015d0d4da7e4c044eb/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs?ref=f954f7b23b8564ecd0bbeb015d0d4da7e4c044eb", "patch": "@@ -3,6 +3,7 @@ use crate::ptr;\n use crate::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n use crate::sys::hermit::abi;\n use crate::sys::locks::Mutex;\n+use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n use crate::time::Duration;\n \n // The implementation is inspired by Andrew D. Birrell's paper\n@@ -14,14 +15,26 @@ pub struct Condvar {\n     sem2: *const c_void,\n }\n \n-pub type MovableCondvar = Condvar;\n+pub(crate) type MovableCondvar = LazyBox<Condvar>;\n+\n+impl LazyInit for Condvar {\n+    fn init() -> Box<Self> {\n+        Box::new(Self::new())\n+    }\n+}\n \n unsafe impl Send for Condvar {}\n unsafe impl Sync for Condvar {}\n \n impl Condvar {\n-    pub const fn new() -> Condvar {\n-        Condvar { counter: AtomicUsize::new(0), sem1: ptr::null(), sem2: ptr::null() }\n+    pub fn new() -> Self {\n+        let mut condvar =\n+            Self { counter: AtomicUsize::new(0), sem1: ptr::null(), sem2: ptr::null() };\n+        unsafe {\n+            let _ = abi::sem_init(&mut condvar.sem1, 0);\n+            let _ = abi::sem_init(&mut condvar.sem2, 0);\n+        }\n+        condvar\n     }\n \n     pub unsafe fn notify_one(&self) {"}, {"sha": "9701bab1f660be75a09848c0d4117567d4f649a6", "filename": "library/std/src/sys/hermit/rwlock.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f954f7b23b8564ecd0bbeb015d0d4da7e4c044eb/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f954f7b23b8564ecd0bbeb015d0d4da7e4c044eb/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs?ref=f954f7b23b8564ecd0bbeb015d0d4da7e4c044eb", "patch": "@@ -1,9 +1,10 @@\n use crate::cell::UnsafeCell;\n-use crate::sys::locks::{Condvar, Mutex};\n+use crate::sys::locks::{MovableCondvar, Mutex};\n+use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n \n pub struct RwLock {\n     lock: Mutex,\n-    cond: Condvar,\n+    cond: MovableCondvar,\n     state: UnsafeCell<State>,\n }\n \n@@ -28,7 +29,11 @@ unsafe impl Sync for RwLock {}\n \n impl RwLock {\n     pub const fn new() -> RwLock {\n-        RwLock { lock: Mutex::new(), cond: Condvar::new(), state: UnsafeCell::new(State::Unlocked) }\n+        RwLock {\n+            lock: Mutex::new(),\n+            cond: MovableCondvar::new(),\n+            state: UnsafeCell::new(State::Unlocked),\n+        }\n     }\n \n     #[inline]"}]}