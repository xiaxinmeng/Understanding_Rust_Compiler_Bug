{"sha": "1813b8cf550772d84c1737a048bccccc79730a5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MTNiOGNmNTUwNzcyZDg0YzE3MzdhMDQ4YmNjY2NjNzk3MzBhNWI=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-09-17T14:28:19Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-09-18T11:36:35Z"}, "message": "rustc: remove DefArg and DefBinding in favor of DefLocal.", "tree": {"sha": "18765735d5041b03437443047c9cb660faffc268", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18765735d5041b03437443047c9cb660faffc268"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1813b8cf550772d84c1737a048bccccc79730a5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1813b8cf550772d84c1737a048bccccc79730a5b", "html_url": "https://github.com/rust-lang/rust/commit/1813b8cf550772d84c1737a048bccccc79730a5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1813b8cf550772d84c1737a048bccccc79730a5b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49dd8e8c366f492d3ba3d0d2fd9d943f92073a18", "url": "https://api.github.com/repos/rust-lang/rust/commits/49dd8e8c366f492d3ba3d0d2fd9d943f92073a18", "html_url": "https://github.com/rust-lang/rust/commit/49dd8e8c366f492d3ba3d0d2fd9d943f92073a18"}], "stats": {"total": 288, "additions": 84, "deletions": 204}, "files": [{"sha": "1ef4d18b5385aa7f18c4cdd531219db247bff21a", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=1813b8cf550772d84c1737a048bccccc79730a5b", "patch": "@@ -954,8 +954,7 @@ impl LintPass for NonSnakeCase {\n         match &p.node {\n             &ast::PatIdent(_, ref path1, _) => {\n                 match cx.tcx.def_map.borrow().find(&p.id) {\n-                    Some(&def::DefLocal(_, _)) | Some(&def::DefBinding(_, _)) |\n-                            Some(&def::DefArg(_, _)) => {\n+                    Some(&def::DefLocal(_, _)) => {\n                         self.check_snake_case(cx, \"variable\", path1.node, p.span);\n                     }\n                     _ => {}"}, {"sha": "444d796fb9f17f4a16f52fa8ea6fd5ace2318c91", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=1813b8cf550772d84c1737a048bccccc79730a5b", "patch": "@@ -462,7 +462,6 @@ impl tr for def::Def {\n           def::DefMod(did) => { def::DefMod(did.tr(dcx)) }\n           def::DefForeignMod(did) => { def::DefForeignMod(did.tr(dcx)) }\n           def::DefStatic(did, m) => { def::DefStatic(did.tr(dcx), m) }\n-          def::DefArg(nid, b) => { def::DefArg(dcx.tr_id(nid), b) }\n           def::DefLocal(nid, b) => { def::DefLocal(dcx.tr_id(nid), b) }\n           def::DefVariant(e_did, v_did, is_s) => {\n             def::DefVariant(e_did.tr(dcx), v_did.tr(dcx), is_s)\n@@ -472,7 +471,6 @@ impl tr for def::Def {\n           def::DefAssociatedTy(did) => def::DefAssociatedTy(did.tr(dcx)),\n           def::DefPrimTy(p) => def::DefPrimTy(p),\n           def::DefTyParam(s, did, v) => def::DefTyParam(s, did.tr(dcx), v),\n-          def::DefBinding(nid, bm) => def::DefBinding(dcx.tr_id(nid), bm),\n           def::DefUse(did) => def::DefUse(did.tr(dcx)),\n           def::DefUpvar(nid1, def, nid2, nid3) => {\n             def::DefUpvar(dcx.tr_id(nid1),"}, {"sha": "95009bc2dbfc084ce661f3a809afa6b070032207", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=1813b8cf550772d84c1737a048bccccc79730a5b", "patch": "@@ -514,9 +514,9 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n         true\n     }\n \n-    pub fn is_local_variable_or_arg(&self, cmt: mc::cmt) -> bool {\n+    fn is_local_variable_or_arg(&self, cmt: mc::cmt) -> bool {\n         match cmt.cat {\n-          mc::cat_local(_) | mc::cat_arg(_) => true,\n+          mc::cat_local(_) => true,\n           _ => false\n         }\n     }\n@@ -775,7 +775,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                 debug!(\"mark_variable_as_used_mut(cmt={})\", cmt.repr(this.tcx()));\n                 match cmt.cat.clone() {\n                     mc::cat_copied_upvar(mc::CopiedUpvar { upvar_id: id, .. }) |\n-                    mc::cat_local(id) | mc::cat_arg(id) => {\n+                    mc::cat_local(id) => {\n                         this.tcx().used_mut_nodes.borrow_mut().insert(id);\n                         return;\n                     }"}, {"sha": "25439fce68c9f1936412018c10bad0b27a4d7965", "filename": "src/librustc/middle/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=1813b8cf550772d84c1737a048bccccc79730a5b", "patch": "@@ -147,8 +147,7 @@ fn check_and_get_illegal_move_origin(bccx: &BorrowckCtxt,\n         }\n \n         mc::cat_rvalue(..) |\n-        mc::cat_local(..) |\n-        mc::cat_arg(..) => {\n+        mc::cat_local(..) => {\n             None\n         }\n "}, {"sha": "c07123325253b37bd4bbb7d6b1da67698a3afd90", "filename": "src/librustc/middle/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=1813b8cf550772d84c1737a048bccccc79730a5b", "patch": "@@ -69,7 +69,6 @@ impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n             mc::cat_rvalue(..) |\n             mc::cat_copied_upvar(..) |                  // L-Local\n             mc::cat_local(..) |                         // L-Local\n-            mc::cat_arg(..) |                           // L-Local\n             mc::cat_upvar(..) |\n             mc::cat_deref(_, _, mc::BorrowedPtr(..)) |  // L-Deref-Borrowed\n             mc::cat_deref(_, _, mc::Implicit(..)) |\n@@ -174,8 +173,7 @@ impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n             mc::cat_static_item => {\n                 ty::ReStatic\n             }\n-            mc::cat_local(local_id) |\n-            mc::cat_arg(local_id) => {\n+            mc::cat_local(local_id) => {\n                 ty::ReScope(self.bccx.tcx.region_maps.var_scope(local_id))\n             }\n             mc::cat_deref(_, _, mc::UnsafePtr(..)) => {"}, {"sha": "e0018919b9823f57b4946d183991e3d64defe5f5", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=1813b8cf550772d84c1737a048bccccc79730a5b", "patch": "@@ -66,8 +66,7 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n                 Safe\n             }\n \n-            mc::cat_local(local_id) |\n-            mc::cat_arg(local_id) => {\n+            mc::cat_local(local_id) => {\n                 // R-Variable, locally declared\n                 let lp = Rc::new(LpVar(local_id));\n                 SafeIf(lp.clone(), vec![lp])"}, {"sha": "38b5c5f330270a12cd5237c3b94fec872bcfbd14", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=1813b8cf550772d84c1737a048bccccc79730a5b", "patch": "@@ -321,8 +321,7 @@ pub fn opt_loan_path(cmt: &mc::cmt) -> Option<Rc<LoanPath>> {\n             None\n         }\n \n-        mc::cat_local(id) |\n-        mc::cat_arg(id) => {\n+        mc::cat_local(id) => {\n             Some(Rc::new(LpVar(id)))\n         }\n "}, {"sha": "075efdf0725c7ca69b9136e296c75dc32e07f837", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=1813b8cf550772d84c1737a048bccccc79730a5b", "patch": "@@ -22,15 +22,13 @@ pub enum Def {\n     DefMod(ast::DefId),\n     DefForeignMod(ast::DefId),\n     DefStatic(ast::DefId, bool /* is_mutbl */),\n-    DefArg(ast::NodeId, ast::BindingMode),\n     DefLocal(ast::NodeId, ast::BindingMode),\n     DefVariant(ast::DefId /* enum */, ast::DefId /* variant */, bool /* is_structure */),\n     DefTy(ast::DefId, bool /* is_enum */),\n     DefAssociatedTy(ast::DefId),\n     DefTrait(ast::DefId),\n     DefPrimTy(ast::PrimTy),\n     DefTyParam(ParamSpace, ast::DefId, uint),\n-    DefBinding(ast::NodeId, ast::BindingMode),\n     DefUse(ast::DefId),\n     DefUpvar(ast::NodeId,  // id of closed over var\n              Gc<Def>,     // closed over def\n@@ -68,11 +66,9 @@ impl Def {\n             DefMethod(id, _) => {\n                 id\n             }\n-            DefArg(id, _) |\n             DefLocal(id, _) |\n             DefSelfTy(id) |\n             DefUpvar(id, _, _, _) |\n-            DefBinding(id, _) |\n             DefRegion(id) |\n             DefTyParamBinder(id) |\n             DefLabel(id) => {"}, {"sha": "652f0d22eb9cd9ddc381d1e5d397893a2ea8b983", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 10, "deletions": 29, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=1813b8cf550772d84c1737a048bccccc79730a5b", "patch": "@@ -437,24 +437,15 @@ fn visit_arm(ir: &mut IrMaps, arm: &Arm) {\n     visit::walk_arm(ir, arm);\n }\n \n-fn moved_variable_node_id_from_def(def: Def) -> Option<NodeId> {\n-    match def {\n-        DefBinding(nid, _) |\n-        DefArg(nid, _) |\n-        DefLocal(nid, _) => Some(nid),\n-\n-      _ => None\n-    }\n-}\n-\n fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n     match expr.node {\n       // live nodes required for uses or definitions of variables:\n       ExprPath(_) => {\n         let def = ir.tcx.def_map.borrow().get_copy(&expr.id);\n         debug!(\"expr {}: path that leads to {:?}\", expr.id, def);\n-        if moved_variable_node_id_from_def(def).is_some() {\n-            ir.add_live_node_for_node(expr.id, ExprNode(expr.span));\n+        match def {\n+            DefLocal(..) => ir.add_live_node_for_node(expr.id, ExprNode(expr.span)),\n+            _ => {}\n         }\n         visit::walk_expr(ir, expr);\n       }\n@@ -470,13 +461,13 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n         let mut call_caps = Vec::new();\n         freevars::with_freevars(ir.tcx, expr.id, |freevars| {\n             for fv in freevars.iter() {\n-                match moved_variable_node_id_from_def(fv.def) {\n-                    Some(rv) => {\n+                match fv.def {\n+                    DefLocal(rv, _) => {\n                         let fv_ln = ir.add_live_node(FreeVarNode(fv.span));\n                         call_caps.push(CaptureInfo {ln: fv_ln,\n                                                     var_nid: rv});\n                     }\n-                    None => {}\n+                    _ => {}\n                 }\n             }\n         });\n@@ -1296,9 +1287,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n     fn access_path(&mut self, expr: &Expr, succ: LiveNode, acc: uint)\n                    -> LiveNode {\n-        let def = self.ir.tcx.def_map.borrow().get_copy(&expr.id);\n-        match moved_variable_node_id_from_def(def) {\n-          Some(nid) => {\n+        match self.ir.tcx.def_map.borrow().get_copy(&expr.id) {\n+          DefLocal(nid, _) => {\n             let ln = self.live_node(expr.id, expr.span);\n             if acc != 0u {\n                 self.init_from_succ(ln, succ);\n@@ -1307,7 +1297,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             }\n             ln\n           }\n-          None => succ\n+          _ => succ\n         }\n     }\n \n@@ -1546,16 +1536,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 let var = self.variable(nid, expr.span);\n                 self.warn_about_dead_assign(expr.span, expr.id, ln, var);\n               }\n-              def => {\n-                match moved_variable_node_id_from_def(def) {\n-                  Some(nid) => {\n-                    let ln = self.live_node(expr.id, expr.span);\n-                    let var = self.variable(nid, expr.span);\n-                    self.warn_about_dead_assign(expr.span, expr.id, ln, var);\n-                  }\n-                  None => {}\n-                }\n-              }\n+              _ => {}\n             }\n           }\n "}, {"sha": "2154abea0eabf05568b0318b05388b3dff64e280", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 10, "deletions": 28, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=1813b8cf550772d84c1737a048bccccc79730a5b", "patch": "@@ -71,6 +71,7 @@ use util::ppaux::{ty_to_string, Repr};\n \n use syntax::ast::{MutImmutable, MutMutable};\n use syntax::ast;\n+use syntax::ast_map;\n use syntax::codemap::Span;\n use syntax::print::pprust;\n use syntax::parse::token;\n@@ -85,7 +86,6 @@ pub enum categorization {\n     cat_copied_upvar(CopiedUpvar),     // upvar copied into proc env\n     cat_upvar(ty::UpvarId, ty::UpvarBorrow), // by ref upvar from stack closure\n     cat_local(ast::NodeId),            // local variable\n-    cat_arg(ast::NodeId),              // formal argument\n     cat_deref(cmt, uint, PointerKind), // deref of a ptr\n     cat_interior(cmt, InteriorKind),   // something interior: field, tuple, etc\n     cat_downcast(cmt),                 // selects a particular enum variant (*1)\n@@ -326,8 +326,6 @@ impl MutabilityCategory {\n             def::DefStatic(_, false) => McImmutable,\n             def::DefStatic(_, true) => McDeclared,\n \n-            def::DefArg(_, binding_mode) |\n-            def::DefBinding(_, binding_mode) |\n             def::DefLocal(_, binding_mode)  => match binding_mode {\n                 ast::BindByValue(ast::MutMutable) => McDeclared,\n                 _ => McImmutable\n@@ -556,19 +554,6 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n               }))\n           }\n \n-          def::DefArg(vid, _) => {\n-            // Idea: make this could be rewritten to model by-ref\n-            // stuff as `&const` and `&mut`?\n-\n-            Ok(Rc::new(cmt_ {\n-                id: id,\n-                span: span,\n-                cat: cat_arg(vid),\n-                mutbl: MutabilityCategory::from_def(&def),\n-                ty:expr_ty\n-            }))\n-          }\n-\n           def::DefUpvar(var_id, _, fn_node_id, _) => {\n               let ty = if_ok!(self.node_ty(fn_node_id));\n               match ty::get(ty).sty {\n@@ -634,9 +619,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n               }\n           }\n \n-          def::DefLocal(vid, _) |\n-          def::DefBinding(vid, _) => {\n-            // by-value/by-ref bindings are local variables\n+          def::DefLocal(vid, _) => {\n             Ok(Rc::new(cmt_ {\n                 id: id,\n                 span: span,\n@@ -1196,11 +1179,13 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n           cat_rvalue(..) => {\n               \"non-lvalue\".to_string()\n           }\n-          cat_local(_) => {\n-              \"local variable\".to_string()\n-          }\n-          cat_arg(..) => {\n-              \"argument\".to_string()\n+          cat_local(vid) => {\n+              match self.tcx().map.find(vid) {\n+                  Some(ast_map::NodeArg(_)) => {\n+                      \"argument\".to_string()\n+                  }\n+                  _ => \"local variable\".to_string()\n+              }\n           }\n           cat_deref(ref base, _, pk) => {\n               match base.cat {\n@@ -1267,7 +1252,6 @@ impl cmt_ {\n             cat_static_item |\n             cat_copied_upvar(..) |\n             cat_local(..) |\n-            cat_arg(..) |\n             cat_deref(_, _, UnsafePtr(..)) |\n             cat_deref(_, _, GcPtr(..)) |\n             cat_deref(_, _, BorrowedPtr(..)) |\n@@ -1311,7 +1295,6 @@ impl cmt_ {\n             cat_rvalue(..) |\n             cat_local(..) |\n             cat_upvar(..) |\n-            cat_arg(_) |\n             cat_deref(_, _, UnsafePtr(..)) => { // yes, it's aliasable, but...\n                 None\n             }\n@@ -1363,8 +1346,7 @@ impl Repr for categorization {\n             cat_rvalue(..) |\n             cat_copied_upvar(..) |\n             cat_local(..) |\n-            cat_upvar(..) |\n-            cat_arg(..) => {\n+            cat_upvar(..) => {\n                 format!(\"{:?}\", *self)\n             }\n             cat_deref(ref cmt, derefs, ptr) => {"}, {"sha": "950b374b2c4fe5a0d286bc6397f5685cd5bc5782", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=1813b8cf550772d84c1737a048bccccc79730a5b", "patch": "@@ -270,8 +270,8 @@ enum TypeParameters<'a> {\n         RibKind)\n }\n \n-// The rib kind controls the translation of argument or local definitions\n-// (`def_arg` or `def_local`) to upvars (`def_upvar`).\n+// The rib kind controls the translation of local\n+// definitions (`DefLocal`) to upvars (`DefUpvar`).\n \n enum RibKind {\n     // No translation needs to be applied.\n@@ -1895,8 +1895,7 @@ impl<'a> Resolver<'a> {\n                       ignoring {:?}\", def);\n               // Ignored; handled elsewhere.\n           }\n-          DefArg(..) | DefLocal(..) | DefPrimTy(..) |\n-          DefTyParam(..) | DefBinding(..) |\n+          DefLocal(..) | DefPrimTy(..) | DefTyParam(..) |\n           DefUse(..) | DefUpvar(..) | DefRegion(..) |\n           DefTyParamBinder(..) | DefLabel(..) | DefSelfTy(..) => {\n             fail!(\"didn't expect `{:?}`\", def);\n@@ -3840,8 +3839,7 @@ impl<'a> Resolver<'a> {\n         let is_ty_param;\n \n         match def_like {\n-            DlDef(d @ DefLocal(..)) | DlDef(d @ DefUpvar(..)) |\n-            DlDef(d @ DefArg(..)) | DlDef(d @ DefBinding(..)) => {\n+            DlDef(d @ DefLocal(..)) | DlDef(d @ DefUpvar(..)) => {\n                 def = d;\n                 is_ty_param = false;\n             }\n@@ -4942,22 +4940,7 @@ impl<'a> Resolver<'a> {\n                             debug!(\"(resolving pattern) binding `{}`\",\n                                    token::get_name(renamed));\n \n-                            let def = match mode {\n-                                RefutableMode => {\n-                                    // For pattern arms, we must use\n-                                    // `def_binding` definitions.\n-\n-                                    DefBinding(pattern.id, binding_mode)\n-                                }\n-                                LocalIrrefutableMode => {\n-                                    // But for locals, we use `def_local`.\n-                                    DefLocal(pattern.id, binding_mode)\n-                                }\n-                                ArgumentIrrefutableMode => {\n-                                    // And for function arguments, `def_arg`.\n-                                    DefArg(pattern.id, binding_mode)\n-                                }\n-                            };\n+                            let def = DefLocal(pattern.id, binding_mode);\n \n                             // Record the definition so that later passes\n                             // will be able to distinguish variants from"}, {"sha": "bbb78a6b634eb7f8bc04f197a0be5e36f285126a", "filename": "src/librustc/middle/save/mod.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs?ref=1813b8cf550772d84c1737a048bccccc79730a5b", "patch": "@@ -230,8 +230,6 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n             def::DefAssociatedTy(..) |\n             def::DefTrait(_) => Some(recorder::TypeRef),\n             def::DefStatic(_, _) |\n-            def::DefBinding(_, _) |\n-            def::DefArg(_, _) |\n             def::DefLocal(_, _) |\n             def::DefVariant(_, _, _) |\n             def::DefUpvar(_, _, _, _) => Some(recorder::VarRef),\n@@ -739,14 +737,12 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n         let def = def_map.get(&ex.id);\n         let sub_span = self.span.span_for_last_ident(ex.span);\n         match *def {\n-            def::DefLocal(id, _) |\n-            def::DefArg(id, _) |\n             def::DefUpvar(id, _, _, _) |\n-            def::DefBinding(id, _) => self.fmt.ref_str(recorder::VarRef,\n-                                                       ex.span,\n-                                                       sub_span,\n-                                                       ast_util::local_def(id),\n-                                                       self.cur_scope),\n+            def::DefLocal(id, _) => self.fmt.ref_str(recorder::VarRef,\n+                                                     ex.span,\n+                                                     sub_span,\n+                                                     ast_util::local_def(id),\n+                                                     self.cur_scope),\n             def::DefStatic(def_id,_) |\n             def::DefVariant(_, def_id, _) => self.fmt.ref_str(recorder::VarRef,\n                                                               ex.span,\n@@ -814,7 +810,6 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                 self.write_sub_path_trait_truncated(path);\n             },\n             def::DefLocal(_, _) |\n-            def::DefArg(_, _) |\n             def::DefStatic(_,_) |\n             def::DefStruct(_) |\n             def::DefFn(_, _) => self.write_sub_paths_truncated(path),\n@@ -1382,12 +1377,12 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n             }\n             let def = def_map.get(&id);\n             match *def {\n-                def::DefBinding(id, _)  => self.fmt.variable_str(p.span,\n-                                                                 sub_span,\n-                                                                 id,\n-                                                                 path_to_string(p).as_slice(),\n-                                                                 value.as_slice(),\n-                                                                 \"\"),\n+                def::DefLocal(id, _)  => self.fmt.variable_str(p.span,\n+                                                               sub_span,\n+                                                               id,\n+                                                               path_to_string(p).as_slice(),\n+                                                               value.as_slice(),\n+                                                               \"\"),\n                 def::DefVariant(_,id,_) => self.fmt.ref_str(ref_kind,\n                                                             p.span,\n                                                             sub_span,"}, {"sha": "3a2628ca0ff8280c961dceb1ee5d986dc25802b7", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 21, "deletions": 43, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=1813b8cf550772d84c1737a048bccccc79730a5b", "patch": "@@ -1226,7 +1226,6 @@ pub fn trans_match<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n fn is_discr_reassigned(bcx: Block, discr: &ast::Expr, body: &ast::Expr) -> bool {\n     match discr.node {\n         ast::ExprPath(..) => match bcx.def(discr.id) {\n-            def::DefArg(vid, _) | def::DefBinding(vid, _) |\n             def::DefLocal(vid, _) | def::DefUpvar(vid, _, _, _) => {\n                 let mut rc = ReassignmentChecker {\n                     node: vid,\n@@ -1259,7 +1258,7 @@ impl euv::Delegate for ReassignmentChecker {\n     fn mutate(&mut self, _: ast::NodeId, _: Span, cmt: mc::cmt, _: euv::MutateMode) {\n         match cmt.cat {\n             mc::cat_copied_upvar(mc::CopiedUpvar { upvar_id: vid, .. }) |\n-            mc::cat_arg(vid) | mc::cat_local(vid) => self.reassigned = self.node == vid,\n+            mc::cat_local(vid) => self.reassigned = self.node == vid,\n             _ => {}\n         }\n     }\n@@ -1391,13 +1390,6 @@ fn trans_match_inner<'blk, 'tcx>(scope_cx: Block<'blk, 'tcx>,\n     return bcx;\n }\n \n-enum IrrefutablePatternBindingMode {\n-    // Stores the association between node ID and LLVM value in `lllocals`.\n-    BindLocal,\n-    // Stores the association between node ID and LLVM value in `llargs`.\n-    BindArgument\n-}\n-\n pub fn store_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                local: &ast::Local)\n                                -> Block<'blk, 'tcx> {\n@@ -1419,7 +1411,7 @@ pub fn store_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         pat_bindings(&tcx.def_map, pat, |_, p_id, _, path1| {\n             let scope = cleanup::var_scope(tcx, p_id);\n             bcx = mk_binding_alloca(\n-                bcx, p_id, &path1.node, BindLocal, scope, (),\n+                bcx, p_id, &path1.node, scope, (),\n                 |(), bcx, llval, ty| { zero_mem(bcx, llval, ty); bcx });\n         });\n         bcx\n@@ -1441,7 +1433,7 @@ pub fn store_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 Some(ident) => {\n                     let var_scope = cleanup::var_scope(tcx, local.id);\n                     return mk_binding_alloca(\n-                        bcx, pat.id, ident, BindLocal, var_scope, (),\n+                        bcx, pat.id, ident, var_scope, (),\n                         |(), bcx, v, _| expr::trans_into(bcx, &**init_expr,\n                                                          expr::SaveIn(v)));\n                 }\n@@ -1459,7 +1451,7 @@ pub fn store_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                     add_comment(bcx, \"creating zeroable ref llval\");\n                 }\n                 let var_scope = cleanup::var_scope(tcx, local.id);\n-                bind_irrefutable_pat(bcx, pat, init_datum.val, BindLocal, var_scope)\n+                bind_irrefutable_pat(bcx, pat, init_datum.val, var_scope)\n             }\n         }\n         None => {\n@@ -1475,7 +1467,7 @@ pub fn store_arg<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                              -> Block<'blk, 'tcx> {\n     /*!\n      * Generates code for argument patterns like `fn foo(<pat>: T)`.\n-     * Creates entries in the `llargs` map for each of the bindings\n+     * Creates entries in the `lllocals` map for each of the bindings\n      * in `pat`.\n      *\n      * # Arguments\n@@ -1499,12 +1491,12 @@ pub fn store_arg<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                 // already put it in a temporary alloca and gave it up, unless\n                 // we emit extra-debug-info, which requires local allocas :(.\n                 let arg_val = arg.add_clean(bcx.fcx, arg_scope);\n-                bcx.fcx.llargs.borrow_mut()\n+                bcx.fcx.lllocals.borrow_mut()\n                    .insert(pat.id, Datum::new(arg_val, arg_ty, Lvalue));\n                 bcx\n             } else {\n                 mk_binding_alloca(\n-                    bcx, pat.id, ident, BindArgument, arg_scope, arg,\n+                    bcx, pat.id, ident, arg_scope, arg,\n                     |arg, bcx, llval, _| arg.store_to(bcx, llval))\n             }\n         }\n@@ -1514,8 +1506,7 @@ pub fn store_arg<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n             // pattern.\n             let arg = unpack_datum!(\n                 bcx, arg.to_lvalue_datum_in_scope(bcx, \"__arg\", arg_scope));\n-            bind_irrefutable_pat(bcx, pat, arg.val,\n-                                 BindArgument, arg_scope)\n+            bind_irrefutable_pat(bcx, pat, arg.val, arg_scope)\n         }\n     }\n }\n@@ -1541,13 +1532,12 @@ pub fn store_for_loop_binding<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     }\n \n     // General path. Copy out the values that are used in the pattern.\n-    bind_irrefutable_pat(bcx, pat, llvalue, BindLocal, body_scope)\n+    bind_irrefutable_pat(bcx, pat, llvalue, body_scope)\n }\n \n fn mk_binding_alloca<'blk, 'tcx, A>(bcx: Block<'blk, 'tcx>,\n                                     p_id: ast::NodeId,\n                                     ident: &ast::Ident,\n-                                    binding_mode: IrrefutablePatternBindingMode,\n                                     cleanup_scope: cleanup::ScopeId,\n                                     arg: A,\n                                     populate: |A, Block<'blk, 'tcx>, ValueRef, ty::t|\n@@ -1567,18 +1557,13 @@ fn mk_binding_alloca<'blk, 'tcx, A>(bcx: Block<'blk, 'tcx>,\n     // Now that memory is initialized and has cleanup scheduled,\n     // create the datum and insert into the local variable map.\n     let datum = Datum::new(llval, var_ty, Lvalue);\n-    let mut llmap = match binding_mode {\n-        BindLocal => bcx.fcx.lllocals.borrow_mut(),\n-        BindArgument => bcx.fcx.llargs.borrow_mut()\n-    };\n-    llmap.insert(p_id, datum);\n+    bcx.fcx.lllocals.borrow_mut().insert(p_id, datum);\n     bcx\n }\n \n fn bind_irrefutable_pat<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                     pat: &ast::Pat,\n                                     val: ValueRef,\n-                                    binding_mode: IrrefutablePatternBindingMode,\n                                     cleanup_scope: cleanup::ScopeId)\n                                     -> Block<'blk, 'tcx> {\n     /*!\n@@ -1594,13 +1579,11 @@ fn bind_irrefutable_pat<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n      * - bcx: starting basic block context\n      * - pat: the irrefutable pattern being matched.\n      * - val: the value being matched -- must be an lvalue (by ref, with cleanup)\n-     * - binding_mode: is this for an argument or a local variable?\n      */\n \n-    debug!(\"bind_irrefutable_pat(bcx={}, pat={}, binding_mode={:?})\",\n+    debug!(\"bind_irrefutable_pat(bcx={}, pat={})\",\n            bcx.to_str(),\n-           pat.repr(bcx.tcx()),\n-           binding_mode);\n+           pat.repr(bcx.tcx()));\n \n     if bcx.sess().asm_comments() {\n         add_comment(bcx, format!(\"bind_irrefutable_pat(pat={})\",\n@@ -1620,7 +1603,7 @@ fn bind_irrefutable_pat<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 // binding will live and place it into the appropriate\n                 // map.\n                 bcx = mk_binding_alloca(\n-                    bcx, pat.id, &path1.node, binding_mode, cleanup_scope, (),\n+                    bcx, pat.id, &path1.node, cleanup_scope, (),\n                     |(), bcx, llval, ty| {\n                         match pat_binding_mode {\n                             ast::BindByValue(_) => {\n@@ -1641,8 +1624,7 @@ fn bind_irrefutable_pat<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             }\n \n             for inner_pat in inner.iter() {\n-                bcx = bind_irrefutable_pat(bcx, &**inner_pat, val,\n-                                           binding_mode, cleanup_scope);\n+                bcx = bind_irrefutable_pat(bcx, &**inner_pat, val, cleanup_scope);\n             }\n         }\n         ast::PatEnum(_, ref sub_pats) => {\n@@ -1660,8 +1642,7 @@ fn bind_irrefutable_pat<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                     for sub_pat in sub_pats.iter() {\n                         for (i, &argval) in args.vals.iter().enumerate() {\n                             bcx = bind_irrefutable_pat(bcx, &**sub_pat.get(i),\n-                                                       argval, binding_mode,\n-                                                       cleanup_scope);\n+                                                       argval, cleanup_scope);\n                         }\n                     }\n                 }\n@@ -1678,8 +1659,7 @@ fn bind_irrefutable_pat<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                 let fldptr = adt::trans_field_ptr(bcx, &*repr,\n                                                                   val, 0, i);\n                                 bcx = bind_irrefutable_pat(bcx, &**elem,\n-                                                           fldptr, binding_mode,\n-                                                           cleanup_scope);\n+                                                           fldptr, cleanup_scope);\n                             }\n                         }\n                     }\n@@ -1698,26 +1678,24 @@ fn bind_irrefutable_pat<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                     let ix = ty::field_idx_strict(tcx, f.ident.name, field_tys);\n                     let fldptr = adt::trans_field_ptr(bcx, &*pat_repr, val,\n                                                       discr, ix);\n-                    bcx = bind_irrefutable_pat(bcx, &*f.pat, fldptr,\n-                                               binding_mode, cleanup_scope);\n+                    bcx = bind_irrefutable_pat(bcx, &*f.pat, fldptr, cleanup_scope);\n                 }\n             })\n         }\n         ast::PatTup(ref elems) => {\n             let repr = adt::represent_node(bcx, pat.id);\n             for (i, elem) in elems.iter().enumerate() {\n                 let fldptr = adt::trans_field_ptr(bcx, &*repr, val, 0, i);\n-                bcx = bind_irrefutable_pat(bcx, &**elem, fldptr,\n-                                           binding_mode, cleanup_scope);\n+                bcx = bind_irrefutable_pat(bcx, &**elem, fldptr, cleanup_scope);\n             }\n         }\n         ast::PatBox(ref inner) => {\n             let llbox = Load(bcx, val);\n-            bcx = bind_irrefutable_pat(bcx, &**inner, llbox, binding_mode, cleanup_scope);\n+            bcx = bind_irrefutable_pat(bcx, &**inner, llbox, cleanup_scope);\n         }\n         ast::PatRegion(ref inner) => {\n             let loaded_val = Load(bcx, val);\n-            bcx = bind_irrefutable_pat(bcx, &**inner, loaded_val, binding_mode, cleanup_scope);\n+            bcx = bind_irrefutable_pat(bcx, &**inner, loaded_val, cleanup_scope);\n         }\n         ast::PatVec(ref before, ref slice, ref after) => {\n             let pat_ty = node_id_type(bcx, pat.id);\n@@ -1737,7 +1715,7 @@ fn bind_irrefutable_pat<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 .chain(after.iter())\n                 .zip(extracted.vals.into_iter())\n                 .fold(bcx, |bcx, (inner, elem)|\n-                    bind_irrefutable_pat(bcx, &**inner, elem, binding_mode, cleanup_scope)\n+                    bind_irrefutable_pat(bcx, &**inner, elem, cleanup_scope)\n                 );\n         }\n         ast::PatMac(..) => {"}, {"sha": "3e8b7c267bd25453ef3fdb7ac1319e3ce63e3a7e", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=1813b8cf550772d84c1737a048bccccc79730a5b", "patch": "@@ -1468,7 +1468,6 @@ pub fn new_fn_ctxt<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n           needs_ret_allocas: nested_returns,\n           personality: Cell::new(None),\n           caller_expects_out_pointer: uses_outptr,\n-          llargs: RefCell::new(NodeMap::new()),\n           lllocals: RefCell::new(NodeMap::new()),\n           llupvars: RefCell::new(NodeMap::new()),\n           id: id,"}, {"sha": "bcf7a08de354f4de42610a8df7426887fa6fadbc", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=1813b8cf550772d84c1737a048bccccc79730a5b", "patch": "@@ -196,9 +196,7 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &ast::Expr)\n                 }\n             }\n             def::DefStatic(..) |\n-            def::DefArg(..) |\n             def::DefLocal(..) |\n-            def::DefBinding(..) |\n             def::DefUpvar(..) => {\n                 datum_callee(bcx, ref_expr)\n             }"}, {"sha": "4d54c3daad954cc759e1015f1480faf06e34d610", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=1813b8cf550772d84c1737a048bccccc79730a5b", "patch": "@@ -267,10 +267,7 @@ pub struct FunctionContext<'a, 'tcx: 'a> {\n     // points to, but if this value is false, that slot will be a local alloca.\n     pub caller_expects_out_pointer: bool,\n \n-    // Maps arguments to allocas created for them in llallocas.\n-    pub llargs: RefCell<NodeMap<LvalueDatum>>,\n-\n-    // Maps the def_ids for local variables to the allocas created for\n+    // Maps the DefId's for local variables to the allocas created for\n     // them in llallocas.\n     pub lllocals: RefCell<NodeMap<LvalueDatum>>,\n "}, {"sha": "daf910f604fb5cbf2a2c6d72d92ca86cb022f1d5", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=1813b8cf550772d84c1737a048bccccc79730a5b", "patch": "@@ -1005,11 +1005,11 @@ pub fn create_argument_metadata(bcx: Block, arg: &ast::Arg) {\n     let scope_metadata = bcx.fcx.debug_context.get_ref(cx, arg.pat.span).fn_metadata;\n \n     pat_util::pat_bindings(def_map, &*arg.pat, |_, node_id, span, path1| {\n-        let llarg = match bcx.fcx.llargs.borrow().find_copy(&node_id) {\n+        let llarg = match bcx.fcx.lllocals.borrow().find_copy(&node_id) {\n             Some(v) => v,\n             None => {\n                 bcx.sess().span_bug(span,\n-                    format!(\"no entry in llargs table for {:?}\",\n+                    format!(\"no entry in lllocals table for {:?}\",\n                             node_id).as_slice());\n             }\n         };"}, {"sha": "6e123e942a29cd53d5ea23d5bb93cfde142ef8fb", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=1813b8cf550772d84c1737a048bccccc79730a5b", "patch": "@@ -71,7 +71,6 @@ use middle::typeck;\n use middle::typeck::MethodCall;\n use util::common::indenter;\n use util::ppaux::Repr;\n-use util::nodemap::NodeMap;\n use middle::trans::machine::{llsize_of, llsize_of_alloc};\n use middle::trans::type_::Type;\n \n@@ -1176,7 +1175,7 @@ pub fn trans_local_var<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     let _icx = push_ctxt(\"trans_local_var\");\n \n-    return match def {\n+    match def {\n         def::DefUpvar(nid, _, _, _) => {\n             // Can't move upvars, so this is never a ZeroMemLastUse.\n             let local_ty = node_id_type(bcx, nid);\n@@ -1189,34 +1188,24 @@ pub fn trans_local_var<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 }\n             }\n         }\n-        def::DefArg(nid, _) => {\n-            take_local(bcx, &*bcx.fcx.llargs.borrow(), nid)\n-        }\n-        def::DefLocal(nid, _) | def::DefBinding(nid, _) => {\n-            take_local(bcx, &*bcx.fcx.lllocals.borrow(), nid)\n+        def::DefLocal(nid, _) => {\n+            let datum = match bcx.fcx.lllocals.borrow().find(&nid) {\n+                Some(&v) => v,\n+                None => {\n+                    bcx.sess().bug(format!(\n+                        \"trans_local_var: no datum for local/arg {:?} found\",\n+                        nid).as_slice());\n+                }\n+            };\n+            debug!(\"take_local(nid={:?}, v={}, ty={})\",\n+                   nid, bcx.val_to_string(datum.val), bcx.ty_to_string(datum.ty));\n+            datum\n         }\n         _ => {\n             bcx.sess().unimpl(format!(\n                 \"unsupported def type in trans_local_var: {:?}\",\n                 def).as_slice());\n         }\n-    };\n-\n-    fn take_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                              table: &NodeMap<Datum<Lvalue>>,\n-                              nid: ast::NodeId)\n-                              -> Datum<Lvalue> {\n-        let datum = match table.find(&nid) {\n-            Some(&v) => v,\n-            None => {\n-                bcx.sess().bug(format!(\n-                    \"trans_local_var: no datum for local/arg {:?} found\",\n-                    nid).as_slice());\n-            }\n-        };\n-        debug!(\"take_local(nid={:?}, v={}, ty={})\",\n-               nid, bcx.val_to_string(datum.val), bcx.ty_to_string(datum.ty));\n-        datum\n     }\n }\n "}, {"sha": "f8fc6713eb9cb905090e5a61a302de08cc7b26fa", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=1813b8cf550772d84c1737a048bccccc79730a5b", "patch": "@@ -3684,9 +3684,7 @@ pub fn expr_kind(tcx: &ctxt, expr: &ast::Expr) -> ExprKind {\n                 // DefArg's, particularly those of immediate type, ought to\n                 // considered rvalues.\n                 def::DefStatic(..) |\n-                def::DefBinding(..) |\n                 def::DefUpvar(..) |\n-                def::DefArg(..) |\n                 def::DefLocal(..) => LvalueExpr,\n \n                 def => {"}, {"sha": "23fd5175792edb70cf7ac0dcd7355b5af9417bf0", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=1813b8cf550772d84c1737a048bccccc79730a5b", "patch": "@@ -5027,8 +5027,7 @@ pub fn polytype_for_def(fcx: &FnCtxt,\n                         defn: def::Def)\n                         -> Polytype {\n     match defn {\n-      def::DefArg(nid, _) | def::DefLocal(nid, _) |\n-      def::DefBinding(nid, _) => {\n+      def::DefLocal(nid, _) => {\n           let typ = fcx.local_ty(sp, nid);\n           return no_params(typ);\n       }\n@@ -5183,10 +5182,8 @@ pub fn instantiate_path(fcx: &FnCtxt,\n         // elsewhere. (I hope)\n         def::DefMod(..) |\n         def::DefForeignMod(..) |\n-        def::DefArg(..) |\n         def::DefLocal(..) |\n         def::DefMethod(..) |\n-        def::DefBinding(..) |\n         def::DefUse(..) |\n         def::DefRegion(..) |\n         def::DefLabel(..) |"}, {"sha": "95c0d201f7ee9a60a79945f8227a43537b3cce20", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1813b8cf550772d84c1737a048bccccc79730a5b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=1813b8cf550772d84c1737a048bccccc79730a5b", "patch": "@@ -119,7 +119,6 @@ and report an error, and it just seems like more mess in the end.)\n */\n \n use middle::def;\n-use middle::def::{DefArg, DefBinding, DefLocal, DefUpvar};\n use middle::freevars;\n use middle::mem_categorization as mc;\n use middle::ty::{ReScope};\n@@ -243,11 +242,10 @@ fn region_of_def(fcx: &FnCtxt, def: def::Def) -> ty::Region {\n \n     let tcx = fcx.tcx();\n     match def {\n-        DefLocal(node_id, _) | DefArg(node_id, _) |\n-        DefBinding(node_id, _) => {\n+        def::DefLocal(node_id, _) => {\n             tcx.region_maps.var_region(node_id)\n         }\n-        DefUpvar(_, subdef, closure_id, body_id) => {\n+        def::DefUpvar(_, subdef, closure_id, body_id) => {\n             match ty::ty_closure_store(fcx.node_ty(closure_id)) {\n                 ty::RegionTraitStore(..) => region_of_def(fcx, *subdef),\n                 ty::UniqTraitStore => ReScope(body_id)\n@@ -1475,7 +1473,6 @@ fn link_region(rcx: &Rcx,\n             mc::cat_static_item |\n             mc::cat_copied_upvar(..) |\n             mc::cat_local(..) |\n-            mc::cat_arg(..) |\n             mc::cat_upvar(..) |\n             mc::cat_rvalue(..) => {\n                 // These are all \"base cases\" with independent lifetimes\n@@ -1701,7 +1698,6 @@ fn adjust_upvar_borrow_kind_for_mut(rcx: &Rcx,\n             mc::cat_rvalue(_) |\n             mc::cat_copied_upvar(_) |\n             mc::cat_local(_) |\n-            mc::cat_arg(_) |\n             mc::cat_upvar(..) => {\n                 return;\n             }\n@@ -1753,7 +1749,6 @@ fn adjust_upvar_borrow_kind_for_unique(rcx: &Rcx, cmt: mc::cmt) {\n             mc::cat_rvalue(_) |\n             mc::cat_copied_upvar(_) |\n             mc::cat_local(_) |\n-            mc::cat_arg(_) |\n             mc::cat_upvar(..) => {\n                 return;\n             }"}]}