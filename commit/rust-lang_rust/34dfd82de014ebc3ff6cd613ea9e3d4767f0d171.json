{"sha": "34dfd82de014ebc3ff6cd613ea9e3d4767f0d171", "node_id": "C_kwDOAAsO6NoAKDM0ZGZkODJkZTAxNGViYzNmZjZjZDYxM2VhOWUzZDQ3NjdmMGQxNzE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-07T16:35:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-07T16:35:31Z"}, "message": "Rollup merge of #102764 - compiler-errors:issue-102762, r=jackh726\n\nCheck `WhereClauseReferencesSelf` after all other object safety checks\n\nThis fixes the ICE because it causes us to detect another *non-lint* `MethodViolationCode` first, instead of breaking on `WhereClauseReferencesSelf`.\n\nWe could also approach this issue by instead returning a vector of *all* of the `MethodViolationCode`s, and just reporting the first one we see, but treating it as a hard error if we return both `WhereClauseReferencesSelf` and some other violation code -- let me know if this is desired.\n\nFixes #102762", "tree": {"sha": "5cb1fe81ae450eeee3c06db7eb1ac65190b93722", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cb1fe81ae450eeee3c06db7eb1ac65190b93722"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34dfd82de014ebc3ff6cd613ea9e3d4767f0d171", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjQFVTCRBK7hj4Ov3rIwAAadoIAEleK8pg/+0+HkXDNhOxey5X\nTI8Au5XeqhO+CNRMZYCqLNcGClcRHwvg21FT/JFnWPZ9SD9Dq1OTWqBPk9dMQllj\n9FaLkekfS9xl5VC4xVpt7WaLhZmOU84Gf/X45hFroqHq82it0AORO8hFwH00zF3z\nyAeNxMZrv8Uw/SXkMnHXSfBV6iynn6gRjlsasSvq7cMXqTvz0nj9OBeiuv/HS0XH\nFApEZY+9N2fg2iWFPVVf16jtio4jiWCj2wY5OofCjeihVAghGL6cZbFsmANHyM9I\nCKxy6O9HXUazdiPYujlbW6Uyh/8w6OjziySbrrNwml0vSba9IGRUCzmkEWbF0X0=\n=7IaT\n-----END PGP SIGNATURE-----\n", "payload": "tree 5cb1fe81ae450eeee3c06db7eb1ac65190b93722\nparent fe4200365e4478365ace6e819caacd586ab113be\nparent 414319468bc57ccba8be27e25581dd053469e27c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1665160531 +0530\ncommitter GitHub <noreply@github.com> 1665160531 +0530\n\nRollup merge of #102764 - compiler-errors:issue-102762, r=jackh726\n\nCheck `WhereClauseReferencesSelf` after all other object safety checks\n\nThis fixes the ICE because it causes us to detect another *non-lint* `MethodViolationCode` first, instead of breaking on `WhereClauseReferencesSelf`.\n\nWe could also approach this issue by instead returning a vector of *all* of the `MethodViolationCode`s, and just reporting the first one we see, but treating it as a hard error if we return both `WhereClauseReferencesSelf` and some other violation code -- let me know if this is desired.\n\nFixes #102762\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34dfd82de014ebc3ff6cd613ea9e3d4767f0d171", "html_url": "https://github.com/rust-lang/rust/commit/34dfd82de014ebc3ff6cd613ea9e3d4767f0d171", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34dfd82de014ebc3ff6cd613ea9e3d4767f0d171/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe4200365e4478365ace6e819caacd586ab113be", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe4200365e4478365ace6e819caacd586ab113be", "html_url": "https://github.com/rust-lang/rust/commit/fe4200365e4478365ace6e819caacd586ab113be"}, {"sha": "414319468bc57ccba8be27e25581dd053469e27c", "url": "https://api.github.com/repos/rust-lang/rust/commits/414319468bc57ccba8be27e25581dd053469e27c", "html_url": "https://github.com/rust-lang/rust/commit/414319468bc57ccba8be27e25581dd053469e27c"}], "stats": {"total": 74, "additions": 61, "deletions": 13}, "files": [{"sha": "b6f8f51bdf491d905d55d632ed4c33c91f457628", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/34dfd82de014ebc3ff6cd613ea9e3d4767f0d171/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34dfd82de014ebc3ff6cd613ea9e3d4767f0d171/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=34dfd82de014ebc3ff6cd613ea9e3d4767f0d171", "patch": "@@ -447,19 +447,6 @@ fn virtual_call_violation_for_method<'tcx>(\n         return Some(MethodViolationCode::Generic);\n     }\n \n-    if tcx\n-        .predicates_of(method.def_id)\n-        .predicates\n-        .iter()\n-        // A trait object can't claim to live more than the concrete type,\n-        // so outlives predicates will always hold.\n-        .cloned()\n-        .filter(|(p, _)| p.to_opt_type_outlives().is_none())\n-        .any(|pred| contains_illegal_self_type_reference(tcx, trait_def_id, pred))\n-    {\n-        return Some(MethodViolationCode::WhereClauseReferencesSelf);\n-    }\n-\n     let receiver_ty = tcx.liberate_late_bound_regions(method.def_id, sig.input(0));\n \n     // Until `unsized_locals` is fully implemented, `self: Self` can't be dispatched on.\n@@ -538,6 +525,21 @@ fn virtual_call_violation_for_method<'tcx>(\n         }\n     }\n \n+    // NOTE: This check happens last, because it results in a lint, and not a\n+    // hard error.\n+    if tcx\n+        .predicates_of(method.def_id)\n+        .predicates\n+        .iter()\n+        // A trait object can't claim to live more than the concrete type,\n+        // so outlives predicates will always hold.\n+        .cloned()\n+        .filter(|(p, _)| p.to_opt_type_outlives().is_none())\n+        .any(|pred| contains_illegal_self_type_reference(tcx, trait_def_id, pred))\n+    {\n+        return Some(MethodViolationCode::WhereClauseReferencesSelf);\n+    }\n+\n     None\n }\n "}, {"sha": "4f4c3634528a14835828fd685083cb83c15d0b95", "filename": "src/test/ui/object-safety/issue-102762.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/34dfd82de014ebc3ff6cd613ea9e3d4767f0d171/src%2Ftest%2Fui%2Fobject-safety%2Fissue-102762.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34dfd82de014ebc3ff6cd613ea9e3d4767f0d171/src%2Ftest%2Fui%2Fobject-safety%2Fissue-102762.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fissue-102762.rs?ref=34dfd82de014ebc3ff6cd613ea9e3d4767f0d171", "patch": "@@ -0,0 +1,26 @@\n+// compile-flags: --crate-type=lib\n+// This test checks that the `where_clauses_object_safety` lint does not cause\n+// other object safety *hard errors* to be suppressed, because we currently\n+// only emit one object safety error per trait...\n+\n+use std::future::Future;\n+use std::pin::Pin;\n+\n+pub trait Fetcher: Send + Sync {\n+    fn get<'a>(self: &'a Box<Self>) -> Pin<Box<dyn Future<Output = Vec<u8>> + 'a>>\n+    where\n+        Self: Sync,\n+    {\n+        todo!()\n+    }\n+}\n+\n+fn fetcher() -> Box<dyn Fetcher> {\n+    //~^ ERROR the trait `Fetcher` cannot be made into an object\n+    todo!()\n+}\n+\n+pub fn foo() {\n+    let fetcher = fetcher();\n+    let _ = fetcher.get();\n+}"}, {"sha": "5041ebe77605158a9389319437bb1f9487df4186", "filename": "src/test/ui/object-safety/issue-102762.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/34dfd82de014ebc3ff6cd613ea9e3d4767f0d171/src%2Ftest%2Fui%2Fobject-safety%2Fissue-102762.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34dfd82de014ebc3ff6cd613ea9e3d4767f0d171/src%2Ftest%2Fui%2Fobject-safety%2Fissue-102762.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fissue-102762.stderr?ref=34dfd82de014ebc3ff6cd613ea9e3d4767f0d171", "patch": "@@ -0,0 +1,20 @@\n+error[E0038]: the trait `Fetcher` cannot be made into an object\n+  --> $DIR/issue-102762.rs:18:21\n+   |\n+LL |     fn get<'a>(self: &'a Box<Self>) -> Pin<Box<dyn Future<Output = Vec<u8>> + 'a>>\n+   |                      ------------- help: consider changing method `get`'s `self` parameter to be `&self`: `&Self`\n+...\n+LL | fn fetcher() -> Box<dyn Fetcher> {\n+   |                     ^^^^^^^^^^^ `Fetcher` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-102762.rs:10:22\n+   |\n+LL | pub trait Fetcher: Send + Sync {\n+   |           ------- this trait cannot be made into an object...\n+LL |     fn get<'a>(self: &'a Box<Self>) -> Pin<Box<dyn Future<Output = Vec<u8>> + 'a>>\n+   |                      ^^^^^^^^^^^^^ ...because method `get`'s `self` parameter cannot be dispatched on\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0038`."}]}