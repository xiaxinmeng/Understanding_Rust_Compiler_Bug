{"sha": "91b58c93c5ab18969e7bdce3bf3e110c9b150d4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYjU4YzkzYzVhYjE4OTY5ZTdiZGNlM2JmM2UxMTBjOWIxNTBkNGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-25T08:02:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-25T08:02:54Z"}, "message": "Auto merge of #1485 - RalfJung:miri-extern-fn, r=oli-obk\n\n Miri: use extern fn to expose interpreter operations to program; fix leak checker on Windows\n\nThis is the Miri side of https://github.com/rust-lang/rust/pull/74681.\n\nFixes https://github.com/rust-lang/miri/issues/1302\nFixes https://github.com/rust-lang/miri/issues/1318", "tree": {"sha": "795bb26939be13074010ec72eb36c0f9fea2da3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/795bb26939be13074010ec72eb36c0f9fea2da3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91b58c93c5ab18969e7bdce3bf3e110c9b150d4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91b58c93c5ab18969e7bdce3bf3e110c9b150d4b", "html_url": "https://github.com/rust-lang/rust/commit/91b58c93c5ab18969e7bdce3bf3e110c9b150d4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91b58c93c5ab18969e7bdce3bf3e110c9b150d4b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "592b1408806c3a78c7388924014637a1e7bf5384", "url": "https://api.github.com/repos/rust-lang/rust/commits/592b1408806c3a78c7388924014637a1e7bf5384", "html_url": "https://github.com/rust-lang/rust/commit/592b1408806c3a78c7388924014637a1e7bf5384"}, {"sha": "c641fbde0223cde9fae67de3cc4892998a21cec0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c641fbde0223cde9fae67de3cc4892998a21cec0", "html_url": "https://github.com/rust-lang/rust/commit/c641fbde0223cde9fae67de3cc4892998a21cec0"}], "stats": {"total": 67, "additions": 52, "deletions": 15}, "files": [{"sha": "f97639ea5bdfd1cd0868fca635ab06746bb636ba", "filename": "README.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/91b58c93c5ab18969e7bdce3bf3e110c9b150d4b/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/91b58c93c5ab18969e7bdce3bf3e110c9b150d4b/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=91b58c93c5ab18969e7bdce3bf3e110c9b150d4b", "patch": "@@ -233,6 +233,29 @@ different Miri binaries, and as such worth documenting:\n   interpret the code but compile it like rustc would. This is useful to be sure\n   that the compiled `rlib`s are compatible with Miri.\n \n+## Miri `extern` functions\n+\n+Miri provides some `extern` functions that programs can import to access\n+Miri-specific functionality:\n+\n+```rust\n+#[cfg(miri)]\n+extern \"Rust\" {\n+    /// Miri-provided extern function to mark the block `ptr` points to as a \"root\"\n+    /// for some static memory. This memory and everything reachable by it is not\n+    /// considered leaking even if it still exists when the program terminates.\n+    ///\n+    /// `ptr` has to point to the beginning of an allocated block.\n+    fn miri_static_root(ptr: *const u8);\n+\n+    /// Miri-provided extern function to begin unwinding with the given payload.\n+    ///\n+    /// This is internal and unstable and should not be used; we give it here\n+    /// just to be complete.\n+    fn miri_start_panic(payload: *mut u8) -> !;\n+}\n+```\n+\n ## Contributing and getting help\n \n If you want to contribute to Miri, great!  Please check out our"}, {"sha": "d0c938c53fafd1f95761ab0f808f5b280913fd12", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b58c93c5ab18969e7bdce3bf3e110c9b150d4b/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/91b58c93c5ab18969e7bdce3bf3e110c9b150d4b/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=91b58c93c5ab18969e7bdce3bf3e110c9b150d4b", "patch": "@@ -1 +1 @@\n-4825e12fc9c79954aa0fe18f5521efa6c19c7539\n+0e11fc8053d32c44e7152865852acc5c3c54efb3"}, {"sha": "24cf0cbf06be0c70fe54090b833efa4febbfdb58", "filename": "src/eval.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91b58c93c5ab18969e7bdce3bf3e110c9b150d4b/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b58c93c5ab18969e7bdce3bf3e110c9b150d4b/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=91b58c93c5ab18969e7bdce3bf3e110c9b150d4b", "patch": "@@ -5,6 +5,7 @@ use std::ffi::OsStr;\n \n use rand::rngs::StdRng;\n use rand::SeedableRng;\n+use log::info;\n \n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{self, layout::LayoutCx, TyCtxt};\n@@ -195,8 +196,8 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n /// Returns `Some(return_code)` if program executed completed.\n /// Returns `None` if an evaluation error occured.\n pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) -> Option<i64> {\n-    // FIXME: on Windows, we ignore leaks (https://github.com/rust-lang/miri/issues/1302).\n-    let ignore_leaks = config.ignore_leaks || tcx.sess.target.target.target_os == \"windows\";\n+    // Copy setting before we move `config`.\n+    let ignore_leaks = config.ignore_leaks;\n \n     let (mut ecx, ret_place) = match create_ecx(tcx, main_id, config) {\n         Ok(v) => v,\n@@ -244,7 +245,8 @@ pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) ->\n     match res {\n         Ok(return_code) => {\n             if !ignore_leaks {\n-                let leaks = ecx.memory.leak_report();\n+                info!(\"Additonal static roots: {:?}\", ecx.machine.static_roots);\n+                let leaks = ecx.memory.leak_report(&ecx.machine.static_roots);\n                 if leaks != 0 {\n                     tcx.sess.err(\"the evaluated program leaked memory\");\n                     // Ignore the provided return code - let the reported error"}, {"sha": "e9217896ef6eb5c01939d28a2c3f66ceeae4a10e", "filename": "src/machine.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b58c93c5ab18969e7bdce3bf3e110c9b150d4b/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b58c93c5ab18969e7bdce3bf3e110c9b150d4b/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=91b58c93c5ab18969e7bdce3bf3e110c9b150d4b", "patch": "@@ -262,6 +262,9 @@ pub struct Evaluator<'mir, 'tcx> {\n \n     /// Precomputed `TyLayout`s for primitive data types that are commonly used inside Miri.\n     pub(crate) layouts: PrimitiveLayouts<'tcx>,\n+\n+    /// Allocations that are considered roots of static memory (that may leak).\n+    pub(crate) static_roots: Vec<AllocId>,\n }\n \n impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n@@ -289,6 +292,7 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n             time_anchor: Instant::now(),\n             layouts,\n             threads: ThreadManager::default(),\n+            static_roots: Vec::new(),\n         }\n     }\n }"}, {"sha": "7323a664bda8d5f7813c9a0c93cd0100050758bd", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/91b58c93c5ab18969e7bdce3bf3e110c9b150d4b/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b58c93c5ab18969e7bdce3bf3e110c9b150d4b/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=91b58c93c5ab18969e7bdce3bf3e110c9b150d4b", "patch": "@@ -111,7 +111,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         def_id: DefId,\n         args: &[OpTy<'tcx, Tag>],\n         ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n-        _unwind: Option<mir::BasicBlock>,\n+        unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx, Option<&'mir mir::Body<'tcx>>> {\n         let this = self.eval_context_mut();\n         let attrs = this.tcx.get_attrs(def_id);\n@@ -126,6 +126,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // First: functions that diverge.\n         let (dest, ret) = match ret {\n             None => match link_name {\n+                \"miri_start_panic\" => {\n+                    this.handle_miri_start_panic(args, unwind)?;\n+                    return Ok(None);\n+                }\n                 // This matches calls to the foreign item `panic_impl`.\n                 // The implementation is provided by the function with the `#[panic_handler]` attribute.\n                 \"panic_impl\" => {\n@@ -193,6 +197,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Here we dispatch all the shims for foreign functions. If you have a platform specific\n         // shim, add it to the corresponding submodule.\n         match link_name {\n+            // Miri-specific extern functions\n+            \"miri_static_root\" => {\n+                let &[ptr] = check_arg_count(args)?;\n+                let ptr = this.read_scalar(ptr)?.not_undef()?;\n+                let ptr = this.force_ptr(ptr)?;\n+                if ptr.offset != Size::ZERO {\n+                    throw_unsup_format!(\"pointer passed to miri_static_root must point to beginning of an allocated block\");\n+                }\n+                this.machine.static_roots.push(ptr.alloc_id);\n+            }\n+\n             // Standard C allocation\n             \"malloc\" => {\n                 let &[size] = check_arg_count(args)?;"}, {"sha": "f542bebd82ad1b0f61310dac7fa3bc7fd60a3c14", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/91b58c93c5ab18969e7bdce3bf3e110c9b150d4b/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b58c93c5ab18969e7bdce3bf3e110c9b150d4b/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=91b58c93c5ab18969e7bdce3bf3e110c9b150d4b", "patch": "@@ -18,7 +18,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Tag>],\n         ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n-        unwind: Option<mir::BasicBlock>,\n+        _unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         let intrinsic_name = this.tcx.item_name(instance.def_id());\n@@ -32,13 +32,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             return Ok(());\n         }\n \n-        // First handle intrinsics without return place.\n+        // All supported intrinsics have a return place.\n         let intrinsic_name = &*intrinsic_name.as_str();\n         let (dest, ret) = match ret {\n-            None => match intrinsic_name {\n-                \"miri_start_panic\" => return this.handle_miri_start_panic(args, unwind),\n-                _ => throw_unsup_format!(\"unimplemented (diverging) intrinsic: {}\", intrinsic_name),\n-            },\n+            None => throw_unsup_format!(\"unimplemented (diverging) intrinsic: {}\", intrinsic_name),\n             Some(p) => p,\n         };\n "}, {"sha": "71b4e2f442f31db02b4d710d3ede9917c51f9dcc", "filename": "tests/compile-fail/memleak.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b58c93c5ab18969e7bdce3bf3e110c9b150d4b/tests%2Fcompile-fail%2Fmemleak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b58c93c5ab18969e7bdce3bf3e110c9b150d4b/tests%2Fcompile-fail%2Fmemleak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmemleak.rs?ref=91b58c93c5ab18969e7bdce3bf3e110c9b150d4b", "patch": "@@ -1,5 +1,3 @@\n-// ignore-windows: We do not check leaks on Windows\n-\n //error-pattern: the evaluated program leaked memory\n \n fn main() {"}, {"sha": "b2bc6722afb04fd22c6a0bc4b546ecab3fe1e5ac", "filename": "tests/compile-fail/memleak_rc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b58c93c5ab18969e7bdce3bf3e110c9b150d4b/tests%2Fcompile-fail%2Fmemleak_rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b58c93c5ab18969e7bdce3bf3e110c9b150d4b/tests%2Fcompile-fail%2Fmemleak_rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmemleak_rc.rs?ref=91b58c93c5ab18969e7bdce3bf3e110c9b150d4b", "patch": "@@ -1,5 +1,3 @@\n-// ignore-windows: We do not check leaks on Windows\n-\n //error-pattern: the evaluated program leaked memory\n \n use std::rc::Rc;"}]}