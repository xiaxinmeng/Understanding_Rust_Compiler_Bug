{"sha": "fe4b709c0cc51dda3a9ed0cb5d10346509e9966d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNGI3MDljMGNjNTFkZGEzYTllZDBjYjVkMTAzNDY1MDllOTk2NmQ=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-11-12T22:48:33Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-11-12T22:48:33Z"}, "message": "expand source_util macros with def-site context", "tree": {"sha": "0b71c92dc552b737ca7e28dc0cc57a6d84343aeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b71c92dc552b737ca7e28dc0cc57a6d84343aeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe4b709c0cc51dda3a9ed0cb5d10346509e9966d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAl3LNuMWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdLqICACRpW/C6KmUff+0USw7KEjw6dQ+\nzfxVJ5nmnGtqqVNwtxeA0ZM3TWBULb28sDoivQ1hsPARyFE30aXNchfxcmJ0gTpD\nyfBv3LnXqB/KB5+8XVnzae947EfneTA6x8I9jeBRPoLfEVggvgGSmxyDM8jFPOcw\nATKsn6VAaL2yGp0cp+Tx1BUtaibyAN0rhz2/ZSPEAwkljSGmAnI7CUOAoG+9q7Am\n003YAYL5spiQEDVoBgQbP084gYoicdyo1F/7UmNRdwX7WwLmTYITK8SbVjmBx+Ok\nHA/hjKVgz/Xr68M2GH46gQYi3GEIvvhFFuYXN03ccQC7N/aorWt/IvD/JUeV\n=8Wul\n-----END PGP SIGNATURE-----", "payload": "tree 0b71c92dc552b737ca7e28dc0cc57a6d84343aeb\nparent e931f00f658b59481925deb0152503038ca69b9e\nauthor Andy Russell <arussell123@gmail.com> 1573598913 -0500\ncommitter Andy Russell <arussell123@gmail.com> 1573598913 -0500\n\nexpand source_util macros with def-site context\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe4b709c0cc51dda3a9ed0cb5d10346509e9966d", "html_url": "https://github.com/rust-lang/rust/commit/fe4b709c0cc51dda3a9ed0cb5d10346509e9966d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe4b709c0cc51dda3a9ed0cb5d10346509e9966d/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e931f00f658b59481925deb0152503038ca69b9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e931f00f658b59481925deb0152503038ca69b9e", "html_url": "https://github.com/rust-lang/rust/commit/e931f00f658b59481925deb0152503038ca69b9e"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "3d27af2f210a5f259a8847275002851d3254ca43", "filename": "src/libsyntax_ext/source_util.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe4b709c0cc51dda3a9ed0cb5d10346509e9966d/src%2Flibsyntax_ext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe4b709c0cc51dda3a9ed0cb5d10346509e9966d/src%2Flibsyntax_ext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fsource_util.rs?ref=fe4b709c0cc51dda3a9ed0cb5d10346509e9966d", "patch": "@@ -21,6 +21,7 @@ use rustc_data_structures::sync::Lrc;\n /// line!(): expands to the current line number\n pub fn expand_line(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                    -> Box<dyn base::MacResult+'static> {\n+    let sp = cx.with_def_site_ctxt(sp);\n     base::check_zero_tts(cx, sp, tts, \"line!\");\n \n     let topmost = cx.expansion_cause().unwrap_or(sp);\n@@ -32,6 +33,7 @@ pub fn expand_line(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n /* column!(): expands to the current column number */\n pub fn expand_column(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                   -> Box<dyn base::MacResult+'static> {\n+    let sp = cx.with_def_site_ctxt(sp);\n     base::check_zero_tts(cx, sp, tts, \"column!\");\n \n     let topmost = cx.expansion_cause().unwrap_or(sp);\n@@ -45,6 +47,7 @@ pub fn expand_column(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n /// out if we wanted.\n pub fn expand_file(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                    -> Box<dyn base::MacResult+'static> {\n+    let sp = cx.with_def_site_ctxt(sp);\n     base::check_zero_tts(cx, sp, tts, \"file!\");\n \n     let topmost = cx.expansion_cause().unwrap_or(sp);\n@@ -54,12 +57,14 @@ pub fn expand_file(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n \n pub fn expand_stringify(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                         -> Box<dyn base::MacResult+'static> {\n+    let sp = cx.with_def_site_ctxt(sp);\n     let s = pprust::tts_to_string(tts);\n     base::MacEager::expr(cx.expr_str(sp, Symbol::intern(&s)))\n }\n \n pub fn expand_mod(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                   -> Box<dyn base::MacResult+'static> {\n+    let sp = cx.with_def_site_ctxt(sp);\n     base::check_zero_tts(cx, sp, tts, \"module_path!\");\n     let mod_path = &cx.current_expansion.module.mod_path;\n     let string = mod_path.iter().map(|x| x.to_string()).collect::<Vec<String>>().join(\"::\");\n@@ -72,6 +77,7 @@ pub fn expand_mod(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n /// unhygienically.\n pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                            -> Box<dyn base::MacResult+'cx> {\n+    let sp = cx.with_def_site_ctxt(sp);\n     let file = match get_single_str_from_tts(cx, sp, tts, \"include!\") {\n         Some(f) => f,\n         None => return DummyResult::any(sp),\n@@ -125,6 +131,7 @@ pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n // include_str! : read the given file, insert it as a literal string expr\n pub fn expand_include_str(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                           -> Box<dyn base::MacResult+'static> {\n+    let sp = cx.with_def_site_ctxt(sp);\n     let file = match get_single_str_from_tts(cx, sp, tts, \"include_str!\") {\n         Some(f) => f,\n         None => return DummyResult::any(sp)\n@@ -156,6 +163,7 @@ pub fn expand_include_str(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n \n pub fn expand_include_bytes(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                             -> Box<dyn base::MacResult+'static> {\n+    let sp = cx.with_def_site_ctxt(sp);\n     let file = match get_single_str_from_tts(cx, sp, tts, \"include_bytes!\") {\n         Some(f) => f,\n         None => return DummyResult::any(sp)"}]}