{"sha": "799732cbd8c1b6ce650fa2093dbbf6579c37c1f6", "node_id": "C_kwDOAAsO6NoAKDc5OTczMmNiZDhjMWI2Y2U2NTBmYTIwOTNkYmJmNjU3OWMzN2MxZjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-30T08:51:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-30T08:51:29Z"}, "message": "Auto merge of #10414 - csmoe:large-future, r=xFrednet\n\nadd large future lint\n\nCloses #5263\n\n---\n\nchangelog: new lint: [`large_futures`]\n[#10414](https://github.com/rust-lang/rust-clippy/pull/10414)\n<!-- changelog_checked -->", "tree": {"sha": "bc0a337c0d8cddedb8850e4282fb83d9848c137e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc0a337c0d8cddedb8850e4282fb83d9848c137e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6", "html_url": "https://github.com/rust-lang/rust/commit/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef3867f3943a9180da87ac2290c49a9297198b1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef3867f3943a9180da87ac2290c49a9297198b1d", "html_url": "https://github.com/rust-lang/rust/commit/ef3867f3943a9180da87ac2290c49a9297198b1d"}, {"sha": "6e87ae0f1ae5247c83470c6c039c0946063bfdda", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e87ae0f1ae5247c83470c6c039c0946063bfdda", "html_url": "https://github.com/rust-lang/rust/commit/6e87ae0f1ae5247c83470c6c039c0946063bfdda"}], "stats": {"total": 287, "additions": 287, "deletions": 0}, "files": [{"sha": "f54bfbfa472e832ac27ccc0e0e8f8cd10f74cb28", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=799732cbd8c1b6ce650fa2093dbbf6579c37c1f6", "patch": "@@ -4633,6 +4633,7 @@ Released 2018-09-13\n [`large_const_arrays`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_const_arrays\n [`large_digit_groups`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_digit_groups\n [`large_enum_variant`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_enum_variant\n+[`large_futures`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_futures\n [`large_include_file`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_include_file\n [`large_stack_arrays`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays\n [`large_types_passed_by_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_types_passed_by_value"}, {"sha": "4415a05251e9c9519d747ea44586b0c7f5235e40", "filename": "book/src/lint_configuration.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/book%2Fsrc%2Flint_configuration.md", "raw_url": "https://github.com/rust-lang/rust/raw/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/book%2Fsrc%2Flint_configuration.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Flint_configuration.md?ref=799732cbd8c1b6ce650fa2093dbbf6579c37c1f6", "patch": "@@ -54,6 +54,7 @@ Please use that command to update the file and do not edit it by hand.\n | [allow-mixed-uninlined-format-args](#allow-mixed-uninlined-format-args) | `true` |\n | [suppress-restriction-lint-in-const](#suppress-restriction-lint-in-const) | `false` |\n | [missing-docs-in-crate-items](#missing-docs-in-crate-items) | `false` |\n+| [future-size-threshold](#future-size-threshold) | `16384` |\n \n ### arithmetic-side-effects-allowed\n Suppress checking of the passed type names in all types of operations.\n@@ -552,4 +553,12 @@ crate. For example, `pub(crate)` items.\n * [missing_docs_in_private_items](https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items)\n \n \n+### future-size-threshold\n+The maximum byte size a `Future` can have, before it triggers the `clippy::large_futures` lint\n+\n+**Default Value:** `16384` (`u64`)\n+\n+* [large_futures](https://rust-lang.github.io/rust-clippy/master/index.html#large_futures)\n+\n+\n "}, {"sha": "f07c7f0534c68ba44ce5b40d58d1a0148b8a69f3", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=799732cbd8c1b6ce650fa2093dbbf6579c37c1f6", "patch": "@@ -218,6 +218,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR_INFO,\n     crate::large_const_arrays::LARGE_CONST_ARRAYS_INFO,\n     crate::large_enum_variant::LARGE_ENUM_VARIANT_INFO,\n+    crate::large_futures::LARGE_FUTURES_INFO,\n     crate::large_include_file::LARGE_INCLUDE_FILE_INFO,\n     crate::large_stack_arrays::LARGE_STACK_ARRAYS_INFO,\n     crate::len_zero::COMPARISON_TO_EMPTY_INFO,"}, {"sha": "1b0544813718abe08f58d6abf48f3c44012f6944", "filename": "clippy_lints/src/large_futures.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/clippy_lints%2Fsrc%2Flarge_futures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/clippy_lints%2Fsrc%2Flarge_futures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_futures.rs?ref=799732cbd8c1b6ce650fa2093dbbf6579c37c1f6", "patch": "@@ -0,0 +1,87 @@\n+use clippy_utils::source::snippet;\n+use clippy_utils::{diagnostics::span_lint_and_sugg, ty::implements_trait};\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind, LangItem, MatchSource, QPath};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_target::abi::Size;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// It checks for the size of a `Future` created by `async fn` or `async {}`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Due to the current [unideal implemention](https://github.com/rust-lang/rust/issues/69826) of `Generator`,\n+    /// large size of a `Future` may cause stack overflows.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// async fn wait(f: impl std::future::Future<Output = ()>) {}\n+    ///\n+    /// async fn big_fut(arg: [u8; 1024]) {}\n+    ///\n+    /// pub async fn test() {\n+    ///     let fut = big_fut([0u8; 1024]);\n+    ///     wait(fut).await;\n+    /// }\n+    /// ```\n+    ///\n+    /// `Box::pin` the big future instead.\n+    ///\n+    /// ```rust\n+    /// async fn wait(f: impl std::future::Future<Output = ()>) {}\n+    ///\n+    /// async fn big_fut(arg: [u8; 1024]) {}\n+    ///\n+    /// pub async fn test() {\n+    ///     let fut = Box::pin(big_fut([0u8; 1024]));\n+    ///     wait(fut).await;\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.68.0\"]\n+    pub LARGE_FUTURES,\n+    pedantic,\n+    \"large future may lead to unexpected stack overflows\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct LargeFuture {\n+    future_size_threshold: u64,\n+}\n+\n+impl LargeFuture {\n+    pub fn new(future_size_threshold: u64) -> Self {\n+        Self { future_size_threshold }\n+    }\n+}\n+\n+impl_lint_pass!(LargeFuture => [LARGE_FUTURES]);\n+\n+impl<'tcx> LateLintPass<'tcx> for LargeFuture {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if matches!(expr.span.ctxt().outer_expn_data().kind, rustc_span::ExpnKind::Macro(..)) {\n+            return;\n+        }\n+        if let ExprKind::Match(expr, _, MatchSource::AwaitDesugar) = expr.kind {\n+            if let ExprKind::Call(func, [expr, ..]) = expr.kind\n+                && let ExprKind::Path(QPath::LangItem(LangItem::IntoFutureIntoFuture, ..)) = func.kind\n+                && let ty = cx.typeck_results().expr_ty(expr)\n+                && let Some(future_trait_def_id) = cx.tcx.lang_items().future_trait()\n+                && implements_trait(cx, ty, future_trait_def_id, &[])\n+                && let Ok(layout) = cx.tcx.layout_of(cx.param_env.and(ty))\n+                && let size = layout.layout.size()\n+                && size >= Size::from_bytes(self.future_size_threshold)\n+            {\n+                span_lint_and_sugg(\n+                    cx,\n+                    LARGE_FUTURES,\n+                    expr.span,\n+                    &format!(\"large future with a size of {} bytes\", size.bytes()),\n+                    \"consider `Box::pin` on it\",\n+                    format!(\"Box::pin({})\", snippet(cx, expr.span, \"..\")),\n+                    Applicability::Unspecified,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "75c53a09d7964c81d36d97874b22ff793325c35d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=799732cbd8c1b6ce650fa2093dbbf6579c37c1f6", "patch": "@@ -163,6 +163,7 @@ mod items_after_statements;\n mod iter_not_returning_iterator;\n mod large_const_arrays;\n mod large_enum_variant;\n+mod large_futures;\n mod large_include_file;\n mod large_stack_arrays;\n mod len_zero;\n@@ -810,6 +811,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move |_| Box::new(dereference::Dereferencing::new(msrv())));\n     store.register_late_pass(|_| Box::new(option_if_let_else::OptionIfLetElse));\n     store.register_late_pass(|_| Box::new(future_not_send::FutureNotSend));\n+    let future_size_threshold = conf.future_size_threshold;\n+    store.register_late_pass(move |_| Box::new(large_futures::LargeFuture::new(future_size_threshold)));\n     store.register_late_pass(|_| Box::new(if_let_mutex::IfLetMutex));\n     store.register_late_pass(|_| Box::new(if_not_else::IfNotElse));\n     store.register_late_pass(|_| Box::new(equatable_if_let::PatternEquality));"}, {"sha": "e1c9dd1011772b068e99b56d9cecd978031d54ea", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=799732cbd8c1b6ce650fa2093dbbf6579c37c1f6", "patch": "@@ -459,6 +459,10 @@ define_Conf! {\n     /// Whether to **only** check for missing documentation in items visible within the current\n     /// crate. For example, `pub(crate)` items.\n     (missing_docs_in_crate_items: bool = false),\n+    /// Lint: LARGE_FUTURES.\n+    ///\n+    /// The maximum byte size a `Future` can have, before it triggers the `clippy::large_futures` lint\n+    (future_size_threshold: u64 = 16 * 1024),\n }\n \n /// Search for the configuration file."}, {"sha": "61bb17fdf6bdb4c8b3f85a400a1bce7dff4f2486", "filename": "tests/ui-toml/large_futures/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/tests%2Fui-toml%2Flarge_futures%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/tests%2Fui-toml%2Flarge_futures%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Flarge_futures%2Fclippy.toml?ref=799732cbd8c1b6ce650fa2093dbbf6579c37c1f6", "patch": "@@ -0,0 +1 @@\n+future-size-threshold = 1024"}, {"sha": "4158df8b5ff55ad8f1acc72f8fb022d19f015668", "filename": "tests/ui-toml/large_futures/large_futures.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.rs?ref=799732cbd8c1b6ce650fa2093dbbf6579c37c1f6", "patch": "@@ -0,0 +1,27 @@\n+#![warn(clippy::large_futures)]\n+\n+fn main() {}\n+\n+pub async fn should_warn() {\n+    let x = [0u8; 1024];\n+    async {}.await;\n+    dbg!(x);\n+}\n+\n+pub async fn should_not_warn() {\n+    let x = [0u8; 1020];\n+    async {}.await;\n+    dbg!(x);\n+}\n+\n+pub async fn bar() {\n+    should_warn().await;\n+\n+    async {\n+        let x = [0u8; 1024];\n+        dbg!(x);\n+    }\n+    .await;\n+\n+    should_not_warn().await;\n+}"}, {"sha": "b92734de2f08c7ff93861caf8b8e1d30e32ecd3d", "filename": "tests/ui-toml/large_futures/large_futures.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.stderr?ref=799732cbd8c1b6ce650fa2093dbbf6579c37c1f6", "patch": "@@ -0,0 +1,10 @@\n+error: large future with a size of 1026 bytes\n+  --> $DIR/large_futures.rs:18:5\n+   |\n+LL |     should_warn().await;\n+   |     ^^^^^^^^^^^^^ help: consider `Box::pin` on it: `Box::pin(should_warn())`\n+   |\n+   = note: `-D clippy::large-futures` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "8447c31722dd015249440af39faddafc7cd125e3", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=799732cbd8c1b6ce650fa2093dbbf6579c37c1f6", "patch": "@@ -24,6 +24,7 @@ error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown fie\n            enforced-import-renames\n            enum-variant-name-threshold\n            enum-variant-size-threshold\n+           future-size-threshold\n            ignore-interior-mutability\n            large-error-threshold\n            literal-representation-threshold"}, {"sha": "4a8ba995da556f0546b526b987f6f4a44a80d4f2", "filename": "tests/ui/large_futures.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/tests%2Fui%2Flarge_futures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/tests%2Fui%2Flarge_futures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_futures.rs?ref=799732cbd8c1b6ce650fa2093dbbf6579c37c1f6", "patch": "@@ -0,0 +1,61 @@\n+#![feature(generators)]\n+#![warn(clippy::large_futures)]\n+#![allow(clippy::future_not_send)]\n+#![allow(clippy::manual_async_fn)]\n+\n+async fn big_fut(_arg: [u8; 1024 * 16]) {}\n+\n+async fn wait() {\n+    let f = async {\n+        big_fut([0u8; 1024 * 16]).await;\n+    };\n+    f.await\n+}\n+async fn calls_fut(fut: impl std::future::Future<Output = ()>) {\n+    loop {\n+        wait().await;\n+        if true {\n+            return fut.await;\n+        } else {\n+            wait().await;\n+        }\n+    }\n+}\n+\n+pub async fn test() {\n+    let fut = big_fut([0u8; 1024 * 16]);\n+    foo().await;\n+    calls_fut(fut).await;\n+}\n+\n+pub fn foo() -> impl std::future::Future<Output = ()> {\n+    async {\n+        let x = [0i32; 1024 * 16];\n+        async {}.await;\n+        dbg!(x);\n+    }\n+}\n+\n+pub async fn lines() {\n+    async {\n+        let x = [0i32; 1024 * 16];\n+        async {}.await;\n+        println!(\"{:?}\", x);\n+    }\n+    .await;\n+}\n+\n+pub async fn macro_expn() {\n+    macro_rules! macro_ {\n+        () => {\n+            async {\n+                let x = [0i32; 1024 * 16];\n+                async {}.await;\n+                println!(\"macro: {:?}\", x);\n+            }\n+        };\n+    }\n+    macro_!().await\n+}\n+\n+fn main() {}"}, {"sha": "67e0fceff6ef313f8d527564385a9ed8a3a6a3f2", "filename": "tests/ui/large_futures.stderr", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/tests%2Fui%2Flarge_futures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6/tests%2Fui%2Flarge_futures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_futures.stderr?ref=799732cbd8c1b6ce650fa2093dbbf6579c37c1f6", "patch": "@@ -0,0 +1,82 @@\n+error: large future with a size of 16385 bytes\n+  --> $DIR/large_futures.rs:10:9\n+   |\n+LL |         big_fut([0u8; 1024 * 16]).await;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Box::pin` on it: `Box::pin(big_fut([0u8; 1024 * 16]))`\n+   |\n+   = note: `-D clippy::large-futures` implied by `-D warnings`\n+\n+error: large future with a size of 16386 bytes\n+  --> $DIR/large_futures.rs:12:5\n+   |\n+LL |     f.await\n+   |     ^ help: consider `Box::pin` on it: `Box::pin(f)`\n+\n+error: large future with a size of 16387 bytes\n+  --> $DIR/large_futures.rs:16:9\n+   |\n+LL |         wait().await;\n+   |         ^^^^^^ help: consider `Box::pin` on it: `Box::pin(wait())`\n+\n+error: large future with a size of 16387 bytes\n+  --> $DIR/large_futures.rs:20:13\n+   |\n+LL |             wait().await;\n+   |             ^^^^^^ help: consider `Box::pin` on it: `Box::pin(wait())`\n+\n+error: large future with a size of 65540 bytes\n+  --> $DIR/large_futures.rs:27:5\n+   |\n+LL |     foo().await;\n+   |     ^^^^^ help: consider `Box::pin` on it: `Box::pin(foo())`\n+\n+error: large future with a size of 49159 bytes\n+  --> $DIR/large_futures.rs:28:5\n+   |\n+LL |     calls_fut(fut).await;\n+   |     ^^^^^^^^^^^^^^ help: consider `Box::pin` on it: `Box::pin(calls_fut(fut))`\n+\n+error: large future with a size of 65540 bytes\n+  --> $DIR/large_futures.rs:40:5\n+   |\n+LL | /     async {\n+LL | |         let x = [0i32; 1024 * 16];\n+LL | |         async {}.await;\n+LL | |         println!(\"{:?}\", x);\n+LL | |     }\n+   | |_____^\n+   |\n+help: consider `Box::pin` on it\n+   |\n+LL ~     Box::pin(async {\n+LL +         let x = [0i32; 1024 * 16];\n+LL +         async {}.await;\n+LL +         println!(\"{:?}\", x);\n+LL +     })\n+   |\n+\n+error: large future with a size of 65540 bytes\n+  --> $DIR/large_futures.rs:51:13\n+   |\n+LL | /             async {\n+LL | |                 let x = [0i32; 1024 * 16];\n+LL | |                 async {}.await;\n+LL | |                 println!(\"macro: {:?}\", x);\n+LL | |             }\n+   | |_____________^\n+...\n+LL |       macro_!().await\n+   |       --------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `macro_` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider `Box::pin` on it\n+   |\n+LL ~             Box::pin(async {\n+LL +                 let x = [0i32; 1024 * 16];\n+LL +                 async {}.await;\n+LL +                 println!(\"macro: {:?}\", x);\n+LL +             })\n+   |\n+\n+error: aborting due to 8 previous errors\n+"}]}