{"sha": "42e986f77ba350f9cb28958d9ef19af06007ac1c", "node_id": "C_kwDOAAsO6NoAKDQyZTk4NmY3N2JhMzUwZjljYjI4OTU4ZDllZjE5YWYwNjAwN2FjMWM", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-03-24T21:41:30Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-03-24T21:41:30Z"}, "message": "Implement impl_subject_and_oblig instead of repeating the impls", "tree": {"sha": "92c7e7b2f9dea985460a4bf7efbf68c816d3749a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92c7e7b2f9dea985460a4bf7efbf68c816d3749a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42e986f77ba350f9cb28958d9ef19af06007ac1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmI85YoACgkQgTGiTgx5\n76+ffw//T0mKTEJm2NrFJ0nlzSWuiPYTdu2GD+zbkA5ZtCgKnWO/VqmzGNv2Ur75\naukaHvcP8v0WtP5fffFwX0qqS5BYej/VcyV2yAd77prKj9XspFbUi7miI5CN7AyU\nsaGj0YFJbhe8Id8kj6WCwvdRQde7c2oTxnAxqmgsFFXtJVsw8ddbMa9bCuyIC/y6\nf8sZr8amNPyXNAy2I8i/uDPD9temPQwO4t0iQd/Rk/a0uJEeX05kqAAF0HMZG7QB\ny0QeVqyZ4z87QM3qDHMmFf46ffggC0KB/hpNNiUP3XFzbBmap5SMvgMCRxnfER5I\nXKCY9KOBYRoVNruWEDAyVza4KNyy6QkVRRS4DvivZJiDrL1JX5Cdamxnl7707Dbq\nw+UWuXKTlFxRebNqJlUarCmLyxaz+DA564U4KuiH29RO5u+pXYO9qmoLDV9dKeRF\nwUGGFh/UHtMcn7PcWvq9pmJfLR3jb6GglEzpJAKnDpRNyWnJrrXR+VrsXrS2AYRI\nWih90MBhuZTPfw3P//sR5fzoKO9fYOp4TteL9VYqoWZAIVWbARrd7/AElIKxSi8w\nnV0AeoeYe9Z/5R+/HxxA2bCnKmSVgZ5lR404LgPYKsUdGBdBPSWZuYurcNrjVZ0m\nsPoP7v2McKo4vyoa+TjpbhZ+AOEpM9JCoSjT3x7GUKiH0zFzbwM=\n=fM0S\n-----END PGP SIGNATURE-----", "payload": "tree 92c7e7b2f9dea985460a4bf7efbf68c816d3749a\nparent d96faef9138d6618e36fec1919e1c9305fefa96c\nauthor Santiago Pastorino <spastorino@gmail.com> 1648158090 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1648158090 -0300\n\nImplement impl_subject_and_oblig instead of repeating the impls\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42e986f77ba350f9cb28958d9ef19af06007ac1c", "html_url": "https://github.com/rust-lang/rust/commit/42e986f77ba350f9cb28958d9ef19af06007ac1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42e986f77ba350f9cb28958d9ef19af06007ac1c/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d96faef9138d6618e36fec1919e1c9305fefa96c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d96faef9138d6618e36fec1919e1c9305fefa96c", "html_url": "https://github.com/rust-lang/rust/commit/d96faef9138d6618e36fec1919e1c9305fefa96c"}], "stats": {"total": 100, "additions": 26, "deletions": 74}, "files": [{"sha": "ec4f8084e212d437047b24f1f74731afdc9b63ce", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/42e986f77ba350f9cb28958d9ef19af06007ac1c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e986f77ba350f9cb28958d9ef19af06007ac1c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=42e986f77ba350f9cb28958d9ef19af06007ac1c", "patch": "@@ -7,7 +7,7 @@\n use crate::infer::outlives::env::OutlivesEnvironment;\n use crate::infer::{CombinedSnapshot, InferOk, RegionckMode};\n use crate::traits::select::IntercrateAmbiguityCause;\n-use crate::traits::util::{impl_trait_ref_and_oblig, inherent_impl_and_oblig};\n+use crate::traits::util::impl_subject_and_oblig;\n use crate::traits::SkipLeakCheck;\n use crate::traits::{\n     self, FulfillmentContext, Normalized, Obligation, ObligationCause, PredicateObligation,\n@@ -316,36 +316,14 @@ fn negative_impl<'cx, 'tcx>(\n             Err(err) => bug!(\"failed to fully normalize {:?}: {:?}\", impl1_def_id, err),\n         };\n \n-        let (subject2, obligations) =\n-            impl_subject_and_obligations(&infcx, impl_env, subject1, impl2_def_id);\n-\n-        !equate(&infcx, impl_env, impl1_def_id, subject1, subject2, obligations)\n-    })\n-}\n-\n-fn impl_subject_and_obligations<'cx, 'tcx>(\n-    infcx: &InferCtxt<'cx, 'tcx>,\n-    impl_env: ty::ParamEnv<'tcx>,\n-    subject1: ImplSubject<'tcx>,\n-    impl2_def_id: DefId,\n-) -> (ImplSubject<'tcx>, Box<dyn Iterator<Item = PredicateObligation<'tcx>> + 'tcx>) {\n-    if let ImplSubject::Trait(_) = subject1 {\n         // Attempt to prove that impl2 applies, given all of the above.\n         let selcx = &mut SelectionContext::new(&infcx);\n         let impl2_substs = infcx.fresh_substs_for_item(DUMMY_SP, impl2_def_id);\n-        let (impl2_trait_ref, obligations) =\n-            impl_trait_ref_and_oblig(selcx, impl_env, impl2_def_id, impl2_substs);\n-\n-        (ImplSubject::Trait(impl2_trait_ref), Box::new(obligations))\n-    } else {\n-        // Attempt to prove that impl2 applies, given all of the above.\n-        let selcx = &mut SelectionContext::new(&infcx);\n-        let impl2_substs = infcx.fresh_substs_for_item(DUMMY_SP, impl2_def_id);\n-        let (impl2_ty, obligations) =\n-            inherent_impl_and_oblig(selcx, impl_env, impl2_def_id, impl2_substs);\n+        let (subject2, obligations) =\n+            impl_subject_and_oblig(selcx, impl_env, impl2_def_id, impl2_substs);\n \n-        (ImplSubject::Inherent(impl2_ty), Box::new(obligations))\n-    }\n+        !equate(&infcx, impl_env, impl1_def_id, subject1, subject2, obligations)\n+    })\n }\n \n fn equate<'cx, 'tcx>("}, {"sha": "328e0d2e0e90a859ca51248c684fc3ccf6fd955a", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/42e986f77ba350f9cb28958d9ef19af06007ac1c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e986f77ba350f9cb28958d9ef19af06007ac1c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=42e986f77ba350f9cb28958d9ef19af06007ac1c", "patch": "@@ -20,12 +20,12 @@ use rustc_errors::{struct_span_err, EmissionGuarantee};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::{self, ImplSubject, TyCtxt};\n use rustc_session::lint::builtin::COHERENCE_LEAK_CHECK;\n use rustc_session::lint::builtin::ORDER_DEPENDENT_TRAIT_OBJECTS;\n use rustc_span::{Span, DUMMY_SP};\n \n-use super::util::impl_trait_ref_and_oblig;\n+use super::util;\n use super::{FulfillmentContext, SelectionContext};\n \n /// Information pertinent to an overlapping impl error.\n@@ -186,18 +186,20 @@ fn fulfill_implication<'a, 'tcx>(\n         param_env, source_trait_ref, target_impl\n     );\n \n+    let source_trait = ImplSubject::Trait(source_trait_ref);\n+\n     let selcx = &mut SelectionContext::new(&infcx);\n     let target_substs = infcx.fresh_substs_for_item(DUMMY_SP, target_impl);\n-    let (target_trait_ref, obligations) =\n-        impl_trait_ref_and_oblig(selcx, param_env, target_impl, target_substs);\n+    let (target_trait, obligations) =\n+        util::impl_subject_and_oblig(selcx, param_env, target_impl, target_substs);\n \n     // do the impls unify? If not, no specialization.\n     let Ok(InferOk { obligations: more_obligations, .. }) =\n-        infcx.at(&ObligationCause::dummy(), param_env).eq(source_trait_ref, target_trait_ref)\n+        infcx.at(&ObligationCause::dummy(), param_env).eq(source_trait, target_trait)\n     else {\n         debug!(\n             \"fulfill_implication: {:?} does not unify with {:?}\",\n-            source_trait_ref, target_trait_ref\n+            source_trait, target_trait\n         );\n         return Err(());\n     };\n@@ -225,7 +227,7 @@ fn fulfill_implication<'a, 'tcx>(\n             [] => {\n                 debug!(\n                     \"fulfill_implication: an impl for {:?} specializes {:?}\",\n-                    source_trait_ref, target_trait_ref\n+                    source_trait, target_trait\n                 );\n \n                 // Now resolve the *substitution* we built for the target earlier, replacing\n@@ -237,8 +239,8 @@ fn fulfill_implication<'a, 'tcx>(\n                 debug!(\n                     \"fulfill_implication: for impls on {:?} and {:?}, \\\n                      could not fulfill: {:?} given {:?}\",\n-                    source_trait_ref,\n-                    target_trait_ref,\n+                    source_trait,\n+                    target_trait,\n                     errors,\n                     param_env.caller_bounds()\n                 );"}, {"sha": "7543d1f9a7b5532693d13bb990ce17d14618570a", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 10, "deletions": 38, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/42e986f77ba350f9cb28958d9ef19af06007ac1c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e986f77ba350f9cb28958d9ef19af06007ac1c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=42e986f77ba350f9cb28958d9ef19af06007ac1c", "patch": "@@ -6,7 +6,7 @@ use smallvec::SmallVec;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, Subst, SubstsRef};\n-use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, ImplSubject, ToPredicate, Ty, TyCtxt, TypeFoldable};\n \n use super::{Normalized, Obligation, ObligationCause, PredicateObligation, SelectionContext};\n pub use rustc_infer::traits::{self, util::*};\n@@ -190,19 +190,19 @@ impl Iterator for SupertraitDefIds<'_> {\n // Other\n ///////////////////////////////////////////////////////////////////////////\n \n-/// Instantiate all bound parameters of the impl with the given substs,\n-/// returning the resulting trait ref and all obligations that arise.\n+/// Instantiate all bound parameters of the impl subject with the given substs,\n+/// returning the resulting subject and all obligations that arise.\n /// The obligations are closed under normalization.\n-pub fn impl_trait_ref_and_oblig<'a, 'tcx>(\n+pub fn impl_subject_and_oblig<'a, 'tcx>(\n     selcx: &mut SelectionContext<'a, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     impl_def_id: DefId,\n     impl_substs: SubstsRef<'tcx>,\n-) -> (ty::TraitRef<'tcx>, impl Iterator<Item = PredicateObligation<'tcx>>) {\n-    let impl_trait_ref = selcx.tcx().impl_trait_ref(impl_def_id).unwrap();\n-    let impl_trait_ref = impl_trait_ref.subst(selcx.tcx(), impl_substs);\n-    let Normalized { value: impl_trait_ref, obligations: normalization_obligations1 } =\n-        super::normalize(selcx, param_env, ObligationCause::dummy(), impl_trait_ref);\n+) -> (ImplSubject<'tcx>, impl Iterator<Item = PredicateObligation<'tcx>>) {\n+    let subject = selcx.tcx().impl_subject(impl_def_id);\n+    let subject = subject.subst(selcx.tcx(), impl_substs);\n+    let Normalized { value: subject, obligations: normalization_obligations1 } =\n+        super::normalize(selcx, param_env, ObligationCause::dummy(), subject);\n \n     let predicates = selcx.tcx().predicates_of(impl_def_id);\n     let predicates = predicates.instantiate(selcx.tcx(), impl_substs);\n@@ -215,35 +215,7 @@ pub fn impl_trait_ref_and_oblig<'a, 'tcx>(\n         .chain(normalization_obligations1.into_iter())\n         .chain(normalization_obligations2.into_iter());\n \n-    (impl_trait_ref, impl_obligations)\n-}\n-\n-/// Instantiate all bound parameters of the impl with the given substs,\n-/// returning the resulting trait ref and all obligations that arise.\n-/// The obligations are closed under normalization.\n-pub fn inherent_impl_and_oblig<'a, 'tcx>(\n-    selcx: &mut SelectionContext<'a, 'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-    impl_def_id: DefId,\n-    impl_substs: SubstsRef<'tcx>,\n-) -> (Ty<'tcx>, impl Iterator<Item = PredicateObligation<'tcx>>) {\n-    let ty = selcx.tcx().type_of(impl_def_id);\n-    let ty = ty.subst(selcx.tcx(), impl_substs);\n-    let Normalized { value: ty, obligations: normalization_obligations1 } =\n-        super::normalize(selcx, param_env, ObligationCause::dummy(), ty);\n-\n-    let predicates = selcx.tcx().predicates_of(impl_def_id);\n-    let predicates = predicates.instantiate(selcx.tcx(), impl_substs);\n-    let Normalized { value: predicates, obligations: normalization_obligations2 } =\n-        super::normalize(selcx, param_env, ObligationCause::dummy(), predicates);\n-    let impl_obligations =\n-        predicates_for_generics(ObligationCause::dummy(), 0, param_env, predicates);\n-\n-    let impl_obligations = impl_obligations\n-        .chain(normalization_obligations1.into_iter())\n-        .chain(normalization_obligations2.into_iter());\n-\n-    (ty, impl_obligations)\n+    (subject, impl_obligations)\n }\n \n pub fn predicates_for_generics<'tcx>("}]}