{"sha": "e83dcf4ecd678bac474d6aaca1cf0294bcbcd1b3", "node_id": "C_kwDOAAsO6NoAKGU4M2RjZjRlY2Q2NzhiYWM0NzRkNmFhY2ExY2YwMjk0YmNiY2QxYjM", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-10-03T15:37:22Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-10-03T15:37:22Z"}, "message": "re-name params + add comments", "tree": {"sha": "1dedaa684ee9288d40b17a52349c50191fe4a035", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dedaa684ee9288d40b17a52349c50191fe4a035"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e83dcf4ecd678bac474d6aaca1cf0294bcbcd1b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e83dcf4ecd678bac474d6aaca1cf0294bcbcd1b3", "html_url": "https://github.com/rust-lang/rust/commit/e83dcf4ecd678bac474d6aaca1cf0294bcbcd1b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e83dcf4ecd678bac474d6aaca1cf0294bcbcd1b3/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8f17e3ad49090fd4b7c1301fbea6858453ecfb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f17e3ad49090fd4b7c1301fbea6858453ecfb9", "html_url": "https://github.com/rust-lang/rust/commit/a8f17e3ad49090fd4b7c1301fbea6858453ecfb9"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "b78661270e1818b2bd21476d2699eed9f780918e", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e83dcf4ecd678bac474d6aaca1cf0294bcbcd1b3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e83dcf4ecd678bac474d6aaca1cf0294bcbcd1b3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=e83dcf4ecd678bac474d6aaca1cf0294bcbcd1b3", "patch": "@@ -2057,8 +2057,8 @@ struct RegionFolder<'a, 'tcx> {\n     region_map: BTreeMap<ty::BoundRegion, ty::Region<'tcx>>,\n     name: &'a mut (\n                 dyn FnMut(\n-        Option<ty::DebruijnIndex>,\n-        ty::DebruijnIndex,\n+        Option<ty::DebruijnIndex>, // Debruijn index of the folded late-bound region\n+        ty::DebruijnIndex,         // Index corresponding to binder level\n         ty::BoundRegion,\n     ) -> ty::Region<'tcx>\n                     + 'a\n@@ -2246,15 +2246,21 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n             })\n         } else {\n             let tcx = self.tcx;\n-            let mut name = |db: Option<ty::DebruijnIndex>,\n-                            binder_level: ty::DebruijnIndex,\n+\n+            // Closure used in `RegionFolder` to create names for anonymous late-bound\n+            // regions. We use two `DebruijnIndex`es (one for the currently folded\n+            // late-bound region and the other for the binder level) to determine\n+            // whether a name has already been created for the currently folded region,\n+            // see issue #102392.\n+            let mut name = |lifetime_idx: Option<ty::DebruijnIndex>,\n+                            binder_level_idx: ty::DebruijnIndex,\n                             br: ty::BoundRegion| {\n                 let (name, kind) = match br.kind {\n                     ty::BrAnon(_) | ty::BrEnv => {\n                         let name = next_name(&self);\n \n-                        if let Some(db) = db {\n-                            if db > binder_level {\n+                        if let Some(lt_idx) = lifetime_idx {\n+                            if lt_idx > binder_level_idx {\n                                 let kind = ty::BrNamed(CRATE_DEF_ID.to_def_id(), name);\n                                 return tcx.mk_region(ty::ReLateBound(\n                                     ty::INNERMOST,\n@@ -2268,8 +2274,8 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                     ty::BrNamed(def_id, kw::UnderscoreLifetime) => {\n                         let name = next_name(&self);\n \n-                        if let Some(db) = db {\n-                            if db > binder_level {\n+                        if let Some(lt_idx) = lifetime_idx {\n+                            if lt_idx > binder_level_idx {\n                                 let kind = ty::BrNamed(def_id, name);\n                                 return tcx.mk_region(ty::ReLateBound(\n                                     ty::INNERMOST,\n@@ -2281,8 +2287,8 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                         (name, ty::BrNamed(def_id, name))\n                     }\n                     ty::BrNamed(_, name) => {\n-                        if let Some(db) = db {\n-                            if db > binder_level {\n+                        if let Some(lt_idx) = lifetime_idx {\n+                            if lt_idx > binder_level_idx {\n                                 let kind = br.kind;\n                                 return tcx.mk_region(ty::ReLateBound(\n                                     ty::INNERMOST,"}]}