{"sha": "ebd6c7164ee7d8f85a640858f1cad1f56cc11a35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZDZjNzE2NGVlN2Q4Zjg1YTY0MDg1OGYxY2FkMWY1NmNjMTFhMzU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-05-03T21:24:52Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-05-21T19:38:17Z"}, "message": "Dont show variables from desugarings in borrowck errors", "tree": {"sha": "738f14c3e130e1678442d2b626dcabba18b44439", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/738f14c3e130e1678442d2b626dcabba18b44439"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebd6c7164ee7d8f85a640858f1cad1f56cc11a35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebd6c7164ee7d8f85a640858f1cad1f56cc11a35", "html_url": "https://github.com/rust-lang/rust/commit/ebd6c7164ee7d8f85a640858f1cad1f56cc11a35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebd6c7164ee7d8f85a640858f1cad1f56cc11a35/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50a0defd5a93523067ef239936cc2e0755220904", "url": "https://api.github.com/repos/rust-lang/rust/commits/50a0defd5a93523067ef239936cc2e0755220904", "html_url": "https://github.com/rust-lang/rust/commit/50a0defd5a93523067ef239936cc2e0755220904"}], "stats": {"total": 144, "additions": 112, "deletions": 32}, "files": [{"sha": "aab9d5e3a02bee2bca2d9a0eb535b99af37ec824", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ebd6c7164ee7d8f85a640858f1cad1f56cc11a35/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd6c7164ee7d8f85a640858f1cad1f56cc11a35/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=ebd6c7164ee7d8f85a640858f1cad1f56cc11a35", "patch": "@@ -915,6 +915,13 @@ impl<'tcx> LocalDecl<'tcx> {\n         }\n     }\n \n+    /// Returns `true` is the local is from a compiler desugaring, e.g.,\n+    /// `__next` from a `for` loop.\n+    #[inline]\n+    pub fn from_compiler_desugaring(&self) -> bool {\n+        self.source_info.span.compiler_desugaring_kind().is_some()\n+    }\n+\n     /// Creates a new `LocalDecl` for a temporary.\n     #[inline]\n     pub fn new_temp(ty: Ty<'tcx>, span: Span) -> Self {"}, {"sha": "d78418076245c6d34f6973fd8ca56f0fe78bd8dc", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebd6c7164ee7d8f85a640858f1cad1f56cc11a35/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd6c7164ee7d8f85a640858f1cad1f56cc11a35/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=ebd6c7164ee7d8f85a640858f1cad1f56cc11a35", "patch": "@@ -1760,15 +1760,15 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     }\n \n     /// Appends end-user visible description of the `local` place to `buf`. If `local` doesn't have\n-    /// a name, then `Err` is returned\n+    /// a name, or its name was generated by the compiler, then `Err` is returned\n     fn append_local_to_string(&self, local_index: Local, buf: &mut String) -> Result<(), ()> {\n         let local = &self.mir.local_decls[local_index];\n         match local.name {\n-            Some(name) => {\n-                buf.push_str(&name.to_string());\n+            Some(name) if !local.from_compiler_desugaring() => {\n+                buf.push_str(name.as_str().get());\n                 Ok(())\n             }\n-            None => Err(()),\n+            _ => Err(()),\n         }\n     }\n "}, {"sha": "f0b4efe2630904aeed825c6c0ea2fc0d88445cc1", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ebd6c7164ee7d8f85a640858f1cad1f56cc11a35/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd6c7164ee7d8f85a640858f1cad1f56cc11a35/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=ebd6c7164ee7d8f85a640858f1cad1f56cc11a35", "patch": "@@ -420,28 +420,31 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                     );\n                 }\n \n-                if let Some(name) = local_decl.name {\n-                    err.span_label(\n-                        span,\n-                        format!(\n-                            \"`{NAME}` is a `{SIGIL}` {DESC}, \\\n-                             so the data it refers to cannot be {ACTED_ON}\",\n-                            NAME = name,\n-                            SIGIL = pointer_sigil,\n-                            DESC = pointer_desc,\n-                            ACTED_ON = acted_on\n-                        ),\n-                    );\n-                } else {\n-                    err.span_label(\n-                        span,\n-                        format!(\n-                            \"cannot {ACT} through `{SIGIL}` {DESC}\",\n-                            ACT = act,\n-                            SIGIL = pointer_sigil,\n-                            DESC = pointer_desc\n-                        ),\n-                    );\n+                match local_decl.name {\n+                    Some(name) if !local_decl.from_compiler_desugaring() => {\n+                        err.span_label(\n+                            span,\n+                            format!(\n+                                \"`{NAME}` is a `{SIGIL}` {DESC}, \\\n+                                so the data it refers to cannot be {ACTED_ON}\",\n+                                NAME = name,\n+                                SIGIL = pointer_sigil,\n+                                DESC = pointer_desc,\n+                                ACTED_ON = acted_on\n+                            ),\n+                        );\n+                    }\n+                    _ => {\n+                        err.span_label(\n+                            span,\n+                            format!(\n+                                \"cannot {ACT} through `{SIGIL}` {DESC}\",\n+                                ACT = act,\n+                                SIGIL = pointer_sigil,\n+                                DESC = pointer_desc\n+                            ),\n+                        );\n+                    }\n                 }\n             }\n "}, {"sha": "6bca470bf3e5f8928f967b84059b585bf1215c3c", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebd6c7164ee7d8f85a640858f1cad1f56cc11a35/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd6c7164ee7d8f85a640858f1cad1f56cc11a35/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=ebd6c7164ee7d8f85a640858f1cad1f56cc11a35", "patch": "@@ -112,7 +112,7 @@ impl BorrowExplanation {\n                 };\n \n                 match local_decl.name {\n-                    Some(local_name) => {\n+                    Some(local_name) if !local_decl.from_compiler_desugaring() => {\n                         let message = format!(\n                             \"{B}borrow might be used here, when `{LOC}` is dropped \\\n                              and runs the {DTOR} for {TYPE}\",\n@@ -130,7 +130,7 @@ impl BorrowExplanation {\n                             );\n                         }\n                     }\n-                    None => {\n+                    _ => {\n                         err.span_label(\n                             local_decl.source_info.span,\n                             format!("}, {"sha": "8083e00f607775928ab7947430ce86bd3edef746", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ebd6c7164ee7d8f85a640858f1cad1f56cc11a35/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd6c7164ee7d8f85a640858f1cad1f56cc11a35/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ebd6c7164ee7d8f85a640858f1cad1f56cc11a35", "patch": "@@ -8423,6 +8423,8 @@ impl<'a> Parser<'a> {\n             for (index, input) in decl.inputs.iter_mut().enumerate() {\n                 let id = ast::DUMMY_NODE_ID;\n                 let span = input.pat.span;\n+                let desugared_span = self.sess.source_map()\n+                    .mark_span_with_reason(CompilerDesugaringKind::Async, span, None);\n \n                 // Construct a name for our temporary argument.\n                 let name = format!(\"__arg{}\", index);\n@@ -8439,8 +8441,7 @@ impl<'a> Parser<'a> {\n                         // this would affect the input to procedural macros, but they can have\n                         // their span marked as being the result of a compiler desugaring so\n                         // that they aren't linted against.\n-                        input.pat.span = self.sess.source_map().mark_span_with_reason(\n-                            CompilerDesugaringKind::Async, span, None);\n+                        input.pat.span = desugared_span;\n \n                         (binding_mode, ident, true)\n                     }\n@@ -8460,7 +8461,7 @@ impl<'a> Parser<'a> {\n                             node: PatKind::Ident(\n                                 BindingMode::ByValue(Mutability::Immutable), ident, None,\n                             ),\n-                            span,\n+                            span: desugared_span,\n                         }),\n                         source: ArgSource::AsyncFn(input.pat.clone()),\n                     })\n@@ -8473,7 +8474,7 @@ impl<'a> Parser<'a> {\n                     pat: P(Pat {\n                         id,\n                         node: PatKind::Ident(binding_mode, ident, None),\n-                        span,\n+                        span: desugared_span,\n                     }),\n                     // We explicitly do not specify the type for this statement. When the user's\n                     // argument type is `impl Trait` then this would require the"}, {"sha": "8150a260866b98951e76ea346400138c85f4cb50", "filename": "src/test/ui/nll/dont-print-desugared-async.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ebd6c7164ee7d8f85a640858f1cad1f56cc11a35/src%2Ftest%2Fui%2Fnll%2Fdont-print-desugared-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd6c7164ee7d8f85a640858f1cad1f56cc11a35/src%2Ftest%2Fui%2Fnll%2Fdont-print-desugared-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdont-print-desugared-async.rs?ref=ebd6c7164ee7d8f85a640858f1cad1f56cc11a35", "patch": "@@ -0,0 +1,9 @@\n+// Test that we don't show variables with from async fn desugaring\n+\n+// edition:2018\n+#![feature(async_await)]\n+\n+async fn async_fn(&ref mut s: &[i32]) {}\n+//~^ ERROR cannot borrow data in a `&` reference as mutable [E0596]\n+\n+fn main() {}"}, {"sha": "47726ba65df98f1bfafaa53fce23e80515b6c3ce", "filename": "src/test/ui/nll/dont-print-desugared-async.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ebd6c7164ee7d8f85a640858f1cad1f56cc11a35/src%2Ftest%2Fui%2Fnll%2Fdont-print-desugared-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebd6c7164ee7d8f85a640858f1cad1f56cc11a35/src%2Ftest%2Fui%2Fnll%2Fdont-print-desugared-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdont-print-desugared-async.stderr?ref=ebd6c7164ee7d8f85a640858f1cad1f56cc11a35", "patch": "@@ -0,0 +1,12 @@\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n+  --> $DIR/dont-print-desugared-async.rs:6:20\n+   |\n+LL | async fn async_fn(&ref mut s: &[i32]) {}\n+   |                   -^^^^^^^^^\n+   |                   ||\n+   |                   |cannot borrow as mutable through `&` reference\n+   |                   help: consider changing this to be a mutable reference: `&mut ref mut s`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "829d78ed4c3ba444d1c39b51b0536379159e3241", "filename": "src/test/ui/nll/dont-print-desugared.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ebd6c7164ee7d8f85a640858f1cad1f56cc11a35/src%2Ftest%2Fui%2Fnll%2Fdont-print-desugared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd6c7164ee7d8f85a640858f1cad1f56cc11a35/src%2Ftest%2Fui%2Fnll%2Fdont-print-desugared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdont-print-desugared.rs?ref=ebd6c7164ee7d8f85a640858f1cad1f56cc11a35", "patch": "@@ -0,0 +1,21 @@\n+// Test that we don't show variables with from for loop desugaring\n+\n+fn for_loop(s: &[i32]) {\n+    for &ref mut x in s {}\n+    //~^ ERROR cannot borrow data in a `&` reference as mutable [E0596]\n+}\n+\n+struct D<'a>(&'a ());\n+\n+impl Drop for D<'_> {\n+    fn drop(&mut self) {}\n+}\n+\n+fn for_loop_dropck(v: Vec<D<'static>>) {\n+    for ref mut d in v {\n+        let y = ();\n+        *d = D(&y); //~ ERROR `y` does not live long enough\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "45d7cbcdfbe7fa56ca624c1f0fe77c7a20f84cbe", "filename": "src/test/ui/nll/dont-print-desugared.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ebd6c7164ee7d8f85a640858f1cad1f56cc11a35/src%2Ftest%2Fui%2Fnll%2Fdont-print-desugared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebd6c7164ee7d8f85a640858f1cad1f56cc11a35/src%2Ftest%2Fui%2Fnll%2Fdont-print-desugared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdont-print-desugared.stderr?ref=ebd6c7164ee7d8f85a640858f1cad1f56cc11a35", "patch": "@@ -0,0 +1,27 @@\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n+  --> $DIR/dont-print-desugared.rs:4:10\n+   |\n+LL |     for &ref mut x in s {}\n+   |         -^^^^^^^^^\n+   |         ||\n+   |         |cannot borrow as mutable through `&` reference\n+   |         help: consider changing this to be a mutable reference: `&mut ref mut x`\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/dont-print-desugared.rs:17:16\n+   |\n+LL |     for ref mut d in v {\n+   |                      - a temporary with access to the borrow is created here ...\n+LL |         let y = ();\n+LL |         *d = D(&y);\n+   |                ^^ borrowed value does not live long enough\n+LL |     }\n+   |     -\n+   |     |\n+   |     `y` dropped here while still borrowed\n+   |     ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0596, E0597.\n+For more information about an error, try `rustc --explain E0596`."}]}