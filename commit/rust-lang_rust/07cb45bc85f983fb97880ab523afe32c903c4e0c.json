{"sha": "07cb45bc85f983fb97880ab523afe32c903c4e0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3Y2I0NWJjODVmOTgzZmI5Nzg4MGFiNTIzYWZlMzJjOTAzYzRlMGM=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-09-13T16:22:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-13T16:22:48Z"}, "message": "Merge pull request #3166 from flip1995/travis_internal\n\nRun internal lints on the Clippy code base", "tree": {"sha": "963a935a05add46907346d3262098746f0a2d25d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/963a935a05add46907346d3262098746f0a2d25d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07cb45bc85f983fb97880ab523afe32c903c4e0c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbmo7YCRBK7hj4Ov3rIwAAdHIIAHFW+UCFIftbcqdwkYXg2hPD\nsoH+8eEIMBJ+yz8U/pgIb4+OuEf7izhzu12BgdUpHG1MZEd2Nl24J7G1F6RziwP9\nQBEALpmRtERpSFobL6dBDT4xDKJdtcE95JmbWsywDSSJ2Lq5LwkPTNY9N/vCxaRL\nTUyoocIt+f7q8cNiI+GbK1AnSISN4xdijrVBnjjZ2iKD4weWwN3ydig/W+tmbqvu\ng21VOPOdi0sVH3jWSSWLrIGXqSHaTPuARp06zi50gINpH4DpuOkM1fJwtOB55Zor\nh0dTFABms7Se8rADmjgYzgk9WIY/4NBA2iMuI3y9DTmpWvxbhLrM+4SnZIF69yw=\n=SSaG\n-----END PGP SIGNATURE-----\n", "payload": "tree 963a935a05add46907346d3262098746f0a2d25d\nparent d15b6009ee7b9dd2afd90db9e0b988d5e858b303\nparent e28440d2e0ee9bc8a5ed81f1c757b16656ad7739\nauthor Philipp Hansch <dev@phansch.net> 1536855768 +0100\ncommitter GitHub <noreply@github.com> 1536855768 +0100\n\nMerge pull request #3166 from flip1995/travis_internal\n\nRun internal lints on the Clippy code base"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07cb45bc85f983fb97880ab523afe32c903c4e0c", "html_url": "https://github.com/rust-lang/rust/commit/07cb45bc85f983fb97880ab523afe32c903c4e0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07cb45bc85f983fb97880ab523afe32c903c4e0c/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d15b6009ee7b9dd2afd90db9e0b988d5e858b303", "url": "https://api.github.com/repos/rust-lang/rust/commits/d15b6009ee7b9dd2afd90db9e0b988d5e858b303", "html_url": "https://github.com/rust-lang/rust/commit/d15b6009ee7b9dd2afd90db9e0b988d5e858b303"}, {"sha": "e28440d2e0ee9bc8a5ed81f1c757b16656ad7739", "url": "https://api.github.com/repos/rust-lang/rust/commits/e28440d2e0ee9bc8a5ed81f1c757b16656ad7739", "html_url": "https://github.com/rust-lang/rust/commit/e28440d2e0ee9bc8a5ed81f1c757b16656ad7739"}], "stats": {"total": 138, "additions": 70, "deletions": 68}, "files": [{"sha": "ba408bbb5fc1ee2243735bebbc5aa18cff126fe3", "filename": "ci/base-tests.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07cb45bc85f983fb97880ab523afe32c903c4e0c/ci%2Fbase-tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/07cb45bc85f983fb97880ab523afe32c903c4e0c/ci%2Fbase-tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fbase-tests.sh?ref=07cb45bc85f983fb97880ab523afe32c903c4e0c", "patch": "@@ -14,7 +14,7 @@ cp target/debug/cargo-clippy ~/rust/cargo/bin/cargo-clippy\n cp target/debug/clippy-driver ~/rust/cargo/bin/clippy-driver\n rm ~/.cargo/bin/cargo-clippy\n # run clippy on its own codebase...\n-PATH=$PATH:~/rust/cargo/bin cargo clippy --all-targets --all-features -- -D clippy::all\n+PATH=$PATH:~/rust/cargo/bin cargo clippy --all-targets --all-features -- -D clippy::all -D clippy::internal\n # ... and some test directories\n cd clippy_workspace_tests && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy::all && cd ..\n cd clippy_workspace_tests/src && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy::all && cd ../.."}, {"sha": "f10ad81d130b3409417cdd39817298a81ec2edb2", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=07cb45bc85f983fb97880ab523afe32c903c4e0c", "patch": "@@ -1,3 +1,5 @@\n+#![feature(tool_lints)]\n+#![allow(clippy::default_hash_types)]\n extern crate regex;\n #[macro_use]\n extern crate lazy_static;"}, {"sha": "01063d41ee8b1c67117202de5496a65a04b7c537", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=07cb45bc85f983fb97880ab523afe32c903c4e0c", "patch": "@@ -2,8 +2,9 @@ use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n use rustc::ty::Ty;\n use rustc::hir::*;\n-use std::collections::HashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use std::collections::hash_map::Entry;\n+use std::hash::BuildHasherDefault;\n use syntax::symbol::LocalInternedString;\n use rustc_data_structures::small_vec::OneVector;\n use crate::utils::{SpanlessEq, SpanlessHash};\n@@ -263,8 +264,8 @@ fn if_sequence(mut expr: &Expr) -> (OneVector<&Expr>, OneVector<&Block>) {\n }\n \n /// Return the list of bindings in a pattern.\n-fn bindings<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat) -> HashMap<LocalInternedString, Ty<'tcx>> {\n-    fn bindings_impl<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat, map: &mut HashMap<LocalInternedString, Ty<'tcx>>) {\n+fn bindings<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat) -> FxHashMap<LocalInternedString, Ty<'tcx>> {\n+    fn bindings_impl<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat, map: &mut FxHashMap<LocalInternedString, Ty<'tcx>>) {\n         match pat.node {\n             PatKind::Box(ref pat) | PatKind::Ref(ref pat, _) => bindings_impl(cx, pat, map),\n             PatKind::TupleStruct(_, ref pats, _) => for pat in pats {\n@@ -299,7 +300,7 @@ fn bindings<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat) -> HashMap<LocalInt\n         }\n     }\n \n-    let mut result = HashMap::new();\n+    let mut result = FxHashMap::default();\n     bindings_impl(cx, pat, &mut result);\n     result\n }\n@@ -333,7 +334,10 @@ where\n         };\n     }\n \n-    let mut map: HashMap<_, Vec<&_>> = HashMap::with_capacity(exprs.len());\n+    let mut map: FxHashMap<_, Vec<&_>> = FxHashMap::with_capacity_and_hasher(\n+        exprs.len(),\n+        BuildHasherDefault::default()\n+    );\n \n     for expr in exprs {\n         match map.entry(hash(expr)) {"}, {"sha": "ec9aa7a4fd3b90eeac2dbad6283ffbdb8dec5b54", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=07cb45bc85f983fb97880ab523afe32c903c4e0c", "patch": "@@ -5,7 +5,7 @@ use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n use rustc::ty;\n use rustc::hir::def::Def;\n-use std::collections::HashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use syntax::ast;\n use rustc_target::spec::abi::Abi;\n use syntax::source_map::Span;\n@@ -151,7 +151,7 @@ impl<'a, 'tcx> Functions {\n             let raw_ptrs = iter_input_pats(decl, body)\n                 .zip(decl.inputs.iter())\n                 .filter_map(|(arg, ty)| raw_ptr_arg(arg, ty))\n-                .collect::<HashSet<_>>();\n+                .collect::<FxHashSet<_>>();\n \n             if !raw_ptrs.is_empty() {\n                 let tables = cx.tcx.body_tables(body.id());\n@@ -177,7 +177,7 @@ fn raw_ptr_arg(arg: &hir::Arg, ty: &hir::Ty) -> Option<ast::NodeId> {\n \n struct DerefVisitor<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,\n-    ptrs: HashSet<ast::NodeId>,\n+    ptrs: FxHashSet<ast::NodeId>,\n     tables: &'a ty::TypeckTables<'tcx>,\n }\n "}, {"sha": "a78811c31e5de33e8ab11141951b3ef0d6aeadaa", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=07cb45bc85f983fb97880ab523afe32c903c4e0c", "patch": "@@ -3,7 +3,7 @@\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n-use std::collections::HashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use std::default::Default;\n use syntax_pos::Span;\n use crate::utils::span_lint_and_then;\n@@ -41,12 +41,12 @@ declare_clippy_lint! {\n }\n \n pub struct Pass {\n-    impls: HashMap<def_id::DefId, (Span, Generics)>,\n+    impls: FxHashMap<def_id::DefId, (Span, Generics)>,\n }\n \n impl Default for Pass {\n     fn default() -> Self {\n-        Pass { impls: HashMap::new() }\n+        Pass { impls: FxHashMap::default() }\n     }\n }\n "}, {"sha": "a31add18a9417e3df41d24f161fae160d1a8fd93", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=07cb45bc85f983fb97880ab523afe32c903c4e0c", "patch": "@@ -3,7 +3,7 @@ use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n use rustc::ty;\n-use std::collections::HashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use syntax::ast::{Lit, LitKind, Name};\n use syntax::source_map::{Span, Spanned};\n use crate::utils::{get_item_name, in_macro, snippet, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n@@ -125,7 +125,7 @@ fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item, trait_items\n     }\n \n     // fill the set with current and super traits\n-    fn fill_trait_set(traitt: DefId, set: &mut HashSet<DefId>, cx: &LateContext<'_, '_>) {\n+    fn fill_trait_set(traitt: DefId, set: &mut FxHashSet<DefId>, cx: &LateContext<'_, '_>) {\n         if set.insert(traitt) {\n             for supertrait in ::rustc::traits::supertrait_def_ids(cx.tcx, traitt) {\n                 fill_trait_set(supertrait, set, cx);\n@@ -134,7 +134,7 @@ fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item, trait_items\n     }\n \n     if cx.access_levels.is_exported(visited_trait.id) && trait_items.iter().any(|i| is_named_self(cx, i, \"len\")) {\n-        let mut current_and_super_traits = HashSet::new();\n+        let mut current_and_super_traits = FxHashSet::default();\n         let visited_trait_def_id = cx.tcx.hir.local_def_id(visited_trait.id);\n         fill_trait_set(visited_trait_def_id, &mut current_and_super_traits, cx);\n "}, {"sha": "5b04b829453b98ef1ed518ff5be74a0229553d00", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=07cb45bc85f983fb97880ab523afe32c903c4e0c", "patch": "@@ -5,7 +5,7 @@ use rustc::{declare_tool_lint, lint_array};\n use rustc::hir::def::Def;\n use rustc::hir::*;\n use rustc::hir::intravisit::*;\n-use std::collections::{HashMap, HashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use syntax::source_map::Span;\n use crate::utils::{last_path_segment, span_lint};\n use syntax::symbol::keywords;\n@@ -237,8 +237,8 @@ fn could_use_elision<'a, 'tcx: 'a>(\n     }\n }\n \n-fn allowed_lts_from(named_generics: &[GenericParam]) -> HashSet<RefLt> {\n-    let mut allowed_lts = HashSet::new();\n+fn allowed_lts_from(named_generics: &[GenericParam]) -> FxHashSet<RefLt> {\n+    let mut allowed_lts = FxHashSet::default();\n     for par in named_generics.iter() {\n         if let GenericParamKind::Lifetime { .. } = par.kind {\n             if par.bounds.is_empty() {\n@@ -263,7 +263,7 @@ fn lts_from_bounds<'a, T: Iterator<Item = &'a Lifetime>>(mut vec: Vec<RefLt>, bo\n \n /// Number of unique lifetimes in the given vector.\n fn unique_lifetimes(lts: &[RefLt]) -> usize {\n-    lts.iter().collect::<HashSet<_>>().len()\n+    lts.iter().collect::<FxHashSet<_>>().len()\n }\n \n /// A visitor usable for `rustc_front::visit::walk_ty()`.\n@@ -424,7 +424,7 @@ fn has_where_lifetimes<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, where_clause: &\n }\n \n struct LifetimeChecker {\n-    map: HashMap<Name, Span>,\n+    map: FxHashMap<Name, Span>,\n }\n \n impl<'tcx> Visitor<'tcx> for LifetimeChecker {"}, {"sha": "7240819646f5763287154b3e884cb4eacb455993", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=07cb45bc85f983fb97880ab523afe32c903c4e0c", "patch": "@@ -15,7 +15,7 @@ use rustc::middle::mem_categorization::cmt_;\n use rustc::ty::{self, Ty};\n use rustc::ty::subst::Subst;\n use rustc_errors::Applicability;\n-use std::collections::{HashMap, HashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use std::iter::{once, Iterator};\n use syntax::ast;\n use syntax::source_map::Span;\n@@ -1030,10 +1030,10 @@ fn check_for_loop_range<'a, 'tcx>(\n             let mut visitor = VarVisitor {\n                 cx,\n                 var: canonical_id,\n-                indexed_mut: HashSet::new(),\n-                indexed_indirectly: HashMap::new(),\n-                indexed_directly: HashMap::new(),\n-                referenced: HashSet::new(),\n+                indexed_mut: FxHashSet::default(),\n+                indexed_indirectly: FxHashMap::default(),\n+                indexed_directly: FxHashMap::default(),\n+                referenced: FxHashSet::default(),\n                 nonindex: false,\n                 prefer_mutable: false,\n             };\n@@ -1343,7 +1343,7 @@ fn check_for_loop_explicit_counter<'a, 'tcx>(\n     // Look for variables that are incremented once per loop iteration.\n     let mut visitor = IncrementVisitor {\n         cx,\n-        states: HashMap::new(),\n+        states: FxHashMap::default(),\n         depth: 0,\n         done: false,\n     };\n@@ -1618,15 +1618,15 @@ struct VarVisitor<'a, 'tcx: 'a> {\n     /// var name to look for as index\n     var: ast::NodeId,\n     /// indexed variables that are used mutably\n-    indexed_mut: HashSet<Name>,\n+    indexed_mut: FxHashSet<Name>,\n     /// indirectly indexed variables (`v[(i + 4) % N]`), the extend is `None` for global\n-    indexed_indirectly: HashMap<Name, Option<region::Scope>>,\n+    indexed_indirectly: FxHashMap<Name, Option<region::Scope>>,\n     /// subset of `indexed` of vars that are indexed directly: `v[i]`\n     /// this will not contain cases like `v[calc_index(i)]` or `v[(i + 4) % N]`\n-    indexed_directly: HashMap<Name, Option<region::Scope>>,\n+    indexed_directly: FxHashMap<Name, Option<region::Scope>>,\n     /// Any names that are used outside an index operation.\n     /// Used to detect things like `&mut vec` used together with `vec[i]`\n-    referenced: HashSet<Name>,\n+    referenced: FxHashSet<Name>,\n     /// has the loop variable been used in expressions other than the index of\n     /// an index op?\n     nonindex: bool,\n@@ -1906,7 +1906,7 @@ enum VarState {\n /// Scan a for loop for variables that are incremented exactly once.\n struct IncrementVisitor<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,     // context reference\n-    states: HashMap<NodeId, VarState>, // incremented variables\n+    states: FxHashMap<NodeId, VarState>, // incremented variables\n     depth: u32,                        // depth of conditional expressions\n     done: bool,\n }\n@@ -2197,8 +2197,8 @@ fn check_infinite_loop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, cond: &'tcx Expr, e\n \n     let mut var_visitor = VarCollectorVisitor {\n         cx,\n-        ids: HashSet::new(),\n-        def_ids: HashMap::new(),\n+        ids: FxHashSet::default(),\n+        def_ids: FxHashMap::default(),\n         skip: false,\n     };\n     var_visitor.visit_expr(cond);\n@@ -2228,8 +2228,8 @@ fn check_infinite_loop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, cond: &'tcx Expr, e\n /// All variables definition IDs are collected\n struct VarCollectorVisitor<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,\n-    ids: HashSet<NodeId>,\n-    def_ids: HashMap<def_id::DefId, bool>,\n+    ids: FxHashSet<NodeId>,\n+    def_ids: FxHashMap<def_id::DefId, bool>,\n     skip: bool,\n }\n "}, {"sha": "35a232f7f32e5bc7448ff1d250749ed23575b6cb", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=07cb45bc85f983fb97880ab523afe32c903c4e0c", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass, LintContext, in_external_macro};\n use rustc::{declare_tool_lint, lint_array};\n+use rustc_data_structures::fx::FxHashMap;\n use if_chain::if_chain;\n-use std::collections::HashMap;\n use std::char;\n use syntax::ast::*;\n use syntax::source_map::Span;\n@@ -267,7 +267,7 @@ impl EarlyLintPass for MiscEarly {\n     }\n \n     fn check_fn(&mut self, cx: &EarlyContext<'_>, _: FnKind<'_>, decl: &FnDecl, _: Span, _: NodeId) {\n-        let mut registered_names: HashMap<String, Span> = HashMap::new();\n+        let mut registered_names: FxHashMap<String, Span> = FxHashMap::default();\n \n         for arg in &decl.inputs {\n             if let PatKind::Ident(_, ident, None) = arg.pat.node {"}, {"sha": "76eaf0dba24652233b9d6f484213c428d01b51b3", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=07cb45bc85f983fb97880ab523afe32c903c4e0c", "patch": "@@ -9,13 +9,13 @@ use rustc::traits;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc_target::spec::abi::Abi;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use syntax::ast::NodeId;\n use syntax_pos::Span;\n use syntax::errors::DiagnosticBuilder;\n use crate::utils::{get_trait_def_id, implements_trait, in_macro, is_copy, is_self, match_type, multispan_sugg, paths,\n             snippet, snippet_opt, span_lint_and_then};\n use crate::utils::ptr::get_spans;\n-use std::collections::{HashMap, HashSet};\n use std::borrow::Cow;\n \n /// **What it does:** Checks for functions taking arguments by value, but not\n@@ -301,18 +301,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n struct MovedVariablesCtxt<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,\n-    moved_vars: HashSet<NodeId>,\n+    moved_vars: FxHashSet<NodeId>,\n     /// Spans which need to be prefixed with `*` for dereferencing the\n     /// suggested additional reference.\n-    spans_need_deref: HashMap<NodeId, HashSet<Span>>,\n+    spans_need_deref: FxHashMap<NodeId, FxHashSet<Span>>,\n }\n \n impl<'a, 'tcx> MovedVariablesCtxt<'a, 'tcx> {\n     fn new(cx: &'a LateContext<'a, 'tcx>) -> Self {\n         Self {\n             cx,\n-            moved_vars: HashSet::new(),\n-            spans_need_deref: HashMap::new(),\n+            moved_vars: FxHashSet::default(),\n+            spans_need_deref: FxHashMap::default(),\n         }\n     }\n \n@@ -344,7 +344,7 @@ impl<'a, 'tcx> MovedVariablesCtxt<'a, 'tcx> {\n                             if let ExprKind::Match(ref c, ..) = e.node {\n                                 self.spans_need_deref\n                                     .entry(vid)\n-                                    .or_insert_with(HashSet::new)\n+                                    .or_insert_with(FxHashSet::default)\n                                     .insert(c.span);\n                             }\n                         },\n@@ -357,7 +357,7 @@ impl<'a, 'tcx> MovedVariablesCtxt<'a, 'tcx> {\n                                 then {\n                                     self.spans_need_deref\n                                         .entry(vid)\n-                                        .or_insert_with(HashSet::new)\n+                                        .or_insert_with(FxHashSet::default)\n                                         .insert(local.init\n                                             .as_ref()\n                                             .map(|e| e.span)"}, {"sha": "b7409bfbc9ff407516d6dae2588a015ea25218c7", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=07cb45bc85f983fb97880ab523afe32c903c4e0c", "patch": "@@ -2,8 +2,8 @@ use regex_syntax;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n+use rustc_data_structures::fx::FxHashSet;\n use if_chain::if_chain;\n-use std::collections::HashSet;\n use syntax::ast::{LitKind, NodeId, StrStyle};\n use syntax::source_map::{BytePos, Span};\n use crate::utils::{is_expn_of, match_def_path, match_type, opt_def_id, paths, span_help_and_lint, span_lint};\n@@ -67,7 +67,7 @@ declare_clippy_lint! {\n \n #[derive(Clone, Default)]\n pub struct Pass {\n-    spans: HashSet<Span>,\n+    spans: FxHashSet<Span>,\n     last: Option<NodeId>,\n }\n "}, {"sha": "c0369df504ab336302ffa55aa557eafb4f7c30e2", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=07cb45bc85f983fb97880ab523afe32c903c4e0c", "patch": "@@ -1,3 +1,5 @@\n+#![allow(clippy::default_hash_types)]\n+\n use crate::reexport::*;\n use rustc::hir;\n use rustc::hir::*;"}, {"sha": "ababaad294d8f62e48b0daded3431ac2876bc5e7", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=07cb45bc85f983fb97880ab523afe32c903c4e0c", "patch": "@@ -2,7 +2,7 @@ use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n use rustc::hir;\n use rustc::hir::intravisit::{walk_expr, walk_fn, FnKind, NestedVisitorMap, Visitor};\n-use std::collections::HashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use syntax::ast;\n use syntax::source_map::Span;\n use syntax::symbol::LocalInternedString;\n@@ -31,7 +31,7 @@ declare_clippy_lint! {\n pub struct UnusedLabel;\n \n struct UnusedLabelVisitor<'a, 'tcx: 'a> {\n-    labels: HashMap<LocalInternedString, Span>,\n+    labels: FxHashMap<LocalInternedString, Span>,\n     cx: &'a LateContext<'a, 'tcx>,\n }\n \n@@ -57,7 +57,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedLabel {\n \n         let mut v = UnusedLabelVisitor {\n             cx,\n-            labels: HashMap::new(),\n+            labels: FxHashMap::default(),\n         };\n         walk_fn(&mut v, kind, decl, body.id(), span, fn_id);\n "}, {"sha": "541d5353daf03f86fdc321c01bb0f8c87c831b7c", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=07cb45bc85f983fb97880ab523afe32c903c4e0c", "patch": "@@ -8,8 +8,8 @@ use rustc::{declare_tool_lint, lint_array};\n use rustc::hir;\n use rustc::hir::{Expr, ExprKind, QPath, TyKind, Pat, PatKind, BindingAnnotation, StmtKind, DeclKind, Stmt};\n use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc_data_structures::fx::FxHashMap;\n use syntax::ast::{Attribute, LitKind, DUMMY_NODE_ID};\n-use std::collections::HashMap;\n use crate::utils::get_attr;\n \n /// **What it does:** Generates clippy code that detects the offending pattern\n@@ -154,7 +154,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n impl PrintVisitor {\n     fn new(s: &'static str) -> Self {\n         Self {\n-            ids: HashMap::new(),\n+            ids: FxHashMap::default(),\n             current: s.to_owned(),\n         }\n     }\n@@ -186,7 +186,7 @@ impl PrintVisitor {\n struct PrintVisitor {\n     /// Fields are the current index that needs to be appended to pattern\n     /// binding names\n-    ids: HashMap<&'static str, usize>,\n+    ids: FxHashMap<&'static str, usize>,\n     /// the name that needs to be destructured\n     current: String,\n }"}, {"sha": "f3b915c7ce1ea27d8e3da5f1af45f78d5c735ceb", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=07cb45bc85f983fb97880ab523afe32c903c4e0c", "patch": "@@ -3,12 +3,11 @@ use rustc::{declare_tool_lint, lint_array};\n use rustc::hir::*;\n use rustc::hir;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use crate::utils::{match_qpath, paths, span_lint, span_lint_and_sugg};\n use syntax::symbol::LocalInternedString;\n use syntax::ast::{Crate as AstCrate, Ident, ItemKind, Name};\n use syntax::source_map::Span;\n-use std::collections::{HashMap, HashSet};\n \n \n /// **What it does:** Checks for various things we like to keep tidy in clippy.\n@@ -114,12 +113,10 @@ impl EarlyLintPass for Clippy {\n     }\n }\n \n-\n-\n #[derive(Clone, Debug, Default)]\n pub struct LintWithoutLintPass {\n-    declared_lints: HashMap<Name, Span>,\n-    registered_lints: HashSet<Name>,\n+    declared_lints: FxHashMap<Name, Span>,\n+    registered_lints: FxHashSet<Name>,\n }\n \n \n@@ -129,7 +126,6 @@ impl LintPass for LintWithoutLintPass {\n     }\n }\n \n-\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if let hir::ItemKind::Static(ref ty, MutImmutable, body_id) = item.node {\n@@ -202,7 +198,7 @@ fn is_lint_array_type(ty: &Ty) -> bool {\n }\n \n struct LintCollector<'a, 'tcx: 'a> {\n-    output: &'a mut HashSet<Name>,\n+    output: &'a mut FxHashSet<Name>,\n     cx: &'a LateContext<'a, 'tcx>,\n }\n \n@@ -221,8 +217,6 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for LintCollector<'a, 'tcx> {\n     }\n }\n \n-\n-\n pub struct DefaultHashTypes {\n     map: FxHashMap<String, String>,\n }"}, {"sha": "0dea0462d89ce7a1cb1af30721ff69daa717a556", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=07cb45bc85f983fb97880ab523afe32c903c4e0c", "patch": "@@ -42,8 +42,8 @@ pub const IO_READ: [&str; 3] = [\"std\", \"io\", \"Read\"];\n pub const IO_WRITE: [&str; 3] = [\"std\", \"io\", \"Write\"];\n pub const ITERATOR: [&str; 4] = [\"core\", \"iter\", \"iterator\", \"Iterator\"];\n pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"LinkedList\"];\n-pub const LINT: [&str; 2] = [\"lint\", \"Lint\"];\n-pub const LINT_ARRAY: [&str; 2] = [\"lint\", \"LintArray\"];\n+pub const LINT: [&str; 3] = [\"rustc\", \"lint\", \"Lint\"];\n+pub const LINT_ARRAY: [&str; 3] = [\"rustc\", \"lint\", \"LintArray\"];\n pub const MEM_FORGET: [&str; 3] = [\"core\", \"mem\", \"forget\"];\n pub const MEM_UNINIT: [&str; 3] = [\"core\", \"mem\", \"uninitialized\"];\n pub const MEM_ZEROED: [&str; 3] = [\"core\", \"mem\", \"zeroed\"];"}, {"sha": "ac18d04e454a5971b818232fe3aededb50b1cd85", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cb45bc85f983fb97880ab523afe32c903c4e0c/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=07cb45bc85f983fb97880ab523afe32c903c4e0c", "patch": "@@ -6,14 +6,14 @@ use rustc::middle::expr_use_visitor::*;\n use rustc::middle::mem_categorization::cmt_;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::ty;\n-use std::collections::HashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use syntax::ast::NodeId;\n use syntax::source_map::Span;\n \n /// Returns a set of mutated local variable ids or None if mutations could not be determined.\n-pub fn mutated_variables<'a, 'tcx: 'a>(expr: &'tcx Expr, cx: &'a LateContext<'a, 'tcx>) -> Option<HashSet<NodeId>> {\n+pub fn mutated_variables<'a, 'tcx: 'a>(expr: &'tcx Expr, cx: &'a LateContext<'a, 'tcx>) -> Option<FxHashSet<NodeId>> {\n     let mut delegate = MutVarsDelegate {\n-        used_mutably: HashSet::new(),\n+        used_mutably: FxHashSet::default(),\n         skip: false,\n     };\n     let def_id = def_id::DefId::local(expr.hir_id.owner);\n@@ -39,7 +39,7 @@ pub fn is_potentially_mutated<'a, 'tcx: 'a>(\n }\n \n struct MutVarsDelegate {\n-    used_mutably: HashSet<NodeId>,\n+    used_mutably: FxHashSet<NodeId>,\n     skip: bool,\n }\n "}]}