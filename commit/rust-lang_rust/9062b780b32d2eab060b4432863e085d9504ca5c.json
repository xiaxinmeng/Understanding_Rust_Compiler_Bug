{"sha": "9062b780b32d2eab060b4432863e085d9504ca5c", "node_id": "C_kwDOAAsO6NoAKDkwNjJiNzgwYjMyZDJlYWIwNjBiNDQzMjg2M2UwODVkOTUwNGNhNWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-21T19:58:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-21T19:58:39Z"}, "message": "Auto merge of #101558 - JhonnyBillM:session-diagnostic-to-diagnostic-handler-refactor, r=davidtwco\n\nMove and rename `SessionDiagnostic` & `SessionSubdiagnostic` traits and macros\n\nAfter PR #101434, we want to:\n- [x] Move `SessionDiagnostic` to `rustc_errors`.\n- [x] Add `emit_` methods that accept `impl SessionDiagnostic` to `Handler`.\n- [x] _(optional)_ Rename trait `SessionDiagnostic` to `DiagnosticHandler`.\n- [x] _(optional)_ Rename macro `SessionDiagnostic` to `DiagnosticHandler`.\n- [x] Update Rustc Dev Guide and Docs to reflect these changes. https://github.com/rust-lang/rustc-dev-guide/pull/1460\n\nNow I am having build issues getting the compiler to build when trying to rename the macro.\n\n<details>\n  <summary>See diagnostics errors and context when building.</summary>\n\n```\nerror: diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\n  --> compiler/rustc_attr/src/session_diagnostics.rs:13:10\n   |\n13 |   #[derive(DiagnosticHandler)]\n   |            ^^^^^^^^^^^^^^^^^ in this derive macro expansion\n   |\n  ::: /Users/jhonny/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.6/src/macros.rs:94:9\n   |\n94 | /         pub fn $derives(\n95 | |             i: $crate::macros::TokenStream\n96 | |         ) -> $crate::macros::TokenStream {\n   | |________________________________________- in this expansion of `#[derive(DiagnosticHandler)]`\n   |\nnote: the lint level is defined here\n  --> compiler/rustc_attr/src/lib.rs:10:9\n   |\n10 | #![deny(rustc::diagnostic_outside_of_impl)]\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n```\n\nAnd also this one:\n\n```\nerror: diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\n   --> compiler/rustc_attr/src/session_diagnostics.rs:213:32\n    |\n213 |         let mut diag = handler.struct_span_err_with_code(\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^\n```\n\n> **Note**\n> Can't find where this message is coming from, because you can see in [this experimental branch](https://github.com/JhonnyBillM/rust/tree/experimental/trying-to-rename-session-diagnostic-macro)  that I updated all errors and diags to say:\n> error: diagnostics should only be created in **`DiagnosticHandler`**/`AddSubdiagnostic` impls\n> and not:\n> error: diagnostics should only be created in **`SessionDiagnostic`**/`AddSubdiagnostic` impls\n\n</details>\n\nI tried building the compiler in different ways (playing with the stages etc), but nothing worked.\n\n## Question\n\n**Do we need to build or do something different when renaming a macro and identifiers?**\n\nFor context, see experimental commit https://github.com/JhonnyBillM/rust/commit/f2193a98b44db3f2af77a878824b152cdf0d34a5 where the macro and symbols are renamed, but it doesn't compile.", "tree": {"sha": "5b2ed54bf5b205ef5a580b3afa387f5a7532d209", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b2ed54bf5b205ef5a580b3afa387f5a7532d209"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9062b780b32d2eab060b4432863e085d9504ca5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9062b780b32d2eab060b4432863e085d9504ca5c", "html_url": "https://github.com/rust-lang/rust/commit/9062b780b32d2eab060b4432863e085d9504ca5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9062b780b32d2eab060b4432863e085d9504ca5c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db4b4d3becf257e7b1c051540fc7e317958d8d2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/db4b4d3becf257e7b1c051540fc7e317958d8d2d", "html_url": "https://github.com/rust-lang/rust/commit/db4b4d3becf257e7b1c051540fc7e317958d8d2d"}, {"sha": "e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "url": "https://api.github.com/repos/rust-lang/rust/commits/e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "html_url": "https://github.com/rust-lang/rust/commit/e52e2344dc574922ce4f8ddfd508f8bfdec3f404"}], "stats": {"total": 1625, "additions": 833, "deletions": 792}, "files": [{"sha": "1ad5fa21d8530515976b9a4c60131fd19c28d125", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,8 +1,8 @@\n-use rustc_errors::{fluent, AddSubdiagnostic, Applicability, Diagnostic, DiagnosticArgFromDisplay};\n-use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_errors::{fluent, AddToDiagnostic, Applicability, Diagnostic, DiagnosticArgFromDisplay};\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_span::{symbol::Ident, Span, Symbol};\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::generic_type_with_parentheses, code = \"E0214\")]\n pub struct GenericTypeWithParentheses {\n     #[primary_span]\n@@ -18,7 +18,7 @@ pub struct UseAngleBrackets {\n     pub close_param: Span,\n }\n \n-impl AddSubdiagnostic for UseAngleBrackets {\n+impl AddToDiagnostic for UseAngleBrackets {\n     fn add_to_diagnostic(self, diag: &mut Diagnostic) {\n         diag.multipart_suggestion(\n             fluent::ast_lowering::use_angle_brackets,\n@@ -28,7 +28,7 @@ impl AddSubdiagnostic for UseAngleBrackets {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[help]\n #[diag(ast_lowering::invalid_abi, code = \"E0703\")]\n pub struct InvalidAbi {\n@@ -39,7 +39,7 @@ pub struct InvalidAbi {\n     pub valid_abis: String,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::assoc_ty_parentheses)]\n pub struct AssocTyParentheses {\n     #[primary_span]\n@@ -54,7 +54,7 @@ pub enum AssocTyParenthesesSub {\n     NotEmpty { open_param: Span, close_param: Span },\n }\n \n-impl AddSubdiagnostic for AssocTyParenthesesSub {\n+impl AddToDiagnostic for AssocTyParenthesesSub {\n     fn add_to_diagnostic(self, diag: &mut Diagnostic) {\n         match self {\n             Self::Empty { parentheses_span } => diag.multipart_suggestion(\n@@ -71,38 +71,38 @@ impl AddSubdiagnostic for AssocTyParenthesesSub {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_lowering::misplaced_impl_trait, code = \"E0562\")]\n pub struct MisplacedImplTrait<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub position: DiagnosticArgFromDisplay<'a>,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::rustc_box_attribute_error)]\n pub struct RustcBoxAttributeError {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::underscore_expr_lhs_assign)]\n pub struct UnderscoreExprLhsAssign {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::base_expression_double_dot)]\n pub struct BaseExpressionDoubleDot {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::await_only_in_async_fn_and_blocks, code = \"E0728\")]\n pub struct AwaitOnlyInAsyncFnAndBlocks {\n     #[primary_span]\n@@ -112,58 +112,58 @@ pub struct AwaitOnlyInAsyncFnAndBlocks {\n     pub item_span: Option<Span>,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::generator_too_many_parameters, code = \"E0628\")]\n pub struct GeneratorTooManyParameters {\n     #[primary_span]\n     pub fn_decl_span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::closure_cannot_be_static, code = \"E0697\")]\n pub struct ClosureCannotBeStatic {\n     #[primary_span]\n     pub fn_decl_span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[help]\n #[diag(ast_lowering::async_non_move_closure_not_supported, code = \"E0708\")]\n pub struct AsyncNonMoveClosureNotSupported {\n     #[primary_span]\n     pub fn_decl_span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::functional_record_update_destructuring_assignment)]\n pub struct FunctionalRecordUpdateDestructuringAssignemnt {\n     #[primary_span]\n     #[suggestion(code = \"\", applicability = \"machine-applicable\")]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::async_generators_not_supported, code = \"E0727\")]\n pub struct AsyncGeneratorsNotSupported {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::inline_asm_unsupported_target, code = \"E0472\")]\n pub struct InlineAsmUnsupportedTarget {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::att_syntax_only_x86)]\n pub struct AttSyntaxOnlyX86 {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::abi_specified_multiple_times)]\n pub struct AbiSpecifiedMultipleTimes {\n     #[primary_span]\n@@ -175,14 +175,14 @@ pub struct AbiSpecifiedMultipleTimes {\n     pub equivalent: Option<()>,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::clobber_abi_not_supported)]\n pub struct ClobberAbiNotSupported {\n     #[primary_span]\n     pub abi_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[note]\n #[diag(ast_lowering::invalid_abi_clobber_abi)]\n pub struct InvalidAbiClobberAbi {\n@@ -191,7 +191,7 @@ pub struct InvalidAbiClobberAbi {\n     pub supported_abis: String,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::invalid_register)]\n pub struct InvalidRegister<'a> {\n     #[primary_span]\n@@ -200,7 +200,7 @@ pub struct InvalidRegister<'a> {\n     pub error: &'a str,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::invalid_register_class)]\n pub struct InvalidRegisterClass<'a> {\n     #[primary_span]\n@@ -209,7 +209,7 @@ pub struct InvalidRegisterClass<'a> {\n     pub error: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_lowering::invalid_asm_template_modifier_reg_class)]\n pub struct InvalidAsmTemplateModifierRegClass {\n     #[primary_span]\n@@ -221,15 +221,15 @@ pub struct InvalidAsmTemplateModifierRegClass {\n     pub sub: InvalidAsmTemplateModifierRegClassSub,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum InvalidAsmTemplateModifierRegClassSub {\n     #[note(ast_lowering::support_modifiers)]\n     SupportModifier { class_name: Symbol, modifiers: String },\n     #[note(ast_lowering::does_not_support_modifiers)]\n     DoesNotSupportModifier { class_name: Symbol },\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::invalid_asm_template_modifier_const)]\n pub struct InvalidAsmTemplateModifierConst {\n     #[primary_span]\n@@ -239,7 +239,7 @@ pub struct InvalidAsmTemplateModifierConst {\n     pub op_span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::invalid_asm_template_modifier_sym)]\n pub struct InvalidAsmTemplateModifierSym {\n     #[primary_span]\n@@ -249,15 +249,15 @@ pub struct InvalidAsmTemplateModifierSym {\n     pub op_span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::register_class_only_clobber)]\n pub struct RegisterClassOnlyClobber {\n     #[primary_span]\n     pub op_span: Span,\n     pub reg_class_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::register_conflict)]\n pub struct RegisterConflict<'a> {\n     #[primary_span]\n@@ -271,7 +271,7 @@ pub struct RegisterConflict<'a> {\n     pub in_out: Option<Span>,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[help]\n #[diag(ast_lowering::sub_tuple_binding)]\n pub struct SubTupleBinding<'a> {\n@@ -288,7 +288,7 @@ pub struct SubTupleBinding<'a> {\n     pub ctx: &'a str,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::extra_double_dot)]\n pub struct ExtraDoubleDot<'a> {\n     #[primary_span]\n@@ -299,43 +299,43 @@ pub struct ExtraDoubleDot<'a> {\n     pub ctx: &'a str,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[note]\n #[diag(ast_lowering::misplaced_double_dot)]\n pub struct MisplacedDoubleDot {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::misplaced_relax_trait_bound)]\n pub struct MisplacedRelaxTraitBound {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::not_supported_for_lifetime_binder_async_closure)]\n pub struct NotSupportedForLifetimeBinderAsyncClosure {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::arbitrary_expression_in_pattern)]\n pub struct ArbitraryExpressionInPattern {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::inclusive_range_with_no_end)]\n pub struct InclusiveRangeWithNoEnd {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::trait_fn_async, code = \"E0706\")]\n #[note]\n #[note(ast_lowering::note2)]"}, {"sha": "035f0ce1cbc42c758406e121d7147ec25c8f97bd", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,12 +1,12 @@\n //! Errors emitted by ast_passes.\n \n-use rustc_errors::{fluent, AddSubdiagnostic, Applicability, Diagnostic};\n-use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_errors::{fluent, AddToDiagnostic, Applicability, Diagnostic};\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_span::{Span, Symbol};\n \n use crate::ast_validation::ForbiddenLetReason;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::forbidden_let)]\n #[note]\n pub struct ForbiddenLet {\n@@ -16,7 +16,7 @@ pub struct ForbiddenLet {\n     pub(crate) reason: ForbiddenLetReason,\n }\n \n-impl AddSubdiagnostic for ForbiddenLetReason {\n+impl AddToDiagnostic for ForbiddenLetReason {\n     fn add_to_diagnostic(self, diag: &mut Diagnostic) {\n         match self {\n             Self::GenericForbidden => {}\n@@ -30,37 +30,37 @@ impl AddSubdiagnostic for ForbiddenLetReason {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::forbidden_let_stable)]\n #[note]\n pub struct ForbiddenLetStable {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::forbidden_assoc_constraint)]\n pub struct ForbiddenAssocConstraint {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::keyword_lifetime)]\n pub struct KeywordLifetime {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::invalid_label)]\n pub struct InvalidLabel {\n     #[primary_span]\n     pub span: Span,\n     pub name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::invalid_visibility, code = \"E0449\")]\n pub struct InvalidVisibility {\n     #[primary_span]\n@@ -71,74 +71,74 @@ pub struct InvalidVisibility {\n     pub note: Option<InvalidVisibilityNote>,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum InvalidVisibilityNote {\n     #[note(ast_passes::individual_impl_items)]\n     IndividualImplItems,\n     #[note(ast_passes::individual_foreign_items)]\n     IndividualForeignItems,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::trait_fn_const, code = \"E0379\")]\n pub struct TraitFnConst {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::forbidden_lifetime_bound)]\n pub struct ForbiddenLifetimeBound {\n     #[primary_span]\n     pub spans: Vec<Span>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::forbidden_non_lifetime_param)]\n pub struct ForbiddenNonLifetimeParam {\n     #[primary_span]\n     pub spans: Vec<Span>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::fn_param_too_many)]\n pub struct FnParamTooMany {\n     #[primary_span]\n     pub span: Span,\n     pub max_num_args: usize,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::fn_param_c_var_args_only)]\n pub struct FnParamCVarArgsOnly {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::fn_param_c_var_args_not_last)]\n pub struct FnParamCVarArgsNotLast {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::fn_param_doc_comment)]\n pub struct FnParamDocComment {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::fn_param_forbidden_attr)]\n pub struct FnParamForbiddenAttr {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::fn_param_forbidden_self)]\n #[note]\n pub struct FnParamForbiddenSelf {\n@@ -147,7 +147,7 @@ pub struct FnParamForbiddenSelf {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::forbidden_default)]\n pub struct ForbiddenDefault {\n     #[primary_span]\n@@ -156,7 +156,7 @@ pub struct ForbiddenDefault {\n     pub def_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::assoc_const_without_body)]\n pub struct AssocConstWithoutBody {\n     #[primary_span]\n@@ -165,7 +165,7 @@ pub struct AssocConstWithoutBody {\n     pub replace_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::assoc_fn_without_body)]\n pub struct AssocFnWithoutBody {\n     #[primary_span]\n@@ -174,7 +174,7 @@ pub struct AssocFnWithoutBody {\n     pub replace_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::assoc_type_without_body)]\n pub struct AssocTypeWithoutBody {\n     #[primary_span]\n@@ -183,7 +183,7 @@ pub struct AssocTypeWithoutBody {\n     pub replace_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::const_without_body)]\n pub struct ConstWithoutBody {\n     #[primary_span]\n@@ -192,7 +192,7 @@ pub struct ConstWithoutBody {\n     pub replace_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::static_without_body)]\n pub struct StaticWithoutBody {\n     #[primary_span]\n@@ -201,7 +201,7 @@ pub struct StaticWithoutBody {\n     pub replace_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::ty_alias_without_body)]\n pub struct TyAliasWithoutBody {\n     #[primary_span]\n@@ -210,7 +210,7 @@ pub struct TyAliasWithoutBody {\n     pub replace_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::fn_without_body)]\n pub struct FnWithoutBody {\n     #[primary_span]\n@@ -227,7 +227,7 @@ pub struct ExternBlockSuggestion {\n     pub abi: Option<Symbol>,\n }\n \n-impl AddSubdiagnostic for ExternBlockSuggestion {\n+impl AddToDiagnostic for ExternBlockSuggestion {\n     fn add_to_diagnostic(self, diag: &mut Diagnostic) {\n         let start_suggestion = if let Some(abi) = self.abi {\n             format!(\"extern \\\"{}\\\" {{\", abi)"}, {"sha": "d3e9a16a9a809bc79f79d1aea659f05ff0e982e6", "filename": "compiler/rustc_attr/src/session_diagnostics.rs", "status": "modified", "additions": 35, "deletions": 36, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -2,22 +2,21 @@ use std::num::IntErrorKind;\n \n use rustc_ast as ast;\n use rustc_errors::{\n-    error_code, fluent, Applicability, DiagnosticBuilder, ErrorGuaranteed, Handler,\n+    error_code, fluent, Applicability, DiagnosticBuilder, ErrorGuaranteed, Handler, IntoDiagnostic,\n };\n-use rustc_macros::SessionDiagnostic;\n-use rustc_session::SessionDiagnostic;\n+use rustc_macros::Diagnostic;\n use rustc_span::{Span, Symbol};\n \n use crate::UnsupportedLiteralReason;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::expected_one_cfg_pattern, code = \"E0536\")]\n pub(crate) struct ExpectedOneCfgPattern {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::invalid_predicate, code = \"E0537\")]\n pub(crate) struct InvalidPredicate {\n     #[primary_span]\n@@ -26,7 +25,7 @@ pub(crate) struct InvalidPredicate {\n     pub predicate: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::multiple_item, code = \"E0538\")]\n pub(crate) struct MultipleItem {\n     #[primary_span]\n@@ -35,7 +34,7 @@ pub(crate) struct MultipleItem {\n     pub item: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::incorrect_meta_item, code = \"E0539\")]\n pub(crate) struct IncorrectMetaItem {\n     #[primary_span]\n@@ -50,7 +49,7 @@ pub(crate) struct UnknownMetaItem<'a> {\n }\n \n // Manual implementation to be able to format `expected` items correctly.\n-impl<'a> SessionDiagnostic<'a> for UnknownMetaItem<'_> {\n+impl<'a> IntoDiagnostic<'a> for UnknownMetaItem<'_> {\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let expected = self.expected.iter().map(|name| format!(\"`{}`\", name)).collect::<Vec<_>>();\n         let mut diag = handler.struct_span_err_with_code(\n@@ -65,28 +64,28 @@ impl<'a> SessionDiagnostic<'a> for UnknownMetaItem<'_> {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::missing_since, code = \"E0542\")]\n pub(crate) struct MissingSince {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::missing_note, code = \"E0543\")]\n pub(crate) struct MissingNote {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::multiple_stability_levels, code = \"E0544\")]\n pub(crate) struct MultipleStabilityLevels {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::invalid_issue_string, code = \"E0545\")]\n pub(crate) struct InvalidIssueString {\n     #[primary_span]\n@@ -98,7 +97,7 @@ pub(crate) struct InvalidIssueString {\n \n // The error kinds of `IntErrorKind` are duplicated here in order to allow the messages to be\n // translatable.\n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub(crate) enum InvalidIssueStringCause {\n     #[label(attr::must_not_be_zero)]\n     MustNotBeZero {\n@@ -144,21 +143,21 @@ impl InvalidIssueStringCause {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::missing_feature, code = \"E0546\")]\n pub(crate) struct MissingFeature {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::non_ident_feature, code = \"E0546\")]\n pub(crate) struct NonIdentFeature {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::missing_issue, code = \"E0547\")]\n pub(crate) struct MissingIssue {\n     #[primary_span]\n@@ -167,7 +166,7 @@ pub(crate) struct MissingIssue {\n \n // FIXME: This diagnostic is identical to `IncorrectMetaItem`, barring the error code. Consider\n // changing this to `IncorrectMetaItem`. See #51489.\n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::incorrect_meta_item, code = \"E0551\")]\n pub(crate) struct IncorrectMetaItem2 {\n     #[primary_span]\n@@ -176,14 +175,14 @@ pub(crate) struct IncorrectMetaItem2 {\n \n // FIXME: Why is this the same error code as `InvalidReprHintNoParen` and `InvalidReprHintNoValue`?\n // It is more similar to `IncorrectReprFormatGeneric`.\n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::incorrect_repr_format_packed_one_or_zero_arg, code = \"E0552\")]\n pub(crate) struct IncorrectReprFormatPackedOneOrZeroArg {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::invalid_repr_hint_no_paren, code = \"E0552\")]\n pub(crate) struct InvalidReprHintNoParen {\n     #[primary_span]\n@@ -192,7 +191,7 @@ pub(crate) struct InvalidReprHintNoParen {\n     pub name: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::invalid_repr_hint_no_value, code = \"E0552\")]\n pub(crate) struct InvalidReprHintNoValue {\n     #[primary_span]\n@@ -209,7 +208,7 @@ pub(crate) struct UnsupportedLiteral {\n     pub start_point_span: Span,\n }\n \n-impl<'a> SessionDiagnostic<'a> for UnsupportedLiteral {\n+impl<'a> IntoDiagnostic<'a> for UnsupportedLiteral {\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let mut diag = handler.struct_span_err_with_code(\n             self.span,\n@@ -237,15 +236,15 @@ impl<'a> SessionDiagnostic<'a> for UnsupportedLiteral {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::invalid_repr_align_need_arg, code = \"E0589\")]\n pub(crate) struct InvalidReprAlignNeedArg {\n     #[primary_span]\n     #[suggestion(code = \"align(...)\", applicability = \"has-placeholders\")]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::invalid_repr_generic, code = \"E0589\")]\n pub(crate) struct InvalidReprGeneric<'a> {\n     #[primary_span]\n@@ -255,14 +254,14 @@ pub(crate) struct InvalidReprGeneric<'a> {\n     pub error_part: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::incorrect_repr_format_align_one_arg, code = \"E0693\")]\n pub(crate) struct IncorrectReprFormatAlignOneArg {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::incorrect_repr_format_generic, code = \"E0693\")]\n pub(crate) struct IncorrectReprFormatGeneric<'a> {\n     #[primary_span]\n@@ -274,7 +273,7 @@ pub(crate) struct IncorrectReprFormatGeneric<'a> {\n     pub cause: Option<IncorrectReprFormatGenericCause<'a>>,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub(crate) enum IncorrectReprFormatGenericCause<'a> {\n     #[suggestion(attr::suggestion, code = \"{name}({int})\", applicability = \"machine-applicable\")]\n     Int {\n@@ -317,28 +316,28 @@ impl<'a> IncorrectReprFormatGenericCause<'a> {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::rustc_promotable_pairing, code = \"E0717\")]\n pub(crate) struct RustcPromotablePairing {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::rustc_allowed_unstable_pairing, code = \"E0789\")]\n pub(crate) struct RustcAllowedUnstablePairing {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::cfg_predicate_identifier)]\n pub(crate) struct CfgPredicateIdentifier {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::deprecated_item_suggestion)]\n pub(crate) struct DeprecatedItemSuggestion {\n     #[primary_span]\n@@ -351,21 +350,21 @@ pub(crate) struct DeprecatedItemSuggestion {\n     pub details: (),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::expected_single_version_literal)]\n pub(crate) struct ExpectedSingleVersionLiteral {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::expected_version_literal)]\n pub(crate) struct ExpectedVersionLiteral {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::expects_feature_list)]\n pub(crate) struct ExpectsFeatureList {\n     #[primary_span]\n@@ -374,7 +373,7 @@ pub(crate) struct ExpectsFeatureList {\n     pub name: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::expects_features)]\n pub(crate) struct ExpectsFeatures {\n     #[primary_span]\n@@ -383,14 +382,14 @@ pub(crate) struct ExpectsFeatures {\n     pub name: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::soft_no_args)]\n pub(crate) struct SoftNoArgs {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(attr::unknown_version_literal)]\n pub(crate) struct UnknownVersionLiteral {\n     #[primary_span]"}, {"sha": "9f19453a1a658717b41368436b21710530167fe0", "filename": "compiler/rustc_borrowck/src/session_diagnostics.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,11 +1,11 @@\n use rustc_errors::{IntoDiagnosticArg, MultiSpan};\n-use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_span::Span;\n \n use crate::diagnostics::RegionName;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(borrowck::move_unsized, code = \"E0161\")]\n pub(crate) struct MoveUnsized<'tcx> {\n     pub ty: Ty<'tcx>,\n@@ -14,7 +14,7 @@ pub(crate) struct MoveUnsized<'tcx> {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(borrowck::higher_ranked_lifetime_error)]\n pub(crate) struct HigherRankedLifetimeError {\n     #[subdiagnostic]\n@@ -23,22 +23,22 @@ pub(crate) struct HigherRankedLifetimeError {\n     pub span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub(crate) enum HigherRankedErrorCause {\n     #[note(borrowck::could_not_prove)]\n     CouldNotProve { predicate: String },\n     #[note(borrowck::could_not_normalize)]\n     CouldNotNormalize { value: String },\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(borrowck::higher_ranked_subtype_error)]\n pub(crate) struct HigherRankedSubtypeError {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(borrowck::generic_does_not_live_long_enough)]\n pub(crate) struct GenericDoesNotLiveLongEnough {\n     pub kind: String,\n@@ -53,15 +53,15 @@ pub(crate) struct VarNeedNotMut {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(borrowck::const_not_used_in_type_alias)]\n pub(crate) struct ConstNotUsedTraitAlias {\n     pub ct: String,\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(borrowck::var_cannot_escape_closure)]\n #[note]\n #[note(borrowck::cannot_escape)]\n@@ -72,7 +72,7 @@ pub(crate) struct FnMutError {\n     pub ty_err: FnMutReturnTypeErr,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub(crate) enum VarHereDenote {\n     #[label(borrowck::var_here_captured)]\n     Captured {\n@@ -91,7 +91,7 @@ pub(crate) enum VarHereDenote {\n     },\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub(crate) enum FnMutReturnTypeErr {\n     #[label(borrowck::returned_closure_escaped)]\n     ReturnClosure {\n@@ -110,14 +110,14 @@ pub(crate) enum FnMutReturnTypeErr {\n     },\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(borrowck::lifetime_constraints_error)]\n pub(crate) struct LifetimeOutliveErr {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub(crate) enum LifetimeReturnCategoryErr<'a> {\n     #[label(borrowck::returned_lifetime_wrong)]\n     WrongReturn {\n@@ -149,7 +149,7 @@ impl IntoDiagnosticArg for RegionName {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub(crate) enum RequireStaticErr {\n     #[note(borrowck::used_impl_require_static)]\n     UsedImpl {"}, {"sha": "46b54eae384990e8a3792c82ca5cca5f85867289", "filename": "compiler/rustc_builtin_macros/src/cfg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -8,7 +8,7 @@ use rustc_ast::tokenstream::TokenStream;\n use rustc_attr as attr;\n use rustc_errors::PResult;\n use rustc_expand::base::{self, *};\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::Diagnostic;\n use rustc_span::Span;\n \n pub fn expand_cfg(\n@@ -35,15 +35,15 @@ pub fn expand_cfg(\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(builtin_macros::requires_cfg_pattern)]\n struct RequiresCfgPattern {\n     #[primary_span]\n     #[label]\n     span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(builtin_macros::expected_one_cfg_pattern)]\n struct OneCfgPattern {\n     #[primary_span]"}, {"sha": "c6cb7a8b961ffbe9d7ea0742173ac0d465d85430", "filename": "compiler/rustc_const_eval/src/errors.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,8 +1,8 @@\n use rustc_hir::ConstContext;\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::Diagnostic;\n use rustc_span::Span;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(const_eval::unstable_in_stable)]\n pub(crate) struct UnstableInStable {\n     pub gate: String,\n@@ -21,14 +21,14 @@ pub(crate) struct UnstableInStable {\n     pub attr_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(const_eval::thread_local_access, code = \"E0625\")]\n pub(crate) struct NonConstOpErr {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(const_eval::static_access, code = \"E0013\")]\n #[help]\n pub(crate) struct StaticAccessErr {\n@@ -40,7 +40,7 @@ pub(crate) struct StaticAccessErr {\n     pub teach: Option<()>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(const_eval::raw_ptr_to_int)]\n #[note]\n #[note(const_eval::note2)]\n@@ -49,70 +49,70 @@ pub(crate) struct RawPtrToIntErr {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(const_eval::raw_ptr_comparison)]\n #[note]\n pub(crate) struct RawPtrComparisonErr {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(const_eval::panic_non_str)]\n pub(crate) struct PanicNonStrErr {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(const_eval::mut_deref, code = \"E0658\")]\n pub(crate) struct MutDerefErr {\n     #[primary_span]\n     pub span: Span,\n     pub kind: ConstContext,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(const_eval::transient_mut_borrow, code = \"E0658\")]\n pub(crate) struct TransientMutBorrowErr {\n     #[primary_span]\n     pub span: Span,\n     pub kind: ConstContext,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(const_eval::transient_mut_borrow_raw, code = \"E0658\")]\n pub(crate) struct TransientMutBorrowErrRaw {\n     #[primary_span]\n     pub span: Span,\n     pub kind: ConstContext,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(const_eval::max_num_nodes_in_const)]\n pub(crate) struct MaxNumNodesInConstErr {\n     #[primary_span]\n     pub span: Span,\n     pub global_const_id: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(const_eval::unallowed_fn_pointer_call)]\n pub(crate) struct UnallowedFnPointerCall {\n     #[primary_span]\n     pub span: Span,\n     pub kind: ConstContext,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(const_eval::unstable_const_fn)]\n pub(crate) struct UnstableConstFn {\n     #[primary_span]\n     pub span: Span,\n     pub def_path: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(const_eval::unallowed_mutable_refs, code = \"E0764\")]\n pub(crate) struct UnallowedMutableRefs {\n     #[primary_span]\n@@ -122,7 +122,7 @@ pub(crate) struct UnallowedMutableRefs {\n     pub teach: Option<()>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(const_eval::unallowed_mutable_refs_raw, code = \"E0764\")]\n pub(crate) struct UnallowedMutableRefsRaw {\n     #[primary_span]\n@@ -131,15 +131,15 @@ pub(crate) struct UnallowedMutableRefsRaw {\n     #[note(const_eval::teach_note)]\n     pub teach: Option<()>,\n }\n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(const_eval::non_const_fmt_macro_call, code = \"E0015\")]\n pub(crate) struct NonConstFmtMacroCall {\n     #[primary_span]\n     pub span: Span,\n     pub kind: ConstContext,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(const_eval::non_const_fn_call, code = \"E0015\")]\n pub(crate) struct NonConstFnCall {\n     #[primary_span]\n@@ -148,15 +148,15 @@ pub(crate) struct NonConstFnCall {\n     pub kind: ConstContext,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(const_eval::unallowed_op_in_const_context)]\n pub(crate) struct UnallowedOpInConstContext {\n     #[primary_span]\n     pub span: Span,\n     pub msg: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(const_eval::unallowed_heap_allocations, code = \"E0010\")]\n pub(crate) struct UnallowedHeapAllocations {\n     #[primary_span]\n@@ -167,15 +167,15 @@ pub(crate) struct UnallowedHeapAllocations {\n     pub teach: Option<()>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(const_eval::unallowed_inline_asm, code = \"E0015\")]\n pub(crate) struct UnallowedInlineAsm {\n     #[primary_span]\n     pub span: Span,\n     pub kind: ConstContext,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(const_eval::interior_mutable_data_refer, code = \"E0492\")]\n pub(crate) struct InteriorMutableDataRefer {\n     #[primary_span]\n@@ -188,7 +188,7 @@ pub(crate) struct InteriorMutableDataRefer {\n     pub teach: Option<()>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(const_eval::interior_mutability_borrow)]\n pub(crate) struct InteriorMutabilityBorrow {\n     #[primary_span]"}, {"sha": "289baf17773731e0891dc26f99e825987c887d21", "filename": "compiler/rustc_driver/src/session_diagnostics.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_driver%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_driver%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fsession_diagnostics.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,38 +1,38 @@\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::Diagnostic;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(driver::rlink_unable_to_read)]\n pub(crate) struct RlinkUnableToRead {\n     pub err: std::io::Error,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(driver::rlink_wrong_file_type)]\n pub(crate) struct RLinkWrongFileType;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(driver::rlink_empty_version_number)]\n pub(crate) struct RLinkEmptyVersionNumber;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(driver::rlink_encoding_version_mismatch)]\n pub(crate) struct RLinkEncodingVersionMismatch {\n     pub version_array: String,\n     pub rlink_version: u32,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(driver::rlink_rustc_version_mismatch)]\n pub(crate) struct RLinkRustcVersionMismatch<'a> {\n     pub rustc_version: String,\n     pub current_version: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(driver::rlink_no_a_file)]\n pub(crate) struct RlinkNotAFile;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(driver::unpretty_dump_fail)]\n pub(crate) struct UnprettyDumpFail {\n     pub path: String,"}, {"sha": "80b0b1a8904a1d003ab04315ee305f36358ff543", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -51,7 +51,7 @@ lint_non_existant_doc_keyword = found non-existing keyword `{$keyword}` used in\n     .help = only existing keywords are allowed in core/std\n \n lint_diag_out_of_impl =\n-    diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\n+    diagnostics should only be created in `IntoDiagnostic`/`AddToDiagnostic` impls\n \n lint_untranslatable_diag = diagnostics should be created using translatable messages\n "}, {"sha": "ff33ae7e8f224edd0971202b11807c08a75422cf", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -268,14 +268,14 @@ type FluentId = Cow<'static, str>;\n /// Translatable messages for subdiagnostics are typically attributes attached to a larger Fluent\n /// message so messages of this type must be combined with a `DiagnosticMessage` (using\n /// `DiagnosticMessage::with_subdiagnostic_message`) before rendering. However, subdiagnostics from\n-/// the `SessionSubdiagnostic` derive refer to Fluent identifiers directly.\n+/// the `Subdiagnostic` derive refer to Fluent identifiers directly.\n #[rustc_diagnostic_item = \"SubdiagnosticMessage\"]\n pub enum SubdiagnosticMessage {\n     /// Non-translatable diagnostic message.\n     // FIXME(davidtwco): can a `Cow<'static, str>` be used here?\n     Str(String),\n     /// Identifier of a Fluent message. Instances of this variant are generated by the\n-    /// `SessionSubdiagnostic` derive.\n+    /// `Subdiagnostic` derive.\n     FluentIdentifier(FluentId),\n     /// Attribute of a Fluent message. Needs to be combined with a Fluent identifier to produce an\n     /// actual translated message. Instances of this variant are generated by the `fluent_messages`"}, {"sha": "a52e95e92d55c81b749f26ac6f18ab3518a81844", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -35,7 +35,7 @@ pub enum DiagnosticArgValue<'source> {\n     Number(usize),\n }\n \n-/// Converts a value of a type into a `DiagnosticArg` (typically a field of a `SessionDiagnostic`\n+/// Converts a value of a type into a `DiagnosticArg` (typically a field of an `IntoDiagnostic`\n /// struct). Implemented as a custom trait rather than `From` so that it is implemented on the type\n /// being converted rather than on `DiagnosticArgValue`, which enables types from other `rustc_*`\n /// crates to implement this.\n@@ -176,9 +176,10 @@ impl IntoDiagnosticArg for hir::ConstContext {\n }\n \n /// Trait implemented by error types. This should not be implemented manually. Instead, use\n-/// `#[derive(SessionSubdiagnostic)]` -- see [rustc_macros::SessionSubdiagnostic].\n-#[rustc_diagnostic_item = \"AddSubdiagnostic\"]\n-pub trait AddSubdiagnostic {\n+/// `#[derive(Subdiagnostic)]` -- see [rustc_macros::Subdiagnostic].\n+#[cfg_attr(bootstrap, rustc_diagnostic_item = \"AddSubdiagnostic\")]\n+#[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"AddToDiagnostic\")]\n+pub trait AddToDiagnostic {\n     /// Add a subdiagnostic to an existing diagnostic.\n     fn add_to_diagnostic(self, diag: &mut Diagnostic);\n }\n@@ -891,9 +892,9 @@ impl Diagnostic {\n         self\n     }\n \n-    /// Add a subdiagnostic from a type that implements `SessionSubdiagnostic` - see\n-    /// [rustc_macros::SessionSubdiagnostic].\n-    pub fn subdiagnostic(&mut self, subdiagnostic: impl AddSubdiagnostic) -> &mut Self {\n+    /// Add a subdiagnostic from a type that implements `Subdiagnostic` - see\n+    /// [rustc_macros::Subdiagnostic].\n+    pub fn subdiagnostic(&mut self, subdiagnostic: impl AddToDiagnostic) -> &mut Self {\n         subdiagnostic.add_to_diagnostic(self);\n         self\n     }"}, {"sha": "b4ba65ca96d3b7486a561fc8e3611c99dab1b100", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -13,6 +13,16 @@ use std::marker::PhantomData;\n use std::ops::{Deref, DerefMut};\n use std::thread::panicking;\n \n+/// Trait implemented by error types. This should not be implemented manually. Instead, use\n+/// `#[derive(Diagnostic)]` -- see [rustc_macros::Diagnostic].\n+#[cfg_attr(bootstrap, rustc_diagnostic_item = \"SessionDiagnostic\")]\n+#[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"IntoDiagnostic\")]\n+pub trait IntoDiagnostic<'a, T: EmissionGuarantee = ErrorGuaranteed> {\n+    /// Write out as a diagnostic out of `Handler`.\n+    #[must_use]\n+    fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, T>;\n+}\n+\n /// Used for emitting structured error messages and other diagnostic information.\n ///\n /// If there is some state in a downstream crate you would like to\n@@ -570,7 +580,7 @@ impl<'a, G: EmissionGuarantee> DiagnosticBuilder<'a, G> {\n \n     forward!(pub fn subdiagnostic(\n         &mut self,\n-        subdiagnostic: impl crate::AddSubdiagnostic\n+        subdiagnostic: impl crate::AddToDiagnostic\n     ) -> &mut Self);\n }\n "}, {"sha": "68971cebc3527aec2c3572ab3103931fd66d7c21", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -60,6 +60,7 @@ mod snippet;\n mod styled_buffer;\n pub mod translation;\n \n+pub use diagnostic_builder::IntoDiagnostic;\n pub use snippet::Style;\n \n pub type PResult<'a, T> = Result<T, DiagnosticBuilder<'a, ErrorGuaranteed>>;\n@@ -370,7 +371,7 @@ impl fmt::Display for ExplicitBug {\n impl error::Error for ExplicitBug {}\n \n pub use diagnostic::{\n-    AddSubdiagnostic, DecorateLint, Diagnostic, DiagnosticArg, DiagnosticArgFromDisplay,\n+    AddToDiagnostic, DecorateLint, Diagnostic, DiagnosticArg, DiagnosticArgFromDisplay,\n     DiagnosticArgValue, DiagnosticId, DiagnosticStyledString, IntoDiagnosticArg, SubDiagnostic,\n };\n pub use diagnostic_builder::{DiagnosticBuilder, EmissionGuarantee, LintDiagnosticBuilder};\n@@ -436,11 +437,11 @@ struct HandlerInner {\n     /// have been converted.\n     check_unstable_expect_diagnostics: bool,\n \n-    /// Expected [`Diagnostic`]s store a [`LintExpectationId`] as part of\n+    /// Expected [`Diagnostic`][diagnostic::Diagnostic]s store a [`LintExpectationId`] as part of\n     /// the lint level. [`LintExpectationId`]s created early during the compilation\n     /// (before `HirId`s have been defined) are not stable and can therefore not be\n     /// stored on disk. This buffer stores these diagnostics until the ID has been\n-    /// replaced by a stable [`LintExpectationId`]. The [`Diagnostic`]s are the\n+    /// replaced by a stable [`LintExpectationId`]. The [`Diagnostic`][diagnostic::Diagnostic]s are the\n     /// submitted for storage and added to the list of fulfilled expectations.\n     unstable_expect_diagnostics: Vec<Diagnostic>,\n \n@@ -1028,6 +1029,39 @@ impl Handler {\n         self.inner.borrow_mut().emit_diagnostic(diagnostic)\n     }\n \n+    pub fn emit_err<'a>(&'a self, err: impl IntoDiagnostic<'a>) -> ErrorGuaranteed {\n+        self.create_err(err).emit()\n+    }\n+\n+    pub fn create_err<'a>(\n+        &'a self,\n+        err: impl IntoDiagnostic<'a>,\n+    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        err.into_diagnostic(self)\n+    }\n+\n+    pub fn create_warning<'a>(\n+        &'a self,\n+        warning: impl IntoDiagnostic<'a, ()>,\n+    ) -> DiagnosticBuilder<'a, ()> {\n+        warning.into_diagnostic(self)\n+    }\n+\n+    pub fn emit_warning<'a>(&'a self, warning: impl IntoDiagnostic<'a, ()>) {\n+        self.create_warning(warning).emit()\n+    }\n+\n+    pub fn create_fatal<'a>(\n+        &'a self,\n+        fatal: impl IntoDiagnostic<'a, !>,\n+    ) -> DiagnosticBuilder<'a, !> {\n+        fatal.into_diagnostic(self)\n+    }\n+\n+    pub fn emit_fatal<'a>(&'a self, fatal: impl IntoDiagnostic<'a, !>) -> ! {\n+        self.create_fatal(fatal).emit()\n+    }\n+\n     fn emit_diag_at_span(\n         &self,\n         mut diag: Diagnostic,"}, {"sha": "cd8a525e062c5430f6c27f38ebe2e674defd12c2", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -10,11 +10,13 @@ use rustc_ast::{self as ast, AttrVec, Attribute, HasAttrs, Item, NodeId, PatKind\n use rustc_attr::{self as attr, Deprecation, Stability};\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_data_structures::sync::{self, Lrc};\n-use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed, MultiSpan, PResult};\n+use rustc_errors::{\n+    Applicability, DiagnosticBuilder, ErrorGuaranteed, IntoDiagnostic, MultiSpan, PResult,\n+};\n use rustc_lint_defs::builtin::PROC_MACRO_BACK_COMPAT;\n use rustc_lint_defs::{BufferedEarlyLint, BuiltinLintDiagnostics};\n use rustc_parse::{self, parser, MACRO_ARGUMENTS};\n-use rustc_session::{parse::ParseSess, Limit, Session, SessionDiagnostic};\n+use rustc_session::{parse::ParseSess, Limit, Session};\n use rustc_span::def_id::{CrateNum, DefId, LocalDefId};\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::{AstPass, ExpnData, ExpnKind, LocalExpnId};\n@@ -1109,12 +1111,12 @@ impl<'a> ExtCtxt<'a> {\n \n     pub fn create_err(\n         &self,\n-        err: impl SessionDiagnostic<'a>,\n+        err: impl IntoDiagnostic<'a>,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         self.sess.create_err(err)\n     }\n \n-    pub fn emit_err(&self, err: impl SessionDiagnostic<'a>) -> ErrorGuaranteed {\n+    pub fn emit_err(&self, err: impl IntoDiagnostic<'a>) -> ErrorGuaranteed {\n         self.sess.emit_err(err)\n     }\n "}, {"sha": "bd93f0717f5801f7df0aa410faf9dedb7729870b", "filename": "compiler/rustc_expand/src/errors.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,45 +1,45 @@\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::Diagnostic;\n use rustc_span::symbol::MacroRulesNormalizedIdent;\n use rustc_span::Span;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(expand::expr_repeat_no_syntax_vars)]\n pub(crate) struct NoSyntaxVarsExprRepeat {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(expand::must_repeat_once)]\n pub(crate) struct MustRepeatOnce {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(expand::count_repetition_misplaced)]\n pub(crate) struct CountRepetitionMisplaced {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(expand::meta_var_expr_unrecognized_var)]\n pub(crate) struct MetaVarExprUnrecognizedVar {\n     #[primary_span]\n     pub span: Span,\n     pub key: MacroRulesNormalizedIdent,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(expand::var_still_repeating)]\n pub(crate) struct VarStillRepeating {\n     #[primary_span]\n     pub span: Span,\n     pub ident: MacroRulesNormalizedIdent,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(expand::meta_var_dif_seq_matchers)]\n pub(crate) struct MetaVarsDifSeqMatchers {\n     #[primary_span]"}, {"sha": "6d2c7aac6af495c4fd017f77be0af978ce4b28d1", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -593,7 +593,7 @@ pub fn compile_declarative_macro(\n     (mk_syn_ext(expander), rule_spans)\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n enum ExplainDocComment {\n     #[label(expand::explain_doc_comment_inner)]\n     Inner {"}, {"sha": "85b877652c6aad9fe4e4a91437a6ed463f7d9aae", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,10 +1,10 @@\n use hir::GenericParamKind;\n use rustc_errors::{\n-    fluent, AddSubdiagnostic, Applicability, DiagnosticMessage, DiagnosticStyledString, MultiSpan,\n+    fluent, AddToDiagnostic, Applicability, DiagnosticMessage, DiagnosticStyledString, MultiSpan,\n };\n use rustc_hir as hir;\n use rustc_hir::{FnRetTy, Ty};\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_middle::ty::{Region, TyCtxt};\n use rustc_span::symbol::kw;\n use rustc_span::{symbol::Ident, BytePos, Span};\n@@ -16,7 +16,7 @@ use crate::infer::error_reporting::{\n \n pub mod note_and_explain;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(infer::opaque_hidden_type)]\n pub struct OpaqueHiddenTypeDiag {\n     #[primary_span]\n@@ -28,7 +28,7 @@ pub struct OpaqueHiddenTypeDiag {\n     pub hidden_type: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(infer::type_annotations_needed, code = \"E0282\")]\n pub struct AnnotationRequired<'a> {\n     #[primary_span]\n@@ -46,7 +46,7 @@ pub struct AnnotationRequired<'a> {\n }\n \n // Copy of `AnnotationRequired` for E0283\n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(infer::type_annotations_needed, code = \"E0283\")]\n pub struct AmbigousImpl<'a> {\n     #[primary_span]\n@@ -64,7 +64,7 @@ pub struct AmbigousImpl<'a> {\n }\n \n // Copy of `AnnotationRequired` for E0284\n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(infer::type_annotations_needed, code = \"E0284\")]\n pub struct AmbigousReturn<'a> {\n     #[primary_span]\n@@ -81,7 +81,7 @@ pub struct AmbigousReturn<'a> {\n     pub multi_suggestions: Vec<SourceKindMultiSuggestion<'a>>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(infer::need_type_info_in_generator, code = \"E0698\")]\n pub struct NeedTypeInfoInGenerator<'a> {\n     #[primary_span]\n@@ -92,7 +92,7 @@ pub struct NeedTypeInfoInGenerator<'a> {\n }\n \n // Used when a better one isn't available\n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(infer::label_bad)]\n pub struct InferenceBadError<'a> {\n     #[primary_span]\n@@ -106,7 +106,7 @@ pub struct InferenceBadError<'a> {\n     pub name: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum SourceKindSubdiag<'a> {\n     #[suggestion_verbose(\n         infer::source_kind_subdiag_let,\n@@ -147,7 +147,7 @@ pub enum SourceKindSubdiag<'a> {\n     },\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum SourceKindMultiSuggestion<'a> {\n     #[multipart_suggestion_verbose(\n         infer::source_kind_fully_qualified,\n@@ -228,7 +228,7 @@ pub enum RegionOriginNote<'a> {\n     },\n }\n \n-impl AddSubdiagnostic for RegionOriginNote<'_> {\n+impl AddToDiagnostic for RegionOriginNote<'_> {\n     fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n         let mut label_or_note = |span, msg: DiagnosticMessage| {\n             let sub_count = diag.children.iter().filter(|d| d.span.is_dummy()).count();\n@@ -289,7 +289,7 @@ pub enum LifetimeMismatchLabels {\n     },\n }\n \n-impl AddSubdiagnostic for LifetimeMismatchLabels {\n+impl AddToDiagnostic for LifetimeMismatchLabels {\n     fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n         match self {\n             LifetimeMismatchLabels::InRet { param_span, ret_span, span, label_var1 } => {\n@@ -339,7 +339,7 @@ pub struct AddLifetimeParamsSuggestion<'a> {\n     pub add_note: bool,\n }\n \n-impl AddSubdiagnostic for AddLifetimeParamsSuggestion<'_> {\n+impl AddToDiagnostic for AddLifetimeParamsSuggestion<'_> {\n     fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n         let mut mk_suggestion = || {\n             let (\n@@ -422,7 +422,7 @@ impl AddSubdiagnostic for AddLifetimeParamsSuggestion<'_> {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(infer::lifetime_mismatch, code = \"E0623\")]\n pub struct LifetimeMismatch<'a> {\n     #[primary_span]\n@@ -438,7 +438,7 @@ pub struct IntroducesStaticBecauseUnmetLifetimeReq {\n     pub binding_span: Span,\n }\n \n-impl AddSubdiagnostic for IntroducesStaticBecauseUnmetLifetimeReq {\n+impl AddToDiagnostic for IntroducesStaticBecauseUnmetLifetimeReq {\n     fn add_to_diagnostic(mut self, diag: &mut rustc_errors::Diagnostic) {\n         self.unmet_requirements\n             .push_span_label(self.binding_span, fluent::infer::msl_introduces_static);\n@@ -450,7 +450,7 @@ pub struct ImplNote {\n     pub impl_span: Option<Span>,\n }\n \n-impl AddSubdiagnostic for ImplNote {\n+impl AddToDiagnostic for ImplNote {\n     fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n         match self.impl_span {\n             Some(span) => diag.span_note(span, fluent::infer::msl_impl_note),\n@@ -465,7 +465,7 @@ pub enum TraitSubdiag {\n }\n \n // FIXME(#100717) used in `Vec<TraitSubdiag>` so requires eager translation/list support\n-impl AddSubdiagnostic for TraitSubdiag {\n+impl AddToDiagnostic for TraitSubdiag {\n     fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n         match self {\n             TraitSubdiag::Note { span } => {\n@@ -483,7 +483,7 @@ impl AddSubdiagnostic for TraitSubdiag {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(infer::mismatched_static_lifetime)]\n pub struct MismatchedStaticLifetime<'a> {\n     #[primary_span]"}, {"sha": "7f54918f73614e2cd94d478d6fa9c1b13c1858e5", "filename": "compiler/rustc_infer/src/errors/note_and_explain.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,5 +1,5 @@\n use crate::infer::error_reporting::nice_region_error::find_anon_type;\n-use rustc_errors::{self, fluent, AddSubdiagnostic, IntoDiagnosticArg};\n+use rustc_errors::{self, fluent, AddToDiagnostic, IntoDiagnosticArg};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::{symbol::kw, Span};\n \n@@ -158,7 +158,7 @@ impl RegionExplanation<'_> {\n     }\n }\n \n-impl AddSubdiagnostic for RegionExplanation<'_> {\n+impl AddToDiagnostic for RegionExplanation<'_> {\n     fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n         if let Some(span) = self.desc.span {\n             diag.span_note(span, fluent::infer::region_explanation);"}, {"sha": "baa97d72a4baab067f77395502cecac7460541cc", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -4,6 +4,7 @@ use crate::errors::{\n };\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::InferCtxt;\n+use rustc_errors::IntoDiagnostic;\n use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed, IntoDiagnosticArg};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n@@ -18,7 +19,6 @@ use rustc_middle::ty::print::{FmtPrinter, PrettyPrinter, Print, Printer};\n use rustc_middle::ty::{self, DefIdTree, InferConst};\n use rustc_middle::ty::{GenericArg, GenericArgKind, SubstsRef};\n use rustc_middle::ty::{IsSuggestable, Ty, TyCtxt, TypeckResults};\n-use rustc_session::SessionDiagnostic;\n use rustc_span::symbol::{kw, Ident};\n use rustc_span::{BytePos, Span};\n use std::borrow::Cow;"}, {"sha": "da0271a345e40ed6f1ef80c14e16b3696d0d6e63", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -11,7 +11,7 @@ use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::SubregionOrigin;\n use crate::infer::TyCtxt;\n \n-use rustc_errors::AddSubdiagnostic;\n+use rustc_errors::AddToDiagnostic;\n use rustc_errors::{Diagnostic, ErrorGuaranteed};\n use rustc_hir::Ty;\n use rustc_middle::ty::Region;"}, {"sha": "286cfb64a1ecd2d781e06954324e640f31ffda44", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -2,7 +2,7 @@ use crate::errors::RegionOriginNote;\n use crate::infer::error_reporting::note_and_explain_region;\n use crate::infer::{self, InferCtxt, SubregionOrigin};\n use rustc_errors::{\n-    fluent, struct_span_err, AddSubdiagnostic, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n+    fluent, struct_span_err, AddToDiagnostic, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n };\n use rustc_middle::traits::ObligationCauseCode;\n use rustc_middle::ty::error::TypeError;"}, {"sha": "097640f26c154a2f9216ec1c775a64a95d12f6d6", "filename": "compiler/rustc_interface/src/errors.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,10 +1,10 @@\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::Diagnostic;\n use rustc_span::{Span, Symbol};\n \n use std::io;\n use std::path::Path;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(interface::ferris_identifier)]\n pub struct FerrisIdentifier {\n     #[primary_span]\n@@ -13,75 +13,75 @@ pub struct FerrisIdentifier {\n     pub first_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(interface::emoji_identifier)]\n pub struct EmojiIdentifier {\n     #[primary_span]\n     pub spans: Vec<Span>,\n     pub ident: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(interface::mixed_bin_crate)]\n pub struct MixedBinCrate;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(interface::mixed_proc_macro_crate)]\n pub struct MixedProcMacroCrate;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(interface::proc_macro_doc_without_arg)]\n pub struct ProcMacroDocWithoutArg;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(interface::error_writing_dependencies)]\n pub struct ErrorWritingDependencies<'a> {\n     pub path: &'a Path,\n     pub error: io::Error,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(interface::input_file_would_be_overwritten)]\n pub struct InputFileWouldBeOverWritten<'a> {\n     pub path: &'a Path,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(interface::generated_file_conflicts_with_directory)]\n pub struct GeneratedFileConflictsWithDirectory<'a> {\n     pub input_path: &'a Path,\n     pub dir_path: &'a Path,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(interface::temps_dir_error)]\n pub struct TempsDirError;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(interface::out_dir_error)]\n pub struct OutDirError;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(interface::cant_emit_mir)]\n pub struct CantEmitMIR {\n     pub error: io::Error,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(interface::rustc_error_fatal)]\n pub struct RustcErrorFatal {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(interface::rustc_error_unexpected_annotation)]\n pub struct RustcErrorUnexpectedAnnotation {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(interface::failed_writing_file)]\n pub struct FailedWritingFile<'a> {\n     pub path: &'a Path,"}, {"sha": "880f3fbd00e60791bda61a70989304eeca0d2962", "filename": "compiler/rustc_lint/src/errors.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,9 +1,9 @@\n-use rustc_errors::{fluent, AddSubdiagnostic, ErrorGuaranteed, Handler};\n-use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n-use rustc_session::{lint::Level, SessionDiagnostic};\n+use rustc_errors::{fluent, AddToDiagnostic, ErrorGuaranteed, Handler, IntoDiagnostic};\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n+use rustc_session::lint::Level;\n use rustc_span::{Span, Symbol};\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(lint::overruled_attribute, code = \"E0453\")]\n pub struct OverruledAttribute {\n     #[primary_span]\n@@ -22,7 +22,7 @@ pub enum OverruledAttributeSub {\n     CommandLineSource,\n }\n \n-impl AddSubdiagnostic for OverruledAttributeSub {\n+impl AddToDiagnostic for OverruledAttributeSub {\n     fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n         match self {\n             OverruledAttributeSub::DefaultSource { id } => {\n@@ -42,7 +42,7 @@ impl AddSubdiagnostic for OverruledAttributeSub {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(lint::malformed_attribute, code = \"E0452\")]\n pub struct MalformedAttribute {\n     #[primary_span]\n@@ -51,7 +51,7 @@ pub struct MalformedAttribute {\n     pub sub: MalformedAttributeSub,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum MalformedAttributeSub {\n     #[label(lint::bad_attribute_argument)]\n     BadAttributeArgument(#[primary_span] Span),\n@@ -61,7 +61,7 @@ pub enum MalformedAttributeSub {\n     ReasonMustComeLast(#[primary_span] Span),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(lint::unknown_tool_in_scoped_lint, code = \"E0710\")]\n pub struct UnknownToolInScopedLint {\n     #[primary_span]\n@@ -72,7 +72,7 @@ pub struct UnknownToolInScopedLint {\n     pub is_nightly_build: Option<()>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(lint::builtin_ellipsis_inclusive_range_patterns, code = \"E0783\")]\n pub struct BuiltinEllpisisInclusiveRangePatterns {\n     #[primary_span]\n@@ -87,7 +87,7 @@ pub struct RequestedLevel {\n     pub lint_name: String,\n }\n \n-impl AddSubdiagnostic for RequestedLevel {\n+impl AddToDiagnostic for RequestedLevel {\n     fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n         diag.note(fluent::lint::requested_level);\n         diag.set_arg(\n@@ -107,7 +107,7 @@ impl AddSubdiagnostic for RequestedLevel {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(lint::unsupported_group, code = \"E0602\")]\n pub struct UnsupportedGroup {\n     pub lint_group: String,\n@@ -119,7 +119,7 @@ pub struct CheckNameUnknown {\n     pub sub: RequestedLevel,\n }\n \n-impl SessionDiagnostic<'_> for CheckNameUnknown {\n+impl IntoDiagnostic<'_> for CheckNameUnknown {\n     fn into_diagnostic(\n         self,\n         handler: &Handler,\n@@ -136,23 +136,23 @@ impl SessionDiagnostic<'_> for CheckNameUnknown {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(lint::check_name_unknown_tool, code = \"E0602\")]\n pub struct CheckNameUnknownTool {\n     pub tool_name: Symbol,\n     #[subdiagnostic]\n     pub sub: RequestedLevel,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(lint::check_name_warning)]\n pub struct CheckNameWarning {\n     pub msg: String,\n     #[subdiagnostic]\n     pub sub: RequestedLevel,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(lint::check_name_deprecated)]\n pub struct CheckNameDeprecated {\n     pub lint_name: String,"}, {"sha": "d8a03024d132334d424361582457a34816612e6c", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -372,7 +372,7 @@ declare_tool_lint! {\n declare_tool_lint! {\n     pub rustc::DIAGNOSTIC_OUTSIDE_OF_IMPL,\n     Allow,\n-    \"prevent creation of diagnostics outside of `SessionDiagnostic`/`AddSubdiagnostic` impls\",\n+    \"prevent creation of diagnostics outside of `IntoDiagnostic`/`AddToDiagnostic` impls\",\n     report_in_external_macro: true\n }\n \n@@ -404,7 +404,7 @@ impl LateLintPass<'_> for Diagnostics {\n                 let Impl { of_trait: Some(of_trait), .. } = impl_ &&\n                 let Some(def_id) = of_trait.trait_def_id() &&\n                 let Some(name) = cx.tcx.get_diagnostic_name(def_id) &&\n-                matches!(name, sym::SessionDiagnostic | sym::AddSubdiagnostic | sym::DecorateLint)\n+                matches!(name, sym::IntoDiagnostic | sym::AddToDiagnostic | sym::DecorateLint)\n             {\n                 found_impl = true;\n                 break;"}, {"sha": "3b8d9594eb91abad6892b860b5c58d84910eca9e", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -9,29 +9,29 @@ use syn::spanned::Spanned;\n use synstructure::Structure;\n \n /// The central struct for constructing the `into_diagnostic` method from an annotated struct.\n-pub(crate) struct SessionDiagnosticDerive<'a> {\n+pub(crate) struct DiagnosticDerive<'a> {\n     structure: Structure<'a>,\n-    sess: syn::Ident,\n+    handler: syn::Ident,\n     builder: DiagnosticDeriveBuilder,\n }\n \n-impl<'a> SessionDiagnosticDerive<'a> {\n-    pub(crate) fn new(diag: syn::Ident, sess: syn::Ident, structure: Structure<'a>) -> Self {\n+impl<'a> DiagnosticDerive<'a> {\n+    pub(crate) fn new(diag: syn::Ident, handler: syn::Ident, structure: Structure<'a>) -> Self {\n         Self {\n             builder: DiagnosticDeriveBuilder {\n                 diag,\n                 fields: build_field_mapping(&structure),\n-                kind: DiagnosticDeriveKind::SessionDiagnostic,\n+                kind: DiagnosticDeriveKind::Diagnostic,\n                 code: None,\n                 slug: None,\n             },\n-            sess,\n+            handler,\n             structure,\n         }\n     }\n \n     pub(crate) fn into_tokens(self) -> TokenStream {\n-        let SessionDiagnosticDerive { mut structure, sess, mut builder } = self;\n+        let DiagnosticDerive { mut structure, handler, mut builder } = self;\n \n         let ast = structure.ast();\n         let implementation = {\n@@ -53,7 +53,7 @@ impl<'a> SessionDiagnosticDerive<'a> {\n                     }\n                     Some(slug) => {\n                         quote! {\n-                            let mut #diag = #sess.struct_diagnostic(rustc_errors::fluent::#slug);\n+                            let mut #diag = #handler.struct_diagnostic(rustc_errors::fluent::#slug);\n                         }\n                     }\n                 };\n@@ -72,7 +72,7 @@ impl<'a> SessionDiagnosticDerive<'a> {\n             } else {\n                 span_err(\n                     ast.span().unwrap(),\n-                    \"`#[derive(SessionDiagnostic)]` can only be used on structs\",\n+                    \"`#[derive(Diagnostic)]` can only be used on structs\",\n                 )\n                 .emit();\n \n@@ -81,15 +81,15 @@ impl<'a> SessionDiagnosticDerive<'a> {\n         };\n \n         structure.gen_impl(quote! {\n-            gen impl<'__session_diagnostic_sess, G>\n-                    rustc_session::SessionDiagnostic<'__session_diagnostic_sess, G>\n+            gen impl<'__diagnostic_handler_sess, G>\n+                    rustc_errors::IntoDiagnostic<'__diagnostic_handler_sess, G>\n                     for @Self\n                 where G: rustc_errors::EmissionGuarantee\n             {\n                 fn into_diagnostic(\n                     self,\n-                    #sess: &'__session_diagnostic_sess rustc_errors::Handler\n-                ) -> rustc_errors::DiagnosticBuilder<'__session_diagnostic_sess, G> {\n+                    #handler: &'__diagnostic_handler_sess rustc_errors::Handler\n+                ) -> rustc_errors::DiagnosticBuilder<'__diagnostic_handler_sess, G> {\n                     use rustc_errors::IntoDiagnosticArg;\n                     #implementation\n                 }"}, {"sha": "32d6ba62a0d3e3f3eefa1c2aa5f6f28c52cdc432", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -21,12 +21,12 @@ use synstructure::{BindingInfo, Structure};\n /// What kind of diagnostic is being derived - a fatal/error/warning or a lint?\n #[derive(Copy, Clone, PartialEq, Eq)]\n pub(crate) enum DiagnosticDeriveKind {\n-    SessionDiagnostic,\n+    Diagnostic,\n     LintDiagnostic,\n }\n \n /// Tracks persistent information required for building up individual calls to diagnostic methods\n-/// for generated diagnostic derives - both `SessionDiagnostic` for fatal/errors/warnings and\n+/// for generated diagnostic derives - both `Diagnostic` for fatal/errors/warnings and\n /// `LintDiagnostic` for lints.\n pub(crate) struct DiagnosticDeriveBuilder {\n     /// The identifier to use for the generated `DiagnosticBuilder` instance.\n@@ -333,7 +333,7 @@ impl DiagnosticDeriveBuilder {\n             }\n             \"primary_span\" => {\n                 match self.kind {\n-                    DiagnosticDeriveKind::SessionDiagnostic => {\n+                    DiagnosticDeriveKind::Diagnostic => {\n                         report_error_if_not_applied_to_span(attr, &info)?;\n \n                         Ok(quote! {"}, {"sha": "4166816b5e3c7feb80402134bd8dca76f1bac62d", "filename": "compiler/rustc_macros/src/diagnostics/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -5,14 +5,14 @@ mod fluent;\n mod subdiagnostic;\n mod utils;\n \n-use diagnostic::{LintDiagnosticDerive, SessionDiagnosticDerive};\n+use diagnostic::{DiagnosticDerive, LintDiagnosticDerive};\n pub(crate) use fluent::fluent_messages;\n use proc_macro2::TokenStream;\n use quote::format_ident;\n-use subdiagnostic::SessionSubdiagnosticDerive;\n+use subdiagnostic::SubdiagnosticDerive;\n use synstructure::Structure;\n \n-/// Implements `#[derive(SessionDiagnostic)]`, which allows for errors to be specified as a struct,\n+/// Implements `#[derive(Diagnostic)]`, which allows for errors to be specified as a struct,\n /// independent from the actual diagnostics emitting code.\n ///\n /// ```ignore (rust)\n@@ -22,7 +22,7 @@ use synstructure::Structure;\n /// # use rustc_span::{symbol::Ident, Span};\n /// # extern crate rust_middle;\n /// # use rustc_middle::ty::Ty;\n-/// #[derive(SessionDiagnostic)]\n+/// #[derive(Diagnostic)]\n /// #[diag(borrowck::move_out_of_borrow, code = \"E0505\")]\n /// pub struct MoveOutOfBorrowError<'tcx> {\n ///     pub name: Ident,\n@@ -56,10 +56,10 @@ use synstructure::Structure;\n /// });\n /// ```\n ///\n-/// See rustc dev guide for more examples on using the `#[derive(SessionDiagnostic)]`:\n+/// See rustc dev guide for more examples on using the `#[derive(Diagnostic)]`:\n /// <https://rustc-dev-guide.rust-lang.org/diagnostics/diagnostic-structs.html>\n pub fn session_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n-    SessionDiagnosticDerive::new(format_ident!(\"diag\"), format_ident!(\"sess\"), s).into_tokens()\n+    DiagnosticDerive::new(format_ident!(\"diag\"), format_ident!(\"handler\"), s).into_tokens()\n }\n \n /// Implements `#[derive(LintDiagnostic)]`, which allows for lints to be specified as a struct,\n@@ -103,17 +103,17 @@ pub fn session_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n /// ```\n ///\n /// See rustc dev guide for more examples on using the `#[derive(LintDiagnostic)]`:\n-/// <https://rustc-dev-guide.rust-lang.org/diagnostics/sessiondiagnostic.html>\n+/// <https://rustc-dev-guide.rust-lang.org/diagnostics/diagnostic-structs.html#reference>\n pub fn lint_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n     LintDiagnosticDerive::new(format_ident!(\"diag\"), s).into_tokens()\n }\n \n-/// Implements `#[derive(SessionSubdiagnostic)]`, which allows for labels, notes, helps and\n+/// Implements `#[derive(Subdiagnostic)]`, which allows for labels, notes, helps and\n /// suggestions to be specified as a structs or enums, independent from the actual diagnostics\n /// emitting code or diagnostic derives.\n ///\n /// ```ignore (rust)\n-/// #[derive(SessionSubdiagnostic)]\n+/// #[derive(Subdiagnostic)]\n /// pub enum ExpectedIdentifierLabel<'tcx> {\n ///     #[label(parser::expected_identifier)]\n ///     WithoutFound {\n@@ -128,7 +128,7 @@ pub fn lint_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n ///     }\n /// }\n ///\n-/// #[derive(SessionSubdiagnostic)]\n+/// #[derive(Subdiagnostic)]\n /// #[suggestion_verbose(parser::raw_identifier)]\n /// pub struct RawIdentifierSuggestion<'tcx> {\n ///     #[primary_span]\n@@ -155,5 +155,5 @@ pub fn lint_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n /// diag.subdiagnostic(RawIdentifierSuggestion { span, applicability, ident });\n /// ```\n pub fn session_subdiagnostic_derive(s: Structure<'_>) -> TokenStream {\n-    SessionSubdiagnosticDerive::new(s).into_tokens()\n+    SubdiagnosticDerive::new(s).into_tokens()\n }"}, {"sha": "bdeca3420bccac8ba3ee059f0efcfa455b2893ad", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -98,19 +98,19 @@ impl quote::IdentFragment for SubdiagnosticKind {\n }\n \n /// The central struct for constructing the `add_to_diagnostic` method from an annotated struct.\n-pub(crate) struct SessionSubdiagnosticDerive<'a> {\n+pub(crate) struct SubdiagnosticDerive<'a> {\n     structure: Structure<'a>,\n     diag: syn::Ident,\n }\n \n-impl<'a> SessionSubdiagnosticDerive<'a> {\n+impl<'a> SubdiagnosticDerive<'a> {\n     pub(crate) fn new(structure: Structure<'a>) -> Self {\n         let diag = format_ident!(\"diag\");\n         Self { structure, diag }\n     }\n \n     pub(crate) fn into_tokens(self) -> TokenStream {\n-        let SessionSubdiagnosticDerive { mut structure, diag } = self;\n+        let SubdiagnosticDerive { mut structure, diag } = self;\n         let implementation = {\n             let ast = structure.ast();\n             let span = ast.span().unwrap();\n@@ -119,7 +119,7 @@ impl<'a> SessionSubdiagnosticDerive<'a> {\n                 syn::Data::Union(..) => {\n                     span_err(\n                         span,\n-                        \"`#[derive(SessionSubdiagnostic)]` can only be used on structs and enums\",\n+                        \"`#[derive(Subdiagnostic)]` can only be used on structs and enums\",\n                     );\n                 }\n             }\n@@ -146,7 +146,7 @@ impl<'a> SessionSubdiagnosticDerive<'a> {\n                     }\n                 }\n \n-                let mut builder = SessionSubdiagnosticDeriveBuilder {\n+                let mut builder = SubdiagnosticDeriveBuilder {\n                     diag: &diag,\n                     variant,\n                     span,\n@@ -166,7 +166,7 @@ impl<'a> SessionSubdiagnosticDerive<'a> {\n         };\n \n         let ret = structure.gen_impl(quote! {\n-            gen impl rustc_errors::AddSubdiagnostic for @Self {\n+            gen impl rustc_errors::AddToDiagnostic for @Self {\n                 fn add_to_diagnostic(self, #diag: &mut rustc_errors::Diagnostic) {\n                     use rustc_errors::{Applicability, IntoDiagnosticArg};\n                     #implementation\n@@ -178,10 +178,10 @@ impl<'a> SessionSubdiagnosticDerive<'a> {\n }\n \n /// Tracks persistent information required for building up the call to add to the diagnostic\n-/// for the final generated method. This is a separate struct to `SessionSubdiagnosticDerive`\n+/// for the final generated method. This is a separate struct to `SubdiagnosticDerive`\n /// only to be able to destructure and split `self.builder` and the `self.structure` up to avoid a\n /// double mut borrow later on.\n-struct SessionSubdiagnosticDeriveBuilder<'a> {\n+struct SubdiagnosticDeriveBuilder<'a> {\n     /// The identifier to use for the generated `DiagnosticBuilder` instance.\n     diag: &'a syn::Ident,\n \n@@ -205,7 +205,7 @@ struct SessionSubdiagnosticDeriveBuilder<'a> {\n     has_suggestion_parts: bool,\n }\n \n-impl<'a> HasFieldMap for SessionSubdiagnosticDeriveBuilder<'a> {\n+impl<'a> HasFieldMap for SubdiagnosticDeriveBuilder<'a> {\n     fn get_field_binding(&self, field: &String) -> Option<&TokenStream> {\n         self.fields.get(field)\n     }\n@@ -241,7 +241,7 @@ impl<'a> FromIterator<&'a SubdiagnosticKind> for KindsStatistics {\n     }\n }\n \n-impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n+impl<'a> SubdiagnosticDeriveBuilder<'a> {\n     fn identify_kind(&mut self) -> Result<Vec<(SubdiagnosticKind, Path)>, DiagnosticDeriveError> {\n         let mut kind_slugs = vec![];\n "}, {"sha": "8fd23ee5ced99f5904ed73a800074d1c096794fe", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -127,7 +127,7 @@ decl_derive!([TypeFoldable, attributes(type_foldable)] => type_foldable::type_fo\n decl_derive!([TypeVisitable, attributes(type_visitable)] => type_visitable::type_visitable_derive);\n decl_derive!([Lift, attributes(lift)] => lift::lift_derive);\n decl_derive!(\n-    [SessionDiagnostic, attributes(\n+    [Diagnostic, attributes(\n         // struct attributes\n         diag,\n         help,\n@@ -161,7 +161,7 @@ decl_derive!(\n         suggestion_verbose)] => diagnostics::lint_diagnostic_derive\n );\n decl_derive!(\n-    [SessionSubdiagnostic, attributes(\n+    [Subdiagnostic, attributes(\n         // struct/variant attributes\n         label,\n         help,"}, {"sha": "1cd550644bf4de5dc62b601d81132d1bc5bed061", "filename": "compiler/rustc_metadata/src/errors.rs", "status": "modified", "additions": 82, "deletions": 82, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -3,136 +3,136 @@ use std::{\n     path::{Path, PathBuf},\n };\n \n-use rustc_errors::{error_code, ErrorGuaranteed};\n-use rustc_macros::SessionDiagnostic;\n-use rustc_session::{config, SessionDiagnostic};\n+use rustc_errors::{error_code, ErrorGuaranteed, IntoDiagnostic};\n+use rustc_macros::Diagnostic;\n+use rustc_session::config;\n use rustc_span::{sym, Span, Symbol};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n \n use crate::locator::CrateFlavor;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::rlib_required)]\n pub struct RlibRequired {\n     pub crate_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::lib_required)]\n pub struct LibRequired<'a> {\n     pub crate_name: Symbol,\n     pub kind: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::crate_dep_multiple)]\n #[help]\n pub struct CrateDepMultiple {\n     pub crate_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::two_panic_runtimes)]\n pub struct TwoPanicRuntimes {\n     pub prev_name: Symbol,\n     pub cur_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::bad_panic_strategy)]\n pub struct BadPanicStrategy {\n     pub runtime: Symbol,\n     pub strategy: PanicStrategy,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::required_panic_strategy)]\n pub struct RequiredPanicStrategy {\n     pub crate_name: Symbol,\n     pub found_strategy: PanicStrategy,\n     pub desired_strategy: PanicStrategy,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::incompatible_panic_in_drop_strategy)]\n pub struct IncompatiblePanicInDropStrategy {\n     pub crate_name: Symbol,\n     pub found_strategy: PanicStrategy,\n     pub desired_strategy: PanicStrategy,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::multiple_names_in_link)]\n pub struct MultipleNamesInLink {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::multiple_kinds_in_link)]\n pub struct MultipleKindsInLink {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::link_name_form)]\n pub struct LinkNameForm {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::link_kind_form)]\n pub struct LinkKindForm {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::link_modifiers_form)]\n pub struct LinkModifiersForm {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::link_cfg_form)]\n pub struct LinkCfgForm {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::wasm_import_form)]\n pub struct WasmImportForm {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::empty_link_name, code = \"E0454\")]\n pub struct EmptyLinkName {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::link_framework_apple, code = \"E0455\")]\n pub struct LinkFrameworkApple {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::framework_only_windows, code = \"E0455\")]\n pub struct FrameworkOnlyWindows {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::unknown_link_kind, code = \"E0458\")]\n pub struct UnknownLinkKind<'a> {\n     #[primary_span]\n@@ -141,199 +141,199 @@ pub struct UnknownLinkKind<'a> {\n     pub kind: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::multiple_link_modifiers)]\n pub struct MultipleLinkModifiers {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::multiple_cfgs)]\n pub struct MultipleCfgs {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::link_cfg_single_predicate)]\n pub struct LinkCfgSinglePredicate {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::multiple_wasm_import)]\n pub struct MultipleWasmImport {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::unexpected_link_arg)]\n pub struct UnexpectedLinkArg {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::invalid_link_modifier)]\n pub struct InvalidLinkModifier {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::multiple_modifiers)]\n pub struct MultipleModifiers<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub modifier: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::bundle_needs_static)]\n pub struct BundleNeedsStatic {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::whole_archive_needs_static)]\n pub struct WholeArchiveNeedsStatic {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::as_needed_compatibility)]\n pub struct AsNeededCompatibility {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::unknown_link_modifier)]\n pub struct UnknownLinkModifier<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub modifier: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::incompatible_wasm_link)]\n pub struct IncompatibleWasmLink {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::link_requires_name, code = \"E0459\")]\n pub struct LinkRequiresName {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::raw_dylib_no_nul)]\n pub struct RawDylibNoNul {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::link_ordinal_raw_dylib)]\n pub struct LinkOrdinalRawDylib {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::lib_framework_apple)]\n pub struct LibFrameworkApple;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::empty_renaming_target)]\n pub struct EmptyRenamingTarget<'a> {\n     pub lib_name: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::renaming_no_link)]\n pub struct RenamingNoLink<'a> {\n     pub lib_name: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::multiple_renamings)]\n pub struct MultipleRenamings<'a> {\n     pub lib_name: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::no_link_mod_override)]\n pub struct NoLinkModOverride {\n     #[primary_span]\n     pub span: Option<Span>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::unsupported_abi_i686)]\n pub struct UnsupportedAbiI686 {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::unsupported_abi)]\n pub struct UnsupportedAbi {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::fail_create_file_encoder)]\n pub struct FailCreateFileEncoder {\n     pub err: Error,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::fail_seek_file)]\n pub struct FailSeekFile {\n     pub err: Error,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::fail_write_file)]\n pub struct FailWriteFile {\n     pub err: Error,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::crate_not_panic_runtime)]\n pub struct CrateNotPanicRuntime {\n     pub crate_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::no_panic_strategy)]\n pub struct NoPanicStrategy {\n     pub crate_name: Symbol,\n     pub strategy: PanicStrategy,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::profiler_builtins_needs_core)]\n pub struct ProfilerBuiltinsNeedsCore;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::not_profiler_runtime)]\n pub struct NotProfilerRuntime {\n     pub crate_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::no_multiple_global_alloc)]\n pub struct NoMultipleGlobalAlloc {\n     #[primary_span]\n@@ -343,66 +343,66 @@ pub struct NoMultipleGlobalAlloc {\n     pub span1: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::conflicting_global_alloc)]\n pub struct ConflictingGlobalAlloc {\n     pub crate_name: Symbol,\n     pub other_crate_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::global_alloc_required)]\n pub struct GlobalAllocRequired;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::no_transitive_needs_dep)]\n pub struct NoTransitiveNeedsDep<'a> {\n     pub crate_name: Symbol,\n     pub needs_crate_name: &'a str,\n     pub deps_crate_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::failed_write_error)]\n pub struct FailedWriteError {\n     pub filename: PathBuf,\n     pub err: Error,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::missing_native_library)]\n pub struct MissingNativeLibrary<'a> {\n     pub libname: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::failed_create_tempdir)]\n pub struct FailedCreateTempdir {\n     pub err: Error,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::failed_create_file)]\n pub struct FailedCreateFile<'a> {\n     pub filename: &'a Path,\n     pub err: Error,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::failed_create_encoded_metadata)]\n pub struct FailedCreateEncodedMetadata {\n     pub err: Error,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::non_ascii_name)]\n pub struct NonAsciiName {\n     #[primary_span]\n     pub span: Span,\n     pub crate_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::extern_location_not_exist)]\n pub struct ExternLocationNotExist<'a> {\n     #[primary_span]\n@@ -411,7 +411,7 @@ pub struct ExternLocationNotExist<'a> {\n     pub location: &'a Path,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::extern_location_not_file)]\n pub struct ExternLocationNotFile<'a> {\n     #[primary_span]\n@@ -427,7 +427,7 @@ pub(crate) struct MultipleCandidates {\n     pub candidates: Vec<PathBuf>,\n }\n \n-impl SessionDiagnostic<'_> for MultipleCandidates {\n+impl IntoDiagnostic<'_> for MultipleCandidates {\n     fn into_diagnostic(\n         self,\n         handler: &'_ rustc_errors::Handler,\n@@ -444,7 +444,7 @@ impl SessionDiagnostic<'_> for MultipleCandidates {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::multiple_matching_crates, code = \"E0464\")]\n #[note]\n pub struct MultipleMatchingCrates {\n@@ -454,23 +454,23 @@ pub struct MultipleMatchingCrates {\n     pub candidates: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::symbol_conflicts_current, code = \"E0519\")]\n pub struct SymbolConflictsCurrent {\n     #[primary_span]\n     pub span: Span,\n     pub crate_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::symbol_conflicts_others, code = \"E0523\")]\n pub struct SymbolConflictsOthers {\n     #[primary_span]\n     pub span: Span,\n     pub crate_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::stable_crate_id_collision)]\n pub struct StableCrateIdCollision {\n     #[primary_span]\n@@ -479,15 +479,15 @@ pub struct StableCrateIdCollision {\n     pub crate_name1: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::dl_error)]\n pub struct DlError {\n     #[primary_span]\n     pub span: Span,\n     pub err: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::newer_crate_version, code = \"E0460\")]\n #[note]\n #[note(metadata::found_crate_versions)]\n@@ -499,7 +499,7 @@ pub struct NewerCrateVersion {\n     pub found_crates: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::no_crate_with_triple, code = \"E0461\")]\n #[note(metadata::found_crate_versions)]\n pub struct NoCrateWithTriple<'a> {\n@@ -511,7 +511,7 @@ pub struct NoCrateWithTriple<'a> {\n     pub found_crates: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::found_staticlib, code = \"E0462\")]\n #[note(metadata::found_crate_versions)]\n #[help]\n@@ -523,7 +523,7 @@ pub struct FoundStaticlib {\n     pub found_crates: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::incompatible_rustc, code = \"E0514\")]\n #[note(metadata::found_crate_versions)]\n #[help]\n@@ -543,7 +543,7 @@ pub struct InvalidMetadataFiles {\n     pub crate_rejections: Vec<String>,\n }\n \n-impl SessionDiagnostic<'_> for InvalidMetadataFiles {\n+impl IntoDiagnostic<'_> for InvalidMetadataFiles {\n     fn into_diagnostic(\n         self,\n         handler: &'_ rustc_errors::Handler,\n@@ -571,7 +571,7 @@ pub struct CannotFindCrate {\n     pub locator_triple: TargetTriple,\n }\n \n-impl SessionDiagnostic<'_> for CannotFindCrate {\n+impl IntoDiagnostic<'_> for CannotFindCrate {\n     fn into_diagnostic(\n         self,\n         handler: &'_ rustc_errors::Handler,\n@@ -617,23 +617,23 @@ impl SessionDiagnostic<'_> for CannotFindCrate {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::no_dylib_plugin, code = \"E0457\")]\n pub struct NoDylibPlugin {\n     #[primary_span]\n     pub span: Span,\n     pub crate_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::crate_location_unknown_type)]\n pub struct CrateLocationUnknownType<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub path: &'a Path,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::lib_filename_form)]\n pub struct LibFilenameForm<'a> {\n     #[primary_span]\n@@ -642,36 +642,36 @@ pub struct LibFilenameForm<'a> {\n     pub dll_suffix: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::multiple_import_name_type)]\n pub struct MultipleImportNameType {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::import_name_type_form)]\n pub struct ImportNameTypeForm {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::import_name_type_x86)]\n pub struct ImportNameTypeX86 {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::unknown_import_name_type)]\n pub struct UnknownImportNameType<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub import_name_type: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(metadata::import_name_type_raw)]\n pub struct ImportNameTypeRaw {\n     #[primary_span]"}, {"sha": "a4ceb494569b1415ea73100fc8b71003dfe58498", "filename": "compiler/rustc_middle/src/error.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_middle%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_middle%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ferror.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,9 +1,9 @@\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::Diagnostic;\n use rustc_span::Span;\n \n use crate::ty::Ty;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(middle::drop_check_overflow, code = \"E0320\")]\n #[note]\n pub struct DropCheckOverflow<'tcx> {\n@@ -13,7 +13,7 @@ pub struct DropCheckOverflow<'tcx> {\n     pub overflow_ty: Ty<'tcx>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(middle::opaque_hidden_type_mismatch)]\n pub struct OpaqueHiddenTypeMismatch<'tcx> {\n     pub self_ty: Ty<'tcx>,\n@@ -25,7 +25,7 @@ pub struct OpaqueHiddenTypeMismatch<'tcx> {\n     pub sub: TypeMismatchReason,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum TypeMismatchReason {\n     #[label(middle::conflict_types)]\n     ConflictType {\n@@ -39,7 +39,7 @@ pub enum TypeMismatchReason {\n     },\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(middle::limit_invalid)]\n pub struct LimitInvalid<'a> {\n     #[primary_span]"}, {"sha": "2b5b4017a5a1172eb49c532e2f1fe318656d5a53", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -53,6 +53,7 @@ use rustc_query_system::ich::StableHashingContext;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use rustc_session::config::{CrateType, OutputFilenames};\n use rustc_session::cstore::CrateStoreDyn;\n+use rustc_session::errors::TargetDataLayoutErrorsWrapper;\n use rustc_session::lint::Lint;\n use rustc_session::Limit;\n use rustc_session::Session;\n@@ -1245,7 +1246,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         output_filenames: OutputFilenames,\n     ) -> GlobalCtxt<'tcx> {\n         let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {\n-            s.emit_fatal(err);\n+            s.emit_fatal(TargetDataLayoutErrorsWrapper(err));\n         });\n         let interners = CtxtInterners::new(arena);\n         let common_types = CommonTypes::new("}, {"sha": "5b1a88cb284507ee3d20fd9b23f1a47305057f7f", "filename": "compiler/rustc_mir_dataflow/src/errors.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_mir_dataflow%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_mir_dataflow%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Ferrors.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,69 +1,69 @@\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::Diagnostic;\n use rustc_span::{Span, Symbol};\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(mir_dataflow::path_must_end_in_filename)]\n pub(crate) struct PathMustEndInFilename {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(mir_dataflow::unknown_formatter)]\n pub(crate) struct UnknownFormatter {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(mir_dataflow::duplicate_values_for)]\n pub(crate) struct DuplicateValuesFor {\n     #[primary_span]\n     pub span: Span,\n     pub name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(mir_dataflow::requires_an_argument)]\n pub(crate) struct RequiresAnArgument {\n     #[primary_span]\n     pub span: Span,\n     pub name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(mir_dataflow::stop_after_dataflow_ended_compilation)]\n pub(crate) struct StopAfterDataFlowEndedCompilation;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(mir_dataflow::peek_must_be_place_or_ref_place)]\n pub(crate) struct PeekMustBePlaceOrRefPlace {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(mir_dataflow::peek_must_be_not_temporary)]\n pub(crate) struct PeekMustBeNotTemporary {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(mir_dataflow::peek_bit_not_set)]\n pub(crate) struct PeekBitNotSet {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(mir_dataflow::peek_argument_not_a_local)]\n pub(crate) struct PeekArgumentNotALocal {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(mir_dataflow::peek_argument_untracked)]\n pub(crate) struct PeekArgumentUntracked {\n     #[primary_span]"}, {"sha": "cf6e18c013be8843dfc263dc6ddcbd3d2e413d52", "filename": "compiler/rustc_monomorphize/src/errors.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,11 +1,11 @@\n use std::path::PathBuf;\n \n use rustc_errors::ErrorGuaranteed;\n-use rustc_macros::{LintDiagnostic, SessionDiagnostic};\n-use rustc_session::SessionDiagnostic;\n+use rustc_errors::IntoDiagnostic;\n+use rustc_macros::{Diagnostic, LintDiagnostic};\n use rustc_span::Span;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(monomorphize::recursion_limit)]\n pub struct RecursionLimit {\n     #[primary_span]\n@@ -19,7 +19,7 @@ pub struct RecursionLimit {\n     pub path: PathBuf,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(monomorphize::type_length_limit)]\n #[help(monomorphize::consider_type_length_limit)]\n pub struct TypeLengthLimit {\n@@ -32,7 +32,7 @@ pub struct TypeLengthLimit {\n     pub type_length: usize,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(monomorphize::requires_lang_item)]\n pub struct RequiresLangItem {\n     pub lang_item: String,\n@@ -44,7 +44,7 @@ pub struct UnusedGenericParams {\n     pub param_names: Vec<String>,\n }\n \n-impl SessionDiagnostic<'_> for UnusedGenericParams {\n+impl IntoDiagnostic<'_> for UnusedGenericParams {\n     fn into_diagnostic(\n         self,\n         handler: &'_ rustc_errors::Handler,\n@@ -72,11 +72,11 @@ pub struct LargeAssignmentsLint {\n     pub limit: u64,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(monomorphize::unknown_partition_strategy)]\n pub struct UnknownPartitionStrategy;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(monomorphize::symbol_already_defined)]\n pub struct SymbolAlreadyDefined {\n     #[primary_span]"}, {"sha": "dcea11eadcbf1762368ee47f151d203b8c95f38b", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -20,7 +20,7 @@ use rustc_errors::{\n     fluent, Applicability, DiagnosticBuilder, DiagnosticMessage, Handler, MultiSpan, PResult,\n };\n use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed};\n-use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{Span, SpanSnippetError, DUMMY_SP};\n@@ -242,7 +242,7 @@ impl MultiSugg {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::maybe_report_ambiguous_plus)]\n struct AmbiguousPlus {\n     pub sum_ty: String,\n@@ -251,7 +251,7 @@ struct AmbiguousPlus {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::maybe_recover_from_bad_type_plus, code = \"E0178\")]\n struct BadTypePlus {\n     pub ty: String,\n@@ -261,7 +261,7 @@ struct BadTypePlus {\n     pub sub: BadTypePlusSub,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum BadTypePlusSub {\n     #[suggestion(\n         parser::add_paren,\n@@ -285,7 +285,7 @@ pub enum BadTypePlusSub {\n     },\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::maybe_recover_from_bad_qpath_stage_2)]\n struct BadQPathStage2 {\n     #[primary_span]\n@@ -294,7 +294,7 @@ struct BadQPathStage2 {\n     ty: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::incorrect_semicolon)]\n struct IncorrectSemicolon<'a> {\n     #[primary_span]\n@@ -305,15 +305,15 @@ struct IncorrectSemicolon<'a> {\n     name: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::incorrect_use_of_await)]\n struct IncorrectUseOfAwait {\n     #[primary_span]\n     #[suggestion(parser::parentheses_suggestion, applicability = \"machine-applicable\")]\n     span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::incorrect_use_of_await)]\n struct IncorrectAwait {\n     #[primary_span]\n@@ -324,7 +324,7 @@ struct IncorrectAwait {\n     question_mark: &'static str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::in_in_typo)]\n struct InInTypo {\n     #[primary_span]\n@@ -333,7 +333,7 @@ struct InInTypo {\n     sugg_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::invalid_variable_declaration)]\n pub struct InvalidVariableDeclaration {\n     #[primary_span]\n@@ -342,7 +342,7 @@ pub struct InvalidVariableDeclaration {\n     pub sub: InvalidVariableDeclarationSub,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum InvalidVariableDeclarationSub {\n     #[suggestion(\n         parser::switch_mut_let_order,\n@@ -362,7 +362,7 @@ pub enum InvalidVariableDeclarationSub {\n     UseLetNotVar(#[primary_span] Span),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::invalid_comparison_operator)]\n pub(crate) struct InvalidComparisonOperator {\n     #[primary_span]\n@@ -372,7 +372,7 @@ pub(crate) struct InvalidComparisonOperator {\n     pub sub: InvalidComparisonOperatorSub,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub(crate) enum InvalidComparisonOperatorSub {\n     #[suggestion_short(\n         parser::use_instead,\n@@ -389,7 +389,7 @@ pub(crate) enum InvalidComparisonOperatorSub {\n     Spaceship(#[primary_span] Span),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::invalid_logical_operator)]\n #[note]\n pub(crate) struct InvalidLogicalOperator {\n@@ -400,7 +400,7 @@ pub(crate) struct InvalidLogicalOperator {\n     pub sub: InvalidLogicalOperatorSub,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub(crate) enum InvalidLogicalOperatorSub {\n     #[suggestion_short(\n         parser::use_amp_amp_for_conjunction,\n@@ -416,15 +416,15 @@ pub(crate) enum InvalidLogicalOperatorSub {\n     Disjunction(#[primary_span] Span),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::tilde_is_not_unary_operator)]\n pub(crate) struct TildeAsUnaryOperator(\n     #[primary_span]\n     #[suggestion_short(applicability = \"machine-applicable\", code = \"!\")]\n     pub Span,\n );\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::unexpected_token_after_not)]\n pub(crate) struct NotAsNegationOperator {\n     #[primary_span]\n@@ -434,7 +434,7 @@ pub(crate) struct NotAsNegationOperator {\n     pub sub: NotAsNegationOperatorSub,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum NotAsNegationOperatorSub {\n     #[suggestion_short(\n         parser::unexpected_token_after_not_default,\n@@ -458,7 +458,7 @@ pub enum NotAsNegationOperatorSub {\n     SuggestNotLogical(#[primary_span] Span),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::malformed_loop_label)]\n pub(crate) struct MalformedLoopLabel {\n     #[primary_span]\n@@ -467,7 +467,7 @@ pub(crate) struct MalformedLoopLabel {\n     pub correct_label: Ident,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::lifetime_in_borrow_expression)]\n pub(crate) struct LifetimeInBorrowExpression {\n     #[primary_span]\n@@ -477,23 +477,23 @@ pub(crate) struct LifetimeInBorrowExpression {\n     pub lifetime_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::field_expression_with_generic)]\n pub(crate) struct FieldExpressionWithGeneric(#[primary_span] pub Span);\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::macro_invocation_with_qualified_path)]\n pub(crate) struct MacroInvocationWithQualifiedPath(#[primary_span] pub Span);\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::unexpected_token_after_label)]\n pub(crate) struct UnexpectedTokenAfterLabel(\n     #[primary_span]\n     #[label(parser::unexpected_token_after_label)]\n     pub Span,\n );\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::require_colon_after_labeled_expression)]\n #[note]\n pub(crate) struct RequireColonAfterLabeledExpression {\n@@ -505,7 +505,7 @@ pub(crate) struct RequireColonAfterLabeledExpression {\n     pub label_end: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::do_catch_syntax_removed)]\n #[note]\n pub(crate) struct DoCatchSyntaxRemoved {\n@@ -514,7 +514,7 @@ pub(crate) struct DoCatchSyntaxRemoved {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::float_literal_requires_integer_part)]\n pub(crate) struct FloatLiteralRequiresIntegerPart {\n     #[primary_span]\n@@ -523,7 +523,7 @@ pub(crate) struct FloatLiteralRequiresIntegerPart {\n     pub correct: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::invalid_int_literal_width)]\n #[help]\n pub(crate) struct InvalidIntLiteralWidth {\n@@ -532,7 +532,7 @@ pub(crate) struct InvalidIntLiteralWidth {\n     pub width: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::invalid_num_literal_base_prefix)]\n #[note]\n pub(crate) struct InvalidNumLiteralBasePrefix {\n@@ -542,7 +542,7 @@ pub(crate) struct InvalidNumLiteralBasePrefix {\n     pub fixed: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::invalid_num_literal_suffix)]\n #[help]\n pub(crate) struct InvalidNumLiteralSuffix {\n@@ -552,7 +552,7 @@ pub(crate) struct InvalidNumLiteralSuffix {\n     pub suffix: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::invalid_float_literal_width)]\n #[help]\n pub(crate) struct InvalidFloatLiteralWidth {\n@@ -561,7 +561,7 @@ pub(crate) struct InvalidFloatLiteralWidth {\n     pub width: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::invalid_float_literal_suffix)]\n #[help]\n pub(crate) struct InvalidFloatLiteralSuffix {\n@@ -571,14 +571,14 @@ pub(crate) struct InvalidFloatLiteralSuffix {\n     pub suffix: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::int_literal_too_large)]\n pub(crate) struct IntLiteralTooLarge {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::missing_semicolon_before_array)]\n pub(crate) struct MissingSemicolonBeforeArray {\n     #[primary_span]\n@@ -587,7 +587,7 @@ pub(crate) struct MissingSemicolonBeforeArray {\n     pub semicolon: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::invalid_block_macro_segment)]\n pub(crate) struct InvalidBlockMacroSegment {\n     #[primary_span]\n@@ -596,7 +596,7 @@ pub(crate) struct InvalidBlockMacroSegment {\n     pub context: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::if_expression_missing_then_block)]\n pub(crate) struct IfExpressionMissingThenBlock {\n     #[primary_span]\n@@ -605,15 +605,15 @@ pub(crate) struct IfExpressionMissingThenBlock {\n     pub sub: IfExpressionMissingThenBlockSub,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub(crate) enum IfExpressionMissingThenBlockSub {\n     #[help(parser::condition_possibly_unfinished)]\n     UnfinishedCondition(#[primary_span] Span),\n     #[help(parser::add_then_block)]\n     AddThenBlock(#[primary_span] Span),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::if_expression_missing_condition)]\n pub(crate) struct IfExpressionMissingCondition {\n     #[primary_span]\n@@ -623,14 +623,14 @@ pub(crate) struct IfExpressionMissingCondition {\n     pub block_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::expected_expression_found_let)]\n pub(crate) struct ExpectedExpressionFoundLet {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::expected_else_block)]\n pub(crate) struct ExpectedElseBlock {\n     #[primary_span]\n@@ -642,7 +642,7 @@ pub(crate) struct ExpectedElseBlock {\n     pub condition_start: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::outer_attribute_not_allowed_on_if_else)]\n pub(crate) struct OuterAttributeNotAllowedOnIfElse {\n     #[primary_span]\n@@ -659,7 +659,7 @@ pub(crate) struct OuterAttributeNotAllowedOnIfElse {\n     pub attributes: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::missing_in_in_for_loop)]\n pub(crate) struct MissingInInForLoop {\n     #[primary_span]\n@@ -668,7 +668,7 @@ pub(crate) struct MissingInInForLoop {\n     pub sub: MissingInInForLoopSub,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub(crate) enum MissingInInForLoopSub {\n     // Has been misleading, at least in the past (closed Issue #48492), thus maybe-incorrect\n     #[suggestion_short(parser::use_in_not_of, applicability = \"maybe-incorrect\", code = \"in\")]\n@@ -677,23 +677,23 @@ pub(crate) enum MissingInInForLoopSub {\n     AddIn(#[primary_span] Span),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::missing_comma_after_match_arm)]\n pub(crate) struct MissingCommaAfterMatchArm {\n     #[primary_span]\n     #[suggestion(applicability = \"machine-applicable\", code = \",\")]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::catch_after_try)]\n #[help]\n pub(crate) struct CatchAfterTry {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::comma_after_base_struct)]\n #[note]\n pub(crate) struct CommaAfterBaseStruct {\n@@ -703,7 +703,7 @@ pub(crate) struct CommaAfterBaseStruct {\n     pub comma: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::eq_field_init)]\n pub(crate) struct EqFieldInit {\n     #[primary_span]\n@@ -712,7 +712,7 @@ pub(crate) struct EqFieldInit {\n     pub eq: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::dotdotdot)]\n pub(crate) struct DotDotDot {\n     #[primary_span]\n@@ -721,23 +721,23 @@ pub(crate) struct DotDotDot {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::left_arrow_operator)]\n pub(crate) struct LeftArrowOperator {\n     #[primary_span]\n     #[suggestion(applicability = \"maybe-incorrect\", code = \"< -\")]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::remove_let)]\n pub(crate) struct RemoveLet {\n     #[primary_span]\n     #[suggestion(applicability = \"machine-applicable\", code = \"\")]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::use_eq_instead)]\n pub(crate) struct UseEqInstead {\n     #[primary_span]"}, {"sha": "ae77961b7bc28f7855a6230f24e9f28ad0248509", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -36,10 +36,10 @@ use rustc_ast::{AnonConst, BinOp, BinOpKind, FnDecl, FnRetTy, MacCall, Param, Ty\n use rustc_ast::{Arm, Async, BlockCheckMode, Expr, ExprKind, Label, Movability, RangeLimits};\n use rustc_ast::{ClosureBinder, StmtKind};\n use rustc_ast_pretty::pprust;\n+use rustc_errors::IntoDiagnostic;\n use rustc_errors::{Applicability, Diagnostic, PResult};\n use rustc_session::lint::builtin::BREAK_WITH_LABEL_AND_LOOP;\n use rustc_session::lint::BuiltinLintDiagnostics;\n-use rustc_session::SessionDiagnostic;\n use rustc_span::source_map::{self, Span, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, Pos};"}, {"sha": "be67c9e3b82d9a6ee594d97329fd37a2ca126dc2", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,5 +1,5 @@\n use rustc_errors::{Applicability, MultiSpan};\n-use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n use rustc_span::{Span, Symbol};\n \n #[derive(LintDiagnostic)]\n@@ -32,7 +32,7 @@ pub struct IgnoredInlineAttrFnProto;\n #[note]\n pub struct IgnoredInlineAttrConstants;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::inline_not_fn_or_closure, code = \"E0518\")]\n pub struct InlineNotFnOrClosure {\n     #[primary_span]\n@@ -53,7 +53,7 @@ pub struct IgnoredNoCoveragePropagate;\n #[diag(passes::no_coverage_fn_defn)]\n pub struct IgnoredNoCoverageFnDefn;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::no_coverage_not_coverable, code = \"E0788\")]\n pub struct IgnoredNoCoverageNotCoverable {\n     #[primary_span]\n@@ -62,7 +62,7 @@ pub struct IgnoredNoCoverageNotCoverable {\n     pub defn_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::should_be_applied_to_fn)]\n pub struct AttrShouldBeAppliedToFn {\n     #[primary_span]\n@@ -71,14 +71,14 @@ pub struct AttrShouldBeAppliedToFn {\n     pub defn_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::naked_tracked_caller, code = \"E0736\")]\n pub struct NakedTrackedCaller {\n     #[primary_span]\n     pub attr_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::should_be_applied_to_fn, code = \"E0739\")]\n pub struct TrackedCallerWrongLocation {\n     #[primary_span]\n@@ -87,7 +87,7 @@ pub struct TrackedCallerWrongLocation {\n     pub defn_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::should_be_applied_to_struct_enum, code = \"E0701\")]\n pub struct NonExhaustiveWrongLocation {\n     #[primary_span]\n@@ -96,7 +96,7 @@ pub struct NonExhaustiveWrongLocation {\n     pub defn_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::should_be_applied_to_trait)]\n pub struct AttrShouldBeAppliedToTrait {\n     #[primary_span]\n@@ -109,7 +109,7 @@ pub struct AttrShouldBeAppliedToTrait {\n #[diag(passes::target_feature_on_statement)]\n pub struct TargetFeatureOnStatement;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::should_be_applied_to_static)]\n pub struct AttrShouldBeAppliedToStatic {\n     #[primary_span]\n@@ -118,23 +118,23 @@ pub struct AttrShouldBeAppliedToStatic {\n     pub defn_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::doc_expect_str)]\n pub struct DocExpectStr<'a> {\n     #[primary_span]\n     pub attr_span: Span,\n     pub attr_name: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::doc_alias_empty)]\n pub struct DocAliasEmpty<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub attr_str: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::doc_alias_bad_char)]\n pub struct DocAliasBadChar<'a> {\n     #[primary_span]\n@@ -143,15 +143,15 @@ pub struct DocAliasBadChar<'a> {\n     pub char_: char,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::doc_alias_start_end)]\n pub struct DocAliasStartEnd<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub attr_str: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::doc_alias_bad_location)]\n pub struct DocAliasBadLocation<'a> {\n     #[primary_span]\n@@ -160,7 +160,7 @@ pub struct DocAliasBadLocation<'a> {\n     pub location: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::doc_alias_not_an_alias)]\n pub struct DocAliasNotAnAlias<'a> {\n     #[primary_span]\n@@ -175,57 +175,57 @@ pub struct DocAliasDuplicated {\n     pub first_defn: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::doc_alias_not_string_literal)]\n pub struct DocAliasNotStringLiteral {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::doc_alias_malformed)]\n pub struct DocAliasMalformed {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::doc_keyword_empty_mod)]\n pub struct DocKeywordEmptyMod {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::doc_keyword_not_mod)]\n pub struct DocKeywordNotMod {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::doc_keyword_invalid_ident)]\n pub struct DocKeywordInvalidIdent {\n     #[primary_span]\n     pub span: Span,\n     pub doc_keyword: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::doc_fake_variadic_not_valid)]\n pub struct DocFakeVariadicNotValid {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::doc_keyword_only_impl)]\n pub struct DocKeywordOnlyImpl {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::doc_inline_conflict)]\n #[help]\n pub struct DocKeywordConflict {\n@@ -243,7 +243,7 @@ pub struct DocInlineOnlyUse {\n     pub item_span: Option<Span>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::doc_attr_not_crate_level)]\n pub struct DocAttrNotCrateLevel<'a> {\n     #[primary_span]\n@@ -295,7 +295,7 @@ pub struct DocTestUnknownInclude {\n #[diag(passes::doc_invalid)]\n pub struct DocInvalid;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::pass_by_value)]\n pub struct PassByValue {\n     #[primary_span]\n@@ -304,7 +304,7 @@ pub struct PassByValue {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::allow_incoherent_impl)]\n pub struct AllowIncoherentImpl {\n     #[primary_span]\n@@ -313,7 +313,7 @@ pub struct AllowIncoherentImpl {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::has_incoherent_inherent_impl)]\n pub struct HasIncoherentInherentImpl {\n     #[primary_span]\n@@ -336,7 +336,7 @@ pub struct MustUseNoEffect {\n     pub target: rustc_hir::Target,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::must_not_suspend)]\n pub struct MustNotSuspend {\n     #[primary_span]\n@@ -372,7 +372,7 @@ pub struct LinkName<'a> {\n     pub value: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::no_link)]\n pub struct NoLink {\n     #[primary_span]\n@@ -381,7 +381,7 @@ pub struct NoLink {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::export_name)]\n pub struct ExportName {\n     #[primary_span]\n@@ -390,7 +390,7 @@ pub struct ExportName {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::rustc_layout_scalar_valid_range_not_struct)]\n pub struct RustcLayoutScalarValidRangeNotStruct {\n     #[primary_span]\n@@ -399,14 +399,14 @@ pub struct RustcLayoutScalarValidRangeNotStruct {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::rustc_layout_scalar_valid_range_arg)]\n pub struct RustcLayoutScalarValidRangeArg {\n     #[primary_span]\n     pub attr_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::rustc_legacy_const_generics_only)]\n pub struct RustcLegacyConstGenericsOnly {\n     #[primary_span]\n@@ -415,7 +415,7 @@ pub struct RustcLegacyConstGenericsOnly {\n     pub param_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::rustc_legacy_const_generics_index)]\n pub struct RustcLegacyConstGenericsIndex {\n     #[primary_span]\n@@ -424,7 +424,7 @@ pub struct RustcLegacyConstGenericsIndex {\n     pub generics_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::rustc_legacy_const_generics_index_exceed)]\n pub struct RustcLegacyConstGenericsIndexExceed {\n     #[primary_span]\n@@ -433,14 +433,14 @@ pub struct RustcLegacyConstGenericsIndexExceed {\n     pub arg_count: usize,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::rustc_legacy_const_generics_index_negative)]\n pub struct RustcLegacyConstGenericsIndexNegative {\n     #[primary_span]\n     pub invalid_args: Vec<Span>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::rustc_dirty_clean)]\n pub struct RustcDirtyClean {\n     #[primary_span]\n@@ -475,7 +475,7 @@ pub struct NoMangle {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::repr_ident, code = \"E0565\")]\n pub struct ReprIdent {\n     #[primary_span]\n@@ -486,21 +486,21 @@ pub struct ReprIdent {\n #[diag(passes::repr_conflicting, code = \"E0566\")]\n pub struct ReprConflicting;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::used_static)]\n pub struct UsedStatic {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::used_compiler_linker)]\n pub struct UsedCompilerLinker {\n     #[primary_span]\n     pub spans: Vec<Span>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::allow_internal_unstable)]\n pub struct AllowInternalUnstable {\n     #[primary_span]\n@@ -509,14 +509,14 @@ pub struct AllowInternalUnstable {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::debug_visualizer_placement)]\n pub struct DebugVisualizerPlacement {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::debug_visualizer_invalid)]\n #[note(passes::note_1)]\n #[note(passes::note_2)]\n@@ -526,7 +526,7 @@ pub struct DebugVisualizerInvalid {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::rustc_allow_const_fn_unstable)]\n pub struct RustcAllowConstFnUnstable {\n     #[primary_span]\n@@ -535,7 +535,7 @@ pub struct RustcAllowConstFnUnstable {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::rustc_std_internal_symbol)]\n pub struct RustcStdInternalSymbol {\n     #[primary_span]\n@@ -544,21 +544,21 @@ pub struct RustcStdInternalSymbol {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::const_trait)]\n pub struct ConstTrait {\n     #[primary_span]\n     pub attr_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::link_ordinal)]\n pub struct LinkOrdinal {\n     #[primary_span]\n     pub attr_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::stability_promotable)]\n pub struct StabilityPromotable {\n     #[primary_span]\n@@ -583,7 +583,7 @@ pub struct MacroExport;\n #[diag(passes::plugin_registrar)]\n pub struct PluginRegistrar;\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum UnusedNote {\n     #[note(passes::unused_empty_lints_note)]\n     EmptyList { name: Symbol },\n@@ -602,7 +602,7 @@ pub struct Unused {\n     pub note: UnusedNote,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::non_exported_macro_invalid_attrs, code = \"E0518\")]\n pub struct NonExportedMacroInvalidAttrs {\n     #[primary_span]\n@@ -621,7 +621,7 @@ pub struct UnusedDuplicate {\n     pub warning: Option<()>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::unused_multiple)]\n pub struct UnusedMultiple {\n     #[primary_span]\n@@ -632,7 +632,7 @@ pub struct UnusedMultiple {\n     pub name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::rustc_lint_opt_ty)]\n pub struct RustcLintOptTy {\n     #[primary_span]\n@@ -641,7 +641,7 @@ pub struct RustcLintOptTy {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::rustc_lint_opt_deny_field_access)]\n pub struct RustcLintOptDenyFieldAccess {\n     #[primary_span]\n@@ -650,7 +650,7 @@ pub struct RustcLintOptDenyFieldAccess {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::collapse_debuginfo)]\n pub struct CollapseDebuginfo {\n     #[primary_span]"}, {"sha": "07ce92a9b2611fcb9e15bca962955baaa8c52617", "filename": "compiler/rustc_plugin_impl/src/errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_plugin_impl%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_plugin_impl%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_plugin_impl%2Fsrc%2Ferrors.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,17 +1,17 @@\n //! Errors emitted by plugin_impl\n \n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::Diagnostic;\n use rustc_span::Span;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(plugin_impl::load_plugin_error)]\n pub struct LoadPluginError {\n     #[primary_span]\n     pub span: Span,\n     pub msg: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(plugin_impl::malformed_plugin_attribute, code = \"E0498\")]\n pub struct MalformedPluginAttribute {\n     #[primary_span]"}, {"sha": "f3a617c2f0fa1746067e62f8ab680e384c608c5f", "filename": "compiler/rustc_privacy/src/errors.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,8 +1,8 @@\n use rustc_errors::DiagnosticArgFromDisplay;\n-use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n use rustc_span::{Span, Symbol};\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(privacy::field_is_private, code = \"E0451\")]\n pub struct FieldIsPrivate {\n     #[primary_span]\n@@ -14,7 +14,7 @@ pub struct FieldIsPrivate {\n     pub label: FieldIsPrivateLabel,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum FieldIsPrivateLabel {\n     #[label(privacy::field_is_private_is_update_syntax_label)]\n     IsUpdateSyntax {\n@@ -29,7 +29,7 @@ pub enum FieldIsPrivateLabel {\n     },\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(privacy::item_is_private)]\n pub struct ItemIsPrivate<'a> {\n     #[primary_span]\n@@ -39,7 +39,7 @@ pub struct ItemIsPrivate<'a> {\n     pub descr: DiagnosticArgFromDisplay<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(privacy::unnamed_item_is_private)]\n pub struct UnnamedItemIsPrivate {\n     #[primary_span]\n@@ -48,7 +48,7 @@ pub struct UnnamedItemIsPrivate {\n }\n \n // Duplicate of `InPublicInterface` but with a different error code, shares the same slug.\n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(privacy::in_public_interface, code = \"E0445\")]\n pub struct InPublicInterfaceTraits<'a> {\n     #[primary_span]\n@@ -62,7 +62,7 @@ pub struct InPublicInterfaceTraits<'a> {\n }\n \n // Duplicate of `InPublicInterfaceTraits` but with a different error code, shares the same slug.\n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(privacy::in_public_interface, code = \"E0446\")]\n pub struct InPublicInterface<'a> {\n     #[primary_span]\n@@ -75,7 +75,7 @@ pub struct InPublicInterface<'a> {\n     pub vis_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(privacy::report_effective_visibility)]\n pub struct ReportEffectiveVisibility {\n     #[primary_span]"}, {"sha": "8602a4cf5aef2ec236126215a5025c44fa6ffeb5", "filename": "compiler/rustc_query_system/src/error.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,4 +1,5 @@\n-use rustc_errors::AddSubdiagnostic;\n+use rustc_errors::AddToDiagnostic;\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_session::Limit;\n use rustc_span::{Span, Symbol};\n \n@@ -7,7 +8,7 @@ pub struct CycleStack {\n     pub desc: String,\n }\n \n-impl AddSubdiagnostic for CycleStack {\n+impl AddToDiagnostic for CycleStack {\n     fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n         diag.span_note(self.span, &format!(\"...which requires {}...\", self.desc));\n     }\n@@ -20,15 +21,15 @@ pub enum HandleCycleError {\n     DelayBug,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum StackCount {\n     #[note(query_system::cycle_stack_single)]\n     Single,\n     #[note(query_system::cycle_stack_multiple)]\n     Multiple,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum Alias {\n     #[note(query_system::cycle_recursive_ty_alias)]\n     #[help(query_system::cycle_recursive_ty_alias_help1)]\n@@ -38,15 +39,15 @@ pub enum Alias {\n     Trait,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[note(query_system::cycle_usage)]\n pub struct CycleUsage {\n     #[primary_span]\n     pub span: Span,\n     pub usage: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(query_system::cycle, code = \"E0391\")]\n pub struct Cycle {\n     #[primary_span]\n@@ -62,11 +63,11 @@ pub struct Cycle {\n     pub cycle_usage: Option<CycleUsage>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(query_system::reentrant)]\n pub struct Reentrant;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(query_system::increment_compilation)]\n #[help]\n #[note(query_system::increment_compilation_note1)]\n@@ -76,7 +77,7 @@ pub struct IncrementCompilation {\n     pub dep_node: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[help]\n #[diag(query_system::query_overflow)]\n pub struct QueryOverflow {\n@@ -88,7 +89,7 @@ pub struct QueryOverflow {\n     pub crate_name: Symbol,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[note(query_system::layout_of_depth)]\n pub struct LayoutOfDepth {\n     pub desc: String,"}, {"sha": "64aba4703ca3a92e6a0cfa9315e5f93788e43c98", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -3,9 +3,11 @@ use crate::query::plumbing::CycleError;\n use crate::query::{QueryContext, QueryStackFrame};\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{Diagnostic, DiagnosticBuilder, ErrorGuaranteed, Handler, Level};\n+use rustc_errors::{\n+    Diagnostic, DiagnosticBuilder, ErrorGuaranteed, Handler, IntoDiagnostic, Level,\n+};\n use rustc_hir::def::DefKind;\n-use rustc_session::{Session, SessionDiagnostic};\n+use rustc_session::Session;\n use rustc_span::Span;\n \n use std::hash::Hash;"}, {"sha": "8a15ba63661bcc62f5752cefaedb3d3489336968", "filename": "compiler/rustc_save_analysis/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_save_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_save_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Ferrors.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,8 +1,8 @@\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::Diagnostic;\n \n use std::path::Path;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(save_analysis::could_not_open)]\n pub(crate) struct CouldNotOpen<'a> {\n     pub file_name: &'a Path,"}, {"sha": "57c9a3f4822dcbc050fc9bed09f880f6f5d0a362", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -3,6 +3,7 @@\n \n pub use crate::options::*;\n \n+use crate::errors::TargetDataLayoutErrorsWrapper;\n use crate::search_paths::SearchPath;\n use crate::utils::{CanonicalizedPath, NativeLib, NativeLibKind};\n use crate::{early_error, early_warn, Session};\n@@ -898,7 +899,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     let max_atomic_width = sess.target.max_atomic_width();\n     let atomic_cas = sess.target.atomic_cas;\n     let layout = TargetDataLayout::parse(&sess.target).unwrap_or_else(|err| {\n-        sess.emit_fatal(err);\n+        sess.emit_fatal(TargetDataLayoutErrorsWrapper(err));\n     });\n \n     let mut ret = CrateConfig::default();"}, {"sha": "e01dafe2102b87e7b30d43ca52749460554c863b", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,14 +1,15 @@\n use std::num::NonZeroU32;\n \n use crate::cgu_reuse_tracker::CguReuse;\n-use crate::{self as rustc_session, SessionDiagnostic};\n-use rustc_errors::{fluent, DiagnosticBuilder, ErrorGuaranteed, Handler, MultiSpan};\n-use rustc_macros::SessionDiagnostic;\n+use rustc_errors::{\n+    fluent, DiagnosticBuilder, ErrorGuaranteed, Handler, IntoDiagnostic, MultiSpan,\n+};\n+use rustc_macros::Diagnostic;\n use rustc_span::{Span, Symbol};\n use rustc_target::abi::TargetDataLayoutErrors;\n use rustc_target::spec::{SplitDebuginfo, StackProtector, TargetTriple};\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::incorrect_cgu_reuse_type)]\n pub struct IncorrectCguReuseType<'a> {\n     #[primary_span]\n@@ -19,165 +20,167 @@ pub struct IncorrectCguReuseType<'a> {\n     pub at_least: u8,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::cgu_not_recorded)]\n pub struct CguNotRecorded<'a> {\n     pub cgu_user_name: &'a str,\n     pub cgu_name: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::feature_gate_error, code = \"E0658\")]\n pub struct FeatureGateError<'a> {\n     #[primary_span]\n     pub span: MultiSpan,\n     pub explain: &'a str,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[note(session::feature_diagnostic_for_issue)]\n pub struct FeatureDiagnosticForIssue {\n     pub n: NonZeroU32,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[help(session::feature_diagnostic_help)]\n pub struct FeatureDiagnosticHelp {\n     pub feature: Symbol,\n }\n \n-impl SessionDiagnostic<'_, !> for TargetDataLayoutErrors<'_> {\n-    fn into_diagnostic(self, sess: &Handler) -> DiagnosticBuilder<'_, !> {\n+pub struct TargetDataLayoutErrorsWrapper<'a>(pub TargetDataLayoutErrors<'a>);\n+\n+impl IntoDiagnostic<'_, !> for TargetDataLayoutErrorsWrapper<'_> {\n+    fn into_diagnostic(self, handler: &Handler) -> DiagnosticBuilder<'_, !> {\n         let mut diag;\n-        match self {\n+        match self.0 {\n             TargetDataLayoutErrors::InvalidAddressSpace { addr_space, err, cause } => {\n-                diag = sess.struct_fatal(fluent::session::target_invalid_address_space);\n+                diag = handler.struct_fatal(fluent::session::target_invalid_address_space);\n                 diag.set_arg(\"addr_space\", addr_space);\n                 diag.set_arg(\"cause\", cause);\n                 diag.set_arg(\"err\", err);\n                 diag\n             }\n             TargetDataLayoutErrors::InvalidBits { kind, bit, cause, err } => {\n-                diag = sess.struct_fatal(fluent::session::target_invalid_bits);\n+                diag = handler.struct_fatal(fluent::session::target_invalid_bits);\n                 diag.set_arg(\"kind\", kind);\n                 diag.set_arg(\"bit\", bit);\n                 diag.set_arg(\"cause\", cause);\n                 diag.set_arg(\"err\", err);\n                 diag\n             }\n             TargetDataLayoutErrors::MissingAlignment { cause } => {\n-                diag = sess.struct_fatal(fluent::session::target_missing_alignment);\n+                diag = handler.struct_fatal(fluent::session::target_missing_alignment);\n                 diag.set_arg(\"cause\", cause);\n                 diag\n             }\n             TargetDataLayoutErrors::InvalidAlignment { cause, err } => {\n-                diag = sess.struct_fatal(fluent::session::target_invalid_alignment);\n+                diag = handler.struct_fatal(fluent::session::target_invalid_alignment);\n                 diag.set_arg(\"cause\", cause);\n                 diag.set_arg(\"err\", err);\n                 diag\n             }\n             TargetDataLayoutErrors::InconsistentTargetArchitecture { dl, target } => {\n-                diag = sess.struct_fatal(fluent::session::target_inconsistent_architecture);\n+                diag = handler.struct_fatal(fluent::session::target_inconsistent_architecture);\n                 diag.set_arg(\"dl\", dl);\n                 diag.set_arg(\"target\", target);\n                 diag\n             }\n             TargetDataLayoutErrors::InconsistentTargetPointerWidth { pointer_size, target } => {\n-                diag = sess.struct_fatal(fluent::session::target_inconsistent_pointer_width);\n+                diag = handler.struct_fatal(fluent::session::target_inconsistent_pointer_width);\n                 diag.set_arg(\"pointer_size\", pointer_size);\n                 diag.set_arg(\"target\", target);\n                 diag\n             }\n             TargetDataLayoutErrors::InvalidBitsSize { err } => {\n-                diag = sess.struct_fatal(fluent::session::target_invalid_bits_size);\n+                diag = handler.struct_fatal(fluent::session::target_invalid_bits_size);\n                 diag.set_arg(\"err\", err);\n                 diag\n             }\n         }\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::not_circumvent_feature)]\n pub struct NotCircumventFeature;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::linker_plugin_lto_windows_not_supported)]\n pub struct LinkerPluginToWindowsNotSupported;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::profile_use_file_does_not_exist)]\n pub struct ProfileUseFileDoesNotExist<'a> {\n     pub path: &'a std::path::Path,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::profile_sample_use_file_does_not_exist)]\n pub struct ProfileSampleUseFileDoesNotExist<'a> {\n     pub path: &'a std::path::Path,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::target_requires_unwind_tables)]\n pub struct TargetRequiresUnwindTables;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::sanitizer_not_supported)]\n pub struct SanitizerNotSupported {\n     pub us: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::sanitizers_not_supported)]\n pub struct SanitizersNotSupported {\n     pub us: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::cannot_mix_and_match_sanitizers)]\n pub struct CannotMixAndMatchSanitizers {\n     pub first: String,\n     pub second: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::cannot_enable_crt_static_linux)]\n pub struct CannotEnableCrtStaticLinux;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::sanitizer_cfi_enabled)]\n pub struct SanitizerCfiEnabled;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::unstable_virtual_function_elimination)]\n pub struct UnstableVirtualFunctionElimination;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::unsupported_dwarf_version)]\n pub struct UnsupportedDwarfVersion {\n     pub dwarf_version: u32,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::target_stack_protector_not_supported)]\n pub struct StackProtectorNotSupportedForTarget<'a> {\n     pub stack_protector: StackProtector,\n     pub target_triple: &'a TargetTriple,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::split_debuginfo_unstable_platform)]\n pub struct SplitDebugInfoUnstablePlatform {\n     pub debuginfo: SplitDebuginfo,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::file_is_not_writeable)]\n pub struct FileIsNotWriteable<'a> {\n     pub file: &'a std::path::Path,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::crate_name_does_not_match)]\n pub struct CrateNameDoesNotMatch<'a> {\n     #[primary_span]\n@@ -186,13 +189,13 @@ pub struct CrateNameDoesNotMatch<'a> {\n     pub name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::crate_name_invalid)]\n pub struct CrateNameInvalid<'a> {\n     pub s: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::crate_name_empty)]\n pub struct CrateNameEmpty {\n     #[primary_span]\n@@ -205,11 +208,8 @@ pub struct InvalidCharacterInCrateName<'a> {\n     pub crate_name: &'a str,\n }\n \n-impl crate::SessionDiagnostic<'_> for InvalidCharacterInCrateName<'_> {\n-    fn into_diagnostic(\n-        self,\n-        sess: &Handler,\n-    ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n+impl IntoDiagnostic<'_> for InvalidCharacterInCrateName<'_> {\n+    fn into_diagnostic(self, sess: &Handler) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         let mut diag = sess.struct_err(fluent::session::invalid_character_in_create_name);\n         if let Some(sp) = self.span {\n             diag.set_span(sp);"}, {"sha": "b9202af2a6765c432e3cf5728d2888bbc5922540", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -6,14 +6,13 @@ use crate::errors::{FeatureDiagnosticForIssue, FeatureDiagnosticHelp, FeatureGat\n use crate::lint::{\n     builtin::UNSTABLE_SYNTAX_PRE_EXPANSION, BufferedEarlyLint, BuiltinLintDiagnostics, Lint, LintId,\n };\n-use crate::SessionDiagnostic;\n use rustc_ast::node_id::NodeId;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n use rustc_errors::{\n     fallback_fluent_bundle, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId,\n-    DiagnosticMessage, EmissionGuarantee, ErrorGuaranteed, MultiSpan, StashKey,\n+    DiagnosticMessage, EmissionGuarantee, ErrorGuaranteed, IntoDiagnostic, MultiSpan, StashKey,\n };\n use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};\n use rustc_span::edition::Edition;\n@@ -345,34 +344,34 @@ impl ParseSess {\n \n     pub fn create_err<'a>(\n         &'a self,\n-        err: impl SessionDiagnostic<'a>,\n+        err: impl IntoDiagnostic<'a>,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         err.into_diagnostic(&self.span_diagnostic)\n     }\n \n-    pub fn emit_err<'a>(&'a self, err: impl SessionDiagnostic<'a>) -> ErrorGuaranteed {\n+    pub fn emit_err<'a>(&'a self, err: impl IntoDiagnostic<'a>) -> ErrorGuaranteed {\n         self.create_err(err).emit()\n     }\n \n     pub fn create_warning<'a>(\n         &'a self,\n-        warning: impl SessionDiagnostic<'a, ()>,\n+        warning: impl IntoDiagnostic<'a, ()>,\n     ) -> DiagnosticBuilder<'a, ()> {\n         warning.into_diagnostic(&self.span_diagnostic)\n     }\n \n-    pub fn emit_warning<'a>(&'a self, warning: impl SessionDiagnostic<'a, ()>) {\n+    pub fn emit_warning<'a>(&'a self, warning: impl IntoDiagnostic<'a, ()>) {\n         self.create_warning(warning).emit()\n     }\n \n     pub fn create_fatal<'a>(\n         &'a self,\n-        fatal: impl SessionDiagnostic<'a, !>,\n+        fatal: impl IntoDiagnostic<'a, !>,\n     ) -> DiagnosticBuilder<'a, !> {\n         fatal.into_diagnostic(&self.span_diagnostic)\n     }\n \n-    pub fn emit_fatal<'a>(&'a self, fatal: impl SessionDiagnostic<'a, !>) -> ! {\n+    pub fn emit_fatal<'a>(&'a self, fatal: impl IntoDiagnostic<'a, !>) -> ! {\n         self.create_fatal(fatal).emit()\n     }\n "}, {"sha": "0142e98176633495abcdaad3f41ae4d45b4e806f", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -28,7 +28,7 @@ use rustc_errors::json::JsonEmitter;\n use rustc_errors::registry::Registry;\n use rustc_errors::{\n     error_code, fallback_fluent_bundle, DiagnosticBuilder, DiagnosticId, DiagnosticMessage,\n-    EmissionGuarantee, ErrorGuaranteed, FluentBundle, Handler, LazyFallbackBundle, MultiSpan,\n+    ErrorGuaranteed, FluentBundle, IntoDiagnostic, LazyFallbackBundle, MultiSpan,\n };\n use rustc_macros::HashStable_Generic;\n pub use rustc_span::def_id::StableCrateId;\n@@ -223,15 +223,6 @@ pub struct PerfStats {\n     pub normalize_projection_ty: AtomicUsize,\n }\n \n-/// Trait implemented by error types. This should not be implemented manually. Instead, use\n-/// `#[derive(SessionDiagnostic)]` -- see [rustc_macros::SessionDiagnostic].\n-#[rustc_diagnostic_item = \"SessionDiagnostic\"]\n-pub trait SessionDiagnostic<'a, T: EmissionGuarantee = ErrorGuaranteed> {\n-    /// Write out as a diagnostic out of `Handler`.\n-    #[must_use]\n-    fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, T>;\n-}\n-\n impl Session {\n     pub fn miri_unleashed_feature(&self, span: Span, feature_gate: Option<Symbol>) {\n         self.miri_unleashed_features.lock().push((span, feature_gate));\n@@ -514,13 +505,13 @@ impl Session {\n     }\n     pub fn create_err<'a>(\n         &'a self,\n-        err: impl SessionDiagnostic<'a>,\n+        err: impl IntoDiagnostic<'a>,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         self.parse_sess.create_err(err)\n     }\n     pub fn create_feature_err<'a>(\n         &'a self,\n-        err: impl SessionDiagnostic<'a>,\n+        err: impl IntoDiagnostic<'a>,\n         feature: Symbol,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let mut err = self.parse_sess.create_err(err);\n@@ -530,25 +521,25 @@ impl Session {\n         add_feature_diagnostics(&mut err, &self.parse_sess, feature);\n         err\n     }\n-    pub fn emit_err<'a>(&'a self, err: impl SessionDiagnostic<'a>) -> ErrorGuaranteed {\n+    pub fn emit_err<'a>(&'a self, err: impl IntoDiagnostic<'a>) -> ErrorGuaranteed {\n         self.parse_sess.emit_err(err)\n     }\n     pub fn create_warning<'a>(\n         &'a self,\n-        err: impl SessionDiagnostic<'a, ()>,\n+        err: impl IntoDiagnostic<'a, ()>,\n     ) -> DiagnosticBuilder<'a, ()> {\n         self.parse_sess.create_warning(err)\n     }\n-    pub fn emit_warning<'a>(&'a self, warning: impl SessionDiagnostic<'a, ()>) {\n+    pub fn emit_warning<'a>(&'a self, warning: impl IntoDiagnostic<'a, ()>) {\n         self.parse_sess.emit_warning(warning)\n     }\n     pub fn create_fatal<'a>(\n         &'a self,\n-        fatal: impl SessionDiagnostic<'a, !>,\n+        fatal: impl IntoDiagnostic<'a, !>,\n     ) -> DiagnosticBuilder<'a, !> {\n         self.parse_sess.create_fatal(fatal)\n     }\n-    pub fn emit_fatal<'a>(&'a self, fatal: impl SessionDiagnostic<'a, !>) -> ! {\n+    pub fn emit_fatal<'a>(&'a self, fatal: impl IntoDiagnostic<'a, !>) -> ! {\n         self.parse_sess.emit_fatal(fatal)\n     }\n     #[inline]"}, {"sha": "7785d29c15f2cd1ab37bb57ebf417b1ca2b60479", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -125,7 +125,7 @@ symbols! {\n     Symbols {\n         AcqRel,\n         Acquire,\n-        AddSubdiagnostic,\n+        AddToDiagnostic,\n         Alignment,\n         Any,\n         Arc,\n@@ -210,6 +210,7 @@ symbols! {\n         Implied,\n         Input,\n         Into,\n+        IntoDiagnostic,\n         IntoFuture,\n         IntoIterator,\n         IoRead,\n@@ -277,7 +278,6 @@ symbols! {\n         RwLockWriteGuard,\n         Send,\n         SeqCst,\n-        SessionDiagnostic,\n         SliceIndex,\n         Some,\n         String,"}, {"sha": "eb487a03c93a8a9377f70882b85c5133cf266b92", "filename": "compiler/rustc_symbol_mangling/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_symbol_mangling%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_symbol_mangling%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ferrors.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,10 +1,10 @@\n //! Errors emitted by symbol_mangling.\n \n use rustc_errors::{DiagnosticArgValue, IntoDiagnosticArg};\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::Diagnostic;\n use rustc_span::Span;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(symbol_mangling::test_output)]\n pub struct TestOutput {\n     #[primary_span]"}, {"sha": "5e1b80eae393a9c86bd7fdf7c1f1e369fd5a42dd", "filename": "compiler/rustc_trait_selection/src/errors.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,10 +1,10 @@\n-use rustc_errors::{fluent, ErrorGuaranteed, Handler};\n-use rustc_macros::SessionDiagnostic;\n+use rustc_errors::{fluent, ErrorGuaranteed, Handler, IntoDiagnostic};\n+use rustc_macros::Diagnostic;\n use rustc_middle::ty::{PolyTraitRef, Ty, Unevaluated};\n-use rustc_session::{Limit, SessionDiagnostic};\n+use rustc_session::Limit;\n use rustc_span::{Span, Symbol};\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(trait_selection::dump_vtable_entries)]\n pub struct DumpVTableEntries<'a> {\n     #[primary_span]\n@@ -13,15 +13,15 @@ pub struct DumpVTableEntries<'a> {\n     pub entries: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(trait_selection::unable_to_construct_constant_value)]\n pub struct UnableToConstructConstantValue<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub unevaluated: Unevaluated<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[help]\n #[diag(trait_selection::auto_deref_reached_recursion_limit, code = \"E0055\")]\n pub struct AutoDerefReachedRecursionLimit<'a> {\n@@ -33,23 +33,23 @@ pub struct AutoDerefReachedRecursionLimit<'a> {\n     pub crate_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(trait_selection::empty_on_clause_in_rustc_on_unimplemented, code = \"E0232\")]\n pub struct EmptyOnClauseInOnUnimplemented {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(trait_selection::invalid_on_clause_in_rustc_on_unimplemented, code = \"E0232\")]\n pub struct InvalidOnClauseInOnUnimplemented {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(trait_selection::no_value_in_rustc_on_unimplemented, code = \"E0232\")]\n #[note]\n pub struct NoValueInOnUnimplemented {\n@@ -66,7 +66,7 @@ pub struct NegativePositiveConflict<'a> {\n     pub positive_impl_span: Result<Span, Symbol>,\n }\n \n-impl SessionDiagnostic<'_> for NegativePositiveConflict<'_> {\n+impl IntoDiagnostic<'_> for NegativePositiveConflict<'_> {\n     fn into_diagnostic(\n         self,\n         handler: &Handler,"}, {"sha": "753c474a34bca365f608f4e0533139029e81a61f", "filename": "compiler/rustc_ty_utils/src/errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,16 +1,16 @@\n //! Errors emitted by ty_utils\n \n-use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_span::Span;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ty_utils::needs_drop_overflow)]\n pub struct NeedsDropOverflow<'tcx> {\n     pub query_ty: Ty<'tcx>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ty_utils::generic_constant_too_complex)]\n #[help]\n pub struct GenericConstantTooComplex {\n@@ -22,7 +22,7 @@ pub struct GenericConstantTooComplex {\n     pub sub: GenericConstantTooComplexSub,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum GenericConstantTooComplexSub {\n     #[label(ty_utils::borrow_not_supported)]\n     BorrowNotSupported(#[primary_span] Span),"}, {"sha": "23fadff3248c85ab0f92e29a572037886624c4de", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -881,7 +881,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return;\n         }\n \n-        // FIXME: Make this use SessionDiagnostic once error codes can be dynamically set.\n+        // FIXME: Make this use Diagnostic once error codes can be dynamically set.\n         let mut err = self.tcx.sess.struct_span_err_with_code(\n             op_span,\n             \"invalid left-hand side of assignment\","}, {"sha": "44df47e2fa00c47ec15b3f0fd5caf4bc92172322", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,11 +1,11 @@\n //! Errors emitted by typeck.\n+use rustc_errors::IntoDiagnostic;\n use rustc_errors::{error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, Handler};\n-use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n use rustc_middle::ty::Ty;\n-use rustc_session::SessionDiagnostic;\n use rustc_span::{symbol::Ident, Span, Symbol};\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::field_multiply_specified_in_initializer, code = \"E0062\")]\n pub struct FieldMultiplySpecifiedInInitializer {\n     #[primary_span]\n@@ -16,7 +16,7 @@ pub struct FieldMultiplySpecifiedInInitializer {\n     pub ident: Ident,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::unrecognized_atomic_operation, code = \"E0092\")]\n pub struct UnrecognizedAtomicOperation<'a> {\n     #[primary_span]\n@@ -25,7 +25,7 @@ pub struct UnrecognizedAtomicOperation<'a> {\n     pub op: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::wrong_number_of_generic_arguments_to_intrinsic, code = \"E0094\")]\n pub struct WrongNumberOfGenericArgumentsToIntrinsic<'a> {\n     #[primary_span]\n@@ -36,7 +36,7 @@ pub struct WrongNumberOfGenericArgumentsToIntrinsic<'a> {\n     pub descr: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::unrecognized_intrinsic_function, code = \"E0093\")]\n pub struct UnrecognizedIntrinsicFunction {\n     #[primary_span]\n@@ -45,7 +45,7 @@ pub struct UnrecognizedIntrinsicFunction {\n     pub name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::lifetimes_or_bounds_mismatch_on_trait, code = \"E0195\")]\n pub struct LifetimesOrBoundsMismatchOnTrait {\n     #[primary_span]\n@@ -57,15 +57,15 @@ pub struct LifetimesOrBoundsMismatchOnTrait {\n     pub ident: Ident,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::drop_impl_on_wrong_item, code = \"E0120\")]\n pub struct DropImplOnWrongItem {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::field_already_declared, code = \"E0124\")]\n pub struct FieldAlreadyDeclared {\n     pub field_name: Ident,\n@@ -76,30 +76,30 @@ pub struct FieldAlreadyDeclared {\n     pub prev_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::copy_impl_on_type_with_dtor, code = \"E0184\")]\n pub struct CopyImplOnTypeWithDtor {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::multiple_relaxed_default_bounds, code = \"E0203\")]\n pub struct MultipleRelaxedDefaultBounds {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::copy_impl_on_non_adt, code = \"E0206\")]\n pub struct CopyImplOnNonAdt {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::trait_object_declared_with_no_traits, code = \"E0224\")]\n pub struct TraitObjectDeclaredWithNoTraits {\n     #[primary_span]\n@@ -108,29 +108,29 @@ pub struct TraitObjectDeclaredWithNoTraits {\n     pub trait_alias_span: Option<Span>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0227\")]\n pub struct AmbiguousLifetimeBound {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::assoc_type_binding_not_allowed, code = \"E0229\")]\n pub struct AssocTypeBindingNotAllowed {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::functional_record_update_on_non_struct, code = \"E0436\")]\n pub struct FunctionalRecordUpdateOnNonStruct {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::typeof_reserved_keyword_used, code = \"E0516\")]\n pub struct TypeofReservedKeywordUsed<'tcx> {\n     pub ty: Ty<'tcx>,\n@@ -141,7 +141,7 @@ pub struct TypeofReservedKeywordUsed<'tcx> {\n     pub opt_sugg: Option<(Span, Applicability)>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::return_stmt_outside_of_fn_body, code = \"E0572\")]\n pub struct ReturnStmtOutsideOfFnBody {\n     #[primary_span]\n@@ -152,29 +152,29 @@ pub struct ReturnStmtOutsideOfFnBody {\n     pub encl_fn_span: Option<Span>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::yield_expr_outside_of_generator, code = \"E0627\")]\n pub struct YieldExprOutsideOfGenerator {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::struct_expr_non_exhaustive, code = \"E0639\")]\n pub struct StructExprNonExhaustive {\n     #[primary_span]\n     pub span: Span,\n     pub what: &'static str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::method_call_on_unknown_type, code = \"E0699\")]\n pub struct MethodCallOnUnknownType {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::value_of_associated_struct_already_specified, code = \"E0719\")]\n pub struct ValueOfAssociatedStructAlreadySpecified {\n     #[primary_span]\n@@ -186,15 +186,15 @@ pub struct ValueOfAssociatedStructAlreadySpecified {\n     pub def_path: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::address_of_temporary_taken, code = \"E0745\")]\n pub struct AddressOfTemporaryTaken {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum AddReturnTypeSuggestion {\n     #[suggestion(\n         typeck::add_return_type_add,\n@@ -217,7 +217,7 @@ pub enum AddReturnTypeSuggestion {\n     },\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum ExpectedReturnTypeLabel<'tcx> {\n     #[label(typeck::expected_default_return_type)]\n     Unit {\n@@ -232,7 +232,7 @@ pub enum ExpectedReturnTypeLabel<'tcx> {\n     },\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::unconstrained_opaque_type)]\n #[note]\n pub struct UnconstrainedOpaqueType {\n@@ -249,8 +249,8 @@ pub struct MissingTypeParams {\n     pub empty_generic_args: bool,\n }\n \n-// Manual implementation of `SessionDiagnostic` to be able to call `span_to_snippet`.\n-impl<'a> SessionDiagnostic<'a> for MissingTypeParams {\n+// Manual implementation of `IntoDiagnostic` to be able to call `span_to_snippet`.\n+impl<'a> IntoDiagnostic<'a> for MissingTypeParams {\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let mut err = handler.struct_span_err_with_code(\n             self.span,\n@@ -306,7 +306,7 @@ impl<'a> SessionDiagnostic<'a> for MissingTypeParams {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::manual_implementation, code = \"E0183\")]\n #[help]\n pub struct ManualImplementation {\n@@ -316,7 +316,7 @@ pub struct ManualImplementation {\n     pub trait_name: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::substs_on_overridden_impl)]\n pub struct SubstsOnOverriddenImpl {\n     #[primary_span]\n@@ -339,7 +339,7 @@ pub struct ExternCrateNotIdiomatic {\n     pub suggestion_code: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::expected_used_symbol)]\n pub struct ExpectedUsedSymbol {\n     #[primary_span]"}, {"sha": "18e39108ecab14d20598239345be41bad1cb0976", "filename": "src/test/ui-fulldeps/internal-lints/diagnostics.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -12,66 +12,66 @@ extern crate rustc_session;\n extern crate rustc_span;\n \n use rustc_errors::{\n-    AddSubdiagnostic, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, Handler, fluent\n+    AddToDiagnostic, IntoDiagnostic, Diagnostic, DiagnosticBuilder,\n+    ErrorGuaranteed, Handler, fluent\n };\n-use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n-use rustc_session::SessionDiagnostic;\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_span::Span;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::expect_path)]\n-struct DeriveSessionDiagnostic {\n+struct DeriveDiagnostic {\n     #[primary_span]\n     span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[note(parser::add_paren)]\n struct Note {\n     #[primary_span]\n     span: Span,\n }\n \n-pub struct UntranslatableInSessionDiagnostic;\n+pub struct UntranslatableInIntoDiagnostic;\n \n-impl<'a> SessionDiagnostic<'a, ErrorGuaranteed> for UntranslatableInSessionDiagnostic {\n+impl<'a> IntoDiagnostic<'a, ErrorGuaranteed> for UntranslatableInIntoDiagnostic {\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         handler.struct_err(\"untranslatable diagnostic\")\n         //~^ ERROR diagnostics should be created using translatable messages\n     }\n }\n \n-pub struct TranslatableInSessionDiagnostic;\n+pub struct TranslatableInIntoDiagnostic;\n \n-impl<'a> SessionDiagnostic<'a, ErrorGuaranteed> for TranslatableInSessionDiagnostic {\n+impl<'a> IntoDiagnostic<'a, ErrorGuaranteed> for TranslatableInIntoDiagnostic {\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         handler.struct_err(fluent::parser::expect_path)\n     }\n }\n \n-pub struct UntranslatableInAddSubdiagnostic;\n+pub struct UntranslatableInAddToDiagnostic;\n \n-impl AddSubdiagnostic for UntranslatableInAddSubdiagnostic {\n+impl AddToDiagnostic for UntranslatableInAddToDiagnostic {\n     fn add_to_diagnostic(self, diag: &mut Diagnostic) {\n         diag.note(\"untranslatable diagnostic\");\n         //~^ ERROR diagnostics should be created using translatable messages\n     }\n }\n \n-pub struct TranslatableInAddSubdiagnostic;\n+pub struct TranslatableInAddToDiagnostic;\n \n-impl AddSubdiagnostic for TranslatableInAddSubdiagnostic {\n+impl AddToDiagnostic for TranslatableInAddToDiagnostic {\n     fn add_to_diagnostic(self, diag: &mut Diagnostic) {\n         diag.note(fluent::typeck::note);\n     }\n }\n \n pub fn make_diagnostics<'a>(handler: &'a Handler) {\n     let _diag = handler.struct_err(fluent::parser::expect_path);\n-    //~^ ERROR diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\n+    //~^ ERROR diagnostics should only be created in `IntoDiagnostic`/`AddToDiagnostic` impls\n \n     let _diag = handler.struct_err(\"untranslatable diagnostic\");\n-    //~^ ERROR diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\n+    //~^ ERROR diagnostics should only be created in `IntoDiagnostic`/`AddToDiagnostic` impls\n     //~^^ ERROR diagnostics should be created using translatable messages\n }\n "}, {"sha": "9219d09e9b401b2e7340ba79c1f08b5c5e52a5d0", "filename": "src/test/ui-fulldeps/internal-lints/diagnostics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.stderr?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -16,7 +16,7 @@ error: diagnostics should be created using translatable messages\n LL |         diag.note(\"untranslatable diagnostic\");\n    |              ^^^^\n \n-error: diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\n+error: diagnostics should only be created in `IntoDiagnostic`/`AddToDiagnostic` impls\n   --> $DIR/diagnostics.rs:70:25\n    |\n LL |     let _diag = handler.struct_err(fluent::parser::expect_path);\n@@ -28,7 +28,7 @@ note: the lint level is defined here\n LL | #![deny(rustc::diagnostic_outside_of_impl)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\n+error: diagnostics should only be created in `IntoDiagnostic`/`AddToDiagnostic` impls\n   --> $DIR/diagnostics.rs:73:25\n    |\n LL |     let _diag = handler.struct_err(\"untranslatable diagnostic\");"}, {"sha": "80ea908288103aab5c5858f6cabf64794a7862b3", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 78, "deletions": 78, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,10 +1,10 @@\n // check-fail\n-// Tests error conditions for specifying diagnostics using #[derive(SessionDiagnostic)]\n+// Tests error conditions for specifying diagnostics using #[derive(Diagnostic)]\n \n // normalize-stderr-test \"the following other types implement trait `IntoDiagnosticArg`:(?:.*\\n){0,9}\\s+and \\d+ others\" -> \"normalized in stderr\"\n // normalize-stderr-test \"diagnostic_builder\\.rs:[0-9]+:[0-9]+\" -> \"diagnostic_builder.rs:LL:CC\"\n // The proc_macro2 crate handles spans differently when on beta/stable release rather than nightly,\n-// changing the output of this test. Since SessionDiagnostic is strictly internal to the compiler\n+// changing the output of this test. Since Diagnostic is strictly internal to the compiler\n // the test is just ignored on stable and beta:\n // ignore-beta\n // ignore-stable\n@@ -17,7 +17,7 @@ use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n extern crate rustc_macros;\n-use rustc_macros::{SessionDiagnostic, LintDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n \n extern crate rustc_middle;\n use rustc_middle::ty::Ty;\n@@ -27,115 +27,115 @@ use rustc_errors::{Applicability, MultiSpan};\n \n extern crate rustc_session;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct Hello {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct HelloWarn {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n-//~^ ERROR `#[derive(SessionDiagnostic)]` can only be used on structs\n-enum SessionDiagnosticOnEnum {\n+//~^ ERROR `#[derive(Diagnostic)]` can only be used on structs\n+enum DiagnosticOnEnum {\n     Foo,\n     Bar,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n #[diag = \"E0123\"]\n //~^ ERROR `#[diag = ...]` is not a valid attribute\n struct WrongStructAttrStyle {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[nonsense(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n //~^ ERROR `#[nonsense(...)]` is not a valid attribute\n //~^^ ERROR diagnostic slug not specified\n //~^^^ ERROR cannot find attribute `nonsense` in this scope\n struct InvalidStructAttr {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(\"E0123\")]\n //~^ ERROR `#[diag(\"...\")]` is not a valid attribute\n //~^^ ERROR diagnostic slug not specified\n struct InvalidLitNestedAttr {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(nonsense, code = \"E0123\")]\n //~^ ERROR cannot find value `nonsense` in module `rustc_errors::fluent`\n struct InvalidNestedStructAttr {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(nonsense(\"foo\"), code = \"E0123\", slug = \"foo\")]\n //~^ ERROR `#[diag(nonsense(...))]` is not a valid attribute\n //~^^ ERROR diagnostic slug not specified\n struct InvalidNestedStructAttr1 {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n //~^ ERROR `#[diag(nonsense = ...)]` is not a valid attribute\n //~^^ ERROR diagnostic slug not specified\n struct InvalidNestedStructAttr2 {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n //~^ ERROR `#[diag(nonsense = ...)]` is not a valid attribute\n //~^^ ERROR diagnostic slug not specified\n struct InvalidNestedStructAttr3 {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\", slug = \"foo\")]\n //~^ ERROR `#[diag(slug = ...)]` is not a valid attribute\n struct InvalidNestedStructAttr4 {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct WrongPlaceField {\n     #[suggestion = \"bar\"]\n     //~^ ERROR `#[suggestion = ...]` is not a valid attribute\n     sp: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n //~^ ERROR specified multiple times\n //~^^ ERROR specified multiple times\n struct DiagSpecifiedTwice {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0456\", code = \"E0457\")]\n //~^ ERROR specified multiple times\n struct CodeSpecifiedTwice {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n //~^ ERROR `#[diag(typeck::ambiguous_lifetime_bound)]` is not a valid attribute\n struct SlugSpecifiedTwice {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n struct KindNotProvided {} //~ ERROR diagnostic slug not specified\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(code = \"E0456\")]\n //~^ ERROR diagnostic slug not specified\n struct SlugNotProvided {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound)]\n struct CodeNotProvided {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct MessageWrongType {\n     #[primary_span]\n     //~^ ERROR `#[primary_span]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n     foo: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct InvalidPathFieldAttr {\n     #[nonsense]\n@@ -144,31 +144,31 @@ struct InvalidPathFieldAttr {\n     foo: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithField {\n     name: String,\n     #[label(typeck::label)]\n     span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithMessageAppliedToField {\n     #[label(typeck::label)]\n     //~^ ERROR the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n     name: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithNonexistentField {\n     #[suggestion(typeck::suggestion, code = \"{name}\")]\n     //~^ ERROR `name` doesn't refer to a field on this type\n     suggestion: (Span, Applicability),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n //~^ ERROR invalid format string: expected `'}'`\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorMissingClosingBrace {\n@@ -178,7 +178,7 @@ struct ErrorMissingClosingBrace {\n     val: usize,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n //~^ ERROR invalid format string: unmatched `}`\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorMissingOpeningBrace {\n@@ -188,22 +188,22 @@ struct ErrorMissingOpeningBrace {\n     val: usize,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct LabelOnSpan {\n     #[label(typeck::label)]\n     sp: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct LabelOnNonSpan {\n     #[label(typeck::label)]\n     //~^ ERROR the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n     id: u32,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct Suggest {\n     #[suggestion(typeck::suggestion, code = \"This is the suggested code\")]\n@@ -213,83 +213,83 @@ struct Suggest {\n     suggestion: (Span, Applicability),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithoutCode {\n     #[suggestion(typeck::suggestion)]\n     suggestion: (Span, Applicability),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithBadKey {\n     #[suggestion(nonsense = \"bar\")]\n     //~^ ERROR `#[suggestion(nonsense = ...)]` is not a valid attribute\n     suggestion: (Span, Applicability),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithShorthandMsg {\n     #[suggestion(msg = \"bar\")]\n     //~^ ERROR `#[suggestion(msg = ...)]` is not a valid attribute\n     suggestion: (Span, Applicability),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithoutMsg {\n     #[suggestion(code = \"bar\")]\n     suggestion: (Span, Applicability),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithTypesSwapped {\n     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n     suggestion: (Applicability, Span),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithWrongTypeApplicabilityOnly {\n     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n     //~^ ERROR wrong field type for suggestion\n     suggestion: Applicability,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithSpanOnly {\n     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n     suggestion: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithDuplicateSpanAndApplicability {\n     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n     //~^ ERROR type of field annotated with `#[suggestion(...)]` contains more than one `Span`\n     suggestion: (Span, Span, Applicability),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithDuplicateApplicabilityAndSpan {\n     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n     //~^ ERROR type of field annotated with `#[suggestion(...)]` contains more than one\n     suggestion: (Applicability, Applicability, Span),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct WrongKindOfAnnotation {\n     #[label = \"bar\"]\n     //~^ ERROR `#[label = ...]` is not a valid attribute\n     z: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct OptionsInErrors {\n     #[label(typeck::label)]\n@@ -298,7 +298,7 @@ struct OptionsInErrors {\n     opt_sugg: Option<(Span, Applicability)>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n struct MoveOutOfBorrowError<'tcx> {\n     name: Ident,\n@@ -312,23 +312,23 @@ struct MoveOutOfBorrowError<'tcx> {\n     opt_sugg: Option<(Span, Applicability)>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithLifetime<'a> {\n     #[label(typeck::label)]\n     span: Span,\n     name: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithDefaultLabelAttr<'a> {\n     #[label]\n     span: Span,\n     name: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n //~^ ERROR the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ArgFieldWithoutSkip {\n@@ -337,7 +337,7 @@ struct ArgFieldWithoutSkip {\n     other: Hello,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ArgFieldWithSkip {\n     #[primary_span]\n@@ -348,140 +348,140 @@ struct ArgFieldWithSkip {\n     other: Hello,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithSpannedNote {\n     #[note]\n     span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithSpannedNoteCustom {\n     #[note(typeck::note)]\n     span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n #[note]\n struct ErrorWithNote {\n     val: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n #[note(typeck::note)]\n struct ErrorWithNoteCustom {\n     val: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithSpannedHelp {\n     #[help]\n     span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithSpannedHelpCustom {\n     #[help(typeck::help)]\n     span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n #[help]\n struct ErrorWithHelp {\n     val: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n #[help(typeck::help)]\n struct ErrorWithHelpCustom {\n     val: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[help]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithHelpWrongOrder {\n     val: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[help(typeck::help)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithHelpCustomWrongOrder {\n     val: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[note]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithNoteWrongOrder {\n     val: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[note(typeck::note)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithNoteCustomWrongOrder {\n     val: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ApplicabilityInBoth {\n     #[suggestion(typeck::suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n     //~^ ERROR applicability cannot be set in both the field and attribute\n     suggestion: (Span, Applicability),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct InvalidApplicability {\n     #[suggestion(typeck::suggestion, code = \"...\", applicability = \"batman\")]\n     //~^ ERROR invalid applicability\n     suggestion: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ValidApplicability {\n     #[suggestion(typeck::suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n     suggestion: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct NoApplicability {\n     #[suggestion(typeck::suggestion, code = \"...\")]\n     suggestion: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[note(parser::add_paren)]\n struct Note;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound)]\n struct Subdiagnostic {\n     #[subdiagnostic]\n     note: Note,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct VecField {\n     #[primary_span]\n     #[label]\n     spans: Vec<Span>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct UnitField {\n     #[primary_span]\n@@ -492,7 +492,7 @@ struct UnitField {\n     bar: (),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct OptUnitField {\n     #[primary_span]\n@@ -503,23 +503,23 @@ struct OptUnitField {\n     bar: Option<()>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct LabelWithTrailingPath {\n     #[label(typeck::label, foo)]\n     //~^ ERROR `#[label(...)]` is not a valid attribute\n     span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct LabelWithTrailingNameValue {\n     #[label(typeck::label, foo = \"...\")]\n     //~^ ERROR `#[label(...)]` is not a valid attribute\n     span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct LabelWithTrailingList {\n     #[label(typeck::label, foo(\"...\"))]\n@@ -540,35 +540,35 @@ struct PrimarySpanOnLint {\n     span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithMultiSpan {\n     #[primary_span]\n     span: MultiSpan,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n #[warning]\n struct ErrorWithWarn {\n     val: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n //~^ ERROR `#[error(...)]` is not a valid attribute\n //~| ERROR diagnostic slug not specified\n //~| ERROR cannot find attribute `error` in this scope\n struct ErrorAttribute {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[warn_(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n //~^ ERROR `#[warn_(...)]` is not a valid attribute\n //~| ERROR diagnostic slug not specified\n //~| ERROR cannot find attribute `warn_` in this scope\n struct WarnAttribute {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n //~^ ERROR `#[lint(...)]` is not a valid attribute\n //~| ERROR diagnostic slug not specified"}, {"sha": "c3972beb51282ca897c79e2f162ba0ad84061c1d", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,9 +1,9 @@\n-error: `#[derive(SessionDiagnostic)]` can only be used on structs\n+error: `#[derive(Diagnostic)]` can only be used on structs\n   --> $DIR/diagnostic-derive.rs:39:1\n    |\n LL | / #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n LL | |\n-LL | | enum SessionDiagnosticOnEnum {\n+LL | | enum DiagnosticOnEnum {\n LL | |     Foo,\n LL | |     Bar,\n LL | | }\n@@ -214,22 +214,22 @@ LL |     #[suggestion(typeck::suggestion, code = \"{name}\")]\n error: invalid format string: expected `'}'` but string was terminated\n   --> $DIR/diagnostic-derive.rs:171:16\n    |\n-LL | #[derive(SessionDiagnostic)]\n+LL | #[derive(Diagnostic)]\n    |           -    ^ expected `'}'` in format string\n    |           |\n    |           because of this opening brace\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n-   = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: invalid format string: unmatched `}` found\n   --> $DIR/diagnostic-derive.rs:181:15\n    |\n-LL | #[derive(SessionDiagnostic)]\n+LL | #[derive(Diagnostic)]\n    |               ^ unmatched `}` in format string\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n-   = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n   --> $DIR/diagnostic-derive.rs:201:5\n@@ -448,16 +448,16 @@ LL | #[diag(nonsense, code = \"E0123\")]\n error[E0277]: the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n   --> $DIR/diagnostic-derive.rs:331:10\n    |\n-LL | #[derive(SessionDiagnostic)]\n-   |          ^^^^^^^^^^^^^^^^^ the trait `IntoDiagnosticArg` is not implemented for `Hello`\n+LL | #[derive(Diagnostic)]\n+   |          ^^^^^^^^^^ the trait `IntoDiagnosticArg` is not implemented for `Hello`\n    |\n    = help: normalized in stderr\n note: required by a bound in `DiagnosticBuilder::<'a, G>::set_arg`\n   --> $COMPILER_DIR/rustc_errors/src/diagnostic_builder.rs:LL:CC\n    |\n LL |         arg: impl IntoDiagnosticArg,\n    |                   ^^^^^^^^^^^^^^^^^ required by this bound in `DiagnosticBuilder::<'a, G>::set_arg`\n-   = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 55 previous errors\n "}, {"sha": "9fbe7b1f4c8592e95ca646b4f4c659593bcd2abc", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 65, "deletions": 65, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,8 +1,8 @@\n // check-fail\n-// Tests error conditions for specifying subdiagnostics using #[derive(SessionSubdiagnostic)]\n+// Tests error conditions for specifying subdiagnostics using #[derive(Subdiagnostic)]\n \n // The proc_macro2 crate handles spans differently when on beta/stable release rather than nightly,\n-// changing the output of this test. Since SessionSubdiagnostic is strictly internal to the compiler\n+// changing the output of this test. Since Subdiagnostic is strictly internal to the compiler\n // the test is just ignored on stable and beta:\n // ignore-beta\n // ignore-stable\n@@ -17,17 +17,17 @@ extern crate rustc_macros;\n \n use rustc_errors::Applicability;\n use rustc_span::Span;\n-use rustc_macros::SessionSubdiagnostic;\n+use rustc_macros::Subdiagnostic;\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren)]\n struct A {\n     #[primary_span]\n     span: Span,\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n enum B {\n     #[label(parser::add_paren)]\n     A {\n@@ -43,14 +43,14 @@ enum B {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren)]\n //~^ ERROR label without `#[primary_span]` field\n struct C {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label]\n //~^ ERROR `#[label]` is not a valid attribute\n struct D {\n@@ -59,7 +59,7 @@ struct D {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[foo]\n //~^ ERROR `#[foo]` is not a valid attribute\n //~^^ ERROR cannot find attribute `foo` in this scope\n@@ -69,7 +69,7 @@ struct E {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label = \"...\"]\n //~^ ERROR `#[label = ...]` is not a valid attribute\n struct F {\n@@ -78,7 +78,7 @@ struct F {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(bug = \"...\")]\n //~^ ERROR `#[label(bug = ...)]` is not a valid attribute\n struct G {\n@@ -87,7 +87,7 @@ struct G {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(\"...\")]\n //~^ ERROR `#[label(\"...\")]` is not a valid attribute\n struct H {\n@@ -96,7 +96,7 @@ struct H {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(slug = 4)]\n //~^ ERROR `#[label(slug = ...)]` is not a valid attribute\n struct J {\n@@ -105,7 +105,7 @@ struct J {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(slug(\"...\"))]\n //~^ ERROR `#[label(slug(...))]` is not a valid attribute\n struct K {\n@@ -114,7 +114,7 @@ struct K {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(slug)]\n //~^ ERROR cannot find value `slug` in module `rustc_errors::fluent`\n //~^^ NOTE not found in `rustc_errors::fluent`\n@@ -124,7 +124,7 @@ struct L {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label()]\n //~^ ERROR diagnostic slug must be first argument of a `#[label(...)]` attribute\n struct M {\n@@ -133,7 +133,7 @@ struct M {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren, code = \"...\")]\n //~^ ERROR `code` is not a valid nested attribute of a `label` attribute\n struct N {\n@@ -142,7 +142,7 @@ struct N {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren, applicability = \"machine-applicable\")]\n //~^ ERROR `applicability` is not a valid nested attribute of a `label` attribute\n struct O {\n@@ -151,7 +151,7 @@ struct O {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[foo]\n //~^ ERROR cannot find attribute `foo` in this scope\n //~^^ ERROR unsupported type attribute for subdiagnostic enum\n@@ -164,7 +164,7 @@ enum P {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n enum Q {\n     #[bar]\n     //~^ ERROR `#[bar]` is not a valid attribute\n@@ -176,7 +176,7 @@ enum Q {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n enum R {\n     #[bar = \"...\"]\n     //~^ ERROR `#[bar = ...]` is not a valid attribute\n@@ -188,7 +188,7 @@ enum R {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n enum S {\n     #[bar = 4]\n     //~^ ERROR `#[bar = ...]` is not a valid attribute\n@@ -200,7 +200,7 @@ enum S {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n enum T {\n     #[bar(\"...\")]\n     //~^ ERROR `#[bar(...)]` is not a valid attribute\n@@ -212,7 +212,7 @@ enum T {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n enum U {\n     #[label(code = \"...\")]\n     //~^ ERROR diagnostic slug must be first argument of a `#[label(...)]` attribute\n@@ -223,7 +223,7 @@ enum U {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n enum V {\n     #[label(parser::add_paren)]\n     A {\n@@ -239,7 +239,7 @@ enum V {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren)]\n //~^ ERROR label without `#[primary_span]` field\n struct W {\n@@ -248,7 +248,7 @@ struct W {\n     span: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren)]\n struct X {\n     #[primary_span]\n@@ -258,7 +258,7 @@ struct X {\n     applicability: Applicability,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren)]\n struct Y {\n     #[primary_span]\n@@ -269,7 +269,7 @@ struct Y {\n     bar: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren)]\n struct Z {\n     #[primary_span]\n@@ -280,7 +280,7 @@ struct Z {\n     bar: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren)]\n struct AA {\n     #[primary_span]\n@@ -291,7 +291,7 @@ struct AA {\n     bar: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren)]\n struct AB {\n     #[primary_span]\n@@ -300,30 +300,30 @@ struct AB {\n     z: Z\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n union AC {\n //~^ ERROR unexpected unsupported untagged union\n     span: u32,\n     b: u64\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren)]\n #[label(parser::add_paren)]\n struct AD {\n     #[primary_span]\n     span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren, parser::add_paren)]\n //~^ ERROR `#[label(parser::add_paren)]` is not a valid attribute\n struct AE {\n     #[primary_span]\n     span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren)]\n struct AF {\n     #[primary_span]\n@@ -334,14 +334,14 @@ struct AF {\n     span_b: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n struct AG {\n     //~^ ERROR subdiagnostic kind not specified\n     #[primary_span]\n     span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren, code = \"...\")]\n struct AH {\n     #[primary_span]\n@@ -351,7 +351,7 @@ struct AH {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n enum AI {\n     #[suggestion(parser::add_paren, code = \"...\")]\n     A {\n@@ -371,7 +371,7 @@ enum AI {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n //~^ ERROR specified multiple times\n //~^^ NOTE previously specified here\n@@ -382,7 +382,7 @@ struct AJ {\n     applicability: Applicability,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren, code = \"...\")]\n struct AK {\n     #[primary_span]\n@@ -395,7 +395,7 @@ struct AK {\n     applicability_b: Applicability,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren, code = \"...\")]\n struct AL {\n     #[primary_span]\n@@ -405,14 +405,14 @@ struct AL {\n     applicability: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren, code = \"...\")]\n struct AM {\n     #[primary_span]\n     span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren)]\n //~^ ERROR suggestion without `code = \"...\"`\n struct AN {\n@@ -422,39 +422,39 @@ struct AN {\n     applicability: Applicability,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren, code =\"...\", applicability = \"foo\")]\n //~^ ERROR invalid applicability\n struct AO {\n     #[primary_span]\n     span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[help(parser::add_paren)]\n struct AP {\n     var: String\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[note(parser::add_paren)]\n struct AQ;\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren, code = \"...\")]\n //~^ ERROR suggestion without `#[primary_span]` field\n struct AR {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren, code =\"...\", applicability = \"machine-applicable\")]\n struct AS {\n     #[primary_span]\n     span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label]\n //~^ ERROR unsupported type attribute for subdiagnostic enum\n enum AT {\n@@ -466,23 +466,23 @@ enum AT {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n struct AU {\n     #[primary_span]\n     span: Span,\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n //~^ ERROR `var` doesn't refer to a field on this type\n struct AV {\n     #[primary_span]\n     span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n enum AW {\n     #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n     A {\n@@ -492,7 +492,7 @@ enum AW {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n enum AX {\n     #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n //~^ ERROR `var` doesn't refer to a field on this type\n@@ -502,18 +502,18 @@ enum AX {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[warning(parser::add_paren)]\n struct AY {}\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[warning(parser::add_paren)]\n struct AZ {\n     #[primary_span]\n     span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren, code = \"...\")]\n //~^ ERROR suggestion without `#[primary_span]` field\n struct BA {\n@@ -528,31 +528,31 @@ struct BA {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[multipart_suggestion(parser::add_paren, code = \"...\", applicability = \"machine-applicable\")]\n //~^ ERROR multipart suggestion without any `#[suggestion_part(...)]` fields\n //~| ERROR `code` is not a valid nested attribute of a `multipart_suggestion` attribute\n struct BBa {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n struct BBb {\n     #[suggestion_part]\n     //~^ ERROR `#[suggestion_part(...)]` attribute without `code = \"...\"`\n     span1: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n struct BBc {\n     #[suggestion_part()]\n     //~^ ERROR `#[suggestion_part(...)]` attribute without `code = \"...\"`\n     span1: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[multipart_suggestion(parser::add_paren)]\n //~^ ERROR multipart suggestion without any `#[suggestion_part(...)]` fields\n struct BC {\n@@ -561,7 +561,7 @@ struct BC {\n     span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[multipart_suggestion(parser::add_paren)]\n struct BD {\n     #[suggestion_part]\n@@ -581,7 +581,7 @@ struct BD {\n     s2: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n struct BE {\n     #[suggestion_part(code = \"...\", code = \",,,\")]\n@@ -590,7 +590,7 @@ struct BE {\n     span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n struct BF {\n     #[suggestion_part(code = \"(\")]\n@@ -599,7 +599,7 @@ struct BF {\n     second: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[multipart_suggestion(parser::add_paren)]\n struct BG {\n     #[applicability]\n@@ -610,7 +610,7 @@ struct BG {\n     second: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n //~^ NOTE previously specified here\n struct BH {\n@@ -623,7 +623,7 @@ struct BH {\n     second: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n struct BI {\n     #[suggestion_part(code = \"\")]"}]}