{"sha": "3daca3eb4d843199540edfb1092f57f49938d0f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYWNhM2ViNGQ4NDMxOTk1NDBlZGZiMTA5MmY1N2Y0OTkzOGQwZjY=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-28T22:06:11Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-28T22:09:14Z"}, "message": "Infer type of match guard", "tree": {"sha": "4cdc5c921b024d8b348b73e1a7c3e6a56fc11305", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cdc5c921b024d8b348b73e1a7c3e6a56fc11305"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3daca3eb4d843199540edfb1092f57f49938d0f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3daca3eb4d843199540edfb1092f57f49938d0f6", "html_url": "https://github.com/rust-lang/rust/commit/3daca3eb4d843199540edfb1092f57f49938d0f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3daca3eb4d843199540edfb1092f57f49938d0f6/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f4f50baaa21cb2d0f6c102f1ca521946071a8dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f4f50baaa21cb2d0f6c102f1ca521946071a8dc", "html_url": "https://github.com/rust-lang/rust/commit/3f4f50baaa21cb2d0f6c102f1ca521946071a8dc"}], "stats": {"total": 211, "additions": 152, "deletions": 59}, "files": [{"sha": "b01d53e5cdf5a4d145cd00374ac555f42add9d5c", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3daca3eb4d843199540edfb1092f57f49938d0f6/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3daca3eb4d843199540edfb1092f57f49938d0f6/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=3daca3eb4d843199540edfb1092f57f49938d0f6", "patch": "@@ -215,7 +215,7 @@ pub use ra_syntax::ast::BinOp as BinaryOp;\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct MatchArm {\n     pub pats: Vec<PatId>,\n-    // guard: Option<ExprId>, // TODO\n+    pub guard: Option<ExprId>,\n     pub expr: ExprId,\n }\n \n@@ -511,10 +511,12 @@ impl ExprCollector {\n                         MatchArm {\n                             pats: vec![pat],\n                             expr: then_branch,\n+                            guard: None,\n                         },\n                         MatchArm {\n                             pats: vec![placeholder_pat],\n                             expr: else_branch,\n+                            guard: None,\n                         },\n                     ];\n                     self.alloc_expr(\n@@ -613,6 +615,10 @@ impl ExprCollector {\n                         .map(|arm| MatchArm {\n                             pats: arm.pats().map(|p| self.collect_pat(p)).collect(),\n                             expr: self.collect_expr_opt(arm.expr()),\n+                            guard: arm.guard().map(|guard| {\n+                                let e = guard.expr().expect(\"every guard should have an expr\");\n+                                self.collect_expr(e)\n+                            }),\n                         })\n                         .collect()\n                 } else {"}, {"sha": "e2c7884b5a708076f21b15de2dea1615d3780280", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3daca3eb4d843199540edfb1092f57f49938d0f6/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3daca3eb4d843199540edfb1092f57f49938d0f6/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=3daca3eb4d843199540edfb1092f57f49938d0f6", "patch": "@@ -1395,7 +1395,9 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     for &pat in &arm.pats {\n                         let _pat_ty = self.infer_pat(pat, &input_ty);\n                     }\n-                    // TODO type the guard\n+                    if let Some(guard_expr) = arm.guard {\n+                        self.infer_expr(guard_expr, &Expectation::has_type(Ty::Bool));\n+                    }\n                     self.infer_expr(arm.expr, &expected);\n                 }\n \n@@ -1468,9 +1470,17 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 cast_ty\n             }\n             Expr::Ref { expr, mutability } => {\n-                // TODO pass the expectation down\n-                let inner_ty = self.infer_expr(*expr, &Expectation::none());\n+                let expectation = if let Ty::Ref(ref subty, expected_mutability) = expected.ty {\n+                    if expected_mutability == Mutability::Mut && *mutability == Mutability::Shared {\n+                        // TODO: throw type error - expected mut reference but found shared ref,\n+                        // which cannot be coerced\n+                    }\n+                    Expectation::has_type((**subty).clone())\n+                } else {\n+                    Expectation::none()\n+                };\n                 // TODO reference coercions etc.\n+                let inner_ty = self.infer_expr(*expr, &expectation);\n                 Ty::Ref(Arc::new(inner_ty), *mutability)\n             }\n             Expr::UnaryOp { expr, op } => {"}, {"sha": "48c83cbb277e2c62e81433fee75a5ff770fcb662", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_adt_pattern.snap", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3daca3eb4d843199540edfb1092f57f49938d0f6/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_adt_pattern.snap", "raw_url": "https://github.com/rust-lang/rust/raw/3daca3eb4d843199540edfb1092f57f49938d0f6/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_adt_pattern.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_adt_pattern.snap?ref=3daca3eb4d843199540edfb1092f57f49938d0f6", "patch": "@@ -1,10 +1,10 @@\n ---\n-created: \"2019-01-22T14:44:59.880187500+00:00\"\n-creator: insta@0.4.0\n+created: \"2019-01-28T21:58:55.559331849+00:00\"\n+creator: insta@0.5.2\n expression: \"&result\"\n-source: \"crates\\\\ra_hir\\\\src\\\\ty\\\\tests.rs\"\n+source: crates/ra_hir/src/ty/tests.rs\n ---\n-[68; 262) '{     ...  d; }': ()\n+[68; 289) '{     ...  d; }': ()\n [78; 79) 'e': E\n [82; 95) 'E::A { x: 3 }': E\n [92; 93) '3': usize\n@@ -15,15 +15,18 @@ source: \"crates\\\\ra_hir\\\\src\\\\ty\\\\tests.rs\"\n [129; 148) 'E::A {..._var }': E\n [139; 146) 'new_var': usize\n [151; 152) 'e': E\n-[159; 218) 'match ...     }': usize\n+[159; 245) 'match ...     }': usize\n [165; 166) 'e': E\n [177; 187) 'E::A { x }': E\n [184; 185) 'x': usize\n [191; 192) 'x': usize\n [202; 206) 'E::B': E\n-[210; 211) '1': usize\n-[229; 248) 'ref d ...{ .. }': &E\n-[237; 248) 'E::A { .. }': E\n-[251; 252) 'e': E\n-[258; 259) 'd': &E\n+[210; 213) 'foo': bool\n+[217; 218) '1': usize\n+[228; 232) 'E::B': E\n+[236; 238) '10': usize\n+[256; 275) 'ref d ...{ .. }': &E\n+[264; 275) 'E::A { .. }': E\n+[278; 279) 'e': E\n+[285; 286) 'd': &E\n "}, {"sha": "8aa188059b35c9cf51836ee72063afef8a1124db", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3daca3eb4d843199540edfb1092f57f49938d0f6/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3daca3eb4d843199540edfb1092f57f49938d0f6/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=3daca3eb4d843199540edfb1092f57f49938d0f6", "patch": "@@ -421,7 +421,8 @@ fn test() {\n \n     match e {\n         E::A { x } => x,\n-        E::B => 1,\n+        E::B if foo => 1,\n+        E::B => 10,\n     };\n \n     let ref d @ E::A { .. } = e;"}, {"sha": "4f5a96014e40ba7f71afaa689df4d19ef1cf6cad", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3daca3eb4d843199540edfb1092f57f49938d0f6/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3daca3eb4d843199540edfb1092f57f49938d0f6/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=3daca3eb4d843199540edfb1092f57f49938d0f6", "patch": "@@ -1981,7 +1981,11 @@ impl ToOwned for MatchGuard {\n }\n \n \n-impl MatchGuard {}\n+impl MatchGuard {\n+    pub fn expr(&self) -> Option<&Expr> {\n+        super::child_opt(self)\n+    }\n+}\n \n // MethodCallExpr\n #[derive(Debug, PartialEq, Eq, Hash)]"}, {"sha": "e4cad4eb3460113ed0c5a2e591605741c88906bc", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3daca3eb4d843199540edfb1092f57f49938d0f6/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/3daca3eb4d843199540edfb1092f57f49938d0f6/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=3daca3eb4d843199540edfb1092f57f49938d0f6", "patch": "@@ -418,7 +418,7 @@ Grammar(\n             ],\n             collections: [ [ \"pats\", \"Pat\" ] ]\n         ),\n-        \"MatchGuard\": (),\n+        \"MatchGuard\": (options: [\"Expr\"]),\n         \"StructLit\": (options: [\"Path\", \"NamedFieldList\", [\"spread\", \"Expr\"]]),\n         \"NamedFieldList\": (collections: [ [\"fields\", \"NamedField\"] ]),\n         \"NamedField\": (options: [\"NameRef\", \"Expr\"]),"}, {"sha": "600774afd7602c5f2939f5d92ec0d16b74b8cf6b", "filename": "crates/ra_syntax/src/grammar/expressions/atom.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3daca3eb4d843199540edfb1092f57f49938d0f6/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3daca3eb4d843199540edfb1092f57f49938d0f6/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=3daca3eb4d843199540edfb1092f57f49938d0f6", "patch": "@@ -360,15 +360,29 @@ fn match_arm(p: &mut Parser) -> BlockLike {\n     while p.eat(PIPE) {\n         patterns::pattern(p);\n     }\n-    if p.eat(IF_KW) {\n-        expr(p);\n+    if p.at(IF_KW) {\n+        match_guard(p);\n     }\n     p.expect(FAT_ARROW);\n     let ret = expr_stmt(p);\n     m.complete(p, MATCH_ARM);\n     ret\n }\n \n+// test match_guard\n+// fn foo() {\n+//     match () {\n+//         _ if foo => (),\n+//     }\n+// }\n+fn match_guard(p: &mut Parser) -> CompletedMarker {\n+    assert!(p.at(IF_KW));\n+    let m = p.start();\n+    p.bump();\n+    expr(p);\n+    m.complete(p, MATCH_GUARD)\n+}\n+\n // test block_expr\n // fn foo() {\n //     {};"}, {"sha": "b44e6187910d8c0d6c93839c7f1771495ff46a85", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0066_match_arm.txt", "status": "modified", "additions": 43, "deletions": 40, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/3daca3eb4d843199540edfb1092f57f49938d0f6/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0066_match_arm.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3daca3eb4d843199540edfb1092f57f49938d0f6/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0066_match_arm.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0066_match_arm.txt?ref=3daca3eb4d843199540edfb1092f57f49938d0f6", "patch": "@@ -37,32 +37,33 @@ SOURCE_FILE@[0; 167)\n               PLACEHOLDER_PAT@[51; 52)\n                 UNDERSCORE@[51; 52)\n               WHITESPACE@[52; 53)\n-              IF_KW@[53; 55)\n-              WHITESPACE@[55; 56)\n-              BIN_EXPR@[56; 77)\n-                PATH_EXPR@[56; 60)\n-                  PATH@[56; 60)\n-                    PATH_SEGMENT@[56; 60)\n-                      NAME_REF@[56; 60)\n-                        IDENT@[56; 60) \"Test\"\n-                WHITESPACE@[60; 61)\n-                R_ANGLE@[61; 62)\n-                WHITESPACE@[62; 63)\n-                STRUCT_LIT@[63; 77)\n-                  PATH@[63; 67)\n-                    PATH_SEGMENT@[63; 67)\n-                      NAME_REF@[63; 67)\n-                        IDENT@[63; 67) \"Test\"\n-                  NAMED_FIELD_LIST@[67; 77)\n-                    L_CURLY@[67; 68)\n-                    NAMED_FIELD@[68; 76)\n-                      NAME_REF@[68; 73)\n-                        IDENT@[68; 73) \"field\"\n-                      COLON@[73; 74)\n-                      WHITESPACE@[74; 75)\n-                      LITERAL@[75; 76)\n-                        INT_NUMBER@[75; 76) \"0\"\n-                    R_CURLY@[76; 77)\n+              MATCH_GUARD@[53; 77)\n+                IF_KW@[53; 55)\n+                WHITESPACE@[55; 56)\n+                BIN_EXPR@[56; 77)\n+                  PATH_EXPR@[56; 60)\n+                    PATH@[56; 60)\n+                      PATH_SEGMENT@[56; 60)\n+                        NAME_REF@[56; 60)\n+                          IDENT@[56; 60) \"Test\"\n+                  WHITESPACE@[60; 61)\n+                  R_ANGLE@[61; 62)\n+                  WHITESPACE@[62; 63)\n+                  STRUCT_LIT@[63; 77)\n+                    PATH@[63; 67)\n+                      PATH_SEGMENT@[63; 67)\n+                        NAME_REF@[63; 67)\n+                          IDENT@[63; 67) \"Test\"\n+                    NAMED_FIELD_LIST@[67; 77)\n+                      L_CURLY@[67; 68)\n+                      NAMED_FIELD@[68; 76)\n+                        NAME_REF@[68; 73)\n+                          IDENT@[68; 73) \"field\"\n+                        COLON@[73; 74)\n+                        WHITESPACE@[74; 75)\n+                        LITERAL@[75; 76)\n+                          INT_NUMBER@[75; 76) \"0\"\n+                      R_CURLY@[76; 77)\n               WHITESPACE@[77; 78)\n               FAT_ARROW@[78; 80)\n               WHITESPACE@[80; 81)\n@@ -82,13 +83,14 @@ SOURCE_FILE@[0; 167)\n                 NAME@[97; 98)\n                   IDENT@[97; 98) \"Y\"\n               WHITESPACE@[98; 99)\n-              IF_KW@[99; 101)\n-              WHITESPACE@[101; 102)\n-              PATH_EXPR@[102; 103)\n-                PATH@[102; 103)\n-                  PATH_SEGMENT@[102; 103)\n-                    NAME_REF@[102; 103)\n-                      IDENT@[102; 103) \"Z\"\n+              MATCH_GUARD@[99; 103)\n+                IF_KW@[99; 101)\n+                WHITESPACE@[101; 102)\n+                PATH_EXPR@[102; 103)\n+                  PATH@[102; 103)\n+                    PATH_SEGMENT@[102; 103)\n+                      NAME_REF@[102; 103)\n+                        IDENT@[102; 103) \"Z\"\n               WHITESPACE@[103; 104)\n               FAT_ARROW@[104; 106)\n               WHITESPACE@[106; 107)\n@@ -110,13 +112,14 @@ SOURCE_FILE@[0; 167)\n                 NAME@[125; 126)\n                   IDENT@[125; 126) \"Y\"\n               WHITESPACE@[126; 127)\n-              IF_KW@[127; 129)\n-              WHITESPACE@[129; 130)\n-              PATH_EXPR@[130; 131)\n-                PATH@[130; 131)\n-                  PATH_SEGMENT@[130; 131)\n-                    NAME_REF@[130; 131)\n-                      IDENT@[130; 131) \"Z\"\n+              MATCH_GUARD@[127; 131)\n+                IF_KW@[127; 129)\n+                WHITESPACE@[129; 130)\n+                PATH_EXPR@[130; 131)\n+                  PATH@[130; 131)\n+                    PATH_SEGMENT@[130; 131)\n+                      NAME_REF@[130; 131)\n+                        IDENT@[130; 131) \"Z\"\n               WHITESPACE@[131; 132)\n               FAT_ARROW@[132; 134)\n               WHITESPACE@[134; 135)"}, {"sha": "f1bd72fc4cb5492212c14fca7891387822dc6ead", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0118_match_guard.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3daca3eb4d843199540edfb1092f57f49938d0f6/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0118_match_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3daca3eb4d843199540edfb1092f57f49938d0f6/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0118_match_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0118_match_guard.rs?ref=3daca3eb4d843199540edfb1092f57f49938d0f6", "patch": "@@ -0,0 +1,5 @@\n+fn foo() {\n+    match () {\n+        _ if foo => (),\n+    }\n+}"}, {"sha": "27553882d76b6650a9893515ba7448569ef957d5", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0118_match_guard.txt", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/3daca3eb4d843199540edfb1092f57f49938d0f6/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0118_match_guard.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3daca3eb4d843199540edfb1092f57f49938d0f6/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0118_match_guard.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0118_match_guard.txt?ref=3daca3eb4d843199540edfb1092f57f49938d0f6", "patch": "@@ -0,0 +1,47 @@\n+SOURCE_FILE@[0; 58)\n+  FN_DEF@[0; 57)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK@[9; 57)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 15)\n+      MATCH_EXPR@[15; 55)\n+        MATCH_KW@[15; 20)\n+        WHITESPACE@[20; 21)\n+        TUPLE_EXPR@[21; 23)\n+          L_PAREN@[21; 22)\n+          R_PAREN@[22; 23)\n+        WHITESPACE@[23; 24)\n+        MATCH_ARM_LIST@[24; 55)\n+          L_CURLY@[24; 25)\n+          WHITESPACE@[25; 34)\n+          MATCH_ARM@[34; 48)\n+            PLACEHOLDER_PAT@[34; 35)\n+              UNDERSCORE@[34; 35)\n+            WHITESPACE@[35; 36)\n+            MATCH_GUARD@[36; 42)\n+              IF_KW@[36; 38)\n+              WHITESPACE@[38; 39)\n+              PATH_EXPR@[39; 42)\n+                PATH@[39; 42)\n+                  PATH_SEGMENT@[39; 42)\n+                    NAME_REF@[39; 42)\n+                      IDENT@[39; 42) \"foo\"\n+            WHITESPACE@[42; 43)\n+            FAT_ARROW@[43; 45)\n+            WHITESPACE@[45; 46)\n+            TUPLE_EXPR@[46; 48)\n+              L_PAREN@[46; 47)\n+              R_PAREN@[47; 48)\n+          COMMA@[48; 49)\n+          WHITESPACE@[49; 54)\n+          R_CURLY@[54; 55)\n+      WHITESPACE@[55; 56)\n+      R_CURLY@[56; 57)\n+  WHITESPACE@[57; 58)"}]}