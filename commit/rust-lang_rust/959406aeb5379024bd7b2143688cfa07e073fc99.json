{"sha": "959406aeb5379024bd7b2143688cfa07e073fc99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1OTQwNmFlYjUzNzkwMjRiZDdiMjE0MzY4OGNmYTA3ZTA3M2ZjOTk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-06T18:27:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-06T18:27:02Z"}, "message": "Merge #7186\n\n7186: Align config's API with usage r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "429e2c7284476213432b66b02ab9b76f6525eb92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/429e2c7284476213432b66b02ab9b76f6525eb92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/959406aeb5379024bd7b2143688cfa07e073fc99", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf9gD2CRBK7hj4Ov3rIwAAdHIIAJasjlPen0tEoZnbIz1u4Lmq\nAN+xjo8hrE1HO0o0cr4N7FPOeOo7tao0S/+oL6VI336aAbMEIHS1GWGv+l//IIVC\n1FTvRIMagi7DQBAdqEuJ9peez/ubVj9vQR97/7p78jTfCie0uJODnU5WBPedlBPW\nMkyc7PDqM8cU8XOlDVBDKn5IrpkxivYlKD2J4pWbkMMXJsPStKTqWBrCiINcRWMH\n2QZ88mSBKbPiB3T7xRg2n4ccumKel/V1ewz/9vqcU0s+9oiqVTeJ8s9tC7YJlfNQ\n3/C7qBsf2j0hx9ZJ/lMF0rDHRzwGQbJ/2ERoXvZF/1iZvCCWLXJRFySskAXX8hI=\n=DIPv\n-----END PGP SIGNATURE-----\n", "payload": "tree 429e2c7284476213432b66b02ab9b76f6525eb92\nparent 7ae4b8bdb62735ee767dff25ce1485ae8bffe199\nparent f8a056117898c56d34d1758455bc54df50e2e426\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1609957622 +0000\ncommitter GitHub <noreply@github.com> 1609957622 +0000\n\nMerge #7186\n\n7186: Align config's API with usage r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/959406aeb5379024bd7b2143688cfa07e073fc99", "html_url": "https://github.com/rust-lang/rust/commit/959406aeb5379024bd7b2143688cfa07e073fc99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/959406aeb5379024bd7b2143688cfa07e073fc99/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ae4b8bdb62735ee767dff25ce1485ae8bffe199", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ae4b8bdb62735ee767dff25ce1485ae8bffe199", "html_url": "https://github.com/rust-lang/rust/commit/7ae4b8bdb62735ee767dff25ce1485ae8bffe199"}, {"sha": "f8a056117898c56d34d1758455bc54df50e2e426", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8a056117898c56d34d1758455bc54df50e2e426", "html_url": "https://github.com/rust-lang/rust/commit/f8a056117898c56d34d1758455bc54df50e2e426"}], "stats": {"total": 326, "additions": 164, "deletions": 162}, "files": [{"sha": "4fe8ea76145caadae3fd61736f3c7aab709461f5", "filename": "crates/assists/src/assist_config.rs", "status": "modified", "additions": 2, "deletions": 30, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fassists%2Fsrc%2Fassist_config.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fassists%2Fsrc%2Fassist_config.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fassist_config.rs?ref=959406aeb5379024bd7b2143688cfa07e073fc99", "patch": "@@ -4,8 +4,7 @@\n //! module, and we use to statically check that we only produce snippet\n //! assists if we are allowed to.\n \n-use hir::PrefixKind;\n-use ide_db::helpers::insert_use::MergeBehavior;\n+use ide_db::helpers::{insert_use::MergeBehavior, SnippetCap};\n \n use crate::AssistKind;\n \n@@ -16,35 +15,8 @@ pub struct AssistConfig {\n     pub insert_use: InsertUseConfig,\n }\n \n-impl AssistConfig {\n-    pub fn allow_snippets(&mut self, yes: bool) {\n-        self.snippet_cap = if yes { Some(SnippetCap { _private: () }) } else { None }\n-    }\n-}\n-\n-#[derive(Clone, Copy, Debug, PartialEq, Eq)]\n-pub struct SnippetCap {\n-    _private: (),\n-}\n-\n-impl Default for AssistConfig {\n-    fn default() -> Self {\n-        AssistConfig {\n-            snippet_cap: Some(SnippetCap { _private: () }),\n-            allowed: None,\n-            insert_use: InsertUseConfig::default(),\n-        }\n-    }\n-}\n-\n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub struct InsertUseConfig {\n     pub merge: Option<MergeBehavior>,\n-    pub prefix_kind: PrefixKind,\n-}\n-\n-impl Default for InsertUseConfig {\n-    fn default() -> Self {\n-        InsertUseConfig { merge: Some(MergeBehavior::Full), prefix_kind: PrefixKind::Plain }\n-    }\n+    pub prefix_kind: hir::PrefixKind,\n }"}, {"sha": "91cc6342728090e13ca95fb352a1e5821e448828", "filename": "crates/assists/src/assist_context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fassists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fassists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fassist_context.rs?ref=959406aeb5379024bd7b2143688cfa07e073fc99", "patch": "@@ -4,7 +4,10 @@ use std::mem;\n \n use algo::find_covering_element;\n use hir::Semantics;\n-use ide_db::base_db::{AnchoredPathBuf, FileId, FileRange};\n+use ide_db::{\n+    base_db::{AnchoredPathBuf, FileId, FileRange},\n+    helpers::SnippetCap,\n+};\n use ide_db::{\n     label::Label,\n     source_change::{FileSystemEdit, SourceChange, SourceFileEdit},\n@@ -17,10 +20,7 @@ use syntax::{\n };\n use text_edit::{TextEdit, TextEditBuilder};\n \n-use crate::{\n-    assist_config::{AssistConfig, SnippetCap},\n-    Assist, AssistId, AssistKind, GroupLabel,\n-};\n+use crate::{assist_config::AssistConfig, Assist, AssistId, AssistKind, GroupLabel};\n \n /// `AssistContext` allows to apply an assist or check if it could be applied.\n ///"}, {"sha": "d169abedb437dfa44042356ef01e84cb21967a6f", "filename": "crates/assists/src/handlers/generate_function.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=959406aeb5379024bd7b2143688cfa07e073fc99", "patch": "@@ -1,5 +1,5 @@\n use hir::HirDisplay;\n-use ide_db::base_db::FileId;\n+use ide_db::{base_db::FileId, helpers::SnippetCap};\n use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::{\n     ast::{\n@@ -11,7 +11,6 @@ use syntax::{\n };\n \n use crate::{\n-    assist_config::SnippetCap,\n     utils::{render_snippet, Cursor},\n     AssistContext, AssistId, AssistKind, Assists,\n };"}, {"sha": "90009c55a890e145342655cc693dab1b3b40cf00", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=959406aeb5379024bd7b2143688cfa07e073fc99", "patch": "@@ -24,7 +24,7 @@ use syntax::TextRange;\n \n pub(crate) use crate::assist_context::{AssistContext, Assists};\n \n-pub use assist_config::AssistConfig;\n+pub use assist_config::{AssistConfig, InsertUseConfig};\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n pub enum AssistKind {"}, {"sha": "a4c6a7570ee11e98877a665485de3c9e8599e4b8", "filename": "crates/assists/src/tests.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fassists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fassists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests.rs?ref=959406aeb5379024bd7b2143688cfa07e073fc99", "patch": "@@ -1,15 +1,29 @@\n mod generated;\n \n use hir::Semantics;\n-use ide_db::base_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt};\n-use ide_db::source_change::FileSystemEdit;\n-use ide_db::RootDatabase;\n+use ide_db::{\n+    base_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt},\n+    helpers::{insert_use::MergeBehavior, SnippetCap},\n+    source_change::FileSystemEdit,\n+    RootDatabase,\n+};\n use syntax::TextRange;\n use test_utils::{assert_eq_text, extract_offset, extract_range};\n \n-use crate::{handlers::Handler, Assist, AssistConfig, AssistContext, AssistKind, Assists};\n+use crate::{\n+    handlers::Handler, Assist, AssistConfig, AssistContext, AssistKind, Assists, InsertUseConfig,\n+};\n use stdx::{format_to, trim_indent};\n \n+pub(crate) const TEST_CONFIG: AssistConfig = AssistConfig {\n+    snippet_cap: SnippetCap::new(true),\n+    allowed: None,\n+    insert_use: InsertUseConfig {\n+        merge: Some(MergeBehavior::Full),\n+        prefix_kind: hir::PrefixKind::Plain,\n+    },\n+};\n+\n pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {\n     RootDatabase::with_single_file(text)\n }\n@@ -48,14 +62,14 @@ fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n     let before = db.file_text(file_id).to_string();\n     let frange = FileRange { file_id, range: selection.into() };\n \n-    let assist = Assist::get(&db, &AssistConfig::default(), true, frange)\n+    let assist = Assist::get(&db, &TEST_CONFIG, true, frange)\n         .into_iter()\n         .find(|assist| assist.id.0 == assist_id)\n         .unwrap_or_else(|| {\n             panic!(\n                 \"\\n\\nAssist is not applicable: {}\\nAvailable assists: {}\",\n                 assist_id,\n-                Assist::get(&db, &AssistConfig::default(), false, frange)\n+                Assist::get(&db, &TEST_CONFIG, false, frange)\n                     .into_iter()\n                     .map(|assist| assist.id.0)\n                     .collect::<Vec<_>>()\n@@ -89,7 +103,7 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult, assist_label:\n     let frange = FileRange { file_id: file_with_caret_id, range: range_or_offset.into() };\n \n     let sema = Semantics::new(&db);\n-    let config = AssistConfig::default();\n+    let config = TEST_CONFIG;\n     let ctx = AssistContext::new(sema, &config, frange);\n     let mut acc = Assists::new(&ctx, true);\n     handler(&mut acc, &ctx);\n@@ -156,7 +170,7 @@ fn assist_order_field_struct() {\n     let (before_cursor_pos, before) = extract_offset(before);\n     let (db, file_id) = with_single_file(&before);\n     let frange = FileRange { file_id, range: TextRange::empty(before_cursor_pos) };\n-    let assists = Assist::get(&db, &AssistConfig::default(), false, frange);\n+    let assists = Assist::get(&db, &TEST_CONFIG, false, frange);\n     let mut assists = assists.iter();\n \n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Change visibility to pub(crate)\");\n@@ -176,7 +190,7 @@ fn assist_order_if_expr() {\n     let (range, before) = extract_range(before);\n     let (db, file_id) = with_single_file(&before);\n     let frange = FileRange { file_id, range };\n-    let assists = Assist::get(&db, &AssistConfig::default(), false, frange);\n+    let assists = Assist::get(&db, &TEST_CONFIG, false, frange);\n     let mut assists = assists.iter();\n \n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Extract into variable\");\n@@ -198,7 +212,7 @@ fn assist_filter_works() {\n     let frange = FileRange { file_id, range };\n \n     {\n-        let mut cfg = AssistConfig::default();\n+        let mut cfg = TEST_CONFIG;\n         cfg.allowed = Some(vec![AssistKind::Refactor]);\n \n         let assists = Assist::get(&db, &cfg, false, frange);\n@@ -209,7 +223,7 @@ fn assist_filter_works() {\n     }\n \n     {\n-        let mut cfg = AssistConfig::default();\n+        let mut cfg = TEST_CONFIG;\n         cfg.allowed = Some(vec![AssistKind::RefactorExtract]);\n         let assists = Assist::get(&db, &cfg, false, frange);\n         assert_eq!(assists.len(), 1);\n@@ -219,7 +233,7 @@ fn assist_filter_works() {\n     }\n \n     {\n-        let mut cfg = AssistConfig::default();\n+        let mut cfg = TEST_CONFIG;\n         cfg.allowed = Some(vec![AssistKind::QuickFix]);\n         let assists = Assist::get(&db, &cfg, false, frange);\n         assert!(assists.is_empty(), \"All asserts but quickfixes should be filtered out\");"}, {"sha": "9ea96eb73bca53d9947e9947c772b5ad718644b0", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=959406aeb5379024bd7b2143688cfa07e073fc99", "patch": "@@ -4,7 +4,7 @@ pub(crate) mod import_assets;\n use std::ops;\n \n use hir::HasSource;\n-use ide_db::RootDatabase;\n+use ide_db::{helpers::SnippetCap, RootDatabase};\n use itertools::Itertools;\n use syntax::{\n     ast::edit::AstNodeEdit,\n@@ -16,10 +16,7 @@ use syntax::{\n     SyntaxNode, TextSize, T,\n };\n \n-use crate::{\n-    assist_config::SnippetCap,\n-    ast_transform::{self, AstTransform, QualifyPaths, SubstituteTypeParams},\n-};\n+use crate::ast_transform::{self, AstTransform, QualifyPaths, SubstituteTypeParams};\n \n pub(crate) fn unwrap_trivial_block(block: ast::BlockExpr) -> ast::Expr {\n     extract_trivial_expression(&block)"}, {"sha": "4888f518accf64095d6439ee3991231f58291443", "filename": "crates/completion/src/completions/postfix.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=959406aeb5379024bd7b2143688cfa07e073fc99", "patch": "@@ -2,17 +2,16 @@\n \n mod format_like;\n \n-use ide_db::ty_filter::TryEnum;\n+use ide_db::{helpers::SnippetCap, ty_filter::TryEnum};\n use syntax::{\n     ast::{self, AstNode, AstToken},\n     SyntaxKind::{BLOCK_EXPR, EXPR_STMT},\n     TextRange, TextSize,\n };\n use text_edit::TextEdit;\n \n-use self::format_like::add_format_like_completions;\n use crate::{\n-    config::SnippetCap,\n+    completions::postfix::format_like::add_format_like_completions,\n     context::CompletionContext,\n     item::{Builder, CompletionKind},\n     CompletionItem, CompletionItemKind, Completions,"}, {"sha": "3afc6302100c3374d94dc5e5d145ddbbc6648574", "filename": "crates/completion/src/completions/postfix/format_like.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs?ref=959406aeb5379024bd7b2143688cfa07e073fc99", "patch": "@@ -14,12 +14,11 @@\n //   + `logw` -> `log::warn!(...)`\n //   + `loge` -> `log::error!(...)`\n \n-use crate::{\n-    completions::postfix::postfix_snippet, config::SnippetCap, context::CompletionContext,\n-    Completions,\n-};\n+use ide_db::helpers::SnippetCap;\n use syntax::ast::{self, AstToken};\n \n+use crate::{completions::postfix::postfix_snippet, context::CompletionContext, Completions};\n+\n /// Mapping (\"postfix completion item\" => \"macro to use\")\n static KINDS: &[(&str, &str)] = &[\n     (\"format\", \"format!\"),"}, {"sha": "b5e704696216c69c04ab49bc425c136b758fcceb", "filename": "crates/completion/src/completions/snippet.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=959406aeb5379024bd7b2143688cfa07e073fc99", "patch": "@@ -1,8 +1,10 @@\n //! This file provides snippet completions, like `pd` => `eprintln!(...)`.\n \n+use ide_db::helpers::SnippetCap;\n+\n use crate::{\n-    config::SnippetCap, item::Builder, CompletionContext, CompletionItem, CompletionItemKind,\n-    CompletionKind, Completions,\n+    item::Builder, CompletionContext, CompletionItem, CompletionItemKind, CompletionKind,\n+    Completions,\n };\n \n fn snippet(ctx: &CompletionContext, cap: SnippetCap, label: &str, snippet: &str) -> Builder {"}, {"sha": "2da21b5c26116b49e2b56dfe72f6e3b1ca88d18b", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=959406aeb5379024bd7b2143688cfa07e073fc99", "patch": "@@ -192,23 +192,21 @@ mod tests {\n     use test_utils::mark;\n \n     use crate::{\n-        test_utils::{check_edit, check_edit_with_config, completion_list_with_config},\n+        test_utils::{\n+            check_edit, check_edit_with_config, completion_list_with_config, TEST_CONFIG,\n+        },\n         CompletionConfig, CompletionKind,\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        check_with_config(CompletionConfig::default(), ra_fixture, expect);\n+        check_with_config(TEST_CONFIG, ra_fixture, expect);\n     }\n \n     fn check_with_config(config: CompletionConfig, ra_fixture: &str, expect: Expect) {\n         let actual = completion_list_with_config(config, ra_fixture, CompletionKind::Reference);\n         expect.assert_eq(&actual)\n     }\n \n-    fn fuzzy_completion_config() -> CompletionConfig {\n-        CompletionConfig::default()\n-    }\n-\n     #[test]\n     fn self_fulfilling_completion() {\n         mark::check!(self_fulfilling_completion);\n@@ -832,7 +830,7 @@ impl My<|>\n     #[test]\n     fn function_fuzzy_completion() {\n         check_edit_with_config(\n-            fuzzy_completion_config(),\n+            TEST_CONFIG,\n             \"stdin\",\n             r#\"\n //- /lib.rs crate:dep\n@@ -858,7 +856,7 @@ fn main() {\n     #[test]\n     fn macro_fuzzy_completion() {\n         check_edit_with_config(\n-            fuzzy_completion_config(),\n+            TEST_CONFIG,\n             \"macro_with_curlies!\",\n             r#\"\n //- /lib.rs crate:dep\n@@ -886,7 +884,7 @@ fn main() {\n     #[test]\n     fn struct_fuzzy_completion() {\n         check_edit_with_config(\n-            fuzzy_completion_config(),\n+            TEST_CONFIG,\n             \"ThirdStruct\",\n             r#\"\n //- /lib.rs crate:dep\n@@ -917,7 +915,7 @@ fn main() {\n     fn fuzzy_completions_come_in_specific_order() {\n         mark::check!(certain_fuzzy_order_test);\n         check_with_config(\n-            fuzzy_completion_config(),\n+            TEST_CONFIG,\n             r#\"\n //- /lib.rs crate:dep\n pub struct FirstStruct;"}, {"sha": "b4439b7d143638dbd4e8c12c3e9aaec2ea312c64", "filename": "crates/completion/src/config.rs", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fconfig.rs?ref=959406aeb5379024bd7b2143688cfa07e073fc99", "patch": "@@ -4,7 +4,7 @@\n //! module, and we use to statically check that we only produce snippet\n //! completions if we are allowed to.\n \n-use ide_db::helpers::insert_use::MergeBehavior;\n+use ide_db::helpers::{insert_use::MergeBehavior, SnippetCap};\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct CompletionConfig {\n@@ -15,27 +15,3 @@ pub struct CompletionConfig {\n     pub snippet_cap: Option<SnippetCap>,\n     pub merge: Option<MergeBehavior>,\n }\n-\n-impl CompletionConfig {\n-    pub fn allow_snippets(&mut self, yes: bool) {\n-        self.snippet_cap = if yes { Some(SnippetCap { _private: () }) } else { None }\n-    }\n-}\n-\n-#[derive(Clone, Copy, Debug, PartialEq, Eq)]\n-pub struct SnippetCap {\n-    _private: (),\n-}\n-\n-impl Default for CompletionConfig {\n-    fn default() -> Self {\n-        CompletionConfig {\n-            enable_postfix_completions: true,\n-            enable_autoimport_completions: true,\n-            add_call_parenthesis: true,\n-            add_call_argument_snippets: true,\n-            snippet_cap: Some(SnippetCap { _private: () }),\n-            merge: Some(MergeBehavior::Full),\n-        }\n-    }\n-}"}, {"sha": "7087fae37c7a957990997b0bc6993ff99b9f58b5", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=959406aeb5379024bd7b2143688cfa07e073fc99", "patch": "@@ -5,13 +5,11 @@ use std::fmt;\n use hir::{Documentation, ModPath, Mutability};\n use ide_db::helpers::{\n     insert_use::{self, ImportScope, MergeBehavior},\n-    mod_path_to_ast,\n+    mod_path_to_ast, SnippetCap,\n };\n use syntax::{algo, TextRange};\n use text_edit::TextEdit;\n \n-use crate::config::SnippetCap;\n-\n /// `CompletionItem` describes a single completion variant in the editor pop-up.\n /// It is basically a POD with various properties. To construct a\n /// `CompletionItem`, use `new` method and the `Builder` struct."}, {"sha": "3c7d5a46cf13204faff14d494f0d08e3a0d0d8c9", "filename": "crates/completion/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fcompletion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fcompletion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Flib.rs?ref=959406aeb5379024bd7b2143688cfa07e073fc99", "patch": "@@ -158,8 +158,7 @@ pub fn resolve_completion_edits(\n \n #[cfg(test)]\n mod tests {\n-    use crate::config::CompletionConfig;\n-    use crate::test_utils;\n+    use crate::test_utils::{self, TEST_CONFIG};\n \n     struct DetailAndDocumentation<'a> {\n         detail: &'a str,\n@@ -168,7 +167,7 @@ mod tests {\n \n     fn check_detail_and_documentation(ra_fixture: &str, expected: DetailAndDocumentation) {\n         let (db, position) = test_utils::position(ra_fixture);\n-        let config = CompletionConfig::default();\n+        let config = TEST_CONFIG;\n         let completions: Vec<_> = crate::completions(&db, &config, position).unwrap().into();\n         for item in completions {\n             if item.detail() == Some(expected.detail) {\n@@ -183,7 +182,7 @@ mod tests {\n \n     fn check_no_completion(ra_fixture: &str) {\n         let (db, position) = test_utils::position(ra_fixture);\n-        let config = CompletionConfig::default();\n+        let config = TEST_CONFIG;\n \n         let completions: Option<Vec<String>> = crate::completions(&db, &config, position)\n             .and_then(|completions| {"}, {"sha": "7554c1565194e167991a0f3a3a33cefd6cc35353", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=959406aeb5379024bd7b2143688cfa07e073fc99", "patch": "@@ -11,13 +11,13 @@ pub(crate) mod type_alias;\n mod builder_ext;\n \n use hir::{Documentation, HasAttrs, HirDisplay, Mutability, ScopeDef, Type};\n-use ide_db::RootDatabase;\n+use ide_db::{helpers::SnippetCap, RootDatabase};\n use syntax::TextRange;\n use test_utils::mark;\n \n use crate::{\n-    config::SnippetCap, item::ImportEdit, CompletionContext, CompletionItem, CompletionItemKind,\n-    CompletionKind, CompletionScore,\n+    item::ImportEdit, CompletionContext, CompletionItem, CompletionItemKind, CompletionKind,\n+    CompletionScore,\n };\n \n use crate::render::{enum_variant::render_variant, function::render_fn, macro_::render_macro};\n@@ -320,8 +320,8 @@ mod tests {\n     use test_utils::mark;\n \n     use crate::{\n-        test_utils::{check_edit, do_completion, get_all_items},\n-        CompletionConfig, CompletionKind, CompletionScore,\n+        test_utils::{check_edit, do_completion, get_all_items, TEST_CONFIG},\n+        CompletionKind, CompletionScore,\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n@@ -338,7 +338,7 @@ mod tests {\n             }\n         }\n \n-        let mut completions = get_all_items(CompletionConfig::default(), ra_fixture);\n+        let mut completions = get_all_items(TEST_CONFIG, ra_fixture);\n         completions.sort_by_key(|it| (Reverse(it.score()), it.label().to_string()));\n         let actual = completions\n             .into_iter()"}, {"sha": "7b2f62b4b458094d4bc9c1a64c29a357adfb7ba7", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=959406aeb5379024bd7b2143688cfa07e073fc99", "patch": "@@ -113,7 +113,7 @@ mod tests {\n     use test_utils::mark;\n \n     use crate::{\n-        test_utils::{check_edit, check_edit_with_config},\n+        test_utils::{check_edit, check_edit_with_config, TEST_CONFIG},\n         CompletionConfig,\n     };\n \n@@ -211,7 +211,7 @@ fn main() { S::foo(${1:&self})$0 }\n     fn suppress_arg_snippets() {\n         mark::check!(suppress_arg_snippets);\n         check_edit_with_config(\n-            CompletionConfig { add_call_argument_snippets: false, ..CompletionConfig::default() },\n+            CompletionConfig { add_call_argument_snippets: false, ..TEST_CONFIG },\n             \"with_args\",\n             r#\"\n fn with_args(x: i32, y: String) {}"}, {"sha": "61d8a17e56cfea77a229be3049d5e8d6ee53e380", "filename": "crates/completion/src/render/pattern.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fcompletion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fcompletion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fpattern.rs?ref=959406aeb5379024bd7b2143688cfa07e073fc99", "patch": "@@ -1,12 +1,10 @@\n //! Renderer for patterns.\n \n use hir::{db::HirDatabase, HasAttrs, HasVisibility, Name, StructKind};\n+use ide_db::helpers::SnippetCap;\n use itertools::Itertools;\n \n-use crate::{\n-    config::SnippetCap, item::CompletionKind, render::RenderContext, CompletionItem,\n-    CompletionItemKind,\n-};\n+use crate::{item::CompletionKind, render::RenderContext, CompletionItem, CompletionItemKind};\n \n fn visible_fields(\n     ctx: &RenderContext<'_>,"}, {"sha": "b5e296777e3c96ae8e0fa7522df593065985de95", "filename": "crates/completion/src/test_utils.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs?ref=959406aeb5379024bd7b2143688cfa07e073fc99", "patch": "@@ -1,15 +1,27 @@\n //! Runs completion for testing purposes.\n \n use hir::Semantics;\n-use ide_db::base_db::{fixture::ChangeFixture, FileLoader, FilePosition};\n-use ide_db::RootDatabase;\n+use ide_db::{\n+    base_db::{fixture::ChangeFixture, FileLoader, FilePosition},\n+    helpers::{insert_use::MergeBehavior, SnippetCap},\n+    RootDatabase,\n+};\n use itertools::Itertools;\n use stdx::{format_to, trim_indent};\n use syntax::{AstNode, NodeOrToken, SyntaxElement};\n use test_utils::{assert_eq_text, RangeOrOffset};\n \n use crate::{item::CompletionKind, CompletionConfig, CompletionItem};\n \n+pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n+    enable_postfix_completions: true,\n+    enable_autoimport_completions: true,\n+    add_call_parenthesis: true,\n+    add_call_argument_snippets: true,\n+    snippet_cap: SnippetCap::new(true),\n+    merge: Some(MergeBehavior::Full),\n+};\n+\n /// Creates analysis from a multi-file fixture, returns positions marked with <|>.\n pub(crate) fn position(ra_fixture: &str) -> (RootDatabase, FilePosition) {\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n@@ -24,7 +36,7 @@ pub(crate) fn position(ra_fixture: &str) -> (RootDatabase, FilePosition) {\n }\n \n pub(crate) fn do_completion(code: &str, kind: CompletionKind) -> Vec<CompletionItem> {\n-    do_completion_with_config(CompletionConfig::default(), code, kind)\n+    do_completion_with_config(TEST_CONFIG, code, kind)\n }\n \n pub(crate) fn do_completion_with_config(\n@@ -39,7 +51,7 @@ pub(crate) fn do_completion_with_config(\n }\n \n pub(crate) fn completion_list(code: &str, kind: CompletionKind) -> String {\n-    completion_list_with_config(CompletionConfig::default(), code, kind)\n+    completion_list_with_config(TEST_CONFIG, code, kind)\n }\n \n pub(crate) fn completion_list_with_config(\n@@ -76,7 +88,7 @@ fn monospace_width(s: &str) -> usize {\n }\n \n pub(crate) fn check_edit(what: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-    check_edit_with_config(CompletionConfig::default(), what, ra_fixture_before, ra_fixture_after)\n+    check_edit_with_config(TEST_CONFIG, what, ra_fixture_before, ra_fixture_after)\n }\n \n pub(crate) fn check_edit_with_config("}, {"sha": "cea2a13c8e960e2f857c0cb287e2820ad3de5c4b", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=959406aeb5379024bd7b2143688cfa07e073fc99", "patch": "@@ -80,7 +80,7 @@ pub use crate::{\n         HighlightedRange,\n     },\n };\n-pub use assists::{Assist, AssistConfig, AssistId, AssistKind};\n+pub use assists::{Assist, AssistConfig, AssistId, AssistKind, InsertUseConfig};\n pub use completion::{\n     CompletionConfig, CompletionItem, CompletionItemKind, CompletionScore, ImportEdit,\n     InsertTextFormat,"}, {"sha": "e3e5670f180bc37d15f696a290a3199cb9de3663", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=959406aeb5379024bd7b2143688cfa07e073fc99", "patch": "@@ -1,9 +1,10 @@\n //! A module with ide helpers for high-level ide features.\n-use crate::RootDatabase;\n+pub mod insert_use;\n+\n use hir::{Crate, Enum, Module, ScopeDef, Semantics, Trait};\n use syntax::ast::{self, make};\n \n-pub mod insert_use;\n+use crate::RootDatabase;\n \n /// Converts the mod path struct into its ast representation.\n pub fn mod_path_to_ast(path: &hir::ModPath) -> ast::Path {\n@@ -201,3 +202,18 @@ pub use prelude::*;\n         Some(def)\n     }\n }\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq)]\n+pub struct SnippetCap {\n+    _private: (),\n+}\n+\n+impl SnippetCap {\n+    pub const fn new(allow_snippets: bool) -> Option<SnippetCap> {\n+        if allow_snippets {\n+            Some(SnippetCap { _private: () })\n+        } else {\n+            None\n+        }\n+    }\n+}"}, {"sha": "7d3fda7a84c91ad71b9d2eb89d0cc82228977b4c", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=959406aeb5379024bd7b2143688cfa07e073fc99", "patch": "@@ -6,9 +6,12 @@ use anyhow::{bail, format_err, Result};\n use ide::{\n     Analysis, AnalysisHost, Change, CompletionConfig, DiagnosticsConfig, FilePosition, LineCol,\n };\n-use ide_db::base_db::{\n-    salsa::{Database, Durability},\n-    FileId,\n+use ide_db::{\n+    base_db::{\n+        salsa::{Database, Durability},\n+        FileId,\n+    },\n+    helpers::SnippetCap,\n };\n use vfs::AbsPathBuf;\n \n@@ -87,7 +90,14 @@ impl BenchCmd {\n                 let file_position = FilePosition { file_id, offset };\n \n                 if is_completion {\n-                    let options = CompletionConfig::default();\n+                    let options = CompletionConfig {\n+                        enable_postfix_completions: true,\n+                        enable_autoimport_completions: true,\n+                        add_call_parenthesis: true,\n+                        add_call_argument_snippets: true,\n+                        snippet_cap: SnippetCap::new(true),\n+                        merge: None,\n+                    };\n                     let res = do_work(&mut host, file_id, |analysis| {\n                         analysis.completions(&options, file_position)\n                     });"}, {"sha": "e3ba81ac6d6ba5d83a7391e47f582bdbb6191d3d", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 36, "deletions": 31, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=959406aeb5379024bd7b2143688cfa07e073fc99", "patch": "@@ -11,8 +11,11 @@ use std::{convert::TryFrom, ffi::OsString, path::PathBuf};\n \n use flycheck::FlycheckConfig;\n use hir::PrefixKind;\n-use ide::{AssistConfig, CompletionConfig, DiagnosticsConfig, HoverConfig, InlayHintsConfig};\n-use ide_db::helpers::insert_use::MergeBehavior;\n+use ide::{\n+    AssistConfig, CompletionConfig, DiagnosticsConfig, HoverConfig, InlayHintsConfig,\n+    InsertUseConfig,\n+};\n+use ide_db::helpers::{insert_use::MergeBehavior, SnippetCap};\n use itertools::Itertools;\n use lsp_types::{ClientCapabilities, MarkupKind};\n use project_model::{CargoConfig, ProjectJson, ProjectJsonData, ProjectManifest};\n@@ -534,37 +537,39 @@ impl Config {\n         }\n     }\n     pub fn completion(&self) -> CompletionConfig {\n-        let mut res = CompletionConfig::default();\n-        res.enable_postfix_completions = self.data.completion_postfix_enable;\n-        res.enable_autoimport_completions =\n-            self.data.completion_autoimport_enable && completion_item_edit_resolve(&self.caps);\n-        res.add_call_parenthesis = self.data.completion_addCallParenthesis;\n-        res.add_call_argument_snippets = self.data.completion_addCallArgumentSnippets;\n-        res.merge = self.merge_behavior();\n-\n-        res.allow_snippets(try_or!(\n-            self.caps\n-                .text_document\n-                .as_ref()?\n-                .completion\n-                .as_ref()?\n-                .completion_item\n-                .as_ref()?\n-                .snippet_support?,\n-            false\n-        ));\n-        res\n+        CompletionConfig {\n+            enable_postfix_completions: self.data.completion_postfix_enable,\n+            enable_autoimport_completions: self.data.completion_autoimport_enable\n+                && completion_item_edit_resolve(&self.caps),\n+            add_call_parenthesis: self.data.completion_addCallParenthesis,\n+            add_call_argument_snippets: self.data.completion_addCallArgumentSnippets,\n+            merge: self.merge_behavior(),\n+            snippet_cap: SnippetCap::new(try_or!(\n+                self.caps\n+                    .text_document\n+                    .as_ref()?\n+                    .completion\n+                    .as_ref()?\n+                    .completion_item\n+                    .as_ref()?\n+                    .snippet_support?,\n+                false\n+            )),\n+        }\n     }\n     pub fn assist(&self) -> AssistConfig {\n-        let mut res = AssistConfig::default();\n-        res.insert_use.merge = self.merge_behavior();\n-        res.insert_use.prefix_kind = match self.data.assist_importPrefix {\n-            ImportPrefixDef::Plain => PrefixKind::Plain,\n-            ImportPrefixDef::ByCrate => PrefixKind::ByCrate,\n-            ImportPrefixDef::BySelf => PrefixKind::BySelf,\n-        };\n-        res.allow_snippets(self.experimental(\"snippetTextEdit\"));\n-        res\n+        AssistConfig {\n+            snippet_cap: SnippetCap::new(self.experimental(\"snippetTextEdit\")),\n+            allowed: None,\n+            insert_use: InsertUseConfig {\n+                merge: self.merge_behavior(),\n+                prefix_kind: match self.data.assist_importPrefix {\n+                    ImportPrefixDef::Plain => PrefixKind::Plain,\n+                    ImportPrefixDef::ByCrate => PrefixKind::ByCrate,\n+                    ImportPrefixDef::BySelf => PrefixKind::BySelf,\n+                },\n+            },\n+        }\n     }\n     pub fn call_info_full(&self) -> bool {\n         self.data.callInfo_full"}, {"sha": "bb221c1d18b36c63cffe1c3e7a613e47c9dc5034", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959406aeb5379024bd7b2143688cfa07e073fc99/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=959406aeb5379024bd7b2143688cfa07e073fc99", "patch": "@@ -850,6 +850,7 @@ pub(crate) fn markup_content(markup: Markup) -> lsp_types::MarkupContent {\n #[cfg(test)]\n mod tests {\n     use ide::Analysis;\n+    use ide_db::helpers::SnippetCap;\n \n     use super::*;\n \n@@ -868,7 +869,14 @@ mod tests {\n         let (analysis, file_id) = Analysis::from_single_file(text);\n         let completions: Vec<(String, Option<String>)> = analysis\n             .completions(\n-                &ide::CompletionConfig::default(),\n+                &ide::CompletionConfig {\n+                    enable_postfix_completions: true,\n+                    enable_autoimport_completions: true,\n+                    add_call_parenthesis: true,\n+                    add_call_argument_snippets: true,\n+                    snippet_cap: SnippetCap::new(true),\n+                    merge: None,\n+                },\n                 ide_db::base_db::FilePosition { file_id, offset },\n             )\n             .unwrap()"}]}