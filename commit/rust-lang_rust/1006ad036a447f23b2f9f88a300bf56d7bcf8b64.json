{"sha": "1006ad036a447f23b2f9f88a300bf56d7bcf8b64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMDZhZDAzNmE0NDdmMjNiMmY5Zjg4YTMwMGJmNTZkN2JjZjhiNjQ=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-15T02:43:31Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-15T02:44:00Z"}, "message": "Fix test", "tree": {"sha": "2e2f6bffda1e03bf0a96c3c24b7c2df69e3a8203", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e2f6bffda1e03bf0a96c3c24b7c2df69e3a8203"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1006ad036a447f23b2f9f88a300bf56d7bcf8b64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1006ad036a447f23b2f9f88a300bf56d7bcf8b64", "html_url": "https://github.com/rust-lang/rust/commit/1006ad036a447f23b2f9f88a300bf56d7bcf8b64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1006ad036a447f23b2f9f88a300bf56d7bcf8b64/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b70898d5eeb9f7fc994035eb90b609c49f53f745", "url": "https://api.github.com/repos/rust-lang/rust/commits/b70898d5eeb9f7fc994035eb90b609c49f53f745", "html_url": "https://github.com/rust-lang/rust/commit/b70898d5eeb9f7fc994035eb90b609c49f53f745"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "cc339cf8ce955d65bb73fe364f2a37f61eafa814", "filename": "src/librustc_mir/dataflow/generic/tests.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1006ad036a447f23b2f9f88a300bf56d7bcf8b64/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1006ad036a447f23b2f9f88a300bf56d7bcf8b64/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Ftests.rs?ref=1006ad036a447f23b2f9f88a300bf56d7bcf8b64", "patch": "@@ -4,6 +4,7 @@ use rustc::mir::{self, BasicBlock, Location};\n use rustc::ty;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n+use rustc_span::DUMMY_SP;\n \n use super::*;\n use crate::dataflow::BottomValue;\n@@ -23,8 +24,7 @@ fn is_call_terminator_non_diverging(body: &mir::Body<'_>, loc: Location) -> bool\n /// This is the `Body` that will be used by the `MockAnalysis` below. The shape of its CFG is not\n /// important.\n fn mock_body() -> mir::Body<'static> {\n-    let span = syntax_pos::DUMMY_SP;\n-    let source_info = mir::SourceInfo { scope: mir::OUTERMOST_SOURCE_SCOPE, span };\n+    let source_info = mir::SourceInfo { scope: mir::OUTERMOST_SOURCE_SCOPE, span: DUMMY_SP };\n \n     let mut blocks = IndexVec::new();\n     let mut block = |n, kind| {\n@@ -97,14 +97,14 @@ impl MockAnalysis<'tcx> {\n \n     /// The entry set for each `BasicBlock` is the ID of that block offset by a fixed amount to\n     /// avoid colliding with the statement/terminator effects.\n-    fn mock_entry_set(self, bb: BasicBlock) -> BitSet<usize> {\n-        let mut ret = BitSet::new_empty(self.bits_per_block(body));\n+    fn mock_entry_set(&self, bb: BasicBlock) -> BitSet<usize> {\n+        let mut ret = BitSet::new_empty(self.bits_per_block(self.body));\n         ret.insert(Self::BASIC_BLOCK_OFFSET + bb.index());\n         ret\n     }\n \n     fn mock_entry_sets(&self) -> IndexVec<BasicBlock, BitSet<usize>> {\n-        let empty = BitSet::new_empty(self.bits_per_block(body));\n+        let empty = BitSet::new_empty(self.bits_per_block(self.body));\n         let mut ret = IndexVec::from_elem(empty, &self.body.basic_blocks());\n \n         for (bb, _) in self.body.basic_blocks().iter_enumerated() {\n@@ -183,7 +183,7 @@ impl Analysis<'tcx> for MockAnalysis<'tcx> {\n         _statement: &mir::Statement<'tcx>,\n         location: Location,\n     ) {\n-        let idx = SeekTarget::After(location).effect(self.body).unwrap();\n+        let idx = self.effect_at_target(SeekTarget::After(location)).unwrap();\n         assert!(state.insert(idx));\n     }\n \n@@ -193,7 +193,7 @@ impl Analysis<'tcx> for MockAnalysis<'tcx> {\n         _statement: &mir::Statement<'tcx>,\n         location: Location,\n     ) {\n-        let idx = SeekTarget::Before(location).effect(self.body).unwrap();\n+        let idx = self.effect_at_target(SeekTarget::Before(location)).unwrap();\n         assert!(state.insert(idx));\n     }\n \n@@ -203,7 +203,7 @@ impl Analysis<'tcx> for MockAnalysis<'tcx> {\n         _terminator: &mir::Terminator<'tcx>,\n         location: Location,\n     ) {\n-        let idx = SeekTarget::After(location).effect(self.body).unwrap();\n+        let idx = self.effect_at_target(SeekTarget::After(location)).unwrap();\n         assert!(state.insert(idx));\n     }\n \n@@ -213,7 +213,7 @@ impl Analysis<'tcx> for MockAnalysis<'tcx> {\n         _terminator: &mir::Terminator<'tcx>,\n         location: Location,\n     ) {\n-        let idx = SeekTarget::Before(location).effect(self.body).unwrap();\n+        let idx = self.effect_at_target(SeekTarget::Before(location)).unwrap();\n         assert!(state.insert(idx));\n     }\n \n@@ -226,7 +226,7 @@ impl Analysis<'tcx> for MockAnalysis<'tcx> {\n         _return_place: &mir::Place<'tcx>,\n     ) {\n         let location = self.body.terminator_loc(block);\n-        let idx = SeekTarget::AfterAssumeCallReturns(location).effect(self.body).unwrap();\n+        let idx = self.effect_at_target(SeekTarget::AfterAssumeCallReturns(location)).unwrap();\n         assert!(state.insert(idx));\n     }\n }\n@@ -286,7 +286,10 @@ fn cursor_seek() {\n         .analysis()\n         .effect_at_target(SeekTarget::AfterAssumeCallReturns(call_terminator_loc))\n         .unwrap();\n-    assert_ne!(call_return_effect, SeekTarget::After(call_terminator_loc).effect(body).unwrap());\n+    assert_ne!(\n+        call_return_effect,\n+        cursor.analysis().effect_at_target(SeekTarget::After(call_terminator_loc)).unwrap()\n+    );\n \n     cursor.seek_after(call_terminator_loc);\n     assert!(!cursor.get().contains(call_return_effect));"}]}