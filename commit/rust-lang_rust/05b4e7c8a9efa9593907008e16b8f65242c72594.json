{"sha": "05b4e7c8a9efa9593907008e16b8f65242c72594", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YjRlN2M4YTllZmE5NTkzOTA3MDA4ZTE2YjhmNjUyNDJjNzI1OTQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-02-08T10:45:53Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-02-11T18:01:40Z"}, "message": "Add way to hide suggestion snippet window from cli output", "tree": {"sha": "005578b7259f2e8554b3581a42282d10d6d636ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/005578b7259f2e8554b3581a42282d10d6d636ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05b4e7c8a9efa9593907008e16b8f65242c72594", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05b4e7c8a9efa9593907008e16b8f65242c72594", "html_url": "https://github.com/rust-lang/rust/commit/05b4e7c8a9efa9593907008e16b8f65242c72594", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05b4e7c8a9efa9593907008e16b8f65242c72594/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57d7cfc3cf50f0c427ad3043ff09eaef20671320", "url": "https://api.github.com/repos/rust-lang/rust/commits/57d7cfc3cf50f0c427ad3043ff09eaef20671320", "html_url": "https://github.com/rust-lang/rust/commit/57d7cfc3cf50f0c427ad3043ff09eaef20671320"}], "stats": {"total": 120, "additions": 84, "deletions": 36}, "files": [{"sha": "484cfd045a69f0b5c3ce9a916ccc9c7442dc4d84", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05b4e7c8a9efa9593907008e16b8f65242c72594/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b4e7c8a9efa9593907008e16b8f65242c72594/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=05b4e7c8a9efa9593907008e16b8f65242c72594", "patch": "@@ -1,4 +1,5 @@\n use crate::CodeSuggestion;\n+use crate::SuggestionStyle;\n use crate::SubstitutionPart;\n use crate::Substitution;\n use crate::Applicability;\n@@ -243,7 +244,7 @@ impl Diagnostic {\n                     .collect(),\n             }],\n             msg: msg.to_owned(),\n-            show_code_when_inline: true,\n+            style: SuggestionStyle::ShowCode,\n             applicability,\n         });\n         self\n@@ -277,7 +278,7 @@ impl Diagnostic {\n                 }],\n             }],\n             msg: msg.to_owned(),\n-            show_code_when_inline: true,\n+            style: SuggestionStyle::ShowCode,\n             applicability,\n         });\n         self\n@@ -295,7 +296,7 @@ impl Diagnostic {\n                 }],\n             }).collect(),\n             msg: msg.to_owned(),\n-            show_code_when_inline: true,\n+            style: SuggestionStyle::ShowCode,\n             applicability,\n         });\n         self\n@@ -316,7 +317,7 @@ impl Diagnostic {\n                 }],\n             }],\n             msg: msg.to_owned(),\n-            show_code_when_inline: false,\n+            style: SuggestionStyle::HideCodeInline,\n             applicability: applicability,\n         });\n         self"}, {"sha": "5696b2eee8956a7355f97859494035b2818d20c8", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 56, "deletions": 31, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/05b4e7c8a9efa9593907008e16b8f65242c72594/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b4e7c8a9efa9593907008e16b8f65242c72594/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=05b4e7c8a9efa9593907008e16b8f65242c72594", "patch": "@@ -2,7 +2,10 @@ use Destination::*;\n \n use syntax_pos::{SourceFile, Span, MultiSpan};\n \n-use crate::{Level, CodeSuggestion, DiagnosticBuilder, SubDiagnostic, SourceMapperDyn, DiagnosticId};\n+use crate::{\n+    Level, CodeSuggestion, DiagnosticBuilder, SubDiagnostic,\n+    SuggestionStyle, SourceMapperDyn, DiagnosticId,\n+};\n use crate::snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, StyledString, Style};\n use crate::styled_buffer::StyledBuffer;\n \n@@ -45,7 +48,7 @@ impl Emitter for EmitterWriter {\n                // don't display multiline suggestions as labels\n                !sugg.substitutions[0].parts[0].snippet.contains('\\n') {\n                 let substitution = &sugg.substitutions[0].parts[0].snippet.trim();\n-                let msg = if substitution.len() == 0 || !sugg.show_code_when_inline {\n+                let msg = if substitution.len() == 0 || sugg.style.hide_inline() {\n                     // This substitution is only removal or we explicitly don't want to show the\n                     // code inline, don't show it\n                     format!(\"help: {}\", sugg.msg)\n@@ -942,14 +945,15 @@ impl EmitterWriter {\n         }\n     }\n \n-    fn emit_message_default(&mut self,\n-                            msp: &MultiSpan,\n-                            msg: &[(String, Style)],\n-                            code: &Option<DiagnosticId>,\n-                            level: &Level,\n-                            max_line_num_len: usize,\n-                            is_secondary: bool)\n-                            -> io::Result<()> {\n+    fn emit_message_default(\n+        &mut self,\n+        msp: &MultiSpan,\n+        msg: &[(String, Style)],\n+        code: &Option<DiagnosticId>,\n+        level: &Level,\n+        max_line_num_len: usize,\n+        is_secondary: bool,\n+    ) -> io::Result<()> {\n         let mut buffer = StyledBuffer::new();\n         let header_style = if is_secondary {\n             Style::HeaderMsg\n@@ -1184,11 +1188,12 @@ impl EmitterWriter {\n \n     }\n \n-    fn emit_suggestion_default(&mut self,\n-                               suggestion: &CodeSuggestion,\n-                               level: &Level,\n-                               max_line_num_len: usize)\n-                               -> io::Result<()> {\n+    fn emit_suggestion_default(\n+        &mut self,\n+        suggestion: &CodeSuggestion,\n+        level: &Level,\n+        max_line_num_len: usize,\n+    ) -> io::Result<()> {\n         if let Some(ref sm) = self.sm {\n             let mut buffer = StyledBuffer::new();\n \n@@ -1198,11 +1203,13 @@ impl EmitterWriter {\n                 buffer.append(0, &level_str, Style::Level(level.clone()));\n                 buffer.append(0, \": \", Style::HeaderMsg);\n             }\n-            self.msg_to_buffer(&mut buffer,\n-                               &[(suggestion.msg.to_owned(), Style::NoStyle)],\n-                               max_line_num_len,\n-                               \"suggestion\",\n-                               Some(Style::HeaderMsg));\n+            self.msg_to_buffer(\n+                &mut buffer,\n+                &[(suggestion.msg.to_owned(), Style::NoStyle)],\n+                max_line_num_len,\n+                \"suggestion\",\n+                Some(Style::HeaderMsg),\n+            );\n \n             // Render the replacements for each suggestion\n             let suggestions = suggestion.splice_lines(&**sm);\n@@ -1340,22 +1347,40 @@ impl EmitterWriter {\n                 if !self.short_message {\n                     for child in children {\n                         let span = child.render_span.as_ref().unwrap_or(&child.span);\n-                        match self.emit_message_default(&span,\n-                                                        &child.styled_message(),\n-                                                        &None,\n-                                                        &child.level,\n-                                                        max_line_num_len,\n-                                                        true) {\n+                        match self.emit_message_default(\n+                            &span,\n+                            &child.styled_message(),\n+                            &None,\n+                            &child.level,\n+                            max_line_num_len,\n+                            true,\n+                        ) {\n                             Err(e) => panic!(\"failed to emit error: {}\", e),\n                             _ => ()\n                         }\n                     }\n                     for sugg in suggestions {\n-                        match self.emit_suggestion_default(sugg,\n-                                                           &Level::Help,\n-                                                           max_line_num_len) {\n-                            Err(e) => panic!(\"failed to emit error: {}\", e),\n-                            _ => ()\n+                        if sugg.style == SuggestionStyle::HideCodeAlways {\n+                            match self.emit_message_default(\n+                                &MultiSpan::new(),\n+                                &[(sugg.msg.to_owned(), Style::HeaderMsg)],\n+                                &None,\n+                                &Level::Help,\n+                                max_line_num_len,\n+                                true,\n+                            ) {\n+                                Err(e) => panic!(\"failed to emit error: {}\", e),\n+                                _ => ()\n+                            }\n+                        } else {\n+                            match self.emit_suggestion_default(\n+                                sugg,\n+                                &Level::Help,\n+                                max_line_num_len,\n+                            ) {\n+                                Err(e) => panic!(\"failed to emit error: {}\", e),\n+                                _ => ()\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "be959a29a55779a787ada6b10b6a6298a93fd7fb", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/05b4e7c8a9efa9593907008e16b8f65242c72594/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b4e7c8a9efa9593907008e16b8f65242c72594/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=05b4e7c8a9efa9593907008e16b8f65242c72594", "patch": "@@ -68,6 +68,27 @@ pub enum Applicability {\n     Unspecified,\n }\n \n+#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash, RustcEncodable, RustcDecodable)]\n+pub enum SuggestionStyle {\n+    /// Hide the suggested code when displaying this suggestion inline.\n+    HideCodeInline,\n+    /// Always hide the suggested code.\n+    HideCodeAlways,\n+    /// Always show the suggested code.\n+    /// This will *not* show the code if the suggestion is inline *and* the suggested code is\n+    /// empty.\n+    ShowCode,\n+}\n+\n+impl SuggestionStyle {\n+    fn hide_inline(&self) -> bool {\n+        match *self {\n+            SuggestionStyle::HideCodeAlways | SuggestionStyle::HideCodeInline => true,\n+            SuggestionStyle::ShowCode => false,\n+        }\n+    }\n+}\n+\n #[derive(Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n pub struct CodeSuggestion {\n     /// Each substitute can have multiple variants due to multiple\n@@ -93,7 +114,8 @@ pub struct CodeSuggestion {\n     /// ```\n     pub substitutions: Vec<Substitution>,\n     pub msg: String,\n-    pub show_code_when_inline: bool,\n+    /// Visual representation of this suggestion.\n+    pub style: SuggestionStyle,\n     /// Whether or not the suggestion is approximate\n     ///\n     /// Sometimes we may show suggestions with placeholders,"}]}