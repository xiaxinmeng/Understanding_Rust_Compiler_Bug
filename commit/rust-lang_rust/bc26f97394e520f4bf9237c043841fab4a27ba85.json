{"sha": "bc26f97394e520f4bf9237c043841fab4a27ba85", "node_id": "C_kwDOAAsO6NoAKGJjMjZmOTczOTRlNTIwZjRiZjkyMzdjMDQzODQxZmFiNGEyN2JhODU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-27T21:32:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-27T21:32:24Z"}, "message": "Rollup merge of #93193 - Kobzol:stable-hash-permutation-test, r=the8472\n\nAdd test for stable hash uniqueness of adjacent field values\n\nThis PR adds a simple test to check that stable hash will produce a different hash if the order of two values that have the same combined bit pattern changes.\n\nr? `@the8472`", "tree": {"sha": "219b0dcee9cf798bae8d460a3b4c39814b33de4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/219b0dcee9cf798bae8d460a3b4c39814b33de4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc26f97394e520f4bf9237c043841fab4a27ba85", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh8w9pCRBK7hj4Ov3rIwAAmcEIABehKgOtBJFZL0eC0mGP7CXX\nlCkQ+hCQ4UQD2rpgecqVSlPWCpxZsDvQJjRrx2KPp/Zqw6EbUL54jpIfzrZwSHQc\n7Z4RYBYmAMClepQvmmq5YQJlb1ksOgLDZnjFShOspZ9GcVkzE7vfqCB/LLCNmFOJ\nVu6tDz7wonDiZgIJebdILtIltFBLCCPsjmgag48c/6chTV0Svx4c0Jr6dri9frHX\nnYHMtRcwm3W521yy1x3uu9wdyvnHYBu+j7lf4ZOHJ59Zz0LzhMazplavv7Anh/zq\ng17d4DRHzqNE6f4NO2eLRX5ft7xpc7yi/3CganxMl3L3eoiEqt72AkN3QA6OqZY=\n=m0NC\n-----END PGP SIGNATURE-----\n", "payload": "tree 219b0dcee9cf798bae8d460a3b4c39814b33de4e\nparent 54f357836ec5786fa7f6f08626ee5b692ccb2757\nparent 1ffd043caf7598484a9f38c580aca91760a571f6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643319144 +0100\ncommitter GitHub <noreply@github.com> 1643319144 +0100\n\nRollup merge of #93193 - Kobzol:stable-hash-permutation-test, r=the8472\n\nAdd test for stable hash uniqueness of adjacent field values\n\nThis PR adds a simple test to check that stable hash will produce a different hash if the order of two values that have the same combined bit pattern changes.\n\nr? `@the8472`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc26f97394e520f4bf9237c043841fab4a27ba85", "html_url": "https://github.com/rust-lang/rust/commit/bc26f97394e520f4bf9237c043841fab4a27ba85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc26f97394e520f4bf9237c043841fab4a27ba85/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54f357836ec5786fa7f6f08626ee5b692ccb2757", "url": "https://api.github.com/repos/rust-lang/rust/commits/54f357836ec5786fa7f6f08626ee5b692ccb2757", "html_url": "https://github.com/rust-lang/rust/commit/54f357836ec5786fa7f6f08626ee5b692ccb2757"}, {"sha": "1ffd043caf7598484a9f38c580aca91760a571f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ffd043caf7598484a9f38c580aca91760a571f6", "html_url": "https://github.com/rust-lang/rust/commit/1ffd043caf7598484a9f38c580aca91760a571f6"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "31190363eb61bb48875374b0a9f381df5cfc56b6", "filename": "compiler/rustc_data_structures/src/stable_hasher/tests.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bc26f97394e520f4bf9237c043841fab4a27ba85/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc26f97394e520f4bf9237c043841fab4a27ba85/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs?ref=bc26f97394e520f4bf9237c043841fab4a27ba85", "patch": "@@ -98,3 +98,45 @@ fn test_hash_bit_matrix() {\n     assert_ne!(a, b);\n     assert_ne!(hash(&a), hash(&b));\n }\n+\n+// Check that exchanging the value of two adjacent fields changes the hash.\n+#[test]\n+fn test_attribute_permutation() {\n+    macro_rules! test_type {\n+        ($ty: ty) => {{\n+            struct Foo {\n+                a: $ty,\n+                b: $ty,\n+            }\n+\n+            impl<CTX> HashStable<CTX> for Foo {\n+                fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n+                    self.a.hash_stable(hcx, hasher);\n+                    self.b.hash_stable(hcx, hasher);\n+                }\n+            }\n+\n+            #[allow(overflowing_literals)]\n+            let mut item = Foo { a: 0xFF, b: 0xFF_FF };\n+            let hash_a = hash(&item);\n+            std::mem::swap(&mut item.a, &mut item.b);\n+            let hash_b = hash(&item);\n+            assert_ne!(\n+                hash_a,\n+                hash_b,\n+                \"The hash stayed the same after values were swapped for type `{}`!\",\n+                stringify!($ty)\n+            );\n+        }};\n+    }\n+\n+    test_type!(u16);\n+    test_type!(u32);\n+    test_type!(u64);\n+    test_type!(u128);\n+\n+    test_type!(i16);\n+    test_type!(i32);\n+    test_type!(i64);\n+    test_type!(i128);\n+}"}]}