{"sha": "bc0269dbed386ace00d1a466a6b613769b3e135f", "node_id": "C_kwDOAAsO6NoAKGJjMDI2OWRiZWQzODZhY2UwMGQxYTQ2NmE2YjYxMzc2OWIzZTEzNWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-11T15:02:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-11T15:02:49Z"}, "message": "Rollup merge of #91718 - RalfJung:unaligned_references, r=nagisa\n\ngive more help in the unaligned_references lint\n\nCc https://github.com/rust-lang/rust/issues/82523#issuecomment-988138440 ``@kaisq``", "tree": {"sha": "e872940c74b601179a33e2f4269d317b208b0c44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e872940c74b601179a33e2f4269d317b208b0c44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc0269dbed386ace00d1a466a6b613769b3e135f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhtL2aCRBK7hj4Ov3rIwAAD3cIABTmZYMWBc6Y6gmkstjaWFUI\naFo8jHbcD12LATrGkPeP1f/8NH4gA8Glbw86bnTJLdlzSP79m1qzavOEKsysAZjv\n1jmbrur0q5+Om6natsfOJ9ZsfusqsoM7mHGJjELkyYkOJ+ciOCWzkhfo+wPcnkF7\nhc9ZF8VBm6ocs4IGEyrC8lCZ1LqK5rlyP5y9HLN6DAivzDYD7xTXdM9ekwC4BEX/\n6JqUwjpu7qXXe5tKWDWACAvzjp6n5g1s8yi3uHqfR48rVMbIR/SFHSd4QGOjKlj3\ntRqdpP13HM9WZF5I3B1tAiSj5+eQPsK9Egqu3Nx64jN4n9bZfOur2TZcHaj631E=\n=UN1J\n-----END PGP SIGNATURE-----\n", "payload": "tree e872940c74b601179a33e2f4269d317b208b0c44\nparent ceae1dd3f847682a9b2bba347ea2f85b1fb6c684\nparent 7d18a456cafa4bc09fe6ac014b208e3f9570f18b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639234969 +0100\ncommitter GitHub <noreply@github.com> 1639234969 +0100\n\nRollup merge of #91718 - RalfJung:unaligned_references, r=nagisa\n\ngive more help in the unaligned_references lint\n\nCc https://github.com/rust-lang/rust/issues/82523#issuecomment-988138440 ``@kaisq``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc0269dbed386ace00d1a466a6b613769b3e135f", "html_url": "https://github.com/rust-lang/rust/commit/bc0269dbed386ace00d1a466a6b613769b3e135f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc0269dbed386ace00d1a466a6b613769b3e135f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ceae1dd3f847682a9b2bba347ea2f85b1fb6c684", "url": "https://api.github.com/repos/rust-lang/rust/commits/ceae1dd3f847682a9b2bba347ea2f85b1fb6c684", "html_url": "https://github.com/rust-lang/rust/commit/ceae1dd3f847682a9b2bba347ea2f85b1fb6c684"}, {"sha": "7d18a456cafa4bc09fe6ac014b208e3f9570f18b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d18a456cafa4bc09fe6ac014b208e3f9570f18b", "html_url": "https://github.com/rust-lang/rust/commit/7d18a456cafa4bc09fe6ac014b208e3f9570f18b"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "23d59c8007135c0b91ba9031a28c19d87e7f190a", "filename": "compiler/rustc_mir_transform/src/check_packed_ref.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bc0269dbed386ace00d1a466a6b613769b3e135f/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0269dbed386ace00d1a466a6b613769b3e135f/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs?ref=bc0269dbed386ace00d1a466a6b613769b3e135f", "patch": "@@ -105,6 +105,11 @@ impl<'tcx> Visitor<'tcx> for PackedRefChecker<'_, 'tcx> {\n                                     a misaligned reference is undefined behavior (even if that \\\n                                     reference is never dereferenced)\",\n                                 )\n+                                .help(\n+                                    \"copy the field contents to a local variable, or replace the \\\n+                                    reference with a raw pointer and use `read_unaligned`/`write_unaligned` \\\n+                                    (loads and stores via `*p` must be properly aligned even when using raw pointers)\"\n+                                )\n                                 .emit()\n                         },\n                     );"}, {"sha": "84cdb1453f82d4d0c7e2f6a3b904726efb2ff7a1", "filename": "src/test/ui/binding/issue-53114-safety-checks.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc0269dbed386ace00d1a466a6b613769b3e135f/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc0269dbed386ace00d1a466a6b613769b3e135f/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr?ref=bc0269dbed386ace00d1a466a6b613769b3e135f", "patch": "@@ -8,6 +8,7 @@ LL |     let _ = &p.b;\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n warning: reference to packed field is unaligned\n   --> $DIR/issue-53114-safety-checks.rs:29:17\n@@ -18,6 +19,7 @@ LL |     let (_,) = (&p.b,);\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n warning: reference to packed field is unaligned\n   --> $DIR/issue-53114-safety-checks.rs:39:11\n@@ -28,6 +30,7 @@ LL |     match &p.b  { _ => { } }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n warning: reference to packed field is unaligned\n   --> $DIR/issue-53114-safety-checks.rs:45:12\n@@ -38,6 +41,7 @@ LL |     match (&p.b,)  { (_,) => { } }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n   --> $DIR/issue-53114-safety-checks.rs:26:13"}, {"sha": "fc0179d2cb4ca45779bc5e7619d7c673238145f7", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/repr_packed.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc0269dbed386ace00d1a466a6b613769b3e135f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc0269dbed386ace00d1a466a6b613769b3e135f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr?ref=bc0269dbed386ace00d1a466a6b613769b3e135f", "patch": "@@ -8,6 +8,7 @@ LL |         println!(\"{}\", foo.x);\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n    = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: 1 warning emitted"}, {"sha": "53c9380fb7efbda5d3b9ddd464208b2c39407984", "filename": "src/test/ui/lint/unaligned_references.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bc0269dbed386ace00d1a466a6b613769b3e135f/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc0269dbed386ace00d1a466a6b613769b3e135f/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr?ref=bc0269dbed386ace00d1a466a6b613769b3e135f", "patch": "@@ -12,6 +12,7 @@ LL | #![deny(unaligned_references)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error: reference to packed field is unaligned\n   --> $DIR/unaligned_references.rs:24:17\n@@ -22,6 +23,7 @@ LL |         let _ = &good.data;\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error: reference to packed field is unaligned\n   --> $DIR/unaligned_references.rs:27:17\n@@ -32,6 +34,7 @@ LL |         let _ = &good.data as *const _;\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error: reference to packed field is unaligned\n   --> $DIR/unaligned_references.rs:29:27\n@@ -42,6 +45,7 @@ LL |         let _: *const _ = &good.data;\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error: reference to packed field is unaligned\n   --> $DIR/unaligned_references.rs:32:17\n@@ -52,6 +56,7 @@ LL |         let _ = good.data.clone();\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error: reference to packed field is unaligned\n   --> $DIR/unaligned_references.rs:35:17\n@@ -62,6 +67,7 @@ LL |         let _ = &good.data2[0];\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error: reference to packed field is unaligned\n   --> $DIR/unaligned_references.rs:45:17\n@@ -72,6 +78,7 @@ LL |         let _ = &packed2.x;\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error: aborting due to 7 previous errors\n "}, {"sha": "01e2395049df43a1353c637509448cd04c6c09f3", "filename": "src/test/ui/lint/unaligned_references_external_macro.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc0269dbed386ace00d1a466a6b613769b3e135f/src%2Ftest%2Fui%2Flint%2Funaligned_references_external_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc0269dbed386ace00d1a466a6b613769b3e135f/src%2Ftest%2Fui%2Flint%2Funaligned_references_external_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funaligned_references_external_macro.stderr?ref=bc0269dbed386ace00d1a466a6b613769b3e135f", "patch": "@@ -24,6 +24,7 @@ LL | | }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n    = note: this error originates in the macro `unaligned_references_external_crate::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "bba056d59f831a246422d6f59662b2598dc9c589", "filename": "src/test/ui/packed/issue-27060.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc0269dbed386ace00d1a466a6b613769b3e135f/src%2Ftest%2Fui%2Fpacked%2Fissue-27060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc0269dbed386ace00d1a466a6b613769b3e135f/src%2Ftest%2Fui%2Fpacked%2Fissue-27060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fissue-27060.stderr?ref=bc0269dbed386ace00d1a466a6b613769b3e135f", "patch": "@@ -12,6 +12,7 @@ LL | #[deny(unaligned_references)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error: reference to packed field is unaligned\n   --> $DIR/issue-27060.rs:18:13\n@@ -22,6 +23,7 @@ LL |     let _ = &good.data2[0];\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error: reference to packed field is unaligned\n   --> $DIR/issue-27060.rs:21:13\n@@ -32,6 +34,7 @@ LL |     let _ = &good.data;\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error: reference to packed field is unaligned\n   --> $DIR/issue-27060.rs:23:13\n@@ -42,6 +45,7 @@ LL |     let _ = &good.data2[0];\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "04585b499862be41d06877ff91a1607ad788753d", "filename": "src/test/ui/packed/packed-struct-borrow-element-64bit.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc0269dbed386ace00d1a466a6b613769b3e135f/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc0269dbed386ace00d1a466a6b613769b3e135f/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.stderr?ref=bc0269dbed386ace00d1a466a6b613769b3e135f", "patch": "@@ -8,6 +8,7 @@ LL |     let brw = &foo.baz;\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n warning: 1 warning emitted\n "}, {"sha": "a50b130200151ef1dc543db30803b837a9396441", "filename": "src/test/ui/packed/packed-struct-borrow-element.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc0269dbed386ace00d1a466a6b613769b3e135f/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc0269dbed386ace00d1a466a6b613769b3e135f/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element.stderr?ref=bc0269dbed386ace00d1a466a6b613769b3e135f", "patch": "@@ -8,6 +8,7 @@ LL |     let brw = &foo.baz;\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n warning: reference to packed field is unaligned\n   --> $DIR/packed-struct-borrow-element.rs:30:15\n@@ -18,6 +19,7 @@ LL |     let brw = &foo.baz;\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n warning: 2 warnings emitted\n "}]}