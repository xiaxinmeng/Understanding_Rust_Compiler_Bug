{"sha": "c6c2acdb47d320658d22b0ac0f8a357fdc071b1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YzJhY2RiNDdkMzIwNjU4ZDIyYjBhYzBmOGEzNTdmZGMwNzFiMWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-14T14:42:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-14T14:42:28Z"}, "message": "Rollup merge of #64375 - kornelski:vecdrop, r=rkruppe\n\nFast path for vec.clear/truncate\n\nFor trivial types like `u8`, `vec.truncate()`/`vec.clear()` relies on the optimizer to remove the loop. This means more work in debug builds, and more work for the optimizer.\n\nAvoiding this busywork is exactly what `mem::needs_drop::<T>()` is for.", "tree": {"sha": "001224f37a46a755ced70fb8f9ea9e85fba29d8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/001224f37a46a755ced70fb8f9ea9e85fba29d8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6c2acdb47d320658d22b0ac0f8a357fdc071b1f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdfPxUCRBK7hj4Ov3rIwAAdHIIAICuMBluyzri89LMskftRJoK\n0IK+4E+HAg73lb2X2MMMBUnYZol1TOdVpsrEW92bjlg4jy81a4M4HTL9fB4cR/Li\nI87QXpKQ3eESrmgNtd1Dl2g+djQ2m5O/QrRaGQTm0uuzhOGpt/YaoQYYyHV8odBV\nRE3igbBjAUf5MN3IF9ZWmZhSthEL8ssVo89l74RXTBHo0y46kuOi8Kd7J5A1xvDg\ngv04WPmv+7x3DJfARwkmQTVYGxn6tXu/G/JpMSmuwGzIyOsc6lLkU2JKxRUQurqS\nGToe0gN7DDbzEdQIxiH7PBi8CfiVAnRA/n3btaxRWF372zCRMxaxF2VUNsa1k3w=\n=YBDF\n-----END PGP SIGNATURE-----\n", "payload": "tree 001224f37a46a755ced70fb8f9ea9e85fba29d8d\nparent af33a1d902c7dec7824740e971953b21996d4429\nparent 223600ac2c23715f350ceae7f315f5056aae6fc0\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1568472148 +0200\ncommitter GitHub <noreply@github.com> 1568472148 +0200\n\nRollup merge of #64375 - kornelski:vecdrop, r=rkruppe\n\nFast path for vec.clear/truncate\n\nFor trivial types like `u8`, `vec.truncate()`/`vec.clear()` relies on the optimizer to remove the loop. This means more work in debug builds, and more work for the optimizer.\n\nAvoiding this busywork is exactly what `mem::needs_drop::<T>()` is for.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6c2acdb47d320658d22b0ac0f8a357fdc071b1f", "html_url": "https://github.com/rust-lang/rust/commit/c6c2acdb47d320658d22b0ac0f8a357fdc071b1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6c2acdb47d320658d22b0ac0f8a357fdc071b1f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af33a1d902c7dec7824740e971953b21996d4429", "url": "https://api.github.com/repos/rust-lang/rust/commits/af33a1d902c7dec7824740e971953b21996d4429", "html_url": "https://github.com/rust-lang/rust/commit/af33a1d902c7dec7824740e971953b21996d4429"}, {"sha": "223600ac2c23715f350ceae7f315f5056aae6fc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/223600ac2c23715f350ceae7f315f5056aae6fc0", "html_url": "https://github.com/rust-lang/rust/commit/223600ac2c23715f350ceae7f315f5056aae6fc0"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "c513658c842e51eb7bd6a2444c3d9b45d2b37022", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c6c2acdb47d320658d22b0ac0f8a357fdc071b1f/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c2acdb47d320658d22b0ac0f8a357fdc071b1f/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=c6c2acdb47d320658d22b0ac0f8a357fdc071b1f", "patch": "@@ -685,21 +685,25 @@ impl<T> Vec<T> {\n     /// [`drain`]: #method.drain\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn truncate(&mut self, len: usize) {\n-        let current_len = self.len;\n-        unsafe {\n-            let mut ptr = self.as_mut_ptr().add(self.len);\n-            // Set the final length at the end, keeping in mind that\n-            // dropping an element might panic. Works around a missed\n-            // optimization, as seen in the following issue:\n-            // https://github.com/rust-lang/rust/issues/51802\n-            let mut local_len = SetLenOnDrop::new(&mut self.len);\n+        if mem::needs_drop::<T>() {\n+            let current_len = self.len;\n+            unsafe {\n+                let mut ptr = self.as_mut_ptr().add(self.len);\n+                // Set the final length at the end, keeping in mind that\n+                // dropping an element might panic. Works around a missed\n+                // optimization, as seen in the following issue:\n+                // https://github.com/rust-lang/rust/issues/51802\n+                let mut local_len = SetLenOnDrop::new(&mut self.len);\n \n-            // drop any extra elements\n-            for _ in len..current_len {\n-                local_len.decrement_len(1);\n-                ptr = ptr.offset(-1);\n-                ptr::drop_in_place(ptr);\n+                // drop any extra elements\n+                for _ in len..current_len {\n+                    local_len.decrement_len(1);\n+                    ptr = ptr.offset(-1);\n+                    ptr::drop_in_place(ptr);\n+                }\n             }\n+        } else if len <= self.len {\n+            self.len = len;\n         }\n     }\n "}]}