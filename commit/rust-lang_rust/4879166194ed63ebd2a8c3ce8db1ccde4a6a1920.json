{"sha": "4879166194ed63ebd2a8c3ce8db1ccde4a6a1920", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NzkxNjYxOTRlZDYzZWJkMmE4YzNjZThkYjFjY2RlNGE2YTE5MjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-22T10:30:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-22T10:30:23Z"}, "message": "Auto merge of #37294 - nikomatsakis:issue-37154, r=nikomatsakis\n\nremove keys w/ skolemized regions from proj cache when popping skolemized regions\n\nThis addresses #37154 (a regression). The projection cache was incorrectly caching the results for skolemized regions -- when we pop skolemized regions, we are supposed to drop cache keys for them (just as we remove those skolemized regions from the region inference graph). This is because those skolemized region numbers will be reused later with different meaning (and we have determined that the old ones don't leak out in any meaningful way).\n\nI did a *somewhat* aggressive fix here of only removing keys that mention the skolemized regions. One could imagine just removing all keys added since we started the skolemization (as indeed I did in my initial commit). This more aggressive fix required fixing a latent bug in `TypeFlags`, as an aside.\n\nI believe the more aggressive fix is correct; clearly there can be entries that are unrelated to the skoelemized region, and it's a shame to remove them. My one concern was that it *is* possible I believe to have some region variables that are created and related to skolemized regions, and maybe some of them could end up in the cache. However, that seems harmless enough to me-- those relations will be removed, and couldn't have impacted how trait resolution proceeded anyway (iow, the cache entry is not wrong, though it is kind of useless).\n\nr? @pnkfelix\ncc @arielb1", "tree": {"sha": "8e191844bd43b1c82aff73119cf182659920fab3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e191844bd43b1c82aff73119cf182659920fab3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4879166194ed63ebd2a8c3ce8db1ccde4a6a1920", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4879166194ed63ebd2a8c3ce8db1ccde4a6a1920", "html_url": "https://github.com/rust-lang/rust/commit/4879166194ed63ebd2a8c3ce8db1ccde4a6a1920", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4879166194ed63ebd2a8c3ce8db1ccde4a6a1920/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4642e08b4d00e350555e18c72a109c2a9d502d76", "url": "https://api.github.com/repos/rust-lang/rust/commits/4642e08b4d00e350555e18c72a109c2a9d502d76", "html_url": "https://github.com/rust-lang/rust/commit/4642e08b4d00e350555e18c72a109c2a9d502d76"}, {"sha": "483bc864cafe871bfeb82e44a804ed7ea49442a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/483bc864cafe871bfeb82e44a804ed7ea49442a0", "html_url": "https://github.com/rust-lang/rust/commit/483bc864cafe871bfeb82e44a804ed7ea49442a0"}], "stats": {"total": 183, "additions": 130, "deletions": 53}, "files": [{"sha": "25b899b3c56cd1bae9d3a454e3d732e68434adce", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4879166194ed63ebd2a8c3ce8db1ccde4a6a1920/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4879166194ed63ebd2a8c3ce8db1ccde4a6a1920/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=4879166194ed63ebd2a8c3ce8db1ccde4a6a1920", "patch": "@@ -839,5 +839,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         debug!(\"pop_skolemized({:?})\", skol_map);\n         let skol_regions: FnvHashSet<_> = skol_map.values().cloned().collect();\n         self.region_vars.pop_skolemized(&skol_regions, &snapshot.region_vars_snapshot);\n+        if !skol_map.is_empty() {\n+            self.projection_cache.borrow_mut().rollback_skolemized(\n+                &snapshot.projection_cache_snapshot);\n+        }\n     }\n }"}, {"sha": "f1f1658cc824de34660e66dd6e3b54c2d56347b0", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4879166194ed63ebd2a8c3ce8db1ccde4a6a1920/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4879166194ed63ebd2a8c3ce8db1ccde4a6a1920/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=4879166194ed63ebd2a8c3ce8db1ccde4a6a1920", "patch": "@@ -167,7 +167,7 @@ pub fn poly_project_and_unify_type<'cx, 'gcx, 'tcx>(\n             infcx.skolemize_late_bound_regions(&obligation.predicate, snapshot);\n \n         let skol_obligation = obligation.with(skol_predicate);\n-        match project_and_unify_type(selcx, &skol_obligation) {\n+        let r = match project_and_unify_type(selcx, &skol_obligation) {\n             Ok(result) => {\n                 let span = obligation.cause.span;\n                 match infcx.leak_check(false, span, &skol_map, snapshot) {\n@@ -178,7 +178,9 @@ pub fn poly_project_and_unify_type<'cx, 'gcx, 'tcx>(\n             Err(e) => {\n                 Err(e)\n             }\n-        }\n+        };\n+\n+        r\n     })\n }\n \n@@ -1396,6 +1398,10 @@ impl<'tcx> ProjectionCache<'tcx> {\n         self.map.rollback_to(snapshot.snapshot);\n     }\n \n+    pub fn rollback_skolemized(&mut self, snapshot: &ProjectionCacheSnapshot) {\n+        self.map.partial_rollback(&snapshot.snapshot, &|k| k.has_re_skol());\n+    }\n+\n     pub fn commit(&mut self, snapshot: ProjectionCacheSnapshot) {\n         self.map.commit(snapshot.snapshot);\n     }"}, {"sha": "649d78f9d9e2d003a028e441d4fd9e3d3f0c5a58", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4879166194ed63ebd2a8c3ce8db1ccde4a6a1920/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4879166194ed63ebd2a8c3ce8db1ccde4a6a1920/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=4879166194ed63ebd2a8c3ce8db1ccde4a6a1920", "patch": "@@ -11,6 +11,7 @@\n use ty::subst::Substs;\n use ty::{self, Ty, TypeFlags, TypeFoldable};\n \n+#[derive(Debug)]\n pub struct FlagComputation {\n     pub flags: TypeFlags,\n \n@@ -182,24 +183,9 @@ impl FlagComputation {\n     }\n \n     fn add_region(&mut self, r: &ty::Region) {\n-        match *r {\n-            ty::ReVar(..) => {\n-                self.add_flags(TypeFlags::HAS_RE_INFER);\n-                self.add_flags(TypeFlags::KEEP_IN_LOCAL_TCX);\n-            }\n-            ty::ReSkolemized(..) => {\n-                self.add_flags(TypeFlags::HAS_RE_INFER);\n-                self.add_flags(TypeFlags::HAS_RE_SKOL);\n-                self.add_flags(TypeFlags::KEEP_IN_LOCAL_TCX);\n-            }\n-            ty::ReLateBound(debruijn, _) => { self.add_depth(debruijn.depth); }\n-            ty::ReEarlyBound(..) => { self.add_flags(TypeFlags::HAS_RE_EARLY_BOUND); }\n-            ty::ReStatic | ty::ReErased => {}\n-            _ => { self.add_flags(TypeFlags::HAS_FREE_REGIONS); }\n-        }\n-\n-        if !r.is_global() {\n-            self.add_flags(TypeFlags::HAS_LOCAL_NAMES);\n+        self.add_flags(r.type_flags());\n+        if let ty::ReLateBound(debruijn, _) = *r {\n+            self.add_depth(debruijn.depth);\n         }\n     }\n "}, {"sha": "ae0a4a0e6bd112765c9b9a0a7c42d4f0d649598b", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4879166194ed63ebd2a8c3ce8db1ccde4a6a1920/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4879166194ed63ebd2a8c3ce8db1ccde4a6a1920/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=4879166194ed63ebd2a8c3ce8db1ccde4a6a1920", "patch": "@@ -91,6 +91,9 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn needs_subst(&self) -> bool {\n         self.has_type_flags(TypeFlags::NEEDS_SUBST)\n     }\n+    fn has_re_skol(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_RE_SKOL)\n+    }\n     fn has_closure_types(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_CLOSURE)\n     }\n@@ -632,26 +635,15 @@ struct HasTypeFlagsVisitor {\n \n impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n     fn visit_ty(&mut self, t: Ty) -> bool {\n-        t.flags.get().intersects(self.flags)\n+        let flags = t.flags.get();\n+        debug!(\"HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}\", t, flags, self.flags);\n+        flags.intersects(self.flags)\n     }\n \n     fn visit_region(&mut self, r: &'tcx ty::Region) -> bool {\n-        if self.flags.intersects(ty::TypeFlags::HAS_LOCAL_NAMES) {\n-            // does this represent a region that cannot be named\n-            // in a global way? used in fulfillment caching.\n-            match *r {\n-                ty::ReStatic | ty::ReEmpty | ty::ReErased => {}\n-                _ => return true,\n-            }\n-        }\n-        if self.flags.intersects(ty::TypeFlags::HAS_RE_INFER |\n-                                 ty::TypeFlags::KEEP_IN_LOCAL_TCX) {\n-            match *r {\n-                ty::ReVar(_) | ty::ReSkolemized(..) => { return true }\n-                _ => {}\n-            }\n-        }\n-        false\n+        let flags = r.type_flags();\n+        debug!(\"HasTypeFlagsVisitor: r={:?} r.flags={:?} self.flags={:?}\", r, flags, self.flags);\n+        flags.intersects(self.flags)\n     }\n }\n "}, {"sha": "eca699a393dda6d7e87b4bdcc64afb05a545ac48", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4879166194ed63ebd2a8c3ce8db1ccde4a6a1920/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4879166194ed63ebd2a8c3ce8db1ccde4a6a1920/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4879166194ed63ebd2a8c3ce8db1ccde4a6a1920", "patch": "@@ -477,6 +477,7 @@ bitflags! {\n                                   TypeFlags::HAS_SELF.bits |\n                                   TypeFlags::HAS_TY_INFER.bits |\n                                   TypeFlags::HAS_RE_INFER.bits |\n+                                  TypeFlags::HAS_RE_SKOL.bits |\n                                   TypeFlags::HAS_RE_EARLY_BOUND.bits |\n                                   TypeFlags::HAS_FREE_REGIONS.bits |\n                                   TypeFlags::HAS_TY_ERR.bits |"}, {"sha": "92dfb883ef301db00d4287a4ffb2e4910230835e", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4879166194ed63ebd2a8c3ce8db1ccde4a6a1920/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4879166194ed63ebd2a8c3ce8db1ccde4a6a1920/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=4879166194ed63ebd2a8c3ce8db1ccde4a6a1920", "patch": "@@ -406,7 +406,7 @@ impl<T> Binder<T> {\n \n impl fmt::Debug for TypeFlags {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", self.bits)\n+        write!(f, \"{:x}\", self.bits)\n     }\n }\n \n@@ -866,6 +866,35 @@ impl Region {\n             r => r\n         }\n     }\n+\n+    pub fn type_flags(&self) -> TypeFlags {\n+        let mut flags = TypeFlags::empty();\n+\n+        match *self {\n+            ty::ReVar(..) => {\n+                flags = flags | TypeFlags::HAS_RE_INFER;\n+                flags = flags | TypeFlags::KEEP_IN_LOCAL_TCX;\n+            }\n+            ty::ReSkolemized(..) => {\n+                flags = flags | TypeFlags::HAS_RE_INFER;\n+                flags = flags | TypeFlags::HAS_RE_SKOL;\n+                flags = flags | TypeFlags::KEEP_IN_LOCAL_TCX;\n+            }\n+            ty::ReLateBound(..) => { }\n+            ty::ReEarlyBound(..) => { flags = flags | TypeFlags::HAS_RE_EARLY_BOUND; }\n+            ty::ReStatic | ty::ReErased => { }\n+            _ => { flags = flags | TypeFlags::HAS_FREE_REGIONS; }\n+        }\n+\n+        match *self {\n+            ty::ReStatic | ty::ReEmpty | ty::ReErased => (),\n+            _ => flags = flags | TypeFlags::HAS_LOCAL_NAMES,\n+        }\n+\n+        debug!(\"type_flags({:?}) = {:?}\", self, flags);\n+\n+        flags\n+    }\n }\n \n // Type utilities"}, {"sha": "a4e6166032d81de5900c9f1111fbf419d8e4bbdb", "filename": "src/librustc_data_structures/snapshot_map/mod.rs", "status": "modified", "additions": 46, "deletions": 15, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/4879166194ed63ebd2a8c3ce8db1ccde4a6a1920/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4879166194ed63ebd2a8c3ce8db1ccde4a6a1920/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs?ref=4879166194ed63ebd2a8c3ce8db1ccde4a6a1920", "patch": "@@ -11,6 +11,7 @@\n use fnv::FnvHashMap;\n use std::hash::Hash;\n use std::ops;\n+use std::mem;\n \n #[cfg(test)]\n mod test;\n@@ -31,6 +32,7 @@ enum UndoLog<K, V> {\n     CommittedSnapshot,\n     Inserted(K),\n     Overwrite(K, V),\n+    Noop,\n }\n \n impl<K, V> SnapshotMap<K, V>\n@@ -100,24 +102,33 @@ impl<K, V> SnapshotMap<K, V>\n         }\n     }\n \n+    pub fn partial_rollback<F>(&mut self,\n+                               snapshot: &Snapshot,\n+                               should_revert_key: &F)\n+        where F: Fn(&K) -> bool\n+    {\n+        self.assert_open_snapshot(snapshot);\n+        for i in (snapshot.len + 1..self.undo_log.len()).rev() {\n+            let reverse = match self.undo_log[i] {\n+                UndoLog::OpenSnapshot => false,\n+                UndoLog::CommittedSnapshot => false,\n+                UndoLog::Noop => false,\n+                UndoLog::Inserted(ref k) => should_revert_key(k),\n+                UndoLog::Overwrite(ref k, _) => should_revert_key(k),\n+            };\n+\n+            if reverse {\n+                let entry = mem::replace(&mut self.undo_log[i], UndoLog::Noop);\n+                self.reverse(entry);\n+            }\n+        }\n+    }\n+\n     pub fn rollback_to(&mut self, snapshot: Snapshot) {\n         self.assert_open_snapshot(&snapshot);\n         while self.undo_log.len() > snapshot.len + 1 {\n-            match self.undo_log.pop().unwrap() {\n-                UndoLog::OpenSnapshot => {\n-                    panic!(\"cannot rollback an uncommitted snapshot\");\n-                }\n-\n-                UndoLog::CommittedSnapshot => {}\n-\n-                UndoLog::Inserted(key) => {\n-                    self.map.remove(&key);\n-                }\n-\n-                UndoLog::Overwrite(key, old_value) => {\n-                    self.map.insert(key, old_value);\n-                }\n-            }\n+            let entry = self.undo_log.pop().unwrap();\n+            self.reverse(entry);\n         }\n \n         let v = self.undo_log.pop().unwrap();\n@@ -127,6 +138,26 @@ impl<K, V> SnapshotMap<K, V>\n         });\n         assert!(self.undo_log.len() == snapshot.len);\n     }\n+\n+    fn reverse(&mut self, entry: UndoLog<K, V>) {\n+        match entry {\n+            UndoLog::OpenSnapshot => {\n+                panic!(\"cannot rollback an uncommitted snapshot\");\n+            }\n+\n+            UndoLog::CommittedSnapshot => {}\n+\n+            UndoLog::Inserted(key) => {\n+                self.map.remove(&key);\n+            }\n+\n+            UndoLog::Overwrite(key, old_value) => {\n+                self.map.insert(key, old_value);\n+            }\n+\n+            UndoLog::Noop => {}\n+        }\n+    }\n }\n \n impl<'k, K, V> ops::Index<&'k K> for SnapshotMap<K, V>"}, {"sha": "29dc6984e234a48459e3634103074a469484ec94", "filename": "src/test/run-pass/project-cache-issue-37154.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4879166194ed63ebd2a8c3ce8db1ccde4a6a1920/src%2Ftest%2Frun-pass%2Fproject-cache-issue-37154.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4879166194ed63ebd2a8c3ce8db1ccde4a6a1920/src%2Ftest%2Frun-pass%2Fproject-cache-issue-37154.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproject-cache-issue-37154.rs?ref=4879166194ed63ebd2a8c3ce8db1ccde4a6a1920", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #37154: the problem here was that the cache\n+// results in a false error because it was caching skolemized results\n+// even after those skolemized regions had been popped.\n+\n+trait Foo {\n+    fn method(&self) {}\n+}\n+\n+struct Wrapper<T>(T);\n+\n+impl<T> Foo for Wrapper<T> where for<'a> &'a T: IntoIterator<Item=&'a ()> {}\n+\n+fn f(x: Wrapper<Vec<()>>) {\n+    x.method(); // This works.\n+    x.method(); // error: no method named `method`\n+}\n+\n+fn main() { }"}]}