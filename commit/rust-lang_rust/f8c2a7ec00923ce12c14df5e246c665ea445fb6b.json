{"sha": "f8c2a7ec00923ce12c14df5e246c665ea445fb6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YzJhN2VjMDA5MjNjZTEyYzE0ZGY1ZTI0NmM2NjVlYTQ0NWZiNmI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-24T16:41:45Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-24T16:41:45Z"}, "message": "Rustfmt", "tree": {"sha": "b3ed37138a3f00ddfaf8a3613ddc0d2d3fa4f41a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3ed37138a3f00ddfaf8a3613ddc0d2d3fa4f41a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8c2a7ec00923ce12c14df5e246c665ea445fb6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8c2a7ec00923ce12c14df5e246c665ea445fb6b", "html_url": "https://github.com/rust-lang/rust/commit/f8c2a7ec00923ce12c14df5e246c665ea445fb6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8c2a7ec00923ce12c14df5e246c665ea445fb6b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fc56fb2f47d0b8a825d1117bdae0ca80d0d3304", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fc56fb2f47d0b8a825d1117bdae0ca80d0d3304", "html_url": "https://github.com/rust-lang/rust/commit/9fc56fb2f47d0b8a825d1117bdae0ca80d0d3304"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "488ff6e134956e2d870fabf7e2ebce2327c9b5aa", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8c2a7ec00923ce12c14df5e246c665ea445fb6b/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8c2a7ec00923ce12c14df5e246c665ea445fb6b/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=f8c2a7ec00923ce12c14df5e246c665ea445fb6b", "patch": "@@ -350,10 +350,7 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n     pub(crate) fn anonymous_str(&mut self, msg: &str) -> Value {\n         let mut data_ctx = DataContext::new();\n         data_ctx.define(msg.as_bytes().to_vec().into_boxed_slice());\n-        let msg_id = self\n-            .module\n-            .declare_anonymous_data(false, false)\n-            .unwrap();\n+        let msg_id = self.module.declare_anonymous_data(false, false).unwrap();\n \n         // Ignore DuplicateDefinition error, as the data will be the same\n         let _ = self.module.define_data(msg_id, &data_ctx);"}, {"sha": "9cf51d15c8ca0a8e99595398d76580bad62d7067", "filename": "src/driver/aot.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f8c2a7ec00923ce12c14df5e246c665ea445fb6b/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8c2a7ec00923ce12c14df5e246c665ea445fb6b/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=f8c2a7ec00923ce12c14df5e246c665ea445fb6b", "patch": "@@ -73,9 +73,8 @@ fn reuse_workproduct_for_cgu(\n     let mut object = None;\n     let work_product = cgu.work_product(tcx);\n     if let Some(saved_file) = &work_product.saved_file {\n-        let obj_out = tcx\n-            .output_filenames(())\n-            .temp_path(OutputType::Object, Some(&cgu.name().as_str()));\n+        let obj_out =\n+            tcx.output_filenames(()).temp_path(OutputType::Object, Some(&cgu.name().as_str()));\n         object = Some(obj_out.clone());\n         let source_file = rustc_incremental::in_incr_comp_dir(&incr_comp_session_dir, &saved_file);\n         if let Err(err) = rustc_fs_util::link_or_copy(&source_file, &obj_out) {\n@@ -281,9 +280,8 @@ pub(crate) fn run_aot(\n                 .as_str()\n                 .to_string();\n \n-            let tmp_file = tcx\n-                .output_filenames(())\n-                .temp_path(OutputType::Metadata, Some(&metadata_cgu_name));\n+            let tmp_file =\n+                tcx.output_filenames(()).temp_path(OutputType::Metadata, Some(&metadata_cgu_name));\n \n             let obj = crate::backend::with_object(tcx.sess, &metadata_cgu_name, |object| {\n                 crate::metadata::write_metadata(tcx, object);\n@@ -358,8 +356,7 @@ fn codegen_global_asm(tcx: TyCtxt<'_>, cgu_name: &str, global_asm: &str) {\n         .collect::<Vec<_>>()\n         .join(\"\\n\");\n \n-    let output_object_file =\n-        tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu_name));\n+    let output_object_file = tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu_name));\n \n     // Assemble `global_asm`\n     let global_asm_object_file = add_file_stem_postfix(output_object_file.clone(), \".asm\");"}]}