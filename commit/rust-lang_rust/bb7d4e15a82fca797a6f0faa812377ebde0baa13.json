{"sha": "bb7d4e15a82fca797a6f0faa812377ebde0baa13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiN2Q0ZTE1YTgyZmNhNzk3YTZmMGZhYTgxMjM3N2ViZGUwYmFhMTM=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-05-18T20:25:10Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-05-18T20:33:22Z"}, "message": "Remove dead code.", "tree": {"sha": "725ad1086599a924d4f7f8271b39ef0a40982585", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/725ad1086599a924d4f7f8271b39ef0a40982585"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb7d4e15a82fca797a6f0faa812377ebde0baa13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb7d4e15a82fca797a6f0faa812377ebde0baa13", "html_url": "https://github.com/rust-lang/rust/commit/bb7d4e15a82fca797a6f0faa812377ebde0baa13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb7d4e15a82fca797a6f0faa812377ebde0baa13/comments", "author": null, "committer": null, "parents": [{"sha": "28c4a5586e9a6cedebb3ce08a11ded48fcd1fdc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/28c4a5586e9a6cedebb3ce08a11ded48fcd1fdc5", "html_url": "https://github.com/rust-lang/rust/commit/28c4a5586e9a6cedebb3ce08a11ded48fcd1fdc5"}], "stats": {"total": 53, "additions": 3, "deletions": 50}, "files": [{"sha": "54dc5e0d01d7c81d257ec5fb74d0f0ac204ee8d6", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb7d4e15a82fca797a6f0faa812377ebde0baa13/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7d4e15a82fca797a6f0faa812377ebde0baa13/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=bb7d4e15a82fca797a6f0faa812377ebde0baa13", "patch": "@@ -105,10 +105,6 @@ fn yield_glue_name() -> str {\n     ret \"rust_yield_glue\";\n }\n \n-fn exit_task_glue_name() -> str {\n-    ret \"rust_exit_task_glue\";\n-}\n-\n fn no_op_type_glue_name() -> str {\n     ret \"rust_no_op_type_glue\";\n }"}, {"sha": "d53ad5b8c85b87479eb144f90b8b353355d40753", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 45, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bb7d4e15a82fca797a6f0faa812377ebde0baa13/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7d4e15a82fca797a6f0faa812377ebde0baa13/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=bb7d4e15a82fca797a6f0faa812377ebde0baa13", "patch": "@@ -57,7 +57,6 @@ type derived_tydesc_info = rec(ValueRef lltydesc, bool escapes);\n \n type glue_fns = rec(ValueRef activate_glue,\n                     ValueRef yield_glue,\n-                    ValueRef exit_task_glue,\n                     vec[ValueRef] native_glues_rust,\n                     vec[ValueRef] native_glues_pure_rust,\n                     vec[ValueRef] native_glues_cdecl,\n@@ -506,7 +505,7 @@ fn T_crate(&type_names tn) -> TypeRef {\n                           T_int(),      // size_t yield_glue\n                           T_int(),      // size_t unwind_glue\n                           T_int(),      // size_t gc_glue\n-                          T_int(),      // size_t main_exit_task_glue\n+                          T_int(),      // size_t pad\n                           T_int(),      // int n_rust_syms\n                           T_int(),      // int n_c_syms\n                           T_int()       // int n_libs\n@@ -7441,35 +7440,6 @@ fn i2p(ValueRef v, TypeRef t) -> ValueRef {\n     ret llvm::LLVMConstIntToPtr(v, t);\n }\n \n-fn trans_exit_task_glue(@glue_fns glues,\n-                        &hashmap[str, ValueRef] externs,\n-                        type_names tn, ModuleRef llmod) {\n-    let vec[TypeRef] T_args = [];\n-    let vec[ValueRef] V_args = [];\n-\n-    auto llfn = glues.exit_task_glue;\n-\n-    auto entrybb = llvm::LLVMAppendBasicBlock(llfn, str::buf(\"entry\"));\n-    auto build = new_builder(entrybb);\n-\n-    let ValueRef arg1 = llvm::LLVMGetParam(llfn, 0u);\n-    let ValueRef arg2 = llvm::LLVMGetParam(llfn, 1u);\n-    let ValueRef arg3 = llvm::LLVMGetParam(llfn, 2u);\n-    let ValueRef arg4 = llvm::LLVMGetParam(llfn, 3u);\n-    let ValueRef arg5 = llvm::LLVMGetParam(llfn, 4u);\n-\n-    auto main_type = T_fn([T_int(), T_int(), T_int(), T_int()], T_void());\n-\n-    auto fun = build.IntToPtr(arg1, T_ptr(main_type));\n-    auto call_args = [arg2, arg3, arg4, arg5];\n-    build.FastCall(fun, call_args);\n-\n-    trans_native_call(build, glues, arg3,\n-                      externs, tn, llmod, \"upcall_exit\", true, [arg3]);\n-\n-    build.RetVoid();\n-}\n-\n fn create_typedefs(&@crate_ctxt cx) {\n     llvm::LLVMAddTypeName(cx.llmod, str::buf(\"crate\"), T_crate(cx.tn));\n     llvm::LLVMAddTypeName(cx.llmod, str::buf(\"task\"), T_task(cx.tn));\n@@ -7486,9 +7456,6 @@ fn create_crate_constant(ValueRef crate_ptr, @glue_fns glues) {\n     let ValueRef yield_glue_off =\n         llvm::LLVMConstSub(p2i(glues.yield_glue), crate_addr);\n \n-    let ValueRef exit_task_glue_off =\n-        llvm::LLVMConstSub(p2i(glues.exit_task_glue), crate_addr);\n-\n     let ValueRef crate_val =\n         C_struct([C_null(T_int()),     // ptrdiff_t image_base_off\n                      p2i(crate_ptr),      // uintptr_t self_addr\n@@ -7500,7 +7467,7 @@ fn create_crate_constant(ValueRef crate_ptr, @glue_fns glues) {\n                      yield_glue_off,      // size_t yield_glue_off\n                      C_null(T_int()),     // size_t unwind_glue_off\n                      C_null(T_int()),     // size_t gc_glue_off\n-                     exit_task_glue_off,  // size_t main_exit_task_glue_off\n+                     C_null(T_int()),     // size_t pad\n                      C_null(T_int()),     // int n_rust_syms\n                      C_null(T_int()),     // int n_c_syms\n                      C_null(T_int())      // int n_libs\n@@ -7853,13 +7820,6 @@ fn trans_vec_append_glue(@local_ctxt cx) {\n fn make_glues(ModuleRef llmod, &type_names tn) -> @glue_fns {\n     ret @rec(activate_glue = decl_glue(llmod, tn, abi::activate_glue_name()),\n              yield_glue = decl_glue(llmod, tn, abi::yield_glue_name()),\n-             exit_task_glue = decl_cdecl_fn(llmod, abi::exit_task_glue_name(),\n-                                            T_fn([T_int(),\n-                                                     T_int(),\n-                                                     T_int(),\n-                                                     T_int(),\n-                                                     T_int()],\n-                                                 T_void())),\n \n              native_glues_rust =\n                  vec::init_fn[ValueRef](bind decl_native_glue(llmod, tn,\n@@ -7895,9 +7855,6 @@ fn make_common_glue(&session::session sess, &str output) {\n     auto glues = make_glues(llmod, tn);\n     create_crate_constant(crate_ptr, glues);\n \n-    trans::trans_exit_task_glue(glues, new_str_hash[ValueRef](), tn,\n-                               llmod);\n-\n     link::write::run_passes(sess, llmod, output);\n }\n "}, {"sha": "8bbc5f0d8f60486aaf2ac3feab0fdd3876230385", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb7d4e15a82fca797a6f0faa812377ebde0baa13/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/bb7d4e15a82fca797a6f0faa812377ebde0baa13/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=bb7d4e15a82fca797a6f0faa812377ebde0baa13", "patch": "@@ -235,7 +235,7 @@ class rust_crate {\n     ptrdiff_t yield_glue_off;\n     ptrdiff_t unwind_glue_off;\n     ptrdiff_t gc_glue_off;\n-    ptrdiff_t exit_task_glue_off;\n+    ptrdiff_t pad;\n \n public:\n "}]}