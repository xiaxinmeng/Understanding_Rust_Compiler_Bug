{"sha": "33cdc21832f517997235f928f13a13a2366a24fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzY2RjMjE4MzJmNTE3OTk3MjM1ZjkyOGYxM2ExM2EyMzY2YTI0ZmU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-15T13:46:45Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-15T13:46:45Z"}, "message": "Don't highlight unsafe traits as unsafe in safe impls", "tree": {"sha": "69fc54917b4aea8cbcdcbeefbe33d255d84d6efb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69fc54917b4aea8cbcdcbeefbe33d255d84d6efb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33cdc21832f517997235f928f13a13a2366a24fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33cdc21832f517997235f928f13a13a2366a24fe", "html_url": "https://github.com/rust-lang/rust/commit/33cdc21832f517997235f928f13a13a2366a24fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33cdc21832f517997235f928f13a13a2366a24fe/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64fb7be2470f3743acc7e492e65c354ba0caee2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/64fb7be2470f3743acc7e492e65c354ba0caee2a", "html_url": "https://github.com/rust-lang/rust/commit/64fb7be2470f3743acc7e492e65c354ba0caee2a"}], "stats": {"total": 100, "additions": 44, "deletions": 56}, "files": [{"sha": "dba0636930f36c7e70d77ddd0142686811f500a6", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=33cdc21832f517997235f928f13a13a2366a24fe", "patch": "@@ -286,7 +286,9 @@ fn highlight_name_ref(\n                     Definition::ModuleDef(hir::ModuleDef::Trait(trait_))\n                         if trait_.is_unsafe(db) =>\n                     {\n-                        if ast::Impl::for_trait_name_ref(&name_ref).is_some() {\n+                        if ast::Impl::for_trait_name_ref(&name_ref)\n+                            .map_or(false, |impl_| impl_.unsafe_token().is_some())\n+                        {\n                             h |= HlMod::Unsafe;\n                         }\n                     }"}, {"sha": "5af73e6976d60cff8009563020219b0752067933", "filename": "crates/ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=33cdc21832f517997235f928f13a13a2366a24fe", "patch": "@@ -69,6 +69,8 @@ pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padd\n .function.unsafe    { color: #BC8383; }\n .trait.unsafe       { color: #BC8383; }\n .operator.unsafe    { color: #BC8383; }\n+.mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }\n@@ -85,7 +87,6 @@ pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padd\n .mutable            { text-decoration: underline; }\n .escape_sequence    { color: #94BFF3; }\n .keyword            { color: #F0DFAF; font-weight: bold; }\n-.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .control            { font-style: italic; }\n .reference          { font-style: italic; font-weight: bold; }\n "}, {"sha": "0d0c21cb0c79eef19751b0f6f3f3a8df5e29e63f", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_assoc_functions.html", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "raw_url": "https://github.com/rust-lang/rust/raw/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html?ref=33cdc21832f517997235f928f13a13a2366a24fe", "patch": "@@ -17,6 +17,8 @@\n .function.unsafe    { color: #BC8383; }\n .trait.unsafe       { color: #BC8383; }\n .operator.unsafe    { color: #BC8383; }\n+.mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }\n@@ -33,7 +35,6 @@\n .mutable            { text-decoration: underline; }\n .escape_sequence    { color: #94BFF3; }\n .keyword            { color: #F0DFAF; font-weight: bold; }\n-.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .control            { font-style: italic; }\n .reference          { font-style: italic; font-weight: bold; }\n "}, {"sha": "f54af2d92e40c29667230816cd63983a35e79b9e", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=33cdc21832f517997235f928f13a13a2366a24fe", "patch": "@@ -17,6 +17,8 @@\n .function.unsafe    { color: #BC8383; }\n .trait.unsafe       { color: #BC8383; }\n .operator.unsafe    { color: #BC8383; }\n+.mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }\n@@ -33,7 +35,6 @@\n .mutable            { text-decoration: underline; }\n .escape_sequence    { color: #94BFF3; }\n .keyword            { color: #F0DFAF; font-weight: bold; }\n-.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .control            { font-style: italic; }\n .reference          { font-style: italic; font-weight: bold; }\n "}, {"sha": "9c01832e7544743a39e208db919da5e4c657b8c2", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_extern_crate.html", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "raw_url": "https://github.com/rust-lang/rust/raw/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html?ref=33cdc21832f517997235f928f13a13a2366a24fe", "patch": "@@ -17,6 +17,8 @@\n .function.unsafe    { color: #BC8383; }\n .trait.unsafe       { color: #BC8383; }\n .operator.unsafe    { color: #BC8383; }\n+.mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }\n@@ -33,7 +35,6 @@\n .mutable            { text-decoration: underline; }\n .escape_sequence    { color: #94BFF3; }\n .keyword            { color: #F0DFAF; font-weight: bold; }\n-.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .control            { font-style: italic; }\n .reference          { font-style: italic; font-weight: bold; }\n "}, {"sha": "88380bdfe12ab3db1d2bfa0054ae560938b98762", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_injection.html", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "raw_url": "https://github.com/rust-lang/rust/raw/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html?ref=33cdc21832f517997235f928f13a13a2366a24fe", "patch": "@@ -17,6 +17,8 @@\n .function.unsafe    { color: #BC8383; }\n .trait.unsafe       { color: #BC8383; }\n .operator.unsafe    { color: #BC8383; }\n+.mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }\n@@ -33,7 +35,6 @@\n .mutable            { text-decoration: underline; }\n .escape_sequence    { color: #94BFF3; }\n .keyword            { color: #F0DFAF; font-weight: bold; }\n-.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .control            { font-style: italic; }\n .reference          { font-style: italic; font-weight: bold; }\n "}, {"sha": "9c20c8ae4b803285f995cdf71f3b884c38ecef93", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=33cdc21832f517997235f928f13a13a2366a24fe", "patch": "@@ -17,6 +17,8 @@\n .function.unsafe    { color: #BC8383; }\n .trait.unsafe       { color: #BC8383; }\n .operator.unsafe    { color: #BC8383; }\n+.mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }\n@@ -33,7 +35,6 @@\n .mutable            { text-decoration: underline; }\n .escape_sequence    { color: #94BFF3; }\n .keyword            { color: #F0DFAF; font-weight: bold; }\n-.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .control            { font-style: italic; }\n .reference          { font-style: italic; font-weight: bold; }\n "}, {"sha": "2b86340efd75a00fc6eb5214079933949226bc11", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_unsafe.html", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html?ref=33cdc21832f517997235f928f13a13a2366a24fe", "patch": "@@ -17,6 +17,8 @@\n .function.unsafe    { color: #BC8383; }\n .trait.unsafe       { color: #BC8383; }\n .operator.unsafe    { color: #BC8383; }\n+.mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }\n@@ -33,40 +35,35 @@\n .mutable            { text-decoration: underline; }\n .escape_sequence    { color: #94BFF3; }\n .keyword            { color: #F0DFAF; font-weight: bold; }\n-.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .control            { font-style: italic; }\n .reference          { font-style: italic; font-weight: bold; }\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration unsafe\">unsafe_fn</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+<pre><code><span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable unsafe\">MUT_GLOBAL</span><span class=\"colon\">:</span> <span class=\"struct\">Struct</span> <span class=\"operator\">=</span> <span class=\"struct\">Struct</span> <span class=\"brace\">{</span> <span class=\"field\">field</span><span class=\"colon\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">static</span> <span class=\"static declaration\">GLOBAL</span><span class=\"colon\">:</span> <span class=\"struct\">Struct</span> <span class=\"operator\">=</span> <span class=\"struct\">Struct</span> <span class=\"brace\">{</span> <span class=\"field\">field</span><span class=\"colon\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration unsafe\">unsafe_fn</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"keyword\">union</span> <span class=\"union declaration\">Union</span> <span class=\"brace\">{</span>\n     <span class=\"field declaration\">a</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u32</span><span class=\"comma\">,</span>\n     <span class=\"field declaration\">b</span><span class=\"colon\">:</span> <span class=\"builtin_type\">f32</span><span class=\"comma\">,</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"keyword\">struct</span> <span class=\"struct declaration\">HasUnsafeFn</span><span class=\"semicolon\">;</span>\n-\n-<span class=\"keyword\">impl</span> <span class=\"struct\">HasUnsafeFn</span> <span class=\"brace\">{</span>\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">Struct</span> <span class=\"brace\">{</span> <span class=\"field declaration\">field</span><span class=\"colon\">:</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">}</span>\n+<span class=\"keyword\">impl</span> <span class=\"struct\">Struct</span> <span class=\"brace\">{</span>\n     <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference unsafe\">unsafe_method</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"keyword\">struct</span> <span class=\"struct declaration\">TypeForStaticMut</span> <span class=\"brace\">{</span>\n-    <span class=\"field declaration\">a</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u8</span>\n-<span class=\"brace\">}</span>\n-\n-<span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable unsafe\">global_mut</span><span class=\"colon\">:</span> <span class=\"struct\">TypeForStaticMut</span> <span class=\"operator\">=</span> <span class=\"struct\">TypeForStaticMut</span> <span class=\"brace\">{</span> <span class=\"field\">a</span><span class=\"colon\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n-\n <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">repr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">packed</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">Packed</span> <span class=\"brace\">{</span>\n     <span class=\"field declaration\">a</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u16</span><span class=\"comma\">,</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration unsafe\">UnsafeTrait</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">impl</span> <span class=\"trait unsafe\">UnsafeTrait</span> <span class=\"keyword\">for</span> <span class=\"struct\">Packed</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+<span class=\"keyword\">impl</span> <span class=\"punctuation\">!</span><span class=\"trait\">UnsafeTrait</span> <span class=\"keyword\">for</span> <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">require_unsafe_trait</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">T</span><span class=\"colon\">:</span> <span class=\"trait\">UnsafeTrait</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">_</span><span class=\"colon\">:</span> <span class=\"type_param\">T</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">unsafe_trait_bound</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">T</span><span class=\"colon\">:</span> <span class=\"trait\">UnsafeTrait</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">_</span><span class=\"colon\">:</span> <span class=\"type_param\">T</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"keyword\">trait</span> <span class=\"trait declaration\">DoTheAutoref</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference trait\">calls_autoref</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n@@ -87,13 +84,14 @@\n             <span class=\"union\">Union</span> <span class=\"brace\">{</span> <span class=\"field unsafe\">b</span><span class=\"colon\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"brace\">}</span> <span class=\"operator\">=&gt;</span> <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n             <span class=\"union\">Union</span> <span class=\"brace\">{</span> <span class=\"field unsafe\">a</span> <span class=\"brace\">}</span> <span class=\"operator\">=&gt;</span> <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n         <span class=\"brace\">}</span>\n-        <span class=\"struct\">HasUnsafeFn</span><span class=\"operator\">.</span><span class=\"function associated reference unsafe\">unsafe_method</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+        <span class=\"struct\">Struct</span> <span class=\"brace\">{</span> <span class=\"field\">field</span><span class=\"colon\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"brace\">}</span><span class=\"operator\">.</span><span class=\"function associated reference unsafe\">unsafe_method</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n \n         <span class=\"comment\">// unsafe deref</span>\n-        <span class=\"keyword\">let</span> <span class=\"variable declaration\">y</span> <span class=\"operator\">=</span> <span class=\"operator unsafe\">*</span><span class=\"variable\">x</span><span class=\"semicolon\">;</span>\n+        <span class=\"operator unsafe\">*</span><span class=\"variable\">x</span><span class=\"semicolon\">;</span>\n \n         <span class=\"comment\">// unsafe access to a static mut</span>\n-        <span class=\"keyword\">let</span> <span class=\"variable declaration\">a</span> <span class=\"operator\">=</span> <span class=\"static mutable unsafe\">global_mut</span><span class=\"operator\">.</span><span class=\"field\">a</span><span class=\"semicolon\">;</span>\n+        <span class=\"static mutable unsafe\">MUT_GLOBAL</span><span class=\"operator\">.</span><span class=\"field\">field</span><span class=\"semicolon\">;</span>\n+        <span class=\"static\">GLOBAL</span><span class=\"operator\">.</span><span class=\"field\">field</span><span class=\"semicolon\">;</span>\n \n         <span class=\"comment\">// unsafe ref of packed fields</span>\n         <span class=\"keyword\">let</span> <span class=\"variable declaration\">packed</span> <span class=\"operator\">=</span> <span class=\"struct\">Packed</span> <span class=\"brace\">{</span> <span class=\"field\">a</span><span class=\"colon\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>"}, {"sha": "ae5016b8d835068af32cdefbabb98c85685df36d", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=33cdc21832f517997235f928f13a13a2366a24fe", "patch": "@@ -17,6 +17,8 @@\n .function.unsafe    { color: #BC8383; }\n .trait.unsafe       { color: #BC8383; }\n .operator.unsafe    { color: #BC8383; }\n+.mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }\n@@ -33,7 +35,6 @@\n .mutable            { text-decoration: underline; }\n .escape_sequence    { color: #94BFF3; }\n .keyword            { color: #F0DFAF; font-weight: bold; }\n-.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .control            { font-style: italic; }\n .reference          { font-style: italic; font-weight: bold; }\n \n@@ -116,8 +117,6 @@\n     <span class=\"function\">str</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable unsafe\">STATIC_MUT</span><span class=\"colon\">:</span> <span class=\"builtin_type\">i32</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"semicolon\">;</span>\n-\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"angle\">&lt;</span><span class=\"lifetime declaration\">'a</span><span class=\"comma\">,</span> <span class=\"type_param declaration\">T</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"type_param\">T</span> <span class=\"brace\">{</span>\n     <span class=\"function\">foo</span><span class=\"operator\">::</span><span class=\"angle\">&lt;</span><span class=\"lifetime\">'a</span><span class=\"comma\">,</span> <span class=\"builtin_type\">i32</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span>\n <span class=\"brace\">}</span>\n@@ -185,10 +184,6 @@\n         <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"semicolon\">;</span>\n         <span class=\"variable mutable\">vec</span><span class=\"operator\">.</span><span class=\"unresolved_reference\">push</span><span class=\"parenthesis\">(</span><span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"field public\">y</span><span class=\"colon\">:</span> <span class=\"numeric_literal\">1</span> <span class=\"brace\">}</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span>\n-    <span class=\"keyword unsafe\">unsafe</span> <span class=\"brace\">{</span>\n-        <span class=\"variable mutable\">vec</span><span class=\"operator\">.</span><span class=\"unresolved_reference\">set_len</span><span class=\"parenthesis\">(</span><span class=\"numeric_literal\">0</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-        <span class=\"static mutable unsafe\">STATIC_MUT</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">1</span><span class=\"semicolon\">;</span>\n-    <span class=\"brace\">}</span>\n \n     <span class=\"keyword control\">for</span> <span class=\"variable declaration\">e</span> <span class=\"keyword control\">in</span> <span class=\"variable mutable\">vec</span> <span class=\"brace\">{</span>\n         <span class=\"comment\">// Do nothing</span>\n@@ -256,9 +251,6 @@\n     futures::<span class=\"macro\">join!</span><span class=\"parenthesis\">(</span>f1<span class=\"comma\">,</span> f2<span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration unsafe\">Dangerous</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-<span class=\"keyword\">impl</span> <span class=\"trait unsafe\">Dangerous</span> <span class=\"keyword\">for</span> <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">use_foo_items</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">bob</span> <span class=\"operator\">=</span> <span class=\"module library\">foo</span><span class=\"operator\">::</span><span class=\"struct library\">Person</span> <span class=\"brace\">{</span>\n         <span class=\"field library\">name</span><span class=\"colon\">:</span> <span class=\"string_literal\">\"Bob\"</span><span class=\"comma\">,</span>"}, {"sha": "28c2bed768ac6bb80bccaa1b54cc95aadd153d1e", "filename": "crates/ide/src/syntax_highlighting/test_data/injection.html", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html", "raw_url": "https://github.com/rust-lang/rust/raw/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html?ref=33cdc21832f517997235f928f13a13a2366a24fe", "patch": "@@ -17,6 +17,8 @@\n .function.unsafe    { color: #BC8383; }\n .trait.unsafe       { color: #BC8383; }\n .operator.unsafe    { color: #BC8383; }\n+.mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }\n@@ -33,7 +35,6 @@\n .mutable            { text-decoration: underline; }\n .escape_sequence    { color: #94BFF3; }\n .keyword            { color: #F0DFAF; font-weight: bold; }\n-.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .control            { font-style: italic; }\n .reference          { font-style: italic; font-weight: bold; }\n "}, {"sha": "30c4bf40f4e4ba40d6bfad0f0e43b75d46b80c77", "filename": "crates/ide/src/syntax_highlighting/test_data/rainbow_highlighting.html", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Frainbow_highlighting.html?ref=33cdc21832f517997235f928f13a13a2366a24fe", "patch": "@@ -17,6 +17,8 @@\n .function.unsafe    { color: #BC8383; }\n .trait.unsafe       { color: #BC8383; }\n .operator.unsafe    { color: #BC8383; }\n+.mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }\n@@ -33,7 +35,6 @@\n .mutable            { text-decoration: underline; }\n .escape_sequence    { color: #94BFF3; }\n .keyword            { color: #F0DFAF; font-weight: bold; }\n-.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .control            { font-style: italic; }\n .reference          { font-style: italic; font-weight: bold; }\n "}, {"sha": "dbb8de242771804723cb7bcd5ecfcae7f718a61a", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33cdc21832f517997235f928f13a13a2366a24fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=33cdc21832f517997235f928f13a13a2366a24fe", "patch": "@@ -89,8 +89,6 @@ fn str() {\n     str();\n }\n \n-static mut STATIC_MUT: i32 = 0;\n-\n fn foo<'a, T>() -> T {\n     foo::<'a, i32>()\n }\n@@ -158,10 +156,6 @@ fn main() {\n         let x = 92;\n         vec.push(Foo { x, y: 1 });\n     }\n-    unsafe {\n-        vec.set_len(0);\n-        STATIC_MUT = 1;\n-    }\n \n     for e in vec {\n         // Do nothing\n@@ -229,9 +223,6 @@ async fn async_main() {\n     futures::join!(f1, f2);\n }\n \n-unsafe trait Dangerous {}\n-impl Dangerous for () {}\n-\n fn use_foo_items() {\n     let bob = foo::Person {\n         name: \"Bob\",\n@@ -514,34 +505,30 @@ fn main() {\n fn test_unsafe_highlighting() {\n     check_highlighting(\n         r#\"\n+static mut MUT_GLOBAL: Struct = Struct { field: 0 };\n+static GLOBAL: Struct = Struct { field: 0 };\n unsafe fn unsafe_fn() {}\n \n union Union {\n     a: u32,\n     b: f32,\n }\n \n-struct HasUnsafeFn;\n-\n-impl HasUnsafeFn {\n+struct Struct { field: i32 }\n+impl Struct {\n     unsafe fn unsafe_method(&self) {}\n }\n \n-struct TypeForStaticMut {\n-    a: u8\n-}\n-\n-static mut global_mut: TypeForStaticMut = TypeForStaticMut { a: 0 };\n-\n #[repr(packed)]\n struct Packed {\n     a: u16,\n }\n \n unsafe trait UnsafeTrait {}\n unsafe impl UnsafeTrait for Packed {}\n+impl !UnsafeTrait for () {}\n \n-fn require_unsafe_trait<T: UnsafeTrait>(_: T) {}\n+fn unsafe_trait_bound<T: UnsafeTrait>(_: T) {}\n \n trait DoTheAutoref {\n     fn calls_autoref(&self);\n@@ -562,13 +549,14 @@ fn main() {\n             Union { b: 0 } => (),\n             Union { a } => (),\n         }\n-        HasUnsafeFn.unsafe_method();\n+        Struct { field: 0 }.unsafe_method();\n \n         // unsafe deref\n-        let y = *x;\n+        *x;\n \n         // unsafe access to a static mut\n-        let a = global_mut.a;\n+        MUT_GLOBAL.field;\n+        GLOBAL.field;\n \n         // unsafe ref of packed fields\n         let packed = Packed { a: 0 };"}]}