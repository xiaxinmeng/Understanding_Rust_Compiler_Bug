{"sha": "78e4456e1f08a7ebf2b40017fd3de835ceb2b669", "node_id": "C_kwDOAAsO6NoAKDc4ZTQ0NTZlMWYwOGE3ZWJmMmI0MDAxN2ZkM2RlODM1Y2ViMmI2Njk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-19T05:45:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-19T05:45:31Z"}, "message": "Rollup merge of #93990 - lcnr:pre-89862-cleanup, r=estebank\n\npre #89862 cleanup\n\nchanges used in #89862 which can be landed without the rest of this PR being finished.\n\nr? `@estebank`", "tree": {"sha": "eb262cf05543d1290510afe24824ba389191d594", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb262cf05543d1290510afe24824ba389191d594"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78e4456e1f08a7ebf2b40017fd3de835ceb2b669", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiEIP8CRBK7hj4Ov3rIwAAjIUIAIpxy24gmQ6udIZvmB7lxrOr\nsUG6JkmE9odVNgwH16gVGO3W+dHdHUOdjh6oDwZ4kKOM8aejscrsM9ffebpyJsQi\n0ZtT/UBzdY2uu1/y6nHA+t5p2HyO9Ha38PiuThzhiVjO8AIaWRYSYL/Z2KsZBIbW\nAbxuo0nN/00rLh4u6SXaOX3rg9BBhu11reTy6y1fko9v8MjzoevYzimIbpzWUYjs\nnqcEQ0fjBOD1rGrMbANk30W4F6KY9G/N3s7lMRtGk7397EMBV+4RYaHXlIC8nI2y\n+7xgeqgnWiubP3XrIGsV1UcH7FFOUjJRT4zO+sGLTHvQ5mw5ECE9a/ARYKorOYQ=\n=H4z5\n-----END PGP SIGNATURE-----\n", "payload": "tree eb262cf05543d1290510afe24824ba389191d594\nparent 26dd6ac8302ab7230cd2d78797910931e4b83015\nparent 1b7c3bcef9dc88e65c4914887071e432436a0b04\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645249531 +0100\ncommitter GitHub <noreply@github.com> 1645249531 +0100\n\nRollup merge of #93990 - lcnr:pre-89862-cleanup, r=estebank\n\npre #89862 cleanup\n\nchanges used in #89862 which can be landed without the rest of this PR being finished.\n\nr? `@estebank`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78e4456e1f08a7ebf2b40017fd3de835ceb2b669", "html_url": "https://github.com/rust-lang/rust/commit/78e4456e1f08a7ebf2b40017fd3de835ceb2b669", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78e4456e1f08a7ebf2b40017fd3de835ceb2b669/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26dd6ac8302ab7230cd2d78797910931e4b83015", "url": "https://api.github.com/repos/rust-lang/rust/commits/26dd6ac8302ab7230cd2d78797910931e4b83015", "html_url": "https://github.com/rust-lang/rust/commit/26dd6ac8302ab7230cd2d78797910931e4b83015"}, {"sha": "1b7c3bcef9dc88e65c4914887071e432436a0b04", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b7c3bcef9dc88e65c4914887071e432436a0b04", "html_url": "https://github.com/rust-lang/rust/commit/1b7c3bcef9dc88e65c4914887071e432436a0b04"}], "stats": {"total": 142, "additions": 88, "deletions": 54}, "files": [{"sha": "205ad04455483229fc3e3116930bb92fa12574de", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/78e4456e1f08a7ebf2b40017fd3de835ceb2b669/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e4456e1f08a7ebf2b40017fd3de835ceb2b669/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=78e4456e1f08a7ebf2b40017fd3de835ceb2b669", "patch": "@@ -497,16 +497,32 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let ty_to_string = |ty: Ty<'tcx>| -> String {\n             let mut s = String::new();\n             let mut printer = ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::TypeNS);\n-            let mut inner = self.inner.borrow_mut();\n-            let ty_vars = inner.type_variables();\n-            let getter = move |ty_vid| {\n-                let var_origin = ty_vars.var_origin(ty_vid);\n-                if let TypeVariableOriginKind::TypeParameterDefinition(name, _) = var_origin.kind {\n+            let ty_getter = move |ty_vid| {\n+                if let TypeVariableOriginKind::TypeParameterDefinition(name, _) =\n+                    self.inner.borrow_mut().type_variables().var_origin(ty_vid).kind\n+                {\n+                    Some(name.to_string())\n+                } else {\n+                    None\n+                }\n+            };\n+            printer.ty_infer_name_resolver = Some(Box::new(ty_getter));\n+            let const_getter = move |ct_vid| {\n+                if let ConstVariableOriginKind::ConstParameterDefinition(name, _) = self\n+                    .inner\n+                    .borrow_mut()\n+                    .const_unification_table()\n+                    .probe_value(ct_vid)\n+                    .origin\n+                    .kind\n+                {\n                     return Some(name.to_string());\n+                } else {\n+                    None\n                 }\n-                None\n             };\n-            printer.name_resolver = Some(Box::new(&getter));\n+            printer.const_infer_name_resolver = Some(Box::new(const_getter));\n+\n             let _ = if let ty::FnDef(..) = ty.kind() {\n                 // We don't want the regular output for `fn`s because it includes its path in\n                 // invalid pseudo-syntax, we want the `fn`-pointer output instead."}, {"sha": "bf7370c9e0ee5c2fe1f111b10029a289beab6959", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/78e4456e1f08a7ebf2b40017fd3de835ceb2b669/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e4456e1f08a7ebf2b40017fd3de835ceb2b669/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=78e4456e1f08a7ebf2b40017fd3de835ceb2b669", "patch": "@@ -606,7 +606,7 @@ pub trait PrettyPrinter<'tcx>:\n             ty::Infer(infer_ty) => {\n                 let verbose = self.tcx().sess.verbose();\n                 if let ty::TyVar(ty_vid) = infer_ty {\n-                    if let Some(name) = self.infer_ty_name(ty_vid) {\n+                    if let Some(name) = self.ty_infer_name(ty_vid) {\n                         p!(write(\"{}\", name))\n                     } else {\n                         if verbose {\n@@ -1015,7 +1015,11 @@ pub trait PrettyPrinter<'tcx>:\n         }\n     }\n \n-    fn infer_ty_name(&self, _: ty::TyVid) -> Option<String> {\n+    fn ty_infer_name(&self, _: ty::TyVid) -> Option<String> {\n+        None\n+    }\n+\n+    fn const_infer_name(&self, _: ty::ConstVid<'tcx>) -> Option<String> {\n         None\n     }\n \n@@ -1203,7 +1207,14 @@ pub trait PrettyPrinter<'tcx>:\n                     }\n                 }\n             }\n-            ty::ConstKind::Infer(..) => print_underscore!(),\n+            ty::ConstKind::Infer(infer_ct) => {\n+                match infer_ct {\n+                    ty::InferConst::Var(ct_vid)\n+                        if let Some(name) = self.const_infer_name(ct_vid) =>\n+                            p!(write(\"{}\", name)),\n+                    _ => print_underscore!(),\n+                }\n+            }\n             ty::ConstKind::Param(ParamConst { name, .. }) => p!(write(\"{}\", name)),\n             ty::ConstKind::Value(value) => {\n                 return self.pretty_print_const_value(value, ct.ty(), print_ty);\n@@ -1559,7 +1570,8 @@ pub struct FmtPrinterData<'a, 'tcx, F> {\n \n     pub region_highlight_mode: RegionHighlightMode<'tcx>,\n \n-    pub name_resolver: Option<Box<&'a dyn Fn(ty::TyVid) -> Option<String>>>,\n+    pub ty_infer_name_resolver: Option<Box<dyn Fn(ty::TyVid) -> Option<String> + 'a>>,\n+    pub const_infer_name_resolver: Option<Box<dyn Fn(ty::ConstVid<'tcx>) -> Option<String> + 'a>>,\n }\n \n impl<'a, 'tcx, F> Deref for FmtPrinter<'a, 'tcx, F> {\n@@ -1588,7 +1600,8 @@ impl<'a, 'tcx, F> FmtPrinter<'a, 'tcx, F> {\n             binder_depth: 0,\n             printed_type_count: 0,\n             region_highlight_mode: RegionHighlightMode::new(tcx),\n-            name_resolver: None,\n+            ty_infer_name_resolver: None,\n+            const_infer_name_resolver: None,\n         }))\n     }\n }\n@@ -1843,8 +1856,12 @@ impl<'tcx, F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n }\n \n impl<'tcx, F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n-    fn infer_ty_name(&self, id: ty::TyVid) -> Option<String> {\n-        self.0.name_resolver.as_ref().and_then(|func| func(id))\n+    fn ty_infer_name(&self, id: ty::TyVid) -> Option<String> {\n+        self.0.ty_infer_name_resolver.as_ref().and_then(|func| func(id))\n+    }\n+\n+    fn const_infer_name(&self, id: ty::ConstVid<'tcx>) -> Option<String> {\n+        self.0.const_infer_name_resolver.as_ref().and_then(|func| func(id))\n     }\n \n     fn print_value_path("}, {"sha": "92d9cb2fc1b2b131c250dee59e04a48228d69914", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/78e4456e1f08a7ebf2b40017fd3de835ceb2b669/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e4456e1f08a7ebf2b40017fd3de835ceb2b669/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=78e4456e1f08a7ebf2b40017fd3de835ceb2b669", "patch": "@@ -17,7 +17,7 @@ use rustc_data_structures::intern::Interned;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n-use rustc_hir::def::DefKind;\n+use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n use rustc_query_system::ich::NodeIdHashingMode;\n@@ -146,6 +146,37 @@ impl<'tcx> TyCtxt<'tcx> {\n         hasher.finish()\n     }\n \n+    pub fn res_generics_def_id(self, res: Res) -> Option<DefId> {\n+        match res {\n+            Res::Def(DefKind::Ctor(CtorOf::Variant, _), def_id) => {\n+                Some(self.parent(def_id).and_then(|def_id| self.parent(def_id)).unwrap())\n+            }\n+            Res::Def(DefKind::Variant | DefKind::Ctor(CtorOf::Struct, _), def_id) => {\n+                Some(self.parent(def_id).unwrap())\n+            }\n+            // Other `DefKind`s don't have generics and would ICE when calling\n+            // `generics_of`.\n+            Res::Def(\n+                DefKind::Struct\n+                | DefKind::Union\n+                | DefKind::Enum\n+                | DefKind::Trait\n+                | DefKind::OpaqueTy\n+                | DefKind::TyAlias\n+                | DefKind::ForeignTy\n+                | DefKind::TraitAlias\n+                | DefKind::AssocTy\n+                | DefKind::Fn\n+                | DefKind::AssocFn\n+                | DefKind::AssocConst\n+                | DefKind::Impl,\n+                def_id,\n+            ) => Some(def_id),\n+            Res::Err => None,\n+            _ => None,\n+        }\n+    }\n+\n     pub fn has_error_field(self, ty: Ty<'tcx>) -> bool {\n         if let ty::Adt(def, substs) = *ty.kind() {\n             for field in def.all_fields() {"}, {"sha": "39da7c82c4eec42179a854c1840e128e6b98f59a", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 5, "deletions": 35, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/78e4456e1f08a7ebf2b40017fd3de835ceb2b669/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e4456e1f08a7ebf2b40017fd3de835ceb2b669/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=78e4456e1f08a7ebf2b40017fd3de835ceb2b669", "patch": "@@ -1,15 +1,14 @@\n use rustc_errors::{Applicability, ErrorReported, StashKey};\n use rustc_hir as hir;\n-use rustc_hir::def::CtorOf;\n-use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def::Res;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::{HirId, Node};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IntTypeExt;\n-use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt, TypeFoldable, TypeFolder};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeFolder};\n use rustc_span::symbol::Ident;\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -198,38 +197,9 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n             // Try to use the segment resolution if it is valid, otherwise we\n             // default to the path resolution.\n             let res = segment.res.filter(|&r| r != Res::Err).unwrap_or(path.res);\n-            let generics = match res {\n-                Res::Def(DefKind::Ctor(CtorOf::Variant, _), def_id) => tcx\n-                    .generics_of(tcx.parent(def_id).and_then(|def_id| tcx.parent(def_id)).unwrap()),\n-                Res::Def(DefKind::Variant | DefKind::Ctor(CtorOf::Struct, _), def_id) => {\n-                    tcx.generics_of(tcx.parent(def_id).unwrap())\n-                }\n-                // Other `DefKind`s don't have generics and would ICE when calling\n-                // `generics_of`.\n-                Res::Def(\n-                    DefKind::Struct\n-                    | DefKind::Union\n-                    | DefKind::Enum\n-                    | DefKind::Trait\n-                    | DefKind::OpaqueTy\n-                    | DefKind::TyAlias\n-                    | DefKind::ForeignTy\n-                    | DefKind::TraitAlias\n-                    | DefKind::AssocTy\n-                    | DefKind::Fn\n-                    | DefKind::AssocFn\n-                    | DefKind::AssocConst\n-                    | DefKind::Impl,\n-                    def_id,\n-                ) => tcx.generics_of(def_id),\n-                Res::Err => {\n-                    tcx.sess.delay_span_bug(tcx.def_span(def_id), \"anon const with Res::Err\");\n-                    return None;\n-                }\n-                _ => {\n-                    // If the user tries to specify generics on a type that does not take them,\n-                    // e.g. `usize<T>`, we may hit this branch, in which case we treat it as if\n-                    // no arguments have been passed. An error should already have been emitted.\n+            let generics = match tcx.res_generics_def_id(res) {\n+                Some(def_id) => tcx.generics_of(def_id),\n+                None => {\n                     tcx.sess.delay_span_bug(\n                         tcx.def_span(def_id),\n                         &format!(\"unexpected anon const res {:?} in path: {:?}\", res, path),"}, {"sha": "9c59e672d8e4cbc523b4d3744bebd4b5e565c4cc", "filename": "src/test/ui/const-generics/defaults/doesnt_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78e4456e1f08a7ebf2b40017fd3de835ceb2b669/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e4456e1f08a7ebf2b40017fd3de835ceb2b669/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.rs?ref=78e4456e1f08a7ebf2b40017fd3de835ceb2b669", "patch": "@@ -9,5 +9,5 @@ impl<const N: u32> Foo<N> {\n fn main() {\n     let foo = Foo::<1>::foo();\n     let foo = Foo::foo();\n-    //~^ error: type annotations needed for `Foo<{_: u32}>`\n+    //~^ error: type annotations needed for `Foo<N>`\n }"}, {"sha": "cccf433e32864ae0c58c21ec0b8519d91bc3161f", "filename": "src/test/ui/const-generics/defaults/doesnt_infer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78e4456e1f08a7ebf2b40017fd3de835ceb2b669/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78e4456e1f08a7ebf2b40017fd3de835ceb2b669/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.stderr?ref=78e4456e1f08a7ebf2b40017fd3de835ceb2b669", "patch": "@@ -1,4 +1,4 @@\n-error[E0282]: type annotations needed for `Foo<{_: u32}>`\n+error[E0282]: type annotations needed for `Foo<N>`\n   --> $DIR/doesnt_infer.rs:11:15\n    |\n LL |     let foo = Foo::foo();"}, {"sha": "b45e2cbc7372b3bfc3446714d9af3be41e609b2f", "filename": "src/test/ui/const-generics/generic_arg_infer/issue-91614.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78e4456e1f08a7ebf2b40017fd3de835ceb2b669/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e4456e1f08a7ebf2b40017fd3de835ceb2b669/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.rs?ref=78e4456e1f08a7ebf2b40017fd3de835ceb2b669", "patch": "@@ -4,5 +4,5 @@ use std::simd::Mask;\n \n fn main() {\n     let y = Mask::<_, _>::splat(false);\n-    //~^ error: type annotations needed for `Mask<_, {_: usize}>`\n+    //~^ ERROR: type annotations needed for\n }"}, {"sha": "347cd2364b2667cff9bb7103c23376cf4ef90006", "filename": "src/test/ui/const-generics/generic_arg_infer/issue-91614.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78e4456e1f08a7ebf2b40017fd3de835ceb2b669/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78e4456e1f08a7ebf2b40017fd3de835ceb2b669/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.stderr?ref=78e4456e1f08a7ebf2b40017fd3de835ceb2b669", "patch": "@@ -1,4 +1,4 @@\n-error[E0283]: type annotations needed for `Mask<_, {_: usize}>`\n+error[E0283]: type annotations needed for `Mask<_, LANES>`\n   --> $DIR/issue-91614.rs:6:13\n    |\n LL |     let y = Mask::<_, _>::splat(false);"}]}