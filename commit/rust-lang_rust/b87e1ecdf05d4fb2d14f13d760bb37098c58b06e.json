{"sha": "b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4N2UxZWNkZjA1ZDRmYjJkMTRmMTNkNzYwYmIzNzA5OGM1OGIwNmU=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2021-01-29T07:31:08Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2021-02-01T08:23:39Z"}, "message": "Box the biggest ast::ItemKind variants", "tree": {"sha": "366f3510245bdb4f2783398babd5da30fac59d89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/366f3510245bdb4f2783398babd5da30fac59d89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "html_url": "https://github.com/rust-lang/rust/commit/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fee0d31397c5ac46d08867e903131d1d73825a9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fee0d31397c5ac46d08867e903131d1d73825a9e", "html_url": "https://github.com/rust-lang/rust/commit/fee0d31397c5ac46d08867e903131d1d73825a9e"}], "stats": {"total": 513, "additions": 309, "deletions": 204}, "files": [{"sha": "ea79782ece1aa7cafcf1c7b084180914a84959e0", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 54, "deletions": 35, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -2655,6 +2655,35 @@ impl Default for FnHeader {\n     }\n }\n \n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub struct TraitKind(\n+    pub IsAuto,\n+    pub Unsafe,\n+    pub Generics,\n+    pub GenericBounds,\n+    pub Vec<P<AssocItem>>,\n+);\n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub struct TyAliasKind(pub Defaultness, pub Generics, pub GenericBounds, pub Option<P<Ty>>);\n+\n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub struct ImplKind {\n+    pub unsafety: Unsafe,\n+    pub polarity: ImplPolarity,\n+    pub defaultness: Defaultness,\n+    pub constness: Const,\n+    pub generics: Generics,\n+\n+    /// The trait being implemented, if any.\n+    pub of_trait: Option<TraitRef>,\n+\n+    pub self_ty: P<Ty>,\n+    pub items: Vec<P<AssocItem>>,\n+}\n+\n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub struct FnKind(pub Defaultness, pub FnSig, pub Generics, pub Option<P<Block>>);\n+\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum ItemKind {\n     /// An `extern crate` item, with the optional *original* crate name if the crate was renamed.\n@@ -2676,7 +2705,7 @@ pub enum ItemKind {\n     /// A function declaration (`fn`).\n     ///\n     /// E.g., `fn foo(bar: usize) -> usize { .. }`.\n-    Fn(Defaultness, FnSig, Generics, Option<P<Block>>),\n+    Fn(Box<FnKind>),\n     /// A module declaration (`mod`).\n     ///\n     /// E.g., `mod foo;` or `mod foo { .. }`.\n@@ -2690,7 +2719,7 @@ pub enum ItemKind {\n     /// A type alias (`type`).\n     ///\n     /// E.g., `type Foo = Bar<u8>;`.\n-    TyAlias(Defaultness, Generics, GenericBounds, Option<P<Ty>>),\n+    TyAlias(Box<TyAliasKind>),\n     /// An enum definition (`enum`).\n     ///\n     /// E.g., `enum Foo<A, B> { C<A>, D<B> }`.\n@@ -2706,27 +2735,15 @@ pub enum ItemKind {\n     /// A trait declaration (`trait`).\n     ///\n     /// E.g., `trait Foo { .. }`, `trait Foo<T> { .. }` or `auto trait Foo {}`.\n-    Trait(IsAuto, Unsafe, Generics, GenericBounds, Vec<P<AssocItem>>),\n+    Trait(Box<TraitKind>),\n     /// Trait alias\n     ///\n     /// E.g., `trait Foo = Bar + Quux;`.\n     TraitAlias(Generics, GenericBounds),\n     /// An implementation.\n     ///\n     /// E.g., `impl<A> Foo<A> { .. }` or `impl<A> Trait for Foo<A> { .. }`.\n-    Impl {\n-        unsafety: Unsafe,\n-        polarity: ImplPolarity,\n-        defaultness: Defaultness,\n-        constness: Const,\n-        generics: Generics,\n-\n-        /// The trait being implemented, if any.\n-        of_trait: Option<TraitRef>,\n-\n-        self_ty: P<Ty>,\n-        items: Vec<P<AssocItem>>,\n-    },\n+    Impl(Box<ImplKind>),\n     /// A macro invocation.\n     ///\n     /// E.g., `foo!(..)`.\n@@ -2770,14 +2787,14 @@ impl ItemKind {\n \n     pub fn generics(&self) -> Option<&Generics> {\n         match self {\n-            Self::Fn(_, _, generics, _)\n-            | Self::TyAlias(_, generics, ..)\n+            Self::Fn(box FnKind(_, _, generics, _))\n+            | Self::TyAlias(box TyAliasKind(_, generics, ..))\n             | Self::Enum(_, generics)\n             | Self::Struct(_, generics)\n             | Self::Union(_, generics)\n-            | Self::Trait(_, _, generics, ..)\n+            | Self::Trait(box TraitKind(_, _, generics, ..))\n             | Self::TraitAlias(generics, _)\n-            | Self::Impl { generics, .. } => Some(generics),\n+            | Self::Impl(box ImplKind { generics, .. }) => Some(generics),\n             _ => None,\n         }\n     }\n@@ -2800,17 +2817,19 @@ pub enum AssocItemKind {\n     /// If `def` is parsed, then the constant is provided, and otherwise required.\n     Const(Defaultness, P<Ty>, Option<P<Expr>>),\n     /// An associated function.\n-    Fn(Defaultness, FnSig, Generics, Option<P<Block>>),\n+    Fn(Box<FnKind>),\n     /// An associated type.\n-    TyAlias(Defaultness, Generics, GenericBounds, Option<P<Ty>>),\n+    TyAlias(Box<TyAliasKind>),\n     /// A macro expanding to associated items.\n     MacCall(MacCall),\n }\n \n impl AssocItemKind {\n     pub fn defaultness(&self) -> Defaultness {\n         match *self {\n-            Self::Const(def, ..) | Self::Fn(def, ..) | Self::TyAlias(def, ..) => def,\n+            Self::Const(def, ..)\n+            | Self::Fn(box FnKind(def, ..))\n+            | Self::TyAlias(box TyAliasKind(def, ..)) => def,\n             Self::MacCall(..) => Defaultness::Final,\n         }\n     }\n@@ -2820,8 +2839,8 @@ impl From<AssocItemKind> for ItemKind {\n     fn from(assoc_item_kind: AssocItemKind) -> ItemKind {\n         match assoc_item_kind {\n             AssocItemKind::Const(a, b, c) => ItemKind::Const(a, b, c),\n-            AssocItemKind::Fn(a, b, c, d) => ItemKind::Fn(a, b, c, d),\n-            AssocItemKind::TyAlias(a, b, c, d) => ItemKind::TyAlias(a, b, c, d),\n+            AssocItemKind::Fn(fn_kind) => ItemKind::Fn(fn_kind),\n+            AssocItemKind::TyAlias(ty_alias_kind) => ItemKind::TyAlias(ty_alias_kind),\n             AssocItemKind::MacCall(a) => ItemKind::MacCall(a),\n         }\n     }\n@@ -2833,8 +2852,8 @@ impl TryFrom<ItemKind> for AssocItemKind {\n     fn try_from(item_kind: ItemKind) -> Result<AssocItemKind, ItemKind> {\n         Ok(match item_kind {\n             ItemKind::Const(a, b, c) => AssocItemKind::Const(a, b, c),\n-            ItemKind::Fn(a, b, c, d) => AssocItemKind::Fn(a, b, c, d),\n-            ItemKind::TyAlias(a, b, c, d) => AssocItemKind::TyAlias(a, b, c, d),\n+            ItemKind::Fn(fn_kind) => AssocItemKind::Fn(fn_kind),\n+            ItemKind::TyAlias(ty_alias_kind) => AssocItemKind::TyAlias(ty_alias_kind),\n             ItemKind::MacCall(a) => AssocItemKind::MacCall(a),\n             _ => return Err(item_kind),\n         })\n@@ -2846,10 +2865,10 @@ impl TryFrom<ItemKind> for AssocItemKind {\n pub enum ForeignItemKind {\n     /// A foreign static item (`static FOO: u8`).\n     Static(P<Ty>, Mutability, Option<P<Expr>>),\n-    /// A foreign function.\n-    Fn(Defaultness, FnSig, Generics, Option<P<Block>>),\n-    /// A foreign type.\n-    TyAlias(Defaultness, Generics, GenericBounds, Option<P<Ty>>),\n+    /// An foreign function.\n+    Fn(Box<FnKind>),\n+    /// An foreign type.\n+    TyAlias(Box<TyAliasKind>),\n     /// A macro expanding to foreign items.\n     MacCall(MacCall),\n }\n@@ -2858,8 +2877,8 @@ impl From<ForeignItemKind> for ItemKind {\n     fn from(foreign_item_kind: ForeignItemKind) -> ItemKind {\n         match foreign_item_kind {\n             ForeignItemKind::Static(a, b, c) => ItemKind::Static(a, b, c),\n-            ForeignItemKind::Fn(a, b, c, d) => ItemKind::Fn(a, b, c, d),\n-            ForeignItemKind::TyAlias(a, b, c, d) => ItemKind::TyAlias(a, b, c, d),\n+            ForeignItemKind::Fn(fn_kind) => ItemKind::Fn(fn_kind),\n+            ForeignItemKind::TyAlias(ty_alias_kind) => ItemKind::TyAlias(ty_alias_kind),\n             ForeignItemKind::MacCall(a) => ItemKind::MacCall(a),\n         }\n     }\n@@ -2871,8 +2890,8 @@ impl TryFrom<ItemKind> for ForeignItemKind {\n     fn try_from(item_kind: ItemKind) -> Result<ForeignItemKind, ItemKind> {\n         Ok(match item_kind {\n             ItemKind::Static(a, b, c) => ForeignItemKind::Static(a, b, c),\n-            ItemKind::Fn(a, b, c, d) => ForeignItemKind::Fn(a, b, c, d),\n-            ItemKind::TyAlias(a, b, c, d) => ForeignItemKind::TyAlias(a, b, c, d),\n+            ItemKind::Fn(fn_kind) => ForeignItemKind::Fn(fn_kind),\n+            ItemKind::TyAlias(ty_alias_kind) => ForeignItemKind::TyAlias(ty_alias_kind),\n             ItemKind::MacCall(a) => ForeignItemKind::MacCall(a),\n             _ => return Err(item_kind),\n         })"}, {"sha": "0f411eda49dbc879ec4fdd97b6c73cd8a52771dd", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -9,6 +9,7 @@\n     test(attr(deny(warnings)))\n )]\n #![feature(box_syntax)]\n+#![feature(box_patterns)]\n #![feature(const_fn)] // For the `transmute` in `P::new`\n #![feature(const_fn_transmute)]\n #![feature(const_panic)]"}, {"sha": "90d31d4801f92911afd0e7b150796d276d565df5", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -912,15 +912,15 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n             vis.visit_ty(ty);\n             visit_opt(expr, |expr| vis.visit_expr(expr));\n         }\n-        ItemKind::Fn(_, sig, generics, body) => {\n+        ItemKind::Fn(box FnKind(_, sig, generics, body)) => {\n             visit_fn_sig(sig, vis);\n             vis.visit_generics(generics);\n             visit_opt(body, |body| vis.visit_block(body));\n         }\n         ItemKind::Mod(m) => vis.visit_mod(m),\n         ItemKind::ForeignMod(nm) => vis.visit_foreign_mod(nm),\n         ItemKind::GlobalAsm(_ga) => {}\n-        ItemKind::TyAlias(_, generics, bounds, ty) => {\n+        ItemKind::TyAlias(box TyAliasKind(_, generics, bounds, ty)) => {\n             vis.visit_generics(generics);\n             visit_bounds(bounds, vis);\n             visit_opt(ty, |ty| vis.visit_ty(ty));\n@@ -933,7 +933,7 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n             vis.visit_variant_data(variant_data);\n             vis.visit_generics(generics);\n         }\n-        ItemKind::Impl {\n+        ItemKind::Impl(box ImplKind {\n             unsafety: _,\n             polarity: _,\n             defaultness: _,\n@@ -942,13 +942,13 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n             of_trait,\n             self_ty,\n             items,\n-        } => {\n+        }) => {\n             vis.visit_generics(generics);\n             visit_opt(of_trait, |trait_ref| vis.visit_trait_ref(trait_ref));\n             vis.visit_ty(self_ty);\n             items.flat_map_in_place(|item| vis.flat_map_impl_item(item));\n         }\n-        ItemKind::Trait(_is_auto, _unsafety, generics, bounds, items) => {\n+        ItemKind::Trait(box TraitKind(.., generics, bounds, items)) => {\n             vis.visit_generics(generics);\n             visit_bounds(bounds, vis);\n             items.flat_map_in_place(|item| vis.flat_map_trait_item(item));\n@@ -976,12 +976,12 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n             visitor.visit_ty(ty);\n             visit_opt(expr, |expr| visitor.visit_expr(expr));\n         }\n-        AssocItemKind::Fn(_, sig, generics, body) => {\n+        AssocItemKind::Fn(box FnKind(_, sig, generics, body)) => {\n             visitor.visit_generics(generics);\n             visit_fn_sig(sig, visitor);\n             visit_opt(body, |body| visitor.visit_block(body));\n         }\n-        AssocItemKind::TyAlias(_, generics, bounds, ty) => {\n+        AssocItemKind::TyAlias(box TyAliasKind(_, generics, bounds, ty)) => {\n             visitor.visit_generics(generics);\n             visit_bounds(bounds, visitor);\n             visit_opt(ty, |ty| visitor.visit_ty(ty));\n@@ -1066,12 +1066,12 @@ pub fn noop_flat_map_foreign_item<T: MutVisitor>(\n             visitor.visit_ty(ty);\n             visit_opt(expr, |expr| visitor.visit_expr(expr));\n         }\n-        ForeignItemKind::Fn(_, sig, generics, body) => {\n+        ForeignItemKind::Fn(box FnKind(_, sig, generics, body)) => {\n             visitor.visit_generics(generics);\n             visit_fn_sig(sig, visitor);\n             visit_opt(body, |body| visitor.visit_block(body));\n         }\n-        ForeignItemKind::TyAlias(_, generics, bounds, ty) => {\n+        ForeignItemKind::TyAlias(box TyAliasKind(_, generics, bounds, ty)) => {\n             visitor.visit_generics(generics);\n             visit_bounds(bounds, visitor);\n             visit_opt(ty, |ty| visitor.visit_ty(ty));"}, {"sha": "c37d4cd9f79365a4be8e7197ede66e56d7d37678", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -292,7 +292,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             visitor.visit_ty(typ);\n             walk_list!(visitor, visit_expr, expr);\n         }\n-        ItemKind::Fn(_, ref sig, ref generics, ref body) => {\n+        ItemKind::Fn(box FnKind(_, ref sig, ref generics, ref body)) => {\n             visitor.visit_generics(generics);\n             let kind = FnKind::Fn(FnCtxt::Free, item.ident, sig, &item.vis, body.as_deref());\n             visitor.visit_fn(kind, item.span, item.id)\n@@ -302,7 +302,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             walk_list!(visitor, visit_foreign_item, &foreign_module.items);\n         }\n         ItemKind::GlobalAsm(ref ga) => visitor.visit_global_asm(ga),\n-        ItemKind::TyAlias(_, ref generics, ref bounds, ref ty) => {\n+        ItemKind::TyAlias(box TyAliasKind(_, ref generics, ref bounds, ref ty)) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_ty, ty);\n@@ -311,7 +311,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             visitor.visit_generics(generics);\n             visitor.visit_enum_def(enum_definition, generics, item.id, item.span)\n         }\n-        ItemKind::Impl {\n+        ItemKind::Impl(box ImplKind {\n             unsafety: _,\n             polarity: _,\n             defaultness: _,\n@@ -320,7 +320,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             ref of_trait,\n             ref self_ty,\n             ref items,\n-        } => {\n+        }) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_trait_ref, of_trait);\n             visitor.visit_ty(self_ty);\n@@ -331,7 +331,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             visitor.visit_generics(generics);\n             visitor.visit_variant_data(struct_definition);\n         }\n-        ItemKind::Trait(.., ref generics, ref bounds, ref items) => {\n+        ItemKind::Trait(box TraitKind(.., ref generics, ref bounds, ref items)) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_assoc_item, items, AssocCtxt::Trait);\n@@ -543,12 +543,12 @@ pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a ForeignI\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, expr);\n         }\n-        ForeignItemKind::Fn(_, sig, generics, body) => {\n+        ForeignItemKind::Fn(box FnKind(_, sig, generics, body)) => {\n             visitor.visit_generics(generics);\n             let kind = FnKind::Fn(FnCtxt::Foreign, ident, sig, vis, body.as_deref());\n             visitor.visit_fn(kind, span, id);\n         }\n-        ForeignItemKind::TyAlias(_, generics, bounds, ty) => {\n+        ForeignItemKind::TyAlias(box TyAliasKind(_, generics, bounds, ty)) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_ty, ty);\n@@ -653,12 +653,12 @@ pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem,\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, expr);\n         }\n-        AssocItemKind::Fn(_, sig, generics, body) => {\n+        AssocItemKind::Fn(box FnKind(_, sig, generics, body)) => {\n             visitor.visit_generics(generics);\n             let kind = FnKind::Fn(FnCtxt::Assoc(ctxt), ident, sig, vis, body.as_deref());\n             visitor.visit_fn(kind, span, id);\n         }\n-        AssocItemKind::TyAlias(_, generics, bounds, ty) => {\n+        AssocItemKind::TyAlias(box TyAliasKind(_, generics, bounds, ty)) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_ty, ty);"}, {"sha": "1efe83cacea4a2632a97d1cb0fd06f103d8b65fb", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -67,7 +67,7 @@ impl<'a> Visitor<'a> for ItemLowerer<'a, '_, '_> {\n         if let Some(hir_id) = item_hir_id {\n             self.lctx.with_parent_item_lifetime_defs(hir_id, |this| {\n                 let this = &mut ItemLowerer { lctx: this };\n-                if let ItemKind::Impl { ref of_trait, .. } = item.kind {\n+                if let ItemKind::Impl(box ImplKind { ref of_trait, .. }) = item.kind {\n                     this.with_trait_impl_ref(of_trait, |this| visit::walk_item(this, item));\n                 } else {\n                     visit::walk_item(this, item);\n@@ -189,7 +189,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 vec\n             }\n             ItemKind::MacroDef(..) => SmallVec::new(),\n-            ItemKind::Fn(..) | ItemKind::Impl { of_trait: None, .. } => smallvec![i.id],\n+            ItemKind::Fn(..) | ItemKind::Impl(box ImplKind { of_trait: None, .. }) => {\n+                smallvec![i.id]\n+            }\n             _ => smallvec![i.id],\n         };\n \n@@ -276,12 +278,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (ty, body_id) = self.lower_const_item(t, span, e.as_deref());\n                 hir::ItemKind::Const(ty, body_id)\n             }\n-            ItemKind::Fn(\n+            ItemKind::Fn(box FnKind(\n                 _,\n                 FnSig { ref decl, header, span: fn_sig_span },\n                 ref generics,\n                 ref body,\n-            ) => {\n+            )) => {\n                 let fn_def_id = self.resolver.local_def_id(id);\n                 self.with_new_scopes(|this| {\n                     this.current_item = Some(ident.span);\n@@ -329,7 +331,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n             }\n             ItemKind::GlobalAsm(ref ga) => hir::ItemKind::GlobalAsm(self.lower_global_asm(ga)),\n-            ItemKind::TyAlias(_, ref gen, _, Some(ref ty)) => {\n+            ItemKind::TyAlias(box TyAliasKind(_, ref gen, _, Some(ref ty))) => {\n                 // We lower\n                 //\n                 // type Foo = impl Trait\n@@ -348,7 +350,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let generics = self.lower_generics(gen, ImplTraitContext::disallowed());\n                 hir::ItemKind::TyAlias(ty, generics)\n             }\n-            ItemKind::TyAlias(_, ref generics, _, None) => {\n+            ItemKind::TyAlias(box TyAliasKind(_, ref generics, _, None)) => {\n                 let ty = self.arena.alloc(self.ty(span, hir::TyKind::Err));\n                 let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n                 hir::ItemKind::TyAlias(ty, generics)\n@@ -375,7 +377,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     self.lower_generics(generics, ImplTraitContext::disallowed()),\n                 )\n             }\n-            ItemKind::Impl {\n+            ItemKind::Impl(box ImplKind {\n                 unsafety,\n                 polarity,\n                 defaultness,\n@@ -384,7 +386,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 of_trait: ref trait_ref,\n                 self_ty: ref ty,\n                 items: ref impl_items,\n-            } => {\n+            }) => {\n                 let def_id = self.resolver.local_def_id(id);\n \n                 // Lower the \"impl header\" first. This ordering is important\n@@ -448,7 +450,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     items: new_impl_items,\n                 })\n             }\n-            ItemKind::Trait(is_auto, unsafety, ref generics, ref bounds, ref items) => {\n+            ItemKind::Trait(box TraitKind(\n+                is_auto,\n+                unsafety,\n+                ref generics,\n+                ref bounds,\n+                ref items,\n+            )) => {\n                 let bounds = self.lower_param_bounds(bounds, ImplTraitContext::disallowed());\n                 let items = self\n                     .arena\n@@ -698,7 +706,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             ident: i.ident,\n             attrs: self.lower_attrs(&i.attrs),\n             kind: match i.kind {\n-                ForeignItemKind::Fn(_, ref sig, ref generics, _) => {\n+                ForeignItemKind::Fn(box FnKind(_, ref sig, ref generics, _)) => {\n                     let fdec = &sig.decl;\n                     let (generics, (fn_dec, fn_args)) = self.add_in_band_defs(\n                         generics,\n@@ -803,19 +811,19 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let body = default.as_ref().map(|x| self.lower_const_body(i.span, Some(x)));\n                 (hir::Generics::empty(), hir::TraitItemKind::Const(ty, body))\n             }\n-            AssocItemKind::Fn(_, ref sig, ref generics, None) => {\n+            AssocItemKind::Fn(box FnKind(_, ref sig, ref generics, None)) => {\n                 let names = self.lower_fn_params_to_names(&sig.decl);\n                 let (generics, sig) =\n                     self.lower_method_sig(generics, sig, trait_item_def_id, false, None, i.id);\n                 (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Required(names)))\n             }\n-            AssocItemKind::Fn(_, ref sig, ref generics, Some(ref body)) => {\n+            AssocItemKind::Fn(box FnKind(_, ref sig, ref generics, Some(ref body))) => {\n                 let body_id = self.lower_fn_body_block(i.span, &sig.decl, Some(body));\n                 let (generics, sig) =\n                     self.lower_method_sig(generics, sig, trait_item_def_id, false, None, i.id);\n                 (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Provided(body_id)))\n             }\n-            AssocItemKind::TyAlias(_, ref generics, ref bounds, ref default) => {\n+            AssocItemKind::TyAlias(box TyAliasKind(_, ref generics, ref bounds, ref default)) => {\n                 let ty = default.as_ref().map(|x| self.lower_ty(x, ImplTraitContext::disallowed()));\n                 let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n                 let kind = hir::TraitItemKind::Type(\n@@ -841,10 +849,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_trait_item_ref(&mut self, i: &AssocItem) -> hir::TraitItemRef {\n         let (kind, has_default) = match &i.kind {\n             AssocItemKind::Const(_, _, default) => (hir::AssocItemKind::Const, default.is_some()),\n-            AssocItemKind::TyAlias(_, _, _, default) => {\n+            AssocItemKind::TyAlias(box TyAliasKind(_, _, _, default)) => {\n                 (hir::AssocItemKind::Type, default.is_some())\n             }\n-            AssocItemKind::Fn(_, sig, _, default) => {\n+            AssocItemKind::Fn(box FnKind(_, sig, _, default)) => {\n                 (hir::AssocItemKind::Fn { has_self: sig.decl.has_self() }, default.is_some())\n             }\n             AssocItemKind::MacCall(..) => unimplemented!(),\n@@ -870,7 +878,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     hir::ImplItemKind::Const(ty, self.lower_const_body(i.span, expr.as_deref())),\n                 )\n             }\n-            AssocItemKind::Fn(_, sig, generics, body) => {\n+            AssocItemKind::Fn(box FnKind(_, sig, generics, body)) => {\n                 self.current_item = Some(i.span);\n                 let asyncness = sig.header.asyncness;\n                 let body_id =\n@@ -887,7 +895,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                 (generics, hir::ImplItemKind::Fn(sig, body_id))\n             }\n-            AssocItemKind::TyAlias(_, generics, _, ty) => {\n+            AssocItemKind::TyAlias(box TyAliasKind(_, generics, _, ty)) => {\n                 let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n                 let kind = match ty {\n                     None => {\n@@ -938,7 +946,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             kind: match &i.kind {\n                 AssocItemKind::Const(..) => hir::AssocItemKind::Const,\n                 AssocItemKind::TyAlias(..) => hir::AssocItemKind::Type,\n-                AssocItemKind::Fn(_, sig, ..) => {\n+                AssocItemKind::Fn(box FnKind(_, sig, ..)) => {\n                     hir::AssocItemKind::Fn { has_self: sig.decl.has_self() }\n                 }\n                 AssocItemKind::MacCall(..) => unimplemented!(),"}, {"sha": "1c82ff00e0f4f00a0d06ca5e0871442e74c2a134", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -32,6 +32,7 @@\n \n #![feature(crate_visibility_modifier)]\n #![feature(or_patterns)]\n+#![feature(box_patterns)]\n #![recursion_limit = \"256\"]\n \n use rustc_ast::node_id::NodeMap;\n@@ -500,8 +501,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     ItemKind::Struct(_, ref generics)\n                     | ItemKind::Union(_, ref generics)\n                     | ItemKind::Enum(_, ref generics)\n-                    | ItemKind::TyAlias(_, ref generics, ..)\n-                    | ItemKind::Trait(_, _, ref generics, ..) => {\n+                    | ItemKind::TyAlias(box TyAliasKind(_, ref generics, ..))\n+                    | ItemKind::Trait(box TraitKind(_, _, ref generics, ..)) => {\n                         let def_id = self.lctx.resolver.local_def_id(item.id);\n                         let count = generics\n                             .params"}, {"sha": "8defd91c688d7b241b215784073dfd24b77bf682", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -920,7 +920,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         }\n \n         match item.kind {\n-            ItemKind::Impl {\n+            ItemKind::Impl(box ImplKind {\n                 unsafety,\n                 polarity,\n                 defaultness: _,\n@@ -929,7 +929,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 of_trait: Some(ref t),\n                 ref self_ty,\n                 items: _,\n-            } => {\n+            }) => {\n                 self.with_in_trait_impl(true, |this| {\n                     this.invalid_visibility(&item.vis, None);\n                     if let TyKind::Err = self_ty.kind {\n@@ -957,7 +957,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 });\n                 return; // Avoid visiting again.\n             }\n-            ItemKind::Impl {\n+            ItemKind::Impl(box ImplKind {\n                 unsafety,\n                 polarity,\n                 defaultness,\n@@ -966,7 +966,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 of_trait: None,\n                 ref self_ty,\n                 items: _,\n-            } => {\n+            }) => {\n                 let error = |annotation_span, annotation| {\n                     let mut err = self.err_handler().struct_span_err(\n                         self_ty.span,\n@@ -998,7 +998,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         .emit();\n                 }\n             }\n-            ItemKind::Fn(def, _, _, ref body) => {\n+            ItemKind::Fn(box FnKind(def, _, _, ref body)) => {\n                 self.check_defaultness(item.span, def);\n \n                 if body.is_none() {\n@@ -1027,7 +1027,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     }\n                 }\n             }\n-            ItemKind::Trait(is_auto, _, ref generics, ref bounds, ref trait_items) => {\n+            ItemKind::Trait(box TraitKind(\n+                is_auto,\n+                _,\n+                ref generics,\n+                ref bounds,\n+                ref trait_items,\n+            )) => {\n                 if is_auto == IsAuto::Yes {\n                     // Auto traits cannot have generics, super traits nor contain items.\n                     self.deny_generic_params(generics, item.ident.span);\n@@ -1075,7 +1081,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 let msg = \"free static item without body\";\n                 self.error_item_without_body(item.span, \"static\", msg, \" = <expr>;\");\n             }\n-            ItemKind::TyAlias(def, _, ref bounds, ref body) => {\n+            ItemKind::TyAlias(box TyAliasKind(def, _, ref bounds, ref body)) => {\n                 self.check_defaultness(item.span, def);\n                 if body.is_none() {\n                     let msg = \"free type alias without body\";\n@@ -1091,12 +1097,12 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n     fn visit_foreign_item(&mut self, fi: &'a ForeignItem) {\n         match &fi.kind {\n-            ForeignItemKind::Fn(def, sig, _, body) => {\n+            ForeignItemKind::Fn(box FnKind(def, sig, _, body)) => {\n                 self.check_defaultness(fi.span, *def);\n                 self.check_foreign_fn_bodyless(fi.ident, body.as_deref());\n                 self.check_foreign_fn_headerless(fi.ident, fi.span, sig.header);\n             }\n-            ForeignItemKind::TyAlias(def, generics, bounds, body) => {\n+            ForeignItemKind::TyAlias(box TyAliasKind(def, generics, bounds, body)) => {\n                 self.check_defaultness(fi.span, *def);\n                 self.check_foreign_kind_bodyless(fi.ident, \"type\", body.as_ref().map(|b| b.span));\n                 self.check_type_no_bounds(bounds, \"`extern` blocks\");\n@@ -1336,10 +1342,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 AssocItemKind::Const(_, _, body) => {\n                     self.check_impl_item_provided(item.span, body, \"constant\", \" = <expr>;\");\n                 }\n-                AssocItemKind::Fn(_, _, _, body) => {\n+                AssocItemKind::Fn(box FnKind(_, _, _, body)) => {\n                     self.check_impl_item_provided(item.span, body, \"function\", \" { <body> }\");\n                 }\n-                AssocItemKind::TyAlias(_, _, bounds, body) => {\n+                AssocItemKind::TyAlias(box TyAliasKind(_, _, bounds, body)) => {\n                     self.check_impl_item_provided(item.span, body, \"type\", \" = <type>;\");\n                     self.check_type_no_bounds(bounds, \"`impl`s\");\n                 }\n@@ -1349,7 +1355,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n         if ctxt == AssocCtxt::Trait || self.in_trait_impl {\n             self.invalid_visibility(&item.vis, None);\n-            if let AssocItemKind::Fn(_, sig, _, _) = &item.kind {\n+            if let AssocItemKind::Fn(box FnKind(_, sig, _, _)) = &item.kind {\n                 self.check_trait_fn_not_const(sig.header.constness);\n                 self.check_trait_fn_not_async(item.span, sig.header.asyncness);\n             }"}, {"sha": "dd4001b2013a96051afa3360b81dbfe31f46b80d", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -365,7 +365,9 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 }\n             }\n \n-            ast::ItemKind::Impl { polarity, defaultness, ref of_trait, .. } => {\n+            ast::ItemKind::Impl(box ast::ImplKind {\n+                polarity, defaultness, ref of_trait, ..\n+            }) => {\n                 if let ast::ImplPolarity::Negative(span) = polarity {\n                     gate_feature_post!(\n                         &self,\n@@ -381,7 +383,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 }\n             }\n \n-            ast::ItemKind::Trait(ast::IsAuto::Yes, ..) => {\n+            ast::ItemKind::Trait(box ast::TraitKind(ast::IsAuto::Yes, ..)) => {\n                 gate_feature_post!(\n                     &self,\n                     auto_traits,\n@@ -399,7 +401,9 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, decl_macro, i.span, msg);\n             }\n \n-            ast::ItemKind::TyAlias(_, _, _, Some(ref ty)) => self.check_impl_trait(&ty),\n+            ast::ItemKind::TyAlias(box ast::TyAliasKind(_, _, _, Some(ref ty))) => {\n+                self.check_impl_trait(&ty)\n+            }\n \n             _ => {}\n         }\n@@ -555,13 +559,13 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n     fn visit_assoc_item(&mut self, i: &'a ast::AssocItem, ctxt: AssocCtxt) {\n         let is_fn = match i.kind {\n-            ast::AssocItemKind::Fn(_, ref sig, _, _) => {\n+            ast::AssocItemKind::Fn(box ast::FnKind(_, ref sig, _, _)) => {\n                 if let (ast::Const::Yes(_), AssocCtxt::Trait) = (sig.header.constness, ctxt) {\n                     gate_feature_post!(&self, const_fn, i.span, \"const fn is unstable\");\n                 }\n                 true\n             }\n-            ast::AssocItemKind::TyAlias(_, ref generics, _, ref ty) => {\n+            ast::AssocItemKind::TyAlias(box ast::TyAliasKind(_, ref generics, _, ref ty)) => {\n                 if let (Some(_), AssocCtxt::Trait) = (ty, ctxt) {\n                     gate_feature_post!(\n                         &self,"}, {"sha": "c9e2d202da97c426f9852943b7b8f696e57fbdfc", "filename": "compiler/rustc_ast_passes/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -6,6 +6,8 @@\n \n #![feature(bindings_after_at)]\n #![feature(iter_is_partitioned)]\n+#![feature(box_syntax)]\n+#![feature(box_patterns)]\n #![recursion_limit = \"256\"]\n \n pub mod ast_validation;"}, {"sha": "2971fa435c8dce47ed19909012968a019d2b6657", "filename": "compiler/rustc_ast_passes/src/node_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -68,7 +68,7 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_generics(self, g)\n     }\n-    fn visit_fn(&mut self, fk: FnKind<'_>, s: Span, _: NodeId) {\n+    fn visit_fn(&mut self, fk: visit::FnKind<'_>, s: Span, _: NodeId) {\n         self.count += 1;\n         walk_fn(self, fk, s)\n     }"}, {"sha": "d869baad012ed2d42ad51dc384e34e330dbed4b4", "filename": "compiler/rustc_ast_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Flib.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -1,6 +1,7 @@\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(or_patterns)]\n+#![feature(box_patterns)]\n #![recursion_limit = \"256\"]\n \n mod helpers;"}, {"sha": "7f4775bf41a527d45c0b0525d9522d3a90d8791a", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -1022,14 +1022,14 @@ impl<'a> State<'a> {\n         self.maybe_print_comment(span.lo());\n         self.print_outer_attributes(attrs);\n         match kind {\n-            ast::ForeignItemKind::Fn(def, sig, gen, body) => {\n+            ast::ForeignItemKind::Fn(box ast::FnKind(def, sig, gen, body)) => {\n                 self.print_fn_full(sig, ident, gen, vis, *def, body.as_deref(), attrs);\n             }\n             ast::ForeignItemKind::Static(ty, mutbl, body) => {\n                 let def = ast::Defaultness::Final;\n                 self.print_item_const(ident, Some(*mutbl), ty, body.as_deref(), vis, def);\n             }\n-            ast::ForeignItemKind::TyAlias(def, generics, bounds, ty) => {\n+            ast::ForeignItemKind::TyAlias(box ast::TyAliasKind(def, generics, bounds, ty)) => {\n                 self.print_associated_type(ident, generics, bounds, ty.as_deref(), vis, *def);\n             }\n             ast::ForeignItemKind::MacCall(m) => {\n@@ -1134,7 +1134,7 @@ impl<'a> State<'a> {\n             ast::ItemKind::Const(def, ref ty, ref body) => {\n                 self.print_item_const(item.ident, None, ty, body.as_deref(), &item.vis, def);\n             }\n-            ast::ItemKind::Fn(def, ref sig, ref gen, ref body) => {\n+            ast::ItemKind::Fn(box ast::FnKind(def, ref sig, ref gen, ref body)) => {\n                 let body = body.as_deref();\n                 self.print_fn_full(sig, item.ident, gen, &item.vis, def, body, &item.attrs);\n             }\n@@ -1175,7 +1175,7 @@ impl<'a> State<'a> {\n                 self.s.word(ga.asm.to_string());\n                 self.end();\n             }\n-            ast::ItemKind::TyAlias(def, ref generics, ref bounds, ref ty) => {\n+            ast::ItemKind::TyAlias(box ast::TyAliasKind(def, ref generics, ref bounds, ref ty)) => {\n                 let ty = ty.as_deref();\n                 self.print_associated_type(item.ident, generics, bounds, ty, &item.vis, def);\n             }\n@@ -1190,7 +1190,7 @@ impl<'a> State<'a> {\n                 self.head(visibility_qualified(&item.vis, \"union\"));\n                 self.print_struct(struct_def, generics, item.ident, item.span, true);\n             }\n-            ast::ItemKind::Impl {\n+            ast::ItemKind::Impl(box ast::ImplKind {\n                 unsafety,\n                 polarity,\n                 defaultness,\n@@ -1199,7 +1199,7 @@ impl<'a> State<'a> {\n                 ref of_trait,\n                 ref self_ty,\n                 ref items,\n-            } => {\n+            }) => {\n                 self.head(\"\");\n                 self.print_visibility(&item.vis);\n                 self.print_defaultness(defaultness);\n@@ -1233,7 +1233,13 @@ impl<'a> State<'a> {\n                 }\n                 self.bclose(item.span);\n             }\n-            ast::ItemKind::Trait(is_auto, unsafety, ref generics, ref bounds, ref trait_items) => {\n+            ast::ItemKind::Trait(box ast::TraitKind(\n+                is_auto,\n+                unsafety,\n+                ref generics,\n+                ref bounds,\n+                ref trait_items,\n+            )) => {\n                 self.head(\"\");\n                 self.print_visibility(&item.vis);\n                 self.print_unsafety(unsafety);\n@@ -1453,13 +1459,13 @@ impl<'a> State<'a> {\n         self.maybe_print_comment(span.lo());\n         self.print_outer_attributes(attrs);\n         match kind {\n-            ast::AssocItemKind::Fn(def, sig, gen, body) => {\n+            ast::AssocItemKind::Fn(box ast::FnKind(def, sig, gen, body)) => {\n                 self.print_fn_full(sig, ident, gen, vis, *def, body.as_deref(), attrs);\n             }\n             ast::AssocItemKind::Const(def, ty, body) => {\n                 self.print_item_const(ident, None, ty, body.as_deref(), vis, *def);\n             }\n-            ast::AssocItemKind::TyAlias(def, generics, bounds, ty) => {\n+            ast::AssocItemKind::TyAlias(box ast::TyAliasKind(def, generics, bounds, ty)) => {\n                 self.print_associated_type(ident, generics, bounds, ty.as_deref(), vis, *def);\n             }\n             ast::AssocItemKind::MacCall(m) => {"}, {"sha": "3ca22e41bc3aae8b384ddb6649dd9a9e152af46c", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -527,12 +527,12 @@ impl<'a> TraitDef<'a> {\n                     tokens: None,\n                 },\n                 attrs: Vec::new(),\n-                kind: ast::AssocItemKind::TyAlias(\n+                kind: ast::AssocItemKind::TyAlias(box ast::TyAliasKind(\n                     ast::Defaultness::Final,\n                     Generics::default(),\n                     Vec::new(),\n                     Some(type_def.to_ty(cx, self.span, type_ident, generics)),\n-                ),\n+                )),\n                 tokens: None,\n             })\n         });\n@@ -687,7 +687,7 @@ impl<'a> TraitDef<'a> {\n             self.span,\n             Ident::invalid(),\n             a,\n-            ast::ItemKind::Impl {\n+            ast::ItemKind::Impl(box ast::ImplKind {\n                 unsafety,\n                 polarity: ast::ImplPolarity::Positive,\n                 defaultness: ast::Defaultness::Final,\n@@ -696,7 +696,7 @@ impl<'a> TraitDef<'a> {\n                 of_trait: opt_trait_ref,\n                 self_ty: self_type,\n                 items: methods.into_iter().chain(associated_types).collect(),\n-            },\n+            }),\n         )\n     }\n \n@@ -929,7 +929,7 @@ impl<'a> MethodDef<'a> {\n                 tokens: None,\n             },\n             ident: method_ident,\n-            kind: ast::AssocItemKind::Fn(def, sig, fn_generics, Some(body_block)),\n+            kind: ast::AssocItemKind::Fn(box ast::FnKind(def, sig, fn_generics, Some(body_block))),\n             tokens: None,\n         })\n     }"}, {"sha": "7dea6099f8f1b6df64775035eb74e47f8e610f10", "filename": "compiler/rustc_builtin_macros/src/deriving/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -2,7 +2,7 @@\n \n use rustc_ast as ast;\n use rustc_ast::ptr::P;\n-use rustc_ast::{ItemKind, MetaItem};\n+use rustc_ast::{ImplKind, ItemKind, MetaItem};\n use rustc_expand::base::{Annotatable, ExpandResult, ExtCtxt, MultiItemModifier};\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::Span;\n@@ -179,7 +179,7 @@ fn inject_impl_of_structural_trait(\n         span,\n         Ident::invalid(),\n         attrs,\n-        ItemKind::Impl {\n+        ItemKind::Impl(box ImplKind {\n             unsafety: ast::Unsafe::No,\n             polarity: ast::ImplPolarity::Positive,\n             defaultness: ast::Defaultness::Final,\n@@ -188,7 +188,7 @@ fn inject_impl_of_structural_trait(\n             of_trait: Some(trait_ref),\n             self_ty: self_type,\n             items: Vec::new(),\n-        },\n+        }),\n     );\n \n     push(Annotatable::Item(newitem));"}, {"sha": "9b43c11f0f3d364a02252fcdf0064d2701666889", "filename": "compiler/rustc_builtin_macros/src/global_allocator.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::expand::allocator::{\n };\n use rustc_ast::ptr::P;\n use rustc_ast::{self as ast, Attribute, Expr, FnHeader, FnSig, Generics, Param, StmtKind};\n-use rustc_ast::{ItemKind, Mutability, Stmt, Ty, TyKind, Unsafe};\n+use rustc_ast::{FnKind, ItemKind, Mutability, Stmt, Ty, TyKind, Unsafe};\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n@@ -85,7 +85,8 @@ impl AllocFnFactory<'_, '_> {\n         let header = FnHeader { unsafety: Unsafe::Yes(self.span), ..FnHeader::default() };\n         let sig = FnSig { decl, header, span: self.span };\n         let block = Some(self.cx.block_expr(output_expr));\n-        let kind = ItemKind::Fn(ast::Defaultness::Final, sig, Generics::default(), block);\n+        let kind =\n+            ItemKind::Fn(box FnKind(ast::Defaultness::Final, sig, Generics::default(), block));\n         let item = self.cx.item(\n             self.span,\n             Ident::from_str_and_span(&self.kind.fn_name(method.name), self.span),"}, {"sha": "b07a2e99cf9cb6cf8cb5cd3971b602b29e6017e2", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -2,6 +2,8 @@\n //! injecting code into the crate before it is lowered to HIR.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(box_patterns)]\n+#![feature(box_syntax)]\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]"}, {"sha": "e845f9ec55ad58ea20191f90de89c81ed11554bd", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -425,7 +425,7 @@ fn test_type(cx: &ExtCtxt<'_>) -> TestType {\n fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n     let has_should_panic_attr = cx.sess.contains_name(&i.attrs, sym::should_panic);\n     let sd = &cx.sess.parse_sess.span_diagnostic;\n-    if let ast::ItemKind::Fn(_, ref sig, ref generics, _) = i.kind {\n+    if let ast::ItemKind::Fn(box ast::FnKind(_, ref sig, ref generics, _)) = i.kind {\n         if let ast::Unsafe::Yes(span) = sig.header.unsafety {\n             sd.struct_span_err(i.span, \"unsafe functions cannot be used for tests\")\n                 .span_label(span, \"`unsafe` because of this\")\n@@ -474,7 +474,7 @@ fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n }\n \n fn has_bench_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n-    let has_sig = if let ast::ItemKind::Fn(_, ref sig, _, _) = i.kind {\n+    let has_sig = if let ast::ItemKind::Fn(box ast::FnKind(_, ref sig, _, _)) = i.kind {\n         // N.B., inadequate check, but we're running\n         // well before resolve, can't get too deep.\n         sig.decl.inputs.len() == 1"}, {"sha": "4ac22be3c275d508077f12dbe7620dd5b60b34c3", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -311,7 +311,8 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n     let decl = ecx.fn_decl(vec![], ast::FnRetTy::Ty(main_ret_ty));\n     let sig = ast::FnSig { decl, header: ast::FnHeader::default(), span: sp };\n     let def = ast::Defaultness::Final;\n-    let main = ast::ItemKind::Fn(def, sig, ast::Generics::default(), Some(main_body));\n+    let main =\n+        ast::ItemKind::Fn(box ast::FnKind(def, sig, ast::Generics::default(), Some(main_body)));\n \n     // Honor the reexport_test_harness_main attribute\n     let main_id = match cx.reexport_test_harness_main {"}, {"sha": "f2b69da3f86b18d3745ddb5bccb6c40777524ca4", "filename": "compiler/rustc_interface/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Flib.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -1,4 +1,5 @@\n #![feature(bool_to_option)]\n+#![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(internal_output_capture)]\n #![feature(nll)]"}, {"sha": "b7dc539c6d606b562b325e97df0df256b509a5f9", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -759,7 +759,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n     fn visit_item_kind(&mut self, i: &mut ast::ItemKind) {\n         let is_const = match i {\n             ast::ItemKind::Static(..) | ast::ItemKind::Const(..) => true,\n-            ast::ItemKind::Fn(_, ref sig, _, _) => Self::is_sig_const(sig),\n+            ast::ItemKind::Fn(box ast::FnKind(_, ref sig, _, _)) => Self::is_sig_const(sig),\n             _ => false,\n         };\n         self.run(is_const, |s| noop_visit_item_kind(i, s))\n@@ -768,7 +768,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n     fn flat_map_trait_item(&mut self, i: P<ast::AssocItem>) -> SmallVec<[P<ast::AssocItem>; 1]> {\n         let is_const = match i.kind {\n             ast::AssocItemKind::Const(..) => true,\n-            ast::AssocItemKind::Fn(_, ref sig, _, _) => Self::is_sig_const(sig),\n+            ast::AssocItemKind::Fn(box ast::FnKind(_, ref sig, _, _)) => Self::is_sig_const(sig),\n             _ => false,\n         };\n         self.run(is_const, |s| noop_flat_map_assoc_item(i, s))"}, {"sha": "2cedef62519dcc8e4b781e33dacd7aca24ef4d8e", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -357,17 +357,15 @@ impl EarlyLintPass for UnsafeCode {\n \n     fn check_item(&mut self, cx: &EarlyContext<'_>, it: &ast::Item) {\n         match it.kind {\n-            ast::ItemKind::Trait(_, ast::Unsafe::Yes(_), ..) => {\n-                self.report_unsafe(cx, it.span, |lint| {\n+            ast::ItemKind::Trait(box ast::TraitKind(_, ast::Unsafe::Yes(_), ..)) => self\n+                .report_unsafe(cx, it.span, |lint| {\n                     lint.build(\"declaration of an `unsafe` trait\").emit()\n-                })\n-            }\n+                }),\n \n-            ast::ItemKind::Impl { unsafety: ast::Unsafe::Yes(_), .. } => {\n-                self.report_unsafe(cx, it.span, |lint| {\n+            ast::ItemKind::Impl(box ast::ImplKind { unsafety: ast::Unsafe::Yes(_), .. }) => self\n+                .report_unsafe(cx, it.span, |lint| {\n                     lint.build(\"implementation of an `unsafe` trait\").emit()\n-                })\n-            }\n+                }),\n \n             _ => {}\n         }\n@@ -872,7 +870,7 @@ declare_lint_pass!(\n \n impl EarlyLintPass for AnonymousParameters {\n     fn check_trait_item(&mut self, cx: &EarlyContext<'_>, it: &ast::AssocItem) {\n-        if let ast::AssocItemKind::Fn(_, ref sig, _, _) = it.kind {\n+        if let ast::AssocItemKind::Fn(box FnKind(_, ref sig, _, _)) = it.kind {\n             for arg in sig.decl.inputs.iter() {\n                 if let ast::PatKind::Ident(_, ident, None) = arg.pat.kind {\n                     if ident.name == kw::Empty {"}, {"sha": "26e536e8f1ddb936c3a6bd7855360e0eaf8c2080", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -2,7 +2,7 @@\n //! Clippy.\n \n use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n-use rustc_ast::{Item, ItemKind};\n+use rustc_ast::{ImplKind, Item, ItemKind};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n@@ -243,7 +243,7 @@ declare_lint_pass!(LintPassImpl => [LINT_PASS_IMPL_WITHOUT_MACRO]);\n \n impl EarlyLintPass for LintPassImpl {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n-        if let ItemKind::Impl { of_trait: Some(lint_pass), .. } = &item.kind {\n+        if let ItemKind::Impl(box ImplKind { of_trait: Some(lint_pass), .. }) = &item.kind {\n             if let Some(last) = lint_pass.path.segments.last() {\n                 if last.ident.name == sym::LintPass {\n                     let expn_data = lint_pass.path.span.ctxt().outer_expn_data();"}, {"sha": "6f44436e2a010dc7ca3ee87a9d0b234932e87afa", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -30,6 +30,7 @@\n #![feature(array_windows)]\n #![feature(bool_to_option)]\n #![feature(box_syntax)]\n+#![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n #![feature(iter_order_by)]\n #![feature(never_type)]"}, {"sha": "f155f3a94e56fafc51f7d4a170247a0d830a8fcb", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -4,6 +4,8 @@\n #![feature(bindings_after_at)]\n #![feature(iter_order_by)]\n #![feature(or_patterns)]\n+#![feature(box_syntax)]\n+#![feature(box_patterns)]\n \n use rustc_ast as ast;\n use rustc_ast::attr::HasAttrs;"}, {"sha": "c44ccfadda52d7d150f577e406703e105d217559", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -4,11 +4,11 @@ use super::{FollowedByType, ForceCollect, Parser, PathStyle, TrailingToken};\n \n use crate::{maybe_collect_tokens, maybe_whole};\n \n+use rustc_ast::ast::*;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, TokenKind};\n use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree};\n use rustc_ast::{self as ast, AttrVec, Attribute, DUMMY_NODE_ID};\n-use rustc_ast::{AssocItem, AssocItemKind, ForeignItemKind, Item, ItemKind, Mod};\n use rustc_ast::{Async, Const, Defaultness, IsAuto, Mutability, Unsafe, UseTree, UseTreeKind};\n use rustc_ast::{BindingMode, Block, FnDecl, FnSig, Param, SelfKind};\n use rustc_ast::{EnumDef, Generics, StructField, TraitRef, Ty, TyKind, Variant, VariantData};\n@@ -229,7 +229,7 @@ impl<'a> Parser<'a> {\n         } else if self.check_fn_front_matter() {\n             // FUNCTION ITEM\n             let (ident, sig, generics, body) = self.parse_fn(attrs, req_name, lo)?;\n-            (ident, ItemKind::Fn(def(), sig, generics, body))\n+            (ident, ItemKind::Fn(box FnKind(def(), sig, generics, body)))\n         } else if self.eat_keyword(kw::Extern) {\n             if self.eat_keyword(kw::Crate) {\n                 // EXTERN CRATE\n@@ -556,7 +556,7 @@ impl<'a> Parser<'a> {\n                 };\n                 let trait_ref = TraitRef { path, ref_id: ty_first.id };\n \n-                ItemKind::Impl {\n+                ItemKind::Impl(box ImplKind {\n                     unsafety,\n                     polarity,\n                     defaultness,\n@@ -565,11 +565,11 @@ impl<'a> Parser<'a> {\n                     of_trait: Some(trait_ref),\n                     self_ty: ty_second,\n                     items: impl_items,\n-                }\n+                })\n             }\n             None => {\n                 // impl Type\n-                ItemKind::Impl {\n+                ItemKind::Impl(box ImplKind {\n                     unsafety,\n                     polarity,\n                     defaultness,\n@@ -578,7 +578,7 @@ impl<'a> Parser<'a> {\n                     of_trait: None,\n                     self_ty: ty_first,\n                     items: impl_items,\n-                }\n+                })\n             }\n         };\n \n@@ -718,7 +718,7 @@ impl<'a> Parser<'a> {\n             // It's a normal trait.\n             tps.where_clause = self.parse_where_clause()?;\n             let items = self.parse_item_list(attrs, |p| p.parse_trait_item())?;\n-            Ok((ident, ItemKind::Trait(is_auto, unsafety, tps, bounds, items)))\n+            Ok((ident, ItemKind::Trait(box TraitKind(is_auto, unsafety, tps, bounds, items))))\n         }\n     }\n \n@@ -767,7 +767,7 @@ impl<'a> Parser<'a> {\n         let default = if self.eat(&token::Eq) { Some(self.parse_ty()?) } else { None };\n         self.expect_semi()?;\n \n-        Ok((ident, ItemKind::TyAlias(def, generics, bounds, default)))\n+        Ok((ident, ItemKind::TyAlias(box TyAliasKind(def, generics, bounds, default))))\n     }\n \n     /// Parses a `UseTree`.\n@@ -1013,7 +1013,9 @@ impl<'a> Parser<'a> {\n         let mut impl_info = self.parse_item_impl(attrs, defaultness)?;\n         match impl_info.1 {\n             // only try to recover if this is implementing a trait for a type\n-            ItemKind::Impl { of_trait: Some(ref trai), ref mut constness, .. } => {\n+            ItemKind::Impl(box ImplKind {\n+                of_trait: Some(ref trai), ref mut constness, ..\n+            }) => {\n                 *constness = Const::Yes(const_span);\n \n                 let before_trait = trai.path.span.shrink_to_lo();"}, {"sha": "c4ee4df212863089e354fcdcbdb31268ebf3d35c", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -16,8 +16,8 @@ use crate::{\n use crate::{Module, ModuleData, ModuleKind, NameBinding, NameBindingKind, Segment, ToNameBinding};\n \n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n-use rustc_ast::{self as ast, Block, ForeignItem, ForeignItemKind, Item, ItemKind, NodeId};\n-use rustc_ast::{AssocItem, AssocItemKind, MetaItemKind, StmtKind};\n+use rustc_ast::{self as ast, AssocItem, AssocItemKind, MetaItemKind, StmtKind};\n+use rustc_ast::{Block, FnKind, ForeignItem, ForeignItemKind, ImplKind, Item, ItemKind, NodeId};\n use rustc_ast_lowering::ResolverAstLowering;\n use rustc_attr as attr;\n use rustc_data_structures::sync::Lrc;\n@@ -887,7 +887,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }\n \n             // These items do not add names to modules.\n-            ItemKind::Impl { of_trait: Some(..), .. } => {\n+            ItemKind::Impl(box ImplKind { of_trait: Some(..), .. }) => {\n                 self.r.trait_impl_items.insert(local_def_id);\n             }\n             ItemKind::Impl { .. } | ItemKind::ForeignMod(..) | ItemKind::GlobalAsm(..) => {}\n@@ -1371,7 +1371,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n             AssocCtxt::Trait => {\n                 let (def_kind, ns) = match item.kind {\n                     AssocItemKind::Const(..) => (DefKind::AssocConst, ValueNS),\n-                    AssocItemKind::Fn(_, ref sig, _, _) => {\n+                    AssocItemKind::Fn(box FnKind(_, ref sig, _, _)) => {\n                         if sig.decl.has_self() {\n                             self.r.has_self.insert(def_id);\n                         }"}, {"sha": "9b5b793363b5ba7564be0b54108654f0920db67d", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -493,8 +493,8 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n     }\n     fn visit_foreign_item(&mut self, foreign_item: &'ast ForeignItem) {\n         match foreign_item.kind {\n-            ForeignItemKind::Fn(_, _, ref generics, _)\n-            | ForeignItemKind::TyAlias(_, ref generics, ..) => {\n+            ForeignItemKind::Fn(box FnKind(_, _, ref generics, _))\n+            | ForeignItemKind::TyAlias(box TyAliasKind(_, ref generics, ..)) => {\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n                     visit::walk_foreign_item(this, foreign_item);\n                 });\n@@ -938,7 +938,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         debug!(\"(resolving item) resolving {} ({:?})\", name, item.kind);\n \n         match item.kind {\n-            ItemKind::TyAlias(_, ref generics, _, _) | ItemKind::Fn(_, _, ref generics, _) => {\n+            ItemKind::TyAlias(box TyAliasKind(_, ref generics, _, _))\n+            | ItemKind::Fn(box FnKind(_, _, ref generics, _)) => {\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n                     visit::walk_item(this, item)\n                 });\n@@ -950,17 +951,17 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 self.resolve_adt(item, generics);\n             }\n \n-            ItemKind::Impl {\n+            ItemKind::Impl(box ImplKind {\n                 ref generics,\n                 ref of_trait,\n                 ref self_ty,\n                 items: ref impl_items,\n                 ..\n-            } => {\n+            }) => {\n                 self.resolve_implementation(generics, of_trait, &self_ty, item.id, impl_items);\n             }\n \n-            ItemKind::Trait(.., ref generics, ref bounds, ref trait_items) => {\n+            ItemKind::Trait(box TraitKind(.., ref generics, ref bounds, ref trait_items)) => {\n                 // Create a new rib for the trait-wide type parameters.\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n                     let local_def_id = this.r.local_def_id(item.id).to_def_id();\n@@ -995,10 +996,10 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                             );\n                                         }\n                                     }\n-                                    AssocItemKind::Fn(_, _, generics, _) => {\n+                                    AssocItemKind::Fn(box FnKind(_, _, generics, _)) => {\n                                         walk_assoc_item(this, generics, item);\n                                     }\n-                                    AssocItemKind::TyAlias(_, generics, _, _) => {\n+                                    AssocItemKind::TyAlias(box TyAliasKind(_, generics, _, _)) => {\n                                         walk_assoc_item(this, generics, item);\n                                     }\n                                     AssocItemKind::MacCall(_) => {\n@@ -1306,7 +1307,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                 },\n                                             );\n                                         }\n-                                        AssocItemKind::Fn(_, _, generics, _) => {\n+                                        AssocItemKind::Fn(box FnKind(.., generics, _)) => {\n                                             // We also need a new scope for the impl item type parameters.\n                                             this.with_generic_param_rib(\n                                                 generics,\n@@ -1329,7 +1330,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                 },\n                                             );\n                                         }\n-                                        AssocItemKind::TyAlias(_, generics, _, _) => {\n+                                        AssocItemKind::TyAlias(box TyAliasKind(\n+                                            _,\n+                                            generics,\n+                                            _,\n+                                            _,\n+                                        )) => {\n                                             // We also need a new scope for the impl item type parameters.\n                                             this.with_generic_param_rib(\n                                                 generics,"}, {"sha": "52339d723ea9cbaf1d82003b56fcb910c1f30add", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -1109,7 +1109,9 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 if assoc_item.ident == ident {\n                     return Some(match &assoc_item.kind {\n                         ast::AssocItemKind::Const(..) => AssocSuggestion::AssocConst,\n-                        ast::AssocItemKind::Fn(_, sig, ..) if sig.decl.has_self() => {\n+                        ast::AssocItemKind::Fn(box ast::FnKind(_, sig, ..))\n+                            if sig.decl.has_self() =>\n+                        {\n                             AssocSuggestion::MethodWithSelf\n                         }\n                         ast::AssocItemKind::Fn(..) => AssocSuggestion::AssocFn,"}, {"sha": "b19990e49b84ff8faab5c1708b53d98ffd9136dc", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -9,6 +9,7 @@\n //! Type-relative name resolution (methods, fields, associated items) happens in `librustc_typeck`.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(box_patterns)]\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(format_args_capture)]"}, {"sha": "fa0289c977c7253ab2ed3bfa9dd579fed7b261d2", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{implements_trait, is_entrypoint_fn, is_type_diagnostic_item, return_ty, span_lint};\n use if_chain::if_chain;\n use itertools::Itertools;\n-use rustc_ast::ast::{Async, AttrKind, Attribute, FnRetTy, ItemKind};\n+use rustc_ast::ast::{Async, AttrKind, Attribute, FnKind, FnRetTy, ItemKind};\n use rustc_ast::token::CommentKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n@@ -492,7 +492,9 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                             | ItemKind::ExternCrate(..)\n                             | ItemKind::ForeignMod(..) => return false,\n                             // We found a main function ...\n-                            ItemKind::Fn(_, sig, _, Some(block)) if item.ident.name == sym::main => {\n+                            ItemKind::Fn(box FnKind(_, sig, _, Some(block)))\n+                                if item.ident.name == sym::main =>\n+                            {\n                                 let is_async = matches!(sig.header.asyncness, Async::Yes { .. });\n                                 let returns_nothing = match &sig.decl.output {\n                                     FnRetTy::Default(..) => true,"}, {"sha": "fecde8e2743483d16b51c4a6295192ff1a8bdc6f", "filename": "src/tools/clippy/clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -1,5 +1,7 @@\n use crate::utils::{attr_by_name, in_macro, match_path_ast, span_lint_and_help};\n-use rustc_ast::ast::{AssocItemKind, Extern, FnSig, Item, ItemKind, Ty, TyKind};\n+use rustc_ast::ast::{\n+    AssocItemKind, Extern, FnKind, FnSig, ImplKind, Item, ItemKind, TraitKind, Ty, TyKind,\n+};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n@@ -158,18 +160,16 @@ impl EarlyLintPass for ExcessiveBools {\n                         \"consider using a state machine or refactoring bools into two-variant enums\",\n                     );\n                 }\n-            },\n-            ItemKind::Impl {\n-                of_trait: None, items, ..\n             }\n-            | ItemKind::Trait(_, _, _, _, items) => {\n+            ItemKind::Impl(box ImplKind { of_trait: None, items, .. })\n+            | ItemKind::Trait(box TraitKind(.., items)) => {\n                 for item in items {\n-                    if let AssocItemKind::Fn(_, fn_sig, _, _) = &item.kind {\n+                    if let AssocItemKind::Fn(box FnKind(_, fn_sig, _, _)) = &item.kind {\n                         self.check_fn_sig(cx, fn_sig, item.span);\n                     }\n                 }\n-            },\n-            ItemKind::Fn(_, fn_sig, _, _) => self.check_fn_sig(cx, fn_sig, item.span),\n+            }\n+            ItemKind::Fn(box FnKind(_, fn_sig, _, _)) => self.check_fn_sig(cx, fn_sig, item.span),\n             _ => (),\n         }\n     }"}, {"sha": "d5222a030d7afbb495da5f060b9b44d7313f6255", "filename": "src/tools/clippy/clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -1,5 +1,8 @@\n use crate::utils::{span_lint, span_lint_and_then};\n-use rustc_ast::ast::{Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, Item, ItemKind, Local, Pat, PatKind};\n+use rustc_ast::ast::{\n+    Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, FnKind, Item, ItemKind, Local, Pat,\n+    PatKind,\n+};\n use rustc_ast::visit::{walk_block, walk_expr, walk_pat, Visitor};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_middle::lint::in_external_macro;\n@@ -364,7 +367,7 @@ impl EarlyLintPass for NonExpressiveNames {\n             return;\n         }\n \n-        if let ItemKind::Fn(_, ref sig, _, Some(ref blk)) = item.kind {\n+        if let ItemKind::Fn(box FnKind(_, ref sig, _, Some(ref blk))) = item.kind {\n             do_check(self, cx, &item.attrs, &sig.decl, blk);\n         }\n     }\n@@ -374,7 +377,7 @@ impl EarlyLintPass for NonExpressiveNames {\n             return;\n         }\n \n-        if let AssocItemKind::Fn(_, ref sig, _, Some(ref blk)) = item.kind {\n+        if let AssocItemKind::Fn(box FnKind(_, ref sig, _, Some(ref blk))) = item.kind {\n             do_check(self, cx, &item.attrs, &sig.decl, blk);\n         }\n     }"}, {"sha": "69492e84e4ac58c44c79316000d830451cd37b28", "filename": "src/tools/clippy/clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 43, "deletions": 24, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -229,17 +229,26 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n     match (l, r) {\n         (ExternCrate(l), ExternCrate(r)) => l == r,\n         (Use(l), Use(r)) => eq_use_tree(l, r),\n-        (Static(lt, lm, le), Static(rt, rm, re)) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n-        (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n-        (Fn(ld, lf, lg, lb), Fn(rd, rf, rg, rb)) => {\n-            eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n-        },\n-        (Mod(l), Mod(r)) => l.inline == r.inline && over(&l.items, &r.items, |l, r| eq_item(l, r, eq_item_kind)),\n+        (Static(lt, lm, le), Static(rt, rm, re)) => {\n+            lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re)\n+        }\n+        (Const(ld, lt, le), Const(rd, rt, re)) => {\n+            eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re)\n+        }\n+        (Fn(box FnKind(ld, lf, lg, lb)), Fn(box FnKind(rd, rf, rg, rb))) => {\n+            eq_defaultness(*ld, *rd)\n+                && eq_fn_sig(lf, rf)\n+                && eq_generics(lg, rg)\n+                && both(lb, rb, |l, r| eq_block(l, r))\n+        }\n+        (Mod(l), Mod(r)) => {\n+            l.inline == r.inline && over(&l.items, &r.items, |l, r| eq_item(l, r, eq_item_kind))\n+        }\n         (ForeignMod(l), ForeignMod(r)) => {\n             both(&l.abi, &r.abi, |l, r| eq_str_lit(l, r))\n                 && over(&l.items, &r.items, |l, r| eq_item(l, r, eq_foreign_item_kind))\n-        },\n-        (TyAlias(ld, lg, lb, lt), TyAlias(rd, rg, rb, rt)) => {\n+        }\n+        (TyAlias(box TyAliasKind(ld, lg, lb, lt)), TyAlias(box TyAliasKind(rd, rg, rb, rt))) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)\n                 && over(lb, rb, |l, r| eq_generic_bound(l, r))\n@@ -250,8 +259,8 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n         },\n         (Struct(lv, lg), Struct(rv, rg)) | (Union(lv, lg), Union(rv, rg)) => {\n             eq_variant_data(lv, rv) && eq_generics(lg, rg)\n-        },\n-        (Trait(la, lu, lg, lb, li), Trait(ra, ru, rg, rb, ri)) => {\n+        }\n+        (Trait(box TraitKind(la, lu, lg, lb, li)), Trait(box TraitKind(ra, ru, rg, rb, ri))) => {\n             la == ra\n                 && matches!(lu, Unsafe::No) == matches!(ru, Unsafe::No)\n                 && eq_generics(lg, rg)\n@@ -260,7 +269,7 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n         },\n         (TraitAlias(lg, lb), TraitAlias(rg, rb)) => eq_generics(lg, rg) && over(lb, rb, |l, r| eq_generic_bound(l, r)),\n         (\n-            Impl {\n+            Impl(box ImplKind {\n                 unsafety: lu,\n                 polarity: lp,\n                 defaultness: ld,\n@@ -269,8 +278,8 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n                 of_trait: lot,\n                 self_ty: lst,\n                 items: li,\n-            },\n-            Impl {\n+            }),\n+            Impl(box ImplKind {\n                 unsafety: ru,\n                 polarity: rp,\n                 defaultness: rd,\n@@ -279,7 +288,7 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n                 of_trait: rot,\n                 self_ty: rst,\n                 items: ri,\n-            },\n+            }),\n         ) => {\n             matches!(lu, Unsafe::No) == matches!(ru, Unsafe::No)\n                 && matches!(lp, ImplPolarity::Positive) == matches!(rp, ImplPolarity::Positive)\n@@ -299,11 +308,16 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n pub fn eq_foreign_item_kind(l: &ForeignItemKind, r: &ForeignItemKind) -> bool {\n     use ForeignItemKind::*;\n     match (l, r) {\n-        (Static(lt, lm, le), Static(rt, rm, re)) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n-        (Fn(ld, lf, lg, lb), Fn(rd, rf, rg, rb)) => {\n-            eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n-        },\n-        (TyAlias(ld, lg, lb, lt), TyAlias(rd, rg, rb, rt)) => {\n+        (Static(lt, lm, le), Static(rt, rm, re)) => {\n+            lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re)\n+        }\n+        (Fn(box FnKind(ld, lf, lg, lb)), Fn(box FnKind(rd, rf, rg, rb))) => {\n+            eq_defaultness(*ld, *rd)\n+                && eq_fn_sig(lf, rf)\n+                && eq_generics(lg, rg)\n+                && both(lb, rb, |l, r| eq_block(l, r))\n+        }\n+        (TyAlias(box TyAliasKind(ld, lg, lb, lt)), TyAlias(box TyAliasKind(rd, rg, rb, rt))) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)\n                 && over(lb, rb, |l, r| eq_generic_bound(l, r))\n@@ -317,11 +331,16 @@ pub fn eq_foreign_item_kind(l: &ForeignItemKind, r: &ForeignItemKind) -> bool {\n pub fn eq_assoc_item_kind(l: &AssocItemKind, r: &AssocItemKind) -> bool {\n     use AssocItemKind::*;\n     match (l, r) {\n-        (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n-        (Fn(ld, lf, lg, lb), Fn(rd, rf, rg, rb)) => {\n-            eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n-        },\n-        (TyAlias(ld, lg, lb, lt), TyAlias(rd, rg, rb, rt)) => {\n+        (Const(ld, lt, le), Const(rd, rt, re)) => {\n+            eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re)\n+        }\n+        (Fn(box FnKind(ld, lf, lg, lb)), Fn(box FnKind(rd, rf, rg, rb))) => {\n+            eq_defaultness(*ld, *rd)\n+                && eq_fn_sig(lf, rf)\n+                && eq_generics(lg, rg)\n+                && both(lb, rb, |l, r| eq_block(l, r))\n+        }\n+        (TyAlias(box TyAliasKind(ld, lg, lb, lt)), TyAlias(box TyAliasKind(rd, rg, rb, rt))) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)\n                 && over(lb, rb, |l, r| eq_generic_bound(l, r))"}, {"sha": "b9e97077c540f46cfeb3c9a3f33e49864dcbb210", "filename": "src/tools/clippy/clippy_lints/src/write.rs", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87e1ecdf05d4fb2d14f13d760bb37098c58b06e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs?ref=b87e1ecdf05d4fb2d14f13d760bb37098c58b06e", "patch": "@@ -3,7 +3,9 @@ use std::ops::Range;\n \n use crate::utils::{snippet_with_applicability, span_lint, span_lint_and_sugg, span_lint_and_then};\n use if_chain::if_chain;\n-use rustc_ast::ast::{Expr, ExprKind, Item, ItemKind, LitKind, MacCall, StrLit, StrStyle};\n+use rustc_ast::ast::{\n+    Expr, ExprKind, ImplKind, Item, ItemKind, LitKind, MacCall, StrLit, StrStyle,\n+};\n use rustc_ast::token;\n use rustc_ast::tokenstream::TokenStream;\n use rustc_errors::Applicability;\n@@ -231,11 +233,7 @@ impl_lint_pass!(Write => [\n \n impl EarlyLintPass for Write {\n     fn check_item(&mut self, _: &EarlyContext<'_>, item: &Item) {\n-        if let ItemKind::Impl {\n-            of_trait: Some(trait_ref),\n-            ..\n-        } = &item.kind\n-        {\n+        if let ItemKind::Impl(box ImplKind { of_trait: Some(trait_ref), .. }) = &item.kind {\n             let trait_name = trait_ref\n                 .path\n                 .segments\n@@ -377,10 +375,15 @@ impl Write {\n     /// (Some(\"string to write: {}\"), Some(buf))\n     /// ```\n     #[allow(clippy::too_many_lines)]\n-    fn check_tts<'a>(&self, cx: &EarlyContext<'a>, tts: TokenStream, is_write: bool) -> (Option<StrLit>, Option<Expr>) {\n+    fn check_tts<'a>(\n+        &self,\n+        cx: &EarlyContext<'a>,\n+        tts: TokenStream,\n+        is_write: bool,\n+    ) -> (Option<StrLit>, Option<Expr>) {\n         use rustc_parse_format::{\n-            AlignUnknown, ArgumentImplicitlyIs, ArgumentIs, ArgumentNamed, CountImplied, FormatSpec, ParseMode, Parser,\n-            Piece,\n+            AlignUnknown, ArgumentImplicitlyIs, ArgumentIs, ArgumentNamed, CountImplied,\n+            FormatSpec, ParseMode, Parser, Piece,\n         };\n \n         let mut parser = parser::Parser::new(&cx.sess.parse_sess, tts, false, None);\n@@ -410,7 +413,12 @@ impl Write {\n             if let Piece::NextArgument(arg) = piece {\n                 if !self.in_debug_impl && arg.format.ty == \"?\" {\n                     // FIXME: modify rustc's fmt string parser to give us the current span\n-                    span_lint(cx, USE_DEBUG, parser.prev_token.span, \"use of `Debug`-based formatting\");\n+                    span_lint(\n+                        cx,\n+                        USE_DEBUG,\n+                        parser.prev_token.span,\n+                        \"use of `Debug`-based formatting\",\n+                    );\n                 }\n                 args.push(arg);\n             }\n@@ -438,7 +446,9 @@ impl Write {\n                 return (Some(fmtstr), None);\n             };\n             match &token_expr.kind {\n-                ExprKind::Lit(lit) if !matches!(lit.kind, LitKind::Int(..) | LitKind::Float(..)) => {\n+                ExprKind::Lit(lit)\n+                    if !matches!(lit.kind, LitKind::Int(..) | LitKind::Float(..)) =>\n+                {\n                     let mut all_simple = true;\n                     let mut seen = false;\n                     for arg in &args {\n@@ -448,15 +458,15 @@ impl Write {\n                                     all_simple &= arg.format == SIMPLE;\n                                     seen = true;\n                                 }\n-                            },\n-                            ArgumentNamed(_) => {},\n+                            }\n+                            ArgumentNamed(_) => {}\n                         }\n                     }\n                     if all_simple && seen {\n                         span_lint(cx, lint, token_expr.span, \"literal with an empty format string\");\n                     }\n                     idx += 1;\n-                },\n+                }\n                 ExprKind::Assign(lhs, rhs, _) => {\n                     if_chain! {\n                         if let ExprKind::Lit(ref lit) = rhs.kind;\n@@ -481,7 +491,7 @@ impl Write {\n                             }\n                         }\n                     }\n-                },\n+                }\n                 _ => idx += 1,\n             }\n         }\n@@ -513,11 +523,17 @@ impl Write {\n                     cx,\n                     PRINT_WITH_NEWLINE,\n                     mac.span(),\n-                    &format!(\"using `{}!()` with a format string that ends in a single newline\", name),\n+                    &format!(\n+                        \"using `{}!()` with a format string that ends in a single newline\",\n+                        name\n+                    ),\n                     |err| {\n                         err.multipart_suggestion(\n                             &format!(\"use `{}!` instead\", suggested),\n-                            vec![(mac.path.span, suggested), (newline_span(&fmt_str), String::new())],\n+                            vec![\n+                                (mac.path.span, suggested),\n+                                (newline_span(&fmt_str), String::new()),\n+                            ],\n                             Applicability::MachineApplicable,\n                         );\n                     },"}]}