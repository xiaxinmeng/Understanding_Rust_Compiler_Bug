{"sha": "4a1ce9831cae8e49a0cf61cabda97042d85d911e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMWNlOTgzMWNhZThlNDlhMGNmNjFjYWJkYTk3MDQyZDg1ZDkxMWU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-14T09:57:47Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-14T09:57:47Z"}, "message": "Rollup merge of #33554 - sfackler:no-current-exe, r=alexcrichton\n\nDon't use env::current_exe with libbacktrace\n\nIf the path we give to libbacktrace doesn't actually correspond to the\ncurrent process, libbacktrace will segfault *at best*.\n\ncc #21889\n\nr? @alexcrichton\ncc @semarie", "tree": {"sha": "4f9084cfd325551fef1edd52b43163f0fa32d434", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f9084cfd325551fef1edd52b43163f0fa32d434"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a1ce9831cae8e49a0cf61cabda97042d85d911e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a1ce9831cae8e49a0cf61cabda97042d85d911e", "html_url": "https://github.com/rust-lang/rust/commit/4a1ce9831cae8e49a0cf61cabda97042d85d911e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a1ce9831cae8e49a0cf61cabda97042d85d911e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea68dd8def885e3876a494c2e844dc5adaf3c538", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea68dd8def885e3876a494c2e844dc5adaf3c538", "html_url": "https://github.com/rust-lang/rust/commit/ea68dd8def885e3876a494c2e844dc5adaf3c538"}, {"sha": "9393e52d4d2705698a6dfdd2834d41154ee23b64", "url": "https://api.github.com/repos/rust-lang/rust/commits/9393e52d4d2705698a6dfdd2834d41154ee23b64", "html_url": "https://github.com/rust-lang/rust/commit/9393e52d4d2705698a6dfdd2834d41154ee23b64"}], "stats": {"total": 65, "additions": 22, "deletions": 43}, "files": [{"sha": "b5802afc109435ec1e5e2cf8dd1b71951780c592", "filename": "src/libstd/sys/common/gnu/libbacktrace.rs", "status": "modified", "additions": 12, "deletions": 37, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4a1ce9831cae8e49a0cf61cabda97042d85d911e/src%2Flibstd%2Fsys%2Fcommon%2Fgnu%2Flibbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1ce9831cae8e49a0cf61cabda97042d85d911e/src%2Flibstd%2Fsys%2Fcommon%2Fgnu%2Flibbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fgnu%2Flibbacktrace.rs?ref=4a1ce9831cae8e49a0cf61cabda97042d85d911e", "patch": "@@ -15,7 +15,6 @@ use sys_common::backtrace::{output, output_fileline};\n \n pub fn print(w: &mut Write, idx: isize, addr: *mut libc::c_void,\n              symaddr: *mut libc::c_void) -> io::Result<()> {\n-    use env;\n     use ffi::CStr;\n     use ptr;\n \n@@ -110,46 +109,22 @@ pub fn print(w: &mut Write, idx: isize, addr: *mut libc::c_void,\n     // that is calculated the first time this is requested. Remember that\n     // backtracing all happens serially (one global lock).\n     //\n-    // An additionally oddity in this function is that we initialize the\n-    // filename via self_exe_name() to pass to libbacktrace. It turns out\n-    // that on Linux libbacktrace seamlessly gets the filename of the\n-    // current executable, but this fails on freebsd. by always providing\n-    // it, we make sure that libbacktrace never has a reason to not look up\n-    // the symbols. The libbacktrace API also states that the filename must\n-    // be in \"permanent memory\", so we copy it to a static and then use the\n-    // static as the pointer.\n+    // Things don't work so well on not-Linux since libbacktrace can't track\n+    // down that executable this is. We at one point used env::current_exe but\n+    // it turns out that there are some serious security issues with that\n+    // approach.\n     //\n-    // FIXME: We also call self_exe_name() on DragonFly BSD. I haven't\n-    //        tested if this is required or not.\n+    // Specifically, on certain platforms like BSDs, a malicious actor can cause\n+    // an arbitrary file to be placed at the path returned by current_exe.\n+    // libbacktrace does not behave defensively in the presence of ill-formed\n+    // DWARF information, and has been demonstrated to segfault in at least one\n+    // case. There is no evidence at the moment to suggest that a more carefully\n+    // constructed file can't cause arbitrary code execution. As a result of all\n+    // of this, we don't hint libbacktrace with the path to the current process.\n     unsafe fn init_state() -> *mut backtrace_state {\n         static mut STATE: *mut backtrace_state = ptr::null_mut();\n-        static mut LAST_FILENAME: [libc::c_char; 256] = [0; 256];\n         if !STATE.is_null() { return STATE }\n-        let selfname = if cfg!(target_os = \"freebsd\") ||\n-            cfg!(target_os = \"dragonfly\") ||\n-            cfg!(target_os = \"bitrig\") ||\n-            cfg!(target_os = \"openbsd\") ||\n-            cfg!(target_os = \"windows\") {\n-                env::current_exe().ok()\n-            } else {\n-                None\n-            };\n-        let filename = match selfname.as_ref().and_then(|s| s.to_str()) {\n-            Some(path) => {\n-                let bytes = path.as_bytes();\n-                if bytes.len() < LAST_FILENAME.len() {\n-                    let i = bytes.iter();\n-                    for (slot, val) in LAST_FILENAME.iter_mut().zip(i) {\n-                        *slot = *val as libc::c_char;\n-                    }\n-                    LAST_FILENAME.as_ptr()\n-                } else {\n-                    ptr::null()\n-                }\n-            }\n-            None => ptr::null(),\n-        };\n-        STATE = backtrace_create_state(filename, 0, error_cb,\n+        STATE = backtrace_create_state(ptr::null(), 0, error_cb,\n                                        ptr::null_mut());\n         STATE\n     }"}, {"sha": "f42a6ab162b707437134a231725c21505e172e28", "filename": "src/test/run-pass/backtrace-debuginfo.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4a1ce9831cae8e49a0cf61cabda97042d85d911e/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1ce9831cae8e49a0cf61cabda97042d85d911e/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs?ref=4a1ce9831cae8e49a0cf61cabda97042d85d911e", "patch": "@@ -32,11 +32,15 @@ macro_rules! dump_and_die {\n     ($($pos:expr),*) => ({\n         // FIXME(#18285): we cannot include the current position because\n         // the macro span takes over the last frame's file/line.\n-        if cfg!(target_os = \"macos\") ||\n-           cfg!(target_os = \"ios\") ||\n-           cfg!(target_os = \"android\") ||\n-           cfg!(all(target_os = \"linux\", target_arch = \"arm\")) ||\n-           cfg!(all(windows, target_env = \"gnu\")) {\n+        if cfg!(any(target_os = \"macos\",\n+                    target_os = \"ios\",\n+                    target_os = \"android\",\n+                    all(target_os = \"linux\", target_arch = \"arm\"),\n+                    target_os = \"windows\",\n+                    target_os = \"freebsd\",\n+                    target_os = \"dragonfly\",\n+                    target_os = \"bitrig\",\n+                    target_os = \"openbsd\")) {\n             // skip these platforms as this support isn't implemented yet.\n         } else {\n             dump_filelines(&[$($pos),*]);"}, {"sha": "ad38dc8f45252b2c2e56a11cefc3a7143e44c4af", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a1ce9831cae8e49a0cf61cabda97042d85d911e/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1ce9831cae8e49a0cf61cabda97042d85d911e/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=4a1ce9831cae8e49a0cf61cabda97042d85d911e", "patch": "@@ -115,7 +115,7 @@ fn runtest(me: &str) {\n }\n \n fn main() {\n-    if cfg!(windows) && cfg!(target_arch = \"x86\") && cfg!(target_env = \"gnu\") {\n+    if cfg!(windows) && cfg!(target_env = \"gnu\") {\n         return\n     }\n "}]}