{"sha": "9fb0bff18e6de75328b1bdb63c0ab29e2e413b68", "node_id": "C_kwDOAAsO6NoAKDlmYjBiZmYxOGU2ZGU3NTMyOGIxYmRiNjNjMGFiMjllMmU0MTNiNjg", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-01-08T09:28:12Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-01-17T17:44:56Z"}, "message": "Use Term in ProjectionPredicate\n\nProjectionPredicate should be able to handle both associated types and consts so this adds the\nfirst step of that. It mainly just pipes types all the way down, not entirely sure how to handle\nconsts, but hopefully that'll come with time.", "tree": {"sha": "73df6ee77d2f85d4ee4d697554090cb232adc4e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73df6ee77d2f85d4ee4d697554090cb232adc4e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fb0bff18e6de75328b1bdb63c0ab29e2e413b68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fb0bff18e6de75328b1bdb63c0ab29e2e413b68", "html_url": "https://github.com/rust-lang/rust/commit/9fb0bff18e6de75328b1bdb63c0ab29e2e413b68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fb0bff18e6de75328b1bdb63c0ab29e2e413b68/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05b8c727d87bfca6b3adde3fd814a748154d123d", "url": "https://api.github.com/repos/rust-lang/rust/commits/05b8c727d87bfca6b3adde3fd814a748154d123d", "html_url": "https://github.com/rust-lang/rust/commit/05b8c727d87bfca6b3adde3fd814a748154d123d"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "2af3555e370a4b8ec15f0c4204e24276abe324c1", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fb0bff18e6de75328b1bdb63c0ab29e2e413b68/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb0bff18e6de75328b1bdb63c0ab29e2e413b68/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=9fb0bff18e6de75328b1bdb63c0ab29e2e413b68", "patch": "@@ -6,7 +6,7 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n-    AsyncGeneratorKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, GeneratorKind, GenericArg, GenericBound, HirId,\n+    Term, AsyncGeneratorKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, GeneratorKind, GenericArg, GenericBound, HirId,\n     IsAsync, ItemKind, LifetimeName, TraitRef, Ty, TyKind, TypeBindingKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n@@ -140,7 +140,7 @@ fn future_output_ty<'tcx>(trait_ref: &'tcx TraitRef<'tcx>) -> Option<&'tcx Ty<'t\n         if args.bindings.len() == 1;\n         let binding = &args.bindings[0];\n         if binding.ident.name == sym::Output;\n-        if let TypeBindingKind::Equality{ty: output} = binding.kind;\n+        if let TypeBindingKind::Equality{term: Term::Ty(output)} = binding.kind;\n         then {\n             return Some(output)\n         }"}, {"sha": "c0e65e520f23a59c85fab26c1ee237cda12c212e", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fb0bff18e6de75328b1bdb63c0ab29e2e413b68/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb0bff18e6de75328b1bdb63c0ab29e2e413b68/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=9fb0bff18e6de75328b1bdb63c0ab29e2e413b68", "patch": "@@ -2143,10 +2143,10 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                     if let ty::PredicateKind::Projection(projection_predicate) = predicate.kind().skip_binder() {\n                         // walk the associated type and check for Self\n                         if let Some(self_adt) = self_ty.ty_adt_def() {\n-                            if contains_adt_constructor(projection_predicate.ty, self_adt) {\n+                            if contains_adt_constructor(projection_predicate.term.ty(), self_adt) {\n                                 return;\n                             }\n-                        } else if contains_ty(projection_predicate.ty, self_ty) {\n+                        } else if contains_ty(projection_predicate.term.ty(), self_ty) {\n                             return;\n                         }\n                     }"}, {"sha": "865a36a5cd1d668efcd9cf48b296de774303ea3f", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb0bff18e6de75328b1bdb63c0ab29e2e413b68/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb0bff18e6de75328b1bdb63c0ab29e2e413b68/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=9fb0bff18e6de75328b1bdb63c0ab29e2e413b68", "patch": "@@ -243,7 +243,7 @@ fn check_other_call_arg<'tcx>(\n         if if trait_predicate.def_id() == deref_trait_id {\n             if let [projection_predicate] = projection_predicates[..] {\n                 let normalized_ty =\n-                    cx.tcx.subst_and_normalize_erasing_regions(call_substs, cx.param_env, projection_predicate.ty);\n+                    cx.tcx.subst_and_normalize_erasing_regions(call_substs, cx.param_env, projection_predicate.term.ty());\n                 implements_trait(cx, receiver_ty, deref_trait_id, &[])\n                     && get_associated_type(cx, receiver_ty, deref_trait_id, \"Target\") == Some(normalized_ty)\n             } else {"}, {"sha": "09f9e1ee09990ed1964f0c541f8528634de8ecbc", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fb0bff18e6de75328b1bdb63c0ab29e2e413b68/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb0bff18e6de75328b1bdb63c0ab29e2e413b68/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=9fb0bff18e6de75328b1bdb63c0ab29e2e413b68", "patch": "@@ -98,9 +98,9 @@ fn get_args_to_check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Ve\n                         if trait_pred.self_ty() == inp;\n                         if let Some(return_ty_pred) = get_projection_pred(cx, generics, *trait_pred);\n                         then {\n-                            if ord_preds.iter().any(|ord| ord.self_ty() == return_ty_pred.ty) {\n+                            if ord_preds.iter().any(|ord| ord.self_ty() == return_ty_pred.term.ty()) {\n                                 args_to_check.push((i, \"Ord\".to_string()));\n-                            } else if partial_ord_preds.iter().any(|pord| pord.self_ty() == return_ty_pred.ty) {\n+                            } else if partial_ord_preds.iter().any(|pord| pord.self_ty() == return_ty_pred.term.ty()) {\n                                 args_to_check.push((i, \"PartialOrd\".to_string()));\n                             }\n                         }"}]}