{"sha": "96f565492da446c4e77b84d937ceccd31337f0ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZjU2NTQ5MmRhNDQ2YzRlNzdiODRkOTM3Y2VjY2QzMTMzN2YwYWM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-02T05:41:11Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-02T05:41:11Z"}, "message": "rt: Make fields of rust_task_thread private where possible", "tree": {"sha": "87eeac174613f5dc1763bbed329c72749230143a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87eeac174613f5dc1763bbed329c72749230143a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96f565492da446c4e77b84d937ceccd31337f0ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96f565492da446c4e77b84d937ceccd31337f0ac", "html_url": "https://github.com/rust-lang/rust/commit/96f565492da446c4e77b84d937ceccd31337f0ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96f565492da446c4e77b84d937ceccd31337f0ac/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6c57dbba2f5c5822fc4ee4254e91b36c70060f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6c57dbba2f5c5822fc4ee4254e91b36c70060f9", "html_url": "https://github.com/rust-lang/rust/commit/b6c57dbba2f5c5822fc4ee4254e91b36c70060f9"}], "stats": {"total": 75, "additions": 36, "deletions": 39}, "files": [{"sha": "39d9f2836453946fc2c203a67d08bb5d93eaf2d8", "filename": "src/rt/rust_task_thread.cpp", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/96f565492da446c4e77b84d937ceccd31337f0ac/src%2Frt%2Frust_task_thread.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/96f565492da446c4e77b84d937ceccd31337f0ac/src%2Frt%2Frust_task_thread.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.cpp?ref=96f565492da446c4e77b84d937ceccd31337f0ac", "patch": "@@ -23,22 +23,22 @@ rust_task_thread::rust_task_thread(rust_scheduler *sched,\n                                    int id) :\n     rust_thread(SCHED_STACK_SIZE),\n     _log(srv, this),\n-    log_lvl(log_debug),\n+    cache(this),\n+    id(id),\n+    should_exit(false),\n+    cached_c_stack(NULL),\n+    kernel(sched->kernel),\n+    sched(sched),\n     srv(srv),\n-    // TODO: calculate a per scheduler name.\n-    name(\"main\"),\n     newborn_tasks(this, \"newborn\"),\n     running_tasks(this, \"running\"),\n     blocked_tasks(this, \"blocked\"),\n     dead_tasks(this, \"dead\"),\n-    cache(this),\n-    kernel(sched->kernel),\n-    sched(sched),\n-    id(id),\n+    log_lvl(log_debug),\n     min_stack_size(kernel->env->min_stack_size),\n     env(kernel->env),\n-    should_exit(false),\n-    cached_c_stack(NULL)\n+    // TODO: calculate a per scheduler name.\n+    name(\"main\")\n {\n     LOGPTR(this, \"new dom\", (uintptr_t)this);\n     isaac_init(kernel, &rctx);"}, {"sha": "49da2eeeaf586cfc27e048c6a29ad88b51dd73ef", "filename": "src/rt/rust_task_thread.h", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/96f565492da446c4e77b84d937ceccd31337f0ac/src%2Frt%2Frust_task_thread.h", "raw_url": "https://github.com/rust-lang/rust/raw/96f565492da446c4e77b84d937ceccd31337f0ac/src%2Frt%2Frust_task_thread.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.h?ref=96f565492da446c4e77b84d937ceccd31337f0ac", "patch": "@@ -45,39 +45,14 @@ class rust_crate_cache {\n struct rust_task_thread : public kernel_owned<rust_task_thread>,\n                         rust_thread\n {\n+private:\n \n     // Fields known only by the runtime:\n     rust_log _log;\n \n-    // NB: this is used to filter *runtime-originating* debug\n-    // logging, on a per-scheduler basis. It's not likely what\n-    // you want to expose to the user in terms of per-task\n-    // or per-module logging control. By default all schedulers\n-    // are set to debug-level logging here, and filtered by\n-    // runtime category using the pseudo-modules ::rt::foo.\n-    uint32_t log_lvl;\n-\n-    rust_srv *srv;\n-    const char *const name;\n-\n-    rust_task_list newborn_tasks;\n-    rust_task_list running_tasks;\n-    rust_task_list blocked_tasks;\n-    rust_task_list dead_tasks;\n-\n     rust_crate_cache cache;\n-\n-    randctx rctx;\n-\n-    rust_kernel *kernel;\n-    rust_scheduler *sched;\n-    int32_t list_index;\n-\n     const int id;\n \n-    lock_and_signal lock;\n-    size_t min_stack_size;\n-\n #ifndef __WIN32__\n     pthread_attr_t attr;\n     static pthread_key_t task_key;\n@@ -86,21 +61,43 @@ struct rust_task_thread : public kernel_owned<rust_task_thread>,\n #endif\n \n     static bool tls_initialized;\n-\n-    rust_env *env;\n     context c_context;\n \n     bool should_exit;\n \n-private:\n-\n     stk_seg *cached_c_stack;\n     stk_seg *extra_c_stack;\n \n     void prepare_c_stack(rust_task *task);\n     void unprepare_c_stack();\n \n public:\n+    rust_kernel *kernel;\n+    rust_scheduler *sched;\n+    rust_srv *srv;\n+\n+    lock_and_signal lock;\n+\n+    rust_task_list newborn_tasks;\n+    rust_task_list running_tasks;\n+    rust_task_list blocked_tasks;\n+    rust_task_list dead_tasks;\n+\n+    // NB: this is used to filter *runtime-originating* debug\n+    // logging, on a per-scheduler basis. It's not likely what\n+    // you want to expose to the user in terms of per-task\n+    // or per-module logging control. By default all schedulers\n+    // are set to debug-level logging here, and filtered by\n+    // runtime category using the pseudo-modules ::rt::foo.\n+    uint32_t log_lvl;\n+\n+    size_t min_stack_size;\n+    rust_env *env;\n+\n+    randctx rctx;\n+\n+    int32_t list_index;\n+    const char *const name;\n \n     // Only a pointer to 'name' is kept, so it must live as long as this\n     // domain."}]}