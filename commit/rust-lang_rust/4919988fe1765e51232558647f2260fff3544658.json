{"sha": "4919988fe1765e51232558647f2260fff3544658", "node_id": "C_kwDOAAsO6NoAKDQ5MTk5ODhmZTE3NjVlNTEyMzI1NTg2NDdmMjI2MGZmZjM1NDQ2NTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-27T22:53:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-27T22:53:21Z"}, "message": "Auto merge of #91241 - dtolnay:firstchunk, r=oli-obk\n\nEliminate an unreachable codepath from String::from_utf8_lossy\n\n`Utf8Lossy`'s `Iterator` implementation ensures that only the **final** chunk has an empty slice for `broken`:\n\nhttps://github.com/rust-lang/rust/blob/dd549dcab404ec4c7d07b5a83aca5bdd7171138f/library/core/src/str/lossy.rs#L46-L47\n\nThus the only way the **first** chunk could have an empty `broken` is if it is the **final** chunk, i.e. there is only one chunk total. And the only way that there could be one chunk total with an empty `broken` is if the whole input is valid utf8 and non-empty.\n\nThat condition has already been handled by an early return, so at the point that the first `REPLACEMENT` is being pushed, it's impossible for `first_broken` to be empty.", "tree": {"sha": "554ebba313dcecb155969556feffbb8b239bd4a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/554ebba313dcecb155969556feffbb8b239bd4a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4919988fe1765e51232558647f2260fff3544658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4919988fe1765e51232558647f2260fff3544658", "html_url": "https://github.com/rust-lang/rust/commit/4919988fe1765e51232558647f2260fff3544658", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4919988fe1765e51232558647f2260fff3544658/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "686e313a9aa14107c8631ffe48fa09110a7692db", "url": "https://api.github.com/repos/rust-lang/rust/commits/686e313a9aa14107c8631ffe48fa09110a7692db", "html_url": "https://github.com/rust-lang/rust/commit/686e313a9aa14107c8631ffe48fa09110a7692db"}, {"sha": "9125dd74bdbd0c41d6f8341366992db514e56246", "url": "https://api.github.com/repos/rust-lang/rust/commits/9125dd74bdbd0c41d6f8341366992db514e56246", "html_url": "https://github.com/rust-lang/rust/commit/9125dd74bdbd0c41d6f8341366992db514e56246"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "4f926d99c6dbc46e992aa73d4b89b6cd82852a11", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4919988fe1765e51232558647f2260fff3544658/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4919988fe1765e51232558647f2260fff3544658/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=4919988fe1765e51232558647f2260fff3544658", "patch": "@@ -558,13 +558,13 @@ impl String {\n     pub fn from_utf8_lossy(v: &[u8]) -> Cow<'_, str> {\n         let mut iter = lossy::Utf8Lossy::from_bytes(v).chunks();\n \n-        let (first_valid, first_broken) = if let Some(chunk) = iter.next() {\n+        let first_valid = if let Some(chunk) = iter.next() {\n             let lossy::Utf8LossyChunk { valid, broken } = chunk;\n-            if valid.len() == v.len() {\n-                debug_assert!(broken.is_empty());\n+            if broken.is_empty() {\n+                debug_assert_eq!(valid.len(), v.len());\n                 return Cow::Borrowed(valid);\n             }\n-            (valid, broken)\n+            valid\n         } else {\n             return Cow::Borrowed(\"\");\n         };\n@@ -573,9 +573,7 @@ impl String {\n \n         let mut res = String::with_capacity(v.len());\n         res.push_str(first_valid);\n-        if !first_broken.is_empty() {\n-            res.push_str(REPLACEMENT);\n-        }\n+        res.push_str(REPLACEMENT);\n \n         for lossy::Utf8LossyChunk { valid, broken } in iter {\n             res.push_str(valid);"}]}