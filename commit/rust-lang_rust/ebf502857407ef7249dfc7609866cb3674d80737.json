{"sha": "ebf502857407ef7249dfc7609866cb3674d80737", "node_id": "C_kwDOAAsO6NoAKGViZjUwMjg1NzQwN2VmNzI0OWRmYzc2MDk4NjZjYjM2NzRkODA3Mzc", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-10-20T19:32:16Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-10-20T19:32:16Z"}, "message": "Improve \"`~const` is not allowed here\" message", "tree": {"sha": "d6627c2f3580be1f2b22911ce1c70339aa582850", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6627c2f3580be1f2b22911ce1c70339aa582850"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebf502857407ef7249dfc7609866cb3674d80737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebf502857407ef7249dfc7609866cb3674d80737", "html_url": "https://github.com/rust-lang/rust/commit/ebf502857407ef7249dfc7609866cb3674d80737", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebf502857407ef7249dfc7609866cb3674d80737/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "542febd2d383b5082277c7d165b098c0a3b513f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/542febd2d383b5082277c7d165b098c0a3b513f6", "html_url": "https://github.com/rust-lang/rust/commit/542febd2d383b5082277c7d165b098c0a3b513f6"}], "stats": {"total": 110, "additions": 85, "deletions": 25}, "files": [{"sha": "f42aca685f60eaa46cdb5197b0351fac658c7079", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 43, "deletions": 20, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/ebf502857407ef7249dfc7609866cb3674d80737/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf502857407ef7249dfc7609866cb3674d80737/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=ebf502857407ef7249dfc7609866cb3674d80737", "patch": "@@ -38,6 +38,13 @@ enum SelfSemantic {\n     No,\n }\n \n+/// What is the context that prevents using `~const`?\n+enum DisallowTildeConstContext<'a> {\n+    TraitObject,\n+    ImplTrait,\n+    Fn(FnKind<'a>),\n+}\n+\n struct AstValidator<'a> {\n     session: &'a Session,\n \n@@ -56,7 +63,7 @@ struct AstValidator<'a> {\n     /// e.g., `impl Iterator<Item = impl Debug>`.\n     outer_impl_trait: Option<Span>,\n \n-    is_tilde_const_allowed: bool,\n+    disallow_tilde_const: Option<DisallowTildeConstContext<'a>>,\n \n     /// Used to ban `impl Trait` in path projections like `<impl Iterator>::Item`\n     /// or `Foo::Bar<impl Trait>`\n@@ -93,18 +100,26 @@ impl<'a> AstValidator<'a> {\n         self.is_impl_trait_banned = old;\n     }\n \n-    fn with_tilde_const(&mut self, allowed: bool, f: impl FnOnce(&mut Self)) {\n-        let old = mem::replace(&mut self.is_tilde_const_allowed, allowed);\n+    fn with_tilde_const(\n+        &mut self,\n+        disallowed: Option<DisallowTildeConstContext<'a>>,\n+        f: impl FnOnce(&mut Self),\n+    ) {\n+        let old = mem::replace(&mut self.disallow_tilde_const, disallowed);\n         f(self);\n-        self.is_tilde_const_allowed = old;\n+        self.disallow_tilde_const = old;\n     }\n \n     fn with_tilde_const_allowed(&mut self, f: impl FnOnce(&mut Self)) {\n-        self.with_tilde_const(true, f)\n+        self.with_tilde_const(None, f)\n     }\n \n-    fn with_banned_tilde_const(&mut self, f: impl FnOnce(&mut Self)) {\n-        self.with_tilde_const(false, f)\n+    fn with_banned_tilde_const(\n+        &mut self,\n+        ctx: DisallowTildeConstContext<'a>,\n+        f: impl FnOnce(&mut Self),\n+    ) {\n+        self.with_tilde_const(Some(ctx), f)\n     }\n \n     fn with_let_management(\n@@ -172,7 +187,7 @@ impl<'a> AstValidator<'a> {\n     fn with_impl_trait(&mut self, outer: Option<Span>, f: impl FnOnce(&mut Self)) {\n         let old = mem::replace(&mut self.outer_impl_trait, outer);\n         if outer.is_some() {\n-            self.with_banned_tilde_const(f);\n+            self.with_banned_tilde_const(DisallowTildeConstContext::ImplTrait, f);\n         } else {\n             f(self);\n         }\n@@ -197,7 +212,10 @@ impl<'a> AstValidator<'a> {\n             TyKind::ImplTrait(..) => {\n                 self.with_impl_trait(Some(t.span), |this| visit::walk_ty(this, t))\n             }\n-            TyKind::TraitObject(..) => self.with_banned_tilde_const(|this| visit::walk_ty(this, t)),\n+            TyKind::TraitObject(..) => self\n+                .with_banned_tilde_const(DisallowTildeConstContext::TraitObject, |this| {\n+                    visit::walk_ty(this, t)\n+                }),\n             TyKind::Path(ref qself, ref path) => {\n                 // We allow these:\n                 //  - `Option<impl Trait>`\n@@ -1411,13 +1429,15 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     );\n                     err.emit();\n                 }\n-                (_, TraitBoundModifier::MaybeConst) => {\n-                    if !self.is_tilde_const_allowed {\n-                        self.err_handler()\n-                            .struct_span_err(bound.span(), \"`~const` is not allowed here\")\n-                            .note(\"only allowed on bounds on functions, traits' associated types and functions, const impls and its associated functions\")\n-                            .emit();\n-                    }\n+                (_, TraitBoundModifier::MaybeConst) if let Some(reason) = &self.disallow_tilde_const => {\n+                    let mut err = self.err_handler().struct_span_err(bound.span(), \"`~const` is not allowed here\");\n+                    match reason {\n+                        DisallowTildeConstContext::TraitObject => err.note(\"trait objects cannot have `~const` trait bounds\"),\n+                        DisallowTildeConstContext::ImplTrait => err.note(\"`impl Trait`s cannot have `~const` trait bounds\"),\n+                        DisallowTildeConstContext::Fn(FnKind::Closure(..)) => err.note(\"closures cannot have `~const` trait bounds\"),\n+                        DisallowTildeConstContext::Fn(FnKind::Fn(_, ident, ..)) => err.span_note(ident.span, \"this function is not `const`, so it cannot have `~const` trait bounds\"),\n+                    };\n+                    err.emit();\n                 }\n                 (_, TraitBoundModifier::MaybeConstMaybe) => {\n                     self.err_handler()\n@@ -1523,10 +1543,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             });\n         }\n \n-        let tilde_const_allowed = matches!(fk.header(), Some(FnHeader { .. }))\n-            || matches!(fk.ctxt(), Some(FnCtxt::Assoc(_)));\n+        let tilde_const_allowed =\n+            matches!(fk.header(), Some(FnHeader { constness: ast::Const::Yes(_), .. }))\n+                || matches!(fk.ctxt(), Some(FnCtxt::Assoc(_)));\n+\n+        let disallowed = (!tilde_const_allowed).then(|| DisallowTildeConstContext::Fn(fk));\n \n-        self.with_tilde_const(tilde_const_allowed, |this| visit::walk_fn(this, fk));\n+        self.with_tilde_const(disallowed, |this| visit::walk_fn(this, fk));\n     }\n \n     fn visit_assoc_item(&mut self, item: &'a AssocItem, ctxt: AssocCtxt) {\n@@ -1770,7 +1793,7 @@ pub fn check_crate(session: &Session, krate: &Crate, lints: &mut LintBuffer) ->\n         in_const_trait_impl: false,\n         has_proc_macro_decls: false,\n         outer_impl_trait: None,\n-        is_tilde_const_allowed: false,\n+        disallow_tilde_const: None,\n         is_impl_trait_banned: false,\n         is_assoc_ty_bound_banned: false,\n         forbidden_let_reason: Some(ForbiddenLetReason::GenericForbidden),"}, {"sha": "21ddf4ab4e5f4ad2f56ebb176c6c00a666a78266", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-90052.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ebf502857407ef7249dfc7609866cb3674d80737/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-90052.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf502857407ef7249dfc7609866cb3674d80737/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-90052.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-90052.rs?ref=ebf502857407ef7249dfc7609866cb3674d80737", "patch": "@@ -0,0 +1,9 @@\n+#![feature(const_trait_impl)]\n+\n+#[const_trait]\n+trait Bar {}\n+\n+fn foo<T>() where T: ~const Bar {}\n+//~^ ERROR `~const` is not allowed\n+\n+fn main() {}"}, {"sha": "b2a9365378b332c7be1a57482be214d4ecbf420d", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-90052.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ebf502857407ef7249dfc7609866cb3674d80737/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-90052.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebf502857407ef7249dfc7609866cb3674d80737/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-90052.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-90052.stderr?ref=ebf502857407ef7249dfc7609866cb3674d80737", "patch": "@@ -0,0 +1,14 @@\n+error: `~const` is not allowed here\n+  --> $DIR/issue-90052.rs:6:22\n+   |\n+LL | fn foo<T>() where T: ~const Bar {}\n+   |                      ^^^^^^^^^^\n+   |\n+note: this function is not `const`, so it cannot have `~const` trait bounds\n+  --> $DIR/issue-90052.rs:6:4\n+   |\n+LL | fn foo<T>() where T: ~const Bar {}\n+   |    ^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "78a64b9018a564c484f5ccea76e02204bb097d3d", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-and-const-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf502857407ef7249dfc7609866cb3674d80737/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-and-const-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf502857407ef7249dfc7609866cb3674d80737/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-and-const-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-and-const-params.rs?ref=ebf502857407ef7249dfc7609866cb3674d80737", "patch": "@@ -1,4 +1,3 @@\n-// check-pass\n #![feature(const_trait_impl)]\n #![feature(generic_arg_infer)]\n #![feature(generic_const_exprs)]\n@@ -24,6 +23,7 @@ impl const Add42 for () {\n }\n \n fn bar<A: ~const Add42, const N: usize>(_: Foo<N>) -> Foo<{ A::add(N) }> {\n+    //~^ ERROR `~const` is not allowed here\n     Foo\n }\n "}, {"sha": "aae72f36e5778a7ccabb505d4f09476624bd600e", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-and-const-params.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ebf502857407ef7249dfc7609866cb3674d80737/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-and-const-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebf502857407ef7249dfc7609866cb3674d80737/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-and-const-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-and-const-params.stderr?ref=ebf502857407ef7249dfc7609866cb3674d80737", "patch": "@@ -0,0 +1,14 @@\n+error: `~const` is not allowed here\n+  --> $DIR/tilde-const-and-const-params.rs:25:11\n+   |\n+LL | fn bar<A: ~const Add42, const N: usize>(_: Foo<N>) -> Foo<{ A::add(N) }> {\n+   |           ^^^^^^^^^^^^\n+   |\n+note: this function is not `const`, so it cannot have `~const` trait bounds\n+  --> $DIR/tilde-const-and-const-params.rs:25:4\n+   |\n+LL | fn bar<A: ~const Add42, const N: usize>(_: Foo<N>) -> Foo<{ A::add(N) }> {\n+   |    ^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "84867cb4a5342cfb7cd10fa0b37dfd568484da7b", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-invalid-places.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebf502857407ef7249dfc7609866cb3674d80737/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebf502857407ef7249dfc7609866cb3674d80737/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr?ref=ebf502857407ef7249dfc7609866cb3674d80737", "patch": "@@ -4,31 +4,31 @@ error: `~const` is not allowed here\n LL | fn rpit() -> impl ~const T { S }\n    |                   ^^^^^^^^\n    |\n-   = note: only allowed on bounds on functions, traits' associated types and functions, const impls and its associated functions\n+   = note: `impl Trait`s cannot have `~const` trait bounds\n \n error: `~const` is not allowed here\n   --> $DIR/tilde-const-invalid-places.rs:12:17\n    |\n LL | fn apit(_: impl ~const T) {}\n    |                 ^^^^^^^^\n    |\n-   = note: only allowed on bounds on functions, traits' associated types and functions, const impls and its associated functions\n+   = note: `impl Trait`s cannot have `~const` trait bounds\n \n error: `~const` is not allowed here\n   --> $DIR/tilde-const-invalid-places.rs:15:50\n    |\n LL | fn rpit_assoc_bound() -> impl IntoIterator<Item: ~const T> { Some(S) }\n    |                                                  ^^^^^^^^\n    |\n-   = note: only allowed on bounds on functions, traits' associated types and functions, const impls and its associated functions\n+   = note: `impl Trait`s cannot have `~const` trait bounds\n \n error: `~const` is not allowed here\n   --> $DIR/tilde-const-invalid-places.rs:18:48\n    |\n LL | fn apit_assoc_bound(_: impl IntoIterator<Item: ~const T>) {}\n    |                                                ^^^^^^^^\n    |\n-   = note: only allowed on bounds on functions, traits' associated types and functions, const impls and its associated functions\n+   = note: `impl Trait`s cannot have `~const` trait bounds\n \n error: `~const` and `?` are mutually exclusive\n   --> $DIR/tilde-const-invalid-places.rs:21:25"}]}