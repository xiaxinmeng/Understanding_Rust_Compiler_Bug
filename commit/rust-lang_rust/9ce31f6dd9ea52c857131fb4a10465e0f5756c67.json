{"sha": "9ce31f6dd9ea52c857131fb4a10465e0f5756c67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZTMxZjZkZDllYTUyYzg1NzEzMWZiNGExMDQ2NWUwZjU3NTZjNjc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-30T17:32:28Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-01T06:21:20Z"}, "message": "tutorial: Remove usage of fmt!", "tree": {"sha": "aff5be4ecf0a38404f713667f727a283e9ef48cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aff5be4ecf0a38404f713667f727a283e9ef48cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ce31f6dd9ea52c857131fb4a10465e0f5756c67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ce31f6dd9ea52c857131fb4a10465e0f5756c67", "html_url": "https://github.com/rust-lang/rust/commit/9ce31f6dd9ea52c857131fb4a10465e0f5756c67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ce31f6dd9ea52c857131fb4a10465e0f5756c67/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73c6c9109fb334edf159ad08f67cc2e66c7035a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/73c6c9109fb334edf159ad08f67cc2e66c7035a5", "html_url": "https://github.com/rust-lang/rust/commit/73c6c9109fb334edf159ad08f67cc2e66c7035a5"}], "stats": {"total": 114, "additions": 59, "deletions": 55}, "files": [{"sha": "0ae03198f3639cebddf54f446dee59ff34934635", "filename": "doc/rust.md", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9ce31f6dd9ea52c857131fb4a10465e0f5756c67/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ce31f6dd9ea52c857131fb4a10465e0f5756c67/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=9ce31f6dd9ea52c857131fb4a10465e0f5756c67", "patch": "@@ -683,15 +683,15 @@ mod math {\n     type complex = (f64, f64);\n     fn sin(f: f64) -> f64 {\n         ...\n-# fail!();\n+# fail2!();\n     }\n     fn cos(f: f64) -> f64 {\n         ...\n-# fail!();\n+# fail2!();\n     }\n     fn tan(f: f64) -> f64 {\n         ...\n-# fail!();\n+# fail2!();\n     }\n }\n ~~~~~~~~\n@@ -817,12 +817,14 @@ An example of `use` declarations:\n use std::num::sin;\n use std::option::{Some, None};\n \n+# fn foo<T>(_: T){}\n+\n fn main() {\n-    // Equivalent to 'info!(std::num::sin(1.0));'\n-    info!(sin(1.0));\n+    // Equivalent to 'std::num::sin(1.0);'\n+    sin(1.0);\n \n-    // Equivalent to 'info!(~[std::option::Some(1.0), std::option::None]);'\n-    info!(~[Some(1.0), None]);\n+    // Equivalent to 'foo(~[std::option::Some(1.0), std::option::None]);'\n+    foo(~[Some(1.0), None]);\n }\n ~~~~\n \n@@ -1040,8 +1042,8 @@ output slot type would normally be. For example:\n \n ~~~~\n fn my_err(s: &str) -> ! {\n-    info!(s);\n-    fail!();\n+    info2!(\"{}\", s);\n+    fail2!();\n }\n ~~~~\n \n@@ -1059,7 +1061,7 @@ were declared without the `!` annotation, the following code would not\n typecheck:\n \n ~~~~\n-# fn my_err(s: &str) -> ! { fail!() }\n+# fn my_err(s: &str) -> ! { fail2!() }\n \n fn f(i: int) -> int {\n    if i == 42 {\n@@ -2382,7 +2384,7 @@ fn ten_times(f: &fn(int)) {\n     }\n }\n \n-ten_times(|j| println(fmt!(\"hello, %d\", j)));\n+ten_times(|j| println!(\"hello, {}\", j));\n \n ~~~~\n \n@@ -2594,9 +2596,9 @@ enum List<X> { Nil, Cons(X, @List<X>) }\n let x: List<int> = Cons(10, @Cons(11, @Nil));\n \n match x {\n-    Cons(_, @Nil) => fail!(\"singleton list\"),\n+    Cons(_, @Nil) => fail2!(\"singleton list\"),\n     Cons(*)       => return,\n-    Nil           => fail!(\"empty list\")\n+    Nil           => fail2!(\"empty list\")\n }\n ~~~~\n \n@@ -2633,7 +2635,7 @@ match x {\n         return;\n     }\n     _ => {\n-        fail!();\n+        fail2!();\n     }\n }\n ~~~~\n@@ -2687,7 +2689,7 @@ guard may refer to the variables bound within the pattern they follow.\n let message = match maybe_digit {\n   Some(x) if x < 10 => process_digit(x),\n   Some(x) => process_other(x),\n-  None => fail!()\n+  None => fail2!()\n };\n ~~~~\n \n@@ -3472,20 +3474,20 @@ that demonstrates all four of them:\n \n ```rust\n fn main() {\n-    error!(\"This is an error log\")\n-    warn!(\"This is a warn log\")\n-    info!(\"this is an info log\")\n-    debug!(\"This is a debug log\")\n+    error2!(\"This is an error log\")\n+    warn2!(\"This is a warn log\")\n+    info2!(\"this is an info log\")\n+    debug2!(\"This is a debug log\")\n }\n ```\n \n These four log levels correspond to levels 1-4, as controlled by `RUST_LOG`:\n \n ```bash\n $ RUST_LOG=rust=3 ./rust\n-rust: ~\"\\\"This is an error log\\\"\"\n-rust: ~\"\\\"This is a warn log\\\"\"\n-rust: ~\"\\\"this is an info log\\\"\"\n+This is an error log\n+This is a warn log\n+this is an info log\n ```\n \n # Appendix: Rationales and design tradeoffs"}, {"sha": "726b8bb2b8001a4ef995f057869b5dee7563145b", "filename": "doc/tutorial-conditions.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9ce31f6dd9ea52c857131fb4a10465e0f5756c67/doc%2Ftutorial-conditions.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ce31f6dd9ea52c857131fb4a10465e0f5756c67/doc%2Ftutorial-conditions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-conditions.md?ref=9ce31f6dd9ea52c857131fb4a10465e0f5756c67", "patch": "@@ -66,7 +66,7 @@ use std::int;\n fn main() {\n     let pairs = read_int_pairs();\n     for &(a,b) in pairs.iter() {\n-        println(fmt!(\"%4.4d, %4.4d\", a, b));\n+        println!(\"{:4.4d}, {:4.4d}\", a, b);\n     }\n }\n \n@@ -281,7 +281,7 @@ fn main() {\n         // The protected logic.\n         let pairs = read_int_pairs();\n         for &(a,b) in pairs.iter() {\n-            println(fmt!(\"%4.4d, %4.4d\", a, b));\n+            println!(\"{:4.4d}, {:4.4d}\", a, b);\n         }\n \n     };\n@@ -387,7 +387,7 @@ condition! {\n fn main() {\n     let pairs = read_int_pairs();\n     for &(a,b) in pairs.iter() {\n-        println(fmt!(\"%4.4d, %4.4d\", a, b));\n+        println!(\"{:4.4d}, {:4.4d}\", a, b);\n     }\n }\n \n@@ -462,7 +462,7 @@ fn main() {\n         // The protected logic.\n         let pairs = read_int_pairs();\n         for &(a,b) in pairs.iter() {\n-                println(fmt!(\"%4.4d, %4.4d\", a, b));\n+                println!(\"{:4.4d}, {:4.4d}\", a, b);\n         }\n \n     }\n@@ -540,7 +540,7 @@ fn main() {\n         // The protected logic.\n         let pairs = read_int_pairs();\n         for &(a,b) in pairs.iter() {\n-            println(fmt!(\"%4.4d, %4.4d\", a, b));\n+            println!(\"{:4.4d}, {:4.4d}\", a, b);\n         }\n \n     }\n@@ -636,7 +636,7 @@ fn main() {\n         // The protected logic.\n         let pairs = read_int_pairs();\n         for &(a,b) in pairs.iter() {\n-            println(fmt!(\"%4.4d, %4.4d\", a, b));\n+            println!(\"{:4.4d}, {:4.4d}\", a, b);\n         }\n \n     }\n@@ -766,7 +766,7 @@ fn main() {\n             // The protected logic.\n             let pairs = read_int_pairs();\n             for &(a,b) in pairs.iter() {\n-                println(fmt!(\"%4.4d, %4.4d\", a, b));\n+                println!(\"{:4.4d}, {:4.4d}\", a, b);\n             }\n \n         }"}, {"sha": "a70b29f9100581fb219dfa56a286aced7827f2b0", "filename": "doc/tutorial-macros.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ce31f6dd9ea52c857131fb4a10465e0f5756c67/doc%2Ftutorial-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ce31f6dd9ea52c857131fb4a10465e0f5756c67/doc%2Ftutorial-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-macros.md?ref=9ce31f6dd9ea52c857131fb4a10465e0f5756c67", "patch": "@@ -226,7 +226,7 @@ match x {\n                 // complicated stuff goes here\n                 return result + val;\n             },\n-            _ => fail!(\"Didn't get good_2\")\n+            _ => fail2!(\"Didn't get good_2\")\n         }\n     }\n     _ => return 0 // default value\n@@ -268,7 +268,7 @@ macro_rules! biased_match (\n biased_match!((x)       ~ (good_1(g1, val)) else { return 0 };\n               binds g1, val )\n biased_match!((g1.body) ~ (good_2(result) )\n-                  else { fail!(\"Didn't get good_2\") };\n+                  else { fail2!(\"Didn't get good_2\") };\n               binds result )\n // complicated stuff goes here\n return result + val;\n@@ -369,7 +369,7 @@ macro_rules! biased_match (\n # fn f(x: t1) -> uint {\n biased_match!(\n     (x)       ~ (good_1(g1, val)) else { return 0 };\n-    (g1.body) ~ (good_2(result) ) else { fail!(\"Didn't get good_2\") };\n+    (g1.body) ~ (good_2(result) ) else { fail2!(\"Didn't get good_2\") };\n     binds val, result )\n // complicated stuff goes here\n return result + val;"}, {"sha": "09d3469871f65dcdba7b266556cd43ff6e1c77cc", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ce31f6dd9ea52c857131fb4a10465e0f5756c67/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ce31f6dd9ea52c857131fb4a10465e0f5756c67/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=9ce31f6dd9ea52c857131fb4a10465e0f5756c67", "patch": "@@ -99,15 +99,14 @@ execution. Like any closure, the function passed to `spawn` may capture\n an environment that it carries across tasks.\n \n ~~~\n-# use std::io::println;\n # use std::task::spawn;\n # fn generate_task_number() -> int { 0 }\n // Generate some state locally\n let child_task_number = generate_task_number();\n \n do spawn {\n    // Capture it in the remote task\n-   println(fmt!(\"I am child number %d\", child_task_number));\n+   println!(\"I am child number {}\", child_task_number);\n }\n ~~~\n \n@@ -282,7 +281,7 @@ fn fib(n: uint) -> uint {\n \n let mut delayed_fib = extra::future::Future::spawn (|| fib(50) );\n make_a_sandwich();\n-println(fmt!(\"fib(50) = %?\", delayed_fib.get()))\n+println!(\"fib(50) = {:?}\", delayed_fib.get())\n ~~~\n \n The call to `future::spawn` returns immediately a `future` object regardless of how long it\n@@ -310,7 +309,7 @@ fn main() {\n     for ft in futures.mut_iter()  {\n         final_res += ft.get();\n     }\n-    println(fmt!(\"\u03c0^2/6 is not far from : %?\", final_res));\n+    println!(\"\u03c0^2/6 is not far from : {}\", final_res);\n }\n ~~~\n \n@@ -338,7 +337,7 @@ fn pnorm(nums: &~[float], p: uint) -> float {\n \n fn main() {\n     let numbers = vec::from_fn(1000000, |_| rand::random::<float>());\n-    println(fmt!(\"Inf-norm = %?\",  *numbers.iter().max().unwrap()));\n+    println!(\"Inf-norm = {}\",  *numbers.iter().max().unwrap());\n \n     let numbers_arc = Arc::new(numbers);\n \n@@ -349,7 +348,7 @@ fn main() {\n         do spawn {\n             let local_arc : Arc<~[float]> = port.recv();\n             let task_numbers = local_arc.get();\n-            println(fmt!(\"%u-norm = %?\", num, pnorm(task_numbers, num)));\n+            println!(\"{}-norm = {}\", num, pnorm(task_numbers, num));\n         }\n     }\n }"}, {"sha": "f9109fcb8ea392d741785ae3a9c6791463999986", "filename": "doc/tutorial.md", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9ce31f6dd9ea52c857131fb4a10465e0f5756c67/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ce31f6dd9ea52c857131fb4a10465e0f5756c67/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=9ce31f6dd9ea52c857131fb4a10465e0f5756c67", "patch": "@@ -225,7 +225,7 @@ let hi = \"hi\";\n let mut count = 0;\n \n while count < 10 {\n-    println(fmt!(\"count: %?\", count));\n+    println!(\"count: {}\", count);\n     count += 1;\n }\n ~~~~\n@@ -388,23 +388,26 @@ assert!(y == 4u);\n but are instead provided by the libraries. To make it clear to the reader when\n a name refers to a syntax extension, the names of all syntax extensions end\n with `!`. The standard library defines a few syntax extensions, the most\n-useful of which is `fmt!`, a `sprintf`-style text formatter that you will\n-often see in examples.\n+useful of which is [`format!`][fmt], a `sprintf`-like text formatter that you\n+will often see in examples, and its related family of macros: `print!`,\n+`println!`, and `write!`.\n \n-`fmt!` supports most of the directives that [printf][pf] supports, but unlike\n-printf, will give you a compile-time error when the types of the directives\n-don't match the types of the arguments.\n+`format!` draws syntax from python, but contains many of the same principles\n+that [printf][pf] has. Unlike printf, `format!` will give you a compile-time\n+error when the types of the directives don't match the types of the arguments.\n \n ~~~~\n # let mystery_object = ();\n \n-println(fmt!(\"%s is %d\", \"the answer\", 43));\n+// {} will print the \"default format\" of a type\n+println!(\"{} is {}\", \"the answer\", 43);\n \n-// %? will conveniently print any type\n-println(fmt!(\"what is this thing: %?\", mystery_object));\n+// {:?} will conveniently print any type\n+println!(\"what is this thing: {:?}\", mystery_object);\n ~~~~\n \n [pf]: http://en.cppreference.com/w/cpp/io/c/fprintf\n+[fmt]: http://static.rust-lang.org/doc/master/std/fmt/index.html\n \n You can define your own syntax extensions with the macro system. For details, see the [macro tutorial][macros].\n \n@@ -737,7 +740,7 @@ fn area(sh: Shape) -> float {\n     match sh {\n         Circle { radius: radius, _ } => float::consts::pi * square(radius),\n         Rectangle { top_left: top_left, bottom_right: bottom_right } => {\n-            (bottom_right.x - top_left.x) * (top_left.y - bottom_right.y) \n+            (bottom_right.x - top_left.x) * (top_left.y - bottom_right.y)\n         }\n     }\n }\n@@ -753,7 +756,7 @@ unit, `()`, as the empty tuple if you like).\n ~~~~\n let mytup: (int, int, float) = (10, 20, 30.0);\n match mytup {\n-  (a, b, c) => info!(a + b + (c as int))\n+  (a, b, c) => info2!(\"{}\", a + b + (c as int))\n }\n ~~~~\n \n@@ -769,7 +772,7 @@ For example:\n struct MyTup(int, int, float);\n let mytup: MyTup = MyTup(10, 20, 30.0);\n match mytup {\n-  MyTup(a, b, c) => info!(a + b + (c as int))\n+  MyTup(a, b, c) => info2!(\"{}\", a + b + (c as int))\n }\n ~~~~\n \n@@ -1238,7 +1241,7 @@ something silly like\n ~~~\n # struct Point { x: float, y: float }\n let point = &@~Point { x: 10f, y: 20f };\n-println(fmt!(\"%f\", point.x));\n+println!(\"{:f}\", point.x);\n ~~~\n \n The indexing operator (`[]`) also auto-dereferences.\n@@ -1443,7 +1446,7 @@ the enclosing scope.\n fn call_closure_with_ten(b: &fn(int)) { b(10); }\n \n let captured_var = 20;\n-let closure = |arg| println(fmt!(\"captured_var=%d, arg=%d\", captured_var, arg));\n+let closure = |arg| println!(\"captured_var={}, arg={}\", captured_var, arg);\n \n call_closure_with_ten(closure);\n ~~~~\n@@ -1566,7 +1569,7 @@ arguments.\n use std::task::spawn;\n \n do spawn() || {\n-    debug!(\"I'm a task, whatever\");\n+    debug2!(\"I'm a task, whatever\");\n }\n ~~~~\n \n@@ -1578,7 +1581,7 @@ may be omitted from `do` expressions.\n use std::task::spawn;\n \n do spawn {\n-   debug!(\"Kablam!\");\n+   debug2!(\"Kablam!\");\n }\n ~~~~\n \n@@ -1916,7 +1919,7 @@ and `~str`.\n ~~~~\n # trait Printable { fn print(&self); }\n impl Printable for int {\n-    fn print(&self) { println(fmt!(\"%d\", *self)) }\n+    fn print(&self) { println!(\"{}\", *self) }\n }\n \n impl Printable for ~str {"}]}