{"sha": "36be251a35512d98cc50afc4b73b3ea7ec1271ff", "node_id": "C_kwDOAAsO6NoAKDM2YmUyNTFhMzU1MTJkOThjYzUwYWZjNGI3M2IzZWE3ZWMxMjcxZmY", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-05T15:04:43Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-05T15:24:13Z"}, "message": "Merge `QueryDescription` into `QueryConfig`\n\n`QueryDescription` has gone through a lot of refactoring and doesn't\nmake sense anymore.", "tree": {"sha": "c7aa2432e1ea7f99f08187dad051d224769373ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7aa2432e1ea7f99f08187dad051d224769373ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36be251a35512d98cc50afc4b73b3ea7ec1271ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgbSfWKRQb2tiqhuHtakDJeupmrF\nChDbM0msU+PXaBOk8AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQFaasHzIRvT24kJ3nyeediNIaPjMhF/cU0iDIK/eKqK9t1r/zykYslLsnE6NCmpcnR\niqBUTIeyGAAFdZI3Xo6ww=\n-----END SSH SIGNATURE-----", "payload": "tree c7aa2432e1ea7f99f08187dad051d224769373ff\nparent 452cf4f7109f58433ac38be7d3da527408571054\nauthor Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1667660683 +0100\ncommitter Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1667661853 +0100\n\nMerge `QueryDescription` into `QueryConfig`\n\n`QueryDescription` has gone through a lot of refactoring and doesn't\nmake sense anymore.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36be251a35512d98cc50afc4b73b3ea7ec1271ff", "html_url": "https://github.com/rust-lang/rust/commit/36be251a35512d98cc50afc4b73b3ea7ec1271ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36be251a35512d98cc50afc4b73b3ea7ec1271ff/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "452cf4f7109f58433ac38be7d3da527408571054", "url": "https://api.github.com/repos/rust-lang/rust/commits/452cf4f7109f58433ac38be7d3da527408571054", "html_url": "https://github.com/rust-lang/rust/commit/452cf4f7109f58433ac38be7d3da527408571054"}], "stats": {"total": 87, "additions": 42, "deletions": 45}, "files": [{"sha": "18cb0e0ca0b155695fee806e71ca57909cd9fb99", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36be251a35512d98cc50afc4b73b3ea7ec1271ff/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36be251a35512d98cc50afc4b73b3ea7ec1271ff/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=36be251a35512d98cc50afc4b73b3ea7ec1271ff", "patch": "@@ -36,7 +36,7 @@ mod keys;\n use keys::Key;\n \n pub use rustc_query_system::query::QueryConfig;\n-pub(crate) use rustc_query_system::query::{QueryDescription, QueryVTable};\n+pub(crate) use rustc_query_system::query::QueryVTable;\n \n mod on_disk_cache;\n pub use on_disk_cache::OnDiskCache;"}, {"sha": "a6cb8f7bd5532705b929242b7e3cd24c193c8c78", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36be251a35512d98cc50afc4b73b3ea7ec1271ff/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36be251a35512d98cc50afc4b73b3ea7ec1271ff/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=36be251a35512d98cc50afc4b73b3ea7ec1271ff", "patch": "@@ -1063,7 +1063,7 @@ pub fn encode_query_results<'a, 'tcx, CTX, Q>(\n     query_result_index: &mut EncodedDepNodeIndex,\n ) where\n     CTX: QueryContext + 'tcx,\n-    Q: super::QueryDescription<CTX>,\n+    Q: super::QueryConfig<CTX>,\n     Q::Value: Encodable<CacheEncoder<'a, 'tcx>>,\n {\n     let _timer = tcx"}, {"sha": "992e777904e6b94eefe05072c5bcb3520c7a5303", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/36be251a35512d98cc50afc4b73b3ea7ec1271ff/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36be251a35512d98cc50afc4b73b3ea7ec1271ff/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=36be251a35512d98cc50afc4b73b3ea7ec1271ff", "patch": "@@ -17,8 +17,7 @@ use rustc_middle::ty::{self, TyCtxt};\n use rustc_query_system::dep_graph::{DepNodeParams, HasDepContext};\n use rustc_query_system::ich::StableHashingContext;\n use rustc_query_system::query::{\n-    force_query, QueryConfig, QueryContext, QueryDescription, QueryJobId, QueryMap,\n-    QuerySideEffects, QueryStackFrame,\n+    force_query, QueryConfig, QueryContext, QueryJobId, QueryMap, QuerySideEffects, QueryStackFrame,\n };\n use rustc_query_system::{LayoutOfDepth, QueryOverflow, Value};\n use rustc_serialize::Decodable;\n@@ -340,7 +339,7 @@ pub(crate) fn create_query_frame<\n \n fn try_load_from_on_disk_cache<'tcx, Q>(tcx: TyCtxt<'tcx>, dep_node: DepNode)\n where\n-    Q: QueryDescription<QueryCtxt<'tcx>>,\n+    Q: QueryConfig<QueryCtxt<'tcx>>,\n     Q::Key: DepNodeParams<TyCtxt<'tcx>>,\n {\n     debug_assert!(tcx.dep_graph.is_green(&dep_node));\n@@ -365,7 +364,7 @@ where\n \n fn force_from_dep_node<'tcx, Q>(tcx: TyCtxt<'tcx>, dep_node: DepNode) -> bool\n where\n-    Q: QueryDescription<QueryCtxt<'tcx>>,\n+    Q: QueryConfig<QueryCtxt<'tcx>>,\n     Q::Key: DepNodeParams<TyCtxt<'tcx>>,\n     Q::Value: Value<TyCtxt<'tcx>>,\n {\n@@ -398,12 +397,9 @@ where\n     }\n }\n \n-pub(crate) fn query_callback<'tcx, Q: QueryConfig>(\n-    is_anon: bool,\n-    is_eval_always: bool,\n-) -> DepKindStruct<'tcx>\n+pub(crate) fn query_callback<'tcx, Q>(is_anon: bool, is_eval_always: bool) -> DepKindStruct<'tcx>\n where\n-    Q: QueryDescription<QueryCtxt<'tcx>>,\n+    Q: QueryConfig<QueryCtxt<'tcx>>,\n     Q::Key: DepNodeParams<TyCtxt<'tcx>>,\n {\n     let fingerprint_style = Q::Key::fingerprint_style();\n@@ -458,14 +454,12 @@ macro_rules! define_queries {\n             })*\n         }\n \n-        $(impl<'tcx> QueryConfig for queries::$name<'tcx> {\n+        $(impl<'tcx> QueryConfig<QueryCtxt<'tcx>> for queries::$name<'tcx> {\n             type Key = query_keys::$name<'tcx>;\n             type Value = query_values::$name<'tcx>;\n             type Stored = query_stored::$name<'tcx>;\n             const NAME: &'static str = stringify!($name);\n-        }\n \n-        impl<'tcx> QueryDescription<QueryCtxt<'tcx>> for queries::$name<'tcx> {\n             #[inline]\n             fn cache_on_disk(tcx: TyCtxt<'tcx>, key: &Self::Key) -> bool {\n                 ::rustc_middle::query::cached::$name(tcx, key)\n@@ -662,12 +656,15 @@ macro_rules! define_queries_struct {\n             local_providers: Box<Providers>,\n             extern_providers: Box<ExternProviders>,\n             query_structs: Vec<$crate::plumbing::QueryStruct<'tcx>>,\n-\n             pub on_disk_cache: Option<OnDiskCache<'tcx>>,\n-\n             jobs: AtomicU64,\n \n-            $($(#[$attr])*  $name: QueryState<<queries::$name<'tcx> as QueryConfig>::Key>,)*\n+            $(\n+                $(#[$attr])*\n+                $name: QueryState<\n+                    <queries::$name<'tcx> as QueryConfig<QueryCtxt<'tcx>>>::Key\n+                >,\n+            )*\n         }\n \n         impl<'tcx> Queries<'tcx> {\n@@ -704,7 +701,7 @@ macro_rules! define_queries_struct {\n                 &'tcx self,\n                 tcx: TyCtxt<'tcx>,\n                 span: Span,\n-                key: <queries::$name<'tcx> as QueryConfig>::Key,\n+                key: <queries::$name<'tcx> as QueryConfig<QueryCtxt<'tcx>>>::Key,\n                 mode: QueryMode,\n             ) -> Option<query_stored::$name<'tcx>> {\n                 let qcx = QueryCtxt { tcx, queries: self };"}, {"sha": "db3ae559ad15d6a92bd2bc1c86c2b316b3530666", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/36be251a35512d98cc50afc4b73b3ea7ec1271ff/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36be251a35512d98cc50afc4b73b3ea7ec1271ff/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=36be251a35512d98cc50afc4b73b3ea7ec1271ff", "patch": "@@ -11,12 +11,32 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use std::fmt::Debug;\n use std::hash::Hash;\n \n-pub trait QueryConfig {\n+pub trait QueryConfig<CTX: QueryContext> {\n     const NAME: &'static str;\n \n     type Key: Eq + Hash + Clone + Debug;\n     type Value;\n     type Stored: Clone;\n+\n+    type Cache: QueryCache<Key = Self::Key, Stored = Self::Stored, Value = Self::Value>;\n+\n+    // Don't use this method to access query results, instead use the methods on TyCtxt\n+    fn query_state<'a>(tcx: CTX) -> &'a QueryState<Self::Key>\n+    where\n+        CTX: 'a;\n+\n+    // Don't use this method to access query results, instead use the methods on TyCtxt\n+    fn query_cache<'a>(tcx: CTX) -> &'a Self::Cache\n+    where\n+        CTX: 'a;\n+\n+    // Don't use this method to compute query results, instead use the methods on TyCtxt\n+    fn make_vtable(tcx: CTX, key: &Self::Key) -> QueryVTable<CTX, Self::Key, Self::Value>;\n+\n+    fn cache_on_disk(tcx: CTX::DepContext, key: &Self::Key) -> bool;\n+\n+    // Don't use this method to compute query results, instead use the methods on TyCtxt\n+    fn execute_query(tcx: CTX::DepContext, k: Self::Key) -> Self::Stored;\n }\n \n #[derive(Copy, Clone)]\n@@ -45,25 +65,3 @@ impl<CTX: QueryContext, K, V> QueryVTable<CTX, K, V> {\n         (self.compute)(tcx, key)\n     }\n }\n-\n-pub trait QueryDescription<CTX: QueryContext>: QueryConfig {\n-    type Cache: QueryCache<Key = Self::Key, Stored = Self::Stored, Value = Self::Value>;\n-\n-    // Don't use this method to access query results, instead use the methods on TyCtxt\n-    fn query_state<'a>(tcx: CTX) -> &'a QueryState<Self::Key>\n-    where\n-        CTX: 'a;\n-\n-    // Don't use this method to access query results, instead use the methods on TyCtxt\n-    fn query_cache<'a>(tcx: CTX) -> &'a Self::Cache\n-    where\n-        CTX: 'a;\n-\n-    // Don't use this method to compute query results, instead use the methods on TyCtxt\n-    fn make_vtable(tcx: CTX, key: &Self::Key) -> QueryVTable<CTX, Self::Key, Self::Value>;\n-\n-    fn cache_on_disk(tcx: CTX::DepContext, key: &Self::Key) -> bool;\n-\n-    // Don't use this method to compute query results, instead use the methods on TyCtxt\n-    fn execute_query(tcx: CTX::DepContext, k: Self::Key) -> Self::Stored;\n-}"}, {"sha": "94adef41e68fef72b732920a32dc5426306b4d1f", "filename": "compiler/rustc_query_system/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36be251a35512d98cc50afc4b73b3ea7ec1271ff/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36be251a35512d98cc50afc4b73b3ea7ec1271ff/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs?ref=36be251a35512d98cc50afc4b73b3ea7ec1271ff", "patch": "@@ -12,7 +12,7 @@ pub use self::caches::{\n };\n \n mod config;\n-pub use self::config::{QueryConfig, QueryDescription, QueryVTable};\n+pub use self::config::{QueryConfig, QueryVTable};\n \n use crate::dep_graph::{DepNodeIndex, HasDepContext, SerializedDepNodeIndex};\n use rustc_data_structures::sync::Lock;"}, {"sha": "0f7abe84231b6fd68124f2dc75617476d08e18a7", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36be251a35512d98cc50afc4b73b3ea7ec1271ff/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36be251a35512d98cc50afc4b73b3ea7ec1271ff/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=36be251a35512d98cc50afc4b73b3ea7ec1271ff", "patch": "@@ -4,7 +4,7 @@\n \n use crate::dep_graph::{DepContext, DepNode, DepNodeIndex, DepNodeParams};\n use crate::query::caches::QueryCache;\n-use crate::query::config::{QueryDescription, QueryVTable};\n+use crate::query::config::QueryVTable;\n use crate::query::job::{report_cycle, QueryInfo, QueryJob, QueryJobId, QueryJobInfo};\n use crate::query::{QueryContext, QueryMap, QuerySideEffects, QueryStackFrame};\n use crate::values::Value;\n@@ -27,6 +27,8 @@ use std::mem;\n use std::ptr;\n use thin_vec::ThinVec;\n \n+use super::QueryConfig;\n+\n pub struct QueryState<K> {\n     #[cfg(parallel_compiler)]\n     active: Sharded<FxHashMap<K, QueryResult>>,\n@@ -715,7 +717,7 @@ pub enum QueryMode {\n \n pub fn get_query<Q, CTX>(tcx: CTX, span: Span, key: Q::Key, mode: QueryMode) -> Option<Q::Stored>\n where\n-    Q: QueryDescription<CTX>,\n+    Q: QueryConfig<CTX>,\n     Q::Key: DepNodeParams<CTX::DepContext>,\n     Q::Value: Value<CTX::DepContext>,\n     CTX: QueryContext,\n@@ -748,7 +750,7 @@ where\n \n pub fn force_query<Q, CTX>(tcx: CTX, key: Q::Key, dep_node: DepNode<CTX::DepKind>)\n where\n-    Q: QueryDescription<CTX>,\n+    Q: QueryConfig<CTX>,\n     Q::Key: DepNodeParams<CTX::DepContext>,\n     Q::Value: Value<CTX::DepContext>,\n     CTX: QueryContext,"}]}