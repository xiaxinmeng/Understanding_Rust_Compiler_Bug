{"sha": "b68cd6eda20d99e0db9d00f96cff0b16a305a5ac", "node_id": "C_kwDOAAsO6NoAKGI2OGNkNmVkYTIwZDk5ZTBkYjlkMDBmOTZjZmYwYjE2YTMwNWE1YWM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-02T11:21:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-02T11:21:59Z"}, "message": "Merge #10891\n\n10891: fix: emit trait names in moniker identifier r=Veykril a=tjdevries\n\nHi,\r\n\r\nNot sure if this is the best fix for the problem, but I noticed that functions that part of a trait are not namespaced with the trait name, so this could lead to problems if you had a function and a trait-function both defined in the same module.\r\n\r\nThanks!\r\n\r\nTJ\n\nCo-authored-by: TJ DeVries <devries.timothyj@gmail.com>", "tree": {"sha": "bb1edab526cc8ca43fee4142671fa3bf0b15dbfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb1edab526cc8ca43fee4142671fa3bf0b15dbfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b68cd6eda20d99e0db9d00f96cff0b16a305a5ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhqKxXCRBK7hj4Ov3rIwAAQukIAJMPZ/d3Kk6dZNUEbf1CaV2h\nGasgQz6PQHrVhodmEKu3oiOKgk3aZBbCohmg9T1xjq/2+JJZ87jo7PIVC4UlMQ9L\nyYHuOfNid4nThh0fsENuqVxxXrjzBvBkL1CqzlAMWYv2bNZKmK9OfDjVq4oFCJWr\nkt5JOtCcng0Mm/iEKZyAfaCe5/CtGCyRu7vHOJqmZVZkO8do7zVQcpWviT7VyLr8\nahbDkI8N4sguze8FB0swNXZ74wig84J9V0cYwVunCd1IZUG1yIgirq4SibpK9PcT\n+UTqndvXHoVCGRnAf8CdPETedFhLjKiBsxrnMk77uidmHQ1pagQSzUcmodgkwOQ=\n=mDT7\n-----END PGP SIGNATURE-----\n", "payload": "tree bb1edab526cc8ca43fee4142671fa3bf0b15dbfb\nparent 4691a0647b2c96cc475d8bbe7c31fe194d1443e7\nparent 6870bfd09951896b7115cff4c6817dd7c29da86f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1638444119 +0000\ncommitter GitHub <noreply@github.com> 1638444119 +0000\n\nMerge #10891\n\n10891: fix: emit trait names in moniker identifier r=Veykril a=tjdevries\n\nHi,\r\n\r\nNot sure if this is the best fix for the problem, but I noticed that functions that part of a trait are not namespaced with the trait name, so this could lead to problems if you had a function and a trait-function both defined in the same module.\r\n\r\nThanks!\r\n\r\nTJ\n\nCo-authored-by: TJ DeVries <devries.timothyj@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b68cd6eda20d99e0db9d00f96cff0b16a305a5ac", "html_url": "https://github.com/rust-lang/rust/commit/b68cd6eda20d99e0db9d00f96cff0b16a305a5ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b68cd6eda20d99e0db9d00f96cff0b16a305a5ac/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4691a0647b2c96cc475d8bbe7c31fe194d1443e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4691a0647b2c96cc475d8bbe7c31fe194d1443e7", "html_url": "https://github.com/rust-lang/rust/commit/4691a0647b2c96cc475d8bbe7c31fe194d1443e7"}, {"sha": "6870bfd09951896b7115cff4c6817dd7c29da86f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6870bfd09951896b7115cff4c6817dd7c29da86f", "html_url": "https://github.com/rust-lang/rust/commit/6870bfd09951896b7115cff4c6817dd7c29da86f"}], "stats": {"total": 101, "additions": 100, "deletions": 1}, "files": [{"sha": "c93c471f4948e7cf8e75bb31c9337c13367f1cf1", "filename": "crates/ide/src/moniker.rs", "status": "modified", "additions": 100, "deletions": 1, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/b68cd6eda20d99e0db9d00f96cff0b16a305a5ac/crates%2Fide%2Fsrc%2Fmoniker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b68cd6eda20d99e0db9d00f96cff0b16a305a5ac/crates%2Fide%2Fsrc%2Fmoniker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmoniker.rs?ref=b68cd6eda20d99e0db9d00f96cff0b16a305a5ac", "patch": "@@ -1,7 +1,7 @@\n //! This module generates [moniker](https://microsoft.github.io/language-server-protocol/specifications/lsif/0.6.0/specification/#exportsImports)\n //! for LSIF and LSP.\n \n-use hir::{db::DefDatabase, Crate, Name, Semantics};\n+use hir::{db::DefDatabase, AsAssocItem, AssocItemContainer, Crate, Name, Semantics};\n use ide_db::{\n     base_db::{CrateOrigin, FileId, FileLoader, FilePosition},\n     defs::Definition,\n@@ -106,9 +106,34 @@ pub(crate) fn def_to_moniker(\n     let krate = module.krate();\n     let mut path = vec![];\n     path.extend(module.path_to_root(db).into_iter().filter_map(|x| x.name(db)));\n+\n+    // Handle associated items within a trait\n+    if let Some(assoc) = def.as_assoc_item(db) {\n+        let container = assoc.container(db);\n+        match container {\n+            AssocItemContainer::Trait(trait_) => {\n+                // Because different traits can have functions with the same name,\n+                // we have to include the trait name as part of the moniker for uniqueness.\n+                path.push(trait_.name(db));\n+            }\n+            AssocItemContainer::Impl(impl_) => {\n+                // Because a struct can implement multiple traits, for implementations\n+                // we add both the struct name and the trait name to the path\n+                if let Some(adt) = impl_.self_ty(db).as_adt() {\n+                    path.push(adt.name(db));\n+                }\n+\n+                if let Some(trait_) = impl_.trait_(db) {\n+                    path.push(trait_.name(db));\n+                }\n+            }\n+        }\n+    }\n+\n     if let Definition::Field(it) = def {\n         path.push(it.parent_def(db).name(db));\n     }\n+\n     path.push(def.name(db)?);\n     Some(MonikerResult {\n         identifier: MonikerIdentifier {\n@@ -192,6 +217,80 @@ pub mod module {\n         );\n     }\n \n+    #[test]\n+    fn moniker_for_trait() {\n+        check_moniker(\n+            r#\"\n+//- /foo/lib.rs crate:foo@CratesIo:0.1.0,https://a.b/foo.git\n+pub mod module {\n+    pub trait MyTrait {\n+        pub fn func$0() {}\n+    }\n+}\n+\"#,\n+            \"foo::module::MyTrait::func\",\n+            r#\"PackageInformation { name: \"foo\", repo: \"https://a.b/foo.git\", version: \"0.1.0\" }\"#,\n+            MonikerKind::Export,\n+        );\n+    }\n+\n+    #[test]\n+    fn moniker_for_trait_constant() {\n+        check_moniker(\n+            r#\"\n+//- /foo/lib.rs crate:foo@CratesIo:0.1.0,https://a.b/foo.git\n+pub mod module {\n+    pub trait MyTrait {\n+        const MY_CONST$0: u8;\n+    }\n+}\n+\"#,\n+            \"foo::module::MyTrait::MY_CONST\",\n+            r#\"PackageInformation { name: \"foo\", repo: \"https://a.b/foo.git\", version: \"0.1.0\" }\"#,\n+            MonikerKind::Export,\n+        );\n+    }\n+\n+    #[test]\n+    fn moniker_for_trait_type() {\n+        check_moniker(\n+            r#\"\n+//- /foo/lib.rs crate:foo@CratesIo:0.1.0,https://a.b/foo.git\n+pub mod module {\n+    pub trait MyTrait {\n+        type MyType$0;\n+    }\n+}\n+\"#,\n+            \"foo::module::MyTrait::MyType\",\n+            r#\"PackageInformation { name: \"foo\", repo: \"https://a.b/foo.git\", version: \"0.1.0\" }\"#,\n+            MonikerKind::Export,\n+        );\n+    }\n+\n+    #[test]\n+    fn moniker_for_trait_impl_function() {\n+        check_moniker(\n+            r#\"\n+//- /foo/lib.rs crate:foo@CratesIo:0.1.0,https://a.b/foo.git\n+pub mod module {\n+    pub trait MyTrait {\n+        pub fn func() {}\n+    }\n+\n+    struct MyStruct {}\n+\n+    impl MyTrait for MyStruct {\n+        pub fn func$0() {}\n+    }\n+}\n+\"#,\n+            \"foo::module::MyStruct::MyTrait::func\",\n+            r#\"PackageInformation { name: \"foo\", repo: \"https://a.b/foo.git\", version: \"0.1.0\" }\"#,\n+            MonikerKind::Export,\n+        );\n+    }\n+\n     #[test]\n     fn moniker_for_field() {\n         check_moniker("}]}