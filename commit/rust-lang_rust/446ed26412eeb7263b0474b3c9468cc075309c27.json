{"sha": "446ed26412eeb7263b0474b3c9468cc075309c27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NmVkMjY0MTJlZWI3MjYzYjA0NzRiM2M5NDY4Y2MwNzUzMDljMjc=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-29T10:24:58Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-29T10:26:20Z"}, "message": "Add at least the program name argument in order to get rustc tests a little further", "tree": {"sha": "3a116b255ca3e179f35a93700fa4533703309459", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a116b255ca3e179f35a93700fa4533703309459"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/446ed26412eeb7263b0474b3c9468cc075309c27", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlmlQUwACgkQpp+NIls6\n19mHtQ/+Oc1JWyhlifdt+ALjsfgLbP1jW3E0jY1/nR517jREkm9+4+OY4vVo8iJk\neWMh2yCPHWmHYH5g/FN/u1aIT7e3W/T4hw7xcgcDuIft4gKHmkcyRDOJxXBbh0Ky\nJXBDCnvUQdExdwEkHlNv/DHSV4nkC3Gt8L7AnmIX9fr/e4gaNlZRoxRwwoWpUcDF\nG+/csZ9y7NCU4tCZUgsyaCkQzwEmnBYOGXzL8jG5OlNz8h0jJeG+bY8bgrk5Gyks\n7ydyry6iWOJopknOaeQxlbIN37jqR5LrLnn7gmgemuUxQTf3yQrG7pJtIxpnwAMT\np6BoNXh/lDntcylZcbj2M0B4nbEgZgnII9bEryJrSS7qHSAiEeMKjpDTz/8Yhhe0\nOynjlaeJG1cJ+rHJVLBP7/vcYkcceyrGuI1E1aVfV5GTNLfDnZySHPBYt73Ss6Y0\nI1dSLAz2uLa79GX4cPg6MkyzItFkpeeTs9xE9CMYVUbk+fYVwCzdk/eT87jVkvgl\nrYRLMSkLXqCDTfSAIUBOXpw1OXCPSk/j3nx2JLBPzw4i3a/ahEaICy3VQqug0HNm\nbwykjsuaIjDNcOlybTISD1xPsf6mzXGzhM1xVrrKukcPOojApRr7zZwEr8l5BtHz\naJ7/BSfzhCb5a+4OHJWmixf/4AT3IwGiFTv2OqjO8ywIGcTVFr4=\n=o47n\n-----END PGP SIGNATURE-----", "payload": "tree 3a116b255ca3e179f35a93700fa4533703309459\nparent 506a5c79102298ac21d7b2498a874f2f5b4581fa\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1504002298 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1504002380 +0200\n\nAdd at least the program name argument in order to get rustc tests a little further\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/446ed26412eeb7263b0474b3c9468cc075309c27", "html_url": "https://github.com/rust-lang/rust/commit/446ed26412eeb7263b0474b3c9468cc075309c27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/446ed26412eeb7263b0474b3c9468cc075309c27/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "506a5c79102298ac21d7b2498a874f2f5b4581fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/506a5c79102298ac21d7b2498a874f2f5b4581fa", "html_url": "https://github.com/rust-lang/rust/commit/506a5c79102298ac21d7b2498a874f2f5b4581fa"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "a824f47a509f54cf410c1f223ca8c0243117109f", "filename": "miri/lib.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/446ed26412eeb7263b0474b3c9468cc075309c27/miri%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/446ed26412eeb7263b0474b3c9468cc075309c27/miri%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Flib.rs?ref=446ed26412eeb7263b0474b3c9468cc075309c27", "patch": "@@ -15,6 +15,7 @@ use rustc::ty::layout::Layout;\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n \n+use syntax::ast::Mutability;\n use syntax::codemap::Span;\n \n use std::collections::{HashMap, BTreeMap};\n@@ -98,15 +99,21 @@ pub fn eval_main<'a, 'tcx: 'a>(\n                 dest,\n             )?;\n \n-            // Second argument (argc): 0\n+            // Second argument (argc): 1\n             let dest = ecx.eval_lvalue(&mir::Lvalue::Local(args.next().unwrap()))?;\n             let ty = ecx.tcx.types.isize;\n-            ecx.write_null(dest, ty)?;\n+            ecx.write_primval(dest, PrimVal::Bytes(1), ty)?;\n \n-            // Third argument (argv): 0\n+            // FIXME: extract main source file path\n+            // Third argument (argv): &[b\"foo\"]\n             let dest = ecx.eval_lvalue(&mir::Lvalue::Local(args.next().unwrap()))?;\n             let ty = ecx.tcx.mk_imm_ptr(ecx.tcx.mk_imm_ptr(ecx.tcx.types.u8));\n-            ecx.write_null(dest, ty)?;\n+            let foo = ecx.memory.allocate_cached(b\"foo\\0\")?;\n+            let ptr_size = ecx.memory.pointer_size();\n+            let foo_ptr = ecx.memory.allocate(ptr_size * 1, ptr_size, MemoryKind::UninitializedStatic)?;\n+            ecx.memory.write_primval(foo_ptr.into(), PrimVal::Ptr(foo.into()), ptr_size, false)?;\n+            ecx.memory.mark_static_initalized(foo_ptr.alloc_id, Mutability::Immutable)?;\n+            ecx.write_ptr(dest, foo_ptr.into(), ty)?;\n         } else {\n             ecx.push_stack_frame(\n                 main_instance,"}]}