{"sha": "44bf6b6f55be89926d9f18b4d90a9eaefb84d02c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YmY2YjZmNTViZTg5OTI2ZDlmMThiNGQ5MGE5ZWFlZmI4NGQwMmM=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-07-20T09:49:02Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-07-20T18:17:26Z"}, "message": "tests: Add minimal reproduction of #61963.\n\nThis commit adds a reproduction of the error reported in servo which\ndemonstrates the current, incorrect behaviour.\n\nCo-authored-by: R\u00e9my Raki\u0107 <remy.rakic@gmail.com>", "tree": {"sha": "e28db596f6d7e4d3002f8e8e1ff9fdc0d7325773", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e28db596f6d7e4d3002f8e8e1ff9fdc0d7325773"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44bf6b6f55be89926d9f18b4d90a9eaefb84d02c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl0zWrkACgkQJZLnbIc4\nH9mscRAAhSyMFq6yGGesfNozpveIac7Jies+WjlR+dvNLV5DSEXJwuxncJd9/D9c\ncik2HmazFcwUYG2n9M+EmffC1z2k9f1WtkdsrYGGI54HKs6F89Vx0QA12f1pMrAU\nc0GtE2mBaFTAQ91qooYnMUtBTqy8UYdMRam02kkQCaOSxOBXIoWo2kWZ+L1yU+bV\nzAmlyMmSDg2PVatdpDydeEV2OrIF7aAJ/oltvO0RuOF5bdiQx8+PP6wePJ5Ycnx8\nTU4S0+nxdfFcT5R6KL6y65J/HaSmM7yoAp4y3EGJAetS3G8VLFQiJvvl4g/9gmDe\nidTzmRa3acsr2i/dhC8t13rhBbhoKsssXLEQGf/sHZtLAntCJzxh53GhmRhbuYqV\ngghKxXCNp7dYnSyEqZdvVW17Y/JKwIzlRS3oCC0c7SLwqNWfVg687PM0wsdvgXx2\nfhr2AYisqoFm6aE37Zrr3LCfC9LI75/G+2ichRZyldzWEfsMMpLDlI+N1YkjxdHn\neWCo6g/WbeDLtmqAT4cbhtkdFnmSJS+4t8mQ8v4HjFS11frcykdryr/RHdQgOJJG\nUJ3Q6cfXoCbQCp2Neg2sBj4c6RQ+rZateqbDjhDckHfODJ1b8a03YyDkxR+clGmB\nwNhLWCId8wrPesveDpWfVUOvepCsOffvaOXJsD56FyKHRkbtaiM=\n=QH+o\n-----END PGP SIGNATURE-----", "payload": "tree e28db596f6d7e4d3002f8e8e1ff9fdc0d7325773\nparent e9d22273283dce210b26362aa0dcc3fc10bf7e81\nauthor David Wood <david@davidtw.co> 1563616142 +0100\ncommitter David Wood <david@davidtw.co> 1563646646 +0100\n\ntests: Add minimal reproduction of #61963.\n\nThis commit adds a reproduction of the error reported in servo which\ndemonstrates the current, incorrect behaviour.\n\nCo-authored-by: R\u00e9my Raki\u0107 <remy.rakic@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44bf6b6f55be89926d9f18b4d90a9eaefb84d02c", "html_url": "https://github.com/rust-lang/rust/commit/44bf6b6f55be89926d9f18b4d90a9eaefb84d02c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44bf6b6f55be89926d9f18b4d90a9eaefb84d02c/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9d22273283dce210b26362aa0dcc3fc10bf7e81", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9d22273283dce210b26362aa0dcc3fc10bf7e81", "html_url": "https://github.com/rust-lang/rust/commit/e9d22273283dce210b26362aa0dcc3fc10bf7e81"}], "stats": {"total": 126, "additions": 126, "deletions": 0}, "files": [{"sha": "6c2df7e84e07c4dacb17221dc808ba1b6ebff9d8", "filename": "src/test/ui/suggestions/auxiliary/issue-61963-1.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/44bf6b6f55be89926d9f18b4d90a9eaefb84d02c/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fissue-61963-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44bf6b6f55be89926d9f18b4d90a9eaefb84d02c/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fissue-61963-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fissue-61963-1.rs?ref=44bf6b6f55be89926d9f18b4d90a9eaefb84d02c", "patch": "@@ -0,0 +1,40 @@\n+// force-host\n+// no-prefer-dynamic\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::{Group, TokenStream, TokenTree};\n+\n+// This macro exists as part of a reproduction of #61963 but without using quote/syn/proc_macro2.\n+\n+#[proc_macro_derive(DomObject)]\n+pub fn expand_token_stream(input: TokenStream) -> TokenStream {\n+    // Construct a dummy span - `#0 bytes(0..0)` - which is present in the input because\n+    // of the specially crafted generated tokens in the `attribute-crate` proc-macro.\n+    let dummy_span = input.clone().into_iter().nth(0).unwrap().span();\n+\n+    // Define what the macro would output if constructed properly from the source using syn/quote.\n+    let output: TokenStream = \"impl Bar for ((), Qux<Qux<Baz> >) { }\n+    impl Bar for ((), Box<Bar>) { }\".parse().unwrap();\n+\n+    let mut tokens: Vec<_> = output.into_iter().collect();\n+    // Adjust token spans to match the original crate (which would use `quote`). Some of the\n+    // generated tokens point to the dummy span.\n+    for token in tokens.iter_mut() {\n+        if let TokenTree::Group(group) = token {\n+            let mut tokens: Vec<_> = group.stream().into_iter().collect();\n+            for token in tokens.iter_mut().skip(2) {\n+                token.set_span(dummy_span);\n+            }\n+\n+            let mut stream = TokenStream::new();\n+            stream.extend(tokens);\n+            *group = Group::new(group.delimiter(), stream);\n+        }\n+    }\n+\n+    let mut output = TokenStream::new();\n+    output.extend(tokens);\n+    output\n+}"}, {"sha": "e86f1610ab0d0459a2651ef3780f966dc4b5c3c8", "filename": "src/test/ui/suggestions/auxiliary/issue-61963.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/44bf6b6f55be89926d9f18b4d90a9eaefb84d02c/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fissue-61963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44bf6b6f55be89926d9f18b4d90a9eaefb84d02c/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fissue-61963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fissue-61963.rs?ref=44bf6b6f55be89926d9f18b4d90a9eaefb84d02c", "patch": "@@ -0,0 +1,41 @@\n+// force-host\n+// no-prefer-dynamic\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::{Group, Spacing, Punct, TokenTree, TokenStream};\n+\n+// This macro exists as part of a reproduction of #61963 but without using quote/syn/proc_macro2.\n+\n+#[proc_macro_attribute]\n+pub fn dom_struct(_: TokenStream, input: TokenStream) -> TokenStream {\n+    // Construct the expected output tokens - the input but with a `#[derive(DomObject)]` applied.\n+    let attributes: TokenStream =\n+        \"#[derive(DomObject)]\".to_string().parse().unwrap();\n+    let output: TokenStream = attributes.into_iter()\n+        .chain(input.into_iter()).collect();\n+\n+    let mut tokens: Vec<_> = output.into_iter().collect();\n+    // Adjust the spacing of `>` tokens to match what `quote` would produce.\n+    for token in tokens.iter_mut() {\n+        if let TokenTree::Group(group) = token {\n+            let mut tokens: Vec<_> = group.stream().into_iter().collect();\n+            for token in tokens.iter_mut() {\n+                if let TokenTree::Punct(p) = token {\n+                    if p.as_char() == '>' {\n+                        *p = Punct::new('>', Spacing::Alone);\n+                    }\n+                }\n+            }\n+\n+            let mut stream = TokenStream::new();\n+            stream.extend(tokens);\n+            *group = Group::new(group.delimiter(), stream);\n+        }\n+    }\n+\n+    let mut output = TokenStream::new();\n+    output.extend(tokens);\n+    output\n+}"}, {"sha": "540a7c42d2fd3e67824fb1b1ce37800901cf91e1", "filename": "src/test/ui/suggestions/issue-61963.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/44bf6b6f55be89926d9f18b4d90a9eaefb84d02c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44bf6b6f55be89926d9f18b4d90a9eaefb84d02c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs?ref=44bf6b6f55be89926d9f18b4d90a9eaefb84d02c", "patch": "@@ -0,0 +1,25 @@\n+// aux-build:issue-61963.rs\n+// aux-build:issue-61963-1.rs\n+#![deny(bare_trait_objects)]\n+\n+#[macro_use]\n+extern crate issue_61963;\n+#[macro_use]\n+extern crate issue_61963_1;\n+\n+// This test checks that the bare trait object lint does not trigger on macro attributes that\n+// generate code which would trigger the lint.\n+\n+pub struct Baz;\n+pub trait Bar { }\n+pub struct Qux<T>(T);\n+\n+#[dom_struct]\n+//~^ ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n+pub struct Foo {\n+    qux: Qux<Qux<Baz>>,\n+    bar: Box<Bar>,\n+    //~^ ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n+}\n+\n+fn main() {}"}, {"sha": "261b384ca57169a96dc0aa509995c4eac98b67c1", "filename": "src/test/ui/suggestions/issue-61963.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/44bf6b6f55be89926d9f18b4d90a9eaefb84d02c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44bf6b6f55be89926d9f18b4d90a9eaefb84d02c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr?ref=44bf6b6f55be89926d9f18b4d90a9eaefb84d02c", "patch": "@@ -0,0 +1,20 @@\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/issue-61963.rs:21:14\n+   |\n+LL |     bar: Box<Bar>,\n+   |              ^^^ help: use `dyn`: `dyn Bar`\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-61963.rs:3:9\n+   |\n+LL | #![deny(bare_trait_objects)]\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/issue-61963.rs:17:1\n+   |\n+LL | #[dom_struct]\n+   | ^^^^^^^^^^^^^ help: use `dyn`: `dyn #[dom_struct]`\n+\n+error: aborting due to 2 previous errors\n+"}]}