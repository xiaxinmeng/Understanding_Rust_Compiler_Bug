{"sha": "5c424ba34ad8b45cfba4619832d23b0278ede696", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNDI0YmEzNGFkOGI0NWNmYmE0NjE5ODMyZDIzYjAyNzhlZGU2OTY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-05-01T13:35:06Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-05-02T12:54:55Z"}, "message": "syntax: store char literals/tokens as `char`s rather than u32s.\n\nClearly storing them as `char` is semantically nicer, but this also\nfixes a bug whereby `quote_expr!(cx, 'a')` wasn't working, because the\ncode created by quotation was not matching the actual AST definitions.", "tree": {"sha": "bd4d05b358352d1b306044a04545386bf3ded77e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd4d05b358352d1b306044a04545386bf3ded77e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c424ba34ad8b45cfba4619832d23b0278ede696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c424ba34ad8b45cfba4619832d23b0278ede696", "html_url": "https://github.com/rust-lang/rust/commit/5c424ba34ad8b45cfba4619832d23b0278ede696", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c424ba34ad8b45cfba4619832d23b0278ede696/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "239557de6de72748a5c7604081b202d53f7d9ac9", "url": "https://api.github.com/repos/rust-lang/rust/commits/239557de6de72748a5c7604081b202d53f7d9ac9", "html_url": "https://github.com/rust-lang/rust/commit/239557de6de72748a5c7604081b202d53f7d9ac9"}], "stats": {"total": 32, "additions": 13, "deletions": 19}, "files": [{"sha": "06d768b4342503f6746601d0c84f5ed6de149bac", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c424ba34ad8b45cfba4619832d23b0278ede696/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c424ba34ad8b45cfba4619832d23b0278ede696/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=5c424ba34ad8b45cfba4619832d23b0278ede696", "patch": "@@ -26,7 +26,6 @@ use rustc::metadata::decoder;\n \n use std::local_data;\n use std::strbuf::StrBuf;\n-use std;\n \n use core;\n use doctree;\n@@ -1246,7 +1245,7 @@ fn lit_to_str(lit: &ast::Lit) -> ~str {\n     match lit.node {\n         ast::LitStr(ref st, _) => st.get().to_owned(),\n         ast::LitBinary(ref data) => format!(\"{:?}\", data.as_slice()),\n-        ast::LitChar(c) => \"'\".to_owned() + std::char::from_u32(c).unwrap().to_str() + \"'\",\n+        ast::LitChar(c) => format!(\"'{}'\", c),\n         ast::LitInt(i, _t) => i.to_str(),\n         ast::LitUint(u, _t) => u.to_str(),\n         ast::LitIntUnsuffixed(i) => i.to_str(),"}, {"sha": "49617a44a863fbd2cf00a7e62294e7c425d2b0c7", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c424ba34ad8b45cfba4619832d23b0278ede696/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c424ba34ad8b45cfba4619832d23b0278ede696/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5c424ba34ad8b45cfba4619832d23b0278ede696", "patch": "@@ -653,7 +653,7 @@ pub type Lit = Spanned<Lit_>;\n pub enum Lit_ {\n     LitStr(InternedString, StrStyle),\n     LitBinary(Rc<Vec<u8> >),\n-    LitChar(u32),\n+    LitChar(char),\n     LitInt(i64, IntTy),\n     LitUint(u64, UintTy),\n     LitIntUnsuffixed(i64),"}, {"sha": "c6349d616eca3d478fe84a6a74b6833e485aecb9", "filename": "src/libsyntax/ext/bytes.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c424ba34ad8b45cfba4619832d23b0278ede696/src%2Flibsyntax%2Fext%2Fbytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c424ba34ad8b45cfba4619832d23b0278ede696/src%2Flibsyntax%2Fext%2Fbytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbytes.rs?ref=5c424ba34ad8b45cfba4619832d23b0278ede696", "patch": "@@ -16,8 +16,6 @@ use ext::base::*;\n use ext::base;\n use ext::build::AstBuilder;\n \n-use std::char;\n-\n pub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree]) -> ~base::MacResult {\n     // Gather all argument expressions\n     let exprs = match get_exprs_from_tts(cx, sp, tts) {\n@@ -59,7 +57,7 @@ pub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree]) ->\n \n                 // char literal, push to vector expression\n                 ast::LitChar(v) => {\n-                    if char::from_u32(v).unwrap().is_ascii() {\n+                    if v.is_ascii() {\n                         bytes.push(cx.expr_u8(expr.span, v as u8));\n                     } else {\n                         cx.span_err(expr.span, \"non-ascii char literal in bytes!\")"}, {"sha": "fe7fa636e7d59c6b87b7e85c9f1e1bc11bc8c692", "filename": "src/libsyntax/ext/concat.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c424ba34ad8b45cfba4619832d23b0278ede696/src%2Flibsyntax%2Fext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c424ba34ad8b45cfba4619832d23b0278ede696/src%2Flibsyntax%2Fext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat.rs?ref=5c424ba34ad8b45cfba4619832d23b0278ede696", "patch": "@@ -14,7 +14,6 @@ use ext::base;\n use ext::build::AstBuilder;\n use parse::token;\n \n-use std::char;\n use std::strbuf::StrBuf;\n \n pub fn expand_syntax_ext(cx: &mut base::ExtCtxt,\n@@ -35,7 +34,7 @@ pub fn expand_syntax_ext(cx: &mut base::ExtCtxt,\n                         accumulator.push_str(s.get());\n                     }\n                     ast::LitChar(c) => {\n-                        accumulator.push_char(char::from_u32(c).unwrap());\n+                        accumulator.push_char(c);\n                     }\n                     ast::LitInt(i, _) | ast::LitIntUnsuffixed(i) => {\n                         accumulator.push_str(format!(\"{}\", i));"}, {"sha": "df79b1054443247f67f351a9bb3c20df64afc081", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c424ba34ad8b45cfba4619832d23b0278ede696/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c424ba34ad8b45cfba4619832d23b0278ede696/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=5c424ba34ad8b45cfba4619832d23b0278ede696", "patch": "@@ -561,7 +561,7 @@ impl<'a, 'b> Context<'a, 'b> {\n \n                 // Translate the format\n                 let fill = match arg.format.fill { Some(c) => c, None => ' ' };\n-                let fill = self.ecx.expr_lit(sp, ast::LitChar(fill as u32));\n+                let fill = self.ecx.expr_lit(sp, ast::LitChar(fill));\n                 let align = match arg.format.align {\n                     parse::AlignLeft => {\n                         self.ecx.path_global(sp, self.parsepath(\"AlignLeft\"))"}, {"sha": "c1f6e21f923c311093c84f0682952e72fbd680b8", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c424ba34ad8b45cfba4619832d23b0278ede696/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c424ba34ad8b45cfba4619832d23b0278ede696/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=5c424ba34ad8b45cfba4619832d23b0278ede696", "patch": "@@ -874,7 +874,7 @@ fn next_token_inner(rdr: &mut StringReader) -> token::Token {\n                                \"unterminated character constant\".to_owned());\n         }\n         bump(rdr); // advance curr past token\n-        return token::LIT_CHAR(c2 as u32);\n+        return token::LIT_CHAR(c2);\n       }\n       '\"' => {\n         let mut accum_str = StrBuf::new();\n@@ -1097,17 +1097,17 @@ mod test {\n \n     #[test] fn character_a() {\n         assert_eq!(setup(&mk_sh(), \"'a'\".to_owned()).next_token().tok,\n-                   token::LIT_CHAR('a' as u32));\n+                   token::LIT_CHAR('a'));\n     }\n \n     #[test] fn character_space() {\n         assert_eq!(setup(&mk_sh(), \"' '\".to_owned()).next_token().tok,\n-                   token::LIT_CHAR(' ' as u32));\n+                   token::LIT_CHAR(' '));\n     }\n \n     #[test] fn character_escaped() {\n         assert_eq!(setup(&mk_sh(), \"'\\\\n'\".to_owned()).next_token().tok,\n-                   token::LIT_CHAR('\\n' as u32));\n+                   token::LIT_CHAR('\\n'));\n     }\n \n     #[test] fn lifetime_name() {\n@@ -1128,7 +1128,7 @@ mod test {\n \n     #[test] fn nested_block_comments() {\n         assert_eq!(setup(&mk_sh(), \"/* /* */ */'a'\".to_owned()).next_token().tok,\n-                   token::LIT_CHAR('a' as u32));\n+                   token::LIT_CHAR('a'));\n     }\n \n }"}, {"sha": "519a7d141d33f411b93a4b83f3b5578165f8d41a", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c424ba34ad8b45cfba4619832d23b0278ede696/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c424ba34ad8b45cfba4619832d23b0278ede696/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=5c424ba34ad8b45cfba4619832d23b0278ede696", "patch": "@@ -18,7 +18,6 @@ use util::interner;\n \n use serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::cast;\n-use std::char;\n use std::fmt;\n use std::local_data;\n use std::path::BytesContainer;\n@@ -81,7 +80,7 @@ pub enum Token {\n     DOLLAR,\n \n     /* Literals */\n-    LIT_CHAR(u32),\n+    LIT_CHAR(char),\n     LIT_INT(i64, ast::IntTy),\n     LIT_UINT(u64, ast::UintTy),\n     LIT_INT_UNSUFFIXED(i64),\n@@ -195,7 +194,7 @@ pub fn to_str(t: &Token) -> ~str {\n       /* Literals */\n       LIT_CHAR(c) => {\n           let mut res = StrBuf::from_str(\"'\");\n-          char::from_u32(c).unwrap().escape_default(|c| {\n+          c.escape_default(|c| {\n               res.push_char(c);\n           });\n           res.push_char('\\'');"}, {"sha": "afb66ab831750864775903a7ea43613d3ee800b8", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c424ba34ad8b45cfba4619832d23b0278ede696/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c424ba34ad8b45cfba4619832d23b0278ede696/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=5c424ba34ad8b45cfba4619832d23b0278ede696", "patch": "@@ -26,7 +26,6 @@ use print::pp::{Breaks, Consistent, Inconsistent, eof};\n use print::pp;\n \n use std::cast;\n-use std::char;\n use std::io::{IoResult, MemWriter};\n use std::io;\n use std::rc::Rc;\n@@ -2196,7 +2195,7 @@ impl<'a> State<'a> {\n             ast::LitStr(ref st, style) => self.print_string(st.get(), style),\n             ast::LitChar(ch) => {\n                 let mut res = StrBuf::from_str(\"'\");\n-                char::from_u32(ch).unwrap().escape_default(|c| res.push_char(c));\n+                ch.escape_default(|c| res.push_char(c));\n                 res.push_char('\\'');\n                 word(&mut self.s, res.into_owned())\n             }"}]}