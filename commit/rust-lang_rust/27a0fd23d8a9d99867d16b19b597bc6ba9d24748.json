{"sha": "27a0fd23d8a9d99867d16b19b597bc6ba9d24748", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YTBmZDIzZDhhOWQ5OTg2N2QxNmIxOWI1OTdiYzZiYTlkMjQ3NDg=", "commit": {"author": {"name": "lf-", "email": "lf-@users.noreply.github.com", "date": "2020-12-31T12:42:59Z"}, "committer": {"name": "lf-", "email": "lf-@users.noreply.github.com", "date": "2020-12-31T12:42:59Z"}, "message": "add working dir to cargo metadata fail messages", "tree": {"sha": "208ae5e739173de50c3b809698e3156f14ef6235", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/208ae5e739173de50c3b809698e3156f14ef6235"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27a0fd23d8a9d99867d16b19b597bc6ba9d24748", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27a0fd23d8a9d99867d16b19b597bc6ba9d24748", "html_url": "https://github.com/rust-lang/rust/commit/27a0fd23d8a9d99867d16b19b597bc6ba9d24748", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27a0fd23d8a9d99867d16b19b597bc6ba9d24748/comments", "author": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53e2cdf18e155ad61262fed5dcd3d73ef343c042", "url": "https://api.github.com/repos/rust-lang/rust/commits/53e2cdf18e155ad61262fed5dcd3d73ef343c042", "html_url": "https://github.com/rust-lang/rust/commit/53e2cdf18e155ad61262fed5dcd3d73ef343c042"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "b991b59a6285abaded363f6ed362b5876b6c54a1", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/27a0fd23d8a9d99867d16b19b597bc6ba9d24748/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a0fd23d8a9d99867d16b19b597bc6ba9d24748/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=27a0fd23d8a9d99867d16b19b597bc6ba9d24748", "patch": "@@ -1,6 +1,7 @@\n //! FIXME: write short doc here\n \n use std::{\n+    convert::TryInto,\n     ffi::OsStr,\n     ops,\n     path::{Path, PathBuf},\n@@ -196,8 +197,23 @@ impl CargoWorkspace {\n         if let Some(target) = target {\n             meta.other_options(vec![String::from(\"--filter-platform\"), target]);\n         }\n+\n         let mut meta = meta.exec().with_context(|| {\n-            format!(\"Failed to run `cargo metadata --manifest-path {}`\", cargo_toml.display())\n+            let cwd: Option<AbsPathBuf> =\n+                std::env::current_dir().ok().and_then(|p| p.try_into().ok());\n+\n+            let workdir = cargo_toml\n+                .parent()\n+                .map(|p| p.to_path_buf())\n+                .or(cwd)\n+                .map(|dir| dir.to_string_lossy().to_string())\n+                .unwrap_or_else(|| \"<failed to get path>\".into());\n+\n+            format!(\n+                \"Failed to run `cargo metadata --manifest-path {}` in `{}`\",\n+                cargo_toml.display(),\n+                workdir\n+            )\n         })?;\n \n         let mut out_dir_by_id = FxHashMap::default();"}]}