{"sha": "fd28753e83ac0599357aef8df4b25996e7f4a630", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMjg3NTNlODNhYzA1OTkzNTdhZWY4ZGY0YjI1OTk2ZTdmNGE2MzA=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-10-28T06:40:56Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-10-28T07:14:41Z"}, "message": "structured suggestions for single-use lifetime lint on fns and methods\n\nIt would be nice to demonstrate the shining correctness here with more\nrun-rustfix tests than this, but unfortunately, that doesn't work with\nmultipart suggestions yet (#53934).\n\nWhile we're here, reword the zero-use lifetime suggestion to \"elide\nthe unused lifetime\" instead of \"remove it\". (It's classier.)", "tree": {"sha": "4d149371baa206a9474d901e6e9ea9ff314d14ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d149371baa206a9474d901e6e9ea9ff314d14ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd28753e83ac0599357aef8df4b25996e7f4a630", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd28753e83ac0599357aef8df4b25996e7f4a630", "html_url": "https://github.com/rust-lang/rust/commit/fd28753e83ac0599357aef8df4b25996e7f4a630", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd28753e83ac0599357aef8df4b25996e7f4a630/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1982f1887ad524951f24c12a6cc7bf05148aec14", "url": "https://api.github.com/repos/rust-lang/rust/commits/1982f1887ad524951f24c12a6cc7bf05148aec14", "html_url": "https://github.com/rust-lang/rust/commit/1982f1887ad524951f24c12a6cc7bf05148aec14"}], "stats": {"total": 204, "additions": 168, "deletions": 36}, "files": [{"sha": "67a564299b0d7e77b633553d92e673f6bf123099", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 102, "deletions": 17, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=fd28753e83ac0599357aef8df4b25996e7f4a630", "patch": "@@ -1443,23 +1443,101 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     /// helper method to determine the span to remove when suggesting the\n     /// deletion of a lifetime\n     fn lifetime_deletion_span(&self, name: ast::Ident, generics: &hir::Generics) -> Option<Span> {\n-        if generics.params.len() == 1 {\n-            // if sole lifetime, remove the `<>` brackets\n-            Some(generics.span)\n-        } else {\n-            generics.params.iter().enumerate().find_map(|(i, param)| {\n-                if param.name.ident() == name {\n-                    // We also want to delete a leading or trailing comma\n-                    // as appropriate\n-                    if i >= generics.params.len() - 1 {\n-                        Some(generics.params[i - 1].span.shrink_to_hi().to(param.span))\n-                    } else {\n-                        Some(param.span.to(generics.params[i + 1].span.shrink_to_lo()))\n+        generics.params.iter().enumerate().find_map(|(i, param)| {\n+            if param.name.ident() == name {\n+                let mut in_band = false;\n+                if let hir::GenericParamKind::Lifetime { kind } = param.kind {\n+                    if let hir::LifetimeParamKind::InBand = kind {\n+                        in_band = true;\n                     }\n+                }\n+                if in_band {\n+                    Some(param.span)\n                 } else {\n-                    None\n+                    if generics.params.len() == 1 {\n+                        // if sole lifetime, remove the entire `<>` brackets\n+                        Some(generics.span)\n+                    } else {\n+                        // if removing within `<>` brackets, we also want to\n+                        // delete a leading or trailing comma as appropriate\n+                        if i >= generics.params.len() - 1 {\n+                            Some(generics.params[i - 1].span.shrink_to_hi().to(param.span))\n+                        } else {\n+                            Some(param.span.to(generics.params[i + 1].span.shrink_to_lo()))\n+                        }\n+                    }\n                 }\n-            })\n+            } else {\n+                None\n+            }\n+        })\n+    }\n+\n+    // helper method to issue suggestions from `fn rah<'a>(&'a T)` to `fn rah(&T)`\n+    fn suggest_eliding_single_use_lifetime(\n+        &self, err: &mut DiagnosticBuilder<'_>, def_id: DefId, lifetime: &hir::Lifetime\n+    ) {\n+        // FIXME: future work: also suggest `impl Foo<'_>` for `impl<'a> Foo<'a>`\n+        let name = lifetime.name.ident();\n+        let mut remove_decl = None;\n+        if let Some(parent_def_id) = self.tcx.parent(def_id) {\n+            if let Some(generics) = self.tcx.hir.get_generics(parent_def_id) {\n+                remove_decl = self.lifetime_deletion_span(name, generics);\n+            }\n+        }\n+\n+        let mut remove_use = None;\n+        let mut find_arg_use_span = |inputs: &hir::HirVec<hir::Ty>| {\n+            for input in inputs {\n+                if let hir::TyKind::Rptr(lt, _) = input.node {\n+                    if lt.name.ident() == name {\n+                        // include the trailing whitespace between the ampersand and the type name\n+                        let lt_through_ty_span = lifetime.span.to(input.span.shrink_to_hi());\n+                        remove_use = Some(\n+                            self.tcx.sess.source_map()\n+                                .span_until_non_whitespace(lt_through_ty_span)\n+                        );\n+                        break;\n+                    }\n+                }\n+            }\n+        };\n+        if let Node::Lifetime(hir_lifetime) = self.tcx.hir.get(lifetime.id) {\n+            if let Some(parent) = self.tcx.hir.find(self.tcx.hir.get_parent(hir_lifetime.id)) {\n+                match parent {\n+                    Node::Item(item) => {\n+                        if let hir::ItemKind::Fn(decl, _, _, _) = &item.node {\n+                            find_arg_use_span(&decl.inputs);\n+                        }\n+                    },\n+                    Node::ImplItem(impl_item) => {\n+                        if let hir::ImplItemKind::Method(sig, _) = &impl_item.node {\n+                            find_arg_use_span(&sig.decl.inputs);\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+            }\n+        }\n+\n+        if let (Some(decl_span), Some(use_span)) = (remove_decl, remove_use) {\n+            // if both declaration and use deletion spans start at the same\n+            // place (\"start at\" because the latter includes trailing\n+            // whitespace), then this is an in-band lifetime\n+            if decl_span.shrink_to_lo() == use_span.shrink_to_lo() {\n+                err.span_suggestion_with_applicability(\n+                    use_span,\n+                    \"elide the single-use lifetime\",\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                );\n+            } else {\n+                err.multipart_suggestion_with_applicability(\n+                    \"elide the single-use lifetime\",\n+                    vec![(decl_span, String::new()), (use_span, String::new())],\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n         }\n     }\n \n@@ -1521,8 +1599,15 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                             span,\n                             &format!(\"lifetime parameter `{}` only used once\", name),\n                         );\n-                        err.span_label(span, \"this lifetime...\");\n-                        err.span_label(lifetime.span, \"...is used only here\");\n+\n+                        if span == lifetime.span {\n+                            // spans are the same for in-band lifetime declarations\n+                            err.span_label(span, \"this lifetime is only used here\");\n+                        } else {\n+                            err.span_label(span, \"this lifetime...\");\n+                            err.span_label(lifetime.span, \"...is used only here\");\n+                        }\n+                        self.suggest_eliding_single_use_lifetime(&mut err, def_id, lifetime);\n                         err.emit();\n                     }\n                 }\n@@ -1555,7 +1640,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                                 if let Some(span) = unused_lt_span {\n                                     err.span_suggestion_with_applicability(\n                                         span,\n-                                        \"remove it\",\n+                                        \"elide the unused lifetime\",\n                                         String::new(),\n                                         Applicability::MachineApplicable,\n                                     );"}, {"sha": "fd9b10e1a32ea2c1c09248f89a0c3093c1f191ff", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument-in-band.fixed", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.fixed?ref=fd28753e83ac0599357aef8df4b25996e7f4a630", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+#![feature(in_band_lifetimes)]\n+#![deny(single_use_lifetimes)]\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+// Test that we DO warn when lifetime name is used only\n+// once in a fn argument, even with in band lifetimes.\n+\n+fn a(x: &u32, y: &u32) {\n+    //~^ ERROR `'a` only used once\n+    //~| ERROR `'b` only used once\n+    //~| HELP elide the single-use lifetime\n+    //~| HELP elide the single-use lifetime\n+}\n+\n+fn main() { }"}, {"sha": "0d5f65e6d1b53e8bacef13e9f8907f9b67ea0a44", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument-in-band.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.rs?ref=fd28753e83ac0599357aef8df4b25996e7f4a630", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+\n #![feature(in_band_lifetimes)]\n #![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n@@ -19,6 +21,8 @@\n fn a(x: &'a u32, y: &'b u32) {\n     //~^ ERROR `'a` only used once\n     //~| ERROR `'b` only used once\n+    //~| HELP elide the single-use lifetime\n+    //~| HELP elide the single-use lifetime\n }\n \n fn main() { }"}, {"sha": "a9f8411d4110315ccde004cd23af9d45664ac5b4", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument-in-band.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.stderr?ref=fd28753e83ac0599357aef8df4b25996e7f4a630", "patch": "@@ -1,26 +1,26 @@\n error: lifetime parameter `'a` only used once\n-  --> $DIR/one-use-in-fn-argument-in-band.rs:19:10\n+  --> $DIR/one-use-in-fn-argument-in-band.rs:21:10\n    |\n LL | fn a(x: &'a u32, y: &'b u32) {\n-   |          ^^\n+   |          ^^-\n    |          |\n-   |          this lifetime...\n-   |          ...is used only here\n+   |          this lifetime is only used here\n+   |          help: elide the single-use lifetime\n    |\n note: lint level defined here\n-  --> $DIR/one-use-in-fn-argument-in-band.rs:12:9\n+  --> $DIR/one-use-in-fn-argument-in-band.rs:14:9\n    |\n LL | #![deny(single_use_lifetimes)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: lifetime parameter `'b` only used once\n-  --> $DIR/one-use-in-fn-argument-in-band.rs:19:22\n+  --> $DIR/one-use-in-fn-argument-in-band.rs:21:22\n    |\n LL | fn a(x: &'a u32, y: &'b u32) {\n-   |                      ^^\n+   |                      ^^-\n    |                      |\n-   |                      this lifetime...\n-   |                      ...is used only here\n+   |                      this lifetime is only used here\n+   |                      help: elide the single-use lifetime\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a1b8866c8c455741c2eae27d5914f7d9ee9e62df", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.rs?ref=fd28753e83ac0599357aef8df4b25996e7f4a630", "patch": "@@ -16,6 +16,7 @@\n // once in a fn argument.\n \n fn a<'a>(x: &'a u32) { //~ ERROR `'a` only used once\n+    //~^ HELP elide the single-use lifetime\n }\n \n fn main() { }"}, {"sha": "0a23ecaf458ad965db0107da1db87769275eea25", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr?ref=fd28753e83ac0599357aef8df4b25996e7f4a630", "patch": "@@ -11,6 +11,10 @@ note: lint level defined here\n    |\n LL | #![deny(single_use_lifetimes)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n+help: elide the single-use lifetime\n+   |\n+LL | fn a(x: &u32) { //~ ERROR `'a` only used once\n+   |    --   --\n \n error: aborting due to previous error\n "}, {"sha": "63c3bbdfe4a113e9cb497db18d55d03796140f04", "filename": "src/test/ui/single-use-lifetime/one-use-in-inherent-method-argument.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-argument.rs?ref=fd28753e83ac0599357aef8df4b25996e7f4a630", "patch": "@@ -20,6 +20,7 @@ struct Foo<'f> {\n \n impl<'f> Foo<'f> { //~ ERROR `'f` only used once\n     fn inherent_a<'a>(&self, data: &'a u32) { //~ ERROR `'a` only used once\n+        //~^ HELP elide the single-use lifetime\n     }\n }\n "}, {"sha": "d0651a437b0919836f1b4d5547a0b3596329e241", "filename": "src/test/ui/single-use-lifetime/one-use-in-inherent-method-argument.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-argument.stderr?ref=fd28753e83ac0599357aef8df4b25996e7f4a630", "patch": "@@ -11,6 +11,10 @@ note: lint level defined here\n    |\n LL | #![deny(single_use_lifetimes)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n+help: elide the single-use lifetime\n+   |\n+LL |     fn inherent_a(&self, data: &u32) { //~ ERROR `'a` only used once\n+   |                 --             --\n \n error: lifetime parameter `'f` only used once\n   --> $DIR/one-use-in-inherent-method-argument.rs:21:6"}, {"sha": "c36e9ef2b223740d3a42255d3cec8cbd42ca980c", "filename": "src/test/ui/single-use-lifetime/one-use-in-trait-method-argument.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-trait-method-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-trait-method-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-trait-method-argument.rs?ref=fd28753e83ac0599357aef8df4b25996e7f4a630", "patch": "@@ -23,6 +23,7 @@ impl<'f> Iterator for Foo<'f> {\n     type Item = &'f u32;\n \n     fn next<'g>(&'g mut self) -> Option<Self::Item> { //~ ERROR `'g` only used once\n+        //~^ HELP elide the single-use lifetime\n         None\n     }\n }"}, {"sha": "e054d0ad9349bc148ef4aaec561ad00ddaae01d7", "filename": "src/test/ui/single-use-lifetime/one-use-in-trait-method-argument.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-trait-method-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-trait-method-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-trait-method-argument.stderr?ref=fd28753e83ac0599357aef8df4b25996e7f4a630", "patch": "@@ -11,6 +11,10 @@ note: lint level defined here\n    |\n LL | #![deny(single_use_lifetimes)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n+help: elide the single-use lifetime\n+   |\n+LL |     fn next(&mut self) -> Option<Self::Item> { //~ ERROR `'g` only used once\n+   |           ----\n \n error: aborting due to previous error\n "}, {"sha": "89607af260a5258e795576acac33b085c34204fd", "filename": "src/test/ui/single-use-lifetime/zero-uses-in-fn.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.fixed?ref=fd28753e83ac0599357aef8df4b25996e7f4a630", "patch": "@@ -7,17 +7,17 @@\n \n fn september() {}\n //~^ ERROR lifetime parameter `'a` never used\n-//~| HELP remove it\n+//~| HELP elide the unused lifetime\n \n fn october<'b, T>(s: &'b T) -> &'b T {\n     //~^ ERROR lifetime parameter `'a` never used\n-    //~| HELP remove it\n+    //~| HELP elide the unused lifetime\n     s\n }\n \n fn november<'a>(s: &'a str) -> (&'a str) {\n     //~^ ERROR lifetime parameter `'b` never used\n-    //~| HELP remove it\n+    //~| HELP elide the unused lifetime\n     s\n }\n "}, {"sha": "be0bdb9b6285102ea40b2d906e6eec041595ef95", "filename": "src/test/ui/single-use-lifetime/zero-uses-in-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.rs?ref=fd28753e83ac0599357aef8df4b25996e7f4a630", "patch": "@@ -7,17 +7,17 @@\n \n fn september<'a>() {}\n //~^ ERROR lifetime parameter `'a` never used\n-//~| HELP remove it\n+//~| HELP elide the unused lifetime\n \n fn october<'a, 'b, T>(s: &'b T) -> &'b T {\n     //~^ ERROR lifetime parameter `'a` never used\n-    //~| HELP remove it\n+    //~| HELP elide the unused lifetime\n     s\n }\n \n fn november<'a, 'b>(s: &'a str) -> (&'a str) {\n     //~^ ERROR lifetime parameter `'b` never used\n-    //~| HELP remove it\n+    //~| HELP elide the unused lifetime\n     s\n }\n "}, {"sha": "2ccba796d4229ebe319526d3280ee26057a72bea", "filename": "src/test/ui/single-use-lifetime/zero-uses-in-fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.stderr?ref=fd28753e83ac0599357aef8df4b25996e7f4a630", "patch": "@@ -2,7 +2,7 @@ error: lifetime parameter `'a` never used\n   --> $DIR/zero-uses-in-fn.rs:8:14\n    |\n LL | fn september<'a>() {}\n-   |             -^^- help: remove it\n+   |             -^^- help: elide the unused lifetime\n    |\n note: lint level defined here\n   --> $DIR/zero-uses-in-fn.rs:5:9\n@@ -16,15 +16,15 @@ error: lifetime parameter `'a` never used\n LL | fn october<'a, 'b, T>(s: &'b T) -> &'b T {\n    |            ^^--\n    |            |\n-   |            help: remove it\n+   |            help: elide the unused lifetime\n \n error: lifetime parameter `'b` never used\n   --> $DIR/zero-uses-in-fn.rs:18:17\n    |\n LL | fn november<'a, 'b>(s: &'a str) -> (&'a str) {\n    |               --^^\n    |               |\n-   |               help: remove it\n+   |               help: elide the unused lifetime\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3f9d907ade6799dc324e1fd433a4395ef27b34ea", "filename": "src/test/ui/single-use-lifetime/zero-uses-in-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd28753e83ac0599357aef8df4b25996e7f4a630/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-impl.stderr?ref=fd28753e83ac0599357aef8df4b25996e7f4a630", "patch": "@@ -2,7 +2,7 @@ error: lifetime parameter `'a` never used\n   --> $DIR/zero-uses-in-impl.rs:8:6\n    |\n LL | impl<'a> Foo {} //~ ERROR `'a` never used\n-   |     -^^- help: remove it\n+   |     -^^- help: elide the unused lifetime\n    |\n note: lint level defined here\n   --> $DIR/zero-uses-in-impl.rs:3:9"}]}