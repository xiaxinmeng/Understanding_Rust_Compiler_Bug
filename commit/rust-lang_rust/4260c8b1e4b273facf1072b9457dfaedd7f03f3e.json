{"sha": "4260c8b1e4b273facf1072b9457dfaedd7f03f3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNjBjOGIxZTRiMjczZmFjZjEwNzJiOTQ1N2RmYWVkZDdmMDNmM2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-20T08:54:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-20T08:54:14Z"}, "message": "Auto merge of #52467 - alexcrichton:lints-and-macros, r=Manishearth\n\nSquash all lints tied to foreign macros by default\n\nThis PR is a continuation of https://github.com/rust-lang/rust/pull/49755 (thanks for the initial jump-start @Dylan-DPC!) and is targeted at solving https://github.com/rust-lang/rust/issues/48855. This change updates the lint infrastructure to, by default, ignore all lints emitted for code that originates in a foreign macro. For example if `println!(\"...\")` injects some idiomatic warnings these are all ignored by default. The rationale here is that for almost all lints there's no action that can be taken if the code originates from a foreign lint.\n\nCloses #48855\nCloses #52483\nCloses #52479", "tree": {"sha": "c4f776df2d05a537453d2cb49382aa85c54e519d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4f776df2d05a537453d2cb49382aa85c54e519d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4260c8b1e4b273facf1072b9457dfaedd7f03f3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4260c8b1e4b273facf1072b9457dfaedd7f03f3e", "html_url": "https://github.com/rust-lang/rust/commit/4260c8b1e4b273facf1072b9457dfaedd7f03f3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4260c8b1e4b273facf1072b9457dfaedd7f03f3e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5097f3d68dace106de4dbe524f7892e779a836e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5097f3d68dace106de4dbe524f7892e779a836e", "html_url": "https://github.com/rust-lang/rust/commit/a5097f3d68dace106de4dbe524f7892e779a836e"}, {"sha": "8adf08c4373f5bdd5bbef9aa4dfd0ca5c4a2eefc", "url": "https://api.github.com/repos/rust-lang/rust/commits/8adf08c4373f5bdd5bbef9aa4dfd0ca5c4a2eefc", "html_url": "https://github.com/rust-lang/rust/commit/8adf08c4373f5bdd5bbef9aa4dfd0ca5c4a2eefc"}], "stats": {"total": 126, "additions": 125, "deletions": 1}, "files": [{"sha": "8efce297a9117414117f48afddfd44980e6ed8bf", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4260c8b1e4b273facf1072b9457dfaedd7f03f3e/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4260c8b1e4b273facf1072b9457dfaedd7f03f3e/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=4260c8b1e4b273facf1072b9457dfaedd7f03f3e", "patch": "@@ -41,7 +41,7 @@ use lint::builtin::BuiltinLintDiagnostics;\n use session::{Session, DiagnosticMessageId};\n use std::hash;\n use syntax::ast;\n-use syntax::codemap::MultiSpan;\n+use syntax::codemap::{MultiSpan, ExpnFormat};\n use syntax::edition::Edition;\n use syntax::symbol::Symbol;\n use syntax::visit as ast_visit;\n@@ -572,6 +572,22 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n                                future_incompatible.reference);\n         err.warn(&explanation);\n         err.note(&citation);\n+\n+    // If this lint is *not* a future incompatibility warning then we want to be\n+    // sure to not be too noisy in some situations. If this code originates in a\n+    // foreign macro, aka something that this crate did not itself author, then\n+    // it's likely that there's nothing this crate can do about it. We probably\n+    // want to skip the lint entirely.\n+    //\n+    // For some lints though (like unreachable code) there's clear actionable\n+    // items to take care of (delete the macro invocation). As a result we have\n+    // a few lints we whitelist here for allowing a lint even though it's in a\n+    // foreign macro invocation.\n+    } else if lint_id != LintId::of(builtin::UNREACHABLE_CODE) &&\n+        lint_id != LintId::of(builtin::DEPRECATED) {\n+        if err.span.primary_spans().iter().any(|s| in_external_macro(sess, *s)) {\n+            err.cancel();\n+        }\n     }\n \n     return err\n@@ -673,3 +689,32 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'a, 'tcx> {\n pub fn provide(providers: &mut Providers) {\n     providers.lint_levels = lint_levels;\n }\n+\n+/// Returns whether `span` originates in a foreign crate's external macro.\n+///\n+/// This is used to test whether a lint should be entirely aborted above.\n+pub fn in_external_macro(sess: &Session, span: Span) -> bool {\n+    let info = match span.ctxt().outer().expn_info() {\n+        Some(info) => info,\n+        // no ExpnInfo means this span doesn't come from a macro\n+        None => return false,\n+    };\n+\n+    match info.format {\n+        ExpnFormat::MacroAttribute(..) => return true, // definitely a plugin\n+        ExpnFormat::CompilerDesugaring(_) => return true, // well, it's \"external\"\n+        ExpnFormat::MacroBang(..) => {} // check below\n+    }\n+\n+    let def_site = match info.def_site {\n+        Some(span) => span,\n+        // no span for the def_site means it's an external macro\n+        None => return true,\n+    };\n+\n+    match sess.codemap().span_to_snippet(def_site) {\n+        Ok(code) => !code.starts_with(\"macro_rules\"),\n+        // no snippet = external macro or compiler-builtin expansion\n+        Err(_) => true,\n+    }\n+}"}, {"sha": "cf8e9c18de3c0d701a7b13d2645bb10c84d223f3", "filename": "src/test/ui/lint/auxiliary/lints-in-foreign-macros.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4260c8b1e4b273facf1072b9457dfaedd7f03f3e/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flints-in-foreign-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4260c8b1e4b273facf1072b9457dfaedd7f03f3e/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flints-in-foreign-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flints-in-foreign-macros.rs?ref=4260c8b1e4b273facf1072b9457dfaedd7f03f3e", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[macro_export]\n+macro_rules! bar {\n+    () => {use std::string::ToString;}\n+}\n+\n+#[macro_export]\n+macro_rules! baz {\n+    ($i:item) => ($i)\n+}\n+\n+#[macro_export]\n+macro_rules! baz2 {\n+    ($($i:tt)*) => ($($i)*)\n+}"}, {"sha": "0f9003877cc0621ac554154a989d7ae9e1fd7eb7", "filename": "src/test/ui/lint/lints-in-foreign-macros.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4260c8b1e4b273facf1072b9457dfaedd7f03f3e/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4260c8b1e4b273facf1072b9457dfaedd7f03f3e/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.rs?ref=4260c8b1e4b273facf1072b9457dfaedd7f03f3e", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:lints-in-foreign-macros.rs\n+// compile-pass\n+\n+#![warn(unused_imports)]\n+\n+#[macro_use]\n+extern crate lints_in_foreign_macros;\n+\n+macro_rules! foo {\n+    () => {use std::string::ToString;} //~ WARN: unused import\n+}\n+\n+mod a { foo!(); }\n+mod b { bar!(); }\n+mod c { baz!(use std::string::ToString;); } //~ WARN: unused import\n+mod d { baz2!(use std::string::ToString;); } //~ WARN: unused import\n+\n+fn main() {}"}, {"sha": "e9f6d3d3815414299b233479f58a1041e01fbec3", "filename": "src/test/ui/lint/lints-in-foreign-macros.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4260c8b1e4b273facf1072b9457dfaedd7f03f3e/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4260c8b1e4b273facf1072b9457dfaedd7f03f3e/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr?ref=4260c8b1e4b273facf1072b9457dfaedd7f03f3e", "patch": "@@ -0,0 +1,27 @@\n+warning: unused import: `std::string::ToString`\n+  --> $DIR/lints-in-foreign-macros.rs:20:16\n+   |\n+LL |     () => {use std::string::ToString;} //~ WARN: unused import\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | mod a { foo!(); }\n+   |         ------- in this macro invocation\n+   |\n+note: lint level defined here\n+  --> $DIR/lints-in-foreign-macros.rs:14:9\n+   |\n+LL | #![warn(unused_imports)]\n+   |         ^^^^^^^^^^^^^^\n+\n+warning: unused import: `std::string::ToString`\n+  --> $DIR/lints-in-foreign-macros.rs:25:18\n+   |\n+LL | mod c { baz!(use std::string::ToString;); } //~ WARN: unused import\n+   |                  ^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused import: `std::string::ToString`\n+  --> $DIR/lints-in-foreign-macros.rs:26:19\n+   |\n+LL | mod d { baz2!(use std::string::ToString;); } //~ WARN: unused import\n+   |                   ^^^^^^^^^^^^^^^^^^^^^\n+"}]}