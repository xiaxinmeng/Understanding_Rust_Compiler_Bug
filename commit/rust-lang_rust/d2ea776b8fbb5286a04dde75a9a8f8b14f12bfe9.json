{"sha": "d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZWE3NzZiOGZiYjUyODZhMDRkZGU3NWE5YThmOGIxNGYxMmJmZTk=", "commit": {"author": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-09-29T23:38:16Z"}, "committer": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-10-02T18:28:02Z"}, "message": "Enable CfgOptions `test` for workspace crates", "tree": {"sha": "d6ddac6dc88b327aaf956843dc53b3e635f699b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6ddac6dc88b327aaf956843dc53b3e635f699b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl2U7DIACgkQztOS3gxI\nPQBm/RAAnDL5a3qoJ2eCRaeZlp8Hcs+VB3hjzlnNIedxQNonqeweZMPvic/0VYbR\nXDz/lMLAKS8XdxIIP83vQrBiTbsDNdKwm9svuapHqntVrYj+fGBI148rEkkk4kQb\nY71eyV17PYqdBbyADKQGGEEPZdn96BY6VwLDnP4Bi+gaE4DcPAp2jL5OSptBDuWi\nxDRZ/A1gAQrIimbU8bE5uPNn1U+LSSx3hGgs0j1oSxhZbJEPv880j2Y2enzJkTkH\n13bDMkrsuoFDPDdAmYCn/0M1Q6lQ0t6iXtNbSw9491cdaq/+9bzFtxa7W7mWCh4u\nYpItlgHG3X3FJ1hlblYdqgjlp5mfVgSc4ufm93U55mCn0XEaZfP1F/dhKO92EIFU\n956y6orjv7SkDJE18kFVO3pM+e+U/q5JMNkEjHu/9lBpv1dpuUhbcibdsmjF0o0Z\n5MHzHuK3AmxYo8OL46fgNudKBOwuIlxwAM8K+X2uN8ltxDsxfdsnaTlnxvrF4xXC\nKQ+fzgOKw2uV5QPT3CUF/oFF8j6o50NILVLMJ0udJGxg+8ZwEV5srGxH/625mWDi\ngNCqHEWYzBJBwmK4RN9J/ZVUnbHTEB+h5up60/YMA4VziqNlOlPsYKQFSXNfKcA7\nZZh/hk7ffgSdaHVFnXQDI/OLTqaCDg2rUJdkunwjGejq24zQ/l4=\n=PrOt\n-----END PGP SIGNATURE-----", "payload": "tree d6ddac6dc88b327aaf956843dc53b3e635f699b9\nparent b1ed887d813bf5775a16624694939fdf836f97b1\nauthor uHOOCCOOHu <hooccooh1896@gmail.com> 1569800296 +0800\ncommitter uHOOCCOOHu <hooccooh1896@gmail.com> 1570040882 +0800\n\nEnable CfgOptions `test` for workspace crates\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9", "html_url": "https://github.com/rust-lang/rust/commit/d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9/comments", "author": null, "committer": null, "parents": [{"sha": "b1ed887d813bf5775a16624694939fdf836f97b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1ed887d813bf5775a16624694939fdf836f97b1", "html_url": "https://github.com/rust-lang/rust/commit/b1ed887d813bf5775a16624694939fdf836f97b1"}], "stats": {"total": 160, "additions": 134, "deletions": 26}, "files": [{"sha": "23148096cb1ccb3b99e6681a7e371bcdd57528f5", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9", "patch": "@@ -114,9 +114,8 @@ struct CrateData {\n }\n \n impl CrateData {\n-    fn new(file_id: FileId, edition: Edition) -> CrateData {\n-        // FIXME: cfg options\n-        CrateData { file_id, edition, dependencies: Vec::new(), cfg_options: CfgOptions::default() }\n+    fn new(file_id: FileId, edition: Edition, cfg_options: CfgOptions) -> CrateData {\n+        CrateData { file_id, edition, dependencies: Vec::new(), cfg_options }\n     }\n \n     fn add_dep(&mut self, name: SmolStr, crate_id: CrateId) {\n@@ -137,9 +136,14 @@ impl Dependency {\n }\n \n impl CrateGraph {\n-    pub fn add_crate_root(&mut self, file_id: FileId, edition: Edition) -> CrateId {\n+    pub fn add_crate_root(\n+        &mut self,\n+        file_id: FileId,\n+        edition: Edition,\n+        cfg_options: CfgOptions,\n+    ) -> CrateId {\n         let crate_id = CrateId(self.arena.len() as u32);\n-        let prev = self.arena.insert(crate_id, CrateData::new(file_id, edition));\n+        let prev = self.arena.insert(crate_id, CrateData::new(file_id, edition, cfg_options));\n         assert!(prev.is_none());\n         crate_id\n     }\n@@ -228,14 +232,14 @@ impl CrateGraph {\n \n #[cfg(test)]\n mod tests {\n-    use super::{CrateGraph, Edition::Edition2018, FileId, SmolStr};\n+    use super::{CfgOptions, CrateGraph, Edition::Edition2018, FileId, SmolStr};\n \n     #[test]\n     fn it_should_panic_because_of_cycle_dependencies() {\n         let mut graph = CrateGraph::default();\n-        let crate1 = graph.add_crate_root(FileId(1u32), Edition2018);\n-        let crate2 = graph.add_crate_root(FileId(2u32), Edition2018);\n-        let crate3 = graph.add_crate_root(FileId(3u32), Edition2018);\n+        let crate1 = graph.add_crate_root(FileId(1u32), Edition2018, CfgOptions::default());\n+        let crate2 = graph.add_crate_root(FileId(2u32), Edition2018, CfgOptions::default());\n+        let crate3 = graph.add_crate_root(FileId(3u32), Edition2018, CfgOptions::default());\n         assert!(graph.add_dep(crate1, SmolStr::new(\"crate2\"), crate2).is_ok());\n         assert!(graph.add_dep(crate2, SmolStr::new(\"crate3\"), crate3).is_ok());\n         assert!(graph.add_dep(crate3, SmolStr::new(\"crate1\"), crate1).is_err());\n@@ -244,9 +248,9 @@ mod tests {\n     #[test]\n     fn it_works() {\n         let mut graph = CrateGraph::default();\n-        let crate1 = graph.add_crate_root(FileId(1u32), Edition2018);\n-        let crate2 = graph.add_crate_root(FileId(2u32), Edition2018);\n-        let crate3 = graph.add_crate_root(FileId(3u32), Edition2018);\n+        let crate1 = graph.add_crate_root(FileId(1u32), Edition2018, CfgOptions::default());\n+        let crate2 = graph.add_crate_root(FileId(2u32), Edition2018, CfgOptions::default());\n+        let crate3 = graph.add_crate_root(FileId(3u32), Edition2018, CfgOptions::default());\n         assert!(graph.add_dep(crate1, SmolStr::new(\"crate2\"), crate2).is_ok());\n         assert!(graph.add_dep(crate2, SmolStr::new(\"crate3\"), crate3).is_ok());\n     }"}, {"sha": "f750986b8b325af1c046c5ad74de9a98b8f99f68", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9", "patch": "@@ -3,6 +3,7 @@\n use std::{panic, sync::Arc};\n \n use parking_lot::Mutex;\n+use ra_cfg::CfgOptions;\n use ra_db::{\n     salsa, CrateGraph, CrateId, Edition, FileId, FilePosition, SourceDatabase, SourceRoot,\n     SourceRootId,\n@@ -74,13 +75,13 @@ impl MockDatabase {\n     pub fn set_crate_graph_from_fixture(&mut self, graph: CrateGraphFixture) {\n         let mut ids = FxHashMap::default();\n         let mut crate_graph = CrateGraph::default();\n-        for (crate_name, (crate_root, edition, _)) in graph.0.iter() {\n+        for (crate_name, (crate_root, edition, cfg_options, _)) in graph.0.iter() {\n             let crate_root = self.file_id_of(&crate_root);\n-            let crate_id = crate_graph.add_crate_root(crate_root, *edition);\n+            let crate_id = crate_graph.add_crate_root(crate_root, *edition, cfg_options.clone());\n             Arc::make_mut(&mut self.crate_names).insert(crate_id, crate_name.clone());\n             ids.insert(crate_name, crate_id);\n         }\n-        for (crate_name, (_, _, deps)) in graph.0.iter() {\n+        for (crate_name, (_, _, _, deps)) in graph.0.iter() {\n             let from = ids[crate_name];\n             for dep in deps {\n                 let to = ids[dep];\n@@ -184,7 +185,7 @@ impl MockDatabase {\n \n         if is_crate_root {\n             let mut crate_graph = CrateGraph::default();\n-            crate_graph.add_crate_root(file_id, Edition::Edition2018);\n+            crate_graph.add_crate_root(file_id, Edition::Edition2018, CfgOptions::default());\n             self.set_crate_graph(Arc::new(crate_graph));\n         }\n         file_id\n@@ -268,19 +269,27 @@ impl MockDatabase {\n }\n \n #[derive(Default)]\n-pub struct CrateGraphFixture(pub Vec<(String, (String, Edition, Vec<String>))>);\n+pub struct CrateGraphFixture(pub Vec<(String, (String, Edition, CfgOptions, Vec<String>))>);\n \n #[macro_export]\n macro_rules! crate_graph {\n-    ($($crate_name:literal: ($crate_path:literal, $($edition:literal,)? [$($dep:literal),*]),)*) => {{\n+    ($(\n+        $crate_name:literal: (\n+            $crate_path:literal,\n+            $($edition:literal,)?\n+            [$($dep:literal),*]\n+            $(,$cfg:expr)?\n+        ),\n+    )*) => {{\n         let mut res = $crate::mock::CrateGraphFixture::default();\n         $(\n             #[allow(unused_mut, unused_assignments)]\n             let mut edition = ra_db::Edition::Edition2018;\n             $(edition = ra_db::Edition::from_string($edition);)?\n+            let cfg_options = { ::ra_cfg::CfgOptions::default() $(; $cfg)? };\n             res.0.push((\n                 $crate_name.to_string(),\n-                ($crate_path.to_string(), edition, vec![$($dep.to_string()),*])\n+                ($crate_path.to_string(), edition, cfg_options, vec![$($dep.to_string()),*])\n             ));\n         )*\n         res"}, {"sha": "f43767e5958f25a058be195297d698f77de53791", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9", "patch": "@@ -7,6 +7,7 @@ mod mod_resolution;\n use std::sync::Arc;\n \n use insta::assert_snapshot;\n+use ra_cfg::CfgOptions;\n use ra_db::SourceDatabase;\n use test_utils::covers;\n \n@@ -507,3 +508,72 @@ fn values_dont_shadow_extern_crates() {\n         \u22eefoo: v\n     \"###);\n }\n+\n+#[test]\n+fn cfg_not_test() {\n+    let map = def_map_with_crate_graph(\n+        r#\"\n+        //- /main.rs\n+        use {Foo, Bar, Baz};\n+        //- /lib.rs\n+        #[prelude_import]\n+        pub use self::prelude::*;\n+        mod prelude {\n+            #[cfg(test)]\n+            pub struct Foo;\n+            #[cfg(not(test))]\n+            pub struct Bar;\n+            #[cfg(all(not(any()), feature = \"foo\", feature = \"bar\", opt = \"42\"))]\n+            pub struct Baz;\n+        }\n+        \"#,\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", [\"std\"]),\n+            \"std\": (\"/lib.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot!(map, @r###\"\n+        \u22eecrate\n+        \u22eeBar: t v\n+        \u22eeBaz: _\n+        \u22eeFoo: _\n+    \"###);\n+}\n+\n+#[test]\n+fn cfg_test() {\n+    let map = def_map_with_crate_graph(\n+        r#\"\n+        //- /main.rs\n+        use {Foo, Bar, Baz};\n+        //- /lib.rs\n+        #[prelude_import]\n+        pub use self::prelude::*;\n+        mod prelude {\n+            #[cfg(test)]\n+            pub struct Foo;\n+            #[cfg(not(test))]\n+            pub struct Bar;\n+            #[cfg(all(not(any()), feature = \"foo\", feature = \"bar\", opt = \"42\"))]\n+            pub struct Baz;\n+        }\n+        \"#,\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", [\"std\"]),\n+            \"std\": (\"/lib.rs\", [], CfgOptions::default()\n+                .atom(\"test\".into())\n+                .feature(\"foo\".into())\n+                .feature(\"bar\".into())\n+                .option(\"opt\".into(), \"42\".into())\n+            ),\n+        },\n+    );\n+\n+    assert_snapshot!(map, @r###\"\n+        \u22eecrate\n+        \u22eeBar: _\n+        \u22eeBaz: t v\n+        \u22eeFoo: t v\n+    \"###);\n+}"}, {"sha": "f919a2d615207df23eed33b8e9e29849296ba6b9", "filename": "crates/ra_ide_api/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9/crates%2Fra_ide_api%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9/crates%2Fra_ide_api%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2FCargo.toml?ref=d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9", "patch": "@@ -23,6 +23,7 @@ rand = { version = \"0.7.0\", features = [\"small_rng\"] }\n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }\n ra_db = { path = \"../ra_db\" }\n+ra_cfg = { path = \"../ra_cfg\" }\n ra_fmt = { path = \"../ra_fmt\" }\n ra_prof = { path = \"../ra_prof\" }\n hir = { path = \"../ra_hir\", package = \"ra_hir\" }"}, {"sha": "24f1b91f68c9710424426770798f3810b3a46f70", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9", "patch": "@@ -49,6 +49,7 @@ mod test_utils;\n \n use std::sync::Arc;\n \n+use ra_cfg::CfgOptions;\n use ra_db::{\n     salsa::{self, ParallelDatabase},\n     CheckCanceled, SourceDatabase,\n@@ -322,7 +323,10 @@ impl Analysis {\n         change.add_root(source_root, true);\n         let mut crate_graph = CrateGraph::default();\n         let file_id = FileId(0);\n-        crate_graph.add_crate_root(file_id, Edition::Edition2018);\n+        // FIXME: cfg options\n+        // Default to enable test for single file.\n+        let cfg_options = CfgOptions::default().atom(\"test\".into());\n+        crate_graph.add_crate_root(file_id, Edition::Edition2018, cfg_options);\n         change.add_file(source_root, file_id, \"main.rs\".into(), Arc::new(text));\n         change.set_crate_graph(crate_graph);\n         host.apply_change(change);"}, {"sha": "13258b63dd9fad655a53ebe121488dc76226b770", "filename": "crates/ra_ide_api/src/mock_analysis.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs?ref=d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9", "patch": "@@ -2,6 +2,7 @@\n \n use std::sync::Arc;\n \n+use ra_cfg::CfgOptions;\n use relative_path::RelativePathBuf;\n use test_utils::{extract_offset, extract_range, parse_fixture, CURSOR_MARKER};\n \n@@ -93,10 +94,12 @@ impl MockAnalysis {\n             assert!(path.starts_with('/'));\n             let path = RelativePathBuf::from_path(&path[1..]).unwrap();\n             let file_id = FileId(i as u32 + 1);\n+            // FIXME: cfg options\n+            let cfg_options = CfgOptions::default();\n             if path == \"/lib.rs\" || path == \"/main.rs\" {\n-                root_crate = Some(crate_graph.add_crate_root(file_id, Edition2018));\n+                root_crate = Some(crate_graph.add_crate_root(file_id, Edition2018, cfg_options));\n             } else if path.ends_with(\"/lib.rs\") {\n-                let other_crate = crate_graph.add_crate_root(file_id, Edition2018);\n+                let other_crate = crate_graph.add_crate_root(file_id, Edition2018, cfg_options);\n                 let crate_name = path.parent().unwrap().file_name().unwrap();\n                 if let Some(root_crate) = root_crate {\n                     crate_graph.add_dep(root_crate, crate_name.into(), other_crate).unwrap();"}, {"sha": "56650984995b656d344f18a44793038495c64e6a", "filename": "crates/ra_ide_api/src/parent_module.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs?ref=d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9", "patch": "@@ -41,6 +41,7 @@ mod tests {\n         AnalysisChange, CrateGraph,\n         Edition::Edition2018,\n     };\n+    use ra_cfg::CfgOptions;\n \n     #[test]\n     fn test_resolve_parent_module() {\n@@ -88,7 +89,7 @@ mod tests {\n         assert!(host.analysis().crate_for(mod_file).unwrap().is_empty());\n \n         let mut crate_graph = CrateGraph::default();\n-        let crate_id = crate_graph.add_crate_root(root_file, Edition2018);\n+        let crate_id = crate_graph.add_crate_root(root_file, Edition2018, CfgOptions::default());\n         let mut change = AnalysisChange::new();\n         change.set_crate_graph(crate_graph);\n         host.apply_change(change);"}, {"sha": "a651000315b9e8f93dca261e2a7976dd1412c4fc", "filename": "crates/ra_project_model/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9/crates%2Fra_project_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9/crates%2Fra_project_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2FCargo.toml?ref=d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9", "patch": "@@ -12,6 +12,7 @@ cargo_metadata = \"0.8.2\"\n \n ra_arena = { path = \"../ra_arena\" }\n ra_db = { path = \"../ra_db\" }\n+ra_cfg = { path = \"../ra_cfg\" }\n \n serde = { version = \"1.0.89\", features = [\"derive\"] }\n serde_json = \"1.0.39\""}, {"sha": "5ff3971e0649e344819b0261c4f9c5999f34175d", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=d2ea776b8fbb5286a04dde75a9a8f8b14f12bfe9", "patch": "@@ -11,6 +11,7 @@ use std::{\n     path::{Path, PathBuf},\n };\n \n+use ra_cfg::CfgOptions;\n use ra_db::{CrateGraph, CrateId, Edition, FileId};\n use rustc_hash::FxHashMap;\n use serde_json::from_reader;\n@@ -131,7 +132,13 @@ impl ProjectWorkspace {\n                             json_project::Edition::Edition2015 => Edition::Edition2015,\n                             json_project::Edition::Edition2018 => Edition::Edition2018,\n                         };\n-                        crates.insert(crate_id, crate_graph.add_crate_root(file_id, edition));\n+                        // FIXME: cfg options\n+                        // Default to enable test for workspace crates.\n+                        let cfg_options = CfgOptions::default().atom(\"test\".into());\n+                        crates.insert(\n+                            crate_id,\n+                            crate_graph.add_crate_root(file_id, edition, cfg_options),\n+                        );\n                     }\n                 }\n \n@@ -157,7 +164,11 @@ impl ProjectWorkspace {\n                 let mut sysroot_crates = FxHashMap::default();\n                 for krate in sysroot.crates() {\n                     if let Some(file_id) = load(krate.root(&sysroot)) {\n-                        let crate_id = crate_graph.add_crate_root(file_id, Edition::Edition2018);\n+                        // FIXME: cfg options\n+                        // Crates from sysroot have `cfg(test)` disabled\n+                        let cfg_options = CfgOptions::default();\n+                        let crate_id =\n+                            crate_graph.add_crate_root(file_id, Edition::Edition2018, cfg_options);\n                         sysroot_crates.insert(krate, crate_id);\n                         names.insert(crate_id, krate.name(&sysroot).to_string());\n                     }\n@@ -186,7 +197,11 @@ impl ProjectWorkspace {\n                         let root = tgt.root(&cargo);\n                         if let Some(file_id) = load(root) {\n                             let edition = pkg.edition(&cargo);\n-                            let crate_id = crate_graph.add_crate_root(file_id, edition);\n+                            // FIXME: cfg options\n+                            // Default to enable test for workspace crates.\n+                            let cfg_options = CfgOptions::default().atom(\"test\".into());\n+                            let crate_id =\n+                                crate_graph.add_crate_root(file_id, edition, cfg_options);\n                             names.insert(crate_id, pkg.name(&cargo).to_string());\n                             if tgt.kind(&cargo) == TargetKind::Lib {\n                                 lib_tgt = Some(crate_id);"}]}