{"sha": "1a8aac3f0260b2b91fcb1c59da887217c5e42674", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhOGFhYzNmMDI2MGIyYjkxZmNiMWM1OWRhODg3MjE3YzVlNDI2NzQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-09-01T01:37:26Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-09-01T03:34:26Z"}, "message": "Improve the appearance of markdown warnings", "tree": {"sha": "ac7d008d79fa24bd751c0b28e50e304c2b77aa0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac7d008d79fa24bd751c0b28e50e304c2b77aa0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a8aac3f0260b2b91fcb1c59da887217c5e42674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a8aac3f0260b2b91fcb1c59da887217c5e42674", "html_url": "https://github.com/rust-lang/rust/commit/1a8aac3f0260b2b91fcb1c59da887217c5e42674", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a8aac3f0260b2b91fcb1c59da887217c5e42674/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ab20a38653baca59b4f638e600f1033c921836e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab20a38653baca59b4f638e600f1033c921836e", "html_url": "https://github.com/rust-lang/rust/commit/9ab20a38653baca59b4f638e600f1033c921836e"}], "stats": {"total": 112, "additions": 98, "deletions": 14}, "files": [{"sha": "9dd646cc3bcf3d14dbb097822d946ac9f58c0476", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 98, "deletions": 14, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/1a8aac3f0260b2b91fcb1c59da887217c5e42674/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a8aac3f0260b2b91fcb1c59da887217c5e42674/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=1a8aac3f0260b2b91fcb1c59da887217c5e42674", "patch": "@@ -63,7 +63,7 @@ use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc::session::config::nightly_options::is_nightly_build;\n use rustc_data_structures::flock;\n \n-use clean::{self, AttributesExt, GetDefId, SelfTy, Mutability};\n+use clean::{self, AttributesExt, GetDefId, SelfTy, Mutability, Span};\n use doctree;\n use fold::DocFolder;\n use html::escape::Escape;\n@@ -126,7 +126,7 @@ pub struct SharedContext {\n     pub css_file_extension: Option<PathBuf>,\n     /// Warnings for the user if rendering would differ using different markdown\n     /// parsers.\n-    pub markdown_warnings: RefCell<Vec<(String, Vec<String>)>>,\n+    pub markdown_warnings: RefCell<Vec<(Span, String, Vec<html_diff::Difference>)>>,\n }\n \n /// Indicates where an external crate can be found.\n@@ -589,15 +589,98 @@ pub fn run(mut krate: clean::Crate,\n     let result = cx.krate(krate);\n \n     let markdown_warnings = scx.markdown_warnings.borrow();\n-    for &(ref text, ref diffs) in &*markdown_warnings {\n-        println!(\"Differences spotted in {:?}:\\n{}\",\n-             text,\n-             diffs.join(\"\\n\"));\n+    if !markdown_warnings.is_empty() {\n+        println!(\"WARNING: documentation for this crate may be rendered \\\n+                  differently using the new Pulldown renderer.\");\n+        println!(\"    See https://github.com/rust-lang/rust/issues/44229 for details.\");\n+        for &(ref span, ref text, ref diffs) in &*markdown_warnings {\n+            println!(\"WARNING: rendering difference in `{}`\", concise_str(text));\n+            println!(\"   --> {}:{}:{}\", span.filename, span.loline, span.locol);\n+            for d in diffs {\n+                render_difference(d);\n+            }\n+        }\n     }\n \n     result\n }\n \n+// A short, single-line view of `s`.\n+fn concise_str(s: &str) -> String {\n+    if s.contains('\\n') {\n+        return format!(\"{}...\", &s[..s.find('\\n').unwrap()]);\n+    }\n+    if s.len() > 70 {\n+        return format!(\"{} ... {}\", &s[..50], &s[s.len()-20..]);\n+    }\n+    s.to_owned()\n+}\n+\n+// Returns short versions of s1 and s2, starting from where the strings differ.\n+fn concise_compared_strs(s1: &str, s2: &str) -> (String, String) {\n+    let s1 = s1.trim();\n+    let s2 = s2.trim();\n+    if !s1.contains('\\n') && !s2.contains('\\n') && s1.len() <= 70 && s2.len() <= 70 {\n+        return (s1.to_owned(), s2.to_owned());\n+    }\n+\n+    let mut start_byte = 0;\n+    for (c1, c2) in s1.chars().zip(s2.chars()) {\n+        if c1 != c2 {\n+            break;\n+        }\n+\n+        start_byte += c1.len_utf8();\n+    }\n+\n+    if start_byte == 0 {\n+        return (concise_str(s1), concise_str(s2));\n+    }\n+\n+    let s1 = &s1[start_byte..];\n+    let s2 = &s2[start_byte..];\n+    (format!(\"...{}\", concise_str(s1)), format!(\"...{}\", concise_str(s2)))\n+}\n+\n+fn render_difference(diff: &html_diff::Difference) {\n+    match *diff {\n+        html_diff::Difference::NodeType { ref elem, ref opposite_elem } => {\n+            println!(\"    {} Types differ: expected: `{}`, found: `{}`\",\n+                     elem.path, elem.element_name, opposite_elem.element_name);\n+        }\n+        html_diff::Difference::NodeName { ref elem, ref opposite_elem } => {\n+            println!(\"    {} Tags differ: expected: `{}`, found: `{}`\",\n+                     elem.path, elem.element_name, opposite_elem.element_name);\n+        }\n+        html_diff::Difference::NodeAttributes { ref elem,\n+                                     ref elem_attributes,\n+                                     ref opposite_elem_attributes,\n+                                     .. } => {\n+            println!(\"    {} Attributes differ in `{}`: expected: `{:?}`, found: `{:?}`\",\n+                     elem.path, elem.element_name, elem_attributes, opposite_elem_attributes);\n+        }\n+        html_diff::Difference::NodeText { ref elem, ref elem_text, ref opposite_elem_text, .. } => {\n+            let (s1, s2) = concise_compared_strs(elem_text, opposite_elem_text);\n+            println!(\"    {} Text differs:\\n        expected: `{}`\\n        found:    `{}`\",\n+                     elem.path, s1, s2);\n+        }\n+        html_diff::Difference::NotPresent { ref elem, ref opposite_elem } => {\n+            if let Some(ref elem) = *elem {\n+                println!(\"    {} One element is missing: expected: `{}`\",\n+                         elem.path, elem.element_name);\n+            } else if let Some(ref elem) = *opposite_elem {\n+                if elem.element_name.is_empty() {\n+                    println!(\"    {} Unexpected element: `{}`\",\n+                             elem.path, concise_str(&elem.element_content));\n+                } else {\n+                    println!(\"    {} Unexpected element `{}`: found: `{}`\",\n+                             elem.path, elem.element_name, concise_str(&elem.element_content));\n+                }\n+            }\n+        }\n+    }\n+}\n+\n /// Build the search index from the collected metadata\n fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n     let mut nodeid_to_pathid = FxHashMap();\n@@ -1664,6 +1747,7 @@ fn document(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item) -> fmt::Re\n /// rendering between Pulldown and Hoedown.\n fn render_markdown(w: &mut fmt::Formatter,\n                    md_text: &str,\n+                   span: Span,\n                    render_type: RenderType,\n                    prefix: &str,\n                    scx: &SharedContext)\n@@ -1673,20 +1757,20 @@ fn render_markdown(w: &mut fmt::Formatter,\n     let output = if render_type == RenderType::Pulldown {\n         let pulldown_output = format!(\"{}\", Markdown(md_text, RenderType::Pulldown));\n         let differences = html_diff::get_differences(&pulldown_output, &hoedown_output);\n-        let differences = differences.iter()\n-            .filter_map(|s| {\n+        let differences = differences.into_iter()\n+            .filter(|s| {\n                 match *s {\n                     html_diff::Difference::NodeText { ref elem_text,\n                                                       ref opposite_elem_text,\n                                                       .. }\n-                        if elem_text.trim() == opposite_elem_text.trim() => None,\n-                    _ => Some(format!(\"=> {}\", s.to_string())),\n+                        if elem_text.trim() == opposite_elem_text.trim() => false,\n+                    _ => true,\n                 }\n             })\n-            .collect::<Vec<String>>();\n+            .collect::<Vec<_>>();\n \n         if !differences.is_empty() {\n-            scx.markdown_warnings.borrow_mut().push((md_text.to_owned(), differences));\n+            scx.markdown_warnings.borrow_mut().push((span, md_text.to_owned(), differences));\n         }\n \n         pulldown_output\n@@ -1706,7 +1790,7 @@ fn document_short(w: &mut fmt::Formatter, item: &clean::Item, link: AssocItemLin\n         } else {\n             format!(\"{}\", &plain_summary_line(Some(s)))\n         };\n-        render_markdown(w, &markdown, cx.render_type, prefix, &cx.shared)?;\n+        render_markdown(w, &markdown, item.source.clone(), cx.render_type, prefix, &cx.shared)?;\n     } else if !prefix.is_empty() {\n         write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n     }\n@@ -1730,7 +1814,7 @@ fn render_assoc_const_value(item: &clean::Item) -> String {\n fn document_full(w: &mut fmt::Formatter, item: &clean::Item,\n                  cx: &Context, prefix: &str) -> fmt::Result {\n     if let Some(s) = item.doc_value() {\n-        render_markdown(w, s, cx.render_type, prefix, &cx.shared)?;\n+        render_markdown(w, s, item.source.clone(), cx.render_type, prefix, &cx.shared)?;\n     } else if !prefix.is_empty() {\n         write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n     }"}]}