{"sha": "c4bbe9cbbe9921646cdedb856e34dc951641ed96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YmJlOWNiYmU5OTIxNjQ2Y2RlZGI4NTZlMzRkYzk1MTY0MWVkOTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-30T17:25:44Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-12T16:54:48Z"}, "message": "Alias `TraitItem` & `ImplItem`.\nAllow defaultness on trait items syntactically.", "tree": {"sha": "c71c2d933922bb09df1c005a909463caa90be6f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c71c2d933922bb09df1c005a909463caa90be6f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4bbe9cbbe9921646cdedb856e34dc951641ed96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4bbe9cbbe9921646cdedb856e34dc951641ed96", "html_url": "https://github.com/rust-lang/rust/commit/c4bbe9cbbe9921646cdedb856e34dc951641ed96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4bbe9cbbe9921646cdedb856e34dc951641ed96/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eebe058e52b749d1a38926390c12900e91b0b2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eebe058e52b749d1a38926390c12900e91b0b2c", "html_url": "https://github.com/rust-lang/rust/commit/3eebe058e52b749d1a38926390c12900e91b0b2c"}], "stats": {"total": 117, "additions": 90, "deletions": 27}, "files": [{"sha": "c159fb66d50701afce375194a3340a4cf9da2cad", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=c4bbe9cbbe9921646cdedb856e34dc951641ed96", "patch": "@@ -714,9 +714,9 @@ impl<'a> Parser<'a> {\n             id: DUMMY_NODE_ID,\n             span: lo.to(self.prev_span),\n             ident: name,\n+            attrs,\n             vis,\n             defaultness,\n-            attrs,\n             generics,\n             kind,\n             tokens: None,\n@@ -882,6 +882,7 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, TraitItem> {\n         let lo = self.token.span;\n         let vis = self.parse_visibility(FollowedByType::No)?;\n+        let defaultness = self.parse_defaultness();\n         let (name, kind, generics) = if self.eat_keyword(kw::Type) {\n             self.parse_trait_item_assoc_ty()?\n         } else if self.is_const_item() {\n@@ -895,12 +896,13 @@ impl<'a> Parser<'a> {\n \n         Ok(TraitItem {\n             id: DUMMY_NODE_ID,\n+            span: lo.to(self.prev_span),\n             ident: name,\n             attrs,\n             vis,\n+            defaultness,\n             generics,\n             kind,\n-            span: lo.to(self.prev_span),\n             tokens: None,\n         })\n     }"}, {"sha": "a078a36db7ac4b533212909862253995fc8aadf1", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=c4bbe9cbbe9921646cdedb856e34dc951641ed96", "patch": "@@ -271,6 +271,14 @@ impl<'a> AstValidator<'a> {\n                 forbid, and warn are the only allowed built-in attributes in function parameters\")\n             });\n     }\n+\n+    fn check_defaultness(&self, span: Span, defaultness: Defaultness) {\n+        if let Defaultness::Default = defaultness {\n+            self.err_handler()\n+                .struct_span_err(span, \"`default` is only allowed on items in `impl` definitions\")\n+                .emit();\n+        }\n+    }\n }\n \n enum GenericPosition {\n@@ -746,6 +754,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n     fn visit_trait_item(&mut self, ti: &'a TraitItem) {\n         self.invalid_visibility(&ti.vis, None);\n+        self.check_defaultness(ti.span, ti.defaultness);\n         visit::walk_trait_item(self, ti);\n     }\n }"}, {"sha": "964acfa92b9bb5fe851c4d260b2e8b655cad0e2f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c4bbe9cbbe9921646cdedb856e34dc951641ed96", "patch": "@@ -1603,24 +1603,12 @@ pub struct FnSig {\n     pub decl: P<FnDecl>,\n }\n \n-/// Represents an item declaration within a trait declaration,\n+pub type TraitItem = ImplItem<TraitItemKind>;\n+\n+/// Represents the kind of an item declaration within a trait declaration,\n /// possibly including a default implementation. A trait item is\n /// either required (meaning it doesn't have an implementation, just a\n /// signature) or provided (meaning it has a default implementation).\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct TraitItem {\n-    pub attrs: Vec<Attribute>,\n-    pub id: NodeId,\n-    pub span: Span,\n-    pub vis: Visibility,\n-    pub ident: Ident,\n-\n-    pub generics: Generics,\n-    pub kind: TraitItemKind,\n-    /// See `Item::tokens` for what this is.\n-    pub tokens: Option<TokenStream>,\n-}\n-\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum TraitItemKind {\n     Const(P<Ty>, Option<P<Expr>>),\n@@ -1631,7 +1619,7 @@ pub enum TraitItemKind {\n \n /// Represents anything within an `impl` block.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct ImplItem {\n+pub struct ImplItem<K = ImplItemKind> {\n     pub attrs: Vec<Attribute>,\n     pub id: NodeId,\n     pub span: Span,\n@@ -1640,7 +1628,7 @@ pub struct ImplItem {\n \n     pub defaultness: Defaultness,\n     pub generics: Generics,\n-    pub kind: ImplItemKind,\n+    pub kind: K,\n     /// See `Item::tokens` for what this is.\n     pub tokens: Option<TokenStream>,\n }"}, {"sha": "9d0a29f29511d1b62da8177fdb7e992b43b1983e", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=c4bbe9cbbe9921646cdedb856e34dc951641ed96", "patch": "@@ -939,7 +939,8 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n pub fn noop_flat_map_trait_item<T: MutVisitor>(mut item: TraitItem, visitor: &mut T)\n     -> SmallVec<[TraitItem; 1]>\n {\n-    let TraitItem { id, ident, vis, attrs, generics, kind, span, tokens: _ } = &mut item;\n+    let TraitItem { id, ident, vis, defaultness: _, attrs, generics, kind, span, tokens: _ } =\n+        &mut item;\n     visitor.visit_id(id);\n     visitor.visit_ident(ident);\n     visitor.visit_vis(vis);"}, {"sha": "2e3ea5e24440fdab4ad1b48876c06ac09108b918", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c4bbe9cbbe9921646cdedb856e34dc951641ed96", "patch": "@@ -1550,6 +1550,7 @@ impl<'a> State<'a> {\n         self.hardbreak_if_not_bol();\n         self.maybe_print_comment(ti.span.lo());\n         self.print_outer_attributes(&ti.attrs);\n+        self.print_defaultness(ti.defaultness);\n         match ti.kind {\n             ast::TraitItemKind::Const(ref ty, ref default) => {\n                 self.print_associated_const("}, {"sha": "6057be9826a5125ac585bda993a952101be7aed4", "filename": "src/libsyntax_expand/placeholders.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Flibsyntax_expand%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Flibsyntax_expand%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fplaceholders.rs?ref=c4bbe9cbbe9921646cdedb856e34dc951641ed96", "patch": "@@ -53,6 +53,7 @@ pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId, vis: Option<ast::Visi\n         AstFragmentKind::TraitItems => AstFragment::TraitItems(smallvec![ast::TraitItem {\n             id, span, ident, vis, attrs, generics,\n             kind: ast::TraitItemKind::Macro(mac_placeholder()),\n+            defaultness: ast::Defaultness::Final,\n             tokens: None,\n         }]),\n         AstFragmentKind::ImplItems => AstFragment::ImplItems(smallvec![ast::ImplItem {"}, {"sha": "e8ef981f515fc669305ba0d3d778a3bc972556c4", "filename": "src/test/ui/issues/issue-60075.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr?ref=c4bbe9cbbe9921646cdedb856e34dc951641ed96", "patch": "@@ -4,7 +4,7 @@ error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n LL |         });\n    |          ^ expected one of `.`, `;`, `?`, `else`, or an operator\n \n-error: expected one of `async`, `const`, `crate`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found `;`\n+error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found `;`\n   --> $DIR/issue-60075.rs:6:11\n    |\n LL |     fn qux() -> Option<usize> {"}, {"sha": "1a97f54160b24bfed843ac35de5402f6d66965eb", "filename": "src/test/ui/parser/issue-32446.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Ftest%2Fui%2Fparser%2Fissue-32446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Ftest%2Fui%2Fparser%2Fissue-32446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32446.stderr?ref=c4bbe9cbbe9921646cdedb856e34dc951641ed96", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `async`, `const`, `crate`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found `...`\n+error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found `...`\n   --> $DIR/issue-32446.rs:4:11\n    |\n LL | trait T { ... }\n-   |           ^^^ expected one of 9 possible tokens\n+   |           ^^^ expected one of 10 possible tokens\n \n error: aborting due to previous error\n "}, {"sha": "7647ba500e03a9e99d345d14f38f6a0006c9aa90", "filename": "src/test/ui/parser/macro/trait-non-item-macros.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr?ref=c4bbe9cbbe9921646cdedb856e34dc951641ed96", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `async`, `const`, `crate`, `extern`, `fn`, `pub`, `type`, or `unsafe`, found `2`\n+error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, or `unsafe`, found `2`\n   --> $DIR/trait-non-item-macros.rs:2:19\n    |\n LL |     ($a:expr) => ($a)\n-   |                   ^^ expected one of 8 possible tokens\n+   |                   ^^ expected one of 9 possible tokens\n ...\n LL |     bah!(2);\n    |     -------- in this macro invocation"}, {"sha": "7e8abf22d55ab4b535950c88ea83ef9ba0cb6557", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr?ref=c4bbe9cbbe9921646cdedb856e34dc951641ed96", "patch": "@@ -7,11 +7,11 @@ LL | trait T {\n LL | fn main() {}\n    |                                                                  ^\n \n-error: expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe`, found keyword `struct`\n+error: expected one of `async`, `const`, `default`, `extern`, `fn`, `type`, or `unsafe`, found keyword `struct`\n   --> $DIR/missing-close-brace-in-trait.rs:5:12\n    |\n LL | pub(crate) struct Bar<T>();\n-   |            ^^^^^^ expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe`\n+   |            ^^^^^^ expected one of 7 possible tokens\n \n error[E0601]: `main` function not found in crate `missing_close_brace_in_trait`\n   --> $DIR/missing-close-brace-in-trait.rs:1:1"}, {"sha": "b67e30637aa624e115c992656f62a9026e05abbc", "filename": "src/test/ui/parser/trait-item-with-defaultness-fail-semantic.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.rs?ref=c4bbe9cbbe9921646cdedb856e34dc951641ed96", "patch": "@@ -0,0 +1,10 @@\n+fn main() {}\n+\n+trait X {\n+    default const A: u8; //~ ERROR `default` is only allowed on items in `impl` definitions\n+    default const B: u8 = 0;  //~ ERROR `default` is only allowed on items in `impl` definitions\n+    default type D; //~ ERROR `default` is only allowed on items in `impl` definitions\n+    default type C: Ord; //~ ERROR `default` is only allowed on items in `impl` definitions\n+    default fn f1(); //~ ERROR `default` is only allowed on items in `impl` definitions\n+    default fn f2() {} //~ ERROR `default` is only allowed on items in `impl` definitions\n+}"}, {"sha": "48b502a1506b108f1d0e1aba8a871b24c5955481", "filename": "src/test/ui/parser/trait-item-with-defaultness-fail-semantic.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.stderr?ref=c4bbe9cbbe9921646cdedb856e34dc951641ed96", "patch": "@@ -0,0 +1,38 @@\n+error: `default` is only allowed on items in `impl` definitions\n+  --> $DIR/trait-item-with-defaultness-fail-semantic.rs:4:5\n+   |\n+LL |     default const A: u8;\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: `default` is only allowed on items in `impl` definitions\n+  --> $DIR/trait-item-with-defaultness-fail-semantic.rs:5:5\n+   |\n+LL |     default const B: u8 = 0;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `default` is only allowed on items in `impl` definitions\n+  --> $DIR/trait-item-with-defaultness-fail-semantic.rs:6:5\n+   |\n+LL |     default type D;\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: `default` is only allowed on items in `impl` definitions\n+  --> $DIR/trait-item-with-defaultness-fail-semantic.rs:7:5\n+   |\n+LL |     default type C: Ord;\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: `default` is only allowed on items in `impl` definitions\n+  --> $DIR/trait-item-with-defaultness-fail-semantic.rs:8:5\n+   |\n+LL |     default fn f1();\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: `default` is only allowed on items in `impl` definitions\n+  --> $DIR/trait-item-with-defaultness-fail-semantic.rs:9:5\n+   |\n+LL |     default fn f2() {}\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "a6318bd99e2f6810fd34bd13ca72557239f12dec", "filename": "src/test/ui/parser/trait-item-with-defaultness-pass.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bbe9cbbe9921646cdedb856e34dc951641ed96/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-pass.rs?ref=c4bbe9cbbe9921646cdedb856e34dc951641ed96", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+trait X {\n+    default const A: u8;\n+    default const B: u8 = 0;\n+    default type D;\n+    default type C: Ord;\n+    default fn f1();\n+    default fn f2() {}\n+}"}]}