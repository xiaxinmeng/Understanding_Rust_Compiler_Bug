{"sha": "33867579238ea94a1d22d1da344d6e484cacd9da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzODY3NTc5MjM4ZWE5NGExZDIyZDFkYTM0NGQ2ZTQ4NGNhY2Q5ZGE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-11-04T00:01:56Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-11-04T00:09:47Z"}, "message": "Move some tests to UI", "tree": {"sha": "24793217d5a146846f07c30099a694fcf9fce52e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24793217d5a146846f07c30099a694fcf9fce52e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33867579238ea94a1d22d1da344d6e484cacd9da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33867579238ea94a1d22d1da344d6e484cacd9da", "html_url": "https://github.com/rust-lang/rust/commit/33867579238ea94a1d22d1da344d6e484cacd9da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33867579238ea94a1d22d1da344d6e484cacd9da/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db0be32fec539ab57c446433cb186f979af40413", "url": "https://api.github.com/repos/rust-lang/rust/commits/db0be32fec539ab57c446433cb186f979af40413", "html_url": "https://github.com/rust-lang/rust/commit/db0be32fec539ab57c446433cb186f979af40413"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "af0b95e002d84cdb98a76102334ddb0d2aebf464", "filename": "src/test/ui/const-pattern-irrefutable.rs", "status": "renamed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33867579238ea94a1d22d1da344d6e484cacd9da/src%2Ftest%2Fui%2Fconst-pattern-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33867579238ea94a1d22d1da344d6e484cacd9da/src%2Ftest%2Fui%2Fconst-pattern-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-pattern-irrefutable.rs?ref=33867579238ea94a1d22d1da344d6e484cacd9da", "patch": "@@ -20,10 +20,7 @@ const a: u8 = 2;\n \n fn main() {\n     let a = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n-               //~^ NOTE pattern `_` not covered\n     let c = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n-               //~^ NOTE pattern `_` not covered\n     let d = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n-               //~^ NOTE pattern `_` not covered\n     fn f() {} // Check that the `NOTE`s still work with an item here (c.f. issue #35115).\n }", "previous_filename": "src/test/compile-fail/const-pattern-irrefutable.rs"}, {"sha": "1f23eec43ef3078701a51b8deb9890dcd1218aad", "filename": "src/test/ui/const-pattern-irrefutable.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/33867579238ea94a1d22d1da344d6e484cacd9da/src%2Ftest%2Fui%2Fconst-pattern-irrefutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33867579238ea94a1d22d1da344d6e484cacd9da/src%2Ftest%2Fui%2Fconst-pattern-irrefutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-pattern-irrefutable.stderr?ref=33867579238ea94a1d22d1da344d6e484cacd9da", "patch": "@@ -0,0 +1,20 @@\n+error[E0005]: refutable pattern in local binding: `_` not covered\n+  --> $DIR/const-pattern-irrefutable.rs:22:9\n+   |\n+22 |     let a = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n+   |         ^ pattern `_` not covered\n+\n+error[E0005]: refutable pattern in local binding: `_` not covered\n+  --> $DIR/const-pattern-irrefutable.rs:23:9\n+   |\n+23 |     let c = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n+   |         ^ pattern `_` not covered\n+\n+error[E0005]: refutable pattern in local binding: `_` not covered\n+  --> $DIR/const-pattern-irrefutable.rs:24:9\n+   |\n+24 |     let d = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n+   |         ^ pattern `_` not covered\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "adf52c6d8e64d8cee371ff82e3366c1a56fdaeaa", "filename": "src/test/ui/resolve/name-clash-nullary.rs", "status": "renamed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/33867579238ea94a1d22d1da344d6e484cacd9da/src%2Ftest%2Fui%2Fresolve%2Fname-clash-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33867579238ea94a1d22d1da344d6e484cacd9da/src%2Ftest%2Fui%2Fresolve%2Fname-clash-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fname-clash-nullary.rs?ref=33867579238ea94a1d22d1da344d6e484cacd9da", "patch": "@@ -8,11 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::option::*;\n-\n fn main() {\n   let None: isize = 42; //~ ERROR mismatched types\n-  log(debug, None);\n-  //~^ ERROR cannot find function `log` in this scope\n-  //~| ERROR cannot find value `debug` in this scope\n }", "previous_filename": "src/test/compile-fail/name-clash-nullary.rs"}, {"sha": "014b1fe1b5b07d1ba5cbacd4965a23b20fe6fbbb", "filename": "src/test/ui/resolve/name-clash-nullary.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/33867579238ea94a1d22d1da344d6e484cacd9da/src%2Ftest%2Fui%2Fresolve%2Fname-clash-nullary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33867579238ea94a1d22d1da344d6e484cacd9da/src%2Ftest%2Fui%2Fresolve%2Fname-clash-nullary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fname-clash-nullary.stderr?ref=33867579238ea94a1d22d1da344d6e484cacd9da", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/name-clash-nullary.rs:12:7\n+   |\n+12 |   let None: isize = 42; //~ ERROR mismatched types\n+   |       ^^^^ expected isize, found enum `std::option::Option`\n+   |\n+   = note: expected type `isize`\n+              found type `std::option::Option<_>`\n+\n+error: aborting due to previous error\n+"}]}