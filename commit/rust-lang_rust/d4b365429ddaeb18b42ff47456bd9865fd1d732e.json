{"sha": "d4b365429ddaeb18b42ff47456bd9865fd1d732e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0YjM2NTQyOWRkYWViMThiNDJmZjQ3NDU2YmQ5ODY1ZmQxZDczMmU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-20T12:57:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-21T08:55:03Z"}, "message": "points the user away from the Allocation type and towards the Memory type", "tree": {"sha": "80eebbd15b42f0d8674d23f223fc2582ce9db626", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80eebbd15b42f0d8674d23f223fc2582ce9db626"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4b365429ddaeb18b42ff47456bd9865fd1d732e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4b365429ddaeb18b42ff47456bd9865fd1d732e", "html_url": "https://github.com/rust-lang/rust/commit/d4b365429ddaeb18b42ff47456bd9865fd1d732e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4b365429ddaeb18b42ff47456bd9865fd1d732e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50ddcbb2f5004da5b2d805c079e7c9699b6b7bea", "url": "https://api.github.com/repos/rust-lang/rust/commits/50ddcbb2f5004da5b2d805c079e7c9699b6b7bea", "html_url": "https://github.com/rust-lang/rust/commit/50ddcbb2f5004da5b2d805c079e7c9699b6b7bea"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "33c53323d96a75a33a81c06ed9dd0eee51eeba2f", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d4b365429ddaeb18b42ff47456bd9865fd1d732e/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4b365429ddaeb18b42ff47456bd9865fd1d732e/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=d4b365429ddaeb18b42ff47456bd9865fd1d732e", "patch": "@@ -245,6 +245,8 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n     /// as a slice.\n     ///\n     /// It is the caller's responsibility to check bounds and alignment beforehand.\n+    /// Most likely, you want to use the `PlaceTy` and `OperandTy`-based methods\n+    /// on `InterpCx` instead.\n     #[inline]\n     pub fn get_bytes(\n         &self,\n@@ -275,6 +277,8 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n     /// so be sure to actually put data there!\n     ///\n     /// It is the caller's responsibility to check bounds and alignment beforehand.\n+    /// Most likely, you want to use the `PlaceTy` and `OperandTy`-based methods\n+    /// on `InterpCx` instead.\n     pub fn get_bytes_mut(\n         &mut self,\n         cx: &impl HasDataLayout,\n@@ -297,6 +301,8 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n     /// Reads bytes until a `0` is encountered. Will error if the end of the allocation is reached\n     /// before a `0` is found.\n+    ///\n+    /// Most likely, you want to call `Memory::read_c_str` instead of this method.\n     pub fn read_c_str(\n         &self,\n         cx: &impl HasDataLayout,\n@@ -342,6 +348,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n     /// Writes `src` to the memory starting at `ptr.offset`.\n     ///\n     /// It is the caller's responsibility to check bounds and alignment beforehand.\n+    /// Most likely, you want to call `Memory::write_bytes` instead of this method.\n     pub fn write_bytes(\n         &mut self,\n         cx: &impl HasDataLayout,\n@@ -363,6 +370,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n     /// Sets `count` bytes starting at `ptr.offset` with `val`. Basically `memset`.\n     ///\n     /// It is the caller's responsibility to check bounds and alignment beforehand.\n+    /// Most likely, you want to call `Memory::write_bytes` instead of this method.\n     pub fn write_repeat(\n         &mut self,\n         cx: &impl HasDataLayout,\n@@ -386,6 +394,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n     ///   pointers being valid for ZSTs.\n     ///\n     /// It is the caller's responsibility to check bounds and alignment beforehand.\n+    /// Most likely, you want to call `InterpCx::read_scalar` instead of this method.\n     pub fn read_scalar(\n         &self,\n         cx: &impl HasDataLayout,\n@@ -424,6 +433,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n     /// Reads a pointer-sized scalar.\n     ///\n     /// It is the caller's responsibility to check bounds and alignment beforehand.\n+    /// Most likely, you want to call `InterpCx::read_scalar` instead of this method.\n     pub fn read_ptr_sized(\n         &self,\n         cx: &impl HasDataLayout,\n@@ -441,6 +451,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n     ///   pointers being valid for ZSTs.\n     ///\n     /// It is the caller's responsibility to check bounds and alignment beforehand.\n+    /// Most likely, you want to call `InterpCx::write_scalar` instead of this method.\n     pub fn write_scalar(\n         &mut self,\n         cx: &impl HasDataLayout,\n@@ -483,6 +494,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n     /// Writes a pointer-sized scalar.\n     ///\n     /// It is the caller's responsibility to check bounds and alignment beforehand.\n+    /// Most likely, you want to call `InterpCx::write_scalar` instead of this method.\n     pub fn write_ptr_sized(\n         &mut self,\n         cx: &impl HasDataLayout,"}]}