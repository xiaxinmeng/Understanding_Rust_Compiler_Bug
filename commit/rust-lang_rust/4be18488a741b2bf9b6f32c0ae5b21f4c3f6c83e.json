{"sha": "4be18488a741b2bf9b6f32c0ae5b21f4c3f6c83e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZTE4NDg4YTc0MWIyYmY5YjZmMzJjMGFlNWIyMWY0YzNmNmM4M2U=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-02-02T18:35:54Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-02-10T17:44:00Z"}, "message": "Fix SwitchInt building in ElaborateDrops pass\n\nPreviously it used to build a switch in a way that didn\u2019t preserve the invariat of SwitchInt. Now\nit builds it in an optimal way too, where otherwise branch becomes all the branches which did not\nhave partial variant drops.", "tree": {"sha": "71b9ba7d6d8d270759b6437e277e55b8e930d5b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71b9ba7d6d8d270759b6437e277e55b8e930d5b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4be18488a741b2bf9b6f32c0ae5b21f4c3f6c83e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4be18488a741b2bf9b6f32c0ae5b21f4c3f6c83e", "html_url": "https://github.com/rust-lang/rust/commit/4be18488a741b2bf9b6f32c0ae5b21f4c3f6c83e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4be18488a741b2bf9b6f32c0ae5b21f4c3f6c83e/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9939863ca5983614e8e70e0abdb088af60ac590", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9939863ca5983614e8e70e0abdb088af60ac590", "html_url": "https://github.com/rust-lang/rust/commit/c9939863ca5983614e8e70e0abdb088af60ac590"}], "stats": {"total": 46, "additions": 34, "deletions": 12}, "files": [{"sha": "5657ec157e8d6065fb4e2dcb689d12a23c1a97c3", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4be18488a741b2bf9b6f32c0ae5b21f4c3f6c83e/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4be18488a741b2bf9b6f32c0ae5b21f4c3f6c83e/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=4be18488a741b2bf9b6f32c0ae5b21f4c3f6c83e", "patch": "@@ -469,10 +469,17 @@ pub enum TerminatorKind<'tcx> {\n         /// are found in the corresponding indices from the `targets` vector.\n         values: Cow<'tcx, [ConstInt]>,\n \n-        /// Possible branch sites. The length of this vector should be\n-        /// equal to the length of the `values` vector plus 1 -- the\n-        /// extra item is the block to branch to if none of the values\n-        /// fit.\n+        /// Possible branch sites. The last element of this vector is used\n+        /// for the otherwise branch, so values.len() == targets.len() + 1\n+        /// should hold.\n+        // This invariant is quite non-obvious and also could be improved.\n+        // One way to make this invariant is to have something like this instead:\n+        //\n+        // branches: Vec<(ConstInt, BasicBlock)>,\n+        // otherwise: Option<BasicBlock> // exhaustive if None\n+        //\n+        // However we\u2019ve decided to keep this as-is until we figure a case\n+        // where some other approach seems to be strictly better than other.\n         targets: Vec<BasicBlock>,\n     },\n "}, {"sha": "7b0863b4c42bcebfc777f70794a5935cf6d76888", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4be18488a741b2bf9b6f32c0ae5b21f4c3f6c83e/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4be18488a741b2bf9b6f32c0ae5b21f4c3f6c83e/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=4be18488a741b2bf9b6f32c0ae5b21f4c3f6c83e", "patch": "@@ -171,10 +171,13 @@ impl<'tcx> Rvalue<'tcx> {\n                 Some(operand.ty(mir, tcx))\n             }\n             Rvalue::Discriminant(ref lval) => {\n-                if let ty::TyAdt(adt_def, _) = lval.ty(mir, tcx).to_ty(tcx).sty {\n+                let ty = lval.ty(mir, tcx).to_ty(tcx);\n+                if let ty::TyAdt(adt_def, _) = ty.sty {\n                     Some(adt_def.discr_ty.to_ty(tcx))\n                 } else {\n-                    None\n+                    // Undefined behaviour, bug for now; may want to return something for\n+                    // the `discriminant` intrinsic later.\n+                    bug!(\"Rvalue::Discriminant on Lvalue of type {:?}\", ty);\n                 }\n             }\n             Rvalue::Box(t) => {"}, {"sha": "144b0c2203ab71fed1d375cefc21da35b533e596", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4be18488a741b2bf9b6f32c0ae5b21f4c3f6c83e/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4be18488a741b2bf9b6f32c0ae5b21f4c3f6c83e/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=4be18488a741b2bf9b6f32c0ae5b21f4c3f6c83e", "patch": "@@ -626,7 +626,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                                  adt: &'tcx ty::AdtDef,\n                                  substs: &'tcx Substs<'tcx>,\n                                  variant_index: usize)\n-                                 -> BasicBlock\n+                                 -> (BasicBlock, bool)\n     {\n         let subpath = super::move_path_children_matching(\n             self.move_data(), c.path, |proj| match proj {\n@@ -645,13 +645,13 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 variant_path,\n                 &adt.variants[variant_index],\n                 substs);\n-            self.drop_ladder(c, fields)\n+            (self.drop_ladder(c, fields), true)\n         } else {\n             // variant not found - drop the entire enum\n             if let None = *drop_block {\n                 *drop_block = Some(self.complete_drop(c, true));\n             }\n-            return drop_block.unwrap();\n+            (drop_block.unwrap(), false)\n         }\n     }\n \n@@ -674,13 +674,25 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             }\n             _ => {\n                 let mut values = Vec::with_capacity(adt.variants.len());\n-                let mut blocks = Vec::with_capacity(adt.variants.len() + 1);\n+                let mut blocks = Vec::with_capacity(adt.variants.len());\n+                let mut otherwise = None;\n                 for (idx, variant) in adt.variants.iter().enumerate() {\n                     let discr = ConstInt::new_inttype(variant.disr_val, adt.discr_ty,\n                                                       self.tcx.sess.target.uint_type,\n                                                       self.tcx.sess.target.int_type).unwrap();\n-                    values.push(discr);\n-                    blocks.push(self.open_drop_for_variant(c, &mut drop_block, adt, substs, idx));\n+                    let (blk, is_ladder) = self.open_drop_for_variant(c, &mut drop_block, adt,\n+                                                                      substs, idx);\n+                    if is_ladder {\n+                        values.push(discr);\n+                        blocks.push(blk);\n+                    } else {\n+                        otherwise = Some(blk)\n+                    }\n+                }\n+                if let Some(block) = otherwise {\n+                    blocks.push(block);\n+                } else {\n+                    values.pop();\n                 }\n                 // If there are multiple variants, then if something\n                 // is present within the enum the discriminant, tracked"}]}