{"sha": "b4c6a39ccf051c9a05956d25e8b075659ae60d1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YzZhMzljY2YwNTFjOWEwNTk1NmQyNWU4YjA3NTY1OWFlNjBkMWM=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2016-08-04T13:18:36Z"}, "committer": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2016-08-04T19:59:37Z"}, "message": "change depr_map to use DeprecationEntry", "tree": {"sha": "65a87ec9f68e1eec2e31a9a16f942728292bb327", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65a87ec9f68e1eec2e31a9a16f942728292bb327"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4c6a39ccf051c9a05956d25e8b075659ae60d1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4c6a39ccf051c9a05956d25e8b075659ae60d1c", "html_url": "https://github.com/rust-lang/rust/commit/b4c6a39ccf051c9a05956d25e8b075659ae60d1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4c6a39ccf051c9a05956d25e8b075659ae60d1c/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75e2624a51f5e3a4b2da47f59b95b15caae64031", "url": "https://api.github.com/repos/rust-lang/rust/commits/75e2624a51f5e3a4b2da47f59b95b15caae64031", "html_url": "https://github.com/rust-lang/rust/commit/75e2624a51f5e3a4b2da47f59b95b15caae64031"}], "stats": {"total": 57, "additions": 48, "deletions": 9}, "files": [{"sha": "209b44e67a1b8e67a82eb7670d78089e1f7db4dd", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 48, "deletions": 9, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b4c6a39ccf051c9a05956d25e8b075659ae60d1c/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c6a39ccf051c9a05956d25e8b075659ae60d1c/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=b4c6a39ccf051c9a05956d25e8b075659ae60d1c", "patch": "@@ -19,7 +19,7 @@ use session::Session;\n use lint;\n use middle::cstore::LOCAL_CRATE;\n use hir::def::Def;\n-use hir::def_id::{CRATE_DEF_INDEX, DefId};\n+use hir::def_id::{CRATE_DEF_INDEX, DefId, DefIndex};\n use ty::{self, TyCtxt};\n use middle::privacy::AccessLevels;\n use syntax::parse::token::InternedString;\n@@ -61,12 +61,46 @@ enum AnnotationKind {\n     Container,\n }\n \n+/// An entry in the `depr_map`.\n+#[derive(Clone)]\n+pub struct DeprecationEntry {\n+    /// The metadata of the attribute associated with this entry.\n+    pub attr: Deprecation,\n+    /// The def id where the attr was originally attached. `None` for non-local\n+    /// `DefId`'s.\n+    origin: Option<DefIndex>,\n+}\n+\n+impl DeprecationEntry {\n+    fn local(attr: Deprecation, id: DefId) -> DeprecationEntry {\n+        assert!(id.is_local());\n+        DeprecationEntry {\n+            attr: attr,\n+            origin: Some(id.index),\n+        }\n+    }\n+\n+    fn external(attr: Deprecation) -> DeprecationEntry {\n+        DeprecationEntry {\n+            attr: attr,\n+            origin: None,\n+        }\n+    }\n+\n+    pub fn same_origin(&self, other: &DeprecationEntry) -> bool {\n+        match (self.origin, other.origin) {\n+            (Some(o1), Some(o2)) => o1 == o2,\n+            _ => false\n+        }\n+    }\n+}\n+\n /// A stability index, giving the stability level for items and methods.\n pub struct Index<'tcx> {\n     /// This is mostly a cache, except the stabilities of local items\n     /// are filled by the annotator.\n     stab_map: DefIdMap<Option<&'tcx Stability>>,\n-    depr_map: DefIdMap<Option<Deprecation>>,\n+    depr_map: DefIdMap<Option<DeprecationEntry>>,\n \n     /// Maps for each crate whether it is part of the staged API.\n     staged_api: FnvHashMap<ast::CrateNum, bool>\n@@ -77,7 +111,7 @@ struct Annotator<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     index: &'a mut Index<'tcx>,\n     parent_stab: Option<&'tcx Stability>,\n-    parent_depr: Option<Deprecation>,\n+    parent_depr: Option<DeprecationEntry>,\n     access_levels: &'a AccessLevels,\n     in_trait_impl: bool,\n }\n@@ -184,14 +218,15 @@ impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n \n                 // `Deprecation` is just two pointers, no need to intern it\n                 let def_id = self.tcx.map.local_def_id(id);\n-                self.index.depr_map.insert(def_id, Some(depr.clone()));\n+                let depr_entry = Some(DeprecationEntry::local(depr, def_id));\n+                self.index.depr_map.insert(def_id, depr_entry.clone());\n \n-                let orig_parent_depr = replace(&mut self.parent_depr, Some(depr));\n+                let orig_parent_depr = replace(&mut self.parent_depr, depr_entry);\n                 visit_children(self);\n                 self.parent_depr = orig_parent_depr;\n-            } else if let Some(depr) = self.parent_depr.clone() {\n+            } else if let parent_depr @ Some(_) = self.parent_depr.clone() {\n                 let def_id = self.tcx.map.local_def_id(id);\n-                self.index.depr_map.insert(def_id, Some(depr));\n+                self.index.depr_map.insert(def_id, parent_depr);\n                 visit_children(self);\n             } else {\n                 visit_children(self);\n@@ -685,6 +720,10 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     }\n \n     pub fn lookup_deprecation(self, id: DefId) -> Option<Deprecation> {\n+        self.lookup_deprecation_entry(id).map(|depr| depr.attr)\n+    }\n+\n+    pub fn lookup_deprecation_entry(self, id: DefId) -> Option<DeprecationEntry> {\n         if let Some(depr) = self.stability.borrow().depr_map.get(&id) {\n             return depr.clone();\n         }\n@@ -703,12 +742,12 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n         }\n     }\n \n-    fn lookup_deprecation_uncached(self, id: DefId) -> Option<Deprecation> {\n+    fn lookup_deprecation_uncached(self, id: DefId) -> Option<DeprecationEntry> {\n         debug!(\"lookup(id={:?})\", id);\n         if id.is_local() {\n             None // The stability cache is filled partially lazily\n         } else {\n-            self.sess.cstore.deprecation(id)\n+            self.sess.cstore.deprecation(id).map(DeprecationEntry::external)\n         }\n     }\n }"}]}