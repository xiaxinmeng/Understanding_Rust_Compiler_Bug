{"sha": "ec2f40c6b04f0e9850dd1f454e8639d319f4ed9b", "node_id": "C_kwDOAAsO6NoAKGVjMmY0MGM2YjA0ZjBlOTg1MGRkMWY0NTRlODYzOWQzMTlmNGVkOWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-30T19:28:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-30T19:28:56Z"}, "message": "Auto merge of #109740 - compiler-errors:new-solver-deep-reject-placeholder-consts, r=lcnr\n\nDon't ICE on placeholder consts in deep reject\n\nSince we canonicalize const params into placeholder consts, we need to be able to handle them during deep reject.\n\nr? `@lcnr` (though maybe `@oli-obk` can look at this one too, if he wants \ud83d\ude38)\n\nFixes compiler-errors/next-solver-hir-issues#10", "tree": {"sha": "184117668671744a4aa48d5d99ac6543b6281343", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/184117668671744a4aa48d5d99ac6543b6281343"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec2f40c6b04f0e9850dd1f454e8639d319f4ed9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec2f40c6b04f0e9850dd1f454e8639d319f4ed9b", "html_url": "https://github.com/rust-lang/rust/commit/ec2f40c6b04f0e9850dd1f454e8639d319f4ed9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec2f40c6b04f0e9850dd1f454e8639d319f4ed9b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "789ee5e4333a132cb58708ac5c341571c57d92ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/789ee5e4333a132cb58708ac5c341571c57d92ef", "html_url": "https://github.com/rust-lang/rust/commit/789ee5e4333a132cb58708ac5c341571c57d92ef"}, {"sha": "1ce6e2bd339d0ea4d292d3afde482050c1f34497", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce6e2bd339d0ea4d292d3afde482050c1f34497", "html_url": "https://github.com/rust-lang/rust/commit/1ce6e2bd339d0ea4d292d3afde482050c1f34497"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "61cde923e9a5a8bd804214943953c73cc105949b", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec2f40c6b04f0e9850dd1f454e8639d319f4ed9b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec2f40c6b04f0e9850dd1f454e8639d319f4ed9b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=ec2f40c6b04f0e9850dd1f454e8639d319f4ed9b", "patch": "@@ -312,6 +312,7 @@ impl DeepRejectCtxt {\n             // Impls cannot contain these types as these cannot be named directly.\n             ty::FnDef(..) | ty::Closure(..) | ty::Generator(..) => false,\n \n+            // Placeholder types don't unify with anything on their own\n             ty::Placeholder(..) | ty::Bound(..) => false,\n \n             // Depending on the value of `treat_obligation_params`, we either\n@@ -359,6 +360,9 @@ impl DeepRejectCtxt {\n                 TreatParams::AsCandidateKey => true,\n             },\n \n+            // Placeholder consts don't unify with anything on their own\n+            ty::ConstKind::Placeholder(_) => false,\n+\n             // As we don't necessarily eagerly evaluate constants,\n             // they might unify with any value.\n             ty::ConstKind::Expr(_) | ty::ConstKind::Unevaluated(_) | ty::ConstKind::Error(_) => {\n@@ -371,7 +375,7 @@ impl DeepRejectCtxt {\n \n             ty::ConstKind::Infer(_) => true,\n \n-            ty::ConstKind::Bound(..) | ty::ConstKind::Placeholder(_) => {\n+            ty::ConstKind::Bound(..) => {\n                 bug!(\"unexpected obl const: {:?}\", obligation_ct)\n             }\n         }"}, {"sha": "4db6e22e57ffa74343a7b75ec12301657626ddcc", "filename": "tests/ui/traits/new-solver/const-param-placeholder.fail.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ec2f40c6b04f0e9850dd1f454e8639d319f4ed9b/tests%2Fui%2Ftraits%2Fnew-solver%2Fconst-param-placeholder.fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec2f40c6b04f0e9850dd1f454e8639d319f4ed9b/tests%2Fui%2Ftraits%2Fnew-solver%2Fconst-param-placeholder.fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fconst-param-placeholder.fail.stderr?ref=ec2f40c6b04f0e9850dd1f454e8639d319f4ed9b", "patch": "@@ -0,0 +1,16 @@\n+error[E0277]: the trait bound `[T; N]: Foo` is not satisfied\n+  --> $DIR/const-param-placeholder.rs:17:17\n+   |\n+LL |     needs_foo::<[T; N]>();\n+   |                 ^^^^^^ the trait `Foo` is not implemented for `[T; N]`\n+   |\n+   = help: the trait `Foo` is implemented for `[T; 1]`\n+note: required by a bound in `needs_foo`\n+  --> $DIR/const-param-placeholder.rs:8:17\n+   |\n+LL | fn needs_foo<F: Foo>() {}\n+   |                 ^^^ required by this bound in `needs_foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "a83102a4cddaea339d7f6403fde9f1ac54296f00", "filename": "tests/ui/traits/new-solver/const-param-placeholder.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ec2f40c6b04f0e9850dd1f454e8639d319f4ed9b/tests%2Fui%2Ftraits%2Fnew-solver%2Fconst-param-placeholder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec2f40c6b04f0e9850dd1f454e8639d319f4ed9b/tests%2Fui%2Ftraits%2Fnew-solver%2Fconst-param-placeholder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fconst-param-placeholder.rs?ref=ec2f40c6b04f0e9850dd1f454e8639d319f4ed9b", "patch": "@@ -0,0 +1,21 @@\n+// compile-flags: -Ztrait-solver=next\n+// revisions: pass fail\n+//[pass] check-pass\n+\n+struct Wrapper<T, const N: usize>([T; N]);\n+\n+trait Foo {}\n+fn needs_foo<F: Foo>() {}\n+\n+#[cfg(fail)]\n+impl<T> Foo for [T; 1] {}\n+\n+#[cfg(pass)]\n+impl<T, const N: usize> Foo for [T; N] {}\n+\n+fn test<T, const N: usize>() {\n+    needs_foo::<[T; N]>();\n+    //[fail]~^ ERROR the trait bound `[T; N]: Foo` is not satisfied\n+}\n+\n+fn main() {}"}]}