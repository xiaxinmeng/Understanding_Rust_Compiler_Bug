{"sha": "c0f18f9412f222e7f314a637d69968618f633b01", "node_id": "C_kwDOAAsO6NoAKGMwZjE4Zjk0MTJmMjIyZTdmMzE0YTYzN2Q2OTk2ODYxOGY2MzNiMDE", "commit": {"author": {"name": "binggh", "email": "binggh@proton.me", "date": "2022-05-29T14:11:36Z"}, "committer": {"name": "binggh", "email": "binggh@proton.me", "date": "2022-05-29T15:16:10Z"}, "message": "Re-add help_on_error for download-ci-llvm\n\nRemove dead code\n\nMissing }\n\n./x.py fmt\n\nRemove duplicate check\n\nRecursively remove all usage of help_on_error", "tree": {"sha": "1b44132f4f041bd9d751e76e6b09a439aeb4ed1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b44132f4f041bd9d751e76e6b09a439aeb4ed1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0f18f9412f222e7f314a637d69968618f633b01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0f18f9412f222e7f314a637d69968618f633b01", "html_url": "https://github.com/rust-lang/rust/commit/c0f18f9412f222e7f314a637d69968618f633b01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0f18f9412f222e7f314a637d69968618f633b01/comments", "author": null, "committer": null, "parents": [{"sha": "0f06824013761ed6829887019033f1001e68f623", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f06824013761ed6829887019033f1001e68f623", "html_url": "https://github.com/rust-lang/rust/commit/0f06824013761ed6829887019033f1001e68f623"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "a997c4f63abb8ace72ea3265a18486f8159c58bd", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c0f18f9412f222e7f314a637d69968618f633b01/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/c0f18f9412f222e7f314a637d69968618f633b01/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=c0f18f9412f222e7f314a637d69968618f633b01", "patch": "@@ -63,7 +63,7 @@ def support_xz():\n     except tarfile.CompressionError:\n         return False\n \n-def get(base, url, path, checksums, verbose=False, do_verify=True, help_on_error=None):\n+def get(base, url, path, checksums, verbose=False, do_verify=True):\n     with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n         temp_path = temp_file.name\n \n@@ -86,7 +86,7 @@ def get(base, url, path, checksums, verbose=False, do_verify=True, help_on_error\n                         print(\"ignoring already-download file\",\n                             path, \"due to failed verification\")\n                     os.unlink(path)\n-        download(temp_path, \"{}/{}\".format(base, url), True, verbose, help_on_error=help_on_error)\n+        download(temp_path, \"{}/{}\".format(base, url), True, verbose)\n         if do_verify and not verify(temp_path, sha256, verbose):\n             raise RuntimeError(\"failed verification\")\n         if verbose:\n@@ -99,17 +99,17 @@ def get(base, url, path, checksums, verbose=False, do_verify=True, help_on_error\n             os.unlink(temp_path)\n \n \n-def download(path, url, probably_big, verbose, help_on_error=None):\n+def download(path, url, probably_big, verbose):\n     for _ in range(0, 4):\n         try:\n-            _download(path, url, probably_big, verbose, True, help_on_error=help_on_error)\n+            _download(path, url, probably_big, verbose, True)\n             return\n         except RuntimeError:\n             print(\"\\nspurious failure, trying again\")\n-    _download(path, url, probably_big, verbose, False, help_on_error=help_on_error)\n+    _download(path, url, probably_big, verbose, False)\n \n \n-def _download(path, url, probably_big, verbose, exception, help_on_error=None):\n+def _download(path, url, probably_big, verbose, exception):\n     # Try to use curl (potentially available on win32\n     #    https://devblogs.microsoft.com/commandline/tar-and-curl-come-to-windows/)\n     # If an error occurs:\n@@ -134,7 +134,7 @@ def _download(path, url, probably_big, verbose, exception, help_on_error=None):\n              \"--retry\", \"3\", \"-Sf\", \"-o\", path, url],\n             verbose=verbose,\n             exception=True, # Will raise RuntimeError on failure\n-            help_on_error=help_on_error)\n+        )\n     except (subprocess.CalledProcessError, OSError, RuntimeError):\n         # see http://serverfault.com/questions/301128/how-to-download\n         if platform_is_win32:\n@@ -186,7 +186,7 @@ def unpack(tarball, tarball_suffix, dst, verbose=False, match=None):\n     shutil.rmtree(os.path.join(dst, fname))\n \n \n-def run(args, verbose=False, exception=False, is_bootstrap=False, help_on_error=None, **kwargs):\n+def run(args, verbose=False, exception=False, is_bootstrap=False, **kwargs):\n     \"\"\"Run a child program in a new process\"\"\"\n     if verbose:\n         print(\"running: \" + ' '.join(args))\n@@ -197,8 +197,6 @@ def run(args, verbose=False, exception=False, is_bootstrap=False, help_on_error=\n     code = ret.wait()\n     if code != 0:\n         err = \"failed to run: \" + ' '.join(args)\n-        if help_on_error is not None:\n-            err += \"\\n\" + help_on_error\n         if verbose or exception:\n             raise RuntimeError(err)\n         # For most failures, we definitely do want to print this error, or the user will have no"}, {"sha": "56d59c03e49920e139c9c2dd01552d2163c052db", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c0f18f9412f222e7f314a637d69968618f633b01/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f18f9412f222e7f314a637d69968618f633b01/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=c0f18f9412f222e7f314a637d69968618f633b01", "patch": "@@ -869,15 +869,21 @@ impl<'a> Builder<'a> {\n         self.try_run(patchelf.arg(fname));\n     }\n \n-    pub(crate) fn download_component(&self, base: &str, url: &str, dest_path: &Path) {\n+    pub(crate) fn download_component(\n+        &self,\n+        base: &str,\n+        url: &str,\n+        dest_path: &Path,\n+        help_on_error: &str,\n+    ) {\n         // Use a temporary file in case we crash while downloading, to avoid a corrupt download in cache/.\n         let tempfile = self.tempdir().join(dest_path.file_name().unwrap());\n         // FIXME: support `do_verify` (only really needed for nightly rustfmt)\n-        self.download_with_retries(&tempfile, &format!(\"{}/{}\", base, url));\n+        self.download_with_retries(&tempfile, &format!(\"{}/{}\", base, url), help_on_error);\n         t!(std::fs::rename(&tempfile, dest_path));\n     }\n \n-    fn download_with_retries(&self, tempfile: &Path, url: &str) {\n+    fn download_with_retries(&self, tempfile: &Path, url: &str, help_on_error: &str) {\n         println!(\"downloading {}\", url);\n         // Try curl. If that fails and we are on windows, fallback to PowerShell.\n         let mut curl = Command::new(\"curl\");\n@@ -914,6 +920,9 @@ impl<'a> Builder<'a> {\n                     println!(\"\\nspurious failure, trying again\");\n                 }\n             }\n+            if !help_on_error.is_empty() {\n+                eprintln!(\"{}\", help_on_error);\n+            }\n             std::process::exit(1);\n         }\n     }"}, {"sha": "8e94fc7c4bea5512395bbe24e1bbd9ef302ab29b", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0f18f9412f222e7f314a637d69968618f633b01/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f18f9412f222e7f314a637d69968618f633b01/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=c0f18f9412f222e7f314a637d69968618f633b01", "patch": "@@ -1491,7 +1491,7 @@ fn download_component(builder: &Builder<'_>, filename: String, prefix: &str, com\n     let url = format!(\"rustc-builds/{commit}\");\n     let tarball = rustc_cache.join(&filename);\n     if !tarball.exists() {\n-        builder.download_component(base, &format!(\"{url}/{filename}\"), &tarball);\n+        builder.download_component(base, &format!(\"{url}/{filename}\"), &tarball, \"\");\n     }\n     let bin_root = builder.out.join(builder.config.build.triple).join(\"ci-rustc\");\n     builder.unpack(&tarball, &bin_root, prefix)"}, {"sha": "cbd877e5f42b1b5fa7beaf248d82b8f425078762", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0f18f9412f222e7f314a637d69968618f633b01/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f18f9412f222e7f314a637d69968618f633b01/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=c0f18f9412f222e7f314a637d69968618f633b01", "patch": "@@ -179,7 +179,15 @@ fn download_ci_llvm(builder: &Builder<'_>, llvm_sha: &str) {\n     let filename = format!(\"rust-dev-nightly-{}.tar.xz\", builder.build.build.triple);\n     let tarball = rustc_cache.join(&filename);\n     if !tarball.exists() {\n-        builder.download_component(base, &format!(\"{}/{}\", url, filename), &tarball);\n+        let help_on_error = \"error: failed to download llvm from ci\\n\n+\\nhelp: old builds get deleted after a certain time\n+\\nhelp: if trying to compile an old commit of rustc, disable `download-ci-llvm` in config.toml:\n+\\n\n+\\n[llvm]\n+\\ndownload-ci-llvm = false\n+\\n\n+\";\n+        builder.download_component(base, &format!(\"{}/{}\", url, filename), &tarball, help_on_error);\n     }\n     let llvm_root = builder.config.ci_llvm_root();\n     builder.unpack(&tarball, &llvm_root, \"rust-dev\");"}]}