{"sha": "0816255c80ee3f2a8870ee5e4379e3739d8ed72e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MTYyNTVjODBlZTNmMmE4ODcwZWU1ZTQzNzllMzczOWQ4ZWQ3MmU=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-01-02T00:37:47Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-01-06T02:21:13Z"}, "message": "Move #[macro_reexport] to extern crate", "tree": {"sha": "32b71b7a4d5f22d8b7ec66a64373acd08e258d5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32b71b7a4d5f22d8b7ec66a64373acd08e258d5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0816255c80ee3f2a8870ee5e4379e3739d8ed72e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0816255c80ee3f2a8870ee5e4379e3739d8ed72e", "html_url": "https://github.com/rust-lang/rust/commit/0816255c80ee3f2a8870ee5e4379e3739d8ed72e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60be2f52d2434dfbf2df7728454d572d76f58bf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/60be2f52d2434dfbf2df7728454d572d76f58bf8", "html_url": "https://github.com/rust-lang/rust/commit/60be2f52d2434dfbf2df7728454d572d76f58bf8"}], "stats": {"total": 124, "additions": 53, "deletions": 71}, "files": [{"sha": "d83bd8b9223951cf7661754f6bec1bcea879e787", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=0816255c80ee3f2a8870ee5e4379e3739d8ed72e", "patch": "@@ -552,6 +552,7 @@ impl<'a> PluginMetadata<'a> {\n                     id: ast::DUMMY_NODE_ID,\n                     span: span,\n                     imported_from: imported_from,\n+                    export: false,  // overridden in plugin/load.rs\n                     body: body,\n                 });\n                 true"}, {"sha": "93c97f6caa66a6aab5d8cb35287384d7eb5cf87e", "filename": "src/librustc/plugin/load.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Flibrustc%2Fplugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Flibrustc%2Fplugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fload.rs?ref=0816255c80ee3f2a8870ee5e4379e3739d8ed72e", "patch": "@@ -17,8 +17,10 @@ use plugin::registry::Registry;\n use std::mem;\n use std::os;\n use std::dynamic_lib::DynamicLibrary;\n+use std::collections::HashSet;\n use syntax::ast;\n use syntax::attr;\n+use syntax::parse::token;\n use syntax::visit;\n use syntax::visit::Visitor;\n use syntax::attr::AttrMetaMethods;\n@@ -87,6 +89,7 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n         // Parse the attributes relating to macro / plugin loading.\n         let mut load_macros = false;\n         let mut load_registrar = false;\n+        let mut reexport = HashSet::new();\n         for attr in vi.attrs.iter() {\n             let mut used = true;\n             match attr.name().get() {\n@@ -96,6 +99,23 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n                 }\n                 \"plugin\" => load_registrar = true,\n                 \"macro_use\" => load_macros = true,\n+                \"macro_reexport\" => {\n+                    let names = match attr.meta_item_list() {\n+                        Some(names) => names,\n+                        None => {\n+                            self.sess.span_err(attr.span, \"bad macro reexport\");\n+                            continue;\n+                        }\n+                    };\n+\n+                    for name in names.iter() {\n+                        if let ast::MetaWord(ref name) = name.node {\n+                            reexport.insert(name.clone());\n+                        } else {\n+                            self.sess.span_err(name.span, \"bad macro reexport\");\n+                        }\n+                    }\n+                }\n                 _ => used = false,\n             }\n             if used {\n@@ -116,7 +136,13 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n             }\n         }\n \n-        self.plugins.macros.extend(macros.into_iter());\n+        for mut def in macros.into_iter() {\n+            if reexport.contains(&token::get_ident(def.ident)) {\n+                def.export = true;\n+            }\n+            self.plugins.macros.push(def);\n+        }\n+\n         if let Some((lib, symbol)) = registrar {\n             self.dylink_registrar(vi, lib, symbol);\n         }"}, {"sha": "261d73b5bf07ac42af9dcd635c4b8b93460606a3", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=0816255c80ee3f2a8870ee5e4379e3739d8ed72e", "patch": "@@ -275,8 +275,6 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n                 deriving_hash_type_parameter: sess.features.borrow().default_type_params,\n                 enable_quotes: sess.features.borrow().quote,\n                 recursion_limit: sess.recursion_limit.get(),\n-                reexported_macros: syntax::ext::tt::reexport::gather(sess.diagnostic(),\n-                                                                     &krate),\n             };\n             let ret = syntax::ext::expand::expand_crate(&sess.parse_sess,\n                                               cfg,"}, {"sha": "65c36d813f478d1a64608f006d412a7e86e6c9c3", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=0816255c80ee3f2a8870ee5e4379e3739d8ed72e", "patch": "@@ -117,9 +117,6 @@\n \n #![reexport_test_harness_main = \"test_main\"]\n \n-#![macro_reexport(assert, assert_eq, debug_assert, debug_assert_eq,\n-    unreachable, unimplemented, write, writeln, vec)]\n-\n #[cfg(all(test, stage0))]\n #[phase(plugin, link)]\n extern crate log;\n@@ -134,6 +131,8 @@ extern crate core;\n \n #[cfg(not(stage0))]\n #[macro_use]\n+#[macro_reexport(assert, assert_eq, debug_assert, debug_assert_eq,\n+    unreachable, unimplemented, write, writeln)]\n extern crate core;\n \n #[cfg(stage0)]\n@@ -142,6 +141,7 @@ extern crate \"collections\" as core_collections;\n \n #[cfg(not(stage0))]\n #[macro_use]\n+#[macro_reexport(vec)]\n extern crate \"collections\" as core_collections;\n \n extern crate \"rand\" as core_rand;"}, {"sha": "e34060a73c1542e96498d6757e6f4f975e006770", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=0816255c80ee3f2a8870ee5e4379e3739d8ed72e", "patch": "@@ -1708,6 +1708,7 @@ pub struct MacroDef {\n     pub id: NodeId,\n     pub span: Span,\n     pub imported_from: Option<Ident>,\n+    pub export: bool,\n     pub body: Vec<TokenTree>,\n }\n "}, {"sha": "815159e94c82a74790316ecc40563b13e2ad6787", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=0816255c80ee3f2a8870ee5e4379e3739d8ed72e", "patch": "@@ -16,6 +16,7 @@ use codemap;\n use codemap::{CodeMap, Span, ExpnId, ExpnInfo, NO_EXPANSION};\n use ext;\n use ext::expand;\n+use ext::tt::macro_rules;\n use parse;\n use parse::parser;\n use parse::token;\n@@ -568,6 +569,15 @@ impl<'a> ExtCtxt<'a> {\n             }\n         }\n     }\n+\n+    pub fn insert_macro(&mut self, def: ast::MacroDef) {\n+        if def.export {\n+            self.exported_macros.push(def.clone());\n+        }\n+        let ext = macro_rules::compile(self, &def);\n+        self.syntax_env.insert(def.ident.name, ext);\n+    }\n+\n     /// Emit `msg` attached to `sp`, and stop compilation immediately.\n     ///\n     /// `span_err` should be strongly preferred where-ever possible:"}, {"sha": "6c2b0610fa037200eebf8df1d4949e70a811da05", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0816255c80ee3f2a8870ee5e4379e3739d8ed72e", "patch": "@@ -17,7 +17,6 @@ use ast;\n use ast_util::path_to_ident;\n use ext::mtwt;\n use ext::build::AstBuilder;\n-use ext::tt::macro_rules;\n use attr;\n use attr::AttrMetaMethods;\n use codemap;\n@@ -636,14 +635,10 @@ pub fn expand_item_mac(it: P<ast::Item>,\n                         id: ast::DUMMY_NODE_ID,\n                         span: it.span,\n                         imported_from: None,\n+                        export: attr::contains_name(it.attrs.as_slice(), \"macro_export\"),\n                         body: tts,\n                     };\n-                    let ext = macro_rules::compile(fld.cx, &def);\n-                    fld.cx.syntax_env.insert(def.ident.name, ext);\n-\n-                    if attr::contains_name(def.attrs.as_slice(), \"macro_export\") {\n-                        fld.cx.exported_macros.push(def);\n-                    }\n+                    fld.cx.insert_macro(def);\n \n                     // macro_rules! has a side effect but expands to nothing.\n                     fld.cx.bt_pop();\n@@ -1178,7 +1173,6 @@ pub struct ExpansionConfig {\n     pub deriving_hash_type_parameter: bool,\n     pub enable_quotes: bool,\n     pub recursion_limit: uint,\n-    pub reexported_macros: Vec<String>,\n }\n \n impl ExpansionConfig {\n@@ -1188,7 +1182,6 @@ impl ExpansionConfig {\n             deriving_hash_type_parameter: false,\n             enable_quotes: false,\n             recursion_limit: 64,\n-            reexported_macros: vec![],\n         }\n     }\n }\n@@ -1202,15 +1195,8 @@ pub fn expand_crate(parse_sess: &parse::ParseSess,\n     let mut cx = ExtCtxt::new(parse_sess, c.config.clone(), cfg);\n     let mut expander = MacroExpander::new(&mut cx);\n \n-    for def in imported_macros.iter() {\n-        let ext = macro_rules::compile(expander.cx, def);\n-        expander.cx.syntax_env.insert(def.ident.name, ext);\n-\n-        if expander.cx.ecfg.reexported_macros.iter()\n-            .any(|e| e[] == token::get_ident(def.ident).get()) {\n-\n-            expander.cx.exported_macros.push(def.clone());\n-        }\n+    for def in imported_macros.into_iter() {\n+        expander.cx.insert_macro(def);\n     }\n \n     for (name, extension) in user_exts.into_iter() {"}, {"sha": "104f37872535c09aefc272d829345964b0612dff", "filename": "src/libsyntax/ext/tt/reexport.rs", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/60be2f52d2434dfbf2df7728454d572d76f58bf8/src%2Flibsyntax%2Fext%2Ftt%2Freexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60be2f52d2434dfbf2df7728454d572d76f58bf8/src%2Flibsyntax%2Fext%2Ftt%2Freexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Freexport.rs?ref=60be2f52d2434dfbf2df7728454d572d76f58bf8", "patch": "@@ -1,41 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Defines the crate attribute syntax for macro re-export.\n-\n-use ast;\n-use attr::AttrMetaMethods;\n-use diagnostic::SpanHandler;\n-\n-/// Return a vector of the names of all macros re-exported from the crate.\n-pub fn gather(diag: &SpanHandler, krate: &ast::Crate) -> Vec<String> {\n-    let usage = \"malformed macro_reexport attribute, expected \\\n-                 #![macro_reexport(ident, ident, ...)]\";\n-\n-    let mut reexported: Vec<String> = vec!();\n-    for attr in krate.attrs.iter() {\n-        if !attr.check_name(\"macro_reexport\") {\n-            continue;\n-        }\n-\n-        match attr.meta_item_list() {\n-            None => diag.span_err(attr.span, usage),\n-            Some(list) => for mi in list.iter() {\n-                match mi.node {\n-                    ast::MetaWord(ref word)\n-                        => reexported.push(word.to_string()),\n-                    _ => diag.span_err(mi.span, usage),\n-                }\n-            }\n-        }\n-    }\n-\n-    reexported\n-}"}, {"sha": "b7bfd346d506b96fffdfbbb0e535d273a0969255", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=0816255c80ee3f2a8870ee5e4379e3739d8ed72e", "patch": "@@ -111,6 +111,5 @@ pub mod ext {\n         pub mod transcribe;\n         pub mod macro_parser;\n         pub mod macro_rules;\n-        pub mod reexport;\n     }\n }"}, {"sha": "15d9f9cc9146d0a2c5e88fd1e2e762b1cc2b1fe1", "filename": "src/test/auxiliary/macro_reexport_2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Ftest%2Fauxiliary%2Fmacro_reexport_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Ftest%2Fauxiliary%2Fmacro_reexport_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_reexport_2.rs?ref=0816255c80ee3f2a8870ee5e4379e3739d8ed72e", "patch": "@@ -10,7 +10,6 @@\n \n #![crate_type = \"dylib\"]\n \n-#![macro_reexport(reexported)]\n-\n+#[macro_reexport(reexported)]\n #[macro_use] #[no_link]\n extern crate macro_reexport_1;"}, {"sha": "b9f754b2778bc653e8c196ec620f5494cb0e5549", "filename": "src/test/compile-fail/macro-reexport-malformed-1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs?ref=0816255c80ee3f2a8870ee5e4379e3739d8ed72e", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![macro_reexport]  //~ ERROR malformed macro_reexport attribute\n+#[macro_reexport]  //~ ERROR bad macro reexport\n+extern crate std;\n \n fn main() { }"}, {"sha": "9ced5be8479baf0c226d32169c30b11c05f1bd2e", "filename": "src/test/compile-fail/macro-reexport-malformed-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs?ref=0816255c80ee3f2a8870ee5e4379e3739d8ed72e", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![macro_reexport=\"foo\"]  //~ ERROR malformed macro_reexport attribute\n+#[macro_reexport=\"foo\"]  //~ ERROR bad macro reexport\n+extern crate std;\n \n fn main() { }"}, {"sha": "c8bd0a0509cdcfa81e9ea375c96d407e66504160", "filename": "src/test/compile-fail/macro-reexport-malformed-3.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816255c80ee3f2a8870ee5e4379e3739d8ed72e/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs?ref=0816255c80ee3f2a8870ee5e4379e3739d8ed72e", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![macro_reexport(foo=\"bar\")]  //~ ERROR malformed macro_reexport attribute\n+#[macro_reexport(foo=\"bar\")]  //~ ERROR bad macro reexport\n+extern crate std;\n \n fn main() { }"}]}