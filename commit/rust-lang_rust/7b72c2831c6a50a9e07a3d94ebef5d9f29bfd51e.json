{"sha": "7b72c2831c6a50a9e07a3d94ebef5d9f29bfd51e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNzJjMjgzMWM2YTUwYTllMDdhM2Q5NGViZWY1ZDlmMjliZmQ1MWU=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-10-31T16:13:28Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-10-31T16:13:28Z"}, "message": "Stabilize float_to_from_bytes feature", "tree": {"sha": "4e04d8f2e512de5618c884b115e1b7a3e5886603", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e04d8f2e512de5618c884b115e1b7a3e5886603"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b72c2831c6a50a9e07a3d94ebef5d9f29bfd51e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b72c2831c6a50a9e07a3d94ebef5d9f29bfd51e", "html_url": "https://github.com/rust-lang/rust/commit/7b72c2831c6a50a9e07a3d94ebef5d9f29bfd51e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b72c2831c6a50a9e07a3d94ebef5d9f29bfd51e/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92df638162b7ccea6f97a8e1287ed05c5c0818b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/92df638162b7ccea6f97a8e1287ed05c5c0818b4", "html_url": "https://github.com/rust-lang/rust/commit/92df638162b7ccea6f97a8e1287ed05c5c0818b4"}], "stats": {"total": 36, "additions": 12, "deletions": 24}, "files": [{"sha": "5730088c4d9a95a9f21f48609074c677138385f6", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7b72c2831c6a50a9e07a3d94ebef5d9f29bfd51e/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b72c2831c6a50a9e07a3d94ebef5d9f29bfd51e/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=7b72c2831c6a50a9e07a3d94ebef5d9f29bfd51e", "patch": "@@ -466,11 +466,10 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let bytes = 12.5f32.to_be_bytes();\n     /// assert_eq!(bytes, [0x41, 0x48, 0x00, 0x00]);\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn to_be_bytes(self) -> [u8; 4] {\n         self.to_bits().to_be_bytes()\n@@ -482,11 +481,10 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let bytes = 12.5f32.to_le_bytes();\n     /// assert_eq!(bytes, [0x00, 0x00, 0x48, 0x41]);\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn to_le_bytes(self) -> [u8; 4] {\n         self.to_bits().to_le_bytes()\n@@ -504,7 +502,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let bytes = 12.5f32.to_ne_bytes();\n     /// assert_eq!(\n     ///     bytes,\n@@ -515,7 +512,7 @@ impl f32 {\n     ///     }\n     /// );\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn to_ne_bytes(self) -> [u8; 4] {\n         self.to_bits().to_ne_bytes()\n@@ -526,11 +523,10 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let value = f32::from_be_bytes([0x41, 0x48, 0x00, 0x00]);\n     /// assert_eq!(value, 12.5);\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn from_be_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_be_bytes(bytes))\n@@ -541,11 +537,10 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let value = f32::from_le_bytes([0x00, 0x00, 0x48, 0x41]);\n     /// assert_eq!(value, 12.5);\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn from_le_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_le_bytes(bytes))\n@@ -563,15 +558,14 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let value = f32::from_ne_bytes(if cfg!(target_endian = \"big\") {\n     ///     [0x41, 0x48, 0x00, 0x00]\n     /// } else {\n     ///     [0x00, 0x00, 0x48, 0x41]\n     /// });\n     /// assert_eq!(value, 12.5);\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn from_ne_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_ne_bytes(bytes))"}, {"sha": "2bdeda340dce01c19d7d60c2aaa08c1c5a6baaea", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7b72c2831c6a50a9e07a3d94ebef5d9f29bfd51e/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b72c2831c6a50a9e07a3d94ebef5d9f29bfd51e/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=7b72c2831c6a50a9e07a3d94ebef5d9f29bfd51e", "patch": "@@ -479,11 +479,10 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let bytes = 12.5f64.to_be_bytes();\n     /// assert_eq!(bytes, [0x40, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn to_be_bytes(self) -> [u8; 8] {\n         self.to_bits().to_be_bytes()\n@@ -495,11 +494,10 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let bytes = 12.5f64.to_le_bytes();\n     /// assert_eq!(bytes, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x40]);\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn to_le_bytes(self) -> [u8; 8] {\n         self.to_bits().to_le_bytes()\n@@ -517,7 +515,6 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let bytes = 12.5f64.to_ne_bytes();\n     /// assert_eq!(\n     ///     bytes,\n@@ -528,7 +525,7 @@ impl f64 {\n     ///     }\n     /// );\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn to_ne_bytes(self) -> [u8; 8] {\n         self.to_bits().to_ne_bytes()\n@@ -539,11 +536,10 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let value = f64::from_be_bytes([0x40, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\n     /// assert_eq!(value, 12.5);\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn from_be_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_be_bytes(bytes))\n@@ -554,11 +550,10 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let value = f64::from_le_bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x40]);\n     /// assert_eq!(value, 12.5);\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn from_le_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_le_bytes(bytes))\n@@ -576,15 +571,14 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let value = f64::from_ne_bytes(if cfg!(target_endian = \"big\") {\n     ///     [0x40, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]\n     /// } else {\n     ///     [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x40]\n     /// });\n     /// assert_eq!(value, 12.5);\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn from_ne_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_ne_bytes(bytes))"}]}