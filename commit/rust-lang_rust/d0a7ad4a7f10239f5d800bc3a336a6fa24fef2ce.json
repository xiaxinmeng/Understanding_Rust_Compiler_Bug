{"sha": "d0a7ad4a7f10239f5d800bc3a336a6fa24fef2ce", "node_id": "C_kwDOAAsO6NoAKGQwYTdhZDRhN2YxMDIzOWY1ZDgwMGJjM2EzMzZhNmZhMjRmZWYyY2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-03T15:11:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-03T15:11:02Z"}, "message": "Auto merge of #12457 - Veykril:logging, r=Veykril\n\ninternal: Don't log default build script outputs", "tree": {"sha": "71170bba4d718627aa0d5cca000627e4e5797cea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71170bba4d718627aa0d5cca000627e4e5797cea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0a7ad4a7f10239f5d800bc3a336a6fa24fef2ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a7ad4a7f10239f5d800bc3a336a6fa24fef2ce", "html_url": "https://github.com/rust-lang/rust/commit/d0a7ad4a7f10239f5d800bc3a336a6fa24fef2ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0a7ad4a7f10239f5d800bc3a336a6fa24fef2ce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43d9c3f64969b8f40ee9def8d7b4f590de067009", "url": "https://api.github.com/repos/rust-lang/rust/commits/43d9c3f64969b8f40ee9def8d7b4f590de067009", "html_url": "https://github.com/rust-lang/rust/commit/43d9c3f64969b8f40ee9def8d7b4f590de067009"}, {"sha": "d0e3114441e25cbf027285fed38ef863748e49e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0e3114441e25cbf027285fed38ef863748e49e5", "html_url": "https://github.com/rust-lang/rust/commit/d0e3114441e25cbf027285fed38ef863748e49e5"}], "stats": {"total": 49, "additions": 29, "deletions": 20}, "files": [{"sha": "73091306a85ae02c11b0500f8071a03fcf9652c9", "filename": "crates/project-model/src/build_scripts.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d0a7ad4a7f10239f5d800bc3a336a6fa24fef2ce/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a7ad4a7f10239f5d800bc3a336a6fa24fef2ce/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs?ref=d0a7ad4a7f10239f5d800bc3a336a6fa24fef2ce", "patch": "@@ -18,7 +18,7 @@ use crate::{cfg_flag::CfgFlag, CargoConfig, CargoWorkspace, Package};\n \n #[derive(Debug, Default, Clone, PartialEq, Eq)]\n pub struct WorkspaceBuildScripts {\n-    pub(crate) outputs: ArenaMap<Package, BuildScriptOutput>,\n+    outputs: ArenaMap<Package, Option<BuildScriptOutput>>,\n     error: Option<String>,\n }\n \n@@ -72,6 +72,7 @@ impl WorkspaceBuildScripts {\n \n         cmd\n     }\n+\n     pub(crate) fn run(\n         config: &CargoConfig,\n         workspace: &CargoWorkspace,\n@@ -91,13 +92,13 @@ impl WorkspaceBuildScripts {\n         cmd.current_dir(workspace.workspace_root());\n \n         let mut res = WorkspaceBuildScripts::default();\n+        let outputs = &mut res.outputs;\n         // NB: Cargo.toml could have been modified between `cargo metadata` and\n         // `cargo check`. We shouldn't assume that package ids we see here are\n         // exactly those from `config`.\n         let mut by_id: FxHashMap<String, Package> = FxHashMap::default();\n-\n         for package in workspace.packages() {\n-            res.outputs.insert(package, BuildScriptOutput::default());\n+            outputs.insert(package, None);\n             by_id.insert(workspace[package].id.clone(), package);\n         }\n \n@@ -141,7 +142,8 @@ impl WorkspaceBuildScripts {\n                             }\n                             acc\n                         };\n-                        let package_build_data = &mut res.outputs[package];\n+                        let package_build_data =\n+                            outputs[package].get_or_insert_with(Default::default);\n                         // cargo_metadata crate returns default (empty) path for\n                         // older cargos, which is not absolute, so work around that.\n                         if !message.out_dir.as_str().is_empty() {\n@@ -167,7 +169,9 @@ impl WorkspaceBuildScripts {\n                                 message.filenames.iter().find(|name| is_dylib(name))\n                             {\n                                 let filename = AbsPathBuf::assert(PathBuf::from(&filename));\n-                                res.outputs[package].proc_macro_dylib_path = Some(filename);\n+                                outputs[package]\n+                                    .get_or_insert_with(Default::default)\n+                                    .proc_macro_dylib_path = Some(filename);\n                             }\n                         }\n                     }\n@@ -189,17 +193,18 @@ impl WorkspaceBuildScripts {\n         )?;\n \n         for package in workspace.packages() {\n-            let package_build_data = &mut res.outputs[package];\n-            tracing::info!(\n-                \"{} BuildScriptOutput: {:?}\",\n-                workspace[package].manifest.parent().display(),\n-                package_build_data,\n-            );\n-            // inject_cargo_env(package, package_build_data);\n-            if let Some(out_dir) = &package_build_data.out_dir {\n-                // NOTE: cargo and rustc seem to hide non-UTF-8 strings from env! and option_env!()\n-                if let Some(out_dir) = out_dir.as_os_str().to_str().map(|s| s.to_owned()) {\n-                    package_build_data.envs.push((\"OUT_DIR\".to_string(), out_dir));\n+            if let Some(package_build_data) = &mut outputs[package] {\n+                tracing::info!(\n+                    \"{} BuildScriptOutput: {:?}\",\n+                    workspace[package].manifest.parent().display(),\n+                    package_build_data,\n+                );\n+                // inject_cargo_env(package, package_build_data);\n+                if let Some(out_dir) = &package_build_data.out_dir {\n+                    // NOTE: cargo and rustc seem to hide non-UTF-8 strings from env! and option_env!()\n+                    if let Some(out_dir) = out_dir.as_os_str().to_str().map(|s| s.to_owned()) {\n+                        package_build_data.envs.push((\"OUT_DIR\".to_string(), out_dir));\n+                    }\n                 }\n             }\n         }\n@@ -218,6 +223,10 @@ impl WorkspaceBuildScripts {\n     pub fn error(&self) -> Option<&str> {\n         self.error.as_deref()\n     }\n+\n+    pub(crate) fn get_output(&self, idx: Package) -> Option<&BuildScriptOutput> {\n+        self.outputs.get(idx)?.as_ref()\n+    }\n }\n \n // FIXME: File a better way to know if it is a dylib."}, {"sha": "80fd01a4c6c4b264d65a3fe2e45bfa81e60f3639", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0a7ad4a7f10239f5d800bc3a336a6fa24fef2ce/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a7ad4a7f10239f5d800bc3a336a6fa24fef2ce/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=d0a7ad4a7f10239f5d800bc3a336a6fa24fef2ce", "patch": "@@ -312,9 +312,9 @@ impl ProjectWorkspace {\n                         let pkg_root = cargo[pkg].manifest.parent().to_path_buf();\n \n                         let mut include = vec![pkg_root.clone()];\n-                        include.extend(\n-                            build_scripts.outputs.get(pkg).and_then(|it| it.out_dir.clone()),\n-                        );\n+                        let out_dir =\n+                            build_scripts.get_output(pkg).and_then(|it| it.out_dir.clone());\n+                        include.extend(out_dir);\n \n                         // In case target's path is manually set in Cargo.toml to be\n                         // outside the package root, add its parent as an extra include.\n@@ -586,7 +586,7 @@ fn cargo_to_crate_graph(\n                 let crate_id = add_target_crate_root(\n                     &mut crate_graph,\n                     &cargo[pkg],\n-                    build_scripts.outputs.get(pkg),\n+                    build_scripts.get_output(pkg),\n                     cfg_options,\n                     &mut |path| load_proc_macro(&cargo[tgt].name, path),\n                     file_id,"}]}