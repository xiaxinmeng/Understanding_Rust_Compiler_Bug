{"sha": "dedfb9c2140dcc770054b1515d6099e42d35004d", "node_id": "C_kwDOAAsO6NoAKGRlZGZiOWMyMTQwZGNjNzcwMDU0YjE1MTVkNjA5OWU0MmQzNTAwNGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-15T00:38:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-15T00:38:08Z"}, "message": "Auto merge of #104091 - BelovDV:issue-103044, r=petrochenkov\n\nWrap bundled static libraries into object files\n\nFixes #103044 (not sure, couldn't test locally)\n\nBundled static libraries should be wrapped into object files as it's done for metadata file.\n\nr? `@petrochenkov`", "tree": {"sha": "e3608dceb37dcce9cb70f1af45033e97cd249d96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3608dceb37dcce9cb70f1af45033e97cd249d96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dedfb9c2140dcc770054b1515d6099e42d35004d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dedfb9c2140dcc770054b1515d6099e42d35004d", "html_url": "https://github.com/rust-lang/rust/commit/dedfb9c2140dcc770054b1515d6099e42d35004d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dedfb9c2140dcc770054b1515d6099e42d35004d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "url": "https://api.github.com/repos/rust-lang/rust/commits/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "html_url": "https://github.com/rust-lang/rust/commit/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef"}, {"sha": "e16c77847decf7bcfc4db8f0ac9be7b3059ce64c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e16c77847decf7bcfc4db8f0ac9be7b3059ce64c", "html_url": "https://github.com/rust-lang/rust/commit/e16c77847decf7bcfc4db8f0ac9be7b3059ce64c"}], "stats": {"total": 70, "additions": 51, "deletions": 19}, "files": [{"sha": "2b1b06d1644c9062656d3cc52ce816dc2bb72eff", "filename": "compiler/rustc_codegen_ssa/src/back/archive.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dedfb9c2140dcc770054b1515d6099e42d35004d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedfb9c2140dcc770054b1515d6099e42d35004d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs?ref=dedfb9c2140dcc770054b1515d6099e42d35004d", "patch": "@@ -4,8 +4,11 @@ use rustc_session::cstore::DllImport;\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n \n+use super::metadata::search_for_section;\n+\n use object::read::archive::ArchiveFile;\n \n+use std::error::Error;\n use std::fs::File;\n use std::io;\n use std::path::{Path, PathBuf};\n@@ -56,6 +59,9 @@ pub trait ArchiveBuilderBuilder {\n             if !bundled_lib_file_names.contains(&Symbol::intern(name)) {\n                 continue; // We need to extract only native libraries.\n             }\n+            let data = search_for_section(rlib, data, \".bundled_lib\").map_err(|e| {\n+                ExtractBundledLibsError::ExtractSection { rlib, error: Box::<dyn Error>::from(e) }\n+            })?;\n             std::fs::write(&outdir.join(&name), data)\n                 .map_err(|e| ExtractBundledLibsError::WriteFile { rlib, error: Box::new(e) })?;\n         }"}, {"sha": "4445e5f6c3a64e3d24c0d9379f15cfd74337eda1", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dedfb9c2140dcc770054b1515d6099e42d35004d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedfb9c2140dcc770054b1515d6099e42d35004d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=dedfb9c2140dcc770054b1515d6099e42d35004d", "patch": "@@ -8,7 +8,7 @@ use rustc_errors::{ErrorGuaranteed, Handler};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_metadata::find_native_static_library;\n-use rustc_metadata::fs::{emit_metadata, METADATA_FILENAME};\n+use rustc_metadata::fs::{emit_wrapper_file, METADATA_FILENAME};\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_middle::middle::exported_symbols::SymbolExportKind;\n use rustc_session::config::{self, CFGuard, CrateType, DebugInfo, LdImpl, Lto, Strip};\n@@ -29,7 +29,7 @@ use rustc_target::spec::{RelocModel, RelroLevel, SanitizerSet, SplitDebuginfo};\n use super::archive::{ArchiveBuilder, ArchiveBuilderBuilder};\n use super::command::Command;\n use super::linker::{self, Linker};\n-use super::metadata::{create_rmeta_file, MetadataPosition};\n+use super::metadata::{create_wrapper_file, MetadataPosition};\n use super::rpath::{self, RPathConfig};\n use crate::{\n     errors, looks_like_rust_object_file, CodegenResults, CompiledModule, CrateInfo, NativeLib,\n@@ -44,7 +44,7 @@ use std::borrow::Borrow;\n use std::cell::OnceCell;\n use std::collections::BTreeSet;\n use std::ffi::OsString;\n-use std::fs::{File, OpenOptions};\n+use std::fs::{read, File, OpenOptions};\n use std::io::{BufWriter, Write};\n use std::ops::Deref;\n use std::path::{Path, PathBuf};\n@@ -292,8 +292,8 @@ fn link_rlib<'a>(\n     let trailing_metadata = match flavor {\n         RlibFlavor::Normal => {\n             let (metadata, metadata_position) =\n-                create_rmeta_file(sess, codegen_results.metadata.raw_data());\n-            let metadata = emit_metadata(sess, &metadata, tmpdir);\n+                create_wrapper_file(sess, b\".rmeta\".to_vec(), codegen_results.metadata.raw_data());\n+            let metadata = emit_wrapper_file(sess, &metadata, tmpdir, METADATA_FILENAME);\n             match metadata_position {\n                 MetadataPosition::First => {\n                     // Most of the time metadata in rlib files is wrapped in a \"dummy\" object\n@@ -376,12 +376,18 @@ fn link_rlib<'a>(\n             let location =\n                 find_native_static_library(name.as_str(), lib.verbatim, &lib_search_paths, sess);\n             if sess.opts.unstable_opts.packed_bundled_libs && flavor == RlibFlavor::Normal {\n-                packed_bundled_libs.push(find_native_static_library(\n-                    lib.filename.unwrap().as_str(),\n+                let filename = lib.filename.unwrap();\n+                let lib_path = find_native_static_library(\n+                    filename.as_str(),\n                     Some(true),\n                     &lib_search_paths,\n                     sess,\n-                ));\n+                );\n+                let src = read(lib_path)\n+                    .map_err(|e| sess.emit_fatal(errors::ReadFileError { message: e }))?;\n+                let (data, _) = create_wrapper_file(sess, b\".bundled_lib\".to_vec(), &src);\n+                let wrapper_file = emit_wrapper_file(sess, &data, tmpdir, filename.as_str());\n+                packed_bundled_libs.push(wrapper_file);\n                 continue;\n             }\n             ab.add_archive(&location, Box::new(|_| false)).unwrap_or_else(|error| {"}, {"sha": "780a3850036816c00f50dcb623b89cc47d3bc8de", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dedfb9c2140dcc770054b1515d6099e42d35004d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedfb9c2140dcc770054b1515d6099e42d35004d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=dedfb9c2140dcc770054b1515d6099e42d35004d", "patch": "@@ -60,7 +60,7 @@ impl MetadataLoader for DefaultMetadataLoader {\n                     let data = entry\n                         .data(data)\n                         .map_err(|e| format!(\"failed to parse rlib '{}': {}\", path.display(), e))?;\n-                    return search_for_metadata(path, data, \".rmeta\");\n+                    return search_for_section(path, data, \".rmeta\");\n                 }\n             }\n \n@@ -69,11 +69,11 @@ impl MetadataLoader for DefaultMetadataLoader {\n     }\n \n     fn get_dylib_metadata(&self, _target: &Target, path: &Path) -> Result<MetadataRef, String> {\n-        load_metadata_with(path, |data| search_for_metadata(path, data, \".rustc\"))\n+        load_metadata_with(path, |data| search_for_section(path, data, \".rustc\"))\n     }\n }\n \n-fn search_for_metadata<'a>(\n+pub(super) fn search_for_section<'a>(\n     path: &Path,\n     bytes: &'a [u8],\n     section: &str,\n@@ -223,7 +223,11 @@ pub enum MetadataPosition {\n // * ELF - All other targets are similar to Windows in that there's a\n //   `SHF_EXCLUDE` flag we can set on sections in an object file to get\n //   automatically removed from the final output.\n-pub fn create_rmeta_file(sess: &Session, metadata: &[u8]) -> (Vec<u8>, MetadataPosition) {\n+pub fn create_wrapper_file(\n+    sess: &Session,\n+    section_name: Vec<u8>,\n+    data: &[u8],\n+) -> (Vec<u8>, MetadataPosition) {\n     let Some(mut file) = create_object_file(sess) else {\n         // This is used to handle all \"other\" targets. This includes targets\n         // in two categories:\n@@ -241,11 +245,11 @@ pub fn create_rmeta_file(sess: &Session, metadata: &[u8]) -> (Vec<u8>, MetadataP\n         // WebAssembly and for targets not supported by the `object` crate\n         // yet it means that work will need to be done in the `object` crate\n         // to add a case above.\n-        return (metadata.to_vec(), MetadataPosition::Last);\n+        return (data.to_vec(), MetadataPosition::Last);\n     };\n     let section = file.add_section(\n         file.segment_name(StandardSegment::Debug).to_vec(),\n-        b\".rmeta\".to_vec(),\n+        section_name,\n         SectionKind::Debug,\n     );\n     match file.format() {\n@@ -259,7 +263,7 @@ pub fn create_rmeta_file(sess: &Session, metadata: &[u8]) -> (Vec<u8>, MetadataP\n         }\n         _ => {}\n     };\n-    file.append_section_data(section, metadata, 1);\n+    file.append_section_data(section, data, 1);\n     (file.write().unwrap(), MetadataPosition::First)\n }\n "}, {"sha": "bfc4515de0984405ecb640911b802296ab1a109a", "filename": "compiler/rustc_codegen_ssa/src/errors.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dedfb9c2140dcc770054b1515d6099e42d35004d/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedfb9c2140dcc770054b1515d6099e42d35004d/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs?ref=dedfb9c2140dcc770054b1515d6099e42d35004d", "patch": "@@ -507,6 +507,9 @@ pub enum ExtractBundledLibsError<'a> {\n \n     #[diag(codegen_ssa_extract_bundled_libs_write_file)]\n     WriteFile { rlib: &'a Path, error: Box<dyn std::error::Error> },\n+\n+    #[diag(codegen_ssa_extract_bundled_libs_write_file)]\n+    ExtractSection { rlib: &'a Path, error: Box<dyn std::error::Error> },\n }\n \n #[derive(Diagnostic)]\n@@ -521,3 +524,9 @@ pub enum AppleSdkRootError<'a> {\n     #[diag(codegen_ssa_apple_sdk_error_sdk_path)]\n     SdkPath { sdk_name: &'a str, error: Error },\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_read_file)]\n+pub struct ReadFileError {\n+    pub message: std::io::Error,\n+}"}, {"sha": "eb6b403d00e88943e8eddd6f32d66bce672b0bc4", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_ssa.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedfb9c2140dcc770054b1515d6099e42d35004d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/dedfb9c2140dcc770054b1515d6099e42d35004d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl?ref=dedfb9c2140dcc770054b1515d6099e42d35004d", "patch": "@@ -182,3 +182,5 @@ codegen_ssa_extract_bundled_libs_write_file = failed to write file '{$rlib}': {$\n codegen_ssa_unsupported_arch = unsupported arch `{$arch}` for os `{$os}`\n \n codegen_ssa_apple_sdk_error_sdk_path = failed to get {$sdk_name} SDK path: {error}\n+\n+codegen_ssa_read_file = failed to read file: {message}"}, {"sha": "c41ae8d55cdad6d3dcd2a9205cfd26541f62418a", "filename": "compiler/rustc_metadata/src/fs.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dedfb9c2140dcc770054b1515d6099e42d35004d/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedfb9c2140dcc770054b1515d6099e42d35004d/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs?ref=dedfb9c2140dcc770054b1515d6099e42d35004d", "patch": "@@ -22,9 +22,14 @@ pub const METADATA_FILENAME: &str = \"lib.rmeta\";\n /// building an `.rlib` (stomping over one another), or writing an `.rmeta` into a\n /// directory being searched for `extern crate` (observing an incomplete file).\n /// The returned path is the temporary file containing the complete metadata.\n-pub fn emit_metadata(sess: &Session, metadata: &[u8], tmpdir: &MaybeTempDir) -> PathBuf {\n-    let out_filename = tmpdir.as_ref().join(METADATA_FILENAME);\n-    let result = fs::write(&out_filename, metadata);\n+pub fn emit_wrapper_file(\n+    sess: &Session,\n+    data: &[u8],\n+    tmpdir: &MaybeTempDir,\n+    name: &str,\n+) -> PathBuf {\n+    let out_filename = tmpdir.as_ref().join(name);\n+    let result = fs::write(&out_filename, data);\n \n     if let Err(err) = result {\n         sess.emit_fatal(FailedWriteError { filename: out_filename, err });"}, {"sha": "1987f88e6b8cc9c10d6e6be53c2f216ef8304b2b", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedfb9c2140dcc770054b1515d6099e42d35004d/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedfb9c2140dcc770054b1515d6099e42d35004d/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=dedfb9c2140dcc770054b1515d6099e42d35004d", "patch": "@@ -41,6 +41,6 @@ pub mod errors;\n pub mod fs;\n pub mod locator;\n \n-pub use fs::{emit_metadata, METADATA_FILENAME};\n+pub use fs::{emit_wrapper_file, METADATA_FILENAME};\n pub use native_libs::find_native_static_library;\n pub use rmeta::{encode_metadata, EncodedMetadata, METADATA_HEADER};"}]}