{"sha": "0b303523bdb34c946326b72420f19f670cf884d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMzAzNTIzYmRiMzRjOTQ2MzI2YjcyNDIwZjE5ZjY3MGNmODg0ZDY=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-11-18T07:55:01Z"}, "committer": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-12-19T04:44:21Z"}, "message": "Fix up local variable support so it actually works.", "tree": {"sha": "7c09e34e320039dce3c1def7f9b29869c474af81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c09e34e320039dce3c1def7f9b29869c474af81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b303523bdb34c946326b72420f19f670cf884d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b303523bdb34c946326b72420f19f670cf884d6", "html_url": "https://github.com/rust-lang/rust/commit/0b303523bdb34c946326b72420f19f670cf884d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b303523bdb34c946326b72420f19f670cf884d6/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e95c56f8554bd4c13876e999d3372408ffd732e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e95c56f8554bd4c13876e999d3372408ffd732e7", "html_url": "https://github.com/rust-lang/rust/commit/e95c56f8554bd4c13876e999d3372408ffd732e7"}], "stats": {"total": 58, "additions": 36, "deletions": 22}, "files": [{"sha": "01408b2886ab10f654c34dfbbf50a9cc5b7d205f", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0b303523bdb34c946326b72420f19f670cf884d6/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b303523bdb34c946326b72420f19f670cf884d6/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=0b303523bdb34c946326b72420f19f670cf884d6", "patch": "@@ -221,7 +221,7 @@ fn get_ty_metadata(cx: @crate_ctxt, t: ty::t, ty: @ast::ty) -> @metadata<tydesc_\n       option::some(md) { ret md; }\n       option::none. {}\n     }\n-    let (name, size, flags) = alt ty.node {\n+    let (name, size, encoding) = alt ty.node {\n       ast::ty_bool. { (\"bool\", 1, DW_ATE_boolean) }\n       ast::ty_int. { (\"int\", 32, DW_ATE_signed) } //XXX machine-dependent?\n       ast::ty_uint. { (\"uint\", 32, DW_ATE_unsigned) } //XXX machine-dependent?\n@@ -240,15 +240,19 @@ fn get_ty_metadata(cx: @crate_ctxt, t: ty::t, ty: @ast::ty) -> @metadata<tydesc_\n       } }\n       ast::ty_char. { (\"char\", 32, DW_ATE_unsigned) }\n     };\n+    let fname = filename_from_span(cx, ty.span);\n+    let file_node = get_file_metadata(cx, fname);\n+    let cu_node = get_compile_unit_metadata(cx, fname);\n     let lldata = [lltag(BasicTypeDescriptorTag),\n-                  llunused(), //XXX scope context\n+                  cu_node.node,\n                   llstr(name),\n-                  llnull(), //XXX basic types only\n+                  file_node.node,\n                   lli32(0), //XXX basic types only\n                   lli64(size),\n                   lli64(32), //XXX alignment?\n                   lli64(0), //XXX offset?\n-                  lli32(flags)];\n+                  lli32(0), //XXX flags?\n+                  lli32(encoding)];\n     let llnode = llmdnode(lldata);\n     let mdval = @{node: llnode, data: {hash: ty::hash_ty(t)}};\n     update_cache(cache, BasicTypeDescriptorTag, tydesc_metadata(mdval));\n@@ -266,6 +270,10 @@ fn function_metadata_from_block(bcx: @block_ctxt) -> @metadata<subprogram_md> {\n     get_function_metadata(cx, fn_item, fcx.llfn)\n }\n \n+fn filename_from_span(cx: @crate_ctxt, sp: codemap::span) -> str {\n+    codemap::lookup_char_pos(cx.sess.get_codemap(), sp.lo).filename\n+}\n+\n fn get_local_var_metadata(bcx: @block_ctxt, local: @ast::local)\n     -> @metadata<local_var_md> unsafe {\n     let cx = bcx_ccx(bcx);\n@@ -293,8 +301,7 @@ fn get_local_var_metadata(bcx: @block_ctxt, local: @ast::local)\n                   filemd.node,\n                   lli32(loc.line as int), // line\n                   tymd.node,\n-                  lli32(0), //XXX flags\n-                  llnull() // inline loc reference\n+                  lli32(0) //XXX flags\n                  ];\n     let mdnode = llmdnode(lldata);\n     let mdval = @{node: mdnode, data: {id: local.node.id}};\n@@ -310,9 +317,6 @@ fn get_local_var_metadata(bcx: @block_ctxt, local: @ast::local)\n     let declargs = [llmdnode([llptr]), mdnode];\n     trans_build::Call(bcx, cx.intrinsics.get(\"llvm.dbg.declare\"),\n                       declargs);\n-    llvm::LLVMAddNamedMetadataOperand(cx.llmod, as_buf(\"llvm.dbg.vars\"),\n-                                      str::byte_len(\"llvm.dbg.vars\"),\n-                                      mdnode);\n     ret mdval;\n }\n "}, {"sha": "4c58cc5e26d907d588c62fb30dc3a3ef3321fbc8", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0b303523bdb34c946326b72420f19f670cf884d6/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b303523bdb34c946326b72420f19f670cf884d6/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=0b303523bdb34c946326b72420f19f670cf884d6", "patch": "@@ -23,7 +23,7 @@ import front::attr;\n import middle::{ty, gc, resolve, debuginfo};\n import middle::freevars::*;\n import back::{link, abi, upcall};\n-import syntax::{ast, ast_util};\n+import syntax::{ast, ast_util, codemap};\n import syntax::visit;\n import syntax::codemap::span;\n import syntax::print::pprust::{expr_to_str, stmt_to_str};\n@@ -4038,10 +4038,22 @@ fn trans_stmt(cx: @block_ctxt, s: ast::stmt) -> @block_ctxt {\n       _ { bcx_ccx(cx).sess.unimpl(\"stmt variant\"); }\n     }\n \n-    //debuginfo::reset_source_pos(cx);\n     ret bcx;\n }\n \n+fn source_pos_from_block_parent(parent: block_parent)\n+    -> (bool, [codemap::loc]) {\n+    alt parent {\n+      parent_none. { (false, []) }\n+      parent_some(bcx) { (bcx.source_pos.usable,\n+                          alt vec::last(bcx.source_pos.pos) {\n+                            option::some(p) { [p] }\n+                            option::none. { [] }\n+                          })\n+                       }\n+    }\n+}\n+\n // You probably don't want to use this one. See the\n // next three functions instead.\n fn new_block_ctxt(cx: @fn_ctxt, parent: block_parent, kind: block_kind,\n@@ -4053,6 +4065,7 @@ fn new_block_ctxt(cx: @fn_ctxt, parent: block_parent, kind: block_kind,\n     }\n     let llbb: BasicBlockRef =\n         str::as_buf(s, {|buf| llvm::LLVMAppendBasicBlock(cx.llfn, buf) });\n+    let (usable, pos) = source_pos_from_block_parent(parent);\n     let bcx = @{llbb: llbb,\n                 mutable terminated: false,\n                 mutable unreachable: false,\n@@ -4063,8 +4076,7 @@ fn new_block_ctxt(cx: @fn_ctxt, parent: block_parent, kind: block_kind,\n                 mutable lpad: option::none,\n                 sp: cx.sp,\n                 fcx: cx,\n-                source_pos: {mutable usable: false,\n-                             mutable pos: []}};\n+                source_pos: {mutable usable: usable, mutable pos: pos}};\n     alt parent {\n       parent_some(cx) {\n         if cx.unreachable { Unreachable(bcx); }\n@@ -4099,6 +4111,7 @@ fn new_sub_block_ctxt(bcx: @block_ctxt, n: str) -> @block_ctxt {\n }\n \n fn new_raw_block_ctxt(fcx: @fn_ctxt, llbb: BasicBlockRef) -> @block_ctxt {\n+    let (usable, pos) = source_pos_from_block_parent(parent_none);\n     ret @{llbb: llbb,\n           mutable terminated: false,\n           mutable unreachable: false,\n@@ -4109,8 +4122,7 @@ fn new_raw_block_ctxt(fcx: @fn_ctxt, llbb: BasicBlockRef) -> @block_ctxt {\n           mutable lpad: option::none,\n           sp: fcx.sp,\n           fcx: fcx,\n-          source_pos: {mutable usable: false,\n-                       mutable pos: []}};\n+          source_pos: {mutable usable: usable, mutable pos: pos}};\n }\n \n \n@@ -4168,6 +4180,7 @@ fn block_locals(b: ast::blk, it: block(@ast::local)) {\n }\n \n fn llstaticallocas_block_ctxt(fcx: @fn_ctxt) -> @block_ctxt {\n+    let (usable, pos) = source_pos_from_block_parent(parent_none);\n     ret @{llbb: fcx.llstaticallocas,\n           mutable terminated: false,\n           mutable unreachable: false,\n@@ -4178,11 +4191,11 @@ fn llstaticallocas_block_ctxt(fcx: @fn_ctxt) -> @block_ctxt {\n           mutable lpad: option::none,\n           sp: fcx.sp,\n           fcx: fcx,\n-          source_pos: {mutable usable: false,\n-                       mutable pos: []}};\n+          source_pos: {mutable usable: usable, mutable pos: pos}};\n }\n \n fn llderivedtydescs_block_ctxt(fcx: @fn_ctxt) -> @block_ctxt {\n+    let (usable, pos) = source_pos_from_block_parent(parent_none);\n     ret @{llbb: fcx.llderivedtydescs,\n           mutable terminated: false,\n           mutable unreachable: false,\n@@ -4193,8 +4206,7 @@ fn llderivedtydescs_block_ctxt(fcx: @fn_ctxt) -> @block_ctxt {\n           mutable lpad: option::none,\n           sp: fcx.sp,\n           fcx: fcx,\n-          source_pos: {mutable usable: false,\n-                       mutable pos: []}};\n+          source_pos: {mutable usable: usable, mutable pos: pos}};\n }\n \n \n@@ -4271,14 +4283,12 @@ fn trans_block_dps(bcx: @block_ctxt, b: ast::blk, dest: dest)\n     for s: @ast::stmt in b.node.stmts {\n         let _s = debuginfo::update_source_pos(bcx, b.span);\n         bcx = trans_stmt(bcx, *s);\n-        //debuginfo::reset_source_pos(bcx);\n     }\n     alt b.node.expr {\n       some(e) {\n         let bt = ty::type_is_bot(bcx_tcx(bcx), ty::expr_ty(bcx_tcx(bcx), e));\n         let _s = debuginfo::update_source_pos(bcx, e.span);\n         bcx = trans_expr(bcx, e, bt ? ignore : dest);\n-        //debuginfo::reset_source_pos(bcx);\n       }\n       _ { assert dest == ignore || bcx.unreachable; }\n     }"}, {"sha": "600c1e27c73dda9542737cebc3e2d69df750acc8", "filename": "src/comp/middle/trans_build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b303523bdb34c946326b72420f19f670cf884d6/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b303523bdb34c946326b72420f19f670cf884d6/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_build.rs?ref=0b303523bdb34c946326b72420f19f670cf884d6", "patch": "@@ -670,7 +670,7 @@ fn Call(cx: @block_ctxt, Fn: ValueRef, Args: [ValueRef]) -> ValueRef {\n     unsafe {\n         let instr = llvm::LLVMBuildCall(B(cx), Fn, vec::to_ptr(Args),\n                                         vec::len(Args), noname());\n-        //debuginfo::add_line_info(cx, instr);\n+        debuginfo::add_line_info(cx, instr);\n         ret instr;\n     }\n }"}]}