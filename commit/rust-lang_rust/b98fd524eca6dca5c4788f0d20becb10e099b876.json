{"sha": "b98fd524eca6dca5c4788f0d20becb10e099b876", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5OGZkNTI0ZWNhNmRjYTVjNDc4OGYwZDIwYmVjYjEwZTA5OWI4NzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-05T14:17:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-05T14:17:04Z"}, "message": "Auto merge of #47142 - sdroege:trusted-random-access-chunks, r=kennytm\n\nImplement TrustedRandomAccess for slice::{Chunks, ChunksMut, Windows}\n\nAs suggested by @bluss in https://github.com/rust-lang/rust/issues/47115#issuecomment-354888334", "tree": {"sha": "0b3bafaa8f2848c54b41708a2d2784862cd610b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b3bafaa8f2848c54b41708a2d2784862cd610b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b98fd524eca6dca5c4788f0d20becb10e099b876", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b98fd524eca6dca5c4788f0d20becb10e099b876", "html_url": "https://github.com/rust-lang/rust/commit/b98fd524eca6dca5c4788f0d20becb10e099b876", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b98fd524eca6dca5c4788f0d20becb10e099b876/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd582ac38ec066859334061e71faf2631220d98b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd582ac38ec066859334061e71faf2631220d98b", "html_url": "https://github.com/rust-lang/rust/commit/dd582ac38ec066859334061e71faf2631220d98b"}, {"sha": "b69c124255e25d5d1c16ee88c4f2a75964db9209", "url": "https://api.github.com/repos/rust-lang/rust/commits/b69c124255e25d5d1c16ee88c4f2a75964db9209", "html_url": "https://github.com/rust-lang/rust/commit/b69c124255e25d5d1c16ee88c4f2a75964db9209"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "72036d6d3a248e0cff831c3d5d6e1cd1e3c6f007", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b98fd524eca6dca5c4788f0d20becb10e099b876/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98fd524eca6dca5c4788f0d20becb10e099b876/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=b98fd524eca6dca5c4788f0d20becb10e099b876", "patch": "@@ -2117,6 +2117,14 @@ impl<'a, T> ExactSizeIterator for Windows<'a, T> {}\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for Windows<'a, T> {}\n \n+#[doc(hidden)]\n+unsafe impl<'a, T> TrustedRandomAccess for Windows<'a, T> {\n+    unsafe fn get_unchecked(&mut self, i: usize) -> &'a [T] {\n+        from_raw_parts(self.v.as_ptr().offset(i as isize), self.size)\n+    }\n+    fn may_have_side_effect() -> bool { false }\n+}\n+\n /// An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a\n /// time).\n ///\n@@ -2228,6 +2236,19 @@ impl<'a, T> ExactSizeIterator for Chunks<'a, T> {}\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for Chunks<'a, T> {}\n \n+#[doc(hidden)]\n+unsafe impl<'a, T> TrustedRandomAccess for Chunks<'a, T> {\n+    unsafe fn get_unchecked(&mut self, i: usize) -> &'a [T] {\n+        let start = i * self.chunk_size;\n+        let end = match start.checked_add(self.chunk_size) {\n+            None => self.v.len(),\n+            Some(end) => cmp::min(end, self.v.len()),\n+        };\n+        from_raw_parts(self.v.as_ptr().offset(start as isize), end - start)\n+    }\n+    fn may_have_side_effect() -> bool { false }\n+}\n+\n /// An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size`\n /// elements at a time). When the slice len is not evenly divided by the chunk\n /// size, the last slice of the iteration will be the remainder.\n@@ -2331,6 +2352,19 @@ impl<'a, T> ExactSizeIterator for ChunksMut<'a, T> {}\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for ChunksMut<'a, T> {}\n \n+#[doc(hidden)]\n+unsafe impl<'a, T> TrustedRandomAccess for ChunksMut<'a, T> {\n+    unsafe fn get_unchecked(&mut self, i: usize) -> &'a mut [T] {\n+        let start = i * self.chunk_size;\n+        let end = match start.checked_add(self.chunk_size) {\n+            None => self.v.len(),\n+            Some(end) => cmp::min(end, self.v.len()),\n+        };\n+        from_raw_parts_mut(self.v.as_mut_ptr().offset(start as isize), end - start)\n+    }\n+    fn may_have_side_effect() -> bool { false }\n+}\n+\n //\n // Free functions\n //"}, {"sha": "d6230e93f998d052b2f9aa55d3b6fbec186fedf7", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b98fd524eca6dca5c4788f0d20becb10e099b876/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98fd524eca6dca5c4788f0d20becb10e099b876/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=b98fd524eca6dca5c4788f0d20becb10e099b876", "patch": "@@ -137,6 +137,18 @@ fn test_chunks_last() {\n     assert_eq!(c2.last().unwrap()[0], 4);\n }\n \n+#[test]\n+fn test_chunks_zip() {\n+    let v1: &[i32] = &[0, 1, 2, 3, 4];\n+    let v2: &[i32] = &[6, 7, 8, 9, 10];\n+\n+    let res = v1.chunks(2)\n+        .zip(v2.chunks(2))\n+        .map(|(a, b)| a.iter().sum::<i32>() + b.iter().sum::<i32>())\n+        .collect::<Vec<_>>();\n+    assert_eq!(res, vec![14, 22, 14]);\n+}\n+\n #[test]\n fn test_chunks_mut_count() {\n     let v: &mut [i32] = &mut [0, 1, 2, 3, 4, 5];\n@@ -176,6 +188,20 @@ fn test_chunks_mut_last() {\n     assert_eq!(c2.last().unwrap()[0], 4);\n }\n \n+#[test]\n+fn test_chunks_mut_zip() {\n+    let v1: &mut [i32] = &mut [0, 1, 2, 3, 4];\n+    let v2: &[i32] = &[6, 7, 8, 9, 10];\n+\n+    for (a, b) in v1.chunks_mut(2).zip(v2.chunks(2)) {\n+        let sum = b.iter().sum::<i32>();\n+        for v in a {\n+            *v += sum;\n+        }\n+    }\n+    assert_eq!(v1, [13, 14, 19, 20, 14]);\n+}\n+\n #[test]\n fn test_windows_count() {\n     let v: &[i32] = &[0, 1, 2, 3, 4, 5];\n@@ -215,6 +241,19 @@ fn test_windows_last() {\n     assert_eq!(c2.last().unwrap()[0], 3);\n }\n \n+#[test]\n+fn test_windows_zip() {\n+    let v1: &[i32] = &[0, 1, 2, 3, 4];\n+    let v2: &[i32] = &[6, 7, 8, 9, 10];\n+\n+    let res = v1.windows(2)\n+        .zip(v2.windows(2))\n+        .map(|(a, b)| a.iter().sum::<i32>() + b.iter().sum::<i32>())\n+        .collect::<Vec<_>>();\n+\n+    assert_eq!(res, [14, 18, 22, 26]);\n+}\n+\n #[test]\n fn get_range() {\n     let v: &[i32] = &[0, 1, 2, 3, 4, 5];"}]}