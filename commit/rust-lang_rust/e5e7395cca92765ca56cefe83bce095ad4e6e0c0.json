{"sha": "e5e7395cca92765ca56cefe83bce095ad4e6e0c0", "node_id": "C_kwDOAAsO6NoAKGU1ZTczOTVjY2E5Mjc2NWNhNTZjZWZlODNiY2UwOTVhZDRlNmUwYzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-22T01:33:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-22T01:33:49Z"}, "message": "Auto merge of #99420 - RalfJung:vtable, r=oli-obk\n\nmake vtable pointers entirely opaque\n\nThis implements the scheme discussed in https://github.com/rust-lang/unsafe-code-guidelines/issues/338: vtable pointers should be considered entirely opaque and not even readable by Rust code, similar to function pointers.\n\n- We have a new kind of `GlobalAlloc` that symbolically refers to a vtable.\n- Miri uses that kind of allocation when generating a vtable.\n- The codegen backends, upon encountering such an allocation, call `vtable_allocation` to obtain an actually dataful allocation for this vtable.\n- We need new intrinsics to obtain the size and align from a vtable (for some `ptr::metadata` APIs), since direct accesses are UB now.\n\nI had to touch quite a bit of code that I am not very familiar with, so some of this might not make much sense...\nr? `@oli-obk`", "tree": {"sha": "7120901f26b92d513c85d90a77d4494a1f7537da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7120901f26b92d513c85d90a77d4494a1f7537da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5e7395cca92765ca56cefe83bce095ad4e6e0c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e7395cca92765ca56cefe83bce095ad4e6e0c0", "html_url": "https://github.com/rust-lang/rust/commit/e5e7395cca92765ca56cefe83bce095ad4e6e0c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5e7395cca92765ca56cefe83bce095ad4e6e0c0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f118ce1024444988efd9dbd2a2886cb826ce86f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f118ce1024444988efd9dbd2a2886cb826ce86f", "html_url": "https://github.com/rust-lang/rust/commit/4f118ce1024444988efd9dbd2a2886cb826ce86f"}, {"sha": "59d223d1ed89f411ebde0e05765e9d7e4f4bf3c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/59d223d1ed89f411ebde0e05765e9d7e4f4bf3c7", "html_url": "https://github.com/rust-lang/rust/commit/59d223d1ed89f411ebde0e05765e9d7e4f4bf3c7"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "ccb6cbbc2c8a74bb98ab5a977c8698dea5b7c769", "filename": "src/common.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5e7395cca92765ca56cefe83bce095ad4e6e0c0/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e7395cca92765ca56cefe83bce095ad4e6e0c0/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=e5e7395cca92765ca56cefe83bce095ad4e6e0c0", "patch": "@@ -201,6 +201,11 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n                         GlobalAlloc::Function(fn_instance) => {\n                             self.get_fn_addr(fn_instance)\n                         },\n+                        GlobalAlloc::VTable(ty, trait_ref) => {\n+                            let alloc = self.tcx.global_alloc(self.tcx.vtable_allocation((ty, trait_ref))).unwrap_memory();\n+                            let init = const_alloc_to_gcc(self, alloc);\n+                            self.static_addr_of(init, alloc.inner().align, None)\n+                        }\n                         GlobalAlloc::Static(def_id) => {\n                             assert!(self.tcx.is_static(def_id));\n                             self.get_static(def_id).get_address(None)"}]}