{"sha": "9fbff89354ba7a4ec2d1191a3f405cbe408370f6", "node_id": "C_kwDOAAsO6NoAKDlmYmZmODkzNTRiYTdhNGVjMmQxMTkxYTNmNDA1Y2JlNDA4MzcwZjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-27T21:41:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-27T21:41:06Z"}, "message": "Auto merge of #94157 - erikdesjardins:more-noundef, r=nikic\n\nApply noundef attribute to all scalar types which do not permit raw init\n\nBeyond `&`/`&mut`/`Box`, this covers `char`, enum discriminants, `NonZero*`, etc.\nAll such types currently cause a Miri error if left uninitialized,\nand an `invalid_value` lint in cases like `mem::uninitialized::<char>()`.\n\nNote that this _does not_ change whether or not it is UB for `u64` (or\nother integer types with no invalid values) to be undef.\n\nFixes (partially) #74378.\n\nr? `@ghost` (blocked on #94127)\n\n`@rustbot` label S-blocked", "tree": {"sha": "be5786736399ab8be46745ceb4239a9155b5ac79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be5786736399ab8be46745ceb4239a9155b5ac79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fbff89354ba7a4ec2d1191a3f405cbe408370f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fbff89354ba7a4ec2d1191a3f405cbe408370f6", "html_url": "https://github.com/rust-lang/rust/commit/9fbff89354ba7a4ec2d1191a3f405cbe408370f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fbff89354ba7a4ec2d1191a3f405cbe408370f6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a705566166debf5eff88c57140df607fa409aaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a705566166debf5eff88c57140df607fa409aaa", "html_url": "https://github.com/rust-lang/rust/commit/6a705566166debf5eff88c57140df607fa409aaa"}, {"sha": "45ee3fc700950da07e0682c6bf56b9c123fbf995", "url": "https://api.github.com/repos/rust-lang/rust/commits/45ee3fc700950da07e0682c6bf56b9c123fbf995", "html_url": "https://github.com/rust-lang/rust/commit/45ee3fc700950da07e0682c6bf56b9c123fbf995"}], "stats": {"total": 71, "additions": 63, "deletions": 8}, "files": [{"sha": "c77047f8a2ec25e94d31e0dec98371e944f11aad", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9fbff89354ba7a4ec2d1191a3f405cbe408370f6/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fbff89354ba7a4ec2d1191a3f405cbe408370f6/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=9fbff89354ba7a4ec2d1191a3f405cbe408370f6", "patch": "@@ -3053,6 +3053,11 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 return;\n             }\n \n+            // Scalars which have invalid values cannot be undef.\n+            if !scalar.is_always_valid(self) {\n+                attrs.set(ArgAttribute::NoUndef);\n+            }\n+\n             // Only pointer types handled below.\n             if scalar.value != Pointer {\n                 return;"}, {"sha": "2b34eaf94172be8536b94eb3897365b3d271d324", "filename": "src/test/codegen/abi-repr-ext.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fbff89354ba7a4ec2d1191a3f405cbe408370f6/src%2Ftest%2Fcodegen%2Fabi-repr-ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fbff89354ba7a4ec2d1191a3f405cbe408370f6/src%2Ftest%2Fcodegen%2Fabi-repr-ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-repr-ext.rs?ref=9fbff89354ba7a4ec2d1191a3f405cbe408370f6", "patch": "@@ -1,3 +1,5 @@\n+// compile-flags: -O\n+\n #![crate_type=\"lib\"]\n \n #[repr(i8)]\n@@ -6,7 +8,7 @@ pub enum Type {\n     Type2 = 1\n }\n \n-// CHECK: define{{( dso_local)?}} signext i8 @test()\n+// CHECK: define{{( dso_local)?}} noundef signext i8 @test()\n #[no_mangle]\n pub extern \"C\" fn test() -> Type {\n     Type::Type1"}, {"sha": "1c30c08d3b2e2ce80aa93c8e95269521f7792c45", "filename": "src/test/codegen/call-metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fbff89354ba7a4ec2d1191a3f405cbe408370f6/src%2Ftest%2Fcodegen%2Fcall-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fbff89354ba7a4ec2d1191a3f405cbe408370f6/src%2Ftest%2Fcodegen%2Fcall-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcall-metadata.rs?ref=9fbff89354ba7a4ec2d1191a3f405cbe408370f6", "patch": "@@ -1,12 +1,12 @@\n // Checks that range metadata gets emitted on calls to functions returning a\n // scalar value.\n \n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -O -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n \n pub fn test() {\n-    // CHECK: call i8 @some_true(), !range [[R0:![0-9]+]]\n+    // CHECK: call noundef i8 @some_true(), !range [[R0:![0-9]+]]\n     // CHECK: [[R0]] = !{i8 0, i8 3}\n     some_true();\n }"}, {"sha": "b1ccbdd934aa91cde88e03e3b9e2d36677ad6dd6", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9fbff89354ba7a4ec2d1191a3f405cbe408370f6/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fbff89354ba7a4ec2d1191a3f405cbe408370f6/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=9fbff89354ba7a4ec2d1191a3f405cbe408370f6", "patch": "@@ -4,6 +4,7 @@\n #![feature(rustc_attrs)]\n \n use std::mem::MaybeUninit;\n+use std::num::NonZeroU64;\n \n pub struct S {\n   _field: [i32; 8],\n@@ -13,6 +14,11 @@ pub struct UnsafeInner {\n   _field: std::cell::UnsafeCell<i16>,\n }\n \n+pub enum MyBool {\n+  True,\n+  False,\n+}\n+\n // CHECK: noundef zeroext i1 @boolean(i1 noundef zeroext %x)\n #[no_mangle]\n pub fn boolean(x: bool) -> bool {\n@@ -25,6 +31,48 @@ pub fn maybeuninit_boolean(x: MaybeUninit<bool>) -> MaybeUninit<bool> {\n   x\n }\n \n+// CHECK: noundef zeroext i1 @enum_bool(i1 noundef zeroext %x)\n+#[no_mangle]\n+pub fn enum_bool(x: MyBool) -> MyBool {\n+  x\n+}\n+\n+// CHECK: i8 @maybeuninit_enum_bool(i8 %x)\n+#[no_mangle]\n+pub fn maybeuninit_enum_bool(x: MaybeUninit<MyBool>) -> MaybeUninit<MyBool> {\n+  x\n+}\n+\n+// CHECK: noundef i32 @char(i32 noundef %x)\n+#[no_mangle]\n+pub fn char(x: char) -> char {\n+  x\n+}\n+\n+// CHECK: i32 @maybeuninit_char(i32 %x)\n+#[no_mangle]\n+pub fn maybeuninit_char(x: MaybeUninit<char>) -> MaybeUninit<char> {\n+  x\n+}\n+\n+// CHECK: i64 @int(i64 %x)\n+#[no_mangle]\n+pub fn int(x: u64) -> u64 {\n+  x\n+}\n+\n+// CHECK: noundef i64 @nonzero_int(i64 noundef %x)\n+#[no_mangle]\n+pub fn nonzero_int(x: NonZeroU64) -> NonZeroU64 {\n+  x\n+}\n+\n+// CHECK: i64 @option_nonzero_int(i64 %x)\n+#[no_mangle]\n+pub fn option_nonzero_int(x: Option<NonZeroU64>) -> Option<NonZeroU64> {\n+  x\n+}\n+\n // CHECK: @readonly_borrow(i32* noalias noundef readonly align 4 dereferenceable(4) %_1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n@@ -156,7 +204,7 @@ pub fn return_slice(x: &[u16]) -> &[u16] {\n   x\n }\n \n-// CHECK: { i16, i16 } @enum_id_1(i16 %x.0, i16 %x.1)\n+// CHECK: { i16, i16 } @enum_id_1(i16 noundef %x.0, i16 %x.1)\n #[no_mangle]\n pub fn enum_id_1(x: Option<Result<u16, u16>>) -> Option<Result<u16, u16>> {\n   x"}, {"sha": "53da573ae935dcec2ea88b7026204502fb18ffc9", "filename": "src/test/codegen/repr-transparent.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fbff89354ba7a4ec2d1191a3f405cbe408370f6/src%2Ftest%2Fcodegen%2Frepr-transparent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fbff89354ba7a4ec2d1191a3f405cbe408370f6/src%2Ftest%2Fcodegen%2Frepr-transparent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent.rs?ref=9fbff89354ba7a4ec2d1191a3f405cbe408370f6", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -O -C no-prepopulate-passes\n \n // ignore-riscv64 riscv64 has an i128 type used with test_Vector\n // see codegen/riscv-abi for riscv functiona call tests\n@@ -56,7 +56,7 @@ pub struct GenericPlusZst<T>(T, Zst2);\n #[repr(u8)]\n pub enum Bool { True, False, FileNotFound }\n \n-// CHECK: define{{( dso_local)?}}{{( zeroext)?}} i8 @test_Gpz(i8{{( zeroext)?}} %_1)\n+// CHECK: define{{( dso_local)?}} noundef{{( zeroext)?}} i8 @test_Gpz(i8 noundef{{( zeroext)?}} %_1)\n #[no_mangle]\n pub extern \"C\" fn test_Gpz(_: GenericPlusZst<Bool>) -> GenericPlusZst<Bool> { loop {} }\n "}, {"sha": "70d5a645c14545d999519f90d537f0ef8c5430b5", "filename": "src/test/run-make-fulldeps/pgo-branch-weights/filecheck-patterns.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fbff89354ba7a4ec2d1191a3f405cbe408370f6/src%2Ftest%2Frun-make-fulldeps%2Fpgo-branch-weights%2Ffilecheck-patterns.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9fbff89354ba7a4ec2d1191a3f405cbe408370f6/src%2Ftest%2Frun-make-fulldeps%2Fpgo-branch-weights%2Ffilecheck-patterns.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-branch-weights%2Ffilecheck-patterns.txt?ref=9fbff89354ba7a4ec2d1191a3f405cbe408370f6", "patch": "@@ -2,10 +2,10 @@\n # First, establish that certain !prof labels are attached to the expected\n # functions and branching instructions.\n \n-CHECK: define void @function_called_twice(i32 %c) {{.*}} !prof [[function_called_twice_id:![0-9]+]] {\n+CHECK: define void @function_called_twice(i32 {{.*}} !prof [[function_called_twice_id:![0-9]+]] {\n CHECK: br i1 {{.*}}, label {{.*}}, label {{.*}}, !prof [[branch_weights0:![0-9]+]]\n \n-CHECK: define void @function_called_42_times(i32 %c) {{.*}} !prof [[function_called_42_times_id:![0-9]+]] {\n+CHECK: define void @function_called_42_times(i32{{.*}} %c) {{.*}} !prof [[function_called_42_times_id:![0-9]+]] {\n CHECK:      switch i32 %c, label {{.*}} [\n CHECK-NEXT:     i32 97, label {{.*}}\n CHECK-NEXT:     i32 98, label {{.*}}"}]}