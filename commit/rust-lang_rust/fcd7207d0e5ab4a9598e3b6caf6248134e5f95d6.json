{"sha": "fcd7207d0e5ab4a9598e3b6caf6248134e5f95d6", "node_id": "C_kwDOAAsO6NoAKGZjZDcyMDdkMGU1YWI0YTk1OThlM2I2Y2FmNjI0ODEzNGU1Zjk1ZDY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-11T10:43:47Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-11T10:43:47Z"}, "message": "Make tests work on 32 bit and 64 bit", "tree": {"sha": "11c140e06ad4b9f537a0eabf49decde0a19c63ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11c140e06ad4b9f537a0eabf49decde0a19c63ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcd7207d0e5ab4a9598e3b6caf6248134e5f95d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcd7207d0e5ab4a9598e3b6caf6248134e5f95d6", "html_url": "https://github.com/rust-lang/rust/commit/fcd7207d0e5ab4a9598e3b6caf6248134e5f95d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcd7207d0e5ab4a9598e3b6caf6248134e5f95d6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a204509d2fe9d0ea72cb79ed6e341de7a3bcacb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a204509d2fe9d0ea72cb79ed6e341de7a3bcacb", "html_url": "https://github.com/rust-lang/rust/commit/9a204509d2fe9d0ea72cb79ed6e341de7a3bcacb"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "2833f49a27bf6f644cd29d0318cccab0f687f068", "filename": "src/test/ui/layout/unsafe-cell-hides-niche.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fcd7207d0e5ab4a9598e3b6caf6248134e5f95d6/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcd7207d0e5ab4a9598e3b6caf6248134e5f95d6/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs?ref=fcd7207d0e5ab4a9598e3b6caf6248134e5f95d6", "patch": "@@ -8,6 +8,7 @@\n #![feature(repr_simd)]\n \n use std::cell::{UnsafeCell, RefCell, Cell};\n+use std::mem::size_of;\n use std::num::NonZeroU32 as N32;\n use std::sync::{Mutex, RwLock};\n \n@@ -22,11 +23,13 @@ struct Size<const S: usize>;\n \n // Overwriting the runtime assertion and making it a compile-time assertion\n macro_rules! assert_size {\n-    ($a:ty, $b:literal) => {{\n-        const _: Size::<$b> = Size::<{std::mem::size_of::<$a>()}>;\n+    ($a:ty, $b:expr) => {{\n+        const _: Size::<{$b}> = Size::<{size_of::<$a>()}>;\n     }};\n }\n \n+const PTR_SIZE: usize = std::mem::size_of::<*const ()>();\n+\n fn main() {\n     assert_size!(Option<Wrapper<u32>>,     8);\n     assert_size!(Option<Wrapper<N32>>,     4); // (\u2713 niche opt)\n@@ -38,25 +41,25 @@ fn main() {\n     assert_size!(Option<UnsafeCell<u32>>,  8);\n     assert_size!(Option<UnsafeCell<N32>>,  8); // (\u2717 niche opt)\n \n-    assert_size!(       UnsafeCell<&()> , 8);\n-    assert_size!(Option<UnsafeCell<&()>>, 16); // (\u2717 niche opt)\n-    assert_size!(             Cell<&()> , 8);\n-    assert_size!(Option<      Cell<&()>>, 16); // (\u2717 niche opt)\n-    assert_size!(          RefCell<&()> , 16);\n-    assert_size!(Option<   RefCell<&()>>, 24); // (\u2717 niche opt)\n-    assert_size!(           RwLock<&()> , 24);\n-    assert_size!(Option<    RwLock<&()>>, 32); // (\u2717 niche opt)\n-    assert_size!(            Mutex<&()> , 16);\n-    assert_size!(Option<     Mutex<&()>>, 24); // (\u2717 niche opt)\n-\n-    assert_size!(       UnsafeCell<&[i32]> , 16);\n-    assert_size!(Option<UnsafeCell<&[i32]>>, 24); // (\u2717 niche opt)\n-    assert_size!(       UnsafeCell<(&(), &())> , 16);\n-    assert_size!(Option<UnsafeCell<(&(), &())>>, 24); // (\u2717 niche opt)\n+    assert_size!(       UnsafeCell<&()> , PTR_SIZE);\n+    assert_size!(Option<UnsafeCell<&()>>, PTR_SIZE * 2); // (\u2717 niche opt)\n+    assert_size!(             Cell<&()> , PTR_SIZE);\n+    assert_size!(Option<      Cell<&()>>, PTR_SIZE * 2); // (\u2717 niche opt)\n+    assert_size!(          RefCell<&()> , PTR_SIZE * 2);\n+    assert_size!(Option<   RefCell<&()>>, PTR_SIZE * 3); // (\u2717 niche opt)\n+    assert_size!(           RwLock<&()> , if cfg!(target_pointer_width = \"32\") { 16 } else { 24 });\n+    assert_size!(Option<    RwLock<&()>>, if cfg!(target_pointer_width = \"32\") { 20 } else { 32 }); // (\u2717 niche opt)\n+    assert_size!(            Mutex<&()> , if cfg!(target_pointer_width = \"32\") { 12 } else { 16 });\n+    assert_size!(Option<     Mutex<&()>>, if cfg!(target_pointer_width = \"32\") { 16 } else { 24 }); // (\u2717 niche opt)\n+\n+    assert_size!(       UnsafeCell<&[i32]> , PTR_SIZE * 2);\n+    assert_size!(Option<UnsafeCell<&[i32]>>, PTR_SIZE * 3); // (\u2717 niche opt)\n+    assert_size!(       UnsafeCell<(&(), &())> , PTR_SIZE * 2);\n+    assert_size!(Option<UnsafeCell<(&(), &())>>, PTR_SIZE * 3); // (\u2717 niche opt)\n \n     trait Trait {}\n-    assert_size!(       UnsafeCell<&dyn Trait> , 16);\n-    assert_size!(Option<UnsafeCell<&dyn Trait>>, 24); // (\u2717 niche opt)\n+    assert_size!(       UnsafeCell<&dyn Trait> , PTR_SIZE * 2);\n+    assert_size!(Option<UnsafeCell<&dyn Trait>>, PTR_SIZE * 3); // (\u2717 niche opt)\n \n     #[repr(simd)]\n     pub struct Vec4<T>([T; 4]);"}]}