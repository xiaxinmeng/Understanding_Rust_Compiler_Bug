{"sha": "613ae0b4862f162b0aaacd8b5d0f4392f6261b86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxM2FlMGI0ODYyZjE2MmIwYWFhY2Q4YjVkMGY0MzkyZjYyNjFiODY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-09T14:39:11Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-09T19:07:14Z"}, "message": "rollup merge of #17106 : treeman/test-warnings", "tree": {"sha": "a15ed2fd864a591dd9d9f348285b39bbb248ac3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a15ed2fd864a591dd9d9f348285b39bbb248ac3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/613ae0b4862f162b0aaacd8b5d0f4392f6261b86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/613ae0b4862f162b0aaacd8b5d0f4392f6261b86", "html_url": "https://github.com/rust-lang/rust/commit/613ae0b4862f162b0aaacd8b5d0f4392f6261b86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9d8f295e0dbbc607ec97339b050cbf9132d3612", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d8f295e0dbbc607ec97339b050cbf9132d3612", "html_url": "https://github.com/rust-lang/rust/commit/a9d8f295e0dbbc607ec97339b050cbf9132d3612"}, {"sha": "947a1b923b01f24e8217e398a44cc1f02f641080", "url": "https://api.github.com/repos/rust-lang/rust/commits/947a1b923b01f24e8217e398a44cc1f02f641080", "html_url": "https://github.com/rust-lang/rust/commit/947a1b923b01f24e8217e398a44cc1f02f641080"}], "stats": {"total": 149, "additions": 79, "deletions": 70}, "files": [{"sha": "ee3fd6ad0eb0db0f5a909c3b41ed799bc9a929f6", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=613ae0b4862f162b0aaacd8b5d0f4392f6261b86", "patch": "@@ -509,6 +509,7 @@ mod tests {\n     use self::test::Bencher;\n     use super::{Arena, TypedArena};\n \n+    #[allow(dead_code)]\n     struct Point {\n         x: int,\n         y: int,\n@@ -564,6 +565,7 @@ mod tests {\n         })\n     }\n \n+    #[allow(dead_code)]\n     struct Noncopy {\n         string: String,\n         array: Vec<int>,"}, {"sha": "36edd913de2f83367e452bf7023499926619bb9c", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=613ae0b4862f162b0aaacd8b5d0f4392f6261b86", "patch": "@@ -864,6 +864,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn test_tailn() {\n         let mut a = vec![11i, 12, 13];\n         let b: &[int] = &[11, 12, 13];\n@@ -875,6 +876,7 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n+    #[allow(deprecated)]\n     fn test_tailn_empty() {\n         let a: Vec<int> = vec![];\n         a.tailn(2);\n@@ -909,6 +911,7 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n+    #[allow(deprecated)]\n     fn test_initn_empty() {\n         let a: Vec<int> = vec![];\n         a.as_slice().initn(2);\n@@ -1466,6 +1469,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn test_unshift() {\n         let mut x = vec![1i, 2, 3];\n         x.unshift(0);\n@@ -2079,6 +2083,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn test_shift_ref() {\n         let mut x: &[int] = [1, 2, 3, 4, 5];\n         let h = x.shift_ref();\n@@ -2092,6 +2097,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn test_pop_ref() {\n         let mut x: &[int] = [1, 2, 3, 4, 5];\n         let h = x.pop_ref();\n@@ -2171,6 +2177,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn test_mut_shift_ref() {\n         let mut x: &mut [int] = [1, 2, 3, 4, 5];\n         let h = x.mut_shift_ref();\n@@ -2184,6 +2191,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn test_mut_pop_ref() {\n         let mut x: &mut [int] = [1, 2, 3, 4, 5];\n         let h = x.mut_pop_ref();\n@@ -2441,7 +2449,7 @@ mod bench {\n         b.iter(|| {\n             v.sort();\n         });\n-        b.bytes = (v.len() * mem::size_of_val(v.get(0))) as u64;\n+        b.bytes = (v.len() * mem::size_of_val(&v[0])) as u64;\n     }\n \n     type BigSortable = (u64,u64,u64,u64);\n@@ -2485,6 +2493,6 @@ mod bench {\n         b.iter(|| {\n             v.sort();\n         });\n-        b.bytes = (v.len() * mem::size_of_val(v.get(0))) as u64;\n+        b.bytes = (v.len() * mem::size_of_val(&v[0])) as u64;\n     }\n }"}, {"sha": "9656a6caba08c845d5037d32138609e8a7b16eb7", "filename": "src/libcoretest/any.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibcoretest%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibcoretest%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fany.rs?ref=613ae0b4862f162b0aaacd8b5d0f4392f6261b86", "patch": "@@ -51,61 +51,61 @@ fn any_owning() {\n }\n \n #[test]\n-fn any_as_ref() {\n+fn any_downcast_ref() {\n     let a = &5u as &Any;\n \n-    match a.as_ref::<uint>() {\n+    match a.downcast_ref::<uint>() {\n         Some(&5) => {}\n         x => fail!(\"Unexpected value {}\", x)\n     }\n \n-    match a.as_ref::<Test>() {\n+    match a.downcast_ref::<Test>() {\n         None => {}\n         x => fail!(\"Unexpected value {}\", x)\n     }\n }\n \n #[test]\n-fn any_as_mut() {\n+fn any_downcast_mut() {\n     let mut a = 5u;\n     let mut b = box 7u;\n \n     let a_r = &mut a as &mut Any;\n     let tmp: &mut uint = &mut *b;\n     let b_r = tmp as &mut Any;\n \n-    match a_r.as_mut::<uint>() {\n+    match a_r.downcast_mut::<uint>() {\n         Some(x) => {\n             assert_eq!(*x, 5u);\n             *x = 612;\n         }\n         x => fail!(\"Unexpected value {}\", x)\n     }\n \n-    match b_r.as_mut::<uint>() {\n+    match b_r.downcast_mut::<uint>() {\n         Some(x) => {\n             assert_eq!(*x, 7u);\n             *x = 413;\n         }\n         x => fail!(\"Unexpected value {}\", x)\n     }\n \n-    match a_r.as_mut::<Test>() {\n+    match a_r.downcast_mut::<Test>() {\n         None => (),\n         x => fail!(\"Unexpected value {}\", x)\n     }\n \n-    match b_r.as_mut::<Test>() {\n+    match b_r.downcast_mut::<Test>() {\n         None => (),\n         x => fail!(\"Unexpected value {}\", x)\n     }\n \n-    match a_r.as_mut::<uint>() {\n+    match a_r.downcast_mut::<uint>() {\n         Some(&612) => {}\n         x => fail!(\"Unexpected value {}\", x)\n     }\n \n-    match b_r.as_mut::<uint>() {\n+    match b_r.downcast_mut::<uint>() {\n         Some(&413) => {}\n         x => fail!(\"Unexpected value {}\", x)\n     }\n@@ -121,11 +121,11 @@ fn any_fixed_vec() {\n \n \n #[bench]\n-fn bench_as_ref(b: &mut Bencher) {\n+fn bench_downcast_ref(b: &mut Bencher) {\n     b.iter(|| {\n         let mut x = 0i;\n         let mut y = &mut x as &mut Any;\n         test::black_box(&mut y);\n-        test::black_box(y.as_ref::<int>() == Some(&0));\n+        test::black_box(y.downcast_ref::<int>() == Some(&0));\n     });\n }"}, {"sha": "6e5bf6e8f2dac572958afc8e9d2b9d774ee00eaf", "filename": "src/libcoretest/option.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibcoretest%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibcoretest%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Foption.rs?ref=613ae0b4862f162b0aaacd8b5d0f4392f6261b86", "patch": "@@ -131,6 +131,7 @@ fn test_or_else() {\n }\n \n #[test]\n+#[allow(deprecated)]\n fn test_option_while_some() {\n     let mut i = 0i;\n     Some(10i).while_some(|j| {\n@@ -184,6 +185,7 @@ fn test_unwrap_or_else() {\n }\n \n #[test]\n+#[allow(deprecated)]\n fn test_filtered() {\n     let some_stuff = Some(42i);\n     let modified_stuff = some_stuff.filtered(|&x| {x < 10});\n@@ -256,6 +258,7 @@ fn test_mutate() {\n }\n \n #[test]\n+#[allow(deprecated)]\n fn test_collect() {\n     let v: Option<Vec<int>> = collect(range(0i, 0)\n                                       .map(|_| Some(0i)));"}, {"sha": "dbc393967d3e583688d71c10e9263988d939e11f", "filename": "src/libcoretest/result.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibcoretest%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibcoretest%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fresult.rs?ref=613ae0b4862f162b0aaacd8b5d0f4392f6261b86", "patch": "@@ -69,6 +69,7 @@ pub fn test_impl_map_err() {\n }\n \n #[test]\n+#[allow(deprecated)]\n fn test_collect() {\n     let v: Result<Vec<int>, ()> = collect(range(0i, 0).map(|_| Ok::<int, ()>(0)));\n     assert!(v == Ok(vec![]));"}, {"sha": "7fe6f2dbf67d2bbb399275b038bdbcb7d6ccf414", "filename": "src/libdebug/repr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibdebug%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibdebug%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Frepr.rs?ref=613ae0b4862f162b0aaacd8b5d0f4392f6261b86", "patch": "@@ -568,6 +568,7 @@ pub fn repr_to_string<T>(t: &T) -> String {\n }\n \n #[cfg(test)]\n+#[allow(dead_code)]\n struct P {a: int, b: f64}\n \n #[test]"}, {"sha": "ea298f5e05f71ecfa97d8a7cb44c50f8b55cdd0c", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=613ae0b4862f162b0aaacd8b5d0f4392f6261b86", "patch": "@@ -632,9 +632,9 @@ mod tests {\n             id_name(n)\n         }\n         fn node_label(&'a self, n: &Node) -> LabelText<'a> {\n-            match self.node_labels.get(*n) {\n-                &Some(ref l) => LabelStr(str::Slice(l.as_slice())),\n-                &None        => LabelStr(id_name(n).name()),\n+            match self.node_labels[*n] {\n+                Some(ref l) => LabelStr(str::Slice(l.as_slice())),\n+                None        => LabelStr(id_name(n).name()),\n             }\n         }\n         fn edge_label(&'a self, e: & &'a Edge) -> LabelText<'a> {"}, {"sha": "1075466d099f977de7375898b1e13298814f4d9e", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=613ae0b4862f162b0aaacd8b5d0f4392f6261b86", "patch": "@@ -1414,6 +1414,7 @@ mod test {\n         // Regression test that the `start` task entrypoint can\n         // contain dtors that use task resources\n         run(proc() {\n+            #[allow(dead_code)]\n             struct S { field: () }\n \n             impl Drop for S {"}, {"sha": "c97f9513fc34a66ac61bc19b43f290d87f1be98f", "filename": "src/libnum/bigint.rs", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fbigint.rs?ref=613ae0b4862f162b0aaacd8b5d0f4392f6261b86", "patch": "@@ -1978,10 +1978,10 @@ mod biguint_tests {\n     #[test]\n     fn test_checked_add() {\n         for elm in sum_triples.iter() {\n-            let (aVec, bVec, cVec) = *elm;\n-            let a = BigUint::from_slice(aVec);\n-            let b = BigUint::from_slice(bVec);\n-            let c = BigUint::from_slice(cVec);\n+            let (a_vec, b_vec, c_vec) = *elm;\n+            let a = BigUint::from_slice(a_vec);\n+            let b = BigUint::from_slice(b_vec);\n+            let c = BigUint::from_slice(c_vec);\n \n             assert!(a.checked_add(&b).unwrap() == c);\n             assert!(b.checked_add(&a).unwrap() == c);\n@@ -1991,10 +1991,10 @@ mod biguint_tests {\n     #[test]\n     fn test_checked_sub() {\n         for elm in sum_triples.iter() {\n-            let (aVec, bVec, cVec) = *elm;\n-            let a = BigUint::from_slice(aVec);\n-            let b = BigUint::from_slice(bVec);\n-            let c = BigUint::from_slice(cVec);\n+            let (a_vec, b_vec, c_vec) = *elm;\n+            let a = BigUint::from_slice(a_vec);\n+            let b = BigUint::from_slice(b_vec);\n+            let c = BigUint::from_slice(c_vec);\n \n             assert!(c.checked_sub(&a).unwrap() == b);\n             assert!(c.checked_sub(&b).unwrap() == a);\n@@ -2011,21 +2011,21 @@ mod biguint_tests {\n     #[test]\n     fn test_checked_mul() {\n         for elm in mul_triples.iter() {\n-            let (aVec, bVec, cVec) = *elm;\n-            let a = BigUint::from_slice(aVec);\n-            let b = BigUint::from_slice(bVec);\n-            let c = BigUint::from_slice(cVec);\n+            let (a_vec, b_vec, c_vec) = *elm;\n+            let a = BigUint::from_slice(a_vec);\n+            let b = BigUint::from_slice(b_vec);\n+            let c = BigUint::from_slice(c_vec);\n \n             assert!(a.checked_mul(&b).unwrap() == c);\n             assert!(b.checked_mul(&a).unwrap() == c);\n         }\n \n         for elm in div_rem_quadruples.iter() {\n-            let (aVec, bVec, cVec, dVec) = *elm;\n-            let a = BigUint::from_slice(aVec);\n-            let b = BigUint::from_slice(bVec);\n-            let c = BigUint::from_slice(cVec);\n-            let d = BigUint::from_slice(dVec);\n+            let (a_vec, b_vec, c_vec, d_vec) = *elm;\n+            let a = BigUint::from_slice(a_vec);\n+            let b = BigUint::from_slice(b_vec);\n+            let c = BigUint::from_slice(c_vec);\n+            let d = BigUint::from_slice(d_vec);\n \n             assert!(a == b.checked_mul(&c).unwrap() + d);\n             assert!(a == c.checked_mul(&b).unwrap() + d);\n@@ -2035,10 +2035,10 @@ mod biguint_tests {\n     #[test]\n     fn test_checked_div() {\n         for elm in mul_triples.iter() {\n-            let (aVec, bVec, cVec) = *elm;\n-            let a = BigUint::from_slice(aVec);\n-            let b = BigUint::from_slice(bVec);\n-            let c = BigUint::from_slice(cVec);\n+            let (a_vec, b_vec, c_vec) = *elm;\n+            let a = BigUint::from_slice(a_vec);\n+            let b = BigUint::from_slice(b_vec);\n+            let c = BigUint::from_slice(c_vec);\n \n             if !a.is_zero() {\n                 assert!(c.checked_div(&a).unwrap() == b);\n@@ -2651,10 +2651,10 @@ mod bigint_tests {\n     #[test]\n     fn test_checked_add() {\n         for elm in sum_triples.iter() {\n-            let (aVec, bVec, cVec) = *elm;\n-            let a = BigInt::from_slice(Plus, aVec);\n-            let b = BigInt::from_slice(Plus, bVec);\n-            let c = BigInt::from_slice(Plus, cVec);\n+            let (a_vec, b_vec, c_vec) = *elm;\n+            let a = BigInt::from_slice(Plus, a_vec);\n+            let b = BigInt::from_slice(Plus, b_vec);\n+            let c = BigInt::from_slice(Plus, c_vec);\n \n             assert!(a.checked_add(&b).unwrap() == c);\n             assert!(b.checked_add(&a).unwrap() == c);\n@@ -2670,10 +2670,10 @@ mod bigint_tests {\n     #[test]\n     fn test_checked_sub() {\n         for elm in sum_triples.iter() {\n-            let (aVec, bVec, cVec) = *elm;\n-            let a = BigInt::from_slice(Plus, aVec);\n-            let b = BigInt::from_slice(Plus, bVec);\n-            let c = BigInt::from_slice(Plus, cVec);\n+            let (a_vec, b_vec, c_vec) = *elm;\n+            let a = BigInt::from_slice(Plus, a_vec);\n+            let b = BigInt::from_slice(Plus, b_vec);\n+            let c = BigInt::from_slice(Plus, c_vec);\n \n             assert!(c.checked_sub(&a).unwrap() == b);\n             assert!(c.checked_sub(&b).unwrap() == a);\n@@ -2689,10 +2689,10 @@ mod bigint_tests {\n     #[test]\n     fn test_checked_mul() {\n         for elm in mul_triples.iter() {\n-            let (aVec, bVec, cVec) = *elm;\n-            let a = BigInt::from_slice(Plus, aVec);\n-            let b = BigInt::from_slice(Plus, bVec);\n-            let c = BigInt::from_slice(Plus, cVec);\n+            let (a_vec, b_vec, c_vec) = *elm;\n+            let a = BigInt::from_slice(Plus, a_vec);\n+            let b = BigInt::from_slice(Plus, b_vec);\n+            let c = BigInt::from_slice(Plus, c_vec);\n \n             assert!(a.checked_mul(&b).unwrap() == c);\n             assert!(b.checked_mul(&a).unwrap() == c);\n@@ -2702,11 +2702,11 @@ mod bigint_tests {\n         }\n \n         for elm in div_rem_quadruples.iter() {\n-            let (aVec, bVec, cVec, dVec) = *elm;\n-            let a = BigInt::from_slice(Plus, aVec);\n-            let b = BigInt::from_slice(Plus, bVec);\n-            let c = BigInt::from_slice(Plus, cVec);\n-            let d = BigInt::from_slice(Plus, dVec);\n+            let (a_vec, b_vec, c_vec, d_vec) = *elm;\n+            let a = BigInt::from_slice(Plus, a_vec);\n+            let b = BigInt::from_slice(Plus, b_vec);\n+            let c = BigInt::from_slice(Plus, c_vec);\n+            let d = BigInt::from_slice(Plus, d_vec);\n \n             assert!(a == b.checked_mul(&c).unwrap() + d);\n             assert!(a == c.checked_mul(&b).unwrap() + d);\n@@ -2715,10 +2715,10 @@ mod bigint_tests {\n     #[test]\n     fn test_checked_div() {\n         for elm in mul_triples.iter() {\n-            let (aVec, bVec, cVec) = *elm;\n-            let a = BigInt::from_slice(Plus, aVec);\n-            let b = BigInt::from_slice(Plus, bVec);\n-            let c = BigInt::from_slice(Plus, cVec);\n+            let (a_vec, b_vec, c_vec) = *elm;\n+            let a = BigInt::from_slice(Plus, a_vec);\n+            let b = BigInt::from_slice(Plus, b_vec);\n+            let c = BigInt::from_slice(Plus, c_vec);\n \n             if !a.is_zero() {\n                 assert!(c.checked_div(&a).unwrap() == b);"}, {"sha": "6171a9946b6085702a0328a00074b91c0bdf0660", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=613ae0b4862f162b0aaacd8b5d0f4392f6261b86", "patch": "@@ -1047,10 +1047,7 @@ mod tests {\n \n     use serialize::{Encodable, Decodable};\n \n-    use std::io::{IoError, IoResult, SeekStyle};\n-    use std::io;\n     use std::option::{None, Option, Some};\n-    use std::slice;\n \n     #[test]\n     fn test_vuint_at() {"}, {"sha": "2ab7a6c52fac3283faebd2f2528f225cdb127fbf", "filename": "src/librlibc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibrlibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibrlibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrlibc%2Flib.rs?ref=613ae0b4862f162b0aaacd8b5d0f4392f6261b86", "patch": "@@ -108,8 +108,6 @@ pub unsafe extern \"C\" fn memcmp(s1: *const u8, s2: *const u8, n: uint) -> i32 {\n \n #[cfg(test)]\n mod test {\n-    use core::option::{Some, None};\n-    use core::iter::Iterator;\n     use core::collections::Collection;\n     use core::str::StrSlice;\n     use core::slice::{MutableSlice, ImmutableSlice};"}, {"sha": "5e0004f2a2a3e04861cf4d1f8d6b5c1bff09bb03", "filename": "src/librustrt/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibrustrt%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibrustrt%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fc_str.rs?ref=613ae0b4862f162b0aaacd8b5d0f4392f6261b86", "patch": "@@ -671,7 +671,7 @@ mod tests {\n     #[test]\n     #[should_fail]\n     fn test_new_fail() {\n-        let c_str = unsafe { CString::new(ptr::null(), false) };\n+        let _c_str = unsafe { CString::new(ptr::null(), false) };\n     }\n \n     #[test]"}, {"sha": "3d42b91fef17eb817a56cee8073ef8e8b9b3e7de", "filename": "src/librustrt/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibrustrt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibrustrt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Ftask.rs?ref=613ae0b4862f162b0aaacd8b5d0f4392f6261b86", "patch": "@@ -662,7 +662,7 @@ mod test {\n     #[test]\n     fn block_and_wake() {\n         let task = box Task::new();\n-        let mut task = BlockedTask::block(task).wake().unwrap();\n+        let task = BlockedTask::block(task).wake().unwrap();\n         task.drop();\n     }\n }"}, {"sha": "cb4d33049d84fcb5e191ca45f3a6c7af3cc5c180", "filename": "src/libsync/spsc_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibsync%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibsync%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fspsc_queue.rs?ref=613ae0b4862f162b0aaacd8b5d0f4392f6261b86", "patch": "@@ -298,7 +298,7 @@ mod test {\n \n     use native;\n \n-    use super::{queue, Queue};\n+    use super::{queue};\n \n     #[test]\n     fn smoke() {"}, {"sha": "09dc8166908d92061944c4783888630f777fe38b", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613ae0b4862f162b0aaacd8b5d0f4392f6261b86/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=613ae0b4862f162b0aaacd8b5d0f4392f6261b86", "patch": "@@ -527,7 +527,6 @@ mod uuidtest {\n     use super::{Uuid, VariantMicrosoft, VariantNCS, VariantRFC4122,\n                 Version1Mac, Version2Dce, Version3Md5, Version4Random,\n                 Version5Sha1};\n-    use std::io::MemWriter;\n     use std::rand;\n \n     #[test]\n@@ -798,7 +797,6 @@ mod uuidtest {\n     #[test]\n     fn test_serialize_round_trip() {\n         use serialize::json;\n-        use serialize::{Encodable, Decodable};\n \n         let u = Uuid::new_v4();\n         let s = json::encode(&u);\n@@ -809,7 +807,7 @@ mod uuidtest {\n     #[test]\n     fn test_bad_decode() {\n         use serialize::json;\n-        use serialize::{Encodable, Decodable};\n+        use serialize::{Decodable};\n \n         let js_good = json::String(\"a1a2a3a4a5a6a7a8a1a2a3a4a5a6a7a8\".to_string());\n         let js_bad1 = json::String(\"a1a2a3a4a5a6a7a8a1a2a3a4a5a6a7ah\".to_string());"}]}