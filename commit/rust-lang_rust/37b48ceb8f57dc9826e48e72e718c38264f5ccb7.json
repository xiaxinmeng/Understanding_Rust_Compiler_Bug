{"sha": "37b48ceb8f57dc9826e48e72e718c38264f5ccb7", "node_id": "C_kwDOAAsO6NoAKDM3YjQ4Y2ViOGY1N2RjOTgyNmU0OGU3MmU3MThjMzgyNjRmNWNjYjc", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-20T13:38:16Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-20T13:38:16Z"}, "message": "feat: Visualize compiler inserted reborrows via inlay hints", "tree": {"sha": "cd88ffe6d819ee028a20fe19d03bdede97ca3810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd88ffe6d819ee028a20fe19d03bdede97ca3810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37b48ceb8f57dc9826e48e72e718c38264f5ccb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37b48ceb8f57dc9826e48e72e718c38264f5ccb7", "html_url": "https://github.com/rust-lang/rust/commit/37b48ceb8f57dc9826e48e72e718c38264f5ccb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37b48ceb8f57dc9826e48e72e718c38264f5ccb7/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2598575a35266d8ece1f4e4ecef996622eaef42a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2598575a35266d8ece1f4e4ecef996622eaef42a", "html_url": "https://github.com/rust-lang/rust/commit/2598575a35266d8ece1f4e4ecef996622eaef42a"}], "stats": {"total": 139, "additions": 126, "deletions": 13}, "files": [{"sha": "c2b7e9bb5298cba526a947ec628ddc5086afea52", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37b48ceb8f57dc9826e48e72e718c38264f5ccb7/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b48ceb8f57dc9826e48e72e718c38264f5ccb7/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=37b48ceb8f57dc9826e48e72e718c38264f5ccb7", "patch": "@@ -8,6 +8,7 @@ use base_db::{FileId, FileRange};\n use hir_def::{\n     body, macro_id_to_def_id,\n     resolver::{self, HasResolver, Resolver, TypeNs},\n+    type_ref::Mutability,\n     AsMacroCall, FunctionId, MacroId, TraitId, VariantId,\n };\n use hir_expand::{\n@@ -313,6 +314,11 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.resolve_type(ty)\n     }\n \n+    // FIXME: Figure out a nice interface to inspect adjustments\n+    pub fn is_implicit_reborrow(&self, expr: &ast::Expr) -> Option<Mutability> {\n+        self.imp.is_implicit_reborrow(expr)\n+    }\n+\n     pub fn type_of_expr(&self, expr: &ast::Expr) -> Option<TypeInfo> {\n         self.imp.type_of_expr(expr)\n     }\n@@ -900,6 +906,10 @@ impl<'db> SemanticsImpl<'db> {\n         Type::new_with_resolver(self.db, &scope.resolver, ty)\n     }\n \n+    fn is_implicit_reborrow(&self, expr: &ast::Expr) -> Option<Mutability> {\n+        self.analyze(expr.syntax()).is_implicit_reborrow(self.db, expr)\n+    }\n+\n     fn type_of_expr(&self, expr: &ast::Expr) -> Option<TypeInfo> {\n         self.analyze(expr.syntax())\n             .type_of_expr(self.db, expr)"}, {"sha": "576d063c4324fc58e43111f050f9086a3e19bcc6", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/37b48ceb8f57dc9826e48e72e718c38264f5ccb7/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b48ceb8f57dc9826e48e72e718c38264f5ccb7/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=37b48ceb8f57dc9826e48e72e718c38264f5ccb7", "patch": "@@ -20,12 +20,14 @@ use hir_def::{\n     macro_id_to_def_id,\n     path::{ModPath, Path, PathKind},\n     resolver::{resolver_for_scope, Resolver, TypeNs, ValueNs},\n+    type_ref::Mutability,\n     AsMacroCall, DefWithBodyId, FieldId, FunctionId, LocalFieldId, ModuleDefId, VariantId,\n };\n use hir_expand::{hygiene::Hygiene, name::AsName, HirFileId, InFile};\n use hir_ty::{\n     diagnostics::{record_literal_missing_fields, record_pattern_missing_fields},\n-    InferenceResult, Interner, Substitution, TyExt, TyLoweringContext,\n+    Adjust, Adjustment, AutoBorrow, InferenceResult, Interner, Substitution, TyExt,\n+    TyLoweringContext,\n };\n use syntax::{\n     ast::{self, AstNode},\n@@ -139,6 +141,23 @@ impl SourceAnalyzer {\n         Some(res)\n     }\n \n+    pub(crate) fn is_implicit_reborrow(\n+        &self,\n+        db: &dyn HirDatabase,\n+        expr: &ast::Expr,\n+    ) -> Option<Mutability> {\n+        let expr_id = self.expr_id(db, expr)?;\n+        let infer = self.infer.as_ref()?;\n+        let adjustments = infer.expr_adjustments.get(&expr_id)?;\n+        adjustments.windows(2).find_map(|slice| match slice {\n+            &[Adjustment {kind: Adjust::Deref(None), ..}, Adjustment {kind: Adjust::Borrow(AutoBorrow::Ref(m)), ..}] => Some(match m {\n+                hir_ty::Mutability::Mut => Mutability::Mut,\n+                hir_ty::Mutability::Not => Mutability::Shared,\n+            }),\n+            _ => None,\n+        })\n+    }\n+\n     pub(crate) fn type_of_expr(\n         &self,\n         db: &dyn HirDatabase,"}, {"sha": "59e6fe2a040b226bc23396e4999fc40f5b697cff", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37b48ceb8f57dc9826e48e72e718c38264f5ccb7/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b48ceb8f57dc9826e48e72e718c38264f5ccb7/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=37b48ceb8f57dc9826e48e72e718c38264f5ccb7", "patch": "@@ -50,7 +50,9 @@ use crate::{db::HirDatabase, utils::generics};\n pub use autoderef::autoderef;\n pub use builder::{ParamKind, TyBuilder};\n pub use chalk_ext::*;\n-pub use infer::{could_unify, InferenceDiagnostic, InferenceResult};\n+pub use infer::{\n+    could_unify, Adjust, Adjustment, AutoBorrow, InferenceDiagnostic, InferenceResult,\n+};\n pub use interner::Interner;\n pub use lower::{\n     associated_type_shorthand_candidates, callable_item_sig, CallableDefId, ImplTraitLoweringMode,"}, {"sha": "ef1c155143b5de068562a836220a5c31ef30c4e0", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 69, "deletions": 9, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/37b48ceb8f57dc9826e48e72e718c38264f5ccb7/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b48ceb8f57dc9826e48e72e718c38264f5ccb7/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=37b48ceb8f57dc9826e48e72e718c38264f5ccb7", "patch": "@@ -19,6 +19,7 @@ pub struct InlayHintsConfig {\n     pub type_hints: bool,\n     pub parameter_hints: bool,\n     pub chaining_hints: bool,\n+    pub reborrow_hints: bool,\n     pub closure_return_type_hints: bool,\n     pub lifetime_elision_hints: LifetimeElisionHints,\n     pub param_names_for_lifetime_elision_hints: bool,\n@@ -35,6 +36,7 @@ pub enum LifetimeElisionHints {\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum InlayKind {\n+    ImplicitReborrow,\n     TypeHint,\n     ParameterHint,\n     ClosureReturnTypeHint,\n@@ -116,17 +118,16 @@ fn hints(\n     if let Some(expr) = ast::Expr::cast(node.clone()) {\n         chaining_hints(hints, sema, &famous_defs, config, &expr);\n         match expr {\n-            ast::Expr::CallExpr(it) => {\n-                param_name_hints(hints, sema, config, ast::Expr::from(it));\n-            }\n+            ast::Expr::CallExpr(it) => param_name_hints(hints, sema, config, ast::Expr::from(it)),\n             ast::Expr::MethodCallExpr(it) => {\n-                param_name_hints(hints, sema, config, ast::Expr::from(it));\n-            }\n-            ast::Expr::ClosureExpr(it) => {\n-                closure_ret_hints(hints, sema, &famous_defs, config, it);\n+                param_name_hints(hints, sema, config, ast::Expr::from(it))\n             }\n-            _ => (),\n-        }\n+            ast::Expr::ClosureExpr(it) => closure_ret_hints(hints, sema, &famous_defs, config, it),\n+            // We could show reborrows for all expressions, but usually that is just noise to the user\n+            // and the main point here is to show why \"moving\" a mutable reference doesn't necessarily move it\n+            ast::Expr::PathExpr(_) => reborrow_hints(hints, sema, config, &expr),\n+            _ => None,\n+        };\n     } else if let Some(it) = ast::IdentPat::cast(node.clone()) {\n         bind_pat_hints(hints, sema, config, &it);\n     } else if let Some(it) = ast::Fn::cast(node) {\n@@ -365,6 +366,28 @@ fn closure_ret_hints(\n     Some(())\n }\n \n+fn reborrow_hints(\n+    acc: &mut Vec<InlayHint>,\n+    sema: &Semantics<RootDatabase>,\n+    config: &InlayHintsConfig,\n+    expr: &ast::Expr,\n+) -> Option<()> {\n+    if !config.reborrow_hints {\n+        return None;\n+    }\n+\n+    let mutability = sema.is_implicit_reborrow(expr)?;\n+    acc.push(InlayHint {\n+        range: expr.syntax().text_range(),\n+        kind: InlayKind::ImplicitReborrow,\n+        label: match mutability {\n+            hir::Mutability::Shared => SmolStr::new_inline(\"&*\"),\n+            hir::Mutability::Mut => SmolStr::new_inline(\"&mut *\"),\n+        },\n+    });\n+    Some(())\n+}\n+\n fn chaining_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n@@ -834,13 +857,15 @@ mod tests {\n         lifetime_elision_hints: LifetimeElisionHints::Never,\n         hide_named_constructor_hints: false,\n         closure_return_type_hints: false,\n+        reborrow_hints: false,\n         param_names_for_lifetime_elision_hints: false,\n         max_length: None,\n     };\n     const TEST_CONFIG: InlayHintsConfig = InlayHintsConfig {\n         type_hints: true,\n         parameter_hints: true,\n         chaining_hints: true,\n+        reborrow_hints: true,\n         closure_return_type_hints: true,\n         lifetime_elision_hints: LifetimeElisionHints::Always,\n         ..DISABLED_CONFIG\n@@ -2115,6 +2140,41 @@ impl () {\n     // ^^^<'0, '1>\n         // ^'0       ^'1     ^'0\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn hints_implicit_reborrow() {\n+        check_with_config(\n+            InlayHintsConfig { reborrow_hints: true, ..DISABLED_CONFIG },\n+            r#\"\n+fn __() {\n+    let unique = &mut ();\n+    let r_mov = unique;\n+    let foo: &mut _ = unique;\n+                    //^^^^^^ &mut *\n+    ref_mut_id(unique);\n+             //^^^^^^ &mut *\n+    let shared = ref_id(unique);\n+                      //^^^^^^ &*\n+    let mov = shared;\n+    let r_mov: &_ = shared;\n+    ref_id(shared);\n+\n+    identity(unique);\n+    identity(shared);\n+}\n+fn identity<T>(t: T) -> T {\n+    t\n+}\n+fn ref_mut_id(x: &mut ()) -> &mut () {\n+    x\n+  //^ &mut *\n+}\n+fn ref_id(x: &()) -> &() {\n+    x\n+}\n \"#,\n         );\n     }"}, {"sha": "0980b871559f25c9424b7a3d116b5d4fce706de8", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37b48ceb8f57dc9826e48e72e718c38264f5ccb7/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b48ceb8f57dc9826e48e72e718c38264f5ccb7/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=37b48ceb8f57dc9826e48e72e718c38264f5ccb7", "patch": "@@ -114,6 +114,7 @@ impl StaticIndex<'_> {\n                     chaining_hints: true,\n                     closure_return_type_hints: true,\n                     lifetime_elision_hints: LifetimeElisionHints::Never,\n+                    reborrow_hints: false,\n                     hide_named_constructor_hints: false,\n                     param_names_for_lifetime_elision_hints: false,\n                     max_length: Some(25),"}, {"sha": "ab197c671df7b5a6f65cdaa39d875ac3425bf277", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37b48ceb8f57dc9826e48e72e718c38264f5ccb7/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b48ceb8f57dc9826e48e72e718c38264f5ccb7/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=37b48ceb8f57dc9826e48e72e718c38264f5ccb7", "patch": "@@ -256,6 +256,8 @@ config_data! {\n         inlayHints_chainingHints: bool                      = \"true\",\n         /// Whether to show inlay type hints for return types of closures with blocks.\n         inlayHints_closureReturnTypeHints: bool             = \"false\",\n+        /// Whether to show inlay type hints for compiler inserted reborrows.\n+        inlayHints_reborrowHints: bool                      = \"false\",\n         /// Whether to show inlay type hints for elided lifetimes in function signatures.\n         inlayHints_lifetimeElisionHints: LifetimeElisionDef = \"\\\"never\\\"\",\n         /// Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n@@ -866,6 +868,7 @@ impl Config {\n                 LifetimeElisionDef::SkipTrivial => LifetimeElisionHints::SkipTrivial,\n             },\n             hide_named_constructor_hints: self.data.inlayHints_hideNamedConstructorHints,\n+            reborrow_hints: self.data.inlayHints_reborrowHints,\n             param_names_for_lifetime_elision_hints: self\n                 .data\n                 .inlayHints_lifetimeElisionHints_useParameterNames,"}, {"sha": "b9182c4bc1ee2e55e5cee19232dd0833f62707f0", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37b48ceb8f57dc9826e48e72e718c38264f5ccb7/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b48ceb8f57dc9826e48e72e718c38264f5ccb7/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=37b48ceb8f57dc9826e48e72e718c38264f5ccb7", "patch": "@@ -426,7 +426,11 @@ pub(crate) fn inlay_hint(\n             _ => inlay_hint.label.to_string(),\n         }),\n         position: match inlay_hint.kind {\n-            InlayKind::ParameterHint => position(line_index, inlay_hint.range.start()),\n+            // before annotated thing\n+            InlayKind::ParameterHint | InlayKind::ImplicitReborrow => {\n+                position(line_index, inlay_hint.range.start())\n+            }\n+            // after annotated thing\n             InlayKind::ClosureReturnTypeHint\n             | InlayKind::TypeHint\n             | InlayKind::ChainingHint\n@@ -438,7 +442,9 @@ pub(crate) fn inlay_hint(\n             InlayKind::ClosureReturnTypeHint | InlayKind::TypeHint | InlayKind::ChainingHint => {\n                 Some(lsp_ext::InlayHintKind::TYPE)\n             }\n-            InlayKind::GenericParamListHint | InlayKind::LifetimeHint => None,\n+            InlayKind::GenericParamListHint\n+            | InlayKind::LifetimeHint\n+            | InlayKind::ImplicitReborrow => None,\n         },\n         tooltip: None,\n         padding_left: Some(match inlay_hint.kind {\n@@ -447,6 +453,7 @@ pub(crate) fn inlay_hint(\n             InlayKind::ChainingHint => true,\n             InlayKind::GenericParamListHint => false,\n             InlayKind::LifetimeHint => false,\n+            InlayKind::ImplicitReborrow => false,\n         }),\n         padding_right: Some(match inlay_hint.kind {\n             InlayKind::TypeHint | InlayKind::ChainingHint | InlayKind::ClosureReturnTypeHint => {\n@@ -455,6 +462,7 @@ pub(crate) fn inlay_hint(\n             InlayKind::ParameterHint => true,\n             InlayKind::LifetimeHint => true,\n             InlayKind::GenericParamListHint => false,\n+            InlayKind::ImplicitReborrow => false,\n         }),\n     }\n }"}, {"sha": "61bd36202d9006e0f591b09ed1fefd9863b5e8dd", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37b48ceb8f57dc9826e48e72e718c38264f5ccb7/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/37b48ceb8f57dc9826e48e72e718c38264f5ccb7/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=37b48ceb8f57dc9826e48e72e718c38264f5ccb7", "patch": "@@ -378,6 +378,11 @@ Whether to show inlay type hints for method chains.\n --\n Whether to show inlay type hints for return types of closures with blocks.\n --\n+[[rust-analyzer.inlayHints.reborrowHints]]rust-analyzer.inlayHints.reborrowHints (default: `false`)::\n++\n+--\n+Whether to show inlay type hints for compiler inserted reborrows.\n+--\n [[rust-analyzer.inlayHints.lifetimeElisionHints]]rust-analyzer.inlayHints.lifetimeElisionHints (default: `\"never\"`)::\n +\n --"}, {"sha": "18d4b39b832f8c08e2a917429d68255d66043677", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37b48ceb8f57dc9826e48e72e718c38264f5ccb7/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/37b48ceb8f57dc9826e48e72e718c38264f5ccb7/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=37b48ceb8f57dc9826e48e72e718c38264f5ccb7", "patch": "@@ -800,6 +800,11 @@\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.inlayHints.reborrowHints\": {\n+                    \"markdownDescription\": \"Whether to show inlay type hints for compiler inserted reborrows.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.inlayHints.lifetimeElisionHints\": {\n                     \"markdownDescription\": \"Whether to show inlay type hints for elided lifetimes in function signatures.\",\n                     \"default\": \"never\","}]}