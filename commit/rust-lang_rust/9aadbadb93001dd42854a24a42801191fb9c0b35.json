{"sha": "9aadbadb93001dd42854a24a42801191fb9c0b35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYWRiYWRiOTMwMDFkZDQyODU0YTI0YTQyODAxMTkxZmI5YzBiMzU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-03T15:40:36Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-03T21:30:49Z"}, "message": "fix rpass/cfail tests", "tree": {"sha": "1014ad3d024db7ee00bf822fd193026769ef97bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1014ad3d024db7ee00bf822fd193026769ef97bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9aadbadb93001dd42854a24a42801191fb9c0b35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9aadbadb93001dd42854a24a42801191fb9c0b35", "html_url": "https://github.com/rust-lang/rust/commit/9aadbadb93001dd42854a24a42801191fb9c0b35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9aadbadb93001dd42854a24a42801191fb9c0b35/comments", "author": null, "committer": null, "parents": [{"sha": "6fc92578fee125615b4357bdd3142a8f07b20b54", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fc92578fee125615b4357bdd3142a8f07b20b54", "html_url": "https://github.com/rust-lang/rust/commit/6fc92578fee125615b4357bdd3142a8f07b20b54"}], "stats": {"total": 101, "additions": 80, "deletions": 21}, "files": [{"sha": "87e647d16ddf84861910671b4391c30cb41d4647", "filename": "src/test/compile-fail/borrowck-overloaded-index-2.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9aadbadb93001dd42854a24a42801191fb9c0b35/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aadbadb93001dd42854a24a42801191fb9c0b35/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs?ref=9aadbadb93001dd42854a24a42801191fb9c0b35", "patch": "@@ -8,13 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_types)]\n+\n use std::ops::Index;\n \n struct MyVec<T> {\n     data: Vec<T>,\n }\n \n-impl<T> Index<uint, T> for MyVec<T> {\n+impl<T> Index<uint> for MyVec<T> {\n+    type Output = T;\n+\n     fn index(&self, &i: &uint) -> &T {\n         &self.data[i]\n     }"}, {"sha": "e7bd7cdf0b79de2be624f24f04589d85aea334f1", "filename": "src/test/compile-fail/borrowck-overloaded-index-autoderef.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9aadbadb93001dd42854a24a42801191fb9c0b35/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aadbadb93001dd42854a24a42801191fb9c0b35/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-autoderef.rs?ref=9aadbadb93001dd42854a24a42801191fb9c0b35", "patch": "@@ -11,14 +11,18 @@\n // Test that we still see borrowck errors of various kinds when using\n // indexing and autoderef in combination.\n \n+#![feature(associated_types)]\n+\n use std::ops::{Index, IndexMut};\n \n struct Foo {\n     x: int,\n     y: int,\n }\n \n-impl Index<String,int> for Foo {\n+impl Index<String> for Foo {\n+    type Output = int;\n+\n     fn index<'a>(&'a self, z: &String) -> &'a int {\n         if z.as_slice() == \"x\" {\n             &self.x\n@@ -28,7 +32,9 @@ impl Index<String,int> for Foo {\n     }\n }\n \n-impl IndexMut<String,int> for Foo {\n+impl IndexMut<String> for Foo {\n+    type Output = int;\n+\n     fn index_mut<'a>(&'a mut self, z: &String) -> &'a mut int {\n         if z.as_slice() == \"x\" {\n             &mut self.x"}, {"sha": "532f32ce770a6bbe280ee2e051c626c32d9d96ee", "filename": "src/test/compile-fail/borrowck-overloaded-index.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9aadbadb93001dd42854a24a42801191fb9c0b35/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aadbadb93001dd42854a24a42801191fb9c0b35/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs?ref=9aadbadb93001dd42854a24a42801191fb9c0b35", "patch": "@@ -8,14 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_types)]\n+\n use std::ops::{Index, IndexMut};\n \n struct Foo {\n     x: int,\n     y: int,\n }\n \n-impl Index<String,int> for Foo {\n+impl Index<String> for Foo {\n+    type Output = int;\n+\n     fn index<'a>(&'a self, z: &String) -> &'a int {\n         if z.as_slice() == \"x\" {\n             &self.x\n@@ -25,7 +29,9 @@ impl Index<String,int> for Foo {\n     }\n }\n \n-impl IndexMut<String,int> for Foo {\n+impl IndexMut<String> for Foo {\n+    type Output = int;\n+\n     fn index_mut<'a>(&'a mut self, z: &String) -> &'a mut int {\n         if z.as_slice() == \"x\" {\n             &mut self.x\n@@ -39,7 +45,9 @@ struct Bar {\n     x: int,\n }\n \n-impl Index<int,int> for Bar {\n+impl Index<int> for Bar {\n+    type Output = int;\n+\n     fn index<'a>(&'a self, z: &int) -> &'a int {\n         &self.x\n     }"}, {"sha": "06d20c3361bc96e17c2d2e16383eeac183cc69e9", "filename": "src/test/compile-fail/dst-index.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9aadbadb93001dd42854a24a42801191fb9c0b35/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aadbadb93001dd42854a24a42801191fb9c0b35/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-index.rs?ref=9aadbadb93001dd42854a24a42801191fb9c0b35", "patch": "@@ -11,14 +11,18 @@\n // Test that overloaded index expressions with DST result types\n // can't be used as rvalues\n \n+#![feature(associated_types)]\n+\n use std::ops::Index;\n use std::fmt::Show;\n \n struct S;\n \n impl Copy for S {}\n \n-impl Index<uint, str> for S {\n+impl Index<uint> for S {\n+    type Output = str;\n+\n     fn index<'a>(&'a self, _: &uint) -> &'a str {\n         \"hello\"\n     }\n@@ -28,7 +32,9 @@ struct T;\n \n impl Copy for T {}\n \n-impl Index<uint, Show + 'static> for T {\n+impl Index<uint> for T {\n+    type Output = Show + 'static;\n+\n     fn index<'a>(&'a self, idx: &uint) -> &'a (Show + 'static) {\n         static x: uint = 42;\n         &x"}, {"sha": "6a69bfc248f16ec5794a31073657ebb1487f326c", "filename": "src/test/run-pass/dst-index.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9aadbadb93001dd42854a24a42801191fb9c0b35/src%2Ftest%2Frun-pass%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aadbadb93001dd42854a24a42801191fb9c0b35/src%2Ftest%2Frun-pass%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-index.rs?ref=9aadbadb93001dd42854a24a42801191fb9c0b35", "patch": "@@ -11,20 +11,26 @@\n // Test that overloaded index expressions with DST result types\n // work and don't ICE.\n \n+#![feature(associated_types)]\n+\n use std::ops::Index;\n use std::fmt::Show;\n \n struct S;\n \n-impl Index<uint, str> for S {\n+impl Index<uint> for S {\n+    type Output = str;\n+\n     fn index<'a>(&'a self, _: &uint) -> &'a str {\n         \"hello\"\n     }\n }\n \n struct T;\n \n-impl Index<uint, Show + 'static> for T {\n+impl Index<uint> for T {\n+    type Output = Show + 'static;\n+\n     fn index<'a>(&'a self, idx: &uint) -> &'a (Show + 'static) {\n         static x: uint = 42;\n         &x"}, {"sha": "f261098f5381137e684f3faa8ca21af40a4b08bb", "filename": "src/test/run-pass/issue-15734.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9aadbadb93001dd42854a24a42801191fb9c0b35/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aadbadb93001dd42854a24a42801191fb9c0b35/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15734.rs?ref=9aadbadb93001dd42854a24a42801191fb9c0b35", "patch": "@@ -10,7 +10,8 @@\n \n // If `Index` used an associated type for its output, this test would\n // work more smoothly.\n-#![feature(old_orphan_check)]\n+\n+#![feature(associated_types, old_orphan_check)]\n \n use std::ops::Index;\n \n@@ -25,21 +26,27 @@ impl<T> Mat<T> {\n     }\n }\n \n-impl<T> Index<(uint, uint), T> for Mat<T> {\n+impl<T> Index<(uint, uint)> for Mat<T> {\n+    type Output = T;\n+\n     fn index<'a>(&'a self, &(row, col): &(uint, uint)) -> &'a T {\n         &self.data[row * self.cols + col]\n     }\n }\n \n-impl<'a, T> Index<(uint, uint), T> for &'a Mat<T> {\n+impl<'a, T> Index<(uint, uint)> for &'a Mat<T> {\n+    type Output = T;\n+\n     fn index<'b>(&'b self, index: &(uint, uint)) -> &'b T {\n         (*self).index(index)\n     }\n }\n \n struct Row<M> { mat: M, row: uint, }\n \n-impl<T, M: Index<(uint, uint), T>> Index<uint, T> for Row<M> {\n+impl<T, M: Index<(uint, uint), Output=T>> Index<uint> for Row<M> {\n+    type Output = T;\n+\n     fn index<'a>(&'a self, col: &uint) -> &'a T {\n         &self.mat[(self.row, *col)]\n     }"}, {"sha": "41e7586f1e3db33fbe45341dea110152dbb7ccbd", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aadbadb93001dd42854a24a42801191fb9c0b35/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aadbadb93001dd42854a24a42801191fb9c0b35/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=9aadbadb93001dd42854a24a42801191fb9c0b35", "patch": "@@ -51,7 +51,9 @@ impl ops::Not for Point {\n     }\n }\n \n-impl ops::Index<bool,int> for Point {\n+impl ops::Index<bool> for Point {\n+    type Output = int;\n+\n     fn index(&self, x: &bool) -> &int {\n         if *x {\n             &self.x"}, {"sha": "77bb981cfd9b9a3f0fe06d389a9402c4cd4a1197", "filename": "src/test/run-pass/overloaded-index-assoc-list.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9aadbadb93001dd42854a24a42801191fb9c0b35/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aadbadb93001dd42854a24a42801191fb9c0b35/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs?ref=9aadbadb93001dd42854a24a42801191fb9c0b35", "patch": "@@ -11,6 +11,8 @@\n // Test overloading of the `[]` operator.  In particular test that it\n // takes its argument *by reference*.\n \n+#![feature(associated_types)]\n+\n use std::ops::Index;\n \n struct AssociationList<K,V> {\n@@ -28,7 +30,9 @@ impl<K,V> AssociationList<K,V> {\n     }\n }\n \n-impl<K: PartialEq + std::fmt::Show, V:Clone> Index<K,V> for AssociationList<K,V> {\n+impl<K: PartialEq + std::fmt::Show, V:Clone> Index<K> for AssociationList<K,V> {\n+    type Output = V;\n+\n     fn index<'a>(&'a self, index: &K) -> &'a V {\n         for pair in self.pairs.iter() {\n             if pair.key == *index {"}, {"sha": "d141234287d13e8e4452485329b144d22647b29a", "filename": "src/test/run-pass/overloaded-index-autoderef.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9aadbadb93001dd42854a24a42801191fb9c0b35/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aadbadb93001dd42854a24a42801191fb9c0b35/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs?ref=9aadbadb93001dd42854a24a42801191fb9c0b35", "patch": "@@ -10,14 +10,18 @@\n \n // Test overloaded indexing combined with autoderef.\n \n+#![feature(associated_types)]\n+\n use std::ops::{Index, IndexMut};\n \n struct Foo {\n     x: int,\n     y: int,\n }\n \n-impl Index<int,int> for Foo {\n+impl Index<int> for Foo {\n+    type Output = int;\n+\n     fn index(&self, z: &int) -> &int {\n         if *z == 0 {\n             &self.x\n@@ -27,7 +31,9 @@ impl Index<int,int> for Foo {\n     }\n }\n \n-impl IndexMut<int,int> for Foo {\n+impl IndexMut<int> for Foo {\n+    type Output = int;\n+\n     fn index_mut(&mut self, z: &int) -> &mut int {\n         if *z == 0 {\n             &mut self.x"}, {"sha": "9c6afc0912d0630a471b30bcfb782c30f08fedd9", "filename": "src/test/run-pass/overloaded-index-in-field.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9aadbadb93001dd42854a24a42801191fb9c0b35/src%2Ftest%2Frun-pass%2Foverloaded-index-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aadbadb93001dd42854a24a42801191fb9c0b35/src%2Ftest%2Frun-pass%2Foverloaded-index-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-in-field.rs?ref=9aadbadb93001dd42854a24a42801191fb9c0b35", "patch": "@@ -11,6 +11,8 @@\n // Test using overloaded indexing when the \"map\" is stored in a\n // field. This caused problems at some point.\n \n+#![feature(associated_types)]\n+\n use std::ops::Index;\n \n struct Foo {\n@@ -22,7 +24,9 @@ struct Bar {\n     foo: Foo\n }\n \n-impl Index<int,int> for Foo {\n+impl Index<int> for Foo {\n+    type Output = int;\n+\n     fn index(&self, z: &int) -> &int {\n         if *z == 0 {\n             &self.x"}, {"sha": "fe09b47cf0a789bbb707b2c16d0baf15be8e6ecc", "filename": "src/test/run-pass/overloaded-index.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9aadbadb93001dd42854a24a42801191fb9c0b35/src%2Ftest%2Frun-pass%2Foverloaded-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aadbadb93001dd42854a24a42801191fb9c0b35/src%2Ftest%2Frun-pass%2Foverloaded-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index.rs?ref=9aadbadb93001dd42854a24a42801191fb9c0b35", "patch": "@@ -8,14 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_types)]\n+\n use std::ops::{Index, IndexMut};\n \n struct Foo {\n     x: int,\n     y: int,\n }\n \n-impl Index<int,int> for Foo {\n+impl Index<int> for Foo {\n+    type Output = int;\n+\n     fn index(&self, z: &int) -> &int {\n         if *z == 0 {\n             &self.x\n@@ -25,7 +29,9 @@ impl Index<int,int> for Foo {\n     }\n }\n \n-impl IndexMut<int,int> for Foo {\n+impl IndexMut<int> for Foo {\n+    type Output = int;\n+\n     fn index_mut(&mut self, z: &int) -> &mut int {\n         if *z == 0 {\n             &mut self.x"}]}