{"sha": "d07be1a304391efde577089c6f09b665fe4b1d15", "node_id": "C_kwDOAAsO6NoAKGQwN2JlMWEzMDQzOTFlZmRlNTc3MDg5YzZmMDliNjY1ZmU0YjFkMTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-28T13:40:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-28T13:40:01Z"}, "message": "Rollup merge of #106176 - compiler-errors:fn-kw-as-fn-trait, r=estebank\n\nRecover `fn` keyword as `Fn` trait in bounds\n\n`impl fn()` -> `impl Fn()`\n\nFixes #82515", "tree": {"sha": "194cce9b8c318b31272468279ce650b78a4daff9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/194cce9b8c318b31272468279ce650b78a4daff9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d07be1a304391efde577089c6f09b665fe4b1d15", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjrEcxCRBK7hj4Ov3rIwAA1RMIAH1yELSiPjf6m9a/tjwERljL\nrq2xw1KHJ9rbDkZYo+CCvjJlEvvk8IPR2hGPdxN8KHvB5SchCK9xUT5BaFRMCsqo\nxLbpLT4SQsA5gq4lINh0FX79HgKqfZqlmlK4VLIVGtrhqtlMZHdvP6dTXhOt0EfD\nxXsTT0Smlfm5CqVvt4hPCri2Tt3MLE5JhFI2rcGjxBh9szcj3tZeOzWu99Rrwzoe\nUBvXN54F5gEgfPMmAaBCa8DqWdPhq7gynXfng5SsrxwPDsfryoIgnddEa08a8nyq\ns/NS5gWX4XI89LJ2s07k2VgkyyLY880QW60H3BA7rvKT06SQWJNwQBw2raharho=\n=XXDk\n-----END PGP SIGNATURE-----\n", "payload": "tree 194cce9b8c318b31272468279ce650b78a4daff9\nparent c991c243b704b8895af15e971dd3a2ab5ee2aac1\nparent aff403cf689e30fdd20b96333d3a10db92086e4f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1672234801 +0100\ncommitter GitHub <noreply@github.com> 1672234801 +0100\n\nRollup merge of #106176 - compiler-errors:fn-kw-as-fn-trait, r=estebank\n\nRecover `fn` keyword as `Fn` trait in bounds\n\n`impl fn()` -> `impl Fn()`\n\nFixes #82515\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d07be1a304391efde577089c6f09b665fe4b1d15", "html_url": "https://github.com/rust-lang/rust/commit/d07be1a304391efde577089c6f09b665fe4b1d15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d07be1a304391efde577089c6f09b665fe4b1d15/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c991c243b704b8895af15e971dd3a2ab5ee2aac1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c991c243b704b8895af15e971dd3a2ab5ee2aac1", "html_url": "https://github.com/rust-lang/rust/commit/c991c243b704b8895af15e971dd3a2ab5ee2aac1"}, {"sha": "aff403cf689e30fdd20b96333d3a10db92086e4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/aff403cf689e30fdd20b96333d3a10db92086e4f", "html_url": "https://github.com/rust-lang/rust/commit/aff403cf689e30fdd20b96333d3a10db92086e4f"}], "stats": {"total": 227, "additions": 148, "deletions": 79}, "files": [{"sha": "3401978caf5f0f305b0f6128baf0ac79c6f73784", "filename": "compiler/rustc_error_messages/locales/en-US/parse.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d07be1a304391efde577089c6f09b665fe4b1d15/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d07be1a304391efde577089c6f09b665fe4b1d15/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl?ref=d07be1a304391efde577089c6f09b665fe4b1d15", "patch": "@@ -365,3 +365,6 @@ parse_invalid_identifier_with_leading_number = expected identifier, found number\n \n parse_maybe_fn_typo_with_impl = you might have meant to write `impl` instead of `fn`\n     .suggestion = replace `fn` with `impl` here\n+\n+parse_expected_fn_path_found_fn_keyword = expected identifier, found keyword `fn`\n+    .suggestion = use `Fn` to refer to the trait"}, {"sha": "406e1569a6f753e89edc1768e513429b14195262", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d07be1a304391efde577089c6f09b665fe4b1d15/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d07be1a304391efde577089c6f09b665fe4b1d15/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=d07be1a304391efde577089c6f09b665fe4b1d15", "patch": "@@ -626,7 +626,7 @@ impl<'a> ExtCtxt<'a> {\n \n     // Builds `#[name = val]`.\n     //\n-    // Note: `span` is used for both the identifer and the value.\n+    // Note: `span` is used for both the identifier and the value.\n     pub fn attr_name_value_str(&self, name: Symbol, val: Symbol, span: Span) -> ast::Attribute {\n         let g = &self.sess.parse_sess.attr_id_generator;\n         attr::mk_attr_name_value_str(g, ast::AttrStyle::Outer, name, val, span)"}, {"sha": "4c65fca29b89721542148dcfadf447bee9f7048b", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d07be1a304391efde577089c6f09b665fe4b1d15/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d07be1a304391efde577089c6f09b665fe4b1d15/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=d07be1a304391efde577089c6f09b665fe4b1d15", "patch": "@@ -851,7 +851,7 @@ impl Cursor<'_> {\n     }\n \n     // Eats the identifier. Note: succeeds on `_`, which isn't a valid\n-    // identifer.\n+    // identifier.\n     fn eat_identifier(&mut self) {\n         if !is_id_start(self.first()) {\n             return;"}, {"sha": "574591529f33194f240067c2a420ba18923b7223", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d07be1a304391efde577089c6f09b665fe4b1d15/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d07be1a304391efde577089c6f09b665fe4b1d15/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=d07be1a304391efde577089c6f09b665fe4b1d15", "patch": "@@ -1229,3 +1229,11 @@ pub(crate) struct FnTypoWithImpl {\n     #[suggestion(applicability = \"maybe-incorrect\", code = \"impl\", style = \"verbose\")]\n     pub fn_span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_expected_fn_path_found_fn_keyword)]\n+pub(crate) struct ExpectedFnPathFoundFnKeyword {\n+    #[primary_span]\n+    #[suggestion(applicability = \"machine-applicable\", code = \"Fn\", style = \"verbose\")]\n+    pub fn_token_span: Span,\n+}"}, {"sha": "8661e9ca16b8d02abd62981c86d8bcdc3cd89bb6", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d07be1a304391efde577089c6f09b665fe4b1d15/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d07be1a304391efde577089c6f09b665fe4b1d15/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=d07be1a304391efde577089c6f09b665fe4b1d15", "patch": "@@ -1,8 +1,9 @@\n use super::{Parser, PathStyle, TokenType};\n \n-use crate::errors::{FnPtrWithGenerics, FnPtrWithGenericsSugg};\n+use crate::errors::{ExpectedFnPathFoundFnKeyword, FnPtrWithGenerics, FnPtrWithGenericsSugg};\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n \n+use ast::DUMMY_NODE_ID;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, Token, TokenKind};\n use rustc_ast::util::case::Case;\n@@ -12,7 +13,9 @@ use rustc_ast::{\n };\n use rustc_errors::{pluralize, struct_span_err, Applicability, PResult};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::{kw, sym, Ident};\n+use rustc_span::Symbol;\n+use thin_vec::thin_vec;\n \n /// Any `?` or `~const` modifiers that appear at the start of a bound.\n struct BoundModifiers {\n@@ -931,7 +934,14 @@ impl<'a> Parser<'a> {\n         modifiers: BoundModifiers,\n     ) -> PResult<'a, GenericBound> {\n         let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n-        let path = self.parse_path(PathStyle::Type)?;\n+        let path = if self.token.is_keyword(kw::Fn)\n+            && self.look_ahead(1, |tok| tok.kind == TokenKind::OpenDelim(Delimiter::Parenthesis))\n+            && let Some(path) = self.recover_path_from_fn()\n+        {\n+            path\n+        } else {\n+            self.parse_path(PathStyle::Type)?\n+        };\n         if has_parens {\n             if self.token.is_like_plus() {\n                 // Someone has written something like `&dyn (Trait + Other)`. The correct code\n@@ -960,6 +970,38 @@ impl<'a> Parser<'a> {\n         Ok(GenericBound::Trait(poly_trait, modifier))\n     }\n \n+    // recovers a `Fn(..)` parenthesized-style path from `fn(..)`\n+    fn recover_path_from_fn(&mut self) -> Option<ast::Path> {\n+        let fn_token_span = self.token.span;\n+        self.bump();\n+        let args_lo = self.token.span;\n+        let snapshot = self.create_snapshot_for_diagnostic();\n+        match self.parse_fn_decl(|_| false, AllowPlus::No, RecoverReturnSign::OnlyFatArrow) {\n+            Ok(decl) => {\n+                self.sess.emit_err(ExpectedFnPathFoundFnKeyword { fn_token_span });\n+                Some(ast::Path {\n+                    span: fn_token_span.to(self.prev_token.span),\n+                    segments: thin_vec![ast::PathSegment {\n+                        ident: Ident::new(Symbol::intern(\"Fn\"), fn_token_span),\n+                        id: DUMMY_NODE_ID,\n+                        args: Some(P(ast::GenericArgs::Parenthesized(ast::ParenthesizedArgs {\n+                            span: args_lo.to(self.prev_token.span),\n+                            inputs: decl.inputs.iter().map(|a| a.ty.clone()).collect(),\n+                            inputs_span: args_lo.until(decl.output.span()),\n+                            output: decl.output.clone(),\n+                        }))),\n+                    }],\n+                    tokens: None,\n+                })\n+            }\n+            Err(diag) => {\n+                diag.cancel();\n+                self.restore_snapshot(snapshot);\n+                None\n+            }\n+        }\n+    }\n+\n     /// Optionally parses `for<$generic_params>`.\n     pub(super) fn parse_late_bound_lifetime_defs(&mut self) -> PResult<'a, Vec<GenericParam>> {\n         if self.eat_keyword(kw::For) {"}, {"sha": "e9e85339affa9e1da8bd6aee63e272f04b1a8d08", "filename": "src/test/ui/parser/kw-in-trait-bounds.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d07be1a304391efde577089c6f09b665fe4b1d15/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d07be1a304391efde577089c6f09b665fe4b1d15/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.rs?ref=d07be1a304391efde577089c6f09b665fe4b1d15", "patch": "@@ -4,21 +4,13 @@ fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n //~^ ERROR expected identifier, found keyword `fn`\n //~| ERROR expected identifier, found keyword `fn`\n //~| ERROR expected identifier, found keyword `fn`\n-//~| ERROR cannot find trait `r#fn` in this scope\n-//~| ERROR cannot find trait `r#fn` in this scope\n-//~| ERROR cannot find trait `r#fn` in this scope\n-//~| HELP  a trait with a similar name exists\n-//~| HELP  a trait with a similar name exists\n-//~| HELP  a trait with a similar name exists\n-//~| HELP  escape `fn` to use it as an identifier\n-//~| HELP  escape `fn` to use it as an identifier\n-//~| HELP  escape `fn` to use it as an identifier\n+//~| HELP use `Fn` to refer to the trait\n+//~| HELP use `Fn` to refer to the trait\n+//~| HELP use `Fn` to refer to the trait\n where\n G: fn(),\n     //~^ ERROR expected identifier, found keyword `fn`\n-    //~| ERROR cannot find trait `r#fn` in this scope\n-    //~| HELP  a trait with a similar name exists\n-    //~| HELP  escape `fn` to use it as an identifier\n+    //~| HELP use `Fn` to refer to the trait\n {}\n \n fn _g<A: struct, B>(_: impl struct, _: &dyn struct)"}, {"sha": "2d3aad4d6baf46f5a7733566b7436de8663b44f6", "filename": "src/test/ui/parser/kw-in-trait-bounds.stderr", "status": "modified", "additions": 26, "deletions": 62, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/d07be1a304391efde577089c6f09b665fe4b1d15/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d07be1a304391efde577089c6f09b665fe4b1d15/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.stderr?ref=d07be1a304391efde577089c6f09b665fe4b1d15", "patch": "@@ -2,48 +2,48 @@ error: expected identifier, found keyword `fn`\n   --> $DIR/kw-in-trait-bounds.rs:3:10\n    |\n LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n-   |          ^^ expected identifier, found keyword\n+   |          ^^\n    |\n-help: escape `fn` to use it as an identifier\n+help: use `Fn` to refer to the trait\n    |\n-LL | fn _f<F: r#fn(), G>(_: impl fn(), _: &dyn fn())\n-   |          ++\n+LL | fn _f<F: Fn(), G>(_: impl fn(), _: &dyn fn())\n+   |          ~~\n \n error: expected identifier, found keyword `fn`\n   --> $DIR/kw-in-trait-bounds.rs:3:27\n    |\n LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n-   |                           ^^ expected identifier, found keyword\n+   |                           ^^\n    |\n-help: escape `fn` to use it as an identifier\n+help: use `Fn` to refer to the trait\n    |\n-LL | fn _f<F: fn(), G>(_: impl r#fn(), _: &dyn fn())\n-   |                           ++\n+LL | fn _f<F: fn(), G>(_: impl Fn(), _: &dyn fn())\n+   |                           ~~\n \n error: expected identifier, found keyword `fn`\n   --> $DIR/kw-in-trait-bounds.rs:3:41\n    |\n LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n-   |                                         ^^ expected identifier, found keyword\n+   |                                         ^^\n    |\n-help: escape `fn` to use it as an identifier\n+help: use `Fn` to refer to the trait\n    |\n-LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn r#fn())\n-   |                                         ++\n+LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn Fn())\n+   |                                         ~~\n \n error: expected identifier, found keyword `fn`\n-  --> $DIR/kw-in-trait-bounds.rs:17:4\n+  --> $DIR/kw-in-trait-bounds.rs:11:4\n    |\n LL | G: fn(),\n-   |    ^^ expected identifier, found keyword\n+   |    ^^\n    |\n-help: escape `fn` to use it as an identifier\n+help: use `Fn` to refer to the trait\n    |\n-LL | G: r#fn(),\n-   |    ++\n+LL | G: Fn(),\n+   |    ~~\n \n error: expected identifier, found keyword `struct`\n-  --> $DIR/kw-in-trait-bounds.rs:24:10\n+  --> $DIR/kw-in-trait-bounds.rs:16:10\n    |\n LL | fn _g<A: struct, B>(_: impl struct, _: &dyn struct)\n    |          ^^^^^^ expected identifier, found keyword\n@@ -54,7 +54,7 @@ LL | fn _g<A: r#struct, B>(_: impl struct, _: &dyn struct)\n    |          ++\n \n error: expected identifier, found keyword `struct`\n-  --> $DIR/kw-in-trait-bounds.rs:24:29\n+  --> $DIR/kw-in-trait-bounds.rs:16:29\n    |\n LL | fn _g<A: struct, B>(_: impl struct, _: &dyn struct)\n    |                             ^^^^^^ expected identifier, found keyword\n@@ -65,7 +65,7 @@ LL | fn _g<A: struct, B>(_: impl r#struct, _: &dyn struct)\n    |                             ++\n \n error: expected identifier, found keyword `struct`\n-  --> $DIR/kw-in-trait-bounds.rs:24:45\n+  --> $DIR/kw-in-trait-bounds.rs:16:45\n    |\n LL | fn _g<A: struct, B>(_: impl struct, _: &dyn struct)\n    |                                             ^^^^^^ expected identifier, found keyword\n@@ -76,7 +76,7 @@ LL | fn _g<A: struct, B>(_: impl struct, _: &dyn r#struct)\n    |                                             ++\n \n error: expected identifier, found keyword `struct`\n-  --> $DIR/kw-in-trait-bounds.rs:38:8\n+  --> $DIR/kw-in-trait-bounds.rs:30:8\n    |\n LL |     B: struct,\n    |        ^^^^^^ expected identifier, found keyword\n@@ -86,44 +86,8 @@ help: escape `struct` to use it as an identifier\n LL |     B: r#struct,\n    |        ++\n \n-error[E0405]: cannot find trait `r#fn` in this scope\n-  --> $DIR/kw-in-trait-bounds.rs:3:10\n-   |\n-LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n-   |          ^^ help: a trait with a similar name exists (notice the capitalization): `Fn`\n-  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-   = note: similarly named trait `Fn` defined here\n-\n-error[E0405]: cannot find trait `r#fn` in this scope\n-  --> $DIR/kw-in-trait-bounds.rs:17:4\n-   |\n-LL | G: fn(),\n-   |    ^^ help: a trait with a similar name exists (notice the capitalization): `Fn`\n-  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-   = note: similarly named trait `Fn` defined here\n-\n-error[E0405]: cannot find trait `r#fn` in this scope\n-  --> $DIR/kw-in-trait-bounds.rs:3:27\n-   |\n-LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n-   |                           ^^ help: a trait with a similar name exists (notice the capitalization): `Fn`\n-  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-   = note: similarly named trait `Fn` defined here\n-\n-error[E0405]: cannot find trait `r#fn` in this scope\n-  --> $DIR/kw-in-trait-bounds.rs:3:41\n-   |\n-LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n-   |                                         ^^ help: a trait with a similar name exists (notice the capitalization): `Fn`\n-  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-   = note: similarly named trait `Fn` defined here\n-\n error[E0405]: cannot find trait `r#struct` in this scope\n-  --> $DIR/kw-in-trait-bounds.rs:24:10\n+  --> $DIR/kw-in-trait-bounds.rs:16:10\n    |\n LL | fn _g<A: struct, B>(_: impl struct, _: &dyn struct)\n    |          ^^^^^^ help: a trait with a similar name exists (notice the capitalization): `Struct`\n@@ -132,7 +96,7 @@ LL | trait Struct {}\n    | ------------ similarly named trait `Struct` defined here\n \n error[E0405]: cannot find trait `r#struct` in this scope\n-  --> $DIR/kw-in-trait-bounds.rs:38:8\n+  --> $DIR/kw-in-trait-bounds.rs:30:8\n    |\n LL |     B: struct,\n    |        ^^^^^^ help: a trait with a similar name exists (notice the capitalization): `Struct`\n@@ -141,7 +105,7 @@ LL | trait Struct {}\n    | ------------ similarly named trait `Struct` defined here\n \n error[E0405]: cannot find trait `r#struct` in this scope\n-  --> $DIR/kw-in-trait-bounds.rs:24:29\n+  --> $DIR/kw-in-trait-bounds.rs:16:29\n    |\n LL | fn _g<A: struct, B>(_: impl struct, _: &dyn struct)\n    |                             ^^^^^^ help: a trait with a similar name exists (notice the capitalization): `Struct`\n@@ -150,14 +114,14 @@ LL | trait Struct {}\n    | ------------ similarly named trait `Struct` defined here\n \n error[E0405]: cannot find trait `r#struct` in this scope\n-  --> $DIR/kw-in-trait-bounds.rs:24:45\n+  --> $DIR/kw-in-trait-bounds.rs:16:45\n    |\n LL | fn _g<A: struct, B>(_: impl struct, _: &dyn struct)\n    |                                             ^^^^^^ help: a trait with a similar name exists (notice the capitalization): `Struct`\n ...\n LL | trait Struct {}\n    | ------------ similarly named trait `Struct` defined here\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 12 previous errors\n \n For more information about this error, try `rustc --explain E0405`."}, {"sha": "b6611e6273d37c429d53871a4a074a70bbc696b5", "filename": "src/test/ui/parser/recover-fn-trait-from-fn-kw.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d07be1a304391efde577089c6f09b665fe4b1d15/src%2Ftest%2Fui%2Fparser%2Frecover-fn-trait-from-fn-kw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d07be1a304391efde577089c6f09b665fe4b1d15/src%2Ftest%2Fui%2Fparser%2Frecover-fn-trait-from-fn-kw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-fn-trait-from-fn-kw.rs?ref=d07be1a304391efde577089c6f09b665fe4b1d15", "patch": "@@ -0,0 +1,12 @@\n+fn foo(_: impl fn() -> i32) {}\n+//~^ ERROR expected identifier, found keyword `fn`\n+\n+fn foo2<T: fn(i32)>(_: T) {}\n+//~^ ERROR expected identifier, found keyword `fn`\n+\n+fn main() {\n+    foo(|| ());\n+    //~^ mismatched types\n+    foo2(|_: ()| {});\n+    //~^ type mismatch in closure arguments\n+}"}, {"sha": "3681a796c53ed4401621b683ab8471e4bbded6e0", "filename": "src/test/ui/parser/recover-fn-trait-from-fn-kw.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d07be1a304391efde577089c6f09b665fe4b1d15/src%2Ftest%2Fui%2Fparser%2Frecover-fn-trait-from-fn-kw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d07be1a304391efde577089c6f09b665fe4b1d15/src%2Ftest%2Fui%2Fparser%2Frecover-fn-trait-from-fn-kw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-fn-trait-from-fn-kw.stderr?ref=d07be1a304391efde577089c6f09b665fe4b1d15", "patch": "@@ -0,0 +1,48 @@\n+error: expected identifier, found keyword `fn`\n+  --> $DIR/recover-fn-trait-from-fn-kw.rs:1:16\n+   |\n+LL | fn foo(_: impl fn() -> i32) {}\n+   |                ^^\n+   |\n+help: use `Fn` to refer to the trait\n+   |\n+LL | fn foo(_: impl Fn() -> i32) {}\n+   |                ~~\n+\n+error: expected identifier, found keyword `fn`\n+  --> $DIR/recover-fn-trait-from-fn-kw.rs:4:12\n+   |\n+LL | fn foo2<T: fn(i32)>(_: T) {}\n+   |            ^^\n+   |\n+help: use `Fn` to refer to the trait\n+   |\n+LL | fn foo2<T: Fn(i32)>(_: T) {}\n+   |            ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-fn-trait-from-fn-kw.rs:8:12\n+   |\n+LL |     foo(|| ());\n+   |            ^^ expected `i32`, found `()`\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/recover-fn-trait-from-fn-kw.rs:10:5\n+   |\n+LL |     foo2(|_: ()| {});\n+   |     ^^^^ ------- found signature defined here\n+   |     |\n+   |     expected due to this\n+   |\n+   = note: expected closure signature `fn(i32) -> _`\n+              found closure signature `fn(()) -> _`\n+note: required by a bound in `foo2`\n+  --> $DIR/recover-fn-trait-from-fn-kw.rs:4:12\n+   |\n+LL | fn foo2<T: fn(i32)>(_: T) {}\n+   |            ^^^^^^^ required by this bound in `foo2`\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0308, E0631.\n+For more information about an error, try `rustc --explain E0308`."}]}