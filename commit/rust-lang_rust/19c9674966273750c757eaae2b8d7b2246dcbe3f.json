{"sha": "19c9674966273750c757eaae2b8d7b2246dcbe3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5Yzk2NzQ5NjYyNzM3NTBjNzU3ZWFhZTJiOGQ3YjIyNDZkY2JlM2Y=", "commit": {"author": {"name": "oliver-giersch", "email": "oliver.giersch@b-tu.de", "date": "2020-08-11T14:14:34Z"}, "committer": {"name": "oliver-giersch", "email": "oliver.giersch@b-tu.de", "date": "2020-08-11T14:14:34Z"}, "message": "mentions provenance, changes argument type, adds must_use attr", "tree": {"sha": "b10ae2631d7645131143e236396f36673e3c0995", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b10ae2631d7645131143e236396f36673e3c0995"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19c9674966273750c757eaae2b8d7b2246dcbe3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19c9674966273750c757eaae2b8d7b2246dcbe3f", "html_url": "https://github.com/rust-lang/rust/commit/19c9674966273750c757eaae2b8d7b2246dcbe3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19c9674966273750c757eaae2b8d7b2246dcbe3f/comments", "author": null, "committer": null, "parents": [{"sha": "441fd2255763c2aeea616aeac61b2c795a4c5330", "url": "https://api.github.com/repos/rust-lang/rust/commits/441fd2255763c2aeea616aeac61b2c795a4c5330", "html_url": "https://github.com/rust-lang/rust/commit/441fd2255763c2aeea616aeac61b2c795a4c5330"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "ac20897d258fb78ffd55060a43f0e33408d9951f", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/19c9674966273750c757eaae2b8d7b2246dcbe3f/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c9674966273750c757eaae2b8d7b2246dcbe3f/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=19c9674966273750c757eaae2b8d7b2246dcbe3f", "patch": "@@ -662,6 +662,11 @@ impl<T: ?Sized> *const T {\n     /// will only affect the pointer part, whereas for (thin) pointers to\n     /// sized types, this has the same effect as a simple assignment.\n     ///\n+    /// The resulting pointer will have provenance of `val`, i.e., for a fat\n+    /// pointer, this operation is semantically the same as creating a new\n+    /// fat pointer with the data pointer value of `val` but the metadata of\n+    /// `self`.\n+    ///\n     /// # Examples\n     ///\n     /// This function is primarily useful for allowing byte-wise pointer\n@@ -673,13 +678,17 @@ impl<T: ?Sized> *const T {\n     /// let arr: [i32; 3] = [1, 2, 3];\n     /// let mut ptr = &arr[0] as *const dyn Debug;\n     /// let thin = ptr as *const u8;\n-    /// ptr = ptr.set_ptr_value(unsafe { thin.add(8).cast() });\n-    /// assert_eq!(unsafe { *(ptr as *const i32) }, 3);\n+    /// unsafe {\n+    ///     ptr = ptr.set_ptr_value(thin.add(8));\n+    ///     # assert_eq!(*(ptr as *const i32), 3);\n+    ///     println!(\"{:?}\", &*ptr); // will print \"3\"\n+    /// }\n     /// ```\n     #[unstable(feature = \"set_ptr_value\", issue = \"75091\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n-    pub fn set_ptr_value(mut self, val: *const ()) -> Self {\n-        let thin = &mut self as *mut *const T as *mut *const ();\n+    pub fn set_ptr_value(mut self, val: *const u8) -> Self {\n+        let thin = &mut self as *mut *const T as *mut *const u8;\n         // SAFETY: In case of a thin pointer, this operations is identical\n         // to a simple assignment. In case of a fat pointer, with the current\n         // fat pointer layout implementation, the first field of such a"}, {"sha": "df00139118aa4bc0cd98fe6398c9c74816f72f8f", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/19c9674966273750c757eaae2b8d7b2246dcbe3f/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c9674966273750c757eaae2b8d7b2246dcbe3f/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=19c9674966273750c757eaae2b8d7b2246dcbe3f", "patch": "@@ -718,6 +718,11 @@ impl<T: ?Sized> *mut T {\n     /// will only affect the pointer part, whereas for (thin) pointers to\n     /// sized types, this has the same effect as a simple assignment.\n     ///\n+    /// The resulting pointer will have provenance of `val`, i.e., for a fat\n+    /// pointer, this operation is semantically the same as creating a new\n+    /// fat pointer with the data pointer value of `val` but the metadata of\n+    /// `self`.\n+    ///\n     /// # Examples\n     ///\n     /// This function is primarily useful for allowing byte-wise pointer\n@@ -729,13 +734,17 @@ impl<T: ?Sized> *mut T {\n     /// let mut arr: [i32; 3] = [1, 2, 3];\n     /// let mut ptr = &mut arr[0] as *mut dyn Debug;\n     /// let thin = ptr as *mut u8;\n-    /// ptr = ptr.set_ptr_value(unsafe { thin.add(8).cast() });\n-    /// assert_eq!(unsafe { *(ptr as *mut i32) }, 3);\n+    /// unsafe {\n+    ///     ptr = ptr.set_ptr_value(thin.add(8));\n+    ///     # assert_eq!(*(ptr as *mut i32), 3);\n+    ///     println!(\"{:?}\", &*ptr); // will print \"3\"\n+    /// }\n     /// ```\n     #[unstable(feature = \"set_ptr_value\", issue = \"75091\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n-    pub fn set_ptr_value(mut self, val: *mut ()) -> Self {\n-        let thin = &mut self as *mut *mut T as *mut *mut ();\n+    pub fn set_ptr_value(mut self, val: *mut u8) -> Self {\n+        let thin = &mut self as *mut *mut T as *mut *mut u8;\n         // SAFETY: In case of a thin pointer, this operations is identical\n         // to a simple assignment. In case of a fat pointer, with the current\n         // fat pointer layout implementation, the first field of such a"}]}