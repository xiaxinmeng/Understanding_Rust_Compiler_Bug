{"sha": "1e5811ef9271644db0d0ddaae351976b0d4abdd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNTgxMWVmOTI3MTY0NGRiMGQwZGRhYWUzNTE5NzZiMGQ0YWJkZDI=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-12-05T17:57:42Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-12-24T18:33:04Z"}, "message": "Rename to_ascii_{lower,upper} to to_ascii_{lower,upper}case, per #14401\n\n[breaking-change]", "tree": {"sha": "3d7df2eeab4cd26f82fce87cb40183f88b72e5d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d7df2eeab4cd26f82fce87cb40183f88b72e5d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e5811ef9271644db0d0ddaae351976b0d4abdd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e5811ef9271644db0d0ddaae351976b0d4abdd2", "html_url": "https://github.com/rust-lang/rust/commit/1e5811ef9271644db0d0ddaae351976b0d4abdd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e5811ef9271644db0d0ddaae351976b0d4abdd2/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e64a8193b02ce72ef183274994a25eae281cb89c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e64a8193b02ce72ef183274994a25eae281cb89c", "html_url": "https://github.com/rust-lang/rust/commit/e64a8193b02ce72ef183274994a25eae281cb89c"}], "stats": {"total": 82, "additions": 41, "deletions": 41}, "files": [{"sha": "16c6f7250306d96a82630b7bf9a839c1eaaa6180", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e5811ef9271644db0d0ddaae351976b0d4abdd2/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e5811ef9271644db0d0ddaae351976b0d4abdd2/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=1e5811ef9271644db0d0ddaae351976b0d4abdd2", "patch": "@@ -67,7 +67,7 @@ fn parse_expected(last_nonfollow_error: Option<uint>,\n                   re: &Regex) -> Option<(WhichLine, ExpectedError)> {\n     re.captures(line).and_then(|caps| {\n         let adjusts = caps.name(\"adjusts\").unwrap_or(\"\").len();\n-        let kind = caps.name(\"kind\").unwrap_or(\"\").to_ascii_lower();\n+        let kind = caps.name(\"kind\").unwrap_or(\"\").to_ascii_lowercase();\n         let msg = caps.name(\"msg\").unwrap_or(\"\").trim().to_string();\n         let follow = caps.name(\"follow\").unwrap_or(\"\").len() > 0;\n "}, {"sha": "787e999eea9f1eac75f33a8d3ac85f5714ede8e8", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e5811ef9271644db0d0ddaae351976b0d4abdd2/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e5811ef9271644db0d0ddaae351976b0d4abdd2/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=1e5811ef9271644db0d0ddaae351976b0d4abdd2", "patch": "@@ -68,7 +68,7 @@ pub struct Lint {\n impl Lint {\n     /// Get the lint's name, with ASCII letters converted to lowercase.\n     pub fn name_lower(&self) -> String {\n-        self.name.to_ascii_lower()\n+        self.name.to_ascii_lowercase()\n     }\n }\n "}, {"sha": "af0bc65d3cf7f0af54934057e0461ff442b812fe", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e5811ef9271644db0d0ddaae351976b0d4abdd2/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e5811ef9271644db0d0ddaae351976b0d4abdd2/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=1e5811ef9271644db0d0ddaae351976b0d4abdd2", "patch": "@@ -235,7 +235,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n         };\n \n         // Transform the contents of the header into a hyphenated string\n-        let id = s.words().map(|s| s.to_ascii_lower())\n+        let id = s.words().map(|s| s.to_ascii_lowercase())\n             .collect::<Vec<String>>().connect(\"-\");\n \n         // This is a terrible hack working around how hoedown gives us rendered"}, {"sha": "e46747a30d773f7fb1a4934e0dfc6d8ffe0a1976", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/1e5811ef9271644db0d0ddaae351976b0d4abdd2/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e5811ef9271644db0d0ddaae351976b0d4abdd2/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=1e5811ef9271644db0d0ddaae351976b0d4abdd2", "patch": "@@ -409,12 +409,12 @@ pub trait OwnedAsciiExt {\n     /// Convert the string to ASCII upper case:\n     /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n     /// but non-ASCII letters are unchanged.\n-    fn into_ascii_upper(self) -> Self;\n+    fn into_ascii_uppercase(self) -> Self;\n \n     /// Convert the string to ASCII lower case:\n     /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n     /// but non-ASCII letters are unchanged.\n-    fn into_ascii_lower(self) -> Self;\n+    fn into_ascii_lowercase(self) -> Self;\n }\n \n /// Extension methods for ASCII-subset only operations on string slices\n@@ -423,31 +423,31 @@ pub trait AsciiExt<T> for Sized? {\n     /// Makes a copy of the string in ASCII upper case:\n     /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n     /// but non-ASCII letters are unchanged.\n-    fn to_ascii_upper(&self) -> T;\n+    fn to_ascii_uppercase(&self) -> T;\n \n     /// Makes a copy of the string in ASCII lower case:\n     /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n     /// but non-ASCII letters are unchanged.\n-    fn to_ascii_lower(&self) -> T;\n+    fn to_ascii_lowercase(&self) -> T;\n \n     /// Check that two strings are an ASCII case-insensitive match.\n-    /// Same as `to_ascii_lower(a) == to_ascii_lower(b)`,\n+    /// Same as `to_ascii_lowercase(a) == to_ascii_lower(b)`,\n     /// but without allocating and copying temporary strings.\n     fn eq_ignore_ascii_case(&self, other: &Self) -> bool;\n }\n \n #[experimental = \"would prefer to do this in a more general way\"]\n impl AsciiExt<String> for str {\n     #[inline]\n-    fn to_ascii_upper(&self) -> String {\n-        // Vec<u8>::to_ascii_upper() preserves the UTF-8 invariant.\n-        unsafe { String::from_utf8_unchecked(self.as_bytes().to_ascii_upper()) }\n+    fn to_ascii_uppercase(&self) -> String {\n+        // Vec<u8>::to_ascii_uppercase() preserves the UTF-8 invariant.\n+        unsafe { String::from_utf8_unchecked(self.as_bytes().to_ascii_uppercase()) }\n     }\n \n     #[inline]\n-    fn to_ascii_lower(&self) -> String {\n-        // Vec<u8>::to_ascii_lower() preserves the UTF-8 invariant.\n-        unsafe { String::from_utf8_unchecked(self.as_bytes().to_ascii_lower()) }\n+    fn to_ascii_lowercase(&self) -> String {\n+        // Vec<u8>::to_ascii_lowercase() preserves the UTF-8 invariant.\n+        unsafe { String::from_utf8_unchecked(self.as_bytes().to_ascii_lowercase()) }\n     }\n \n     #[inline]\n@@ -459,27 +459,27 @@ impl AsciiExt<String> for str {\n #[experimental = \"would prefer to do this in a more general way\"]\n impl OwnedAsciiExt for String {\n     #[inline]\n-    fn into_ascii_upper(self) -> String {\n-        // Vec<u8>::into_ascii_upper() preserves the UTF-8 invariant.\n-        unsafe { String::from_utf8_unchecked(self.into_bytes().into_ascii_upper()) }\n+    fn into_ascii_uppercase(self) -> String {\n+        // Vec<u8>::into_ascii_uppercase() preserves the UTF-8 invariant.\n+        unsafe { String::from_utf8_unchecked(self.into_bytes().into_ascii_uppercase()) }\n     }\n \n     #[inline]\n-    fn into_ascii_lower(self) -> String {\n-        // Vec<u8>::into_ascii_lower() preserves the UTF-8 invariant.\n-        unsafe { String::from_utf8_unchecked(self.into_bytes().into_ascii_lower()) }\n+    fn into_ascii_lowercase(self) -> String {\n+        // Vec<u8>::into_ascii_lowercase() preserves the UTF-8 invariant.\n+        unsafe { String::from_utf8_unchecked(self.into_bytes().into_ascii_lowercase()) }\n     }\n }\n \n #[experimental = \"would prefer to do this in a more general way\"]\n impl AsciiExt<Vec<u8>> for [u8] {\n     #[inline]\n-    fn to_ascii_upper(&self) -> Vec<u8> {\n+    fn to_ascii_uppercase(&self) -> Vec<u8> {\n         self.iter().map(|&byte| ASCII_UPPER_MAP[byte as uint]).collect()\n     }\n \n     #[inline]\n-    fn to_ascii_lower(&self) -> Vec<u8> {\n+    fn to_ascii_lowercase(&self) -> Vec<u8> {\n         self.iter().map(|&byte| ASCII_LOWER_MAP[byte as uint]).collect()\n     }\n \n@@ -497,15 +497,15 @@ impl AsciiExt<Vec<u8>> for [u8] {\n #[experimental = \"would prefer to do this in a more general way\"]\n impl OwnedAsciiExt for Vec<u8> {\n     #[inline]\n-    fn into_ascii_upper(mut self) -> Vec<u8> {\n+    fn into_ascii_uppercase(mut self) -> Vec<u8> {\n         for byte in self.iter_mut() {\n             *byte = ASCII_UPPER_MAP[*byte as uint];\n         }\n         self\n     }\n \n     #[inline]\n-    fn into_ascii_lower(mut self) -> Vec<u8> {\n+    fn into_ascii_lowercase(mut self) -> Vec<u8> {\n         for byte in self.iter_mut() {\n             *byte = ASCII_LOWER_MAP[*byte as uint];\n         }\n@@ -775,64 +775,64 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_to_ascii_upper() {\n-        assert_eq!(\"url()URL()uRl()\u00fcrl\".to_ascii_upper(), \"URL()URL()URL()\u00fcRL\");\n-        assert_eq!(\"h\u0131\u212a\u00df\".to_ascii_upper(), \"H\u0131\u212a\u00df\");\n+    fn test_to_ascii_uppercase() {\n+        assert_eq!(\"url()URL()uRl()\u00fcrl\".to_ascii_uppercase(), \"URL()URL()URL()\u00fcRL\");\n+        assert_eq!(\"h\u0131\u212a\u00df\".to_ascii_uppercase(), \"H\u0131\u212a\u00df\");\n \n         let mut i = 0;\n         while i <= 500 {\n             let upper = if 'a' as u32 <= i && i <= 'z' as u32 { i + 'A' as u32 - 'a' as u32 }\n                         else { i };\n-            assert_eq!((from_u32(i).unwrap()).to_string().to_ascii_upper(),\n+            assert_eq!((from_u32(i).unwrap()).to_string().to_ascii_uppercase(),\n                        (from_u32(upper).unwrap()).to_string());\n             i += 1;\n         }\n     }\n \n     #[test]\n-    fn test_to_ascii_lower() {\n-        assert_eq!(\"url()URL()uRl()\u00dcrl\".to_ascii_lower(), \"url()url()url()\u00dcrl\");\n+    fn test_to_ascii_lowercase() {\n+        assert_eq!(\"url()URL()uRl()\u00dcrl\".to_ascii_lowercase(), \"url()url()url()\u00dcrl\");\n         // Dotted capital I, Kelvin sign, Sharp S.\n-        assert_eq!(\"H\u0130\u212a\u00df\".to_ascii_lower(), \"h\u0130\u212a\u00df\");\n+        assert_eq!(\"H\u0130\u212a\u00df\".to_ascii_lowercase(), \"h\u0130\u212a\u00df\");\n \n         let mut i = 0;\n         while i <= 500 {\n             let lower = if 'A' as u32 <= i && i <= 'Z' as u32 { i + 'a' as u32 - 'A' as u32 }\n                         else { i };\n-            assert_eq!((from_u32(i).unwrap()).to_string().to_ascii_lower(),\n+            assert_eq!((from_u32(i).unwrap()).to_string().to_ascii_lowercase(),\n                        (from_u32(lower).unwrap()).to_string());\n             i += 1;\n         }\n     }\n \n     #[test]\n-    fn test_into_ascii_upper() {\n-        assert_eq!((\"url()URL()uRl()\u00fcrl\".to_string()).into_ascii_upper(),\n+    fn test_into_ascii_uppercase() {\n+        assert_eq!((\"url()URL()uRl()\u00fcrl\".to_string()).into_ascii_uppercase(),\n                    \"URL()URL()URL()\u00fcRL\".to_string());\n-        assert_eq!((\"h\u0131\u212a\u00df\".to_string()).into_ascii_upper(), \"H\u0131\u212a\u00df\");\n+        assert_eq!((\"h\u0131\u212a\u00df\".to_string()).into_ascii_uppercase(), \"H\u0131\u212a\u00df\");\n \n         let mut i = 0;\n         while i <= 500 {\n             let upper = if 'a' as u32 <= i && i <= 'z' as u32 { i + 'A' as u32 - 'a' as u32 }\n                         else { i };\n-            assert_eq!((from_u32(i).unwrap()).to_string().into_ascii_upper(),\n+            assert_eq!((from_u32(i).unwrap()).to_string().into_ascii_uppercase(),\n                        (from_u32(upper).unwrap()).to_string());\n             i += 1;\n         }\n     }\n \n     #[test]\n-    fn test_into_ascii_lower() {\n-        assert_eq!((\"url()URL()uRl()\u00dcrl\".to_string()).into_ascii_lower(),\n+    fn test_into_ascii_lowercase() {\n+        assert_eq!((\"url()URL()uRl()\u00dcrl\".to_string()).into_ascii_lowercase(),\n                    \"url()url()url()\u00dcrl\");\n         // Dotted capital I, Kelvin sign, Sharp S.\n-        assert_eq!((\"H\u0130\u212a\u00df\".to_string()).into_ascii_lower(), \"h\u0130\u212a\u00df\");\n+        assert_eq!((\"H\u0130\u212a\u00df\".to_string()).into_ascii_lowercase(), \"h\u0130\u212a\u00df\");\n \n         let mut i = 0;\n         while i <= 500 {\n             let lower = if 'A' as u32 <= i && i <= 'Z' as u32 { i + 'a' as u32 - 'A' as u32 }\n                         else { i };\n-            assert_eq!((from_u32(i).unwrap()).to_string().into_ascii_lower(),\n+            assert_eq!((from_u32(i).unwrap()).to_string().into_ascii_lowercase(),\n                        (from_u32(lower).unwrap()).to_string());\n             i += 1;\n         }"}, {"sha": "26ee65fa565e2bb3588ed261fcec0e35177e8026", "filename": "src/test/run-pass/issue-10683.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e5811ef9271644db0d0ddaae351976b0d4abdd2/src%2Ftest%2Frun-pass%2Fissue-10683.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e5811ef9271644db0d0ddaae351976b0d4abdd2/src%2Ftest%2Frun-pass%2Fissue-10683.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10683.rs?ref=1e5811ef9271644db0d0ddaae351976b0d4abdd2", "patch": "@@ -13,7 +13,7 @@ use std::ascii::AsciiExt;\n static NAME: &'static str = \"hello world\";\n \n fn main() {\n-    match NAME.to_ascii_lower().as_slice() {\n+    match NAME.to_ascii_lowercase().as_slice() {\n         \"foo\" => {}\n         _ => {}\n     }"}]}