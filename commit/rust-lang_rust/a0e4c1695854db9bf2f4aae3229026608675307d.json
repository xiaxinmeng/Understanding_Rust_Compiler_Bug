{"sha": "a0e4c1695854db9bf2f4aae3229026608675307d", "node_id": "C_kwDOAAsO6NoAKGEwZTRjMTY5NTg1NGRiOWJmMmY0YWFlMzIyOTAyNjYwODY3NTMwN2Q", "commit": {"author": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-08-04T11:26:40Z"}, "committer": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-08-04T11:26:40Z"}, "message": "Update after code review", "tree": {"sha": "a0bb2a56d633b29f529fd76a33d94e1562502397", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0bb2a56d633b29f529fd76a33d94e1562502397"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0e4c1695854db9bf2f4aae3229026608675307d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmLrrPAACgkQcTRy8vRW\nJ94EZw/9Fw+/OE+wXB0Izbgjs4U605Pew1UGOHhXn7Lm+Nqv2CoAXjvO8GzJRlTL\nq1TqhFNeGCRH2J0WCmVzKkAmi1cQhkBPrJsK2VusOoRHgHkP2VC7UVkRrGE+KFug\n1uZ2wy0AJFYCcVbSZCNo7g2BzNLUu0tdj+3jHNaWGWUHNIutAYSpu/9mwMvs4cge\nZJ8Py8LNSwgZIGTwTLFvQev0c2IdZFwwmnKrT6zFxKIfJxdOSBrdnIVdHl7hbT1m\nr1YFGvuV3qIo2A+spXWRClhNqts6yEVUDFSZ0cf2D7DVEziDnu0IiHLSkgM5lYVj\nPcqsVqypw0sbfMifndEpRixs04l+6BKEet5tQGhK67/l1AqmyhBwQLDZ9no/kJQ5\n320CnDiV9oT69UBc2ddJjncm3X/+DzIL4TXgfNlO1IteKBnP1SztShOcWHzVovbj\nWGKcybd8RCLJ4MbAfqSNzVwnX1WS6lyIfqdY2igOpkaENlOCzHsxRnzbLqisg3pH\nusGX2WS49BiP4zwnQ7ZNlb2Won1TWsq/wGqAgV25OH/j/usXgAeIP/MQHOhqdHw2\nSZgDQCjMLdSFRxehRlf4zdrnvolWunYM0E5qFCWCaAUGvLDU6ZLVksgDxyMMBqh4\nFjnPjwpsCGegD1xCQAPW8jyLwqFzspT6Bgmr7a2eN0laSmZps7I=\n=3ZLY\n-----END PGP SIGNATURE-----", "payload": "tree a0bb2a56d633b29f529fd76a33d94e1562502397\nparent c985648593122a6fc8ec146a9ca755b73d0dc788\nauthor Chris Denton <christophersdenton@gmail.com> 1659612400 +0100\ncommitter Chris Denton <christophersdenton@gmail.com> 1659612400 +0100\n\nUpdate after code review\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0e4c1695854db9bf2f4aae3229026608675307d", "html_url": "https://github.com/rust-lang/rust/commit/a0e4c1695854db9bf2f4aae3229026608675307d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0e4c1695854db9bf2f4aae3229026608675307d/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c985648593122a6fc8ec146a9ca755b73d0dc788", "url": "https://api.github.com/repos/rust-lang/rust/commits/c985648593122a6fc8ec146a9ca755b73d0dc788", "html_url": "https://github.com/rust-lang/rust/commit/c985648593122a6fc8ec146a9ca755b73d0dc788"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "c5a30f8bac86d1687919e0e11a1ea28d1d10b1cd", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0e4c1695854db9bf2f4aae3229026608675307d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e4c1695854db9bf2f4aae3229026608675307d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=a0e4c1695854db9bf2f4aae3229026608675307d", "patch": "@@ -1254,10 +1254,16 @@ compat_fn_with_fallback! {\n     pub static SYNCH_API: &CStr = ansi_str!(\"api-ms-win-core-synch-l1-2-0\");\n     #[allow(unused)]\n     fn WakeByAddressSingle(Address: LPVOID) -> () {\n+        // This fallback is currently tightly coupled to its use in Parker::unpark.\n+        //\n+        // FIXME: If `WakeByAddressSingle` needs to be used anywhere other than\n+        // Parker::unpark then this fallback will be wrong and will need to be decoupled.\n         crate::sys::windows::thread_parker::unpark_keyed_event(Address)\n     }\n }\n pub use crate::sys::compat::WaitOnAddress;\n+// Change exported name of `WakeByAddressSingle` to make the strange fallback\n+// behaviour clear.\n pub use WakeByAddressSingle::call as wake_by_address_single_or_unpark_keyed_event;\n \n compat_fn_with_fallback! {"}, {"sha": "473544c4d4f7b99c231209dba5a1765cdacc3fd6", "filename": "library/std/src/sys/windows/compat.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a0e4c1695854db9bf2f4aae3229026608675307d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e4c1695854db9bf2f4aae3229026608675307d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs?ref=a0e4c1695854db9bf2f4aae3229026608675307d", "patch": "@@ -7,14 +7,14 @@\n //! `GetModuleHandle` and `GetProcAddress` to look up DLL entry points at\n //! runtime.\n //!\n-//! This is implemented simply by storing a function pointer in an atomic\n-//! and using relaxed ordering to load it. This means that calling it will be no\n-//! more expensive then calling any other dynamically imported function.\n+//! This is implemented simply by storing a function pointer in an atomic.\n+//! Loading and calling this function will have little or no overhead\n+//! compared with calling any other dynamically imported function.\n //!\n //! The stored function pointer starts out as an importer function which will\n //! swap itself with the real function when it's called for the first time. If\n //! the real function can't be imported then a fallback function is used in its\n-//! place. While this is zero cost for the happy path (where the function is\n+//! place. While this is low cost for the happy path (where the function is\n //! already loaded) it does mean there's some overhead the first time the\n //! function is called. In the worst case, multiple threads may all end up\n //! importing the same function unnecessarily.\n@@ -175,7 +175,7 @@ pub mod WaitOnAddress {\n \n     #[inline(always)]\n     pub fn option() -> Option<F> {\n-        let f = WAIT_ON_ADDRESS.load(Ordering::Relaxed);\n+        let f = WAIT_ON_ADDRESS.load(Ordering::Acquire);\n         if !f.is_null() { Some(unsafe { mem::transmute(f) }) } else { try_load() }\n     }\n \n@@ -185,7 +185,7 @@ pub mod WaitOnAddress {\n             // load the module\n             let mut wait_on_address = None;\n             if let Some(func) = try_load_inner() {\n-                WAIT_ON_ADDRESS.store(func.as_ptr(), Ordering::Relaxed);\n+                WAIT_ON_ADDRESS.store(func.as_ptr(), Ordering::Release);\n                 wait_on_address = Some(unsafe { mem::transmute(func) });\n             }\n             // Don't try to load the module again even if loading failed."}]}