{"sha": "70390a969dbead05e1f0052c786435c6cd55e811", "node_id": "C_kwDOAAsO6NoAKDcwMzkwYTk2OWRiZWFkMDVlMWYwMDUyYzc4NjQzNWM2Y2Q1NWU4MTE", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-18T18:32:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-18T18:32:45Z"}, "message": "Merge pull request #1221 from bjorn3/run_more_rustc_tests\n\nRun more rustc tests", "tree": {"sha": "bcac364712eaf68b2a4a193d58ba63b80250a429", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcac364712eaf68b2a4a193d58ba63b80250a429"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70390a969dbead05e1f0052c786435c6cd55e811", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiNNBNCRBK7hj4Ov3rIwAACbAIABelbM1sY/2QSgrhxIfYf1hM\nlrq/LXXfpbfz0eSZBsvnXhKcvD74XPGilZ0HHVQs1phjBXHLQHL74HmotJmLE2ub\nB1Wz02BPqYxeD5zAwTM+ojV8UO4ea/kOK5Jh2cAhv0S9b3xiJlmpjFjuXFlyf9L5\nyprJnp+vOzeIpzlD6fHmaYM4B6jWu7HvdO18rCioiVUun0Ib0AbLN3Jz36ejI2Gq\nr4QZFLShsFmNGLHd+VOapuYRCqvhY8+wpbsyYCz+Cd/QkTF5X6clA6V7ghLUV/iS\nWFt2eeK4GpcKDJMeZokIqhAaNm5l+LOdOTQCMlr/d9x28VadszJUS5BcRMCSDVE=\n=n2EL\n-----END PGP SIGNATURE-----\n", "payload": "tree bcac364712eaf68b2a4a193d58ba63b80250a429\nparent 9a8da8c64a12bc564a938f3d2e0bd92f6f3f4b00\nparent afd59464a927d97b80435b8bc45603bf6f76d0b3\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1647628365 +0100\ncommitter GitHub <noreply@github.com> 1647628365 +0100\n\nMerge pull request #1221 from bjorn3/run_more_rustc_tests\n\nRun more rustc tests"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70390a969dbead05e1f0052c786435c6cd55e811", "html_url": "https://github.com/rust-lang/rust/commit/70390a969dbead05e1f0052c786435c6cd55e811", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70390a969dbead05e1f0052c786435c6cd55e811/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a8da8c64a12bc564a938f3d2e0bd92f6f3f4b00", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a8da8c64a12bc564a938f3d2e0bd92f6f3f4b00", "html_url": "https://github.com/rust-lang/rust/commit/9a8da8c64a12bc564a938f3d2e0bd92f6f3f4b00"}, {"sha": "afd59464a927d97b80435b8bc45603bf6f76d0b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/afd59464a927d97b80435b8bc45603bf6f76d0b3", "html_url": "https://github.com/rust-lang/rust/commit/afd59464a927d97b80435b8bc45603bf6f76d0b3"}], "stats": {"total": 129, "additions": 82, "deletions": 47}, "files": [{"sha": "ddcf05ec25227f69d0462a9ed446555b4ad025c3", "filename": "scripts/setup_rust_fork.sh", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/70390a969dbead05e1f0052c786435c6cd55e811/scripts%2Fsetup_rust_fork.sh", "raw_url": "https://github.com/rust-lang/rust/raw/70390a969dbead05e1f0052c786435c6cd55e811/scripts%2Fsetup_rust_fork.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fsetup_rust_fork.sh?ref=70390a969dbead05e1f0052c786435c6cd55e811", "patch": "@@ -53,9 +53,28 @@ index 887d27fd6dca4..2c2239f2b83d1 100644\n \n      let rustc_has_profiler_support = env::var_os(\"RUSTC_PROFILER_SUPPORT\").is_some();\n \n+diff --git a/src/tools/compiletest/src/runtest.rs b/src/tools/compiletest/src/runtest.rs\n+index 8431aa7b818..a3ff7e68ce5 100644\n+--- a/src/tools/compiletest/src/runtest.rs\n++++ b/src/tools/compiletest/src/runtest.rs\n+@@ -3489,11 +3489,7 @@ fn normalize_output(&self, output: &str, custom_rules: &[(String, String)]) -> S\n+             .join(\"library\");\n+         normalize_path(&src_dir, \"$(echo '$SRC_DIR')\");\n+\n+-        if let Some(virtual_rust_source_base_dir) =\n+-            option_env!(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\").map(PathBuf::from)\n+-        {\n+-            normalize_path(&virtual_rust_source_base_dir.join(\"library\"), \"$(echo '$SRC_DIR')\");\n+-        }\n++        normalize_path(&Path::new(\"$(cd ../build_sysroot/sysroot_src/library; pwd)\"), \"$(echo '$SRC_DIR')\");\n+\n+         // Paths into the build directory\n+         let test_build_dir = &self.config.build_base;\n EOF\n \n cat > config.toml <<EOF\n+changelog-seen = 2\n+\n [llvm]\n ninja = false\n "}, {"sha": "b4ce2abb18c946d80af0e47c764cea2c0bd96cd3", "filename": "scripts/test_rustc_tests.sh", "status": "modified", "additions": 56, "deletions": 45, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/70390a969dbead05e1f0052c786435c6cd55e811/scripts%2Ftest_rustc_tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/70390a969dbead05e1f0052c786435c6cd55e811/scripts%2Ftest_rustc_tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftest_rustc_tests.sh?ref=70390a969dbead05e1f0052c786435c6cd55e811", "patch": "@@ -15,13 +15,16 @@ for test in $(rg --files-with-matches \"asm!|catch_unwind|should_panic|lto|// nee\n   rm $test\n done\n \n-for test in $(rg -i --files-with-matches \"//(\\[\\w+\\])?~|// error-pattern:|// build-fail|// run-fail|-Cllvm-args\" src/test/ui); do\n+for test in $(rg -i --files-with-matches \"//(\\[\\w+\\])?~[^\\|]*\\s*ERR|// error-pattern:|// build-fail|// run-fail|-Cllvm-args\" src/test/ui); do\n   rm $test\n done\n \n git checkout -- src/test/ui/issues/auxiliary/issue-3136-a.rs # contains //~ERROR, but shouldn't be removed\n \n-# these all depend on unwinding support\n+# missing features\n+# ================\n+\n+# requires stack unwinding\n rm src/test/ui/backtrace.rs\n rm src/test/ui/array-slice-vec/box-of-array-of-drop-*.rs\n rm src/test/ui/array-slice-vec/slice-panic-*.rs\n@@ -42,72 +45,80 @@ rm src/test/ui/runtime/rt-explody-panic-payloads.rs\n rm src/test/incremental/change_crate_dep_kind.rs\n rm src/test/ui/threads-sendsync/unwind-resource.rs\n \n-rm src/test/ui/issues/issue-28950.rs # depends on stack size optimizations\n-rm src/test/ui/codegen/init-large-type.rs # same\n+# requires compiling with -Cpanic=unwind\n+rm src/test/ui/cfg/cfg-panic.rs\n+rm src/test/ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs # \"Cannot run dynamic test fn out-of-process\"\n+rm src/test/ui/async-await/async-fn-size-moved-locals.rs # -Cpanic=abort shrinks some generator by one byte\n+rm src/test/ui/async-await/async-fn-size-uninit-locals.rs # same\n+rm src/test/ui/generator/size-moved-locals.rs # same\n+\n+# vendor intrinsics\n rm src/test/ui/sse2.rs # cpuid not supported, so sse2 not detected\n+rm src/test/ui/intrinsics/const-eval-select-x86_64.rs # requires x86_64 vendor intrinsics\n+\n+# inline asm\n+rm src/test/incremental/hashes/inline_asm.rs # inline asm\n+rm src/test/incremental/issue-72386.rs # same\n+\n+# exotic linkages\n rm src/test/ui/issues/issue-33992.rs # unsupported linkages\n-rm src/test/ui/issues/issue-51947.rs # same\n rm src/test/incremental/hashes/function_interfaces.rs # same\n rm src/test/incremental/hashes/statics.rs # same\n+\n+# LTO\n+rm src/test/incremental/lto.rs # requires lt\n+\n+# variadic arguments\n+rm src/test/ui/abi/mir/mir_codegen_calls_variadic.rs # requires float varargs\n+rm src/test/ui/abi/variadic-ffi.rs # requires callee side vararg support\n+\n+# unsized locals\n+rm -r src/test/run-pass-valgrind/unsized-locals\n+\n+# misc unimplemented things\n+rm src/test/ui/intrinsics/intrinsic-nearby.rs # unimplemented nearbyintf32 and nearbyintf64 intrinsics\n+rm src/test/ui/target-feature/missing-plusminus.rs # error not implemented\n+rm src/test/ui/fn/dyn-fn-alignment.rs # wants a 256 byte alignment\n+rm -r src/test/run-make/emit-named-files # requires full --emit support\n+\n+# optimization tests\n+# ==================\n+rm src/test/ui/issues/issue-28950.rs # depends on stack size optimizations\n+rm src/test/ui/codegen/init-large-type.rs # same\n+rm -r src/test/run-make/fmt-write-bloat/ # tests an optimization\n+\n+# backend specific tests\n+# ======================\n+rm src/test/incremental/thinlto/cgu_invalidated_when_import_{added,removed}.rs # requires LLVM\n+rm src/test/ui/abi/stack-protector.rs # requires stack protector support\n+\n+# giving different but possibly correct results\n+# =============================================\n rm src/test/ui/numbers-arithmetic/saturating-float-casts.rs # intrinsic gives different but valid result\n rm src/test/ui/mir/mir_misc_casts.rs # depends on deduplication of constants\n rm src/test/ui/mir/mir_raw_fat_ptr.rs # same\n rm src/test/ui/consts/issue-33537.rs # same\n-rm src/test/ui/async-await/async-fn-size-moved-locals.rs # -Cpanic=abort shrinks some generator by one byte\n-rm src/test/ui/async-await/async-fn-size-uninit-locals.rs # same\n-rm src/test/ui/generator/size-moved-locals.rs # same\n-rm src/test/ui/fn/dyn-fn-alignment.rs # wants a 256 byte alignment\n-rm src/test/ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs # \"Cannot run dynamic test fn out-of-process\"\n-rm src/test/ui/intrinsics/intrinsic-nearby.rs # unimplemented nearbyintf32 and nearbyintf64 intrinsics\n-\n-rm src/test/incremental/hashes/inline_asm.rs # inline asm\n-rm src/test/incremental/issue-72386.rs # same\n-rm src/test/incremental/lto.rs # requires lto\n-rm src/test/incremental/dirty_clean.rs # TODO\n \n rm -r src/test/run-make/emit-shared-files # requires the rustdoc executable in build/bin/\n rm -r src/test/run-make/unstable-flag-required # same\n rm -r src/test/run-make/rustdoc-* # same\n-rm -r src/test/run-make/emit-named-files # requires full --emit support\n-\n-rm -r src/test/run-pass-valgrind/unsized-locals\n-\n-rm src/test/ui/json-bom-plus-crlf-multifile.rs # differing warning\n-rm src/test/ui/json-bom-plus-crlf.rs # same\n-rm src/test/ui/intrinsics/const-eval-select-x86_64.rs # same\n-rm src/test/ui/match/issue-82392.rs # differing error\n-rm src/test/ui/consts/min_const_fn/address_of_const.rs # same\n-rm src/test/ui/consts/issue-miri-1910.rs # same\n-rm src/test/ui/generic-associated-types/bugs/issue-80626.rs # same\n-rm src/test/ui/generic-associated-types/bugs/issue-89008.rs # same\n-rm src/test/ui/chalkify/bugs/async.rs # same\n-rm src/test/ui/type-alias-impl-trait/cross_crate_ice*.rs # requires removed aux dep\n \n+# genuine bugs\n+# ============\n rm src/test/ui/allocator/no_std-alloc-error-handler-default.rs # missing rust_oom definition\n-rm src/test/ui/cfg/cfg-panic.rs\n-rm -r src/test/ui/hygiene/\n-\n-rm src/test/ui/mir/ssa-analysis-regression-50041.rs # uses old definition of Box\n-\n-rm src/test/ui/target-feature/missing-plusminus.rs # error not implemented\n \n rm -r src/test/ui/polymorphization/ # polymorphization not yet supported\n rm src/test/codegen-units/polymorphization/unused_type_parameters.rs # same\n \n-rm -r src/test/run-make/fmt-write-bloat/ # tests an optimization\n-rm src/test/ui/abi/mir/mir_codegen_calls_variadic.rs # requires float varargs\n-rm src/test/ui/abi/variadic-ffi.rs # requires callee side vararg support\n-\n-rm src/test/ui/command/command-current-dir.rs # can't find libstd.so\n-\n-rm src/test/ui/abi/stack-protector.rs # requires stack protector support\n-\n rm src/test/incremental/issue-80691-bad-eval-cache.rs # wrong exit code\n rm src/test/incremental/spike-neg1.rs # errors out for some reason\n rm src/test/incremental/spike-neg2.rs # same\n rm src/test/ui/issues/issue-74564-if-expr-stack-overflow.rs # gives a stackoverflow before the backend runs\n+rm src/test/ui/mir/ssa-analysis-regression-50041.rs # produces ICE\n \n-rm src/test/incremental/thinlto/cgu_invalidated_when_import_{added,removed}.rs # requires LLVM\n+# bugs in the test suite\n+# ======================\n+rm src/test/ui/unsafe/union.rs # has UB caught by cg_clif. see rust-lang/rust#95075\n \n echo \"[TEST] rustc test suite\"\n RUST_TEST_NOCAPTURE=1 COMPILETEST_FORCE_STAGE0=1 ./x.py test --stage 0 src/test/{codegen-units,run-make,run-pass-valgrind,ui,incremental}"}, {"sha": "fe5d80b2a923930d5460fb5131184b07e41dbebc", "filename": "src/base.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70390a969dbead05e1f0052c786435c6cd55e811/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70390a969dbead05e1f0052c786435c6cd55e811/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=70390a969dbead05e1f0052c786435c6cd55e811", "patch": "@@ -4,6 +4,7 @@ use rustc_ast::InlineAsmOptions;\n use rustc_index::vec::IndexVec;\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::layout::FnAbiOf;\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n \n use indexmap::IndexSet;\n \n@@ -258,7 +259,9 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n \n         if fx.clif_comments.enabled() {\n             let mut terminator_head = \"\\n\".to_string();\n-            bb_data.terminator().kind.fmt_head(&mut terminator_head).unwrap();\n+            with_no_trimmed_paths!({\n+                bb_data.terminator().kind.fmt_head(&mut terminator_head).unwrap();\n+            });\n             let inst = fx.bcx.func.layout.last_inst(block).unwrap();\n             fx.add_comment(inst, terminator_head);\n         }"}, {"sha": "5984ec8412ad71acfdf304f10faf98183d929762", "filename": "src/bin/cg_clif.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70390a969dbead05e1f0052c786435c6cd55e811/src%2Fbin%2Fcg_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70390a969dbead05e1f0052c786435c6cd55e811/src%2Fbin%2Fcg_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcg_clif.rs?ref=70390a969dbead05e1f0052c786435c6cd55e811", "patch": "@@ -13,7 +13,7 @@ use std::panic;\n \n use rustc_data_structures::profiling::{get_resident_set_size, print_time_passes_entry};\n use rustc_interface::interface;\n-use rustc_session::config::ErrorOutputType;\n+use rustc_session::config::{ErrorOutputType, TrimmedDefPaths};\n use rustc_session::early_error;\n use rustc_target::spec::PanicStrategy;\n \n@@ -55,6 +55,8 @@ impl rustc_driver::Callbacks for CraneliftPassesCallbacks {\n         config.opts.maybe_sysroot = Some(config.opts.maybe_sysroot.clone().unwrap_or_else(|| {\n             std::env::current_exe().unwrap().parent().unwrap().parent().unwrap().to_owned()\n         }));\n+\n+        config.opts.trimmed_def_paths = TrimmedDefPaths::GoodPath;\n     }\n }\n "}]}