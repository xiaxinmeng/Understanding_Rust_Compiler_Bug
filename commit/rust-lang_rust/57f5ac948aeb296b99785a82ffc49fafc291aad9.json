{"sha": "57f5ac948aeb296b99785a82ffc49fafc291aad9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZjVhYzk0OGFlYjI5NmI5OTc4NWE4MmZmYzQ5ZmFmYzI5MWFhZDk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-01T23:34:15Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-02T01:38:24Z"}, "message": "Test fixes and rebase conflicts, round 2", "tree": {"sha": "087bef87d54db5cf3593617998e822168053c3ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/087bef87d54db5cf3593617998e822168053c3ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57f5ac948aeb296b99785a82ffc49fafc291aad9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57f5ac948aeb296b99785a82ffc49fafc291aad9", "html_url": "https://github.com/rust-lang/rust/commit/57f5ac948aeb296b99785a82ffc49fafc291aad9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57f5ac948aeb296b99785a82ffc49fafc291aad9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d49b67e255db86a5df952b33f4140150fc12bf4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d49b67e255db86a5df952b33f4140150fc12bf4d", "html_url": "https://github.com/rust-lang/rust/commit/d49b67e255db86a5df952b33f4140150fc12bf4d"}], "stats": {"total": 93, "additions": 29, "deletions": 64}, "files": [{"sha": "28e0bcf13dd0911132938784bd5096d264a55a71", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57f5ac948aeb296b99785a82ffc49fafc291aad9/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57f5ac948aeb296b99785a82ffc49fafc291aad9/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=57f5ac948aeb296b99785a82ffc49fafc291aad9", "patch": "@@ -1347,7 +1347,7 @@ macro_rules! uint_impl {\n \n         /// Returns the largest value that can be represented by this integer type.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        pub fn max_value() -> $T { -1 }\n+        pub fn max_value() -> $T { !0 }\n \n         /// Convert a string slice in a given base to an integer.\n         ///"}, {"sha": "a3a7edac230a0d5edb408c8807240ed155063a94", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57f5ac948aeb296b99785a82ffc49fafc291aad9/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57f5ac948aeb296b99785a82ffc49fafc291aad9/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=57f5ac948aeb296b99785a82ffc49fafc291aad9", "patch": "@@ -2571,7 +2571,7 @@ pub mod consts {\n             pub const ERROR_IO_PENDING: c_int = 997;\n             pub const ERROR_FILE_INVALID : c_int = 1006;\n             pub const ERROR_NOT_FOUND: c_int = 1168;\n-            pub const INVALID_HANDLE_VALUE: HANDLE = -1 as HANDLE;\n+            pub const INVALID_HANDLE_VALUE: HANDLE = !0 as HANDLE;\n \n             pub const DELETE : DWORD = 0x00010000;\n             pub const READ_CONTROL : DWORD = 0x00020000;\n@@ -2609,12 +2609,12 @@ pub mod consts {\n             pub const WAIT_ABANDONED : DWORD = 0x00000080;\n             pub const WAIT_OBJECT_0 : DWORD = 0x00000000;\n             pub const WAIT_TIMEOUT : DWORD = 0x00000102;\n-            pub const WAIT_FAILED : DWORD = -1;\n+            pub const WAIT_FAILED : DWORD = !0;\n \n             pub const DUPLICATE_CLOSE_SOURCE : DWORD = 0x00000001;\n             pub const DUPLICATE_SAME_ACCESS : DWORD = 0x00000002;\n \n-            pub const INFINITE : DWORD = -1;\n+            pub const INFINITE : DWORD = !0;\n             pub const STILL_ACTIVE : DWORD = 259;\n \n             pub const MEM_COMMIT : DWORD = 0x00001000;"}, {"sha": "c80182ec07d3223df0b61929e50acf163a9b06a6", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/57f5ac948aeb296b99785a82ffc49fafc291aad9/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57f5ac948aeb296b99785a82ffc49fafc291aad9/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=57f5ac948aeb296b99785a82ffc49fafc291aad9", "patch": "@@ -342,7 +342,7 @@ mod spsc_queue;\n /// The receiving-half of Rust's channel type. This half can only be owned by\n /// one task\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct Receiver<T:Send> {\n+pub struct Receiver<T> {\n     inner: UnsafeCell<Flavor<T>>,\n }\n \n@@ -354,14 +354,14 @@ unsafe impl<T: Send> Send for Receiver<T> { }\n /// whenever `next` is called, waiting for a new message, and `None` will be\n /// returned when the corresponding channel has hung up.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct Iter<'a, T:Send+'a> {\n+pub struct Iter<'a, T: 'a> {\n     rx: &'a Receiver<T>\n }\n \n /// The sending-half of Rust's asynchronous channel type. This half can only be\n /// owned by one task, but it can be cloned to send to other tasks.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct Sender<T:Send> {\n+pub struct Sender<T> {\n     inner: UnsafeCell<Flavor<T>>,\n }\n \n@@ -372,7 +372,7 @@ unsafe impl<T: Send> Send for Sender<T> { }\n /// The sending-half of Rust's synchronous channel type. This half can only be\n /// owned by one task, but it can be cloned to send to other tasks.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct SyncSender<T: Send> {\n+pub struct SyncSender<T> {\n     inner: Arc<UnsafeCell<sync::Packet<T>>>,\n }\n \n@@ -433,15 +433,15 @@ pub enum TrySendError<T> {\n     Disconnected(T),\n }\n \n-enum Flavor<T:Send> {\n+enum Flavor<T> {\n     Oneshot(Arc<UnsafeCell<oneshot::Packet<T>>>),\n     Stream(Arc<UnsafeCell<stream::Packet<T>>>),\n     Shared(Arc<UnsafeCell<shared::Packet<T>>>),\n     Sync(Arc<UnsafeCell<sync::Packet<T>>>),\n }\n \n #[doc(hidden)]\n-trait UnsafeFlavor<T:Send> {\n+trait UnsafeFlavor<T> {\n     fn inner_unsafe<'a>(&'a self) -> &'a UnsafeCell<Flavor<T>>;\n     unsafe fn inner_mut<'a>(&'a self) -> &'a mut Flavor<T> {\n         &mut *self.inner_unsafe().get()\n@@ -450,12 +450,12 @@ trait UnsafeFlavor<T:Send> {\n         &*self.inner_unsafe().get()\n     }\n }\n-impl<T:Send> UnsafeFlavor<T> for Sender<T> {\n+impl<T> UnsafeFlavor<T> for Sender<T> {\n     fn inner_unsafe<'a>(&'a self) -> &'a UnsafeCell<Flavor<T>> {\n         &self.inner\n     }\n }\n-impl<T:Send> UnsafeFlavor<T> for Receiver<T> {\n+impl<T> UnsafeFlavor<T> for Receiver<T> {\n     fn inner_unsafe<'a>(&'a self) -> &'a UnsafeCell<Flavor<T>> {\n         &self.inner\n     }"}, {"sha": "9b6c8f4dd9775bbabc18c00a3c68a85815fa8235", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57f5ac948aeb296b99785a82ffc49fafc291aad9/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57f5ac948aeb296b99785a82ffc49fafc291aad9/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=57f5ac948aeb296b99785a82ffc49fafc291aad9", "patch": "@@ -72,12 +72,12 @@ struct Node<T> {\n /// The multi-producer single-consumer structure. This is not cloneable, but it\n /// may be safely shared so long as it is guaranteed that there is only one\n /// popper at a time (many pushers are allowed).\n-pub struct Queue<T: Send> {\n+pub struct Queue<T> {\n     head: AtomicPtr<Node<T>>,\n     tail: UnsafeCell<*mut Node<T>>,\n }\n \n-unsafe impl<T:Send> Send for Queue<T> { }\n+unsafe impl<T: Send> Send for Queue<T> { }\n unsafe impl<T: Send> Sync for Queue<T> { }\n \n impl<T> Node<T> {"}, {"sha": "c6e8d87a22e71412c234f05de9694b2283779f73", "filename": "src/libstd/sync/mpsc/oneshot.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57f5ac948aeb296b99785a82ffc49fafc291aad9/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57f5ac948aeb296b99785a82ffc49fafc291aad9/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs?ref=57f5ac948aeb296b99785a82ffc49fafc291aad9", "patch": "@@ -54,7 +54,7 @@ const DISCONNECTED: usize = 2;   // channel is disconnected OR upgraded\n // moves *from* a pointer, ownership of the token is transferred to\n // whoever changed the state.\n \n-pub struct Packet<T:Send> {\n+pub struct Packet<T> {\n     // Internal state of the chan/port pair (stores the blocked task as well)\n     state: AtomicUsize,\n     // One-shot data slot location\n@@ -64,7 +64,7 @@ pub struct Packet<T:Send> {\n     upgrade: MyUpgrade<T>,\n }\n \n-pub enum Failure<T:Send> {\n+pub enum Failure<T> {\n     Empty,\n     Disconnected,\n     Upgraded(Receiver<T>),\n@@ -76,13 +76,13 @@ pub enum UpgradeResult {\n     UpWoke(SignalToken),\n }\n \n-pub enum SelectionResult<T:Send> {\n+pub enum SelectionResult<T> {\n     SelCanceled,\n     SelUpgraded(SignalToken, Receiver<T>),\n     SelSuccess,\n }\n \n-enum MyUpgrade<T:Send> {\n+enum MyUpgrade<T> {\n     NothingSent,\n     SendUsed,\n     GoUp(Receiver<T>),"}, {"sha": "5c1610bdc317566fe49ae6fd0533f21756b2309e", "filename": "src/libstd/sync/mpsc/shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57f5ac948aeb296b99785a82ffc49fafc291aad9/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57f5ac948aeb296b99785a82ffc49fafc291aad9/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs?ref=57f5ac948aeb296b99785a82ffc49fafc291aad9", "patch": "@@ -40,7 +40,7 @@ const MAX_STEALS: isize = 5;\n #[cfg(not(test))]\n const MAX_STEALS: isize = 1 << 20;\n \n-pub struct Packet<T: Send> {\n+pub struct Packet<T> {\n     queue: mpsc::Queue<T>,\n     cnt: AtomicIsize, // How many items are on this channel\n     steals: isize, // How many times has a port received without blocking?"}, {"sha": "c75ac13080866ce2a0f3376a91cf830af7691ac0", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57f5ac948aeb296b99785a82ffc49fafc291aad9/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57f5ac948aeb296b99785a82ffc49fafc291aad9/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=57f5ac948aeb296b99785a82ffc49fafc291aad9", "patch": "@@ -57,7 +57,7 @@ struct Node<T> {\n /// but it can be safely shared in an Arc if it is guaranteed that there\n /// is only one popper and one pusher touching the queue at any one point in\n /// time.\n-pub struct Queue<T: Send> {\n+pub struct Queue<T> {\n     // consumer fields\n     tail: UnsafeCell<*mut Node<T>>, // where to pop from\n     tail_prev: AtomicPtr<Node<T>>, // where to pop from"}, {"sha": "f0363fae84f73f16ecdbf78f13e8006677eab7f3", "filename": "src/libstd/sync/mpsc/stream.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57f5ac948aeb296b99785a82ffc49fafc291aad9/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57f5ac948aeb296b99785a82ffc49fafc291aad9/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs?ref=57f5ac948aeb296b99785a82ffc49fafc291aad9", "patch": "@@ -39,7 +39,7 @@ const MAX_STEALS: isize = 5;\n #[cfg(not(test))]\n const MAX_STEALS: isize = 1 << 20;\n \n-pub struct Packet<T:Send> {\n+pub struct Packet<T> {\n     queue: spsc::Queue<Message<T>>, // internal queue for all message\n \n     cnt: AtomicIsize, // How many items are on this channel\n@@ -49,7 +49,7 @@ pub struct Packet<T:Send> {\n     port_dropped: AtomicBool, // flag if the channel has been destroyed.\n }\n \n-pub enum Failure<T:Send> {\n+pub enum Failure<T> {\n     Empty,\n     Disconnected,\n     Upgraded(Receiver<T>),\n@@ -61,15 +61,15 @@ pub enum UpgradeResult {\n     UpWoke(SignalToken),\n }\n \n-pub enum SelectionResult<T:Send> {\n+pub enum SelectionResult<T> {\n     SelSuccess,\n     SelCanceled,\n     SelUpgraded(SignalToken, Receiver<T>),\n }\n \n // Any message could contain an \"upgrade request\" to a new shared port, so the\n // internal queue it's a queue of T, but rather Message<T>\n-enum Message<T:Send> {\n+enum Message<T> {\n     Data(T),\n     GoUp(Receiver<T>),\n }"}, {"sha": "6221ca59b54f7094e0d47b102bd8ece1e57e30af", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57f5ac948aeb296b99785a82ffc49fafc291aad9/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57f5ac948aeb296b99785a82ffc49fafc291aad9/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=57f5ac948aeb296b99785a82ffc49fafc291aad9", "patch": "@@ -47,7 +47,7 @@ use sync::mpsc::blocking::{self, WaitToken, SignalToken};\n use sync::mpsc::select::StartResult::{self, Installed, Abort};\n use sync::{Mutex, MutexGuard};\n \n-pub struct Packet<T: Send> {\n+pub struct Packet<T> {\n     /// Only field outside of the mutex. Just done for kicks, but mainly because\n     /// the other shared channel already had the code implemented\n     channels: AtomicUsize,"}, {"sha": "16e7f265412f3211a40e0118c6b40ff4d26b8757", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57f5ac948aeb296b99785a82ffc49fafc291aad9/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57f5ac948aeb296b99785a82ffc49fafc291aad9/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=57f5ac948aeb296b99785a82ffc49fafc291aad9", "patch": "@@ -112,7 +112,7 @@ use fmt;\n /// *guard += 1;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct Mutex<T: Send> {\n+pub struct Mutex<T> {\n     // Note that this static mutex is in a *box*, not inlined into the struct\n     // itself. Once a native mutex has been used once, its address can never\n     // change (it can't be moved). This mutex type can be safely moved at any"}, {"sha": "99abe10c8a49997aa26418f31641ebb86d5c2432", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57f5ac948aeb296b99785a82ffc49fafc291aad9/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57f5ac948aeb296b99785a82ffc49fafc291aad9/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=57f5ac948aeb296b99785a82ffc49fafc291aad9", "patch": "@@ -49,9 +49,9 @@ pub const ERROR_NO_MORE_FILES: libc::DWORD = 18;\n pub const TOKEN_READ: libc::DWORD = 0x20008;\n \n // Note that these are not actually HANDLEs, just values to pass to GetStdHandle\n-pub const STD_INPUT_HANDLE: libc::DWORD = -10;\n-pub const STD_OUTPUT_HANDLE: libc::DWORD = -11;\n-pub const STD_ERROR_HANDLE: libc::DWORD = -12;\n+pub const STD_INPUT_HANDLE: libc::DWORD = -10i32 as libc::DWORD;\n+pub const STD_OUTPUT_HANDLE: libc::DWORD = -11i32 as libc::DWORD;\n+pub const STD_ERROR_HANDLE: libc::DWORD = -12i32 as libc::DWORD;\n \n #[repr(C)]\n #[cfg(target_arch = \"x86\")]"}, {"sha": "f51eee379347c2e40c8c088b22c19bd29d598032", "filename": "src/test/compile-fail/unsendable-class.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d49b67e255db86a5df952b33f4140150fc12bf4d/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49b67e255db86a5df952b33f4140150fc12bf4d/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs?ref=d49b67e255db86a5df952b33f4140150fc12bf4d", "patch": "@@ -1,35 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::sync::mpsc::channel;\n-\n-// Test that a class with an unsendable field can't be\n-// sent\n-\n-use std::rc::Rc;\n-\n-struct foo {\n-  i: isize,\n-  j: Rc<String>,\n-}\n-\n-fn foo(i:isize, j: Rc<String>) -> foo {\n-    foo {\n-        i: i,\n-        j: j\n-    }\n-}\n-\n-fn main() {\n-  let cat = \"kitty\".to_string();\n-  let (tx, _) = channel();\n-  //~^ ERROR `core::marker::Send` is not implemented\n-  tx.send(foo(42, Rc::new(cat)));\n-}"}]}