{"sha": "76f0b1ad1fb314199b6db61df753d6757dee3b77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZjBiMWFkMWZiMzE0MTk5YjZkYjYxZGY3NTNkNjc1N2RlZTNiNzc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-21T05:06:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-22T15:48:20Z"}, "message": "test: Fix fallout of removing get()", "tree": {"sha": "f7f0ef90ee97f0c30dc5e35ee47c1c72986b8141", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7f0ef90ee97f0c30dc5e35ee47c1c72986b8141"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76f0b1ad1fb314199b6db61df753d6757dee3b77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76f0b1ad1fb314199b6db61df753d6757dee3b77", "html_url": "https://github.com/rust-lang/rust/commit/76f0b1ad1fb314199b6db61df753d6757dee3b77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76f0b1ad1fb314199b6db61df753d6757dee3b77/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a7fd8cfa59506d70c43b93256c7eeeb79133ca5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a7fd8cfa59506d70c43b93256c7eeeb79133ca5", "html_url": "https://github.com/rust-lang/rust/commit/6a7fd8cfa59506d70c43b93256c7eeeb79133ca5"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "146ed261811e2a37196fc78ca55d324082081e6c", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76f0b1ad1fb314199b6db61df753d6757dee3b77/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76f0b1ad1fb314199b6db61df753d6757dee3b77/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=76f0b1ad1fb314199b6db61df753d6757dee3b77", "patch": "@@ -24,7 +24,7 @@ pub struct alist<A,B> {\n \n pub fn alist_add<A:'static,B:'static>(lst: &alist<A,B>, k: A, v: B) {\n     let mut data = lst.data.borrow_mut();\n-    data.get().push(Entry{key:k, value:v});\n+    (*data).push(Entry{key:k, value:v});\n }\n \n pub fn alist_get<A:Clone + 'static,\n@@ -34,7 +34,7 @@ pub fn alist_get<A:Clone + 'static,\n                  -> B {\n     let eq_fn = lst.eq_fn;\n     let data = lst.data.borrow();\n-    for entry in data.get().iter() {\n+    for entry in (*data).iter() {\n         if eq_fn(entry.key.clone(), k.clone()) {\n             return entry.value.clone();\n         }"}, {"sha": "a3354e230c6f1254da2b90d0e47f20b5545a815e", "filename": "src/test/compile-fail/issue-7013.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76f0b1ad1fb314199b6db61df753d6757dee3b77/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76f0b1ad1fb314199b6db61df753d6757dee3b77/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs?ref=76f0b1ad1fb314199b6db61df753d6757dee3b77", "patch": "@@ -42,5 +42,5 @@ fn main()\n     let w = v.clone();\n     let b = v.deref();\n     let mut b = b.borrow_mut();\n-    b.get().v.set(w.clone());\n+    b.v.set(w.clone());\n }"}, {"sha": "99d7258477ace85d1f67529207171b38f986a071", "filename": "src/test/compile-fail/mut-cant-alias.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76f0b1ad1fb314199b6db61df753d6757dee3b77/src%2Ftest%2Fcompile-fail%2Fmut-cant-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76f0b1ad1fb314199b6db61df753d6757dee3b77/src%2Ftest%2Fcompile-fail%2Fmut-cant-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-cant-alias.rs?ref=76f0b1ad1fb314199b6db61df753d6757dee3b77", "patch": "@@ -13,6 +13,6 @@ use std::cell::RefCell;\n fn main() {\n     let m = RefCell::new(0);\n     let mut b = m.borrow_mut();\n-    let b1 = b.get();\n-    let b2 = b.get(); //~ ERROR cannot borrow\n+    let b1 = &mut *b;\n+    let b2 = &mut *b; //~ ERROR cannot borrow\n }"}, {"sha": "8e968d90a2f65750aeb87e9a8551653334cf630f", "filename": "src/test/compile-fail/mut-ptr-cant-outlive-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76f0b1ad1fb314199b6db61df753d6757dee3b77/src%2Ftest%2Fcompile-fail%2Fmut-ptr-cant-outlive-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76f0b1ad1fb314199b6db61df753d6757dee3b77/src%2Ftest%2Fcompile-fail%2Fmut-ptr-cant-outlive-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-ptr-cant-outlive-ref.rs?ref=76f0b1ad1fb314199b6db61df753d6757dee3b77", "patch": "@@ -15,6 +15,6 @@ fn main() {\n     let p;\n     {\n         let b = m.borrow();\n-        p = b.get(); //~ ERROR `b` does not live long enough\n+        p = &*b; //~ ERROR `b` does not live long enough\n     }\n }"}, {"sha": "0926e640bc10aa30beb1abdd2d08c694483442bc", "filename": "src/test/run-pass/format-ref-cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76f0b1ad1fb314199b6db61df753d6757dee3b77/src%2Ftest%2Frun-pass%2Fformat-ref-cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76f0b1ad1fb314199b6db61df753d6757dee3b77/src%2Ftest%2Frun-pass%2Fformat-ref-cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fformat-ref-cell.rs?ref=76f0b1ad1fb314199b6db61df753d6757dee3b77", "patch": "@@ -13,6 +13,6 @@ use std::cell::RefCell;\n pub fn main() {\n     let name = RefCell::new(\"rust\");\n     let what = RefCell::new(\"rocks\");\n-    let msg = format!(\"{name:?} {:?}\", what.borrow().get(), name=name.borrow().get());\n+    let msg = format!(\"{name:?} {:?}\", &*what.borrow(), name=&*name.borrow());\n     assert_eq!(msg, ~\"&\\\"rust\\\" &\\\"rocks\\\"\");\n }"}, {"sha": "490c77d98cdc229b90d74da6dc522bb4cffb37ba", "filename": "src/test/run-pass/trait-cast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76f0b1ad1fb314199b6db61df753d6757dee3b77/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76f0b1ad1fb314199b6db61df753d6757dee3b77/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-cast.rs?ref=76f0b1ad1fb314199b6db61df753d6757dee3b77", "patch": "@@ -42,8 +42,8 @@ impl to_str for Tree {\n     fn to_str_(&self) -> ~str {\n         let Tree(t) = *self;\n         let this = t.borrow();\n-        let (l, r) = (this.get().left, this.get().right);\n-        let val = &this.get().val;\n+        let (l, r) = (this.left, this.right);\n+        let val = &this.val;\n         format!(\"[{}, {}, {}]\", val.to_str_(), l.to_str_(), r.to_str_())\n     }\n }\n@@ -64,6 +64,6 @@ pub fn main() {\n     {\n         let Tree(t1_) = t1;\n         let mut t1 = t1_.borrow_mut();\n-        t1.get().left = Some(t2); // create cycle\n+        t1.left = Some(t2); // create cycle\n     }\n }"}, {"sha": "41e921ff6e429edd9930a86a839b935e28403e2d", "filename": "src/test/run-pass/uniq-cc-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76f0b1ad1fb314199b6db61df753d6757dee3b77/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76f0b1ad1fb314199b6db61df753d6757dee3b77/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs?ref=76f0b1ad1fb314199b6db61df753d6757dee3b77", "patch": "@@ -38,6 +38,6 @@ pub fn main() {\n     let v = empty_pointy();\n     {\n         let mut vb = v.borrow_mut();\n-        vb.get().a = p(v);\n+        vb.a = p(v);\n     }\n }"}, {"sha": "57fc9ac6773b6688ce8aa5b103884f78850bc3f3", "filename": "src/test/run-pass/uniq-cc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76f0b1ad1fb314199b6db61df753d6757dee3b77/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76f0b1ad1fb314199b6db61df753d6757dee3b77/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc.rs?ref=76f0b1ad1fb314199b6db61df753d6757dee3b77", "patch": "@@ -35,6 +35,6 @@ pub fn main() {\n     let v = empty_pointy();\n     {\n         let mut vb = v.borrow_mut();\n-        vb.get().a = p(v);\n+        vb.a = p(v);\n     }\n }"}]}