{"sha": "39edc68c690b2711def27f229ad3d113c55f6354", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZWRjNjhjNjkwYjI3MTFkZWYyN2YyMjlhZDNkMTEzYzU1ZjYzNTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-09T21:56:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-09T21:56:09Z"}, "message": "Rollup merge of #60188 - estebank:recover-block, r=varkor\n\nIdentify when a stmt could have been parsed as an expr\n\nThere are some expressions that can be parsed as a statement without\na trailing semicolon depending on the context, which can lead to\nconfusing errors due to the same looking code being accepted in some\nplaces and not others. Identify these cases and suggest enclosing in\nparenthesis making the parse non-ambiguous without changing the\naccepted grammar.\n\nFix #54186, cc #54482, fix #59975, fix #47287.", "tree": {"sha": "a0ca4ffa4446344ec7af9c8292ddf259c0b4e120", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0ca4ffa4446344ec7af9c8292ddf259c0b4e120"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39edc68c690b2711def27f229ad3d113c55f6354", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc1KH5CRBK7hj4Ov3rIwAAdHIIAHrDlJ04ce+QUM1LrrvSQ9cx\nJdG9TuKJQoEWqmD6XiIGm8RaSr5R9HIuZFYv2WJmVf9bEhfv+d3Pd4FJ6dBGvoxx\njspLIuMCVi1ELdu/s5rvjM12ND/kjM8QCnInyqHKxkQHz5O7CLLaKvhhUBOXX73I\njFlX/wJH+TEr6YbtNS9TZMf6jOYLxULoEsaJ79iymqe0SCQq+6n0UpxsBOzUtesD\nWN+Jpbk31IF0OIZefQQdxip9KdOWBD9BfckmJusMiHr+KflIGQD3NzOp8EXLpV5l\nQiL5EilxGPrFQAmldWuzOtcFVGW/bxcgMuYKc5jOqrlhGgn8ndz1fhLCSc0Paf4=\n=Hwz5\n-----END PGP SIGNATURE-----\n", "payload": "tree a0ca4ffa4446344ec7af9c8292ddf259c0b4e120\nparent 62ab971bb7143601a8734a9d3f072232e46eb973\nparent 54430ad53ab00bf86090a8d11844db1c40b2ca24\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1557438969 +0200\ncommitter GitHub <noreply@github.com> 1557438969 +0200\n\nRollup merge of #60188 - estebank:recover-block, r=varkor\n\nIdentify when a stmt could have been parsed as an expr\n\nThere are some expressions that can be parsed as a statement without\na trailing semicolon depending on the context, which can lead to\nconfusing errors due to the same looking code being accepted in some\nplaces and not others. Identify these cases and suggest enclosing in\nparenthesis making the parse non-ambiguous without changing the\naccepted grammar.\n\nFix #54186, cc #54482, fix #59975, fix #47287.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39edc68c690b2711def27f229ad3d113c55f6354", "html_url": "https://github.com/rust-lang/rust/commit/39edc68c690b2711def27f229ad3d113c55f6354", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39edc68c690b2711def27f229ad3d113c55f6354/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62ab971bb7143601a8734a9d3f072232e46eb973", "url": "https://api.github.com/repos/rust-lang/rust/commits/62ab971bb7143601a8734a9d3f072232e46eb973", "html_url": "https://github.com/rust-lang/rust/commit/62ab971bb7143601a8734a9d3f072232e46eb973"}, {"sha": "54430ad53ab00bf86090a8d11844db1c40b2ca24", "url": "https://api.github.com/repos/rust-lang/rust/commits/54430ad53ab00bf86090a8d11844db1c40b2ca24", "html_url": "https://github.com/rust-lang/rust/commit/54430ad53ab00bf86090a8d11844db1c40b2ca24"}], "stats": {"total": 336, "additions": 312, "deletions": 24}, "files": [{"sha": "965f52be31cde4762c86f37794db7d817ba4d812", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/39edc68c690b2711def27f229ad3d113c55f6354/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39edc68c690b2711def27f229ad3d113c55f6354/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=39edc68c690b2711def27f229ad3d113c55f6354", "patch": "@@ -4168,9 +4168,25 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                 oprnd_t = self.make_overloaded_place_return_type(method).ty;\n                                 self.write_method_call(expr.hir_id, method);\n                             } else {\n-                                type_error_struct!(tcx.sess, expr.span, oprnd_t, E0614,\n-                                                   \"type `{}` cannot be dereferenced\",\n-                                                   oprnd_t).emit();\n+                                let mut err = type_error_struct!(\n+                                    tcx.sess,\n+                                    expr.span,\n+                                    oprnd_t,\n+                                    E0614,\n+                                    \"type `{}` cannot be dereferenced\",\n+                                    oprnd_t,\n+                                );\n+                                let sp = tcx.sess.source_map().start_point(expr.span);\n+                                if let Some(sp) = tcx.sess.parse_sess.ambiguous_block_expr_parse\n+                                    .borrow().get(&sp)\n+                                {\n+                                    tcx.sess.parse_sess.expr_parentheses_needed(\n+                                        &mut err,\n+                                        *sp,\n+                                        None,\n+                                    );\n+                                }\n+                                err.emit();\n                                 oprnd_t = tcx.types.err;\n                             }\n                         }"}, {"sha": "2882acb0e780c9fffffe6409adcaa79286535a96", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39edc68c690b2711def27f229ad3d113c55f6354/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39edc68c690b2711def27f229ad3d113c55f6354/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=39edc68c690b2711def27f229ad3d113c55f6354", "patch": "@@ -1598,7 +1598,7 @@ mod tests {\n     use std::io;\n     use std::path::PathBuf;\n     use syntax_pos::{BytePos, Span, NO_EXPANSION};\n-    use rustc_data_structures::fx::FxHashSet;\n+    use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n     use rustc_data_structures::sync::Lock;\n \n     fn mk_sess(sm: Lrc<SourceMap>) -> ParseSess {\n@@ -1617,6 +1617,7 @@ mod tests {\n             raw_identifier_spans: Lock::new(Vec::new()),\n             registered_diagnostics: Lock::new(ErrorMap::new()),\n             buffered_lints: Lock::new(vec![]),\n+            ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n         }\n     }\n "}, {"sha": "be44b964ba5a7f1819236766cd66eab2af4895ce", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/39edc68c690b2711def27f229ad3d113c55f6354/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39edc68c690b2711def27f229ad3d113c55f6354/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=39edc68c690b2711def27f229ad3d113c55f6354", "patch": "@@ -11,12 +11,12 @@ use crate::tokenstream::{TokenStream, TokenTree};\n use crate::diagnostics::plugin::ErrorMap;\n use crate::print::pprust::token_to_string;\n \n-use errors::{FatalError, Level, Handler, ColorConfig, Diagnostic, DiagnosticBuilder};\n+use errors::{Applicability, FatalError, Level, Handler, ColorConfig, Diagnostic, DiagnosticBuilder};\n use rustc_data_structures::sync::{Lrc, Lock};\n use syntax_pos::{Span, SourceFile, FileName, MultiSpan};\n use log::debug;\n \n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use std::borrow::Cow;\n use std::path::{Path, PathBuf};\n use std::str;\n@@ -52,6 +52,10 @@ pub struct ParseSess {\n     included_mod_stack: Lock<Vec<PathBuf>>,\n     source_map: Lrc<SourceMap>,\n     pub buffered_lints: Lock<Vec<BufferedEarlyLint>>,\n+    /// Contains the spans of block expressions that could have been incomplete based on the\n+    /// operation token that followed it, but that the parser cannot identify without further\n+    /// analysis.\n+    pub ambiguous_block_expr_parse: Lock<FxHashMap<Span, Span>>,\n }\n \n impl ParseSess {\n@@ -75,6 +79,7 @@ impl ParseSess {\n             included_mod_stack: Lock::new(vec![]),\n             source_map,\n             buffered_lints: Lock::new(vec![]),\n+            ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n         }\n     }\n \n@@ -98,6 +103,24 @@ impl ParseSess {\n             });\n         });\n     }\n+\n+    /// Extend an error with a suggestion to wrap an expression with parentheses to allow the\n+    /// parser to continue parsing the following operation as part of the same expression.\n+    pub fn expr_parentheses_needed(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        span: Span,\n+        alt_snippet: Option<String>,\n+    ) {\n+        if let Some(snippet) = self.source_map().span_to_snippet(span).ok().or(alt_snippet) {\n+            err.span_suggestion(\n+                span,\n+                \"parentheses are required to parse this as an expression\",\n+                format!(\"({})\", snippet),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n }\n \n #[derive(Clone)]"}, {"sha": "7b19bb760e07a0d7578ac886b3e39b37de54515b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/39edc68c690b2711def27f229ad3d113c55f6354/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39edc68c690b2711def27f229ad3d113c55f6354/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=39edc68c690b2711def27f229ad3d113c55f6354", "patch": "@@ -186,6 +186,7 @@ enum PrevTokenKind {\n     Interpolated,\n     Eof,\n     Ident,\n+    BitOr,\n     Other,\n }\n \n@@ -1375,6 +1376,7 @@ impl<'a> Parser<'a> {\n             token::DocComment(..) => PrevTokenKind::DocComment,\n             token::Comma => PrevTokenKind::Comma,\n             token::BinOp(token::Plus) => PrevTokenKind::Plus,\n+            token::BinOp(token::Or) => PrevTokenKind::BitOr,\n             token::Interpolated(..) => PrevTokenKind::Interpolated,\n             token::Eof => PrevTokenKind::Eof,\n             token::Ident(..) => PrevTokenKind::Ident,\n@@ -2806,6 +2808,12 @@ impl<'a> Parser<'a> {\n                             let msg = format!(\"expected expression, found {}\",\n                                               self.this_token_descr());\n                             let mut err = self.fatal(&msg);\n+                            let sp = self.sess.source_map().start_point(self.span);\n+                            if let Some(sp) = self.sess.ambiguous_block_expr_parse.borrow()\n+                                .get(&sp)\n+                            {\n+                                self.sess.expr_parentheses_needed(&mut err, *sp, None);\n+                            }\n                             err.span_label(self.span, \"expected expression\");\n                             return Err(err);\n                         }\n@@ -2845,7 +2853,7 @@ impl<'a> Parser<'a> {\n                     \"struct literals are not allowed here\",\n                 );\n                 err.multipart_suggestion(\n-                    \"surround the struct literal with parenthesis\",\n+                    \"surround the struct literal with parentheses\",\n                     vec![\n                         (lo.shrink_to_lo(), \"(\".to_string()),\n                         (expr.span.shrink_to_hi(), \")\".to_string()),\n@@ -3506,9 +3514,42 @@ impl<'a> Parser<'a> {\n             }\n         };\n \n-        if self.expr_is_complete(&lhs) {\n-            // Semi-statement forms are odd. See https://github.com/rust-lang/rust/issues/29071\n-            return Ok(lhs);\n+        match (self.expr_is_complete(&lhs), AssocOp::from_token(&self.token)) {\n+            (true, None) => {\n+                // Semi-statement forms are odd. See https://github.com/rust-lang/rust/issues/29071\n+                return Ok(lhs);\n+            }\n+            (false, _) => {} // continue parsing the expression\n+            // An exhaustive check is done in the following block, but these are checked first\n+            // because they *are* ambiguous but also reasonable looking incorrect syntax, so we\n+            // want to keep their span info to improve diagnostics in these cases in a later stage.\n+            (true, Some(AssocOp::Multiply)) | // `{ 42 } *foo = bar;` or `{ 42 } * 3`\n+            (true, Some(AssocOp::Subtract)) | // `{ 42 } -5`\n+            (true, Some(AssocOp::Add)) => { // `{ 42 } + 42\n+                // These cases are ambiguous and can't be identified in the parser alone\n+                let sp = self.sess.source_map().start_point(self.span);\n+                self.sess.ambiguous_block_expr_parse.borrow_mut().insert(sp, lhs.span);\n+                return Ok(lhs);\n+            }\n+            (true, Some(ref op)) if !op.can_continue_expr_unambiguously() => {\n+                return Ok(lhs);\n+            }\n+            (true, Some(_)) => {\n+                // We've found an expression that would be parsed as a statement, but the next\n+                // token implies this should be parsed as an expression.\n+                // For example: `if let Some(x) = x { x } else { 0 } / 2`\n+                let mut err = self.sess.span_diagnostic.struct_span_err(self.span, &format!(\n+                    \"expected expression, found `{}`\",\n+                    pprust::token_to_string(&self.token),\n+                ));\n+                err.span_label(self.span, \"expected expression\");\n+                self.sess.expr_parentheses_needed(\n+                    &mut err,\n+                    lhs.span,\n+                    Some(pprust::expr_to_string(&lhs),\n+                ));\n+                err.emit();\n+            }\n         }\n         self.expected_tokens.push(TokenType::Operator);\n         while let Some(op) = AssocOp::from_token(&self.token) {\n@@ -4819,6 +4860,10 @@ impl<'a> Parser<'a> {\n                         );\n                         let mut err = self.fatal(&msg);\n                         err.span_label(self.span, format!(\"expected {}\", expected));\n+                        let sp = self.sess.source_map().start_point(self.span);\n+                        if let Some(sp) = self.sess.ambiguous_block_expr_parse.borrow().get(&sp) {\n+                            self.sess.expr_parentheses_needed(&mut err, *sp, None);\n+                        }\n                         return Err(err);\n                     }\n                 }"}, {"sha": "86e89945afe068cad1b4fef80a6a6f74e0a64871", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/39edc68c690b2711def27f229ad3d113c55f6354/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39edc68c690b2711def27f229ad3d113c55f6354/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=39edc68c690b2711def27f229ad3d113c55f6354", "patch": "@@ -207,6 +207,31 @@ impl AssocOp {\n             ObsoleteInPlace | Assign | AssignOp(_) | As | DotDot | DotDotEq | Colon => None\n         }\n     }\n+\n+    /// This operator could be used to follow a block unambiguously.\n+    ///\n+    /// This is used for error recovery at the moment, providing a suggestion to wrap blocks with\n+    /// parentheses while having a high degree of confidence on the correctness of the suggestion.\n+    pub fn can_continue_expr_unambiguously(&self) -> bool {\n+        use AssocOp::*;\n+        match self {\n+            BitXor | // `{ 42 } ^ 3`\n+            Assign | // `{ 42 } = { 42 }`\n+            Divide | // `{ 42 } / 42`\n+            Modulus | // `{ 42 } % 2`\n+            ShiftRight | // `{ 42 } >> 2`\n+            LessEqual | // `{ 42 } <= 3`\n+            Greater | // `{ 42 } > 3`\n+            GreaterEqual | // `{ 42 } >= 3`\n+            AssignOp(_) | // `{ 42 } +=`\n+            LAnd | // `{ 42 } &&foo`\n+            As | // `{ 42 } as usize`\n+            // Equal | // `{ 42 } == { 42 }`    Accepting these here would regress incorrect\n+            // NotEqual | // `{ 42 } != { 42 }  struct literals parser recovery.\n+            Colon => true, // `{ 42 }: usize`\n+            _ => false,\n+        }\n+    }\n }\n \n pub const PREC_RESET: i8 = -100;"}, {"sha": "ec240003f91822e6eaa23e120aa98e854bf1800f", "filename": "src/test/ui/error-codes/E0423.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr?ref=39edc68c690b2711def27f229ad3d113c55f6354", "patch": "@@ -3,7 +3,7 @@ error: struct literals are not allowed here\n    |\n LL |     if let S { x: _x, y: 2 } = S { x: 1, y: 2 } { println!(\"Ok\"); }\n    |                                ^^^^^^^^^^^^^^^^\n-help: surround the struct literal with parenthesis\n+help: surround the struct literal with parentheses\n    |\n LL |     if let S { x: _x, y: 2 } = (S { x: 1, y: 2 }) { println!(\"Ok\"); }\n    |                                ^                ^\n@@ -19,7 +19,7 @@ error: struct literals are not allowed here\n    |\n LL |     for _ in std::ops::Range { start: 0, end: 10 } {}\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: surround the struct literal with parenthesis\n+help: surround the struct literal with parentheses\n    |\n LL |     for _ in (std::ops::Range { start: 0, end: 10 }) {}\n    |              ^                                     ^"}, {"sha": "1ce6f9c25034f811a881b80033d0156aba8cc0fa", "filename": "src/test/ui/parser/expr-as-stmt.fixed", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed?ref=39edc68c690b2711def27f229ad3d113c55f6354", "patch": "@@ -0,0 +1,40 @@\n+// run-rustfix\n+#![allow(unused_variables)]\n+#![allow(dead_code)]\n+#![allow(unused_must_use)]\n+\n+fn foo() -> i32 {\n+    ({2}) + {2} //~ ERROR expected expression, found `+`\n+    //~^ ERROR mismatched types\n+}\n+\n+fn bar() -> i32 {\n+    ({2}) + 2 //~ ERROR expected expression, found `+`\n+    //~^ ERROR mismatched types\n+}\n+\n+fn zul() -> u32 {\n+    let foo = 3;\n+    ({ 42 }) + foo; //~ ERROR expected expression, found `+`\n+    //~^ ERROR mismatched types\n+    32\n+}\n+\n+fn baz() -> i32 {\n+    ({ 3 }) * 3 //~ ERROR type `{integer}` cannot be dereferenced\n+    //~^ ERROR mismatched types\n+}\n+\n+fn qux(a: Option<u32>, b: Option<u32>) -> bool {\n+    (if let Some(x) = a { true } else { false })\n+    && //~ ERROR expected expression\n+    if let Some(y) = a { true } else { false }\n+}\n+\n+fn moo(x: u32) -> bool {\n+    (match x {\n+        _ => 1,\n+    }) > 0 //~ ERROR expected expression\n+}\n+\n+fn main() {}"}, {"sha": "b526c17488eaf72ee218a67bbda59cf5e50d9303", "filename": "src/test/ui/parser/expr-as-stmt.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs?ref=39edc68c690b2711def27f229ad3d113c55f6354", "patch": "@@ -0,0 +1,40 @@\n+// run-rustfix\n+#![allow(unused_variables)]\n+#![allow(dead_code)]\n+#![allow(unused_must_use)]\n+\n+fn foo() -> i32 {\n+    {2} + {2} //~ ERROR expected expression, found `+`\n+    //~^ ERROR mismatched types\n+}\n+\n+fn bar() -> i32 {\n+    {2} + 2 //~ ERROR expected expression, found `+`\n+    //~^ ERROR mismatched types\n+}\n+\n+fn zul() -> u32 {\n+    let foo = 3;\n+    { 42 } + foo; //~ ERROR expected expression, found `+`\n+    //~^ ERROR mismatched types\n+    32\n+}\n+\n+fn baz() -> i32 {\n+    { 3 } * 3 //~ ERROR type `{integer}` cannot be dereferenced\n+    //~^ ERROR mismatched types\n+}\n+\n+fn qux(a: Option<u32>, b: Option<u32>) -> bool {\n+    if let Some(x) = a { true } else { false }\n+    && //~ ERROR expected expression\n+    if let Some(y) = a { true } else { false }\n+}\n+\n+fn moo(x: u32) -> bool {\n+    match x {\n+        _ => 1,\n+    } > 0 //~ ERROR expected expression\n+}\n+\n+fn main() {}"}, {"sha": "a11209998a7d50b0e7ffdc2653df794f0ea175da", "filename": "src/test/ui/parser/expr-as-stmt.stderr", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr?ref=39edc68c690b2711def27f229ad3d113c55f6354", "patch": "@@ -0,0 +1,92 @@\n+error: expected expression, found `+`\n+  --> $DIR/expr-as-stmt.rs:7:9\n+   |\n+LL |     {2} + {2}\n+   |     --- ^ expected expression\n+   |     |\n+   |     help: parentheses are required to parse this as an expression: `({2})`\n+\n+error: expected expression, found `+`\n+  --> $DIR/expr-as-stmt.rs:12:9\n+   |\n+LL |     {2} + 2\n+   |     --- ^ expected expression\n+   |     |\n+   |     help: parentheses are required to parse this as an expression: `({2})`\n+\n+error: expected expression, found `+`\n+  --> $DIR/expr-as-stmt.rs:18:12\n+   |\n+LL |     { 42 } + foo;\n+   |     ------ ^ expected expression\n+   |     |\n+   |     help: parentheses are required to parse this as an expression: `({ 42 })`\n+\n+error: expected expression, found `&&`\n+  --> $DIR/expr-as-stmt.rs:30:5\n+   |\n+LL |     if let Some(x) = a { true } else { false }\n+   |     ------------------------------------------ help: parentheses are required to parse this as an expression: `(if let Some(x) = a { true } else { false })`\n+LL |     &&\n+   |     ^^ expected expression\n+\n+error: expected expression, found `>`\n+  --> $DIR/expr-as-stmt.rs:37:7\n+   |\n+LL |     } > 0\n+   |       ^ expected expression\n+help: parentheses are required to parse this as an expression\n+   |\n+LL |     (match x {\n+LL |         _ => 1,\n+LL |     }) > 0\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:7:6\n+   |\n+LL |     {2} + {2}\n+   |      ^ expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:12:6\n+   |\n+LL |     {2} + 2\n+   |      ^ expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:18:7\n+   |\n+LL |     { 42 } + foo;\n+   |       ^^ expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:24:7\n+   |\n+LL |     { 3 } * 3\n+   |       ^ expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error[E0614]: type `{integer}` cannot be dereferenced\n+  --> $DIR/expr-as-stmt.rs:24:11\n+   |\n+LL |     { 3 } * 3\n+   |     ----- ^^^\n+   |     |\n+   |     help: parentheses are required to parse this as an expression: `({ 3 })`\n+\n+error: aborting due to 10 previous errors\n+\n+Some errors have detailed explanations: E0308, E0614.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "56c917c7462f2e2d838edd6c73639bdf893a9fad", "filename": "src/test/ui/parser/match-arrows-block-then-binop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Fparser%2Fmatch-arrows-block-then-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Fparser%2Fmatch-arrows-block-then-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-arrows-block-then-binop.rs?ref=39edc68c690b2711def27f229ad3d113c55f6354", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n-\n-    match 0 {\n+    let _ = match 0 {\n       0 => {\n+        0\n       } + 5 //~ ERROR expected pattern, found `+`\n-    }\n+    };\n }"}, {"sha": "bb7df30783acd40945491941e974d3bbb1be50b5", "filename": "src/test/ui/parser/match-arrows-block-then-binop.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Fparser%2Fmatch-arrows-block-then-binop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Fparser%2Fmatch-arrows-block-then-binop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-arrows-block-then-binop.stderr?ref=39edc68c690b2711def27f229ad3d113c55f6354", "patch": "@@ -3,6 +3,12 @@ error: expected pattern, found `+`\n    |\n LL |       } + 5\n    |         ^ expected pattern\n+help: parentheses are required to parse this as an expression\n+   |\n+LL |       0 => ({\n+LL |         0\n+LL |       }) + 5\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "29af72a5d23d0ae06c8f2a5a1874dea3db4383b9", "filename": "src/test/ui/parser/struct-literal-in-for.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr?ref=39edc68c690b2711def27f229ad3d113c55f6354", "patch": "@@ -6,7 +6,7 @@ LL |       for x in Foo {\n LL | |         x: 3\n LL | |     }.hi() {\n    | |_____^\n-help: surround the struct literal with parenthesis\n+help: surround the struct literal with parentheses\n    |\n LL |     for x in (Foo {\n LL |         x: 3"}, {"sha": "e76c1cb45dd4e0e8bdf03ad5c74d27e6df032a5e", "filename": "src/test/ui/parser/struct-literal-in-if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-if.stderr?ref=39edc68c690b2711def27f229ad3d113c55f6354", "patch": "@@ -6,7 +6,7 @@ LL |       if Foo {\n LL | |         x: 3\n LL | |     }.hi() {\n    | |_____^\n-help: surround the struct literal with parenthesis\n+help: surround the struct literal with parentheses\n    |\n LL |     if (Foo {\n LL |         x: 3"}, {"sha": "95b0882b7aeb5ec466533ac0eb8f77d71963e314", "filename": "src/test/ui/parser/struct-literal-in-match-discriminant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-match-discriminant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-match-discriminant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-match-discriminant.stderr?ref=39edc68c690b2711def27f229ad3d113c55f6354", "patch": "@@ -6,7 +6,7 @@ LL |       match Foo {\n LL | |         x: 3\n LL | |     } {\n    | |_____^\n-help: surround the struct literal with parenthesis\n+help: surround the struct literal with parentheses\n    |\n LL |     match (Foo {\n LL |         x: 3"}, {"sha": "acd31b477dc27d7f431cb6045f45c0ac76f97ab1", "filename": "src/test/ui/parser/struct-literal-in-while.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-while.stderr?ref=39edc68c690b2711def27f229ad3d113c55f6354", "patch": "@@ -6,7 +6,7 @@ LL |       while Foo {\n LL | |         x: 3\n LL | |     }.hi() {\n    | |_____^\n-help: surround the struct literal with parenthesis\n+help: surround the struct literal with parentheses\n    |\n LL |     while (Foo {\n LL |         x: 3"}, {"sha": "24078074161e6f08744e7d7bbf46c7a24c53c4b5", "filename": "src/test/ui/parser/struct-literal-restrictions-in-lamda.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr?ref=39edc68c690b2711def27f229ad3d113c55f6354", "patch": "@@ -6,7 +6,7 @@ LL |       while || Foo {\n LL | |         x: 3\n LL | |     }.hi() {\n    | |_____^\n-help: surround the struct literal with parenthesis\n+help: surround the struct literal with parentheses\n    |\n LL |     while || (Foo {\n LL |         x: 3"}, {"sha": "f91b9d7dce60fda07a9042bbf9b8ab9e0b4e61e8", "filename": "src/test/ui/struct-literal-variant-in-if.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39edc68c690b2711def27f229ad3d113c55f6354/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr?ref=39edc68c690b2711def27f229ad3d113c55f6354", "patch": "@@ -3,7 +3,7 @@ error: struct literals are not allowed here\n    |\n LL |     if x == E::I { field1: true, field2: 42 } {}\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: surround the struct literal with parenthesis\n+help: surround the struct literal with parentheses\n    |\n LL |     if x == (E::I { field1: true, field2: 42 }) {}\n    |             ^                                 ^\n@@ -13,7 +13,7 @@ error: struct literals are not allowed here\n    |\n LL |     if x == E::V { field: false } {}\n    |             ^^^^^^^^^^^^^^^^^^^^^\n-help: surround the struct literal with parenthesis\n+help: surround the struct literal with parentheses\n    |\n LL |     if x == (E::V { field: false }) {}\n    |             ^                     ^\n@@ -23,7 +23,7 @@ error: struct literals are not allowed here\n    |\n LL |     if x == E::J { field: -42 } {}\n    |             ^^^^^^^^^^^^^^^^^^^\n-help: surround the struct literal with parenthesis\n+help: surround the struct literal with parentheses\n    |\n LL |     if x == (E::J { field: -42 }) {}\n    |             ^                   ^\n@@ -33,7 +33,7 @@ error: struct literals are not allowed here\n    |\n LL |     if x == E::K { field: \"\" } {}\n    |             ^^^^^^^^^^^^^^^^^^\n-help: surround the struct literal with parenthesis\n+help: surround the struct literal with parentheses\n    |\n LL |     if x == (E::K { field: \"\" }) {}\n    |             ^                  ^"}]}