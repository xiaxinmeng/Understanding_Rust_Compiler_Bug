{"sha": "a594044533b5e309eab7ac6b71f4ba8a909af653", "node_id": "C_kwDOAAsO6NoAKGE1OTQwNDQ1MzNiNWUzMDllYWI3YWM2YjcxZjRiYThhOTA5YWY2NTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-06T08:49:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-06T08:49:54Z"}, "message": "Auto merge of #101362 - compiler-errors:unnecessary-let, r=cjgillot\n\nSuggest removing unnecessary prefix let in patterns\n\nHelps with #101291, though I think `@estebank` probably wants this:\n\n> Finally, I think it'd be nice if we could detect that we don't know for sure and \"just\" swallow the rest of the expression (find the next ; accounting for nested braces) or the end of the item (easier).\n\n... to be implemented before we close that issue out completely.", "tree": {"sha": "1a4d65f4484f72198a094339d7a159617da773b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a4d65f4484f72198a094339d7a159617da773b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a594044533b5e309eab7ac6b71f4ba8a909af653", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a594044533b5e309eab7ac6b71f4ba8a909af653", "html_url": "https://github.com/rust-lang/rust/commit/a594044533b5e309eab7ac6b71f4ba8a909af653", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a594044533b5e309eab7ac6b71f4ba8a909af653/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "098cf8802271eacdc463fa66c35da377926d4c4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/098cf8802271eacdc463fa66c35da377926d4c4e", "html_url": "https://github.com/rust-lang/rust/commit/098cf8802271eacdc463fa66c35da377926d4c4e"}, {"sha": "91674cc56c2ce35097cf44262096c6ecbe067194", "url": "https://api.github.com/repos/rust-lang/rust/commits/91674cc56c2ce35097cf44262096c6ecbe067194", "html_url": "https://github.com/rust-lang/rust/commit/91674cc56c2ce35097cf44262096c6ecbe067194"}], "stats": {"total": 75, "additions": 74, "deletions": 1}, "files": [{"sha": "bfc4db32d3751bd74505d0f4f275f7951224ee1b", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a594044533b5e309eab7ac6b71f4ba8a909af653/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a594044533b5e309eab7ac6b71f4ba8a909af653/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=a594044533b5e309eab7ac6b71f4ba8a909af653", "patch": "@@ -398,6 +398,30 @@ impl Token {\n         }\n     }\n \n+    /// Returns `true` if the token can appear at the start of an pattern.\n+    ///\n+    /// Shamelessly borrowed from `can_begin_expr`, only used for diagnostics right now.\n+    pub fn can_begin_pattern(&self) -> bool {\n+        match self.uninterpolate().kind {\n+            Ident(name, is_raw)              =>\n+                ident_can_begin_expr(name, self.span, is_raw), // value name or keyword\n+            | OpenDelim(Delimiter::Bracket | Delimiter::Parenthesis)  // tuple or array\n+            | Literal(..)                        // literal\n+            | BinOp(Minus)                       // unary minus\n+            | BinOp(And)                         // reference\n+            | AndAnd                             // double reference\n+            // DotDotDot is no longer supported\n+            | DotDot | DotDotDot | DotDotEq      // ranges\n+            | Lt | BinOp(Shl)                    // associated path\n+            | ModSep                    => true, // global path\n+            Interpolated(ref nt) => matches!(**nt, NtLiteral(..) |\n+                NtPat(..)     |\n+                NtBlock(..)   |\n+                NtPath(..)),\n+            _ => false,\n+        }\n+    }\n+\n     /// Returns `true` if the token can appear at the start of a type.\n     pub fn can_begin_type(&self) -> bool {\n         match self.uninterpolate().kind {"}, {"sha": "bc17754c56ae309882e2980508c3fc1623b42812", "filename": "compiler/rustc_error_messages/locales/en-US/parser.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a594044533b5e309eab7ac6b71f4ba8a909af653/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/a594044533b5e309eab7ac6b71f4ba8a909af653/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl?ref=a594044533b5e309eab7ac6b71f4ba8a909af653", "patch": "@@ -150,3 +150,6 @@ parser_dotdotdot = unexpected token: `...`\n \n parser_left_arrow_operator = unexpected token: `<-`\n     .suggestion = if you meant to write a comparison against a negative value, add a space in between `<` and `-`\n+\n+parser_remove_let = expected pattern, found `let`\n+    .suggestion = remove the unnecessary `let` keyword"}, {"sha": "ad49227222b2c1772de880e45f7de602503749c6", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a594044533b5e309eab7ac6b71f4ba8a909af653/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a594044533b5e309eab7ac6b71f4ba8a909af653/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=a594044533b5e309eab7ac6b71f4ba8a909af653", "patch": "@@ -705,6 +705,14 @@ pub(crate) struct LeftArrowOperator {\n     pub span: Span,\n }\n \n+#[derive(SessionDiagnostic)]\n+#[diag(parser::remove_let)]\n+pub(crate) struct RemoveLet {\n+    #[primary_span]\n+    #[suggestion(applicability = \"machine-applicable\", code = \"\")]\n+    pub span: Span,\n+}\n+\n // SnapshotParser is used to create a snapshot of the parser\n // without causing duplicate errors being emitted when the `Parser`\n // is dropped."}, {"sha": "120a3c267f106684507b44c141a32e167ac8b543", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a594044533b5e309eab7ac6b71f4ba8a909af653/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a594044533b5e309eab7ac6b71f4ba8a909af653/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=a594044533b5e309eab7ac6b71f4ba8a909af653", "patch": "@@ -1,4 +1,5 @@\n use super::{ForceCollect, Parser, PathStyle, TrailingToken};\n+use crate::parser::diagnostics::RemoveLet;\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n use rustc_ast::mut_visit::{noop_visit_pat, MutVisitor};\n use rustc_ast::ptr::P;\n@@ -320,7 +321,13 @@ impl<'a> Parser<'a> {\n         maybe_recover_from_interpolated_ty_qpath!(self, true);\n         maybe_whole!(self, NtPat, |x| x);\n \n-        let lo = self.token.span;\n+        let mut lo = self.token.span;\n+\n+        if self.token.is_keyword(kw::Let) && self.look_ahead(1, |tok| tok.can_begin_pattern()) {\n+            self.bump();\n+            self.sess.emit_err(RemoveLet { span: lo });\n+            lo = self.token.span;\n+        }\n \n         let pat = if self.check(&token::BinOp(token::And)) || self.token.kind == token::AndAnd {\n             self.parse_pat_deref(expected)?"}, {"sha": "6279109621d704c64278d7866b61bdd333e46bdc", "filename": "src/test/ui/parser/unnecessary-let.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a594044533b5e309eab7ac6b71f4ba8a909af653/src%2Ftest%2Fui%2Fparser%2Funnecessary-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a594044533b5e309eab7ac6b71f4ba8a909af653/src%2Ftest%2Fui%2Fparser%2Funnecessary-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funnecessary-let.rs?ref=a594044533b5e309eab7ac6b71f4ba8a909af653", "patch": "@@ -0,0 +1,11 @@\n+fn main() {\n+    for let x of [1, 2, 3] {}\n+    //~^ ERROR expected pattern, found `let`\n+    //~| ERROR missing `in` in `for` loop\n+\n+    match 1 {\n+        let 1 => {}\n+        //~^ ERROR expected pattern, found `let`\n+        _ => {}\n+    }\n+}"}, {"sha": "952119cae3e27b44e6d36b3232f132ee55b25d4a", "filename": "src/test/ui/parser/unnecessary-let.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a594044533b5e309eab7ac6b71f4ba8a909af653/src%2Ftest%2Fui%2Fparser%2Funnecessary-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a594044533b5e309eab7ac6b71f4ba8a909af653/src%2Ftest%2Fui%2Fparser%2Funnecessary-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funnecessary-let.stderr?ref=a594044533b5e309eab7ac6b71f4ba8a909af653", "patch": "@@ -0,0 +1,20 @@\n+error: expected pattern, found `let`\n+  --> $DIR/unnecessary-let.rs:2:9\n+   |\n+LL |     for let x of [1, 2, 3] {}\n+   |         ^^^ help: remove the unnecessary `let` keyword\n+\n+error: missing `in` in `for` loop\n+  --> $DIR/unnecessary-let.rs:2:15\n+   |\n+LL |     for let x of [1, 2, 3] {}\n+   |               ^^ help: try using `in` here instead\n+\n+error: expected pattern, found `let`\n+  --> $DIR/unnecessary-let.rs:7:9\n+   |\n+LL |         let 1 => {}\n+   |         ^^^ help: remove the unnecessary `let` keyword\n+\n+error: aborting due to 3 previous errors\n+"}]}