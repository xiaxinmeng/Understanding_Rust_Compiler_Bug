{"sha": "6a29a6842ad6b650cb7cdbf823e3b732e8b9997a", "node_id": "C_kwDOAAsO6NoAKDZhMjlhNjg0MmFkNmI2NTBjYjdjZGJmODIzZTNiNzMyZThiOTk5N2E", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-02T13:55:26Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-02T13:55:26Z"}, "message": "Clippy after rustup", "tree": {"sha": "34e7d6fc32f822bbc11015dfa6db1251c69e659c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34e7d6fc32f822bbc11015dfa6db1251c69e659c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a29a6842ad6b650cb7cdbf823e3b732e8b9997a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a29a6842ad6b650cb7cdbf823e3b732e8b9997a", "html_url": "https://github.com/rust-lang/rust/commit/6a29a6842ad6b650cb7cdbf823e3b732e8b9997a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a29a6842ad6b650cb7cdbf823e3b732e8b9997a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7155a2190ee515fb7c73b533e559f46c774a055b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7155a2190ee515fb7c73b533e559f46c774a055b", "html_url": "https://github.com/rust-lang/rust/commit/7155a2190ee515fb7c73b533e559f46c774a055b"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "c27bb1863175896dd9e64c3f52107a459290af2c", "filename": "cargo-miri/src/setup.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6a29a6842ad6b650cb7cdbf823e3b732e8b9997a/cargo-miri%2Fsrc%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a29a6842ad6b650cb7cdbf823e3b732e8b9997a/cargo-miri%2Fsrc%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fsrc%2Fsetup.rs?ref=6a29a6842ad6b650cb7cdbf823e3b732e8b9997a", "patch": "@@ -76,7 +76,7 @@ pub fn setup(subcommand: &MiriCommand, host: &str, target: &str) {\n             show_error!(\"xargo is too old; please upgrade to the latest version\")\n         }\n         let mut cmd = cargo();\n-        cmd.args(&[\"install\", \"xargo\"]);\n+        cmd.args([\"install\", \"xargo\"]);\n         ask_to_run(cmd, ask_user, \"install a recent enough xargo\");\n     }\n \n@@ -93,7 +93,7 @@ pub fn setup(subcommand: &MiriCommand, host: &str, target: &str) {\n         None => {\n             // Check for `rust-src` rustup component.\n             let output = miri_for_host()\n-                .args(&[\"--print\", \"sysroot\"])\n+                .args([\"--print\", \"sysroot\"])\n                 .output()\n                 .expect(\"failed to determine sysroot\");\n             if !output.status.success() {\n@@ -110,7 +110,7 @@ pub fn setup(subcommand: &MiriCommand, host: &str, target: &str) {\n             if !rustup_src.join(\"std\").join(\"Cargo.toml\").exists() {\n                 // Ask the user to install the `rust-src` component, and use that.\n                 let mut cmd = Command::new(\"rustup\");\n-                cmd.args(&[\"component\", \"add\", \"rust-src\"]);\n+                cmd.args([\"component\", \"add\", \"rust-src\"]);\n                 ask_to_run(\n                     cmd,\n                     ask_user,\n@@ -136,7 +136,7 @@ pub fn setup(subcommand: &MiriCommand, host: &str, target: &str) {\n     let dirs = directories::ProjectDirs::from(\"org\", \"rust-lang\", \"miri\").unwrap();\n     let dir = dirs.cache_dir();\n     if !dir.exists() {\n-        fs::create_dir_all(&dir).unwrap();\n+        fs::create_dir_all(dir).unwrap();\n     }\n     // The interesting bit: Xargo.toml (only needs content if we actually need std)\n     let xargo_toml = if std::env::var_os(\"MIRI_NO_STD\").is_some() {\n@@ -178,8 +178,8 @@ path = \"lib.rs\"\n     // Now invoke xargo.\n     let mut command = xargo_check();\n     command.arg(\"check\").arg(\"-q\");\n-    command.current_dir(&dir);\n-    command.env(\"XARGO_HOME\", &dir);\n+    command.current_dir(dir);\n+    command.env(\"XARGO_HOME\", dir);\n     command.env(\"XARGO_RUST_SRC\", &rust_src);\n     // We always need to set a target so rustc bootstrap can tell apart host from target crates.\n     command.arg(\"--target\").arg(target);"}]}