{"sha": "9260b02daafe26025a99d44ddaeeb89e5f3382be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNjBiMDJkYWFmZTI2MDI1YTk5ZDQ0ZGRhZWViODllNWYzMzgyYmU=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-17T18:26:35Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-17T19:39:51Z"}, "message": "Track spans better in the protocol compiler so we can get better error messages.", "tree": {"sha": "a47ab9b5019c6c9163ec4a8d1133c60ea6d94c24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a47ab9b5019c6c9163ec4a8d1133c60ea6d94c24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9260b02daafe26025a99d44ddaeeb89e5f3382be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9260b02daafe26025a99d44ddaeeb89e5f3382be", "html_url": "https://github.com/rust-lang/rust/commit/9260b02daafe26025a99d44ddaeeb89e5f3382be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9260b02daafe26025a99d44ddaeeb89e5f3382be/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89c2a9f4cf2e30af2a21b33055ca368e3076183a", "url": "https://api.github.com/repos/rust-lang/rust/commits/89c2a9f4cf2e30af2a21b33055ca368e3076183a", "html_url": "https://github.com/rust-lang/rust/commit/89c2a9f4cf2e30af2a21b33055ca368e3076183a"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "da2f9d433739aa2d1c1808a5d694b04c4ae1c861", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9260b02daafe26025a99d44ddaeeb89e5f3382be/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9260b02daafe26025a99d44ddaeeb89e5f3382be/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=9260b02daafe26025a99d44ddaeeb89e5f3382be", "patch": "@@ -55,7 +55,7 @@ trait ext_ctxt_ast_builder {\n     fn arg_mode(name: ident, ty: @ast::ty, mode: ast::rmode) -> ast::arg;\n     fn expr_block(e: @ast::expr) -> ast::blk;\n     fn fn_decl(+inputs: ~[ast::arg], output: @ast::ty) -> ast::fn_decl;\n-    fn item(name: ident, +node: ast::item_) -> @ast::item;\n+    fn item(name: ident, span: span, +node: ast::item_) -> @ast::item;\n     fn item_fn_poly(name: ident,\n                     +inputs: ~[ast::arg],\n                     output: @ast::ty,\n@@ -66,16 +66,19 @@ trait ext_ctxt_ast_builder {\n                output: @ast::ty,\n                +body: ast::blk) -> @ast::item;\n     fn item_enum_poly(name: ident,\n+                      span: span,\n                       +enum_definition: ast::enum_def,\n                       +ty_params: ~[ast::ty_param]) -> @ast::item;\n-    fn item_enum(name: ident, +enum_definition: ast::enum_def) -> @ast::item;\n-    fn variant(name: ident, +tys: ~[@ast::ty]) -> ast::variant;\n-    fn item_mod(name: ident, +items: ~[@ast::item]) -> @ast::item;\n+    fn item_enum(name: ident, span: span, \n+                 +enum_definition: ast::enum_def) -> @ast::item;\n+    fn variant(name: ident, span: span, +tys: ~[@ast::ty]) -> ast::variant;\n+    fn item_mod(name: ident, span: span, +items: ~[@ast::item]) -> @ast::item;\n     fn ty_path_ast_builder(path: @ast::path) -> @ast::ty;\n     fn item_ty_poly(name: ident,\n+                    span: span,\n                     ty: @ast::ty,\n                     +params: ~[ast::ty_param]) -> @ast::item;\n-    fn item_ty(name: ident, ty: @ast::ty) -> @ast::item;\n+    fn item_ty(name: ident, span: span, ty: @ast::ty) -> @ast::item;\n     fn ty_vars(+ty_params: ~[ast::ty_param]) -> ~[@ast::ty];\n     fn ty_field_imm(name: ident, ty: @ast::ty) -> ast::ty_field;\n     fn ty_rec(+~[ast::ty_field]) -> @ast::ty;\n@@ -208,13 +211,14 @@ impl ext_ctxt: ext_ctxt_ast_builder {\n     }\n \n     fn item(name: ident,\n+            span: span,\n             +node: ast::item_) -> @ast::item {\n         @{ident: name,\n          attrs: ~[],\n          id: self.next_id(),\n          node: node,\n          vis: ast::public,\n-         span: self.empty_span()}\n+         span: span}\n     }\n \n     fn item_fn_poly(name: ident,\n@@ -223,6 +227,7 @@ impl ext_ctxt: ext_ctxt_ast_builder {\n                     +ty_params: ~[ast::ty_param],\n                     +body: ast::blk) -> @ast::item {\n         self.item(name,\n+                  self.empty_span(),\n                   ast::item_fn(self.fn_decl(inputs, output),\n                                ty_params,\n                                body))\n@@ -236,16 +241,19 @@ impl ext_ctxt: ext_ctxt_ast_builder {\n     }\n \n     fn item_enum_poly(name: ident,\n+                      span: span,\n                       +enum_definition: ast::enum_def,\n                       +ty_params: ~[ast::ty_param]) -> @ast::item {\n-        self.item(name, ast::item_enum(enum_definition, ty_params))\n+        self.item(name, span, ast::item_enum(enum_definition, ty_params))\n     }\n \n-    fn item_enum(name: ident, +enum_definition: ast::enum_def) -> @ast::item {\n-        self.item_enum_poly(name, enum_definition, ~[])\n+    fn item_enum(name: ident, span: span,\n+                 +enum_definition: ast::enum_def) -> @ast::item {\n+        self.item_enum_poly(name, span, enum_definition, ~[])\n     }\n \n     fn variant(name: ident,\n+               span: span,\n                +tys: ~[@ast::ty]) -> ast::variant {\n         let args = tys.map(|ty| {ty: ty, id: self.next_id()});\n \n@@ -255,12 +263,14 @@ impl ext_ctxt: ext_ctxt_ast_builder {\n                 id: self.next_id(),\n                 disr_expr: none,\n                 vis: ast::public},\n-         span: self.empty_span()}\n+         span: span}\n     }\n \n     fn item_mod(name: ident,\n+                span: span,\n                 +items: ~[@ast::item]) -> @ast::item {\n         self.item(name,\n+                  span,\n                   ast::item_mod({\n                       view_items: ~[],\n                       items: items}))\n@@ -269,7 +279,7 @@ impl ext_ctxt: ext_ctxt_ast_builder {\n     fn ty_path_ast_builder(path: @ast::path) -> @ast::ty {\n         @{id: self.next_id(),\n           node: ast::ty_path(path, self.next_id()),\n-          span: self.empty_span()}\n+          span: path.span}\n     }\n \n     fn ty_nil_ast_builder() -> @ast::ty {\n@@ -279,13 +289,14 @@ impl ext_ctxt: ext_ctxt_ast_builder {\n     }\n \n     fn item_ty_poly(name: ident,\n+                    span: span,\n                     ty: @ast::ty,\n                     +params: ~[ast::ty_param]) -> @ast::item {\n-        self.item(name, ast::item_ty(ty, params))\n+        self.item(name, span, ast::item_ty(ty, params))\n     }\n \n-    fn item_ty(name: ident, ty: @ast::ty) -> @ast::item {\n-        self.item_ty_poly(name, ty, ~[])\n+    fn item_ty(name: ident, span: span, ty: @ast::ty) -> @ast::item {\n+        self.item_ty_poly(name, span, ty, ~[])\n     }\n \n     fn ty_vars(+ty_params: ~[ast::ty_param]) -> ~[@ast::ty] {"}, {"sha": "f7f2981f066bd6ff53f3ed71deb7b16a61fdd7a0", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9260b02daafe26025a99d44ddaeeb89e5f3382be/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9260b02daafe26025a99d44ddaeeb89e5f3382be/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=9260b02daafe26025a99d44ddaeeb89e5f3382be", "patch": "@@ -207,7 +207,7 @@ impl state: to_type_decls {\n         let mut items_msg = ~[];\n \n         for self.messages.each |m| {\n-            let message(name, _span, tys, this, next) = m;\n+            let message(name, span, tys, this, next) = m;\n \n             let tys = match next {\n               some({state: next, tys: next_tys}) => {\n@@ -226,12 +226,13 @@ impl state: to_type_decls {\n               none => tys\n             };\n \n-            let v = cx.variant(name, tys);\n+            let v = cx.variant(name, span, tys);\n \n             vec::push(items_msg, v);\n         }\n \n         ~[cx.item_enum_poly(name,\n+                            self.span,\n                             ast::enum_def({ variants: items_msg,\n                                             common: none }),\n                             self.ty_params)]\n@@ -255,6 +256,7 @@ impl state: to_type_decls {\n             vec::push(items,\n                       cx.item_ty_poly(\n                           self.data_name(),\n+                          self.span,\n                           cx.ty_path_ast_builder(\n                               (@~\"pipes\" + @(dir.to_str() + ~\"_packet\"))\n                               .add_ty(cx.ty_path_ast_builder(\n@@ -266,6 +268,7 @@ impl state: to_type_decls {\n             vec::push(items,\n                       cx.item_ty_poly(\n                           self.data_name(),\n+                          self.span,\n                           cx.ty_path_ast_builder(\n                               (@~\"pipes\" + @(dir.to_str()\n                                              + ~\"_packet_buffered\"))\n@@ -384,6 +387,7 @@ impl protocol: gen_init {\n \n         cx.item_ty_poly(\n             @~\"__Buffer\",\n+            cx.empty_span(),\n             cx.ty_rec(fields),\n             params)\n     }\n@@ -407,12 +411,14 @@ impl protocol: gen_init {\n \n         vec::push(items,\n                   cx.item_mod(@~\"client\",\n+                              self.span,\n                               client_states));\n         vec::push(items,\n                   cx.item_mod(@~\"server\",\n+                              self.span,\n                               server_states));\n \n-        cx.item_mod(self.name, items)\n+        cx.item_mod(self.name, self.span, items)\n     }\n }\n "}]}