{"sha": "07ace32ac91875be65c40a8957eb0982c027bd16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YWNlMzJhYzkxODc1YmU2NWM0MGE4OTU3ZWIwOTgyYzAyN2JkMTY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-01T10:28:39Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-01T10:29:04Z"}, "message": "fallout", "tree": {"sha": "17302e4e8263a2af84a6ca8bdb2dce929422544b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17302e4e8263a2af84a6ca8bdb2dce929422544b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07ace32ac91875be65c40a8957eb0982c027bd16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07ace32ac91875be65c40a8957eb0982c027bd16", "html_url": "https://github.com/rust-lang/rust/commit/07ace32ac91875be65c40a8957eb0982c027bd16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07ace32ac91875be65c40a8957eb0982c027bd16/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6c0435c81c594c9fb3d563d0306ac24c25cc2ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c0435c81c594c9fb3d563d0306ac24c25cc2ca", "html_url": "https://github.com/rust-lang/rust/commit/d6c0435c81c594c9fb3d563d0306ac24c25cc2ca"}], "stats": {"total": 113, "additions": 45, "deletions": 68}, "files": [{"sha": "4b3c4174df7258778ab2ee25676c53142e3329f9", "filename": "src/collapsible_if.rs", "status": "modified", "additions": 30, "deletions": 35, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/07ace32ac91875be65c40a8957eb0982c027bd16/src%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ace32ac91875be65c40a8957eb0982c027bd16/src%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcollapsible_if.rs?ref=07ace32ac91875be65c40a8957eb0982c027bd16", "patch": "@@ -54,43 +54,38 @@ impl LateLintPass for CollapsibleIf {\n \n fn check_if(cx: &LateContext, e: &Expr) {\n     if let ExprIf(ref check, ref then, ref else_) = e.node {\n-        match *else_ {\n-            Some(ref else_) => {\n-                if_let_chain! {[\n-                    let ExprBlock(ref block) = else_.node,\n-                    block.stmts.is_empty(),\n-                    block.rules == BlockCheckMode::DefaultBlock,\n-                    let Some(ref else_) = block.expr,\n-                    let ExprIf(_, _, _) = else_.node\n-                ], {\n-                    span_lint_and_then(cx,\n-                                       COLLAPSIBLE_IF,\n-                                       block.span,\n-                                       \"this `else { if .. }` block can be collapsed\", |db| {\n-                        db.span_suggestion(block.span, \"try\",\n-                                           format!(\"else {}\",\n-                                                   snippet_block(cx, else_.span, \"..\")));\n-                    });\n-                }}\n-            }\n-            None => {\n-                if let Some(&Expr{ node: ExprIf(ref check_inner, ref content, None), span: sp, ..}) =\n+        if let Some(ref else_) = *else_ {\n+            if_let_chain! {[\n+                let ExprBlock(ref block) = else_.node,\n+                block.stmts.is_empty(),\n+                block.rules == BlockCheckMode::DefaultBlock,\n+                let Some(ref else_) = block.expr,\n+                let ExprIf(_, _, _) = else_.node\n+            ], {\n+                span_lint_and_then(cx,\n+                                   COLLAPSIBLE_IF,\n+                                   block.span,\n+                                   \"this `else { if .. }` block can be collapsed\", |db| {\n+                    db.span_suggestion(block.span, \"try\",\n+                                       format!(\"else {}\",\n+                                               snippet_block(cx, else_.span, \"..\")));\n+                });\n+            }}\n+        } else if let Some(&Expr{ node: ExprIf(ref check_inner, ref content, None), span: sp, ..}) =\n                        single_stmt_of_block(then) {\n-                    if e.span.expn_id != sp.expn_id {\n-                        return;\n-                    }\n-                    span_lint_and_then(cx,\n-                                       COLLAPSIBLE_IF,\n-                                       e.span,\n-                                       \"this if statement can be collapsed\", |db| {\n-                        db.span_suggestion(e.span, \"try\",\n-                                           format!(\"if {} && {} {}\",\n-                                                   check_to_string(cx, check),\n-                                                   check_to_string(cx, check_inner),\n-                                                   snippet_block(cx, content.span, \"..\")));\n-                    });\n-                }\n+            if e.span.expn_id != sp.expn_id {\n+                return;\n             }\n+            span_lint_and_then(cx,\n+                               COLLAPSIBLE_IF,\n+                               e.span,\n+                               \"this if statement can be collapsed\", |db| {\n+                db.span_suggestion(e.span, \"try\",\n+                                   format!(\"if {} && {} {}\",\n+                                           check_to_string(cx, check),\n+                                           check_to_string(cx, check_inner),\n+                                           snippet_block(cx, content.span, \"..\")));\n+            });\n         }\n     }\n }"}, {"sha": "15e8d310cd6336e3ea80077f38e548942482cee2", "filename": "src/mut_reference.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/07ace32ac91875be65c40a8957eb0982c027bd16/src%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ace32ac91875be65c40a8957eb0982c027bd16/src%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_reference.rs?ref=07ace32ac91875be65c40a8957eb0982c027bd16", "patch": "@@ -33,27 +33,19 @@ impl LateLintPass for UnnecessaryMutPassed {\n         let borrowed_table = cx.tcx.tables.borrow();\n         match e.node {\n             ExprCall(ref fn_expr, ref arguments) => {\n-                match borrowed_table.node_types.get(&fn_expr.id) {\n-                    Some(function_type) => {\n-                        if let ExprPath(_, ref path) = fn_expr.node {\n-                            check_arguments(cx, &arguments, function_type, &format!(\"{}\", path));\n-                        }\n-                    }\n-                    None => unreachable!(), // A function with unknown type is called.\n-                    // If this happened the compiler would have aborted the\n-                    // compilation long ago.\n-                };\n-\n-\n+                let function_type = borrowed_table.node_types\n+                                                  .get(&fn_expr.id)\n+                                                  .expect(\"A function with an unknown type is called. \\\n+                                                           If this happened, the compiler would have \\\n+                                                           aborted the compilation long ago\");\n+                if let ExprPath(_, ref path) = fn_expr.node {\n+                    check_arguments(cx, &arguments, function_type, &format!(\"{}\", path));\n+                }\n             }\n             ExprMethodCall(ref name, _, ref arguments) => {\n                 let method_call = MethodCall::expr(e.id);\n-                match borrowed_table.method_map.get(&method_call) {\n-                    Some(method_type) => {\n-                        check_arguments(cx, &arguments, method_type.ty, &format!(\"{}\", name.node.as_str()))\n-                    }\n-                    None => unreachable!(), // Just like above, this should never happen.\n-                };\n+                let method_type = borrowed_table.method_map.get(&method_call).expect(\"This should never happen.\");\n+                check_arguments(cx, &arguments, method_type.ty, &format!(\"{}\", name.node.as_str()))\n             }\n             _ => {}\n         }"}, {"sha": "ff0c59ab290d8f6a7e8a7cbe957c8022f0a54b15", "filename": "src/utils.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/07ace32ac91875be65c40a8957eb0982c027bd16/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ace32ac91875be65c40a8957eb0982c027bd16/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=07ace32ac91875be65c40a8957eb0982c027bd16", "patch": "@@ -657,20 +657,10 @@ pub fn is_expn_of(cx: &LateContext, mut span: Span, name: &str) -> Option<Span>\n                 (ei.callee.name(), ei.call_site)\n             })\n         });\n-\n-        return match span_name_span {\n-            Some((mac_name, new_span)) => {\n-                if mac_name.as_str() == name {\n-                    Some(new_span)\n-                }\n-                else {\n-                    span = new_span;\n-                    continue;\n-                }\n-            }\n-            None => {\n-                None\n-            }\n-        };\n+        match span_name_span {\n+            Some((mac_name, new_span)) if mac_name.as_str() == name => return Some(new_span),\n+            None => return None,\n+            Some((_, new_span)) => span = new_span,\n+        }\n     }\n }"}]}