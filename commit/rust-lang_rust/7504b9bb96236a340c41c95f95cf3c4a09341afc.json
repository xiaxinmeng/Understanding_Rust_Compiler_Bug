{"sha": "7504b9bb96236a340c41c95f95cf3c4a09341afc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MDRiOWJiOTYyMzZhMzQwYzQxYzk1Zjk1Y2YzYzRhMDkzNDFhZmM=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-03-25T22:05:49Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-03-25T22:05:49Z"}, "message": "Avoid double-collection for expression nonterminals", "tree": {"sha": "54573f6a3e8b9a56c92e10925fab978fe48e06bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54573f6a3e8b9a56c92e10925fab978fe48e06bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7504b9bb96236a340c41c95f95cf3c4a09341afc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmBdCT0ACgkQtAh+UQ6Y\nsWQHRA//XKD2slhbVU+GGYNkCtS5GW6nh6uBim6lsx/EUAUbp9uTHwGh/GAxfGcD\nzcz0U23Dp5FgrVDSjgD9eSfBN2HkDd5tWh20lyvVjpr8RL3BJjGsu4Mut3UI/KYm\nOflyQFBbSILxob9vadrDj8R1rwO8om8yhcvp5ERuej6B13129oM0C3T0KElb6xA1\n98zfTvCIAJiVKNyoEShoA0XlBuvbbWW5tcjGELnCfUpGkEKG+5/NeBhnSo1HaeUZ\nlIQAZymZrOzUf1ub0BNYPM6E8rCUiBPvC1CZVT+X3k+ezAiXqdAof5Oc+C71BlKF\n8vWSm7ZchkOSKWHvhLTHd424Pflcb0qKoKltedq8KQIRQMSZYK7Kcbak6kwhOVg1\n+hI5F8aTkGJR2eSwJVOcKM+S72XtkijgaU1gVmci6j8LFTkZr19NQngjWh4OKJmb\nv4zpZdRq+7qJvu7dZq5VfJC1+41geCICIW4uf3nJLj867wrNbXYg/4Dz3eP26CtD\n1IUd+mZInkZrq8uEGklu/mG4xf6LiuW5ky4snoR6OrbMtpUL+5B3qs39Y6W9vJzU\nKt1wyNd1WBhLZmTvZEEa+9DOqF80kQHGdNdQ4rd/xr/8997k/HFIf5bmGs1se7Rm\ncNI2GEZE6Mtysvba656iy1Hf9d7fNO29TRmfoQFqcKz/CT8ANg0=\n=JOy+\n-----END PGP SIGNATURE-----", "payload": "tree 54573f6a3e8b9a56c92e10925fab978fe48e06bb\nparent fe60f19f7e98af78526364563fa6b40825fa97a8\nauthor Aaron Hill <aa1ronham@gmail.com> 1616709949 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1616709949 -0400\n\nAvoid double-collection for expression nonterminals\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7504b9bb96236a340c41c95f95cf3c4a09341afc", "html_url": "https://github.com/rust-lang/rust/commit/7504b9bb96236a340c41c95f95cf3c4a09341afc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7504b9bb96236a340c41c95f95cf3c4a09341afc/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe60f19f7e98af78526364563fa6b40825fa97a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe60f19f7e98af78526364563fa6b40825fa97a8", "html_url": "https://github.com/rust-lang/rust/commit/fe60f19f7e98af78526364563fa6b40825fa97a8"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "fe190bfe9d981905df8a756f8555b9f497881a0c", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7504b9bb96236a340c41c95f95cf3c4a09341afc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7504b9bb96236a340c41c95f95cf3c4a09341afc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=7504b9bb96236a340c41c95f95cf3c4a09341afc", "patch": "@@ -92,6 +92,21 @@ impl<'a> Parser<'a> {\n         self.parse_expr_res(Restrictions::empty(), None)\n     }\n \n+    /// Parses an expression, forcing tokens to be collected\n+    pub fn parse_expr_force_collect(&mut self) -> PResult<'a, P<Expr>> {\n+        // If we have outer attributes, then the call to `collect_tokens_trailing_token`\n+        // will be made for us.\n+        if matches!(self.token.kind, TokenKind::Pound | TokenKind::DocComment(..)) {\n+            self.parse_expr()\n+        } else {\n+            // If we don't have outer attributes, then we need to ensure\n+            // that collection happens by using `collect_tokens_no_attrs`.\n+            // Expression don't support custom inner attributes, so `parse_expr`\n+            // will never try to collect tokens if we don't have outer attributes.\n+            self.collect_tokens_no_attrs(|this| this.parse_expr())\n+        }\n+    }\n+\n     pub(super) fn parse_anon_const_expr(&mut self) -> PResult<'a, AnonConst> {\n         self.parse_expr().map(|value| AnonConst { id: DUMMY_NODE_ID, value })\n     }"}, {"sha": "f0ee76d328c40813c7b82c4e493d852db4385d5a", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7504b9bb96236a340c41c95f95cf3c4a09341afc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7504b9bb96236a340c41c95f95cf3c4a09341afc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=7504b9bb96236a340c41c95f95cf3c4a09341afc", "patch": "@@ -987,7 +987,7 @@ impl<'a> Parser<'a> {\n                     }\n \n                     // Collect tokens because they are used during lowering to HIR.\n-                    let expr = self.collect_tokens_no_attrs(|this| this.parse_expr())?;\n+                    let expr = self.parse_expr_force_collect()?;\n                     let span = expr.span;\n \n                     match &expr.kind {"}, {"sha": "0c49d10358356148945116e9bd56720bbf23ff92", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7504b9bb96236a340c41c95f95cf3c4a09341afc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7504b9bb96236a340c41c95f95cf3c4a09341afc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=7504b9bb96236a340c41c95f95cf3c4a09341afc", "patch": "@@ -128,22 +128,7 @@ impl<'a> Parser<'a> {\n                 })?)\n             }\n \n-            // If there are attributes present, then `parse_expr` will end up collecting tokens,\n-            // turning the outer `collect_tokens_no_attrs` into a no-op due to the already present\n-            // tokens. If there are *not* attributes present, then the outer\n-            // `collect_tokens_no_attrs` will ensure that we will end up collecting tokens for the\n-            // expressions.\n-            //\n-            // This is less efficient than it could be, since the outer `collect_tokens_no_attrs`\n-            // still needs to snapshot the `TokenCursor` before calling `parse_expr`, even when\n-            // `parse_expr` will end up collecting tokens. Ideally, this would work more like\n-            // `parse_item`, and take in a `ForceCollect` parameter. However, this would require\n-            // adding a `ForceCollect` parameter in a bunch of places in expression parsing\n-            // for little gain. If the perf impact from this turns out to be noticeable, we should\n-            // revisit this apporach.\n-            NonterminalKind::Expr => {\n-                token::NtExpr(self.collect_tokens_no_attrs(|this| this.parse_expr())?)\n-            }\n+            NonterminalKind::Expr => token::NtExpr(self.parse_expr_force_collect()?),\n             NonterminalKind::Literal => {\n                 // The `:literal` matcher does not support attributes\n                 token::NtLiteral("}]}