{"sha": "dc2c2603c61fc5513ec05b9835000b4d8942c3f7", "node_id": "C_kwDOAAsO6NoAKGRjMmMyNjAzYzYxZmM1NTEzZWMwNWI5ODM1MDAwYjRkODk0MmMzZjc", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-11-04T07:51:45Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-11-04T07:51:45Z"}, "message": "Add more text and examples to `carrying_{add|mul}\"", "tree": {"sha": "e2c9973a9ec28838bb0c0b5964760f0bebe1118b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2c9973a9ec28838bb0c0b5964760f0bebe1118b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc2c2603c61fc5513ec05b9835000b4d8942c3f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc2c2603c61fc5513ec05b9835000b4d8942c3f7", "html_url": "https://github.com/rust-lang/rust/commit/dc2c2603c61fc5513ec05b9835000b4d8942c3f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc2c2603c61fc5513ec05b9835000b4d8942c3f7/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e60e19bc6553ba02b8677ab7e397af738c076c8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e60e19bc6553ba02b8677ab7e397af738c076c8e", "html_url": "https://github.com/rust-lang/rust/commit/e60e19bc6553ba02b8677ab7e397af738c076c8e"}], "stats": {"total": 78, "additions": 63, "deletions": 15}, "files": [{"sha": "9861530c19443edcaf8421357ac9c291f4bad448", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 48, "deletions": 15, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/dc2c2603c61fc5513ec05b9835000b4d8942c3f7/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2c2603c61fc5513ec05b9835000b4d8942c3f7/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=dc2c2603c61fc5513ec05b9835000b4d8942c3f7", "patch": "@@ -94,7 +94,13 @@ depending on the target pointer size.\n }\n \n macro_rules! widening_impl {\n-    ($SelfT:ty, $WideT:ty, $BITS:literal) => {\n+    ($SelfT:ty, $WideT:ty, $BITS:literal, unsigned) => {\n+        widening_impl!($SelfT, $WideT, $BITS, \"\");\n+    };\n+    ($SelfT:ty, $WideT:ty, $BITS:literal, signed) => {\n+        widening_impl!($SelfT, $WideT, $BITS, \"# //\");\n+    };\n+    ($SelfT:ty, $WideT:ty, $BITS:literal, $AdaptiveTestPrefix:literal) => {\n         /// Calculates the complete product `self * rhs` without the possibility to overflow.\n         ///\n         /// This returns the low-order (wrapping) bits and the high-order (overflow) bits\n@@ -148,6 +154,33 @@ macro_rules! widening_impl {\n         /// assert_eq!(5u32.carrying_mul(2, 10), (20, 0));\n         /// assert_eq!(1_000_000_000u32.carrying_mul(10, 0), (1410065408, 2));\n         /// assert_eq!(1_000_000_000u32.carrying_mul(10, 10), (1410065418, 2));\n+        #[doc = concat!($AdaptiveTestPrefix, \"assert_eq!(\",\n+            stringify!($SelfT), \"::MAX.carrying_mul(\", stringify!($SelfT), \"::MAX, \", stringify!($SelfT), \"::MAX), \",\n+            \"(0, \", stringify!($SelfT), \"::MAX));\"\n+        )]\n+        /// ```\n+        ///\n+        /// If `carry` is zero, this is similar to [`overflowing_mul`](Self::overflowing_mul),\n+        /// except that it gives the value of the overflow instead of just whether one happened:\n+        ///\n+        /// ```\n+        /// #![feature(bigint_helper_methods)]\n+        /// let r = u8::carrying_mul(7, 13, 0);\n+        /// assert_eq!((r.0, r.1 != 0), u8::overflowing_mul(7, 13));\n+        /// let r = u8::carrying_mul(13, 42, 0);\n+        /// assert_eq!((r.0, r.1 != 0), u8::overflowing_mul(13, 42));\n+        /// ```\n+        ///\n+        /// The value of the first field in the returned tuple matches what you'd get\n+        /// by combining the [`wrapping_mul`](Self::wrapping_mul) and\n+        /// [`wrapping_add`](Self::wrapping_add) methods:\n+        ///\n+        /// ```\n+        /// #![feature(bigint_helper_methods)]\n+        /// assert_eq!(\n+        ///     789_u16.carrying_mul(456, 123).0,\n+        ///     789_u16.wrapping_mul(456).wrapping_add(123),\n+        /// );\n         /// ```\n         #[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]\n         #[rustc_const_unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]\n@@ -168,29 +201,29 @@ macro_rules! widening_impl {\n \n #[lang = \"i8\"]\n impl i8 {\n-    widening_impl! { i8, i16, 8 }\n+    widening_impl! { i8, i16, 8, signed }\n     int_impl! { i8, i8, u8, 8, 7, -128, 127, 2, \"-0x7e\", \"0xa\", \"0x12\", \"0x12\", \"0x48\",\n     \"[0x12]\", \"[0x12]\", \"\", \"\" }\n }\n \n #[lang = \"i16\"]\n impl i16 {\n-    widening_impl! { i16, i32, 16 }\n+    widening_impl! { i16, i32, 16, signed }\n     int_impl! { i16, i16, u16, 16, 15, -32768, 32767, 4, \"-0x5ffd\", \"0x3a\", \"0x1234\", \"0x3412\",\n     \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n }\n \n #[lang = \"i32\"]\n impl i32 {\n-    widening_impl! { i32, i64, 32 }\n+    widening_impl! { i32, i64, 32, signed }\n     int_impl! { i32, i32, u32, 32, 31, -2147483648, 2147483647, 8, \"0x10000b3\", \"0xb301\",\n     \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\" }\n }\n \n #[lang = \"i64\"]\n impl i64 {\n-    widening_impl! { i64, i128, 64 }\n+    widening_impl! { i64, i128, 64, signed }\n     int_impl! { i64, i64, u64, 64, 63, -9223372036854775808, 9223372036854775807, 12,\n     \"0xaa00000000006e1\", \"0x6e10aa\", \"0x1234567890123456\", \"0x5634129078563412\",\n     \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n@@ -212,7 +245,7 @@ impl i128 {\n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"isize\"]\n impl isize {\n-    widening_impl! { isize, i32, 16 }\n+    widening_impl! { isize, i32, 16, signed }\n     int_impl! { isize, i16, usize, 16, 15, -32768, 32767, 4, \"-0x5ffd\", \"0x3a\", \"0x1234\",\n     \"0x3412\", \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n     usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n@@ -221,7 +254,7 @@ impl isize {\n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"isize\"]\n impl isize {\n-    widening_impl! { isize, i64, 32 }\n+    widening_impl! { isize, i64, 32, signed }\n     int_impl! { isize, i32, usize, 32, 31, -2147483648, 2147483647, 8, \"0x10000b3\", \"0xb301\",\n     \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78]\",\n@@ -231,7 +264,7 @@ impl isize {\n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"isize\"]\n impl isize {\n-    widening_impl! { isize, i128, 64 }\n+    widening_impl! { isize, i128, 64, signed }\n     int_impl! { isize, i64, usize, 64, 63, -9223372036854775808, 9223372036854775807,\n     12, \"0xaa00000000006e1\", \"0x6e10aa\",  \"0x1234567890123456\", \"0x5634129078563412\",\n      \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n@@ -244,7 +277,7 @@ const ASCII_CASE_MASK: u8 = 0b0010_0000;\n \n #[lang = \"u8\"]\n impl u8 {\n-    widening_impl! { u8, u16, 8 }\n+    widening_impl! { u8, u16, 8, unsigned }\n     uint_impl! { u8, u8, i8, 8, 255, 2, \"0x82\", \"0xa\", \"0x12\", \"0x12\", \"0x48\", \"[0x12]\",\n     \"[0x12]\", \"\", \"\" }\n \n@@ -793,21 +826,21 @@ impl u8 {\n \n #[lang = \"u16\"]\n impl u16 {\n-    widening_impl! { u16, u32, 16 }\n+    widening_impl! { u16, u32, 16, unsigned }\n     uint_impl! { u16, u16, i16, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n     \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n }\n \n #[lang = \"u32\"]\n impl u32 {\n-    widening_impl! { u32, u64, 32 }\n+    widening_impl! { u32, u64, 32, unsigned }\n     uint_impl! { u32, u32, i32, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n     \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\" }\n }\n \n #[lang = \"u64\"]\n impl u64 {\n-    widening_impl! { u64, u128, 64 }\n+    widening_impl! { u64, u128, 64, unsigned }\n     uint_impl! { u64, u64, i64, 64, 18446744073709551615, 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n     \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n     \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n@@ -830,15 +863,15 @@ impl u128 {\n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"usize\"]\n impl usize {\n-    widening_impl! { usize, u32, 16 }\n+    widening_impl! { usize, u32, 16, unsigned }\n     uint_impl! { usize, u16, isize, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n     \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n     usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"usize\"]\n impl usize {\n-    widening_impl! { usize, u64, 32 }\n+    widening_impl! { usize, u64, 32, unsigned }\n     uint_impl! { usize, u32, isize, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n     \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\",\n     usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n@@ -847,7 +880,7 @@ impl usize {\n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"usize\"]\n impl usize {\n-    widening_impl! { usize, u128, 64 }\n+    widening_impl! { usize, u128, 64, unsigned }\n     uint_impl! { usize, u64, isize, 64, 18446744073709551615, 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n     \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n     \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\","}, {"sha": "a15eabf7966d8ab2fd7cdc18ea7c6a535b7c7354", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dc2c2603c61fc5513ec05b9835000b4d8942c3f7/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2c2603c61fc5513ec05b9835000b4d8942c3f7/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=dc2c2603c61fc5513ec05b9835000b4d8942c3f7", "patch": "@@ -1504,6 +1504,8 @@ macro_rules! uint_impl {\n         /// additional bit of overflow. This allows for chaining together multiple additions\n         /// to create \"big integers\" which represent larger values.\n         ///\n+        #[doc = concat!(\"This can be thought of as a \", stringify!($BITS), \"-bit \\\"full adder\\\", in the electronics sense.\")]\n+        ///\n         /// # Examples\n         ///\n         /// Basic usage\n@@ -1513,7 +1515,20 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".carrying_add(2, false), (7, false));\")]\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".carrying_add(2, true), (8, false));\")]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(1, false), (0, true));\")]\n+        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(0, true), (0, true));\")]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(1, true), (1, true));\")]\n+        #[doc = concat!(\"assert_eq!(\",\n+            stringify!($SelfT), \"::MAX.carrying_add(\", stringify!($SelfT), \"::MAX, true), \",\n+            \"(\", stringify!($SelfT), \"::MAX, true));\"\n+        )]\n+        /// ```\n+        ///\n+        /// If `carry` is false, this method is equivalent to [`overflowing_add`](Self::overflowing_add):\n+        ///\n+        /// ```\n+        /// #![feature(bigint_helper_methods)]\n+        #[doc = concat!(\"assert_eq!(5_\", stringify!($SelfT), \".carrying_add(2, false), 5_\", stringify!($SelfT), \".overflowing_add(2));\")]\n+        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(1, false), \", stringify!($SelfT), \"::MAX.overflowing_add(1));\")]\n         /// ```\n         #[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]\n         #[rustc_const_unstable(feature = \"const_bigint_helper_methods\", issue = \"85532\")]"}]}