{"sha": "77f0f4a624fbff057514d6ee1bc20cf49145aa50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZjBmNGE2MjRmYmZmMDU3NTE0ZDZlZTFiYzIwY2Y0OTE0NWFhNTA=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-02T10:21:09Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-26T18:22:34Z"}, "message": "Avoid repeating parent", "tree": {"sha": "c695fc1efb196e773b5584dc1ac00247a98c5f0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c695fc1efb196e773b5584dc1ac00247a98c5f0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77f0f4a624fbff057514d6ee1bc20cf49145aa50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77f0f4a624fbff057514d6ee1bc20cf49145aa50", "html_url": "https://github.com/rust-lang/rust/commit/77f0f4a624fbff057514d6ee1bc20cf49145aa50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77f0f4a624fbff057514d6ee1bc20cf49145aa50/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff014a3a10c3ae2bcf52744736d7c0e3f095612a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff014a3a10c3ae2bcf52744736d7c0e3f095612a", "html_url": "https://github.com/rust-lang/rust/commit/ff014a3a10c3ae2bcf52744736d7c0e3f095612a"}], "stats": {"total": 36, "additions": 11, "deletions": 25}, "files": [{"sha": "4551363136dfe27a9a879f24f01d351ba7474990", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/77f0f4a624fbff057514d6ee1bc20cf49145aa50/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f0f4a624fbff057514d6ee1bc20cf49145aa50/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=77f0f4a624fbff057514d6ee1bc20cf49145aa50", "patch": "@@ -43,7 +43,6 @@ use rustc_front::hir::{PathListIdent, PathListMod, StmtDecl};\n use rustc_front::hir::{Variant, ViewPathGlob, ViewPathList, ViewPathSimple};\n use rustc_front::intravisit::{self, Visitor};\n \n-use std::mem::replace;\n use std::ops::{Deref, DerefMut};\n \n struct GraphBuilder<'a, 'b: 'a, 'tcx: 'b> {\n@@ -122,7 +121,8 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n     }\n \n     /// Constructs the reduced graph for one item.\n-    fn build_reduced_graph_for_item(&mut self, item: &Item, parent: Module<'b>) -> Module<'b> {\n+    fn build_reduced_graph_for_item(&mut self, item: &Item, parent_ref: &mut Module<'b>) {\n+        let parent = *parent_ref;\n         let name = item.name;\n         let sp = item.span;\n         let is_public = item.vis == hir::Public;\n@@ -242,7 +242,6 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                                     is_prelude);\n                     }\n                 }\n-                parent\n             }\n \n             ItemExternCrate(_) => {\n@@ -260,7 +259,6 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n                     self.build_reduced_graph_for_external_crate(module);\n                 }\n-                parent\n             }\n \n             ItemMod(..) => {\n@@ -269,34 +267,30 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 let module = self.new_module(parent_link, Some(def), false, is_public);\n                 self.define(parent, name, TypeNS, (module, sp));\n                 parent.module_children.borrow_mut().insert(item.id, module);\n-                module\n+                *parent_ref = module;\n             }\n \n-            ItemForeignMod(..) => parent,\n+            ItemForeignMod(..) => {}\n \n             // These items live in the value namespace.\n             ItemStatic(_, m, _) => {\n                 let mutbl = m == hir::MutMutable;\n                 let def = Def::Static(self.ast_map.local_def_id(item.id), mutbl);\n                 self.define(parent, name, ValueNS, (def, sp, modifiers));\n-                parent\n             }\n             ItemConst(_, _) => {\n                 let def = Def::Const(self.ast_map.local_def_id(item.id));\n                 self.define(parent, name, ValueNS, (def, sp, modifiers));\n-                parent\n             }\n             ItemFn(_, _, _, _, _, _) => {\n                 let def = Def::Fn(self.ast_map.local_def_id(item.id));\n                 self.define(parent, name, ValueNS, (def, sp, modifiers));\n-                parent\n             }\n \n             // These items live in the type namespace.\n             ItemTy(..) => {\n                 let def = Def::TyAlias(self.ast_map.local_def_id(item.id));\n                 self.define(parent, name, TypeNS, (def, sp, modifiers));\n-                parent\n             }\n \n             ItemEnum(ref enum_definition, _) => {\n@@ -315,7 +309,6 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     self.build_reduced_graph_for_variant(variant, item_def_id,\n                                                          module, variant_modifiers);\n                 }\n-                parent\n             }\n \n             // These items live in both the type and value namespaces.\n@@ -338,12 +331,9 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                             .collect();\n                 let item_def_id = self.ast_map.local_def_id(item.id);\n                 self.structs.insert(item_def_id, field_names);\n-\n-                parent\n             }\n \n-            ItemDefaultImpl(_, _) |\n-            ItemImpl(..) => parent,\n+            ItemDefaultImpl(_, _) | ItemImpl(..) => {}\n \n             ItemTrait(_, _, _, ref items) => {\n                 let def_id = self.ast_map.local_def_id(item.id);\n@@ -368,8 +358,6 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n                     self.trait_item_map.insert((item.name, def_id), item_def_id);\n                 }\n-\n-                parent\n             }\n         }\n     }\n@@ -420,7 +408,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n         self.define(parent, name, ValueNS, (def, foreign_item.span, modifiers));\n     }\n \n-    fn build_reduced_graph_for_block(&mut self, block: &Block, parent: Module<'b>) -> Module<'b> {\n+    fn build_reduced_graph_for_block(&mut self, block: &Block, parent: &mut Module<'b>) {\n         if self.block_needs_anonymous_module(block) {\n             let block_id = block.id;\n \n@@ -431,9 +419,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n             let parent_link = BlockParentLink(parent, block_id);\n             let new_module = self.new_module(parent_link, None, false, false);\n             parent.module_children.borrow_mut().insert(block_id, new_module);\n-            new_module\n-        } else {\n-            parent\n+            *parent = new_module;\n         }\n     }\n \n@@ -610,8 +596,8 @@ impl<'a, 'b, 'v, 'tcx> Visitor<'v> for BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n     }\n \n     fn visit_item(&mut self, item: &Item) {\n-        let p = self.builder.build_reduced_graph_for_item(item, &self.parent);\n-        let old_parent = replace(&mut self.parent, p);\n+        let old_parent = self.parent;\n+        self.builder.build_reduced_graph_for_item(item, &mut self.parent);\n         intravisit::walk_item(self, item);\n         self.parent = old_parent;\n     }\n@@ -621,8 +607,8 @@ impl<'a, 'b, 'v, 'tcx> Visitor<'v> for BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n     }\n \n     fn visit_block(&mut self, block: &Block) {\n-        let np = self.builder.build_reduced_graph_for_block(block, &self.parent);\n-        let old_parent = replace(&mut self.parent, np);\n+        let old_parent = self.parent;\n+        self.builder.build_reduced_graph_for_block(block, &mut self.parent);\n         intravisit::walk_block(self, block);\n         self.parent = old_parent;\n     }"}]}