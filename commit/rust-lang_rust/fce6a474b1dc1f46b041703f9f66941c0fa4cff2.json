{"sha": "fce6a474b1dc1f46b041703f9f66941c0fa4cff2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZTZhNDc0YjFkYzFmNDZiMDQxNzAzZjlmNjY5NDFjMGZhNGNmZjI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-15T00:46:45Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-15T02:04:32Z"}, "message": "rustc: Eliminate metadata's dependency on astencode", "tree": {"sha": "0809d1692c2009b6ebe2b8245fc76650a1917f80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0809d1692c2009b6ebe2b8245fc76650a1917f80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fce6a474b1dc1f46b041703f9f66941c0fa4cff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fce6a474b1dc1f46b041703f9f66941c0fa4cff2", "html_url": "https://github.com/rust-lang/rust/commit/fce6a474b1dc1f46b041703f9f66941c0fa4cff2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fce6a474b1dc1f46b041703f9f66941c0fa4cff2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c864e9de0d3b09bc682e95d067883216faa17aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c864e9de0d3b09bc682e95d067883216faa17aa", "html_url": "https://github.com/rust-lang/rust/commit/5c864e9de0d3b09bc682e95d067883216faa17aa"}], "stats": {"total": 97, "additions": 56, "deletions": 41}, "files": [{"sha": "27827ba070c982e5ef603ea320ad6fbbabb55518", "filename": "src/rustc/metadata.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fce6a474b1dc1f46b041703f9f66941c0fa4cff2/src%2Frustc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fce6a474b1dc1f46b041703f9f66941c0fa4cff2/src%2Frustc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata.rs?ref=fce6a474b1dc1f46b041703f9f66941c0fa4cff2", "patch": "@@ -1,16 +1,3 @@\n-export maps;\n-\n-// Auxiliary maps of things to be encoded\n-type maps = {\n-    mutbl_map: middle::borrowck::mutbl_map,\n-    copy_map: middle::alias::copy_map,\n-    last_uses: middle::last_use::last_uses,\n-    impl_map: middle::resolve::impl_map,\n-    method_map: middle::typeck::method_map,\n-    vtable_map: middle::typeck::vtable_map,\n-    spill_map: middle::last_use::spill_map\n-};\n-\n // Define the rustc API's that the metadata module has access to\n // Over time we will reduce these dependencies and, once metadata has\n // no dependencies on rustc it can move into its own crate.\n@@ -32,8 +19,6 @@ mod middle {\n     export borrowck;\n     import alias = middle_::alias;\n     export alias;\n-    import astencode = middle_::astencode;\n-    export astencode;\n }\n \n mod front {"}, {"sha": "333ad2806c407d434127f5d65f3f53fde1e3f6bf", "filename": "src/rustc/metadata/csearch.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fce6a474b1dc1f46b041703f9f66941c0fa4cff2/src%2Frustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fce6a474b1dc1f46b041703f9f66941c0fa4cff2/src%2Frustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcsearch.rs?ref=fce6a474b1dc1f46b041703f9f66941c0fa4cff2", "patch": "@@ -98,11 +98,13 @@ enum found_ast {\n // Finds the AST for this item in the crate metadata, if any.  If the item was\n // not marked for inlining, then the AST will not be present and hence none\n // will be returned.\n-fn maybe_get_item_ast(tcx: ty::ctxt, maps: maps, def: ast::def_id)\n+fn maybe_get_item_ast(tcx: ty::ctxt, def: ast::def_id,\n+                      decode_inlined_item: decoder::decode_inlined_item)\n     -> found_ast {\n     let cstore = tcx.sess.cstore;\n     let cdata = cstore::get_crate_data(cstore, def.crate);\n-    decoder::maybe_get_item_ast(cdata, tcx, maps, def.node)\n+    decoder::maybe_get_item_ast(cdata, tcx, def.node,\n+                                decode_inlined_item)\n }\n \n fn get_enum_variants(tcx: ty::ctxt, def: ast::def_id) -> [ty::variant_info] {"}, {"sha": "b91deaddba7b9b28dc7c26fa566b632325131095", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fce6a474b1dc1f46b041703f9f66941c0fa4cff2/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fce6a474b1dc1f46b041703f9f66941c0fa4cff2/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=fce6a474b1dc1f46b041703f9f66941c0fa4cff2", "patch": "@@ -15,7 +15,6 @@ import syntax::print::pprust;\n import cmd=cstore::crate_metadata;\n import util::ppaux::ty_to_str;\n import ebml::deserializer;\n-import middle::astencode;\n \n export get_class_fields;\n export get_symbol;\n@@ -41,6 +40,7 @@ export get_item_path;\n export maybe_find_item; // sketchy\n export item_type; // sketchy\n export maybe_get_item_ast;\n+export decode_inlined_item;\n \n // Used internally by astencode:\n export translate_def_id;\n@@ -339,19 +339,27 @@ fn get_item_path(cdata: cmd, id: ast::node_id) -> ast_map::path {\n     item_path(lookup_item(id, cdata.data))\n }\n \n-fn maybe_get_item_ast(cdata: cmd, tcx: ty::ctxt, maps: maps,\n-                      id: ast::node_id) -> csearch::found_ast {\n+type decode_inlined_item = fn(\n+    cdata: cstore::crate_metadata,\n+    tcx: ty::ctxt,\n+    path: ast_map::path,\n+    par_doc: ebml::doc) -> option<ast::inlined_item>;\n+\n+fn maybe_get_item_ast(cdata: cmd, tcx: ty::ctxt,\n+                      id: ast::node_id,\n+                      decode_inlined_item: decode_inlined_item\n+                     ) -> csearch::found_ast {\n     #debug(\"Looking up item: %d\", id);\n     let item_doc = lookup_item(id, cdata.data);\n     let path = vec::init(item_path(item_doc));\n-    alt astencode::decode_inlined_item(cdata, tcx, maps, path, item_doc) {\n+    alt decode_inlined_item(cdata, tcx, path, item_doc) {\n       some(ii) { csearch::found(ii) }\n       none {\n         alt item_parent_item(item_doc) {\n           some(did) {\n             let did = translate_def_id(cdata, did);\n             let parent_item = lookup_item(did.node, cdata.data);\n-            alt astencode::decode_inlined_item(cdata, tcx, maps, path,\n+            alt decode_inlined_item(cdata, tcx, path,\n                                                parent_item) {\n               some(ii) { csearch::found_parent(did, ii) }\n               none { csearch::not_found }"}, {"sha": "a1ba3ad841dff1092e48411f1072cc8ad97a99cc", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fce6a474b1dc1f46b041703f9f66941c0fa4cff2/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fce6a474b1dc1f46b041703f9f66941c0fa4cff2/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=fce6a474b1dc1f46b041703f9f66941c0fa4cff2", "patch": "@@ -44,23 +44,23 @@ type encode_parms = {\n     tcx: ty::ctxt,\n     reachable: hashmap<ast::node_id, ()>,\n     exp_map: resolve::exp_map,\n+    impl_map: resolve::impl_map,\n     item_symbols: hashmap<ast::node_id, str>,\n     discrim_symbols: hashmap<ast::node_id, str>,\n     link_meta: back::link::link_meta,\n     cstore: cstore::cstore,\n-    maps: maps,\n     encode_inlined_item: encode_inlined_item\n };\n \n enum encode_ctxt = {\n     tcx: ty::ctxt,\n     reachable: hashmap<ast::node_id, ()>,\n     exp_map: resolve::exp_map,\n+    impl_map: resolve::impl_map,\n     item_symbols: hashmap<ast::node_id, str>,\n     discrim_symbols: hashmap<ast::node_id, str>,\n     link_meta: back::link::link_meta,\n     cstore: cstore::cstore,\n-    maps: maps,\n     encode_inlined_item: encode_inlined_item,\n     type_abbrevs: abbrev_map\n };\n@@ -396,7 +396,7 @@ fn encode_info_for_mod(ecx: @encode_ctxt, ebml_w: ebml::writer, md: _mod,\n     encode_def_id(ebml_w, local_def(id));\n     encode_family(ebml_w, 'm');\n     encode_name(ebml_w, name);\n-    alt ecx.maps.impl_map.get(id) {\n+    alt ecx.impl_map.get(id) {\n       list::cons(impls, @list::nil) {\n         for vec::each(*impls) {|i|\n             if ast_util::is_exported(i.ident, md) {\n@@ -1056,11 +1056,11 @@ fn encode_metadata(parms: encode_parms, crate: @crate) -> [u8] {\n         tcx: parms.tcx,\n         reachable: parms.reachable,\n         exp_map: parms.exp_map,\n+        impl_map: parms.impl_map,\n         item_symbols: parms.item_symbols,\n         discrim_symbols: parms.discrim_symbols,\n         link_meta: parms.link_meta,\n         cstore: parms.cstore,\n-        maps: parms.maps,\n         encode_inlined_item: parms.encode_inlined_item,\n         type_abbrevs: ty::new_ty_hash()\n      });"}, {"sha": "634a3c8a9cf948ef1e69830f34f20a7268be002d", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fce6a474b1dc1f46b041703f9f66941c0fa4cff2/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fce6a474b1dc1f46b041703f9f66941c0fa4cff2/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=fce6a474b1dc1f46b041703f9f66941c0fa4cff2", "patch": "@@ -30,7 +30,6 @@ import middle::freevars::{freevar_entry,\n import c = metadata::common;\n import e = metadata::encoder;\n import cstore = metadata::cstore;\n-import metadata::maps;\n import metadata::encoder;\n import metadata::decoder;\n import metadata::tyencode;\n@@ -43,9 +42,21 @@ import syntax::codemap;\n import syntax::parse;\n import syntax::print::pprust;\n \n+export maps;\n export encode_inlined_item;\n export decode_inlined_item;\n \n+// Auxiliary maps of things to be encoded\n+type maps = {\n+    mutbl_map: middle::borrowck::mutbl_map,\n+    copy_map: middle::alias::copy_map,\n+    last_uses: middle::last_use::last_uses,\n+    impl_map: middle::resolve::impl_map,\n+    method_map: middle::typeck::method_map,\n+    vtable_map: middle::typeck::vtable_map,\n+    spill_map: middle::last_use::spill_map\n+};\n+\n type decode_ctxt = @{\n     cdata: cstore::crate_metadata,\n     tcx: ty::ctxt,\n@@ -68,7 +79,8 @@ iface tr {\n fn encode_inlined_item(ecx: @e::encode_ctxt,\n                        ebml_w: ebml::writer,\n                        path: ast_map::path,\n-                       ii: ast::inlined_item) {\n+                       ii: ast::inlined_item,\n+                       maps: maps) {\n     #debug[\"> Encoding inlined item: %s::%s (%u)\",\n            ast_map::path_to_str(path), ii.ident(),\n            ebml_w.writer.tell()];\n@@ -77,7 +89,7 @@ fn encode_inlined_item(ecx: @e::encode_ctxt,\n     ebml_w.wr_tag(c::tag_ast as uint) {||\n         encode_id_range(ebml_w, id_range);\n         encode_ast(ebml_w, simplify_ast(ii));\n-        encode_side_tables_for_ii(ecx, ebml_w, ii);\n+        encode_side_tables_for_ii(ecx, maps, ebml_w, ii);\n     }\n \n     #debug[\"< Encoded inlined fn: %s::%s (%u)\",\n@@ -719,19 +731,21 @@ impl writer for ebml::writer {\n }\n \n fn encode_side_tables_for_ii(ecx: @e::encode_ctxt,\n+                             maps: maps,\n                              ebml_w: ebml::writer,\n                              ii: ast::inlined_item) {\n     ebml_w.wr_tag(c::tag_table as uint) {||\n         visit_ids(ii, fn@(id: ast::node_id) {\n             // Note: this will cause a copy of ebml_w, which is bad as\n             // it has mut fields.  But I believe it's harmless since\n             // we generate balanced EBML.\n-            encode_side_tables_for_id(ecx, ebml_w, id)\n+            encode_side_tables_for_id(ecx, maps, ebml_w, id)\n         });\n     }\n }\n \n fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n+                             maps: maps,\n                              ebml_w: ebml::writer,\n                              id: ast::node_id) {\n     let tcx = ecx.tcx;\n@@ -808,25 +822,25 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n     //    }\n     //}\n \n-    option::iter(ecx.maps.mutbl_map.find(id)) {|_m|\n+    option::iter(maps.mutbl_map.find(id)) {|_m|\n         ebml_w.tag(c::tag_table_mutbl) {||\n             ebml_w.id(id);\n         }\n     }\n \n-    option::iter(ecx.maps.copy_map.find(id)) {|_m|\n+    option::iter(maps.copy_map.find(id)) {|_m|\n         ebml_w.tag(c::tag_table_copy) {||\n             ebml_w.id(id);\n         }\n     }\n \n-    option::iter(ecx.maps.spill_map.find(id)) {|_m|\n+    option::iter(maps.spill_map.find(id)) {|_m|\n         ebml_w.tag(c::tag_table_spill) {||\n             ebml_w.id(id);\n         }\n     }\n \n-    option::iter(ecx.maps.last_uses.find(id)) {|m|\n+    option::iter(maps.last_uses.find(id)) {|m|\n         ebml_w.tag(c::tag_table_last_use) {||\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val) {||\n@@ -838,7 +852,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n     // impl_map is not used except when emitting metadata,\n     // don't need to keep it.\n \n-    option::iter(ecx.maps.method_map.find(id)) {|mo|\n+    option::iter(maps.method_map.find(id)) {|mo|\n         ebml_w.tag(c::tag_table_method_map) {||\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val) {||\n@@ -847,7 +861,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n         }\n     }\n \n-    option::iter(ecx.maps.vtable_map.find(id)) {|dr|\n+    option::iter(maps.vtable_map.find(id)) {|dr|\n         ebml_w.tag(c::tag_table_vtable_map) {||\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val) {||"}, {"sha": "b2ffc09acaac499455afe990c6d7b78f930493fb", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fce6a474b1dc1f46b041703f9f66941c0fa4cff2/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fce6a474b1dc1f46b041703f9f66941c0fa4cff2/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=fce6a474b1dc1f46b041703f9f66941c0fa4cff2", "patch": "@@ -2066,7 +2066,10 @@ fn maybe_instantiate_inline(ccx: @crate_ctxt, fn_id: ast::def_id)\n       }\n       some(none) { fn_id } // Not inlinable\n       none { // Not seen yet\n-        alt check csearch::maybe_get_item_ast(ccx.tcx, ccx.maps, fn_id) {\n+        alt check csearch::maybe_get_item_ast(\n+            ccx.tcx, fn_id,\n+            bind astencode::decode_inlined_item(_, _, ccx.maps, _, _)) {\n+\n           csearch::not_found {\n             ccx.external.insert(fn_id, none);\n             fn_id\n@@ -4991,16 +4994,19 @@ fn fill_crate_map(ccx: @crate_ctxt, map: ValueRef) {\n fn crate_ctxt_to_encode_parms(cx: @crate_ctxt)\n     -> encoder::encode_parms {\n \n+    let encode_inlined_item =\n+        bind astencode::encode_inlined_item(_, _, _, _, cx.maps);\n+\n     {\n         tcx: cx.tcx,\n         reachable: cx.reachable,\n         exp_map: cx.exp_map,\n+        impl_map: cx.maps.impl_map,\n         item_symbols: cx.item_symbols,\n         discrim_symbols: cx.discrim_symbols,\n         link_meta: cx.link_meta,\n         cstore: cx.sess.cstore,\n-        maps: cx.maps,\n-        encode_inlined_item: middle::astencode::encode_inlined_item\n+        encode_inlined_item: encode_inlined_item\n     }\n \n }\n@@ -5036,7 +5042,7 @@ fn write_abi_version(ccx: @crate_ctxt) {\n \n fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n                output: str, emap: resolve::exp_map,\n-               maps: metadata::maps)\n+               maps: astencode::maps)\n     -> (ModuleRef, link::link_meta) {\n     let sha = std::sha1::sha1();\n     let link_meta = link::build_link_meta(sess, *crate, output, sha);"}, {"sha": "ca9213205f8c7b5745bc6dac61df15ea8fdf0a8a", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fce6a474b1dc1f46b041703f9f66941c0fa4cff2/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fce6a474b1dc1f46b041703f9f66941c0fa4cff2/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=fce6a474b1dc1f46b041703f9f66941c0fa4cff2", "patch": "@@ -101,7 +101,7 @@ type crate_ctxt = {\n      type_short_names: hashmap<ty::t, str>,\n      all_llvm_symbols: set<str>,\n      tcx: ty::ctxt,\n-     maps: metadata::maps,\n+     maps: astencode::maps,\n      stats: stats,\n      upcalls: @upcall::upcalls,\n      tydesc_type: TypeRef,"}]}