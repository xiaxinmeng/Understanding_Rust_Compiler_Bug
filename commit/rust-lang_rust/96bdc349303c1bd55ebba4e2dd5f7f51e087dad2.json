{"sha": "96bdc349303c1bd55ebba4e2dd5f7f51e087dad2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2YmRjMzQ5MzAzYzFiZDU1ZWJiYTRlMmRkNWY3ZjUxZTA4N2RhZDI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-26T01:03:31Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-26T12:18:12Z"}, "message": "librustc: De-[mut] librustc (remove all mutable arrays). rs=demuting", "tree": {"sha": "6deaf9cf2730ffa014de67de65860b9eb687ab54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6deaf9cf2730ffa014de67de65860b9eb687ab54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2", "html_url": "https://github.com/rust-lang/rust/commit/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24893e8d02d70045254082067c0c6141b7946783", "url": "https://api.github.com/repos/rust-lang/rust/commits/24893e8d02d70045254082067c0c6141b7946783", "html_url": "https://github.com/rust-lang/rust/commit/24893e8d02d70045254082067c0c6141b7946783"}], "stats": {"total": 47, "additions": 22, "deletions": 25}, "files": [{"sha": "96aa41f78091359e19995f822199b5537a35c24d", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=96bdc349303c1bd55ebba4e2dd5f7f51e087dad2", "patch": "@@ -667,8 +667,8 @@ struct Liveness {\n     tcx: ty::ctxt,\n     ir: @mut IrMaps,\n     s: Specials,\n-    successors: ~[mut LiveNode],\n-    users: ~[mut Users],\n+    successors: @mut ~[LiveNode],\n+    users: @mut ~[Users],\n     // The list of node IDs for the nested loop scopes\n     // we're in.\n     loop_scope: DVec<node_id>,\n@@ -684,14 +684,9 @@ fn Liveness(ir: @mut IrMaps, specials: Specials) -> Liveness {\n         ir: ir,\n         tcx: ir.tcx,\n         s: specials,\n-        successors:\n-            vec::cast_to_mut(\n-                vec::from_elem(ir.num_live_nodes,\n-                               invalid_node())),\n-        users:\n-            vec::cast_to_mut(\n-                vec::from_elem(ir.num_live_nodes * ir.num_vars,\n-                               invalid_users())),\n+        successors: @mut vec::from_elem(ir.num_live_nodes, invalid_node()),\n+        users: @mut vec::from_elem(ir.num_live_nodes * ir.num_vars,\n+                                   invalid_users()),\n         loop_scope: DVec(),\n         break_ln: HashMap(),\n         cont_ln: HashMap()\n@@ -916,12 +911,13 @@ impl Liveness {\n \n         let mut changed = false;\n         do self.indices2(ln, succ_ln) |idx, succ_idx| {\n-            changed |= copy_if_invalid(copy self.users[succ_idx].reader,\n-                                       &mut self.users[idx].reader);\n-            changed |= copy_if_invalid(copy self.users[succ_idx].writer,\n-                                       &mut self.users[idx].writer);\n-            if self.users[succ_idx].used && !self.users[idx].used {\n-                self.users[idx].used = true;\n+            let users = &mut *self.users;\n+            changed |= copy_if_invalid(copy users[succ_idx].reader,\n+                                       &mut users[idx].reader);\n+            changed |= copy_if_invalid(copy users[succ_idx].writer,\n+                                       &mut users[idx].writer);\n+            if users[succ_idx].used && !users[idx].used {\n+                users[idx].used = true;\n                 changed = true;\n             }\n         }\n@@ -956,7 +952,8 @@ impl Liveness {\n     // Either read, write, or both depending on the acc bitset\n     fn acc(&self, ln: LiveNode, var: Variable, acc: uint) {\n         let idx = self.idx(ln, var);\n-        let user = &mut self.users[idx];\n+        let users = &mut *self.users;\n+        let user = &mut users[idx];\n \n         if (acc & ACC_WRITE) != 0 {\n             user.reader = invalid_node();\n@@ -970,7 +967,7 @@ impl Liveness {\n         }\n \n         if (acc & ACC_USE) != 0 {\n-            self.users[idx].used = true;\n+            user.used = true;\n         }\n \n         debug!(\"%s accesses[%x] %s: %s\","}, {"sha": "2fc7497f5e33b2cc039c4a728755d3e0e200f3cf", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=96bdc349303c1bd55ebba4e2dd5f7f51e087dad2", "patch": "@@ -51,7 +51,7 @@ pub const use_tydesc: uint = 2u; /* Takes the tydesc, or compares */\n \n pub struct Context {\n     ccx: @CrateContext,\n-    uses: ~[mut type_uses]\n+    uses: @mut ~[type_uses]\n }\n \n pub fn type_uses_for(ccx: @CrateContext, fn_id: def_id, n_tps: uint)\n@@ -72,7 +72,7 @@ pub fn type_uses_for(ccx: @CrateContext, fn_id: def_id, n_tps: uint)\n \n     let cx = Context {\n         ccx: ccx,\n-        uses: vec::cast_to_mut(vec::from_elem(n_tps, 0u))\n+        uses: @mut vec::from_elem(n_tps, 0u)\n     };\n     match ty::get(ty::lookup_item_type(cx.ccx.tcx, fn_id).ty).sty {\n         ty::ty_bare_fn(ty::BareFnTy {sig: ref sig, _}) |\n@@ -90,7 +90,7 @@ pub fn type_uses_for(ccx: @CrateContext, fn_id: def_id, n_tps: uint)\n     }\n \n     if fn_id_loc.crate != local_crate {\n-        let uses = vec::cast_from_mut(copy cx.uses);\n+        let uses = copy *cx.uses;\n         ccx.type_use_cache.insert(fn_id, copy uses);\n         return uses;\n     }\n@@ -175,16 +175,16 @@ pub fn type_uses_for(ccx: @CrateContext, fn_id: def_id, n_tps: uint)\n                                 ccx.tcx.sess.parse_sess.interner)));\n       }\n     }\n-    let uses = vec::cast_from_mut(copy cx.uses);\n-    // XXX: Bad copy, use @vec instead?\n+    // XXX: Bad copies, use @vec instead?\n+    let uses = copy *cx.uses;\n     ccx.type_use_cache.insert(fn_id, copy uses);\n     uses\n }\n \n pub fn type_needs(cx: Context, use_: uint, ty: ty::t) {\n     // Optimization -- don't descend type if all params already have this use\n-    for vec::each_mut(cx.uses) |u| {\n-        if *u & use_ != use_ {\n+    for uint::range(0, cx.uses.len()) |i| {\n+        if cx.uses[i] & use_ != use_ {\n             type_needs_inner(cx, use_, ty, @Nil);\n             return;\n         }"}]}