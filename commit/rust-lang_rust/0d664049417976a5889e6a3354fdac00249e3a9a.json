{"sha": "0d664049417976a5889e6a3354fdac00249e3a9a", "node_id": "C_kwDOAAsO6NoAKDBkNjY0MDQ5NDE3OTc2YTU4ODllNmEzMzU0ZmRhYzAwMjQ5ZTNhOWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-06T23:04:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-06T23:04:20Z"}, "message": "Auto merge of #8630 - Jarcho:forget_non_drop, r=Manishearth\n\nAdd lints `drop_non_drop` and `forget_non_drop`\n\nfixes #1897\n\nchangelog: Add lints `drop_non_drop` and `forget_non_drop`", "tree": {"sha": "2c104c4b7a3000c8a5cc052ef48ffb7e7fbc3c02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c104c4b7a3000c8a5cc052ef48ffb7e7fbc3c02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d664049417976a5889e6a3354fdac00249e3a9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d664049417976a5889e6a3354fdac00249e3a9a", "html_url": "https://github.com/rust-lang/rust/commit/0d664049417976a5889e6a3354fdac00249e3a9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d664049417976a5889e6a3354fdac00249e3a9a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "409a936f3b65db06bf0a9d167afcdc7bfafad47f", "url": "https://api.github.com/repos/rust-lang/rust/commits/409a936f3b65db06bf0a9d167afcdc7bfafad47f", "html_url": "https://github.com/rust-lang/rust/commit/409a936f3b65db06bf0a9d167afcdc7bfafad47f"}, {"sha": "5cd711b4f18f674dbdbd794d4ac32a0aeb0ef6f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cd711b4f18f674dbdbd794d4ac32a0aeb0ef6f2", "html_url": "https://github.com/rust-lang/rust/commit/5cd711b4f18f674dbdbd794d4ac32a0aeb0ef6f2"}], "stats": {"total": 397, "additions": 269, "deletions": 128}, "files": [{"sha": "430154ac34d1ebb83f2f4c70434a3e45104dc9bc", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d664049417976a5889e6a3354fdac00249e3a9a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d664049417976a5889e6a3354fdac00249e3a9a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=0d664049417976a5889e6a3354fdac00249e3a9a", "patch": "@@ -3256,6 +3256,7 @@ Released 2018-09-13\n [`double_neg`]: https://rust-lang.github.io/rust-clippy/master/index.html#double_neg\n [`double_parens`]: https://rust-lang.github.io/rust-clippy/master/index.html#double_parens\n [`drop_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#drop_copy\n+[`drop_non_drop`]: https://rust-lang.github.io/rust-clippy/master/index.html#drop_non_drop\n [`drop_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#drop_ref\n [`duplicate_underscore_argument`]: https://rust-lang.github.io/rust-clippy/master/index.html#duplicate_underscore_argument\n [`duration_subsec`]: https://rust-lang.github.io/rust-clippy/master/index.html#duration_subsec\n@@ -3308,6 +3309,7 @@ Released 2018-09-13\n [`for_kv_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_kv_map\n [`for_loops_over_fallibles`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_loops_over_fallibles\n [`forget_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_copy\n+[`forget_non_drop`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_non_drop\n [`forget_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_ref\n [`format_in_format_args`]: https://rust-lang.github.io/rust-clippy/master/index.html#format_in_format_args\n [`from_iter_instead_of_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_iter_instead_of_collect"}, {"sha": "88c54828da834da3e94ae9d513a76102e1d1f0c9", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 127, "deletions": 54, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/0d664049417976a5889e6a3354fdac00249e3a9a/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d664049417976a5889e6a3354fdac00249e3a9a/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=0d664049417976a5889e6a3354fdac00249e3a9a", "patch": "@@ -1,9 +1,8 @@\n-use clippy_utils::diagnostics::span_lint_and_note;\n-use clippy_utils::ty::is_copy;\n-use if_chain::if_chain;\n-use rustc_hir::{Expr, ExprKind};\n+use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_note};\n+use clippy_utils::is_must_use_func_call;\n+use clippy_utils::ty::{is_copy, is_must_use_ty, is_type_lang_item};\n+use rustc_hir::{Expr, ExprKind, LangItem};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n@@ -103,6 +102,75 @@ declare_clippy_lint! {\n     \"calls to `std::mem::forget` with a value that implements Copy\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for calls to `std::mem::drop` with a value that does not implement `Drop`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Calling `std::mem::drop` is no different than dropping such a type. A different value may\n+    /// have been intended.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// struct Foo;\n+    /// let x = Foo;\n+    /// std::mem::drop(x);\n+    /// ```\n+    #[clippy::version = \"1.61.0\"]\n+    pub DROP_NON_DROP,\n+    suspicious,\n+    \"call to `std::mem::drop` with a value which does not implement `Drop`\"\n+}\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for calls to `std::mem::forget` with a value that does not implement `Drop`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Calling `std::mem::forget` is no different than dropping such a type. A different value may\n+    /// have been intended.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// struct Foo;\n+    /// let x = Foo;\n+    /// std::mem::forget(x);\n+    /// ```\n+    #[clippy::version = \"1.61.0\"]\n+    pub FORGET_NON_DROP,\n+    suspicious,\n+    \"call to `std::mem::forget` with a value which does not implement `Drop`\"\n+}\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Prevents the safe `std::mem::drop` function from being called on `std::mem::ManuallyDrop`.\n+    ///\n+    /// ### Why is this bad?\n+    /// The safe `drop` function does not drop the inner value of a `ManuallyDrop`.\n+    ///\n+    /// ### Known problems\n+    /// Does not catch cases if the user binds `std::mem::drop`\n+    /// to a different name and calls it that way.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// struct S;\n+    /// drop(std::mem::ManuallyDrop::new(S));\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// struct S;\n+    /// unsafe {\n+    ///     std::mem::ManuallyDrop::drop(&mut std::mem::ManuallyDrop::new(S));\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.49.0\"]\n+    pub UNDROPPED_MANUALLY_DROPS,\n+    correctness,\n+    \"use of safe `std::mem::drop` function to drop a std::mem::ManuallyDrop, which will not drop the inner value\"\n+}\n+\n const DROP_REF_SUMMARY: &str = \"calls to `std::mem::drop` with a reference instead of an owned value. \\\n                                 Dropping a reference does nothing\";\n const FORGET_REF_SUMMARY: &str = \"calls to `std::mem::forget` with a reference instead of an owned value. \\\n@@ -111,60 +179,65 @@ const DROP_COPY_SUMMARY: &str = \"calls to `std::mem::drop` with a value that imp\n                                  Dropping a copy leaves the original intact\";\n const FORGET_COPY_SUMMARY: &str = \"calls to `std::mem::forget` with a value that implements `Copy`. \\\n                                    Forgetting a copy leaves the original intact\";\n+const DROP_NON_DROP_SUMMARY: &str = \"call to `std::mem::drop` with a value that does not implement `Drop`. \\\n+                                 Dropping such a type only extends it's contained lifetimes\";\n+const FORGET_NON_DROP_SUMMARY: &str = \"call to `std::mem::forget` with a value that does not implement `Drop`. \\\n+                                   Forgetting such a type is the same as dropping it\";\n \n-declare_lint_pass!(DropForgetRef => [DROP_REF, FORGET_REF, DROP_COPY, FORGET_COPY]);\n+declare_lint_pass!(DropForgetRef => [\n+    DROP_REF,\n+    FORGET_REF,\n+    DROP_COPY,\n+    FORGET_COPY,\n+    DROP_NON_DROP,\n+    FORGET_NON_DROP,\n+    UNDROPPED_MANUALLY_DROPS\n+]);\n \n impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            if let ExprKind::Call(path, args) = expr.kind;\n-            if let ExprKind::Path(ref qpath) = path.kind;\n-            if args.len() == 1;\n-            if let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id();\n-            then {\n-                let lint;\n-                let msg;\n-                let arg = &args[0];\n-                let arg_ty = cx.typeck_results().expr_ty(arg);\n-\n-                if let ty::Ref(..) = arg_ty.kind() {\n-                    match cx.tcx.get_diagnostic_name(def_id) {\n-                        Some(sym::mem_drop) => {\n-                            lint = DROP_REF;\n-                            msg = DROP_REF_SUMMARY.to_string();\n-                        },\n-                        Some(sym::mem_forget) => {\n-                            lint = FORGET_REF;\n-                            msg = FORGET_REF_SUMMARY.to_string();\n-                        },\n-                        _ => return,\n-                    }\n-                    span_lint_and_note(cx,\n-                                       lint,\n-                                       expr.span,\n-                                       &msg,\n-                                       Some(arg.span),\n-                                       &format!(\"argument has type `{}`\", arg_ty));\n-                } else if is_copy(cx, arg_ty) {\n-                    match cx.tcx.get_diagnostic_name(def_id) {\n-                        Some(sym::mem_drop) => {\n-                            lint = DROP_COPY;\n-                            msg = DROP_COPY_SUMMARY.to_string();\n-                        },\n-                        Some(sym::mem_forget) => {\n-                            lint = FORGET_COPY;\n-                            msg = FORGET_COPY_SUMMARY.to_string();\n-                        },\n-                        _ => return,\n-                    }\n-                    span_lint_and_note(cx,\n-                                       lint,\n-                                       expr.span,\n-                                       &msg,\n-                                       Some(arg.span),\n-                                       &format!(\"argument has type {}\", arg_ty));\n+        if let ExprKind::Call(path, [arg]) = expr.kind\n+            && let ExprKind::Path(ref qpath) = path.kind\n+            && let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id()\n+            && let Some(fn_name) = cx.tcx.get_diagnostic_name(def_id)\n+        {\n+            let arg_ty = cx.typeck_results().expr_ty(arg);\n+            let (lint, msg) = match fn_name {\n+                sym::mem_drop if arg_ty.is_ref() => (DROP_REF, DROP_REF_SUMMARY),\n+                sym::mem_forget if arg_ty.is_ref() => (FORGET_REF, FORGET_REF_SUMMARY),\n+                sym::mem_drop if is_copy(cx, arg_ty) => (DROP_COPY, DROP_COPY_SUMMARY),\n+                sym::mem_forget if is_copy(cx, arg_ty) => (FORGET_COPY, FORGET_COPY_SUMMARY),\n+                sym::mem_drop if is_type_lang_item(cx, arg_ty, LangItem::ManuallyDrop) => {\n+                    span_lint_and_help(\n+                        cx,\n+                        UNDROPPED_MANUALLY_DROPS,\n+                        expr.span,\n+                        \"the inner value of this ManuallyDrop will not be dropped\",\n+                        None,\n+                        \"to drop a `ManuallyDrop<T>`, use std::mem::ManuallyDrop::drop\",\n+                    );\n+                    return;\n                 }\n-            }\n+                sym::mem_drop\n+                    if !(arg_ty.needs_drop(cx.tcx, cx.param_env)\n+                        || is_must_use_func_call(cx, arg)\n+                        || is_must_use_ty(cx, arg_ty)) =>\n+                {\n+                    (DROP_NON_DROP, DROP_NON_DROP_SUMMARY)\n+                },\n+                sym::mem_forget if !arg_ty.needs_drop(cx.tcx, cx.param_env) => {\n+                    (FORGET_NON_DROP, FORGET_NON_DROP_SUMMARY)\n+                },\n+                _ => return,\n+            };\n+            span_lint_and_note(\n+                cx,\n+                lint,\n+                expr.span,\n+                msg,\n+                Some(arg.span),\n+                &format!(\"argument has type `{}`\", arg_ty),\n+            );\n         }\n     }\n }"}, {"sha": "b2f674e9c882a1ad2843f152ebba01ea9ac09b71", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d664049417976a5889e6a3354fdac00249e3a9a/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d664049417976a5889e6a3354fdac00249e3a9a/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=0d664049417976a5889e6a3354fdac00249e3a9a", "patch": "@@ -50,9 +50,12 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(double_comparison::DOUBLE_COMPARISONS),\n     LintId::of(double_parens::DOUBLE_PARENS),\n     LintId::of(drop_forget_ref::DROP_COPY),\n+    LintId::of(drop_forget_ref::DROP_NON_DROP),\n     LintId::of(drop_forget_ref::DROP_REF),\n     LintId::of(drop_forget_ref::FORGET_COPY),\n+    LintId::of(drop_forget_ref::FORGET_NON_DROP),\n     LintId::of(drop_forget_ref::FORGET_REF),\n+    LintId::of(drop_forget_ref::UNDROPPED_MANUALLY_DROPS),\n     LintId::of(duration_subsec::DURATION_SUBSEC),\n     LintId::of(entry::MAP_ENTRY),\n     LintId::of(enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT),\n@@ -297,7 +300,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(types::REDUNDANT_ALLOCATION),\n     LintId::of(types::TYPE_COMPLEXITY),\n     LintId::of(types::VEC_BOX),\n-    LintId::of(undropped_manually_drops::UNDROPPED_MANUALLY_DROPS),\n     LintId::of(unicode::INVISIBLE_CHARACTERS),\n     LintId::of(uninit_vec::UNINIT_VEC),\n     LintId::of(unit_hash::UNIT_HASH),"}, {"sha": "6bf2c4bbaedc024ad45ac7970c6fc030be7c9d67", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d664049417976a5889e6a3354fdac00249e3a9a/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d664049417976a5889e6a3354fdac00249e3a9a/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=0d664049417976a5889e6a3354fdac00249e3a9a", "patch": "@@ -22,6 +22,7 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(drop_forget_ref::DROP_REF),\n     LintId::of(drop_forget_ref::FORGET_COPY),\n     LintId::of(drop_forget_ref::FORGET_REF),\n+    LintId::of(drop_forget_ref::UNDROPPED_MANUALLY_DROPS),\n     LintId::of(enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT),\n     LintId::of(eq_op::EQ_OP),\n     LintId::of(erasing_op::ERASING_OP),\n@@ -62,7 +63,6 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(transmute::UNSOUND_COLLECTION_TRANSMUTE),\n     LintId::of(transmute::WRONG_TRANSMUTE),\n     LintId::of(transmuting_null::TRANSMUTING_NULL),\n-    LintId::of(undropped_manually_drops::UNDROPPED_MANUALLY_DROPS),\n     LintId::of(unicode::INVISIBLE_CHARACTERS),\n     LintId::of(uninit_vec::UNINIT_VEC),\n     LintId::of(unit_hash::UNIT_HASH),"}, {"sha": "fb6612f5c32c46f856e45e6062b8bdd8661b936b", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d664049417976a5889e6a3354fdac00249e3a9a/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d664049417976a5889e6a3354fdac00249e3a9a/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=0d664049417976a5889e6a3354fdac00249e3a9a", "patch": "@@ -123,9 +123,12 @@ store.register_lints(&[\n     double_comparison::DOUBLE_COMPARISONS,\n     double_parens::DOUBLE_PARENS,\n     drop_forget_ref::DROP_COPY,\n+    drop_forget_ref::DROP_NON_DROP,\n     drop_forget_ref::DROP_REF,\n     drop_forget_ref::FORGET_COPY,\n+    drop_forget_ref::FORGET_NON_DROP,\n     drop_forget_ref::FORGET_REF,\n+    drop_forget_ref::UNDROPPED_MANUALLY_DROPS,\n     duration_subsec::DURATION_SUBSEC,\n     else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n     empty_enum::EMPTY_ENUM,\n@@ -507,7 +510,6 @@ store.register_lints(&[\n     types::TYPE_COMPLEXITY,\n     types::VEC_BOX,\n     undocumented_unsafe_blocks::UNDOCUMENTED_UNSAFE_BLOCKS,\n-    undropped_manually_drops::UNDROPPED_MANUALLY_DROPS,\n     unicode::INVISIBLE_CHARACTERS,\n     unicode::NON_ASCII_LITERAL,\n     unicode::UNICODE_NOT_NFC,"}, {"sha": "4c3fbb6c4a864bc503dcd4bf955073a71d539328", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d664049417976a5889e6a3354fdac00249e3a9a/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d664049417976a5889e6a3354fdac00249e3a9a/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=0d664049417976a5889e6a3354fdac00249e3a9a", "patch": "@@ -10,6 +10,8 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(casts::CAST_ENUM_CONSTRUCTOR),\n     LintId::of(casts::CAST_ENUM_TRUNCATION),\n     LintId::of(crate_in_macro_def::CRATE_IN_MACRO_DEF),\n+    LintId::of(drop_forget_ref::DROP_NON_DROP),\n+    LintId::of(drop_forget_ref::FORGET_NON_DROP),\n     LintId::of(eval_order_dependence::EVAL_ORDER_DEPENDENCE),\n     LintId::of(float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS),\n     LintId::of(format_impl::PRINT_IN_FORMAT_IMPL),"}, {"sha": "f740664190c38440a220b28ae7ffc7a3c0b8a090", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d664049417976a5889e6a3354fdac00249e3a9a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d664049417976a5889e6a3354fdac00249e3a9a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=0d664049417976a5889e6a3354fdac00249e3a9a", "patch": "@@ -378,7 +378,6 @@ mod transmuting_null;\n mod try_err;\n mod types;\n mod undocumented_unsafe_blocks;\n-mod undropped_manually_drops;\n mod unicode;\n mod uninit_vec;\n mod unit_hash;\n@@ -815,7 +814,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(disallowed_methods::DisallowedMethods::new(disallowed_methods.clone())));\n     store.register_early_pass(|| Box::new(asm_syntax::InlineAsmX86AttSyntax));\n     store.register_early_pass(|| Box::new(asm_syntax::InlineAsmX86IntelSyntax));\n-    store.register_late_pass(|| Box::new(undropped_manually_drops::UndroppedManuallyDrops));\n     store.register_late_pass(|| Box::new(strings::StrToString));\n     store.register_late_pass(|| Box::new(strings::StringToString));\n     store.register_late_pass(|| Box::new(zero_sized_map_values::ZeroSizedMapValues));"}, {"sha": "db652766705c4989532ee74bcdc07c50045f9f0e", "filename": "clippy_lints/src/undropped_manually_drops.rs", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/409a936f3b65db06bf0a9d167afcdc7bfafad47f/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409a936f3b65db06bf0a9d167afcdc7bfafad47f/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs?ref=409a936f3b65db06bf0a9d167afcdc7bfafad47f", "patch": "@@ -1,59 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::path_res;\n-use clippy_utils::ty::is_type_lang_item;\n-use rustc_hir::{lang_items, Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::sym;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Prevents the safe `std::mem::drop` function from being called on `std::mem::ManuallyDrop`.\n-    ///\n-    /// ### Why is this bad?\n-    /// The safe `drop` function does not drop the inner value of a `ManuallyDrop`.\n-    ///\n-    /// ### Known problems\n-    /// Does not catch cases if the user binds `std::mem::drop`\n-    /// to a different name and calls it that way.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// struct S;\n-    /// drop(std::mem::ManuallyDrop::new(S));\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// struct S;\n-    /// unsafe {\n-    ///     std::mem::ManuallyDrop::drop(&mut std::mem::ManuallyDrop::new(S));\n-    /// }\n-    /// ```\n-    #[clippy::version = \"1.49.0\"]\n-    pub UNDROPPED_MANUALLY_DROPS,\n-    correctness,\n-    \"use of safe `std::mem::drop` function to drop a std::mem::ManuallyDrop, which will not drop the inner value\"\n-}\n-\n-declare_lint_pass!(UndroppedManuallyDrops => [UNDROPPED_MANUALLY_DROPS]);\n-\n-impl<'tcx> LateLintPass<'tcx> for UndroppedManuallyDrops {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            if let ExprKind::Call(fun, [arg_0, ..]) = expr.kind;\n-            if path_res(cx, fun).opt_def_id() == cx.tcx.get_diagnostic_item(sym::mem_drop);\n-            let ty = cx.typeck_results().expr_ty(arg_0);\n-            if is_type_lang_item(cx, ty, lang_items::LangItem::ManuallyDrop);\n-            then {\n-                span_lint_and_help(\n-                    cx,\n-                    UNDROPPED_MANUALLY_DROPS,\n-                    expr.span,\n-                    \"the inner value of this ManuallyDrop will not be dropped\",\n-                    None,\n-                    \"to drop a `ManuallyDrop<T>`, use std::mem::ManuallyDrop::drop\",\n-                );\n-            }\n-        }\n-    }\n-}"}, {"sha": "88228afae89c005d698051baecdd76ee87f17ace", "filename": "tests/ui/drop_forget_copy.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0d664049417976a5889e6a3354fdac00249e3a9a/tests%2Fui%2Fdrop_forget_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d664049417976a5889e6a3354fdac00249e3a9a/tests%2Fui%2Fdrop_forget_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_copy.stderr?ref=0d664049417976a5889e6a3354fdac00249e3a9a", "patch": "@@ -5,7 +5,7 @@ LL |     drop(s1);\n    |     ^^^^^^^^\n    |\n    = note: `-D clippy::drop-copy` implied by `-D warnings`\n-note: argument has type SomeStruct\n+note: argument has type `SomeStruct`\n   --> $DIR/drop_forget_copy.rs:33:10\n    |\n LL |     drop(s1);\n@@ -17,7 +17,7 @@ error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a\n LL |     drop(s2);\n    |     ^^^^^^^^\n    |\n-note: argument has type SomeStruct\n+note: argument has type `SomeStruct`\n   --> $DIR/drop_forget_copy.rs:34:10\n    |\n LL |     drop(s2);\n@@ -29,7 +29,7 @@ error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a\n LL |     drop(s4);\n    |     ^^^^^^^^\n    |\n-note: argument has type SomeStruct\n+note: argument has type `SomeStruct`\n   --> $DIR/drop_forget_copy.rs:36:10\n    |\n LL |     drop(s4);\n@@ -42,7 +42,7 @@ LL |     forget(s1);\n    |     ^^^^^^^^^^\n    |\n    = note: `-D clippy::forget-copy` implied by `-D warnings`\n-note: argument has type SomeStruct\n+note: argument has type `SomeStruct`\n   --> $DIR/drop_forget_copy.rs:39:12\n    |\n LL |     forget(s1);\n@@ -54,7 +54,7 @@ error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetti\n LL |     forget(s2);\n    |     ^^^^^^^^^^\n    |\n-note: argument has type SomeStruct\n+note: argument has type `SomeStruct`\n   --> $DIR/drop_forget_copy.rs:40:12\n    |\n LL |     forget(s2);\n@@ -66,7 +66,7 @@ error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetti\n LL |     forget(s4);\n    |     ^^^^^^^^^^\n    |\n-note: argument has type SomeStruct\n+note: argument has type `SomeStruct`\n   --> $DIR/drop_forget_copy.rs:42:12\n    |\n LL |     forget(s4);"}, {"sha": "5a0ebde82c5d4eea033c467a2f13c2c32f67bf09", "filename": "tests/ui/drop_non_drop.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0d664049417976a5889e6a3354fdac00249e3a9a/tests%2Fui%2Fdrop_non_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d664049417976a5889e6a3354fdac00249e3a9a/tests%2Fui%2Fdrop_non_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_non_drop.rs?ref=0d664049417976a5889e6a3354fdac00249e3a9a", "patch": "@@ -0,0 +1,40 @@\n+#![warn(clippy::drop_non_drop)]\n+\n+use core::mem::drop;\n+\n+fn make_result<T>(t: T) -> Result<T, ()> {\n+    Ok(t)\n+}\n+\n+#[must_use]\n+fn must_use<T>(t: T) -> T {\n+    t\n+}\n+\n+fn drop_generic<T>(t: T) {\n+    // Don't lint\n+    drop(t)\n+}\n+\n+fn main() {\n+    struct Foo;\n+    // Lint\n+    drop(Foo);\n+    // Don't lint\n+    drop(make_result(Foo));\n+    // Don't lint\n+    drop(must_use(Foo));\n+\n+    struct Bar;\n+    impl Drop for Bar {\n+        fn drop(&mut self) {}\n+    }\n+    // Don't lint\n+    drop(Bar);\n+\n+    struct Baz<T>(T);\n+    // Lint\n+    drop(Baz(Foo));\n+    // Don't lint\n+    drop(Baz(Bar));\n+}"}, {"sha": "f73068901c503ac2ff3eb1b685b3336247b1ddd9", "filename": "tests/ui/drop_non_drop.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0d664049417976a5889e6a3354fdac00249e3a9a/tests%2Fui%2Fdrop_non_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d664049417976a5889e6a3354fdac00249e3a9a/tests%2Fui%2Fdrop_non_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_non_drop.stderr?ref=0d664049417976a5889e6a3354fdac00249e3a9a", "patch": "@@ -0,0 +1,27 @@\n+error: call to `std::mem::drop` with a value that does not implement `Drop`. Dropping such a type only extends it's contained lifetimes\n+  --> $DIR/drop_non_drop.rs:22:5\n+   |\n+LL |     drop(Foo);\n+   |     ^^^^^^^^^\n+   |\n+   = note: `-D clippy::drop-non-drop` implied by `-D warnings`\n+note: argument has type `main::Foo`\n+  --> $DIR/drop_non_drop.rs:22:10\n+   |\n+LL |     drop(Foo);\n+   |          ^^^\n+\n+error: call to `std::mem::drop` with a value that does not implement `Drop`. Dropping such a type only extends it's contained lifetimes\n+  --> $DIR/drop_non_drop.rs:37:5\n+   |\n+LL |     drop(Baz(Foo));\n+   |     ^^^^^^^^^^^^^^\n+   |\n+note: argument has type `main::Baz<main::Foo>`\n+  --> $DIR/drop_non_drop.rs:37:10\n+   |\n+LL |     drop(Baz(Foo));\n+   |          ^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7de0b0bbdf9ae8ffdfb4019d695e4a38df8ad197", "filename": "tests/ui/drop_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d664049417976a5889e6a3354fdac00249e3a9a/tests%2Fui%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d664049417976a5889e6a3354fdac00249e3a9a/tests%2Fui%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_ref.rs?ref=0d664049417976a5889e6a3354fdac00249e3a9a", "patch": "@@ -1,7 +1,7 @@\n #![warn(clippy::drop_ref)]\n #![allow(clippy::toplevel_ref_arg)]\n #![allow(clippy::map_err_ignore)]\n-#![allow(clippy::unnecessary_wraps)]\n+#![allow(clippy::unnecessary_wraps, clippy::drop_non_drop)]\n \n use std::mem::drop;\n "}, {"sha": "7580cf95ebfa8214facad9f9338c14aa54dc7c68", "filename": "tests/ui/forget_non_drop.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0d664049417976a5889e6a3354fdac00249e3a9a/tests%2Fui%2Fforget_non_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d664049417976a5889e6a3354fdac00249e3a9a/tests%2Fui%2Fforget_non_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fforget_non_drop.rs?ref=0d664049417976a5889e6a3354fdac00249e3a9a", "patch": "@@ -0,0 +1,27 @@\n+#![warn(clippy::forget_non_drop)]\n+\n+use core::mem::forget;\n+\n+fn forget_generic<T>(t: T) {\n+    // Don't lint\n+    forget(t)\n+}\n+\n+fn main() {\n+    struct Foo;\n+    // Lint\n+    forget(Foo);\n+\n+    struct Bar;\n+    impl Drop for Bar {\n+        fn drop(&mut self) {}\n+    }\n+    // Don't lint\n+    forget(Bar);\n+\n+    struct Baz<T>(T);\n+    // Lint\n+    forget(Baz(Foo));\n+    // Don't lint\n+    forget(Baz(Bar));\n+}"}, {"sha": "03fb00960a44732faaf1f9078952fe86884d77db", "filename": "tests/ui/forget_non_drop.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0d664049417976a5889e6a3354fdac00249e3a9a/tests%2Fui%2Fforget_non_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d664049417976a5889e6a3354fdac00249e3a9a/tests%2Fui%2Fforget_non_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fforget_non_drop.stderr?ref=0d664049417976a5889e6a3354fdac00249e3a9a", "patch": "@@ -0,0 +1,27 @@\n+error: call to `std::mem::forget` with a value that does not implement `Drop`. Forgetting such a type is the same as dropping it\n+  --> $DIR/forget_non_drop.rs:13:5\n+   |\n+LL |     forget(Foo);\n+   |     ^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::forget-non-drop` implied by `-D warnings`\n+note: argument has type `main::Foo`\n+  --> $DIR/forget_non_drop.rs:13:12\n+   |\n+LL |     forget(Foo);\n+   |            ^^^\n+\n+error: call to `std::mem::forget` with a value that does not implement `Drop`. Forgetting such a type is the same as dropping it\n+  --> $DIR/forget_non_drop.rs:24:5\n+   |\n+LL |     forget(Baz(Foo));\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `main::Baz<main::Foo>`\n+  --> $DIR/forget_non_drop.rs:24:12\n+   |\n+LL |     forget(Baz(Foo));\n+   |            ^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "6c8c4c9c0edecc01adeaee75a87681af5b94dc06", "filename": "tests/ui/forget_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d664049417976a5889e6a3354fdac00249e3a9a/tests%2Fui%2Fforget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d664049417976a5889e6a3354fdac00249e3a9a/tests%2Fui%2Fforget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fforget_ref.rs?ref=0d664049417976a5889e6a3354fdac00249e3a9a", "patch": "@@ -1,6 +1,6 @@\n #![warn(clippy::forget_ref)]\n #![allow(clippy::toplevel_ref_arg)]\n-#![allow(clippy::unnecessary_wraps)]\n+#![allow(clippy::unnecessary_wraps, clippy::forget_non_drop)]\n \n use std::mem::forget;\n "}, {"sha": "1525f6a93dfdd4dcac0492dad3adbf63e8f621f5", "filename": "tests/ui/redundant_clone.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d664049417976a5889e6a3354fdac00249e3a9a/tests%2Fui%2Fredundant_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d664049417976a5889e6a3354fdac00249e3a9a/tests%2Fui%2Fredundant_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.fixed?ref=0d664049417976a5889e6a3354fdac00249e3a9a", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n // rustfix-only-machine-applicable\n \n-#![allow(clippy::implicit_clone)]\n+#![allow(clippy::implicit_clone, clippy::drop_non_drop)]\n use std::ffi::OsString;\n use std::path::Path;\n "}, {"sha": "2f82aefd928309c23eee5d3c7a0540a2f5335b5a", "filename": "tests/ui/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d664049417976a5889e6a3354fdac00249e3a9a/tests%2Fui%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d664049417976a5889e6a3354fdac00249e3a9a/tests%2Fui%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.rs?ref=0d664049417976a5889e6a3354fdac00249e3a9a", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n // rustfix-only-machine-applicable\n \n-#![allow(clippy::implicit_clone)]\n+#![allow(clippy::implicit_clone, clippy::drop_non_drop)]\n use std::ffi::OsString;\n use std::path::Path;\n "}]}