{"sha": "64fe2c183d722ef3d2e9dee312de4b98aa6af9a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZmUyYzE4M2Q3MjJlZjNkMmU5ZGVlMzEyZGU0Yjk4YWE2YWY5YTA=", "commit": {"author": {"name": "Henry Boisdequin", "email": "65845077+henryboisdequin@users.noreply.github.com", "date": "2021-02-14T04:38:37Z"}, "committer": {"name": "Henry Boisdequin", "email": "65845077+henryboisdequin@users.noreply.github.com", "date": "2021-02-14T04:38:37Z"}, "message": "update message", "tree": {"sha": "f388bc53c77c5d756c03b8208a3dc7022bd59eaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f388bc53c77c5d756c03b8208a3dc7022bd59eaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64fe2c183d722ef3d2e9dee312de4b98aa6af9a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64fe2c183d722ef3d2e9dee312de4b98aa6af9a0", "html_url": "https://github.com/rust-lang/rust/commit/64fe2c183d722ef3d2e9dee312de4b98aa6af9a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64fe2c183d722ef3d2e9dee312de4b98aa6af9a0/comments", "author": {"login": "henryboisdequin", "id": 65845077, "node_id": "MDQ6VXNlcjY1ODQ1MDc3", "avatar_url": "https://avatars.githubusercontent.com/u/65845077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryboisdequin", "html_url": "https://github.com/henryboisdequin", "followers_url": "https://api.github.com/users/henryboisdequin/followers", "following_url": "https://api.github.com/users/henryboisdequin/following{/other_user}", "gists_url": "https://api.github.com/users/henryboisdequin/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryboisdequin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryboisdequin/subscriptions", "organizations_url": "https://api.github.com/users/henryboisdequin/orgs", "repos_url": "https://api.github.com/users/henryboisdequin/repos", "events_url": "https://api.github.com/users/henryboisdequin/events{/privacy}", "received_events_url": "https://api.github.com/users/henryboisdequin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "henryboisdequin", "id": 65845077, "node_id": "MDQ6VXNlcjY1ODQ1MDc3", "avatar_url": "https://avatars.githubusercontent.com/u/65845077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryboisdequin", "html_url": "https://github.com/henryboisdequin", "followers_url": "https://api.github.com/users/henryboisdequin/followers", "following_url": "https://api.github.com/users/henryboisdequin/following{/other_user}", "gists_url": "https://api.github.com/users/henryboisdequin/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryboisdequin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryboisdequin/subscriptions", "organizations_url": "https://api.github.com/users/henryboisdequin/orgs", "repos_url": "https://api.github.com/users/henryboisdequin/repos", "events_url": "https://api.github.com/users/henryboisdequin/events{/privacy}", "received_events_url": "https://api.github.com/users/henryboisdequin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2e849c0221bbaf1106884cd776e375168a95323", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2e849c0221bbaf1106884cd776e375168a95323", "html_url": "https://github.com/rust-lang/rust/commit/c2e849c0221bbaf1106884cd776e375168a95323"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "1c1b597dcb5852421235bd441c1ddaf294cfbf35", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/64fe2c183d722ef3d2e9dee312de4b98aa6af9a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64fe2c183d722ef3d2e9dee312de4b98aa6af9a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=64fe2c183d722ef3d2e9dee312de4b98aa6af9a0", "patch": "@@ -1885,21 +1885,21 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 err.note(\n                     \"the `Copy` trait is required because the repeated element will be copied\",\n                 );\n-                if is_const_fn && !self.tcx.sess.is_nightly_build() {\n+\n+                if is_const_fn {\n                     err.help(\n                         \"consider creating a new `const` item and initializing with the result \\\n                         of the function call to be used in the repeat position, like \\\n                         `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\",\n                     );\n-                } else if self.tcx.sess.is_nightly_build() && is_const_fn {\n+                }\n+\n+                if self.tcx.sess.is_nightly_build() && is_const_fn {\n                     err.help(\n                         \"create an inline `const` block, see PR \\\n                         #2920 <https://github.com/rust-lang/rfcs/pull/2920> \\\n                         for more information\",\n                     );\n-                } else {\n-                    // Don't suggest anything to the user as suggesting the user to make the function `const`\n-                    // could lead them down the wrong path.\n                 }\n             }\n             ObligationCauseCode::VariableType(hir_id) => {"}, {"sha": "9752bc3f66d44e5f5176435384d2a7e9f2211455", "filename": "src/README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64fe2c183d722ef3d2e9dee312de4b98aa6af9a0/src%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/64fe2c183d722ef3d2e9dee312de4b98aa6af9a0/src%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FREADME.md?ref=64fe2c183d722ef3d2e9dee312de4b98aa6af9a0", "patch": "@@ -1,4 +1,5 @@\n This directory contains the source code of the rust project, including:\n+\n - The test suite\n - The bootstrapping build system\n - Various submodules for tools, like rustdoc, rls, etc."}, {"sha": "303de078013acdad30d35ec44a3a258008bf2a08", "filename": "src/test/ui/consts/const-blocks/fn-call-in-non-const.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64fe2c183d722ef3d2e9dee312de4b98aa6af9a0/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64fe2c183d722ef3d2e9dee312de4b98aa6af9a0/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr?ref=64fe2c183d722ef3d2e9dee312de4b98aa6af9a0", "patch": "@@ -7,6 +7,7 @@ LL |     let _: [Option<Bar>; 2] = [no_copy(); 2];\n    = help: the following implementations were found:\n              <Option<T> as Copy>\n    = note: the `Copy` trait is required because the repeated element will be copied\n+   = help: consider creating a new `const` item and initializing with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\n    = help: create an inline `const` block, see PR #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information\n \n error: aborting due to previous error"}, {"sha": "a40290eca0972207ce011018d490b83414a3f6dd", "filename": "src/test/ui/consts/const-fn-in-vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64fe2c183d722ef3d2e9dee312de4b98aa6af9a0/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64fe2c183d722ef3d2e9dee312de4b98aa6af9a0/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.rs?ref=64fe2c183d722ef3d2e9dee312de4b98aa6af9a0", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n-    // should hint to create an inline const block\n-    // as all tests are on \"nightly\"\n+    // should hint to create an inline `const` block\n+    // or to create a new `const` item\n     let strings: [String; 5] = [String::new(); 5];\n     //~^ ERROR the trait bound `String: Copy` is not satisfied\n     println!(\"{:?}\", strings);"}, {"sha": "f9f184dfc06b6b8170faaa8f0ed7f8733976d389", "filename": "src/test/ui/consts/const-fn-in-vec.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64fe2c183d722ef3d2e9dee312de4b98aa6af9a0/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64fe2c183d722ef3d2e9dee312de4b98aa6af9a0/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr?ref=64fe2c183d722ef3d2e9dee312de4b98aa6af9a0", "patch": "@@ -5,6 +5,7 @@ LL |     let strings: [String; 5] = [String::new(); 5];\n    |                                ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n+   = help: consider creating a new `const` item and initializing with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\n    = help: create an inline `const` block, see PR #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information\n \n error: aborting due to previous error"}]}