{"sha": "23feec397713918c7cd960d52348d088a32837a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZmVlYzM5NzcxMzkxOGM3Y2Q5NjBkNTIzNDhkMDg4YTMyODM3YTU=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-11-05T18:17:30Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-11-14T20:17:17Z"}, "message": "Use `TypeVisitor::BreakTy` in `ProhibitOpaqueVisitor`", "tree": {"sha": "f62ce66e7cff7cd0aad3654c8483f13639942ed9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f62ce66e7cff7cd0aad3654c8483f13639942ed9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23feec397713918c7cd960d52348d088a32837a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23feec397713918c7cd960d52348d088a32837a5", "html_url": "https://github.com/rust-lang/rust/commit/23feec397713918c7cd960d52348d088a32837a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23feec397713918c7cd960d52348d088a32837a5/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17b395d29609e9a52aeddec658ae6d57f62260cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/17b395d29609e9a52aeddec658ae6d57f62260cc", "html_url": "https://github.com/rust-lang/rust/commit/17b395d29609e9a52aeddec658ae6d57f62260cc"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "9755e499e29c9d16130573fed2da0fc2459bbb21", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/23feec397713918c7cd960d52348d088a32837a5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23feec397713918c7cd960d52348d088a32837a5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=23feec397713918c7cd960d52348d088a32837a5", "patch": "@@ -446,15 +446,15 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n     struct ProhibitOpaqueVisitor<'tcx> {\n         opaque_identity_ty: Ty<'tcx>,\n         generics: &'tcx ty::Generics,\n-        ty: Option<Ty<'tcx>>,\n     };\n \n     impl<'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n+        type BreakTy = Option<Ty<'tcx>>;\n+\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             debug!(\"check_opaque_for_inheriting_lifetimes: (visit_ty) t={:?}\", t);\n             if t != self.opaque_identity_ty && t.super_visit_with(self).is_break() {\n-                self.ty = Some(t);\n-                return ControlFlow::BREAK;\n+                return ControlFlow::Break(Some(t));\n             }\n             ControlFlow::CONTINUE\n         }\n@@ -463,7 +463,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n             debug!(\"check_opaque_for_inheriting_lifetimes: (visit_region) r={:?}\", r);\n             if let RegionKind::ReEarlyBound(ty::EarlyBoundRegion { index, .. }) = r {\n                 if *index < self.generics.parent_count as u32 {\n-                    return ControlFlow::BREAK;\n+                    return ControlFlow::Break(None);\n                 } else {\n                     return ControlFlow::CONTINUE;\n                 }\n@@ -494,18 +494,17 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n                 InternalSubsts::identity_for_item(tcx, def_id.to_def_id()),\n             ),\n             generics: tcx.generics_of(def_id),\n-            ty: None,\n         };\n         let prohibit_opaque = tcx\n             .explicit_item_bounds(def_id)\n             .iter()\n-            .any(|(predicate, _)| predicate.visit_with(&mut visitor).is_break());\n+            .try_for_each(|(predicate, _)| predicate.visit_with(&mut visitor));\n         debug!(\n             \"check_opaque_for_inheriting_lifetimes: prohibit_opaque={:?}, visitor={:?}\",\n             prohibit_opaque, visitor\n         );\n \n-        if prohibit_opaque {\n+        if let Some(ty) = prohibit_opaque.break_value() {\n             let is_async = match item.kind {\n                 ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => match origin {\n                     hir::OpaqueTyOrigin::AsyncFn => true,\n@@ -525,7 +524,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n \n             if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(span) {\n                 if snippet == \"Self\" {\n-                    if let Some(ty) = visitor.ty {\n+                    if let Some(ty) = ty {\n                         err.span_suggestion(\n                             span,\n                             \"consider spelling out the type instead\","}]}