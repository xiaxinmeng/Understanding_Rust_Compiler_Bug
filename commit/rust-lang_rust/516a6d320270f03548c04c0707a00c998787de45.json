{"sha": "516a6d320270f03548c04c0707a00c998787de45", "node_id": "C_kwDOAAsO6NoAKDUxNmE2ZDMyMDI3MGYwMzU0OGMwNGMwNzA3YTAwYzk5ODc4N2RlNDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-30T12:44:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-30T12:44:25Z"}, "message": "Auto merge of #109769 - JohnTitor:rollup-7n2bnpg, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #106985 (Enhanced doucmentation of binary search methods for `slice` and `VecDeque` for unsorted instances)\n - #109509 (compiletest: Don't allow tests with overlapping prefix names)\n - #109719 (RELEASES: Add \"Only support Android NDK 25 or newer\" to 1.68.0)\n - #109748 (Don't ICE on `DiscriminantKind` projection in new solver)\n - #109749 (Canonicalize float var as float in new solver)\n - #109761 (Drop binutils on powerpc-unknown-freebsd)\n - #109766 (Fix title for openharmony.md)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "9390dd05df4f6132517e9723274f6e2c07213213", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9390dd05df4f6132517e9723274f6e2c07213213"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/516a6d320270f03548c04c0707a00c998787de45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/516a6d320270f03548c04c0707a00c998787de45", "html_url": "https://github.com/rust-lang/rust/commit/516a6d320270f03548c04c0707a00c998787de45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/516a6d320270f03548c04c0707a00c998787de45/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a7ca936e61d04399198911ee2b07ac110bf17b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a7ca936e61d04399198911ee2b07ac110bf17b0", "html_url": "https://github.com/rust-lang/rust/commit/8a7ca936e61d04399198911ee2b07ac110bf17b0"}, {"sha": "6519ca462f8a237e6e0c5766188ac5e9ab80e940", "url": "https://api.github.com/repos/rust-lang/rust/commits/6519ca462f8a237e6e0c5766188ac5e9ab80e940", "html_url": "https://github.com/rust-lang/rust/commit/6519ca462f8a237e6e0c5766188ac5e9ab80e940"}], "stats": {"total": 204, "additions": 160, "deletions": 44}, "files": [{"sha": "b923f87abfd4721d066108753aa2bbd5c82ea4f2", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/516a6d320270f03548c04c0707a00c998787de45/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/516a6d320270f03548c04c0707a00c998787de45/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=516a6d320270f03548c04c0707a00c998787de45", "patch": "@@ -94,6 +94,7 @@ Misc\n Compatibility Notes\n -------------------\n \n+- [Only support Android NDK 25 or newer](https://blog.rust-lang.org/2023/01/09/android-ndk-update-r25.html)\n - [Add `SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` to future-incompat report](https://github.com/rust-lang/rust/pull/103418/)\n - [Only specify `--target` by default for `-Zgcc-ld=lld` on wasm](https://github.com/rust-lang/rust/pull/101792/)\n - [Bump `IMPLIED_BOUNDS_ENTAILMENT` to Deny + ReportNow](https://github.com/rust-lang/rust/pull/106465/)"}, {"sha": "2e5a8b7debc511b50eda684573f07380fd8d8b68", "filename": "compiler/rustc_trait_selection/src/solve/canonicalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/516a6d320270f03548c04c0707a00c998787de45/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a6d320270f03548c04c0707a00c998787de45/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs?ref=516a6d320270f03548c04c0707a00c998787de45", "patch": "@@ -291,7 +291,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'_, 'tcx> {\n                 if nt != t {\n                     return self.fold_ty(nt);\n                 } else {\n-                    CanonicalVarKind::Ty(CanonicalTyVarKind::Int)\n+                    CanonicalVarKind::Ty(CanonicalTyVarKind::Float)\n                 }\n             }\n             ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {"}, {"sha": "fd2aa10caa23a341eeeb49fd14ccdf4e6186dd98", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/516a6d320270f03548c04c0707a00c998787de45/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a6d320270f03548c04c0707a00c998787de45/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=516a6d320270f03548c04c0707a00c998787de45", "patch": "@@ -344,10 +344,8 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                         LangItem::Sized,\n                         [ty::GenericArg::from(goal.predicate.self_ty())],\n                     ));\n-\n                     ecx.add_goal(goal.with(tcx, sized_predicate));\n-                    ecx.eq(goal.param_env, goal.predicate.term, tcx.types.unit.into())?;\n-                    return ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes);\n+                    tcx.types.unit\n                 }\n \n                 ty::Adt(def, substs) if def.is_struct() => {\n@@ -483,9 +481,49 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n-        let discriminant = goal.predicate.self_ty().discriminant_ty(ecx.tcx());\n+        let self_ty = goal.predicate.self_ty();\n+        let discriminant_ty = match *self_ty.kind() {\n+            ty::Bool\n+            | ty::Char\n+            | ty::Int(..)\n+            | ty::Uint(..)\n+            | ty::Float(..)\n+            | ty::Array(..)\n+            | ty::RawPtr(..)\n+            | ty::Ref(..)\n+            | ty::FnDef(..)\n+            | ty::FnPtr(..)\n+            | ty::Closure(..)\n+            | ty::Infer(ty::IntVar(..) | ty::FloatVar(..))\n+            | ty::Generator(..)\n+            | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n+            | ty::Never\n+            | ty::Foreign(..)\n+            | ty::Adt(_, _)\n+            | ty::Str\n+            | ty::Slice(_)\n+            | ty::Dynamic(_, _, _)\n+            | ty::Tuple(_)\n+            | ty::Error(_) => self_ty.discriminant_ty(ecx.tcx()),\n+\n+            // We do not call `Ty::discriminant_ty` on alias, param, or placeholder\n+            // types, which return `<self_ty as DiscriminantKind>::Discriminant`\n+            // (or ICE in the case of placeholders). Projecting a type to itself\n+            // is never really productive.\n+            ty::Alias(_, _) | ty::Param(_) | ty::Placeholder(..) => {\n+                return Err(NoSolution);\n+            }\n+\n+            ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_))\n+            | ty::Bound(..) => bug!(\n+                \"unexpected self ty `{:?}` when normalizing `<T as DiscriminantKind>::Discriminant`\",\n+                goal.predicate.self_ty()\n+            ),\n+        };\n+\n         ecx.probe(|ecx| {\n-            ecx.eq(goal.param_env, goal.predicate.term, discriminant.into())?;\n+            ecx.eq(goal.param_env, goal.predicate.term, discriminant_ty.into())?;\n             ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n         })\n     }"}, {"sha": "05dbcdc904e056bcbca415fa22d2eb3c9aad1d46", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/516a6d320270f03548c04c0707a00c998787de45/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a6d320270f03548c04c0707a00c998787de45/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=516a6d320270f03548c04c0707a00c998787de45", "patch": "@@ -2394,7 +2394,8 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     }\n \n     /// Binary searches this `VecDeque` for a given element.\n-    /// This behaves similarly to [`contains`] if this `VecDeque` is sorted.\n+    /// If the `VecDeque` is not sorted, the returned result is unspecified and\n+    /// meaningless.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n@@ -2404,7 +2405,6 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     ///\n     /// See also [`binary_search_by`], [`binary_search_by_key`], and [`partition_point`].\n     ///\n-    /// [`contains`]: VecDeque::contains\n     /// [`binary_search_by`]: VecDeque::binary_search_by\n     /// [`binary_search_by_key`]: VecDeque::binary_search_by_key\n     /// [`partition_point`]: VecDeque::partition_point\n@@ -2450,12 +2450,13 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     }\n \n     /// Binary searches this `VecDeque` with a comparator function.\n-    /// This behaves similarly to [`contains`] if this `VecDeque` is sorted.\n     ///\n-    /// The comparator function should implement an order consistent\n-    /// with the sort order of the deque, returning an order code that\n-    /// indicates whether its argument is `Less`, `Equal` or `Greater`\n-    /// than the desired target.\n+    /// The comparator function should return an order code that indicates\n+    /// whether its argument is `Less`, `Equal` or `Greater` the desired\n+    /// target.\n+    /// If the `VecDeque` is not sorted or if the comparator function does not\n+    /// implement an order consistent with the sort order of the underlying\n+    /// `VecDeque`, the returned result is unspecified and meaningless.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n@@ -2465,7 +2466,6 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     ///\n     /// See also [`binary_search`], [`binary_search_by_key`], and [`partition_point`].\n     ///\n-    /// [`contains`]: VecDeque::contains\n     /// [`binary_search`]: VecDeque::binary_search\n     /// [`binary_search_by_key`]: VecDeque::binary_search_by_key\n     /// [`partition_point`]: VecDeque::partition_point\n@@ -2505,10 +2505,11 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     }\n \n     /// Binary searches this `VecDeque` with a key extraction function.\n-    /// This behaves similarly to [`contains`] if this `VecDeque` is sorted.\n     ///\n     /// Assumes that the deque is sorted by the key, for instance with\n     /// [`make_contiguous().sort_by_key()`] using the same key extraction function.\n+    /// If the deque is not sorted by the key, the returned result is\n+    /// unspecified and meaningless.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n@@ -2518,7 +2519,6 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     ///\n     /// See also [`binary_search`], [`binary_search_by`], and [`partition_point`].\n     ///\n-    /// [`contains`]: VecDeque::contains\n     /// [`make_contiguous().sort_by_key()`]: VecDeque::make_contiguous\n     /// [`binary_search`]: VecDeque::binary_search\n     /// [`binary_search_by`]: VecDeque::binary_search_by"}, {"sha": "f541808a61836b1311efc0bfeaba0c853b2cf93f", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/516a6d320270f03548c04c0707a00c998787de45/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a6d320270f03548c04c0707a00c998787de45/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=516a6d320270f03548c04c0707a00c998787de45", "patch": "@@ -2387,7 +2387,8 @@ impl<T> [T] {\n     }\n \n     /// Binary searches this slice for a given element.\n-    /// This behaves similarly to [`contains`] if this slice is sorted.\n+    /// If the slice is not sorted, the returned result is unspecified and\n+    /// meaningless.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n@@ -2399,7 +2400,6 @@ impl<T> [T] {\n     ///\n     /// See also [`binary_search_by`], [`binary_search_by_key`], and [`partition_point`].\n     ///\n-    /// [`contains`]: slice::contains\n     /// [`binary_search_by`]: slice::binary_search_by\n     /// [`binary_search_by_key`]: slice::binary_search_by_key\n     /// [`partition_point`]: slice::partition_point\n@@ -2462,12 +2462,13 @@ impl<T> [T] {\n     }\n \n     /// Binary searches this slice with a comparator function.\n-    /// This behaves similarly to [`contains`] if this slice is sorted.\n     ///\n-    /// The comparator function should implement an order consistent\n-    /// with the sort order of the underlying slice, returning an\n-    /// order code that indicates whether its argument is `Less`,\n-    /// `Equal` or `Greater` the desired target.\n+    /// The comparator function should return an order code that indicates\n+    /// whether its argument is `Less`, `Equal` or `Greater` the desired\n+    /// target.\n+    /// If the slice is not sorted or if the comparator function does not\n+    /// implement an order consistent with the sort order of the underlying\n+    /// slice, the returned result is unspecified and meaningless.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n@@ -2479,7 +2480,6 @@ impl<T> [T] {\n     ///\n     /// See also [`binary_search`], [`binary_search_by_key`], and [`partition_point`].\n     ///\n-    /// [`contains`]: slice::contains\n     /// [`binary_search`]: slice::binary_search\n     /// [`binary_search_by_key`]: slice::binary_search_by_key\n     /// [`partition_point`]: slice::partition_point\n@@ -2548,10 +2548,11 @@ impl<T> [T] {\n     }\n \n     /// Binary searches this slice with a key extraction function.\n-    /// This behaves similarly to [`contains`] if this slice is sorted.\n     ///\n     /// Assumes that the slice is sorted by the key, for instance with\n     /// [`sort_by_key`] using the same key extraction function.\n+    /// If the slice is not sorted by the key, the returned result is\n+    /// unspecified and meaningless.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n@@ -2563,7 +2564,6 @@ impl<T> [T] {\n     ///\n     /// See also [`binary_search`], [`binary_search_by`], and [`partition_point`].\n     ///\n-    /// [`contains`]: slice::contains\n     /// [`sort_by_key`]: slice::sort_by_key\n     /// [`binary_search`]: slice::binary_search\n     /// [`binary_search_by`]: slice::binary_search_by"}, {"sha": "cc2b45a9bdb5c6d552e65196ac2af526cd8d10da", "filename": "src/bootstrap/llvm.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/516a6d320270f03548c04c0707a00c998787de45/src%2Fbootstrap%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a6d320270f03548c04c0707a00c998787de45/src%2Fbootstrap%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fllvm.rs?ref=516a6d320270f03548c04c0707a00c998787de45", "patch": "@@ -434,11 +434,6 @@ impl Step for Llvm {\n             }\n         }\n \n-        // Workaround for ppc32 lld limitation\n-        if target == \"powerpc-unknown-freebsd\" {\n-            ldflags.exe.push(\" -fuse-ld=bfd\");\n-        }\n-\n         // https://llvm.org/docs/HowToCrossCompileLLVM.html\n         if target != builder.config.build {\n             let LlvmResult { llvm_config, .. } ="}, {"sha": "a8dcc6443461ec2101d0157275f88077f4dedd25", "filename": "src/doc/rustc/src/platform-support/openharmony.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/516a6d320270f03548c04c0707a00c998787de45/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fopenharmony.md", "raw_url": "https://github.com/rust-lang/rust/raw/516a6d320270f03548c04c0707a00c998787de45/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fopenharmony.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fopenharmony.md?ref=516a6d320270f03548c04c0707a00c998787de45", "patch": "@@ -1,4 +1,4 @@\n-# `*-linux-ohos*`\n+# `*-unknown-linux-ohos`\n \n **Tier: 3**\n "}, {"sha": "7048b0e08bbfd0e82b020ccf3175b1617ad347af", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/516a6d320270f03548c04c0707a00c998787de45/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a6d320270f03548c04c0707a00c998787de45/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=516a6d320270f03548c04c0707a00c998787de45", "patch": "@@ -12,6 +12,7 @@ use build_helper::git::{get_git_modified_files, get_git_untracked_files};\n use core::panic;\n use getopts::Options;\n use lazycell::LazyCell;\n+use std::collections::BTreeSet;\n use std::ffi::OsString;\n use std::fs;\n use std::io::{self, ErrorKind};\n@@ -409,7 +410,9 @@ pub fn run_tests(config: Config) {\n \n     let mut tests = Vec::new();\n     for c in &configs {\n-        make_tests(c, &mut tests);\n+        let mut found_paths = BTreeSet::new();\n+        make_tests(c, &mut tests, &mut found_paths);\n+        check_overlapping_tests(&found_paths);\n     }\n \n     tests.sort_by(|a, b| a.desc.name.as_slice().cmp(&b.desc.name.as_slice()));\n@@ -535,7 +538,11 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n     }\n }\n \n-pub fn make_tests(config: &Config, tests: &mut Vec<test::TestDescAndFn>) {\n+pub fn make_tests(\n+    config: &Config,\n+    tests: &mut Vec<test::TestDescAndFn>,\n+    found_paths: &mut BTreeSet<PathBuf>,\n+) {\n     debug!(\"making tests from {:?}\", config.src_base.display());\n     let inputs = common_inputs_stamp(config);\n     let modified_tests = modified_tests(config, &config.src_base).unwrap_or_else(|err| {\n@@ -547,6 +554,7 @@ pub fn make_tests(config: &Config, tests: &mut Vec<test::TestDescAndFn>) {\n         &PathBuf::new(),\n         &inputs,\n         tests,\n+        found_paths,\n         &modified_tests,\n     )\n     .unwrap_or_else(|_| panic!(\"Could not read tests from {}\", config.src_base.display()));\n@@ -617,6 +625,7 @@ fn collect_tests_from_dir(\n     relative_dir_path: &Path,\n     inputs: &Stamp,\n     tests: &mut Vec<test::TestDescAndFn>,\n+    found_paths: &mut BTreeSet<PathBuf>,\n     modified_tests: &Vec<PathBuf>,\n ) -> io::Result<()> {\n     // Ignore directories that contain a file named `compiletest-ignore-dir`.\n@@ -650,6 +659,8 @@ fn collect_tests_from_dir(\n         let file_name = file.file_name();\n         if is_test(&file_name) && (!config.only_modified || modified_tests.contains(&file_path)) {\n             debug!(\"found test file: {:?}\", file_path.display());\n+            let rel_test_path = relative_dir_path.join(file_path.file_stem().unwrap());\n+            found_paths.insert(rel_test_path);\n             let paths =\n                 TestPaths { file: file_path, relative_dir: relative_dir_path.to_path_buf() };\n \n@@ -664,6 +675,7 @@ fn collect_tests_from_dir(\n                     &relative_file_path,\n                     inputs,\n                     tests,\n+                    found_paths,\n                     modified_tests,\n                 )?;\n             }\n@@ -1079,3 +1091,24 @@ fn extract_lldb_version(full_version_line: &str) -> Option<(u32, bool)> {\n fn not_a_digit(c: char) -> bool {\n     !c.is_digit(10)\n }\n+\n+fn check_overlapping_tests(found_paths: &BTreeSet<PathBuf>) {\n+    let mut collisions = Vec::new();\n+    for path in found_paths {\n+        for ancestor in path.ancestors().skip(1) {\n+            if found_paths.contains(ancestor) {\n+                collisions.push((path, ancestor.clone()));\n+            }\n+        }\n+    }\n+    if !collisions.is_empty() {\n+        let collisions: String = collisions\n+            .into_iter()\n+            .map(|(path, check_parent)| format!(\"test {path:?} clashes with {check_parent:?}\\n\"))\n+            .collect();\n+        panic!(\n+            \"{collisions}\\n\\\n+            Tests cannot have overlapping names. Make sure they use unique prefixes.\"\n+        );\n+    }\n+}"}, {"sha": "516c7c0c6fe9bd40da798b32a95b1b6998ed672c", "filename": "tests/rustdoc/primitive/primitive.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/516a6d320270f03548c04c0707a00c998787de45/tests%2Frustdoc%2Fprimitive%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a6d320270f03548c04c0707a00c998787de45/tests%2Frustdoc%2Fprimitive%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fprimitive%2Fprimitive.rs?ref=516a6d320270f03548c04c0707a00c998787de45", "previous_filename": "tests/rustdoc/primitive.rs"}, {"sha": "5407fb6dd28040e099e56116c80fb4bd91b498a8", "filename": "tests/ui/impl-trait/multiple-lifetimes/multiple-lifetimes.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/516a6d320270f03548c04c0707a00c998787de45/tests%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fmultiple-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a6d320270f03548c04c0707a00c998787de45/tests%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fmultiple-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fmultiple-lifetimes.rs?ref=516a6d320270f03548c04c0707a00c998787de45", "previous_filename": "tests/ui/impl-trait/multiple-lifetimes.rs"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/modules_and_files_visibility/mod_file_disambig_aux/compiletest-ignore-dir", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/516a6d320270f03548c04c0707a00c998787de45/tests%2Fui%2Fmodules_and_files_visibility%2Fmod_file_disambig_aux%2Fcompiletest-ignore-dir", "raw_url": "https://github.com/rust-lang/rust/raw/516a6d320270f03548c04c0707a00c998787de45/tests%2Fui%2Fmodules_and_files_visibility%2Fmod_file_disambig_aux%2Fcompiletest-ignore-dir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodules_and_files_visibility%2Fmod_file_disambig_aux%2Fcompiletest-ignore-dir?ref=516a6d320270f03548c04c0707a00c998787de45"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/non_modrs_mods_and_inline_mods/x/y/z/compiletest-ignore-dir", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/516a6d320270f03548c04c0707a00c998787de45/tests%2Fui%2Fnon_modrs_mods_and_inline_mods%2Fx%2Fy%2Fz%2Fcompiletest-ignore-dir", "raw_url": "https://github.com/rust-lang/rust/raw/516a6d320270f03548c04c0707a00c998787de45/tests%2Fui%2Fnon_modrs_mods_and_inline_mods%2Fx%2Fy%2Fz%2Fcompiletest-ignore-dir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_modrs_mods_and_inline_mods%2Fx%2Fy%2Fz%2Fcompiletest-ignore-dir?ref=516a6d320270f03548c04c0707a00c998787de45"}, {"sha": "b8748cd433b18f13db4550fadd1415eab81ad304", "filename": "tests/ui/traits/new-solver/float-canonical.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/516a6d320270f03548c04c0707a00c998787de45/tests%2Fui%2Ftraits%2Fnew-solver%2Ffloat-canonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a6d320270f03548c04c0707a00c998787de45/tests%2Fui%2Ftraits%2Fnew-solver%2Ffloat-canonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Ffloat-canonical.rs?ref=516a6d320270f03548c04c0707a00c998787de45", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+fn foo(x: f64) {\n+    let y = x + 1.0;\n+}\n+\n+fn main() {}"}, {"sha": "e319ddea106bc792809eb51117fafb197b1db9df", "filename": "tests/ui/traits/new-solver/param-discr-kind.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/516a6d320270f03548c04c0707a00c998787de45/tests%2Fui%2Ftraits%2Fnew-solver%2Fparam-discr-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a6d320270f03548c04c0707a00c998787de45/tests%2Fui%2Ftraits%2Fnew-solver%2Fparam-discr-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fparam-discr-kind.rs?ref=516a6d320270f03548c04c0707a00c998787de45", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+fn foo<T>(x: T) {\n+    std::mem::discriminant(&x);\n+}\n+\n+fn main() {}"}, {"sha": "93c0542ace4bff372fd47f37bbe57b2e9ef1207e", "filename": "tests/ui/traits/new-solver/pointee.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/516a6d320270f03548c04c0707a00c998787de45/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a6d320270f03548c04c0707a00c998787de45/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointee.rs?ref=516a6d320270f03548c04c0707a00c998787de45", "patch": "@@ -7,17 +7,15 @@ use std::ptr::{DynMetadata, Pointee};\n trait Trait<U> {}\n struct MyDst<T: ?Sized>(T);\n \n-fn works<T>() {\n-    let _: <T as Pointee>::Metadata = ();\n-    let _: <[T] as Pointee>::Metadata = 1_usize;\n-    let _: <str as Pointee>::Metadata = 1_usize;\n-    let _: <dyn Trait<T> as Pointee>::Metadata = give::<DynMetadata<dyn Trait<T>>>();\n-    let _: <MyDst<T> as Pointee>::Metadata = ();\n-    let _: <((((([u8],),),),),) as Pointee>::Metadata = 1_usize;\n-}\n+fn meta_is<T: Pointee<Metadata = U> + ?Sized, U>() {}\n \n-fn give<U>() -> U {\n-    loop {}\n+fn works<T>() {\n+    meta_is::<T, ()>();\n+    meta_is::<[T], usize>();\n+    meta_is::<str, usize>();\n+    meta_is::<dyn Trait<T>, DynMetadata<dyn Trait<T>>>();\n+    meta_is::<MyDst<T>, ()>();\n+    meta_is::<((((([u8],),),),),), usize>();\n }\n \n fn main() {}"}, {"sha": "20296b287b17e8f419125860ea55e8d9bd697f95", "filename": "tests/ui/traits/new-solver/projection-discr-kind.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/516a6d320270f03548c04c0707a00c998787de45/tests%2Fui%2Ftraits%2Fnew-solver%2Fprojection-discr-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a6d320270f03548c04c0707a00c998787de45/tests%2Fui%2Ftraits%2Fnew-solver%2Fprojection-discr-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fprojection-discr-kind.rs?ref=516a6d320270f03548c04c0707a00c998787de45", "patch": "@@ -0,0 +1,18 @@\n+// compile-flags: -Ztrait-solver=next\n+\n+// Check that `<T::Assoc as DiscriminantKind>::Discriminant` doesn't normalize\n+// to itself and cause overflow/ambiguity.\n+\n+trait Foo {\n+    type Assoc;\n+}\n+\n+trait Bar {}\n+fn needs_bar(_: impl Bar) {}\n+\n+fn foo<T: Foo>(x: T::Assoc) {\n+    needs_bar(std::mem::discriminant(&x));\n+    //~^ ERROR the trait bound `Discriminant<<T as Foo>::Assoc>: Bar` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "03e28f993e25dccf2ad5fb393ca08d9dd39c72aa", "filename": "tests/ui/traits/new-solver/projection-discr-kind.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/516a6d320270f03548c04c0707a00c998787de45/tests%2Fui%2Ftraits%2Fnew-solver%2Fprojection-discr-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/516a6d320270f03548c04c0707a00c998787de45/tests%2Fui%2Ftraits%2Fnew-solver%2Fprojection-discr-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fprojection-discr-kind.stderr?ref=516a6d320270f03548c04c0707a00c998787de45", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the trait bound `Discriminant<<T as Foo>::Assoc>: Bar` is not satisfied\n+  --> $DIR/projection-discr-kind.rs:14:15\n+   |\n+LL |     needs_bar(std::mem::discriminant(&x));\n+   |     --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `Discriminant<<T as Foo>::Assoc>`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `needs_bar`\n+  --> $DIR/projection-discr-kind.rs:11:22\n+   |\n+LL | fn needs_bar(_: impl Bar) {}\n+   |                      ^^^ required by this bound in `needs_bar`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "87064c6a42b117b589b0f0d545a277012053a9b2", "filename": "tests/ui/use/use-mod/use-mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/516a6d320270f03548c04c0707a00c998787de45/tests%2Fui%2Fuse%2Fuse-mod%2Fuse-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a6d320270f03548c04c0707a00c998787de45/tests%2Fui%2Fuse%2Fuse-mod%2Fuse-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse%2Fuse-mod%2Fuse-mod.rs?ref=516a6d320270f03548c04c0707a00c998787de45", "previous_filename": "tests/ui/use/use-mod.rs"}, {"sha": "0cae5eb14aeebaccfde6421ff15258c5144aae8d", "filename": "tests/ui/use/use-mod/use-mod.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/516a6d320270f03548c04c0707a00c998787de45/tests%2Fui%2Fuse%2Fuse-mod%2Fuse-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/516a6d320270f03548c04c0707a00c998787de45/tests%2Fui%2Fuse%2Fuse-mod%2Fuse-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse%2Fuse-mod%2Fuse-mod.stderr?ref=516a6d320270f03548c04c0707a00c998787de45", "previous_filename": "tests/ui/use/use-mod.stderr"}, {"sha": "1beee4a514379f3f3ccf3273a2f4f6d159adfcac", "filename": "tests/ui/use/use.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/516a6d320270f03548c04c0707a00c998787de45/tests%2Fui%2Fuse%2Fuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a6d320270f03548c04c0707a00c998787de45/tests%2Fui%2Fuse%2Fuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse%2Fuse.rs?ref=516a6d320270f03548c04c0707a00c998787de45", "previous_filename": "tests/ui/use.rs"}]}