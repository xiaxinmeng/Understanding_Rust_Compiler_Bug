{"sha": "acbac845f8440a0a8b24daa5117de8dcd1c3cd6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYmFjODQ1Zjg0NDBhMGE4YjI0ZGFhNTExN2RlOGRjZDFjM2NkNmU=", "commit": {"author": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-07-30T19:21:55Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-31T18:50:23Z"}, "message": "Add logic to skip the doc tests on windows since these examples are unix-specific", "tree": {"sha": "0d1a4f894685cd252132e2bab1bf0d1363ebd763", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d1a4f894685cd252132e2bab1bf0d1363ebd763"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acbac845f8440a0a8b24daa5117de8dcd1c3cd6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acbac845f8440a0a8b24daa5117de8dcd1c3cd6e", "html_url": "https://github.com/rust-lang/rust/commit/acbac845f8440a0a8b24daa5117de8dcd1c3cd6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acbac845f8440a0a8b24daa5117de8dcd1c3cd6e/comments", "author": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0238d54aac73491a7b691cc8c797b23de09439c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0238d54aac73491a7b691cc8c797b23de09439c", "html_url": "https://github.com/rust-lang/rust/commit/a0238d54aac73491a7b691cc8c797b23de09439c"}], "stats": {"total": 124, "additions": 124, "deletions": 0}, "files": [{"sha": "a22db7292fa087ce7231afac9b09f5bcee72c189", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/acbac845f8440a0a8b24daa5117de8dcd1c3cd6e/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acbac845f8440a0a8b24daa5117de8dcd1c3cd6e/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=acbac845f8440a0a8b24daa5117de8dcd1c3cd6e", "patch": "@@ -145,7 +145,11 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let path = Path::new(\"foo/bar\");\n+    /// # }\n     /// ```\n     ///\n     /// # Failure\n@@ -165,8 +169,12 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let x: &[u8] = b\"foo\\0\";\n     /// assert!(Path::new_opt(x).is_none());\n+    /// # }\n     /// ```\n     #[inline]\n     fn new_opt<T: BytesContainer>(path: T) -> Option<Self> {\n@@ -183,8 +191,12 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let p = Path::new(\"/abc/def\");\n     /// assert_eq!(p.as_str(), Some(\"/abc/def\"));\n+    /// # }\n     /// ```\n     #[inline]\n     fn as_str<'a>(&'a self) -> Option<&'a str> {\n@@ -196,8 +208,12 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let p = Path::new(\"abc/def\");\n     /// assert_eq!(p.as_vec(), b\"abc/def\");\n+    /// # }\n     /// ```\n     fn as_vec<'a>(&'a self) -> &'a [u8];\n \n@@ -206,9 +222,13 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let p = Path::new(\"abc/def\");\n     /// assert_eq!(p.into_vec(), b\"abc/def\".to_vec());\n     /// // attempting to use p now results in \"error: use of moved value\"\n+    /// # }\n     /// ```\n     fn into_vec(self) -> Vec<u8>;\n \n@@ -217,8 +237,12 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let p = Path::new(\"abc/def\");\n     /// println!(\"{}\", p.display()); // prints \"abc/def\"\n+    /// # }\n     /// ```\n     fn display<'a>(&'a self) -> Display<'a, Self> {\n         Display{ path: self, filename: false }\n@@ -231,8 +255,12 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let p = Path::new(\"abc/def\");\n     /// println!(\"{}\", p.filename_display()); // prints \"def\"\n+    /// # }\n     /// ```\n     fn filename_display<'a>(&'a self) -> Display<'a, Self> {\n         Display{ path: self, filename: true }\n@@ -244,8 +272,12 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let p = Path::new(\"abc/def/ghi\");\n     /// assert_eq!(p.dirname(), b\"abc/def\");\n+    /// # }\n     /// ```\n     fn dirname<'a>(&'a self) -> &'a [u8];\n \n@@ -255,8 +287,12 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let p = Path::new(\"abc/def/ghi\");\n     /// assert_eq!(p.dirname_str(), Some(\"abc/def\"));\n+    /// # }\n     /// ```\n     #[inline]\n     fn dirname_str<'a>(&'a self) -> Option<&'a str> {\n@@ -270,8 +306,12 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let p = Path::new(\"abc/def/ghi\");\n     /// assert_eq!(p.filename(), Some(b\"ghi\"));\n+    /// # }\n     /// ```\n     fn filename<'a>(&'a self) -> Option<&'a [u8]>;\n \n@@ -281,8 +321,12 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let p = Path::new(\"abc/def/ghi\");\n     /// assert_eq!(p.filename_str(), Some(\"ghi\"));\n+    /// # }\n     /// ```\n     #[inline]\n     fn filename_str<'a>(&'a self) -> Option<&'a str> {\n@@ -296,8 +340,12 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let p = Path::new(\"/abc/def.txt\");\n     /// assert_eq!(p.filestem(), Some(b\"def\"));\n+    /// # }\n     /// ```\n     fn filestem<'a>(&'a self) -> Option<&'a [u8]> {\n         match self.filename() {\n@@ -319,8 +367,12 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let p = Path::new(\"/abc/def.txt\");\n     /// assert_eq!(p.filestem_str(), Some(\"def\"));\n+    /// # }\n     /// ```\n     #[inline]\n     fn filestem_str<'a>(&'a self) -> Option<&'a str> {\n@@ -335,8 +387,12 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let p = Path::new(\"abc/def.txt\");\n     /// assert_eq!(p.extension(), Some(b\"txt\"));\n+    /// # }\n     /// ```\n     fn extension<'a>(&'a self) -> Option<&'a [u8]> {\n         match self.filename() {\n@@ -358,8 +414,12 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let p = Path::new(\"abc/def.txt\");\n     /// assert_eq!(p.extension_str(), Some(\"txt\"));\n+    /// # }\n     /// ```\n     #[inline]\n     fn extension_str<'a>(&'a self) -> Option<&'a str> {\n@@ -372,9 +432,13 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let mut p = Path::new(\"abc/def.txt\");\n     /// p.set_filename(\"foo.dat\");\n     /// assert!(p == Path::new(\"abc/foo.dat\"));\n+    /// # }\n     /// ```\n     ///\n     /// # Failure\n@@ -394,9 +458,13 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let mut p = Path::new(\"abc/def.txt\");\n     /// p.set_extension(\"csv\");\n     /// assert!(p == Path::new(\"abc/def.csv\"));\n+    /// # }\n     /// ```\n     ///\n     /// # Failure\n@@ -440,8 +508,12 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let mut p = Path::new(\"abc/def.txt\");\n     /// assert!(p.with_filename(\"foo.dat\") == Path::new(\"abc/foo.dat\"));\n+    /// # }\n     /// ```\n     ///\n     /// # Failure\n@@ -461,8 +533,12 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let mut p = Path::new(\"abc/def.txt\");\n     /// assert!(p.with_extension(\"csv\") == Path::new(\"abc/def.csv\"));\n+    /// # }\n     /// ```\n     ///\n     /// # Failure\n@@ -481,8 +557,12 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let p = Path::new(\"abc/def/ghi\");\n     /// assert!(p.dir_path() == Path::new(\"abc/def\"));\n+    /// # }\n     /// ```\n     fn dir_path(&self) -> Self {\n         // self.dirname() returns a NUL-free vector\n@@ -496,8 +576,12 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// assert!(Path::new(\"abc/def\").root_path() == None);\n     /// assert!(Path::new(\"/abc/def\").root_path() == Some(Path::new(\"/\")));\n+    /// # }\n     /// ```\n     fn root_path(&self) -> Option<Self>;\n \n@@ -507,9 +591,13 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let mut p = Path::new(\"foo/bar\");\n     /// p.push(\"baz.txt\");\n     /// assert!(p == Path::new(\"foo/bar/baz.txt\"));\n+    /// # }\n     /// ```\n     ///\n     /// # Failure\n@@ -527,9 +615,13 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let mut p = Path::new(\"foo\");\n     /// p.push_many(&[\"bar\", \"baz.txt\"]);\n     /// assert!(p == Path::new(\"foo/bar/baz.txt\"));\n+    /// # }\n     /// ```\n     #[inline]\n     fn push_many<T: BytesContainer>(&mut self, paths: &[T]) {\n@@ -552,9 +644,13 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let mut p = Path::new(\"foo/bar/baz.txt\");\n     /// p.pop();\n     /// assert!(p == Path::new(\"foo/bar\"));\n+    /// # }\n     /// ```\n     fn pop(&mut self) -> bool;\n \n@@ -565,8 +661,12 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let p = Path::new(\"/foo\");\n     /// assert!(p.join(\"bar.txt\") == Path::new(\"/foo/bar.txt\"));\n+    /// # }\n     /// ```\n     ///\n     /// # Failure\n@@ -586,9 +686,13 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let p = Path::new(\"foo\");\n     /// let fbbq = Path::new(\"foo/bar/baz/quux.txt\");\n     /// assert!(p.join_many(&[\"bar\", \"baz\", \"quux.txt\"]) == fbbq);\n+    /// # }\n     /// ```\n     #[inline]\n     fn join_many<T: BytesContainer>(&self, paths: &[T]) -> Self {\n@@ -604,8 +708,12 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let p = Path::new(\"/abc/def\");\n     /// assert!(p.is_absolute());\n+    /// # }\n     /// ```\n     fn is_absolute(&self) -> bool;\n \n@@ -617,8 +725,12 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let p = Path::new(\"abc/def\");\n     /// assert!(p.is_relative());\n+    /// # }\n     /// ```\n     fn is_relative(&self) -> bool {\n         !self.is_absolute()\n@@ -631,10 +743,14 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let p = Path::new(\"foo/bar/baz/quux.txt\");\n     /// let fb = Path::new(\"foo/bar\");\n     /// let bq = Path::new(\"baz/quux.txt\");\n     /// assert!(fb.is_ancestor_of(&p));\n+    /// # }\n     /// ```\n     fn is_ancestor_of(&self, other: &Self) -> bool;\n \n@@ -646,10 +762,14 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let p = Path::new(\"foo/bar/baz/quux.txt\");\n     /// let fb = Path::new(\"foo/bar\");\n     /// let bq = Path::new(\"baz/quux.txt\");\n     /// assert!(p.path_relative_from(&fb) == Some(bq));\n+    /// # }\n     /// ```\n     fn path_relative_from(&self, base: &Self) -> Option<Self>;\n \n@@ -658,9 +778,13 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n+    /// # foo();\n+    /// # #[cfg(windows)] fn foo() {}\n+    /// # #[cfg(unix)] fn foo() {\n     /// let p = Path::new(\"foo/bar/baz/quux.txt\");\n     /// let bq = Path::new(\"baz/quux.txt\");\n     /// assert!(p.ends_with_path(&bq));\n+    /// # }\n     /// ```\n     fn ends_with_path(&self, child: &Self) -> bool;\n }"}]}