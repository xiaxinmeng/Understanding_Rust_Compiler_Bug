{"sha": "47b9fc278e97435c6ad9044250dde372bc231750", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3YjlmYzI3OGU5NzQzNWM2YWQ5MDQ0MjUwZGRlMzcyYmMyMzE3NTA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-17T22:37:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-17T23:13:43Z"}, "message": "rustc: --test overrides the crate_type attribute", "tree": {"sha": "5ffd351ddb1c31d3cc6616855a3758a924c32ba8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ffd351ddb1c31d3cc6616855a3758a924c32ba8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47b9fc278e97435c6ad9044250dde372bc231750", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47b9fc278e97435c6ad9044250dde372bc231750", "html_url": "https://github.com/rust-lang/rust/commit/47b9fc278e97435c6ad9044250dde372bc231750", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47b9fc278e97435c6ad9044250dde372bc231750/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af4e18d980725a2f3a6324b1f9a16c19222e17fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/af4e18d980725a2f3a6324b1f9a16c19222e17fd", "html_url": "https://github.com/rust-lang/rust/commit/af4e18d980725a2f3a6324b1f9a16c19222e17fd"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "5a771abc24f8d8c05e0e8b1fc0c1512ec7caecd0", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47b9fc278e97435c6ad9044250dde372bc231750/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47b9fc278e97435c6ad9044250dde372bc231750/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=47b9fc278e97435c6ad9044250dde372bc231750", "patch": "@@ -147,8 +147,8 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n         time(time_passes, \"parsing\", bind parse_input(sess, cfg, input));\n     if upto == cu_parse { ret {crate: crate, tcx: none, src: src}; }\n \n-    sess.building_library =\n-        session::building_library(sess.opts.crate_type, crate);\n+    sess.building_library = session::building_library(\n+        sess.opts.crate_type, crate, sess.opts.test);\n \n     crate =\n         time(time_passes, \"configuration\","}, {"sha": "0d2679999fff31facfde7ddb1ebc8e0cfe01b78d", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/47b9fc278e97435c6ad9044250dde372bc231750/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47b9fc278e97435c6ad9044250dde372bc231750/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=47b9fc278e97435c6ad9044250dde372bc231750", "patch": "@@ -111,16 +111,21 @@ impl session for session {\n     }\n }\n \n-fn building_library(req_crate_type: crate_type, crate: @ast::crate) -> bool {\n+fn building_library(req_crate_type: crate_type, crate: @ast::crate,\n+                    testing: bool) -> bool {\n     alt req_crate_type {\n       bin_crate. { false }\n       lib_crate. { true }\n       unknown_crate. {\n-        alt front::attr::get_meta_item_value_str_by_name(\n-            crate.node.attrs,\n-            \"crate_type\") {\n-          option::some(\"lib\") { true }\n-          _ { false }\n+        if testing {\n+            false\n+        } else {\n+            alt front::attr::get_meta_item_value_str_by_name(\n+                crate.node.attrs,\n+                \"crate_type\") {\n+              option::some(\"lib\") { true }\n+              _ { false }\n+            }\n         }\n       }\n     }\n@@ -156,31 +161,43 @@ mod test {\n     #[test]\n     fn bin_crate_type_attr_results_in_bin_output() {\n         let crate = make_crate(true, false);\n-        assert !building_library(unknown_crate, crate);\n+        assert !building_library(unknown_crate, crate, false);\n     }\n \n     #[test]\n     fn lib_crate_type_attr_results_in_lib_output() {\n         let crate = make_crate(false, true);\n-        assert building_library(unknown_crate, crate);\n+        assert building_library(unknown_crate, crate, false);\n     }\n \n     #[test]\n     fn bin_option_overrides_lib_crate_type() {\n         let crate = make_crate(false, true);\n-        assert !building_library(bin_crate, crate);\n+        assert !building_library(bin_crate, crate, false);\n     }\n \n     #[test]\n     fn lib_option_overrides_bin_crate_type() {\n         let crate = make_crate(true, false);\n-        assert building_library(lib_crate, crate);\n+        assert building_library(lib_crate, crate, false);\n     }\n \n     #[test]\n     fn bin_crate_type_is_default() {\n         let crate = make_crate(false, false);\n-        assert !building_library(unknown_crate, crate);\n+        assert !building_library(unknown_crate, crate, false);\n+    }\n+\n+    #[test]\n+    fn test_option_overrides_lib_crate_type() {\n+        let crate = make_crate(false, true);\n+        assert !building_library(unknown_crate, crate, true);\n+    }\n+\n+    #[test]\n+    fn test_option_does_not_override_requested_lib_type() {\n+        let crate = make_crate(false, false);\n+        assert building_library(lib_crate, crate, true);\n     }\n }\n "}]}