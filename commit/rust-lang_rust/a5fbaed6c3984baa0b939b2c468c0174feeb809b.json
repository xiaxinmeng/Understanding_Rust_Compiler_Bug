{"sha": "a5fbaed6c3984baa0b939b2c468c0174feeb809b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZmJhZWQ2YzM5ODRiYWEwYjkzOWIyYzQ2OGMwMTc0ZmVlYjgwOWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-04T22:30:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-04T22:30:19Z"}, "message": "Auto merge of #79673 - ijackson:intoinnerintoinnererror, r=m-ou-se\n\nProvide IntoInnerError::into_parts\n\nHi.  This is an updated version of the IntoInnerError bits of my previous portmanteau MR #78689.  Thanks to `@jyn514` and `@m-ou-se` for helpful comments there.\n\nI have made this insta-stable since it seems like it will probably be uncontroversial, but that is definitely something that someone from the libs API team should be aware of and explicitly consider.\n\nI included a tangentially-related commit providing documentation of the buffer full behaviiour of `&mut [u8] as Write`; the behaviour I am documenting is relied on by the doctest for `into_parts`.", "tree": {"sha": "9d1515796ac5d6e53a68e32c58ed49d7e7a8922b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d1515796ac5d6e53a68e32c58ed49d7e7a8922b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5fbaed6c3984baa0b939b2c468c0174feeb809b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5fbaed6c3984baa0b939b2c468c0174feeb809b", "html_url": "https://github.com/rust-lang/rust/commit/a5fbaed6c3984baa0b939b2c468c0174feeb809b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5fbaed6c3984baa0b939b2c468c0174feeb809b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ff10e74a74ed093fcabac1de27fe1cd65bbbb4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ff10e74a74ed093fcabac1de27fe1cd65bbbb4a", "html_url": "https://github.com/rust-lang/rust/commit/3ff10e74a74ed093fcabac1de27fe1cd65bbbb4a"}, {"sha": "b777552167d2651ceb13437f9fde4dca95045912", "url": "https://api.github.com/repos/rust-lang/rust/commits/b777552167d2651ceb13437f9fde4dca95045912", "html_url": "https://github.com/rust-lang/rust/commit/b777552167d2651ceb13437f9fde4dca95045912"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "65497817f8160d55c688275fbd19763cbbe1dd02", "filename": "library/std/src/io/buffered/mod.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a5fbaed6c3984baa0b939b2c468c0174feeb809b/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5fbaed6c3984baa0b939b2c468c0174feeb809b/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fmod.rs?ref=a5fbaed6c3984baa0b939b2c468c0174feeb809b", "patch": "@@ -126,6 +126,51 @@ impl<W> IntoInnerError<W> {\n     pub fn into_inner(self) -> W {\n         self.0\n     }\n+\n+    /// Consumes the [`IntoInnerError`] and returns the error which caused the call to\n+    /// [`BufWriter::into_inner()`] to fail.  Unlike `error`, this can be used to\n+    /// obtain ownership of the underlying error.\n+    ///\n+    /// # Example\n+    /// ```\n+    /// #![feature(io_into_inner_error_parts)]\n+    /// use std::io::{BufWriter, ErrorKind, Write};\n+    ///\n+    /// let mut not_enough_space = [0u8; 10];\n+    /// let mut stream = BufWriter::new(not_enough_space.as_mut());\n+    /// write!(stream, \"this cannot be actually written\").unwrap();\n+    /// let into_inner_err = stream.into_inner().expect_err(\"now we discover it's too small\");\n+    /// let err = into_inner_err.into_error();\n+    /// assert_eq!(err.kind(), ErrorKind::WriteZero);\n+    /// ```\n+    #[unstable(feature = \"io_into_inner_error_parts\", issue = \"79704\")]\n+    pub fn into_error(self) -> Error {\n+        self.1\n+    }\n+\n+    /// Consumes the [`IntoInnerError`] and returns the error which caused the call to\n+    /// [`BufWriter::into_inner()`] to fail, and the underlying writer.\n+    ///\n+    /// This can be used to simply obtain ownership of the underlying error; it can also be used for\n+    /// advanced error recovery.\n+    ///\n+    /// # Example\n+    /// ```\n+    /// #![feature(io_into_inner_error_parts)]\n+    /// use std::io::{BufWriter, ErrorKind, Write};\n+    ///\n+    /// let mut not_enough_space = [0u8; 10];\n+    /// let mut stream = BufWriter::new(not_enough_space.as_mut());\n+    /// write!(stream, \"this cannot be actually written\").unwrap();\n+    /// let into_inner_err = stream.into_inner().expect_err(\"now we discover it's too small\");\n+    /// let (err, recovered_writer) = into_inner_err.into_parts();\n+    /// assert_eq!(err.kind(), ErrorKind::WriteZero);\n+    /// assert_eq!(recovered_writer.buffer(), b\"t be actually written\");\n+    /// ```\n+    #[unstable(feature = \"io_into_inner_error_parts\", issue = \"79704\")]\n+    pub fn into_parts(self) -> (Error, W) {\n+        (self.1, self.0)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "00bf8b9af7384edcb567c256631b27c3b777644b", "filename": "library/std/src/io/impls.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5fbaed6c3984baa0b939b2c468c0174feeb809b/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5fbaed6c3984baa0b939b2c468c0174feeb809b/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs?ref=a5fbaed6c3984baa0b939b2c468c0174feeb809b", "patch": "@@ -306,6 +306,10 @@ impl BufRead for &[u8] {\n ///\n /// Note that writing updates the slice to point to the yet unwritten part.\n /// The slice will be empty when it has been completely overwritten.\n+///\n+/// If the number of bytes to be written exceeds the size of the slice, write operations will\n+/// return short writes: ultimately, `Ok(0)`; in this situation, `write_all` returns an error of\n+/// kind `ErrorKind::WriteZero`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for &mut [u8] {\n     #[inline]"}]}